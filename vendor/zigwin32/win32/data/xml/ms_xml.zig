//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (552)
//--------------------------------------------------------------------------------
pub const E_XML_NOTWF = @as(i32, -1072897501);
pub const E_XML_NODTD = @as(i32, -1072897500);
pub const E_XML_INVALID = @as(i32, -1072897499);
pub const E_XML_BUFFERTOOSMALL = @as(i32, -1072897498);
pub const XHR_PROP_ONDATA_ALWAYS = @as(u32, 0);
pub const XHR_PROP_ONDATA_NEVER = @as(u64, 18446744073709551615);
pub const DISPID_XOBJ_MIN = @as(u32, 65536);
pub const DISPID_XOBJ_MAX = @as(u32, 131071);
pub const DISPID_XOBJ_BASE = @as(u32, 65536);
pub const DISPID_XMLELEMENTCOLLECTION = @as(u32, 65536);
pub const DISPID_XMLELEMENTCOLLECTION_LENGTH = @as(u32, 65537);
pub const DISPID_XMLELEMENTCOLLECTION_NEWENUM = @as(i32, -4);
pub const DISPID_XMLELEMENTCOLLECTION_ITEM = @as(u32, 65539);
pub const DISPID_XMLDOCUMENT = @as(u32, 65636);
pub const DISPID_XMLDOCUMENT_ROOT = @as(u32, 65637);
pub const DISPID_XMLDOCUMENT_FILESIZE = @as(u32, 65638);
pub const DISPID_XMLDOCUMENT_FILEMODIFIEDDATE = @as(u32, 65639);
pub const DISPID_XMLDOCUMENT_FILEUPDATEDDATE = @as(u32, 65640);
pub const DISPID_XMLDOCUMENT_URL = @as(u32, 65641);
pub const DISPID_XMLDOCUMENT_MIMETYPE = @as(u32, 65642);
pub const DISPID_XMLDOCUMENT_READYSTATE = @as(u32, 65643);
pub const DISPID_XMLDOCUMENT_CREATEELEMENT = @as(u32, 65644);
pub const DISPID_XMLDOCUMENT_CHARSET = @as(u32, 65645);
pub const DISPID_XMLDOCUMENT_VERSION = @as(u32, 65646);
pub const DISPID_XMLDOCUMENT_DOCTYPE = @as(u32, 65647);
pub const DISPID_XMLDOCUMENT_DTDURL = @as(u32, 65648);
pub const DISPID_XMLDOCUMENT_ASYNC = @as(u32, 65649);
pub const DISPID_XMLDOCUMENT_CASEINSENSITIVE = @as(u32, 65650);
pub const DISPID_XMLDOCUMENT_BASEURL = @as(u32, 65651);
pub const DISPID_XMLDOCUMENT_XML = @as(u32, 65652);
pub const DISPID_XMLDOCUMENT_LASTERROR = @as(u32, 65653);
pub const DISPID_XMLDOCUMENT_TRIMWHITESPACE = @as(u32, 65654);
pub const DISPID_XMLDOCUMENT_COMMIT = @as(u32, 65655);
pub const DISPID_XMLELEMENT = @as(u32, 65736);
pub const DISPID_XMLELEMENT_TAGNAME = @as(u32, 65737);
pub const DISPID_XMLELEMENT_PARENT = @as(u32, 65738);
pub const DISPID_XMLELEMENT_SETATTRIBUTE = @as(u32, 65739);
pub const DISPID_XMLELEMENT_GETATTRIBUTE = @as(u32, 65740);
pub const DISPID_XMLELEMENT_REMOVEATTRIBUTE = @as(u32, 65741);
pub const DISPID_XMLELEMENT_CHILDREN = @as(u32, 65742);
pub const DISPID_XMLELEMENT_TYPE = @as(u32, 65743);
pub const DISPID_XMLELEMENT_TEXT = @as(u32, 65744);
pub const DISPID_XMLELEMENT_ADDCHILD = @as(u32, 65745);
pub const DISPID_XMLELEMENT_REMOVECHILD = @as(u32, 65746);
pub const DISPID_XMLELEMENT_ATTRIBUTES = @as(u32, 65747);
pub const DISPID_XMLNOTIFSINK = @as(u32, 65836);
pub const DISPID_XMLNOTIFSINK_CHILDADDED = @as(u32, 65837);
pub const DISPID_XMLATTRIBUTE = @as(u32, 65936);
pub const DISPID_XMLATTRIBUTE_NAME = @as(u32, 65937);
pub const DISPID_XMLATTRIBUTE_VALUE = @as(u32, 65938);
pub const DISPID_XMLERROR = @as(u32, 65936);
pub const DISPID_XMLERROR_REASON = @as(u32, 65937);
pub const DISPID_XMLERROR_LINE = @as(u32, 65938);
pub const DISPID_XMLERROR_POS = @as(u32, 65939);
pub const DISPID_NODE = @as(u32, 66036);
pub const DISPID_NODE_NAME = @as(u32, 66037);
pub const DISPID_NODE_PARENT = @as(u32, 66038);
pub const DISPID_NODE_TYPE = @as(u32, 66039);
pub const DISPID_NODE_VALUE = @as(u32, 66040);
pub const DISPID_NODE_SETATTRIBUTE = @as(u32, 66041);
pub const DISPID_NODE_GETATTRIBUTE = @as(u32, 66042);
pub const DISPID_NODE_REMOVEATTRIBUTE = @as(u32, 66043);
pub const DISPID_NODE_ATTRIBUTES = @as(u32, 66044);
pub const DISPID_NODE_ADD = @as(u32, 66045);
pub const DISPID_NODE_REMOVE = @as(u32, 66046);
pub const DISPID_NODE_CHILDREN = @as(u32, 66047);
pub const DISPID_NODELIST = @as(u32, 66136);
pub const DISPID_NODELIST_NEWENUM = @as(u32, 66137);
pub const DISPID_NODELIST_NEXT = @as(u32, 66138);
pub const DISPID_NODELIST_CURRENT = @as(u32, 66139);
pub const DISPID_NODELIST_MOVE = @as(u32, 66140);
pub const DISPID_NODELIST_MOVETONODE = @as(u32, 66141);
pub const DISPID_NODELIST_LENGTH = @as(u32, 66142);
pub const DISPID_NODELIST_ITEM = @as(u32, 66143);
pub const DISPID_DOM_BASE = @as(u32, 1);
pub const DISPID_DOM_COLLECTION_BASE = @as(u32, 1000000);
pub const DISPID_DOM_COLLECTION_MAX = @as(u32, 2999999);
pub const DISPID_DOM_NODE = @as(u32, 1);
pub const DISPID_DOM_NODE_NODENAME = @as(u32, 2);
pub const DISPID_DOM_NODE_NODEVALUE = @as(u32, 3);
pub const DISPID_DOM_NODE_NODETYPE = @as(u32, 4);
pub const DISPID_DOM_NODE_NODETYPEENUM = @as(u32, 5);
pub const DISPID_DOM_NODE_PARENTNODE = @as(u32, 6);
pub const DISPID_DOM_NODE_CHILDNODES = @as(u32, 7);
pub const DISPID_DOM_NODE_FIRSTCHILD = @as(u32, 8);
pub const DISPID_DOM_NODE_LASTCHILD = @as(u32, 9);
pub const DISPID_DOM_NODE_PREVIOUSSIBLING = @as(u32, 10);
pub const DISPID_DOM_NODE_NEXTSIBLING = @as(u32, 11);
pub const DISPID_DOM_NODE_ATTRIBUTES = @as(u32, 12);
pub const DISPID_DOM_NODE_INSERTBEFORE = @as(u32, 13);
pub const DISPID_DOM_NODE_REPLACECHILD = @as(u32, 14);
pub const DISPID_DOM_NODE_REMOVECHILD = @as(u32, 15);
pub const DISPID_DOM_NODE_APPENDCHILD = @as(u32, 16);
pub const DISPID_DOM_NODE_HASCHILDNODES = @as(u32, 17);
pub const DISPID_DOM_NODE_OWNERDOC = @as(u32, 18);
pub const DISPID_DOM_NODE_CLONENODE = @as(u32, 19);
pub const DISPID_XMLDOM_NODE = @as(u32, 20);
pub const DISPID_XMLDOM_NODE_STRINGTYPE = @as(u32, 21);
pub const DISPID_XMLDOM_NODE_SPECIFIED = @as(u32, 22);
pub const DISPID_XMLDOM_NODE_DEFINITION = @as(u32, 23);
pub const DISPID_XMLDOM_NODE_TEXT = @as(u32, 24);
pub const DISPID_XMLDOM_NODE_NODETYPEDVALUE = @as(u32, 25);
pub const DISPID_XMLDOM_NODE_DATATYPE = @as(u32, 26);
pub const DISPID_XMLDOM_NODE_XML = @as(u32, 27);
pub const DISPID_XMLDOM_NODE_TRANSFORMNODE = @as(u32, 28);
pub const DISPID_XMLDOM_NODE_SELECTNODES = @as(u32, 29);
pub const DISPID_XMLDOM_NODE_SELECTSINGLENODE = @as(u32, 30);
pub const DISPID_XMLDOM_NODE_PARSED = @as(u32, 31);
pub const DISPID_XMLDOM_NODE_NAMESPACE = @as(u32, 32);
pub const DISPID_XMLDOM_NODE_PREFIX = @as(u32, 33);
pub const DISPID_XMLDOM_NODE_BASENAME = @as(u32, 34);
pub const DISPID_XMLDOM_NODE_TRANSFORMNODETOOBJECT = @as(u32, 35);
pub const DISPID_XMLDOM_NODE__TOP = @as(u32, 36);
pub const DISPID_DOM_DOCUMENT = @as(u32, 37);
pub const DISPID_DOM_DOCUMENT_DOCTYPE = @as(u32, 38);
pub const DISPID_DOM_DOCUMENT_IMPLEMENTATION = @as(u32, 39);
pub const DISPID_DOM_DOCUMENT_DOCUMENTELEMENT = @as(u32, 40);
pub const DISPID_DOM_DOCUMENT_CREATEELEMENT = @as(u32, 41);
pub const DISPID_DOM_DOCUMENT_CREATEDOCUMENTFRAGMENT = @as(u32, 42);
pub const DISPID_DOM_DOCUMENT_CREATETEXTNODE = @as(u32, 43);
pub const DISPID_DOM_DOCUMENT_CREATECOMMENT = @as(u32, 44);
pub const DISPID_DOM_DOCUMENT_CREATECDATASECTION = @as(u32, 45);
pub const DISPID_DOM_DOCUMENT_CREATEPROCESSINGINSTRUCTION = @as(u32, 46);
pub const DISPID_DOM_DOCUMENT_CREATEATTRIBUTE = @as(u32, 47);
pub const DISPID_DOM_DOCUMENT_CREATEENTITY = @as(u32, 48);
pub const DISPID_DOM_DOCUMENT_CREATEENTITYREFERENCE = @as(u32, 49);
pub const DISPID_DOM_DOCUMENT_GETELEMENTSBYTAGNAME = @as(u32, 50);
pub const DISPID_DOM_DOCUMENT_TOP = @as(u32, 51);
pub const DISPID_XMLDOM_DOCUMENT = @as(u32, 52);
pub const DISPID_XMLDOM_DOCUMENT_DOCUMENTNODE = @as(u32, 53);
pub const DISPID_XMLDOM_DOCUMENT_CREATENODE = @as(u32, 54);
pub const DISPID_XMLDOM_DOCUMENT_CREATENODEEX = @as(u32, 55);
pub const DISPID_XMLDOM_DOCUMENT_NODEFROMID = @as(u32, 56);
pub const DISPID_XMLDOM_DOCUMENT_DOCUMENTNAMESPACES = @as(u32, 57);
pub const DISPID_XMLDOM_DOCUMENT_LOAD = @as(u32, 58);
pub const DISPID_XMLDOM_DOCUMENT_PARSEERROR = @as(u32, 59);
pub const DISPID_XMLDOM_DOCUMENT_URL = @as(u32, 60);
pub const DISPID_XMLDOM_DOCUMENT_ASYNC = @as(u32, 61);
pub const DISPID_XMLDOM_DOCUMENT_ABORT = @as(u32, 62);
pub const DISPID_XMLDOM_DOCUMENT_LOADXML = @as(u32, 63);
pub const DISPID_XMLDOM_DOCUMENT_SAVE = @as(u32, 64);
pub const DISPID_XMLDOM_DOCUMENT_VALIDATE = @as(u32, 65);
pub const DISPID_XMLDOM_DOCUMENT_RESOLVENAMESPACE = @as(u32, 66);
pub const DISPID_XMLDOM_DOCUMENT_PRESERVEWHITESPACE = @as(u32, 67);
pub const DISPID_XMLDOM_DOCUMENT_ONREADYSTATECHANGE = @as(u32, 68);
pub const DISPID_XMLDOM_DOCUMENT_ONDATAAVAILABLE = @as(u32, 69);
pub const DISPID_XMLDOM_DOCUMENT_ONTRANSFORMNODE = @as(u32, 70);
pub const DISPID_XMLDOM_DOCUMENT__TOP = @as(u32, 71);
pub const DISPID_DOM_NODELIST = @as(u32, 72);
pub const DISPID_DOM_NODELIST_ITEM = @as(u32, 73);
pub const DISPID_DOM_NODELIST_LENGTH = @as(u32, 74);
pub const DISPID_XMLDOM_NODELIST = @as(u32, 75);
pub const DISPID_XMLDOM_NODELIST_NEXTNODE = @as(u32, 76);
pub const DISPID_XMLDOM_NODELIST_RESET = @as(u32, 77);
pub const DISPID_XMLDOM_NODELIST_NEWENUM = @as(u32, 78);
pub const DISPID_XMLDOM_NODELIST__TOP = @as(u32, 79);
pub const DISPID_DOM_NAMEDNODEMAP = @as(u32, 80);
pub const DISPID_DOM_NAMEDNODEMAP_GETNAMEDITEM = @as(u32, 83);
pub const DISPID_DOM_NAMEDNODEMAP_SETNAMEDITEM = @as(u32, 84);
pub const DISPID_DOM_NAMEDNODEMAP_REMOVENAMEDITEM = @as(u32, 85);
pub const DISPID_XMLDOM_NAMEDNODEMAP = @as(u32, 86);
pub const DISPID_XMLDOM_NAMEDNODEMAP_GETQUALIFIEDITEM = @as(u32, 87);
pub const DISPID_XMLDOM_NAMEDNODEMAP_REMOVEQUALIFIEDITEM = @as(u32, 88);
pub const DISPID_XMLDOM_NAMEDNODEMAP_NEXTNODE = @as(u32, 89);
pub const DISPID_XMLDOM_NAMEDNODEMAP_RESET = @as(u32, 90);
pub const DISPID_XMLDOM_NAMEDNODEMAP_NEWENUM = @as(u32, 91);
pub const DISPID_XMLDOM_NAMEDNODEMAP__TOP = @as(u32, 92);
pub const DISPID_DOM_W3CWRAPPERS = @as(u32, 93);
pub const DISPID_DOM_DOCUMENTFRAGMENT = @as(u32, 94);
pub const DISPID_DOM_DOCUMENTFRAGMENT__TOP = @as(u32, 95);
pub const DISPID_DOM_ELEMENT = @as(u32, 96);
pub const DISPID_DOM_ELEMENT_GETTAGNAME = @as(u32, 97);
pub const DISPID_DOM_ELEMENT_GETATTRIBUTES = @as(u32, 98);
pub const DISPID_DOM_ELEMENT_GETATTRIBUTE = @as(u32, 99);
pub const DISPID_DOM_ELEMENT_SETATTRIBUTE = @as(u32, 100);
pub const DISPID_DOM_ELEMENT_REMOVEATTRIBUTE = @as(u32, 101);
pub const DISPID_DOM_ELEMENT_GETATTRIBUTENODE = @as(u32, 102);
pub const DISPID_DOM_ELEMENT_SETATTRIBUTENODE = @as(u32, 103);
pub const DISPID_DOM_ELEMENT_REMOVEATTRIBUTENODE = @as(u32, 104);
pub const DISPID_DOM_ELEMENT_GETELEMENTSBYTAGNAME = @as(u32, 105);
pub const DISPID_DOM_ELEMENT_NORMALIZE = @as(u32, 106);
pub const DISPID_DOM_ELEMENT__TOP = @as(u32, 107);
pub const DISPID_DOM_DATA = @as(u32, 108);
pub const DISPID_DOM_DATA_DATA = @as(u32, 109);
pub const DISPID_DOM_DATA_LENGTH = @as(u32, 110);
pub const DISPID_DOM_DATA_SUBSTRING = @as(u32, 111);
pub const DISPID_DOM_DATA_APPEND = @as(u32, 112);
pub const DISPID_DOM_DATA_INSERT = @as(u32, 113);
pub const DISPID_DOM_DATA_DELETE = @as(u32, 114);
pub const DISPID_DOM_DATA_REPLACE = @as(u32, 115);
pub const DISPID_DOM_DATA__TOP = @as(u32, 116);
pub const DISPID_DOM_ATTRIBUTE = @as(u32, 117);
pub const DISPID_DOM_ATTRIBUTE_GETNAME = @as(u32, 118);
pub const DISPID_DOM_ATTRIBUTE_SPECIFIED = @as(u32, 119);
pub const DISPID_DOM_ATTRIBUTE_VALUE = @as(u32, 120);
pub const DISPID_DOM_ATTRIBUTE__TOP = @as(u32, 121);
pub const DISPID_DOM_TEXT = @as(u32, 122);
pub const DISPID_DOM_TEXT_SPLITTEXT = @as(u32, 123);
pub const DISPID_DOM_TEXT_JOINTEXT = @as(u32, 124);
pub const DISPID_DOM_TEXT__TOP = @as(u32, 125);
pub const DISPID_DOM_PI = @as(u32, 126);
pub const DISPID_DOM_PI_TARGET = @as(u32, 127);
pub const DISPID_DOM_PI_DATA = @as(u32, 128);
pub const DISPID_DOM_PI__TOP = @as(u32, 129);
pub const DISPID_DOM_DOCUMENTTYPE = @as(u32, 130);
pub const DISPID_DOM_DOCUMENTTYPE_NAME = @as(u32, 131);
pub const DISPID_DOM_DOCUMENTTYPE_ENTITIES = @as(u32, 132);
pub const DISPID_DOM_DOCUMENTTYPE_NOTATIONS = @as(u32, 133);
pub const DISPID_DOM_DOCUMENTTYPE__TOP = @as(u32, 134);
pub const DISPID_DOM_NOTATION = @as(u32, 135);
pub const DISPID_DOM_NOTATION_PUBLICID = @as(u32, 136);
pub const DISPID_DOM_NOTATION_SYSTEMID = @as(u32, 137);
pub const DISPID_DOM_NOTATION__TOP = @as(u32, 138);
pub const DISPID_DOM_ENTITY = @as(u32, 139);
pub const DISPID_DOM_ENTITY_PUBLICID = @as(u32, 140);
pub const DISPID_DOM_ENTITY_SYSTEMID = @as(u32, 141);
pub const DISPID_DOM_ENTITY_NOTATIONNAME = @as(u32, 142);
pub const DISPID_DOM_ENTITY__TOP = @as(u32, 143);
pub const DISPID_DOM_W3CWRAPPERS_TOP = @as(u32, 143);
pub const DISPID_DOM_IMPLEMENTATION = @as(u32, 144);
pub const DISPID_DOM_IMPLEMENTATION_HASFEATURE = @as(u32, 145);
pub const DISPID_DOM_IMPLEMENTATION__TOP = @as(u32, 146);
pub const DISPID_DOM__TOP = @as(u32, 176);
pub const DISPID_DOM_ERROR = @as(u32, 177);
pub const DISPID_DOM_ERROR_ERRORCODE = @as(u32, 178);
pub const DISPID_DOM_ERROR_URL = @as(u32, 179);
pub const DISPID_DOM_ERROR_REASON = @as(u32, 180);
pub const DISPID_DOM_ERROR_SRCTEXT = @as(u32, 181);
pub const DISPID_DOM_ERROR_LINE = @as(u32, 182);
pub const DISPID_DOM_ERROR_LINEPOS = @as(u32, 183);
pub const DISPID_DOM_ERROR_FILEPOS = @as(u32, 184);
pub const DISPID_DOM_ERROR__TOP = @as(u32, 185);
pub const DISPID_DOM_ERROR2 = @as(u32, 186);
pub const DISPID_DOM_ERROR2_ALLERRORS = @as(u32, 187);
pub const DISPID_DOM_ERROR2_ERRORPARAMETERS = @as(u32, 188);
pub const DISPID_DOM_ERROR2_ERRORPARAMETERSCOUNT = @as(u32, 189);
pub const DISPID_DOM_ERROR2_ERRORXPATH = @as(u32, 190);
pub const DISPID_DOM_ERROR2__TOP = @as(u32, 191);
pub const DISPID_DOM_ERRORCOLLECTION = @as(u32, 192);
pub const DISPID_DOM_ERRORCOLLECTION_LENGTH = @as(u32, 193);
pub const DISPID_DOM_ERRORCOLLECTION_NEXT = @as(u32, 194);
pub const DISPID_DOM_ERRORCOLLECTION_RESET = @as(u32, 195);
pub const DISPID_DOM_ERRORCOLLECTION__TOP = @as(u32, 196);
pub const DISPID_XTLRUNTIME = @as(u32, 186);
pub const DISPID_XTLRUNTIME_UNIQUEID = @as(u32, 187);
pub const DISPID_XTLRUNTIME_DEPTH = @as(u32, 188);
pub const DISPID_XTLRUNTIME_CHILDNUMBER = @as(u32, 189);
pub const DISPID_XTLRUNTIME_ANCESTORCHILDNUMBER = @as(u32, 190);
pub const DISPID_XTLRUNTIME_ABSOLUTECHILDNUMBER = @as(u32, 191);
pub const DISPID_XTLRUNTIME_FORMATINDEX = @as(u32, 192);
pub const DISPID_XTLRUNTIME_FORMATNUMBER = @as(u32, 193);
pub const DISPID_XTLRUNTIME_FORMATDATE = @as(u32, 194);
pub const DISPID_XTLRUNTIME_FORMATTIME = @as(u32, 195);
pub const DISPID_XTLRUNTIME__TOP = @as(u32, 196);
pub const DISPID_XMLDOMEVENT = @as(u32, 197);
pub const DISPID_XMLDOMEVENT_ONREADYSTATECHANGE = @as(i32, -609);
pub const DISPID_XMLDOMEVENT_ONDATAAVAILABLE = @as(u32, 198);
pub const DISPID_XMLDOMEVENT__TOP = @as(u32, 199);
pub const DISPID_XMLDOM_DOCUMENT2 = @as(u32, 200);
pub const DISPID_XMLDOM_DOCUMENT2_NAMESPACES = @as(u32, 201);
pub const DISPID_XMLDOM_DOCUMENT2_SCHEMAS = @as(u32, 202);
pub const DISPID_XMLDOM_DOCUMENT2_VALIDATE = @as(u32, 203);
pub const DISPID_XMLDOM_DOCUMENT2_SETPROPERTY = @as(u32, 204);
pub const DISPID_XMLDOM_DOCUMENT2_GETPROPERTY = @as(u32, 205);
pub const DISPID_XMLDOM_DOCUMENT2__TOP = @as(u32, 206);
pub const DISPID_XMLDOM_DOCUMENT3 = @as(u32, 207);
pub const DISPID_XMLDOM_DOCUMENT3_VALIDATENODE = @as(u32, 208);
pub const DISPID_XMLDOM_DOCUMENT3_IMPORTNODE = @as(u32, 209);
pub const DISPID_XMLDOM_DOCUMENT3__TOP = @as(u32, 210);
pub const DISPID_XMLDOM_SCHEMACOLLECTION = @as(u32, 2);
pub const DISPID_XMLDOM_SCHEMACOLLECTION_ADD = @as(u32, 3);
pub const DISPID_XMLDOM_SCHEMACOLLECTION_GET = @as(u32, 4);
pub const DISPID_XMLDOM_SCHEMACOLLECTION_REMOVE = @as(u32, 5);
pub const DISPID_XMLDOM_SCHEMACOLLECTION_LENGTH = @as(u32, 6);
pub const DISPID_XMLDOM_SCHEMACOLLECTION_NAMESPACEURI = @as(u32, 7);
pub const DISPID_XMLDOM_SCHEMACOLLECTION_ADDCOLLECTION = @as(u32, 8);
pub const DISPID_XMLDOM_SCHEMACOLLECTION__TOP = @as(u32, 9);
pub const DISPID_XMLDOM_SELECTION = @as(u32, 80);
pub const DISPID_XMLDOM_SELECTION_EXPR = @as(u32, 81);
pub const DISPID_XMLDOM_SELECTION_CONTEXT = @as(u32, 82);
pub const DISPID_XMLDOM_SELECTION_PEEKNODE = @as(u32, 83);
pub const DISPID_XMLDOM_SELECTION_MATCHES = @as(u32, 84);
pub const DISPID_XMLDOM_SELECTION_REMOVENEXT = @as(u32, 85);
pub const DISPID_XMLDOM_SELECTION_REMOVEALL = @as(u32, 86);
pub const DISPID_XMLDOM_SELECTION_CLONE = @as(u32, 87);
pub const DISPID_XMLDOM_SELECTION_GETPROPERTY = @as(u32, 88);
pub const DISPID_XMLDOM_SELECTION_SETPROPERTY = @as(u32, 89);
pub const DISPID_XMLDOM_SELECTION__TOP = @as(u32, 90);
pub const DISPID_XMLDOM_TEMPLATE = @as(u32, 1);
pub const DISPID_XMLDOM_TEMPLATE_STYLESHEET = @as(u32, 2);
pub const DISPID_XMLDOM_TEMPLATE_CREATEPROCESSOR = @as(u32, 3);
pub const DISPID_XMLDOM_TEMPLATE__TOP = @as(u32, 4);
pub const DISPID_XMLDOM_PROCESSOR = @as(u32, 1);
pub const DISPID_XMLDOM_PROCESSOR_INPUT = @as(u32, 2);
pub const DISPID_XMLDOM_PROCESSOR_XSLTEMPLATE = @as(u32, 3);
pub const DISPID_XMLDOM_PROCESSOR_SETSTARTMODE = @as(u32, 4);
pub const DISPID_XMLDOM_PROCESSOR_STARTMODE = @as(u32, 5);
pub const DISPID_XMLDOM_PROCESSOR_STARTMODEURI = @as(u32, 6);
pub const DISPID_XMLDOM_PROCESSOR_OUTPUT = @as(u32, 7);
pub const DISPID_XMLDOM_PROCESSOR_TRANSFORM = @as(u32, 8);
pub const DISPID_XMLDOM_PROCESSOR_RESET = @as(u32, 9);
pub const DISPID_XMLDOM_PROCESSOR_READYSTATE = @as(u32, 10);
pub const DISPID_XMLDOM_PROCESSOR_ADDPARAMETER = @as(u32, 11);
pub const DISPID_XMLDOM_PROCESSOR_ADDOBJECT = @as(u32, 12);
pub const DISPID_XMLDOM_PROCESSOR_STYLESHEET = @as(u32, 13);
pub const DISPID_XMLDOM_PROCESSOR__TOP = @as(u32, 14);
pub const DISPID_XMLDSO = @as(u32, 65536);
pub const DISPID_XMLDSO_DOCUMENT = @as(u32, 65537);
pub const DISPID_XMLDSO_JAVADSOCOMPATIBLE = @as(u32, 65538);
pub const DISPID_SAX_XMLREADER__MIN = @as(u32, 1281);
pub const DISPID_SAX_XMLREADER__MAX = @as(u32, 65536);
pub const DISPID_SAX_XMLREADER__BASE = @as(u32, 1281);
pub const DISPID_SAX_XMLREADER = @as(u32, 1281);
pub const DISPID_SAX_XMLREADER_GETFEATURE = @as(u32, 1282);
pub const DISPID_SAX_XMLREADER_PUTFEATURE = @as(u32, 1283);
pub const DISPID_SAX_XMLREADER_GETPROPERTY = @as(u32, 1284);
pub const DISPID_SAX_XMLREADER_PUTPROPERTY = @as(u32, 1285);
pub const DISPID_SAX_XMLREADER_ENTITYRESOLVER = @as(u32, 1286);
pub const DISPID_SAX_XMLREADER_CONTENTHANDLER = @as(u32, 1287);
pub const DISPID_SAX_XMLREADER_DTDHANDLER = @as(u32, 1288);
pub const DISPID_SAX_XMLREADER_ERRORHANDLER = @as(u32, 1289);
pub const DISPID_SAX_XMLREADER_BASEURL = @as(u32, 1290);
pub const DISPID_SAX_XMLREADER_SECUREBASEURL = @as(u32, 1291);
pub const DISPID_SAX_XMLREADER_PARSE = @as(u32, 1292);
pub const DISPID_SAX_XMLREADER_PARSEURL = @as(u32, 1293);
pub const DISPID_SAX_XMLREADER_PARENT = @as(u32, 1294);
pub const DISPID_SAX_XMLREADER__TOP = @as(u32, 1295);
pub const DISPID_SAX_XMLFILTER__BASE = @as(u32, 1296);
pub const DISPID_SAX_XMLFILTER = @as(u32, 1296);
pub const DISPID_SAX_XMLFILTER_GETFEATURE = @as(u32, 1297);
pub const DISPID_SAX_XMLFILTER_PUTFEATURE = @as(u32, 1298);
pub const DISPID_SAX_XMLFILTER_GETPROPERTY = @as(u32, 1299);
pub const DISPID_SAX_XMLFILTER_PUTPROPERTY = @as(u32, 1300);
pub const DISPID_SAX_XMLFILTER_ENTITYRESOLVER = @as(u32, 1301);
pub const DISPID_SAX_XMLFILTER_CONTENTHANDLER = @as(u32, 1302);
pub const DISPID_SAX_XMLFILTER_DTDHANDLER = @as(u32, 1303);
pub const DISPID_SAX_XMLFILTER_ERRORHANDLER = @as(u32, 1304);
pub const DISPID_SAX_XMLFILTER_BASEURL = @as(u32, 1305);
pub const DISPID_SAX_XMLFILTER_SECUREBASEURL = @as(u32, 1306);
pub const DISPID_SAX_XMLFILTER_PARSE = @as(u32, 1307);
pub const DISPID_SAX_XMLFILTER_PARSEURL = @as(u32, 1308);
pub const DISPID_SAX_XMLFILTER_PARENT = @as(u32, 1309);
pub const DISPID_SAX_XMLFILTER__TOP = @as(u32, 1311);
pub const DISPID_SAX_LOCATOR__BASE = @as(u32, 1312);
pub const DISPID_SAX_LOCATOR = @as(u32, 1312);
pub const DISPID_SAX_LOCATOR_COLUMNNUMBER = @as(u32, 1313);
pub const DISPID_SAX_LOCATOR_LINENUMBER = @as(u32, 1314);
pub const DISPID_SAX_LOCATOR_PUBLICID = @as(u32, 1315);
pub const DISPID_SAX_LOCATOR_SYSTEMID = @as(u32, 1316);
pub const DISPID_SAX_LOCATOR__TOP = @as(u32, 1317);
pub const DISPID_SAX_ENTITYRESOLVER__BASE = @as(u32, 1318);
pub const DISPID_SAX_ENTITYRESOLVER = @as(u32, 1318);
pub const DISPID_SAX_ENTITYRESOLVER_RESOLVEENTITY = @as(u32, 1319);
pub const DISPID_SAX_ENTITYRESOLVER__TOP = @as(u32, 1320);
pub const DISPID_SAX_CONTENTHANDLER__BASE = @as(u32, 1321);
pub const DISPID_SAX_CONTENTHANDLER = @as(u32, 1321);
pub const DISPID_SAX_CONTENTHANDLER_DOCUMENTLOCATOR = @as(u32, 1322);
pub const DISPID_SAX_CONTENTHANDLER_STARTDOCUMENT = @as(u32, 1323);
pub const DISPID_SAX_CONTENTHANDLER_ENDDOCUMENT = @as(u32, 1324);
pub const DISPID_SAX_CONTENTHANDLER_STARTPREFIXMAPPING = @as(u32, 1325);
pub const DISPID_SAX_CONTENTHANDLER_ENDPREFIXMAPPING = @as(u32, 1326);
pub const DISPID_SAX_CONTENTHANDLER_STARTELEMENT = @as(u32, 1327);
pub const DISPID_SAX_CONTENTHANDLER_ENDELEMENT = @as(u32, 1328);
pub const DISPID_SAX_CONTENTHANDLER_CHARACTERS = @as(u32, 1329);
pub const DISPID_SAX_CONTENTHANDLER_IGNORABLEWHITESPACE = @as(u32, 1330);
pub const DISPID_SAX_CONTENTHANDLER_PROCESSINGINSTRUCTION = @as(u32, 1331);
pub const DISPID_SAX_CONTENTHANDLER_SKIPPEDENTITY = @as(u32, 1332);
pub const DISPID_SAX_CONTENTHANDLER__TOP = @as(u32, 1333);
pub const DISPID_SAX_DTDHANDLER__BASE = @as(u32, 1334);
pub const DISPID_SAX_DTDHANDLER = @as(u32, 1334);
pub const DISPID_SAX_DTDHANDLER_NOTATIONDECL = @as(u32, 1335);
pub const DISPID_SAX_DTDHANDLER_UNPARSEDENTITYDECL = @as(u32, 1336);
pub const DISPID_SAX_DTDHANDLER__TOP = @as(u32, 1337);
pub const DISPID_SAX_ERRORHANDLER__BASE = @as(u32, 1338);
pub const DISPID_SAX_ERRORHANDLER = @as(u32, 1338);
pub const DISPID_SAX_ERRORHANDLER_ERROR = @as(u32, 1339);
pub const DISPID_SAX_ERRORHANDLER_FATALERROR = @as(u32, 1340);
pub const DISPID_SAX_ERRORHANDLER_IGNORABLEWARNING = @as(u32, 1341);
pub const DISPID_SAX_ERRORHANDLER__TOP = @as(u32, 1342);
pub const DISPID_SAX_ATTRIBUTES__BASE = @as(u32, 1343);
pub const DISPID_SAX_ATTRIBUTES = @as(u32, 1343);
pub const DISPID_SAX_ATTRIBUTES_LENGTH = @as(u32, 1344);
pub const DISPID_SAX_ATTRIBUTES_GETURI = @as(u32, 1345);
pub const DISPID_SAX_ATTRIBUTES_GETLOCALNAME = @as(u32, 1346);
pub const DISPID_SAX_ATTRIBUTES_GETQNAME = @as(u32, 1347);
pub const DISPID_SAX_ATTRIBUTES_GETINDEXFROMNAME = @as(u32, 1348);
pub const DISPID_SAX_ATTRIBUTES_GETINDEXFROMQNAME = @as(u32, 1349);
pub const DISPID_SAX_ATTRIBUTES_GETTYPE = @as(u32, 1350);
pub const DISPID_SAX_ATTRIBUTES_GETTYPEFROMNAME = @as(u32, 1351);
pub const DISPID_SAX_ATTRIBUTES_GETTYPEFROMQNAME = @as(u32, 1352);
pub const DISPID_SAX_ATTRIBUTES_GETVALUE = @as(u32, 1353);
pub const DISPID_SAX_ATTRIBUTES_GETVALUEFROMNAME = @as(u32, 1354);
pub const DISPID_SAX_ATTRIBUTES_GETVALUEFROMQNAME = @as(u32, 1355);
pub const DISPID_SAX_ATTRIBUTES__TOP = @as(u32, 1356);
pub const DISPID_SAX_LEXICALHANDLER__BASE = @as(u32, 1357);
pub const DISPID_SAX_LEXICALHANDLER = @as(u32, 1357);
pub const DISPID_SAX_LEXICALHANDLER_STARTDTD = @as(u32, 1358);
pub const DISPID_SAX_LEXICALHANDLER_ENDDTD = @as(u32, 1359);
pub const DISPID_SAX_LEXICALHANDLER_STARTENTITY = @as(u32, 1360);
pub const DISPID_SAX_LEXICALHANDLER_ENDENTITY = @as(u32, 1361);
pub const DISPID_SAX_LEXICALHANDLER_STARTCDATA = @as(u32, 1362);
pub const DISPID_SAX_LEXICALHANDLER_ENDCDATA = @as(u32, 1363);
pub const DISPID_SAX_LEXICALHANDLER_COMMENT = @as(u32, 1364);
pub const DISPID_SAX_LEXICALHANDLER__TOP = @as(u32, 1365);
pub const DISPID_SAX_DECLHANDLER__BASE = @as(u32, 1366);
pub const DISPID_SAX_DECLHANDLER = @as(u32, 1366);
pub const DISPID_SAX_DECLHANDLER_ELEMENTDECL = @as(u32, 1367);
pub const DISPID_SAX_DECLHANDLER_ATTRIBUTEDECL = @as(u32, 1368);
pub const DISPID_SAX_DECLHANDLER_INTERNALENTITYDECL = @as(u32, 1369);
pub const DISPID_SAX_DECLHANDLER_EXTERNALENTITYDECL = @as(u32, 1370);
pub const DISPID_SAX_DECLHANDLER__TOP = @as(u32, 1371);
pub const DISPID_MX_ATTRIBUTES__BASE = @as(u32, 1372);
pub const DISPID_MX_ATTRIBUTES = @as(u32, 1372);
pub const DISPID_MX_ATTRIBUTES_ADDATTRIBUTE = @as(u32, 1373);
pub const DISPID_MX_ATTRIBUTES_CLEAR = @as(u32, 1374);
pub const DISPID_MX_ATTRIBUTES_REMOVEATTRIBUTE = @as(u32, 1375);
pub const DISPID_MX_ATTRIBUTES_SETATTRIBUTE = @as(u32, 1376);
pub const DISPID_MX_ATTRIBUTES_SETATTRIBUTES = @as(u32, 1377);
pub const DISPID_MX_ATTRIBUTES_SETLOCALNAME = @as(u32, 1378);
pub const DISPID_MX_ATTRIBUTES_SETQNAME = @as(u32, 1379);
pub const DISPID_MX_ATTRIBUTES_SETTYPE = @as(u32, 1380);
pub const DISPID_MX_ATTRIBUTES_SETURI = @as(u32, 1381);
pub const DISPID_MX_ATTRIBUTES_SETVALUE = @as(u32, 1382);
pub const DISPID_MX_ATTRIBUTES_ADDATTRIBUTEFROMINDEX = @as(u32, 1383);
pub const DISPID_MX_ATTRIBUTES__TOP = @as(u32, 1383);
pub const DISPID_MX_WRITER__BASE = @as(u32, 1384);
pub const DISPID_MX_WRITER = @as(u32, 1384);
pub const DISPID_MX_WRITER_OUTPUT = @as(u32, 1385);
pub const DISPID_MX_WRITER_DESTINATION = @as(u32, 1386);
pub const DISPID_MX_WRITER_ENCODING = @as(u32, 1387);
pub const DISPID_MX_WRITER_BYTEORDERMARK = @as(u32, 1388);
pub const DISPID_MX_WRITER_INDENT = @as(u32, 1389);
pub const DISPID_MX_WRITER_STANDALONE = @as(u32, 1390);
pub const DISPID_MX_WRITER_OMITXMLDECLARATION = @as(u32, 1391);
pub const DISPID_MX_WRITER_VERSION = @as(u32, 1392);
pub const DISPID_MX_WRITER_DISABLEOUTPUTESCAPING = @as(u32, 1393);
pub const DISPID_MX_WRITER_FLUSH = @as(u32, 1394);
pub const DISPID_MX_WRITER_RESET = @as(u32, 1395);
pub const DISPID_MX_WRITER__TOP = @as(u32, 1396);
pub const DISPID_MX_READER_CONTROL__BASE = @as(u32, 1397);
pub const DISPID_MX_READER_CONTROL = @as(u32, 1397);
pub const DISPID_MX_READER_CONTROL_ABORT = @as(u32, 1398);
pub const DISPID_MX_READER_CONTROL_RESUME = @as(u32, 1399);
pub const DISPID_MX_READER_CONTROL_SUSPEND = @as(u32, 1400);
pub const DISPID_MX_READER_CONTROL__TOP = @as(u32, 1401);
pub const DISPID_MX_SCHEMADECLHANDLER__BASE = @as(u32, 1402);
pub const DISPID_MX_SCHEMADECLHANDLER = @as(u32, 1402);
pub const DISPID_MX_SCHEMADECLHANDLER_SCHEMAELEMENTDECL = @as(u32, 1403);
pub const DISPID_MX_SCHEMADECLHANDLER__TOP = @as(u32, 1404);
pub const DISPID_MX_NSMGR__BASE = @as(u32, 1405);
pub const DISPID_MX_NSMGR = @as(u32, 1405);
pub const DISPID_MX_NSMGR_ALLOWOVERRIDE = @as(u32, 1406);
pub const DISPID_MX_NSMGR_RESET = @as(u32, 1407);
pub const DISPID_MX_NSMGR_PUSHCONTEXT = @as(u32, 1408);
pub const DISPID_MX_NSMGR_PUSHNODECONTEXT = @as(u32, 1409);
pub const DISPID_MX_NSMGR_POPCONTEXT = @as(u32, 1410);
pub const DISPID_MX_NSMGR_DECLAREPREFIX = @as(u32, 1411);
pub const DISPID_MX_NSMGR_GETDECLAREDPREFIXES = @as(u32, 1412);
pub const DISPID_MX_NSMGR_GETPREFIXES = @as(u32, 1413);
pub const DISPID_MX_NSMGR_GETURI = @as(u32, 1414);
pub const DISPID_MX_NSMGR_GETURIFROMNODE = @as(u32, 1415);
pub const DISPID_MX_NSMGR_LENGTH = @as(u32, 1416);
pub const DISPID_MX_NSMGR__TOP = @as(u32, 1417);
pub const DISPID_MXXML_FILTER__BASE = @as(u32, 1418);
pub const DISPID_MXXML_FILTER = @as(u32, 1418);
pub const DISPID_MXXML_FILTER_CONTENTHANDLER = @as(u32, 1419);
pub const DISPID_MXXML_FILTER_DTDHANDLER = @as(u32, 1420);
pub const DISPID_MXXML_FILTER_ENTITYRESOLVER = @as(u32, 1421);
pub const DISPID_MXXML_FILTER_ERRORHANDLER = @as(u32, 1422);
pub const DISPID_MXXML_FILTER_GETFEATURE = @as(u32, 1423);
pub const DISPID_MXXML_FILTER_GETPROPERTY = @as(u32, 1424);
pub const DISPID_MXXML_FILTER_PUTFEATURE = @as(u32, 1425);
pub const DISPID_MXXML_FILTER_PUTPROPERTY = @as(u32, 1426);
pub const DISPID_MXXML_FILTER__TOP = @as(u32, 1427);
pub const DISPID_SOM = @as(u32, 1418);
pub const DISPID_SOM_VALIDATE = @as(u32, 1419);
pub const DISPID_SOM_VALIDATEONLOAD = @as(u32, 1420);
pub const DISPID_SOM_GETSCHEMA = @as(u32, 1421);
pub const DISPID_SOM_GETDECLARATION = @as(u32, 1422);
pub const DISPID_SOM_ITEMBYNAME = @as(u32, 1423);
pub const DISPID_SOM_ITEMBYQNAME = @as(u32, 1424);
pub const DISPID_SOM_ANYATTRIBUTE = @as(u32, 1425);
pub const DISPID_SOM_ATTRIBUTEGROUPS = @as(u32, 1426);
pub const DISPID_SOM_ATTRIBUTES = @as(u32, 1427);
pub const DISPID_SOM_BASETYPES = @as(u32, 1428);
pub const DISPID_SOM_CONTENTMODEL = @as(u32, 1429);
pub const DISPID_SOM_CONTENTTYPE = @as(u32, 1430);
pub const DISPID_SOM_DEFAULTVALUE = @as(u32, 1431);
pub const DISPID_SOM_DERIVEDBY = @as(u32, 1432);
pub const DISPID_SOM_DISALLOWED = @as(u32, 1433);
pub const DISPID_SOM_ELEMENTS = @as(u32, 1434);
pub const DISPID_SOM_ENUMERATION = @as(u32, 1435);
pub const DISPID_SOM_FIELDS = @as(u32, 1436);
pub const DISPID_SOM_FINAL = @as(u32, 1437);
pub const DISPID_SOM_FIXEDVALUE = @as(u32, 1438);
pub const DISPID_SOM_FRACTIONDIGITS = @as(u32, 1439);
pub const DISPID_SOM_ID = @as(u32, 1440);
pub const DISPID_SOM_IDCONSTRAINTS = @as(u32, 1441);
pub const DISPID_SOM_ISABSTRACT = @as(u32, 1442);
pub const DISPID_SOM_ISNILLABLE = @as(u32, 1443);
pub const DISPID_SOM_ISREFERENCE = @as(u32, 1444);
pub const DISPID_SOM_ISVALID = @as(u32, 1445);
pub const DISPID_SOM_ITEMTYPE = @as(u32, 1446);
pub const DISPID_SOM_LENGTH = @as(u32, 1447);
pub const DISPID_SOM_MAXEXCLUSIVE = @as(u32, 1448);
pub const DISPID_SOM_MAXINCLUSIVE = @as(u32, 1449);
pub const DISPID_SOM_MAXLENGTH = @as(u32, 1450);
pub const DISPID_SOM_MAXOCCURS = @as(u32, 1451);
pub const DISPID_SOM_MINEXCLUSIVE = @as(u32, 1452);
pub const DISPID_SOM_MININCLUSIVE = @as(u32, 1453);
pub const DISPID_SOM_MINLENGTH = @as(u32, 1454);
pub const DISPID_SOM_MINOCCURS = @as(u32, 1455);
pub const DISPID_SOM_MODELGROUPS = @as(u32, 1456);
pub const DISPID_SOM_NAME = @as(u32, 1457);
pub const DISPID_SOM_NAMESPACES = @as(u32, 1458);
pub const DISPID_SOM_NAMESPACEURI = @as(u32, 1459);
pub const DISPID_SOM_NOTATIONS = @as(u32, 1460);
pub const DISPID_SOM_PARTICLES = @as(u32, 1461);
pub const DISPID_SOM_PATTERNS = @as(u32, 1462);
pub const DISPID_SOM_PROCESSCONTENTS = @as(u32, 1463);
pub const DISPID_SOM_PROHIBITED = @as(u32, 1464);
pub const DISPID_SOM_PUBLICIDENTIFIER = @as(u32, 1465);
pub const DISPID_SOM_REFERENCEDKEY = @as(u32, 1466);
pub const DISPID_SOM_SCHEMA = @as(u32, 1467);
pub const DISPID_SOM_SCHEMALOCATIONS = @as(u32, 1468);
pub const DISPID_SOM_SCOPE = @as(u32, 1469);
pub const DISPID_SOM_SELECTOR = @as(u32, 1470);
pub const DISPID_SOM_SUBSTITUTIONGROUP = @as(u32, 1471);
pub const DISPID_SOM_EXCLUSIONS = @as(u32, 1472);
pub const DISPID_SOM_SYSTEMIDENTIFIER = @as(u32, 1473);
pub const DISPID_SOM_TARGETNAMESPACE = @as(u32, 1474);
pub const DISPID_SOM_TOTALDIGITS = @as(u32, 1475);
pub const DISPID_SOM_TYPE = @as(u32, 1476);
pub const DISPID_SOM_TYPES = @as(u32, 1477);
pub const DISPID_SOM_UNHANDLEDATTRS = @as(u32, 1478);
pub const DISPID_SOM_USE = @as(u32, 1479);
pub const DISPID_SOM_VARIETY = @as(u32, 1480);
pub const DISPID_SOM_VERSION = @as(u32, 1481);
pub const DISPID_SOM_WHITESPACE = @as(u32, 1482);
pub const DISPID_SOM_WRITEANNOTATION = @as(u32, 1483);
pub const DISPID_SOM_TOP = @as(u32, 1484);
pub const DISPID_XMLDSIG = @as(u32, 1);
pub const DISPID_XMLDSIG_CREATEKEYFROMCSP = @as(u32, 1);
pub const DISPID_XMLDSIG_CREATEKEYFROMHMACSECRET = @as(u32, 2);
pub const DISPID_XMLDSIG_CREATEKEYFROMNODE = @as(u32, 3);
pub const DISPID_XMLDSIG_CREATESAXPROXY = @as(u32, 4);
pub const DISPID_XMLDSIG_GETVERIFYINGCERTIFICATE = @as(u32, 5);
pub const DISPID_XMLDSIG_SETREFERENCEDATA = @as(u32, 6);
pub const DISPID_XMLDSIG_SIGN = @as(u32, 7);
pub const DISPID_XMLDSIG_SIGNATURE = @as(u32, 8);
pub const DISPID_XMLDSIG_STORE = @as(u32, 9);
pub const DISPID_XMLDSIG_VERIFY = @as(u32, 10);

//--------------------------------------------------------------------------------
// Section: Types (127)
//--------------------------------------------------------------------------------
const CLSID_DOMDocument_Value = Guid.initString("2933bf90-7b36-11d2-b20e-00c04f983e60");
pub const CLSID_DOMDocument = &CLSID_DOMDocument_Value;

const CLSID_DOMFreeThreadedDocument_Value = Guid.initString("2933bf91-7b36-11d2-b20e-00c04f983e60");
pub const CLSID_DOMFreeThreadedDocument = &CLSID_DOMFreeThreadedDocument_Value;

const CLSID_XMLHTTPRequest_Value = Guid.initString("ed8c108e-4349-11d2-91a4-00c04f7969e8");
pub const CLSID_XMLHTTPRequest = &CLSID_XMLHTTPRequest_Value;

const CLSID_XMLDSOControl_Value = Guid.initString("550dda30-0541-11d2-9ca9-0060b0ec3d39");
pub const CLSID_XMLDSOControl = &CLSID_XMLDSOControl_Value;

const CLSID_XMLDocument_Value = Guid.initString("cfc399af-d876-11d0-9c10-00c04fc99c8e");
pub const CLSID_XMLDocument = &CLSID_XMLDocument_Value;

pub const XML_ERROR = extern struct {
    _nLine: u32,
    _pchBuf: ?BSTR,
    _cchBuf: u32,
    _ich: u32,
    _pszFound: ?BSTR,
    _pszExpected: ?BSTR,
    _reserved1: u32,
    _reserved2: u32,
};

pub const DOMNodeType = enum(i32) {
    INVALID = 0,
    ELEMENT = 1,
    ATTRIBUTE = 2,
    TEXT = 3,
    CDATA_SECTION = 4,
    ENTITY_REFERENCE = 5,
    ENTITY = 6,
    PROCESSING_INSTRUCTION = 7,
    COMMENT = 8,
    DOCUMENT = 9,
    DOCUMENT_TYPE = 10,
    DOCUMENT_FRAGMENT = 11,
    NOTATION = 12,
};
pub const NODE_INVALID = DOMNodeType.INVALID;
pub const NODE_ELEMENT = DOMNodeType.ELEMENT;
pub const NODE_ATTRIBUTE = DOMNodeType.ATTRIBUTE;
pub const NODE_TEXT = DOMNodeType.TEXT;
pub const NODE_CDATA_SECTION = DOMNodeType.CDATA_SECTION;
pub const NODE_ENTITY_REFERENCE = DOMNodeType.ENTITY_REFERENCE;
pub const NODE_ENTITY = DOMNodeType.ENTITY;
pub const NODE_PROCESSING_INSTRUCTION = DOMNodeType.PROCESSING_INSTRUCTION;
pub const NODE_COMMENT = DOMNodeType.COMMENT;
pub const NODE_DOCUMENT = DOMNodeType.DOCUMENT;
pub const NODE_DOCUMENT_TYPE = DOMNodeType.DOCUMENT_TYPE;
pub const NODE_DOCUMENT_FRAGMENT = DOMNodeType.DOCUMENT_FRAGMENT;
pub const NODE_NOTATION = DOMNodeType.NOTATION;

pub const XMLEMEM_TYPE = enum(i32) {
    ELEMENT = 0,
    TEXT = 1,
    COMMENT = 2,
    DOCUMENT = 3,
    DTD = 4,
    PI = 5,
    OTHER = 6,
};
pub const XMLELEMTYPE_ELEMENT = XMLEMEM_TYPE.ELEMENT;
pub const XMLELEMTYPE_TEXT = XMLEMEM_TYPE.TEXT;
pub const XMLELEMTYPE_COMMENT = XMLEMEM_TYPE.COMMENT;
pub const XMLELEMTYPE_DOCUMENT = XMLEMEM_TYPE.DOCUMENT;
pub const XMLELEMTYPE_DTD = XMLEMEM_TYPE.DTD;
pub const XMLELEMTYPE_PI = XMLEMEM_TYPE.PI;
pub const XMLELEMTYPE_OTHER = XMLEMEM_TYPE.OTHER;

const IID_IXMLDOMImplementation_Value = Guid.initString("2933bf8f-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMImplementation = &IID_IXMLDOMImplementation_Value;
pub const IXMLDOMImplementation = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        hasFeature: *const fn(
            self: *const IXMLDOMImplementation,
            feature: ?BSTR,
            version: ?BSTR,
            hasFeature: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn hasFeature(self: *const IXMLDOMImplementation, feature: ?BSTR, version: ?BSTR, _param_hasFeature: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.hasFeature(self, feature, version, _param_hasFeature);
    }
};

const IID_IXMLDOMNode_Value = Guid.initString("2933bf80-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMNode = &IID_IXMLDOMNode_Value;
pub const IXMLDOMNode = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nodeName: *const fn(
            self: *const IXMLDOMNode,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nodeValue: *const fn(
            self: *const IXMLDOMNode,
            value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_nodeValue: *const fn(
            self: *const IXMLDOMNode,
            value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nodeType: *const fn(
            self: *const IXMLDOMNode,
            type: ?*DOMNodeType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parentNode: *const fn(
            self: *const IXMLDOMNode,
            parent: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_childNodes: *const fn(
            self: *const IXMLDOMNode,
            childList: ?*?*IXMLDOMNodeList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_firstChild: *const fn(
            self: *const IXMLDOMNode,
            firstChild: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lastChild: *const fn(
            self: *const IXMLDOMNode,
            lastChild: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_previousSibling: *const fn(
            self: *const IXMLDOMNode,
            previousSibling: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nextSibling: *const fn(
            self: *const IXMLDOMNode,
            nextSibling: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_attributes: *const fn(
            self: *const IXMLDOMNode,
            attributeMap: ?*?*IXMLDOMNamedNodeMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        insertBefore: *const fn(
            self: *const IXMLDOMNode,
            newChild: ?*IXMLDOMNode,
            refChild: VARIANT,
            outNewChild: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        replaceChild: *const fn(
            self: *const IXMLDOMNode,
            newChild: ?*IXMLDOMNode,
            oldChild: ?*IXMLDOMNode,
            outOldChild: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeChild: *const fn(
            self: *const IXMLDOMNode,
            childNode: ?*IXMLDOMNode,
            oldChild: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        appendChild: *const fn(
            self: *const IXMLDOMNode,
            newChild: ?*IXMLDOMNode,
            outNewChild: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        hasChildNodes: *const fn(
            self: *const IXMLDOMNode,
            hasChild: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ownerDocument: *const fn(
            self: *const IXMLDOMNode,
            XMLDOMDocument: ?*?*IXMLDOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        cloneNode: *const fn(
            self: *const IXMLDOMNode,
            deep: i16,
            cloneRoot: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nodeTypeString: *const fn(
            self: *const IXMLDOMNode,
            nodeType: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_text: *const fn(
            self: *const IXMLDOMNode,
            text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_text: *const fn(
            self: *const IXMLDOMNode,
            text: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_specified: *const fn(
            self: *const IXMLDOMNode,
            isSpecified: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_definition: *const fn(
            self: *const IXMLDOMNode,
            definitionNode: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nodeTypedValue: *const fn(
            self: *const IXMLDOMNode,
            typedValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_nodeTypedValue: *const fn(
            self: *const IXMLDOMNode,
            typedValue: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dataType: *const fn(
            self: *const IXMLDOMNode,
            dataTypeName: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_dataType: *const fn(
            self: *const IXMLDOMNode,
            dataTypeName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_xml: *const fn(
            self: *const IXMLDOMNode,
            xmlString: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        transformNode: *const fn(
            self: *const IXMLDOMNode,
            stylesheet: ?*IXMLDOMNode,
            xmlString: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        selectNodes: *const fn(
            self: *const IXMLDOMNode,
            queryString: ?BSTR,
            resultList: ?*?*IXMLDOMNodeList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        selectSingleNode: *const fn(
            self: *const IXMLDOMNode,
            queryString: ?BSTR,
            resultNode: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parsed: *const fn(
            self: *const IXMLDOMNode,
            isParsed: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_namespaceURI: *const fn(
            self: *const IXMLDOMNode,
            namespaceURI: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_prefix: *const fn(
            self: *const IXMLDOMNode,
            prefixString: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_baseName: *const fn(
            self: *const IXMLDOMNode,
            nameString: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        transformNodeToObject: *const fn(
            self: *const IXMLDOMNode,
            stylesheet: ?*IXMLDOMNode,
            outputObject: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_nodeName(self: *const IXMLDOMNode, name: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_nodeName(self, name);
    }
    pub fn get_nodeValue(self: *const IXMLDOMNode, value: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_nodeValue(self, value);
    }
    pub fn put_nodeValue(self: *const IXMLDOMNode, value: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_nodeValue(self, value);
    }
    pub fn get_nodeType(self: *const IXMLDOMNode, @"type": ?*DOMNodeType) callconv(.Inline) HRESULT {
        return self.vtable.get_nodeType(self, @"type");
    }
    pub fn get_parentNode(self: *const IXMLDOMNode, parent: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.get_parentNode(self, parent);
    }
    pub fn get_childNodes(self: *const IXMLDOMNode, childList: ?*?*IXMLDOMNodeList) callconv(.Inline) HRESULT {
        return self.vtable.get_childNodes(self, childList);
    }
    pub fn get_firstChild(self: *const IXMLDOMNode, firstChild: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.get_firstChild(self, firstChild);
    }
    pub fn get_lastChild(self: *const IXMLDOMNode, lastChild: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.get_lastChild(self, lastChild);
    }
    pub fn get_previousSibling(self: *const IXMLDOMNode, previousSibling: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.get_previousSibling(self, previousSibling);
    }
    pub fn get_nextSibling(self: *const IXMLDOMNode, nextSibling: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.get_nextSibling(self, nextSibling);
    }
    pub fn get_attributes(self: *const IXMLDOMNode, attributeMap: ?*?*IXMLDOMNamedNodeMap) callconv(.Inline) HRESULT {
        return self.vtable.get_attributes(self, attributeMap);
    }
    pub fn insertBefore(self: *const IXMLDOMNode, newChild: ?*IXMLDOMNode, refChild: VARIANT, outNewChild: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.insertBefore(self, newChild, refChild, outNewChild);
    }
    pub fn replaceChild(self: *const IXMLDOMNode, newChild: ?*IXMLDOMNode, oldChild: ?*IXMLDOMNode, outOldChild: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.replaceChild(self, newChild, oldChild, outOldChild);
    }
    pub fn removeChild(self: *const IXMLDOMNode, childNode: ?*IXMLDOMNode, oldChild: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.removeChild(self, childNode, oldChild);
    }
    pub fn appendChild(self: *const IXMLDOMNode, newChild: ?*IXMLDOMNode, outNewChild: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.appendChild(self, newChild, outNewChild);
    }
    pub fn hasChildNodes(self: *const IXMLDOMNode, hasChild: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.hasChildNodes(self, hasChild);
    }
    pub fn get_ownerDocument(self: *const IXMLDOMNode, XMLDOMDocument: ?*?*IXMLDOMDocument) callconv(.Inline) HRESULT {
        return self.vtable.get_ownerDocument(self, XMLDOMDocument);
    }
    pub fn cloneNode(self: *const IXMLDOMNode, deep: i16, cloneRoot: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.cloneNode(self, deep, cloneRoot);
    }
    pub fn get_nodeTypeString(self: *const IXMLDOMNode, nodeType: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_nodeTypeString(self, nodeType);
    }
    pub fn get_text(self: *const IXMLDOMNode, text: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_text(self, text);
    }
    pub fn put_text(self: *const IXMLDOMNode, text: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_text(self, text);
    }
    pub fn get_specified(self: *const IXMLDOMNode, isSpecified: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_specified(self, isSpecified);
    }
    pub fn get_definition(self: *const IXMLDOMNode, definitionNode: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.get_definition(self, definitionNode);
    }
    pub fn get_nodeTypedValue(self: *const IXMLDOMNode, typedValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_nodeTypedValue(self, typedValue);
    }
    pub fn put_nodeTypedValue(self: *const IXMLDOMNode, typedValue: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_nodeTypedValue(self, typedValue);
    }
    pub fn get_dataType(self: *const IXMLDOMNode, dataTypeName: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_dataType(self, dataTypeName);
    }
    pub fn put_dataType(self: *const IXMLDOMNode, dataTypeName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_dataType(self, dataTypeName);
    }
    pub fn get_xml(self: *const IXMLDOMNode, xmlString: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_xml(self, xmlString);
    }
    pub fn transformNode(self: *const IXMLDOMNode, stylesheet: ?*IXMLDOMNode, xmlString: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.transformNode(self, stylesheet, xmlString);
    }
    pub fn selectNodes(self: *const IXMLDOMNode, queryString: ?BSTR, resultList: ?*?*IXMLDOMNodeList) callconv(.Inline) HRESULT {
        return self.vtable.selectNodes(self, queryString, resultList);
    }
    pub fn selectSingleNode(self: *const IXMLDOMNode, queryString: ?BSTR, resultNode: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.selectSingleNode(self, queryString, resultNode);
    }
    pub fn get_parsed(self: *const IXMLDOMNode, isParsed: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_parsed(self, isParsed);
    }
    pub fn get_namespaceURI(self: *const IXMLDOMNode, namespaceURI: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_namespaceURI(self, namespaceURI);
    }
    pub fn get_prefix(self: *const IXMLDOMNode, prefixString: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_prefix(self, prefixString);
    }
    pub fn get_baseName(self: *const IXMLDOMNode, nameString: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_baseName(self, nameString);
    }
    pub fn transformNodeToObject(self: *const IXMLDOMNode, stylesheet: ?*IXMLDOMNode, outputObject: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.transformNodeToObject(self, stylesheet, outputObject);
    }
};

const IID_IXMLDOMDocumentFragment_Value = Guid.initString("3efaa413-272f-11d2-836f-0000f87a7782");
pub const IID_IXMLDOMDocumentFragment = &IID_IXMLDOMDocumentFragment_Value;
pub const IXMLDOMDocumentFragment = extern union {
    pub const VTable = extern struct {
        base: IXMLDOMNode.VTable,
    };
    vtable: *const VTable,
    IXMLDOMNode: IXMLDOMNode,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IXMLDOMDocument_Value = Guid.initString("2933bf81-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMDocument = &IID_IXMLDOMDocument_Value;
pub const IXMLDOMDocument = extern union {
    pub const VTable = extern struct {
        base: IXMLDOMNode.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_doctype: *const fn(
            self: *const IXMLDOMDocument,
            documentType: ?*?*IXMLDOMDocumentType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_implementation: *const fn(
            self: *const IXMLDOMDocument,
            impl: ?*?*IXMLDOMImplementation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_documentElement: *const fn(
            self: *const IXMLDOMDocument,
            DOMElement: ?*?*IXMLDOMElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_documentElement: *const fn(
            self: *const IXMLDOMDocument,
            DOMElement: ?*IXMLDOMElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createElement: *const fn(
            self: *const IXMLDOMDocument,
            tagName: ?BSTR,
            element: ?*?*IXMLDOMElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createDocumentFragment: *const fn(
            self: *const IXMLDOMDocument,
            docFrag: ?*?*IXMLDOMDocumentFragment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createTextNode: *const fn(
            self: *const IXMLDOMDocument,
            data: ?BSTR,
            text: ?*?*IXMLDOMText,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createComment: *const fn(
            self: *const IXMLDOMDocument,
            data: ?BSTR,
            comment: ?*?*IXMLDOMComment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createCDATASection: *const fn(
            self: *const IXMLDOMDocument,
            data: ?BSTR,
            cdata: ?*?*IXMLDOMCDATASection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createProcessingInstruction: *const fn(
            self: *const IXMLDOMDocument,
            target: ?BSTR,
            data: ?BSTR,
            pi: ?*?*IXMLDOMProcessingInstruction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createAttribute: *const fn(
            self: *const IXMLDOMDocument,
            name: ?BSTR,
            attribute: ?*?*IXMLDOMAttribute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createEntityReference: *const fn(
            self: *const IXMLDOMDocument,
            name: ?BSTR,
            entityRef: ?*?*IXMLDOMEntityReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getElementsByTagName: *const fn(
            self: *const IXMLDOMDocument,
            tagName: ?BSTR,
            resultList: ?*?*IXMLDOMNodeList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createNode: *const fn(
            self: *const IXMLDOMDocument,
            Type: VARIANT,
            name: ?BSTR,
            namespaceURI: ?BSTR,
            node: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        nodeFromID: *const fn(
            self: *const IXMLDOMDocument,
            idString: ?BSTR,
            node: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        load: *const fn(
            self: *const IXMLDOMDocument,
            xmlSource: VARIANT,
            isSuccessful: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn(
            self: *const IXMLDOMDocument,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parseError: *const fn(
            self: *const IXMLDOMDocument,
            errorObj: ?*?*IXMLDOMParseError,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_url: *const fn(
            self: *const IXMLDOMDocument,
            urlString: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_async: *const fn(
            self: *const IXMLDOMDocument,
            isAsync: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_async: *const fn(
            self: *const IXMLDOMDocument,
            isAsync: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        abort: *const fn(
            self: *const IXMLDOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        loadXML: *const fn(
            self: *const IXMLDOMDocument,
            bstrXML: ?BSTR,
            isSuccessful: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        save: *const fn(
            self: *const IXMLDOMDocument,
            destination: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_validateOnParse: *const fn(
            self: *const IXMLDOMDocument,
            isValidating: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_validateOnParse: *const fn(
            self: *const IXMLDOMDocument,
            isValidating: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_resolveExternals: *const fn(
            self: *const IXMLDOMDocument,
            isResolving: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_resolveExternals: *const fn(
            self: *const IXMLDOMDocument,
            isResolving: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_preserveWhiteSpace: *const fn(
            self: *const IXMLDOMDocument,
            isPreserving: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_preserveWhiteSpace: *const fn(
            self: *const IXMLDOMDocument,
            isPreserving: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onreadystatechange: *const fn(
            self: *const IXMLDOMDocument,
            readystatechangeSink: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondataavailable: *const fn(
            self: *const IXMLDOMDocument,
            ondataavailableSink: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ontransformnode: *const fn(
            self: *const IXMLDOMDocument,
            ontransformnodeSink: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IXMLDOMNode: IXMLDOMNode,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_doctype(self: *const IXMLDOMDocument, documentType: ?*?*IXMLDOMDocumentType) callconv(.Inline) HRESULT {
        return self.vtable.get_doctype(self, documentType);
    }
    pub fn get_implementation(self: *const IXMLDOMDocument, impl: ?*?*IXMLDOMImplementation) callconv(.Inline) HRESULT {
        return self.vtable.get_implementation(self, impl);
    }
    pub fn get_documentElement(self: *const IXMLDOMDocument, DOMElement: ?*?*IXMLDOMElement) callconv(.Inline) HRESULT {
        return self.vtable.get_documentElement(self, DOMElement);
    }
    pub fn putref_documentElement(self: *const IXMLDOMDocument, DOMElement: ?*IXMLDOMElement) callconv(.Inline) HRESULT {
        return self.vtable.putref_documentElement(self, DOMElement);
    }
    pub fn createElement(self: *const IXMLDOMDocument, tagName: ?BSTR, element: ?*?*IXMLDOMElement) callconv(.Inline) HRESULT {
        return self.vtable.createElement(self, tagName, element);
    }
    pub fn createDocumentFragment(self: *const IXMLDOMDocument, docFrag: ?*?*IXMLDOMDocumentFragment) callconv(.Inline) HRESULT {
        return self.vtable.createDocumentFragment(self, docFrag);
    }
    pub fn createTextNode(self: *const IXMLDOMDocument, data: ?BSTR, text: ?*?*IXMLDOMText) callconv(.Inline) HRESULT {
        return self.vtable.createTextNode(self, data, text);
    }
    pub fn createComment(self: *const IXMLDOMDocument, data: ?BSTR, comment: ?*?*IXMLDOMComment) callconv(.Inline) HRESULT {
        return self.vtable.createComment(self, data, comment);
    }
    pub fn createCDATASection(self: *const IXMLDOMDocument, data: ?BSTR, cdata: ?*?*IXMLDOMCDATASection) callconv(.Inline) HRESULT {
        return self.vtable.createCDATASection(self, data, cdata);
    }
    pub fn createProcessingInstruction(self: *const IXMLDOMDocument, target: ?BSTR, data: ?BSTR, pi: ?*?*IXMLDOMProcessingInstruction) callconv(.Inline) HRESULT {
        return self.vtable.createProcessingInstruction(self, target, data, pi);
    }
    pub fn createAttribute(self: *const IXMLDOMDocument, name: ?BSTR, attribute: ?*?*IXMLDOMAttribute) callconv(.Inline) HRESULT {
        return self.vtable.createAttribute(self, name, attribute);
    }
    pub fn createEntityReference(self: *const IXMLDOMDocument, name: ?BSTR, entityRef: ?*?*IXMLDOMEntityReference) callconv(.Inline) HRESULT {
        return self.vtable.createEntityReference(self, name, entityRef);
    }
    pub fn getElementsByTagName(self: *const IXMLDOMDocument, tagName: ?BSTR, resultList: ?*?*IXMLDOMNodeList) callconv(.Inline) HRESULT {
        return self.vtable.getElementsByTagName(self, tagName, resultList);
    }
    pub fn createNode(self: *const IXMLDOMDocument, Type: VARIANT, name: ?BSTR, namespaceURI: ?BSTR, node: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.createNode(self, Type, name, namespaceURI, node);
    }
    pub fn nodeFromID(self: *const IXMLDOMDocument, idString: ?BSTR, node: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.nodeFromID(self, idString, node);
    }
    pub fn load(self: *const IXMLDOMDocument, xmlSource: VARIANT, isSuccessful: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.load(self, xmlSource, isSuccessful);
    }
    pub fn get_readyState(self: *const IXMLDOMDocument, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_readyState(self, value);
    }
    pub fn get_parseError(self: *const IXMLDOMDocument, errorObj: ?*?*IXMLDOMParseError) callconv(.Inline) HRESULT {
        return self.vtable.get_parseError(self, errorObj);
    }
    pub fn get_url(self: *const IXMLDOMDocument, urlString: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_url(self, urlString);
    }
    pub fn get_async(self: *const IXMLDOMDocument, isAsync: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_async(self, isAsync);
    }
    pub fn put_async(self: *const IXMLDOMDocument, isAsync: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_async(self, isAsync);
    }
    pub fn abort(self: *const IXMLDOMDocument) callconv(.Inline) HRESULT {
        return self.vtable.abort(self);
    }
    pub fn loadXML(self: *const IXMLDOMDocument, bstrXML: ?BSTR, isSuccessful: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.loadXML(self, bstrXML, isSuccessful);
    }
    pub fn save(self: *const IXMLDOMDocument, destination: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.save(self, destination);
    }
    pub fn get_validateOnParse(self: *const IXMLDOMDocument, isValidating: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_validateOnParse(self, isValidating);
    }
    pub fn put_validateOnParse(self: *const IXMLDOMDocument, isValidating: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_validateOnParse(self, isValidating);
    }
    pub fn get_resolveExternals(self: *const IXMLDOMDocument, isResolving: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_resolveExternals(self, isResolving);
    }
    pub fn put_resolveExternals(self: *const IXMLDOMDocument, isResolving: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_resolveExternals(self, isResolving);
    }
    pub fn get_preserveWhiteSpace(self: *const IXMLDOMDocument, isPreserving: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_preserveWhiteSpace(self, isPreserving);
    }
    pub fn put_preserveWhiteSpace(self: *const IXMLDOMDocument, isPreserving: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_preserveWhiteSpace(self, isPreserving);
    }
    pub fn put_onreadystatechange(self: *const IXMLDOMDocument, readystatechangeSink: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_onreadystatechange(self, readystatechangeSink);
    }
    pub fn put_ondataavailable(self: *const IXMLDOMDocument, ondataavailableSink: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_ondataavailable(self, ondataavailableSink);
    }
    pub fn put_ontransformnode(self: *const IXMLDOMDocument, ontransformnodeSink: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_ontransformnode(self, ontransformnodeSink);
    }
};

const IID_IXMLDOMNodeList_Value = Guid.initString("2933bf82-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMNodeList = &IID_IXMLDOMNodeList_Value;
pub const IXMLDOMNodeList = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_item: *const fn(
            self: *const IXMLDOMNodeList,
            index: i32,
            listItem: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IXMLDOMNodeList,
            listLength: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        nextNode: *const fn(
            self: *const IXMLDOMNodeList,
            nextItem: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        reset: *const fn(
            self: *const IXMLDOMNodeList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn(
            self: *const IXMLDOMNodeList,
            ppUnk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_item(self: *const IXMLDOMNodeList, index: i32, listItem: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.get_item(self, index, listItem);
    }
    pub fn get_length(self: *const IXMLDOMNodeList, listLength: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_length(self, listLength);
    }
    pub fn nextNode(self: *const IXMLDOMNodeList, nextItem: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.nextNode(self, nextItem);
    }
    pub fn reset(self: *const IXMLDOMNodeList) callconv(.Inline) HRESULT {
        return self.vtable.reset(self);
    }
    pub fn get__newEnum(self: *const IXMLDOMNodeList, ppUnk: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__newEnum(self, ppUnk);
    }
};

const IID_IXMLDOMNamedNodeMap_Value = Guid.initString("2933bf83-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMNamedNodeMap = &IID_IXMLDOMNamedNodeMap_Value;
pub const IXMLDOMNamedNodeMap = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        getNamedItem: *const fn(
            self: *const IXMLDOMNamedNodeMap,
            name: ?BSTR,
            namedItem: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setNamedItem: *const fn(
            self: *const IXMLDOMNamedNodeMap,
            newItem: ?*IXMLDOMNode,
            nameItem: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeNamedItem: *const fn(
            self: *const IXMLDOMNamedNodeMap,
            name: ?BSTR,
            namedItem: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_item: *const fn(
            self: *const IXMLDOMNamedNodeMap,
            index: i32,
            listItem: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IXMLDOMNamedNodeMap,
            listLength: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getQualifiedItem: *const fn(
            self: *const IXMLDOMNamedNodeMap,
            baseName: ?BSTR,
            namespaceURI: ?BSTR,
            qualifiedItem: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeQualifiedItem: *const fn(
            self: *const IXMLDOMNamedNodeMap,
            baseName: ?BSTR,
            namespaceURI: ?BSTR,
            qualifiedItem: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        nextNode: *const fn(
            self: *const IXMLDOMNamedNodeMap,
            nextItem: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        reset: *const fn(
            self: *const IXMLDOMNamedNodeMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn(
            self: *const IXMLDOMNamedNodeMap,
            ppUnk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn getNamedItem(self: *const IXMLDOMNamedNodeMap, name: ?BSTR, namedItem: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.getNamedItem(self, name, namedItem);
    }
    pub fn setNamedItem(self: *const IXMLDOMNamedNodeMap, newItem: ?*IXMLDOMNode, nameItem: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.setNamedItem(self, newItem, nameItem);
    }
    pub fn removeNamedItem(self: *const IXMLDOMNamedNodeMap, name: ?BSTR, namedItem: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.removeNamedItem(self, name, namedItem);
    }
    pub fn get_item(self: *const IXMLDOMNamedNodeMap, index: i32, listItem: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.get_item(self, index, listItem);
    }
    pub fn get_length(self: *const IXMLDOMNamedNodeMap, listLength: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_length(self, listLength);
    }
    pub fn getQualifiedItem(self: *const IXMLDOMNamedNodeMap, baseName: ?BSTR, namespaceURI: ?BSTR, qualifiedItem: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.getQualifiedItem(self, baseName, namespaceURI, qualifiedItem);
    }
    pub fn removeQualifiedItem(self: *const IXMLDOMNamedNodeMap, baseName: ?BSTR, namespaceURI: ?BSTR, qualifiedItem: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.removeQualifiedItem(self, baseName, namespaceURI, qualifiedItem);
    }
    pub fn nextNode(self: *const IXMLDOMNamedNodeMap, nextItem: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.nextNode(self, nextItem);
    }
    pub fn reset(self: *const IXMLDOMNamedNodeMap) callconv(.Inline) HRESULT {
        return self.vtable.reset(self);
    }
    pub fn get__newEnum(self: *const IXMLDOMNamedNodeMap, ppUnk: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__newEnum(self, ppUnk);
    }
};

const IID_IXMLDOMCharacterData_Value = Guid.initString("2933bf84-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMCharacterData = &IID_IXMLDOMCharacterData_Value;
pub const IXMLDOMCharacterData = extern union {
    pub const VTable = extern struct {
        base: IXMLDOMNode.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_data: *const fn(
            self: *const IXMLDOMCharacterData,
            data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_data: *const fn(
            self: *const IXMLDOMCharacterData,
            data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IXMLDOMCharacterData,
            dataLength: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        substringData: *const fn(
            self: *const IXMLDOMCharacterData,
            offset: i32,
            count: i32,
            data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        appendData: *const fn(
            self: *const IXMLDOMCharacterData,
            data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        insertData: *const fn(
            self: *const IXMLDOMCharacterData,
            offset: i32,
            data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        deleteData: *const fn(
            self: *const IXMLDOMCharacterData,
            offset: i32,
            count: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        replaceData: *const fn(
            self: *const IXMLDOMCharacterData,
            offset: i32,
            count: i32,
            data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IXMLDOMNode: IXMLDOMNode,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_data(self: *const IXMLDOMCharacterData, data: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_data(self, data);
    }
    pub fn put_data(self: *const IXMLDOMCharacterData, data: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_data(self, data);
    }
    pub fn get_length(self: *const IXMLDOMCharacterData, dataLength: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_length(self, dataLength);
    }
    pub fn substringData(self: *const IXMLDOMCharacterData, offset: i32, count: i32, data: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.substringData(self, offset, count, data);
    }
    pub fn appendData(self: *const IXMLDOMCharacterData, data: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.appendData(self, data);
    }
    pub fn insertData(self: *const IXMLDOMCharacterData, offset: i32, data: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.insertData(self, offset, data);
    }
    pub fn deleteData(self: *const IXMLDOMCharacterData, offset: i32, count: i32) callconv(.Inline) HRESULT {
        return self.vtable.deleteData(self, offset, count);
    }
    pub fn replaceData(self: *const IXMLDOMCharacterData, offset: i32, count: i32, data: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.replaceData(self, offset, count, data);
    }
};

const IID_IXMLDOMAttribute_Value = Guid.initString("2933bf85-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMAttribute = &IID_IXMLDOMAttribute_Value;
pub const IXMLDOMAttribute = extern union {
    pub const VTable = extern struct {
        base: IXMLDOMNode.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IXMLDOMAttribute,
            attributeName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const IXMLDOMAttribute,
            attributeValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn(
            self: *const IXMLDOMAttribute,
            attributeValue: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IXMLDOMNode: IXMLDOMNode,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_name(self: *const IXMLDOMAttribute, attributeName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_name(self, attributeName);
    }
    pub fn get_value(self: *const IXMLDOMAttribute, attributeValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_value(self, attributeValue);
    }
    pub fn put_value(self: *const IXMLDOMAttribute, attributeValue: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_value(self, attributeValue);
    }
};

const IID_IXMLDOMElement_Value = Guid.initString("2933bf86-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMElement = &IID_IXMLDOMElement_Value;
pub const IXMLDOMElement = extern union {
    pub const VTable = extern struct {
        base: IXMLDOMNode.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_tagName: *const fn(
            self: *const IXMLDOMElement,
            tagName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getAttribute: *const fn(
            self: *const IXMLDOMElement,
            name: ?BSTR,
            value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setAttribute: *const fn(
            self: *const IXMLDOMElement,
            name: ?BSTR,
            value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeAttribute: *const fn(
            self: *const IXMLDOMElement,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getAttributeNode: *const fn(
            self: *const IXMLDOMElement,
            name: ?BSTR,
            attributeNode: ?*?*IXMLDOMAttribute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setAttributeNode: *const fn(
            self: *const IXMLDOMElement,
            DOMAttribute: ?*IXMLDOMAttribute,
            attributeNode: ?*?*IXMLDOMAttribute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeAttributeNode: *const fn(
            self: *const IXMLDOMElement,
            DOMAttribute: ?*IXMLDOMAttribute,
            attributeNode: ?*?*IXMLDOMAttribute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getElementsByTagName: *const fn(
            self: *const IXMLDOMElement,
            tagName: ?BSTR,
            resultList: ?*?*IXMLDOMNodeList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        normalize: *const fn(
            self: *const IXMLDOMElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IXMLDOMNode: IXMLDOMNode,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_tagName(self: *const IXMLDOMElement, tagName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_tagName(self, tagName);
    }
    pub fn getAttribute(self: *const IXMLDOMElement, name: ?BSTR, value: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.getAttribute(self, name, value);
    }
    pub fn setAttribute(self: *const IXMLDOMElement, name: ?BSTR, value: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.setAttribute(self, name, value);
    }
    pub fn removeAttribute(self: *const IXMLDOMElement, name: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.removeAttribute(self, name);
    }
    pub fn getAttributeNode(self: *const IXMLDOMElement, name: ?BSTR, attributeNode: ?*?*IXMLDOMAttribute) callconv(.Inline) HRESULT {
        return self.vtable.getAttributeNode(self, name, attributeNode);
    }
    pub fn setAttributeNode(self: *const IXMLDOMElement, DOMAttribute: ?*IXMLDOMAttribute, attributeNode: ?*?*IXMLDOMAttribute) callconv(.Inline) HRESULT {
        return self.vtable.setAttributeNode(self, DOMAttribute, attributeNode);
    }
    pub fn removeAttributeNode(self: *const IXMLDOMElement, DOMAttribute: ?*IXMLDOMAttribute, attributeNode: ?*?*IXMLDOMAttribute) callconv(.Inline) HRESULT {
        return self.vtable.removeAttributeNode(self, DOMAttribute, attributeNode);
    }
    pub fn getElementsByTagName(self: *const IXMLDOMElement, tagName: ?BSTR, resultList: ?*?*IXMLDOMNodeList) callconv(.Inline) HRESULT {
        return self.vtable.getElementsByTagName(self, tagName, resultList);
    }
    pub fn normalize(self: *const IXMLDOMElement) callconv(.Inline) HRESULT {
        return self.vtable.normalize(self);
    }
};

const IID_IXMLDOMText_Value = Guid.initString("2933bf87-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMText = &IID_IXMLDOMText_Value;
pub const IXMLDOMText = extern union {
    pub const VTable = extern struct {
        base: IXMLDOMCharacterData.VTable,
        splitText: *const fn(
            self: *const IXMLDOMText,
            offset: i32,
            rightHandTextNode: ?*?*IXMLDOMText,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IXMLDOMCharacterData: IXMLDOMCharacterData,
    IXMLDOMNode: IXMLDOMNode,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn splitText(self: *const IXMLDOMText, offset: i32, rightHandTextNode: ?*?*IXMLDOMText) callconv(.Inline) HRESULT {
        return self.vtable.splitText(self, offset, rightHandTextNode);
    }
};

const IID_IXMLDOMComment_Value = Guid.initString("2933bf88-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMComment = &IID_IXMLDOMComment_Value;
pub const IXMLDOMComment = extern union {
    pub const VTable = extern struct {
        base: IXMLDOMCharacterData.VTable,
    };
    vtable: *const VTable,
    IXMLDOMCharacterData: IXMLDOMCharacterData,
    IXMLDOMNode: IXMLDOMNode,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IXMLDOMProcessingInstruction_Value = Guid.initString("2933bf89-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMProcessingInstruction = &IID_IXMLDOMProcessingInstruction_Value;
pub const IXMLDOMProcessingInstruction = extern union {
    pub const VTable = extern struct {
        base: IXMLDOMNode.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_target: *const fn(
            self: *const IXMLDOMProcessingInstruction,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_data: *const fn(
            self: *const IXMLDOMProcessingInstruction,
            value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_data: *const fn(
            self: *const IXMLDOMProcessingInstruction,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IXMLDOMNode: IXMLDOMNode,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_target(self: *const IXMLDOMProcessingInstruction, name: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_target(self, name);
    }
    pub fn get_data(self: *const IXMLDOMProcessingInstruction, value: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_data(self, value);
    }
    pub fn put_data(self: *const IXMLDOMProcessingInstruction, value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_data(self, value);
    }
};

const IID_IXMLDOMCDATASection_Value = Guid.initString("2933bf8a-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMCDATASection = &IID_IXMLDOMCDATASection_Value;
pub const IXMLDOMCDATASection = extern union {
    pub const VTable = extern struct {
        base: IXMLDOMText.VTable,
    };
    vtable: *const VTable,
    IXMLDOMText: IXMLDOMText,
    IXMLDOMCharacterData: IXMLDOMCharacterData,
    IXMLDOMNode: IXMLDOMNode,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IXMLDOMDocumentType_Value = Guid.initString("2933bf8b-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMDocumentType = &IID_IXMLDOMDocumentType_Value;
pub const IXMLDOMDocumentType = extern union {
    pub const VTable = extern struct {
        base: IXMLDOMNode.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IXMLDOMDocumentType,
            rootName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_entities: *const fn(
            self: *const IXMLDOMDocumentType,
            entityMap: ?*?*IXMLDOMNamedNodeMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_notations: *const fn(
            self: *const IXMLDOMDocumentType,
            notationMap: ?*?*IXMLDOMNamedNodeMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IXMLDOMNode: IXMLDOMNode,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_name(self: *const IXMLDOMDocumentType, rootName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_name(self, rootName);
    }
    pub fn get_entities(self: *const IXMLDOMDocumentType, entityMap: ?*?*IXMLDOMNamedNodeMap) callconv(.Inline) HRESULT {
        return self.vtable.get_entities(self, entityMap);
    }
    pub fn get_notations(self: *const IXMLDOMDocumentType, notationMap: ?*?*IXMLDOMNamedNodeMap) callconv(.Inline) HRESULT {
        return self.vtable.get_notations(self, notationMap);
    }
};

const IID_IXMLDOMNotation_Value = Guid.initString("2933bf8c-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMNotation = &IID_IXMLDOMNotation_Value;
pub const IXMLDOMNotation = extern union {
    pub const VTable = extern struct {
        base: IXMLDOMNode.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_publicId: *const fn(
            self: *const IXMLDOMNotation,
            publicID: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_systemId: *const fn(
            self: *const IXMLDOMNotation,
            systemID: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IXMLDOMNode: IXMLDOMNode,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_publicId(self: *const IXMLDOMNotation, publicID: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_publicId(self, publicID);
    }
    pub fn get_systemId(self: *const IXMLDOMNotation, systemID: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_systemId(self, systemID);
    }
};

const IID_IXMLDOMEntity_Value = Guid.initString("2933bf8d-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMEntity = &IID_IXMLDOMEntity_Value;
pub const IXMLDOMEntity = extern union {
    pub const VTable = extern struct {
        base: IXMLDOMNode.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_publicId: *const fn(
            self: *const IXMLDOMEntity,
            publicID: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_systemId: *const fn(
            self: *const IXMLDOMEntity,
            systemID: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_notationName: *const fn(
            self: *const IXMLDOMEntity,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IXMLDOMNode: IXMLDOMNode,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_publicId(self: *const IXMLDOMEntity, publicID: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_publicId(self, publicID);
    }
    pub fn get_systemId(self: *const IXMLDOMEntity, systemID: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_systemId(self, systemID);
    }
    pub fn get_notationName(self: *const IXMLDOMEntity, name: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_notationName(self, name);
    }
};

const IID_IXMLDOMEntityReference_Value = Guid.initString("2933bf8e-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMEntityReference = &IID_IXMLDOMEntityReference_Value;
pub const IXMLDOMEntityReference = extern union {
    pub const VTable = extern struct {
        base: IXMLDOMNode.VTable,
    };
    vtable: *const VTable,
    IXMLDOMNode: IXMLDOMNode,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IXMLDOMParseError_Value = Guid.initString("3efaa426-272f-11d2-836f-0000f87a7782");
pub const IID_IXMLDOMParseError = &IID_IXMLDOMParseError_Value;
pub const IXMLDOMParseError = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_errorCode: *const fn(
            self: *const IXMLDOMParseError,
            errorCode: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_url: *const fn(
            self: *const IXMLDOMParseError,
            urlString: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_reason: *const fn(
            self: *const IXMLDOMParseError,
            reasonString: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_srcText: *const fn(
            self: *const IXMLDOMParseError,
            sourceString: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_line: *const fn(
            self: *const IXMLDOMParseError,
            lineNumber: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_linepos: *const fn(
            self: *const IXMLDOMParseError,
            linePosition: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_filepos: *const fn(
            self: *const IXMLDOMParseError,
            filePosition: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_errorCode(self: *const IXMLDOMParseError, errorCode: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_errorCode(self, errorCode);
    }
    pub fn get_url(self: *const IXMLDOMParseError, urlString: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_url(self, urlString);
    }
    pub fn get_reason(self: *const IXMLDOMParseError, reasonString: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_reason(self, reasonString);
    }
    pub fn get_srcText(self: *const IXMLDOMParseError, sourceString: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_srcText(self, sourceString);
    }
    pub fn get_line(self: *const IXMLDOMParseError, lineNumber: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_line(self, lineNumber);
    }
    pub fn get_linepos(self: *const IXMLDOMParseError, linePosition: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_linepos(self, linePosition);
    }
    pub fn get_filepos(self: *const IXMLDOMParseError, filePosition: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_filepos(self, filePosition);
    }
};

const IID_IXTLRuntime_Value = Guid.initString("3efaa425-272f-11d2-836f-0000f87a7782");
pub const IID_IXTLRuntime = &IID_IXTLRuntime_Value;
pub const IXTLRuntime = extern union {
    pub const VTable = extern struct {
        base: IXMLDOMNode.VTable,
        uniqueID: *const fn(
            self: *const IXTLRuntime,
            pNode: ?*IXMLDOMNode,
            pID: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        depth: *const fn(
            self: *const IXTLRuntime,
            pNode: ?*IXMLDOMNode,
            pDepth: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        childNumber: *const fn(
            self: *const IXTLRuntime,
            pNode: ?*IXMLDOMNode,
            pNumber: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ancestorChildNumber: *const fn(
            self: *const IXTLRuntime,
            bstrNodeName: ?BSTR,
            pNode: ?*IXMLDOMNode,
            pNumber: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        absoluteChildNumber: *const fn(
            self: *const IXTLRuntime,
            pNode: ?*IXMLDOMNode,
            pNumber: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        formatIndex: *const fn(
            self: *const IXTLRuntime,
            lIndex: i32,
            bstrFormat: ?BSTR,
            pbstrFormattedString: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        formatNumber: *const fn(
            self: *const IXTLRuntime,
            dblNumber: f64,
            bstrFormat: ?BSTR,
            pbstrFormattedString: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        formatDate: *const fn(
            self: *const IXTLRuntime,
            varDate: VARIANT,
            bstrFormat: ?BSTR,
            varDestLocale: VARIANT,
            pbstrFormattedString: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        formatTime: *const fn(
            self: *const IXTLRuntime,
            varTime: VARIANT,
            bstrFormat: ?BSTR,
            varDestLocale: VARIANT,
            pbstrFormattedString: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IXMLDOMNode: IXMLDOMNode,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn uniqueID(self: *const IXTLRuntime, pNode: ?*IXMLDOMNode, pID: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.uniqueID(self, pNode, pID);
    }
    pub fn depth(self: *const IXTLRuntime, pNode: ?*IXMLDOMNode, pDepth: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.depth(self, pNode, pDepth);
    }
    pub fn childNumber(self: *const IXTLRuntime, pNode: ?*IXMLDOMNode, pNumber: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.childNumber(self, pNode, pNumber);
    }
    pub fn ancestorChildNumber(self: *const IXTLRuntime, bstrNodeName: ?BSTR, pNode: ?*IXMLDOMNode, pNumber: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.ancestorChildNumber(self, bstrNodeName, pNode, pNumber);
    }
    pub fn absoluteChildNumber(self: *const IXTLRuntime, pNode: ?*IXMLDOMNode, pNumber: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.absoluteChildNumber(self, pNode, pNumber);
    }
    pub fn formatIndex(self: *const IXTLRuntime, lIndex: i32, bstrFormat: ?BSTR, pbstrFormattedString: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.formatIndex(self, lIndex, bstrFormat, pbstrFormattedString);
    }
    pub fn formatNumber(self: *const IXTLRuntime, dblNumber: f64, bstrFormat: ?BSTR, pbstrFormattedString: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.formatNumber(self, dblNumber, bstrFormat, pbstrFormattedString);
    }
    pub fn formatDate(self: *const IXTLRuntime, varDate: VARIANT, bstrFormat: ?BSTR, varDestLocale: VARIANT, pbstrFormattedString: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.formatDate(self, varDate, bstrFormat, varDestLocale, pbstrFormattedString);
    }
    pub fn formatTime(self: *const IXTLRuntime, varTime: VARIANT, bstrFormat: ?BSTR, varDestLocale: VARIANT, pbstrFormattedString: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.formatTime(self, varTime, bstrFormat, varDestLocale, pbstrFormattedString);
    }
};

const IID_XMLDOMDocumentEvents_Value = Guid.initString("3efaa427-272f-11d2-836f-0000f87a7782");
pub const IID_XMLDOMDocumentEvents = &IID_XMLDOMDocumentEvents_Value;
pub const XMLDOMDocumentEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IXMLHttpRequest_Value = Guid.initString("ed8c108d-4349-11d2-91a4-00c04f7969e8");
pub const IID_IXMLHttpRequest = &IID_IXMLHttpRequest_Value;
pub const IXMLHttpRequest = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        open: *const fn(
            self: *const IXMLHttpRequest,
            bstrMethod: ?BSTR,
            bstrUrl: ?BSTR,
            varAsync: VARIANT,
            bstrUser: VARIANT,
            bstrPassword: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setRequestHeader: *const fn(
            self: *const IXMLHttpRequest,
            bstrHeader: ?BSTR,
            bstrValue: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getResponseHeader: *const fn(
            self: *const IXMLHttpRequest,
            bstrHeader: ?BSTR,
            pbstrValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getAllResponseHeaders: *const fn(
            self: *const IXMLHttpRequest,
            pbstrHeaders: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        send: *const fn(
            self: *const IXMLHttpRequest,
            varBody: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        abort: *const fn(
            self: *const IXMLHttpRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_status: *const fn(
            self: *const IXMLHttpRequest,
            plStatus: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_statusText: *const fn(
            self: *const IXMLHttpRequest,
            pbstrStatus: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_responseXML: *const fn(
            self: *const IXMLHttpRequest,
            ppBody: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_responseText: *const fn(
            self: *const IXMLHttpRequest,
            pbstrBody: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_responseBody: *const fn(
            self: *const IXMLHttpRequest,
            pvarBody: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_responseStream: *const fn(
            self: *const IXMLHttpRequest,
            pvarBody: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn(
            self: *const IXMLHttpRequest,
            plState: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onreadystatechange: *const fn(
            self: *const IXMLHttpRequest,
            pReadyStateSink: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn open(self: *const IXMLHttpRequest, bstrMethod: ?BSTR, bstrUrl: ?BSTR, varAsync: VARIANT, bstrUser: VARIANT, bstrPassword: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.open(self, bstrMethod, bstrUrl, varAsync, bstrUser, bstrPassword);
    }
    pub fn setRequestHeader(self: *const IXMLHttpRequest, bstrHeader: ?BSTR, bstrValue: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.setRequestHeader(self, bstrHeader, bstrValue);
    }
    pub fn getResponseHeader(self: *const IXMLHttpRequest, bstrHeader: ?BSTR, pbstrValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.getResponseHeader(self, bstrHeader, pbstrValue);
    }
    pub fn getAllResponseHeaders(self: *const IXMLHttpRequest, pbstrHeaders: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.getAllResponseHeaders(self, pbstrHeaders);
    }
    pub fn send(self: *const IXMLHttpRequest, varBody: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.send(self, varBody);
    }
    pub fn abort(self: *const IXMLHttpRequest) callconv(.Inline) HRESULT {
        return self.vtable.abort(self);
    }
    pub fn get_status(self: *const IXMLHttpRequest, plStatus: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_status(self, plStatus);
    }
    pub fn get_statusText(self: *const IXMLHttpRequest, pbstrStatus: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_statusText(self, pbstrStatus);
    }
    pub fn get_responseXML(self: *const IXMLHttpRequest, ppBody: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_responseXML(self, ppBody);
    }
    pub fn get_responseText(self: *const IXMLHttpRequest, pbstrBody: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_responseText(self, pbstrBody);
    }
    pub fn get_responseBody(self: *const IXMLHttpRequest, pvarBody: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_responseBody(self, pvarBody);
    }
    pub fn get_responseStream(self: *const IXMLHttpRequest, pvarBody: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_responseStream(self, pvarBody);
    }
    pub fn get_readyState(self: *const IXMLHttpRequest, plState: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_readyState(self, plState);
    }
    pub fn put_onreadystatechange(self: *const IXMLHttpRequest, pReadyStateSink: ?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.put_onreadystatechange(self, pReadyStateSink);
    }
};

const IID_IXMLDSOControl_Value = Guid.initString("310afa62-0575-11d2-9ca9-0060b0ec3d39");
pub const IID_IXMLDSOControl = &IID_IXMLDSOControl_Value;
pub const IXMLDSOControl = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_XMLDocument: *const fn(
            self: *const IXMLDSOControl,
            ppDoc: ?*?*IXMLDOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_XMLDocument: *const fn(
            self: *const IXMLDSOControl,
            ppDoc: ?*IXMLDOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_JavaDSOCompatible: *const fn(
            self: *const IXMLDSOControl,
            fJavaDSOCompatible: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_JavaDSOCompatible: *const fn(
            self: *const IXMLDSOControl,
            fJavaDSOCompatible: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn(
            self: *const IXMLDSOControl,
            state: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_XMLDocument(self: *const IXMLDSOControl, ppDoc: ?*?*IXMLDOMDocument) callconv(.Inline) HRESULT {
        return self.vtable.get_XMLDocument(self, ppDoc);
    }
    pub fn put_XMLDocument(self: *const IXMLDSOControl, ppDoc: ?*IXMLDOMDocument) callconv(.Inline) HRESULT {
        return self.vtable.put_XMLDocument(self, ppDoc);
    }
    pub fn get_JavaDSOCompatible(self: *const IXMLDSOControl, fJavaDSOCompatible: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.get_JavaDSOCompatible(self, fJavaDSOCompatible);
    }
    pub fn put_JavaDSOCompatible(self: *const IXMLDSOControl, fJavaDSOCompatible: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.put_JavaDSOCompatible(self, fJavaDSOCompatible);
    }
    pub fn get_readyState(self: *const IXMLDSOControl, state: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_readyState(self, state);
    }
};

const IID_IXMLElementCollection_Value = Guid.initString("65725580-9b5d-11d0-9bfe-00c04fc99c8e");
pub const IID_IXMLElementCollection = &IID_IXMLElementCollection_Value;
pub const IXMLElementCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_length: *const fn(
            self: *const IXMLElementCollection,
            v: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IXMLElementCollection,
            p: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn(
            self: *const IXMLElementCollection,
            ppUnk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        item: *const fn(
            self: *const IXMLElementCollection,
            var1: VARIANT,
            var2: VARIANT,
            ppDisp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_length(self: *const IXMLElementCollection, v: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_length(self, v);
    }
    pub fn get_length(self: *const IXMLElementCollection, p: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_length(self, p);
    }
    pub fn get__newEnum(self: *const IXMLElementCollection, ppUnk: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__newEnum(self, ppUnk);
    }
    pub fn item(self: *const IXMLElementCollection, var1: VARIANT, var2: VARIANT, ppDisp: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.item(self, var1, var2, ppDisp);
    }
};

const IID_IXMLDocument_Value = Guid.initString("f52e2b61-18a1-11d1-b105-00805f49916b");
pub const IID_IXMLDocument = &IID_IXMLDocument_Value;
pub const IXMLDocument = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_root: *const fn(
            self: *const IXMLDocument,
            p: ?*?*IXMLElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fileSize: *const fn(
            self: *const IXMLDocument,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fileModifiedDate: *const fn(
            self: *const IXMLDocument,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fileUpdatedDate: *const fn(
            self: *const IXMLDocument,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_URL: *const fn(
            self: *const IXMLDocument,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_URL: *const fn(
            self: *const IXMLDocument,
            p: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_mimeType: *const fn(
            self: *const IXMLDocument,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn(
            self: *const IXMLDocument,
            pl: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_charset: *const fn(
            self: *const IXMLDocument,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_charset: *const fn(
            self: *const IXMLDocument,
            p: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_version: *const fn(
            self: *const IXMLDocument,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_doctype: *const fn(
            self: *const IXMLDocument,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dtdURL: *const fn(
            self: *const IXMLDocument,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createElement: *const fn(
            self: *const IXMLDocument,
            vType: VARIANT,
            var1: VARIANT,
            ppElem: ?*?*IXMLElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_root(self: *const IXMLDocument, p: ?*?*IXMLElement) callconv(.Inline) HRESULT {
        return self.vtable.get_root(self, p);
    }
    pub fn get_fileSize(self: *const IXMLDocument, p: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_fileSize(self, p);
    }
    pub fn get_fileModifiedDate(self: *const IXMLDocument, p: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_fileModifiedDate(self, p);
    }
    pub fn get_fileUpdatedDate(self: *const IXMLDocument, p: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_fileUpdatedDate(self, p);
    }
    pub fn get_URL(self: *const IXMLDocument, p: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_URL(self, p);
    }
    pub fn put_URL(self: *const IXMLDocument, p: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_URL(self, p);
    }
    pub fn get_mimeType(self: *const IXMLDocument, p: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_mimeType(self, p);
    }
    pub fn get_readyState(self: *const IXMLDocument, pl: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_readyState(self, pl);
    }
    pub fn get_charset(self: *const IXMLDocument, p: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_charset(self, p);
    }
    pub fn put_charset(self: *const IXMLDocument, p: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_charset(self, p);
    }
    pub fn get_version(self: *const IXMLDocument, p: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_version(self, p);
    }
    pub fn get_doctype(self: *const IXMLDocument, p: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_doctype(self, p);
    }
    pub fn get_dtdURL(self: *const IXMLDocument, p: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_dtdURL(self, p);
    }
    pub fn createElement(self: *const IXMLDocument, vType: VARIANT, var1: VARIANT, ppElem: ?*?*IXMLElement) callconv(.Inline) HRESULT {
        return self.vtable.createElement(self, vType, var1, ppElem);
    }
};

const IID_IXMLDocument2_Value = Guid.initString("2b8de2fe-8d2d-11d1-b2fc-00c04fd915a9");
pub const IID_IXMLDocument2 = &IID_IXMLDocument2_Value;
pub const IXMLDocument2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_root: *const fn(
            self: *const IXMLDocument2,
            p: ?*?*IXMLElement2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fileSize: *const fn(
            self: *const IXMLDocument2,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fileModifiedDate: *const fn(
            self: *const IXMLDocument2,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fileUpdatedDate: *const fn(
            self: *const IXMLDocument2,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_URL: *const fn(
            self: *const IXMLDocument2,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_URL: *const fn(
            self: *const IXMLDocument2,
            p: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_mimeType: *const fn(
            self: *const IXMLDocument2,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn(
            self: *const IXMLDocument2,
            pl: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_charset: *const fn(
            self: *const IXMLDocument2,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_charset: *const fn(
            self: *const IXMLDocument2,
            p: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_version: *const fn(
            self: *const IXMLDocument2,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_doctype: *const fn(
            self: *const IXMLDocument2,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dtdURL: *const fn(
            self: *const IXMLDocument2,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createElement: *const fn(
            self: *const IXMLDocument2,
            vType: VARIANT,
            var1: VARIANT,
            ppElem: ?*?*IXMLElement2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_async: *const fn(
            self: *const IXMLDocument2,
            pf: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_async: *const fn(
            self: *const IXMLDocument2,
            f: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_root(self: *const IXMLDocument2, p: ?*?*IXMLElement2) callconv(.Inline) HRESULT {
        return self.vtable.get_root(self, p);
    }
    pub fn get_fileSize(self: *const IXMLDocument2, p: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_fileSize(self, p);
    }
    pub fn get_fileModifiedDate(self: *const IXMLDocument2, p: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_fileModifiedDate(self, p);
    }
    pub fn get_fileUpdatedDate(self: *const IXMLDocument2, p: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_fileUpdatedDate(self, p);
    }
    pub fn get_URL(self: *const IXMLDocument2, p: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_URL(self, p);
    }
    pub fn put_URL(self: *const IXMLDocument2, p: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_URL(self, p);
    }
    pub fn get_mimeType(self: *const IXMLDocument2, p: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_mimeType(self, p);
    }
    pub fn get_readyState(self: *const IXMLDocument2, pl: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_readyState(self, pl);
    }
    pub fn get_charset(self: *const IXMLDocument2, p: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_charset(self, p);
    }
    pub fn put_charset(self: *const IXMLDocument2, p: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_charset(self, p);
    }
    pub fn get_version(self: *const IXMLDocument2, p: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_version(self, p);
    }
    pub fn get_doctype(self: *const IXMLDocument2, p: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_doctype(self, p);
    }
    pub fn get_dtdURL(self: *const IXMLDocument2, p: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_dtdURL(self, p);
    }
    pub fn createElement(self: *const IXMLDocument2, vType: VARIANT, var1: VARIANT, ppElem: ?*?*IXMLElement2) callconv(.Inline) HRESULT {
        return self.vtable.createElement(self, vType, var1, ppElem);
    }
    pub fn get_async(self: *const IXMLDocument2, pf: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_async(self, pf);
    }
    pub fn put_async(self: *const IXMLDocument2, f: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_async(self, f);
    }
};

const IID_IXMLElement_Value = Guid.initString("3f7f31ac-e15f-11d0-9c25-00c04fc99c8e");
pub const IID_IXMLElement = &IID_IXMLElement_Value;
pub const IXMLElement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_tagName: *const fn(
            self: *const IXMLElement,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_tagName: *const fn(
            self: *const IXMLElement,
            p: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parent: *const fn(
            self: *const IXMLElement,
            ppParent: ?*?*IXMLElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setAttribute: *const fn(
            self: *const IXMLElement,
            strPropertyName: ?BSTR,
            PropertyValue: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getAttribute: *const fn(
            self: *const IXMLElement,
            strPropertyName: ?BSTR,
            PropertyValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeAttribute: *const fn(
            self: *const IXMLElement,
            strPropertyName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_children: *const fn(
            self: *const IXMLElement,
            pp: ?*?*IXMLElementCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IXMLElement,
            plType: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_text: *const fn(
            self: *const IXMLElement,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_text: *const fn(
            self: *const IXMLElement,
            p: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addChild: *const fn(
            self: *const IXMLElement,
            pChildElem: ?*IXMLElement,
            lIndex: i32,
            lReserved: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeChild: *const fn(
            self: *const IXMLElement,
            pChildElem: ?*IXMLElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_tagName(self: *const IXMLElement, p: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_tagName(self, p);
    }
    pub fn put_tagName(self: *const IXMLElement, p: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_tagName(self, p);
    }
    pub fn get_parent(self: *const IXMLElement, ppParent: ?*?*IXMLElement) callconv(.Inline) HRESULT {
        return self.vtable.get_parent(self, ppParent);
    }
    pub fn setAttribute(self: *const IXMLElement, strPropertyName: ?BSTR, PropertyValue: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.setAttribute(self, strPropertyName, PropertyValue);
    }
    pub fn getAttribute(self: *const IXMLElement, strPropertyName: ?BSTR, PropertyValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.getAttribute(self, strPropertyName, PropertyValue);
    }
    pub fn removeAttribute(self: *const IXMLElement, strPropertyName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.removeAttribute(self, strPropertyName);
    }
    pub fn get_children(self: *const IXMLElement, pp: ?*?*IXMLElementCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_children(self, pp);
    }
    pub fn get_type(self: *const IXMLElement, plType: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_type(self, plType);
    }
    pub fn get_text(self: *const IXMLElement, p: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_text(self, p);
    }
    pub fn put_text(self: *const IXMLElement, p: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_text(self, p);
    }
    pub fn addChild(self: *const IXMLElement, pChildElem: ?*IXMLElement, lIndex: i32, lReserved: i32) callconv(.Inline) HRESULT {
        return self.vtable.addChild(self, pChildElem, lIndex, lReserved);
    }
    pub fn removeChild(self: *const IXMLElement, pChildElem: ?*IXMLElement) callconv(.Inline) HRESULT {
        return self.vtable.removeChild(self, pChildElem);
    }
};

const IID_IXMLElement2_Value = Guid.initString("2b8de2ff-8d2d-11d1-b2fc-00c04fd915a9");
pub const IID_IXMLElement2 = &IID_IXMLElement2_Value;
pub const IXMLElement2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_tagName: *const fn(
            self: *const IXMLElement2,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_tagName: *const fn(
            self: *const IXMLElement2,
            p: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parent: *const fn(
            self: *const IXMLElement2,
            ppParent: ?*?*IXMLElement2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setAttribute: *const fn(
            self: *const IXMLElement2,
            strPropertyName: ?BSTR,
            PropertyValue: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getAttribute: *const fn(
            self: *const IXMLElement2,
            strPropertyName: ?BSTR,
            PropertyValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeAttribute: *const fn(
            self: *const IXMLElement2,
            strPropertyName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_children: *const fn(
            self: *const IXMLElement2,
            pp: ?*?*IXMLElementCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const IXMLElement2,
            plType: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_text: *const fn(
            self: *const IXMLElement2,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_text: *const fn(
            self: *const IXMLElement2,
            p: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addChild: *const fn(
            self: *const IXMLElement2,
            pChildElem: ?*IXMLElement2,
            lIndex: i32,
            lReserved: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeChild: *const fn(
            self: *const IXMLElement2,
            pChildElem: ?*IXMLElement2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_attributes: *const fn(
            self: *const IXMLElement2,
            pp: ?*?*IXMLElementCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_tagName(self: *const IXMLElement2, p: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_tagName(self, p);
    }
    pub fn put_tagName(self: *const IXMLElement2, p: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_tagName(self, p);
    }
    pub fn get_parent(self: *const IXMLElement2, ppParent: ?*?*IXMLElement2) callconv(.Inline) HRESULT {
        return self.vtable.get_parent(self, ppParent);
    }
    pub fn setAttribute(self: *const IXMLElement2, strPropertyName: ?BSTR, PropertyValue: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.setAttribute(self, strPropertyName, PropertyValue);
    }
    pub fn getAttribute(self: *const IXMLElement2, strPropertyName: ?BSTR, PropertyValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.getAttribute(self, strPropertyName, PropertyValue);
    }
    pub fn removeAttribute(self: *const IXMLElement2, strPropertyName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.removeAttribute(self, strPropertyName);
    }
    pub fn get_children(self: *const IXMLElement2, pp: ?*?*IXMLElementCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_children(self, pp);
    }
    pub fn get_type(self: *const IXMLElement2, plType: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_type(self, plType);
    }
    pub fn get_text(self: *const IXMLElement2, p: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_text(self, p);
    }
    pub fn put_text(self: *const IXMLElement2, p: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_text(self, p);
    }
    pub fn addChild(self: *const IXMLElement2, pChildElem: ?*IXMLElement2, lIndex: i32, lReserved: i32) callconv(.Inline) HRESULT {
        return self.vtable.addChild(self, pChildElem, lIndex, lReserved);
    }
    pub fn removeChild(self: *const IXMLElement2, pChildElem: ?*IXMLElement2) callconv(.Inline) HRESULT {
        return self.vtable.removeChild(self, pChildElem);
    }
    pub fn get_attributes(self: *const IXMLElement2, pp: ?*?*IXMLElementCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_attributes(self, pp);
    }
};

const IID_IXMLAttribute_Value = Guid.initString("d4d4a0fc-3b73-11d1-b2b4-00c04fb92596");
pub const IID_IXMLAttribute = &IID_IXMLAttribute_Value;
pub const IXMLAttribute = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const IXMLAttribute,
            n: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn(
            self: *const IXMLAttribute,
            v: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_name(self: *const IXMLAttribute, n: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_name(self, n);
    }
    pub fn get_value(self: *const IXMLAttribute, v: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_value(self, v);
    }
};

const IID_IXMLError_Value = Guid.initString("948c5ad3-c58d-11d0-9c0b-00c04fc99c8e");
pub const IID_IXMLError = &IID_IXMLError_Value;
pub const IXMLError = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetErrorInfo: *const fn(
            self: *const IXMLError,
            pErrorReturn: ?*XML_ERROR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetErrorInfo(self: *const IXMLError, pErrorReturn: ?*XML_ERROR) callconv(.Inline) HRESULT {
        return self.vtable.GetErrorInfo(self, pErrorReturn);
    }
};

const CLSID_DOMDocument60_Value = Guid.initString("88d96a05-f192-11d4-a65f-0040963251e5");
pub const CLSID_DOMDocument60 = &CLSID_DOMDocument60_Value;

const CLSID_FreeThreadedDOMDocument60_Value = Guid.initString("88d96a06-f192-11d4-a65f-0040963251e5");
pub const CLSID_FreeThreadedDOMDocument60 = &CLSID_FreeThreadedDOMDocument60_Value;

const CLSID_XMLSchemaCache60_Value = Guid.initString("88d96a07-f192-11d4-a65f-0040963251e5");
pub const CLSID_XMLSchemaCache60 = &CLSID_XMLSchemaCache60_Value;

const CLSID_XSLTemplate60_Value = Guid.initString("88d96a08-f192-11d4-a65f-0040963251e5");
pub const CLSID_XSLTemplate60 = &CLSID_XSLTemplate60_Value;

const CLSID_XMLHTTP60_Value = Guid.initString("88d96a0a-f192-11d4-a65f-0040963251e5");
pub const CLSID_XMLHTTP60 = &CLSID_XMLHTTP60_Value;

const CLSID_FreeThreadedXMLHTTP60_Value = Guid.initString("88d96a09-f192-11d4-a65f-0040963251e5");
pub const CLSID_FreeThreadedXMLHTTP60 = &CLSID_FreeThreadedXMLHTTP60_Value;

const CLSID_ServerXMLHTTP60_Value = Guid.initString("88d96a0b-f192-11d4-a65f-0040963251e5");
pub const CLSID_ServerXMLHTTP60 = &CLSID_ServerXMLHTTP60_Value;

const CLSID_SAXXMLReader60_Value = Guid.initString("88d96a0c-f192-11d4-a65f-0040963251e5");
pub const CLSID_SAXXMLReader60 = &CLSID_SAXXMLReader60_Value;

const CLSID_MXXMLWriter60_Value = Guid.initString("88d96a0f-f192-11d4-a65f-0040963251e5");
pub const CLSID_MXXMLWriter60 = &CLSID_MXXMLWriter60_Value;

const CLSID_MXHTMLWriter60_Value = Guid.initString("88d96a10-f192-11d4-a65f-0040963251e5");
pub const CLSID_MXHTMLWriter60 = &CLSID_MXHTMLWriter60_Value;

const CLSID_SAXAttributes60_Value = Guid.initString("88d96a0e-f192-11d4-a65f-0040963251e5");
pub const CLSID_SAXAttributes60 = &CLSID_SAXAttributes60_Value;

const CLSID_MXNamespaceManager60_Value = Guid.initString("88d96a11-f192-11d4-a65f-0040963251e5");
pub const CLSID_MXNamespaceManager60 = &CLSID_MXNamespaceManager60_Value;

const IID_IXMLDOMDocument2_Value = Guid.initString("2933bf95-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMDocument2 = &IID_IXMLDOMDocument2_Value;
pub const IXMLDOMDocument2 = extern union {
    pub const VTable = extern struct {
        base: IXMLDOMDocument.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_namespaces: *const fn(
            self: *const IXMLDOMDocument2,
            namespaceCollection: ?*?*IXMLDOMSchemaCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_schemas: *const fn(
            self: *const IXMLDOMDocument2,
            otherCollection: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_schemas: *const fn(
            self: *const IXMLDOMDocument2,
            otherCollection: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        validate: *const fn(
            self: *const IXMLDOMDocument2,
            errorObj: ?*?*IXMLDOMParseError,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setProperty: *const fn(
            self: *const IXMLDOMDocument2,
            name: ?BSTR,
            value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getProperty: *const fn(
            self: *const IXMLDOMDocument2,
            name: ?BSTR,
            value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IXMLDOMDocument: IXMLDOMDocument,
    IXMLDOMNode: IXMLDOMNode,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_namespaces(self: *const IXMLDOMDocument2, namespaceCollection: ?*?*IXMLDOMSchemaCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_namespaces(self, namespaceCollection);
    }
    pub fn get_schemas(self: *const IXMLDOMDocument2, otherCollection: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_schemas(self, otherCollection);
    }
    pub fn putref_schemas(self: *const IXMLDOMDocument2, otherCollection: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.putref_schemas(self, otherCollection);
    }
    pub fn validate(self: *const IXMLDOMDocument2, errorObj: ?*?*IXMLDOMParseError) callconv(.Inline) HRESULT {
        return self.vtable.validate(self, errorObj);
    }
    pub fn setProperty(self: *const IXMLDOMDocument2, name: ?BSTR, value: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.setProperty(self, name, value);
    }
    pub fn getProperty(self: *const IXMLDOMDocument2, name: ?BSTR, value: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.getProperty(self, name, value);
    }
};

const IID_IXMLDOMDocument3_Value = Guid.initString("2933bf96-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMDocument3 = &IID_IXMLDOMDocument3_Value;
pub const IXMLDOMDocument3 = extern union {
    pub const VTable = extern struct {
        base: IXMLDOMDocument2.VTable,
        validateNode: *const fn(
            self: *const IXMLDOMDocument3,
            node: ?*IXMLDOMNode,
            errorObj: ?*?*IXMLDOMParseError,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        importNode: *const fn(
            self: *const IXMLDOMDocument3,
            node: ?*IXMLDOMNode,
            deep: i16,
            clone: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IXMLDOMDocument2: IXMLDOMDocument2,
    IXMLDOMDocument: IXMLDOMDocument,
    IXMLDOMNode: IXMLDOMNode,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn validateNode(self: *const IXMLDOMDocument3, node: ?*IXMLDOMNode, errorObj: ?*?*IXMLDOMParseError) callconv(.Inline) HRESULT {
        return self.vtable.validateNode(self, node, errorObj);
    }
    pub fn importNode(self: *const IXMLDOMDocument3, node: ?*IXMLDOMNode, deep: i16, clone: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.importNode(self, node, deep, clone);
    }
};

const IID_IXMLDOMSchemaCollection_Value = Guid.initString("373984c8-b845-449b-91e7-45ac83036ade");
pub const IID_IXMLDOMSchemaCollection = &IID_IXMLDOMSchemaCollection_Value;
pub const IXMLDOMSchemaCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        add: *const fn(
            self: *const IXMLDOMSchemaCollection,
            namespaceURI: ?BSTR,
            @"var": VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get: *const fn(
            self: *const IXMLDOMSchemaCollection,
            namespaceURI: ?BSTR,
            schemaNode: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        remove: *const fn(
            self: *const IXMLDOMSchemaCollection,
            namespaceURI: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IXMLDOMSchemaCollection,
            length: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_namespaceURI: *const fn(
            self: *const IXMLDOMSchemaCollection,
            index: i32,
            length: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addCollection: *const fn(
            self: *const IXMLDOMSchemaCollection,
            otherCollection: ?*IXMLDOMSchemaCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn(
            self: *const IXMLDOMSchemaCollection,
            ppUnk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn add(self: *const IXMLDOMSchemaCollection, namespaceURI: ?BSTR, @"var": VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.add(self, namespaceURI, @"var");
    }
    pub fn get(self: *const IXMLDOMSchemaCollection, namespaceURI: ?BSTR, schemaNode: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.get(self, namespaceURI, schemaNode);
    }
    pub fn remove(self: *const IXMLDOMSchemaCollection, namespaceURI: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.remove(self, namespaceURI);
    }
    pub fn get_length(self: *const IXMLDOMSchemaCollection, length: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_length(self, length);
    }
    pub fn get_namespaceURI(self: *const IXMLDOMSchemaCollection, index: i32, length: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_namespaceURI(self, index, length);
    }
    pub fn addCollection(self: *const IXMLDOMSchemaCollection, otherCollection: ?*IXMLDOMSchemaCollection) callconv(.Inline) HRESULT {
        return self.vtable.addCollection(self, otherCollection);
    }
    pub fn get__newEnum(self: *const IXMLDOMSchemaCollection, ppUnk: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__newEnum(self, ppUnk);
    }
};

const IID_IXMLDOMSelection_Value = Guid.initString("aa634fc7-5888-44a7-a257-3a47150d3a0e");
pub const IID_IXMLDOMSelection = &IID_IXMLDOMSelection_Value;
pub const IXMLDOMSelection = extern union {
    pub const VTable = extern struct {
        base: IXMLDOMNodeList.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_expr: *const fn(
            self: *const IXMLDOMSelection,
            expression: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_expr: *const fn(
            self: *const IXMLDOMSelection,
            expression: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_context: *const fn(
            self: *const IXMLDOMSelection,
            ppNode: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_context: *const fn(
            self: *const IXMLDOMSelection,
            pNode: ?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        peekNode: *const fn(
            self: *const IXMLDOMSelection,
            ppNode: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        matches: *const fn(
            self: *const IXMLDOMSelection,
            pNode: ?*IXMLDOMNode,
            ppNode: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeNext: *const fn(
            self: *const IXMLDOMSelection,
            ppNode: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeAll: *const fn(
            self: *const IXMLDOMSelection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        clone: *const fn(
            self: *const IXMLDOMSelection,
            ppNode: ?*?*IXMLDOMSelection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getProperty: *const fn(
            self: *const IXMLDOMSelection,
            name: ?BSTR,
            value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setProperty: *const fn(
            self: *const IXMLDOMSelection,
            name: ?BSTR,
            value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IXMLDOMNodeList: IXMLDOMNodeList,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_expr(self: *const IXMLDOMSelection, expression: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_expr(self, expression);
    }
    pub fn put_expr(self: *const IXMLDOMSelection, expression: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_expr(self, expression);
    }
    pub fn get_context(self: *const IXMLDOMSelection, ppNode: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.get_context(self, ppNode);
    }
    pub fn putref_context(self: *const IXMLDOMSelection, pNode: ?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.putref_context(self, pNode);
    }
    pub fn peekNode(self: *const IXMLDOMSelection, ppNode: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.peekNode(self, ppNode);
    }
    pub fn matches(self: *const IXMLDOMSelection, pNode: ?*IXMLDOMNode, ppNode: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.matches(self, pNode, ppNode);
    }
    pub fn removeNext(self: *const IXMLDOMSelection, ppNode: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.removeNext(self, ppNode);
    }
    pub fn removeAll(self: *const IXMLDOMSelection) callconv(.Inline) HRESULT {
        return self.vtable.removeAll(self);
    }
    pub fn clone(self: *const IXMLDOMSelection, ppNode: ?*?*IXMLDOMSelection) callconv(.Inline) HRESULT {
        return self.vtable.clone(self, ppNode);
    }
    pub fn getProperty(self: *const IXMLDOMSelection, name: ?BSTR, value: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.getProperty(self, name, value);
    }
    pub fn setProperty(self: *const IXMLDOMSelection, name: ?BSTR, value: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.setProperty(self, name, value);
    }
};

const IID_IXMLDOMParseError2_Value = Guid.initString("3efaa428-272f-11d2-836f-0000f87a7782");
pub const IID_IXMLDOMParseError2 = &IID_IXMLDOMParseError2_Value;
pub const IXMLDOMParseError2 = extern union {
    pub const VTable = extern struct {
        base: IXMLDOMParseError.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_errorXPath: *const fn(
            self: *const IXMLDOMParseError2,
            xpathexpr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_allErrors: *const fn(
            self: *const IXMLDOMParseError2,
            allErrors: ?*?*IXMLDOMParseErrorCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        errorParameters: *const fn(
            self: *const IXMLDOMParseError2,
            index: i32,
            param1: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_errorParametersCount: *const fn(
            self: *const IXMLDOMParseError2,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IXMLDOMParseError: IXMLDOMParseError,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_errorXPath(self: *const IXMLDOMParseError2, xpathexpr: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_errorXPath(self, xpathexpr);
    }
    pub fn get_allErrors(self: *const IXMLDOMParseError2, allErrors: ?*?*IXMLDOMParseErrorCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_allErrors(self, allErrors);
    }
    pub fn errorParameters(self: *const IXMLDOMParseError2, index: i32, param1: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.errorParameters(self, index, param1);
    }
    pub fn get_errorParametersCount(self: *const IXMLDOMParseError2, count: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_errorParametersCount(self, count);
    }
};

const IID_IXMLDOMParseErrorCollection_Value = Guid.initString("3efaa429-272f-11d2-836f-0000f87a7782");
pub const IID_IXMLDOMParseErrorCollection = &IID_IXMLDOMParseErrorCollection_Value;
pub const IXMLDOMParseErrorCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_item: *const fn(
            self: *const IXMLDOMParseErrorCollection,
            index: i32,
            @"error": ?*?*IXMLDOMParseError2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IXMLDOMParseErrorCollection,
            length: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_next: *const fn(
            self: *const IXMLDOMParseErrorCollection,
            @"error": ?*?*IXMLDOMParseError2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        reset: *const fn(
            self: *const IXMLDOMParseErrorCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn(
            self: *const IXMLDOMParseErrorCollection,
            ppunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_item(self: *const IXMLDOMParseErrorCollection, index: i32, @"error": ?*?*IXMLDOMParseError2) callconv(.Inline) HRESULT {
        return self.vtable.get_item(self, index, @"error");
    }
    pub fn get_length(self: *const IXMLDOMParseErrorCollection, length: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_length(self, length);
    }
    pub fn get_next(self: *const IXMLDOMParseErrorCollection, @"error": ?*?*IXMLDOMParseError2) callconv(.Inline) HRESULT {
        return self.vtable.get_next(self, @"error");
    }
    pub fn reset(self: *const IXMLDOMParseErrorCollection) callconv(.Inline) HRESULT {
        return self.vtable.reset(self);
    }
    pub fn get__newEnum(self: *const IXMLDOMParseErrorCollection, ppunk: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__newEnum(self, ppunk);
    }
};

const IID_IXSLProcessor_Value = Guid.initString("2933bf92-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXSLProcessor = &IID_IXSLProcessor_Value;
pub const IXSLProcessor = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_input: *const fn(
            self: *const IXSLProcessor,
            @"var": VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_input: *const fn(
            self: *const IXSLProcessor,
            pVar: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ownerTemplate: *const fn(
            self: *const IXSLProcessor,
            ppTemplate: ?*?*IXSLTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setStartMode: *const fn(
            self: *const IXSLProcessor,
            mode: ?BSTR,
            namespaceURI: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_startMode: *const fn(
            self: *const IXSLProcessor,
            mode: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_startModeURI: *const fn(
            self: *const IXSLProcessor,
            namespaceURI: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_output: *const fn(
            self: *const IXSLProcessor,
            output: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_output: *const fn(
            self: *const IXSLProcessor,
            pOutput: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        transform: *const fn(
            self: *const IXSLProcessor,
            pDone: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        reset: *const fn(
            self: *const IXSLProcessor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn(
            self: *const IXSLProcessor,
            pReadyState: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addParameter: *const fn(
            self: *const IXSLProcessor,
            baseName: ?BSTR,
            parameter: VARIANT,
            namespaceURI: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addObject: *const fn(
            self: *const IXSLProcessor,
            obj: ?*IDispatch,
            namespaceURI: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_stylesheet: *const fn(
            self: *const IXSLProcessor,
            stylesheet: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_input(self: *const IXSLProcessor, @"var": VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_input(self, @"var");
    }
    pub fn get_input(self: *const IXSLProcessor, pVar: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_input(self, pVar);
    }
    pub fn get_ownerTemplate(self: *const IXSLProcessor, ppTemplate: ?*?*IXSLTemplate) callconv(.Inline) HRESULT {
        return self.vtable.get_ownerTemplate(self, ppTemplate);
    }
    pub fn setStartMode(self: *const IXSLProcessor, mode: ?BSTR, namespaceURI: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.setStartMode(self, mode, namespaceURI);
    }
    pub fn get_startMode(self: *const IXSLProcessor, mode: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_startMode(self, mode);
    }
    pub fn get_startModeURI(self: *const IXSLProcessor, namespaceURI: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_startModeURI(self, namespaceURI);
    }
    pub fn put_output(self: *const IXSLProcessor, output: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_output(self, output);
    }
    pub fn get_output(self: *const IXSLProcessor, pOutput: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_output(self, pOutput);
    }
    pub fn transform(self: *const IXSLProcessor, pDone: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.transform(self, pDone);
    }
    pub fn reset(self: *const IXSLProcessor) callconv(.Inline) HRESULT {
        return self.vtable.reset(self);
    }
    pub fn get_readyState(self: *const IXSLProcessor, pReadyState: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_readyState(self, pReadyState);
    }
    pub fn addParameter(self: *const IXSLProcessor, baseName: ?BSTR, parameter: VARIANT, namespaceURI: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.addParameter(self, baseName, parameter, namespaceURI);
    }
    pub fn addObject(self: *const IXSLProcessor, obj: ?*IDispatch, namespaceURI: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.addObject(self, obj, namespaceURI);
    }
    pub fn get_stylesheet(self: *const IXSLProcessor, stylesheet: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.get_stylesheet(self, stylesheet);
    }
};

const IID_IXSLTemplate_Value = Guid.initString("2933bf93-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXSLTemplate = &IID_IXSLTemplate_Value;
pub const IXSLTemplate = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_stylesheet: *const fn(
            self: *const IXSLTemplate,
            stylesheet: ?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_stylesheet: *const fn(
            self: *const IXSLTemplate,
            stylesheet: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createProcessor: *const fn(
            self: *const IXSLTemplate,
            ppProcessor: ?*?*IXSLProcessor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_stylesheet(self: *const IXSLTemplate, stylesheet: ?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.putref_stylesheet(self, stylesheet);
    }
    pub fn get_stylesheet(self: *const IXSLTemplate, stylesheet: ?*?*IXMLDOMNode) callconv(.Inline) HRESULT {
        return self.vtable.get_stylesheet(self, stylesheet);
    }
    pub fn createProcessor(self: *const IXSLTemplate, ppProcessor: ?*?*IXSLProcessor) callconv(.Inline) HRESULT {
        return self.vtable.createProcessor(self, ppProcessor);
    }
};

const IID_IXMLHTTPRequest_Value = Guid.initString("ed8c108d-4349-11d2-91a4-00c04f7969e8");
pub const IID_IXMLHTTPRequest = &IID_IXMLHTTPRequest_Value;
pub const IXMLHTTPRequest = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        open: *const fn(
            self: *const IXMLHTTPRequest,
            bstrMethod: ?BSTR,
            bstrUrl: ?BSTR,
            varAsync: VARIANT,
            bstrUser: VARIANT,
            bstrPassword: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setRequestHeader: *const fn(
            self: *const IXMLHTTPRequest,
            bstrHeader: ?BSTR,
            bstrValue: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getResponseHeader: *const fn(
            self: *const IXMLHTTPRequest,
            bstrHeader: ?BSTR,
            pbstrValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getAllResponseHeaders: *const fn(
            self: *const IXMLHTTPRequest,
            pbstrHeaders: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        send: *const fn(
            self: *const IXMLHTTPRequest,
            varBody: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        abort: *const fn(
            self: *const IXMLHTTPRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_status: *const fn(
            self: *const IXMLHTTPRequest,
            plStatus: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_statusText: *const fn(
            self: *const IXMLHTTPRequest,
            pbstrStatus: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_responseXML: *const fn(
            self: *const IXMLHTTPRequest,
            ppBody: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_responseText: *const fn(
            self: *const IXMLHTTPRequest,
            pbstrBody: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_responseBody: *const fn(
            self: *const IXMLHTTPRequest,
            pvarBody: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_responseStream: *const fn(
            self: *const IXMLHTTPRequest,
            pvarBody: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn(
            self: *const IXMLHTTPRequest,
            plState: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onreadystatechange: *const fn(
            self: *const IXMLHTTPRequest,
            pReadyStateSink: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn open(self: *const IXMLHTTPRequest, bstrMethod: ?BSTR, bstrUrl: ?BSTR, varAsync: VARIANT, bstrUser: VARIANT, bstrPassword: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.open(self, bstrMethod, bstrUrl, varAsync, bstrUser, bstrPassword);
    }
    pub fn setRequestHeader(self: *const IXMLHTTPRequest, bstrHeader: ?BSTR, bstrValue: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.setRequestHeader(self, bstrHeader, bstrValue);
    }
    pub fn getResponseHeader(self: *const IXMLHTTPRequest, bstrHeader: ?BSTR, pbstrValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.getResponseHeader(self, bstrHeader, pbstrValue);
    }
    pub fn getAllResponseHeaders(self: *const IXMLHTTPRequest, pbstrHeaders: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.getAllResponseHeaders(self, pbstrHeaders);
    }
    pub fn send(self: *const IXMLHTTPRequest, varBody: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.send(self, varBody);
    }
    pub fn abort(self: *const IXMLHTTPRequest) callconv(.Inline) HRESULT {
        return self.vtable.abort(self);
    }
    pub fn get_status(self: *const IXMLHTTPRequest, plStatus: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_status(self, plStatus);
    }
    pub fn get_statusText(self: *const IXMLHTTPRequest, pbstrStatus: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_statusText(self, pbstrStatus);
    }
    pub fn get_responseXML(self: *const IXMLHTTPRequest, ppBody: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_responseXML(self, ppBody);
    }
    pub fn get_responseText(self: *const IXMLHTTPRequest, pbstrBody: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_responseText(self, pbstrBody);
    }
    pub fn get_responseBody(self: *const IXMLHTTPRequest, pvarBody: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_responseBody(self, pvarBody);
    }
    pub fn get_responseStream(self: *const IXMLHTTPRequest, pvarBody: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_responseStream(self, pvarBody);
    }
    pub fn get_readyState(self: *const IXMLHTTPRequest, plState: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_readyState(self, plState);
    }
    pub fn put_onreadystatechange(self: *const IXMLHTTPRequest, pReadyStateSink: ?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.put_onreadystatechange(self, pReadyStateSink);
    }
};

pub const SERVERXMLHTTP_OPTION = enum(i32) {
    URL = -1,
    URL_CODEPAGE = 0,
    ESCAPE_PERCENT_IN_URL = 1,
    IGNORE_SERVER_SSL_CERT_ERROR_FLAGS = 2,
    SELECT_CLIENT_SSL_CERT = 3,
};
pub const SXH_OPTION_URL = SERVERXMLHTTP_OPTION.URL;
pub const SXH_OPTION_URL_CODEPAGE = SERVERXMLHTTP_OPTION.URL_CODEPAGE;
pub const SXH_OPTION_ESCAPE_PERCENT_IN_URL = SERVERXMLHTTP_OPTION.ESCAPE_PERCENT_IN_URL;
pub const SXH_OPTION_IGNORE_SERVER_SSL_CERT_ERROR_FLAGS = SERVERXMLHTTP_OPTION.IGNORE_SERVER_SSL_CERT_ERROR_FLAGS;
pub const SXH_OPTION_SELECT_CLIENT_SSL_CERT = SERVERXMLHTTP_OPTION.SELECT_CLIENT_SSL_CERT;

pub const SXH_SERVER_CERT_OPTION = enum(i32) {
    UNKNOWN_CA = 256,
    WRONG_USAGE = 512,
    CERT_CN_INVALID = 4096,
    CERT_DATE_INVALID = 8192,
    ALL_SERVER_ERRORS = 13056,
};
pub const SXH_SERVER_CERT_IGNORE_UNKNOWN_CA = SXH_SERVER_CERT_OPTION.UNKNOWN_CA;
pub const SXH_SERVER_CERT_IGNORE_WRONG_USAGE = SXH_SERVER_CERT_OPTION.WRONG_USAGE;
pub const SXH_SERVER_CERT_IGNORE_CERT_CN_INVALID = SXH_SERVER_CERT_OPTION.CERT_CN_INVALID;
pub const SXH_SERVER_CERT_IGNORE_CERT_DATE_INVALID = SXH_SERVER_CERT_OPTION.CERT_DATE_INVALID;
pub const SXH_SERVER_CERT_IGNORE_ALL_SERVER_ERRORS = SXH_SERVER_CERT_OPTION.ALL_SERVER_ERRORS;

pub const SXH_PROXY_SETTING = enum(i32) {
    DEFAULT = 0,
    DIRECT = 1,
    PROXY = 2,
    pub const PRECONFIG = .DEFAULT;
};
pub const SXH_PROXY_SET_DEFAULT = SXH_PROXY_SETTING.DEFAULT;
pub const SXH_PROXY_SET_PRECONFIG = SXH_PROXY_SETTING.DEFAULT;
pub const SXH_PROXY_SET_DIRECT = SXH_PROXY_SETTING.DIRECT;
pub const SXH_PROXY_SET_PROXY = SXH_PROXY_SETTING.PROXY;

const IID_IServerXMLHTTPRequest_Value = Guid.initString("2e9196bf-13ba-4dd4-91ca-6c571f281495");
pub const IID_IServerXMLHTTPRequest = &IID_IServerXMLHTTPRequest_Value;
pub const IServerXMLHTTPRequest = extern union {
    pub const VTable = extern struct {
        base: IXMLHTTPRequest.VTable,
        setTimeouts: *const fn(
            self: *const IServerXMLHTTPRequest,
            resolveTimeout: i32,
            connectTimeout: i32,
            sendTimeout: i32,
            receiveTimeout: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        waitForResponse: *const fn(
            self: *const IServerXMLHTTPRequest,
            timeoutInSeconds: VARIANT,
            isSuccessful: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getOption: *const fn(
            self: *const IServerXMLHTTPRequest,
            option: SERVERXMLHTTP_OPTION,
            value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setOption: *const fn(
            self: *const IServerXMLHTTPRequest,
            option: SERVERXMLHTTP_OPTION,
            value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IXMLHTTPRequest: IXMLHTTPRequest,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn setTimeouts(self: *const IServerXMLHTTPRequest, resolveTimeout: i32, connectTimeout: i32, sendTimeout: i32, receiveTimeout: i32) callconv(.Inline) HRESULT {
        return self.vtable.setTimeouts(self, resolveTimeout, connectTimeout, sendTimeout, receiveTimeout);
    }
    pub fn waitForResponse(self: *const IServerXMLHTTPRequest, timeoutInSeconds: VARIANT, isSuccessful: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.waitForResponse(self, timeoutInSeconds, isSuccessful);
    }
    pub fn getOption(self: *const IServerXMLHTTPRequest, option: SERVERXMLHTTP_OPTION, value: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.getOption(self, option, value);
    }
    pub fn setOption(self: *const IServerXMLHTTPRequest, option: SERVERXMLHTTP_OPTION, value: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.setOption(self, option, value);
    }
};

const IID_IServerXMLHTTPRequest2_Value = Guid.initString("2e01311b-c322-4b0a-bd77-b90cfdc8dce7");
pub const IID_IServerXMLHTTPRequest2 = &IID_IServerXMLHTTPRequest2_Value;
pub const IServerXMLHTTPRequest2 = extern union {
    pub const VTable = extern struct {
        base: IServerXMLHTTPRequest.VTable,
        setProxy: *const fn(
            self: *const IServerXMLHTTPRequest2,
            proxySetting: SXH_PROXY_SETTING,
            varProxyServer: VARIANT,
            varBypassList: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setProxyCredentials: *const fn(
            self: *const IServerXMLHTTPRequest2,
            bstrUserName: ?BSTR,
            bstrPassword: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IServerXMLHTTPRequest: IServerXMLHTTPRequest,
    IXMLHTTPRequest: IXMLHTTPRequest,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn setProxy(self: *const IServerXMLHTTPRequest2, proxySetting: SXH_PROXY_SETTING, varProxyServer: VARIANT, varBypassList: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.setProxy(self, proxySetting, varProxyServer, varBypassList);
    }
    pub fn setProxyCredentials(self: *const IServerXMLHTTPRequest2, bstrUserName: ?BSTR, bstrPassword: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.setProxyCredentials(self, bstrUserName, bstrPassword);
    }
};

const IID_ISAXXMLReader_Value = Guid.initString("a4f96ed0-f829-476e-81c0-cdc7bd2a0802");
pub const IID_ISAXXMLReader = &IID_ISAXXMLReader_Value;
pub const ISAXXMLReader = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        getFeature: *const fn(
            self: *const ISAXXMLReader,
            pwchName: ?[*:0]const u16,
            pvfValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putFeature: *const fn(
            self: *const ISAXXMLReader,
            pwchName: ?[*:0]const u16,
            vfValue: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getProperty: *const fn(
            self: *const ISAXXMLReader,
            pwchName: ?[*:0]const u16,
            pvarValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putProperty: *const fn(
            self: *const ISAXXMLReader,
            pwchName: ?[*:0]const u16,
            varValue: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getEntityResolver: *const fn(
            self: *const ISAXXMLReader,
            ppResolver: ?*?*ISAXEntityResolver,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putEntityResolver: *const fn(
            self: *const ISAXXMLReader,
            pResolver: ?*ISAXEntityResolver,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getContentHandler: *const fn(
            self: *const ISAXXMLReader,
            ppHandler: ?*?*ISAXContentHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putContentHandler: *const fn(
            self: *const ISAXXMLReader,
            pHandler: ?*ISAXContentHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getDTDHandler: *const fn(
            self: *const ISAXXMLReader,
            ppHandler: ?*?*ISAXDTDHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putDTDHandler: *const fn(
            self: *const ISAXXMLReader,
            pHandler: ?*ISAXDTDHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getErrorHandler: *const fn(
            self: *const ISAXXMLReader,
            ppHandler: ?*?*ISAXErrorHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putErrorHandler: *const fn(
            self: *const ISAXXMLReader,
            pHandler: ?*ISAXErrorHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getBaseURL: *const fn(
            self: *const ISAXXMLReader,
            ppwchBaseUrl: ?*const ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putBaseURL: *const fn(
            self: *const ISAXXMLReader,
            pwchBaseUrl: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getSecureBaseURL: *const fn(
            self: *const ISAXXMLReader,
            ppwchSecureBaseUrl: ?*const ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putSecureBaseURL: *const fn(
            self: *const ISAXXMLReader,
            pwchSecureBaseUrl: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        parse: *const fn(
            self: *const ISAXXMLReader,
            varInput: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        parseURL: *const fn(
            self: *const ISAXXMLReader,
            pwchUrl: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn getFeature(self: *const ISAXXMLReader, pwchName: ?[*:0]const u16, pvfValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.getFeature(self, pwchName, pvfValue);
    }
    pub fn putFeature(self: *const ISAXXMLReader, pwchName: ?[*:0]const u16, vfValue: i16) callconv(.Inline) HRESULT {
        return self.vtable.putFeature(self, pwchName, vfValue);
    }
    pub fn getProperty(self: *const ISAXXMLReader, pwchName: ?[*:0]const u16, pvarValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.getProperty(self, pwchName, pvarValue);
    }
    pub fn putProperty(self: *const ISAXXMLReader, pwchName: ?[*:0]const u16, varValue: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.putProperty(self, pwchName, varValue);
    }
    pub fn getEntityResolver(self: *const ISAXXMLReader, ppResolver: ?*?*ISAXEntityResolver) callconv(.Inline) HRESULT {
        return self.vtable.getEntityResolver(self, ppResolver);
    }
    pub fn putEntityResolver(self: *const ISAXXMLReader, pResolver: ?*ISAXEntityResolver) callconv(.Inline) HRESULT {
        return self.vtable.putEntityResolver(self, pResolver);
    }
    pub fn getContentHandler(self: *const ISAXXMLReader, ppHandler: ?*?*ISAXContentHandler) callconv(.Inline) HRESULT {
        return self.vtable.getContentHandler(self, ppHandler);
    }
    pub fn putContentHandler(self: *const ISAXXMLReader, pHandler: ?*ISAXContentHandler) callconv(.Inline) HRESULT {
        return self.vtable.putContentHandler(self, pHandler);
    }
    pub fn getDTDHandler(self: *const ISAXXMLReader, ppHandler: ?*?*ISAXDTDHandler) callconv(.Inline) HRESULT {
        return self.vtable.getDTDHandler(self, ppHandler);
    }
    pub fn putDTDHandler(self: *const ISAXXMLReader, pHandler: ?*ISAXDTDHandler) callconv(.Inline) HRESULT {
        return self.vtable.putDTDHandler(self, pHandler);
    }
    pub fn getErrorHandler(self: *const ISAXXMLReader, ppHandler: ?*?*ISAXErrorHandler) callconv(.Inline) HRESULT {
        return self.vtable.getErrorHandler(self, ppHandler);
    }
    pub fn putErrorHandler(self: *const ISAXXMLReader, pHandler: ?*ISAXErrorHandler) callconv(.Inline) HRESULT {
        return self.vtable.putErrorHandler(self, pHandler);
    }
    pub fn getBaseURL(self: *const ISAXXMLReader, ppwchBaseUrl: ?*const ?*u16) callconv(.Inline) HRESULT {
        return self.vtable.getBaseURL(self, ppwchBaseUrl);
    }
    pub fn putBaseURL(self: *const ISAXXMLReader, pwchBaseUrl: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.putBaseURL(self, pwchBaseUrl);
    }
    pub fn getSecureBaseURL(self: *const ISAXXMLReader, ppwchSecureBaseUrl: ?*const ?*u16) callconv(.Inline) HRESULT {
        return self.vtable.getSecureBaseURL(self, ppwchSecureBaseUrl);
    }
    pub fn putSecureBaseURL(self: *const ISAXXMLReader, pwchSecureBaseUrl: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.putSecureBaseURL(self, pwchSecureBaseUrl);
    }
    pub fn parse(self: *const ISAXXMLReader, varInput: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.parse(self, varInput);
    }
    pub fn parseURL(self: *const ISAXXMLReader, pwchUrl: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.parseURL(self, pwchUrl);
    }
};

const IID_ISAXXMLFilter_Value = Guid.initString("70409222-ca09-4475-acb8-40312fe8d145");
pub const IID_ISAXXMLFilter = &IID_ISAXXMLFilter_Value;
pub const ISAXXMLFilter = extern union {
    pub const VTable = extern struct {
        base: ISAXXMLReader.VTable,
        getParent: *const fn(
            self: *const ISAXXMLFilter,
            ppReader: ?*?*ISAXXMLReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putParent: *const fn(
            self: *const ISAXXMLFilter,
            pReader: ?*ISAXXMLReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ISAXXMLReader: ISAXXMLReader,
    IUnknown: IUnknown,
    pub fn getParent(self: *const ISAXXMLFilter, ppReader: ?*?*ISAXXMLReader) callconv(.Inline) HRESULT {
        return self.vtable.getParent(self, ppReader);
    }
    pub fn putParent(self: *const ISAXXMLFilter, pReader: ?*ISAXXMLReader) callconv(.Inline) HRESULT {
        return self.vtable.putParent(self, pReader);
    }
};

const IID_ISAXLocator_Value = Guid.initString("9b7e472a-0de4-4640-bff3-84d38a051c31");
pub const IID_ISAXLocator = &IID_ISAXLocator_Value;
pub const ISAXLocator = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        getColumnNumber: *const fn(
            self: *const ISAXLocator,
            pnColumn: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getLineNumber: *const fn(
            self: *const ISAXLocator,
            pnLine: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getPublicId: *const fn(
            self: *const ISAXLocator,
            ppwchPublicId: ?*const ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getSystemId: *const fn(
            self: *const ISAXLocator,
            ppwchSystemId: ?*const ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn getColumnNumber(self: *const ISAXLocator, pnColumn: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.getColumnNumber(self, pnColumn);
    }
    pub fn getLineNumber(self: *const ISAXLocator, pnLine: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.getLineNumber(self, pnLine);
    }
    pub fn getPublicId(self: *const ISAXLocator, ppwchPublicId: ?*const ?*u16) callconv(.Inline) HRESULT {
        return self.vtable.getPublicId(self, ppwchPublicId);
    }
    pub fn getSystemId(self: *const ISAXLocator, ppwchSystemId: ?*const ?*u16) callconv(.Inline) HRESULT {
        return self.vtable.getSystemId(self, ppwchSystemId);
    }
};

const IID_ISAXEntityResolver_Value = Guid.initString("99bca7bd-e8c4-4d5f-a0cf-6d907901ff07");
pub const IID_ISAXEntityResolver = &IID_ISAXEntityResolver_Value;
pub const ISAXEntityResolver = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        resolveEntity: *const fn(
            self: *const ISAXEntityResolver,
            pwchPublicId: ?[*:0]const u16,
            pwchSystemId: ?[*:0]const u16,
            pvarInput: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn resolveEntity(self: *const ISAXEntityResolver, pwchPublicId: ?[*:0]const u16, pwchSystemId: ?[*:0]const u16, pvarInput: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.resolveEntity(self, pwchPublicId, pwchSystemId, pvarInput);
    }
};

const IID_ISAXContentHandler_Value = Guid.initString("1545cdfa-9e4e-4497-a8a4-2bf7d0112c44");
pub const IID_ISAXContentHandler = &IID_ISAXContentHandler_Value;
pub const ISAXContentHandler = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        putDocumentLocator: *const fn(
            self: *const ISAXContentHandler,
            pLocator: ?*ISAXLocator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        startDocument: *const fn(
            self: *const ISAXContentHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        endDocument: *const fn(
            self: *const ISAXContentHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        startPrefixMapping: *const fn(
            self: *const ISAXContentHandler,
            pwchPrefix: ?[*:0]const u16,
            cchPrefix: i32,
            pwchUri: ?[*:0]const u16,
            cchUri: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        endPrefixMapping: *const fn(
            self: *const ISAXContentHandler,
            pwchPrefix: ?[*:0]const u16,
            cchPrefix: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        startElement: *const fn(
            self: *const ISAXContentHandler,
            pwchNamespaceUri: ?[*:0]const u16,
            cchNamespaceUri: i32,
            pwchLocalName: ?[*:0]const u16,
            cchLocalName: i32,
            pwchQName: ?[*:0]const u16,
            cchQName: i32,
            pAttributes: ?*ISAXAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        endElement: *const fn(
            self: *const ISAXContentHandler,
            pwchNamespaceUri: ?[*:0]const u16,
            cchNamespaceUri: i32,
            pwchLocalName: ?[*:0]const u16,
            cchLocalName: i32,
            pwchQName: ?[*:0]const u16,
            cchQName: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        characters: *const fn(
            self: *const ISAXContentHandler,
            pwchChars: ?[*:0]const u16,
            cchChars: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ignorableWhitespace: *const fn(
            self: *const ISAXContentHandler,
            pwchChars: ?[*:0]const u16,
            cchChars: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        processingInstruction: *const fn(
            self: *const ISAXContentHandler,
            pwchTarget: ?[*:0]const u16,
            cchTarget: i32,
            pwchData: ?[*:0]const u16,
            cchData: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        skippedEntity: *const fn(
            self: *const ISAXContentHandler,
            pwchName: ?[*:0]const u16,
            cchName: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn putDocumentLocator(self: *const ISAXContentHandler, pLocator: ?*ISAXLocator) callconv(.Inline) HRESULT {
        return self.vtable.putDocumentLocator(self, pLocator);
    }
    pub fn startDocument(self: *const ISAXContentHandler) callconv(.Inline) HRESULT {
        return self.vtable.startDocument(self);
    }
    pub fn endDocument(self: *const ISAXContentHandler) callconv(.Inline) HRESULT {
        return self.vtable.endDocument(self);
    }
    pub fn startPrefixMapping(self: *const ISAXContentHandler, pwchPrefix: ?[*:0]const u16, cchPrefix: i32, pwchUri: ?[*:0]const u16, cchUri: i32) callconv(.Inline) HRESULT {
        return self.vtable.startPrefixMapping(self, pwchPrefix, cchPrefix, pwchUri, cchUri);
    }
    pub fn endPrefixMapping(self: *const ISAXContentHandler, pwchPrefix: ?[*:0]const u16, cchPrefix: i32) callconv(.Inline) HRESULT {
        return self.vtable.endPrefixMapping(self, pwchPrefix, cchPrefix);
    }
    pub fn startElement(self: *const ISAXContentHandler, pwchNamespaceUri: ?[*:0]const u16, cchNamespaceUri: i32, pwchLocalName: ?[*:0]const u16, cchLocalName: i32, pwchQName: ?[*:0]const u16, cchQName: i32, pAttributes: ?*ISAXAttributes) callconv(.Inline) HRESULT {
        return self.vtable.startElement(self, pwchNamespaceUri, cchNamespaceUri, pwchLocalName, cchLocalName, pwchQName, cchQName, pAttributes);
    }
    pub fn endElement(self: *const ISAXContentHandler, pwchNamespaceUri: ?[*:0]const u16, cchNamespaceUri: i32, pwchLocalName: ?[*:0]const u16, cchLocalName: i32, pwchQName: ?[*:0]const u16, cchQName: i32) callconv(.Inline) HRESULT {
        return self.vtable.endElement(self, pwchNamespaceUri, cchNamespaceUri, pwchLocalName, cchLocalName, pwchQName, cchQName);
    }
    pub fn characters(self: *const ISAXContentHandler, pwchChars: ?[*:0]const u16, cchChars: i32) callconv(.Inline) HRESULT {
        return self.vtable.characters(self, pwchChars, cchChars);
    }
    pub fn ignorableWhitespace(self: *const ISAXContentHandler, pwchChars: ?[*:0]const u16, cchChars: i32) callconv(.Inline) HRESULT {
        return self.vtable.ignorableWhitespace(self, pwchChars, cchChars);
    }
    pub fn processingInstruction(self: *const ISAXContentHandler, pwchTarget: ?[*:0]const u16, cchTarget: i32, pwchData: ?[*:0]const u16, cchData: i32) callconv(.Inline) HRESULT {
        return self.vtable.processingInstruction(self, pwchTarget, cchTarget, pwchData, cchData);
    }
    pub fn skippedEntity(self: *const ISAXContentHandler, pwchName: ?[*:0]const u16, cchName: i32) callconv(.Inline) HRESULT {
        return self.vtable.skippedEntity(self, pwchName, cchName);
    }
};

const IID_ISAXDTDHandler_Value = Guid.initString("e15c1baf-afb3-4d60-8c36-19a8c45defed");
pub const IID_ISAXDTDHandler = &IID_ISAXDTDHandler_Value;
pub const ISAXDTDHandler = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        notationDecl: *const fn(
            self: *const ISAXDTDHandler,
            pwchName: ?[*:0]const u16,
            cchName: i32,
            pwchPublicId: ?[*:0]const u16,
            cchPublicId: i32,
            pwchSystemId: ?[*:0]const u16,
            cchSystemId: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        unparsedEntityDecl: *const fn(
            self: *const ISAXDTDHandler,
            pwchName: ?[*:0]const u16,
            cchName: i32,
            pwchPublicId: ?[*:0]const u16,
            cchPublicId: i32,
            pwchSystemId: ?[*:0]const u16,
            cchSystemId: i32,
            pwchNotationName: ?[*:0]const u16,
            cchNotationName: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn notationDecl(self: *const ISAXDTDHandler, pwchName: ?[*:0]const u16, cchName: i32, pwchPublicId: ?[*:0]const u16, cchPublicId: i32, pwchSystemId: ?[*:0]const u16, cchSystemId: i32) callconv(.Inline) HRESULT {
        return self.vtable.notationDecl(self, pwchName, cchName, pwchPublicId, cchPublicId, pwchSystemId, cchSystemId);
    }
    pub fn unparsedEntityDecl(self: *const ISAXDTDHandler, pwchName: ?[*:0]const u16, cchName: i32, pwchPublicId: ?[*:0]const u16, cchPublicId: i32, pwchSystemId: ?[*:0]const u16, cchSystemId: i32, pwchNotationName: ?[*:0]const u16, cchNotationName: i32) callconv(.Inline) HRESULT {
        return self.vtable.unparsedEntityDecl(self, pwchName, cchName, pwchPublicId, cchPublicId, pwchSystemId, cchSystemId, pwchNotationName, cchNotationName);
    }
};

const IID_ISAXErrorHandler_Value = Guid.initString("a60511c4-ccf5-479e-98a3-dc8dc545b7d0");
pub const IID_ISAXErrorHandler = &IID_ISAXErrorHandler_Value;
pub const ISAXErrorHandler = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        @"error": *const fn(
            self: *const ISAXErrorHandler,
            pLocator: ?*ISAXLocator,
            pwchErrorMessage: ?[*:0]const u16,
            hrErrorCode: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        fatalError: *const fn(
            self: *const ISAXErrorHandler,
            pLocator: ?*ISAXLocator,
            pwchErrorMessage: ?[*:0]const u16,
            hrErrorCode: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ignorableWarning: *const fn(
            self: *const ISAXErrorHandler,
            pLocator: ?*ISAXLocator,
            pwchErrorMessage: ?[*:0]const u16,
            hrErrorCode: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn @"error"(self: *const ISAXErrorHandler, pLocator: ?*ISAXLocator, pwchErrorMessage: ?[*:0]const u16, hrErrorCode: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.@"error"(self, pLocator, pwchErrorMessage, hrErrorCode);
    }
    pub fn fatalError(self: *const ISAXErrorHandler, pLocator: ?*ISAXLocator, pwchErrorMessage: ?[*:0]const u16, hrErrorCode: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.fatalError(self, pLocator, pwchErrorMessage, hrErrorCode);
    }
    pub fn ignorableWarning(self: *const ISAXErrorHandler, pLocator: ?*ISAXLocator, pwchErrorMessage: ?[*:0]const u16, hrErrorCode: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.ignorableWarning(self, pLocator, pwchErrorMessage, hrErrorCode);
    }
};

const IID_ISAXLexicalHandler_Value = Guid.initString("7f85d5f5-47a8-4497-bda5-84ba04819ea6");
pub const IID_ISAXLexicalHandler = &IID_ISAXLexicalHandler_Value;
pub const ISAXLexicalHandler = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        startDTD: *const fn(
            self: *const ISAXLexicalHandler,
            pwchName: ?[*:0]const u16,
            cchName: i32,
            pwchPublicId: ?[*:0]const u16,
            cchPublicId: i32,
            pwchSystemId: ?[*:0]const u16,
            cchSystemId: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        endDTD: *const fn(
            self: *const ISAXLexicalHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        startEntity: *const fn(
            self: *const ISAXLexicalHandler,
            pwchName: ?[*:0]const u16,
            cchName: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        endEntity: *const fn(
            self: *const ISAXLexicalHandler,
            pwchName: ?[*:0]const u16,
            cchName: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        startCDATA: *const fn(
            self: *const ISAXLexicalHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        endCDATA: *const fn(
            self: *const ISAXLexicalHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        comment: *const fn(
            self: *const ISAXLexicalHandler,
            pwchChars: ?[*:0]const u16,
            cchChars: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn startDTD(self: *const ISAXLexicalHandler, pwchName: ?[*:0]const u16, cchName: i32, pwchPublicId: ?[*:0]const u16, cchPublicId: i32, pwchSystemId: ?[*:0]const u16, cchSystemId: i32) callconv(.Inline) HRESULT {
        return self.vtable.startDTD(self, pwchName, cchName, pwchPublicId, cchPublicId, pwchSystemId, cchSystemId);
    }
    pub fn endDTD(self: *const ISAXLexicalHandler) callconv(.Inline) HRESULT {
        return self.vtable.endDTD(self);
    }
    pub fn startEntity(self: *const ISAXLexicalHandler, pwchName: ?[*:0]const u16, cchName: i32) callconv(.Inline) HRESULT {
        return self.vtable.startEntity(self, pwchName, cchName);
    }
    pub fn endEntity(self: *const ISAXLexicalHandler, pwchName: ?[*:0]const u16, cchName: i32) callconv(.Inline) HRESULT {
        return self.vtable.endEntity(self, pwchName, cchName);
    }
    pub fn startCDATA(self: *const ISAXLexicalHandler) callconv(.Inline) HRESULT {
        return self.vtable.startCDATA(self);
    }
    pub fn endCDATA(self: *const ISAXLexicalHandler) callconv(.Inline) HRESULT {
        return self.vtable.endCDATA(self);
    }
    pub fn comment(self: *const ISAXLexicalHandler, pwchChars: ?[*:0]const u16, cchChars: i32) callconv(.Inline) HRESULT {
        return self.vtable.comment(self, pwchChars, cchChars);
    }
};

const IID_ISAXDeclHandler_Value = Guid.initString("862629ac-771a-47b2-8337-4e6843c1be90");
pub const IID_ISAXDeclHandler = &IID_ISAXDeclHandler_Value;
pub const ISAXDeclHandler = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        elementDecl: *const fn(
            self: *const ISAXDeclHandler,
            pwchName: ?[*:0]const u16,
            cchName: i32,
            pwchModel: ?[*:0]const u16,
            cchModel: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        attributeDecl: *const fn(
            self: *const ISAXDeclHandler,
            pwchElementName: ?[*:0]const u16,
            cchElementName: i32,
            pwchAttributeName: ?[*:0]const u16,
            cchAttributeName: i32,
            pwchType: ?[*:0]const u16,
            cchType: i32,
            pwchValueDefault: ?[*:0]const u16,
            cchValueDefault: i32,
            pwchValue: ?[*:0]const u16,
            cchValue: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        internalEntityDecl: *const fn(
            self: *const ISAXDeclHandler,
            pwchName: ?[*:0]const u16,
            cchName: i32,
            pwchValue: ?[*:0]const u16,
            cchValue: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        externalEntityDecl: *const fn(
            self: *const ISAXDeclHandler,
            pwchName: ?[*:0]const u16,
            cchName: i32,
            pwchPublicId: ?[*:0]const u16,
            cchPublicId: i32,
            pwchSystemId: ?[*:0]const u16,
            cchSystemId: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn elementDecl(self: *const ISAXDeclHandler, pwchName: ?[*:0]const u16, cchName: i32, pwchModel: ?[*:0]const u16, cchModel: i32) callconv(.Inline) HRESULT {
        return self.vtable.elementDecl(self, pwchName, cchName, pwchModel, cchModel);
    }
    pub fn attributeDecl(self: *const ISAXDeclHandler, pwchElementName: ?[*:0]const u16, cchElementName: i32, pwchAttributeName: ?[*:0]const u16, cchAttributeName: i32, pwchType: ?[*:0]const u16, cchType: i32, pwchValueDefault: ?[*:0]const u16, cchValueDefault: i32, pwchValue: ?[*:0]const u16, cchValue: i32) callconv(.Inline) HRESULT {
        return self.vtable.attributeDecl(self, pwchElementName, cchElementName, pwchAttributeName, cchAttributeName, pwchType, cchType, pwchValueDefault, cchValueDefault, pwchValue, cchValue);
    }
    pub fn internalEntityDecl(self: *const ISAXDeclHandler, pwchName: ?[*:0]const u16, cchName: i32, pwchValue: ?[*:0]const u16, cchValue: i32) callconv(.Inline) HRESULT {
        return self.vtable.internalEntityDecl(self, pwchName, cchName, pwchValue, cchValue);
    }
    pub fn externalEntityDecl(self: *const ISAXDeclHandler, pwchName: ?[*:0]const u16, cchName: i32, pwchPublicId: ?[*:0]const u16, cchPublicId: i32, pwchSystemId: ?[*:0]const u16, cchSystemId: i32) callconv(.Inline) HRESULT {
        return self.vtable.externalEntityDecl(self, pwchName, cchName, pwchPublicId, cchPublicId, pwchSystemId, cchSystemId);
    }
};

const IID_ISAXAttributes_Value = Guid.initString("f078abe1-45d2-4832-91ea-4466ce2f25c9");
pub const IID_ISAXAttributes = &IID_ISAXAttributes_Value;
pub const ISAXAttributes = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        getLength: *const fn(
            self: *const ISAXAttributes,
            pnLength: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getURI: *const fn(
            self: *const ISAXAttributes,
            nIndex: i32,
            ppwchUri: ?*const ?*u16,
            pcchUri: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getLocalName: *const fn(
            self: *const ISAXAttributes,
            nIndex: i32,
            ppwchLocalName: ?*const ?*u16,
            pcchLocalName: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getQName: *const fn(
            self: *const ISAXAttributes,
            nIndex: i32,
            ppwchQName: ?*const ?*u16,
            pcchQName: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getName: *const fn(
            self: *const ISAXAttributes,
            nIndex: i32,
            ppwchUri: ?*const ?*u16,
            pcchUri: ?*i32,
            ppwchLocalName: ?*const ?*u16,
            pcchLocalName: ?*i32,
            ppwchQName: ?*const ?*u16,
            pcchQName: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getIndexFromName: *const fn(
            self: *const ISAXAttributes,
            pwchUri: ?[*:0]const u16,
            cchUri: i32,
            pwchLocalName: ?[*:0]const u16,
            cchLocalName: i32,
            pnIndex: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getIndexFromQName: *const fn(
            self: *const ISAXAttributes,
            pwchQName: ?[*:0]const u16,
            cchQName: i32,
            pnIndex: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getType: *const fn(
            self: *const ISAXAttributes,
            nIndex: i32,
            ppwchType: ?*const ?*u16,
            pcchType: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getTypeFromName: *const fn(
            self: *const ISAXAttributes,
            pwchUri: ?[*:0]const u16,
            cchUri: i32,
            pwchLocalName: ?[*:0]const u16,
            cchLocalName: i32,
            ppwchType: ?*const ?*u16,
            pcchType: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getTypeFromQName: *const fn(
            self: *const ISAXAttributes,
            pwchQName: ?[*:0]const u16,
            cchQName: i32,
            ppwchType: ?*const ?*u16,
            pcchType: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getValue: *const fn(
            self: *const ISAXAttributes,
            nIndex: i32,
            ppwchValue: ?*const ?*u16,
            pcchValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getValueFromName: *const fn(
            self: *const ISAXAttributes,
            pwchUri: ?[*:0]const u16,
            cchUri: i32,
            pwchLocalName: ?[*:0]const u16,
            cchLocalName: i32,
            ppwchValue: ?*const ?*u16,
            pcchValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getValueFromQName: *const fn(
            self: *const ISAXAttributes,
            pwchQName: ?[*:0]const u16,
            cchQName: i32,
            ppwchValue: ?*const ?*u16,
            pcchValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn getLength(self: *const ISAXAttributes, pnLength: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.getLength(self, pnLength);
    }
    pub fn getURI(self: *const ISAXAttributes, nIndex: i32, ppwchUri: ?*const ?*u16, pcchUri: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.getURI(self, nIndex, ppwchUri, pcchUri);
    }
    pub fn getLocalName(self: *const ISAXAttributes, nIndex: i32, ppwchLocalName: ?*const ?*u16, pcchLocalName: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.getLocalName(self, nIndex, ppwchLocalName, pcchLocalName);
    }
    pub fn getQName(self: *const ISAXAttributes, nIndex: i32, ppwchQName: ?*const ?*u16, pcchQName: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.getQName(self, nIndex, ppwchQName, pcchQName);
    }
    pub fn getName(self: *const ISAXAttributes, nIndex: i32, ppwchUri: ?*const ?*u16, pcchUri: ?*i32, ppwchLocalName: ?*const ?*u16, pcchLocalName: ?*i32, ppwchQName: ?*const ?*u16, pcchQName: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.getName(self, nIndex, ppwchUri, pcchUri, ppwchLocalName, pcchLocalName, ppwchQName, pcchQName);
    }
    pub fn getIndexFromName(self: *const ISAXAttributes, pwchUri: ?[*:0]const u16, cchUri: i32, pwchLocalName: ?[*:0]const u16, cchLocalName: i32, pnIndex: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.getIndexFromName(self, pwchUri, cchUri, pwchLocalName, cchLocalName, pnIndex);
    }
    pub fn getIndexFromQName(self: *const ISAXAttributes, pwchQName: ?[*:0]const u16, cchQName: i32, pnIndex: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.getIndexFromQName(self, pwchQName, cchQName, pnIndex);
    }
    pub fn getType(self: *const ISAXAttributes, nIndex: i32, ppwchType: ?*const ?*u16, pcchType: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.getType(self, nIndex, ppwchType, pcchType);
    }
    pub fn getTypeFromName(self: *const ISAXAttributes, pwchUri: ?[*:0]const u16, cchUri: i32, pwchLocalName: ?[*:0]const u16, cchLocalName: i32, ppwchType: ?*const ?*u16, pcchType: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.getTypeFromName(self, pwchUri, cchUri, pwchLocalName, cchLocalName, ppwchType, pcchType);
    }
    pub fn getTypeFromQName(self: *const ISAXAttributes, pwchQName: ?[*:0]const u16, cchQName: i32, ppwchType: ?*const ?*u16, pcchType: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.getTypeFromQName(self, pwchQName, cchQName, ppwchType, pcchType);
    }
    pub fn getValue(self: *const ISAXAttributes, nIndex: i32, ppwchValue: ?*const ?*u16, pcchValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.getValue(self, nIndex, ppwchValue, pcchValue);
    }
    pub fn getValueFromName(self: *const ISAXAttributes, pwchUri: ?[*:0]const u16, cchUri: i32, pwchLocalName: ?[*:0]const u16, cchLocalName: i32, ppwchValue: ?*const ?*u16, pcchValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.getValueFromName(self, pwchUri, cchUri, pwchLocalName, cchLocalName, ppwchValue, pcchValue);
    }
    pub fn getValueFromQName(self: *const ISAXAttributes, pwchQName: ?[*:0]const u16, cchQName: i32, ppwchValue: ?*const ?*u16, pcchValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.getValueFromQName(self, pwchQName, cchQName, ppwchValue, pcchValue);
    }
};

const IID_IVBSAXXMLReader_Value = Guid.initString("8c033caa-6cd6-4f73-b728-4531af74945f");
pub const IID_IVBSAXXMLReader = &IID_IVBSAXXMLReader_Value;
pub const IVBSAXXMLReader = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        getFeature: *const fn(
            self: *const IVBSAXXMLReader,
            strName: ?BSTR,
            fValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putFeature: *const fn(
            self: *const IVBSAXXMLReader,
            strName: ?BSTR,
            fValue: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getProperty: *const fn(
            self: *const IVBSAXXMLReader,
            strName: ?BSTR,
            varValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putProperty: *const fn(
            self: *const IVBSAXXMLReader,
            strName: ?BSTR,
            varValue: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_entityResolver: *const fn(
            self: *const IVBSAXXMLReader,
            oResolver: ?*?*IVBSAXEntityResolver,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_entityResolver: *const fn(
            self: *const IVBSAXXMLReader,
            oResolver: ?*IVBSAXEntityResolver,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_contentHandler: *const fn(
            self: *const IVBSAXXMLReader,
            oHandler: ?*?*IVBSAXContentHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_contentHandler: *const fn(
            self: *const IVBSAXXMLReader,
            oHandler: ?*IVBSAXContentHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dtdHandler: *const fn(
            self: *const IVBSAXXMLReader,
            oHandler: ?*?*IVBSAXDTDHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_dtdHandler: *const fn(
            self: *const IVBSAXXMLReader,
            oHandler: ?*IVBSAXDTDHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_errorHandler: *const fn(
            self: *const IVBSAXXMLReader,
            oHandler: ?*?*IVBSAXErrorHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_errorHandler: *const fn(
            self: *const IVBSAXXMLReader,
            oHandler: ?*IVBSAXErrorHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_baseURL: *const fn(
            self: *const IVBSAXXMLReader,
            strBaseURL: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_baseURL: *const fn(
            self: *const IVBSAXXMLReader,
            strBaseURL: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_secureBaseURL: *const fn(
            self: *const IVBSAXXMLReader,
            strSecureBaseURL: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_secureBaseURL: *const fn(
            self: *const IVBSAXXMLReader,
            strSecureBaseURL: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        parse: *const fn(
            self: *const IVBSAXXMLReader,
            varInput: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        parseURL: *const fn(
            self: *const IVBSAXXMLReader,
            strURL: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn getFeature(self: *const IVBSAXXMLReader, strName: ?BSTR, fValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.getFeature(self, strName, fValue);
    }
    pub fn putFeature(self: *const IVBSAXXMLReader, strName: ?BSTR, fValue: i16) callconv(.Inline) HRESULT {
        return self.vtable.putFeature(self, strName, fValue);
    }
    pub fn getProperty(self: *const IVBSAXXMLReader, strName: ?BSTR, varValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.getProperty(self, strName, varValue);
    }
    pub fn putProperty(self: *const IVBSAXXMLReader, strName: ?BSTR, varValue: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.putProperty(self, strName, varValue);
    }
    pub fn get_entityResolver(self: *const IVBSAXXMLReader, oResolver: ?*?*IVBSAXEntityResolver) callconv(.Inline) HRESULT {
        return self.vtable.get_entityResolver(self, oResolver);
    }
    pub fn putref_entityResolver(self: *const IVBSAXXMLReader, oResolver: ?*IVBSAXEntityResolver) callconv(.Inline) HRESULT {
        return self.vtable.putref_entityResolver(self, oResolver);
    }
    pub fn get_contentHandler(self: *const IVBSAXXMLReader, oHandler: ?*?*IVBSAXContentHandler) callconv(.Inline) HRESULT {
        return self.vtable.get_contentHandler(self, oHandler);
    }
    pub fn putref_contentHandler(self: *const IVBSAXXMLReader, oHandler: ?*IVBSAXContentHandler) callconv(.Inline) HRESULT {
        return self.vtable.putref_contentHandler(self, oHandler);
    }
    pub fn get_dtdHandler(self: *const IVBSAXXMLReader, oHandler: ?*?*IVBSAXDTDHandler) callconv(.Inline) HRESULT {
        return self.vtable.get_dtdHandler(self, oHandler);
    }
    pub fn putref_dtdHandler(self: *const IVBSAXXMLReader, oHandler: ?*IVBSAXDTDHandler) callconv(.Inline) HRESULT {
        return self.vtable.putref_dtdHandler(self, oHandler);
    }
    pub fn get_errorHandler(self: *const IVBSAXXMLReader, oHandler: ?*?*IVBSAXErrorHandler) callconv(.Inline) HRESULT {
        return self.vtable.get_errorHandler(self, oHandler);
    }
    pub fn putref_errorHandler(self: *const IVBSAXXMLReader, oHandler: ?*IVBSAXErrorHandler) callconv(.Inline) HRESULT {
        return self.vtable.putref_errorHandler(self, oHandler);
    }
    pub fn get_baseURL(self: *const IVBSAXXMLReader, strBaseURL: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_baseURL(self, strBaseURL);
    }
    pub fn put_baseURL(self: *const IVBSAXXMLReader, strBaseURL: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_baseURL(self, strBaseURL);
    }
    pub fn get_secureBaseURL(self: *const IVBSAXXMLReader, strSecureBaseURL: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_secureBaseURL(self, strSecureBaseURL);
    }
    pub fn put_secureBaseURL(self: *const IVBSAXXMLReader, strSecureBaseURL: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_secureBaseURL(self, strSecureBaseURL);
    }
    pub fn parse(self: *const IVBSAXXMLReader, varInput: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.parse(self, varInput);
    }
    pub fn parseURL(self: *const IVBSAXXMLReader, strURL: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.parseURL(self, strURL);
    }
};

const IID_IVBSAXXMLFilter_Value = Guid.initString("1299eb1b-5b88-433e-82de-82ca75ad4e04");
pub const IID_IVBSAXXMLFilter = &IID_IVBSAXXMLFilter_Value;
pub const IVBSAXXMLFilter = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parent: *const fn(
            self: *const IVBSAXXMLFilter,
            oReader: ?*?*IVBSAXXMLReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_parent: *const fn(
            self: *const IVBSAXXMLFilter,
            oReader: ?*IVBSAXXMLReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_parent(self: *const IVBSAXXMLFilter, oReader: ?*?*IVBSAXXMLReader) callconv(.Inline) HRESULT {
        return self.vtable.get_parent(self, oReader);
    }
    pub fn putref_parent(self: *const IVBSAXXMLFilter, oReader: ?*IVBSAXXMLReader) callconv(.Inline) HRESULT {
        return self.vtable.putref_parent(self, oReader);
    }
};

const IID_IVBSAXLocator_Value = Guid.initString("796e7ac5-5aa2-4eff-acad-3faaf01a3288");
pub const IID_IVBSAXLocator = &IID_IVBSAXLocator_Value;
pub const IVBSAXLocator = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_columnNumber: *const fn(
            self: *const IVBSAXLocator,
            nColumn: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lineNumber: *const fn(
            self: *const IVBSAXLocator,
            nLine: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_publicId: *const fn(
            self: *const IVBSAXLocator,
            strPublicId: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_systemId: *const fn(
            self: *const IVBSAXLocator,
            strSystemId: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_columnNumber(self: *const IVBSAXLocator, nColumn: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_columnNumber(self, nColumn);
    }
    pub fn get_lineNumber(self: *const IVBSAXLocator, nLine: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_lineNumber(self, nLine);
    }
    pub fn get_publicId(self: *const IVBSAXLocator, strPublicId: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_publicId(self, strPublicId);
    }
    pub fn get_systemId(self: *const IVBSAXLocator, strSystemId: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_systemId(self, strSystemId);
    }
};

const IID_IVBSAXEntityResolver_Value = Guid.initString("0c05d096-f45b-4aca-ad1a-aa0bc25518dc");
pub const IID_IVBSAXEntityResolver = &IID_IVBSAXEntityResolver_Value;
pub const IVBSAXEntityResolver = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        resolveEntity: *const fn(
            self: *const IVBSAXEntityResolver,
            strPublicId: ?*?BSTR,
            strSystemId: ?*?BSTR,
            varInput: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn resolveEntity(self: *const IVBSAXEntityResolver, strPublicId: ?*?BSTR, strSystemId: ?*?BSTR, varInput: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.resolveEntity(self, strPublicId, strSystemId, varInput);
    }
};

const IID_IVBSAXContentHandler_Value = Guid.initString("2ed7290a-4dd5-4b46-bb26-4e4155e77faa");
pub const IID_IVBSAXContentHandler = &IID_IVBSAXContentHandler_Value;
pub const IVBSAXContentHandler = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_documentLocator: *const fn(
            self: *const IVBSAXContentHandler,
            oLocator: ?*IVBSAXLocator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        startDocument: *const fn(
            self: *const IVBSAXContentHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        endDocument: *const fn(
            self: *const IVBSAXContentHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        startPrefixMapping: *const fn(
            self: *const IVBSAXContentHandler,
            strPrefix: ?*?BSTR,
            strURI: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        endPrefixMapping: *const fn(
            self: *const IVBSAXContentHandler,
            strPrefix: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        startElement: *const fn(
            self: *const IVBSAXContentHandler,
            strNamespaceURI: ?*?BSTR,
            strLocalName: ?*?BSTR,
            strQName: ?*?BSTR,
            oAttributes: ?*IVBSAXAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        endElement: *const fn(
            self: *const IVBSAXContentHandler,
            strNamespaceURI: ?*?BSTR,
            strLocalName: ?*?BSTR,
            strQName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        characters: *const fn(
            self: *const IVBSAXContentHandler,
            strChars: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ignorableWhitespace: *const fn(
            self: *const IVBSAXContentHandler,
            strChars: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        processingInstruction: *const fn(
            self: *const IVBSAXContentHandler,
            strTarget: ?*?BSTR,
            strData: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        skippedEntity: *const fn(
            self: *const IVBSAXContentHandler,
            strName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn putref_documentLocator(self: *const IVBSAXContentHandler, oLocator: ?*IVBSAXLocator) callconv(.Inline) HRESULT {
        return self.vtable.putref_documentLocator(self, oLocator);
    }
    pub fn startDocument(self: *const IVBSAXContentHandler) callconv(.Inline) HRESULT {
        return self.vtable.startDocument(self);
    }
    pub fn endDocument(self: *const IVBSAXContentHandler) callconv(.Inline) HRESULT {
        return self.vtable.endDocument(self);
    }
    pub fn startPrefixMapping(self: *const IVBSAXContentHandler, strPrefix: ?*?BSTR, strURI: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.startPrefixMapping(self, strPrefix, strURI);
    }
    pub fn endPrefixMapping(self: *const IVBSAXContentHandler, strPrefix: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.endPrefixMapping(self, strPrefix);
    }
    pub fn startElement(self: *const IVBSAXContentHandler, strNamespaceURI: ?*?BSTR, strLocalName: ?*?BSTR, strQName: ?*?BSTR, oAttributes: ?*IVBSAXAttributes) callconv(.Inline) HRESULT {
        return self.vtable.startElement(self, strNamespaceURI, strLocalName, strQName, oAttributes);
    }
    pub fn endElement(self: *const IVBSAXContentHandler, strNamespaceURI: ?*?BSTR, strLocalName: ?*?BSTR, strQName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.endElement(self, strNamespaceURI, strLocalName, strQName);
    }
    pub fn characters(self: *const IVBSAXContentHandler, strChars: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.characters(self, strChars);
    }
    pub fn ignorableWhitespace(self: *const IVBSAXContentHandler, strChars: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.ignorableWhitespace(self, strChars);
    }
    pub fn processingInstruction(self: *const IVBSAXContentHandler, strTarget: ?*?BSTR, strData: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.processingInstruction(self, strTarget, strData);
    }
    pub fn skippedEntity(self: *const IVBSAXContentHandler, strName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.skippedEntity(self, strName);
    }
};

const IID_IVBSAXDTDHandler_Value = Guid.initString("24fb3297-302d-4620-ba39-3a732d850558");
pub const IID_IVBSAXDTDHandler = &IID_IVBSAXDTDHandler_Value;
pub const IVBSAXDTDHandler = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        notationDecl: *const fn(
            self: *const IVBSAXDTDHandler,
            strName: ?*?BSTR,
            strPublicId: ?*?BSTR,
            strSystemId: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        unparsedEntityDecl: *const fn(
            self: *const IVBSAXDTDHandler,
            strName: ?*?BSTR,
            strPublicId: ?*?BSTR,
            strSystemId: ?*?BSTR,
            strNotationName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn notationDecl(self: *const IVBSAXDTDHandler, strName: ?*?BSTR, strPublicId: ?*?BSTR, strSystemId: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.notationDecl(self, strName, strPublicId, strSystemId);
    }
    pub fn unparsedEntityDecl(self: *const IVBSAXDTDHandler, strName: ?*?BSTR, strPublicId: ?*?BSTR, strSystemId: ?*?BSTR, strNotationName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.unparsedEntityDecl(self, strName, strPublicId, strSystemId, strNotationName);
    }
};

const IID_IVBSAXErrorHandler_Value = Guid.initString("d963d3fe-173c-4862-9095-b92f66995f52");
pub const IID_IVBSAXErrorHandler = &IID_IVBSAXErrorHandler_Value;
pub const IVBSAXErrorHandler = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        @"error": *const fn(
            self: *const IVBSAXErrorHandler,
            oLocator: ?*IVBSAXLocator,
            strErrorMessage: ?*?BSTR,
            nErrorCode: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        fatalError: *const fn(
            self: *const IVBSAXErrorHandler,
            oLocator: ?*IVBSAXLocator,
            strErrorMessage: ?*?BSTR,
            nErrorCode: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ignorableWarning: *const fn(
            self: *const IVBSAXErrorHandler,
            oLocator: ?*IVBSAXLocator,
            strErrorMessage: ?*?BSTR,
            nErrorCode: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn @"error"(self: *const IVBSAXErrorHandler, oLocator: ?*IVBSAXLocator, strErrorMessage: ?*?BSTR, nErrorCode: i32) callconv(.Inline) HRESULT {
        return self.vtable.@"error"(self, oLocator, strErrorMessage, nErrorCode);
    }
    pub fn fatalError(self: *const IVBSAXErrorHandler, oLocator: ?*IVBSAXLocator, strErrorMessage: ?*?BSTR, nErrorCode: i32) callconv(.Inline) HRESULT {
        return self.vtable.fatalError(self, oLocator, strErrorMessage, nErrorCode);
    }
    pub fn ignorableWarning(self: *const IVBSAXErrorHandler, oLocator: ?*IVBSAXLocator, strErrorMessage: ?*?BSTR, nErrorCode: i32) callconv(.Inline) HRESULT {
        return self.vtable.ignorableWarning(self, oLocator, strErrorMessage, nErrorCode);
    }
};

const IID_IVBSAXLexicalHandler_Value = Guid.initString("032aac35-8c0e-4d9d-979f-e3b702935576");
pub const IID_IVBSAXLexicalHandler = &IID_IVBSAXLexicalHandler_Value;
pub const IVBSAXLexicalHandler = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        startDTD: *const fn(
            self: *const IVBSAXLexicalHandler,
            strName: ?*?BSTR,
            strPublicId: ?*?BSTR,
            strSystemId: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        endDTD: *const fn(
            self: *const IVBSAXLexicalHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        startEntity: *const fn(
            self: *const IVBSAXLexicalHandler,
            strName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        endEntity: *const fn(
            self: *const IVBSAXLexicalHandler,
            strName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        startCDATA: *const fn(
            self: *const IVBSAXLexicalHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        endCDATA: *const fn(
            self: *const IVBSAXLexicalHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        comment: *const fn(
            self: *const IVBSAXLexicalHandler,
            strChars: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn startDTD(self: *const IVBSAXLexicalHandler, strName: ?*?BSTR, strPublicId: ?*?BSTR, strSystemId: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.startDTD(self, strName, strPublicId, strSystemId);
    }
    pub fn endDTD(self: *const IVBSAXLexicalHandler) callconv(.Inline) HRESULT {
        return self.vtable.endDTD(self);
    }
    pub fn startEntity(self: *const IVBSAXLexicalHandler, strName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.startEntity(self, strName);
    }
    pub fn endEntity(self: *const IVBSAXLexicalHandler, strName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.endEntity(self, strName);
    }
    pub fn startCDATA(self: *const IVBSAXLexicalHandler) callconv(.Inline) HRESULT {
        return self.vtable.startCDATA(self);
    }
    pub fn endCDATA(self: *const IVBSAXLexicalHandler) callconv(.Inline) HRESULT {
        return self.vtable.endCDATA(self);
    }
    pub fn comment(self: *const IVBSAXLexicalHandler, strChars: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.comment(self, strChars);
    }
};

const IID_IVBSAXDeclHandler_Value = Guid.initString("e8917260-7579-4be1-b5dd-7afbfa6f077b");
pub const IID_IVBSAXDeclHandler = &IID_IVBSAXDeclHandler_Value;
pub const IVBSAXDeclHandler = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        elementDecl: *const fn(
            self: *const IVBSAXDeclHandler,
            strName: ?*?BSTR,
            strModel: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        attributeDecl: *const fn(
            self: *const IVBSAXDeclHandler,
            strElementName: ?*?BSTR,
            strAttributeName: ?*?BSTR,
            strType: ?*?BSTR,
            strValueDefault: ?*?BSTR,
            strValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        internalEntityDecl: *const fn(
            self: *const IVBSAXDeclHandler,
            strName: ?*?BSTR,
            strValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        externalEntityDecl: *const fn(
            self: *const IVBSAXDeclHandler,
            strName: ?*?BSTR,
            strPublicId: ?*?BSTR,
            strSystemId: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn elementDecl(self: *const IVBSAXDeclHandler, strName: ?*?BSTR, strModel: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.elementDecl(self, strName, strModel);
    }
    pub fn attributeDecl(self: *const IVBSAXDeclHandler, strElementName: ?*?BSTR, strAttributeName: ?*?BSTR, strType: ?*?BSTR, strValueDefault: ?*?BSTR, strValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.attributeDecl(self, strElementName, strAttributeName, strType, strValueDefault, strValue);
    }
    pub fn internalEntityDecl(self: *const IVBSAXDeclHandler, strName: ?*?BSTR, strValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.internalEntityDecl(self, strName, strValue);
    }
    pub fn externalEntityDecl(self: *const IVBSAXDeclHandler, strName: ?*?BSTR, strPublicId: ?*?BSTR, strSystemId: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.externalEntityDecl(self, strName, strPublicId, strSystemId);
    }
};

const IID_IVBSAXAttributes_Value = Guid.initString("10dc0586-132b-4cac-8bb3-db00ac8b7ee0");
pub const IID_IVBSAXAttributes = &IID_IVBSAXAttributes_Value;
pub const IVBSAXAttributes = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IVBSAXAttributes,
            nLength: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getURI: *const fn(
            self: *const IVBSAXAttributes,
            nIndex: i32,
            strURI: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getLocalName: *const fn(
            self: *const IVBSAXAttributes,
            nIndex: i32,
            strLocalName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getQName: *const fn(
            self: *const IVBSAXAttributes,
            nIndex: i32,
            strQName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getIndexFromName: *const fn(
            self: *const IVBSAXAttributes,
            strURI: ?BSTR,
            strLocalName: ?BSTR,
            nIndex: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getIndexFromQName: *const fn(
            self: *const IVBSAXAttributes,
            strQName: ?BSTR,
            nIndex: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getType: *const fn(
            self: *const IVBSAXAttributes,
            nIndex: i32,
            strType: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getTypeFromName: *const fn(
            self: *const IVBSAXAttributes,
            strURI: ?BSTR,
            strLocalName: ?BSTR,
            strType: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getTypeFromQName: *const fn(
            self: *const IVBSAXAttributes,
            strQName: ?BSTR,
            strType: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getValue: *const fn(
            self: *const IVBSAXAttributes,
            nIndex: i32,
            strValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getValueFromName: *const fn(
            self: *const IVBSAXAttributes,
            strURI: ?BSTR,
            strLocalName: ?BSTR,
            strValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getValueFromQName: *const fn(
            self: *const IVBSAXAttributes,
            strQName: ?BSTR,
            strValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_length(self: *const IVBSAXAttributes, nLength: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_length(self, nLength);
    }
    pub fn getURI(self: *const IVBSAXAttributes, nIndex: i32, strURI: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.getURI(self, nIndex, strURI);
    }
    pub fn getLocalName(self: *const IVBSAXAttributes, nIndex: i32, strLocalName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.getLocalName(self, nIndex, strLocalName);
    }
    pub fn getQName(self: *const IVBSAXAttributes, nIndex: i32, strQName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.getQName(self, nIndex, strQName);
    }
    pub fn getIndexFromName(self: *const IVBSAXAttributes, strURI: ?BSTR, strLocalName: ?BSTR, nIndex: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.getIndexFromName(self, strURI, strLocalName, nIndex);
    }
    pub fn getIndexFromQName(self: *const IVBSAXAttributes, strQName: ?BSTR, nIndex: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.getIndexFromQName(self, strQName, nIndex);
    }
    pub fn getType(self: *const IVBSAXAttributes, nIndex: i32, strType: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.getType(self, nIndex, strType);
    }
    pub fn getTypeFromName(self: *const IVBSAXAttributes, strURI: ?BSTR, strLocalName: ?BSTR, strType: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.getTypeFromName(self, strURI, strLocalName, strType);
    }
    pub fn getTypeFromQName(self: *const IVBSAXAttributes, strQName: ?BSTR, strType: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.getTypeFromQName(self, strQName, strType);
    }
    pub fn getValue(self: *const IVBSAXAttributes, nIndex: i32, strValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.getValue(self, nIndex, strValue);
    }
    pub fn getValueFromName(self: *const IVBSAXAttributes, strURI: ?BSTR, strLocalName: ?BSTR, strValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.getValueFromName(self, strURI, strLocalName, strValue);
    }
    pub fn getValueFromQName(self: *const IVBSAXAttributes, strQName: ?BSTR, strValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.getValueFromQName(self, strQName, strValue);
    }
};

const IID_IMXWriter_Value = Guid.initString("4d7ff4ba-1565-4ea8-94e1-6e724a46f98d");
pub const IID_IMXWriter = &IID_IMXWriter_Value;
pub const IMXWriter = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_output: *const fn(
            self: *const IMXWriter,
            varDestination: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_output: *const fn(
            self: *const IMXWriter,
            varDestination: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_encoding: *const fn(
            self: *const IMXWriter,
            strEncoding: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_encoding: *const fn(
            self: *const IMXWriter,
            strEncoding: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_byteOrderMark: *const fn(
            self: *const IMXWriter,
            fWriteByteOrderMark: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_byteOrderMark: *const fn(
            self: *const IMXWriter,
            fWriteByteOrderMark: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_indent: *const fn(
            self: *const IMXWriter,
            fIndentMode: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_indent: *const fn(
            self: *const IMXWriter,
            fIndentMode: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_standalone: *const fn(
            self: *const IMXWriter,
            fValue: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_standalone: *const fn(
            self: *const IMXWriter,
            fValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_omitXMLDeclaration: *const fn(
            self: *const IMXWriter,
            fValue: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_omitXMLDeclaration: *const fn(
            self: *const IMXWriter,
            fValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_version: *const fn(
            self: *const IMXWriter,
            strVersion: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_version: *const fn(
            self: *const IMXWriter,
            strVersion: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_disableOutputEscaping: *const fn(
            self: *const IMXWriter,
            fValue: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_disableOutputEscaping: *const fn(
            self: *const IMXWriter,
            fValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        flush: *const fn(
            self: *const IMXWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_output(self: *const IMXWriter, varDestination: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_output(self, varDestination);
    }
    pub fn get_output(self: *const IMXWriter, varDestination: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_output(self, varDestination);
    }
    pub fn put_encoding(self: *const IMXWriter, strEncoding: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_encoding(self, strEncoding);
    }
    pub fn get_encoding(self: *const IMXWriter, strEncoding: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_encoding(self, strEncoding);
    }
    pub fn put_byteOrderMark(self: *const IMXWriter, fWriteByteOrderMark: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_byteOrderMark(self, fWriteByteOrderMark);
    }
    pub fn get_byteOrderMark(self: *const IMXWriter, fWriteByteOrderMark: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_byteOrderMark(self, fWriteByteOrderMark);
    }
    pub fn put_indent(self: *const IMXWriter, fIndentMode: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_indent(self, fIndentMode);
    }
    pub fn get_indent(self: *const IMXWriter, fIndentMode: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_indent(self, fIndentMode);
    }
    pub fn put_standalone(self: *const IMXWriter, fValue: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_standalone(self, fValue);
    }
    pub fn get_standalone(self: *const IMXWriter, fValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_standalone(self, fValue);
    }
    pub fn put_omitXMLDeclaration(self: *const IMXWriter, fValue: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_omitXMLDeclaration(self, fValue);
    }
    pub fn get_omitXMLDeclaration(self: *const IMXWriter, fValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_omitXMLDeclaration(self, fValue);
    }
    pub fn put_version(self: *const IMXWriter, strVersion: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_version(self, strVersion);
    }
    pub fn get_version(self: *const IMXWriter, strVersion: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_version(self, strVersion);
    }
    pub fn put_disableOutputEscaping(self: *const IMXWriter, fValue: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_disableOutputEscaping(self, fValue);
    }
    pub fn get_disableOutputEscaping(self: *const IMXWriter, fValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_disableOutputEscaping(self, fValue);
    }
    pub fn flush(self: *const IMXWriter) callconv(.Inline) HRESULT {
        return self.vtable.flush(self);
    }
};

const IID_IMXAttributes_Value = Guid.initString("f10d27cc-3ec0-415c-8ed8-77ab1c5e7262");
pub const IID_IMXAttributes = &IID_IMXAttributes_Value;
pub const IMXAttributes = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        addAttribute: *const fn(
            self: *const IMXAttributes,
            strURI: ?BSTR,
            strLocalName: ?BSTR,
            strQName: ?BSTR,
            strType: ?BSTR,
            strValue: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addAttributeFromIndex: *const fn(
            self: *const IMXAttributes,
            varAtts: VARIANT,
            nIndex: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        clear: *const fn(
            self: *const IMXAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeAttribute: *const fn(
            self: *const IMXAttributes,
            nIndex: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setAttribute: *const fn(
            self: *const IMXAttributes,
            nIndex: i32,
            strURI: ?BSTR,
            strLocalName: ?BSTR,
            strQName: ?BSTR,
            strType: ?BSTR,
            strValue: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setAttributes: *const fn(
            self: *const IMXAttributes,
            varAtts: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setLocalName: *const fn(
            self: *const IMXAttributes,
            nIndex: i32,
            strLocalName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setQName: *const fn(
            self: *const IMXAttributes,
            nIndex: i32,
            strQName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setType: *const fn(
            self: *const IMXAttributes,
            nIndex: i32,
            strType: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setURI: *const fn(
            self: *const IMXAttributes,
            nIndex: i32,
            strURI: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setValue: *const fn(
            self: *const IMXAttributes,
            nIndex: i32,
            strValue: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn addAttribute(self: *const IMXAttributes, strURI: ?BSTR, strLocalName: ?BSTR, strQName: ?BSTR, strType: ?BSTR, strValue: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.addAttribute(self, strURI, strLocalName, strQName, strType, strValue);
    }
    pub fn addAttributeFromIndex(self: *const IMXAttributes, varAtts: VARIANT, nIndex: i32) callconv(.Inline) HRESULT {
        return self.vtable.addAttributeFromIndex(self, varAtts, nIndex);
    }
    pub fn clear(self: *const IMXAttributes) callconv(.Inline) HRESULT {
        return self.vtable.clear(self);
    }
    pub fn removeAttribute(self: *const IMXAttributes, nIndex: i32) callconv(.Inline) HRESULT {
        return self.vtable.removeAttribute(self, nIndex);
    }
    pub fn setAttribute(self: *const IMXAttributes, nIndex: i32, strURI: ?BSTR, strLocalName: ?BSTR, strQName: ?BSTR, strType: ?BSTR, strValue: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.setAttribute(self, nIndex, strURI, strLocalName, strQName, strType, strValue);
    }
    pub fn setAttributes(self: *const IMXAttributes, varAtts: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.setAttributes(self, varAtts);
    }
    pub fn setLocalName(self: *const IMXAttributes, nIndex: i32, strLocalName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.setLocalName(self, nIndex, strLocalName);
    }
    pub fn setQName(self: *const IMXAttributes, nIndex: i32, strQName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.setQName(self, nIndex, strQName);
    }
    pub fn setType(self: *const IMXAttributes, nIndex: i32, strType: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.setType(self, nIndex, strType);
    }
    pub fn setURI(self: *const IMXAttributes, nIndex: i32, strURI: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.setURI(self, nIndex, strURI);
    }
    pub fn setValue(self: *const IMXAttributes, nIndex: i32, strValue: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.setValue(self, nIndex, strValue);
    }
};

const IID_IMXReaderControl_Value = Guid.initString("808f4e35-8d5a-4fbe-8466-33a41279ed30");
pub const IID_IMXReaderControl = &IID_IMXReaderControl_Value;
pub const IMXReaderControl = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        abort: *const fn(
            self: *const IMXReaderControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        @"resume": *const fn(
            self: *const IMXReaderControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        @"suspend": *const fn(
            self: *const IMXReaderControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn abort(self: *const IMXReaderControl) callconv(.Inline) HRESULT {
        return self.vtable.abort(self);
    }
    pub fn @"resume"(self: *const IMXReaderControl) callconv(.Inline) HRESULT {
        return self.vtable.@"resume"(self);
    }
    pub fn @"suspend"(self: *const IMXReaderControl) callconv(.Inline) HRESULT {
        return self.vtable.@"suspend"(self);
    }
};

const IID_IMXSchemaDeclHandler_Value = Guid.initString("fa4bb38c-faf9-4cca-9302-d1dd0fe520db");
pub const IID_IMXSchemaDeclHandler = &IID_IMXSchemaDeclHandler_Value;
pub const IMXSchemaDeclHandler = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        schemaElementDecl: *const fn(
            self: *const IMXSchemaDeclHandler,
            oSchemaElement: ?*ISchemaElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn schemaElementDecl(self: *const IMXSchemaDeclHandler, oSchemaElement: ?*ISchemaElement) callconv(.Inline) HRESULT {
        return self.vtable.schemaElementDecl(self, oSchemaElement);
    }
};

const IID_IMXNamespacePrefixes_Value = Guid.initString("c90352f4-643c-4fbc-bb23-e996eb2d51fd");
pub const IID_IMXNamespacePrefixes = &IID_IMXNamespacePrefixes_Value;
pub const IMXNamespacePrefixes = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_item: *const fn(
            self: *const IMXNamespacePrefixes,
            index: i32,
            prefix: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const IMXNamespacePrefixes,
            length: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn(
            self: *const IMXNamespacePrefixes,
            ppUnk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_item(self: *const IMXNamespacePrefixes, index: i32, prefix: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_item(self, index, prefix);
    }
    pub fn get_length(self: *const IMXNamespacePrefixes, length: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_length(self, length);
    }
    pub fn get__newEnum(self: *const IMXNamespacePrefixes, ppUnk: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__newEnum(self, ppUnk);
    }
};

const IID_IVBMXNamespaceManager_Value = Guid.initString("c90352f5-643c-4fbc-bb23-e996eb2d51fd");
pub const IID_IVBMXNamespaceManager = &IID_IVBMXNamespaceManager_Value;
pub const IVBMXNamespaceManager = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_allowOverride: *const fn(
            self: *const IVBMXNamespaceManager,
            fOverride: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_allowOverride: *const fn(
            self: *const IVBMXNamespaceManager,
            fOverride: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        reset: *const fn(
            self: *const IVBMXNamespaceManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        pushContext: *const fn(
            self: *const IVBMXNamespaceManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        pushNodeContext: *const fn(
            self: *const IVBMXNamespaceManager,
            contextNode: ?*IXMLDOMNode,
            fDeep: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        popContext: *const fn(
            self: *const IVBMXNamespaceManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        declarePrefix: *const fn(
            self: *const IVBMXNamespaceManager,
            prefix: ?BSTR,
            namespaceURI: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getDeclaredPrefixes: *const fn(
            self: *const IVBMXNamespaceManager,
            prefixes: ?*?*IMXNamespacePrefixes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getPrefixes: *const fn(
            self: *const IVBMXNamespaceManager,
            namespaceURI: ?BSTR,
            prefixes: ?*?*IMXNamespacePrefixes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getURI: *const fn(
            self: *const IVBMXNamespaceManager,
            prefix: ?BSTR,
            uri: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getURIFromNode: *const fn(
            self: *const IVBMXNamespaceManager,
            strPrefix: ?BSTR,
            contextNode: ?*IXMLDOMNode,
            uri: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_allowOverride(self: *const IVBMXNamespaceManager, fOverride: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_allowOverride(self, fOverride);
    }
    pub fn get_allowOverride(self: *const IVBMXNamespaceManager, fOverride: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_allowOverride(self, fOverride);
    }
    pub fn reset(self: *const IVBMXNamespaceManager) callconv(.Inline) HRESULT {
        return self.vtable.reset(self);
    }
    pub fn pushContext(self: *const IVBMXNamespaceManager) callconv(.Inline) HRESULT {
        return self.vtable.pushContext(self);
    }
    pub fn pushNodeContext(self: *const IVBMXNamespaceManager, contextNode: ?*IXMLDOMNode, fDeep: i16) callconv(.Inline) HRESULT {
        return self.vtable.pushNodeContext(self, contextNode, fDeep);
    }
    pub fn popContext(self: *const IVBMXNamespaceManager) callconv(.Inline) HRESULT {
        return self.vtable.popContext(self);
    }
    pub fn declarePrefix(self: *const IVBMXNamespaceManager, prefix: ?BSTR, namespaceURI: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.declarePrefix(self, prefix, namespaceURI);
    }
    pub fn getDeclaredPrefixes(self: *const IVBMXNamespaceManager, prefixes: ?*?*IMXNamespacePrefixes) callconv(.Inline) HRESULT {
        return self.vtable.getDeclaredPrefixes(self, prefixes);
    }
    pub fn getPrefixes(self: *const IVBMXNamespaceManager, namespaceURI: ?BSTR, prefixes: ?*?*IMXNamespacePrefixes) callconv(.Inline) HRESULT {
        return self.vtable.getPrefixes(self, namespaceURI, prefixes);
    }
    pub fn getURI(self: *const IVBMXNamespaceManager, prefix: ?BSTR, uri: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.getURI(self, prefix, uri);
    }
    pub fn getURIFromNode(self: *const IVBMXNamespaceManager, strPrefix: ?BSTR, contextNode: ?*IXMLDOMNode, uri: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.getURIFromNode(self, strPrefix, contextNode, uri);
    }
};

const IID_IMXNamespaceManager_Value = Guid.initString("c90352f6-643c-4fbc-bb23-e996eb2d51fd");
pub const IID_IMXNamespaceManager = &IID_IMXNamespaceManager_Value;
pub const IMXNamespaceManager = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        putAllowOverride: *const fn(
            self: *const IMXNamespaceManager,
            fOverride: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getAllowOverride: *const fn(
            self: *const IMXNamespaceManager,
            fOverride: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        reset: *const fn(
            self: *const IMXNamespaceManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        pushContext: *const fn(
            self: *const IMXNamespaceManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        pushNodeContext: *const fn(
            self: *const IMXNamespaceManager,
            contextNode: ?*IXMLDOMNode,
            fDeep: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        popContext: *const fn(
            self: *const IMXNamespaceManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        declarePrefix: *const fn(
            self: *const IMXNamespaceManager,
            prefix: ?[*:0]const u16,
            namespaceURI: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getDeclaredPrefix: *const fn(
            self: *const IMXNamespaceManager,
            nIndex: i32,
            pwchPrefix: [*:0]u16,
            pcchPrefix: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getPrefix: *const fn(
            self: *const IMXNamespaceManager,
            pwszNamespaceURI: ?[*:0]const u16,
            nIndex: i32,
            pwchPrefix: [*:0]u16,
            pcchPrefix: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getURI: *const fn(
            self: *const IMXNamespaceManager,
            pwchPrefix: ?[*:0]const u16,
            pContextNode: ?*IXMLDOMNode,
            pwchUri: [*:0]u16,
            pcchUri: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn putAllowOverride(self: *const IMXNamespaceManager, fOverride: i16) callconv(.Inline) HRESULT {
        return self.vtable.putAllowOverride(self, fOverride);
    }
    pub fn getAllowOverride(self: *const IMXNamespaceManager, fOverride: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.getAllowOverride(self, fOverride);
    }
    pub fn reset(self: *const IMXNamespaceManager) callconv(.Inline) HRESULT {
        return self.vtable.reset(self);
    }
    pub fn pushContext(self: *const IMXNamespaceManager) callconv(.Inline) HRESULT {
        return self.vtable.pushContext(self);
    }
    pub fn pushNodeContext(self: *const IMXNamespaceManager, contextNode: ?*IXMLDOMNode, fDeep: i16) callconv(.Inline) HRESULT {
        return self.vtable.pushNodeContext(self, contextNode, fDeep);
    }
    pub fn popContext(self: *const IMXNamespaceManager) callconv(.Inline) HRESULT {
        return self.vtable.popContext(self);
    }
    pub fn declarePrefix(self: *const IMXNamespaceManager, prefix: ?[*:0]const u16, namespaceURI: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.declarePrefix(self, prefix, namespaceURI);
    }
    pub fn getDeclaredPrefix(self: *const IMXNamespaceManager, nIndex: i32, pwchPrefix: [*:0]u16, pcchPrefix: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.getDeclaredPrefix(self, nIndex, pwchPrefix, pcchPrefix);
    }
    pub fn getPrefix(self: *const IMXNamespaceManager, pwszNamespaceURI: ?[*:0]const u16, nIndex: i32, pwchPrefix: [*:0]u16, pcchPrefix: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.getPrefix(self, pwszNamespaceURI, nIndex, pwchPrefix, pcchPrefix);
    }
    pub fn getURI(self: *const IMXNamespaceManager, pwchPrefix: ?[*:0]const u16, pContextNode: ?*IXMLDOMNode, pwchUri: [*:0]u16, pcchUri: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.getURI(self, pwchPrefix, pContextNode, pwchUri, pcchUri);
    }
};

const IID_IMXXMLFilter_Value = Guid.initString("c90352f7-643c-4fbc-bb23-e996eb2d51fd");
pub const IID_IMXXMLFilter = &IID_IMXXMLFilter_Value;
pub const IMXXMLFilter = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        getFeature: *const fn(
            self: *const IMXXMLFilter,
            strName: ?BSTR,
            fValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putFeature: *const fn(
            self: *const IMXXMLFilter,
            strName: ?BSTR,
            fValue: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getProperty: *const fn(
            self: *const IMXXMLFilter,
            strName: ?BSTR,
            varValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putProperty: *const fn(
            self: *const IMXXMLFilter,
            strName: ?BSTR,
            varValue: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_entityResolver: *const fn(
            self: *const IMXXMLFilter,
            oResolver: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_entityResolver: *const fn(
            self: *const IMXXMLFilter,
            oResolver: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_contentHandler: *const fn(
            self: *const IMXXMLFilter,
            oHandler: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_contentHandler: *const fn(
            self: *const IMXXMLFilter,
            oHandler: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dtdHandler: *const fn(
            self: *const IMXXMLFilter,
            oHandler: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_dtdHandler: *const fn(
            self: *const IMXXMLFilter,
            oHandler: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_errorHandler: *const fn(
            self: *const IMXXMLFilter,
            oHandler: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_errorHandler: *const fn(
            self: *const IMXXMLFilter,
            oHandler: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn getFeature(self: *const IMXXMLFilter, strName: ?BSTR, fValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.getFeature(self, strName, fValue);
    }
    pub fn putFeature(self: *const IMXXMLFilter, strName: ?BSTR, fValue: i16) callconv(.Inline) HRESULT {
        return self.vtable.putFeature(self, strName, fValue);
    }
    pub fn getProperty(self: *const IMXXMLFilter, strName: ?BSTR, varValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.getProperty(self, strName, varValue);
    }
    pub fn putProperty(self: *const IMXXMLFilter, strName: ?BSTR, varValue: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.putProperty(self, strName, varValue);
    }
    pub fn get_entityResolver(self: *const IMXXMLFilter, oResolver: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get_entityResolver(self, oResolver);
    }
    pub fn putref_entityResolver(self: *const IMXXMLFilter, oResolver: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.putref_entityResolver(self, oResolver);
    }
    pub fn get_contentHandler(self: *const IMXXMLFilter, oHandler: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get_contentHandler(self, oHandler);
    }
    pub fn putref_contentHandler(self: *const IMXXMLFilter, oHandler: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.putref_contentHandler(self, oHandler);
    }
    pub fn get_dtdHandler(self: *const IMXXMLFilter, oHandler: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get_dtdHandler(self, oHandler);
    }
    pub fn putref_dtdHandler(self: *const IMXXMLFilter, oHandler: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.putref_dtdHandler(self, oHandler);
    }
    pub fn get_errorHandler(self: *const IMXXMLFilter, oHandler: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get_errorHandler(self, oHandler);
    }
    pub fn putref_errorHandler(self: *const IMXXMLFilter, oHandler: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.putref_errorHandler(self, oHandler);
    }
};

pub const SOMITEMTYPE = enum(i32) {
    SCHEMA = 4096,
    ATTRIBUTE = 4097,
    ATTRIBUTEGROUP = 4098,
    NOTATION = 4099,
    ANNOTATION = 4100,
    IDENTITYCONSTRAINT = 4352,
    KEY = 4353,
    KEYREF = 4354,
    UNIQUE = 4355,
    ANYTYPE = 8192,
    DATATYPE = 8448,
    DATATYPE_ANYTYPE = 8449,
    DATATYPE_ANYURI = 8450,
    DATATYPE_BASE64BINARY = 8451,
    DATATYPE_BOOLEAN = 8452,
    DATATYPE_BYTE = 8453,
    DATATYPE_DATE = 8454,
    DATATYPE_DATETIME = 8455,
    DATATYPE_DAY = 8456,
    DATATYPE_DECIMAL = 8457,
    DATATYPE_DOUBLE = 8458,
    DATATYPE_DURATION = 8459,
    DATATYPE_ENTITIES = 8460,
    DATATYPE_ENTITY = 8461,
    DATATYPE_FLOAT = 8462,
    DATATYPE_HEXBINARY = 8463,
    DATATYPE_ID = 8464,
    DATATYPE_IDREF = 8465,
    DATATYPE_IDREFS = 8466,
    DATATYPE_INT = 8467,
    DATATYPE_INTEGER = 8468,
    DATATYPE_LANGUAGE = 8469,
    DATATYPE_LONG = 8470,
    DATATYPE_MONTH = 8471,
    DATATYPE_MONTHDAY = 8472,
    DATATYPE_NAME = 8473,
    DATATYPE_NCNAME = 8474,
    DATATYPE_NEGATIVEINTEGER = 8475,
    DATATYPE_NMTOKEN = 8476,
    DATATYPE_NMTOKENS = 8477,
    DATATYPE_NONNEGATIVEINTEGER = 8478,
    DATATYPE_NONPOSITIVEINTEGER = 8479,
    DATATYPE_NORMALIZEDSTRING = 8480,
    DATATYPE_NOTATION = 8481,
    DATATYPE_POSITIVEINTEGER = 8482,
    DATATYPE_QNAME = 8483,
    DATATYPE_SHORT = 8484,
    DATATYPE_STRING = 8485,
    DATATYPE_TIME = 8486,
    DATATYPE_TOKEN = 8487,
    DATATYPE_UNSIGNEDBYTE = 8488,
    DATATYPE_UNSIGNEDINT = 8489,
    DATATYPE_UNSIGNEDLONG = 8490,
    DATATYPE_UNSIGNEDSHORT = 8491,
    DATATYPE_YEAR = 8492,
    DATATYPE_YEARMONTH = 8493,
    DATATYPE_ANYSIMPLETYPE = 8703,
    SIMPLETYPE = 8704,
    COMPLEXTYPE = 9216,
    PARTICLE = 16384,
    ANY = 16385,
    ANYATTRIBUTE = 16386,
    ELEMENT = 16387,
    GROUP = 16640,
    ALL = 16641,
    CHOICE = 16642,
    SEQUENCE = 16643,
    EMPTYPARTICLE = 16644,
    NULL = 2048,
    NULL_TYPE = 10240,
    NULL_ANY = 18433,
    NULL_ANYATTRIBUTE = 18434,
    NULL_ELEMENT = 18435,
};
pub const SOMITEM_SCHEMA = SOMITEMTYPE.SCHEMA;
pub const SOMITEM_ATTRIBUTE = SOMITEMTYPE.ATTRIBUTE;
pub const SOMITEM_ATTRIBUTEGROUP = SOMITEMTYPE.ATTRIBUTEGROUP;
pub const SOMITEM_NOTATION = SOMITEMTYPE.NOTATION;
pub const SOMITEM_ANNOTATION = SOMITEMTYPE.ANNOTATION;
pub const SOMITEM_IDENTITYCONSTRAINT = SOMITEMTYPE.IDENTITYCONSTRAINT;
pub const SOMITEM_KEY = SOMITEMTYPE.KEY;
pub const SOMITEM_KEYREF = SOMITEMTYPE.KEYREF;
pub const SOMITEM_UNIQUE = SOMITEMTYPE.UNIQUE;
pub const SOMITEM_ANYTYPE = SOMITEMTYPE.ANYTYPE;
pub const SOMITEM_DATATYPE = SOMITEMTYPE.DATATYPE;
pub const SOMITEM_DATATYPE_ANYTYPE = SOMITEMTYPE.DATATYPE_ANYTYPE;
pub const SOMITEM_DATATYPE_ANYURI = SOMITEMTYPE.DATATYPE_ANYURI;
pub const SOMITEM_DATATYPE_BASE64BINARY = SOMITEMTYPE.DATATYPE_BASE64BINARY;
pub const SOMITEM_DATATYPE_BOOLEAN = SOMITEMTYPE.DATATYPE_BOOLEAN;
pub const SOMITEM_DATATYPE_BYTE = SOMITEMTYPE.DATATYPE_BYTE;
pub const SOMITEM_DATATYPE_DATE = SOMITEMTYPE.DATATYPE_DATE;
pub const SOMITEM_DATATYPE_DATETIME = SOMITEMTYPE.DATATYPE_DATETIME;
pub const SOMITEM_DATATYPE_DAY = SOMITEMTYPE.DATATYPE_DAY;
pub const SOMITEM_DATATYPE_DECIMAL = SOMITEMTYPE.DATATYPE_DECIMAL;
pub const SOMITEM_DATATYPE_DOUBLE = SOMITEMTYPE.DATATYPE_DOUBLE;
pub const SOMITEM_DATATYPE_DURATION = SOMITEMTYPE.DATATYPE_DURATION;
pub const SOMITEM_DATATYPE_ENTITIES = SOMITEMTYPE.DATATYPE_ENTITIES;
pub const SOMITEM_DATATYPE_ENTITY = SOMITEMTYPE.DATATYPE_ENTITY;
pub const SOMITEM_DATATYPE_FLOAT = SOMITEMTYPE.DATATYPE_FLOAT;
pub const SOMITEM_DATATYPE_HEXBINARY = SOMITEMTYPE.DATATYPE_HEXBINARY;
pub const SOMITEM_DATATYPE_ID = SOMITEMTYPE.DATATYPE_ID;
pub const SOMITEM_DATATYPE_IDREF = SOMITEMTYPE.DATATYPE_IDREF;
pub const SOMITEM_DATATYPE_IDREFS = SOMITEMTYPE.DATATYPE_IDREFS;
pub const SOMITEM_DATATYPE_INT = SOMITEMTYPE.DATATYPE_INT;
pub const SOMITEM_DATATYPE_INTEGER = SOMITEMTYPE.DATATYPE_INTEGER;
pub const SOMITEM_DATATYPE_LANGUAGE = SOMITEMTYPE.DATATYPE_LANGUAGE;
pub const SOMITEM_DATATYPE_LONG = SOMITEMTYPE.DATATYPE_LONG;
pub const SOMITEM_DATATYPE_MONTH = SOMITEMTYPE.DATATYPE_MONTH;
pub const SOMITEM_DATATYPE_MONTHDAY = SOMITEMTYPE.DATATYPE_MONTHDAY;
pub const SOMITEM_DATATYPE_NAME = SOMITEMTYPE.DATATYPE_NAME;
pub const SOMITEM_DATATYPE_NCNAME = SOMITEMTYPE.DATATYPE_NCNAME;
pub const SOMITEM_DATATYPE_NEGATIVEINTEGER = SOMITEMTYPE.DATATYPE_NEGATIVEINTEGER;
pub const SOMITEM_DATATYPE_NMTOKEN = SOMITEMTYPE.DATATYPE_NMTOKEN;
pub const SOMITEM_DATATYPE_NMTOKENS = SOMITEMTYPE.DATATYPE_NMTOKENS;
pub const SOMITEM_DATATYPE_NONNEGATIVEINTEGER = SOMITEMTYPE.DATATYPE_NONNEGATIVEINTEGER;
pub const SOMITEM_DATATYPE_NONPOSITIVEINTEGER = SOMITEMTYPE.DATATYPE_NONPOSITIVEINTEGER;
pub const SOMITEM_DATATYPE_NORMALIZEDSTRING = SOMITEMTYPE.DATATYPE_NORMALIZEDSTRING;
pub const SOMITEM_DATATYPE_NOTATION = SOMITEMTYPE.DATATYPE_NOTATION;
pub const SOMITEM_DATATYPE_POSITIVEINTEGER = SOMITEMTYPE.DATATYPE_POSITIVEINTEGER;
pub const SOMITEM_DATATYPE_QNAME = SOMITEMTYPE.DATATYPE_QNAME;
pub const SOMITEM_DATATYPE_SHORT = SOMITEMTYPE.DATATYPE_SHORT;
pub const SOMITEM_DATATYPE_STRING = SOMITEMTYPE.DATATYPE_STRING;
pub const SOMITEM_DATATYPE_TIME = SOMITEMTYPE.DATATYPE_TIME;
pub const SOMITEM_DATATYPE_TOKEN = SOMITEMTYPE.DATATYPE_TOKEN;
pub const SOMITEM_DATATYPE_UNSIGNEDBYTE = SOMITEMTYPE.DATATYPE_UNSIGNEDBYTE;
pub const SOMITEM_DATATYPE_UNSIGNEDINT = SOMITEMTYPE.DATATYPE_UNSIGNEDINT;
pub const SOMITEM_DATATYPE_UNSIGNEDLONG = SOMITEMTYPE.DATATYPE_UNSIGNEDLONG;
pub const SOMITEM_DATATYPE_UNSIGNEDSHORT = SOMITEMTYPE.DATATYPE_UNSIGNEDSHORT;
pub const SOMITEM_DATATYPE_YEAR = SOMITEMTYPE.DATATYPE_YEAR;
pub const SOMITEM_DATATYPE_YEARMONTH = SOMITEMTYPE.DATATYPE_YEARMONTH;
pub const SOMITEM_DATATYPE_ANYSIMPLETYPE = SOMITEMTYPE.DATATYPE_ANYSIMPLETYPE;
pub const SOMITEM_SIMPLETYPE = SOMITEMTYPE.SIMPLETYPE;
pub const SOMITEM_COMPLEXTYPE = SOMITEMTYPE.COMPLEXTYPE;
pub const SOMITEM_PARTICLE = SOMITEMTYPE.PARTICLE;
pub const SOMITEM_ANY = SOMITEMTYPE.ANY;
pub const SOMITEM_ANYATTRIBUTE = SOMITEMTYPE.ANYATTRIBUTE;
pub const SOMITEM_ELEMENT = SOMITEMTYPE.ELEMENT;
pub const SOMITEM_GROUP = SOMITEMTYPE.GROUP;
pub const SOMITEM_ALL = SOMITEMTYPE.ALL;
pub const SOMITEM_CHOICE = SOMITEMTYPE.CHOICE;
pub const SOMITEM_SEQUENCE = SOMITEMTYPE.SEQUENCE;
pub const SOMITEM_EMPTYPARTICLE = SOMITEMTYPE.EMPTYPARTICLE;
pub const SOMITEM_NULL = SOMITEMTYPE.NULL;
pub const SOMITEM_NULL_TYPE = SOMITEMTYPE.NULL_TYPE;
pub const SOMITEM_NULL_ANY = SOMITEMTYPE.NULL_ANY;
pub const SOMITEM_NULL_ANYATTRIBUTE = SOMITEMTYPE.NULL_ANYATTRIBUTE;
pub const SOMITEM_NULL_ELEMENT = SOMITEMTYPE.NULL_ELEMENT;

pub const SCHEMAUSE = enum(i32) {
    OPTIONAL = 0,
    PROHIBITED = 1,
    REQUIRED = 2,
};
pub const SCHEMAUSE_OPTIONAL = SCHEMAUSE.OPTIONAL;
pub const SCHEMAUSE_PROHIBITED = SCHEMAUSE.PROHIBITED;
pub const SCHEMAUSE_REQUIRED = SCHEMAUSE.REQUIRED;

pub const SCHEMADERIVATIONMETHOD = enum(i32) {
    EMPTY = 0,
    SUBSTITUTION = 1,
    EXTENSION = 2,
    RESTRICTION = 4,
    LIST = 8,
    UNION = 16,
    ALL = 255,
    NONE = 256,
};
pub const SCHEMADERIVATIONMETHOD_EMPTY = SCHEMADERIVATIONMETHOD.EMPTY;
pub const SCHEMADERIVATIONMETHOD_SUBSTITUTION = SCHEMADERIVATIONMETHOD.SUBSTITUTION;
pub const SCHEMADERIVATIONMETHOD_EXTENSION = SCHEMADERIVATIONMETHOD.EXTENSION;
pub const SCHEMADERIVATIONMETHOD_RESTRICTION = SCHEMADERIVATIONMETHOD.RESTRICTION;
pub const SCHEMADERIVATIONMETHOD_LIST = SCHEMADERIVATIONMETHOD.LIST;
pub const SCHEMADERIVATIONMETHOD_UNION = SCHEMADERIVATIONMETHOD.UNION;
pub const SCHEMADERIVATIONMETHOD_ALL = SCHEMADERIVATIONMETHOD.ALL;
pub const SCHEMADERIVATIONMETHOD_NONE = SCHEMADERIVATIONMETHOD.NONE;

pub const SCHEMACONTENTTYPE = enum(i32) {
    EMPTY = 0,
    TEXTONLY = 1,
    ELEMENTONLY = 2,
    MIXED = 3,
};
pub const SCHEMACONTENTTYPE_EMPTY = SCHEMACONTENTTYPE.EMPTY;
pub const SCHEMACONTENTTYPE_TEXTONLY = SCHEMACONTENTTYPE.TEXTONLY;
pub const SCHEMACONTENTTYPE_ELEMENTONLY = SCHEMACONTENTTYPE.ELEMENTONLY;
pub const SCHEMACONTENTTYPE_MIXED = SCHEMACONTENTTYPE.MIXED;

pub const SCHEMAPROCESSCONTENTS = enum(i32) {
    NONE = 0,
    SKIP = 1,
    LAX = 2,
    STRICT = 3,
};
pub const SCHEMAPROCESSCONTENTS_NONE = SCHEMAPROCESSCONTENTS.NONE;
pub const SCHEMAPROCESSCONTENTS_SKIP = SCHEMAPROCESSCONTENTS.SKIP;
pub const SCHEMAPROCESSCONTENTS_LAX = SCHEMAPROCESSCONTENTS.LAX;
pub const SCHEMAPROCESSCONTENTS_STRICT = SCHEMAPROCESSCONTENTS.STRICT;

pub const SCHEMAWHITESPACE = enum(i32) {
    NONE = -1,
    PRESERVE = 0,
    REPLACE = 1,
    COLLAPSE = 2,
};
pub const SCHEMAWHITESPACE_NONE = SCHEMAWHITESPACE.NONE;
pub const SCHEMAWHITESPACE_PRESERVE = SCHEMAWHITESPACE.PRESERVE;
pub const SCHEMAWHITESPACE_REPLACE = SCHEMAWHITESPACE.REPLACE;
pub const SCHEMAWHITESPACE_COLLAPSE = SCHEMAWHITESPACE.COLLAPSE;

pub const SCHEMATYPEVARIETY = enum(i32) {
    NONE = -1,
    ATOMIC = 0,
    LIST = 1,
    UNION = 2,
};
pub const SCHEMATYPEVARIETY_NONE = SCHEMATYPEVARIETY.NONE;
pub const SCHEMATYPEVARIETY_ATOMIC = SCHEMATYPEVARIETY.ATOMIC;
pub const SCHEMATYPEVARIETY_LIST = SCHEMATYPEVARIETY.LIST;
pub const SCHEMATYPEVARIETY_UNION = SCHEMATYPEVARIETY.UNION;

const IID_IXMLDOMSchemaCollection2_Value = Guid.initString("50ea08b0-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_IXMLDOMSchemaCollection2 = &IID_IXMLDOMSchemaCollection2_Value;
pub const IXMLDOMSchemaCollection2 = extern union {
    pub const VTable = extern struct {
        base: IXMLDOMSchemaCollection.VTable,
        validate: *const fn(
            self: *const IXMLDOMSchemaCollection2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_validateOnLoad: *const fn(
            self: *const IXMLDOMSchemaCollection2,
            validateOnLoad: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_validateOnLoad: *const fn(
            self: *const IXMLDOMSchemaCollection2,
            validateOnLoad: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getSchema: *const fn(
            self: *const IXMLDOMSchemaCollection2,
            namespaceURI: ?BSTR,
            schema: ?*?*ISchema,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getDeclaration: *const fn(
            self: *const IXMLDOMSchemaCollection2,
            node: ?*IXMLDOMNode,
            item: ?*?*ISchemaItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IXMLDOMSchemaCollection: IXMLDOMSchemaCollection,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn validate(self: *const IXMLDOMSchemaCollection2) callconv(.Inline) HRESULT {
        return self.vtable.validate(self);
    }
    pub fn put_validateOnLoad(self: *const IXMLDOMSchemaCollection2, validateOnLoad: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_validateOnLoad(self, validateOnLoad);
    }
    pub fn get_validateOnLoad(self: *const IXMLDOMSchemaCollection2, validateOnLoad: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_validateOnLoad(self, validateOnLoad);
    }
    pub fn getSchema(self: *const IXMLDOMSchemaCollection2, namespaceURI: ?BSTR, schema: ?*?*ISchema) callconv(.Inline) HRESULT {
        return self.vtable.getSchema(self, namespaceURI, schema);
    }
    pub fn getDeclaration(self: *const IXMLDOMSchemaCollection2, node: ?*IXMLDOMNode, item: ?*?*ISchemaItem) callconv(.Inline) HRESULT {
        return self.vtable.getDeclaration(self, node, item);
    }
};

const IID_ISchemaStringCollection_Value = Guid.initString("50ea08b1-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaStringCollection = &IID_ISchemaStringCollection_Value;
pub const ISchemaStringCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_item: *const fn(
            self: *const ISchemaStringCollection,
            index: i32,
            bstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const ISchemaStringCollection,
            length: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn(
            self: *const ISchemaStringCollection,
            ppunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_item(self: *const ISchemaStringCollection, index: i32, bstr: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_item(self, index, bstr);
    }
    pub fn get_length(self: *const ISchemaStringCollection, length: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_length(self, length);
    }
    pub fn get__newEnum(self: *const ISchemaStringCollection, ppunk: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__newEnum(self, ppunk);
    }
};

const IID_ISchemaItemCollection_Value = Guid.initString("50ea08b2-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaItemCollection = &IID_ISchemaItemCollection_Value;
pub const ISchemaItemCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_item: *const fn(
            self: *const ISchemaItemCollection,
            index: i32,
            item: ?*?*ISchemaItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        itemByName: *const fn(
            self: *const ISchemaItemCollection,
            name: ?BSTR,
            item: ?*?*ISchemaItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        itemByQName: *const fn(
            self: *const ISchemaItemCollection,
            name: ?BSTR,
            namespaceURI: ?BSTR,
            item: ?*?*ISchemaItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const ISchemaItemCollection,
            length: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn(
            self: *const ISchemaItemCollection,
            ppunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_item(self: *const ISchemaItemCollection, index: i32, item: ?*?*ISchemaItem) callconv(.Inline) HRESULT {
        return self.vtable.get_item(self, index, item);
    }
    pub fn itemByName(self: *const ISchemaItemCollection, name: ?BSTR, item: ?*?*ISchemaItem) callconv(.Inline) HRESULT {
        return self.vtable.itemByName(self, name, item);
    }
    pub fn itemByQName(self: *const ISchemaItemCollection, name: ?BSTR, namespaceURI: ?BSTR, item: ?*?*ISchemaItem) callconv(.Inline) HRESULT {
        return self.vtable.itemByQName(self, name, namespaceURI, item);
    }
    pub fn get_length(self: *const ISchemaItemCollection, length: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_length(self, length);
    }
    pub fn get__newEnum(self: *const ISchemaItemCollection, ppunk: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__newEnum(self, ppunk);
    }
};

const IID_ISchemaItem_Value = Guid.initString("50ea08b3-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaItem = &IID_ISchemaItem_Value;
pub const ISchemaItem = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn(
            self: *const ISchemaItem,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_namespaceURI: *const fn(
            self: *const ISchemaItem,
            namespaceURI: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_schema: *const fn(
            self: *const ISchemaItem,
            schema: ?*?*ISchema,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_id: *const fn(
            self: *const ISchemaItem,
            id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_itemType: *const fn(
            self: *const ISchemaItem,
            itemType: ?*SOMITEMTYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_unhandledAttributes: *const fn(
            self: *const ISchemaItem,
            attributes: ?*?*IVBSAXAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        writeAnnotation: *const fn(
            self: *const ISchemaItem,
            annotationSink: ?*IUnknown,
            isWritten: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_name(self: *const ISchemaItem, name: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_name(self, name);
    }
    pub fn get_namespaceURI(self: *const ISchemaItem, namespaceURI: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_namespaceURI(self, namespaceURI);
    }
    pub fn get_schema(self: *const ISchemaItem, schema: ?*?*ISchema) callconv(.Inline) HRESULT {
        return self.vtable.get_schema(self, schema);
    }
    pub fn get_id(self: *const ISchemaItem, id: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_id(self, id);
    }
    pub fn get_itemType(self: *const ISchemaItem, itemType: ?*SOMITEMTYPE) callconv(.Inline) HRESULT {
        return self.vtable.get_itemType(self, itemType);
    }
    pub fn get_unhandledAttributes(self: *const ISchemaItem, attributes: ?*?*IVBSAXAttributes) callconv(.Inline) HRESULT {
        return self.vtable.get_unhandledAttributes(self, attributes);
    }
    pub fn writeAnnotation(self: *const ISchemaItem, annotationSink: ?*IUnknown, isWritten: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.writeAnnotation(self, annotationSink, isWritten);
    }
};

const IID_ISchema_Value = Guid.initString("50ea08b4-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchema = &IID_ISchema_Value;
pub const ISchema = extern union {
    pub const VTable = extern struct {
        base: ISchemaItem.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_targetNamespace: *const fn(
            self: *const ISchema,
            targetNamespace: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_version: *const fn(
            self: *const ISchema,
            version: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_types: *const fn(
            self: *const ISchema,
            types: ?*?*ISchemaItemCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_elements: *const fn(
            self: *const ISchema,
            elements: ?*?*ISchemaItemCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_attributes: *const fn(
            self: *const ISchema,
            attributes: ?*?*ISchemaItemCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_attributeGroups: *const fn(
            self: *const ISchema,
            attributeGroups: ?*?*ISchemaItemCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_modelGroups: *const fn(
            self: *const ISchema,
            modelGroups: ?*?*ISchemaItemCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_notations: *const fn(
            self: *const ISchema,
            notations: ?*?*ISchemaItemCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_schemaLocations: *const fn(
            self: *const ISchema,
            schemaLocations: ?*?*ISchemaStringCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ISchemaItem: ISchemaItem,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_targetNamespace(self: *const ISchema, targetNamespace: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_targetNamespace(self, targetNamespace);
    }
    pub fn get_version(self: *const ISchema, version: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_version(self, version);
    }
    pub fn get_types(self: *const ISchema, types: ?*?*ISchemaItemCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_types(self, types);
    }
    pub fn get_elements(self: *const ISchema, elements: ?*?*ISchemaItemCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_elements(self, elements);
    }
    pub fn get_attributes(self: *const ISchema, attributes: ?*?*ISchemaItemCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_attributes(self, attributes);
    }
    pub fn get_attributeGroups(self: *const ISchema, attributeGroups: ?*?*ISchemaItemCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_attributeGroups(self, attributeGroups);
    }
    pub fn get_modelGroups(self: *const ISchema, modelGroups: ?*?*ISchemaItemCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_modelGroups(self, modelGroups);
    }
    pub fn get_notations(self: *const ISchema, notations: ?*?*ISchemaItemCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_notations(self, notations);
    }
    pub fn get_schemaLocations(self: *const ISchema, schemaLocations: ?*?*ISchemaStringCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_schemaLocations(self, schemaLocations);
    }
};

const IID_ISchemaParticle_Value = Guid.initString("50ea08b5-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaParticle = &IID_ISchemaParticle_Value;
pub const ISchemaParticle = extern union {
    pub const VTable = extern struct {
        base: ISchemaItem.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_minOccurs: *const fn(
            self: *const ISchemaParticle,
            minOccurs: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_maxOccurs: *const fn(
            self: *const ISchemaParticle,
            maxOccurs: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ISchemaItem: ISchemaItem,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_minOccurs(self: *const ISchemaParticle, minOccurs: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_minOccurs(self, minOccurs);
    }
    pub fn get_maxOccurs(self: *const ISchemaParticle, maxOccurs: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_maxOccurs(self, maxOccurs);
    }
};

const IID_ISchemaAttribute_Value = Guid.initString("50ea08b6-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaAttribute = &IID_ISchemaAttribute_Value;
pub const ISchemaAttribute = extern union {
    pub const VTable = extern struct {
        base: ISchemaItem.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const ISchemaAttribute,
            type: ?*?*ISchemaType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scope: *const fn(
            self: *const ISchemaAttribute,
            scope: ?*?*ISchemaComplexType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_defaultValue: *const fn(
            self: *const ISchemaAttribute,
            defaultValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fixedValue: *const fn(
            self: *const ISchemaAttribute,
            fixedValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_use: *const fn(
            self: *const ISchemaAttribute,
            use: ?*SCHEMAUSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isReference: *const fn(
            self: *const ISchemaAttribute,
            reference: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ISchemaItem: ISchemaItem,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_type(self: *const ISchemaAttribute, @"type": ?*?*ISchemaType) callconv(.Inline) HRESULT {
        return self.vtable.get_type(self, @"type");
    }
    pub fn get_scope(self: *const ISchemaAttribute, scope: ?*?*ISchemaComplexType) callconv(.Inline) HRESULT {
        return self.vtable.get_scope(self, scope);
    }
    pub fn get_defaultValue(self: *const ISchemaAttribute, defaultValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_defaultValue(self, defaultValue);
    }
    pub fn get_fixedValue(self: *const ISchemaAttribute, fixedValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_fixedValue(self, fixedValue);
    }
    pub fn get_use(self: *const ISchemaAttribute, use: ?*SCHEMAUSE) callconv(.Inline) HRESULT {
        return self.vtable.get_use(self, use);
    }
    pub fn get_isReference(self: *const ISchemaAttribute, reference: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_isReference(self, reference);
    }
};

const IID_ISchemaElement_Value = Guid.initString("50ea08b7-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaElement = &IID_ISchemaElement_Value;
pub const ISchemaElement = extern union {
    pub const VTable = extern struct {
        base: ISchemaParticle.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn(
            self: *const ISchemaElement,
            type: ?*?*ISchemaType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scope: *const fn(
            self: *const ISchemaElement,
            scope: ?*?*ISchemaComplexType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_defaultValue: *const fn(
            self: *const ISchemaElement,
            defaultValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fixedValue: *const fn(
            self: *const ISchemaElement,
            fixedValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isNillable: *const fn(
            self: *const ISchemaElement,
            nillable: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_identityConstraints: *const fn(
            self: *const ISchemaElement,
            constraints: ?*?*ISchemaItemCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_substitutionGroup: *const fn(
            self: *const ISchemaElement,
            element: ?*?*ISchemaElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_substitutionGroupExclusions: *const fn(
            self: *const ISchemaElement,
            exclusions: ?*SCHEMADERIVATIONMETHOD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_disallowedSubstitutions: *const fn(
            self: *const ISchemaElement,
            disallowed: ?*SCHEMADERIVATIONMETHOD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isAbstract: *const fn(
            self: *const ISchemaElement,
            abstract: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isReference: *const fn(
            self: *const ISchemaElement,
            reference: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ISchemaParticle: ISchemaParticle,
    ISchemaItem: ISchemaItem,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_type(self: *const ISchemaElement, @"type": ?*?*ISchemaType) callconv(.Inline) HRESULT {
        return self.vtable.get_type(self, @"type");
    }
    pub fn get_scope(self: *const ISchemaElement, scope: ?*?*ISchemaComplexType) callconv(.Inline) HRESULT {
        return self.vtable.get_scope(self, scope);
    }
    pub fn get_defaultValue(self: *const ISchemaElement, defaultValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_defaultValue(self, defaultValue);
    }
    pub fn get_fixedValue(self: *const ISchemaElement, fixedValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_fixedValue(self, fixedValue);
    }
    pub fn get_isNillable(self: *const ISchemaElement, nillable: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_isNillable(self, nillable);
    }
    pub fn get_identityConstraints(self: *const ISchemaElement, constraints: ?*?*ISchemaItemCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_identityConstraints(self, constraints);
    }
    pub fn get_substitutionGroup(self: *const ISchemaElement, element: ?*?*ISchemaElement) callconv(.Inline) HRESULT {
        return self.vtable.get_substitutionGroup(self, element);
    }
    pub fn get_substitutionGroupExclusions(self: *const ISchemaElement, exclusions: ?*SCHEMADERIVATIONMETHOD) callconv(.Inline) HRESULT {
        return self.vtable.get_substitutionGroupExclusions(self, exclusions);
    }
    pub fn get_disallowedSubstitutions(self: *const ISchemaElement, disallowed: ?*SCHEMADERIVATIONMETHOD) callconv(.Inline) HRESULT {
        return self.vtable.get_disallowedSubstitutions(self, disallowed);
    }
    pub fn get_isAbstract(self: *const ISchemaElement, abstract: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_isAbstract(self, abstract);
    }
    pub fn get_isReference(self: *const ISchemaElement, reference: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_isReference(self, reference);
    }
};

const IID_ISchemaType_Value = Guid.initString("50ea08b8-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaType = &IID_ISchemaType_Value;
pub const ISchemaType = extern union {
    pub const VTable = extern struct {
        base: ISchemaItem.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_baseTypes: *const fn(
            self: *const ISchemaType,
            baseTypes: ?*?*ISchemaItemCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_final: *const fn(
            self: *const ISchemaType,
            final: ?*SCHEMADERIVATIONMETHOD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_variety: *const fn(
            self: *const ISchemaType,
            variety: ?*SCHEMATYPEVARIETY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_derivedBy: *const fn(
            self: *const ISchemaType,
            derivedBy: ?*SCHEMADERIVATIONMETHOD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        isValid: *const fn(
            self: *const ISchemaType,
            data: ?BSTR,
            valid: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_minExclusive: *const fn(
            self: *const ISchemaType,
            minExclusive: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_minInclusive: *const fn(
            self: *const ISchemaType,
            minInclusive: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_maxExclusive: *const fn(
            self: *const ISchemaType,
            maxExclusive: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_maxInclusive: *const fn(
            self: *const ISchemaType,
            maxInclusive: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_totalDigits: *const fn(
            self: *const ISchemaType,
            totalDigits: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fractionDigits: *const fn(
            self: *const ISchemaType,
            fractionDigits: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn(
            self: *const ISchemaType,
            length: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_minLength: *const fn(
            self: *const ISchemaType,
            minLength: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_maxLength: *const fn(
            self: *const ISchemaType,
            maxLength: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_enumeration: *const fn(
            self: *const ISchemaType,
            enumeration: ?*?*ISchemaStringCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_whitespace: *const fn(
            self: *const ISchemaType,
            whitespace: ?*SCHEMAWHITESPACE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_patterns: *const fn(
            self: *const ISchemaType,
            patterns: ?*?*ISchemaStringCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ISchemaItem: ISchemaItem,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_baseTypes(self: *const ISchemaType, baseTypes: ?*?*ISchemaItemCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_baseTypes(self, baseTypes);
    }
    pub fn get_final(self: *const ISchemaType, final: ?*SCHEMADERIVATIONMETHOD) callconv(.Inline) HRESULT {
        return self.vtable.get_final(self, final);
    }
    pub fn get_variety(self: *const ISchemaType, variety: ?*SCHEMATYPEVARIETY) callconv(.Inline) HRESULT {
        return self.vtable.get_variety(self, variety);
    }
    pub fn get_derivedBy(self: *const ISchemaType, derivedBy: ?*SCHEMADERIVATIONMETHOD) callconv(.Inline) HRESULT {
        return self.vtable.get_derivedBy(self, derivedBy);
    }
    pub fn isValid(self: *const ISchemaType, data: ?BSTR, valid: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.isValid(self, data, valid);
    }
    pub fn get_minExclusive(self: *const ISchemaType, minExclusive: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_minExclusive(self, minExclusive);
    }
    pub fn get_minInclusive(self: *const ISchemaType, minInclusive: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_minInclusive(self, minInclusive);
    }
    pub fn get_maxExclusive(self: *const ISchemaType, maxExclusive: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_maxExclusive(self, maxExclusive);
    }
    pub fn get_maxInclusive(self: *const ISchemaType, maxInclusive: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_maxInclusive(self, maxInclusive);
    }
    pub fn get_totalDigits(self: *const ISchemaType, totalDigits: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_totalDigits(self, totalDigits);
    }
    pub fn get_fractionDigits(self: *const ISchemaType, fractionDigits: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_fractionDigits(self, fractionDigits);
    }
    pub fn get_length(self: *const ISchemaType, length: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_length(self, length);
    }
    pub fn get_minLength(self: *const ISchemaType, minLength: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_minLength(self, minLength);
    }
    pub fn get_maxLength(self: *const ISchemaType, maxLength: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_maxLength(self, maxLength);
    }
    pub fn get_enumeration(self: *const ISchemaType, enumeration: ?*?*ISchemaStringCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_enumeration(self, enumeration);
    }
    pub fn get_whitespace(self: *const ISchemaType, whitespace: ?*SCHEMAWHITESPACE) callconv(.Inline) HRESULT {
        return self.vtable.get_whitespace(self, whitespace);
    }
    pub fn get_patterns(self: *const ISchemaType, patterns: ?*?*ISchemaStringCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_patterns(self, patterns);
    }
};

const IID_ISchemaComplexType_Value = Guid.initString("50ea08b9-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaComplexType = &IID_ISchemaComplexType_Value;
pub const ISchemaComplexType = extern union {
    pub const VTable = extern struct {
        base: ISchemaType.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isAbstract: *const fn(
            self: *const ISchemaComplexType,
            abstract: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_anyAttribute: *const fn(
            self: *const ISchemaComplexType,
            anyAttribute: ?*?*ISchemaAny,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_attributes: *const fn(
            self: *const ISchemaComplexType,
            attributes: ?*?*ISchemaItemCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_contentType: *const fn(
            self: *const ISchemaComplexType,
            contentType: ?*SCHEMACONTENTTYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_contentModel: *const fn(
            self: *const ISchemaComplexType,
            contentModel: ?*?*ISchemaModelGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_prohibitedSubstitutions: *const fn(
            self: *const ISchemaComplexType,
            prohibited: ?*SCHEMADERIVATIONMETHOD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ISchemaType: ISchemaType,
    ISchemaItem: ISchemaItem,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_isAbstract(self: *const ISchemaComplexType, abstract: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_isAbstract(self, abstract);
    }
    pub fn get_anyAttribute(self: *const ISchemaComplexType, anyAttribute: ?*?*ISchemaAny) callconv(.Inline) HRESULT {
        return self.vtable.get_anyAttribute(self, anyAttribute);
    }
    pub fn get_attributes(self: *const ISchemaComplexType, attributes: ?*?*ISchemaItemCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_attributes(self, attributes);
    }
    pub fn get_contentType(self: *const ISchemaComplexType, contentType: ?*SCHEMACONTENTTYPE) callconv(.Inline) HRESULT {
        return self.vtable.get_contentType(self, contentType);
    }
    pub fn get_contentModel(self: *const ISchemaComplexType, contentModel: ?*?*ISchemaModelGroup) callconv(.Inline) HRESULT {
        return self.vtable.get_contentModel(self, contentModel);
    }
    pub fn get_prohibitedSubstitutions(self: *const ISchemaComplexType, prohibited: ?*SCHEMADERIVATIONMETHOD) callconv(.Inline) HRESULT {
        return self.vtable.get_prohibitedSubstitutions(self, prohibited);
    }
};

const IID_ISchemaAttributeGroup_Value = Guid.initString("50ea08ba-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaAttributeGroup = &IID_ISchemaAttributeGroup_Value;
pub const ISchemaAttributeGroup = extern union {
    pub const VTable = extern struct {
        base: ISchemaItem.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_anyAttribute: *const fn(
            self: *const ISchemaAttributeGroup,
            anyAttribute: ?*?*ISchemaAny,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_attributes: *const fn(
            self: *const ISchemaAttributeGroup,
            attributes: ?*?*ISchemaItemCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ISchemaItem: ISchemaItem,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_anyAttribute(self: *const ISchemaAttributeGroup, anyAttribute: ?*?*ISchemaAny) callconv(.Inline) HRESULT {
        return self.vtable.get_anyAttribute(self, anyAttribute);
    }
    pub fn get_attributes(self: *const ISchemaAttributeGroup, attributes: ?*?*ISchemaItemCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_attributes(self, attributes);
    }
};

const IID_ISchemaModelGroup_Value = Guid.initString("50ea08bb-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaModelGroup = &IID_ISchemaModelGroup_Value;
pub const ISchemaModelGroup = extern union {
    pub const VTable = extern struct {
        base: ISchemaParticle.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_particles: *const fn(
            self: *const ISchemaModelGroup,
            particles: ?*?*ISchemaItemCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ISchemaParticle: ISchemaParticle,
    ISchemaItem: ISchemaItem,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_particles(self: *const ISchemaModelGroup, particles: ?*?*ISchemaItemCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_particles(self, particles);
    }
};

const IID_ISchemaAny_Value = Guid.initString("50ea08bc-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaAny = &IID_ISchemaAny_Value;
pub const ISchemaAny = extern union {
    pub const VTable = extern struct {
        base: ISchemaParticle.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_namespaces: *const fn(
            self: *const ISchemaAny,
            namespaces: ?*?*ISchemaStringCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_processContents: *const fn(
            self: *const ISchemaAny,
            processContents: ?*SCHEMAPROCESSCONTENTS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ISchemaParticle: ISchemaParticle,
    ISchemaItem: ISchemaItem,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_namespaces(self: *const ISchemaAny, namespaces: ?*?*ISchemaStringCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_namespaces(self, namespaces);
    }
    pub fn get_processContents(self: *const ISchemaAny, processContents: ?*SCHEMAPROCESSCONTENTS) callconv(.Inline) HRESULT {
        return self.vtable.get_processContents(self, processContents);
    }
};

const IID_ISchemaIdentityConstraint_Value = Guid.initString("50ea08bd-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaIdentityConstraint = &IID_ISchemaIdentityConstraint_Value;
pub const ISchemaIdentityConstraint = extern union {
    pub const VTable = extern struct {
        base: ISchemaItem.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_selector: *const fn(
            self: *const ISchemaIdentityConstraint,
            selector: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fields: *const fn(
            self: *const ISchemaIdentityConstraint,
            fields: ?*?*ISchemaStringCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_referencedKey: *const fn(
            self: *const ISchemaIdentityConstraint,
            key: ?*?*ISchemaIdentityConstraint,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ISchemaItem: ISchemaItem,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_selector(self: *const ISchemaIdentityConstraint, selector: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_selector(self, selector);
    }
    pub fn get_fields(self: *const ISchemaIdentityConstraint, fields: ?*?*ISchemaStringCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_fields(self, fields);
    }
    pub fn get_referencedKey(self: *const ISchemaIdentityConstraint, key: ?*?*ISchemaIdentityConstraint) callconv(.Inline) HRESULT {
        return self.vtable.get_referencedKey(self, key);
    }
};

const IID_ISchemaNotation_Value = Guid.initString("50ea08be-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaNotation = &IID_ISchemaNotation_Value;
pub const ISchemaNotation = extern union {
    pub const VTable = extern struct {
        base: ISchemaItem.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_systemIdentifier: *const fn(
            self: *const ISchemaNotation,
            uri: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_publicIdentifier: *const fn(
            self: *const ISchemaNotation,
            uri: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ISchemaItem: ISchemaItem,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_systemIdentifier(self: *const ISchemaNotation, uri: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_systemIdentifier(self, uri);
    }
    pub fn get_publicIdentifier(self: *const ISchemaNotation, uri: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_publicIdentifier(self, uri);
    }
};

pub const __msxml6_ReferenceRemainingTypes__ = extern struct {
    __tagDomNodeType__: DOMNodeType,
    __domNodeType__: DOMNodeType,
    __serverXmlHttpOptionEnum__: SERVERXMLHTTP_OPTION,
    __serverXmlHttpOption__: SERVERXMLHTTP_OPTION,
    __serverCertOptionEnum__: SXH_SERVER_CERT_OPTION,
    __serverCertOption__: SXH_SERVER_CERT_OPTION,
    __proxySettingEnum__: SXH_PROXY_SETTING,
    __proxySetting__: SXH_PROXY_SETTING,
    __somItemTypeEnum__: SOMITEMTYPE,
    __somItemType__: SOMITEMTYPE,
    __schemaUseEnum__: SCHEMAUSE,
    __schemaUse__: SCHEMAUSE,
    __schemaDerivationMethodEnum__: SCHEMADERIVATIONMETHOD,
    __schemaDerivationMethod__: SCHEMADERIVATIONMETHOD,
    __schemaContentTypeEnum__: SCHEMACONTENTTYPE,
    __schemaContentType__: SCHEMACONTENTTYPE,
    __schemaProcessContentsEnum__: SCHEMAPROCESSCONTENTS,
    __schemaProcessContents__: SCHEMAPROCESSCONTENTS,
    __schemaWhitespaceEnum__: SCHEMAWHITESPACE,
    __schemaWhitespace__: SCHEMAWHITESPACE,
    __schemaTypeVarietyEnum__: SCHEMATYPEVARIETY,
    __schemaTypeVariety__: SCHEMATYPEVARIETY,
};

pub const XHR_COOKIE_STATE = enum(i32) {
    UNKNOWN = 0,
    ACCEPT = 1,
    PROMPT = 2,
    LEASH = 3,
    DOWNGRADE = 4,
    REJECT = 5,
};
pub const XHR_COOKIE_STATE_UNKNOWN = XHR_COOKIE_STATE.UNKNOWN;
pub const XHR_COOKIE_STATE_ACCEPT = XHR_COOKIE_STATE.ACCEPT;
pub const XHR_COOKIE_STATE_PROMPT = XHR_COOKIE_STATE.PROMPT;
pub const XHR_COOKIE_STATE_LEASH = XHR_COOKIE_STATE.LEASH;
pub const XHR_COOKIE_STATE_DOWNGRADE = XHR_COOKIE_STATE.DOWNGRADE;
pub const XHR_COOKIE_STATE_REJECT = XHR_COOKIE_STATE.REJECT;

pub const XHR_COOKIE_FLAG = enum(i32) {
    IS_SECURE = 1,
    IS_SESSION = 2,
    THIRD_PARTY = 16,
    PROMPT_REQUIRED = 32,
    EVALUATE_P3P = 64,
    APPLY_P3P = 128,
    P3P_ENABLED = 256,
    IS_RESTRICTED = 512,
    IE6 = 1024,
    IS_LEGACY = 2048,
    NON_SCRIPT = 4096,
    HTTPONLY = 8192,
};
pub const XHR_COOKIE_IS_SECURE = XHR_COOKIE_FLAG.IS_SECURE;
pub const XHR_COOKIE_IS_SESSION = XHR_COOKIE_FLAG.IS_SESSION;
pub const XHR_COOKIE_THIRD_PARTY = XHR_COOKIE_FLAG.THIRD_PARTY;
pub const XHR_COOKIE_PROMPT_REQUIRED = XHR_COOKIE_FLAG.PROMPT_REQUIRED;
pub const XHR_COOKIE_EVALUATE_P3P = XHR_COOKIE_FLAG.EVALUATE_P3P;
pub const XHR_COOKIE_APPLY_P3P = XHR_COOKIE_FLAG.APPLY_P3P;
pub const XHR_COOKIE_P3P_ENABLED = XHR_COOKIE_FLAG.P3P_ENABLED;
pub const XHR_COOKIE_IS_RESTRICTED = XHR_COOKIE_FLAG.IS_RESTRICTED;
pub const XHR_COOKIE_IE6 = XHR_COOKIE_FLAG.IE6;
pub const XHR_COOKIE_IS_LEGACY = XHR_COOKIE_FLAG.IS_LEGACY;
pub const XHR_COOKIE_NON_SCRIPT = XHR_COOKIE_FLAG.NON_SCRIPT;
pub const XHR_COOKIE_HTTPONLY = XHR_COOKIE_FLAG.HTTPONLY;

pub const XHR_CRED_PROMPT = enum(i32) {
    ALL = 0,
    NONE = 1,
    PROXY = 2,
};
pub const XHR_CRED_PROMPT_ALL = XHR_CRED_PROMPT.ALL;
pub const XHR_CRED_PROMPT_NONE = XHR_CRED_PROMPT.NONE;
pub const XHR_CRED_PROMPT_PROXY = XHR_CRED_PROMPT.PROXY;

pub const XHR_AUTH = enum(i32) {
    ALL = 0,
    NONE = 1,
    PROXY = 2,
};
pub const XHR_AUTH_ALL = XHR_AUTH.ALL;
pub const XHR_AUTH_NONE = XHR_AUTH.NONE;
pub const XHR_AUTH_PROXY = XHR_AUTH.PROXY;

pub const XHR_PROPERTY = enum(i32) {
    NO_CRED_PROMPT = 0,
    NO_AUTH = 1,
    TIMEOUT = 2,
    NO_DEFAULT_HEADERS = 3,
    REPORT_REDIRECT_STATUS = 4,
    NO_CACHE = 5,
    EXTENDED_ERROR = 6,
    QUERY_STRING_UTF8 = 7,
    IGNORE_CERT_ERRORS = 8,
    ONDATA_THRESHOLD = 9,
    SET_ENTERPRISEID = 10,
    MAX_CONNECTIONS = 11,
};
pub const XHR_PROP_NO_CRED_PROMPT = XHR_PROPERTY.NO_CRED_PROMPT;
pub const XHR_PROP_NO_AUTH = XHR_PROPERTY.NO_AUTH;
pub const XHR_PROP_TIMEOUT = XHR_PROPERTY.TIMEOUT;
pub const XHR_PROP_NO_DEFAULT_HEADERS = XHR_PROPERTY.NO_DEFAULT_HEADERS;
pub const XHR_PROP_REPORT_REDIRECT_STATUS = XHR_PROPERTY.REPORT_REDIRECT_STATUS;
pub const XHR_PROP_NO_CACHE = XHR_PROPERTY.NO_CACHE;
pub const XHR_PROP_EXTENDED_ERROR = XHR_PROPERTY.EXTENDED_ERROR;
pub const XHR_PROP_QUERY_STRING_UTF8 = XHR_PROPERTY.QUERY_STRING_UTF8;
pub const XHR_PROP_IGNORE_CERT_ERRORS = XHR_PROPERTY.IGNORE_CERT_ERRORS;
pub const XHR_PROP_ONDATA_THRESHOLD = XHR_PROPERTY.ONDATA_THRESHOLD;
pub const XHR_PROP_SET_ENTERPRISEID = XHR_PROPERTY.SET_ENTERPRISEID;
pub const XHR_PROP_MAX_CONNECTIONS = XHR_PROPERTY.MAX_CONNECTIONS;

pub const XHR_CERT_IGNORE_FLAG = enum(u32) {
    REVOCATION_FAILED = 128,
    UNKNOWN_CA = 256,
    CERT_CN_INVALID = 4096,
    CERT_DATE_INVALID = 8192,
    ALL_SERVER_ERRORS = 12672,
};
pub const XHR_CERT_IGNORE_REVOCATION_FAILED = XHR_CERT_IGNORE_FLAG.REVOCATION_FAILED;
pub const XHR_CERT_IGNORE_UNKNOWN_CA = XHR_CERT_IGNORE_FLAG.UNKNOWN_CA;
pub const XHR_CERT_IGNORE_CERT_CN_INVALID = XHR_CERT_IGNORE_FLAG.CERT_CN_INVALID;
pub const XHR_CERT_IGNORE_CERT_DATE_INVALID = XHR_CERT_IGNORE_FLAG.CERT_DATE_INVALID;
pub const XHR_CERT_IGNORE_ALL_SERVER_ERRORS = XHR_CERT_IGNORE_FLAG.ALL_SERVER_ERRORS;

pub const XHR_CERT_ERROR_FLAG = enum(u32) {
    REVOCATION_FAILED = 8388608,
    UNKNOWN_CA = 16777216,
    CERT_CN_INVALID = 33554432,
    CERT_DATE_INVALID = 67108864,
    ALL_SERVER_ERRORS = 125829120,
};
pub const XHR_CERT_ERROR_REVOCATION_FAILED = XHR_CERT_ERROR_FLAG.REVOCATION_FAILED;
pub const XHR_CERT_ERROR_UNKNOWN_CA = XHR_CERT_ERROR_FLAG.UNKNOWN_CA;
pub const XHR_CERT_ERROR_CERT_CN_INVALID = XHR_CERT_ERROR_FLAG.CERT_CN_INVALID;
pub const XHR_CERT_ERROR_CERT_DATE_INVALID = XHR_CERT_ERROR_FLAG.CERT_DATE_INVALID;
pub const XHR_CERT_ERROR_ALL_SERVER_ERRORS = XHR_CERT_ERROR_FLAG.ALL_SERVER_ERRORS;

pub const XHR_COOKIE = extern struct {
    pwszUrl: ?PWSTR,
    pwszName: ?PWSTR,
    pwszValue: ?PWSTR,
    pwszP3PPolicy: ?PWSTR,
    ftExpires: FILETIME,
    dwFlags: u32,
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IXMLHTTPRequest2Callback_Value = Guid.initString("a44a9299-e321-40de-8866-341b41669162");
pub const IID_IXMLHTTPRequest2Callback = &IID_IXMLHTTPRequest2Callback_Value;
pub const IXMLHTTPRequest2Callback = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnRedirect: *const fn(
            self: *const IXMLHTTPRequest2Callback,
            pXHR: ?*IXMLHTTPRequest2,
            pwszRedirectUrl: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnHeadersAvailable: *const fn(
            self: *const IXMLHTTPRequest2Callback,
            pXHR: ?*IXMLHTTPRequest2,
            dwStatus: u32,
            pwszStatus: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDataAvailable: *const fn(
            self: *const IXMLHTTPRequest2Callback,
            pXHR: ?*IXMLHTTPRequest2,
            pResponseStream: ?*ISequentialStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnResponseReceived: *const fn(
            self: *const IXMLHTTPRequest2Callback,
            pXHR: ?*IXMLHTTPRequest2,
            pResponseStream: ?*ISequentialStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnError: *const fn(
            self: *const IXMLHTTPRequest2Callback,
            pXHR: ?*IXMLHTTPRequest2,
            hrError: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnRedirect(self: *const IXMLHTTPRequest2Callback, pXHR: ?*IXMLHTTPRequest2, pwszRedirectUrl: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.OnRedirect(self, pXHR, pwszRedirectUrl);
    }
    pub fn OnHeadersAvailable(self: *const IXMLHTTPRequest2Callback, pXHR: ?*IXMLHTTPRequest2, dwStatus: u32, pwszStatus: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.OnHeadersAvailable(self, pXHR, dwStatus, pwszStatus);
    }
    pub fn OnDataAvailable(self: *const IXMLHTTPRequest2Callback, pXHR: ?*IXMLHTTPRequest2, pResponseStream: ?*ISequentialStream) callconv(.Inline) HRESULT {
        return self.vtable.OnDataAvailable(self, pXHR, pResponseStream);
    }
    pub fn OnResponseReceived(self: *const IXMLHTTPRequest2Callback, pXHR: ?*IXMLHTTPRequest2, pResponseStream: ?*ISequentialStream) callconv(.Inline) HRESULT {
        return self.vtable.OnResponseReceived(self, pXHR, pResponseStream);
    }
    pub fn OnError(self: *const IXMLHTTPRequest2Callback, pXHR: ?*IXMLHTTPRequest2, hrError: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.OnError(self, pXHR, hrError);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IXMLHTTPRequest2_Value = Guid.initString("e5d37dc0-552a-4d52-9cc0-a14d546fbd04");
pub const IID_IXMLHTTPRequest2 = &IID_IXMLHTTPRequest2_Value;
pub const IXMLHTTPRequest2 = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Open: *const fn(
            self: *const IXMLHTTPRequest2,
            pwszMethod: ?[*:0]const u16,
            pwszUrl: ?[*:0]const u16,
            pStatusCallback: ?*IXMLHTTPRequest2Callback,
            pwszUserName: ?[*:0]const u16,
            pwszPassword: ?[*:0]const u16,
            pwszProxyUserName: ?[*:0]const u16,
            pwszProxyPassword: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Send: *const fn(
            self: *const IXMLHTTPRequest2,
            pBody: ?*ISequentialStream,
            cbBody: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Abort: *const fn(
            self: *const IXMLHTTPRequest2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCookie: *const fn(
            self: *const IXMLHTTPRequest2,
            pCookie: ?*const XHR_COOKIE,
            pdwCookieState: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCustomResponseStream: *const fn(
            self: *const IXMLHTTPRequest2,
            pSequentialStream: ?*ISequentialStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn(
            self: *const IXMLHTTPRequest2,
            eProperty: XHR_PROPERTY,
            ullValue: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRequestHeader: *const fn(
            self: *const IXMLHTTPRequest2,
            pwszHeader: ?[*:0]const u16,
            pwszValue: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllResponseHeaders: *const fn(
            self: *const IXMLHTTPRequest2,
            ppwszHeaders: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCookie: *const fn(
            self: *const IXMLHTTPRequest2,
            pwszUrl: ?[*:0]const u16,
            pwszName: ?[*:0]const u16,
            dwFlags: u32,
            pcCookies: ?*u32,
            ppCookies: [*]?*XHR_COOKIE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResponseHeader: *const fn(
            self: *const IXMLHTTPRequest2,
            pwszHeader: ?[*:0]const u16,
            ppwszValue: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Open(self: *const IXMLHTTPRequest2, pwszMethod: ?[*:0]const u16, pwszUrl: ?[*:0]const u16, pStatusCallback: ?*IXMLHTTPRequest2Callback, pwszUserName: ?[*:0]const u16, pwszPassword: ?[*:0]const u16, pwszProxyUserName: ?[*:0]const u16, pwszProxyPassword: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.Open(self, pwszMethod, pwszUrl, pStatusCallback, pwszUserName, pwszPassword, pwszProxyUserName, pwszProxyPassword);
    }
    pub fn Send(self: *const IXMLHTTPRequest2, pBody: ?*ISequentialStream, cbBody: u64) callconv(.Inline) HRESULT {
        return self.vtable.Send(self, pBody, cbBody);
    }
    pub fn Abort(self: *const IXMLHTTPRequest2) callconv(.Inline) HRESULT {
        return self.vtable.Abort(self);
    }
    pub fn SetCookie(self: *const IXMLHTTPRequest2, pCookie: ?*const XHR_COOKIE, pdwCookieState: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.SetCookie(self, pCookie, pdwCookieState);
    }
    pub fn SetCustomResponseStream(self: *const IXMLHTTPRequest2, pSequentialStream: ?*ISequentialStream) callconv(.Inline) HRESULT {
        return self.vtable.SetCustomResponseStream(self, pSequentialStream);
    }
    pub fn SetProperty(self: *const IXMLHTTPRequest2, eProperty: XHR_PROPERTY, ullValue: u64) callconv(.Inline) HRESULT {
        return self.vtable.SetProperty(self, eProperty, ullValue);
    }
    pub fn SetRequestHeader(self: *const IXMLHTTPRequest2, pwszHeader: ?[*:0]const u16, pwszValue: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetRequestHeader(self, pwszHeader, pwszValue);
    }
    pub fn GetAllResponseHeaders(self: *const IXMLHTTPRequest2, ppwszHeaders: ?*?*u16) callconv(.Inline) HRESULT {
        return self.vtable.GetAllResponseHeaders(self, ppwszHeaders);
    }
    pub fn GetCookie(self: *const IXMLHTTPRequest2, pwszUrl: ?[*:0]const u16, pwszName: ?[*:0]const u16, dwFlags: u32, pcCookies: ?*u32, ppCookies: [*]?*XHR_COOKIE) callconv(.Inline) HRESULT {
        return self.vtable.GetCookie(self, pwszUrl, pwszName, dwFlags, pcCookies, ppCookies);
    }
    pub fn GetResponseHeader(self: *const IXMLHTTPRequest2, pwszHeader: ?[*:0]const u16, ppwszValue: ?*?*u16) callconv(.Inline) HRESULT {
        return self.vtable.GetResponseHeader(self, pwszHeader, ppwszValue);
    }
};

pub const XHR_CERT = extern struct {
    cbCert: u32,
    pbCert: ?*u8,
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IXMLHTTPRequest3Callback_Value = Guid.initString("b9e57830-8c6c-4a6f-9c13-47772bb047bb");
pub const IID_IXMLHTTPRequest3Callback = &IID_IXMLHTTPRequest3Callback_Value;
pub const IXMLHTTPRequest3Callback = extern union {
    pub const VTable = extern struct {
        base: IXMLHTTPRequest2Callback.VTable,
        OnServerCertificateReceived: *const fn(
            self: *const IXMLHTTPRequest3Callback,
            pXHR: ?*IXMLHTTPRequest3,
            dwCertificateErrors: u32,
            cServerCertificateChain: u32,
            rgServerCertificateChain: [*]const XHR_CERT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnClientCertificateRequested: *const fn(
            self: *const IXMLHTTPRequest3Callback,
            pXHR: ?*IXMLHTTPRequest3,
            cIssuerList: u32,
            rgpwszIssuerList: [*]const ?*const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IXMLHTTPRequest2Callback: IXMLHTTPRequest2Callback,
    IUnknown: IUnknown,
    pub fn OnServerCertificateReceived(self: *const IXMLHTTPRequest3Callback, pXHR: ?*IXMLHTTPRequest3, dwCertificateErrors: u32, cServerCertificateChain: u32, rgServerCertificateChain: [*]const XHR_CERT) callconv(.Inline) HRESULT {
        return self.vtable.OnServerCertificateReceived(self, pXHR, dwCertificateErrors, cServerCertificateChain, rgServerCertificateChain);
    }
    pub fn OnClientCertificateRequested(self: *const IXMLHTTPRequest3Callback, pXHR: ?*IXMLHTTPRequest3, cIssuerList: u32, rgpwszIssuerList: [*]const ?*const u16) callconv(.Inline) HRESULT {
        return self.vtable.OnClientCertificateRequested(self, pXHR, cIssuerList, rgpwszIssuerList);
    }
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IXMLHTTPRequest3_Value = Guid.initString("a1c9feee-0617-4f23-9d58-8961ea43567c");
pub const IID_IXMLHTTPRequest3 = &IID_IXMLHTTPRequest3_Value;
pub const IXMLHTTPRequest3 = extern union {
    pub const VTable = extern struct {
        base: IXMLHTTPRequest2.VTable,
        SetClientCertificate: *const fn(
            self: *const IXMLHTTPRequest3,
            cbClientCertificateHash: u32,
            pbClientCertificateHash: [*:0]const u8,
            pwszPin: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IXMLHTTPRequest2: IXMLHTTPRequest2,
    IUnknown: IUnknown,
    pub fn SetClientCertificate(self: *const IXMLHTTPRequest3, cbClientCertificateHash: u32, pbClientCertificateHash: [*:0]const u8, pwszPin: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetClientCertificate(self, cbClientCertificateHash, pbClientCertificateHash, pwszPin);
    }
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (10)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const BOOL = @import("../../foundation.zig").BOOL;
const BSTR = @import("../../foundation.zig").BSTR;
const FILETIME = @import("../../foundation.zig").FILETIME;
const HRESULT = @import("../../foundation.zig").HRESULT;
const IDispatch = @import("../../system/com.zig").IDispatch;
const ISequentialStream = @import("../../system/com.zig").ISequentialStream;
const IUnknown = @import("../../system/com.zig").IUnknown;
const PWSTR = @import("../../foundation.zig").PWSTR;
const VARIANT = @import("../../system/com.zig").VARIANT;

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
