//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (3)
//--------------------------------------------------------------------------------
pub const _IID_IXmlReader = Guid.initString("7279fc81-709d-4095-b63d-69fe4b0d9030");
pub const _IID_IXmlWriter = Guid.initString("7279fc88-709d-4095-b63d-69fe4b0d9030");
pub const _IID_IXmlResolver = Guid.initString("7279fc82-709d-4095-b63d-69fe4b0d9030");

//--------------------------------------------------------------------------------
// Section: Types (12)
//--------------------------------------------------------------------------------
pub const XmlNodeType = enum(i32) {
    XmlNodeType_None = 0,
    XmlNodeType_Element = 1,
    XmlNodeType_Attribute = 2,
    XmlNodeType_Text = 3,
    XmlNodeType_CDATA = 4,
    XmlNodeType_ProcessingInstruction = 7,
    XmlNodeType_Comment = 8,
    XmlNodeType_DocumentType = 10,
    XmlNodeType_Whitespace = 13,
    XmlNodeType_EndElement = 15,
    XmlNodeType_XmlDeclaration = 17,
    pub const _XmlNodeType_Last = .XmlNodeType_XmlDeclaration;
};
pub const XmlNodeType_None = XmlNodeType.XmlNodeType_None;
pub const XmlNodeType_Element = XmlNodeType.XmlNodeType_Element;
pub const XmlNodeType_Attribute = XmlNodeType.XmlNodeType_Attribute;
pub const XmlNodeType_Text = XmlNodeType.XmlNodeType_Text;
pub const XmlNodeType_CDATA = XmlNodeType.XmlNodeType_CDATA;
pub const XmlNodeType_ProcessingInstruction = XmlNodeType.XmlNodeType_ProcessingInstruction;
pub const XmlNodeType_Comment = XmlNodeType.XmlNodeType_Comment;
pub const XmlNodeType_DocumentType = XmlNodeType.XmlNodeType_DocumentType;
pub const XmlNodeType_Whitespace = XmlNodeType.XmlNodeType_Whitespace;
pub const XmlNodeType_EndElement = XmlNodeType.XmlNodeType_EndElement;
pub const XmlNodeType_XmlDeclaration = XmlNodeType.XmlNodeType_XmlDeclaration;
pub const _XmlNodeType_Last = XmlNodeType.XmlNodeType_XmlDeclaration;

pub const XmlConformanceLevel = enum(i32) {
    XmlConformanceLevel_Auto = 0,
    XmlConformanceLevel_Fragment = 1,
    XmlConformanceLevel_Document = 2,
    pub const _XmlConformanceLevel_Last = .XmlConformanceLevel_Document;
};
pub const XmlConformanceLevel_Auto = XmlConformanceLevel.XmlConformanceLevel_Auto;
pub const XmlConformanceLevel_Fragment = XmlConformanceLevel.XmlConformanceLevel_Fragment;
pub const XmlConformanceLevel_Document = XmlConformanceLevel.XmlConformanceLevel_Document;
pub const _XmlConformanceLevel_Last = XmlConformanceLevel.XmlConformanceLevel_Document;

pub const DtdProcessing = enum(i32) {
    DtdProcessing_Prohibit = 0,
    DtdProcessing_Parse = 1,
    pub const _DtdProcessing_Last = .DtdProcessing_Parse;
};
pub const DtdProcessing_Prohibit = DtdProcessing.DtdProcessing_Prohibit;
pub const DtdProcessing_Parse = DtdProcessing.DtdProcessing_Parse;
pub const _DtdProcessing_Last = DtdProcessing.DtdProcessing_Parse;

pub const XmlReadState = enum(i32) {
    Initial = 0,
    Interactive = 1,
    Error = 2,
    EndOfFile = 3,
    Closed = 4,
};
pub const XmlReadState_Initial = XmlReadState.Initial;
pub const XmlReadState_Interactive = XmlReadState.Interactive;
pub const XmlReadState_Error = XmlReadState.Error;
pub const XmlReadState_EndOfFile = XmlReadState.EndOfFile;
pub const XmlReadState_Closed = XmlReadState.Closed;

pub const XmlReaderProperty = enum(i32) {
    XmlReaderProperty_MultiLanguage = 0,
    XmlReaderProperty_ConformanceLevel = 1,
    XmlReaderProperty_RandomAccess = 2,
    XmlReaderProperty_XmlResolver = 3,
    XmlReaderProperty_DtdProcessing = 4,
    XmlReaderProperty_ReadState = 5,
    XmlReaderProperty_MaxElementDepth = 6,
    XmlReaderProperty_MaxEntityExpansion = 7,
    pub const _XmlReaderProperty_Last = .XmlReaderProperty_MaxEntityExpansion;
};
pub const XmlReaderProperty_MultiLanguage = XmlReaderProperty.XmlReaderProperty_MultiLanguage;
pub const XmlReaderProperty_ConformanceLevel = XmlReaderProperty.XmlReaderProperty_ConformanceLevel;
pub const XmlReaderProperty_RandomAccess = XmlReaderProperty.XmlReaderProperty_RandomAccess;
pub const XmlReaderProperty_XmlResolver = XmlReaderProperty.XmlReaderProperty_XmlResolver;
pub const XmlReaderProperty_DtdProcessing = XmlReaderProperty.XmlReaderProperty_DtdProcessing;
pub const XmlReaderProperty_ReadState = XmlReaderProperty.XmlReaderProperty_ReadState;
pub const XmlReaderProperty_MaxElementDepth = XmlReaderProperty.XmlReaderProperty_MaxElementDepth;
pub const XmlReaderProperty_MaxEntityExpansion = XmlReaderProperty.XmlReaderProperty_MaxEntityExpansion;
pub const _XmlReaderProperty_Last = XmlReaderProperty.XmlReaderProperty_MaxEntityExpansion;

pub const XmlError = enum(i32) {
    MX_E_MX = -1072894464,
    MX_E_INPUTEND = -1072894463,
    MX_E_ENCODING = -1072894462,
    MX_E_ENCODINGSWITCH = -1072894461,
    MX_E_ENCODINGSIGNATURE = -1072894460,
    WC_E_WC = -1072894432,
    WC_E_WHITESPACE = -1072894431,
    WC_E_SEMICOLON = -1072894430,
    WC_E_GREATERTHAN = -1072894429,
    WC_E_QUOTE = -1072894428,
    WC_E_EQUAL = -1072894427,
    WC_E_LESSTHAN = -1072894426,
    WC_E_HEXDIGIT = -1072894425,
    WC_E_DIGIT = -1072894424,
    WC_E_LEFTBRACKET = -1072894423,
    WC_E_LEFTPAREN = -1072894422,
    WC_E_XMLCHARACTER = -1072894421,
    WC_E_NAMECHARACTER = -1072894420,
    WC_E_SYNTAX = -1072894419,
    WC_E_CDSECT = -1072894418,
    WC_E_COMMENT = -1072894417,
    WC_E_CONDSECT = -1072894416,
    WC_E_DECLATTLIST = -1072894415,
    WC_E_DECLDOCTYPE = -1072894414,
    WC_E_DECLELEMENT = -1072894413,
    WC_E_DECLENTITY = -1072894412,
    WC_E_DECLNOTATION = -1072894411,
    WC_E_NDATA = -1072894410,
    WC_E_PUBLIC = -1072894409,
    WC_E_SYSTEM = -1072894408,
    WC_E_NAME = -1072894407,
    WC_E_ROOTELEMENT = -1072894406,
    WC_E_ELEMENTMATCH = -1072894405,
    WC_E_UNIQUEATTRIBUTE = -1072894404,
    WC_E_TEXTXMLDECL = -1072894403,
    WC_E_LEADINGXML = -1072894402,
    WC_E_TEXTDECL = -1072894401,
    WC_E_XMLDECL = -1072894400,
    WC_E_ENCNAME = -1072894399,
    WC_E_PUBLICID = -1072894398,
    WC_E_PESINTERNALSUBSET = -1072894397,
    WC_E_PESBETWEENDECLS = -1072894396,
    WC_E_NORECURSION = -1072894395,
    WC_E_ENTITYCONTENT = -1072894394,
    WC_E_UNDECLAREDENTITY = -1072894393,
    WC_E_PARSEDENTITY = -1072894392,
    WC_E_NOEXTERNALENTITYREF = -1072894391,
    WC_E_PI = -1072894390,
    WC_E_SYSTEMID = -1072894389,
    WC_E_QUESTIONMARK = -1072894388,
    WC_E_CDSECTEND = -1072894387,
    WC_E_MOREDATA = -1072894386,
    WC_E_DTDPROHIBITED = -1072894385,
    WC_E_INVALIDXMLSPACE = -1072894384,
    NC_E_NC = -1072894368,
    NC_E_QNAMECHARACTER = -1072894367,
    NC_E_QNAMECOLON = -1072894366,
    NC_E_NAMECOLON = -1072894365,
    NC_E_DECLAREDPREFIX = -1072894364,
    NC_E_UNDECLAREDPREFIX = -1072894363,
    NC_E_EMPTYURI = -1072894362,
    NC_E_XMLPREFIXRESERVED = -1072894361,
    NC_E_XMLNSPREFIXRESERVED = -1072894360,
    NC_E_XMLURIRESERVED = -1072894359,
    NC_E_XMLNSURIRESERVED = -1072894358,
    SC_E_SC = -1072894336,
    SC_E_MAXELEMENTDEPTH = -1072894335,
    SC_E_MAXENTITYEXPANSION = -1072894334,
    WR_E_WR = -1072894208,
    WR_E_NONWHITESPACE = -1072894207,
    WR_E_NSPREFIXDECLARED = -1072894206,
    WR_E_NSPREFIXWITHEMPTYNSURI = -1072894205,
    WR_E_DUPLICATEATTRIBUTE = -1072894204,
    WR_E_XMLNSPREFIXDECLARATION = -1072894203,
    WR_E_XMLPREFIXDECLARATION = -1072894202,
    WR_E_XMLURIDECLARATION = -1072894201,
    WR_E_XMLNSURIDECLARATION = -1072894200,
    WR_E_NAMESPACEUNDECLARED = -1072894199,
    WR_E_INVALIDXMLSPACE = -1072894198,
    WR_E_INVALIDACTION = -1072894197,
    WR_E_INVALIDSURROGATEPAIR = -1072894196,
    XML_E_INVALID_DECIMAL = -1072898019,
    XML_E_INVALID_HEXIDECIMAL = -1072898018,
    XML_E_INVALID_UNICODE = -1072898017,
    XML_E_INVALIDENCODING = -1072897938,
};
pub const MX_E_MX = XmlError.MX_E_MX;
pub const MX_E_INPUTEND = XmlError.MX_E_INPUTEND;
pub const MX_E_ENCODING = XmlError.MX_E_ENCODING;
pub const MX_E_ENCODINGSWITCH = XmlError.MX_E_ENCODINGSWITCH;
pub const MX_E_ENCODINGSIGNATURE = XmlError.MX_E_ENCODINGSIGNATURE;
pub const WC_E_WC = XmlError.WC_E_WC;
pub const WC_E_WHITESPACE = XmlError.WC_E_WHITESPACE;
pub const WC_E_SEMICOLON = XmlError.WC_E_SEMICOLON;
pub const WC_E_GREATERTHAN = XmlError.WC_E_GREATERTHAN;
pub const WC_E_QUOTE = XmlError.WC_E_QUOTE;
pub const WC_E_EQUAL = XmlError.WC_E_EQUAL;
pub const WC_E_LESSTHAN = XmlError.WC_E_LESSTHAN;
pub const WC_E_HEXDIGIT = XmlError.WC_E_HEXDIGIT;
pub const WC_E_DIGIT = XmlError.WC_E_DIGIT;
pub const WC_E_LEFTBRACKET = XmlError.WC_E_LEFTBRACKET;
pub const WC_E_LEFTPAREN = XmlError.WC_E_LEFTPAREN;
pub const WC_E_XMLCHARACTER = XmlError.WC_E_XMLCHARACTER;
pub const WC_E_NAMECHARACTER = XmlError.WC_E_NAMECHARACTER;
pub const WC_E_SYNTAX = XmlError.WC_E_SYNTAX;
pub const WC_E_CDSECT = XmlError.WC_E_CDSECT;
pub const WC_E_COMMENT = XmlError.WC_E_COMMENT;
pub const WC_E_CONDSECT = XmlError.WC_E_CONDSECT;
pub const WC_E_DECLATTLIST = XmlError.WC_E_DECLATTLIST;
pub const WC_E_DECLDOCTYPE = XmlError.WC_E_DECLDOCTYPE;
pub const WC_E_DECLELEMENT = XmlError.WC_E_DECLELEMENT;
pub const WC_E_DECLENTITY = XmlError.WC_E_DECLENTITY;
pub const WC_E_DECLNOTATION = XmlError.WC_E_DECLNOTATION;
pub const WC_E_NDATA = XmlError.WC_E_NDATA;
pub const WC_E_PUBLIC = XmlError.WC_E_PUBLIC;
pub const WC_E_SYSTEM = XmlError.WC_E_SYSTEM;
pub const WC_E_NAME = XmlError.WC_E_NAME;
pub const WC_E_ROOTELEMENT = XmlError.WC_E_ROOTELEMENT;
pub const WC_E_ELEMENTMATCH = XmlError.WC_E_ELEMENTMATCH;
pub const WC_E_UNIQUEATTRIBUTE = XmlError.WC_E_UNIQUEATTRIBUTE;
pub const WC_E_TEXTXMLDECL = XmlError.WC_E_TEXTXMLDECL;
pub const WC_E_LEADINGXML = XmlError.WC_E_LEADINGXML;
pub const WC_E_TEXTDECL = XmlError.WC_E_TEXTDECL;
pub const WC_E_XMLDECL = XmlError.WC_E_XMLDECL;
pub const WC_E_ENCNAME = XmlError.WC_E_ENCNAME;
pub const WC_E_PUBLICID = XmlError.WC_E_PUBLICID;
pub const WC_E_PESINTERNALSUBSET = XmlError.WC_E_PESINTERNALSUBSET;
pub const WC_E_PESBETWEENDECLS = XmlError.WC_E_PESBETWEENDECLS;
pub const WC_E_NORECURSION = XmlError.WC_E_NORECURSION;
pub const WC_E_ENTITYCONTENT = XmlError.WC_E_ENTITYCONTENT;
pub const WC_E_UNDECLAREDENTITY = XmlError.WC_E_UNDECLAREDENTITY;
pub const WC_E_PARSEDENTITY = XmlError.WC_E_PARSEDENTITY;
pub const WC_E_NOEXTERNALENTITYREF = XmlError.WC_E_NOEXTERNALENTITYREF;
pub const WC_E_PI = XmlError.WC_E_PI;
pub const WC_E_SYSTEMID = XmlError.WC_E_SYSTEMID;
pub const WC_E_QUESTIONMARK = XmlError.WC_E_QUESTIONMARK;
pub const WC_E_CDSECTEND = XmlError.WC_E_CDSECTEND;
pub const WC_E_MOREDATA = XmlError.WC_E_MOREDATA;
pub const WC_E_DTDPROHIBITED = XmlError.WC_E_DTDPROHIBITED;
pub const WC_E_INVALIDXMLSPACE = XmlError.WC_E_INVALIDXMLSPACE;
pub const NC_E_NC = XmlError.NC_E_NC;
pub const NC_E_QNAMECHARACTER = XmlError.NC_E_QNAMECHARACTER;
pub const NC_E_QNAMECOLON = XmlError.NC_E_QNAMECOLON;
pub const NC_E_NAMECOLON = XmlError.NC_E_NAMECOLON;
pub const NC_E_DECLAREDPREFIX = XmlError.NC_E_DECLAREDPREFIX;
pub const NC_E_UNDECLAREDPREFIX = XmlError.NC_E_UNDECLAREDPREFIX;
pub const NC_E_EMPTYURI = XmlError.NC_E_EMPTYURI;
pub const NC_E_XMLPREFIXRESERVED = XmlError.NC_E_XMLPREFIXRESERVED;
pub const NC_E_XMLNSPREFIXRESERVED = XmlError.NC_E_XMLNSPREFIXRESERVED;
pub const NC_E_XMLURIRESERVED = XmlError.NC_E_XMLURIRESERVED;
pub const NC_E_XMLNSURIRESERVED = XmlError.NC_E_XMLNSURIRESERVED;
pub const SC_E_SC = XmlError.SC_E_SC;
pub const SC_E_MAXELEMENTDEPTH = XmlError.SC_E_MAXELEMENTDEPTH;
pub const SC_E_MAXENTITYEXPANSION = XmlError.SC_E_MAXENTITYEXPANSION;
pub const WR_E_WR = XmlError.WR_E_WR;
pub const WR_E_NONWHITESPACE = XmlError.WR_E_NONWHITESPACE;
pub const WR_E_NSPREFIXDECLARED = XmlError.WR_E_NSPREFIXDECLARED;
pub const WR_E_NSPREFIXWITHEMPTYNSURI = XmlError.WR_E_NSPREFIXWITHEMPTYNSURI;
pub const WR_E_DUPLICATEATTRIBUTE = XmlError.WR_E_DUPLICATEATTRIBUTE;
pub const WR_E_XMLNSPREFIXDECLARATION = XmlError.WR_E_XMLNSPREFIXDECLARATION;
pub const WR_E_XMLPREFIXDECLARATION = XmlError.WR_E_XMLPREFIXDECLARATION;
pub const WR_E_XMLURIDECLARATION = XmlError.WR_E_XMLURIDECLARATION;
pub const WR_E_XMLNSURIDECLARATION = XmlError.WR_E_XMLNSURIDECLARATION;
pub const WR_E_NAMESPACEUNDECLARED = XmlError.WR_E_NAMESPACEUNDECLARED;
pub const WR_E_INVALIDXMLSPACE = XmlError.WR_E_INVALIDXMLSPACE;
pub const WR_E_INVALIDACTION = XmlError.WR_E_INVALIDACTION;
pub const WR_E_INVALIDSURROGATEPAIR = XmlError.WR_E_INVALIDSURROGATEPAIR;
pub const XML_E_INVALID_DECIMAL = XmlError.XML_E_INVALID_DECIMAL;
pub const XML_E_INVALID_HEXIDECIMAL = XmlError.XML_E_INVALID_HEXIDECIMAL;
pub const XML_E_INVALID_UNICODE = XmlError.XML_E_INVALID_UNICODE;
pub const XML_E_INVALIDENCODING = XmlError.XML_E_INVALIDENCODING;

pub const XmlStandalone = enum(i32) {
    XmlStandalone_Omit = 0,
    XmlStandalone_Yes = 1,
    XmlStandalone_No = 2,
    pub const _XmlStandalone_Last = .XmlStandalone_No;
};
pub const XmlStandalone_Omit = XmlStandalone.XmlStandalone_Omit;
pub const XmlStandalone_Yes = XmlStandalone.XmlStandalone_Yes;
pub const XmlStandalone_No = XmlStandalone.XmlStandalone_No;
pub const _XmlStandalone_Last = XmlStandalone.XmlStandalone_No;

pub const XmlWriterProperty = enum(i32) {
    XmlWriterProperty_MultiLanguage = 0,
    XmlWriterProperty_Indent = 1,
    XmlWriterProperty_ByteOrderMark = 2,
    XmlWriterProperty_OmitXmlDeclaration = 3,
    XmlWriterProperty_ConformanceLevel = 4,
    XmlWriterProperty_CompactEmptyElement = 5,
    pub const _XmlWriterProperty_Last = .XmlWriterProperty_CompactEmptyElement;
};
pub const XmlWriterProperty_MultiLanguage = XmlWriterProperty.XmlWriterProperty_MultiLanguage;
pub const XmlWriterProperty_Indent = XmlWriterProperty.XmlWriterProperty_Indent;
pub const XmlWriterProperty_ByteOrderMark = XmlWriterProperty.XmlWriterProperty_ByteOrderMark;
pub const XmlWriterProperty_OmitXmlDeclaration = XmlWriterProperty.XmlWriterProperty_OmitXmlDeclaration;
pub const XmlWriterProperty_ConformanceLevel = XmlWriterProperty.XmlWriterProperty_ConformanceLevel;
pub const XmlWriterProperty_CompactEmptyElement = XmlWriterProperty.XmlWriterProperty_CompactEmptyElement;
pub const _XmlWriterProperty_Last = XmlWriterProperty.XmlWriterProperty_CompactEmptyElement;

const IID_IXmlReader_Value = Guid.initString("7279fc81-709d-4095-b63d-69fe4b0d9030");
pub const IID_IXmlReader = &IID_IXmlReader_Value;
pub const IXmlReader = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetInput: *const fn(
            self: *const IXmlReader,
            pInput: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn(
            self: *const IXmlReader,
            nProperty: u32,
            ppValue: ?*isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn(
            self: *const IXmlReader,
            nProperty: u32,
            pValue: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Read: *const fn(
            self: *const IXmlReader,
            pNodeType: ?*XmlNodeType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNodeType: *const fn(
            self: *const IXmlReader,
            pNodeType: ?*XmlNodeType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveToFirstAttribute: *const fn(
            self: *const IXmlReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveToNextAttribute: *const fn(
            self: *const IXmlReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveToAttributeByName: *const fn(
            self: *const IXmlReader,
            pwszLocalName: ?[*:0]const u16,
            pwszNamespaceUri: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveToElement: *const fn(
            self: *const IXmlReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetQualifiedName: *const fn(
            self: *const IXmlReader,
            ppwszQualifiedName: ?*?PWSTR,
            pcwchQualifiedName: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNamespaceUri: *const fn(
            self: *const IXmlReader,
            ppwszNamespaceUri: ?*?PWSTR,
            pcwchNamespaceUri: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocalName: *const fn(
            self: *const IXmlReader,
            ppwszLocalName: ?*?PWSTR,
            pcwchLocalName: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrefix: *const fn(
            self: *const IXmlReader,
            ppwszPrefix: ?*?PWSTR,
            pcwchPrefix: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn(
            self: *const IXmlReader,
            ppwszValue: ?*?PWSTR,
            pcwchValue: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadValueChunk: *const fn(
            self: *const IXmlReader,
            pwchBuffer: [*:0]u16,
            cwchChunkSize: u32,
            pcwchRead: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBaseUri: *const fn(
            self: *const IXmlReader,
            ppwszBaseUri: ?*?PWSTR,
            pcwchBaseUri: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsDefault: *const fn(
            self: *const IXmlReader,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        IsEmptyElement: *const fn(
            self: *const IXmlReader,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetLineNumber: *const fn(
            self: *const IXmlReader,
            pnLineNumber: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLinePosition: *const fn(
            self: *const IXmlReader,
            pnLinePosition: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributeCount: *const fn(
            self: *const IXmlReader,
            pnAttributeCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDepth: *const fn(
            self: *const IXmlReader,
            pnDepth: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsEOF: *const fn(
            self: *const IXmlReader,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetInput(self: *const IXmlReader, pInput: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.SetInput(self, pInput);
    }
    pub fn GetProperty(self: *const IXmlReader, nProperty: u32, ppValue: ?*isize) callconv(.Inline) HRESULT {
        return self.vtable.GetProperty(self, nProperty, ppValue);
    }
    pub fn SetProperty(self: *const IXmlReader, nProperty: u32, pValue: isize) callconv(.Inline) HRESULT {
        return self.vtable.SetProperty(self, nProperty, pValue);
    }
    pub fn Read(self: *const IXmlReader, pNodeType: ?*XmlNodeType) callconv(.Inline) HRESULT {
        return self.vtable.Read(self, pNodeType);
    }
    pub fn GetNodeType(self: *const IXmlReader, pNodeType: ?*XmlNodeType) callconv(.Inline) HRESULT {
        return self.vtable.GetNodeType(self, pNodeType);
    }
    pub fn MoveToFirstAttribute(self: *const IXmlReader) callconv(.Inline) HRESULT {
        return self.vtable.MoveToFirstAttribute(self);
    }
    pub fn MoveToNextAttribute(self: *const IXmlReader) callconv(.Inline) HRESULT {
        return self.vtable.MoveToNextAttribute(self);
    }
    pub fn MoveToAttributeByName(self: *const IXmlReader, pwszLocalName: ?[*:0]const u16, pwszNamespaceUri: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.MoveToAttributeByName(self, pwszLocalName, pwszNamespaceUri);
    }
    pub fn MoveToElement(self: *const IXmlReader) callconv(.Inline) HRESULT {
        return self.vtable.MoveToElement(self);
    }
    pub fn GetQualifiedName(self: *const IXmlReader, ppwszQualifiedName: ?*?PWSTR, pcwchQualifiedName: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetQualifiedName(self, ppwszQualifiedName, pcwchQualifiedName);
    }
    pub fn GetNamespaceUri(self: *const IXmlReader, ppwszNamespaceUri: ?*?PWSTR, pcwchNamespaceUri: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetNamespaceUri(self, ppwszNamespaceUri, pcwchNamespaceUri);
    }
    pub fn GetLocalName(self: *const IXmlReader, ppwszLocalName: ?*?PWSTR, pcwchLocalName: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetLocalName(self, ppwszLocalName, pcwchLocalName);
    }
    pub fn GetPrefix(self: *const IXmlReader, ppwszPrefix: ?*?PWSTR, pcwchPrefix: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetPrefix(self, ppwszPrefix, pcwchPrefix);
    }
    pub fn GetValue(self: *const IXmlReader, ppwszValue: ?*?PWSTR, pcwchValue: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetValue(self, ppwszValue, pcwchValue);
    }
    pub fn ReadValueChunk(self: *const IXmlReader, pwchBuffer: [*:0]u16, cwchChunkSize: u32, pcwchRead: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.ReadValueChunk(self, pwchBuffer, cwchChunkSize, pcwchRead);
    }
    pub fn GetBaseUri(self: *const IXmlReader, ppwszBaseUri: ?*?PWSTR, pcwchBaseUri: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetBaseUri(self, ppwszBaseUri, pcwchBaseUri);
    }
    pub fn IsDefault(self: *const IXmlReader) callconv(.Inline) BOOL {
        return self.vtable.IsDefault(self);
    }
    pub fn IsEmptyElement(self: *const IXmlReader) callconv(.Inline) BOOL {
        return self.vtable.IsEmptyElement(self);
    }
    pub fn GetLineNumber(self: *const IXmlReader, pnLineNumber: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetLineNumber(self, pnLineNumber);
    }
    pub fn GetLinePosition(self: *const IXmlReader, pnLinePosition: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetLinePosition(self, pnLinePosition);
    }
    pub fn GetAttributeCount(self: *const IXmlReader, pnAttributeCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetAttributeCount(self, pnAttributeCount);
    }
    pub fn GetDepth(self: *const IXmlReader, pnDepth: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetDepth(self, pnDepth);
    }
    pub fn IsEOF(self: *const IXmlReader) callconv(.Inline) BOOL {
        return self.vtable.IsEOF(self);
    }
};

const IID_IXmlResolver_Value = Guid.initString("7279fc82-709d-4095-b63d-69fe4b0d9030");
pub const IID_IXmlResolver = &IID_IXmlResolver_Value;
pub const IXmlResolver = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ResolveUri: *const fn(
            self: *const IXmlResolver,
            pwszBaseUri: ?[*:0]const u16,
            pwszPublicIdentifier: ?[*:0]const u16,
            pwszSystemIdentifier: ?[*:0]const u16,
            ppResolvedInput: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn ResolveUri(self: *const IXmlResolver, pwszBaseUri: ?[*:0]const u16, pwszPublicIdentifier: ?[*:0]const u16, pwszSystemIdentifier: ?[*:0]const u16, ppResolvedInput: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.ResolveUri(self, pwszBaseUri, pwszPublicIdentifier, pwszSystemIdentifier, ppResolvedInput);
    }
};

const IID_IXmlWriter_Value = Guid.initString("7279fc88-709d-4095-b63d-69fe4b0d9030");
pub const IID_IXmlWriter = &IID_IXmlWriter_Value;
pub const IXmlWriter = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetOutput: *const fn(
            self: *const IXmlWriter,
            pOutput: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn(
            self: *const IXmlWriter,
            nProperty: u32,
            ppValue: ?*isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn(
            self: *const IXmlWriter,
            nProperty: u32,
            pValue: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteAttributes: *const fn(
            self: *const IXmlWriter,
            pReader: ?*IXmlReader,
            fWriteDefaultAttributes: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteAttributeString: *const fn(
            self: *const IXmlWriter,
            pwszPrefix: ?[*:0]const u16,
            pwszLocalName: ?[*:0]const u16,
            pwszNamespaceUri: ?[*:0]const u16,
            pwszValue: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteCData: *const fn(
            self: *const IXmlWriter,
            pwszText: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteCharEntity: *const fn(
            self: *const IXmlWriter,
            wch: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteChars: *const fn(
            self: *const IXmlWriter,
            pwch: ?[*:0]const u16,
            cwch: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteComment: *const fn(
            self: *const IXmlWriter,
            pwszComment: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteDocType: *const fn(
            self: *const IXmlWriter,
            pwszName: ?[*:0]const u16,
            pwszPublicId: ?[*:0]const u16,
            pwszSystemId: ?[*:0]const u16,
            pwszSubset: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteElementString: *const fn(
            self: *const IXmlWriter,
            pwszPrefix: ?[*:0]const u16,
            pwszLocalName: ?[*:0]const u16,
            pwszNamespaceUri: ?[*:0]const u16,
            pwszValue: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteEndDocument: *const fn(
            self: *const IXmlWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteEndElement: *const fn(
            self: *const IXmlWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteEntityRef: *const fn(
            self: *const IXmlWriter,
            pwszName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteFullEndElement: *const fn(
            self: *const IXmlWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteName: *const fn(
            self: *const IXmlWriter,
            pwszName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteNmToken: *const fn(
            self: *const IXmlWriter,
            pwszNmToken: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteNode: *const fn(
            self: *const IXmlWriter,
            pReader: ?*IXmlReader,
            fWriteDefaultAttributes: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteNodeShallow: *const fn(
            self: *const IXmlWriter,
            pReader: ?*IXmlReader,
            fWriteDefaultAttributes: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteProcessingInstruction: *const fn(
            self: *const IXmlWriter,
            pwszName: ?[*:0]const u16,
            pwszText: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteQualifiedName: *const fn(
            self: *const IXmlWriter,
            pwszLocalName: ?[*:0]const u16,
            pwszNamespaceUri: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteRaw: *const fn(
            self: *const IXmlWriter,
            pwszData: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteRawChars: *const fn(
            self: *const IXmlWriter,
            pwch: ?[*:0]const u16,
            cwch: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteStartDocument: *const fn(
            self: *const IXmlWriter,
            standalone: XmlStandalone,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteStartElement: *const fn(
            self: *const IXmlWriter,
            pwszPrefix: ?[*:0]const u16,
            pwszLocalName: ?[*:0]const u16,
            pwszNamespaceUri: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteString: *const fn(
            self: *const IXmlWriter,
            pwszText: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteSurrogateCharEntity: *const fn(
            self: *const IXmlWriter,
            wchLow: u16,
            wchHigh: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteWhitespace: *const fn(
            self: *const IXmlWriter,
            pwszWhitespace: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Flush: *const fn(
            self: *const IXmlWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetOutput(self: *const IXmlWriter, pOutput: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.SetOutput(self, pOutput);
    }
    pub fn GetProperty(self: *const IXmlWriter, nProperty: u32, ppValue: ?*isize) callconv(.Inline) HRESULT {
        return self.vtable.GetProperty(self, nProperty, ppValue);
    }
    pub fn SetProperty(self: *const IXmlWriter, nProperty: u32, pValue: isize) callconv(.Inline) HRESULT {
        return self.vtable.SetProperty(self, nProperty, pValue);
    }
    pub fn WriteAttributes(self: *const IXmlWriter, pReader: ?*IXmlReader, fWriteDefaultAttributes: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.WriteAttributes(self, pReader, fWriteDefaultAttributes);
    }
    pub fn WriteAttributeString(self: *const IXmlWriter, pwszPrefix: ?[*:0]const u16, pwszLocalName: ?[*:0]const u16, pwszNamespaceUri: ?[*:0]const u16, pwszValue: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteAttributeString(self, pwszPrefix, pwszLocalName, pwszNamespaceUri, pwszValue);
    }
    pub fn WriteCData(self: *const IXmlWriter, pwszText: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteCData(self, pwszText);
    }
    pub fn WriteCharEntity(self: *const IXmlWriter, wch: u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteCharEntity(self, wch);
    }
    pub fn WriteChars(self: *const IXmlWriter, pwch: ?[*:0]const u16, cwch: u32) callconv(.Inline) HRESULT {
        return self.vtable.WriteChars(self, pwch, cwch);
    }
    pub fn WriteComment(self: *const IXmlWriter, pwszComment: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteComment(self, pwszComment);
    }
    pub fn WriteDocType(self: *const IXmlWriter, pwszName: ?[*:0]const u16, pwszPublicId: ?[*:0]const u16, pwszSystemId: ?[*:0]const u16, pwszSubset: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteDocType(self, pwszName, pwszPublicId, pwszSystemId, pwszSubset);
    }
    pub fn WriteElementString(self: *const IXmlWriter, pwszPrefix: ?[*:0]const u16, pwszLocalName: ?[*:0]const u16, pwszNamespaceUri: ?[*:0]const u16, pwszValue: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteElementString(self, pwszPrefix, pwszLocalName, pwszNamespaceUri, pwszValue);
    }
    pub fn WriteEndDocument(self: *const IXmlWriter) callconv(.Inline) HRESULT {
        return self.vtable.WriteEndDocument(self);
    }
    pub fn WriteEndElement(self: *const IXmlWriter) callconv(.Inline) HRESULT {
        return self.vtable.WriteEndElement(self);
    }
    pub fn WriteEntityRef(self: *const IXmlWriter, pwszName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteEntityRef(self, pwszName);
    }
    pub fn WriteFullEndElement(self: *const IXmlWriter) callconv(.Inline) HRESULT {
        return self.vtable.WriteFullEndElement(self);
    }
    pub fn WriteName(self: *const IXmlWriter, pwszName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteName(self, pwszName);
    }
    pub fn WriteNmToken(self: *const IXmlWriter, pwszNmToken: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteNmToken(self, pwszNmToken);
    }
    pub fn WriteNode(self: *const IXmlWriter, pReader: ?*IXmlReader, fWriteDefaultAttributes: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.WriteNode(self, pReader, fWriteDefaultAttributes);
    }
    pub fn WriteNodeShallow(self: *const IXmlWriter, pReader: ?*IXmlReader, fWriteDefaultAttributes: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.WriteNodeShallow(self, pReader, fWriteDefaultAttributes);
    }
    pub fn WriteProcessingInstruction(self: *const IXmlWriter, pwszName: ?[*:0]const u16, pwszText: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteProcessingInstruction(self, pwszName, pwszText);
    }
    pub fn WriteQualifiedName(self: *const IXmlWriter, pwszLocalName: ?[*:0]const u16, pwszNamespaceUri: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteQualifiedName(self, pwszLocalName, pwszNamespaceUri);
    }
    pub fn WriteRaw(self: *const IXmlWriter, pwszData: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteRaw(self, pwszData);
    }
    pub fn WriteRawChars(self: *const IXmlWriter, pwch: ?[*:0]const u16, cwch: u32) callconv(.Inline) HRESULT {
        return self.vtable.WriteRawChars(self, pwch, cwch);
    }
    pub fn WriteStartDocument(self: *const IXmlWriter, standalone: XmlStandalone) callconv(.Inline) HRESULT {
        return self.vtable.WriteStartDocument(self, standalone);
    }
    pub fn WriteStartElement(self: *const IXmlWriter, pwszPrefix: ?[*:0]const u16, pwszLocalName: ?[*:0]const u16, pwszNamespaceUri: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteStartElement(self, pwszPrefix, pwszLocalName, pwszNamespaceUri);
    }
    pub fn WriteString(self: *const IXmlWriter, pwszText: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteString(self, pwszText);
    }
    pub fn WriteSurrogateCharEntity(self: *const IXmlWriter, wchLow: u16, wchHigh: u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteSurrogateCharEntity(self, wchLow, wchHigh);
    }
    pub fn WriteWhitespace(self: *const IXmlWriter, pwszWhitespace: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteWhitespace(self, pwszWhitespace);
    }
    pub fn Flush(self: *const IXmlWriter) callconv(.Inline) HRESULT {
        return self.vtable.Flush(self);
    }
};

const IID_IXmlWriterLite_Value = Guid.initString("862494c6-1310-4aad-b3cd-2dbeebf670d3");
pub const IID_IXmlWriterLite = &IID_IXmlWriterLite_Value;
pub const IXmlWriterLite = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetOutput: *const fn(
            self: *const IXmlWriterLite,
            pOutput: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn(
            self: *const IXmlWriterLite,
            nProperty: u32,
            ppValue: ?*isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn(
            self: *const IXmlWriterLite,
            nProperty: u32,
            pValue: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteAttributes: *const fn(
            self: *const IXmlWriterLite,
            pReader: ?*IXmlReader,
            fWriteDefaultAttributes: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteAttributeString: *const fn(
            self: *const IXmlWriterLite,
            pwszQName: [*:0]const u16,
            cwszQName: u32,
            pwszValue: ?[*:0]const u16,
            cwszValue: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteCData: *const fn(
            self: *const IXmlWriterLite,
            pwszText: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteCharEntity: *const fn(
            self: *const IXmlWriterLite,
            wch: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteChars: *const fn(
            self: *const IXmlWriterLite,
            pwch: ?[*:0]const u16,
            cwch: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteComment: *const fn(
            self: *const IXmlWriterLite,
            pwszComment: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteDocType: *const fn(
            self: *const IXmlWriterLite,
            pwszName: ?[*:0]const u16,
            pwszPublicId: ?[*:0]const u16,
            pwszSystemId: ?[*:0]const u16,
            pwszSubset: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteElementString: *const fn(
            self: *const IXmlWriterLite,
            pwszQName: [*:0]const u16,
            cwszQName: u32,
            pwszValue: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteEndDocument: *const fn(
            self: *const IXmlWriterLite,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteEndElement: *const fn(
            self: *const IXmlWriterLite,
            pwszQName: [*:0]const u16,
            cwszQName: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteEntityRef: *const fn(
            self: *const IXmlWriterLite,
            pwszName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteFullEndElement: *const fn(
            self: *const IXmlWriterLite,
            pwszQName: [*:0]const u16,
            cwszQName: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteName: *const fn(
            self: *const IXmlWriterLite,
            pwszName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteNmToken: *const fn(
            self: *const IXmlWriterLite,
            pwszNmToken: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteNode: *const fn(
            self: *const IXmlWriterLite,
            pReader: ?*IXmlReader,
            fWriteDefaultAttributes: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteNodeShallow: *const fn(
            self: *const IXmlWriterLite,
            pReader: ?*IXmlReader,
            fWriteDefaultAttributes: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteProcessingInstruction: *const fn(
            self: *const IXmlWriterLite,
            pwszName: ?[*:0]const u16,
            pwszText: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteRaw: *const fn(
            self: *const IXmlWriterLite,
            pwszData: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteRawChars: *const fn(
            self: *const IXmlWriterLite,
            pwch: ?[*:0]const u16,
            cwch: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteStartDocument: *const fn(
            self: *const IXmlWriterLite,
            standalone: XmlStandalone,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteStartElement: *const fn(
            self: *const IXmlWriterLite,
            pwszQName: [*:0]const u16,
            cwszQName: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteString: *const fn(
            self: *const IXmlWriterLite,
            pwszText: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteSurrogateCharEntity: *const fn(
            self: *const IXmlWriterLite,
            wchLow: u16,
            wchHigh: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteWhitespace: *const fn(
            self: *const IXmlWriterLite,
            pwszWhitespace: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Flush: *const fn(
            self: *const IXmlWriterLite,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetOutput(self: *const IXmlWriterLite, pOutput: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.SetOutput(self, pOutput);
    }
    pub fn GetProperty(self: *const IXmlWriterLite, nProperty: u32, ppValue: ?*isize) callconv(.Inline) HRESULT {
        return self.vtable.GetProperty(self, nProperty, ppValue);
    }
    pub fn SetProperty(self: *const IXmlWriterLite, nProperty: u32, pValue: isize) callconv(.Inline) HRESULT {
        return self.vtable.SetProperty(self, nProperty, pValue);
    }
    pub fn WriteAttributes(self: *const IXmlWriterLite, pReader: ?*IXmlReader, fWriteDefaultAttributes: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.WriteAttributes(self, pReader, fWriteDefaultAttributes);
    }
    pub fn WriteAttributeString(self: *const IXmlWriterLite, pwszQName: [*:0]const u16, cwszQName: u32, pwszValue: ?[*:0]const u16, cwszValue: u32) callconv(.Inline) HRESULT {
        return self.vtable.WriteAttributeString(self, pwszQName, cwszQName, pwszValue, cwszValue);
    }
    pub fn WriteCData(self: *const IXmlWriterLite, pwszText: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteCData(self, pwszText);
    }
    pub fn WriteCharEntity(self: *const IXmlWriterLite, wch: u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteCharEntity(self, wch);
    }
    pub fn WriteChars(self: *const IXmlWriterLite, pwch: ?[*:0]const u16, cwch: u32) callconv(.Inline) HRESULT {
        return self.vtable.WriteChars(self, pwch, cwch);
    }
    pub fn WriteComment(self: *const IXmlWriterLite, pwszComment: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteComment(self, pwszComment);
    }
    pub fn WriteDocType(self: *const IXmlWriterLite, pwszName: ?[*:0]const u16, pwszPublicId: ?[*:0]const u16, pwszSystemId: ?[*:0]const u16, pwszSubset: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteDocType(self, pwszName, pwszPublicId, pwszSystemId, pwszSubset);
    }
    pub fn WriteElementString(self: *const IXmlWriterLite, pwszQName: [*:0]const u16, cwszQName: u32, pwszValue: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteElementString(self, pwszQName, cwszQName, pwszValue);
    }
    pub fn WriteEndDocument(self: *const IXmlWriterLite) callconv(.Inline) HRESULT {
        return self.vtable.WriteEndDocument(self);
    }
    pub fn WriteEndElement(self: *const IXmlWriterLite, pwszQName: [*:0]const u16, cwszQName: u32) callconv(.Inline) HRESULT {
        return self.vtable.WriteEndElement(self, pwszQName, cwszQName);
    }
    pub fn WriteEntityRef(self: *const IXmlWriterLite, pwszName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteEntityRef(self, pwszName);
    }
    pub fn WriteFullEndElement(self: *const IXmlWriterLite, pwszQName: [*:0]const u16, cwszQName: u32) callconv(.Inline) HRESULT {
        return self.vtable.WriteFullEndElement(self, pwszQName, cwszQName);
    }
    pub fn WriteName(self: *const IXmlWriterLite, pwszName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteName(self, pwszName);
    }
    pub fn WriteNmToken(self: *const IXmlWriterLite, pwszNmToken: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteNmToken(self, pwszNmToken);
    }
    pub fn WriteNode(self: *const IXmlWriterLite, pReader: ?*IXmlReader, fWriteDefaultAttributes: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.WriteNode(self, pReader, fWriteDefaultAttributes);
    }
    pub fn WriteNodeShallow(self: *const IXmlWriterLite, pReader: ?*IXmlReader, fWriteDefaultAttributes: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.WriteNodeShallow(self, pReader, fWriteDefaultAttributes);
    }
    pub fn WriteProcessingInstruction(self: *const IXmlWriterLite, pwszName: ?[*:0]const u16, pwszText: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteProcessingInstruction(self, pwszName, pwszText);
    }
    pub fn WriteRaw(self: *const IXmlWriterLite, pwszData: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteRaw(self, pwszData);
    }
    pub fn WriteRawChars(self: *const IXmlWriterLite, pwch: ?[*:0]const u16, cwch: u32) callconv(.Inline) HRESULT {
        return self.vtable.WriteRawChars(self, pwch, cwch);
    }
    pub fn WriteStartDocument(self: *const IXmlWriterLite, standalone: XmlStandalone) callconv(.Inline) HRESULT {
        return self.vtable.WriteStartDocument(self, standalone);
    }
    pub fn WriteStartElement(self: *const IXmlWriterLite, pwszQName: [*:0]const u16, cwszQName: u32) callconv(.Inline) HRESULT {
        return self.vtable.WriteStartElement(self, pwszQName, cwszQName);
    }
    pub fn WriteString(self: *const IXmlWriterLite, pwszText: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteString(self, pwszText);
    }
    pub fn WriteSurrogateCharEntity(self: *const IXmlWriterLite, wchLow: u16, wchHigh: u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteSurrogateCharEntity(self, wchLow, wchHigh);
    }
    pub fn WriteWhitespace(self: *const IXmlWriterLite, pwszWhitespace: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.WriteWhitespace(self, pwszWhitespace);
    }
    pub fn Flush(self: *const IXmlWriterLite) callconv(.Inline) HRESULT {
        return self.vtable.Flush(self);
    }
};


//--------------------------------------------------------------------------------
// Section: Functions (6)
//--------------------------------------------------------------------------------
pub extern "xmllite" fn CreateXmlReader(
    riid: ?*const Guid,
    ppvObject: ?*?*anyopaque,
    pMalloc: ?*IMalloc,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "xmllite" fn CreateXmlReaderInputWithEncodingCodePage(
    pInputStream: ?*IUnknown,
    pMalloc: ?*IMalloc,
    nEncodingCodePage: u32,
    fEncodingHint: BOOL,
    pwszBaseUri: ?[*:0]const u16,
    ppInput: ?*?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "xmllite" fn CreateXmlReaderInputWithEncodingName(
    pInputStream: ?*IUnknown,
    pMalloc: ?*IMalloc,
    pwszEncodingName: ?[*:0]const u16,
    fEncodingHint: BOOL,
    pwszBaseUri: ?[*:0]const u16,
    ppInput: ?*?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "xmllite" fn CreateXmlWriter(
    riid: ?*const Guid,
    ppvObject: ?*?*anyopaque,
    pMalloc: ?*IMalloc,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "xmllite" fn CreateXmlWriterOutputWithEncodingCodePage(
    pOutputStream: ?*IUnknown,
    pMalloc: ?*IMalloc,
    nEncodingCodePage: u32,
    ppOutput: ?*?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "xmllite" fn CreateXmlWriterOutputWithEncodingName(
    pOutputStream: ?*IUnknown,
    pMalloc: ?*IMalloc,
    pwszEncodingName: ?[*:0]const u16,
    ppOutput: ?*?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (6)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const BOOL = @import("../../foundation.zig").BOOL;
const HRESULT = @import("../../foundation.zig").HRESULT;
const IMalloc = @import("../../system/com.zig").IMalloc;
const IUnknown = @import("../../system/com.zig").IUnknown;
const PWSTR = @import("../../foundation.zig").PWSTR;

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
