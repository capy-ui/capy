//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (4)
//--------------------------------------------------------------------------------
pub const NETCON_MAX_NAME_LEN = @as(u32, 256);
pub const S_OBJECT_NO_LONGER_VALID = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2));
pub const NETISO_GEID_FOR_WDAG = @as(u32, 1);
pub const NETISO_GEID_FOR_NEUTRAL_AWARE = @as(u32, 2);

//--------------------------------------------------------------------------------
// Section: Types (97)
//--------------------------------------------------------------------------------
const CLSID_UPnPNAT_Value = Guid.initString("ae1e00aa-3fd5-403c-8a27-2bbdc30cd0e1");
pub const CLSID_UPnPNAT = &CLSID_UPnPNAT_Value;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IUPnPNAT_Value = Guid.initString("b171c812-cc76-485a-94d8-b6b3a2794e99");
pub const IID_IUPnPNAT = &IID_IUPnPNAT_Value;
pub const IUPnPNAT = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StaticPortMappingCollection: *const fn(
            self: *const IUPnPNAT,
            ppSPMs: ?*?*IStaticPortMappingCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DynamicPortMappingCollection: *const fn(
            self: *const IUPnPNAT,
            ppDPMs: ?*?*IDynamicPortMappingCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NATEventManager: *const fn(
            self: *const IUPnPNAT,
            ppNEM: ?*?*INATEventManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_StaticPortMappingCollection(self: *const IUPnPNAT, ppSPMs: ?*?*IStaticPortMappingCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_StaticPortMappingCollection(self, ppSPMs);
    }
    pub fn get_DynamicPortMappingCollection(self: *const IUPnPNAT, ppDPMs: ?*?*IDynamicPortMappingCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_DynamicPortMappingCollection(self, ppDPMs);
    }
    pub fn get_NATEventManager(self: *const IUPnPNAT, ppNEM: ?*?*INATEventManager) callconv(.Inline) HRESULT {
        return self.vtable.get_NATEventManager(self, ppNEM);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INATEventManager_Value = Guid.initString("624bd588-9060-4109-b0b0-1adbbcac32df");
pub const IID_INATEventManager = &IID_INATEventManager_Value;
pub const INATEventManager = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ExternalIPAddressCallback: *const fn(
            self: *const INATEventManager,
            pUnk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NumberOfEntriesCallback: *const fn(
            self: *const INATEventManager,
            pUnk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_ExternalIPAddressCallback(self: *const INATEventManager, pUnk: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.put_ExternalIPAddressCallback(self, pUnk);
    }
    pub fn put_NumberOfEntriesCallback(self: *const INATEventManager, pUnk: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.put_NumberOfEntriesCallback(self, pUnk);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INATExternalIPAddressCallback_Value = Guid.initString("9c416740-a34e-446f-ba06-abd04c3149ae");
pub const IID_INATExternalIPAddressCallback = &IID_INATExternalIPAddressCallback_Value;
pub const INATExternalIPAddressCallback = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        NewExternalIPAddress: *const fn(
            self: *const INATExternalIPAddressCallback,
            bstrNewExternalIPAddress: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn NewExternalIPAddress(self: *const INATExternalIPAddressCallback, bstrNewExternalIPAddress: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.NewExternalIPAddress(self, bstrNewExternalIPAddress);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INATNumberOfEntriesCallback_Value = Guid.initString("c83a0a74-91ee-41b6-b67a-67e0f00bbd78");
pub const IID_INATNumberOfEntriesCallback = &IID_INATNumberOfEntriesCallback_Value;
pub const INATNumberOfEntriesCallback = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        NewNumberOfEntries: *const fn(
            self: *const INATNumberOfEntriesCallback,
            lNewNumberOfEntries: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn NewNumberOfEntries(self: *const INATNumberOfEntriesCallback, lNewNumberOfEntries: i32) callconv(.Inline) HRESULT {
        return self.vtable.NewNumberOfEntries(self, lNewNumberOfEntries);
    }
};

const IID_IDynamicPortMappingCollection_Value = Guid.initString("b60de00f-156e-4e8d-9ec1-3a2342c10899");
pub const IID_IDynamicPortMappingCollection = &IID_IDynamicPortMappingCollection_Value;
pub const IDynamicPortMappingCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const IDynamicPortMappingCollection,
            pVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: *const fn(
            self: *const IDynamicPortMappingCollection,
            bstrRemoteHost: ?BSTR,
            lExternalPort: i32,
            bstrProtocol: ?BSTR,
            ppDPM: ?*?*IDynamicPortMapping,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IDynamicPortMappingCollection,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const IDynamicPortMappingCollection,
            bstrRemoteHost: ?BSTR,
            lExternalPort: i32,
            bstrProtocol: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const IDynamicPortMappingCollection,
            bstrRemoteHost: ?BSTR,
            lExternalPort: i32,
            bstrProtocol: ?BSTR,
            lInternalPort: i32,
            bstrInternalClient: ?BSTR,
            bEnabled: i16,
            bstrDescription: ?BSTR,
            lLeaseDuration: i32,
            ppDPM: ?*?*IDynamicPortMapping,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get__NewEnum(self: *const IDynamicPortMappingCollection, pVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, pVal);
    }
    pub fn get_Item(self: *const IDynamicPortMappingCollection, bstrRemoteHost: ?BSTR, lExternalPort: i32, bstrProtocol: ?BSTR, ppDPM: ?*?*IDynamicPortMapping) callconv(.Inline) HRESULT {
        return self.vtable.get_Item(self, bstrRemoteHost, lExternalPort, bstrProtocol, ppDPM);
    }
    pub fn get_Count(self: *const IDynamicPortMappingCollection, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
    pub fn Remove(self: *const IDynamicPortMappingCollection, bstrRemoteHost: ?BSTR, lExternalPort: i32, bstrProtocol: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, bstrRemoteHost, lExternalPort, bstrProtocol);
    }
    pub fn Add(self: *const IDynamicPortMappingCollection, bstrRemoteHost: ?BSTR, lExternalPort: i32, bstrProtocol: ?BSTR, lInternalPort: i32, bstrInternalClient: ?BSTR, bEnabled: i16, bstrDescription: ?BSTR, lLeaseDuration: i32, ppDPM: ?*?*IDynamicPortMapping) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, bstrRemoteHost, lExternalPort, bstrProtocol, lInternalPort, bstrInternalClient, bEnabled, bstrDescription, lLeaseDuration, ppDPM);
    }
};

const IID_IDynamicPortMapping_Value = Guid.initString("4fc80282-23b6-4378-9a27-cd8f17c9400c");
pub const IID_IDynamicPortMapping = &IID_IDynamicPortMapping_Value;
pub const IDynamicPortMapping = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExternalIPAddress: *const fn(
            self: *const IDynamicPortMapping,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteHost: *const fn(
            self: *const IDynamicPortMapping,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExternalPort: *const fn(
            self: *const IDynamicPortMapping,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Protocol: *const fn(
            self: *const IDynamicPortMapping,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InternalPort: *const fn(
            self: *const IDynamicPortMapping,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InternalClient: *const fn(
            self: *const IDynamicPortMapping,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn(
            self: *const IDynamicPortMapping,
            pVal: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn(
            self: *const IDynamicPortMapping,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LeaseDuration: *const fn(
            self: *const IDynamicPortMapping,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RenewLease: *const fn(
            self: *const IDynamicPortMapping,
            lLeaseDurationDesired: i32,
            pLeaseDurationReturned: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EditInternalClient: *const fn(
            self: *const IDynamicPortMapping,
            bstrInternalClient: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enable: *const fn(
            self: *const IDynamicPortMapping,
            vb: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EditDescription: *const fn(
            self: *const IDynamicPortMapping,
            bstrDescription: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EditInternalPort: *const fn(
            self: *const IDynamicPortMapping,
            lInternalPort: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ExternalIPAddress(self: *const IDynamicPortMapping, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ExternalIPAddress(self, pVal);
    }
    pub fn get_RemoteHost(self: *const IDynamicPortMapping, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RemoteHost(self, pVal);
    }
    pub fn get_ExternalPort(self: *const IDynamicPortMapping, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ExternalPort(self, pVal);
    }
    pub fn get_Protocol(self: *const IDynamicPortMapping, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Protocol(self, pVal);
    }
    pub fn get_InternalPort(self: *const IDynamicPortMapping, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_InternalPort(self, pVal);
    }
    pub fn get_InternalClient(self: *const IDynamicPortMapping, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_InternalClient(self, pVal);
    }
    pub fn get_Enabled(self: *const IDynamicPortMapping, pVal: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Enabled(self, pVal);
    }
    pub fn get_Description(self: *const IDynamicPortMapping, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Description(self, pVal);
    }
    pub fn get_LeaseDuration(self: *const IDynamicPortMapping, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_LeaseDuration(self, pVal);
    }
    pub fn RenewLease(self: *const IDynamicPortMapping, lLeaseDurationDesired: i32, pLeaseDurationReturned: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.RenewLease(self, lLeaseDurationDesired, pLeaseDurationReturned);
    }
    pub fn EditInternalClient(self: *const IDynamicPortMapping, bstrInternalClient: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.EditInternalClient(self, bstrInternalClient);
    }
    pub fn Enable(self: *const IDynamicPortMapping, vb: i16) callconv(.Inline) HRESULT {
        return self.vtable.Enable(self, vb);
    }
    pub fn EditDescription(self: *const IDynamicPortMapping, bstrDescription: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.EditDescription(self, bstrDescription);
    }
    pub fn EditInternalPort(self: *const IDynamicPortMapping, lInternalPort: i32) callconv(.Inline) HRESULT {
        return self.vtable.EditInternalPort(self, lInternalPort);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IStaticPortMappingCollection_Value = Guid.initString("cd1f3e77-66d6-4664-82c7-36dbb641d0f1");
pub const IID_IStaticPortMappingCollection = &IID_IStaticPortMappingCollection_Value;
pub const IStaticPortMappingCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const IStaticPortMappingCollection,
            pVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: *const fn(
            self: *const IStaticPortMappingCollection,
            lExternalPort: i32,
            bstrProtocol: ?BSTR,
            ppSPM: ?*?*IStaticPortMapping,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IStaticPortMappingCollection,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const IStaticPortMappingCollection,
            lExternalPort: i32,
            bstrProtocol: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const IStaticPortMappingCollection,
            lExternalPort: i32,
            bstrProtocol: ?BSTR,
            lInternalPort: i32,
            bstrInternalClient: ?BSTR,
            bEnabled: i16,
            bstrDescription: ?BSTR,
            ppSPM: ?*?*IStaticPortMapping,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get__NewEnum(self: *const IStaticPortMappingCollection, pVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, pVal);
    }
    pub fn get_Item(self: *const IStaticPortMappingCollection, lExternalPort: i32, bstrProtocol: ?BSTR, ppSPM: ?*?*IStaticPortMapping) callconv(.Inline) HRESULT {
        return self.vtable.get_Item(self, lExternalPort, bstrProtocol, ppSPM);
    }
    pub fn get_Count(self: *const IStaticPortMappingCollection, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
    pub fn Remove(self: *const IStaticPortMappingCollection, lExternalPort: i32, bstrProtocol: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, lExternalPort, bstrProtocol);
    }
    pub fn Add(self: *const IStaticPortMappingCollection, lExternalPort: i32, bstrProtocol: ?BSTR, lInternalPort: i32, bstrInternalClient: ?BSTR, bEnabled: i16, bstrDescription: ?BSTR, ppSPM: ?*?*IStaticPortMapping) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, lExternalPort, bstrProtocol, lInternalPort, bstrInternalClient, bEnabled, bstrDescription, ppSPM);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IStaticPortMapping_Value = Guid.initString("6f10711f-729b-41e5-93b8-f21d0f818df1");
pub const IID_IStaticPortMapping = &IID_IStaticPortMapping_Value;
pub const IStaticPortMapping = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExternalIPAddress: *const fn(
            self: *const IStaticPortMapping,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExternalPort: *const fn(
            self: *const IStaticPortMapping,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InternalPort: *const fn(
            self: *const IStaticPortMapping,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Protocol: *const fn(
            self: *const IStaticPortMapping,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InternalClient: *const fn(
            self: *const IStaticPortMapping,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn(
            self: *const IStaticPortMapping,
            pVal: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn(
            self: *const IStaticPortMapping,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EditInternalClient: *const fn(
            self: *const IStaticPortMapping,
            bstrInternalClient: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enable: *const fn(
            self: *const IStaticPortMapping,
            vb: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EditDescription: *const fn(
            self: *const IStaticPortMapping,
            bstrDescription: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EditInternalPort: *const fn(
            self: *const IStaticPortMapping,
            lInternalPort: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ExternalIPAddress(self: *const IStaticPortMapping, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ExternalIPAddress(self, pVal);
    }
    pub fn get_ExternalPort(self: *const IStaticPortMapping, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ExternalPort(self, pVal);
    }
    pub fn get_InternalPort(self: *const IStaticPortMapping, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_InternalPort(self, pVal);
    }
    pub fn get_Protocol(self: *const IStaticPortMapping, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Protocol(self, pVal);
    }
    pub fn get_InternalClient(self: *const IStaticPortMapping, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_InternalClient(self, pVal);
    }
    pub fn get_Enabled(self: *const IStaticPortMapping, pVal: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Enabled(self, pVal);
    }
    pub fn get_Description(self: *const IStaticPortMapping, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Description(self, pVal);
    }
    pub fn EditInternalClient(self: *const IStaticPortMapping, bstrInternalClient: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.EditInternalClient(self, bstrInternalClient);
    }
    pub fn Enable(self: *const IStaticPortMapping, vb: i16) callconv(.Inline) HRESULT {
        return self.vtable.Enable(self, vb);
    }
    pub fn EditDescription(self: *const IStaticPortMapping, bstrDescription: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.EditDescription(self, bstrDescription);
    }
    pub fn EditInternalPort(self: *const IStaticPortMapping, lInternalPort: i32) callconv(.Inline) HRESULT {
        return self.vtable.EditInternalPort(self, lInternalPort);
    }
};

const CLSID_NetSharingManager_Value = Guid.initString("5c63c1ad-3956-4ff8-8486-40034758315b");
pub const CLSID_NetSharingManager = &CLSID_NetSharingManager_Value;

const IID_IEnumNetConnection_Value = Guid.initString("c08956a0-1cd3-11d1-b1c5-00805fc1270e");
pub const IID_IEnumNetConnection = &IID_IEnumNetConnection_Value;
pub const IEnumNetConnection = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumNetConnection,
            celt: u32,
            rgelt: [*]?*INetConnection,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumNetConnection,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumNetConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumNetConnection,
            ppenum: ?*?*IEnumNetConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumNetConnection, celt: u32, rgelt: [*]?*INetConnection, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, celt, rgelt, pceltFetched);
    }
    pub fn Skip(self: *const IEnumNetConnection, celt: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumNetConnection) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumNetConnection, ppenum: ?*?*IEnumNetConnection) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppenum);
    }
};

pub const NETCON_CHARACTERISTIC_FLAGS = enum(i32) {
    NONE = 0,
    ALL_USERS = 1,
    ALLOW_DUPLICATION = 2,
    ALLOW_REMOVAL = 4,
    ALLOW_RENAME = 8,
    INCOMING_ONLY = 32,
    OUTGOING_ONLY = 64,
    BRANDED = 128,
    SHARED = 256,
    BRIDGED = 512,
    FIREWALLED = 1024,
    DEFAULT = 2048,
    HOMENET_CAPABLE = 4096,
    SHARED_PRIVATE = 8192,
    QUARANTINED = 16384,
    RESERVED = 32768,
    HOSTED_NETWORK = 65536,
    VIRTUAL_STATION = 131072,
    WIFI_DIRECT = 262144,
    BLUETOOTH_MASK = 983040,
    LAN_MASK = 15728640,
};
pub const NCCF_NONE = NETCON_CHARACTERISTIC_FLAGS.NONE;
pub const NCCF_ALL_USERS = NETCON_CHARACTERISTIC_FLAGS.ALL_USERS;
pub const NCCF_ALLOW_DUPLICATION = NETCON_CHARACTERISTIC_FLAGS.ALLOW_DUPLICATION;
pub const NCCF_ALLOW_REMOVAL = NETCON_CHARACTERISTIC_FLAGS.ALLOW_REMOVAL;
pub const NCCF_ALLOW_RENAME = NETCON_CHARACTERISTIC_FLAGS.ALLOW_RENAME;
pub const NCCF_INCOMING_ONLY = NETCON_CHARACTERISTIC_FLAGS.INCOMING_ONLY;
pub const NCCF_OUTGOING_ONLY = NETCON_CHARACTERISTIC_FLAGS.OUTGOING_ONLY;
pub const NCCF_BRANDED = NETCON_CHARACTERISTIC_FLAGS.BRANDED;
pub const NCCF_SHARED = NETCON_CHARACTERISTIC_FLAGS.SHARED;
pub const NCCF_BRIDGED = NETCON_CHARACTERISTIC_FLAGS.BRIDGED;
pub const NCCF_FIREWALLED = NETCON_CHARACTERISTIC_FLAGS.FIREWALLED;
pub const NCCF_DEFAULT = NETCON_CHARACTERISTIC_FLAGS.DEFAULT;
pub const NCCF_HOMENET_CAPABLE = NETCON_CHARACTERISTIC_FLAGS.HOMENET_CAPABLE;
pub const NCCF_SHARED_PRIVATE = NETCON_CHARACTERISTIC_FLAGS.SHARED_PRIVATE;
pub const NCCF_QUARANTINED = NETCON_CHARACTERISTIC_FLAGS.QUARANTINED;
pub const NCCF_RESERVED = NETCON_CHARACTERISTIC_FLAGS.RESERVED;
pub const NCCF_HOSTED_NETWORK = NETCON_CHARACTERISTIC_FLAGS.HOSTED_NETWORK;
pub const NCCF_VIRTUAL_STATION = NETCON_CHARACTERISTIC_FLAGS.VIRTUAL_STATION;
pub const NCCF_WIFI_DIRECT = NETCON_CHARACTERISTIC_FLAGS.WIFI_DIRECT;
pub const NCCF_BLUETOOTH_MASK = NETCON_CHARACTERISTIC_FLAGS.BLUETOOTH_MASK;
pub const NCCF_LAN_MASK = NETCON_CHARACTERISTIC_FLAGS.LAN_MASK;

pub const NETCON_STATUS = enum(i32) {
    DISCONNECTED = 0,
    CONNECTING = 1,
    CONNECTED = 2,
    DISCONNECTING = 3,
    HARDWARE_NOT_PRESENT = 4,
    HARDWARE_DISABLED = 5,
    HARDWARE_MALFUNCTION = 6,
    MEDIA_DISCONNECTED = 7,
    AUTHENTICATING = 8,
    AUTHENTICATION_SUCCEEDED = 9,
    AUTHENTICATION_FAILED = 10,
    INVALID_ADDRESS = 11,
    CREDENTIALS_REQUIRED = 12,
    ACTION_REQUIRED = 13,
    ACTION_REQUIRED_RETRY = 14,
    CONNECT_FAILED = 15,
};
pub const NCS_DISCONNECTED = NETCON_STATUS.DISCONNECTED;
pub const NCS_CONNECTING = NETCON_STATUS.CONNECTING;
pub const NCS_CONNECTED = NETCON_STATUS.CONNECTED;
pub const NCS_DISCONNECTING = NETCON_STATUS.DISCONNECTING;
pub const NCS_HARDWARE_NOT_PRESENT = NETCON_STATUS.HARDWARE_NOT_PRESENT;
pub const NCS_HARDWARE_DISABLED = NETCON_STATUS.HARDWARE_DISABLED;
pub const NCS_HARDWARE_MALFUNCTION = NETCON_STATUS.HARDWARE_MALFUNCTION;
pub const NCS_MEDIA_DISCONNECTED = NETCON_STATUS.MEDIA_DISCONNECTED;
pub const NCS_AUTHENTICATING = NETCON_STATUS.AUTHENTICATING;
pub const NCS_AUTHENTICATION_SUCCEEDED = NETCON_STATUS.AUTHENTICATION_SUCCEEDED;
pub const NCS_AUTHENTICATION_FAILED = NETCON_STATUS.AUTHENTICATION_FAILED;
pub const NCS_INVALID_ADDRESS = NETCON_STATUS.INVALID_ADDRESS;
pub const NCS_CREDENTIALS_REQUIRED = NETCON_STATUS.CREDENTIALS_REQUIRED;
pub const NCS_ACTION_REQUIRED = NETCON_STATUS.ACTION_REQUIRED;
pub const NCS_ACTION_REQUIRED_RETRY = NETCON_STATUS.ACTION_REQUIRED_RETRY;
pub const NCS_CONNECT_FAILED = NETCON_STATUS.CONNECT_FAILED;

pub const NETCON_TYPE = enum(i32) {
    DIRECT_CONNECT = 0,
    INBOUND = 1,
    INTERNET = 2,
    LAN = 3,
    PHONE = 4,
    TUNNEL = 5,
    BRIDGE = 6,
};
pub const NCT_DIRECT_CONNECT = NETCON_TYPE.DIRECT_CONNECT;
pub const NCT_INBOUND = NETCON_TYPE.INBOUND;
pub const NCT_INTERNET = NETCON_TYPE.INTERNET;
pub const NCT_LAN = NETCON_TYPE.LAN;
pub const NCT_PHONE = NETCON_TYPE.PHONE;
pub const NCT_TUNNEL = NETCON_TYPE.TUNNEL;
pub const NCT_BRIDGE = NETCON_TYPE.BRIDGE;

pub const NETCON_MEDIATYPE = enum(i32) {
    NONE = 0,
    DIRECT = 1,
    ISDN = 2,
    LAN = 3,
    PHONE = 4,
    TUNNEL = 5,
    PPPOE = 6,
    BRIDGE = 7,
    SHAREDACCESSHOST_LAN = 8,
    SHAREDACCESSHOST_RAS = 9,
};
pub const NCM_NONE = NETCON_MEDIATYPE.NONE;
pub const NCM_DIRECT = NETCON_MEDIATYPE.DIRECT;
pub const NCM_ISDN = NETCON_MEDIATYPE.ISDN;
pub const NCM_LAN = NETCON_MEDIATYPE.LAN;
pub const NCM_PHONE = NETCON_MEDIATYPE.PHONE;
pub const NCM_TUNNEL = NETCON_MEDIATYPE.TUNNEL;
pub const NCM_PPPOE = NETCON_MEDIATYPE.PPPOE;
pub const NCM_BRIDGE = NETCON_MEDIATYPE.BRIDGE;
pub const NCM_SHAREDACCESSHOST_LAN = NETCON_MEDIATYPE.SHAREDACCESSHOST_LAN;
pub const NCM_SHAREDACCESSHOST_RAS = NETCON_MEDIATYPE.SHAREDACCESSHOST_RAS;

pub const NETCON_PROPERTIES = extern struct {
    guidId: Guid,
    pszwName: ?PWSTR,
    pszwDeviceName: ?PWSTR,
    Status: NETCON_STATUS,
    MediaType: NETCON_MEDIATYPE,
    dwCharacter: u32,
    clsidThisObject: Guid,
    clsidUiObject: Guid,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INetConnection_Value = Guid.initString("c08956a1-1cd3-11d1-b1c5-00805fc1270e");
pub const IID_INetConnection = &IID_INetConnection_Value;
pub const INetConnection = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Connect: *const fn(
            self: *const INetConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: *const fn(
            self: *const INetConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn(
            self: *const INetConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Duplicate: *const fn(
            self: *const INetConnection,
            pszwDuplicateName: ?[*:0]const u16,
            ppCon: ?*?*INetConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperties: *const fn(
            self: *const INetConnection,
            ppProps: ?*?*NETCON_PROPERTIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUiObjectClassId: *const fn(
            self: *const INetConnection,
            pclsid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Rename: *const fn(
            self: *const INetConnection,
            pszwNewName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Connect(self: *const INetConnection) callconv(.Inline) HRESULT {
        return self.vtable.Connect(self);
    }
    pub fn Disconnect(self: *const INetConnection) callconv(.Inline) HRESULT {
        return self.vtable.Disconnect(self);
    }
    pub fn Delete(self: *const INetConnection) callconv(.Inline) HRESULT {
        return self.vtable.Delete(self);
    }
    pub fn Duplicate(self: *const INetConnection, pszwDuplicateName: ?[*:0]const u16, ppCon: ?*?*INetConnection) callconv(.Inline) HRESULT {
        return self.vtable.Duplicate(self, pszwDuplicateName, ppCon);
    }
    pub fn GetProperties(self: *const INetConnection, ppProps: ?*?*NETCON_PROPERTIES) callconv(.Inline) HRESULT {
        return self.vtable.GetProperties(self, ppProps);
    }
    pub fn GetUiObjectClassId(self: *const INetConnection, pclsid: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetUiObjectClassId(self, pclsid);
    }
    pub fn Rename(self: *const INetConnection, pszwNewName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.Rename(self, pszwNewName);
    }
};

pub const NETCONMGR_ENUM_FLAGS = enum(i32) {
    DEFAULT = 0,
    HIDDEN = 1,
};
pub const NCME_DEFAULT = NETCONMGR_ENUM_FLAGS.DEFAULT;
pub const NCME_HIDDEN = NETCONMGR_ENUM_FLAGS.HIDDEN;

const IID_INetConnectionManager_Value = Guid.initString("c08956a2-1cd3-11d1-b1c5-00805fc1270e");
pub const IID_INetConnectionManager = &IID_INetConnectionManager_Value;
pub const INetConnectionManager = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnumConnections: *const fn(
            self: *const INetConnectionManager,
            Flags: NETCONMGR_ENUM_FLAGS,
            ppEnum: ?*?*IEnumNetConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn EnumConnections(self: *const INetConnectionManager, Flags: NETCONMGR_ENUM_FLAGS, ppEnum: ?*?*IEnumNetConnection) callconv(.Inline) HRESULT {
        return self.vtable.EnumConnections(self, Flags, ppEnum);
    }
};

pub const NETCONUI_CONNECT_FLAGS = enum(i32) {
    DEFAULT = 0,
    NO_UI = 1,
    ENABLE_DISABLE = 2,
};
pub const NCUC_DEFAULT = NETCONUI_CONNECT_FLAGS.DEFAULT;
pub const NCUC_NO_UI = NETCONUI_CONNECT_FLAGS.NO_UI;
pub const NCUC_ENABLE_DISABLE = NETCONUI_CONNECT_FLAGS.ENABLE_DISABLE;

const IID_INetConnectionConnectUi_Value = Guid.initString("c08956a3-1cd3-11d1-b1c5-00805fc1270e");
pub const IID_INetConnectionConnectUi = &IID_INetConnectionConnectUi_Value;
pub const INetConnectionConnectUi = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetConnection: *const fn(
            self: *const INetConnectionConnectUi,
            pCon: ?*INetConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Connect: *const fn(
            self: *const INetConnectionConnectUi,
            hwndParent: ?HWND,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: *const fn(
            self: *const INetConnectionConnectUi,
            hwndParent: ?HWND,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetConnection(self: *const INetConnectionConnectUi, pCon: ?*INetConnection) callconv(.Inline) HRESULT {
        return self.vtable.SetConnection(self, pCon);
    }
    pub fn Connect(self: *const INetConnectionConnectUi, hwndParent: ?HWND, dwFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.Connect(self, hwndParent, dwFlags);
    }
    pub fn Disconnect(self: *const INetConnectionConnectUi, hwndParent: ?HWND, dwFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.Disconnect(self, hwndParent, dwFlags);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IEnumNetSharingPortMapping_Value = Guid.initString("c08956b0-1cd3-11d1-b1c5-00805fc1270e");
pub const IID_IEnumNetSharingPortMapping = &IID_IEnumNetSharingPortMapping_Value;
pub const IEnumNetSharingPortMapping = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumNetSharingPortMapping,
            celt: u32,
            rgVar: [*]VARIANT,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumNetSharingPortMapping,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumNetSharingPortMapping,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumNetSharingPortMapping,
            ppenum: ?*?*IEnumNetSharingPortMapping,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumNetSharingPortMapping, celt: u32, rgVar: [*]VARIANT, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, celt, rgVar, pceltFetched);
    }
    pub fn Skip(self: *const IEnumNetSharingPortMapping, celt: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumNetSharingPortMapping) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumNetSharingPortMapping, ppenum: ?*?*IEnumNetSharingPortMapping) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppenum);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INetSharingPortMappingProps_Value = Guid.initString("24b7e9b5-e38f-4685-851b-00892cf5f940");
pub const IID_INetSharingPortMappingProps = &IID_INetSharingPortMappingProps_Value;
pub const INetSharingPortMappingProps = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn(
            self: *const INetSharingPortMappingProps,
            pbstrName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IPProtocol: *const fn(
            self: *const INetSharingPortMappingProps,
            pucIPProt: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExternalPort: *const fn(
            self: *const INetSharingPortMappingProps,
            pusPort: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InternalPort: *const fn(
            self: *const INetSharingPortMappingProps,
            pusPort: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Options: *const fn(
            self: *const INetSharingPortMappingProps,
            pdwOptions: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TargetName: *const fn(
            self: *const INetSharingPortMappingProps,
            pbstrTargetName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TargetIPAddress: *const fn(
            self: *const INetSharingPortMappingProps,
            pbstrTargetIPAddress: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn(
            self: *const INetSharingPortMappingProps,
            pbool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Name(self: *const INetSharingPortMappingProps, pbstrName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Name(self, pbstrName);
    }
    pub fn get_IPProtocol(self: *const INetSharingPortMappingProps, pucIPProt: ?*u8) callconv(.Inline) HRESULT {
        return self.vtable.get_IPProtocol(self, pucIPProt);
    }
    pub fn get_ExternalPort(self: *const INetSharingPortMappingProps, pusPort: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ExternalPort(self, pusPort);
    }
    pub fn get_InternalPort(self: *const INetSharingPortMappingProps, pusPort: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_InternalPort(self, pusPort);
    }
    pub fn get_Options(self: *const INetSharingPortMappingProps, pdwOptions: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Options(self, pdwOptions);
    }
    pub fn get_TargetName(self: *const INetSharingPortMappingProps, pbstrTargetName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_TargetName(self, pbstrTargetName);
    }
    pub fn get_TargetIPAddress(self: *const INetSharingPortMappingProps, pbstrTargetIPAddress: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_TargetIPAddress(self, pbstrTargetIPAddress);
    }
    pub fn get_Enabled(self: *const INetSharingPortMappingProps, pbool: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Enabled(self, pbool);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INetSharingPortMapping_Value = Guid.initString("c08956b1-1cd3-11d1-b1c5-00805fc1270e");
pub const IID_INetSharingPortMapping = &IID_INetSharingPortMapping_Value;
pub const INetSharingPortMapping = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Disable: *const fn(
            self: *const INetSharingPortMapping,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enable: *const fn(
            self: *const INetSharingPortMapping,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn(
            self: *const INetSharingPortMapping,
            ppNSPMP: ?*?*INetSharingPortMappingProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn(
            self: *const INetSharingPortMapping,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Disable(self: *const INetSharingPortMapping) callconv(.Inline) HRESULT {
        return self.vtable.Disable(self);
    }
    pub fn Enable(self: *const INetSharingPortMapping) callconv(.Inline) HRESULT {
        return self.vtable.Enable(self);
    }
    pub fn get_Properties(self: *const INetSharingPortMapping, ppNSPMP: ?*?*INetSharingPortMappingProps) callconv(.Inline) HRESULT {
        return self.vtable.get_Properties(self, ppNSPMP);
    }
    pub fn Delete(self: *const INetSharingPortMapping) callconv(.Inline) HRESULT {
        return self.vtable.Delete(self);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IEnumNetSharingEveryConnection_Value = Guid.initString("c08956b8-1cd3-11d1-b1c5-00805fc1270e");
pub const IID_IEnumNetSharingEveryConnection = &IID_IEnumNetSharingEveryConnection_Value;
pub const IEnumNetSharingEveryConnection = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumNetSharingEveryConnection,
            celt: u32,
            rgVar: [*]VARIANT,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumNetSharingEveryConnection,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumNetSharingEveryConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumNetSharingEveryConnection,
            ppenum: ?*?*IEnumNetSharingEveryConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumNetSharingEveryConnection, celt: u32, rgVar: [*]VARIANT, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, celt, rgVar, pceltFetched);
    }
    pub fn Skip(self: *const IEnumNetSharingEveryConnection, celt: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumNetSharingEveryConnection) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumNetSharingEveryConnection, ppenum: ?*?*IEnumNetSharingEveryConnection) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppenum);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IEnumNetSharingPublicConnection_Value = Guid.initString("c08956b4-1cd3-11d1-b1c5-00805fc1270e");
pub const IID_IEnumNetSharingPublicConnection = &IID_IEnumNetSharingPublicConnection_Value;
pub const IEnumNetSharingPublicConnection = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumNetSharingPublicConnection,
            celt: u32,
            rgVar: [*]VARIANT,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumNetSharingPublicConnection,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumNetSharingPublicConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumNetSharingPublicConnection,
            ppenum: ?*?*IEnumNetSharingPublicConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumNetSharingPublicConnection, celt: u32, rgVar: [*]VARIANT, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, celt, rgVar, pceltFetched);
    }
    pub fn Skip(self: *const IEnumNetSharingPublicConnection, celt: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumNetSharingPublicConnection) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumNetSharingPublicConnection, ppenum: ?*?*IEnumNetSharingPublicConnection) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppenum);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IEnumNetSharingPrivateConnection_Value = Guid.initString("c08956b5-1cd3-11d1-b1c5-00805fc1270e");
pub const IID_IEnumNetSharingPrivateConnection = &IID_IEnumNetSharingPrivateConnection_Value;
pub const IEnumNetSharingPrivateConnection = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumNetSharingPrivateConnection,
            celt: u32,
            rgVar: [*]VARIANT,
            pCeltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumNetSharingPrivateConnection,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumNetSharingPrivateConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumNetSharingPrivateConnection,
            ppenum: ?*?*IEnumNetSharingPrivateConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumNetSharingPrivateConnection, celt: u32, rgVar: [*]VARIANT, pCeltFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, celt, rgVar, pCeltFetched);
    }
    pub fn Skip(self: *const IEnumNetSharingPrivateConnection, celt: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumNetSharingPrivateConnection) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumNetSharingPrivateConnection, ppenum: ?*?*IEnumNetSharingPrivateConnection) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppenum);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INetSharingPortMappingCollection_Value = Guid.initString("02e4a2de-da20-4e34-89c8-ac22275a010b");
pub const IID_INetSharingPortMappingCollection = &IID_INetSharingPortMappingCollection_Value;
pub const INetSharingPortMappingCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const INetSharingPortMappingCollection,
            pVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const INetSharingPortMappingCollection,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get__NewEnum(self: *const INetSharingPortMappingCollection, pVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, pVal);
    }
    pub fn get_Count(self: *const INetSharingPortMappingCollection, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INetConnectionProps_Value = Guid.initString("f4277c95-ce5b-463d-8167-5662d9bcaa72");
pub const IID_INetConnectionProps = &IID_INetConnectionProps_Value;
pub const INetConnectionProps = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Guid: *const fn(
            self: *const INetConnectionProps,
            pbstrGuid: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn(
            self: *const INetConnectionProps,
            pbstrName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DeviceName: *const fn(
            self: *const INetConnectionProps,
            pbstrDeviceName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn(
            self: *const INetConnectionProps,
            pStatus: ?*NETCON_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MediaType: *const fn(
            self: *const INetConnectionProps,
            pMediaType: ?*NETCON_MEDIATYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Characteristics: *const fn(
            self: *const INetConnectionProps,
            pdwFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Guid(self: *const INetConnectionProps, pbstrGuid: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Guid(self, pbstrGuid);
    }
    pub fn get_Name(self: *const INetConnectionProps, pbstrName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Name(self, pbstrName);
    }
    pub fn get_DeviceName(self: *const INetConnectionProps, pbstrDeviceName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_DeviceName(self, pbstrDeviceName);
    }
    pub fn get_Status(self: *const INetConnectionProps, pStatus: ?*NETCON_STATUS) callconv(.Inline) HRESULT {
        return self.vtable.get_Status(self, pStatus);
    }
    pub fn get_MediaType(self: *const INetConnectionProps, pMediaType: ?*NETCON_MEDIATYPE) callconv(.Inline) HRESULT {
        return self.vtable.get_MediaType(self, pMediaType);
    }
    pub fn get_Characteristics(self: *const INetConnectionProps, pdwFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_Characteristics(self, pdwFlags);
    }
};

pub const SHARINGCONNECTIONTYPE = enum(i32) {
    UBLIC = 0,
    RIVATE = 1,
};
pub const ICSSHARINGTYPE_PUBLIC = SHARINGCONNECTIONTYPE.UBLIC;
pub const ICSSHARINGTYPE_PRIVATE = SHARINGCONNECTIONTYPE.RIVATE;

pub const SHARINGCONNECTION_ENUM_FLAGS = enum(i32) {
    DEFAULT = 0,
    ENABLED = 1,
};
pub const ICSSC_DEFAULT = SHARINGCONNECTION_ENUM_FLAGS.DEFAULT;
pub const ICSSC_ENABLED = SHARINGCONNECTION_ENUM_FLAGS.ENABLED;

pub const ICS_TARGETTYPE = enum(i32) {
    NAME = 0,
    IPADDRESS = 1,
};
pub const ICSTT_NAME = ICS_TARGETTYPE.NAME;
pub const ICSTT_IPADDRESS = ICS_TARGETTYPE.IPADDRESS;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INetSharingConfiguration_Value = Guid.initString("c08956b6-1cd3-11d1-b1c5-00805fc1270e");
pub const IID_INetSharingConfiguration = &IID_INetSharingConfiguration_Value;
pub const INetSharingConfiguration = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SharingEnabled: *const fn(
            self: *const INetSharingConfiguration,
            pbEnabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SharingConnectionType: *const fn(
            self: *const INetSharingConfiguration,
            pType: ?*SHARINGCONNECTIONTYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisableSharing: *const fn(
            self: *const INetSharingConfiguration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableSharing: *const fn(
            self: *const INetSharingConfiguration,
            Type: SHARINGCONNECTIONTYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InternetFirewallEnabled: *const fn(
            self: *const INetSharingConfiguration,
            pbEnabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisableInternetFirewall: *const fn(
            self: *const INetSharingConfiguration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableInternetFirewall: *const fn(
            self: *const INetSharingConfiguration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EnumPortMappings: *const fn(
            self: *const INetSharingConfiguration,
            Flags: SHARINGCONNECTION_ENUM_FLAGS,
            ppColl: ?*?*INetSharingPortMappingCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPortMapping: *const fn(
            self: *const INetSharingConfiguration,
            bstrName: ?BSTR,
            ucIPProtocol: u8,
            usExternalPort: u16,
            usInternalPort: u16,
            dwOptions: u32,
            bstrTargetNameOrIPAddress: ?BSTR,
            eTargetType: ICS_TARGETTYPE,
            ppMapping: ?*?*INetSharingPortMapping,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemovePortMapping: *const fn(
            self: *const INetSharingConfiguration,
            pMapping: ?*INetSharingPortMapping,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_SharingEnabled(self: *const INetSharingConfiguration, pbEnabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_SharingEnabled(self, pbEnabled);
    }
    pub fn get_SharingConnectionType(self: *const INetSharingConfiguration, pType: ?*SHARINGCONNECTIONTYPE) callconv(.Inline) HRESULT {
        return self.vtable.get_SharingConnectionType(self, pType);
    }
    pub fn DisableSharing(self: *const INetSharingConfiguration) callconv(.Inline) HRESULT {
        return self.vtable.DisableSharing(self);
    }
    pub fn EnableSharing(self: *const INetSharingConfiguration, Type: SHARINGCONNECTIONTYPE) callconv(.Inline) HRESULT {
        return self.vtable.EnableSharing(self, Type);
    }
    pub fn get_InternetFirewallEnabled(self: *const INetSharingConfiguration, pbEnabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_InternetFirewallEnabled(self, pbEnabled);
    }
    pub fn DisableInternetFirewall(self: *const INetSharingConfiguration) callconv(.Inline) HRESULT {
        return self.vtable.DisableInternetFirewall(self);
    }
    pub fn EnableInternetFirewall(self: *const INetSharingConfiguration) callconv(.Inline) HRESULT {
        return self.vtable.EnableInternetFirewall(self);
    }
    pub fn get_EnumPortMappings(self: *const INetSharingConfiguration, Flags: SHARINGCONNECTION_ENUM_FLAGS, ppColl: ?*?*INetSharingPortMappingCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_EnumPortMappings(self, Flags, ppColl);
    }
    pub fn AddPortMapping(self: *const INetSharingConfiguration, bstrName: ?BSTR, ucIPProtocol: u8, usExternalPort: u16, usInternalPort: u16, dwOptions: u32, bstrTargetNameOrIPAddress: ?BSTR, eTargetType: ICS_TARGETTYPE, ppMapping: ?*?*INetSharingPortMapping) callconv(.Inline) HRESULT {
        return self.vtable.AddPortMapping(self, bstrName, ucIPProtocol, usExternalPort, usInternalPort, dwOptions, bstrTargetNameOrIPAddress, eTargetType, ppMapping);
    }
    pub fn RemovePortMapping(self: *const INetSharingConfiguration, pMapping: ?*INetSharingPortMapping) callconv(.Inline) HRESULT {
        return self.vtable.RemovePortMapping(self, pMapping);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INetSharingEveryConnectionCollection_Value = Guid.initString("33c4643c-7811-46fa-a89a-768597bd7223");
pub const IID_INetSharingEveryConnectionCollection = &IID_INetSharingEveryConnectionCollection_Value;
pub const INetSharingEveryConnectionCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const INetSharingEveryConnectionCollection,
            pVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const INetSharingEveryConnectionCollection,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get__NewEnum(self: *const INetSharingEveryConnectionCollection, pVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, pVal);
    }
    pub fn get_Count(self: *const INetSharingEveryConnectionCollection, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INetSharingPublicConnectionCollection_Value = Guid.initString("7d7a6355-f372-4971-a149-bfc927be762a");
pub const IID_INetSharingPublicConnectionCollection = &IID_INetSharingPublicConnectionCollection_Value;
pub const INetSharingPublicConnectionCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const INetSharingPublicConnectionCollection,
            pVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const INetSharingPublicConnectionCollection,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get__NewEnum(self: *const INetSharingPublicConnectionCollection, pVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, pVal);
    }
    pub fn get_Count(self: *const INetSharingPublicConnectionCollection, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INetSharingPrivateConnectionCollection_Value = Guid.initString("38ae69e0-4409-402a-a2cb-e965c727f840");
pub const IID_INetSharingPrivateConnectionCollection = &IID_INetSharingPrivateConnectionCollection_Value;
pub const INetSharingPrivateConnectionCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const INetSharingPrivateConnectionCollection,
            pVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const INetSharingPrivateConnectionCollection,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get__NewEnum(self: *const INetSharingPrivateConnectionCollection, pVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, pVal);
    }
    pub fn get_Count(self: *const INetSharingPrivateConnectionCollection, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INetSharingManager_Value = Guid.initString("c08956b7-1cd3-11d1-b1c5-00805fc1270e");
pub const IID_INetSharingManager = &IID_INetSharingManager_Value;
pub const INetSharingManager = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SharingInstalled: *const fn(
            self: *const INetSharingManager,
            pbInstalled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EnumPublicConnections: *const fn(
            self: *const INetSharingManager,
            Flags: SHARINGCONNECTION_ENUM_FLAGS,
            ppColl: ?*?*INetSharingPublicConnectionCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EnumPrivateConnections: *const fn(
            self: *const INetSharingManager,
            Flags: SHARINGCONNECTION_ENUM_FLAGS,
            ppColl: ?*?*INetSharingPrivateConnectionCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_INetSharingConfigurationForINetConnection: *const fn(
            self: *const INetSharingManager,
            pNetConnection: ?*INetConnection,
            ppNetSharingConfiguration: ?*?*INetSharingConfiguration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnumEveryConnection: *const fn(
            self: *const INetSharingManager,
            ppColl: ?*?*INetSharingEveryConnectionCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_NetConnectionProps: *const fn(
            self: *const INetSharingManager,
            pNetConnection: ?*INetConnection,
            ppProps: ?*?*INetConnectionProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_SharingInstalled(self: *const INetSharingManager, pbInstalled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_SharingInstalled(self, pbInstalled);
    }
    pub fn get_EnumPublicConnections(self: *const INetSharingManager, Flags: SHARINGCONNECTION_ENUM_FLAGS, ppColl: ?*?*INetSharingPublicConnectionCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_EnumPublicConnections(self, Flags, ppColl);
    }
    pub fn get_EnumPrivateConnections(self: *const INetSharingManager, Flags: SHARINGCONNECTION_ENUM_FLAGS, ppColl: ?*?*INetSharingPrivateConnectionCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_EnumPrivateConnections(self, Flags, ppColl);
    }
    pub fn get_INetSharingConfigurationForINetConnection(self: *const INetSharingManager, pNetConnection: ?*INetConnection, ppNetSharingConfiguration: ?*?*INetSharingConfiguration) callconv(.Inline) HRESULT {
        return self.vtable.get_INetSharingConfigurationForINetConnection(self, pNetConnection, ppNetSharingConfiguration);
    }
    pub fn get_EnumEveryConnection(self: *const INetSharingManager, ppColl: ?*?*INetSharingEveryConnectionCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_EnumEveryConnection(self, ppColl);
    }
    pub fn get_NetConnectionProps(self: *const INetSharingManager, pNetConnection: ?*INetConnection, ppProps: ?*?*INetConnectionProps) callconv(.Inline) HRESULT {
        return self.vtable.get_NetConnectionProps(self, pNetConnection, ppProps);
    }
};

const CLSID_NetFwRule_Value = Guid.initString("2c5bc43e-3369-4c33-ab0c-be9469677af4");
pub const CLSID_NetFwRule = &CLSID_NetFwRule_Value;

const CLSID_NetFwOpenPort_Value = Guid.initString("0ca545c6-37ad-4a6c-bf92-9f7610067ef5");
pub const CLSID_NetFwOpenPort = &CLSID_NetFwOpenPort_Value;

const CLSID_NetFwAuthorizedApplication_Value = Guid.initString("ec9846b3-2762-4a6b-a214-6acb603462d2");
pub const CLSID_NetFwAuthorizedApplication = &CLSID_NetFwAuthorizedApplication_Value;

const CLSID_NetFwPolicy2_Value = Guid.initString("e2b3c97f-6ae1-41ac-817a-f6f92166d7dd");
pub const CLSID_NetFwPolicy2 = &CLSID_NetFwPolicy2_Value;

const CLSID_NetFwProduct_Value = Guid.initString("9d745ed8-c514-4d1d-bf42-751fed2d5ac7");
pub const CLSID_NetFwProduct = &CLSID_NetFwProduct_Value;

const CLSID_NetFwProducts_Value = Guid.initString("cc19079b-8272-4d73-bb70-cdb533527b61");
pub const CLSID_NetFwProducts = &CLSID_NetFwProducts_Value;

const CLSID_NetFwMgr_Value = Guid.initString("304ce942-6e39-40d8-943a-b913c40c9cd4");
pub const CLSID_NetFwMgr = &CLSID_NetFwMgr_Value;

pub const NET_FW_POLICY_TYPE = enum(i32) {
    GROUP = 0,
    LOCAL = 1,
    EFFECTIVE = 2,
    TYPE_MAX = 3,
};
pub const NET_FW_POLICY_GROUP = NET_FW_POLICY_TYPE.GROUP;
pub const NET_FW_POLICY_LOCAL = NET_FW_POLICY_TYPE.LOCAL;
pub const NET_FW_POLICY_EFFECTIVE = NET_FW_POLICY_TYPE.EFFECTIVE;
pub const NET_FW_POLICY_TYPE_MAX = NET_FW_POLICY_TYPE.TYPE_MAX;

pub const NET_FW_PROFILE_TYPE = enum(i32) {
    DOMAIN = 0,
    STANDARD = 1,
    CURRENT = 2,
    TYPE_MAX = 3,
};
pub const NET_FW_PROFILE_DOMAIN = NET_FW_PROFILE_TYPE.DOMAIN;
pub const NET_FW_PROFILE_STANDARD = NET_FW_PROFILE_TYPE.STANDARD;
pub const NET_FW_PROFILE_CURRENT = NET_FW_PROFILE_TYPE.CURRENT;
pub const NET_FW_PROFILE_TYPE_MAX = NET_FW_PROFILE_TYPE.TYPE_MAX;

pub const NET_FW_PROFILE_TYPE2 = enum(i32) {
    DOMAIN = 1,
    PRIVATE = 2,
    PUBLIC = 4,
    ALL = 2147483647,
};
pub const NET_FW_PROFILE2_DOMAIN = NET_FW_PROFILE_TYPE2.DOMAIN;
pub const NET_FW_PROFILE2_PRIVATE = NET_FW_PROFILE_TYPE2.PRIVATE;
pub const NET_FW_PROFILE2_PUBLIC = NET_FW_PROFILE_TYPE2.PUBLIC;
pub const NET_FW_PROFILE2_ALL = NET_FW_PROFILE_TYPE2.ALL;

pub const NET_FW_IP_VERSION = enum(i32) {
    V4 = 0,
    V6 = 1,
    ANY = 2,
    MAX = 3,
};
pub const NET_FW_IP_VERSION_V4 = NET_FW_IP_VERSION.V4;
pub const NET_FW_IP_VERSION_V6 = NET_FW_IP_VERSION.V6;
pub const NET_FW_IP_VERSION_ANY = NET_FW_IP_VERSION.ANY;
pub const NET_FW_IP_VERSION_MAX = NET_FW_IP_VERSION.MAX;

pub const NET_FW_SCOPE = enum(i32) {
    ALL = 0,
    LOCAL_SUBNET = 1,
    CUSTOM = 2,
    MAX = 3,
};
pub const NET_FW_SCOPE_ALL = NET_FW_SCOPE.ALL;
pub const NET_FW_SCOPE_LOCAL_SUBNET = NET_FW_SCOPE.LOCAL_SUBNET;
pub const NET_FW_SCOPE_CUSTOM = NET_FW_SCOPE.CUSTOM;
pub const NET_FW_SCOPE_MAX = NET_FW_SCOPE.MAX;

pub const NET_FW_IP_PROTOCOL = enum(i32) {
    TCP = 6,
    UDP = 17,
    ANY = 256,
};
pub const NET_FW_IP_PROTOCOL_TCP = NET_FW_IP_PROTOCOL.TCP;
pub const NET_FW_IP_PROTOCOL_UDP = NET_FW_IP_PROTOCOL.UDP;
pub const NET_FW_IP_PROTOCOL_ANY = NET_FW_IP_PROTOCOL.ANY;

pub const NET_FW_SERVICE_TYPE = enum(i32) {
    FILE_AND_PRINT = 0,
    UPNP = 1,
    REMOTE_DESKTOP = 2,
    NONE = 3,
    TYPE_MAX = 4,
};
pub const NET_FW_SERVICE_FILE_AND_PRINT = NET_FW_SERVICE_TYPE.FILE_AND_PRINT;
pub const NET_FW_SERVICE_UPNP = NET_FW_SERVICE_TYPE.UPNP;
pub const NET_FW_SERVICE_REMOTE_DESKTOP = NET_FW_SERVICE_TYPE.REMOTE_DESKTOP;
pub const NET_FW_SERVICE_NONE = NET_FW_SERVICE_TYPE.NONE;
pub const NET_FW_SERVICE_TYPE_MAX = NET_FW_SERVICE_TYPE.TYPE_MAX;

pub const NET_FW_RULE_DIRECTION = enum(i32) {
    IN = 1,
    OUT = 2,
    MAX = 3,
};
pub const NET_FW_RULE_DIR_IN = NET_FW_RULE_DIRECTION.IN;
pub const NET_FW_RULE_DIR_OUT = NET_FW_RULE_DIRECTION.OUT;
pub const NET_FW_RULE_DIR_MAX = NET_FW_RULE_DIRECTION.MAX;

pub const NET_FW_ACTION = enum(i32) {
    BLOCK = 0,
    ALLOW = 1,
    MAX = 2,
};
pub const NET_FW_ACTION_BLOCK = NET_FW_ACTION.BLOCK;
pub const NET_FW_ACTION_ALLOW = NET_FW_ACTION.ALLOW;
pub const NET_FW_ACTION_MAX = NET_FW_ACTION.MAX;

pub const NET_FW_MODIFY_STATE = enum(i32) {
    OK = 0,
    GP_OVERRIDE = 1,
    INBOUND_BLOCKED = 2,
};
pub const NET_FW_MODIFY_STATE_OK = NET_FW_MODIFY_STATE.OK;
pub const NET_FW_MODIFY_STATE_GP_OVERRIDE = NET_FW_MODIFY_STATE.GP_OVERRIDE;
pub const NET_FW_MODIFY_STATE_INBOUND_BLOCKED = NET_FW_MODIFY_STATE.INBOUND_BLOCKED;

pub const NET_FW_RULE_CATEGORY = enum(i32) {
    BOOT = 0,
    STEALTH = 1,
    FIREWALL = 2,
    CONSEC = 3,
    MAX = 4,
};
pub const NET_FW_RULE_CATEGORY_BOOT = NET_FW_RULE_CATEGORY.BOOT;
pub const NET_FW_RULE_CATEGORY_STEALTH = NET_FW_RULE_CATEGORY.STEALTH;
pub const NET_FW_RULE_CATEGORY_FIREWALL = NET_FW_RULE_CATEGORY.FIREWALL;
pub const NET_FW_RULE_CATEGORY_CONSEC = NET_FW_RULE_CATEGORY.CONSEC;
pub const NET_FW_RULE_CATEGORY_MAX = NET_FW_RULE_CATEGORY.MAX;

pub const NET_FW_EDGE_TRAVERSAL_TYPE = enum(i32) {
    DENY = 0,
    ALLOW = 1,
    DEFER_TO_APP = 2,
    DEFER_TO_USER = 3,
};
pub const NET_FW_EDGE_TRAVERSAL_TYPE_DENY = NET_FW_EDGE_TRAVERSAL_TYPE.DENY;
pub const NET_FW_EDGE_TRAVERSAL_TYPE_ALLOW = NET_FW_EDGE_TRAVERSAL_TYPE.ALLOW;
pub const NET_FW_EDGE_TRAVERSAL_TYPE_DEFER_TO_APP = NET_FW_EDGE_TRAVERSAL_TYPE.DEFER_TO_APP;
pub const NET_FW_EDGE_TRAVERSAL_TYPE_DEFER_TO_USER = NET_FW_EDGE_TRAVERSAL_TYPE.DEFER_TO_USER;

pub const NET_FW_AUTHENTICATE_TYPE = enum(i32) {
    NONE = 0,
    NO_ENCAPSULATION = 1,
    WITH_INTEGRITY = 2,
    AND_NEGOTIATE_ENCRYPTION = 3,
    AND_ENCRYPT = 4,
};
pub const NET_FW_AUTHENTICATE_NONE = NET_FW_AUTHENTICATE_TYPE.NONE;
pub const NET_FW_AUTHENTICATE_NO_ENCAPSULATION = NET_FW_AUTHENTICATE_TYPE.NO_ENCAPSULATION;
pub const NET_FW_AUTHENTICATE_WITH_INTEGRITY = NET_FW_AUTHENTICATE_TYPE.WITH_INTEGRITY;
pub const NET_FW_AUTHENTICATE_AND_NEGOTIATE_ENCRYPTION = NET_FW_AUTHENTICATE_TYPE.AND_NEGOTIATE_ENCRYPTION;
pub const NET_FW_AUTHENTICATE_AND_ENCRYPT = NET_FW_AUTHENTICATE_TYPE.AND_ENCRYPT;

pub const NETISO_FLAG = enum(i32) {
    FORCE_COMPUTE_BINARIES = 1,
    MAX = 2,
};
pub const NETISO_FLAG_FORCE_COMPUTE_BINARIES = NETISO_FLAG.FORCE_COMPUTE_BINARIES;
pub const NETISO_FLAG_MAX = NETISO_FLAG.MAX;

pub const INET_FIREWALL_AC_CREATION_TYPE = enum(i32) {
    NONE = 0,
    PACKAGE_ID_ONLY = 1,
    BINARY = 2,
    MAX = 4,
};
pub const INET_FIREWALL_AC_NONE = INET_FIREWALL_AC_CREATION_TYPE.NONE;
pub const INET_FIREWALL_AC_PACKAGE_ID_ONLY = INET_FIREWALL_AC_CREATION_TYPE.PACKAGE_ID_ONLY;
pub const INET_FIREWALL_AC_BINARY = INET_FIREWALL_AC_CREATION_TYPE.BINARY;
pub const INET_FIREWALL_AC_MAX = INET_FIREWALL_AC_CREATION_TYPE.MAX;

pub const INET_FIREWALL_AC_CHANGE_TYPE = enum(i32) {
    INVALID = 0,
    CREATE = 1,
    DELETE = 2,
    MAX = 3,
};
pub const INET_FIREWALL_AC_CHANGE_INVALID = INET_FIREWALL_AC_CHANGE_TYPE.INVALID;
pub const INET_FIREWALL_AC_CHANGE_CREATE = INET_FIREWALL_AC_CHANGE_TYPE.CREATE;
pub const INET_FIREWALL_AC_CHANGE_DELETE = INET_FIREWALL_AC_CHANGE_TYPE.DELETE;
pub const INET_FIREWALL_AC_CHANGE_MAX = INET_FIREWALL_AC_CHANGE_TYPE.MAX;

pub const INET_FIREWALL_AC_CAPABILITIES = extern struct {
    count: u32,
    capabilities: ?*SID_AND_ATTRIBUTES,
};

pub const INET_FIREWALL_AC_BINARIES = extern struct {
    count: u32,
    binaries: ?*?PWSTR,
};

pub const INET_FIREWALL_AC_CHANGE = extern struct {
    changeType: INET_FIREWALL_AC_CHANGE_TYPE,
    createType: INET_FIREWALL_AC_CREATION_TYPE,
    appContainerSid: ?*SID,
    userSid: ?*SID,
    displayName: ?PWSTR,
    Anonymous: extern union {
        capabilities: INET_FIREWALL_AC_CAPABILITIES,
        binaries: INET_FIREWALL_AC_BINARIES,
    },
};

pub const INET_FIREWALL_APP_CONTAINER = extern struct {
    appContainerSid: ?*SID,
    userSid: ?*SID,
    appContainerName: ?PWSTR,
    displayName: ?PWSTR,
    description: ?PWSTR,
    capabilities: INET_FIREWALL_AC_CAPABILITIES,
    binaries: INET_FIREWALL_AC_BINARIES,
    workingDirectory: ?PWSTR,
    packageFullName: ?PWSTR,
};

pub const PAC_CHANGES_CALLBACK_FN = *const fn(
    context: ?*anyopaque,
    pChange: ?*const INET_FIREWALL_AC_CHANGE,
) callconv(@import("std").os.windows.WINAPI) void;

pub const NETISO_ERROR_TYPE = enum(i32) {
    NONE = 0,
    PRIVATE_NETWORK = 1,
    INTERNET_CLIENT = 2,
    INTERNET_CLIENT_SERVER = 3,
    MAX = 4,
};
pub const NETISO_ERROR_TYPE_NONE = NETISO_ERROR_TYPE.NONE;
pub const NETISO_ERROR_TYPE_PRIVATE_NETWORK = NETISO_ERROR_TYPE.PRIVATE_NETWORK;
pub const NETISO_ERROR_TYPE_INTERNET_CLIENT = NETISO_ERROR_TYPE.INTERNET_CLIENT;
pub const NETISO_ERROR_TYPE_INTERNET_CLIENT_SERVER = NETISO_ERROR_TYPE.INTERNET_CLIENT_SERVER;
pub const NETISO_ERROR_TYPE_MAX = NETISO_ERROR_TYPE.MAX;

pub const PNETISO_EDP_ID_CALLBACK_FN = *const fn(
    context: ?*anyopaque,
    wszEnterpriseId: ?[*:0]const u16,
    dwErr: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const _tag_FW_DYNAMIC_KEYWORD_ORIGIN_TYPE = enum(i32) {
    INVALID = 0,
    LOCAL = 1,
    MDM = 2,
};
pub const FW_DYNAMIC_KEYWORD_ORIGIN_INVALID = _tag_FW_DYNAMIC_KEYWORD_ORIGIN_TYPE.INVALID;
pub const FW_DYNAMIC_KEYWORD_ORIGIN_LOCAL = _tag_FW_DYNAMIC_KEYWORD_ORIGIN_TYPE.LOCAL;
pub const FW_DYNAMIC_KEYWORD_ORIGIN_MDM = _tag_FW_DYNAMIC_KEYWORD_ORIGIN_TYPE.MDM;

pub const _tag_FW_DYNAMIC_KEYWORD_ADDRESS0 = extern struct {
    id: Guid,
    keyword: ?[*:0]const u16,
    flags: u32,
    addresses: ?[*:0]const u16,
};

pub const _tag_FW_DYNAMIC_KEYWORD_ADDRESS_DATA0 = extern struct {
    dynamicKeywordAddress: _tag_FW_DYNAMIC_KEYWORD_ADDRESS0,
    next: ?*_tag_FW_DYNAMIC_KEYWORD_ADDRESS_DATA0,
    schemaVersion: u16,
    originType: _tag_FW_DYNAMIC_KEYWORD_ORIGIN_TYPE,
};

pub const _tag_FW_DYNAMIC_KEYWORD_ADDRESS_FLAGS = enum(i32) {
    E = 1,
};
pub const FW_DYNAMIC_KEYWORD_ADDRESS_FLAGS_AUTO_RESOLVE = _tag_FW_DYNAMIC_KEYWORD_ADDRESS_FLAGS.E;

pub const _tag_FW_DYNAMIC_KEYWORD_ADDRESS_ENUM_FLAGS = enum(i32) {
    AUTO_RESOLVE = 1,
    NON_AUTO_RESOLVE = 2,
    ALL = 3,
};
pub const FW_DYNAMIC_KEYWORD_ADDRESS_ENUM_FLAGS_AUTO_RESOLVE = _tag_FW_DYNAMIC_KEYWORD_ADDRESS_ENUM_FLAGS.AUTO_RESOLVE;
pub const FW_DYNAMIC_KEYWORD_ADDRESS_ENUM_FLAGS_NON_AUTO_RESOLVE = _tag_FW_DYNAMIC_KEYWORD_ADDRESS_ENUM_FLAGS.NON_AUTO_RESOLVE;
pub const FW_DYNAMIC_KEYWORD_ADDRESS_ENUM_FLAGS_ALL = _tag_FW_DYNAMIC_KEYWORD_ADDRESS_ENUM_FLAGS.ALL;

pub const PFN_FWADDDYNAMICKEYWORDADDRESS0 = *const fn(
    dynamicKeywordAddress: ?*const _tag_FW_DYNAMIC_KEYWORD_ADDRESS0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFN_FWDELETEDYNAMICKEYWORDADDRESS0 = *const fn(
    dynamicKeywordAddressId: Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFN_FWENUMDYNAMICKEYWORDADDRESSESBYTYPE0 = *const fn(
    flags: u32,
    dynamicKeywordAddressData: ?*?*_tag_FW_DYNAMIC_KEYWORD_ADDRESS_DATA0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFN_FWENUMDYNAMICKEYWORDADDRESSBYID0 = *const fn(
    dynamicKeywordAddressId: Guid,
    dynamicKeywordAddressData: ?*?*_tag_FW_DYNAMIC_KEYWORD_ADDRESS_DATA0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFN_FWFREEDYNAMICKEYWORDADDRESSDATA0 = *const fn(
    dynamicKeywordAddressData: ?*_tag_FW_DYNAMIC_KEYWORD_ADDRESS_DATA0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFN_FWUPDATEDYNAMICKEYWORDADDRESS0 = *const fn(
    dynamicKeywordAddressId: Guid,
    updatedAddresses: ?[*:0]const u16,
    append: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwRemoteAdminSettings_Value = Guid.initString("d4becddf-6f73-4a83-b832-9c66874cd20e");
pub const IID_INetFwRemoteAdminSettings = &IID_INetFwRemoteAdminSettings_Value;
pub const INetFwRemoteAdminSettings = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IpVersion: *const fn(
            self: *const INetFwRemoteAdminSettings,
            ipVersion: ?*NET_FW_IP_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IpVersion: *const fn(
            self: *const INetFwRemoteAdminSettings,
            ipVersion: NET_FW_IP_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Scope: *const fn(
            self: *const INetFwRemoteAdminSettings,
            scope: ?*NET_FW_SCOPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Scope: *const fn(
            self: *const INetFwRemoteAdminSettings,
            scope: NET_FW_SCOPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteAddresses: *const fn(
            self: *const INetFwRemoteAdminSettings,
            remoteAddrs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RemoteAddresses: *const fn(
            self: *const INetFwRemoteAdminSettings,
            remoteAddrs: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn(
            self: *const INetFwRemoteAdminSettings,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn(
            self: *const INetFwRemoteAdminSettings,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_IpVersion(self: *const INetFwRemoteAdminSettings, ipVersion: ?*NET_FW_IP_VERSION) callconv(.Inline) HRESULT {
        return self.vtable.get_IpVersion(self, ipVersion);
    }
    pub fn put_IpVersion(self: *const INetFwRemoteAdminSettings, ipVersion: NET_FW_IP_VERSION) callconv(.Inline) HRESULT {
        return self.vtable.put_IpVersion(self, ipVersion);
    }
    pub fn get_Scope(self: *const INetFwRemoteAdminSettings, scope: ?*NET_FW_SCOPE) callconv(.Inline) HRESULT {
        return self.vtable.get_Scope(self, scope);
    }
    pub fn put_Scope(self: *const INetFwRemoteAdminSettings, scope: NET_FW_SCOPE) callconv(.Inline) HRESULT {
        return self.vtable.put_Scope(self, scope);
    }
    pub fn get_RemoteAddresses(self: *const INetFwRemoteAdminSettings, remoteAddrs: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RemoteAddresses(self, remoteAddrs);
    }
    pub fn put_RemoteAddresses(self: *const INetFwRemoteAdminSettings, remoteAddrs: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_RemoteAddresses(self, remoteAddrs);
    }
    pub fn get_Enabled(self: *const INetFwRemoteAdminSettings, enabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Enabled(self, enabled);
    }
    pub fn put_Enabled(self: *const INetFwRemoteAdminSettings, enabled: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_Enabled(self, enabled);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwIcmpSettings_Value = Guid.initString("a6207b2e-7cdd-426a-951e-5e1cbc5afead");
pub const IID_INetFwIcmpSettings = &IID_INetFwIcmpSettings_Value;
pub const INetFwIcmpSettings = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowOutboundDestinationUnreachable: *const fn(
            self: *const INetFwIcmpSettings,
            allow: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowOutboundDestinationUnreachable: *const fn(
            self: *const INetFwIcmpSettings,
            allow: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowRedirect: *const fn(
            self: *const INetFwIcmpSettings,
            allow: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowRedirect: *const fn(
            self: *const INetFwIcmpSettings,
            allow: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowInboundEchoRequest: *const fn(
            self: *const INetFwIcmpSettings,
            allow: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowInboundEchoRequest: *const fn(
            self: *const INetFwIcmpSettings,
            allow: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowOutboundTimeExceeded: *const fn(
            self: *const INetFwIcmpSettings,
            allow: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowOutboundTimeExceeded: *const fn(
            self: *const INetFwIcmpSettings,
            allow: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowOutboundParameterProblem: *const fn(
            self: *const INetFwIcmpSettings,
            allow: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowOutboundParameterProblem: *const fn(
            self: *const INetFwIcmpSettings,
            allow: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowOutboundSourceQuench: *const fn(
            self: *const INetFwIcmpSettings,
            allow: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowOutboundSourceQuench: *const fn(
            self: *const INetFwIcmpSettings,
            allow: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowInboundRouterRequest: *const fn(
            self: *const INetFwIcmpSettings,
            allow: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowInboundRouterRequest: *const fn(
            self: *const INetFwIcmpSettings,
            allow: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowInboundTimestampRequest: *const fn(
            self: *const INetFwIcmpSettings,
            allow: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowInboundTimestampRequest: *const fn(
            self: *const INetFwIcmpSettings,
            allow: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowInboundMaskRequest: *const fn(
            self: *const INetFwIcmpSettings,
            allow: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowInboundMaskRequest: *const fn(
            self: *const INetFwIcmpSettings,
            allow: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowOutboundPacketTooBig: *const fn(
            self: *const INetFwIcmpSettings,
            allow: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowOutboundPacketTooBig: *const fn(
            self: *const INetFwIcmpSettings,
            allow: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_AllowOutboundDestinationUnreachable(self: *const INetFwIcmpSettings, allow: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_AllowOutboundDestinationUnreachable(self, allow);
    }
    pub fn put_AllowOutboundDestinationUnreachable(self: *const INetFwIcmpSettings, allow: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_AllowOutboundDestinationUnreachable(self, allow);
    }
    pub fn get_AllowRedirect(self: *const INetFwIcmpSettings, allow: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_AllowRedirect(self, allow);
    }
    pub fn put_AllowRedirect(self: *const INetFwIcmpSettings, allow: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_AllowRedirect(self, allow);
    }
    pub fn get_AllowInboundEchoRequest(self: *const INetFwIcmpSettings, allow: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_AllowInboundEchoRequest(self, allow);
    }
    pub fn put_AllowInboundEchoRequest(self: *const INetFwIcmpSettings, allow: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_AllowInboundEchoRequest(self, allow);
    }
    pub fn get_AllowOutboundTimeExceeded(self: *const INetFwIcmpSettings, allow: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_AllowOutboundTimeExceeded(self, allow);
    }
    pub fn put_AllowOutboundTimeExceeded(self: *const INetFwIcmpSettings, allow: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_AllowOutboundTimeExceeded(self, allow);
    }
    pub fn get_AllowOutboundParameterProblem(self: *const INetFwIcmpSettings, allow: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_AllowOutboundParameterProblem(self, allow);
    }
    pub fn put_AllowOutboundParameterProblem(self: *const INetFwIcmpSettings, allow: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_AllowOutboundParameterProblem(self, allow);
    }
    pub fn get_AllowOutboundSourceQuench(self: *const INetFwIcmpSettings, allow: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_AllowOutboundSourceQuench(self, allow);
    }
    pub fn put_AllowOutboundSourceQuench(self: *const INetFwIcmpSettings, allow: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_AllowOutboundSourceQuench(self, allow);
    }
    pub fn get_AllowInboundRouterRequest(self: *const INetFwIcmpSettings, allow: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_AllowInboundRouterRequest(self, allow);
    }
    pub fn put_AllowInboundRouterRequest(self: *const INetFwIcmpSettings, allow: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_AllowInboundRouterRequest(self, allow);
    }
    pub fn get_AllowInboundTimestampRequest(self: *const INetFwIcmpSettings, allow: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_AllowInboundTimestampRequest(self, allow);
    }
    pub fn put_AllowInboundTimestampRequest(self: *const INetFwIcmpSettings, allow: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_AllowInboundTimestampRequest(self, allow);
    }
    pub fn get_AllowInboundMaskRequest(self: *const INetFwIcmpSettings, allow: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_AllowInboundMaskRequest(self, allow);
    }
    pub fn put_AllowInboundMaskRequest(self: *const INetFwIcmpSettings, allow: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_AllowInboundMaskRequest(self, allow);
    }
    pub fn get_AllowOutboundPacketTooBig(self: *const INetFwIcmpSettings, allow: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_AllowOutboundPacketTooBig(self, allow);
    }
    pub fn put_AllowOutboundPacketTooBig(self: *const INetFwIcmpSettings, allow: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_AllowOutboundPacketTooBig(self, allow);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwOpenPort_Value = Guid.initString("e0483ba0-47ff-4d9c-a6d6-7741d0b195f7");
pub const IID_INetFwOpenPort = &IID_INetFwOpenPort_Value;
pub const INetFwOpenPort = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn(
            self: *const INetFwOpenPort,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn(
            self: *const INetFwOpenPort,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IpVersion: *const fn(
            self: *const INetFwOpenPort,
            ipVersion: ?*NET_FW_IP_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IpVersion: *const fn(
            self: *const INetFwOpenPort,
            ipVersion: NET_FW_IP_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Protocol: *const fn(
            self: *const INetFwOpenPort,
            ipProtocol: ?*NET_FW_IP_PROTOCOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Protocol: *const fn(
            self: *const INetFwOpenPort,
            ipProtocol: NET_FW_IP_PROTOCOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Port: *const fn(
            self: *const INetFwOpenPort,
            portNumber: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Port: *const fn(
            self: *const INetFwOpenPort,
            portNumber: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Scope: *const fn(
            self: *const INetFwOpenPort,
            scope: ?*NET_FW_SCOPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Scope: *const fn(
            self: *const INetFwOpenPort,
            scope: NET_FW_SCOPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteAddresses: *const fn(
            self: *const INetFwOpenPort,
            remoteAddrs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RemoteAddresses: *const fn(
            self: *const INetFwOpenPort,
            remoteAddrs: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn(
            self: *const INetFwOpenPort,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn(
            self: *const INetFwOpenPort,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BuiltIn: *const fn(
            self: *const INetFwOpenPort,
            builtIn: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Name(self: *const INetFwOpenPort, name: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Name(self, name);
    }
    pub fn put_Name(self: *const INetFwOpenPort, name: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Name(self, name);
    }
    pub fn get_IpVersion(self: *const INetFwOpenPort, ipVersion: ?*NET_FW_IP_VERSION) callconv(.Inline) HRESULT {
        return self.vtable.get_IpVersion(self, ipVersion);
    }
    pub fn put_IpVersion(self: *const INetFwOpenPort, ipVersion: NET_FW_IP_VERSION) callconv(.Inline) HRESULT {
        return self.vtable.put_IpVersion(self, ipVersion);
    }
    pub fn get_Protocol(self: *const INetFwOpenPort, ipProtocol: ?*NET_FW_IP_PROTOCOL) callconv(.Inline) HRESULT {
        return self.vtable.get_Protocol(self, ipProtocol);
    }
    pub fn put_Protocol(self: *const INetFwOpenPort, ipProtocol: NET_FW_IP_PROTOCOL) callconv(.Inline) HRESULT {
        return self.vtable.put_Protocol(self, ipProtocol);
    }
    pub fn get_Port(self: *const INetFwOpenPort, portNumber: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Port(self, portNumber);
    }
    pub fn put_Port(self: *const INetFwOpenPort, portNumber: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Port(self, portNumber);
    }
    pub fn get_Scope(self: *const INetFwOpenPort, scope: ?*NET_FW_SCOPE) callconv(.Inline) HRESULT {
        return self.vtable.get_Scope(self, scope);
    }
    pub fn put_Scope(self: *const INetFwOpenPort, scope: NET_FW_SCOPE) callconv(.Inline) HRESULT {
        return self.vtable.put_Scope(self, scope);
    }
    pub fn get_RemoteAddresses(self: *const INetFwOpenPort, remoteAddrs: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RemoteAddresses(self, remoteAddrs);
    }
    pub fn put_RemoteAddresses(self: *const INetFwOpenPort, remoteAddrs: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_RemoteAddresses(self, remoteAddrs);
    }
    pub fn get_Enabled(self: *const INetFwOpenPort, enabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Enabled(self, enabled);
    }
    pub fn put_Enabled(self: *const INetFwOpenPort, enabled: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_Enabled(self, enabled);
    }
    pub fn get_BuiltIn(self: *const INetFwOpenPort, builtIn: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_BuiltIn(self, builtIn);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwOpenPorts_Value = Guid.initString("c0e9d7fa-e07e-430a-b19a-090ce82d92e2");
pub const IID_INetFwOpenPorts = &IID_INetFwOpenPorts_Value;
pub const INetFwOpenPorts = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const INetFwOpenPorts,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const INetFwOpenPorts,
            port: ?*INetFwOpenPort,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const INetFwOpenPorts,
            portNumber: i32,
            ipProtocol: NET_FW_IP_PROTOCOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn(
            self: *const INetFwOpenPorts,
            portNumber: i32,
            ipProtocol: NET_FW_IP_PROTOCOL,
            openPort: ?*?*INetFwOpenPort,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const INetFwOpenPorts,
            newEnum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Count(self: *const INetFwOpenPorts, count: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, count);
    }
    pub fn Add(self: *const INetFwOpenPorts, port: ?*INetFwOpenPort) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, port);
    }
    pub fn Remove(self: *const INetFwOpenPorts, portNumber: i32, ipProtocol: NET_FW_IP_PROTOCOL) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, portNumber, ipProtocol);
    }
    pub fn Item(self: *const INetFwOpenPorts, portNumber: i32, ipProtocol: NET_FW_IP_PROTOCOL, openPort: ?*?*INetFwOpenPort) callconv(.Inline) HRESULT {
        return self.vtable.Item(self, portNumber, ipProtocol, openPort);
    }
    pub fn get__NewEnum(self: *const INetFwOpenPorts, newEnum: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, newEnum);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwService_Value = Guid.initString("79fd57c8-908e-4a36-9888-d5b3f0a444cf");
pub const IID_INetFwService = &IID_INetFwService_Value;
pub const INetFwService = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn(
            self: *const INetFwService,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn(
            self: *const INetFwService,
            type: ?*NET_FW_SERVICE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Customized: *const fn(
            self: *const INetFwService,
            customized: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IpVersion: *const fn(
            self: *const INetFwService,
            ipVersion: ?*NET_FW_IP_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IpVersion: *const fn(
            self: *const INetFwService,
            ipVersion: NET_FW_IP_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Scope: *const fn(
            self: *const INetFwService,
            scope: ?*NET_FW_SCOPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Scope: *const fn(
            self: *const INetFwService,
            scope: NET_FW_SCOPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteAddresses: *const fn(
            self: *const INetFwService,
            remoteAddrs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RemoteAddresses: *const fn(
            self: *const INetFwService,
            remoteAddrs: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn(
            self: *const INetFwService,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn(
            self: *const INetFwService,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GloballyOpenPorts: *const fn(
            self: *const INetFwService,
            openPorts: ?*?*INetFwOpenPorts,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Name(self: *const INetFwService, name: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Name(self, name);
    }
    pub fn get_Type(self: *const INetFwService, @"type": ?*NET_FW_SERVICE_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.get_Type(self, @"type");
    }
    pub fn get_Customized(self: *const INetFwService, customized: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Customized(self, customized);
    }
    pub fn get_IpVersion(self: *const INetFwService, ipVersion: ?*NET_FW_IP_VERSION) callconv(.Inline) HRESULT {
        return self.vtable.get_IpVersion(self, ipVersion);
    }
    pub fn put_IpVersion(self: *const INetFwService, ipVersion: NET_FW_IP_VERSION) callconv(.Inline) HRESULT {
        return self.vtable.put_IpVersion(self, ipVersion);
    }
    pub fn get_Scope(self: *const INetFwService, scope: ?*NET_FW_SCOPE) callconv(.Inline) HRESULT {
        return self.vtable.get_Scope(self, scope);
    }
    pub fn put_Scope(self: *const INetFwService, scope: NET_FW_SCOPE) callconv(.Inline) HRESULT {
        return self.vtable.put_Scope(self, scope);
    }
    pub fn get_RemoteAddresses(self: *const INetFwService, remoteAddrs: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RemoteAddresses(self, remoteAddrs);
    }
    pub fn put_RemoteAddresses(self: *const INetFwService, remoteAddrs: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_RemoteAddresses(self, remoteAddrs);
    }
    pub fn get_Enabled(self: *const INetFwService, enabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Enabled(self, enabled);
    }
    pub fn put_Enabled(self: *const INetFwService, enabled: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_Enabled(self, enabled);
    }
    pub fn get_GloballyOpenPorts(self: *const INetFwService, openPorts: ?*?*INetFwOpenPorts) callconv(.Inline) HRESULT {
        return self.vtable.get_GloballyOpenPorts(self, openPorts);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwServices_Value = Guid.initString("79649bb4-903e-421b-94c9-79848e79f6ee");
pub const IID_INetFwServices = &IID_INetFwServices_Value;
pub const INetFwServices = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const INetFwServices,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn(
            self: *const INetFwServices,
            svcType: NET_FW_SERVICE_TYPE,
            service: ?*?*INetFwService,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const INetFwServices,
            newEnum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Count(self: *const INetFwServices, count: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, count);
    }
    pub fn Item(self: *const INetFwServices, svcType: NET_FW_SERVICE_TYPE, service: ?*?*INetFwService) callconv(.Inline) HRESULT {
        return self.vtable.Item(self, svcType, service);
    }
    pub fn get__NewEnum(self: *const INetFwServices, newEnum: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, newEnum);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwAuthorizedApplication_Value = Guid.initString("b5e64ffa-c2c5-444e-a301-fb5e00018050");
pub const IID_INetFwAuthorizedApplication = &IID_INetFwAuthorizedApplication_Value;
pub const INetFwAuthorizedApplication = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn(
            self: *const INetFwAuthorizedApplication,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn(
            self: *const INetFwAuthorizedApplication,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProcessImageFileName: *const fn(
            self: *const INetFwAuthorizedApplication,
            imageFileName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProcessImageFileName: *const fn(
            self: *const INetFwAuthorizedApplication,
            imageFileName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IpVersion: *const fn(
            self: *const INetFwAuthorizedApplication,
            ipVersion: ?*NET_FW_IP_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IpVersion: *const fn(
            self: *const INetFwAuthorizedApplication,
            ipVersion: NET_FW_IP_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Scope: *const fn(
            self: *const INetFwAuthorizedApplication,
            scope: ?*NET_FW_SCOPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Scope: *const fn(
            self: *const INetFwAuthorizedApplication,
            scope: NET_FW_SCOPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteAddresses: *const fn(
            self: *const INetFwAuthorizedApplication,
            remoteAddrs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RemoteAddresses: *const fn(
            self: *const INetFwAuthorizedApplication,
            remoteAddrs: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn(
            self: *const INetFwAuthorizedApplication,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn(
            self: *const INetFwAuthorizedApplication,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Name(self: *const INetFwAuthorizedApplication, name: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Name(self, name);
    }
    pub fn put_Name(self: *const INetFwAuthorizedApplication, name: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Name(self, name);
    }
    pub fn get_ProcessImageFileName(self: *const INetFwAuthorizedApplication, imageFileName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ProcessImageFileName(self, imageFileName);
    }
    pub fn put_ProcessImageFileName(self: *const INetFwAuthorizedApplication, imageFileName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ProcessImageFileName(self, imageFileName);
    }
    pub fn get_IpVersion(self: *const INetFwAuthorizedApplication, ipVersion: ?*NET_FW_IP_VERSION) callconv(.Inline) HRESULT {
        return self.vtable.get_IpVersion(self, ipVersion);
    }
    pub fn put_IpVersion(self: *const INetFwAuthorizedApplication, ipVersion: NET_FW_IP_VERSION) callconv(.Inline) HRESULT {
        return self.vtable.put_IpVersion(self, ipVersion);
    }
    pub fn get_Scope(self: *const INetFwAuthorizedApplication, scope: ?*NET_FW_SCOPE) callconv(.Inline) HRESULT {
        return self.vtable.get_Scope(self, scope);
    }
    pub fn put_Scope(self: *const INetFwAuthorizedApplication, scope: NET_FW_SCOPE) callconv(.Inline) HRESULT {
        return self.vtable.put_Scope(self, scope);
    }
    pub fn get_RemoteAddresses(self: *const INetFwAuthorizedApplication, remoteAddrs: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RemoteAddresses(self, remoteAddrs);
    }
    pub fn put_RemoteAddresses(self: *const INetFwAuthorizedApplication, remoteAddrs: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_RemoteAddresses(self, remoteAddrs);
    }
    pub fn get_Enabled(self: *const INetFwAuthorizedApplication, enabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Enabled(self, enabled);
    }
    pub fn put_Enabled(self: *const INetFwAuthorizedApplication, enabled: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_Enabled(self, enabled);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwAuthorizedApplications_Value = Guid.initString("644efd52-ccf9-486c-97a2-39f352570b30");
pub const IID_INetFwAuthorizedApplications = &IID_INetFwAuthorizedApplications_Value;
pub const INetFwAuthorizedApplications = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const INetFwAuthorizedApplications,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const INetFwAuthorizedApplications,
            app: ?*INetFwAuthorizedApplication,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const INetFwAuthorizedApplications,
            imageFileName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn(
            self: *const INetFwAuthorizedApplications,
            imageFileName: ?BSTR,
            app: ?*?*INetFwAuthorizedApplication,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const INetFwAuthorizedApplications,
            newEnum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Count(self: *const INetFwAuthorizedApplications, count: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, count);
    }
    pub fn Add(self: *const INetFwAuthorizedApplications, app: ?*INetFwAuthorizedApplication) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, app);
    }
    pub fn Remove(self: *const INetFwAuthorizedApplications, imageFileName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, imageFileName);
    }
    pub fn Item(self: *const INetFwAuthorizedApplications, imageFileName: ?BSTR, app: ?*?*INetFwAuthorizedApplication) callconv(.Inline) HRESULT {
        return self.vtable.Item(self, imageFileName, app);
    }
    pub fn get__NewEnum(self: *const INetFwAuthorizedApplications, newEnum: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, newEnum);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwRule_Value = Guid.initString("af230d27-baba-4e42-aced-f524f22cfce2");
pub const IID_INetFwRule = &IID_INetFwRule_Value;
pub const INetFwRule = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn(
            self: *const INetFwRule,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn(
            self: *const INetFwRule,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn(
            self: *const INetFwRule,
            desc: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn(
            self: *const INetFwRule,
            desc: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ApplicationName: *const fn(
            self: *const INetFwRule,
            imageFileName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ApplicationName: *const fn(
            self: *const INetFwRule,
            imageFileName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServiceName: *const fn(
            self: *const INetFwRule,
            serviceName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ServiceName: *const fn(
            self: *const INetFwRule,
            serviceName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Protocol: *const fn(
            self: *const INetFwRule,
            protocol: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Protocol: *const fn(
            self: *const INetFwRule,
            protocol: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalPorts: *const fn(
            self: *const INetFwRule,
            portNumbers: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LocalPorts: *const fn(
            self: *const INetFwRule,
            portNumbers: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemotePorts: *const fn(
            self: *const INetFwRule,
            portNumbers: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RemotePorts: *const fn(
            self: *const INetFwRule,
            portNumbers: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalAddresses: *const fn(
            self: *const INetFwRule,
            localAddrs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LocalAddresses: *const fn(
            self: *const INetFwRule,
            localAddrs: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteAddresses: *const fn(
            self: *const INetFwRule,
            remoteAddrs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RemoteAddresses: *const fn(
            self: *const INetFwRule,
            remoteAddrs: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IcmpTypesAndCodes: *const fn(
            self: *const INetFwRule,
            icmpTypesAndCodes: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IcmpTypesAndCodes: *const fn(
            self: *const INetFwRule,
            icmpTypesAndCodes: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Direction: *const fn(
            self: *const INetFwRule,
            dir: ?*NET_FW_RULE_DIRECTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Direction: *const fn(
            self: *const INetFwRule,
            dir: NET_FW_RULE_DIRECTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Interfaces: *const fn(
            self: *const INetFwRule,
            interfaces: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Interfaces: *const fn(
            self: *const INetFwRule,
            interfaces: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InterfaceTypes: *const fn(
            self: *const INetFwRule,
            interfaceTypes: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_InterfaceTypes: *const fn(
            self: *const INetFwRule,
            interfaceTypes: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn(
            self: *const INetFwRule,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn(
            self: *const INetFwRule,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Grouping: *const fn(
            self: *const INetFwRule,
            context: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Grouping: *const fn(
            self: *const INetFwRule,
            context: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Profiles: *const fn(
            self: *const INetFwRule,
            profileTypesBitmask: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Profiles: *const fn(
            self: *const INetFwRule,
            profileTypesBitmask: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EdgeTraversal: *const fn(
            self: *const INetFwRule,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EdgeTraversal: *const fn(
            self: *const INetFwRule,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Action: *const fn(
            self: *const INetFwRule,
            action: ?*NET_FW_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Action: *const fn(
            self: *const INetFwRule,
            action: NET_FW_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Name(self: *const INetFwRule, name: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Name(self, name);
    }
    pub fn put_Name(self: *const INetFwRule, name: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Name(self, name);
    }
    pub fn get_Description(self: *const INetFwRule, desc: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Description(self, desc);
    }
    pub fn put_Description(self: *const INetFwRule, desc: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Description(self, desc);
    }
    pub fn get_ApplicationName(self: *const INetFwRule, imageFileName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ApplicationName(self, imageFileName);
    }
    pub fn put_ApplicationName(self: *const INetFwRule, imageFileName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ApplicationName(self, imageFileName);
    }
    pub fn get_ServiceName(self: *const INetFwRule, serviceName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ServiceName(self, serviceName);
    }
    pub fn put_ServiceName(self: *const INetFwRule, serviceName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ServiceName(self, serviceName);
    }
    pub fn get_Protocol(self: *const INetFwRule, protocol: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Protocol(self, protocol);
    }
    pub fn put_Protocol(self: *const INetFwRule, protocol: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Protocol(self, protocol);
    }
    pub fn get_LocalPorts(self: *const INetFwRule, portNumbers: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_LocalPorts(self, portNumbers);
    }
    pub fn put_LocalPorts(self: *const INetFwRule, portNumbers: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_LocalPorts(self, portNumbers);
    }
    pub fn get_RemotePorts(self: *const INetFwRule, portNumbers: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RemotePorts(self, portNumbers);
    }
    pub fn put_RemotePorts(self: *const INetFwRule, portNumbers: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_RemotePorts(self, portNumbers);
    }
    pub fn get_LocalAddresses(self: *const INetFwRule, localAddrs: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_LocalAddresses(self, localAddrs);
    }
    pub fn put_LocalAddresses(self: *const INetFwRule, localAddrs: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_LocalAddresses(self, localAddrs);
    }
    pub fn get_RemoteAddresses(self: *const INetFwRule, remoteAddrs: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RemoteAddresses(self, remoteAddrs);
    }
    pub fn put_RemoteAddresses(self: *const INetFwRule, remoteAddrs: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_RemoteAddresses(self, remoteAddrs);
    }
    pub fn get_IcmpTypesAndCodes(self: *const INetFwRule, icmpTypesAndCodes: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_IcmpTypesAndCodes(self, icmpTypesAndCodes);
    }
    pub fn put_IcmpTypesAndCodes(self: *const INetFwRule, icmpTypesAndCodes: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_IcmpTypesAndCodes(self, icmpTypesAndCodes);
    }
    pub fn get_Direction(self: *const INetFwRule, dir: ?*NET_FW_RULE_DIRECTION) callconv(.Inline) HRESULT {
        return self.vtable.get_Direction(self, dir);
    }
    pub fn put_Direction(self: *const INetFwRule, dir: NET_FW_RULE_DIRECTION) callconv(.Inline) HRESULT {
        return self.vtable.put_Direction(self, dir);
    }
    pub fn get_Interfaces(self: *const INetFwRule, interfaces: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Interfaces(self, interfaces);
    }
    pub fn put_Interfaces(self: *const INetFwRule, interfaces: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_Interfaces(self, interfaces);
    }
    pub fn get_InterfaceTypes(self: *const INetFwRule, interfaceTypes: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_InterfaceTypes(self, interfaceTypes);
    }
    pub fn put_InterfaceTypes(self: *const INetFwRule, interfaceTypes: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_InterfaceTypes(self, interfaceTypes);
    }
    pub fn get_Enabled(self: *const INetFwRule, enabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Enabled(self, enabled);
    }
    pub fn put_Enabled(self: *const INetFwRule, enabled: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_Enabled(self, enabled);
    }
    pub fn get_Grouping(self: *const INetFwRule, context: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Grouping(self, context);
    }
    pub fn put_Grouping(self: *const INetFwRule, context: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Grouping(self, context);
    }
    pub fn get_Profiles(self: *const INetFwRule, profileTypesBitmask: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Profiles(self, profileTypesBitmask);
    }
    pub fn put_Profiles(self: *const INetFwRule, profileTypesBitmask: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Profiles(self, profileTypesBitmask);
    }
    pub fn get_EdgeTraversal(self: *const INetFwRule, enabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_EdgeTraversal(self, enabled);
    }
    pub fn put_EdgeTraversal(self: *const INetFwRule, enabled: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_EdgeTraversal(self, enabled);
    }
    pub fn get_Action(self: *const INetFwRule, action: ?*NET_FW_ACTION) callconv(.Inline) HRESULT {
        return self.vtable.get_Action(self, action);
    }
    pub fn put_Action(self: *const INetFwRule, action: NET_FW_ACTION) callconv(.Inline) HRESULT {
        return self.vtable.put_Action(self, action);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_INetFwRule2_Value = Guid.initString("9c27c8da-189b-4dde-89f7-8b39a316782c");
pub const IID_INetFwRule2 = &IID_INetFwRule2_Value;
pub const INetFwRule2 = extern union {
    pub const VTable = extern struct {
        base: INetFwRule.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EdgeTraversalOptions: *const fn(
            self: *const INetFwRule2,
            lOptions: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EdgeTraversalOptions: *const fn(
            self: *const INetFwRule2,
            lOptions: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    INetFwRule: INetFwRule,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_EdgeTraversalOptions(self: *const INetFwRule2, lOptions: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_EdgeTraversalOptions(self, lOptions);
    }
    pub fn put_EdgeTraversalOptions(self: *const INetFwRule2, lOptions: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_EdgeTraversalOptions(self, lOptions);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_INetFwRule3_Value = Guid.initString("b21563ff-d696-4222-ab46-4e89b73ab34a");
pub const IID_INetFwRule3 = &IID_INetFwRule3_Value;
pub const INetFwRule3 = extern union {
    pub const VTable = extern struct {
        base: INetFwRule2.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalAppPackageId: *const fn(
            self: *const INetFwRule3,
            wszPackageId: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LocalAppPackageId: *const fn(
            self: *const INetFwRule3,
            wszPackageId: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalUserOwner: *const fn(
            self: *const INetFwRule3,
            wszUserOwner: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LocalUserOwner: *const fn(
            self: *const INetFwRule3,
            wszUserOwner: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalUserAuthorizedList: *const fn(
            self: *const INetFwRule3,
            wszUserAuthList: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LocalUserAuthorizedList: *const fn(
            self: *const INetFwRule3,
            wszUserAuthList: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteUserAuthorizedList: *const fn(
            self: *const INetFwRule3,
            wszUserAuthList: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RemoteUserAuthorizedList: *const fn(
            self: *const INetFwRule3,
            wszUserAuthList: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteMachineAuthorizedList: *const fn(
            self: *const INetFwRule3,
            wszUserAuthList: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RemoteMachineAuthorizedList: *const fn(
            self: *const INetFwRule3,
            wszUserAuthList: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SecureFlags: *const fn(
            self: *const INetFwRule3,
            lOptions: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SecureFlags: *const fn(
            self: *const INetFwRule3,
            lOptions: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    INetFwRule2: INetFwRule2,
    INetFwRule: INetFwRule,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_LocalAppPackageId(self: *const INetFwRule3, wszPackageId: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_LocalAppPackageId(self, wszPackageId);
    }
    pub fn put_LocalAppPackageId(self: *const INetFwRule3, wszPackageId: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_LocalAppPackageId(self, wszPackageId);
    }
    pub fn get_LocalUserOwner(self: *const INetFwRule3, wszUserOwner: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_LocalUserOwner(self, wszUserOwner);
    }
    pub fn put_LocalUserOwner(self: *const INetFwRule3, wszUserOwner: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_LocalUserOwner(self, wszUserOwner);
    }
    pub fn get_LocalUserAuthorizedList(self: *const INetFwRule3, wszUserAuthList: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_LocalUserAuthorizedList(self, wszUserAuthList);
    }
    pub fn put_LocalUserAuthorizedList(self: *const INetFwRule3, wszUserAuthList: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_LocalUserAuthorizedList(self, wszUserAuthList);
    }
    pub fn get_RemoteUserAuthorizedList(self: *const INetFwRule3, wszUserAuthList: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RemoteUserAuthorizedList(self, wszUserAuthList);
    }
    pub fn put_RemoteUserAuthorizedList(self: *const INetFwRule3, wszUserAuthList: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_RemoteUserAuthorizedList(self, wszUserAuthList);
    }
    pub fn get_RemoteMachineAuthorizedList(self: *const INetFwRule3, wszUserAuthList: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RemoteMachineAuthorizedList(self, wszUserAuthList);
    }
    pub fn put_RemoteMachineAuthorizedList(self: *const INetFwRule3, wszUserAuthList: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_RemoteMachineAuthorizedList(self, wszUserAuthList);
    }
    pub fn get_SecureFlags(self: *const INetFwRule3, lOptions: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_SecureFlags(self, lOptions);
    }
    pub fn put_SecureFlags(self: *const INetFwRule3, lOptions: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_SecureFlags(self, lOptions);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwRules_Value = Guid.initString("9c4c6277-5027-441e-afae-ca1f542da009");
pub const IID_INetFwRules = &IID_INetFwRules_Value;
pub const INetFwRules = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const INetFwRules,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const INetFwRules,
            rule: ?*INetFwRule,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const INetFwRules,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn(
            self: *const INetFwRules,
            name: ?BSTR,
            rule: ?*?*INetFwRule,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const INetFwRules,
            newEnum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Count(self: *const INetFwRules, count: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, count);
    }
    pub fn Add(self: *const INetFwRules, rule: ?*INetFwRule) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, rule);
    }
    pub fn Remove(self: *const INetFwRules, name: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, name);
    }
    pub fn Item(self: *const INetFwRules, name: ?BSTR, rule: ?*?*INetFwRule) callconv(.Inline) HRESULT {
        return self.vtable.Item(self, name, rule);
    }
    pub fn get__NewEnum(self: *const INetFwRules, newEnum: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, newEnum);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwServiceRestriction_Value = Guid.initString("8267bbe3-f890-491c-b7b6-2db1ef0e5d2b");
pub const IID_INetFwServiceRestriction = &IID_INetFwServiceRestriction_Value;
pub const INetFwServiceRestriction = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        RestrictService: *const fn(
            self: *const INetFwServiceRestriction,
            serviceName: ?BSTR,
            appName: ?BSTR,
            restrictService: i16,
            serviceSidRestricted: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ServiceRestricted: *const fn(
            self: *const INetFwServiceRestriction,
            serviceName: ?BSTR,
            appName: ?BSTR,
            serviceRestricted: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Rules: *const fn(
            self: *const INetFwServiceRestriction,
            rules: ?*?*INetFwRules,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn RestrictService(self: *const INetFwServiceRestriction, serviceName: ?BSTR, appName: ?BSTR, restrictService: i16, serviceSidRestricted: i16) callconv(.Inline) HRESULT {
        return self.vtable.RestrictService(self, serviceName, appName, restrictService, serviceSidRestricted);
    }
    pub fn ServiceRestricted(self: *const INetFwServiceRestriction, serviceName: ?BSTR, appName: ?BSTR, serviceRestricted: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.ServiceRestricted(self, serviceName, appName, serviceRestricted);
    }
    pub fn get_Rules(self: *const INetFwServiceRestriction, rules: ?*?*INetFwRules) callconv(.Inline) HRESULT {
        return self.vtable.get_Rules(self, rules);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwProfile_Value = Guid.initString("174a0dda-e9f9-449d-993b-21ab667ca456");
pub const IID_INetFwProfile = &IID_INetFwProfile_Value;
pub const INetFwProfile = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn(
            self: *const INetFwProfile,
            type: ?*NET_FW_PROFILE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FirewallEnabled: *const fn(
            self: *const INetFwProfile,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FirewallEnabled: *const fn(
            self: *const INetFwProfile,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExceptionsNotAllowed: *const fn(
            self: *const INetFwProfile,
            notAllowed: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ExceptionsNotAllowed: *const fn(
            self: *const INetFwProfile,
            notAllowed: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NotificationsDisabled: *const fn(
            self: *const INetFwProfile,
            disabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NotificationsDisabled: *const fn(
            self: *const INetFwProfile,
            disabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UnicastResponsesToMulticastBroadcastDisabled: *const fn(
            self: *const INetFwProfile,
            disabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UnicastResponsesToMulticastBroadcastDisabled: *const fn(
            self: *const INetFwProfile,
            disabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteAdminSettings: *const fn(
            self: *const INetFwProfile,
            remoteAdminSettings: ?*?*INetFwRemoteAdminSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IcmpSettings: *const fn(
            self: *const INetFwProfile,
            icmpSettings: ?*?*INetFwIcmpSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GloballyOpenPorts: *const fn(
            self: *const INetFwProfile,
            openPorts: ?*?*INetFwOpenPorts,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Services: *const fn(
            self: *const INetFwProfile,
            services: ?*?*INetFwServices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthorizedApplications: *const fn(
            self: *const INetFwProfile,
            apps: ?*?*INetFwAuthorizedApplications,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Type(self: *const INetFwProfile, @"type": ?*NET_FW_PROFILE_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.get_Type(self, @"type");
    }
    pub fn get_FirewallEnabled(self: *const INetFwProfile, enabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_FirewallEnabled(self, enabled);
    }
    pub fn put_FirewallEnabled(self: *const INetFwProfile, enabled: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_FirewallEnabled(self, enabled);
    }
    pub fn get_ExceptionsNotAllowed(self: *const INetFwProfile, notAllowed: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_ExceptionsNotAllowed(self, notAllowed);
    }
    pub fn put_ExceptionsNotAllowed(self: *const INetFwProfile, notAllowed: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_ExceptionsNotAllowed(self, notAllowed);
    }
    pub fn get_NotificationsDisabled(self: *const INetFwProfile, disabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_NotificationsDisabled(self, disabled);
    }
    pub fn put_NotificationsDisabled(self: *const INetFwProfile, disabled: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_NotificationsDisabled(self, disabled);
    }
    pub fn get_UnicastResponsesToMulticastBroadcastDisabled(self: *const INetFwProfile, disabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_UnicastResponsesToMulticastBroadcastDisabled(self, disabled);
    }
    pub fn put_UnicastResponsesToMulticastBroadcastDisabled(self: *const INetFwProfile, disabled: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_UnicastResponsesToMulticastBroadcastDisabled(self, disabled);
    }
    pub fn get_RemoteAdminSettings(self: *const INetFwProfile, remoteAdminSettings: ?*?*INetFwRemoteAdminSettings) callconv(.Inline) HRESULT {
        return self.vtable.get_RemoteAdminSettings(self, remoteAdminSettings);
    }
    pub fn get_IcmpSettings(self: *const INetFwProfile, icmpSettings: ?*?*INetFwIcmpSettings) callconv(.Inline) HRESULT {
        return self.vtable.get_IcmpSettings(self, icmpSettings);
    }
    pub fn get_GloballyOpenPorts(self: *const INetFwProfile, openPorts: ?*?*INetFwOpenPorts) callconv(.Inline) HRESULT {
        return self.vtable.get_GloballyOpenPorts(self, openPorts);
    }
    pub fn get_Services(self: *const INetFwProfile, services: ?*?*INetFwServices) callconv(.Inline) HRESULT {
        return self.vtable.get_Services(self, services);
    }
    pub fn get_AuthorizedApplications(self: *const INetFwProfile, apps: ?*?*INetFwAuthorizedApplications) callconv(.Inline) HRESULT {
        return self.vtable.get_AuthorizedApplications(self, apps);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwPolicy_Value = Guid.initString("d46d2478-9ac9-4008-9dc7-5563ce5536cc");
pub const IID_INetFwPolicy = &IID_INetFwPolicy_Value;
pub const INetFwPolicy = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentProfile: *const fn(
            self: *const INetFwPolicy,
            profile: ?*?*INetFwProfile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProfileByType: *const fn(
            self: *const INetFwPolicy,
            profileType: NET_FW_PROFILE_TYPE,
            profile: ?*?*INetFwProfile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_CurrentProfile(self: *const INetFwPolicy, profile: ?*?*INetFwProfile) callconv(.Inline) HRESULT {
        return self.vtable.get_CurrentProfile(self, profile);
    }
    pub fn GetProfileByType(self: *const INetFwPolicy, profileType: NET_FW_PROFILE_TYPE, profile: ?*?*INetFwProfile) callconv(.Inline) HRESULT {
        return self.vtable.GetProfileByType(self, profileType, profile);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwPolicy2_Value = Guid.initString("98325047-c671-4174-8d81-defcd3f03186");
pub const IID_INetFwPolicy2 = &IID_INetFwPolicy2_Value;
pub const INetFwPolicy2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentProfileTypes: *const fn(
            self: *const INetFwPolicy2,
            profileTypesBitmask: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_FirewallEnabled: *const fn(
            self: *const INetFwPolicy2,
            profileType: NET_FW_PROFILE_TYPE2,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_FirewallEnabled: *const fn(
            self: *const INetFwPolicy2,
            profileType: NET_FW_PROFILE_TYPE2,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ExcludedInterfaces: *const fn(
            self: *const INetFwPolicy2,
            profileType: NET_FW_PROFILE_TYPE2,
            interfaces: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ExcludedInterfaces: *const fn(
            self: *const INetFwPolicy2,
            profileType: NET_FW_PROFILE_TYPE2,
            interfaces: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_BlockAllInboundTraffic: *const fn(
            self: *const INetFwPolicy2,
            profileType: NET_FW_PROFILE_TYPE2,
            Block: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_BlockAllInboundTraffic: *const fn(
            self: *const INetFwPolicy2,
            profileType: NET_FW_PROFILE_TYPE2,
            Block: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_NotificationsDisabled: *const fn(
            self: *const INetFwPolicy2,
            profileType: NET_FW_PROFILE_TYPE2,
            disabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_NotificationsDisabled: *const fn(
            self: *const INetFwPolicy2,
            profileType: NET_FW_PROFILE_TYPE2,
            disabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_UnicastResponsesToMulticastBroadcastDisabled: *const fn(
            self: *const INetFwPolicy2,
            profileType: NET_FW_PROFILE_TYPE2,
            disabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_UnicastResponsesToMulticastBroadcastDisabled: *const fn(
            self: *const INetFwPolicy2,
            profileType: NET_FW_PROFILE_TYPE2,
            disabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Rules: *const fn(
            self: *const INetFwPolicy2,
            rules: ?*?*INetFwRules,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServiceRestriction: *const fn(
            self: *const INetFwPolicy2,
            ServiceRestriction: ?*?*INetFwServiceRestriction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableRuleGroup: *const fn(
            self: *const INetFwPolicy2,
            profileTypesBitmask: i32,
            group: ?BSTR,
            enable: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsRuleGroupEnabled: *const fn(
            self: *const INetFwPolicy2,
            profileTypesBitmask: i32,
            group: ?BSTR,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RestoreLocalFirewallDefaults: *const fn(
            self: *const INetFwPolicy2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DefaultInboundAction: *const fn(
            self: *const INetFwPolicy2,
            profileType: NET_FW_PROFILE_TYPE2,
            action: ?*NET_FW_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_DefaultInboundAction: *const fn(
            self: *const INetFwPolicy2,
            profileType: NET_FW_PROFILE_TYPE2,
            action: NET_FW_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DefaultOutboundAction: *const fn(
            self: *const INetFwPolicy2,
            profileType: NET_FW_PROFILE_TYPE2,
            action: ?*NET_FW_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_DefaultOutboundAction: *const fn(
            self: *const INetFwPolicy2,
            profileType: NET_FW_PROFILE_TYPE2,
            action: NET_FW_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IsRuleGroupCurrentlyEnabled: *const fn(
            self: *const INetFwPolicy2,
            group: ?BSTR,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalPolicyModifyState: *const fn(
            self: *const INetFwPolicy2,
            modifyState: ?*NET_FW_MODIFY_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_CurrentProfileTypes(self: *const INetFwPolicy2, profileTypesBitmask: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_CurrentProfileTypes(self, profileTypesBitmask);
    }
    pub fn get_FirewallEnabled(self: *const INetFwPolicy2, profileType: NET_FW_PROFILE_TYPE2, enabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_FirewallEnabled(self, profileType, enabled);
    }
    pub fn put_FirewallEnabled(self: *const INetFwPolicy2, profileType: NET_FW_PROFILE_TYPE2, enabled: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_FirewallEnabled(self, profileType, enabled);
    }
    pub fn get_ExcludedInterfaces(self: *const INetFwPolicy2, profileType: NET_FW_PROFILE_TYPE2, interfaces: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_ExcludedInterfaces(self, profileType, interfaces);
    }
    pub fn put_ExcludedInterfaces(self: *const INetFwPolicy2, profileType: NET_FW_PROFILE_TYPE2, interfaces: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_ExcludedInterfaces(self, profileType, interfaces);
    }
    pub fn get_BlockAllInboundTraffic(self: *const INetFwPolicy2, profileType: NET_FW_PROFILE_TYPE2, Block: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_BlockAllInboundTraffic(self, profileType, Block);
    }
    pub fn put_BlockAllInboundTraffic(self: *const INetFwPolicy2, profileType: NET_FW_PROFILE_TYPE2, Block: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_BlockAllInboundTraffic(self, profileType, Block);
    }
    pub fn get_NotificationsDisabled(self: *const INetFwPolicy2, profileType: NET_FW_PROFILE_TYPE2, disabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_NotificationsDisabled(self, profileType, disabled);
    }
    pub fn put_NotificationsDisabled(self: *const INetFwPolicy2, profileType: NET_FW_PROFILE_TYPE2, disabled: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_NotificationsDisabled(self, profileType, disabled);
    }
    pub fn get_UnicastResponsesToMulticastBroadcastDisabled(self: *const INetFwPolicy2, profileType: NET_FW_PROFILE_TYPE2, disabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_UnicastResponsesToMulticastBroadcastDisabled(self, profileType, disabled);
    }
    pub fn put_UnicastResponsesToMulticastBroadcastDisabled(self: *const INetFwPolicy2, profileType: NET_FW_PROFILE_TYPE2, disabled: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_UnicastResponsesToMulticastBroadcastDisabled(self, profileType, disabled);
    }
    pub fn get_Rules(self: *const INetFwPolicy2, rules: ?*?*INetFwRules) callconv(.Inline) HRESULT {
        return self.vtable.get_Rules(self, rules);
    }
    pub fn get_ServiceRestriction(self: *const INetFwPolicy2, ServiceRestriction: ?*?*INetFwServiceRestriction) callconv(.Inline) HRESULT {
        return self.vtable.get_ServiceRestriction(self, ServiceRestriction);
    }
    pub fn EnableRuleGroup(self: *const INetFwPolicy2, profileTypesBitmask: i32, group: ?BSTR, enable: i16) callconv(.Inline) HRESULT {
        return self.vtable.EnableRuleGroup(self, profileTypesBitmask, group, enable);
    }
    pub fn IsRuleGroupEnabled(self: *const INetFwPolicy2, profileTypesBitmask: i32, group: ?BSTR, enabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.IsRuleGroupEnabled(self, profileTypesBitmask, group, enabled);
    }
    pub fn RestoreLocalFirewallDefaults(self: *const INetFwPolicy2) callconv(.Inline) HRESULT {
        return self.vtable.RestoreLocalFirewallDefaults(self);
    }
    pub fn get_DefaultInboundAction(self: *const INetFwPolicy2, profileType: NET_FW_PROFILE_TYPE2, action: ?*NET_FW_ACTION) callconv(.Inline) HRESULT {
        return self.vtable.get_DefaultInboundAction(self, profileType, action);
    }
    pub fn put_DefaultInboundAction(self: *const INetFwPolicy2, profileType: NET_FW_PROFILE_TYPE2, action: NET_FW_ACTION) callconv(.Inline) HRESULT {
        return self.vtable.put_DefaultInboundAction(self, profileType, action);
    }
    pub fn get_DefaultOutboundAction(self: *const INetFwPolicy2, profileType: NET_FW_PROFILE_TYPE2, action: ?*NET_FW_ACTION) callconv(.Inline) HRESULT {
        return self.vtable.get_DefaultOutboundAction(self, profileType, action);
    }
    pub fn put_DefaultOutboundAction(self: *const INetFwPolicy2, profileType: NET_FW_PROFILE_TYPE2, action: NET_FW_ACTION) callconv(.Inline) HRESULT {
        return self.vtable.put_DefaultOutboundAction(self, profileType, action);
    }
    pub fn get_IsRuleGroupCurrentlyEnabled(self: *const INetFwPolicy2, group: ?BSTR, enabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsRuleGroupCurrentlyEnabled(self, group, enabled);
    }
    pub fn get_LocalPolicyModifyState(self: *const INetFwPolicy2, modifyState: ?*NET_FW_MODIFY_STATE) callconv(.Inline) HRESULT {
        return self.vtable.get_LocalPolicyModifyState(self, modifyState);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwMgr_Value = Guid.initString("f7898af5-cac4-4632-a2ec-da06e5111af2");
pub const IID_INetFwMgr = &IID_INetFwMgr_Value;
pub const INetFwMgr = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalPolicy: *const fn(
            self: *const INetFwMgr,
            localPolicy: ?*?*INetFwPolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentProfileType: *const fn(
            self: *const INetFwMgr,
            profileType: ?*NET_FW_PROFILE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RestoreDefaults: *const fn(
            self: *const INetFwMgr,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPortAllowed: *const fn(
            self: *const INetFwMgr,
            imageFileName: ?BSTR,
            ipVersion: NET_FW_IP_VERSION,
            portNumber: i32,
            localAddress: ?BSTR,
            ipProtocol: NET_FW_IP_PROTOCOL,
            allowed: ?*VARIANT,
            restricted: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsIcmpTypeAllowed: *const fn(
            self: *const INetFwMgr,
            ipVersion: NET_FW_IP_VERSION,
            localAddress: ?BSTR,
            type: u8,
            allowed: ?*VARIANT,
            restricted: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_LocalPolicy(self: *const INetFwMgr, localPolicy: ?*?*INetFwPolicy) callconv(.Inline) HRESULT {
        return self.vtable.get_LocalPolicy(self, localPolicy);
    }
    pub fn get_CurrentProfileType(self: *const INetFwMgr, profileType: ?*NET_FW_PROFILE_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.get_CurrentProfileType(self, profileType);
    }
    pub fn RestoreDefaults(self: *const INetFwMgr) callconv(.Inline) HRESULT {
        return self.vtable.RestoreDefaults(self);
    }
    pub fn IsPortAllowed(self: *const INetFwMgr, imageFileName: ?BSTR, ipVersion: NET_FW_IP_VERSION, portNumber: i32, localAddress: ?BSTR, ipProtocol: NET_FW_IP_PROTOCOL, allowed: ?*VARIANT, restricted: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.IsPortAllowed(self, imageFileName, ipVersion, portNumber, localAddress, ipProtocol, allowed, restricted);
    }
    pub fn IsIcmpTypeAllowed(self: *const INetFwMgr, ipVersion: NET_FW_IP_VERSION, localAddress: ?BSTR, @"type": u8, allowed: ?*VARIANT, restricted: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.IsIcmpTypeAllowed(self, ipVersion, localAddress, @"type", allowed, restricted);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_INetFwProduct_Value = Guid.initString("71881699-18f4-458b-b892-3ffce5e07f75");
pub const IID_INetFwProduct = &IID_INetFwProduct_Value;
pub const INetFwProduct = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RuleCategories: *const fn(
            self: *const INetFwProduct,
            ruleCategories: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RuleCategories: *const fn(
            self: *const INetFwProduct,
            ruleCategories: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayName: *const fn(
            self: *const INetFwProduct,
            displayName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisplayName: *const fn(
            self: *const INetFwProduct,
            displayName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PathToSignedProductExe: *const fn(
            self: *const INetFwProduct,
            path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_RuleCategories(self: *const INetFwProduct, ruleCategories: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_RuleCategories(self, ruleCategories);
    }
    pub fn put_RuleCategories(self: *const INetFwProduct, ruleCategories: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_RuleCategories(self, ruleCategories);
    }
    pub fn get_DisplayName(self: *const INetFwProduct, displayName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_DisplayName(self, displayName);
    }
    pub fn put_DisplayName(self: *const INetFwProduct, displayName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_DisplayName(self, displayName);
    }
    pub fn get_PathToSignedProductExe(self: *const INetFwProduct, path: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_PathToSignedProductExe(self, path);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_INetFwProducts_Value = Guid.initString("39eb36e0-2097-40bd-8af2-63a13b525362");
pub const IID_INetFwProducts = &IID_INetFwProducts_Value;
pub const INetFwProducts = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const INetFwProducts,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Register: *const fn(
            self: *const INetFwProducts,
            product: ?*INetFwProduct,
            registration: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn(
            self: *const INetFwProducts,
            index: i32,
            product: ?*?*INetFwProduct,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const INetFwProducts,
            newEnum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Count(self: *const INetFwProducts, count: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, count);
    }
    pub fn Register(self: *const INetFwProducts, product: ?*INetFwProduct, registration: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.Register(self, product, registration);
    }
    pub fn Item(self: *const INetFwProducts, index: i32, product: ?*?*INetFwProduct) callconv(.Inline) HRESULT {
        return self.vtable.Item(self, index, product);
    }
    pub fn get__NewEnum(self: *const INetFwProducts, newEnum: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, newEnum);
    }
};


//--------------------------------------------------------------------------------
// Section: Functions (8)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-net-isolation-l1-1-0" fn NetworkIsolationSetupAppContainerBinaries(
    applicationContainerSid: ?PSID,
    packageFullName: ?[*:0]const u16,
    packageFolder: ?[*:0]const u16,
    displayName: ?[*:0]const u16,
    bBinariesFullyComputed: BOOL,
    binaries: [*]?PWSTR,
    binariesCount: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-net-isolation-l1-1-0" fn NetworkIsolationRegisterForAppContainerChanges(
    flags: u32,
    callback: ?PAC_CHANGES_CALLBACK_FN,
    context: ?*anyopaque,
    registrationObject: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-net-isolation-l1-1-0" fn NetworkIsolationUnregisterForAppContainerChanges(
    registrationObject: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-net-isolation-l1-1-0" fn NetworkIsolationFreeAppContainers(
    pPublicAppCs: ?*INET_FIREWALL_APP_CONTAINER,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-net-isolation-l1-1-0" fn NetworkIsolationEnumAppContainers(
    Flags: u32,
    pdwNumPublicAppCs: ?*u32,
    ppPublicAppCs: ?*?*INET_FIREWALL_APP_CONTAINER,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-net-isolation-l1-1-0" fn NetworkIsolationGetAppContainerConfig(
    pdwNumPublicAppCs: ?*u32,
    appContainerSids: ?*?*SID_AND_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-net-isolation-l1-1-0" fn NetworkIsolationSetAppContainerConfig(
    dwNumPublicAppCs: u32,
    appContainerSids: [*]SID_AND_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-net-isolation-l1-1-0" fn NetworkIsolationDiagnoseConnectFailureAndGetInfo(
    wszServerName: ?[*:0]const u16,
    netIsoError: ?*NETISO_ERROR_TYPE,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (13)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const HANDLE = @import("../foundation.zig").HANDLE;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IDispatch = @import("../system/com.zig").IDispatch;
const IUnknown = @import("../system/com.zig").IUnknown;
const PSID = @import("../foundation.zig").PSID;
const PWSTR = @import("../foundation.zig").PWSTR;
const SID = @import("../security.zig").SID;
const SID_AND_ATTRIBUTES = @import("../security.zig").SID_AND_ATTRIBUTES;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PAC_CHANGES_CALLBACK_FN")) { _ = PAC_CHANGES_CALLBACK_FN; }
    if (@hasDecl(@This(), "PNETISO_EDP_ID_CALLBACK_FN")) { _ = PNETISO_EDP_ID_CALLBACK_FN; }
    if (@hasDecl(@This(), "PFN_FWADDDYNAMICKEYWORDADDRESS0")) { _ = PFN_FWADDDYNAMICKEYWORDADDRESS0; }
    if (@hasDecl(@This(), "PFN_FWDELETEDYNAMICKEYWORDADDRESS0")) { _ = PFN_FWDELETEDYNAMICKEYWORDADDRESS0; }
    if (@hasDecl(@This(), "PFN_FWENUMDYNAMICKEYWORDADDRESSESBYTYPE0")) { _ = PFN_FWENUMDYNAMICKEYWORDADDRESSESBYTYPE0; }
    if (@hasDecl(@This(), "PFN_FWENUMDYNAMICKEYWORDADDRESSBYID0")) { _ = PFN_FWENUMDYNAMICKEYWORDADDRESSBYID0; }
    if (@hasDecl(@This(), "PFN_FWFREEDYNAMICKEYWORDADDRESSDATA0")) { _ = PFN_FWFREEDYNAMICKEYWORDADDRESSDATA0; }
    if (@hasDecl(@This(), "PFN_FWUPDATEDYNAMICKEYWORDADDRESS0")) { _ = PFN_FWUPDATEDYNAMICKEYWORDADDRESS0; }

    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
