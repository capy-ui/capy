//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (11)
//--------------------------------------------------------------------------------
pub const RADIUS_EXTENSION_INIT = "RadiusExtensionInit";
pub const RADIUS_EXTENSION_TERM = "RadiusExtensionTerm";
pub const RADIUS_EXTENSION_PROCESS = "RadiusExtensionProcess";
pub const RADIUS_EXTENSION_PROCESS_EX = "RadiusExtensionProcessEx";
pub const RADIUS_EXTENSION_FREE_ATTRIBUTES = "RadiusExtensionFreeAttributes";
pub const AUTHSRV_PARAMETERS_KEY_W = "System\\CurrentControlSet\\Services\\AuthSrv\\Parameters";
pub const AUTHSRV_EXTENSIONS_VALUE_W = "ExtensionDLLs";
pub const AUTHSRV_AUTHORIZATION_VALUE_W = "AuthorizationDLLs";
pub const AUTHSRV_ENFORCE_NP_FOR_PAP_CHALLENGE_RESPONSE_VALUE_W = "EnforceNetworkPolicyForPAPBasedChallengeResponse";
pub const RADIUS_EXTENSION_VERSION = @as(u32, 1);
pub const RADIUS_EXTENSION_PROCESS2 = "RadiusExtensionProcess2";

//--------------------------------------------------------------------------------
// Section: Types (66)
//--------------------------------------------------------------------------------
const CLSID_SdoMachine_Value = Guid.initString("e9218ae7-9e91-11d1-bf60-0080c7846bc0");
pub const CLSID_SdoMachine = &CLSID_SdoMachine_Value;

pub const ATTRIBUTEID = enum(u32) {
    ATTRIBUTE_UNDEFINED = 0,
    ATTRIBUTE_MIN_VALUE = 1,
    RADIUS_ATTRIBUTE_USER_PASSWORD = 2,
    RADIUS_ATTRIBUTE_CHAP_PASSWORD = 3,
    RADIUS_ATTRIBUTE_NAS_IP_ADDRESS = 4,
    RADIUS_ATTRIBUTE_NAS_PORT = 5,
    RADIUS_ATTRIBUTE_SERVICE_TYPE = 6,
    RADIUS_ATTRIBUTE_FRAMED_PROTOCOL = 7,
    RADIUS_ATTRIBUTE_FRAMED_IP_ADDRESS = 8,
    RADIUS_ATTRIBUTE_FRAMED_IP_NETMASK = 9,
    RADIUS_ATTRIBUTE_FRAMED_ROUTING = 10,
    RADIUS_ATTRIBUTE_FILTER_ID = 11,
    RADIUS_ATTRIBUTE_FRAMED_MTU = 12,
    RADIUS_ATTRIBUTE_FRAMED_COMPRESSION = 13,
    RADIUS_ATTRIBUTE_LOGIN_IP_HOST = 14,
    RADIUS_ATTRIBUTE_LOGIN_SERVICE = 15,
    RADIUS_ATTRIBUTE_LOGIN_TCP_PORT = 16,
    RADIUS_ATTRIBUTE_UNASSIGNED1 = 17,
    RADIUS_ATTRIBUTE_REPLY_MESSAGE = 18,
    RADIUS_ATTRIBUTE_CALLBACK_NUMBER = 19,
    RADIUS_ATTRIBUTE_CALLBACK_ID = 20,
    RADIUS_ATTRIBUTE_UNASSIGNED2 = 21,
    RADIUS_ATTRIBUTE_FRAMED_ROUTE = 22,
    RADIUS_ATTRIBUTE_FRAMED_IPX_NETWORK = 23,
    RADIUS_ATTRIBUTE_STATE = 24,
    RADIUS_ATTRIBUTE_CLASS = 25,
    RADIUS_ATTRIBUTE_VENDOR_SPECIFIC = 26,
    RADIUS_ATTRIBUTE_SESSION_TIMEOUT = 27,
    RADIUS_ATTRIBUTE_IDLE_TIMEOUT = 28,
    RADIUS_ATTRIBUTE_TERMINATION_ACTION = 29,
    RADIUS_ATTRIBUTE_CALLED_STATION_ID = 30,
    RADIUS_ATTRIBUTE_CALLING_STATION_ID = 31,
    RADIUS_ATTRIBUTE_NAS_IDENTIFIER = 32,
    RADIUS_ATTRIBUTE_PROXY_STATE = 33,
    RADIUS_ATTRIBUTE_LOGIN_LAT_SERVICE = 34,
    RADIUS_ATTRIBUTE_LOGIN_LAT_NODE = 35,
    RADIUS_ATTRIBUTE_LOGIN_LAT_GROUP = 36,
    RADIUS_ATTRIBUTE_FRAMED_APPLETALK_LINK = 37,
    RADIUS_ATTRIBUTE_FRAMED_APPLETALK_NET = 38,
    RADIUS_ATTRIBUTE_FRAMED_APPLETALK_ZONE = 39,
    RADIUS_ATTRIBUTE_ACCT_STATUS_TYPE = 40,
    RADIUS_ATTRIBUTE_ACCT_DELAY_TIME = 41,
    RADIUS_ATTRIBUTE_ACCT_INPUT_OCTETS = 42,
    RADIUS_ATTRIBUTE_ACCT_OUTPUT_OCTETS = 43,
    RADIUS_ATTRIBUTE_ACCT_SESSION_ID = 44,
    RADIUS_ATTRIBUTE_ACCT_AUTHENTIC = 45,
    RADIUS_ATTRIBUTE_ACCT_SESSION_TIME = 46,
    RADIUS_ATTRIBUTE_ACCT_INPUT_PACKETS = 47,
    RADIUS_ATTRIBUTE_ACCT_OUTPUT_PACKETS = 48,
    RADIUS_ATTRIBUTE_ACCT_TERMINATE_CAUSE = 49,
    RADIUS_ATTRIBUTE_ACCT_MULTI_SSN_ID = 50,
    RADIUS_ATTRIBUTE_ACCT_LINK_COUNT = 51,
    RADIUS_ATTRIBUTE_CHAP_CHALLENGE = 60,
    RADIUS_ATTRIBUTE_NAS_PORT_TYPE = 61,
    RADIUS_ATTRIBUTE_PORT_LIMIT = 62,
    RADIUS_ATTRIBUTE_LOGIN_LAT_PORT = 63,
    RADIUS_ATTRIBUTE_TUNNEL_TYPE = 64,
    RADIUS_ATTRIBUTE_TUNNEL_MEDIUM_TYPE = 65,
    RADIUS_ATTRIBUTE_TUNNEL_CLIENT_ENDPT = 66,
    RADIUS_ATTRIBUTE_TUNNEL_SERVER_ENDPT = 67,
    RADIUS_ATTRIBUTE_ACCT_TUNNEL_CONN = 68,
    RADIUS_ATTRIBUTE_TUNNEL_PASSWORD = 69,
    RADIUS_ATTRIBUTE_ARAP_PASSWORD = 70,
    RADIUS_ATTRIBUTE_ARAP_FEATURES = 71,
    RADIUS_ATTRIBUTE_ARAP_ZONE_ACCESS = 72,
    RADIUS_ATTRIBUTE_ARAP_SECURITY = 73,
    RADIUS_ATTRIBUTE_ARAP_SECURITY_DATA = 74,
    RADIUS_ATTRIBUTE_PASSWORD_RETRY = 75,
    RADIUS_ATTRIBUTE_PROMPT = 76,
    RADIUS_ATTRIBUTE_CONNECT_INFO = 77,
    RADIUS_ATTRIBUTE_CONFIGURATION_TOKEN = 78,
    RADIUS_ATTRIBUTE_EAP_MESSAGE = 79,
    RADIUS_ATTRIBUTE_SIGNATURE = 80,
    RADIUS_ATTRIBUTE_TUNNEL_PVT_GROUP_ID = 81,
    RADIUS_ATTRIBUTE_TUNNEL_ASSIGNMENT_ID = 82,
    RADIUS_ATTRIBUTE_TUNNEL_PREFERENCE = 83,
    RADIUS_ATTRIBUTE_ARAP_CHALLENGE_RESPONSE = 84,
    RADIUS_ATTRIBUTE_ACCT_INTERIM_INTERVAL = 85,
    RADIUS_ATTRIBUTE_NAS_IPv6_ADDRESS = 95,
    RADIUS_ATTRIBUTE_FRAMED_INTERFACE_ID = 96,
    RADIUS_ATTRIBUTE_FRAMED_IPv6_PREFIX = 97,
    RADIUS_ATTRIBUTE_LOGIN_IPv6_HOST = 98,
    RADIUS_ATTRIBUTE_FRAMED_IPv6_ROUTE = 99,
    RADIUS_ATTRIBUTE_FRAMED_IPv6_POOL = 100,
    IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IP_ADDRESS = 4096,
    IAS_ATTRIBUTE_SAVED_RADIUS_CALLBACK_NUMBER = 4097,
    IAS_ATTRIBUTE_NP_CALLING_STATION_ID = 4098,
    IAS_ATTRIBUTE_SAVED_NP_CALLING_STATION_ID = 4099,
    IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_ROUTE = 4100,
    IAS_ATTRIBUTE_IGNORE_USER_DIALIN_PROPERTIES = 4101,
    IAS_ATTRIBUTE_NP_TIME_OF_DAY = 4102,
    IAS_ATTRIBUTE_NP_CALLED_STATION_ID = 4103,
    IAS_ATTRIBUTE_NP_ALLOWED_PORT_TYPES = 4104,
    IAS_ATTRIBUTE_NP_AUTHENTICATION_TYPE = 4105,
    IAS_ATTRIBUTE_NP_ALLOWED_EAP_TYPE = 4106,
    IAS_ATTRIBUTE_SHARED_SECRET = 4107,
    IAS_ATTRIBUTE_CLIENT_IP_ADDRESS = 4108,
    IAS_ATTRIBUTE_CLIENT_PACKET_HEADER = 4109,
    IAS_ATTRIBUTE_TOKEN_GROUPS = 4110,
    IAS_ATTRIBUTE_ALLOW_DIALIN = 4111,
    IAS_ATTRIBUTE_REQUEST_ID = 4112,
    IAS_ATTRIBUTE_MANIPULATION_TARGET = 4113,
    IAS_ATTRIBUTE_MANIPULATION_RULE = 4114,
    IAS_ATTRIBUTE_ORIGINAL_USER_NAME = 4115,
    IAS_ATTRIBUTE_CLIENT_VENDOR_TYPE = 4116,
    IAS_ATTRIBUTE_CLIENT_UDP_PORT = 4117,
    MS_ATTRIBUTE_CHAP_CHALLENGE = 4118,
    MS_ATTRIBUTE_CHAP_RESPONSE = 4119,
    MS_ATTRIBUTE_CHAP_DOMAIN = 4120,
    MS_ATTRIBUTE_CHAP_ERROR = 4121,
    MS_ATTRIBUTE_CHAP_CPW1 = 4122,
    MS_ATTRIBUTE_CHAP_CPW2 = 4123,
    MS_ATTRIBUTE_CHAP_LM_ENC_PW = 4124,
    MS_ATTRIBUTE_CHAP_NT_ENC_PW = 4125,
    MS_ATTRIBUTE_CHAP_MPPE_KEYS = 4126,
    IAS_ATTRIBUTE_AUTHENTICATION_TYPE = 4127,
    IAS_ATTRIBUTE_CLIENT_NAME = 4128,
    IAS_ATTRIBUTE_NT4_ACCOUNT_NAME = 4129,
    IAS_ATTRIBUTE_FULLY_QUALIFIED_USER_NAME = 4130,
    IAS_ATTRIBUTE_NTGROUPS = 4131,
    IAS_ATTRIBUTE_EAP_FRIENDLY_NAME = 4132,
    IAS_ATTRIBUTE_AUTH_PROVIDER_TYPE = 4133,
    MS_ATTRIBUTE_ACCT_AUTH_TYPE = 4134,
    MS_ATTRIBUTE_ACCT_EAP_TYPE = 4135,
    IAS_ATTRIBUTE_PACKET_TYPE = 4136,
    IAS_ATTRIBUTE_AUTH_PROVIDER_NAME = 4137,
    IAS_ATTRIBUTE_ACCT_PROVIDER_TYPE = 4138,
    IAS_ATTRIBUTE_ACCT_PROVIDER_NAME = 4139,
    MS_ATTRIBUTE_MPPE_SEND_KEY = 4140,
    MS_ATTRIBUTE_MPPE_RECV_KEY = 4141,
    IAS_ATTRIBUTE_REASON_CODE = 4142,
    MS_ATTRIBUTE_FILTER = 4143,
    MS_ATTRIBUTE_CHAP2_RESPONSE = 4144,
    MS_ATTRIBUTE_CHAP2_SUCCESS = 4145,
    MS_ATTRIBUTE_CHAP2_CPW = 4146,
    MS_ATTRIBUTE_RAS_VENDOR = 4147,
    MS_ATTRIBUTE_RAS_VERSION = 4148,
    IAS_ATTRIBUTE_NP_NAME = 4149,
    MS_ATTRIBUTE_PRIMARY_DNS_SERVER = 4150,
    MS_ATTRIBUTE_SECONDARY_DNS_SERVER = 4151,
    MS_ATTRIBUTE_PRIMARY_NBNS_SERVER = 4152,
    MS_ATTRIBUTE_SECONDARY_NBNS_SERVER = 4153,
    IAS_ATTRIBUTE_PROXY_POLICY_NAME = 4154,
    IAS_ATTRIBUTE_PROVIDER_TYPE = 4155,
    IAS_ATTRIBUTE_PROVIDER_NAME = 4156,
    IAS_ATTRIBUTE_REMOTE_SERVER_ADDRESS = 4157,
    IAS_ATTRIBUTE_GENERATE_CLASS_ATTRIBUTE = 4158,
    MS_ATTRIBUTE_RAS_CLIENT_NAME = 4159,
    MS_ATTRIBUTE_RAS_CLIENT_VERSION = 4160,
    IAS_ATTRIBUTE_ALLOWED_CERTIFICATE_EKU = 4161,
    IAS_ATTRIBUTE_EXTENSION_STATE = 4162,
    IAS_ATTRIBUTE_GENERATE_SESSION_TIMEOUT = 4163,
    IAS_ATTRIBUTE_SESSION_TIMEOUT = 4164,
    MS_ATTRIBUTE_QUARANTINE_IPFILTER = 4165,
    MS_ATTRIBUTE_QUARANTINE_SESSION_TIMEOUT = 4166,
    MS_ATTRIBUTE_USER_SECURITY_IDENTITY = 4167,
    IAS_ATTRIBUTE_REMOTE_RADIUS_TO_WINDOWS_USER_MAPPING = 4168,
    IAS_ATTRIBUTE_PASSPORT_USER_MAPPING_UPN_SUFFIX = 4169,
    IAS_ATTRIBUTE_TUNNEL_TAG = 4170,
    IAS_ATTRIBUTE_NP_PEAPUPFRONT_ENABLED = 4171,
    IAS_ATTRIBUTE_CERTIFICATE_EKU = 8097,
    IAS_ATTRIBUTE_EAP_CONFIG = 8098,
    IAS_ATTRIBUTE_PEAP_EMBEDDED_EAP_TYPEID = 8099,
    IAS_ATTRIBUTE_PEAP_FAST_ROAMED_SESSION = 8100,
    IAS_ATTRIBUTE_EAP_TYPEID = 8101,
    MS_ATTRIBUTE_EAP_TLV = 8102,
    IAS_ATTRIBUTE_REJECT_REASON_CODE = 8103,
    IAS_ATTRIBUTE_PROXY_EAP_CONFIG = 8104,
    IAS_ATTRIBUTE_EAP_SESSION = 8105,
    IAS_ATTRIBUTE_IS_REPLAY = 8106,
    IAS_ATTRIBUTE_CLEAR_TEXT_PASSWORD = 8107,
    MS_ATTRIBUTE_IDENTITY_TYPE = 8108,
    MS_ATTRIBUTE_SERVICE_CLASS = 8109,
    MS_ATTRIBUTE_QUARANTINE_USER_CLASS = 8110,
    MS_ATTRIBUTE_QUARANTINE_STATE = 8111,
    IAS_ATTRIBUTE_OVERRIDE_RAP_AUTH = 8112,
    IAS_ATTRIBUTE_PEAP_CHANNEL_UP = 8113,
    IAS_ATTRIBUTE_NAME_MAPPED = 8114,
    IAS_ATTRIBUTE_POLICY_ENFORCED = 8115,
    IAS_ATTRIBUTE_MACHINE_NTGROUPS = 8116,
    IAS_ATTRIBUTE_USER_NTGROUPS = 8117,
    IAS_ATTRIBUTE_MACHINE_TOKEN_GROUPS = 8118,
    IAS_ATTRIBUTE_USER_TOKEN_GROUPS = 8119,
    MS_ATTRIBUTE_QUARANTINE_GRACE_TIME = 8120,
    IAS_ATTRIBUTE_QUARANTINE_URL = 8121,
    IAS_ATTRIBUTE_QUARANTINE_FIXUP_SERVERS = 8122,
    MS_ATTRIBUTE_NOT_QUARANTINE_CAPABLE = 8123,
    IAS_ATTRIBUTE_QUARANTINE_SYSTEM_HEALTH_RESULT = 8124,
    IAS_ATTRIBUTE_QUARANTINE_SYSTEM_HEALTH_VALIDATORS = 8125,
    IAS_ATTRIBUTE_MACHINE_NAME = 8126,
    IAS_ATTRIBUTE_NT4_MACHINE_NAME = 8127,
    IAS_ATTRIBUTE_QUARANTINE_SESSION_HANDLE = 8128,
    IAS_ATTRIBUTE_FULLY_QUALIFIED_MACHINE_NAME = 8129,
    IAS_ATTRIBUTE_QUARANTINE_FIXUP_SERVERS_CONFIGURATION = 8130,
    IAS_ATTRIBUTE_CLIENT_QUARANTINE_COMPATIBLE = 8131,
    MS_ATTRIBUTE_NETWORK_ACCESS_SERVER_TYPE = 8132,
    IAS_ATTRIBUTE_QUARANTINE_SESSION_ID = 8133,
    MS_ATTRIBUTE_AFW_QUARANTINE_ZONE = 8134,
    MS_ATTRIBUTE_AFW_PROTECTION_LEVEL = 8135,
    IAS_ATTRIBUTE_QUARANTINE_UPDATE_NON_COMPLIANT = 8136,
    IAS_ATTRIBUTE_REQUEST_START_TIME = 8137,
    MS_ATTRIBUTE_MACHINE_NAME = 8138,
    IAS_ATTRIBUTE_CLIENT_IPv6_ADDRESS = 8139,
    IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_INTERFACE_ID = 8140,
    IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IPv6_PREFIX = 8141,
    IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IPv6_ROUTE = 8142,
    MS_ATTRIBUTE_QUARANTINE_GRACE_TIME_CONFIGURATION = 8143,
    MS_ATTRIBUTE_IPv6_FILTER = 8144,
    MS_ATTRIBUTE_IPV4_REMEDIATION_SERVERS = 8145,
    MS_ATTRIBUTE_IPV6_REMEDIATION_SERVERS = 8146,
    IAS_ATTRIBUTE_PROXY_RETRY_COUNT = 8147,
    IAS_ATTRIBUTE_MACHINE_INVENTORY = 8148,
    IAS_ATTRIBUTE_ABSOLUTE_TIME = 8149,
    MS_ATTRIBUTE_QUARANTINE_SOH = 8150,
    IAS_ATTRIBUTE_EAP_TYPES_CONFIGURED_IN_PROXYPOLICY = 8151,
    MS_ATTRIBUTE_HCAP_LOCATION_GROUP_NAME = 8152,
    MS_ATTRIBUTE_EXTENDED_QUARANTINE_STATE = 8153,
    IAS_ATTRIBUTE_SOH_CARRIER_EAPTLV = 8154,
    MS_ATTRIBUTE_HCAP_USER_GROUPS = 8155,
    IAS_ATTRIBUTE_SAVED_MACHINE_HEALTHCHECK_ONLY = 8156,
    IAS_ATTRIBUTE_POLICY_EVALUATED_SHV = 8157,
    MS_ATTRIBUTE_RAS_CORRELATION_ID = 8158,
    MS_ATTRIBUTE_HCAP_USER_NAME = 8159,
    IAS_ATTRIBUTE_NT4_HCAP_ACCOUNT_NAME = 8160,
    IAS_ATTRIBUTE_USER_TOKEN_SID = 8161,
    IAS_ATTRIBUTE_MACHINE_TOKEN_SID = 8162,
    IAS_ATTRIBUTE_MACHINE_VALIDATED = 8163,
    MS_ATTRIBUTE_USER_IPv4_ADDRESS = 8164,
    MS_ATTRIBUTE_USER_IPv6_ADDRESS = 8165,
    MS_ATTRIBUTE_TSG_DEVICE_REDIRECTION = 8166,
    IAS_ATTRIBUTE_ACCEPT_REASON_CODE = 8167,
    IAS_ATTRIBUTE_LOGGING_RESULT = 8168,
    IAS_ATTRIBUTE_SERVER_IP_ADDRESS = 8169,
    IAS_ATTRIBUTE_SERVER_IPv6_ADDRESS = 8170,
    IAS_ATTRIBUTE_RADIUS_USERNAME_ENCODING_ASCII = 8171,
    MS_ATTRIBUTE_RAS_ROUTING_DOMAIN_ID = 8172,
    IAS_ATTRIBUTE_CERTIFICATE_THUMBPRINT = 8250,
    RAS_ATTRIBUTE_ENCRYPTION_TYPE = 4294967206,
    RAS_ATTRIBUTE_ENCRYPTION_POLICY = 4294967207,
    RAS_ATTRIBUTE_BAP_REQUIRED = 4294967208,
    RAS_ATTRIBUTE_BAP_LINE_DOWN_TIME = 4294967209,
    RAS_ATTRIBUTE_BAP_LINE_DOWN_LIMIT = 4294967210,
    pub const RADIUS_ATTRIBUTE_USER_NAME = .ATTRIBUTE_MIN_VALUE;
};
pub const ATTRIBUTE_UNDEFINED = ATTRIBUTEID.ATTRIBUTE_UNDEFINED;
pub const ATTRIBUTE_MIN_VALUE = ATTRIBUTEID.ATTRIBUTE_MIN_VALUE;
pub const RADIUS_ATTRIBUTE_USER_NAME = ATTRIBUTEID.ATTRIBUTE_MIN_VALUE;
pub const RADIUS_ATTRIBUTE_USER_PASSWORD = ATTRIBUTEID.RADIUS_ATTRIBUTE_USER_PASSWORD;
pub const RADIUS_ATTRIBUTE_CHAP_PASSWORD = ATTRIBUTEID.RADIUS_ATTRIBUTE_CHAP_PASSWORD;
pub const RADIUS_ATTRIBUTE_NAS_IP_ADDRESS = ATTRIBUTEID.RADIUS_ATTRIBUTE_NAS_IP_ADDRESS;
pub const RADIUS_ATTRIBUTE_NAS_PORT = ATTRIBUTEID.RADIUS_ATTRIBUTE_NAS_PORT;
pub const RADIUS_ATTRIBUTE_SERVICE_TYPE = ATTRIBUTEID.RADIUS_ATTRIBUTE_SERVICE_TYPE;
pub const RADIUS_ATTRIBUTE_FRAMED_PROTOCOL = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_PROTOCOL;
pub const RADIUS_ATTRIBUTE_FRAMED_IP_ADDRESS = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_IP_ADDRESS;
pub const RADIUS_ATTRIBUTE_FRAMED_IP_NETMASK = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_IP_NETMASK;
pub const RADIUS_ATTRIBUTE_FRAMED_ROUTING = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_ROUTING;
pub const RADIUS_ATTRIBUTE_FILTER_ID = ATTRIBUTEID.RADIUS_ATTRIBUTE_FILTER_ID;
pub const RADIUS_ATTRIBUTE_FRAMED_MTU = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_MTU;
pub const RADIUS_ATTRIBUTE_FRAMED_COMPRESSION = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_COMPRESSION;
pub const RADIUS_ATTRIBUTE_LOGIN_IP_HOST = ATTRIBUTEID.RADIUS_ATTRIBUTE_LOGIN_IP_HOST;
pub const RADIUS_ATTRIBUTE_LOGIN_SERVICE = ATTRIBUTEID.RADIUS_ATTRIBUTE_LOGIN_SERVICE;
pub const RADIUS_ATTRIBUTE_LOGIN_TCP_PORT = ATTRIBUTEID.RADIUS_ATTRIBUTE_LOGIN_TCP_PORT;
pub const RADIUS_ATTRIBUTE_UNASSIGNED1 = ATTRIBUTEID.RADIUS_ATTRIBUTE_UNASSIGNED1;
pub const RADIUS_ATTRIBUTE_REPLY_MESSAGE = ATTRIBUTEID.RADIUS_ATTRIBUTE_REPLY_MESSAGE;
pub const RADIUS_ATTRIBUTE_CALLBACK_NUMBER = ATTRIBUTEID.RADIUS_ATTRIBUTE_CALLBACK_NUMBER;
pub const RADIUS_ATTRIBUTE_CALLBACK_ID = ATTRIBUTEID.RADIUS_ATTRIBUTE_CALLBACK_ID;
pub const RADIUS_ATTRIBUTE_UNASSIGNED2 = ATTRIBUTEID.RADIUS_ATTRIBUTE_UNASSIGNED2;
pub const RADIUS_ATTRIBUTE_FRAMED_ROUTE = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_ROUTE;
pub const RADIUS_ATTRIBUTE_FRAMED_IPX_NETWORK = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_IPX_NETWORK;
pub const RADIUS_ATTRIBUTE_STATE = ATTRIBUTEID.RADIUS_ATTRIBUTE_STATE;
pub const RADIUS_ATTRIBUTE_CLASS = ATTRIBUTEID.RADIUS_ATTRIBUTE_CLASS;
pub const RADIUS_ATTRIBUTE_VENDOR_SPECIFIC = ATTRIBUTEID.RADIUS_ATTRIBUTE_VENDOR_SPECIFIC;
pub const RADIUS_ATTRIBUTE_SESSION_TIMEOUT = ATTRIBUTEID.RADIUS_ATTRIBUTE_SESSION_TIMEOUT;
pub const RADIUS_ATTRIBUTE_IDLE_TIMEOUT = ATTRIBUTEID.RADIUS_ATTRIBUTE_IDLE_TIMEOUT;
pub const RADIUS_ATTRIBUTE_TERMINATION_ACTION = ATTRIBUTEID.RADIUS_ATTRIBUTE_TERMINATION_ACTION;
pub const RADIUS_ATTRIBUTE_CALLED_STATION_ID = ATTRIBUTEID.RADIUS_ATTRIBUTE_CALLED_STATION_ID;
pub const RADIUS_ATTRIBUTE_CALLING_STATION_ID = ATTRIBUTEID.RADIUS_ATTRIBUTE_CALLING_STATION_ID;
pub const RADIUS_ATTRIBUTE_NAS_IDENTIFIER = ATTRIBUTEID.RADIUS_ATTRIBUTE_NAS_IDENTIFIER;
pub const RADIUS_ATTRIBUTE_PROXY_STATE = ATTRIBUTEID.RADIUS_ATTRIBUTE_PROXY_STATE;
pub const RADIUS_ATTRIBUTE_LOGIN_LAT_SERVICE = ATTRIBUTEID.RADIUS_ATTRIBUTE_LOGIN_LAT_SERVICE;
pub const RADIUS_ATTRIBUTE_LOGIN_LAT_NODE = ATTRIBUTEID.RADIUS_ATTRIBUTE_LOGIN_LAT_NODE;
pub const RADIUS_ATTRIBUTE_LOGIN_LAT_GROUP = ATTRIBUTEID.RADIUS_ATTRIBUTE_LOGIN_LAT_GROUP;
pub const RADIUS_ATTRIBUTE_FRAMED_APPLETALK_LINK = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_APPLETALK_LINK;
pub const RADIUS_ATTRIBUTE_FRAMED_APPLETALK_NET = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_APPLETALK_NET;
pub const RADIUS_ATTRIBUTE_FRAMED_APPLETALK_ZONE = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_APPLETALK_ZONE;
pub const RADIUS_ATTRIBUTE_ACCT_STATUS_TYPE = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_STATUS_TYPE;
pub const RADIUS_ATTRIBUTE_ACCT_DELAY_TIME = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_DELAY_TIME;
pub const RADIUS_ATTRIBUTE_ACCT_INPUT_OCTETS = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_INPUT_OCTETS;
pub const RADIUS_ATTRIBUTE_ACCT_OUTPUT_OCTETS = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_OUTPUT_OCTETS;
pub const RADIUS_ATTRIBUTE_ACCT_SESSION_ID = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_SESSION_ID;
pub const RADIUS_ATTRIBUTE_ACCT_AUTHENTIC = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_AUTHENTIC;
pub const RADIUS_ATTRIBUTE_ACCT_SESSION_TIME = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_SESSION_TIME;
pub const RADIUS_ATTRIBUTE_ACCT_INPUT_PACKETS = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_INPUT_PACKETS;
pub const RADIUS_ATTRIBUTE_ACCT_OUTPUT_PACKETS = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_OUTPUT_PACKETS;
pub const RADIUS_ATTRIBUTE_ACCT_TERMINATE_CAUSE = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_TERMINATE_CAUSE;
pub const RADIUS_ATTRIBUTE_ACCT_MULTI_SSN_ID = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_MULTI_SSN_ID;
pub const RADIUS_ATTRIBUTE_ACCT_LINK_COUNT = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_LINK_COUNT;
pub const RADIUS_ATTRIBUTE_CHAP_CHALLENGE = ATTRIBUTEID.RADIUS_ATTRIBUTE_CHAP_CHALLENGE;
pub const RADIUS_ATTRIBUTE_NAS_PORT_TYPE = ATTRIBUTEID.RADIUS_ATTRIBUTE_NAS_PORT_TYPE;
pub const RADIUS_ATTRIBUTE_PORT_LIMIT = ATTRIBUTEID.RADIUS_ATTRIBUTE_PORT_LIMIT;
pub const RADIUS_ATTRIBUTE_LOGIN_LAT_PORT = ATTRIBUTEID.RADIUS_ATTRIBUTE_LOGIN_LAT_PORT;
pub const RADIUS_ATTRIBUTE_TUNNEL_TYPE = ATTRIBUTEID.RADIUS_ATTRIBUTE_TUNNEL_TYPE;
pub const RADIUS_ATTRIBUTE_TUNNEL_MEDIUM_TYPE = ATTRIBUTEID.RADIUS_ATTRIBUTE_TUNNEL_MEDIUM_TYPE;
pub const RADIUS_ATTRIBUTE_TUNNEL_CLIENT_ENDPT = ATTRIBUTEID.RADIUS_ATTRIBUTE_TUNNEL_CLIENT_ENDPT;
pub const RADIUS_ATTRIBUTE_TUNNEL_SERVER_ENDPT = ATTRIBUTEID.RADIUS_ATTRIBUTE_TUNNEL_SERVER_ENDPT;
pub const RADIUS_ATTRIBUTE_ACCT_TUNNEL_CONN = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_TUNNEL_CONN;
pub const RADIUS_ATTRIBUTE_TUNNEL_PASSWORD = ATTRIBUTEID.RADIUS_ATTRIBUTE_TUNNEL_PASSWORD;
pub const RADIUS_ATTRIBUTE_ARAP_PASSWORD = ATTRIBUTEID.RADIUS_ATTRIBUTE_ARAP_PASSWORD;
pub const RADIUS_ATTRIBUTE_ARAP_FEATURES = ATTRIBUTEID.RADIUS_ATTRIBUTE_ARAP_FEATURES;
pub const RADIUS_ATTRIBUTE_ARAP_ZONE_ACCESS = ATTRIBUTEID.RADIUS_ATTRIBUTE_ARAP_ZONE_ACCESS;
pub const RADIUS_ATTRIBUTE_ARAP_SECURITY = ATTRIBUTEID.RADIUS_ATTRIBUTE_ARAP_SECURITY;
pub const RADIUS_ATTRIBUTE_ARAP_SECURITY_DATA = ATTRIBUTEID.RADIUS_ATTRIBUTE_ARAP_SECURITY_DATA;
pub const RADIUS_ATTRIBUTE_PASSWORD_RETRY = ATTRIBUTEID.RADIUS_ATTRIBUTE_PASSWORD_RETRY;
pub const RADIUS_ATTRIBUTE_PROMPT = ATTRIBUTEID.RADIUS_ATTRIBUTE_PROMPT;
pub const RADIUS_ATTRIBUTE_CONNECT_INFO = ATTRIBUTEID.RADIUS_ATTRIBUTE_CONNECT_INFO;
pub const RADIUS_ATTRIBUTE_CONFIGURATION_TOKEN = ATTRIBUTEID.RADIUS_ATTRIBUTE_CONFIGURATION_TOKEN;
pub const RADIUS_ATTRIBUTE_EAP_MESSAGE = ATTRIBUTEID.RADIUS_ATTRIBUTE_EAP_MESSAGE;
pub const RADIUS_ATTRIBUTE_SIGNATURE = ATTRIBUTEID.RADIUS_ATTRIBUTE_SIGNATURE;
pub const RADIUS_ATTRIBUTE_TUNNEL_PVT_GROUP_ID = ATTRIBUTEID.RADIUS_ATTRIBUTE_TUNNEL_PVT_GROUP_ID;
pub const RADIUS_ATTRIBUTE_TUNNEL_ASSIGNMENT_ID = ATTRIBUTEID.RADIUS_ATTRIBUTE_TUNNEL_ASSIGNMENT_ID;
pub const RADIUS_ATTRIBUTE_TUNNEL_PREFERENCE = ATTRIBUTEID.RADIUS_ATTRIBUTE_TUNNEL_PREFERENCE;
pub const RADIUS_ATTRIBUTE_ARAP_CHALLENGE_RESPONSE = ATTRIBUTEID.RADIUS_ATTRIBUTE_ARAP_CHALLENGE_RESPONSE;
pub const RADIUS_ATTRIBUTE_ACCT_INTERIM_INTERVAL = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_INTERIM_INTERVAL;
pub const RADIUS_ATTRIBUTE_NAS_IPv6_ADDRESS = ATTRIBUTEID.RADIUS_ATTRIBUTE_NAS_IPv6_ADDRESS;
pub const RADIUS_ATTRIBUTE_FRAMED_INTERFACE_ID = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_INTERFACE_ID;
pub const RADIUS_ATTRIBUTE_FRAMED_IPv6_PREFIX = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_IPv6_PREFIX;
pub const RADIUS_ATTRIBUTE_LOGIN_IPv6_HOST = ATTRIBUTEID.RADIUS_ATTRIBUTE_LOGIN_IPv6_HOST;
pub const RADIUS_ATTRIBUTE_FRAMED_IPv6_ROUTE = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_IPv6_ROUTE;
pub const RADIUS_ATTRIBUTE_FRAMED_IPv6_POOL = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_IPv6_POOL;
pub const IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IP_ADDRESS = ATTRIBUTEID.IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IP_ADDRESS;
pub const IAS_ATTRIBUTE_SAVED_RADIUS_CALLBACK_NUMBER = ATTRIBUTEID.IAS_ATTRIBUTE_SAVED_RADIUS_CALLBACK_NUMBER;
pub const IAS_ATTRIBUTE_NP_CALLING_STATION_ID = ATTRIBUTEID.IAS_ATTRIBUTE_NP_CALLING_STATION_ID;
pub const IAS_ATTRIBUTE_SAVED_NP_CALLING_STATION_ID = ATTRIBUTEID.IAS_ATTRIBUTE_SAVED_NP_CALLING_STATION_ID;
pub const IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_ROUTE = ATTRIBUTEID.IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_ROUTE;
pub const IAS_ATTRIBUTE_IGNORE_USER_DIALIN_PROPERTIES = ATTRIBUTEID.IAS_ATTRIBUTE_IGNORE_USER_DIALIN_PROPERTIES;
pub const IAS_ATTRIBUTE_NP_TIME_OF_DAY = ATTRIBUTEID.IAS_ATTRIBUTE_NP_TIME_OF_DAY;
pub const IAS_ATTRIBUTE_NP_CALLED_STATION_ID = ATTRIBUTEID.IAS_ATTRIBUTE_NP_CALLED_STATION_ID;
pub const IAS_ATTRIBUTE_NP_ALLOWED_PORT_TYPES = ATTRIBUTEID.IAS_ATTRIBUTE_NP_ALLOWED_PORT_TYPES;
pub const IAS_ATTRIBUTE_NP_AUTHENTICATION_TYPE = ATTRIBUTEID.IAS_ATTRIBUTE_NP_AUTHENTICATION_TYPE;
pub const IAS_ATTRIBUTE_NP_ALLOWED_EAP_TYPE = ATTRIBUTEID.IAS_ATTRIBUTE_NP_ALLOWED_EAP_TYPE;
pub const IAS_ATTRIBUTE_SHARED_SECRET = ATTRIBUTEID.IAS_ATTRIBUTE_SHARED_SECRET;
pub const IAS_ATTRIBUTE_CLIENT_IP_ADDRESS = ATTRIBUTEID.IAS_ATTRIBUTE_CLIENT_IP_ADDRESS;
pub const IAS_ATTRIBUTE_CLIENT_PACKET_HEADER = ATTRIBUTEID.IAS_ATTRIBUTE_CLIENT_PACKET_HEADER;
pub const IAS_ATTRIBUTE_TOKEN_GROUPS = ATTRIBUTEID.IAS_ATTRIBUTE_TOKEN_GROUPS;
pub const IAS_ATTRIBUTE_ALLOW_DIALIN = ATTRIBUTEID.IAS_ATTRIBUTE_ALLOW_DIALIN;
pub const IAS_ATTRIBUTE_REQUEST_ID = ATTRIBUTEID.IAS_ATTRIBUTE_REQUEST_ID;
pub const IAS_ATTRIBUTE_MANIPULATION_TARGET = ATTRIBUTEID.IAS_ATTRIBUTE_MANIPULATION_TARGET;
pub const IAS_ATTRIBUTE_MANIPULATION_RULE = ATTRIBUTEID.IAS_ATTRIBUTE_MANIPULATION_RULE;
pub const IAS_ATTRIBUTE_ORIGINAL_USER_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_ORIGINAL_USER_NAME;
pub const IAS_ATTRIBUTE_CLIENT_VENDOR_TYPE = ATTRIBUTEID.IAS_ATTRIBUTE_CLIENT_VENDOR_TYPE;
pub const IAS_ATTRIBUTE_CLIENT_UDP_PORT = ATTRIBUTEID.IAS_ATTRIBUTE_CLIENT_UDP_PORT;
pub const MS_ATTRIBUTE_CHAP_CHALLENGE = ATTRIBUTEID.MS_ATTRIBUTE_CHAP_CHALLENGE;
pub const MS_ATTRIBUTE_CHAP_RESPONSE = ATTRIBUTEID.MS_ATTRIBUTE_CHAP_RESPONSE;
pub const MS_ATTRIBUTE_CHAP_DOMAIN = ATTRIBUTEID.MS_ATTRIBUTE_CHAP_DOMAIN;
pub const MS_ATTRIBUTE_CHAP_ERROR = ATTRIBUTEID.MS_ATTRIBUTE_CHAP_ERROR;
pub const MS_ATTRIBUTE_CHAP_CPW1 = ATTRIBUTEID.MS_ATTRIBUTE_CHAP_CPW1;
pub const MS_ATTRIBUTE_CHAP_CPW2 = ATTRIBUTEID.MS_ATTRIBUTE_CHAP_CPW2;
pub const MS_ATTRIBUTE_CHAP_LM_ENC_PW = ATTRIBUTEID.MS_ATTRIBUTE_CHAP_LM_ENC_PW;
pub const MS_ATTRIBUTE_CHAP_NT_ENC_PW = ATTRIBUTEID.MS_ATTRIBUTE_CHAP_NT_ENC_PW;
pub const MS_ATTRIBUTE_CHAP_MPPE_KEYS = ATTRIBUTEID.MS_ATTRIBUTE_CHAP_MPPE_KEYS;
pub const IAS_ATTRIBUTE_AUTHENTICATION_TYPE = ATTRIBUTEID.IAS_ATTRIBUTE_AUTHENTICATION_TYPE;
pub const IAS_ATTRIBUTE_CLIENT_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_CLIENT_NAME;
pub const IAS_ATTRIBUTE_NT4_ACCOUNT_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_NT4_ACCOUNT_NAME;
pub const IAS_ATTRIBUTE_FULLY_QUALIFIED_USER_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_FULLY_QUALIFIED_USER_NAME;
pub const IAS_ATTRIBUTE_NTGROUPS = ATTRIBUTEID.IAS_ATTRIBUTE_NTGROUPS;
pub const IAS_ATTRIBUTE_EAP_FRIENDLY_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_EAP_FRIENDLY_NAME;
pub const IAS_ATTRIBUTE_AUTH_PROVIDER_TYPE = ATTRIBUTEID.IAS_ATTRIBUTE_AUTH_PROVIDER_TYPE;
pub const MS_ATTRIBUTE_ACCT_AUTH_TYPE = ATTRIBUTEID.MS_ATTRIBUTE_ACCT_AUTH_TYPE;
pub const MS_ATTRIBUTE_ACCT_EAP_TYPE = ATTRIBUTEID.MS_ATTRIBUTE_ACCT_EAP_TYPE;
pub const IAS_ATTRIBUTE_PACKET_TYPE = ATTRIBUTEID.IAS_ATTRIBUTE_PACKET_TYPE;
pub const IAS_ATTRIBUTE_AUTH_PROVIDER_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_AUTH_PROVIDER_NAME;
pub const IAS_ATTRIBUTE_ACCT_PROVIDER_TYPE = ATTRIBUTEID.IAS_ATTRIBUTE_ACCT_PROVIDER_TYPE;
pub const IAS_ATTRIBUTE_ACCT_PROVIDER_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_ACCT_PROVIDER_NAME;
pub const MS_ATTRIBUTE_MPPE_SEND_KEY = ATTRIBUTEID.MS_ATTRIBUTE_MPPE_SEND_KEY;
pub const MS_ATTRIBUTE_MPPE_RECV_KEY = ATTRIBUTEID.MS_ATTRIBUTE_MPPE_RECV_KEY;
pub const IAS_ATTRIBUTE_REASON_CODE = ATTRIBUTEID.IAS_ATTRIBUTE_REASON_CODE;
pub const MS_ATTRIBUTE_FILTER = ATTRIBUTEID.MS_ATTRIBUTE_FILTER;
pub const MS_ATTRIBUTE_CHAP2_RESPONSE = ATTRIBUTEID.MS_ATTRIBUTE_CHAP2_RESPONSE;
pub const MS_ATTRIBUTE_CHAP2_SUCCESS = ATTRIBUTEID.MS_ATTRIBUTE_CHAP2_SUCCESS;
pub const MS_ATTRIBUTE_CHAP2_CPW = ATTRIBUTEID.MS_ATTRIBUTE_CHAP2_CPW;
pub const MS_ATTRIBUTE_RAS_VENDOR = ATTRIBUTEID.MS_ATTRIBUTE_RAS_VENDOR;
pub const MS_ATTRIBUTE_RAS_VERSION = ATTRIBUTEID.MS_ATTRIBUTE_RAS_VERSION;
pub const IAS_ATTRIBUTE_NP_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_NP_NAME;
pub const MS_ATTRIBUTE_PRIMARY_DNS_SERVER = ATTRIBUTEID.MS_ATTRIBUTE_PRIMARY_DNS_SERVER;
pub const MS_ATTRIBUTE_SECONDARY_DNS_SERVER = ATTRIBUTEID.MS_ATTRIBUTE_SECONDARY_DNS_SERVER;
pub const MS_ATTRIBUTE_PRIMARY_NBNS_SERVER = ATTRIBUTEID.MS_ATTRIBUTE_PRIMARY_NBNS_SERVER;
pub const MS_ATTRIBUTE_SECONDARY_NBNS_SERVER = ATTRIBUTEID.MS_ATTRIBUTE_SECONDARY_NBNS_SERVER;
pub const IAS_ATTRIBUTE_PROXY_POLICY_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_PROXY_POLICY_NAME;
pub const IAS_ATTRIBUTE_PROVIDER_TYPE = ATTRIBUTEID.IAS_ATTRIBUTE_PROVIDER_TYPE;
pub const IAS_ATTRIBUTE_PROVIDER_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_PROVIDER_NAME;
pub const IAS_ATTRIBUTE_REMOTE_SERVER_ADDRESS = ATTRIBUTEID.IAS_ATTRIBUTE_REMOTE_SERVER_ADDRESS;
pub const IAS_ATTRIBUTE_GENERATE_CLASS_ATTRIBUTE = ATTRIBUTEID.IAS_ATTRIBUTE_GENERATE_CLASS_ATTRIBUTE;
pub const MS_ATTRIBUTE_RAS_CLIENT_NAME = ATTRIBUTEID.MS_ATTRIBUTE_RAS_CLIENT_NAME;
pub const MS_ATTRIBUTE_RAS_CLIENT_VERSION = ATTRIBUTEID.MS_ATTRIBUTE_RAS_CLIENT_VERSION;
pub const IAS_ATTRIBUTE_ALLOWED_CERTIFICATE_EKU = ATTRIBUTEID.IAS_ATTRIBUTE_ALLOWED_CERTIFICATE_EKU;
pub const IAS_ATTRIBUTE_EXTENSION_STATE = ATTRIBUTEID.IAS_ATTRIBUTE_EXTENSION_STATE;
pub const IAS_ATTRIBUTE_GENERATE_SESSION_TIMEOUT = ATTRIBUTEID.IAS_ATTRIBUTE_GENERATE_SESSION_TIMEOUT;
pub const IAS_ATTRIBUTE_SESSION_TIMEOUT = ATTRIBUTEID.IAS_ATTRIBUTE_SESSION_TIMEOUT;
pub const MS_ATTRIBUTE_QUARANTINE_IPFILTER = ATTRIBUTEID.MS_ATTRIBUTE_QUARANTINE_IPFILTER;
pub const MS_ATTRIBUTE_QUARANTINE_SESSION_TIMEOUT = ATTRIBUTEID.MS_ATTRIBUTE_QUARANTINE_SESSION_TIMEOUT;
pub const MS_ATTRIBUTE_USER_SECURITY_IDENTITY = ATTRIBUTEID.MS_ATTRIBUTE_USER_SECURITY_IDENTITY;
pub const IAS_ATTRIBUTE_REMOTE_RADIUS_TO_WINDOWS_USER_MAPPING = ATTRIBUTEID.IAS_ATTRIBUTE_REMOTE_RADIUS_TO_WINDOWS_USER_MAPPING;
pub const IAS_ATTRIBUTE_PASSPORT_USER_MAPPING_UPN_SUFFIX = ATTRIBUTEID.IAS_ATTRIBUTE_PASSPORT_USER_MAPPING_UPN_SUFFIX;
pub const IAS_ATTRIBUTE_TUNNEL_TAG = ATTRIBUTEID.IAS_ATTRIBUTE_TUNNEL_TAG;
pub const IAS_ATTRIBUTE_NP_PEAPUPFRONT_ENABLED = ATTRIBUTEID.IAS_ATTRIBUTE_NP_PEAPUPFRONT_ENABLED;
pub const IAS_ATTRIBUTE_CERTIFICATE_EKU = ATTRIBUTEID.IAS_ATTRIBUTE_CERTIFICATE_EKU;
pub const IAS_ATTRIBUTE_EAP_CONFIG = ATTRIBUTEID.IAS_ATTRIBUTE_EAP_CONFIG;
pub const IAS_ATTRIBUTE_PEAP_EMBEDDED_EAP_TYPEID = ATTRIBUTEID.IAS_ATTRIBUTE_PEAP_EMBEDDED_EAP_TYPEID;
pub const IAS_ATTRIBUTE_PEAP_FAST_ROAMED_SESSION = ATTRIBUTEID.IAS_ATTRIBUTE_PEAP_FAST_ROAMED_SESSION;
pub const IAS_ATTRIBUTE_EAP_TYPEID = ATTRIBUTEID.IAS_ATTRIBUTE_EAP_TYPEID;
pub const MS_ATTRIBUTE_EAP_TLV = ATTRIBUTEID.MS_ATTRIBUTE_EAP_TLV;
pub const IAS_ATTRIBUTE_REJECT_REASON_CODE = ATTRIBUTEID.IAS_ATTRIBUTE_REJECT_REASON_CODE;
pub const IAS_ATTRIBUTE_PROXY_EAP_CONFIG = ATTRIBUTEID.IAS_ATTRIBUTE_PROXY_EAP_CONFIG;
pub const IAS_ATTRIBUTE_EAP_SESSION = ATTRIBUTEID.IAS_ATTRIBUTE_EAP_SESSION;
pub const IAS_ATTRIBUTE_IS_REPLAY = ATTRIBUTEID.IAS_ATTRIBUTE_IS_REPLAY;
pub const IAS_ATTRIBUTE_CLEAR_TEXT_PASSWORD = ATTRIBUTEID.IAS_ATTRIBUTE_CLEAR_TEXT_PASSWORD;
pub const MS_ATTRIBUTE_IDENTITY_TYPE = ATTRIBUTEID.MS_ATTRIBUTE_IDENTITY_TYPE;
pub const MS_ATTRIBUTE_SERVICE_CLASS = ATTRIBUTEID.MS_ATTRIBUTE_SERVICE_CLASS;
pub const MS_ATTRIBUTE_QUARANTINE_USER_CLASS = ATTRIBUTEID.MS_ATTRIBUTE_QUARANTINE_USER_CLASS;
pub const MS_ATTRIBUTE_QUARANTINE_STATE = ATTRIBUTEID.MS_ATTRIBUTE_QUARANTINE_STATE;
pub const IAS_ATTRIBUTE_OVERRIDE_RAP_AUTH = ATTRIBUTEID.IAS_ATTRIBUTE_OVERRIDE_RAP_AUTH;
pub const IAS_ATTRIBUTE_PEAP_CHANNEL_UP = ATTRIBUTEID.IAS_ATTRIBUTE_PEAP_CHANNEL_UP;
pub const IAS_ATTRIBUTE_NAME_MAPPED = ATTRIBUTEID.IAS_ATTRIBUTE_NAME_MAPPED;
pub const IAS_ATTRIBUTE_POLICY_ENFORCED = ATTRIBUTEID.IAS_ATTRIBUTE_POLICY_ENFORCED;
pub const IAS_ATTRIBUTE_MACHINE_NTGROUPS = ATTRIBUTEID.IAS_ATTRIBUTE_MACHINE_NTGROUPS;
pub const IAS_ATTRIBUTE_USER_NTGROUPS = ATTRIBUTEID.IAS_ATTRIBUTE_USER_NTGROUPS;
pub const IAS_ATTRIBUTE_MACHINE_TOKEN_GROUPS = ATTRIBUTEID.IAS_ATTRIBUTE_MACHINE_TOKEN_GROUPS;
pub const IAS_ATTRIBUTE_USER_TOKEN_GROUPS = ATTRIBUTEID.IAS_ATTRIBUTE_USER_TOKEN_GROUPS;
pub const MS_ATTRIBUTE_QUARANTINE_GRACE_TIME = ATTRIBUTEID.MS_ATTRIBUTE_QUARANTINE_GRACE_TIME;
pub const IAS_ATTRIBUTE_QUARANTINE_URL = ATTRIBUTEID.IAS_ATTRIBUTE_QUARANTINE_URL;
pub const IAS_ATTRIBUTE_QUARANTINE_FIXUP_SERVERS = ATTRIBUTEID.IAS_ATTRIBUTE_QUARANTINE_FIXUP_SERVERS;
pub const MS_ATTRIBUTE_NOT_QUARANTINE_CAPABLE = ATTRIBUTEID.MS_ATTRIBUTE_NOT_QUARANTINE_CAPABLE;
pub const IAS_ATTRIBUTE_QUARANTINE_SYSTEM_HEALTH_RESULT = ATTRIBUTEID.IAS_ATTRIBUTE_QUARANTINE_SYSTEM_HEALTH_RESULT;
pub const IAS_ATTRIBUTE_QUARANTINE_SYSTEM_HEALTH_VALIDATORS = ATTRIBUTEID.IAS_ATTRIBUTE_QUARANTINE_SYSTEM_HEALTH_VALIDATORS;
pub const IAS_ATTRIBUTE_MACHINE_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_MACHINE_NAME;
pub const IAS_ATTRIBUTE_NT4_MACHINE_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_NT4_MACHINE_NAME;
pub const IAS_ATTRIBUTE_QUARANTINE_SESSION_HANDLE = ATTRIBUTEID.IAS_ATTRIBUTE_QUARANTINE_SESSION_HANDLE;
pub const IAS_ATTRIBUTE_FULLY_QUALIFIED_MACHINE_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_FULLY_QUALIFIED_MACHINE_NAME;
pub const IAS_ATTRIBUTE_QUARANTINE_FIXUP_SERVERS_CONFIGURATION = ATTRIBUTEID.IAS_ATTRIBUTE_QUARANTINE_FIXUP_SERVERS_CONFIGURATION;
pub const IAS_ATTRIBUTE_CLIENT_QUARANTINE_COMPATIBLE = ATTRIBUTEID.IAS_ATTRIBUTE_CLIENT_QUARANTINE_COMPATIBLE;
pub const MS_ATTRIBUTE_NETWORK_ACCESS_SERVER_TYPE = ATTRIBUTEID.MS_ATTRIBUTE_NETWORK_ACCESS_SERVER_TYPE;
pub const IAS_ATTRIBUTE_QUARANTINE_SESSION_ID = ATTRIBUTEID.IAS_ATTRIBUTE_QUARANTINE_SESSION_ID;
pub const MS_ATTRIBUTE_AFW_QUARANTINE_ZONE = ATTRIBUTEID.MS_ATTRIBUTE_AFW_QUARANTINE_ZONE;
pub const MS_ATTRIBUTE_AFW_PROTECTION_LEVEL = ATTRIBUTEID.MS_ATTRIBUTE_AFW_PROTECTION_LEVEL;
pub const IAS_ATTRIBUTE_QUARANTINE_UPDATE_NON_COMPLIANT = ATTRIBUTEID.IAS_ATTRIBUTE_QUARANTINE_UPDATE_NON_COMPLIANT;
pub const IAS_ATTRIBUTE_REQUEST_START_TIME = ATTRIBUTEID.IAS_ATTRIBUTE_REQUEST_START_TIME;
pub const MS_ATTRIBUTE_MACHINE_NAME = ATTRIBUTEID.MS_ATTRIBUTE_MACHINE_NAME;
pub const IAS_ATTRIBUTE_CLIENT_IPv6_ADDRESS = ATTRIBUTEID.IAS_ATTRIBUTE_CLIENT_IPv6_ADDRESS;
pub const IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_INTERFACE_ID = ATTRIBUTEID.IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_INTERFACE_ID;
pub const IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IPv6_PREFIX = ATTRIBUTEID.IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IPv6_PREFIX;
pub const IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IPv6_ROUTE = ATTRIBUTEID.IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IPv6_ROUTE;
pub const MS_ATTRIBUTE_QUARANTINE_GRACE_TIME_CONFIGURATION = ATTRIBUTEID.MS_ATTRIBUTE_QUARANTINE_GRACE_TIME_CONFIGURATION;
pub const MS_ATTRIBUTE_IPv6_FILTER = ATTRIBUTEID.MS_ATTRIBUTE_IPv6_FILTER;
pub const MS_ATTRIBUTE_IPV4_REMEDIATION_SERVERS = ATTRIBUTEID.MS_ATTRIBUTE_IPV4_REMEDIATION_SERVERS;
pub const MS_ATTRIBUTE_IPV6_REMEDIATION_SERVERS = ATTRIBUTEID.MS_ATTRIBUTE_IPV6_REMEDIATION_SERVERS;
pub const IAS_ATTRIBUTE_PROXY_RETRY_COUNT = ATTRIBUTEID.IAS_ATTRIBUTE_PROXY_RETRY_COUNT;
pub const IAS_ATTRIBUTE_MACHINE_INVENTORY = ATTRIBUTEID.IAS_ATTRIBUTE_MACHINE_INVENTORY;
pub const IAS_ATTRIBUTE_ABSOLUTE_TIME = ATTRIBUTEID.IAS_ATTRIBUTE_ABSOLUTE_TIME;
pub const MS_ATTRIBUTE_QUARANTINE_SOH = ATTRIBUTEID.MS_ATTRIBUTE_QUARANTINE_SOH;
pub const IAS_ATTRIBUTE_EAP_TYPES_CONFIGURED_IN_PROXYPOLICY = ATTRIBUTEID.IAS_ATTRIBUTE_EAP_TYPES_CONFIGURED_IN_PROXYPOLICY;
pub const MS_ATTRIBUTE_HCAP_LOCATION_GROUP_NAME = ATTRIBUTEID.MS_ATTRIBUTE_HCAP_LOCATION_GROUP_NAME;
pub const MS_ATTRIBUTE_EXTENDED_QUARANTINE_STATE = ATTRIBUTEID.MS_ATTRIBUTE_EXTENDED_QUARANTINE_STATE;
pub const IAS_ATTRIBUTE_SOH_CARRIER_EAPTLV = ATTRIBUTEID.IAS_ATTRIBUTE_SOH_CARRIER_EAPTLV;
pub const MS_ATTRIBUTE_HCAP_USER_GROUPS = ATTRIBUTEID.MS_ATTRIBUTE_HCAP_USER_GROUPS;
pub const IAS_ATTRIBUTE_SAVED_MACHINE_HEALTHCHECK_ONLY = ATTRIBUTEID.IAS_ATTRIBUTE_SAVED_MACHINE_HEALTHCHECK_ONLY;
pub const IAS_ATTRIBUTE_POLICY_EVALUATED_SHV = ATTRIBUTEID.IAS_ATTRIBUTE_POLICY_EVALUATED_SHV;
pub const MS_ATTRIBUTE_RAS_CORRELATION_ID = ATTRIBUTEID.MS_ATTRIBUTE_RAS_CORRELATION_ID;
pub const MS_ATTRIBUTE_HCAP_USER_NAME = ATTRIBUTEID.MS_ATTRIBUTE_HCAP_USER_NAME;
pub const IAS_ATTRIBUTE_NT4_HCAP_ACCOUNT_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_NT4_HCAP_ACCOUNT_NAME;
pub const IAS_ATTRIBUTE_USER_TOKEN_SID = ATTRIBUTEID.IAS_ATTRIBUTE_USER_TOKEN_SID;
pub const IAS_ATTRIBUTE_MACHINE_TOKEN_SID = ATTRIBUTEID.IAS_ATTRIBUTE_MACHINE_TOKEN_SID;
pub const IAS_ATTRIBUTE_MACHINE_VALIDATED = ATTRIBUTEID.IAS_ATTRIBUTE_MACHINE_VALIDATED;
pub const MS_ATTRIBUTE_USER_IPv4_ADDRESS = ATTRIBUTEID.MS_ATTRIBUTE_USER_IPv4_ADDRESS;
pub const MS_ATTRIBUTE_USER_IPv6_ADDRESS = ATTRIBUTEID.MS_ATTRIBUTE_USER_IPv6_ADDRESS;
pub const MS_ATTRIBUTE_TSG_DEVICE_REDIRECTION = ATTRIBUTEID.MS_ATTRIBUTE_TSG_DEVICE_REDIRECTION;
pub const IAS_ATTRIBUTE_ACCEPT_REASON_CODE = ATTRIBUTEID.IAS_ATTRIBUTE_ACCEPT_REASON_CODE;
pub const IAS_ATTRIBUTE_LOGGING_RESULT = ATTRIBUTEID.IAS_ATTRIBUTE_LOGGING_RESULT;
pub const IAS_ATTRIBUTE_SERVER_IP_ADDRESS = ATTRIBUTEID.IAS_ATTRIBUTE_SERVER_IP_ADDRESS;
pub const IAS_ATTRIBUTE_SERVER_IPv6_ADDRESS = ATTRIBUTEID.IAS_ATTRIBUTE_SERVER_IPv6_ADDRESS;
pub const IAS_ATTRIBUTE_RADIUS_USERNAME_ENCODING_ASCII = ATTRIBUTEID.IAS_ATTRIBUTE_RADIUS_USERNAME_ENCODING_ASCII;
pub const MS_ATTRIBUTE_RAS_ROUTING_DOMAIN_ID = ATTRIBUTEID.MS_ATTRIBUTE_RAS_ROUTING_DOMAIN_ID;
pub const IAS_ATTRIBUTE_CERTIFICATE_THUMBPRINT = ATTRIBUTEID.IAS_ATTRIBUTE_CERTIFICATE_THUMBPRINT;
pub const RAS_ATTRIBUTE_ENCRYPTION_TYPE = ATTRIBUTEID.RAS_ATTRIBUTE_ENCRYPTION_TYPE;
pub const RAS_ATTRIBUTE_ENCRYPTION_POLICY = ATTRIBUTEID.RAS_ATTRIBUTE_ENCRYPTION_POLICY;
pub const RAS_ATTRIBUTE_BAP_REQUIRED = ATTRIBUTEID.RAS_ATTRIBUTE_BAP_REQUIRED;
pub const RAS_ATTRIBUTE_BAP_LINE_DOWN_TIME = ATTRIBUTEID.RAS_ATTRIBUTE_BAP_LINE_DOWN_TIME;
pub const RAS_ATTRIBUTE_BAP_LINE_DOWN_LIMIT = ATTRIBUTEID.RAS_ATTRIBUTE_BAP_LINE_DOWN_LIMIT;

pub const NEW_LOG_FILE_FREQUENCY = enum(i32) {
    UNLIMITED_SIZE = 0,
    DAILY = 1,
    WEEKLY = 2,
    MONTHLY = 3,
    WHEN_FILE_SIZE_REACHES = 4,
};
pub const IAS_LOGGING_UNLIMITED_SIZE = NEW_LOG_FILE_FREQUENCY.UNLIMITED_SIZE;
pub const IAS_LOGGING_DAILY = NEW_LOG_FILE_FREQUENCY.DAILY;
pub const IAS_LOGGING_WEEKLY = NEW_LOG_FILE_FREQUENCY.WEEKLY;
pub const IAS_LOGGING_MONTHLY = NEW_LOG_FILE_FREQUENCY.MONTHLY;
pub const IAS_LOGGING_WHEN_FILE_SIZE_REACHES = NEW_LOG_FILE_FREQUENCY.WHEN_FILE_SIZE_REACHES;

pub const AUTHENTICATION_TYPE = enum(i32) {
    INVALID = 0,
    PAP = 1,
    MD5CHAP = 2,
    MSCHAP = 3,
    MSCHAP2 = 4,
    EAP = 5,
    ARAP = 6,
    NONE = 7,
    CUSTOM = 8,
    MSCHAP_CPW = 9,
    MSCHAP2_CPW = 10,
    PEAP = 11,
};
pub const IAS_AUTH_INVALID = AUTHENTICATION_TYPE.INVALID;
pub const IAS_AUTH_PAP = AUTHENTICATION_TYPE.PAP;
pub const IAS_AUTH_MD5CHAP = AUTHENTICATION_TYPE.MD5CHAP;
pub const IAS_AUTH_MSCHAP = AUTHENTICATION_TYPE.MSCHAP;
pub const IAS_AUTH_MSCHAP2 = AUTHENTICATION_TYPE.MSCHAP2;
pub const IAS_AUTH_EAP = AUTHENTICATION_TYPE.EAP;
pub const IAS_AUTH_ARAP = AUTHENTICATION_TYPE.ARAP;
pub const IAS_AUTH_NONE = AUTHENTICATION_TYPE.NONE;
pub const IAS_AUTH_CUSTOM = AUTHENTICATION_TYPE.CUSTOM;
pub const IAS_AUTH_MSCHAP_CPW = AUTHENTICATION_TYPE.MSCHAP_CPW;
pub const IAS_AUTH_MSCHAP2_CPW = AUTHENTICATION_TYPE.MSCHAP2_CPW;
pub const IAS_AUTH_PEAP = AUTHENTICATION_TYPE.PEAP;

pub const IDENTITY_TYPE = enum(i32) {
    T = 1,
};
pub const IAS_IDENTITY_NO_DEFAULT = IDENTITY_TYPE.T;

pub const ATTRIBUTESYNTAX = enum(i32) {
    BOOLEAN = 1,
    INTEGER = 2,
    ENUMERATOR = 3,
    INETADDR = 4,
    STRING = 5,
    OCTETSTRING = 6,
    UTCTIME = 7,
    PROVIDERSPECIFIC = 8,
    UNSIGNEDINTEGER = 9,
    INETADDR6 = 10,
};
pub const IAS_SYNTAX_BOOLEAN = ATTRIBUTESYNTAX.BOOLEAN;
pub const IAS_SYNTAX_INTEGER = ATTRIBUTESYNTAX.INTEGER;
pub const IAS_SYNTAX_ENUMERATOR = ATTRIBUTESYNTAX.ENUMERATOR;
pub const IAS_SYNTAX_INETADDR = ATTRIBUTESYNTAX.INETADDR;
pub const IAS_SYNTAX_STRING = ATTRIBUTESYNTAX.STRING;
pub const IAS_SYNTAX_OCTETSTRING = ATTRIBUTESYNTAX.OCTETSTRING;
pub const IAS_SYNTAX_UTCTIME = ATTRIBUTESYNTAX.UTCTIME;
pub const IAS_SYNTAX_PROVIDERSPECIFIC = ATTRIBUTESYNTAX.PROVIDERSPECIFIC;
pub const IAS_SYNTAX_UNSIGNEDINTEGER = ATTRIBUTESYNTAX.UNSIGNEDINTEGER;
pub const IAS_SYNTAX_INETADDR6 = ATTRIBUTESYNTAX.INETADDR6;

pub const ATTRIBUTERESTRICTIONS = enum(i32) {
    MULTIVALUED = 1,
    ALLOWEDINPROFILE = 2,
    ALLOWEDINCONDITION = 4,
    ALLOWEDINPROXYPROFILE = 8,
    ALLOWEDINPROXYCONDITION = 16,
    ALLOWEDINVPNDIALUP = 32,
    ALLOWEDIN8021X = 64,
};
pub const MULTIVALUED = ATTRIBUTERESTRICTIONS.MULTIVALUED;
pub const ALLOWEDINPROFILE = ATTRIBUTERESTRICTIONS.ALLOWEDINPROFILE;
pub const ALLOWEDINCONDITION = ATTRIBUTERESTRICTIONS.ALLOWEDINCONDITION;
pub const ALLOWEDINPROXYPROFILE = ATTRIBUTERESTRICTIONS.ALLOWEDINPROXYPROFILE;
pub const ALLOWEDINPROXYCONDITION = ATTRIBUTERESTRICTIONS.ALLOWEDINPROXYCONDITION;
pub const ALLOWEDINVPNDIALUP = ATTRIBUTERESTRICTIONS.ALLOWEDINVPNDIALUP;
pub const ALLOWEDIN8021X = ATTRIBUTERESTRICTIONS.ALLOWEDIN8021X;

pub const ATTRIBUTEFILTER = enum(i32) {
    NONE = 0,
    VPN_DIALUP = 1,
    IEEE_802_1x = 2,
};
pub const ATTRIBUTE_FILTER_NONE = ATTRIBUTEFILTER.NONE;
pub const ATTRIBUTE_FILTER_VPN_DIALUP = ATTRIBUTEFILTER.VPN_DIALUP;
pub const ATTRIBUTE_FILTER_IEEE_802_1x = ATTRIBUTEFILTER.IEEE_802_1x;

pub const ATTRIBUTEINFO = enum(i32) {
    NAME = 1,
    SYNTAX = 2,
    RESTRICTIONS = 3,
    DESCRIPTION = 4,
    VENDORID = 5,
    LDAPNAME = 6,
    VENDORTYPE = 7,
};
pub const NAME = ATTRIBUTEINFO.NAME;
pub const SYNTAX = ATTRIBUTEINFO.SYNTAX;
pub const RESTRICTIONS = ATTRIBUTEINFO.RESTRICTIONS;
pub const DESCRIPTION = ATTRIBUTEINFO.DESCRIPTION;
pub const VENDORID = ATTRIBUTEINFO.VENDORID;
pub const LDAPNAME = ATTRIBUTEINFO.LDAPNAME;
pub const VENDORTYPE = ATTRIBUTEINFO.VENDORTYPE;

pub const IASCOMMONPROPERTIES = enum(i32) {
    RESERVED = 0,
    CLASS = 1,
    NAME = 2,
    DESCRIPTION = 3,
    ID = 4,
    DATASTORE_NAME = 5,
    TEMPLATE_GUID = 6,
    OPAQUE = 7,
    START = 1024,
};
pub const PROPERTY_SDO_RESERVED = IASCOMMONPROPERTIES.RESERVED;
pub const PROPERTY_SDO_CLASS = IASCOMMONPROPERTIES.CLASS;
pub const PROPERTY_SDO_NAME = IASCOMMONPROPERTIES.NAME;
pub const PROPERTY_SDO_DESCRIPTION = IASCOMMONPROPERTIES.DESCRIPTION;
pub const PROPERTY_SDO_ID = IASCOMMONPROPERTIES.ID;
pub const PROPERTY_SDO_DATASTORE_NAME = IASCOMMONPROPERTIES.DATASTORE_NAME;
pub const PROPERTY_SDO_TEMPLATE_GUID = IASCOMMONPROPERTIES.TEMPLATE_GUID;
pub const PROPERTY_SDO_OPAQUE = IASCOMMONPROPERTIES.OPAQUE;
pub const PROPERTY_SDO_START = IASCOMMONPROPERTIES.START;

pub const USERPROPERTIES = enum(i32) {
    CALLING_STATION_ID = 1024,
    SAVED_CALLING_STATION_ID = 1025,
    RADIUS_CALLBACK_NUMBER = 1026,
    RADIUS_FRAMED_ROUTE = 1027,
    RADIUS_FRAMED_IP_ADDRESS = 1028,
    SAVED_RADIUS_CALLBACK_NUMBER = 1029,
    SAVED_RADIUS_FRAMED_ROUTE = 1030,
    SAVED_RADIUS_FRAMED_IP_ADDRESS = 1031,
    ALLOW_DIALIN = 1032,
    SERVICE_TYPE = 1033,
    RADIUS_FRAMED_IPV6_ROUTE = 1034,
    SAVED_RADIUS_FRAMED_IPV6_ROUTE = 1035,
    RADIUS_FRAMED_INTERFACE_ID = 1036,
    SAVED_RADIUS_FRAMED_INTERFACE_ID = 1037,
    RADIUS_FRAMED_IPV6_PREFIX = 1038,
    SAVED_RADIUS_FRAMED_IPV6_PREFIX = 1039,
};
pub const PROPERTY_USER_CALLING_STATION_ID = USERPROPERTIES.CALLING_STATION_ID;
pub const PROPERTY_USER_SAVED_CALLING_STATION_ID = USERPROPERTIES.SAVED_CALLING_STATION_ID;
pub const PROPERTY_USER_RADIUS_CALLBACK_NUMBER = USERPROPERTIES.RADIUS_CALLBACK_NUMBER;
pub const PROPERTY_USER_RADIUS_FRAMED_ROUTE = USERPROPERTIES.RADIUS_FRAMED_ROUTE;
pub const PROPERTY_USER_RADIUS_FRAMED_IP_ADDRESS = USERPROPERTIES.RADIUS_FRAMED_IP_ADDRESS;
pub const PROPERTY_USER_SAVED_RADIUS_CALLBACK_NUMBER = USERPROPERTIES.SAVED_RADIUS_CALLBACK_NUMBER;
pub const PROPERTY_USER_SAVED_RADIUS_FRAMED_ROUTE = USERPROPERTIES.SAVED_RADIUS_FRAMED_ROUTE;
pub const PROPERTY_USER_SAVED_RADIUS_FRAMED_IP_ADDRESS = USERPROPERTIES.SAVED_RADIUS_FRAMED_IP_ADDRESS;
pub const PROPERTY_USER_ALLOW_DIALIN = USERPROPERTIES.ALLOW_DIALIN;
pub const PROPERTY_USER_SERVICE_TYPE = USERPROPERTIES.SERVICE_TYPE;
pub const PROPERTY_USER_RADIUS_FRAMED_IPV6_ROUTE = USERPROPERTIES.RADIUS_FRAMED_IPV6_ROUTE;
pub const PROPERTY_USER_SAVED_RADIUS_FRAMED_IPV6_ROUTE = USERPROPERTIES.SAVED_RADIUS_FRAMED_IPV6_ROUTE;
pub const PROPERTY_USER_RADIUS_FRAMED_INTERFACE_ID = USERPROPERTIES.RADIUS_FRAMED_INTERFACE_ID;
pub const PROPERTY_USER_SAVED_RADIUS_FRAMED_INTERFACE_ID = USERPROPERTIES.SAVED_RADIUS_FRAMED_INTERFACE_ID;
pub const PROPERTY_USER_RADIUS_FRAMED_IPV6_PREFIX = USERPROPERTIES.RADIUS_FRAMED_IPV6_PREFIX;
pub const PROPERTY_USER_SAVED_RADIUS_FRAMED_IPV6_PREFIX = USERPROPERTIES.SAVED_RADIUS_FRAMED_IPV6_PREFIX;

pub const DICTIONARYPROPERTIES = enum(i32) {
    ATTRIBUTES_COLLECTION = 1024,
    LOCATION = 1025,
};
pub const PROPERTY_DICTIONARY_ATTRIBUTES_COLLECTION = DICTIONARYPROPERTIES.ATTRIBUTES_COLLECTION;
pub const PROPERTY_DICTIONARY_LOCATION = DICTIONARYPROPERTIES.LOCATION;

pub const ATTRIBUTEPROPERTIES = enum(i32) {
    ID = 1024,
    VENDOR_ID = 1025,
    VENDOR_TYPE_ID = 1026,
    IS_ENUMERABLE = 1027,
    ENUM_NAMES = 1028,
    ENUM_VALUES = 1029,
    SYNTAX = 1030,
    ALLOW_MULTIPLE = 1031,
    ALLOW_LOG_ORDINAL = 1032,
    ALLOW_IN_PROFILE = 1033,
    ALLOW_IN_CONDITION = 1034,
    DISPLAY_NAME = 1035,
    VALUE = 1036,
    ALLOW_IN_PROXY_PROFILE = 1037,
    ALLOW_IN_PROXY_CONDITION = 1038,
    ALLOW_IN_VPNDIALUP = 1039,
    ALLOW_IN_8021X = 1040,
    ENUM_FILTERS = 1041,
};
pub const PROPERTY_ATTRIBUTE_ID = ATTRIBUTEPROPERTIES.ID;
pub const PROPERTY_ATTRIBUTE_VENDOR_ID = ATTRIBUTEPROPERTIES.VENDOR_ID;
pub const PROPERTY_ATTRIBUTE_VENDOR_TYPE_ID = ATTRIBUTEPROPERTIES.VENDOR_TYPE_ID;
pub const PROPERTY_ATTRIBUTE_IS_ENUMERABLE = ATTRIBUTEPROPERTIES.IS_ENUMERABLE;
pub const PROPERTY_ATTRIBUTE_ENUM_NAMES = ATTRIBUTEPROPERTIES.ENUM_NAMES;
pub const PROPERTY_ATTRIBUTE_ENUM_VALUES = ATTRIBUTEPROPERTIES.ENUM_VALUES;
pub const PROPERTY_ATTRIBUTE_SYNTAX = ATTRIBUTEPROPERTIES.SYNTAX;
pub const PROPERTY_ATTRIBUTE_ALLOW_MULTIPLE = ATTRIBUTEPROPERTIES.ALLOW_MULTIPLE;
pub const PROPERTY_ATTRIBUTE_ALLOW_LOG_ORDINAL = ATTRIBUTEPROPERTIES.ALLOW_LOG_ORDINAL;
pub const PROPERTY_ATTRIBUTE_ALLOW_IN_PROFILE = ATTRIBUTEPROPERTIES.ALLOW_IN_PROFILE;
pub const PROPERTY_ATTRIBUTE_ALLOW_IN_CONDITION = ATTRIBUTEPROPERTIES.ALLOW_IN_CONDITION;
pub const PROPERTY_ATTRIBUTE_DISPLAY_NAME = ATTRIBUTEPROPERTIES.DISPLAY_NAME;
pub const PROPERTY_ATTRIBUTE_VALUE = ATTRIBUTEPROPERTIES.VALUE;
pub const PROPERTY_ATTRIBUTE_ALLOW_IN_PROXY_PROFILE = ATTRIBUTEPROPERTIES.ALLOW_IN_PROXY_PROFILE;
pub const PROPERTY_ATTRIBUTE_ALLOW_IN_PROXY_CONDITION = ATTRIBUTEPROPERTIES.ALLOW_IN_PROXY_CONDITION;
pub const PROPERTY_ATTRIBUTE_ALLOW_IN_VPNDIALUP = ATTRIBUTEPROPERTIES.ALLOW_IN_VPNDIALUP;
pub const PROPERTY_ATTRIBUTE_ALLOW_IN_8021X = ATTRIBUTEPROPERTIES.ALLOW_IN_8021X;
pub const PROPERTY_ATTRIBUTE_ENUM_FILTERS = ATTRIBUTEPROPERTIES.ENUM_FILTERS;

pub const IASPROPERTIES = enum(i32) {
    RADIUSSERVERGROUPS_COLLECTION = 1024,
    POLICIES_COLLECTION = 1025,
    PROFILES_COLLECTION = 1026,
    PROTOCOLS_COLLECTION = 1027,
    AUDITORS_COLLECTION = 1028,
    REQUESTHANDLERS_COLLECTION = 1029,
    PROXYPOLICIES_COLLECTION = 1030,
    PROXYPROFILES_COLLECTION = 1031,
    REMEDIATIONSERVERGROUPS_COLLECTION = 1032,
    SHVTEMPLATES_COLLECTION = 1033,
};
pub const PROPERTY_IAS_RADIUSSERVERGROUPS_COLLECTION = IASPROPERTIES.RADIUSSERVERGROUPS_COLLECTION;
pub const PROPERTY_IAS_POLICIES_COLLECTION = IASPROPERTIES.POLICIES_COLLECTION;
pub const PROPERTY_IAS_PROFILES_COLLECTION = IASPROPERTIES.PROFILES_COLLECTION;
pub const PROPERTY_IAS_PROTOCOLS_COLLECTION = IASPROPERTIES.PROTOCOLS_COLLECTION;
pub const PROPERTY_IAS_AUDITORS_COLLECTION = IASPROPERTIES.AUDITORS_COLLECTION;
pub const PROPERTY_IAS_REQUESTHANDLERS_COLLECTION = IASPROPERTIES.REQUESTHANDLERS_COLLECTION;
pub const PROPERTY_IAS_PROXYPOLICIES_COLLECTION = IASPROPERTIES.PROXYPOLICIES_COLLECTION;
pub const PROPERTY_IAS_PROXYPROFILES_COLLECTION = IASPROPERTIES.PROXYPROFILES_COLLECTION;
pub const PROPERTY_IAS_REMEDIATIONSERVERGROUPS_COLLECTION = IASPROPERTIES.REMEDIATIONSERVERGROUPS_COLLECTION;
pub const PROPERTY_IAS_SHVTEMPLATES_COLLECTION = IASPROPERTIES.SHVTEMPLATES_COLLECTION;

pub const TEMPLATESPROPERTIES = enum(i32) {
    POLICIES_TEMPLATES = 1024,
    PROFILES_TEMPLATES = 1025,
    PROFILES_COLLECTION = 1026,
    PROXYPOLICIES_TEMPLATES = 1027,
    PROXYPROFILES_TEMPLATES = 1028,
    PROXYPROFILES_COLLECTION = 1029,
    REMEDIATIONSERVERGROUPS_TEMPLATES = 1030,
    SHVTEMPLATES_TEMPLATES = 1031,
    CLIENTS_TEMPLATES = 1032,
    RADIUSSERVERS_TEMPLATES = 1033,
    SHAREDSECRETS_TEMPLATES = 1034,
    IPFILTERS_TEMPLATES = 1035,
};
pub const PROPERTY_TEMPLATES_POLICIES_TEMPLATES = TEMPLATESPROPERTIES.POLICIES_TEMPLATES;
pub const PROPERTY_TEMPLATES_PROFILES_TEMPLATES = TEMPLATESPROPERTIES.PROFILES_TEMPLATES;
pub const PROPERTY_TEMPLATES_PROFILES_COLLECTION = TEMPLATESPROPERTIES.PROFILES_COLLECTION;
pub const PROPERTY_TEMPLATES_PROXYPOLICIES_TEMPLATES = TEMPLATESPROPERTIES.PROXYPOLICIES_TEMPLATES;
pub const PROPERTY_TEMPLATES_PROXYPROFILES_TEMPLATES = TEMPLATESPROPERTIES.PROXYPROFILES_TEMPLATES;
pub const PROPERTY_TEMPLATES_PROXYPROFILES_COLLECTION = TEMPLATESPROPERTIES.PROXYPROFILES_COLLECTION;
pub const PROPERTY_TEMPLATES_REMEDIATIONSERVERGROUPS_TEMPLATES = TEMPLATESPROPERTIES.REMEDIATIONSERVERGROUPS_TEMPLATES;
pub const PROPERTY_TEMPLATES_SHVTEMPLATES_TEMPLATES = TEMPLATESPROPERTIES.SHVTEMPLATES_TEMPLATES;
pub const PROPERTY_TEMPLATES_CLIENTS_TEMPLATES = TEMPLATESPROPERTIES.CLIENTS_TEMPLATES;
pub const PROPERTY_TEMPLATES_RADIUSSERVERS_TEMPLATES = TEMPLATESPROPERTIES.RADIUSSERVERS_TEMPLATES;
pub const PROPERTY_TEMPLATES_SHAREDSECRETS_TEMPLATES = TEMPLATESPROPERTIES.SHAREDSECRETS_TEMPLATES;
pub const PROPERTY_TEMPLATES_IPFILTERS_TEMPLATES = TEMPLATESPROPERTIES.IPFILTERS_TEMPLATES;

pub const CLIENTPROPERTIES = enum(i32) {
    REQUIRE_SIGNATURE = 1024,
    UNUSED = 1025,
    SHARED_SECRET = 1026,
    NAS_MANUFACTURER = 1027,
    ADDRESS = 1028,
    QUARANTINE_COMPATIBLE = 1029,
    ENABLED = 1030,
    SECRET_TEMPLATE_GUID = 1031,
};
pub const PROPERTY_CLIENT_REQUIRE_SIGNATURE = CLIENTPROPERTIES.REQUIRE_SIGNATURE;
pub const PROPERTY_CLIENT_UNUSED = CLIENTPROPERTIES.UNUSED;
pub const PROPERTY_CLIENT_SHARED_SECRET = CLIENTPROPERTIES.SHARED_SECRET;
pub const PROPERTY_CLIENT_NAS_MANUFACTURER = CLIENTPROPERTIES.NAS_MANUFACTURER;
pub const PROPERTY_CLIENT_ADDRESS = CLIENTPROPERTIES.ADDRESS;
pub const PROPERTY_CLIENT_QUARANTINE_COMPATIBLE = CLIENTPROPERTIES.QUARANTINE_COMPATIBLE;
pub const PROPERTY_CLIENT_ENABLED = CLIENTPROPERTIES.ENABLED;
pub const PROPERTY_CLIENT_SECRET_TEMPLATE_GUID = CLIENTPROPERTIES.SECRET_TEMPLATE_GUID;

pub const VENDORPROPERTIES = enum(i32) {
    D = 1024,
};
pub const PROPERTY_NAS_VENDOR_ID = VENDORPROPERTIES.D;

pub const PROFILEPROPERTIES = enum(i32) {
    ATTRIBUTES_COLLECTION = 1024,
    IPFILTER_TEMPLATE_GUID = 1025,
};
pub const PROPERTY_PROFILE_ATTRIBUTES_COLLECTION = PROFILEPROPERTIES.ATTRIBUTES_COLLECTION;
pub const PROPERTY_PROFILE_IPFILTER_TEMPLATE_GUID = PROFILEPROPERTIES.IPFILTER_TEMPLATE_GUID;

pub const POLICYPROPERTIES = enum(i32) {
    CONSTRAINT = 1024,
    MERIT = 1025,
    UNUSED0 = 1026,
    UNUSED1 = 1027,
    PROFILE_NAME = 1028,
    ACTION = 1029,
    CONDITIONS_COLLECTION = 1030,
    ENABLED = 1031,
    SOURCETAG = 1032,
};
pub const PROPERTY_POLICY_CONSTRAINT = POLICYPROPERTIES.CONSTRAINT;
pub const PROPERTY_POLICY_MERIT = POLICYPROPERTIES.MERIT;
pub const PROPERTY_POLICY_UNUSED0 = POLICYPROPERTIES.UNUSED0;
pub const PROPERTY_POLICY_UNUSED1 = POLICYPROPERTIES.UNUSED1;
pub const PROPERTY_POLICY_PROFILE_NAME = POLICYPROPERTIES.PROFILE_NAME;
pub const PROPERTY_POLICY_ACTION = POLICYPROPERTIES.ACTION;
pub const PROPERTY_POLICY_CONDITIONS_COLLECTION = POLICYPROPERTIES.CONDITIONS_COLLECTION;
pub const PROPERTY_POLICY_ENABLED = POLICYPROPERTIES.ENABLED;
pub const PROPERTY_POLICY_SOURCETAG = POLICYPROPERTIES.SOURCETAG;

pub const CONDITIONPROPERTIES = enum(i32) {
    T = 1024,
};
pub const PROPERTY_CONDITION_TEXT = CONDITIONPROPERTIES.T;

pub const RADIUSSERVERGROUPPROPERTIES = enum(i32) {
    N = 1024,
};
pub const PROPERTY_RADIUSSERVERGROUP_SERVERS_COLLECTION = RADIUSSERVERGROUPPROPERTIES.N;

pub const RADIUSSERVERPROPERTIES = enum(i32) {
    AUTH_PORT = 1024,
    AUTH_SECRET = 1025,
    ACCT_PORT = 1026,
    ACCT_SECRET = 1027,
    ADDRESS = 1028,
    FORWARD_ACCT_ONOFF = 1029,
    PRIORITY = 1030,
    WEIGHT = 1031,
    TIMEOUT = 1032,
    MAX_LOST = 1033,
    BLACKOUT = 1034,
    SEND_SIGNATURE = 1035,
    AUTH_SECRET_TEMPLATE_GUID = 1036,
    ACCT_SECRET_TEMPLATE_GUID = 1037,
};
pub const PROPERTY_RADIUSSERVER_AUTH_PORT = RADIUSSERVERPROPERTIES.AUTH_PORT;
pub const PROPERTY_RADIUSSERVER_AUTH_SECRET = RADIUSSERVERPROPERTIES.AUTH_SECRET;
pub const PROPERTY_RADIUSSERVER_ACCT_PORT = RADIUSSERVERPROPERTIES.ACCT_PORT;
pub const PROPERTY_RADIUSSERVER_ACCT_SECRET = RADIUSSERVERPROPERTIES.ACCT_SECRET;
pub const PROPERTY_RADIUSSERVER_ADDRESS = RADIUSSERVERPROPERTIES.ADDRESS;
pub const PROPERTY_RADIUSSERVER_FORWARD_ACCT_ONOFF = RADIUSSERVERPROPERTIES.FORWARD_ACCT_ONOFF;
pub const PROPERTY_RADIUSSERVER_PRIORITY = RADIUSSERVERPROPERTIES.PRIORITY;
pub const PROPERTY_RADIUSSERVER_WEIGHT = RADIUSSERVERPROPERTIES.WEIGHT;
pub const PROPERTY_RADIUSSERVER_TIMEOUT = RADIUSSERVERPROPERTIES.TIMEOUT;
pub const PROPERTY_RADIUSSERVER_MAX_LOST = RADIUSSERVERPROPERTIES.MAX_LOST;
pub const PROPERTY_RADIUSSERVER_BLACKOUT = RADIUSSERVERPROPERTIES.BLACKOUT;
pub const PROPERTY_RADIUSSERVER_SEND_SIGNATURE = RADIUSSERVERPROPERTIES.SEND_SIGNATURE;
pub const PROPERTY_RADIUSSERVER_AUTH_SECRET_TEMPLATE_GUID = RADIUSSERVERPROPERTIES.AUTH_SECRET_TEMPLATE_GUID;
pub const PROPERTY_RADIUSSERVER_ACCT_SECRET_TEMPLATE_GUID = RADIUSSERVERPROPERTIES.ACCT_SECRET_TEMPLATE_GUID;

pub const REMEDIATIONSERVERGROUPPROPERTIES = enum(i32) {
    N = 1024,
};
pub const PROPERTY_REMEDIATIONSERVERGROUP_SERVERS_COLLECTION = REMEDIATIONSERVERGROUPPROPERTIES.N;

pub const REMEDIATIONSERVERPROPERTIES = enum(i32) {
    ADDRESS = 1024,
    FRIENDLY_NAME = 1025,
};
pub const PROPERTY_REMEDIATIONSERVER_ADDRESS = REMEDIATIONSERVERPROPERTIES.ADDRESS;
pub const PROPERTY_REMEDIATIONSERVER_FRIENDLY_NAME = REMEDIATIONSERVERPROPERTIES.FRIENDLY_NAME;

pub const SHVTEMPLATEPROPERTIES = enum(i32) {
    _COMBINATION_TYPE = 1024,
    _LIST = 1025,
    CONFIG_LIST = 1026,
};
pub const PROPERTY_SHV_COMBINATION_TYPE = SHVTEMPLATEPROPERTIES._COMBINATION_TYPE;
pub const PROPERTY_SHV_LIST = SHVTEMPLATEPROPERTIES._LIST;
pub const PROPERTY_SHVCONFIG_LIST = SHVTEMPLATEPROPERTIES.CONFIG_LIST;

pub const IPFILTERPROPERTIES = enum(i32) {
    N = 1024,
};
pub const PROPERTY_IPFILTER_ATTRIBUTES_COLLECTION = IPFILTERPROPERTIES.N;

pub const SHAREDSECRETPROPERTIES = enum(i32) {
    G = 1024,
};
pub const PROPERTY_SHAREDSECRET_STRING = SHAREDSECRETPROPERTIES.G;

pub const IASCOMPONENTPROPERTIES = enum(i32) {
    ID = 1024,
    PROG_ID = 1025,
    START = 1026,
};
pub const PROPERTY_COMPONENT_ID = IASCOMPONENTPROPERTIES.ID;
pub const PROPERTY_COMPONENT_PROG_ID = IASCOMPONENTPROPERTIES.PROG_ID;
pub const PROPERTY_COMPONENT_START = IASCOMPONENTPROPERTIES.START;

pub const PROTOCOLPROPERTIES = enum(i32) {
    REQUEST_HANDLER = 1026,
    START = 1027,
};
pub const PROPERTY_PROTOCOL_REQUEST_HANDLER = PROTOCOLPROPERTIES.REQUEST_HANDLER;
pub const PROPERTY_PROTOCOL_START = PROTOCOLPROPERTIES.START;

pub const RADIUSPROPERTIES = enum(i32) {
    ACCOUNTING_PORT = 1027,
    AUTHENTICATION_PORT = 1028,
    CLIENTS_COLLECTION = 1029,
    VENDORS_COLLECTION = 1030,
};
pub const PROPERTY_RADIUS_ACCOUNTING_PORT = RADIUSPROPERTIES.ACCOUNTING_PORT;
pub const PROPERTY_RADIUS_AUTHENTICATION_PORT = RADIUSPROPERTIES.AUTHENTICATION_PORT;
pub const PROPERTY_RADIUS_CLIENTS_COLLECTION = RADIUSPROPERTIES.CLIENTS_COLLECTION;
pub const PROPERTY_RADIUS_VENDORS_COLLECTION = RADIUSPROPERTIES.VENDORS_COLLECTION;

pub const NTEVENTLOGPROPERTIES = enum(i32) {
    APPLICATION_EVENTS = 1026,
    MALFORMED = 1027,
    DEBUG = 1028,
};
pub const PROPERTY_EVENTLOG_LOG_APPLICATION_EVENTS = NTEVENTLOGPROPERTIES.APPLICATION_EVENTS;
pub const PROPERTY_EVENTLOG_LOG_MALFORMED = NTEVENTLOGPROPERTIES.MALFORMED;
pub const PROPERTY_EVENTLOG_LOG_DEBUG = NTEVENTLOGPROPERTIES.DEBUG;

pub const NAMESPROPERTIES = enum(i32) {
    S = 1026,
};
pub const PROPERTY_NAMES_REALMS = NAMESPROPERTIES.S;

pub const NTSAMPROPERTIES = enum(i32) {
    N = 1026,
};
pub const PROPERTY_NTSAM_ALLOW_LM_AUTHENTICATION = NTSAMPROPERTIES.N;

pub const ACCOUNTINGPROPERTIES = enum(i32) {
    LOG_ACCOUNTING = 1026,
    LOG_ACCOUNTING_INTERIM = 1027,
    LOG_AUTHENTICATION = 1028,
    LOG_OPEN_NEW_FREQUENCY = 1029,
    LOG_OPEN_NEW_SIZE = 1030,
    LOG_FILE_DIRECTORY = 1031,
    LOG_IAS1_FORMAT = 1032,
    LOG_ENABLE_LOGGING = 1033,
    LOG_DELETE_IF_FULL = 1034,
    SQL_MAX_SESSIONS = 1035,
    LOG_AUTHENTICATION_INTERIM = 1036,
    LOG_FILE_IS_BACKUP = 1037,
    DISCARD_REQUEST_ON_FAILURE = 1038,
};
pub const PROPERTY_ACCOUNTING_LOG_ACCOUNTING = ACCOUNTINGPROPERTIES.LOG_ACCOUNTING;
pub const PROPERTY_ACCOUNTING_LOG_ACCOUNTING_INTERIM = ACCOUNTINGPROPERTIES.LOG_ACCOUNTING_INTERIM;
pub const PROPERTY_ACCOUNTING_LOG_AUTHENTICATION = ACCOUNTINGPROPERTIES.LOG_AUTHENTICATION;
pub const PROPERTY_ACCOUNTING_LOG_OPEN_NEW_FREQUENCY = ACCOUNTINGPROPERTIES.LOG_OPEN_NEW_FREQUENCY;
pub const PROPERTY_ACCOUNTING_LOG_OPEN_NEW_SIZE = ACCOUNTINGPROPERTIES.LOG_OPEN_NEW_SIZE;
pub const PROPERTY_ACCOUNTING_LOG_FILE_DIRECTORY = ACCOUNTINGPROPERTIES.LOG_FILE_DIRECTORY;
pub const PROPERTY_ACCOUNTING_LOG_IAS1_FORMAT = ACCOUNTINGPROPERTIES.LOG_IAS1_FORMAT;
pub const PROPERTY_ACCOUNTING_LOG_ENABLE_LOGGING = ACCOUNTINGPROPERTIES.LOG_ENABLE_LOGGING;
pub const PROPERTY_ACCOUNTING_LOG_DELETE_IF_FULL = ACCOUNTINGPROPERTIES.LOG_DELETE_IF_FULL;
pub const PROPERTY_ACCOUNTING_SQL_MAX_SESSIONS = ACCOUNTINGPROPERTIES.SQL_MAX_SESSIONS;
pub const PROPERTY_ACCOUNTING_LOG_AUTHENTICATION_INTERIM = ACCOUNTINGPROPERTIES.LOG_AUTHENTICATION_INTERIM;
pub const PROPERTY_ACCOUNTING_LOG_FILE_IS_BACKUP = ACCOUNTINGPROPERTIES.LOG_FILE_IS_BACKUP;
pub const PROPERTY_ACCOUNTING_DISCARD_REQUEST_ON_FAILURE = ACCOUNTINGPROPERTIES.DISCARD_REQUEST_ON_FAILURE;

pub const NAPPROPERTIES = enum(i32) {
    NAP_POLICIES_COLLECTION = 1026,
    SHV_TEMPLATES_COLLECTION = 1027,
};
pub const PROPERTY_NAP_POLICIES_COLLECTION = NAPPROPERTIES.NAP_POLICIES_COLLECTION;
pub const PROPERTY_SHV_TEMPLATES_COLLECTION = NAPPROPERTIES.SHV_TEMPLATES_COLLECTION;

pub const RADIUSPROXYPROPERTIES = enum(i32) {
    S = 1026,
};
pub const PROPERTY_RADIUSPROXY_SERVERGROUPS = RADIUSPROXYPROPERTIES.S;

pub const REMEDIATIONSERVERSPROPERTIES = enum(i32) {
    S = 1026,
};
pub const PROPERTY_REMEDIATIONSERVERS_SERVERGROUPS = REMEDIATIONSERVERSPROPERTIES.S;

pub const SHV_COMBINATION_TYPE = enum(i32) {
    ALL_PASS = 0,
    ALL_FAIL = 1,
    ONE_OR_MORE_PASS = 2,
    ONE_OR_MORE_FAIL = 3,
    ONE_OR_MORE_INFECTED = 4,
    ONE_OR_MORE_TRANSITIONAL = 5,
    ONE_OR_MORE_UNKNOWN = 6,
    MAX = 7,
};
pub const SHV_COMBINATION_TYPE_ALL_PASS = SHV_COMBINATION_TYPE.ALL_PASS;
pub const SHV_COMBINATION_TYPE_ALL_FAIL = SHV_COMBINATION_TYPE.ALL_FAIL;
pub const SHV_COMBINATION_TYPE_ONE_OR_MORE_PASS = SHV_COMBINATION_TYPE.ONE_OR_MORE_PASS;
pub const SHV_COMBINATION_TYPE_ONE_OR_MORE_FAIL = SHV_COMBINATION_TYPE.ONE_OR_MORE_FAIL;
pub const SHV_COMBINATION_TYPE_ONE_OR_MORE_INFECTED = SHV_COMBINATION_TYPE.ONE_OR_MORE_INFECTED;
pub const SHV_COMBINATION_TYPE_ONE_OR_MORE_TRANSITIONAL = SHV_COMBINATION_TYPE.ONE_OR_MORE_TRANSITIONAL;
pub const SHV_COMBINATION_TYPE_ONE_OR_MORE_UNKNOWN = SHV_COMBINATION_TYPE.ONE_OR_MORE_UNKNOWN;
pub const SHV_COMBINATION_TYPE_MAX = SHV_COMBINATION_TYPE.MAX;

pub const SERVICE_TYPE = enum(i32) {
    IAS = 0,
    RAS = 1,
    RAMGMTSVC = 2,
    MAX = 3,
};
pub const SERVICE_TYPE_IAS = SERVICE_TYPE.IAS;
pub const SERVICE_TYPE_RAS = SERVICE_TYPE.RAS;
pub const SERVICE_TYPE_RAMGMTSVC = SERVICE_TYPE.RAMGMTSVC;
pub const SERVICE_TYPE_MAX = SERVICE_TYPE.MAX;

pub const IASOSTYPE = enum(i32) {
    @"4_WORKSTATION" = 0,
    @"5_WORKSTATION" = 1,
    @"6_WORKSTATION" = 2,
    @"6_1_WORKSTATION" = 3,
    @"6_2_WORKSTATION" = 4,
    @"6_3_WORKSTATION" = 5,
    @"10_0_WORKSTATION" = 6,
    @"4_SERVER" = 7,
    @"5_SERVER" = 8,
    @"6_SERVER" = 9,
    @"6_1_SERVER" = 10,
    @"6_2_SERVER" = 11,
    @"6_3_SERVER" = 12,
    @"10_0_SERVER" = 13,
};
pub const SYSTEM_TYPE_NT4_WORKSTATION = IASOSTYPE.@"4_WORKSTATION";
pub const SYSTEM_TYPE_NT5_WORKSTATION = IASOSTYPE.@"5_WORKSTATION";
pub const SYSTEM_TYPE_NT6_WORKSTATION = IASOSTYPE.@"6_WORKSTATION";
pub const SYSTEM_TYPE_NT6_1_WORKSTATION = IASOSTYPE.@"6_1_WORKSTATION";
pub const SYSTEM_TYPE_NT6_2_WORKSTATION = IASOSTYPE.@"6_2_WORKSTATION";
pub const SYSTEM_TYPE_NT6_3_WORKSTATION = IASOSTYPE.@"6_3_WORKSTATION";
pub const SYSTEM_TYPE_NT10_0_WORKSTATION = IASOSTYPE.@"10_0_WORKSTATION";
pub const SYSTEM_TYPE_NT4_SERVER = IASOSTYPE.@"4_SERVER";
pub const SYSTEM_TYPE_NT5_SERVER = IASOSTYPE.@"5_SERVER";
pub const SYSTEM_TYPE_NT6_SERVER = IASOSTYPE.@"6_SERVER";
pub const SYSTEM_TYPE_NT6_1_SERVER = IASOSTYPE.@"6_1_SERVER";
pub const SYSTEM_TYPE_NT6_2_SERVER = IASOSTYPE.@"6_2_SERVER";
pub const SYSTEM_TYPE_NT6_3_SERVER = IASOSTYPE.@"6_3_SERVER";
pub const SYSTEM_TYPE_NT10_0_SERVER = IASOSTYPE.@"10_0_SERVER";

pub const IASDOMAINTYPE = enum(i32) {
    NONE = 0,
    NT4 = 1,
    NT5 = 2,
    MIXED = 3,
};
pub const DOMAIN_TYPE_NONE = IASDOMAINTYPE.NONE;
pub const DOMAIN_TYPE_NT4 = IASDOMAINTYPE.NT4;
pub const DOMAIN_TYPE_NT5 = IASDOMAINTYPE.NT5;
pub const DOMAIN_TYPE_MIXED = IASDOMAINTYPE.MIXED;

pub const IASDATASTORE = enum(i32) {
    LOCAL = 0,
    DIRECTORY = 1,
};
pub const DATA_STORE_LOCAL = IASDATASTORE.LOCAL;
pub const DATA_STORE_DIRECTORY = IASDATASTORE.DIRECTORY;

// TODO: this type is limited to platform 'windowsServer2008'
const IID_ISdoMachine_Value = Guid.initString("479f6e75-49a2-11d2-8eca-00c04fc2f519");
pub const IID_ISdoMachine = &IID_ISdoMachine_Value;
pub const ISdoMachine = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Attach: *const fn(
            self: *const ISdoMachine,
            bstrComputerName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDictionarySDO: *const fn(
            self: *const ISdoMachine,
            ppDictionarySDO: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetServiceSDO: *const fn(
            self: *const ISdoMachine,
            eDataStore: IASDATASTORE,
            bstrServiceName: ?BSTR,
            ppServiceSDO: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUserSDO: *const fn(
            self: *const ISdoMachine,
            eDataStore: IASDATASTORE,
            bstrUserName: ?BSTR,
            ppUserSDO: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOSType: *const fn(
            self: *const ISdoMachine,
            eOSType: ?*IASOSTYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDomainType: *const fn(
            self: *const ISdoMachine,
            eDomainType: ?*IASDOMAINTYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsDirectoryAvailable: *const fn(
            self: *const ISdoMachine,
            boolDirectoryAvailable: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttachedComputer: *const fn(
            self: *const ISdoMachine,
            bstrComputerName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSDOSchema: *const fn(
            self: *const ISdoMachine,
            ppSDOSchema: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Attach(self: *const ISdoMachine, bstrComputerName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Attach(self, bstrComputerName);
    }
    pub fn GetDictionarySDO(self: *const ISdoMachine, ppDictionarySDO: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.GetDictionarySDO(self, ppDictionarySDO);
    }
    pub fn GetServiceSDO(self: *const ISdoMachine, eDataStore: IASDATASTORE, bstrServiceName: ?BSTR, ppServiceSDO: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.GetServiceSDO(self, eDataStore, bstrServiceName, ppServiceSDO);
    }
    pub fn GetUserSDO(self: *const ISdoMachine, eDataStore: IASDATASTORE, bstrUserName: ?BSTR, ppUserSDO: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.GetUserSDO(self, eDataStore, bstrUserName, ppUserSDO);
    }
    pub fn GetOSType(self: *const ISdoMachine, eOSType: ?*IASOSTYPE) callconv(.Inline) HRESULT {
        return self.vtable.GetOSType(self, eOSType);
    }
    pub fn GetDomainType(self: *const ISdoMachine, eDomainType: ?*IASDOMAINTYPE) callconv(.Inline) HRESULT {
        return self.vtable.GetDomainType(self, eDomainType);
    }
    pub fn IsDirectoryAvailable(self: *const ISdoMachine, boolDirectoryAvailable: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.IsDirectoryAvailable(self, boolDirectoryAvailable);
    }
    pub fn GetAttachedComputer(self: *const ISdoMachine, bstrComputerName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetAttachedComputer(self, bstrComputerName);
    }
    pub fn GetSDOSchema(self: *const ISdoMachine, ppSDOSchema: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.GetSDOSchema(self, ppSDOSchema);
    }
};

const IID_ISdoMachine2_Value = Guid.initString("518e5ffe-d8ce-4f7e-a5db-b40a35419d3b");
pub const IID_ISdoMachine2 = &IID_ISdoMachine2_Value;
pub const ISdoMachine2 = extern union {
    pub const VTable = extern struct {
        base: ISdoMachine.VTable,
        GetTemplatesSDO: *const fn(
            self: *const ISdoMachine2,
            bstrServiceName: ?BSTR,
            ppTemplatesSDO: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableTemplates: *const fn(
            self: *const ISdoMachine2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SyncConfigAgainstTemplates: *const fn(
            self: *const ISdoMachine2,
            bstrServiceName: ?BSTR,
            ppConfigRoot: ?*?*IUnknown,
            ppTemplatesRoot: ?*?*IUnknown,
            bForcedSync: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportRemoteTemplates: *const fn(
            self: *const ISdoMachine2,
            pLocalTemplatesRoot: ?*IUnknown,
            bstrRemoteMachineName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reload: *const fn(
            self: *const ISdoMachine2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ISdoMachine: ISdoMachine,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GetTemplatesSDO(self: *const ISdoMachine2, bstrServiceName: ?BSTR, ppTemplatesSDO: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.GetTemplatesSDO(self, bstrServiceName, ppTemplatesSDO);
    }
    pub fn EnableTemplates(self: *const ISdoMachine2) callconv(.Inline) HRESULT {
        return self.vtable.EnableTemplates(self);
    }
    pub fn SyncConfigAgainstTemplates(self: *const ISdoMachine2, bstrServiceName: ?BSTR, ppConfigRoot: ?*?*IUnknown, ppTemplatesRoot: ?*?*IUnknown, bForcedSync: i16) callconv(.Inline) HRESULT {
        return self.vtable.SyncConfigAgainstTemplates(self, bstrServiceName, ppConfigRoot, ppTemplatesRoot, bForcedSync);
    }
    pub fn ImportRemoteTemplates(self: *const ISdoMachine2, pLocalTemplatesRoot: ?*IUnknown, bstrRemoteMachineName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.ImportRemoteTemplates(self, pLocalTemplatesRoot, bstrRemoteMachineName);
    }
    pub fn Reload(self: *const ISdoMachine2) callconv(.Inline) HRESULT {
        return self.vtable.Reload(self);
    }
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_ISdoServiceControl_Value = Guid.initString("479f6e74-49a2-11d2-8eca-00c04fc2f519");
pub const IID_ISdoServiceControl = &IID_ISdoServiceControl_Value;
pub const ISdoServiceControl = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        StartService: *const fn(
            self: *const ISdoServiceControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopService: *const fn(
            self: *const ISdoServiceControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetServiceStatus: *const fn(
            self: *const ISdoServiceControl,
            status: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetService: *const fn(
            self: *const ISdoServiceControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn StartService(self: *const ISdoServiceControl) callconv(.Inline) HRESULT {
        return self.vtable.StartService(self);
    }
    pub fn StopService(self: *const ISdoServiceControl) callconv(.Inline) HRESULT {
        return self.vtable.StopService(self);
    }
    pub fn GetServiceStatus(self: *const ISdoServiceControl, status: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetServiceStatus(self, status);
    }
    pub fn ResetService(self: *const ISdoServiceControl) callconv(.Inline) HRESULT {
        return self.vtable.ResetService(self);
    }
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_ISdo_Value = Guid.initString("56bc53de-96db-11d1-bf3f-000000000000");
pub const IID_ISdo = &IID_ISdo_Value;
pub const ISdo = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetPropertyInfo: *const fn(
            self: *const ISdo,
            Id: i32,
            ppPropertyInfo: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn(
            self: *const ISdo,
            Id: i32,
            pValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutProperty: *const fn(
            self: *const ISdo,
            Id: i32,
            pValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetProperty: *const fn(
            self: *const ISdo,
            Id: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Apply: *const fn(
            self: *const ISdo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Restore: *const fn(
            self: *const ISdo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const ISdo,
            ppEnumVARIANT: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GetPropertyInfo(self: *const ISdo, Id: i32, ppPropertyInfo: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyInfo(self, Id, ppPropertyInfo);
    }
    pub fn GetProperty(self: *const ISdo, Id: i32, pValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetProperty(self, Id, pValue);
    }
    pub fn PutProperty(self: *const ISdo, Id: i32, pValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.PutProperty(self, Id, pValue);
    }
    pub fn ResetProperty(self: *const ISdo, Id: i32) callconv(.Inline) HRESULT {
        return self.vtable.ResetProperty(self, Id);
    }
    pub fn Apply(self: *const ISdo) callconv(.Inline) HRESULT {
        return self.vtable.Apply(self);
    }
    pub fn Restore(self: *const ISdo) callconv(.Inline) HRESULT {
        return self.vtable.Restore(self);
    }
    pub fn get__NewEnum(self: *const ISdo, ppEnumVARIANT: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, ppEnumVARIANT);
    }
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_ISdoCollection_Value = Guid.initString("56bc53e2-96db-11d1-bf3f-000000000000");
pub const IID_ISdoCollection = &IID_ISdoCollection_Value;
pub const ISdoCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const ISdoCollection,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const ISdoCollection,
            bstrName: ?BSTR,
            ppItem: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const ISdoCollection,
            pItem: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAll: *const fn(
            self: *const ISdoCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reload: *const fn(
            self: *const ISdoCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsNameUnique: *const fn(
            self: *const ISdoCollection,
            bstrName: ?BSTR,
            pBool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn(
            self: *const ISdoCollection,
            Name: ?*VARIANT,
            pItem: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const ISdoCollection,
            ppEnumVARIANT: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Count(self: *const ISdoCollection, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pCount);
    }
    pub fn Add(self: *const ISdoCollection, bstrName: ?BSTR, ppItem: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, bstrName, ppItem);
    }
    pub fn Remove(self: *const ISdoCollection, pItem: ?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, pItem);
    }
    pub fn RemoveAll(self: *const ISdoCollection) callconv(.Inline) HRESULT {
        return self.vtable.RemoveAll(self);
    }
    pub fn Reload(self: *const ISdoCollection) callconv(.Inline) HRESULT {
        return self.vtable.Reload(self);
    }
    pub fn IsNameUnique(self: *const ISdoCollection, bstrName: ?BSTR, pBool: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.IsNameUnique(self, bstrName, pBool);
    }
    pub fn Item(self: *const ISdoCollection, Name: ?*VARIANT, pItem: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.Item(self, Name, pItem);
    }
    pub fn get__NewEnum(self: *const ISdoCollection, ppEnumVARIANT: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, ppEnumVARIANT);
    }
};

const IID_ITemplateSdo_Value = Guid.initString("8aa85302-d2e2-4e20-8b1f-a571e437d6c9");
pub const IID_ITemplateSdo = &IID_ITemplateSdo_Value;
pub const ITemplateSdo = extern union {
    pub const VTable = extern struct {
        base: ISdo.VTable,
        AddToCollection: *const fn(
            self: *const ITemplateSdo,
            bstrName: ?BSTR,
            pCollection: ?*IDispatch,
            ppItem: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddToSdo: *const fn(
            self: *const ITemplateSdo,
            bstrName: ?BSTR,
            pSdoTarget: ?*IDispatch,
            ppItem: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddToSdoAsProperty: *const fn(
            self: *const ITemplateSdo,
            pSdoTarget: ?*IDispatch,
            id: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ISdo: ISdo,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn AddToCollection(self: *const ITemplateSdo, bstrName: ?BSTR, pCollection: ?*IDispatch, ppItem: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.AddToCollection(self, bstrName, pCollection, ppItem);
    }
    pub fn AddToSdo(self: *const ITemplateSdo, bstrName: ?BSTR, pSdoTarget: ?*IDispatch, ppItem: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.AddToSdo(self, bstrName, pSdoTarget, ppItem);
    }
    pub fn AddToSdoAsProperty(self: *const ITemplateSdo, pSdoTarget: ?*IDispatch, id: i32) callconv(.Inline) HRESULT {
        return self.vtable.AddToSdoAsProperty(self, pSdoTarget, id);
    }
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_ISdoDictionaryOld_Value = Guid.initString("d432e5f4-53d8-11d2-9a3a-00c04fb998ac");
pub const IID_ISdoDictionaryOld = &IID_ISdoDictionaryOld_Value;
pub const ISdoDictionaryOld = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        EnumAttributes: *const fn(
            self: *const ISdoDictionaryOld,
            Id: ?*VARIANT,
            pValues: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributeInfo: *const fn(
            self: *const ISdoDictionaryOld,
            Id: ATTRIBUTEID,
            pInfoIDs: ?*VARIANT,
            pInfoValues: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumAttributeValues: *const fn(
            self: *const ISdoDictionaryOld,
            Id: ATTRIBUTEID,
            pValueIds: ?*VARIANT,
            pValuesDesc: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateAttribute: *const fn(
            self: *const ISdoDictionaryOld,
            Id: ATTRIBUTEID,
            ppAttributeObject: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributeID: *const fn(
            self: *const ISdoDictionaryOld,
            bstrAttributeName: ?BSTR,
            pId: ?*ATTRIBUTEID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn EnumAttributes(self: *const ISdoDictionaryOld, Id: ?*VARIANT, pValues: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.EnumAttributes(self, Id, pValues);
    }
    pub fn GetAttributeInfo(self: *const ISdoDictionaryOld, Id: ATTRIBUTEID, pInfoIDs: ?*VARIANT, pInfoValues: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetAttributeInfo(self, Id, pInfoIDs, pInfoValues);
    }
    pub fn EnumAttributeValues(self: *const ISdoDictionaryOld, Id: ATTRIBUTEID, pValueIds: ?*VARIANT, pValuesDesc: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.EnumAttributeValues(self, Id, pValueIds, pValuesDesc);
    }
    pub fn CreateAttribute(self: *const ISdoDictionaryOld, Id: ATTRIBUTEID, ppAttributeObject: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.CreateAttribute(self, Id, ppAttributeObject);
    }
    pub fn GetAttributeID(self: *const ISdoDictionaryOld, bstrAttributeName: ?BSTR, pId: ?*ATTRIBUTEID) callconv(.Inline) HRESULT {
        return self.vtable.GetAttributeID(self, bstrAttributeName, pId);
    }
};

pub const RADIUS_ATTRIBUTE_TYPE = enum(i32) {
    Minimum = 0,
    UserName = 1,
    UserPassword = 2,
    CHAPPassword = 3,
    NASIPAddress = 4,
    NASPort = 5,
    ServiceType = 6,
    FramedProtocol = 7,
    FramedIPAddress = 8,
    FramedIPNetmask = 9,
    FramedRouting = 10,
    FilterId = 11,
    FramedMTU = 12,
    FramedCompression = 13,
    LoginIPHost = 14,
    LoginService = 15,
    LoginPort = 16,
    ReplyMessage = 18,
    CallbackNumber = 19,
    CallbackId = 20,
    FramedRoute = 22,
    FramedIPXNetwork = 23,
    State = 24,
    Class = 25,
    VendorSpecific = 26,
    SessionTimeout = 27,
    IdleTimeout = 28,
    TerminationAction = 29,
    CalledStationId = 30,
    CallingStationId = 31,
    NASIdentifier = 32,
    ProxyState = 33,
    LoginLATService = 34,
    LoginLATNode = 35,
    LoginLATGroup = 36,
    FramedAppleTalkLink = 37,
    FramedAppleTalkNetwork = 38,
    FramedAppleTalkZone = 39,
    AcctStatusType = 40,
    AcctDelayTime = 41,
    AcctInputOctets = 42,
    AcctOutputOctets = 43,
    AcctSessionId = 44,
    AcctAuthentic = 45,
    AcctSessionTime = 46,
    AcctInputPackets = 47,
    AcctOutputPackets = 48,
    AcctTerminationCause = 49,
    CHAPChallenge = 60,
    NASPortType = 61,
    PortLimit = 62,
    TunnelType = 64,
    MediumType = 65,
    TunnelPassword = 69,
    TunnelPrivateGroupID = 81,
    NASIPv6Address = 95,
    FramedInterfaceId = 96,
    FramedIPv6Prefix = 97,
    LoginIPv6Host = 98,
    FramedIPv6Route = 99,
    FramedIPv6Pool = 100,
    Code = 262,
    Identifier = 263,
    Authenticator = 264,
    SrcIPAddress = 265,
    SrcPort = 266,
    Provider = 267,
    StrippedUserName = 268,
    FQUserName = 269,
    PolicyName = 270,
    UniqueId = 271,
    ExtensionState = 272,
    EAPTLV = 273,
    RejectReasonCode = 274,
    CRPPolicyName = 275,
    ProviderName = 276,
    ClearTextPassword = 277,
    SrcIPv6Address = 278,
    CertificateThumbprint = 279,
};
pub const ratMinimum = RADIUS_ATTRIBUTE_TYPE.Minimum;
pub const ratUserName = RADIUS_ATTRIBUTE_TYPE.UserName;
pub const ratUserPassword = RADIUS_ATTRIBUTE_TYPE.UserPassword;
pub const ratCHAPPassword = RADIUS_ATTRIBUTE_TYPE.CHAPPassword;
pub const ratNASIPAddress = RADIUS_ATTRIBUTE_TYPE.NASIPAddress;
pub const ratNASPort = RADIUS_ATTRIBUTE_TYPE.NASPort;
pub const ratServiceType = RADIUS_ATTRIBUTE_TYPE.ServiceType;
pub const ratFramedProtocol = RADIUS_ATTRIBUTE_TYPE.FramedProtocol;
pub const ratFramedIPAddress = RADIUS_ATTRIBUTE_TYPE.FramedIPAddress;
pub const ratFramedIPNetmask = RADIUS_ATTRIBUTE_TYPE.FramedIPNetmask;
pub const ratFramedRouting = RADIUS_ATTRIBUTE_TYPE.FramedRouting;
pub const ratFilterId = RADIUS_ATTRIBUTE_TYPE.FilterId;
pub const ratFramedMTU = RADIUS_ATTRIBUTE_TYPE.FramedMTU;
pub const ratFramedCompression = RADIUS_ATTRIBUTE_TYPE.FramedCompression;
pub const ratLoginIPHost = RADIUS_ATTRIBUTE_TYPE.LoginIPHost;
pub const ratLoginService = RADIUS_ATTRIBUTE_TYPE.LoginService;
pub const ratLoginPort = RADIUS_ATTRIBUTE_TYPE.LoginPort;
pub const ratReplyMessage = RADIUS_ATTRIBUTE_TYPE.ReplyMessage;
pub const ratCallbackNumber = RADIUS_ATTRIBUTE_TYPE.CallbackNumber;
pub const ratCallbackId = RADIUS_ATTRIBUTE_TYPE.CallbackId;
pub const ratFramedRoute = RADIUS_ATTRIBUTE_TYPE.FramedRoute;
pub const ratFramedIPXNetwork = RADIUS_ATTRIBUTE_TYPE.FramedIPXNetwork;
pub const ratState = RADIUS_ATTRIBUTE_TYPE.State;
pub const ratClass = RADIUS_ATTRIBUTE_TYPE.Class;
pub const ratVendorSpecific = RADIUS_ATTRIBUTE_TYPE.VendorSpecific;
pub const ratSessionTimeout = RADIUS_ATTRIBUTE_TYPE.SessionTimeout;
pub const ratIdleTimeout = RADIUS_ATTRIBUTE_TYPE.IdleTimeout;
pub const ratTerminationAction = RADIUS_ATTRIBUTE_TYPE.TerminationAction;
pub const ratCalledStationId = RADIUS_ATTRIBUTE_TYPE.CalledStationId;
pub const ratCallingStationId = RADIUS_ATTRIBUTE_TYPE.CallingStationId;
pub const ratNASIdentifier = RADIUS_ATTRIBUTE_TYPE.NASIdentifier;
pub const ratProxyState = RADIUS_ATTRIBUTE_TYPE.ProxyState;
pub const ratLoginLATService = RADIUS_ATTRIBUTE_TYPE.LoginLATService;
pub const ratLoginLATNode = RADIUS_ATTRIBUTE_TYPE.LoginLATNode;
pub const ratLoginLATGroup = RADIUS_ATTRIBUTE_TYPE.LoginLATGroup;
pub const ratFramedAppleTalkLink = RADIUS_ATTRIBUTE_TYPE.FramedAppleTalkLink;
pub const ratFramedAppleTalkNetwork = RADIUS_ATTRIBUTE_TYPE.FramedAppleTalkNetwork;
pub const ratFramedAppleTalkZone = RADIUS_ATTRIBUTE_TYPE.FramedAppleTalkZone;
pub const ratAcctStatusType = RADIUS_ATTRIBUTE_TYPE.AcctStatusType;
pub const ratAcctDelayTime = RADIUS_ATTRIBUTE_TYPE.AcctDelayTime;
pub const ratAcctInputOctets = RADIUS_ATTRIBUTE_TYPE.AcctInputOctets;
pub const ratAcctOutputOctets = RADIUS_ATTRIBUTE_TYPE.AcctOutputOctets;
pub const ratAcctSessionId = RADIUS_ATTRIBUTE_TYPE.AcctSessionId;
pub const ratAcctAuthentic = RADIUS_ATTRIBUTE_TYPE.AcctAuthentic;
pub const ratAcctSessionTime = RADIUS_ATTRIBUTE_TYPE.AcctSessionTime;
pub const ratAcctInputPackets = RADIUS_ATTRIBUTE_TYPE.AcctInputPackets;
pub const ratAcctOutputPackets = RADIUS_ATTRIBUTE_TYPE.AcctOutputPackets;
pub const ratAcctTerminationCause = RADIUS_ATTRIBUTE_TYPE.AcctTerminationCause;
pub const ratCHAPChallenge = RADIUS_ATTRIBUTE_TYPE.CHAPChallenge;
pub const ratNASPortType = RADIUS_ATTRIBUTE_TYPE.NASPortType;
pub const ratPortLimit = RADIUS_ATTRIBUTE_TYPE.PortLimit;
pub const ratTunnelType = RADIUS_ATTRIBUTE_TYPE.TunnelType;
pub const ratMediumType = RADIUS_ATTRIBUTE_TYPE.MediumType;
pub const ratTunnelPassword = RADIUS_ATTRIBUTE_TYPE.TunnelPassword;
pub const ratTunnelPrivateGroupID = RADIUS_ATTRIBUTE_TYPE.TunnelPrivateGroupID;
pub const ratNASIPv6Address = RADIUS_ATTRIBUTE_TYPE.NASIPv6Address;
pub const ratFramedInterfaceId = RADIUS_ATTRIBUTE_TYPE.FramedInterfaceId;
pub const ratFramedIPv6Prefix = RADIUS_ATTRIBUTE_TYPE.FramedIPv6Prefix;
pub const ratLoginIPv6Host = RADIUS_ATTRIBUTE_TYPE.LoginIPv6Host;
pub const ratFramedIPv6Route = RADIUS_ATTRIBUTE_TYPE.FramedIPv6Route;
pub const ratFramedIPv6Pool = RADIUS_ATTRIBUTE_TYPE.FramedIPv6Pool;
pub const ratCode = RADIUS_ATTRIBUTE_TYPE.Code;
pub const ratIdentifier = RADIUS_ATTRIBUTE_TYPE.Identifier;
pub const ratAuthenticator = RADIUS_ATTRIBUTE_TYPE.Authenticator;
pub const ratSrcIPAddress = RADIUS_ATTRIBUTE_TYPE.SrcIPAddress;
pub const ratSrcPort = RADIUS_ATTRIBUTE_TYPE.SrcPort;
pub const ratProvider = RADIUS_ATTRIBUTE_TYPE.Provider;
pub const ratStrippedUserName = RADIUS_ATTRIBUTE_TYPE.StrippedUserName;
pub const ratFQUserName = RADIUS_ATTRIBUTE_TYPE.FQUserName;
pub const ratPolicyName = RADIUS_ATTRIBUTE_TYPE.PolicyName;
pub const ratUniqueId = RADIUS_ATTRIBUTE_TYPE.UniqueId;
pub const ratExtensionState = RADIUS_ATTRIBUTE_TYPE.ExtensionState;
pub const ratEAPTLV = RADIUS_ATTRIBUTE_TYPE.EAPTLV;
pub const ratRejectReasonCode = RADIUS_ATTRIBUTE_TYPE.RejectReasonCode;
pub const ratCRPPolicyName = RADIUS_ATTRIBUTE_TYPE.CRPPolicyName;
pub const ratProviderName = RADIUS_ATTRIBUTE_TYPE.ProviderName;
pub const ratClearTextPassword = RADIUS_ATTRIBUTE_TYPE.ClearTextPassword;
pub const ratSrcIPv6Address = RADIUS_ATTRIBUTE_TYPE.SrcIPv6Address;
pub const ratCertificateThumbprint = RADIUS_ATTRIBUTE_TYPE.CertificateThumbprint;

pub const RADIUS_CODE = enum(i32) {
    Unknown = 0,
    AccessRequest = 1,
    AccessAccept = 2,
    AccessReject = 3,
    AccountingRequest = 4,
    AccountingResponse = 5,
    AccessChallenge = 11,
    Discard = 256,
};
pub const rcUnknown = RADIUS_CODE.Unknown;
pub const rcAccessRequest = RADIUS_CODE.AccessRequest;
pub const rcAccessAccept = RADIUS_CODE.AccessAccept;
pub const rcAccessReject = RADIUS_CODE.AccessReject;
pub const rcAccountingRequest = RADIUS_CODE.AccountingRequest;
pub const rcAccountingResponse = RADIUS_CODE.AccountingResponse;
pub const rcAccessChallenge = RADIUS_CODE.AccessChallenge;
pub const rcDiscard = RADIUS_CODE.Discard;

pub const RADIUS_AUTHENTICATION_PROVIDER = enum(i32) {
    Unknown = 0,
    UsersFile = 1,
    Proxy = 2,
    WindowsNT = 3,
    MCIS = 4,
    ODBC = 5,
    None = 6,
};
pub const rapUnknown = RADIUS_AUTHENTICATION_PROVIDER.Unknown;
pub const rapUsersFile = RADIUS_AUTHENTICATION_PROVIDER.UsersFile;
pub const rapProxy = RADIUS_AUTHENTICATION_PROVIDER.Proxy;
pub const rapWindowsNT = RADIUS_AUTHENTICATION_PROVIDER.WindowsNT;
pub const rapMCIS = RADIUS_AUTHENTICATION_PROVIDER.MCIS;
pub const rapODBC = RADIUS_AUTHENTICATION_PROVIDER.ODBC;
pub const rapNone = RADIUS_AUTHENTICATION_PROVIDER.None;

pub const RADIUS_REJECT_REASON_CODE = enum(i32) {
    Undefined = 0,
    AccountUnknown = 1,
    AccountDisabled = 2,
    AccountExpired = 3,
    AuthenticationFailure = 4,
};
pub const rrrcUndefined = RADIUS_REJECT_REASON_CODE.Undefined;
pub const rrrcAccountUnknown = RADIUS_REJECT_REASON_CODE.AccountUnknown;
pub const rrrcAccountDisabled = RADIUS_REJECT_REASON_CODE.AccountDisabled;
pub const rrrcAccountExpired = RADIUS_REJECT_REASON_CODE.AccountExpired;
pub const rrrcAuthenticationFailure = RADIUS_REJECT_REASON_CODE.AuthenticationFailure;

pub const RADIUS_DATA_TYPE = enum(i32) {
    Unknown = 0,
    String = 1,
    Address = 2,
    Integer = 3,
    Time = 4,
    Ipv6Address = 5,
};
pub const rdtUnknown = RADIUS_DATA_TYPE.Unknown;
pub const rdtString = RADIUS_DATA_TYPE.String;
pub const rdtAddress = RADIUS_DATA_TYPE.Address;
pub const rdtInteger = RADIUS_DATA_TYPE.Integer;
pub const rdtTime = RADIUS_DATA_TYPE.Time;
pub const rdtIpv6Address = RADIUS_DATA_TYPE.Ipv6Address;

pub const RADIUS_ATTRIBUTE = extern struct {
    dwAttrType: u32,
    fDataType: RADIUS_DATA_TYPE,
    cbDataLength: u32,
    Anonymous: extern union {
        dwValue: u32,
        lpValue: ?*const u8,
    },
};

pub const RADIUS_VSA_FORMAT = extern struct {
    VendorId: [4]u8,
    VendorType: u8,
    VendorLength: u8,
    AttributeSpecific: [1]u8,
};

pub const RADIUS_ACTION = enum(i32) {
    Continue = 0,
    Reject = 1,
    Accept = 2,
};
pub const raContinue = RADIUS_ACTION.Continue;
pub const raReject = RADIUS_ACTION.Reject;
pub const raAccept = RADIUS_ACTION.Accept;

pub const PRADIUS_EXTENSION_INIT = *const fn(
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRADIUS_EXTENSION_TERM = *const fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const PRADIUS_EXTENSION_PROCESS = *const fn(
    pAttrs: ?*const RADIUS_ATTRIBUTE,
    pfAction: ?*RADIUS_ACTION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRADIUS_EXTENSION_PROCESS_EX = *const fn(
    pInAttrs: ?*const RADIUS_ATTRIBUTE,
    pOutAttrs: ?*?*RADIUS_ATTRIBUTE,
    pfAction: ?*RADIUS_ACTION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRADIUS_EXTENSION_FREE_ATTRIBUTES = *const fn(
    pAttrs: ?*RADIUS_ATTRIBUTE,
) callconv(@import("std").os.windows.WINAPI) void;

pub const RADIUS_EXTENSION_POINT = enum(i32) {
    entication = 0,
    orization = 1,
};
pub const repAuthentication = RADIUS_EXTENSION_POINT.entication;
pub const repAuthorization = RADIUS_EXTENSION_POINT.orization;

pub const RADIUS_ATTRIBUTE_ARRAY = extern struct {
    cbSize: u32,
    Add: isize,
    AttributeAt: isize,
    GetSize: isize,
    InsertAt: isize,
    RemoveAt: isize,
    SetAt: isize,
};

pub const RADIUS_EXTENSION_CONTROL_BLOCK = extern struct {
    cbSize: u32,
    dwVersion: u32,
    repPoint: RADIUS_EXTENSION_POINT,
    rcRequestType: RADIUS_CODE,
    rcResponseType: RADIUS_CODE,
    GetRequest: isize,
    GetResponse: isize,
    SetResponseType: isize,
};

pub const PRADIUS_EXTENSION_PROCESS_2 = *const fn(
    pECB: ?*RADIUS_EXTENSION_CONTROL_BLOCK,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (6)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BSTR = @import("../foundation.zig").BSTR;
const HRESULT = @import("../foundation.zig").HRESULT;
const IDispatch = @import("../system/com.zig").IDispatch;
const IUnknown = @import("../system/com.zig").IUnknown;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PRADIUS_EXTENSION_INIT")) { _ = PRADIUS_EXTENSION_INIT; }
    if (@hasDecl(@This(), "PRADIUS_EXTENSION_TERM")) { _ = PRADIUS_EXTENSION_TERM; }
    if (@hasDecl(@This(), "PRADIUS_EXTENSION_PROCESS")) { _ = PRADIUS_EXTENSION_PROCESS; }
    if (@hasDecl(@This(), "PRADIUS_EXTENSION_PROCESS_EX")) { _ = PRADIUS_EXTENSION_PROCESS_EX; }
    if (@hasDecl(@This(), "PRADIUS_EXTENSION_FREE_ATTRIBUTES")) { _ = PRADIUS_EXTENSION_FREE_ATTRIBUTES; }
    if (@hasDecl(@This(), "PRADIUS_EXTENSION_PROCESS_2")) { _ = PRADIUS_EXTENSION_PROCESS_2; }

    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
