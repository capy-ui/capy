//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (570)
//--------------------------------------------------------------------------------
pub const FWPM_NET_EVENT_KEYWORD_INBOUND_MCAST = @as(u32, 1);
pub const FWPM_NET_EVENT_KEYWORD_INBOUND_BCAST = @as(u32, 2);
pub const FWPM_NET_EVENT_KEYWORD_CAPABILITY_DROP = @as(u32, 4);
pub const FWPM_NET_EVENT_KEYWORD_CAPABILITY_ALLOW = @as(u32, 8);
pub const FWPM_NET_EVENT_KEYWORD_CLASSIFY_ALLOW = @as(u32, 16);
pub const FWPM_NET_EVENT_KEYWORD_PORT_SCANNING_DROP = @as(u32, 32);
pub const FWPM_ENGINE_OPTION_PACKET_QUEUE_NONE = @as(u32, 0);
pub const FWPM_ENGINE_OPTION_PACKET_QUEUE_INBOUND = @as(u32, 1);
pub const FWPM_ENGINE_OPTION_PACKET_QUEUE_FORWARD = @as(u32, 2);
pub const FWPM_ENGINE_OPTION_PACKET_BATCH_INBOUND = @as(u32, 4);
pub const FWPM_SESSION_FLAG_DYNAMIC = @as(u32, 1);
pub const FWPM_SESSION_FLAG_RESERVED = @as(u32, 268435456);
pub const FWPM_PROVIDER_FLAG_PERSISTENT = @as(u32, 1);
pub const FWPM_PROVIDER_FLAG_DISABLED = @as(u32, 16);
pub const FWPM_PROVIDER_CONTEXT_FLAG_PERSISTENT = @as(u32, 1);
pub const FWPM_PROVIDER_CONTEXT_FLAG_DOWNLEVEL = @as(u32, 2);
pub const FWPM_SUBLAYER_FLAG_PERSISTENT = @as(u32, 1);
pub const FWPM_LAYER_FLAG_KERNEL = @as(u32, 1);
pub const FWPM_LAYER_FLAG_BUILTIN = @as(u32, 2);
pub const FWPM_LAYER_FLAG_CLASSIFY_MOSTLY = @as(u32, 4);
pub const FWPM_LAYER_FLAG_BUFFERED = @as(u32, 8);
pub const FWPM_CALLOUT_FLAG_PERSISTENT = @as(u32, 65536);
pub const FWPM_CALLOUT_FLAG_USES_PROVIDER_CONTEXT = @as(u32, 131072);
pub const FWPM_CALLOUT_FLAG_REGISTERED = @as(u32, 262144);
pub const FWPM_FILTER_FLAG_HAS_SECURITY_REALM_PROVIDER_CONTEXT = @as(u32, 128);
pub const FWPM_FILTER_FLAG_SYSTEMOS_ONLY = @as(u32, 256);
pub const FWPM_FILTER_FLAG_GAMEOS_ONLY = @as(u32, 512);
pub const FWPM_FILTER_FLAG_SILENT_MODE = @as(u32, 1024);
pub const FWPM_FILTER_FLAG_IPSEC_NO_ACQUIRE_INITIATE = @as(u32, 2048);
pub const FWPM_FILTER_FLAG_RESERVED0 = @as(u32, 4096);
pub const FWPM_FILTER_FLAG_RESERVED1 = @as(u32, 8192);
pub const FWPM_NET_EVENT_FLAG_IP_PROTOCOL_SET = @as(u32, 1);
pub const FWPM_NET_EVENT_FLAG_LOCAL_ADDR_SET = @as(u32, 2);
pub const FWPM_NET_EVENT_FLAG_REMOTE_ADDR_SET = @as(u32, 4);
pub const FWPM_NET_EVENT_FLAG_LOCAL_PORT_SET = @as(u32, 8);
pub const FWPM_NET_EVENT_FLAG_REMOTE_PORT_SET = @as(u32, 16);
pub const FWPM_NET_EVENT_FLAG_APP_ID_SET = @as(u32, 32);
pub const FWPM_NET_EVENT_FLAG_USER_ID_SET = @as(u32, 64);
pub const FWPM_NET_EVENT_FLAG_SCOPE_ID_SET = @as(u32, 128);
pub const FWPM_NET_EVENT_FLAG_IP_VERSION_SET = @as(u32, 256);
pub const FWPM_NET_EVENT_FLAG_REAUTH_REASON_SET = @as(u32, 512);
pub const FWPM_NET_EVENT_FLAG_PACKAGE_ID_SET = @as(u32, 1024);
pub const FWPM_NET_EVENT_FLAG_ENTERPRISE_ID_SET = @as(u32, 2048);
pub const FWPM_NET_EVENT_FLAG_POLICY_FLAGS_SET = @as(u32, 4096);
pub const FWPM_NET_EVENT_FLAG_EFFECTIVE_NAME_SET = @as(u32, 8192);
pub const IKEEXT_CERT_HASH_LEN = @as(u32, 20);
pub const FWPM_NET_EVENT_IKEEXT_MM_FAILURE_FLAG_BENIGN = @as(u32, 1);
pub const FWPM_NET_EVENT_IKEEXT_MM_FAILURE_FLAG_MULTIPLE = @as(u32, 2);
pub const FWPM_NET_EVENT_IKEEXT_EM_FAILURE_FLAG_MULTIPLE = @as(u32, 1);
pub const FWPM_NET_EVENT_IKEEXT_EM_FAILURE_FLAG_BENIGN = @as(u32, 2);
pub const FWPM_CONNECTION_ENUM_FLAG_QUERY_BYTES_TRANSFERRED = @as(u32, 1);
pub const FWPS_FILTER_FLAG_CLEAR_ACTION_RIGHT = @as(u32, 1);
pub const FWPS_FILTER_FLAG_PERMIT_IF_CALLOUT_UNREGISTERED = @as(u32, 2);
pub const FWPS_FILTER_FLAG_OR_CONDITIONS = @as(u32, 4);
pub const FWPS_FILTER_FLAG_HAS_SECURITY_REALM_PROVIDER_CONTEXT = @as(u32, 8);
pub const FWPS_FILTER_FLAG_SILENT_MODE = @as(u32, 16);
pub const FWPS_FILTER_FLAG_IPSEC_NO_ACQUIRE_INITIATE = @as(u32, 32);
pub const FWPS_FILTER_FLAG_RESERVED0 = @as(u32, 64);
pub const FWPS_FILTER_FLAG_RESERVED1 = @as(u32, 128);
pub const FWPS_INCOMING_FLAG_CACHE_SAFE = @as(u32, 1);
pub const FWPS_INCOMING_FLAG_ENFORCE_QUERY = @as(u32, 2);
pub const FWPS_INCOMING_FLAG_ABSORB = @as(u32, 4);
pub const FWPS_INCOMING_FLAG_CONNECTION_FAILING_INDICATION = @as(u32, 8);
pub const FWPS_INCOMING_FLAG_MID_STREAM_INSPECTION = @as(u32, 16);
pub const FWPS_INCOMING_FLAG_RECLASSIFY = @as(u32, 32);
pub const FWPS_INCOMING_FLAG_IS_LOOSE_SOURCE_FLOW = @as(u32, 64);
pub const FWPS_INCOMING_FLAG_IS_LOCAL_ONLY_FLOW = @as(u32, 128);
pub const FWPS_L2_INCOMING_FLAG_IS_RAW_IPV4_FRAMING = @as(u32, 1);
pub const FWPS_L2_INCOMING_FLAG_IS_RAW_IPV6_FRAMING = @as(u32, 2);
pub const FWPS_L2_INCOMING_FLAG_RECLASSIFY_MULTI_DESTINATION = @as(u32, 8);
pub const FWPS_INCOMING_FLAG_RESERVED0 = @as(u32, 256);
pub const FWPS_RIGHT_ACTION_WRITE = @as(u32, 1);
pub const FWPS_CLASSIFY_OUT_FLAG_ABSORB = @as(u32, 1);
pub const FWPS_CLASSIFY_OUT_FLAG_BUFFER_LIMIT_REACHED = @as(u32, 2);
pub const FWPS_CLASSIFY_OUT_FLAG_NO_MORE_DATA = @as(u32, 4);
pub const FWPS_CLASSIFY_OUT_FLAG_ALE_FAST_CACHE_CHECK = @as(u32, 8);
pub const FWPS_CLASSIFY_OUT_FLAG_ALE_FAST_CACHE_POSSIBLE = @as(u32, 16);
pub const FWPS_ALE_ENDPOINT_FLAG_IPSEC_SECURED = @as(u32, 1);
pub const FWP_BYTEMAP_ARRAY64_SIZE = @as(u32, 8);
pub const FWP_BYTE_ARRAY6_SIZE = @as(u32, 6);
pub const FWP_V6_ADDR_SIZE = @as(u32, 16);
pub const FWP_ACTRL_MATCH_FILTER = @as(u32, 1);
pub const FWP_OPTION_VALUE_ALLOW_MULTICAST_STATE = @as(u32, 0);
pub const FWP_OPTION_VALUE_DENY_MULTICAST_STATE = @as(u32, 1);
pub const FWP_OPTION_VALUE_ALLOW_GLOBAL_MULTICAST_STATE = @as(u32, 2);
pub const FWP_OPTION_VALUE_DISABLE_LOOSE_SOURCE = @as(u32, 0);
pub const FWP_OPTION_VALUE_ENABLE_LOOSE_SOURCE = @as(u32, 1);
pub const FWP_OPTION_VALUE_DISABLE_LOCAL_ONLY_MAPPING = @as(u32, 0);
pub const FWP_OPTION_VALUE_ENABLE_LOCAL_ONLY_MAPPING = @as(u32, 1);
pub const FWP_ACTION_FLAG_TERMINATING = @as(u32, 4096);
pub const FWP_ACTION_FLAG_NON_TERMINATING = @as(u32, 8192);
pub const FWP_ACTION_FLAG_CALLOUT = @as(u32, 16384);
pub const FWP_ACTION_NONE = @as(u32, 7);
pub const FWP_ACTION_NONE_NO_MATCH = @as(u32, 8);
pub const FWP_CONDITION_FLAG_IS_LOOPBACK = @as(u32, 1);
pub const FWP_CONDITION_FLAG_IS_IPSEC_SECURED = @as(u32, 2);
pub const FWP_CONDITION_FLAG_IS_REAUTHORIZE = @as(u32, 4);
pub const FWP_CONDITION_FLAG_IS_WILDCARD_BIND = @as(u32, 8);
pub const FWP_CONDITION_FLAG_IS_RAW_ENDPOINT = @as(u32, 16);
pub const FWP_CONDITION_FLAG_IS_FRAGMENT = @as(u32, 32);
pub const FWP_CONDITION_FLAG_IS_FRAGMENT_GROUP = @as(u32, 64);
pub const FWP_CONDITION_FLAG_IS_IPSEC_NATT_RECLASSIFY = @as(u32, 128);
pub const FWP_CONDITION_FLAG_REQUIRES_ALE_CLASSIFY = @as(u32, 256);
pub const FWP_CONDITION_FLAG_IS_IMPLICIT_BIND = @as(u32, 512);
pub const FWP_CONDITION_FLAG_IS_REASSEMBLED = @as(u32, 1024);
pub const FWP_CONDITION_FLAG_IS_NAME_APP_SPECIFIED = @as(u32, 16384);
pub const FWP_CONDITION_FLAG_IS_PROMISCUOUS = @as(u32, 32768);
pub const FWP_CONDITION_FLAG_IS_AUTH_FW = @as(u32, 65536);
pub const FWP_CONDITION_FLAG_IS_RECLASSIFY = @as(u32, 131072);
pub const FWP_CONDITION_FLAG_IS_OUTBOUND_PASS_THRU = @as(u32, 262144);
pub const FWP_CONDITION_FLAG_IS_INBOUND_PASS_THRU = @as(u32, 524288);
pub const FWP_CONDITION_FLAG_IS_CONNECTION_REDIRECTED = @as(u32, 1048576);
pub const FWP_CONDITION_FLAG_IS_PROXY_CONNECTION = @as(u32, 2097152);
pub const FWP_CONDITION_FLAG_IS_APPCONTAINER_LOOPBACK = @as(u32, 4194304);
pub const FWP_CONDITION_FLAG_IS_NON_APPCONTAINER_LOOPBACK = @as(u32, 8388608);
pub const FWP_CONDITION_FLAG_IS_RESERVED = @as(u32, 16777216);
pub const FWP_CONDITION_FLAG_IS_HONORING_POLICY_AUTHORIZE = @as(u32, 33554432);
pub const FWP_CONDITION_REAUTHORIZE_REASON_POLICY_CHANGE = @as(u32, 1);
pub const FWP_CONDITION_REAUTHORIZE_REASON_NEW_ARRIVAL_INTERFACE = @as(u32, 2);
pub const FWP_CONDITION_REAUTHORIZE_REASON_NEW_NEXTHOP_INTERFACE = @as(u32, 4);
pub const FWP_CONDITION_REAUTHORIZE_REASON_PROFILE_CROSSING = @as(u32, 8);
pub const FWP_CONDITION_REAUTHORIZE_REASON_CLASSIFY_COMPLETION = @as(u32, 16);
pub const FWP_CONDITION_REAUTHORIZE_REASON_IPSEC_PROPERTIES_CHANGED = @as(u32, 32);
pub const FWP_CONDITION_REAUTHORIZE_REASON_MID_STREAM_INSPECTION = @as(u32, 64);
pub const FWP_CONDITION_REAUTHORIZE_REASON_SOCKET_PROPERTY_CHANGED = @as(u32, 128);
pub const FWP_CONDITION_REAUTHORIZE_REASON_NEW_INBOUND_MCAST_BCAST_PACKET = @as(u32, 256);
pub const FWP_CONDITION_REAUTHORIZE_REASON_EDP_POLICY_CHANGED = @as(u32, 512);
pub const FWP_CONDITION_REAUTHORIZE_REASON_PROXY_HANDLE_CHANGED = @as(u32, 16384);
pub const FWP_CONDITION_REAUTHORIZE_REASON_CHECK_OFFLOAD = @as(u32, 65536);
pub const FWP_CONDITION_SOCKET_PROPERTY_FLAG_IS_SYSTEM_PORT_RPC = @as(u32, 1);
pub const FWP_CONDITION_SOCKET_PROPERTY_FLAG_ALLOW_EDGE_TRAFFIC = @as(u32, 2);
pub const FWP_CONDITION_SOCKET_PROPERTY_FLAG_DENY_EDGE_TRAFFIC = @as(u32, 4);
pub const FWP_CONDITION_L2_IS_NATIVE_ETHERNET = @as(u32, 1);
pub const FWP_CONDITION_L2_IS_WIFI = @as(u32, 2);
pub const FWP_CONDITION_L2_IS_MOBILE_BROADBAND = @as(u32, 4);
pub const FWP_CONDITION_L2_IS_WIFI_DIRECT_DATA = @as(u32, 8);
pub const FWP_CONDITION_L2_IS_VM2VM = @as(u32, 16);
pub const FWP_CONDITION_L2_IS_MALFORMED_PACKET = @as(u32, 32);
pub const FWP_CONDITION_L2_IS_IP_FRAGMENT_GROUP = @as(u32, 64);
pub const FWP_CONDITION_L2_IF_CONNECTOR_PRESENT = @as(u32, 128);
pub const FWP_FILTER_ENUM_FLAG_BEST_TERMINATING_MATCH = @as(u32, 1);
pub const FWP_FILTER_ENUM_FLAG_SORTED = @as(u32, 2);
pub const FWP_FILTER_ENUM_FLAG_BOOTTIME_ONLY = @as(u32, 4);
pub const FWP_FILTER_ENUM_FLAG_INCLUDE_BOOTTIME = @as(u32, 8);
pub const FWP_FILTER_ENUM_FLAG_INCLUDE_DISABLED = @as(u32, 16);
pub const FWP_FILTER_ENUM_FLAG_RESERVED1 = @as(u32, 32);
pub const FWP_CALLOUT_FLAG_CONDITIONAL_ON_FLOW = @as(u32, 1);
pub const FWP_CALLOUT_FLAG_ALLOW_OFFLOAD = @as(u32, 2);
pub const FWP_CALLOUT_FLAG_ENABLE_COMMIT_ADD_NOTIFY = @as(u32, 4);
pub const FWP_CALLOUT_FLAG_ALLOW_MID_STREAM_INSPECTION = @as(u32, 8);
pub const FWP_CALLOUT_FLAG_ALLOW_RECLASSIFY = @as(u32, 16);
pub const FWP_CALLOUT_FLAG_RESERVED1 = @as(u32, 32);
pub const FWP_CALLOUT_FLAG_ALLOW_RSC = @as(u32, 64);
pub const FWP_CALLOUT_FLAG_ALLOW_L2_BATCH_CLASSIFY = @as(u32, 128);
pub const FWP_CALLOUT_FLAG_ALLOW_USO = @as(u32, 256);
pub const FWP_CALLOUT_FLAG_ALLOW_URO = @as(u32, 512);
pub const FWP_CALLOUT_FLAG_RESERVED2 = @as(u32, 1024);
pub const IKEEXT_CERT_AUTH_FLAG_DISABLE_CRL_CHECK = @as(u32, 2);
pub const IKEEXT_CERT_AUTH_FLAG_DISABLE_REQUEST_PAYLOAD = @as(u32, 64);
pub const IKEEXT_KERB_AUTH_FORCE_PROXY_ON_INITIATOR = @as(u32, 4);
pub const IKEEXT_NTLM_V2_AUTH_DONT_ACCEPT_EXPLICIT_CREDENTIALS = @as(u32, 1);
pub const IKEEXT_POLICY_FLAG_MOBIKE_NOT_SUPPORTED = @as(u32, 16);
pub const IKEEXT_POLICY_FLAG_SITE_TO_SITE = @as(u32, 32);
pub const IKEEXT_POLICY_FLAG_IMS_VPN = @as(u32, 64);
pub const IKEEXT_POLICY_ENABLE_IKEV2_FRAGMENTATION = @as(u32, 128);
pub const IKEEXT_POLICY_SUPPORT_LOW_POWER_MODE = @as(u32, 256);
pub const IKEEXT_CERT_CREDENTIAL_FLAG_NAP_CERT = @as(u32, 1);
pub const IPSEC_AUTH_CONFIG_HMAC_MD5_96 = @as(u32, 0);
pub const IPSEC_AUTH_CONFIG_HMAC_SHA_1_96 = @as(u32, 1);
pub const IPSEC_AUTH_CONFIG_HMAC_SHA_256_128 = @as(u32, 2);
pub const IPSEC_AUTH_CONFIG_GCM_AES_128 = @as(u32, 3);
pub const IPSEC_AUTH_CONFIG_GCM_AES_192 = @as(u32, 4);
pub const IPSEC_AUTH_CONFIG_GCM_AES_256 = @as(u32, 5);
pub const IPSEC_AUTH_CONFIG_MAX = @as(u32, 6);
pub const IPSEC_CIPHER_CONFIG_CBC_DES = @as(u32, 1);
pub const IPSEC_CIPHER_CONFIG_CBC_3DES = @as(u32, 2);
pub const IPSEC_CIPHER_CONFIG_CBC_AES_128 = @as(u32, 3);
pub const IPSEC_CIPHER_CONFIG_CBC_AES_192 = @as(u32, 4);
pub const IPSEC_CIPHER_CONFIG_CBC_AES_256 = @as(u32, 5);
pub const IPSEC_CIPHER_CONFIG_GCM_AES_128 = @as(u32, 6);
pub const IPSEC_CIPHER_CONFIG_GCM_AES_192 = @as(u32, 7);
pub const IPSEC_CIPHER_CONFIG_GCM_AES_256 = @as(u32, 8);
pub const IPSEC_CIPHER_CONFIG_MAX = @as(u32, 9);
pub const IPSEC_POLICY_FLAG_KEY_MANAGER_ALLOW_NOTIFY_KEY = @as(u32, 16384);
pub const IPSEC_POLICY_FLAG_RESERVED1 = @as(u32, 32768);
pub const IPSEC_POLICY_FLAG_SITE_TO_SITE_TUNNEL = @as(u32, 65536);
pub const IPSEC_KEYING_POLICY_FLAG_TERMINATING_MATCH = @as(u32, 1);
pub const IPSEC_SA_BUNDLE_FLAG_NLB = @as(u32, 16);
pub const IPSEC_SA_BUNDLE_FLAG_NO_MACHINE_LUID_VERIFY = @as(u32, 32);
pub const IPSEC_SA_BUNDLE_FLAG_NO_IMPERSONATION_LUID_VERIFY = @as(u32, 64);
pub const IPSEC_SA_BUNDLE_FLAG_NO_EXPLICIT_CRED_MATCH = @as(u32, 128);
pub const IPSEC_SA_BUNDLE_FLAG_FORCE_INBOUND_CONNECTIONS = @as(u32, 32768);
pub const IPSEC_SA_BUNDLE_FLAG_FORCE_OUTBOUND_CONNECTIONS = @as(u32, 65536);
pub const IPSEC_SA_BUNDLE_FLAG_FORWARD_PATH_INITIATOR = @as(u32, 131072);
pub const IPSEC_SA_BUNDLE_FLAG_ENABLE_OPTIONAL_ASYMMETRIC_IDLE = @as(u32, 262144);
pub const IPSEC_SA_BUNDLE_FLAG_USING_DICTATED_KEYS = @as(u32, 524288);
pub const IPSEC_SA_BUNDLE_FLAG_LOCALLY_DICTATED_KEYS = @as(u32, 1048576);
pub const IPSEC_SA_BUNDLE_FLAG_SA_OFFLOADED = @as(u32, 2097152);
pub const IPSEC_SA_BUNDLE_FLAG_IP_IN_IP_PKT = @as(u32, 4194304);
pub const IPSEC_SA_BUNDLE_FLAG_LOW_POWER_MODE_SUPPORT = @as(u32, 8388608);
pub const IPSEC_DOSP_DSCP_DISABLE_VALUE = @as(u32, 255);
pub const IPSEC_DOSP_RATE_LIMIT_DISABLE_VALUE = @as(u32, 0);
pub const IPSEC_KEY_MANAGER_FLAG_DICTATE_KEY = @as(u32, 1);
pub const FWPM_LAYER_INBOUND_IPPACKET_V4 = Guid.initString("c86fd1bf-21cd-497e-a0bb-17425c885c58");
pub const FWPM_LAYER_INBOUND_IPPACKET_V4_DISCARD = Guid.initString("b5a230d0-a8c0-44f2-916e-991b53ded1f7");
pub const FWPM_LAYER_INBOUND_IPPACKET_V6 = Guid.initString("f52032cb-991c-46e7-971d-2601459a91ca");
pub const FWPM_LAYER_INBOUND_IPPACKET_V6_DISCARD = Guid.initString("bb24c279-93b4-47a2-83ad-ae1698b50885");
pub const FWPM_LAYER_OUTBOUND_IPPACKET_V4 = Guid.initString("1e5c9fae-8a84-4135-a331-950b54229ecd");
pub const FWPM_LAYER_OUTBOUND_IPPACKET_V4_DISCARD = Guid.initString("08e4bcb5-b647-48f3-953c-e5ddbd03937e");
pub const FWPM_LAYER_OUTBOUND_IPPACKET_V6 = Guid.initString("a3b3ab6b-3564-488c-9117-f34e82142763");
pub const FWPM_LAYER_OUTBOUND_IPPACKET_V6_DISCARD = Guid.initString("9513d7c4-a934-49dc-91a7-6ccb80cc02e3");
pub const FWPM_LAYER_IPFORWARD_V4 = Guid.initString("a82acc24-4ee1-4ee1-b465-fd1d25cb10a4");
pub const FWPM_LAYER_IPFORWARD_V4_DISCARD = Guid.initString("9e9ea773-2fae-4210-8f17-34129ef369eb");
pub const FWPM_LAYER_IPFORWARD_V6 = Guid.initString("7b964818-19c7-493a-b71f-832c3684d28c");
pub const FWPM_LAYER_IPFORWARD_V6_DISCARD = Guid.initString("31524a5d-1dfe-472f-bb93-518ee945d8a2");
pub const FWPM_LAYER_INBOUND_TRANSPORT_V4 = Guid.initString("5926dfc8-e3cf-4426-a283-dc393f5d0f9d");
pub const FWPM_LAYER_INBOUND_TRANSPORT_V4_DISCARD = Guid.initString("ac4a9833-f69d-4648-b261-6dc84835ef39");
pub const FWPM_LAYER_INBOUND_TRANSPORT_V6 = Guid.initString("634a869f-fc23-4b90-b0c1-bf620a36ae6f");
pub const FWPM_LAYER_INBOUND_TRANSPORT_V6_DISCARD = Guid.initString("2a6ff955-3b2b-49d2-9848-ad9d72dcaab7");
pub const FWPM_LAYER_OUTBOUND_TRANSPORT_V4 = Guid.initString("09e61aea-d214-46e2-9b21-b26b0b2f28c8");
pub const FWPM_LAYER_OUTBOUND_TRANSPORT_V4_DISCARD = Guid.initString("c5f10551-bdb0-43d7-a313-50e211f4d68a");
pub const FWPM_LAYER_OUTBOUND_TRANSPORT_V6 = Guid.initString("e1735bde-013f-4655-b351-a49e15762df0");
pub const FWPM_LAYER_OUTBOUND_TRANSPORT_V6_DISCARD = Guid.initString("f433df69-ccbd-482e-b9b2-57165658c3b3");
pub const FWPM_LAYER_STREAM_V4 = Guid.initString("3b89653c-c170-49e4-b1cd-e0eeeee19a3e");
pub const FWPM_LAYER_STREAM_V4_DISCARD = Guid.initString("25c4c2c2-25ff-4352-82f9-c54a4a4726dc");
pub const FWPM_LAYER_STREAM_V6 = Guid.initString("47c9137a-7ec4-46b3-b6e4-48e926b1eda4");
pub const FWPM_LAYER_STREAM_V6_DISCARD = Guid.initString("10a59fc7-b628-4c41-9eb8-cf37d55103cf");
pub const FWPM_LAYER_DATAGRAM_DATA_V4 = Guid.initString("3d08bf4e-45f6-4930-a922-417098e20027");
pub const FWPM_LAYER_DATAGRAM_DATA_V4_DISCARD = Guid.initString("18e330c6-7248-4e52-aaab-472ed67704fd");
pub const FWPM_LAYER_DATAGRAM_DATA_V6 = Guid.initString("fa45fe2f-3cba-4427-87fc-57b9a4b10d00");
pub const FWPM_LAYER_DATAGRAM_DATA_V6_DISCARD = Guid.initString("09d1dfe1-9b86-4a42-be9d-8c315b92a5d0");
pub const FWPM_LAYER_INBOUND_ICMP_ERROR_V4 = Guid.initString("61499990-3cb6-4e84-b950-53b94b6964f3");
pub const FWPM_LAYER_INBOUND_ICMP_ERROR_V4_DISCARD = Guid.initString("a6b17075-ebaf-4053-a4e7-213c8121ede5");
pub const FWPM_LAYER_INBOUND_ICMP_ERROR_V6 = Guid.initString("65f9bdff-3b2d-4e5d-b8c6-c720651fe898");
pub const FWPM_LAYER_INBOUND_ICMP_ERROR_V6_DISCARD = Guid.initString("a6e7ccc0-08fb-468d-a472-9771d5595e09");
pub const FWPM_LAYER_OUTBOUND_ICMP_ERROR_V4 = Guid.initString("41390100-564c-4b32-bc1d-718048354d7c");
pub const FWPM_LAYER_OUTBOUND_ICMP_ERROR_V4_DISCARD = Guid.initString("b3598d36-0561-4588-a6bf-e955e3f6264b");
pub const FWPM_LAYER_OUTBOUND_ICMP_ERROR_V6 = Guid.initString("7fb03b60-7b8d-4dfa-badd-980176fc4e12");
pub const FWPM_LAYER_OUTBOUND_ICMP_ERROR_V6_DISCARD = Guid.initString("65f2e647-8d0c-4f47-b19b-33a4d3f1357c");
pub const FWPM_LAYER_ALE_RESOURCE_ASSIGNMENT_V4 = Guid.initString("1247d66d-0b60-4a15-8d44-7155d0f53a0c");
pub const FWPM_LAYER_ALE_RESOURCE_ASSIGNMENT_V4_DISCARD = Guid.initString("0b5812a2-c3ff-4eca-b88d-c79e20ac6322");
pub const FWPM_LAYER_ALE_RESOURCE_ASSIGNMENT_V6 = Guid.initString("55a650e1-5f0a-4eca-a653-88f53b26aa8c");
pub const FWPM_LAYER_ALE_RESOURCE_ASSIGNMENT_V6_DISCARD = Guid.initString("cbc998bb-c51f-4c1a-bb4f-9775fcacab2f");
pub const FWPM_LAYER_ALE_AUTH_LISTEN_V4 = Guid.initString("88bb5dad-76d7-4227-9c71-df0a3ed7be7e");
pub const FWPM_LAYER_ALE_AUTH_LISTEN_V4_DISCARD = Guid.initString("371dfada-9f26-45fd-b4eb-c29eb212893f");
pub const FWPM_LAYER_ALE_AUTH_LISTEN_V6 = Guid.initString("7ac9de24-17dd-4814-b4bd-a9fbc95a321b");
pub const FWPM_LAYER_ALE_AUTH_LISTEN_V6_DISCARD = Guid.initString("60703b07-63c8-48e9-ada3-12b1af40a617");
pub const FWPM_LAYER_ALE_AUTH_RECV_ACCEPT_V4 = Guid.initString("e1cd9fe7-f4b5-4273-96c0-592e487b8650");
pub const FWPM_LAYER_ALE_AUTH_RECV_ACCEPT_V4_DISCARD = Guid.initString("9eeaa99b-bd22-4227-919f-0073c63357b1");
pub const FWPM_LAYER_ALE_AUTH_RECV_ACCEPT_V6 = Guid.initString("a3b42c97-9f04-4672-b87e-cee9c483257f");
pub const FWPM_LAYER_ALE_AUTH_RECV_ACCEPT_V6_DISCARD = Guid.initString("89455b97-dbe1-453f-a224-13da895af396");
pub const FWPM_LAYER_ALE_AUTH_CONNECT_V4 = Guid.initString("c38d57d1-05a7-4c33-904f-7fbceee60e82");
pub const FWPM_LAYER_ALE_AUTH_CONNECT_V4_DISCARD = Guid.initString("d632a801-f5ba-4ad6-96e3-607017d9836a");
pub const FWPM_LAYER_ALE_AUTH_CONNECT_V6 = Guid.initString("4a72393b-319f-44bc-84c3-ba54dcb3b6b4");
pub const FWPM_LAYER_ALE_AUTH_CONNECT_V6_DISCARD = Guid.initString("c97bc3b8-c9a3-4e33-8695-8e17aad4de09");
pub const FWPM_LAYER_ALE_FLOW_ESTABLISHED_V4 = Guid.initString("af80470a-5596-4c13-9992-539e6fe57967");
pub const FWPM_LAYER_ALE_FLOW_ESTABLISHED_V4_DISCARD = Guid.initString("146ae4a9-a1d2-4d43-a31a-4c42682b8e4f");
pub const FWPM_LAYER_ALE_FLOW_ESTABLISHED_V6 = Guid.initString("7021d2b3-dfa4-406e-afeb-6afaf7e70efd");
pub const FWPM_LAYER_ALE_FLOW_ESTABLISHED_V6_DISCARD = Guid.initString("46928636-bbca-4b76-941d-0fa7f5d7d372");
pub const FWPM_LAYER_INBOUND_MAC_FRAME_ETHERNET = Guid.initString("effb7edb-0055-4f9a-a231-4ff8131ad191");
pub const FWPM_LAYER_OUTBOUND_MAC_FRAME_ETHERNET = Guid.initString("694673bc-d6db-4870-adee-0acdbdb7f4b2");
pub const FWPM_LAYER_INBOUND_MAC_FRAME_NATIVE = Guid.initString("d4220bd3-62ce-4f08-ae88-b56e8526df50");
pub const FWPM_LAYER_OUTBOUND_MAC_FRAME_NATIVE = Guid.initString("94c44912-9d6f-4ebf-b995-05ab8a088d1b");
pub const FWPM_LAYER_INGRESS_VSWITCH_ETHERNET = Guid.initString("7d98577a-9a87-41ec-9718-7cf589c9f32d");
pub const FWPM_LAYER_EGRESS_VSWITCH_ETHERNET = Guid.initString("86c872b0-76fa-4b79-93a4-0750530ae292");
pub const FWPM_LAYER_INGRESS_VSWITCH_TRANSPORT_V4 = Guid.initString("b2696ff6-774f-4554-9f7d-3da3945f8e85");
pub const FWPM_LAYER_INGRESS_VSWITCH_TRANSPORT_V6 = Guid.initString("5ee314fc-7d8a-47f4-b7e3-291a36da4e12");
pub const FWPM_LAYER_EGRESS_VSWITCH_TRANSPORT_V4 = Guid.initString("b92350b6-91f0-46b6-bdc4-871dfd4a7c98");
pub const FWPM_LAYER_EGRESS_VSWITCH_TRANSPORT_V6 = Guid.initString("1b2def23-1881-40bd-82f4-4254e63141cb");
pub const FWPM_LAYER_INBOUND_TRANSPORT_FAST = Guid.initString("e41d2719-05c7-40f0-8983-ea8d17bbc2f6");
pub const FWPM_LAYER_OUTBOUND_TRANSPORT_FAST = Guid.initString("13ed4388-a070-4815-9935-7a9be6408b78");
pub const FWPM_LAYER_INBOUND_MAC_FRAME_NATIVE_FAST = Guid.initString("853aaa8e-2b78-4d24-a804-36db08b29711");
pub const FWPM_LAYER_OUTBOUND_MAC_FRAME_NATIVE_FAST = Guid.initString("470df946-c962-486f-9446-8293cbc75eb8");
pub const FWPM_LAYER_IPSEC_KM_DEMUX_V4 = Guid.initString("f02b1526-a459-4a51-b9e3-759de52b9d2c");
pub const FWPM_LAYER_IPSEC_KM_DEMUX_V6 = Guid.initString("2f755cf6-2fd4-4e88-b3e4-a91bca495235");
pub const FWPM_LAYER_IPSEC_V4 = Guid.initString("eda65c74-610d-4bc5-948f-3c4f89556867");
pub const FWPM_LAYER_IPSEC_V6 = Guid.initString("13c48442-8d87-4261-9a29-59d2abc348b4");
pub const FWPM_LAYER_IKEEXT_V4 = Guid.initString("b14b7bdb-dbbd-473e-bed4-8b4708d4f270");
pub const FWPM_LAYER_IKEEXT_V6 = Guid.initString("b64786b3-f687-4eb9-89d2-8ef32acdabe2");
pub const FWPM_LAYER_RPC_UM = Guid.initString("75a89dda-95e4-40f3-adc7-7688a9c847e1");
pub const FWPM_LAYER_RPC_EPMAP = Guid.initString("9247bc61-eb07-47ee-872c-bfd78bfd1616");
pub const FWPM_LAYER_RPC_EP_ADD = Guid.initString("618dffc7-c450-4943-95db-99b4c16a55d4");
pub const FWPM_LAYER_RPC_PROXY_CONN = Guid.initString("94a4b50b-ba5c-4f27-907a-229fac0c2a7a");
pub const FWPM_LAYER_RPC_PROXY_IF = Guid.initString("f8a38615-e12c-41ac-98df-121ad981aade");
pub const FWPM_LAYER_KM_AUTHORIZATION = Guid.initString("4aa226e9-9020-45fb-956a-c0249d841195");
pub const FWPM_LAYER_NAME_RESOLUTION_CACHE_V4 = Guid.initString("0c2aa681-905b-4ccd-a467-4dd811d07b7b");
pub const FWPM_LAYER_NAME_RESOLUTION_CACHE_V6 = Guid.initString("92d592fa-6b01-434a-9dea-d1e96ea97da9");
pub const FWPM_LAYER_ALE_RESOURCE_RELEASE_V4 = Guid.initString("74365cce-ccb0-401a-bfc1-b89934ad7e15");
pub const FWPM_LAYER_ALE_RESOURCE_RELEASE_V6 = Guid.initString("f4e5ce80-edcc-4e13-8a2f-b91454bb057b");
pub const FWPM_LAYER_ALE_ENDPOINT_CLOSURE_V4 = Guid.initString("b4766427-e2a2-467a-bd7e-dbcd1bd85a09");
pub const FWPM_LAYER_ALE_ENDPOINT_CLOSURE_V6 = Guid.initString("bb536ccd-4755-4ba9-9ff7-f9edf8699c7b");
pub const FWPM_LAYER_ALE_CONNECT_REDIRECT_V4 = Guid.initString("c6e63c8c-b784-4562-aa7d-0a67cfcaf9a3");
pub const FWPM_LAYER_ALE_CONNECT_REDIRECT_V6 = Guid.initString("587e54a7-8046-42ba-a0aa-b716250fc7fd");
pub const FWPM_LAYER_ALE_BIND_REDIRECT_V4 = Guid.initString("66978cad-c704-42ac-86ac-7c1a231bd253");
pub const FWPM_LAYER_ALE_BIND_REDIRECT_V6 = Guid.initString("bef02c9c-606b-4536-8c26-1c2fc7b631d4");
pub const FWPM_LAYER_STREAM_PACKET_V4 = Guid.initString("af52d8ec-cb2d-44e5-ad92-f8dc38d2eb29");
pub const FWPM_LAYER_STREAM_PACKET_V6 = Guid.initString("779a8ca3-f099-468f-b5d4-83535c461c02");
pub const FWPM_LAYER_INBOUND_RESERVED2 = Guid.initString("f4fb8d55-c076-46d8-a2c7-6a4c722ca4ed");
pub const FWPM_SUBLAYER_RPC_AUDIT = Guid.initString("758c84f4-fb48-4de9-9aeb-3ed9551ab1fd");
pub const FWPM_SUBLAYER_IPSEC_TUNNEL = Guid.initString("83f299ed-9ff4-4967-aff4-c309f4dab827");
pub const FWPM_SUBLAYER_UNIVERSAL = Guid.initString("eebecc03-ced4-4380-819a-2734397b2b74");
pub const FWPM_SUBLAYER_LIPS = Guid.initString("1b75c0ce-ff60-4711-a70f-b4958cc3b2d0");
pub const FWPM_SUBLAYER_SECURE_SOCKET = Guid.initString("15a66e17-3f3c-4f7b-aa6c-812aa613dd82");
pub const FWPM_SUBLAYER_TCP_CHIMNEY_OFFLOAD = Guid.initString("337608b9-b7d5-4d5f-82f9-3618618bc058");
pub const FWPM_SUBLAYER_INSPECTION = Guid.initString("877519e1-e6a9-41a5-81b4-8c4f118e4a60");
pub const FWPM_SUBLAYER_TEREDO = Guid.initString("ba69dc66-5176-4979-9c89-26a7b46a8327");
pub const FWPM_SUBLAYER_IPSEC_FORWARD_OUTBOUND_TUNNEL = Guid.initString("a5082e73-8f71-4559-8a9a-101cea04ef87");
pub const FWPM_SUBLAYER_IPSEC_DOSP = Guid.initString("e076d572-5d3d-48ef-802b-909eddb098bd");
pub const FWPM_SUBLAYER_TCP_TEMPLATES = Guid.initString("24421dcf-0ac5-4caa-9e14-50f6e3636af0");
pub const FWPM_SUBLAYER_IPSEC_SECURITY_REALM = Guid.initString("37a57701-5884-4964-92b8-3e704688b0ad");
pub const FWPM_SUBLAYER_MPSSVC_WSH = Guid.initString("b3cdd441-af90-41ba-a745-7c6008ff2300");
pub const FWPM_SUBLAYER_MPSSVC_WF = Guid.initString("b3cdd441-af90-41ba-a745-7c6008ff2301");
pub const FWPM_SUBLAYER_MPSSVC_QUARANTINE = Guid.initString("b3cdd441-af90-41ba-a745-7c6008ff2302");
pub const FWPM_SUBLAYER_MPSSVC_EDP = Guid.initString("09a47e38-fa97-471b-b123-18bcd7e65071");
pub const FWPM_SUBLAYER_MPSSVC_TENANT_RESTRICTIONS = Guid.initString("1ec6c7e1-fdd9-478a-b55f-ff8ba1d2c17d");
pub const FWPM_CONDITION_INTERFACE_MAC_ADDRESS = Guid.initString("f6e63dce-1f4b-4c6b-b6ef-1165e71f8ee7");
pub const FWPM_CONDITION_MAC_LOCAL_ADDRESS = Guid.initString("d999e981-7948-4c83-b742-c84e3b678f8f");
pub const FWPM_CONDITION_MAC_REMOTE_ADDRESS = Guid.initString("408f2ed4-3a70-4b4d-92a6-415ac20e2f12");
pub const FWPM_CONDITION_ETHER_TYPE = Guid.initString("fd08948d-a219-4d52-bb98-1a5540ee7b4e");
pub const FWPM_CONDITION_VLAN_ID = Guid.initString("938eab21-3618-4e64-9ca5-2141ebda1ca2");
pub const FWPM_CONDITION_VSWITCH_TENANT_NETWORK_ID = Guid.initString("dc04843c-79e6-4e44-a025-65b9bb0f9f94");
pub const FWPM_CONDITION_NDIS_PORT = Guid.initString("db7bb42b-2dac-4cd4-a59a-e0bdce1e6834");
pub const FWPM_CONDITION_NDIS_MEDIA_TYPE = Guid.initString("cb31cef1-791d-473b-89d1-61c5984304a0");
pub const FWPM_CONDITION_NDIS_PHYSICAL_MEDIA_TYPE = Guid.initString("34c79823-c229-44f2-b83c-74020882ae77");
pub const FWPM_CONDITION_L2_FLAGS = Guid.initString("7bc43cbf-37ba-45f1-b74a-82ff518eeb10");
pub const FWPM_CONDITION_MAC_LOCAL_ADDRESS_TYPE = Guid.initString("cc31355c-3073-4ffb-a14f-79415cb1ead1");
pub const FWPM_CONDITION_MAC_REMOTE_ADDRESS_TYPE = Guid.initString("027fedb4-f1c1-4030-b564-ee777fd867ea");
pub const FWPM_CONDITION_ALE_PACKAGE_ID = Guid.initString("71bc78fa-f17c-4997-a602-6abb261f351c");
pub const FWPM_CONDITION_MAC_SOURCE_ADDRESS = Guid.initString("7b795451-f1f6-4d05-b7cb-21779d802336");
pub const FWPM_CONDITION_MAC_DESTINATION_ADDRESS = Guid.initString("04ea2a93-858c-4027-b613-b43180c7859e");
pub const FWPM_CONDITION_MAC_SOURCE_ADDRESS_TYPE = Guid.initString("5c1b72e4-299e-4437-a298-bc3f014b3dc2");
pub const FWPM_CONDITION_MAC_DESTINATION_ADDRESS_TYPE = Guid.initString("ae052932-ef42-4e99-b129-f3b3139e34f7");
pub const FWPM_CONDITION_IP_SOURCE_PORT = Guid.initString("a6afef91-3df4-4730-a214-f5426aebf821");
pub const FWPM_CONDITION_IP_DESTINATION_PORT = Guid.initString("ce6def45-60fb-4a7b-a304-af30a117000e");
pub const FWPM_CONDITION_VSWITCH_ID = Guid.initString("c4a414ba-437b-4de6-9946-d99c1b95b312");
pub const FWPM_CONDITION_VSWITCH_NETWORK_TYPE = Guid.initString("11d48b4b-e77a-40b4-9155-392c906c2608");
pub const FWPM_CONDITION_VSWITCH_SOURCE_INTERFACE_ID = Guid.initString("7f4ef24b-b2c1-4938-ba33-a1ecbed512ba");
pub const FWPM_CONDITION_VSWITCH_DESTINATION_INTERFACE_ID = Guid.initString("8ed48be4-c926-49f6-a4f6-ef3030e3fc16");
pub const FWPM_CONDITION_VSWITCH_SOURCE_VM_ID = Guid.initString("9c2a9ec2-9fc6-42bc-bdd8-406d4da0be64");
pub const FWPM_CONDITION_VSWITCH_DESTINATION_VM_ID = Guid.initString("6106aace-4de1-4c84-9671-3637f8bcf731");
pub const FWPM_CONDITION_VSWITCH_SOURCE_INTERFACE_TYPE = Guid.initString("e6b040a2-edaf-4c36-908b-f2f58ae43807");
pub const FWPM_CONDITION_VSWITCH_DESTINATION_INTERFACE_TYPE = Guid.initString("fa9b3f06-2f1a-4c57-9e68-a7098b28dbfe");
pub const FWPM_CONDITION_ALE_SECURITY_ATTRIBUTE_FQBN_VALUE = Guid.initString("37a57699-5883-4963-92b8-3e704688b0ad");
pub const FWPM_CONDITION_IPSEC_SECURITY_REALM_ID = Guid.initString("37a57700-5884-4964-92b8-3e704688b0ad");
pub const FWPM_CONDITION_ALE_EFFECTIVE_NAME = Guid.initString("b1277b9a-b781-40fc-9671-e5f1b989f34e");
pub const FWPM_CONDITION_IP_LOCAL_ADDRESS = Guid.initString("d9ee00de-c1ef-4617-bfe3-ffd8f5a08957");
pub const FWPM_CONDITION_IP_REMOTE_ADDRESS = Guid.initString("b235ae9a-1d64-49b8-a44c-5ff3d9095045");
pub const FWPM_CONDITION_IP_SOURCE_ADDRESS = Guid.initString("ae96897e-2e94-4bc9-b313-b27ee80e574d");
pub const FWPM_CONDITION_IP_DESTINATION_ADDRESS = Guid.initString("2d79133b-b390-45c6-8699-acaceaafed33");
pub const FWPM_CONDITION_IP_LOCAL_ADDRESS_TYPE = Guid.initString("6ec7f6c4-376b-45d7-9e9c-d337cedcd237");
pub const FWPM_CONDITION_IP_DESTINATION_ADDRESS_TYPE = Guid.initString("1ec1b7c9-4eea-4f5e-b9ef-76beaaaf17ee");
pub const FWPM_CONDITION_IP_NEXTHOP_ADDRESS = Guid.initString("eabe448a-a711-4d64-85b7-3f76b65299c7");
pub const FWPM_CONDITION_IP_LOCAL_INTERFACE = Guid.initString("4cd62a49-59c3-4969-b7f3-bda5d32890a4");
pub const FWPM_CONDITION_IP_ARRIVAL_INTERFACE = Guid.initString("618a9b6d-386b-4136-ad6e-b51587cfb1cd");
pub const FWPM_CONDITION_ARRIVAL_INTERFACE_TYPE = Guid.initString("89f990de-e798-4e6d-ab76-7c9558292e6f");
pub const FWPM_CONDITION_ARRIVAL_TUNNEL_TYPE = Guid.initString("511166dc-7a8c-4aa7-b533-95ab59fb0340");
pub const FWPM_CONDITION_ARRIVAL_INTERFACE_INDEX = Guid.initString("cc088db3-1792-4a71-b0f9-037d21cd828b");
pub const FWPM_CONDITION_NEXTHOP_SUB_INTERFACE_INDEX = Guid.initString("ef8a6122-0577-45a7-9aaf-825fbeb4fb95");
pub const FWPM_CONDITION_IP_NEXTHOP_INTERFACE = Guid.initString("93ae8f5b-7f6f-4719-98c8-14e97429ef04");
pub const FWPM_CONDITION_NEXTHOP_INTERFACE_TYPE = Guid.initString("97537c6c-d9a3-4767-a381-e942675cd920");
pub const FWPM_CONDITION_NEXTHOP_TUNNEL_TYPE = Guid.initString("72b1a111-987b-4720-99dd-c7c576fa2d4c");
pub const FWPM_CONDITION_NEXTHOP_INTERFACE_INDEX = Guid.initString("138e6888-7ab8-4d65-9ee8-0591bcf6a494");
pub const FWPM_CONDITION_ORIGINAL_PROFILE_ID = Guid.initString("46ea1551-2255-492b-8019-aabeee349f40");
pub const FWPM_CONDITION_CURRENT_PROFILE_ID = Guid.initString("ab3033c9-c0e3-4759-937d-5758c65d4ae3");
pub const FWPM_CONDITION_LOCAL_INTERFACE_PROFILE_ID = Guid.initString("4ebf7562-9f18-4d06-9941-a7a625744d71");
pub const FWPM_CONDITION_ARRIVAL_INTERFACE_PROFILE_ID = Guid.initString("cdfe6aab-c083-4142-8679-c08f95329c61");
pub const FWPM_CONDITION_NEXTHOP_INTERFACE_PROFILE_ID = Guid.initString("d7ff9a56-cdaa-472b-84db-d23963c1d1bf");
pub const FWPM_CONDITION_REAUTHORIZE_REASON = Guid.initString("11205e8c-11ae-457a-8a44-477026dd764a");
pub const FWPM_CONDITION_ORIGINAL_ICMP_TYPE = Guid.initString("076dfdbe-c56c-4f72-ae8a-2cfe7e5c8286");
pub const FWPM_CONDITION_IP_PHYSICAL_ARRIVAL_INTERFACE = Guid.initString("da50d5c8-fa0d-4c89-b032-6e62136d1e96");
pub const FWPM_CONDITION_IP_PHYSICAL_NEXTHOP_INTERFACE = Guid.initString("f09bd5ce-5150-48be-b098-c25152fb1f92");
pub const FWPM_CONDITION_INTERFACE_QUARANTINE_EPOCH = Guid.initString("cce68d5e-053b-43a8-9a6f-33384c28e4f6");
pub const FWPM_CONDITION_INTERFACE_TYPE = Guid.initString("daf8cd14-e09e-4c93-a5ae-c5c13b73ffca");
pub const FWPM_CONDITION_TUNNEL_TYPE = Guid.initString("77a40437-8779-4868-a261-f5a902f1c0cd");
pub const FWPM_CONDITION_IP_FORWARD_INTERFACE = Guid.initString("1076b8a5-6323-4c5e-9810-e8d3fc9e6136");
pub const FWPM_CONDITION_IP_PROTOCOL = Guid.initString("3971ef2b-623e-4f9a-8cb1-6e79b806b9a7");
pub const FWPM_CONDITION_IP_LOCAL_PORT = Guid.initString("0c1ba1af-5765-453f-af22-a8f791ac775b");
pub const FWPM_CONDITION_IP_REMOTE_PORT = Guid.initString("c35a604d-d22b-4e1a-91b4-68f674ee674b");
pub const FWPM_CONDITION_EMBEDDED_LOCAL_ADDRESS_TYPE = Guid.initString("4672a468-8a0a-4202-abb4-849e92e66809");
pub const FWPM_CONDITION_EMBEDDED_REMOTE_ADDRESS = Guid.initString("77ee4b39-3273-4671-b63b-ab6feb66eeb6");
pub const FWPM_CONDITION_EMBEDDED_PROTOCOL = Guid.initString("07784107-a29e-4c7b-9ec7-29c44afafdbc");
pub const FWPM_CONDITION_EMBEDDED_LOCAL_PORT = Guid.initString("bfca394d-acdb-484e-b8e6-2aff79757345");
pub const FWPM_CONDITION_EMBEDDED_REMOTE_PORT = Guid.initString("cae4d6a1-2968-40ed-a4ce-547160dda88d");
pub const FWPM_CONDITION_FLAGS = Guid.initString("632ce23b-5167-435c-86d7-e903684aa80c");
pub const FWPM_CONDITION_DIRECTION = Guid.initString("8784c146-ca97-44d6-9fd1-19fb1840cbf7");
pub const FWPM_CONDITION_INTERFACE_INDEX = Guid.initString("667fd755-d695-434a-8af5-d3835a1259bc");
pub const FWPM_CONDITION_SUB_INTERFACE_INDEX = Guid.initString("0cd42473-d621-4be3-ae8c-72a348d283e1");
pub const FWPM_CONDITION_SOURCE_INTERFACE_INDEX = Guid.initString("2311334d-c92d-45bf-9496-edf447820e2d");
pub const FWPM_CONDITION_SOURCE_SUB_INTERFACE_INDEX = Guid.initString("055edd9d-acd2-4361-8dab-f9525d97662f");
pub const FWPM_CONDITION_DESTINATION_INTERFACE_INDEX = Guid.initString("35cf6522-4139-45ee-a0d5-67b80949d879");
pub const FWPM_CONDITION_DESTINATION_SUB_INTERFACE_INDEX = Guid.initString("2b7d4399-d4c7-4738-a2f5-e994b43da388");
pub const FWPM_CONDITION_ALE_APP_ID = Guid.initString("d78e1e87-8644-4ea5-9437-d809ecefc971");
pub const FWPM_CONDITION_ALE_ORIGINAL_APP_ID = Guid.initString("0e6cd086-e1fb-4212-842f-8a9f993fb3f6");
pub const FWPM_CONDITION_ALE_USER_ID = Guid.initString("af043a0a-b34d-4f86-979c-c90371af6e66");
pub const FWPM_CONDITION_ALE_REMOTE_USER_ID = Guid.initString("f63073b7-0189-4ab0-95a4-6123cbfab862");
pub const FWPM_CONDITION_ALE_REMOTE_MACHINE_ID = Guid.initString("1aa47f51-7f93-4508-a271-81abb00c9cab");
pub const FWPM_CONDITION_ALE_PROMISCUOUS_MODE = Guid.initString("1c974776-7182-46e9-afd3-b02910e30334");
pub const FWPM_CONDITION_ALE_SIO_FIREWALL_SYSTEM_PORT = Guid.initString("b9f4e088-cb98-4efb-a2c7-ad07332643db");
pub const FWPM_CONDITION_ALE_REAUTH_REASON = Guid.initString("b482d227-1979-4a98-8044-18bbe6237542");
pub const FWPM_CONDITION_ALE_NAP_CONTEXT = Guid.initString("46275a9d-c03f-4d77-b784-1c57f4d02753");
pub const FWPM_CONDITION_KM_AUTH_NAP_CONTEXT = Guid.initString("35d0ea0e-15ca-492b-900e-97fd46352cce");
pub const FWPM_CONDITION_REMOTE_USER_TOKEN = Guid.initString("9bf0ee66-06c9-41b9-84da-288cb43af51f");
pub const FWPM_CONDITION_RPC_IF_UUID = Guid.initString("7c9c7d9f-0075-4d35-a0d1-8311c4cf6af1");
pub const FWPM_CONDITION_RPC_IF_VERSION = Guid.initString("eabfd9b7-1262-4a2e-adaa-5f96f6fe326d");
pub const FWPM_CONDITION_RPC_IF_FLAG = Guid.initString("238a8a32-3199-467d-871c-272621ab3896");
pub const FWPM_CONDITION_DCOM_APP_ID = Guid.initString("ff2e7b4d-3112-4770-b636-4d24ae3a6af2");
pub const FWPM_CONDITION_IMAGE_NAME = Guid.initString("d024de4d-deaa-4317-9c85-e40ef6e140c3");
pub const FWPM_CONDITION_RPC_PROTOCOL = Guid.initString("2717bc74-3a35-4ce7-b7ef-c838fabdec45");
pub const FWPM_CONDITION_RPC_AUTH_TYPE = Guid.initString("daba74ab-0d67-43e7-986e-75b84f82f594");
pub const FWPM_CONDITION_RPC_AUTH_LEVEL = Guid.initString("e5a0aed5-59ac-46ea-be05-a5f05ecf446e");
pub const FWPM_CONDITION_SEC_ENCRYPT_ALGORITHM = Guid.initString("0d306ef0-e974-4f74-b5c7-591b0da7d562");
pub const FWPM_CONDITION_SEC_KEY_SIZE = Guid.initString("4772183b-ccf8-4aeb-bce1-c6c6161c8fe4");
pub const FWPM_CONDITION_IP_LOCAL_ADDRESS_V4 = Guid.initString("03a629cb-6e52-49f8-9c41-5709633c09cf");
pub const FWPM_CONDITION_IP_LOCAL_ADDRESS_V6 = Guid.initString("2381be84-7524-45b3-a05b-1e637d9c7a6a");
pub const FWPM_CONDITION_PIPE = Guid.initString("1bd0741d-e3df-4e24-8634-762046eef6eb");
pub const FWPM_CONDITION_IP_REMOTE_ADDRESS_V4 = Guid.initString("1febb610-3bcc-45e1-bc36-2e067e2cb186");
pub const FWPM_CONDITION_IP_REMOTE_ADDRESS_V6 = Guid.initString("246e1d8c-8bee-4018-9b98-31d4582f3361");
pub const FWPM_CONDITION_PROCESS_WITH_RPC_IF_UUID = Guid.initString("e31180a8-bbbd-4d14-a65e-7157b06233bb");
pub const FWPM_CONDITION_RPC_EP_VALUE = Guid.initString("dccea0b9-0886-4360-9c6a-ab043a24fba9");
pub const FWPM_CONDITION_RPC_EP_FLAGS = Guid.initString("218b814a-0a39-49b8-8e71-c20c39c7dd2e");
pub const FWPM_CONDITION_CLIENT_TOKEN = Guid.initString("c228fc1e-403a-4478-be05-c9baa4c05ace");
pub const FWPM_CONDITION_RPC_SERVER_NAME = Guid.initString("b605a225-c3b3-48c7-9833-7aefa9527546");
pub const FWPM_CONDITION_RPC_SERVER_PORT = Guid.initString("8090f645-9ad5-4e3b-9f9f-8023ca097909");
pub const FWPM_CONDITION_RPC_PROXY_AUTH_TYPE = Guid.initString("40953fe2-8565-4759-8488-1771b4b4b5db");
pub const FWPM_CONDITION_CLIENT_CERT_KEY_LENGTH = Guid.initString("a3ec00c7-05f4-4df7-91f2-5f60d91ff443");
pub const FWPM_CONDITION_CLIENT_CERT_OID = Guid.initString("c491ad5e-f882-4283-b916-436b103ff4ad");
pub const FWPM_CONDITION_NET_EVENT_TYPE = Guid.initString("206e9996-490e-40cf-b831-b38641eb6fcb");
pub const FWPM_CONDITION_PEER_NAME = Guid.initString("9b539082-eb90-4186-a6cc-de5b63235016");
pub const FWPM_CONDITION_REMOTE_ID = Guid.initString("f68166fd-0682-4c89-b8f5-86436c7ef9b7");
pub const FWPM_CONDITION_AUTHENTICATION_TYPE = Guid.initString("eb458cd5-da7b-4ef9-8d43-7b0a840332f2");
pub const FWPM_CONDITION_KM_TYPE = Guid.initString("ff0f5f49-0ceb-481b-8638-1479791f3f2c");
pub const FWPM_CONDITION_KM_MODE = Guid.initString("feef4582-ef8f-4f7b-858b-9077d122de47");
pub const FWPM_CONDITION_IPSEC_POLICY_KEY = Guid.initString("ad37dee3-722f-45cc-a4e3-068048124452");
pub const FWPM_CONDITION_QM_MODE = Guid.initString("f64fc6d1-f9cb-43d2-8a5f-e13bc894f265");
pub const FWPM_CONDITION_COMPARTMENT_ID = Guid.initString("35a791ab-04ac-4ff2-a6bb-da6cfac71806");
pub const FWPM_CONDITION_RESERVED0 = Guid.initString("678f4deb-45af-4882-93fe-19d4729d9834");
pub const FWPM_CONDITION_RESERVED1 = Guid.initString("d818f827-5c69-48eb-bf80-d86b17755f97");
pub const FWPM_CONDITION_RESERVED2 = Guid.initString("53d4123d-e15b-4e84-b7a8-dce16f7b62d9");
pub const FWPM_CONDITION_RESERVED3 = Guid.initString("7f6e8ca3-6606-4932-97c7-e1f20710af3b");
pub const FWPM_CONDITION_RESERVED4 = Guid.initString("5f58e642-b937-495e-a94b-f6b051a49250");
pub const FWPM_CONDITION_RESERVED5 = Guid.initString("9ba8f6cd-f77c-43e6-8847-11939dc5db5a");
pub const FWPM_CONDITION_RESERVED6 = Guid.initString("f13d84bd-59d5-44c4-8817-5ecdae1805bd");
pub const FWPM_CONDITION_RESERVED7 = Guid.initString("65a0f930-45dd-4983-aa33-efc7b611af08");
pub const FWPM_CONDITION_RESERVED8 = Guid.initString("4f424974-0c12-4816-9b47-9a547db39a32");
pub const FWPM_CONDITION_RESERVED9 = Guid.initString("ce78e10f-13ff-4c70-8643-36ad1879afa3");
pub const FWPM_CONDITION_RESERVED10 = Guid.initString("b979e282-d621-4c8c-b184-b105a61c36ce");
pub const FWPM_CONDITION_RESERVED11 = Guid.initString("2d62ee4d-023d-411f-9582-43acbb795975");
pub const FWPM_CONDITION_RESERVED12 = Guid.initString("a3677c32-7e35-4ddc-93da-e8c33fc923c7");
pub const FWPM_CONDITION_RESERVED13 = Guid.initString("335a3e90-84aa-42f5-9e6f-59309536a44c");
pub const FWPM_CONDITION_RESERVED14 = Guid.initString("30e44da2-2f1a-4116-a559-f907de83604a");
pub const FWPM_CONDITION_RESERVED15 = Guid.initString("bab8340f-afe0-43d1-80d8-5ca456962de3");
pub const FWPM_PROVIDER_IKEEXT = Guid.initString("10ad9216-ccde-456c-8b16-e9f04e60a90b");
pub const FWPM_PROVIDER_IPSEC_DOSP_CONFIG = Guid.initString("3c6c05a9-c05c-4bb9-8338-2327814ce8bf");
pub const FWPM_PROVIDER_TCP_CHIMNEY_OFFLOAD = Guid.initString("896aa19e-9a34-4bcb-ae79-beb9127c84b9");
pub const FWPM_PROVIDER_TCP_TEMPLATES = Guid.initString("76cfcd30-3394-432d-bed3-441ae50e63c3");
pub const FWPM_PROVIDER_MPSSVC_WSH = Guid.initString("4b153735-1049-4480-aab4-d1b9bdc03710");
pub const FWPM_PROVIDER_MPSSVC_WF = Guid.initString("decc16ca-3f33-4346-be1e-8fb4ae0f3d62");
pub const FWPM_PROVIDER_MPSSVC_EDP = Guid.initString("a90296f7-46b8-4457-8f84-b05e05d3c622");
pub const FWPM_PROVIDER_MPSSVC_TENANT_RESTRICTIONS = Guid.initString("d0718ff9-44da-4f50-9dc2-c963a4247613");
pub const FWPM_CALLOUT_IPSEC_INBOUND_TRANSPORT_V4 = Guid.initString("5132900d-5e84-4b5f-80e4-01741e81ff10");
pub const FWPM_CALLOUT_IPSEC_INBOUND_TRANSPORT_V6 = Guid.initString("49d3ac92-2a6c-4dcf-955f-1c3be009dd99");
pub const FWPM_CALLOUT_IPSEC_OUTBOUND_TRANSPORT_V4 = Guid.initString("4b46bf0a-4523-4e57-aa38-a87987c910d9");
pub const FWPM_CALLOUT_IPSEC_OUTBOUND_TRANSPORT_V6 = Guid.initString("38d87722-ad83-4f11-a91f-df0fb077225b");
pub const FWPM_CALLOUT_IPSEC_INBOUND_TUNNEL_V4 = Guid.initString("191a8a46-0bf8-46cf-b045-4b45dfa6a324");
pub const FWPM_CALLOUT_IPSEC_INBOUND_TUNNEL_V6 = Guid.initString("80c342e3-1e53-4d6f-9b44-03df5aeee154");
pub const FWPM_CALLOUT_IPSEC_OUTBOUND_TUNNEL_V4 = Guid.initString("70a4196c-835b-4fb0-98e8-075f4d977d46");
pub const FWPM_CALLOUT_IPSEC_OUTBOUND_TUNNEL_V6 = Guid.initString("f1835363-a6a5-4e62-b180-23db789d8da6");
pub const FWPM_CALLOUT_IPSEC_FORWARD_INBOUND_TUNNEL_V4 = Guid.initString("28829633-c4f0-4e66-873f-844db2a899c7");
pub const FWPM_CALLOUT_IPSEC_FORWARD_INBOUND_TUNNEL_V6 = Guid.initString("af50bec2-c686-429a-884d-b74443e7b0b4");
pub const FWPM_CALLOUT_IPSEC_FORWARD_OUTBOUND_TUNNEL_V4 = Guid.initString("fb532136-15cb-440b-937c-1717ca320c40");
pub const FWPM_CALLOUT_IPSEC_FORWARD_OUTBOUND_TUNNEL_V6 = Guid.initString("dae640cc-e021-4bee-9eb6-a48b275c8c1d");
pub const FWPM_CALLOUT_IPSEC_INBOUND_INITIATE_SECURE_V4 = Guid.initString("7dff309b-ba7d-4aba-91aa-ae5c6640c944");
pub const FWPM_CALLOUT_IPSEC_INBOUND_INITIATE_SECURE_V6 = Guid.initString("a9a0d6d9-c58c-474e-8aeb-3cfe99d6d53d");
pub const FWPM_CALLOUT_IPSEC_INBOUND_TUNNEL_ALE_ACCEPT_V4 = Guid.initString("3df6e7de-fd20-48f2-9f26-f854444cba79");
pub const FWPM_CALLOUT_IPSEC_INBOUND_TUNNEL_ALE_ACCEPT_V6 = Guid.initString("a1e392d3-72ac-47bb-87a7-0122c69434ab");
pub const FWPM_CALLOUT_IPSEC_ALE_CONNECT_V4 = Guid.initString("6ac141fc-f75d-4203-b9c8-48e6149c2712");
pub const FWPM_CALLOUT_IPSEC_ALE_CONNECT_V6 = Guid.initString("4c0dda05-e31f-4666-90b0-b3dfad34129a");
pub const FWPM_CALLOUT_IPSEC_DOSP_FORWARD_V6 = Guid.initString("6d08a342-db9e-4fbe-9ed2-57374ce89f79");
pub const FWPM_CALLOUT_IPSEC_DOSP_FORWARD_V4 = Guid.initString("2fcb56ec-cd37-4b4f-b108-62c2b1850a0c");
pub const FWPM_CALLOUT_WFP_TRANSPORT_LAYER_V4_SILENT_DROP = Guid.initString("eda08606-2494-4d78-89bc-67837c03b969");
pub const FWPM_CALLOUT_WFP_TRANSPORT_LAYER_V6_SILENT_DROP = Guid.initString("8693cc74-a075-4156-b476-9286eece814e");
pub const FWPM_CALLOUT_TCP_CHIMNEY_CONNECT_LAYER_V4 = Guid.initString("f3e10ab3-2c25-4279-ac36-c30fc181bec4");
pub const FWPM_CALLOUT_TCP_CHIMNEY_CONNECT_LAYER_V6 = Guid.initString("39e22085-a341-42fc-a279-aec94e689c56");
pub const FWPM_CALLOUT_TCP_CHIMNEY_ACCEPT_LAYER_V4 = Guid.initString("e183ecb2-3a7f-4b54-8ad9-76050ed880ca");
pub const FWPM_CALLOUT_TCP_CHIMNEY_ACCEPT_LAYER_V6 = Guid.initString("0378cf41-bf98-4603-81f2-7f12586079f6");
pub const FWPM_CALLOUT_SET_OPTIONS_AUTH_CONNECT_LAYER_V4 = Guid.initString("bc582280-1677-41e9-94ab-c2fcb15c2eeb");
pub const FWPM_CALLOUT_SET_OPTIONS_AUTH_CONNECT_LAYER_V6 = Guid.initString("98e5373c-b884-490f-b65f-2f6a4a575195");
pub const FWPM_CALLOUT_SET_OPTIONS_AUTH_RECV_ACCEPT_LAYER_V4 = Guid.initString("2d55f008-0c01-4f92-b26e-a08a94569b8d");
pub const FWPM_CALLOUT_SET_OPTIONS_AUTH_RECV_ACCEPT_LAYER_V6 = Guid.initString("63018537-f281-4dc4-83d3-8dec18b7ade2");
pub const FWPM_CALLOUT_RESERVED_AUTH_CONNECT_LAYER_V4 = Guid.initString("288b524d-0566-4e19-b612-8f441a2e5949");
pub const FWPM_CALLOUT_RESERVED_AUTH_CONNECT_LAYER_V6 = Guid.initString("00b84b92-2b5e-4b71-ab0e-aaca43e387e6");
pub const FWPM_CALLOUT_TEREDO_ALE_RESOURCE_ASSIGNMENT_V6 = Guid.initString("31b95392-066e-42a2-b7db-92f8acdd56f9");
pub const FWPM_CALLOUT_EDGE_TRAVERSAL_ALE_RESOURCE_ASSIGNMENT_V4 = Guid.initString("079b1010-f1c5-4fcd-ae05-da41107abd0b");
pub const FWPM_CALLOUT_TEREDO_ALE_LISTEN_V6 = Guid.initString("81a434e7-f60c-4378-bab8-c625a30f0197");
pub const FWPM_CALLOUT_EDGE_TRAVERSAL_ALE_LISTEN_V4 = Guid.initString("33486ab5-6d5e-4e65-a00b-a7afed0ba9a1");
pub const FWPM_CALLOUT_TCP_TEMPLATES_CONNECT_LAYER_V4 = Guid.initString("215a0b39-4b7e-4eda-8ce4-179679df6224");
pub const FWPM_CALLOUT_TCP_TEMPLATES_CONNECT_LAYER_V6 = Guid.initString("838b37a1-5c12-4d34-8b38-078728b2d25c");
pub const FWPM_CALLOUT_TCP_TEMPLATES_ACCEPT_LAYER_V4 = Guid.initString("2f23f5d0-40c4-4c41-a254-46d8dba8957c");
pub const FWPM_CALLOUT_TCP_TEMPLATES_ACCEPT_LAYER_V6 = Guid.initString("b25152f0-991c-4f53-bbe7-d24b45fe632c");
pub const FWPM_CALLOUT_POLICY_SILENT_MODE_AUTH_CONNECT_LAYER_V4 = Guid.initString("5fbfc31d-a51c-44dc-acb6-0624a030a700");
pub const FWPM_CALLOUT_POLICY_SILENT_MODE_AUTH_CONNECT_LAYER_V6 = Guid.initString("5fbfc31d-a51c-44dc-acb6-0624a030a701");
pub const FWPM_CALLOUT_POLICY_SILENT_MODE_AUTH_RECV_ACCEPT_LAYER_V4 = Guid.initString("5fbfc31d-a51c-44dc-acb6-0624a030a702");
pub const FWPM_CALLOUT_POLICY_SILENT_MODE_AUTH_RECV_ACCEPT_LAYER_V6 = Guid.initString("5fbfc31d-a51c-44dc-acb6-0624a030a703");
pub const FWPM_CALLOUT_HTTP_TEMPLATE_SSL_HANDSHAKE = Guid.initString("b3423249-8d09-4858-9210-95c7fda8e30f");
pub const FWPM_CALLOUT_BUILT_IN_RESERVED_1 = Guid.initString("779719a4-e695-47b6-a199-7999fec9163b");
pub const FWPM_CALLOUT_BUILT_IN_RESERVED_2 = Guid.initString("ef9661b6-7c5e-48fd-a130-96678ceacc41");
pub const FWPM_CALLOUT_BUILT_IN_RESERVED_3 = Guid.initString("18729c7a-2f62-4be0-966f-974b21b86df1");
pub const FWPM_CALLOUT_BUILT_IN_RESERVED_4 = Guid.initString("6c3fb801-daff-40e9-91e6-f7ff7e52f7d9");
pub const FWPM_PROVIDER_CONTEXT_SECURE_SOCKET_AUTHIP = Guid.initString("b25ea800-0d02-46ed-92bd-7fa84bb73e9d");
pub const FWPM_PROVIDER_CONTEXT_SECURE_SOCKET_IPSEC = Guid.initString("8c2d4144-f8e0-42c0-94ce-7ccfc63b2f9b");
pub const FWPM_KEYING_MODULE_IKE = Guid.initString("a9bbf787-82a8-45bb-a400-5d7e5952c7a9");
pub const FWPM_KEYING_MODULE_AUTHIP = Guid.initString("11e3dae0-dd26-4590-857d-ab4b28d1a095");
pub const FWPM_KEYING_MODULE_IKEV2 = Guid.initString("041792cc-8f07-419d-a394-716968cb1647");
pub const FWPM_AUTO_WEIGHT_BITS = @as(u32, 60);
pub const FWPM_WEIGHT_RANGE_IPSEC = @as(u32, 0);
pub const FWPM_WEIGHT_RANGE_IKE_EXEMPTIONS = @as(u32, 12);
pub const FWPM_ACTRL_ADD = @as(u32, 1);
pub const FWPM_ACTRL_ADD_LINK = @as(u32, 2);
pub const FWPM_ACTRL_BEGIN_READ_TXN = @as(u32, 4);
pub const FWPM_ACTRL_BEGIN_WRITE_TXN = @as(u32, 8);
pub const FWPM_ACTRL_CLASSIFY = @as(u32, 16);
pub const FWPM_ACTRL_ENUM = @as(u32, 32);
pub const FWPM_ACTRL_OPEN = @as(u32, 64);
pub const FWPM_ACTRL_READ = @as(u32, 128);
pub const FWPM_ACTRL_READ_STATS = @as(u32, 256);
pub const FWPM_ACTRL_SUBSCRIBE = @as(u32, 512);
pub const FWPM_ACTRL_WRITE = @as(u32, 1024);
pub const FWPM_TXN_READ_ONLY = @as(u32, 1);
pub const FWPM_TUNNEL_FLAG_POINT_TO_POINT = @as(u32, 1);
pub const FWPM_TUNNEL_FLAG_ENABLE_VIRTUAL_IF_TUNNELING = @as(u32, 2);
pub const FWPM_TUNNEL_FLAG_RESERVED0 = @as(u32, 4);
pub const FWPS_METADATA_FIELD_DISCARD_REASON = @as(u32, 1);
pub const FWPS_METADATA_FIELD_FLOW_HANDLE = @as(u32, 2);
pub const FWPS_METADATA_FIELD_IP_HEADER_SIZE = @as(u32, 4);
pub const FWPS_METADATA_FIELD_PROCESS_PATH = @as(u32, 8);
pub const FWPS_METADATA_FIELD_TOKEN = @as(u32, 16);
pub const FWPS_METADATA_FIELD_PROCESS_ID = @as(u32, 32);
pub const FWPS_METADATA_FIELD_SYSTEM_FLAGS = @as(u32, 64);
pub const FWPS_METADATA_FIELD_RESERVED = @as(u32, 128);
pub const FWPS_METADATA_FIELD_SOURCE_INTERFACE_INDEX = @as(u32, 256);
pub const FWPS_METADATA_FIELD_DESTINATION_INTERFACE_INDEX = @as(u32, 512);
pub const FWPS_METADATA_FIELD_TRANSPORT_HEADER_SIZE = @as(u32, 1024);
pub const FWPS_METADATA_FIELD_COMPARTMENT_ID = @as(u32, 2048);
pub const FWPS_METADATA_FIELD_FRAGMENT_DATA = @as(u32, 4096);
pub const FWPS_METADATA_FIELD_PATH_MTU = @as(u32, 8192);
pub const FWPS_METADATA_FIELD_COMPLETION_HANDLE = @as(u32, 16384);
pub const FWPS_METADATA_FIELD_TRANSPORT_ENDPOINT_HANDLE = @as(u32, 32768);
pub const FWPS_METADATA_FIELD_TRANSPORT_CONTROL_DATA = @as(u32, 65536);
pub const FWPS_METADATA_FIELD_REMOTE_SCOPE_ID = @as(u32, 131072);
pub const FWPS_METADATA_FIELD_PACKET_DIRECTION = @as(u32, 262144);
pub const FWPS_METADATA_FIELD_PACKET_SYSTEM_CRITICAL = @as(u32, 524288);
pub const FWPS_METADATA_FIELD_FORWARD_LAYER_OUTBOUND_PASS_THRU = @as(u32, 1048576);
pub const FWPS_METADATA_FIELD_FORWARD_LAYER_INBOUND_PASS_THRU = @as(u32, 2097152);
pub const FWPS_METADATA_FIELD_ALE_CLASSIFY_REQUIRED = @as(u32, 4194304);
pub const FWPS_METADATA_FIELD_TRANSPORT_HEADER_INCLUDE_HEADER = @as(u32, 8388608);
pub const FWPS_METADATA_FIELD_DESTINATION_PREFIX = @as(u32, 16777216);
pub const FWPS_METADATA_FIELD_ETHER_FRAME_LENGTH = @as(u32, 33554432);
pub const FWPS_METADATA_FIELD_PARENT_ENDPOINT_HANDLE = @as(u32, 67108864);
pub const FWPS_METADATA_FIELD_ICMP_ID_AND_SEQUENCE = @as(u32, 134217728);
pub const FWPS_METADATA_FIELD_LOCAL_REDIRECT_TARGET_PID = @as(u32, 268435456);
pub const FWPS_METADATA_FIELD_ORIGINAL_DESTINATION = @as(u32, 536870912);
pub const FWPS_METADATA_FIELD_REDIRECT_RECORD_HANDLE = @as(u32, 1073741824);
pub const FWPS_METADATA_FIELD_SUB_PROCESS_TAG = @as(u32, 2147483648);
pub const FWPS_L2_METADATA_FIELD_ETHERNET_MAC_HEADER_SIZE = @as(u32, 1);
pub const FWPS_L2_METADATA_FIELD_WIFI_OPERATION_MODE = @as(u32, 2);
pub const FWPS_L2_METADATA_FIELD_VSWITCH_SOURCE_PORT_ID = @as(u32, 4);
pub const FWPS_L2_METADATA_FIELD_VSWITCH_SOURCE_NIC_INDEX = @as(u32, 8);
pub const FWPS_L2_METADATA_FIELD_VSWITCH_PACKET_CONTEXT = @as(u32, 16);
pub const FWPS_L2_METADATA_FIELD_VSWITCH_DESTINATION_PORT_ID = @as(u32, 32);
pub const FWPS_L2_METADATA_FIELD_RESERVED = @as(u32, 2147483648);

//--------------------------------------------------------------------------------
// Section: Types (270)
//--------------------------------------------------------------------------------
pub const IPSEC_SA_BUNDLE_FLAGS = packed struct(u32) {
    ND_SECURE: u1 = 0,
    ND_BOUNDARY: u1 = 0,
    ND_PEER_NAT_BOUNDARY: u1 = 0,
    GUARANTEE_ENCRYPTION: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    ALLOW_NULL_TARGET_NAME_MATCH: u1 = 0,
    CLEAR_DF_ON_TUNNEL: u1 = 0,
    ASSUME_UDP_CONTEXT_OUTBOUND: u1 = 0,
    ND_PEER_BOUNDARY: u1 = 0,
    SUPPRESS_DUPLICATE_DELETION: u1 = 0,
    PEER_SUPPORTS_GUARANTEE_ENCRYPTION: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const IPSEC_SA_BUNDLE_FLAG_ND_SECURE = IPSEC_SA_BUNDLE_FLAGS{ .ND_SECURE = 1 };
pub const IPSEC_SA_BUNDLE_FLAG_ND_BOUNDARY = IPSEC_SA_BUNDLE_FLAGS{ .ND_BOUNDARY = 1 };
pub const IPSEC_SA_BUNDLE_FLAG_ND_PEER_NAT_BOUNDARY = IPSEC_SA_BUNDLE_FLAGS{ .ND_PEER_NAT_BOUNDARY = 1 };
pub const IPSEC_SA_BUNDLE_FLAG_GUARANTEE_ENCRYPTION = IPSEC_SA_BUNDLE_FLAGS{ .GUARANTEE_ENCRYPTION = 1 };
pub const IPSEC_SA_BUNDLE_FLAG_ALLOW_NULL_TARGET_NAME_MATCH = IPSEC_SA_BUNDLE_FLAGS{ .ALLOW_NULL_TARGET_NAME_MATCH = 1 };
pub const IPSEC_SA_BUNDLE_FLAG_CLEAR_DF_ON_TUNNEL = IPSEC_SA_BUNDLE_FLAGS{ .CLEAR_DF_ON_TUNNEL = 1 };
pub const IPSEC_SA_BUNDLE_FLAG_ASSUME_UDP_CONTEXT_OUTBOUND = IPSEC_SA_BUNDLE_FLAGS{ .ASSUME_UDP_CONTEXT_OUTBOUND = 1 };
pub const IPSEC_SA_BUNDLE_FLAG_ND_PEER_BOUNDARY = IPSEC_SA_BUNDLE_FLAGS{ .ND_PEER_BOUNDARY = 1 };
pub const IPSEC_SA_BUNDLE_FLAG_SUPPRESS_DUPLICATE_DELETION = IPSEC_SA_BUNDLE_FLAGS{ .SUPPRESS_DUPLICATE_DELETION = 1 };
pub const IPSEC_SA_BUNDLE_FLAG_PEER_SUPPORTS_GUARANTEE_ENCRYPTION = IPSEC_SA_BUNDLE_FLAGS{ .PEER_SUPPORTS_GUARANTEE_ENCRYPTION = 1 };

pub const IPSEC_POLICY_FLAG = packed struct(u32) {
    _0: u1 = 0,
    ND_SECURE: u1 = 0,
    ND_BOUNDARY: u1 = 0,
    CLEAR_DF_ON_TUNNEL: u1 = 0,
    NAT_ENCAP_ALLOW_PEER_BEHIND_NAT: u1 = 0,
    NAT_ENCAP_ALLOW_GENERAL_NAT_TRAVERSAL: u1 = 0,
    DONT_NEGOTIATE_SECOND_LIFETIME: u1 = 0,
    DONT_NEGOTIATE_BYTE_LIFETIME: u1 = 0,
    ENABLE_V6_IN_V4_TUNNELING: u1 = 0,
    ENABLE_SERVER_ADDR_ASSIGNMENT: u1 = 0,
    TUNNEL_ALLOW_OUTBOUND_CLEAR_CONNECTION: u1 = 0,
    TUNNEL_BYPASS_ALREADY_SECURE_CONNECTION: u1 = 0,
    TUNNEL_BYPASS_ICMPV6: u1 = 0,
    KEY_MANAGER_ALLOW_DICTATE_KEY: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const IPSEC_POLICY_FLAG_ND_SECURE = IPSEC_POLICY_FLAG{ .ND_SECURE = 1 };
pub const IPSEC_POLICY_FLAG_ND_BOUNDARY = IPSEC_POLICY_FLAG{ .ND_BOUNDARY = 1 };
pub const IPSEC_POLICY_FLAG_NAT_ENCAP_ALLOW_PEER_BEHIND_NAT = IPSEC_POLICY_FLAG{ .NAT_ENCAP_ALLOW_PEER_BEHIND_NAT = 1 };
pub const IPSEC_POLICY_FLAG_NAT_ENCAP_ALLOW_GENERAL_NAT_TRAVERSAL = IPSEC_POLICY_FLAG{ .NAT_ENCAP_ALLOW_GENERAL_NAT_TRAVERSAL = 1 };
pub const IPSEC_POLICY_FLAG_DONT_NEGOTIATE_SECOND_LIFETIME = IPSEC_POLICY_FLAG{ .DONT_NEGOTIATE_SECOND_LIFETIME = 1 };
pub const IPSEC_POLICY_FLAG_DONT_NEGOTIATE_BYTE_LIFETIME = IPSEC_POLICY_FLAG{ .DONT_NEGOTIATE_BYTE_LIFETIME = 1 };
pub const IPSEC_POLICY_FLAG_CLEAR_DF_ON_TUNNEL = IPSEC_POLICY_FLAG{ .CLEAR_DF_ON_TUNNEL = 1 };
pub const IPSEC_POLICY_FLAG_ENABLE_V6_IN_V4_TUNNELING = IPSEC_POLICY_FLAG{ .ENABLE_V6_IN_V4_TUNNELING = 1 };
pub const IPSEC_POLICY_FLAG_ENABLE_SERVER_ADDR_ASSIGNMENT = IPSEC_POLICY_FLAG{ .ENABLE_SERVER_ADDR_ASSIGNMENT = 1 };
pub const IPSEC_POLICY_FLAG_TUNNEL_ALLOW_OUTBOUND_CLEAR_CONNECTION = IPSEC_POLICY_FLAG{ .TUNNEL_ALLOW_OUTBOUND_CLEAR_CONNECTION = 1 };
pub const IPSEC_POLICY_FLAG_TUNNEL_BYPASS_ALREADY_SECURE_CONNECTION = IPSEC_POLICY_FLAG{ .TUNNEL_BYPASS_ALREADY_SECURE_CONNECTION = 1 };
pub const IPSEC_POLICY_FLAG_TUNNEL_BYPASS_ICMPV6 = IPSEC_POLICY_FLAG{ .TUNNEL_BYPASS_ICMPV6 = 1 };
pub const IPSEC_POLICY_FLAG_KEY_MANAGER_ALLOW_DICTATE_KEY = IPSEC_POLICY_FLAG{ .KEY_MANAGER_ALLOW_DICTATE_KEY = 1 };

pub const IKEEXT_CERT_AUTH = packed struct(u32) {
    FLAG_SSL_ONE_WAY: u1 = 0,
    _1: u1 = 0,
    ENABLE_CRL_CHECK_STRONG: u1 = 0,
    DISABLE_SSL_CERT_VALIDATION: u1 = 0,
    ALLOW_HTTP_CERT_LOOKUP: u1 = 0,
    URL_CONTAINS_BUNDLE: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const IKEEXT_CERT_AUTH_FLAG_SSL_ONE_WAY = IKEEXT_CERT_AUTH{ .FLAG_SSL_ONE_WAY = 1 };
pub const IKEEXT_CERT_AUTH_ENABLE_CRL_CHECK_STRONG = IKEEXT_CERT_AUTH{ .ENABLE_CRL_CHECK_STRONG = 1 };
pub const IKEEXT_CERT_AUTH_DISABLE_SSL_CERT_VALIDATION = IKEEXT_CERT_AUTH{ .DISABLE_SSL_CERT_VALIDATION = 1 };
pub const IKEEXT_CERT_AUTH_ALLOW_HTTP_CERT_LOOKUP = IKEEXT_CERT_AUTH{ .ALLOW_HTTP_CERT_LOOKUP = 1 };
pub const IKEEXT_CERT_AUTH_URL_CONTAINS_BUNDLE = IKEEXT_CERT_AUTH{ .URL_CONTAINS_BUNDLE = 1 };

pub const IKEEXT_PRESHARED_KEY_AUTHENTICATION_FLAGS = packed struct(u32) {
    LOCAL_AUTH_ONLY: u1 = 0,
    REMOTE_AUTH_ONLY: u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const IKEEXT_PSK_FLAG_LOCAL_AUTH_ONLY = IKEEXT_PRESHARED_KEY_AUTHENTICATION_FLAGS{ .LOCAL_AUTH_ONLY = 1 };
pub const IKEEXT_PSK_FLAG_REMOTE_AUTH_ONLY = IKEEXT_PRESHARED_KEY_AUTHENTICATION_FLAGS{ .REMOTE_AUTH_ONLY = 1 };

pub const IKEEXT_POLICY_FLAG = packed struct(u32) {
    DISABLE_DIAGNOSTICS: u1 = 0,
    NO_MACHINE_LUID_VERIFY: u1 = 0,
    NO_IMPERSONATION_LUID_VERIFY: u1 = 0,
    ENABLE_OPTIONAL_DH: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const IKEEXT_POLICY_FLAG_DISABLE_DIAGNOSTICS = IKEEXT_POLICY_FLAG{ .DISABLE_DIAGNOSTICS = 1 };
pub const IKEEXT_POLICY_FLAG_NO_MACHINE_LUID_VERIFY = IKEEXT_POLICY_FLAG{ .NO_MACHINE_LUID_VERIFY = 1 };
pub const IKEEXT_POLICY_FLAG_NO_IMPERSONATION_LUID_VERIFY = IKEEXT_POLICY_FLAG{ .NO_IMPERSONATION_LUID_VERIFY = 1 };
pub const IKEEXT_POLICY_FLAG_ENABLE_OPTIONAL_DH = IKEEXT_POLICY_FLAG{ .ENABLE_OPTIONAL_DH = 1 };

pub const FWPM_SUBSCRIPTION_FLAGS = enum(u32) {
    ADD = 1,
    DELETE = 2,
};
pub const FWPM_SUBSCRIPTION_FLAG_NOTIFY_ON_ADD = FWPM_SUBSCRIPTION_FLAGS.ADD;
pub const FWPM_SUBSCRIPTION_FLAG_NOTIFY_ON_DELETE = FWPM_SUBSCRIPTION_FLAGS.DELETE;

pub const IKEEXT_CERT_FLAGS = packed struct(u32) {
    ENABLE_ACCOUNT_MAPPING: u1 = 0,
    DISABLE_REQUEST_PAYLOAD: u1 = 0,
    USE_NAP_CERTIFICATE: u1 = 0,
    INTERMEDIATE_CA: u1 = 0,
    IGNORE_INIT_CERT_MAP_FAILURE: u1 = 0,
    PREFER_NAP_CERTIFICATE_OUTBOUND: u1 = 0,
    SELECT_NAP_CERTIFICATE: u1 = 0,
    VERIFY_NAP_CERTIFICATE: u1 = 0,
    FOLLOW_RENEWAL_CERTIFICATE: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const IKEEXT_CERT_FLAG_ENABLE_ACCOUNT_MAPPING = IKEEXT_CERT_FLAGS{ .ENABLE_ACCOUNT_MAPPING = 1 };
pub const IKEEXT_CERT_FLAG_DISABLE_REQUEST_PAYLOAD = IKEEXT_CERT_FLAGS{ .DISABLE_REQUEST_PAYLOAD = 1 };
pub const IKEEXT_CERT_FLAG_USE_NAP_CERTIFICATE = IKEEXT_CERT_FLAGS{ .USE_NAP_CERTIFICATE = 1 };
pub const IKEEXT_CERT_FLAG_INTERMEDIATE_CA = IKEEXT_CERT_FLAGS{ .INTERMEDIATE_CA = 1 };
pub const IKEEXT_CERT_FLAG_IGNORE_INIT_CERT_MAP_FAILURE = IKEEXT_CERT_FLAGS{ .IGNORE_INIT_CERT_MAP_FAILURE = 1 };
pub const IKEEXT_CERT_FLAG_PREFER_NAP_CERTIFICATE_OUTBOUND = IKEEXT_CERT_FLAGS{ .PREFER_NAP_CERTIFICATE_OUTBOUND = 1 };
pub const IKEEXT_CERT_FLAG_SELECT_NAP_CERTIFICATE = IKEEXT_CERT_FLAGS{ .SELECT_NAP_CERTIFICATE = 1 };
pub const IKEEXT_CERT_FLAG_VERIFY_NAP_CERTIFICATE = IKEEXT_CERT_FLAGS{ .VERIFY_NAP_CERTIFICATE = 1 };
pub const IKEEXT_CERT_FLAG_FOLLOW_RENEWAL_CERTIFICATE = IKEEXT_CERT_FLAGS{ .FOLLOW_RENEWAL_CERTIFICATE = 1 };

pub const IPSEC_DOSP_FLAGS = packed struct(u32) {
    ENABLE_IKEV1: u1 = 0,
    ENABLE_IKEV2: u1 = 0,
    DISABLE_AUTHIP: u1 = 0,
    DISABLE_DEFAULT_BLOCK: u1 = 0,
    FILTER_BLOCK: u1 = 0,
    FILTER_EXEMPT: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const IPSEC_DOSP_FLAG_ENABLE_IKEV1 = IPSEC_DOSP_FLAGS{ .ENABLE_IKEV1 = 1 };
pub const IPSEC_DOSP_FLAG_ENABLE_IKEV2 = IPSEC_DOSP_FLAGS{ .ENABLE_IKEV2 = 1 };
pub const IPSEC_DOSP_FLAG_DISABLE_AUTHIP = IPSEC_DOSP_FLAGS{ .DISABLE_AUTHIP = 1 };
pub const IPSEC_DOSP_FLAG_DISABLE_DEFAULT_BLOCK = IPSEC_DOSP_FLAGS{ .DISABLE_DEFAULT_BLOCK = 1 };
pub const IPSEC_DOSP_FLAG_FILTER_BLOCK = IPSEC_DOSP_FLAGS{ .FILTER_BLOCK = 1 };
pub const IPSEC_DOSP_FLAG_FILTER_EXEMPT = IPSEC_DOSP_FLAGS{ .FILTER_EXEMPT = 1 };

pub const IKEEXT_KERBEROS_AUTHENTICATION_FLAGS = packed struct(u32) {
    ISABLE_INITIATOR_TOKEN_GENERATION: u1 = 0,
    ONT_ACCEPT_EXPLICIT_CREDENTIALS: u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const IKEEXT_KERB_AUTH_DISABLE_INITIATOR_TOKEN_GENERATION = IKEEXT_KERBEROS_AUTHENTICATION_FLAGS{ .ISABLE_INITIATOR_TOKEN_GENERATION = 1 };
pub const IKEEXT_KERB_AUTH_DONT_ACCEPT_EXPLICIT_CREDENTIALS = IKEEXT_KERBEROS_AUTHENTICATION_FLAGS{ .ONT_ACCEPT_EXPLICIT_CREDENTIALS = 1 };

pub const IKEEXT_RESERVED_AUTHENTICATION_FLAGS = packed struct(u32) {
    N: u1 = 0,
    _1: u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const IKEEXT_RESERVED_AUTH_DISABLE_INITIATOR_TOKEN_GENERATION = IKEEXT_RESERVED_AUTHENTICATION_FLAGS{ .N = 1 };

pub const IKEEXT_EAP_AUTHENTICATION_FLAGS = packed struct(u32) {
    LOCAL_AUTH_ONLY: u1 = 0,
    REMOTE_AUTH_ONLY: u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const IKEEXT_EAP_FLAG_LOCAL_AUTH_ONLY = IKEEXT_EAP_AUTHENTICATION_FLAGS{ .LOCAL_AUTH_ONLY = 1 };
pub const IKEEXT_EAP_FLAG_REMOTE_AUTH_ONLY = IKEEXT_EAP_AUTHENTICATION_FLAGS{ .REMOTE_AUTH_ONLY = 1 };

pub const FWPM_FILTER_FLAGS = packed struct(u32) {
    PERSISTENT: u1 = 0,
    BOOTTIME: u1 = 0,
    HAS_PROVIDER_CONTEXT: u1 = 0,
    CLEAR_ACTION_RIGHT: u1 = 0,
    PERMIT_IF_CALLOUT_UNREGISTERED: u1 = 0,
    DISABLED: u1 = 0,
    INDEXED: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const FWPM_FILTER_FLAG_NONE = FWPM_FILTER_FLAGS{ };
pub const FWPM_FILTER_FLAG_PERSISTENT = FWPM_FILTER_FLAGS{ .PERSISTENT = 1 };
pub const FWPM_FILTER_FLAG_BOOTTIME = FWPM_FILTER_FLAGS{ .BOOTTIME = 1 };
pub const FWPM_FILTER_FLAG_HAS_PROVIDER_CONTEXT = FWPM_FILTER_FLAGS{ .HAS_PROVIDER_CONTEXT = 1 };
pub const FWPM_FILTER_FLAG_CLEAR_ACTION_RIGHT = FWPM_FILTER_FLAGS{ .CLEAR_ACTION_RIGHT = 1 };
pub const FWPM_FILTER_FLAG_PERMIT_IF_CALLOUT_UNREGISTERED = FWPM_FILTER_FLAGS{ .PERMIT_IF_CALLOUT_UNREGISTERED = 1 };
pub const FWPM_FILTER_FLAG_DISABLED = FWPM_FILTER_FLAGS{ .DISABLED = 1 };
pub const FWPM_FILTER_FLAG_INDEXED = FWPM_FILTER_FLAGS{ .INDEXED = 1 };

pub const FWP_DIRECTION = enum(i32) {
    OUTBOUND = 0,
    INBOUND = 1,
    MAX = 2,
};
pub const FWP_DIRECTION_OUTBOUND = FWP_DIRECTION.OUTBOUND;
pub const FWP_DIRECTION_INBOUND = FWP_DIRECTION.INBOUND;
pub const FWP_DIRECTION_MAX = FWP_DIRECTION.MAX;

pub const FWP_IP_VERSION = enum(i32) {
    V4 = 0,
    V6 = 1,
    NONE = 2,
    MAX = 3,
};
pub const FWP_IP_VERSION_V4 = FWP_IP_VERSION.V4;
pub const FWP_IP_VERSION_V6 = FWP_IP_VERSION.V6;
pub const FWP_IP_VERSION_NONE = FWP_IP_VERSION.NONE;
pub const FWP_IP_VERSION_MAX = FWP_IP_VERSION.MAX;

pub const FWP_AF = enum(i32) {
    INET = 0,
    INET6 = 1,
    ETHER = 2,
    NONE = 3,
};
pub const FWP_AF_INET = FWP_AF.INET;
pub const FWP_AF_INET6 = FWP_AF.INET6;
pub const FWP_AF_ETHER = FWP_AF.ETHER;
pub const FWP_AF_NONE = FWP_AF.NONE;

pub const FWP_ETHER_ENCAP_METHOD = enum(i32) {
    ETHER_V2 = 0,
    SNAP = 1,
    SNAP_W_OUI_ZERO = 3,
};
pub const FWP_ETHER_ENCAP_METHOD_ETHER_V2 = FWP_ETHER_ENCAP_METHOD.ETHER_V2;
pub const FWP_ETHER_ENCAP_METHOD_SNAP = FWP_ETHER_ENCAP_METHOD.SNAP;
pub const FWP_ETHER_ENCAP_METHOD_SNAP_W_OUI_ZERO = FWP_ETHER_ENCAP_METHOD.SNAP_W_OUI_ZERO;

pub const FWP_DATA_TYPE = enum(i32) {
    EMPTY = 0,
    UINT8 = 1,
    UINT16 = 2,
    UINT32 = 3,
    UINT64 = 4,
    INT8 = 5,
    INT16 = 6,
    INT32 = 7,
    INT64 = 8,
    FLOAT = 9,
    DOUBLE = 10,
    BYTE_ARRAY16_TYPE = 11,
    BYTE_BLOB_TYPE = 12,
    SID = 13,
    SECURITY_DESCRIPTOR_TYPE = 14,
    TOKEN_INFORMATION_TYPE = 15,
    TOKEN_ACCESS_INFORMATION_TYPE = 16,
    UNICODE_STRING_TYPE = 17,
    BYTE_ARRAY6_TYPE = 18,
    SINGLE_DATA_TYPE_MAX = 255,
    V4_ADDR_MASK = 256,
    V6_ADDR_MASK = 257,
    RANGE_TYPE = 258,
    DATA_TYPE_MAX = 259,
};
pub const FWP_EMPTY = FWP_DATA_TYPE.EMPTY;
pub const FWP_UINT8 = FWP_DATA_TYPE.UINT8;
pub const FWP_UINT16 = FWP_DATA_TYPE.UINT16;
pub const FWP_UINT32 = FWP_DATA_TYPE.UINT32;
pub const FWP_UINT64 = FWP_DATA_TYPE.UINT64;
pub const FWP_INT8 = FWP_DATA_TYPE.INT8;
pub const FWP_INT16 = FWP_DATA_TYPE.INT16;
pub const FWP_INT32 = FWP_DATA_TYPE.INT32;
pub const FWP_INT64 = FWP_DATA_TYPE.INT64;
pub const FWP_FLOAT = FWP_DATA_TYPE.FLOAT;
pub const FWP_DOUBLE = FWP_DATA_TYPE.DOUBLE;
pub const FWP_BYTE_ARRAY16_TYPE = FWP_DATA_TYPE.BYTE_ARRAY16_TYPE;
pub const FWP_BYTE_BLOB_TYPE = FWP_DATA_TYPE.BYTE_BLOB_TYPE;
pub const FWP_SID = FWP_DATA_TYPE.SID;
pub const FWP_SECURITY_DESCRIPTOR_TYPE = FWP_DATA_TYPE.SECURITY_DESCRIPTOR_TYPE;
pub const FWP_TOKEN_INFORMATION_TYPE = FWP_DATA_TYPE.TOKEN_INFORMATION_TYPE;
pub const FWP_TOKEN_ACCESS_INFORMATION_TYPE = FWP_DATA_TYPE.TOKEN_ACCESS_INFORMATION_TYPE;
pub const FWP_UNICODE_STRING_TYPE = FWP_DATA_TYPE.UNICODE_STRING_TYPE;
pub const FWP_BYTE_ARRAY6_TYPE = FWP_DATA_TYPE.BYTE_ARRAY6_TYPE;
pub const FWP_SINGLE_DATA_TYPE_MAX = FWP_DATA_TYPE.SINGLE_DATA_TYPE_MAX;
pub const FWP_V4_ADDR_MASK = FWP_DATA_TYPE.V4_ADDR_MASK;
pub const FWP_V6_ADDR_MASK = FWP_DATA_TYPE.V6_ADDR_MASK;
pub const FWP_RANGE_TYPE = FWP_DATA_TYPE.RANGE_TYPE;
pub const FWP_DATA_TYPE_MAX = FWP_DATA_TYPE.DATA_TYPE_MAX;

pub const FWP_BYTE_ARRAY6 = extern struct {
    byteArray6: [6]u8,
};

pub const FWP_BYTE_ARRAY16 = extern struct {
    byteArray16: [16]u8,
};

pub const FWP_BYTE_BLOB = extern struct {
    size: u32,
    data: ?*u8,
};

pub const FWP_TOKEN_INFORMATION = extern struct {
    sidCount: u32,
    sids: ?*SID_AND_ATTRIBUTES,
    restrictedSidCount: u32,
    restrictedSids: ?*SID_AND_ATTRIBUTES,
};

pub const FWP_VALUE0 = extern struct {
    type: FWP_DATA_TYPE,
    Anonymous: extern union {
        uint8: u8,
        uint16: u16,
        uint32: u32,
        uint64: ?*u64,
        int8: i8,
        int16: i16,
        int32: i32,
        int64: ?*i64,
        float32: f32,
        double64: ?*f64,
        byteArray16: ?*FWP_BYTE_ARRAY16,
        byteBlob: ?*FWP_BYTE_BLOB,
        sid: ?*SID,
        sd: ?*FWP_BYTE_BLOB,
        tokenInformation: ?*FWP_TOKEN_INFORMATION,
        tokenAccessInformation: ?*FWP_BYTE_BLOB,
        unicodeString: ?PWSTR,
        byteArray6: ?*FWP_BYTE_ARRAY6,
    },
};

pub const FWP_MATCH_TYPE = enum(i32) {
    EQUAL = 0,
    GREATER = 1,
    LESS = 2,
    GREATER_OR_EQUAL = 3,
    LESS_OR_EQUAL = 4,
    RANGE = 5,
    FLAGS_ALL_SET = 6,
    FLAGS_ANY_SET = 7,
    FLAGS_NONE_SET = 8,
    EQUAL_CASE_INSENSITIVE = 9,
    NOT_EQUAL = 10,
    PREFIX = 11,
    NOT_PREFIX = 12,
    TYPE_MAX = 13,
};
pub const FWP_MATCH_EQUAL = FWP_MATCH_TYPE.EQUAL;
pub const FWP_MATCH_GREATER = FWP_MATCH_TYPE.GREATER;
pub const FWP_MATCH_LESS = FWP_MATCH_TYPE.LESS;
pub const FWP_MATCH_GREATER_OR_EQUAL = FWP_MATCH_TYPE.GREATER_OR_EQUAL;
pub const FWP_MATCH_LESS_OR_EQUAL = FWP_MATCH_TYPE.LESS_OR_EQUAL;
pub const FWP_MATCH_RANGE = FWP_MATCH_TYPE.RANGE;
pub const FWP_MATCH_FLAGS_ALL_SET = FWP_MATCH_TYPE.FLAGS_ALL_SET;
pub const FWP_MATCH_FLAGS_ANY_SET = FWP_MATCH_TYPE.FLAGS_ANY_SET;
pub const FWP_MATCH_FLAGS_NONE_SET = FWP_MATCH_TYPE.FLAGS_NONE_SET;
pub const FWP_MATCH_EQUAL_CASE_INSENSITIVE = FWP_MATCH_TYPE.EQUAL_CASE_INSENSITIVE;
pub const FWP_MATCH_NOT_EQUAL = FWP_MATCH_TYPE.NOT_EQUAL;
pub const FWP_MATCH_PREFIX = FWP_MATCH_TYPE.PREFIX;
pub const FWP_MATCH_NOT_PREFIX = FWP_MATCH_TYPE.NOT_PREFIX;
pub const FWP_MATCH_TYPE_MAX = FWP_MATCH_TYPE.TYPE_MAX;

pub const FWP_V4_ADDR_AND_MASK = extern struct {
    addr: u32,
    mask: u32,
};

pub const FWP_V6_ADDR_AND_MASK = extern struct {
    addr: [16]u8,
    prefixLength: u8,
};

pub const FWP_RANGE0 = extern struct {
    valueLow: FWP_VALUE0,
    valueHigh: FWP_VALUE0,
};

pub const FWP_CONDITION_VALUE0 = extern struct {
    type: FWP_DATA_TYPE,
    Anonymous: extern union {
        uint8: u8,
        uint16: u16,
        uint32: u32,
        uint64: ?*u64,
        int8: i8,
        int16: i16,
        int32: i32,
        int64: ?*i64,
        float32: f32,
        double64: ?*f64,
        byteArray16: ?*FWP_BYTE_ARRAY16,
        byteBlob: ?*FWP_BYTE_BLOB,
        sid: ?*SID,
        sd: ?*FWP_BYTE_BLOB,
        tokenInformation: ?*FWP_TOKEN_INFORMATION,
        tokenAccessInformation: ?*FWP_BYTE_BLOB,
        unicodeString: ?PWSTR,
        byteArray6: ?*FWP_BYTE_ARRAY6,
        v4AddrMask: ?*FWP_V4_ADDR_AND_MASK,
        v6AddrMask: ?*FWP_V6_ADDR_AND_MASK,
        rangeValue: ?*FWP_RANGE0,
    },
};

pub const FWP_CLASSIFY_OPTION_TYPE = enum(i32) {
    MULTICAST_STATE = 0,
    LOOSE_SOURCE_MAPPING = 1,
    UNICAST_LIFETIME = 2,
    MCAST_BCAST_LIFETIME = 3,
    SECURE_SOCKET_SECURITY_FLAGS = 4,
    SECURE_SOCKET_AUTHIP_MM_POLICY_KEY = 5,
    SECURE_SOCKET_AUTHIP_QM_POLICY_KEY = 6,
    LOCAL_ONLY_MAPPING = 7,
    MAX = 8,
};
pub const FWP_CLASSIFY_OPTION_MULTICAST_STATE = FWP_CLASSIFY_OPTION_TYPE.MULTICAST_STATE;
pub const FWP_CLASSIFY_OPTION_LOOSE_SOURCE_MAPPING = FWP_CLASSIFY_OPTION_TYPE.LOOSE_SOURCE_MAPPING;
pub const FWP_CLASSIFY_OPTION_UNICAST_LIFETIME = FWP_CLASSIFY_OPTION_TYPE.UNICAST_LIFETIME;
pub const FWP_CLASSIFY_OPTION_MCAST_BCAST_LIFETIME = FWP_CLASSIFY_OPTION_TYPE.MCAST_BCAST_LIFETIME;
pub const FWP_CLASSIFY_OPTION_SECURE_SOCKET_SECURITY_FLAGS = FWP_CLASSIFY_OPTION_TYPE.SECURE_SOCKET_SECURITY_FLAGS;
pub const FWP_CLASSIFY_OPTION_SECURE_SOCKET_AUTHIP_MM_POLICY_KEY = FWP_CLASSIFY_OPTION_TYPE.SECURE_SOCKET_AUTHIP_MM_POLICY_KEY;
pub const FWP_CLASSIFY_OPTION_SECURE_SOCKET_AUTHIP_QM_POLICY_KEY = FWP_CLASSIFY_OPTION_TYPE.SECURE_SOCKET_AUTHIP_QM_POLICY_KEY;
pub const FWP_CLASSIFY_OPTION_LOCAL_ONLY_MAPPING = FWP_CLASSIFY_OPTION_TYPE.LOCAL_ONLY_MAPPING;
pub const FWP_CLASSIFY_OPTION_MAX = FWP_CLASSIFY_OPTION_TYPE.MAX;

pub const FWP_VSWITCH_NETWORK_TYPE = enum(i32) {
    UNKNOWN = 0,
    PRIVATE = 1,
    INTERNAL = 2,
    EXTERNAL = 3,
};
pub const FWP_VSWITCH_NETWORK_TYPE_UNKNOWN = FWP_VSWITCH_NETWORK_TYPE.UNKNOWN;
pub const FWP_VSWITCH_NETWORK_TYPE_PRIVATE = FWP_VSWITCH_NETWORK_TYPE.PRIVATE;
pub const FWP_VSWITCH_NETWORK_TYPE_INTERNAL = FWP_VSWITCH_NETWORK_TYPE.INTERNAL;
pub const FWP_VSWITCH_NETWORK_TYPE_EXTERNAL = FWP_VSWITCH_NETWORK_TYPE.EXTERNAL;

pub const FWP_FILTER_ENUM_TYPE = enum(i32) {
    FULLY_CONTAINED = 0,
    OVERLAPPING = 1,
    TYPE_MAX = 2,
};
pub const FWP_FILTER_ENUM_FULLY_CONTAINED = FWP_FILTER_ENUM_TYPE.FULLY_CONTAINED;
pub const FWP_FILTER_ENUM_OVERLAPPING = FWP_FILTER_ENUM_TYPE.OVERLAPPING;
pub const FWP_FILTER_ENUM_TYPE_MAX = FWP_FILTER_ENUM_TYPE.TYPE_MAX;

pub const FWPM_DISPLAY_DATA0 = extern struct {
    name: ?PWSTR,
    description: ?PWSTR,
};

pub const IPSEC_VIRTUAL_IF_TUNNEL_INFO0 = extern struct {
    virtualIfTunnelId: u64,
    trafficSelectorId: u64,
};

pub const IKEEXT_KEY_MODULE_TYPE = enum(i32) {
    IKE = 0,
    AUTHIP = 1,
    IKEV2 = 2,
    MAX = 3,
};
pub const IKEEXT_KEY_MODULE_IKE = IKEEXT_KEY_MODULE_TYPE.IKE;
pub const IKEEXT_KEY_MODULE_AUTHIP = IKEEXT_KEY_MODULE_TYPE.AUTHIP;
pub const IKEEXT_KEY_MODULE_IKEV2 = IKEEXT_KEY_MODULE_TYPE.IKEV2;
pub const IKEEXT_KEY_MODULE_MAX = IKEEXT_KEY_MODULE_TYPE.MAX;

pub const IKEEXT_AUTHENTICATION_METHOD_TYPE = enum(i32) {
    PRESHARED_KEY = 0,
    CERTIFICATE = 1,
    KERBEROS = 2,
    ANONYMOUS = 3,
    SSL = 4,
    NTLM_V2 = 5,
    IPV6_CGA = 6,
    CERTIFICATE_ECDSA_P256 = 7,
    CERTIFICATE_ECDSA_P384 = 8,
    SSL_ECDSA_P256 = 9,
    SSL_ECDSA_P384 = 10,
    EAP = 11,
    RESERVED = 12,
    AUTHENTICATION_METHOD_TYPE_MAX = 13,
};
pub const IKEEXT_PRESHARED_KEY = IKEEXT_AUTHENTICATION_METHOD_TYPE.PRESHARED_KEY;
pub const IKEEXT_CERTIFICATE = IKEEXT_AUTHENTICATION_METHOD_TYPE.CERTIFICATE;
pub const IKEEXT_KERBEROS = IKEEXT_AUTHENTICATION_METHOD_TYPE.KERBEROS;
pub const IKEEXT_ANONYMOUS = IKEEXT_AUTHENTICATION_METHOD_TYPE.ANONYMOUS;
pub const IKEEXT_SSL = IKEEXT_AUTHENTICATION_METHOD_TYPE.SSL;
pub const IKEEXT_NTLM_V2 = IKEEXT_AUTHENTICATION_METHOD_TYPE.NTLM_V2;
pub const IKEEXT_IPV6_CGA = IKEEXT_AUTHENTICATION_METHOD_TYPE.IPV6_CGA;
pub const IKEEXT_CERTIFICATE_ECDSA_P256 = IKEEXT_AUTHENTICATION_METHOD_TYPE.CERTIFICATE_ECDSA_P256;
pub const IKEEXT_CERTIFICATE_ECDSA_P384 = IKEEXT_AUTHENTICATION_METHOD_TYPE.CERTIFICATE_ECDSA_P384;
pub const IKEEXT_SSL_ECDSA_P256 = IKEEXT_AUTHENTICATION_METHOD_TYPE.SSL_ECDSA_P256;
pub const IKEEXT_SSL_ECDSA_P384 = IKEEXT_AUTHENTICATION_METHOD_TYPE.SSL_ECDSA_P384;
pub const IKEEXT_EAP = IKEEXT_AUTHENTICATION_METHOD_TYPE.EAP;
pub const IKEEXT_RESERVED = IKEEXT_AUTHENTICATION_METHOD_TYPE.RESERVED;
pub const IKEEXT_AUTHENTICATION_METHOD_TYPE_MAX = IKEEXT_AUTHENTICATION_METHOD_TYPE.AUTHENTICATION_METHOD_TYPE_MAX;

pub const IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE = enum(i32) {
    NONE = 0,
    SOCKET_PRINCIPAL = 1,
    MAX = 2,
};
pub const IKEEXT_IMPERSONATION_NONE = IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE.NONE;
pub const IKEEXT_IMPERSONATION_SOCKET_PRINCIPAL = IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE.SOCKET_PRINCIPAL;
pub const IKEEXT_IMPERSONATION_MAX = IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE.MAX;

pub const IKEEXT_PRESHARED_KEY_AUTHENTICATION0 = extern struct {
    presharedKey: FWP_BYTE_BLOB,
};

pub const IKEEXT_PRESHARED_KEY_AUTHENTICATION1 = extern struct {
    presharedKey: FWP_BYTE_BLOB,
    flags: IKEEXT_PRESHARED_KEY_AUTHENTICATION_FLAGS,
};

pub const IKEEXT_CERT_ROOT_CONFIG0 = extern struct {
    certData: FWP_BYTE_BLOB,
    flags: IKEEXT_CERT_FLAGS,
};

pub const IKEEXT_CERT_CONFIG_TYPE = enum(i32) {
    EXPLICIT_TRUST_LIST = 0,
    ENTERPRISE_STORE = 1,
    TRUSTED_ROOT_STORE = 2,
    UNSPECIFIED = 3,
    TYPE_MAX = 4,
};
pub const IKEEXT_CERT_CONFIG_EXPLICIT_TRUST_LIST = IKEEXT_CERT_CONFIG_TYPE.EXPLICIT_TRUST_LIST;
pub const IKEEXT_CERT_CONFIG_ENTERPRISE_STORE = IKEEXT_CERT_CONFIG_TYPE.ENTERPRISE_STORE;
pub const IKEEXT_CERT_CONFIG_TRUSTED_ROOT_STORE = IKEEXT_CERT_CONFIG_TYPE.TRUSTED_ROOT_STORE;
pub const IKEEXT_CERT_CONFIG_UNSPECIFIED = IKEEXT_CERT_CONFIG_TYPE.UNSPECIFIED;
pub const IKEEXT_CERT_CONFIG_TYPE_MAX = IKEEXT_CERT_CONFIG_TYPE.TYPE_MAX;

pub const IKEEXT_CERTIFICATE_AUTHENTICATION0 = extern struct {
    inboundConfigType: IKEEXT_CERT_CONFIG_TYPE,
    Anonymous1: extern union {
        Anonymous: extern struct {
            inboundRootArraySize: u32,
            inboundRootArray: ?*IKEEXT_CERT_ROOT_CONFIG0,
        },
        inboundEnterpriseStoreConfig: ?*IKEEXT_CERT_ROOT_CONFIG0,
        inboundTrustedRootStoreConfig: ?*IKEEXT_CERT_ROOT_CONFIG0,
    },
    outboundConfigType: IKEEXT_CERT_CONFIG_TYPE,
    Anonymous2: extern union {
        Anonymous: extern struct {
            outboundRootArraySize: u32,
            outboundRootArray: ?*IKEEXT_CERT_ROOT_CONFIG0,
        },
        outboundEnterpriseStoreConfig: ?*IKEEXT_CERT_ROOT_CONFIG0,
        outboundTrustedRootStoreConfig: ?*IKEEXT_CERT_ROOT_CONFIG0,
    },
    flags: IKEEXT_CERT_AUTH,
};

pub const IKEEXT_CERTIFICATE_AUTHENTICATION1 = extern struct {
    inboundConfigType: IKEEXT_CERT_CONFIG_TYPE,
    Anonymous1: extern union {
        Anonymous: extern struct {
            inboundRootArraySize: u32,
            inboundRootArray: ?*IKEEXT_CERT_ROOT_CONFIG0,
        },
        inboundEnterpriseStoreConfig: ?*IKEEXT_CERT_ROOT_CONFIG0,
        inboundTrustedRootStoreConfig: ?*IKEEXT_CERT_ROOT_CONFIG0,
    },
    outboundConfigType: IKEEXT_CERT_CONFIG_TYPE,
    Anonymous2: extern union {
        Anonymous: extern struct {
            outboundRootArraySize: u32,
            outboundRootArray: ?*IKEEXT_CERT_ROOT_CONFIG0,
        },
        outboundEnterpriseStoreConfig: ?*IKEEXT_CERT_ROOT_CONFIG0,
        outboundTrustedRootStoreConfig: ?*IKEEXT_CERT_ROOT_CONFIG0,
    },
    flags: IKEEXT_CERT_AUTH,
    localCertLocationUrl: FWP_BYTE_BLOB,
};

pub const IKEEXT_CERT_CRITERIA_NAME_TYPE = enum(i32) {
    DNS = 0,
    UPN = 1,
    RFC822 = 2,
    CN = 3,
    OU = 4,
    O = 5,
    DC = 6,
    NAME_TYPE_MAX = 7,
};
pub const IKEEXT_CERT_CRITERIA_DNS = IKEEXT_CERT_CRITERIA_NAME_TYPE.DNS;
pub const IKEEXT_CERT_CRITERIA_UPN = IKEEXT_CERT_CRITERIA_NAME_TYPE.UPN;
pub const IKEEXT_CERT_CRITERIA_RFC822 = IKEEXT_CERT_CRITERIA_NAME_TYPE.RFC822;
pub const IKEEXT_CERT_CRITERIA_CN = IKEEXT_CERT_CRITERIA_NAME_TYPE.CN;
pub const IKEEXT_CERT_CRITERIA_OU = IKEEXT_CERT_CRITERIA_NAME_TYPE.OU;
pub const IKEEXT_CERT_CRITERIA_O = IKEEXT_CERT_CRITERIA_NAME_TYPE.O;
pub const IKEEXT_CERT_CRITERIA_DC = IKEEXT_CERT_CRITERIA_NAME_TYPE.DC;
pub const IKEEXT_CERT_CRITERIA_NAME_TYPE_MAX = IKEEXT_CERT_CRITERIA_NAME_TYPE.NAME_TYPE_MAX;

pub const IKEEXT_CERT_EKUS0 = extern struct {
    numEku: u32,
    eku: ?*?PSTR,
};

pub const IKEEXT_CERT_NAME0 = extern struct {
    nameType: IKEEXT_CERT_CRITERIA_NAME_TYPE,
    certName: ?PWSTR,
};

pub const IKEEXT_CERTIFICATE_CRITERIA0 = extern struct {
    certData: FWP_BYTE_BLOB,
    certHash: FWP_BYTE_BLOB,
    eku: ?*IKEEXT_CERT_EKUS0,
    name: ?*IKEEXT_CERT_NAME0,
    flags: u32,
};

pub const IKEEXT_CERTIFICATE_AUTHENTICATION2 = extern struct {
    inboundConfigType: IKEEXT_CERT_CONFIG_TYPE,
    Anonymous1: extern union {
        Anonymous1: extern struct {
            inboundRootArraySize: u32,
            inboundRootCriteria: ?*IKEEXT_CERTIFICATE_CRITERIA0,
        },
        Anonymous2: extern struct {
            inboundEnterpriseStoreArraySize: u32,
            inboundEnterpriseStoreCriteria: ?*IKEEXT_CERTIFICATE_CRITERIA0,
        },
        Anonymous3: extern struct {
            inboundRootStoreArraySize: u32,
            inboundTrustedRootStoreCriteria: ?*IKEEXT_CERTIFICATE_CRITERIA0,
        },
    },
    outboundConfigType: IKEEXT_CERT_CONFIG_TYPE,
    Anonymous2: extern union {
        Anonymous1: extern struct {
            outboundRootArraySize: u32,
            outboundRootCriteria: ?*IKEEXT_CERTIFICATE_CRITERIA0,
        },
        Anonymous2: extern struct {
            outboundEnterpriseStoreArraySize: u32,
            outboundEnterpriseStoreCriteria: ?*IKEEXT_CERTIFICATE_CRITERIA0,
        },
        Anonymous3: extern struct {
            outboundRootStoreArraySize: u32,
            outboundTrustedRootStoreCriteria: ?*IKEEXT_CERTIFICATE_CRITERIA0,
        },
    },
    flags: IKEEXT_CERT_AUTH,
    localCertLocationUrl: FWP_BYTE_BLOB,
};

pub const IKEEXT_IPV6_CGA_AUTHENTICATION0 = extern struct {
    keyContainerName: ?PWSTR,
    cspName: ?PWSTR,
    cspType: u32,
    cgaModifier: FWP_BYTE_ARRAY16,
    cgaCollisionCount: u8,
};

pub const IKEEXT_KERBEROS_AUTHENTICATION0 = extern struct {
    flags: IKEEXT_KERBEROS_AUTHENTICATION_FLAGS,
};

pub const IKEEXT_KERBEROS_AUTHENTICATION1 = extern struct {
    flags: IKEEXT_KERBEROS_AUTHENTICATION_FLAGS,
    proxyServer: ?PWSTR,
};

pub const IKEEXT_RESERVED_AUTHENTICATION0 = extern struct {
    flags: IKEEXT_RESERVED_AUTHENTICATION_FLAGS,
};

pub const IKEEXT_NTLM_V2_AUTHENTICATION0 = extern struct {
    flags: u32,
};

pub const IKEEXT_EAP_AUTHENTICATION0 = extern struct {
    flags: IKEEXT_EAP_AUTHENTICATION_FLAGS,
};

pub const IKEEXT_AUTHENTICATION_METHOD0 = extern struct {
    authenticationMethodType: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    Anonymous: extern union {
        presharedKeyAuthentication: IKEEXT_PRESHARED_KEY_AUTHENTICATION0,
        certificateAuthentication: IKEEXT_CERTIFICATE_AUTHENTICATION0,
        kerberosAuthentication: IKEEXT_KERBEROS_AUTHENTICATION0,
        ntlmV2Authentication: IKEEXT_NTLM_V2_AUTHENTICATION0,
        sslAuthentication: IKEEXT_CERTIFICATE_AUTHENTICATION0,
        cgaAuthentication: IKEEXT_IPV6_CGA_AUTHENTICATION0,
    },
};

pub const IKEEXT_AUTHENTICATION_METHOD1 = extern struct {
    authenticationMethodType: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    Anonymous: extern union {
        presharedKeyAuthentication: IKEEXT_PRESHARED_KEY_AUTHENTICATION1,
        certificateAuthentication: IKEEXT_CERTIFICATE_AUTHENTICATION1,
        kerberosAuthentication: IKEEXT_KERBEROS_AUTHENTICATION0,
        ntlmV2Authentication: IKEEXT_NTLM_V2_AUTHENTICATION0,
        sslAuthentication: IKEEXT_CERTIFICATE_AUTHENTICATION1,
        cgaAuthentication: IKEEXT_IPV6_CGA_AUTHENTICATION0,
        eapAuthentication: IKEEXT_EAP_AUTHENTICATION0,
    },
};

pub const IKEEXT_AUTHENTICATION_METHOD2 = extern struct {
    authenticationMethodType: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    Anonymous: extern union {
        presharedKeyAuthentication: IKEEXT_PRESHARED_KEY_AUTHENTICATION1,
        certificateAuthentication: IKEEXT_CERTIFICATE_AUTHENTICATION2,
        kerberosAuthentication: IKEEXT_KERBEROS_AUTHENTICATION1,
        reservedAuthentication: IKEEXT_RESERVED_AUTHENTICATION0,
        ntlmV2Authentication: IKEEXT_NTLM_V2_AUTHENTICATION0,
        sslAuthentication: IKEEXT_CERTIFICATE_AUTHENTICATION2,
        cgaAuthentication: IKEEXT_IPV6_CGA_AUTHENTICATION0,
        eapAuthentication: IKEEXT_EAP_AUTHENTICATION0,
    },
};

pub const IKEEXT_CIPHER_TYPE = enum(i32) {
    DES = 0,
    @"3DES" = 1,
    AES_128 = 2,
    AES_192 = 3,
    AES_256 = 4,
    AES_GCM_128_16ICV = 5,
    AES_GCM_256_16ICV = 6,
    TYPE_MAX = 7,
};
pub const IKEEXT_CIPHER_DES = IKEEXT_CIPHER_TYPE.DES;
pub const IKEEXT_CIPHER_3DES = IKEEXT_CIPHER_TYPE.@"3DES";
pub const IKEEXT_CIPHER_AES_128 = IKEEXT_CIPHER_TYPE.AES_128;
pub const IKEEXT_CIPHER_AES_192 = IKEEXT_CIPHER_TYPE.AES_192;
pub const IKEEXT_CIPHER_AES_256 = IKEEXT_CIPHER_TYPE.AES_256;
pub const IKEEXT_CIPHER_AES_GCM_128_16ICV = IKEEXT_CIPHER_TYPE.AES_GCM_128_16ICV;
pub const IKEEXT_CIPHER_AES_GCM_256_16ICV = IKEEXT_CIPHER_TYPE.AES_GCM_256_16ICV;
pub const IKEEXT_CIPHER_TYPE_MAX = IKEEXT_CIPHER_TYPE.TYPE_MAX;

pub const IKEEXT_CIPHER_ALGORITHM0 = extern struct {
    algoIdentifier: IKEEXT_CIPHER_TYPE,
    keyLen: u32,
    rounds: u32,
};

pub const IKEEXT_INTEGRITY_TYPE = enum(i32) {
    MD5 = 0,
    SHA1 = 1,
    SHA_256 = 2,
    SHA_384 = 3,
    TYPE_MAX = 4,
};
pub const IKEEXT_INTEGRITY_MD5 = IKEEXT_INTEGRITY_TYPE.MD5;
pub const IKEEXT_INTEGRITY_SHA1 = IKEEXT_INTEGRITY_TYPE.SHA1;
pub const IKEEXT_INTEGRITY_SHA_256 = IKEEXT_INTEGRITY_TYPE.SHA_256;
pub const IKEEXT_INTEGRITY_SHA_384 = IKEEXT_INTEGRITY_TYPE.SHA_384;
pub const IKEEXT_INTEGRITY_TYPE_MAX = IKEEXT_INTEGRITY_TYPE.TYPE_MAX;

pub const IKEEXT_INTEGRITY_ALGORITHM0 = extern struct {
    algoIdentifier: IKEEXT_INTEGRITY_TYPE,
};

pub const IKEEXT_DH_GROUP = enum(i32) {
    GROUP_NONE = 0,
    GROUP_1 = 1,
    GROUP_2 = 2,
    GROUP_14 = 3,
    ECP_256 = 4,
    ECP_384 = 5,
    GROUP_24 = 6,
    GROUP_MAX = 7,
    pub const GROUP_2048 = .GROUP_14;
};
pub const IKEEXT_DH_GROUP_NONE = IKEEXT_DH_GROUP.GROUP_NONE;
pub const IKEEXT_DH_GROUP_1 = IKEEXT_DH_GROUP.GROUP_1;
pub const IKEEXT_DH_GROUP_2 = IKEEXT_DH_GROUP.GROUP_2;
pub const IKEEXT_DH_GROUP_14 = IKEEXT_DH_GROUP.GROUP_14;
pub const IKEEXT_DH_GROUP_2048 = IKEEXT_DH_GROUP.GROUP_14;
pub const IKEEXT_DH_ECP_256 = IKEEXT_DH_GROUP.ECP_256;
pub const IKEEXT_DH_ECP_384 = IKEEXT_DH_GROUP.ECP_384;
pub const IKEEXT_DH_GROUP_24 = IKEEXT_DH_GROUP.GROUP_24;
pub const IKEEXT_DH_GROUP_MAX = IKEEXT_DH_GROUP.GROUP_MAX;

pub const IKEEXT_PROPOSAL0 = extern struct {
    cipherAlgorithm: IKEEXT_CIPHER_ALGORITHM0,
    integrityAlgorithm: IKEEXT_INTEGRITY_ALGORITHM0,
    maxLifetimeSeconds: u32,
    dhGroup: IKEEXT_DH_GROUP,
    quickModeLimit: u32,
};

pub const IKEEXT_POLICY0 = extern struct {
    softExpirationTime: u32,
    numAuthenticationMethods: u32,
    authenticationMethods: ?*IKEEXT_AUTHENTICATION_METHOD0,
    initiatorImpersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
    numIkeProposals: u32,
    ikeProposals: ?*IKEEXT_PROPOSAL0,
    flags: IKEEXT_POLICY_FLAG,
    maxDynamicFilters: u32,
};

pub const IKEEXT_POLICY1 = extern struct {
    softExpirationTime: u32,
    numAuthenticationMethods: u32,
    authenticationMethods: ?*IKEEXT_AUTHENTICATION_METHOD1,
    initiatorImpersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
    numIkeProposals: u32,
    ikeProposals: ?*IKEEXT_PROPOSAL0,
    flags: IKEEXT_POLICY_FLAG,
    maxDynamicFilters: u32,
    retransmitDurationSecs: u32,
};

pub const IKEEXT_POLICY2 = extern struct {
    softExpirationTime: u32,
    numAuthenticationMethods: u32,
    authenticationMethods: ?*IKEEXT_AUTHENTICATION_METHOD2,
    initiatorImpersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
    numIkeProposals: u32,
    ikeProposals: ?*IKEEXT_PROPOSAL0,
    flags: IKEEXT_POLICY_FLAG,
    maxDynamicFilters: u32,
    retransmitDurationSecs: u32,
};

pub const IKEEXT_EM_POLICY0 = extern struct {
    numAuthenticationMethods: u32,
    authenticationMethods: ?*IKEEXT_AUTHENTICATION_METHOD0,
    initiatorImpersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
};

pub const IKEEXT_EM_POLICY1 = extern struct {
    numAuthenticationMethods: u32,
    authenticationMethods: ?*IKEEXT_AUTHENTICATION_METHOD1,
    initiatorImpersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
};

pub const IKEEXT_EM_POLICY2 = extern struct {
    numAuthenticationMethods: u32,
    authenticationMethods: ?*IKEEXT_AUTHENTICATION_METHOD2,
    initiatorImpersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
};

pub const IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0 = extern struct {
    currentActiveMainModes: u32,
    totalMainModesStarted: u32,
    totalSuccessfulMainModes: u32,
    totalFailedMainModes: u32,
    totalResponderMainModes: u32,
    currentNewResponderMainModes: u32,
    currentActiveQuickModes: u32,
    totalQuickModesStarted: u32,
    totalSuccessfulQuickModes: u32,
    totalFailedQuickModes: u32,
    totalAcquires: u32,
    totalReinitAcquires: u32,
    currentActiveExtendedModes: u32,
    totalExtendedModesStarted: u32,
    totalSuccessfulExtendedModes: u32,
    totalFailedExtendedModes: u32,
    totalImpersonationExtendedModes: u32,
    totalImpersonationMainModes: u32,
};

pub const IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1 = extern struct {
    currentActiveMainModes: u32,
    totalMainModesStarted: u32,
    totalSuccessfulMainModes: u32,
    totalFailedMainModes: u32,
    totalResponderMainModes: u32,
    currentNewResponderMainModes: u32,
    currentActiveQuickModes: u32,
    totalQuickModesStarted: u32,
    totalSuccessfulQuickModes: u32,
    totalFailedQuickModes: u32,
    totalAcquires: u32,
    totalReinitAcquires: u32,
    currentActiveExtendedModes: u32,
    totalExtendedModesStarted: u32,
    totalSuccessfulExtendedModes: u32,
    totalFailedExtendedModes: u32,
    totalImpersonationExtendedModes: u32,
    totalImpersonationMainModes: u32,
};

pub const IKEEXT_KEYMODULE_STATISTICS0 = extern struct {
    v4Statistics: IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0,
    v6Statistics: IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0,
    errorFrequencyTable: [97]u32,
    mainModeNegotiationTime: u32,
    quickModeNegotiationTime: u32,
    extendedModeNegotiationTime: u32,
};

pub const IKEEXT_KEYMODULE_STATISTICS1 = extern struct {
    v4Statistics: IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1,
    v6Statistics: IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1,
    errorFrequencyTable: [97]u32,
    mainModeNegotiationTime: u32,
    quickModeNegotiationTime: u32,
    extendedModeNegotiationTime: u32,
};

pub const IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0 = extern struct {
    totalSocketReceiveFailures: u32,
    totalSocketSendFailures: u32,
};

pub const IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1 = extern struct {
    totalSocketReceiveFailures: u32,
    totalSocketSendFailures: u32,
};

pub const IKEEXT_COMMON_STATISTICS0 = extern struct {
    v4Statistics: IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0,
    v6Statistics: IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0,
    totalPacketsReceived: u32,
    totalInvalidPacketsReceived: u32,
    currentQueuedWorkitems: u32,
};

pub const IKEEXT_COMMON_STATISTICS1 = extern struct {
    v4Statistics: IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1,
    v6Statistics: IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1,
    totalPacketsReceived: u32,
    totalInvalidPacketsReceived: u32,
    currentQueuedWorkitems: u32,
};

pub const IKEEXT_STATISTICS0 = extern struct {
    ikeStatistics: IKEEXT_KEYMODULE_STATISTICS0,
    authipStatistics: IKEEXT_KEYMODULE_STATISTICS0,
    commonStatistics: IKEEXT_COMMON_STATISTICS0,
};

pub const IKEEXT_STATISTICS1 = extern struct {
    ikeStatistics: IKEEXT_KEYMODULE_STATISTICS1,
    authipStatistics: IKEEXT_KEYMODULE_STATISTICS1,
    ikeV2Statistics: IKEEXT_KEYMODULE_STATISTICS1,
    commonStatistics: IKEEXT_COMMON_STATISTICS1,
};

pub const IKEEXT_TRAFFIC0 = extern struct {
    ipVersion: FWP_IP_VERSION,
    Anonymous1: extern union {
        localV4Address: u32,
        localV6Address: [16]u8,
    },
    Anonymous2: extern union {
        remoteV4Address: u32,
        remoteV6Address: [16]u8,
    },
    authIpFilterId: u64,
};

pub const IKEEXT_COOKIE_PAIR0 = extern struct {
    initiator: u64,
    responder: u64,
};

pub const IKEEXT_CERTIFICATE_CREDENTIAL0 = extern struct {
    subjectName: FWP_BYTE_BLOB,
    certHash: FWP_BYTE_BLOB,
    flags: u32,
};

pub const IKEEXT_NAME_CREDENTIAL0 = extern struct {
    principalName: ?PWSTR,
};

pub const IKEEXT_CREDENTIAL0 = extern struct {
    authenticationMethodType: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    impersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
    Anonymous: extern union {
        presharedKey: ?*IKEEXT_PRESHARED_KEY_AUTHENTICATION0,
        certificate: ?*IKEEXT_CERTIFICATE_CREDENTIAL0,
        name: ?*IKEEXT_NAME_CREDENTIAL0,
    },
};

pub const IKEEXT_CREDENTIAL_PAIR0 = extern struct {
    localCredentials: IKEEXT_CREDENTIAL0,
    peerCredentials: IKEEXT_CREDENTIAL0,
};

pub const IKEEXT_CREDENTIALS0 = extern struct {
    numCredentials: u32,
    credentials: ?*IKEEXT_CREDENTIAL_PAIR0,
};

pub const IKEEXT_SA_DETAILS0 = extern struct {
    saId: u64,
    keyModuleType: IKEEXT_KEY_MODULE_TYPE,
    ipVersion: FWP_IP_VERSION,
    Anonymous: extern union {
        v4UdpEncapsulation: ?*IPSEC_V4_UDP_ENCAPSULATION0,
    },
    ikeTraffic: IKEEXT_TRAFFIC0,
    ikeProposal: IKEEXT_PROPOSAL0,
    cookiePair: IKEEXT_COOKIE_PAIR0,
    ikeCredentials: IKEEXT_CREDENTIALS0,
    ikePolicyKey: Guid,
    virtualIfTunnelId: u64,
};

pub const IKEEXT_CERTIFICATE_CREDENTIAL1 = extern struct {
    subjectName: FWP_BYTE_BLOB,
    certHash: FWP_BYTE_BLOB,
    flags: u32,
    certificate: FWP_BYTE_BLOB,
};

pub const IKEEXT_CREDENTIAL1 = extern struct {
    authenticationMethodType: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    impersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
    Anonymous: extern union {
        presharedKey: ?*IKEEXT_PRESHARED_KEY_AUTHENTICATION1,
        certificate: ?*IKEEXT_CERTIFICATE_CREDENTIAL1,
        name: ?*IKEEXT_NAME_CREDENTIAL0,
    },
};

pub const IKEEXT_CREDENTIAL_PAIR1 = extern struct {
    localCredentials: IKEEXT_CREDENTIAL1,
    peerCredentials: IKEEXT_CREDENTIAL1,
};

pub const IKEEXT_CREDENTIALS1 = extern struct {
    numCredentials: u32,
    credentials: ?*IKEEXT_CREDENTIAL_PAIR1,
};

pub const IKEEXT_SA_DETAILS1 = extern struct {
    saId: u64,
    keyModuleType: IKEEXT_KEY_MODULE_TYPE,
    ipVersion: FWP_IP_VERSION,
    Anonymous: extern union {
        v4UdpEncapsulation: ?*IPSEC_V4_UDP_ENCAPSULATION0,
    },
    ikeTraffic: IKEEXT_TRAFFIC0,
    ikeProposal: IKEEXT_PROPOSAL0,
    cookiePair: IKEEXT_COOKIE_PAIR0,
    ikeCredentials: IKEEXT_CREDENTIALS1,
    ikePolicyKey: Guid,
    virtualIfTunnelId: u64,
    correlationKey: FWP_BYTE_BLOB,
};

pub const IKEEXT_CREDENTIAL2 = extern struct {
    authenticationMethodType: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    impersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
    Anonymous: extern union {
        presharedKey: ?*IKEEXT_PRESHARED_KEY_AUTHENTICATION1,
        certificate: ?*IKEEXT_CERTIFICATE_CREDENTIAL1,
        name: ?*IKEEXT_NAME_CREDENTIAL0,
    },
};

pub const IKEEXT_CREDENTIAL_PAIR2 = extern struct {
    localCredentials: IKEEXT_CREDENTIAL2,
    peerCredentials: IKEEXT_CREDENTIAL2,
};

pub const IKEEXT_CREDENTIALS2 = extern struct {
    numCredentials: u32,
    credentials: ?*IKEEXT_CREDENTIAL_PAIR2,
};

pub const IKEEXT_SA_DETAILS2 = extern struct {
    saId: u64,
    keyModuleType: IKEEXT_KEY_MODULE_TYPE,
    ipVersion: FWP_IP_VERSION,
    Anonymous: extern union {
        v4UdpEncapsulation: ?*IPSEC_V4_UDP_ENCAPSULATION0,
    },
    ikeTraffic: IKEEXT_TRAFFIC0,
    ikeProposal: IKEEXT_PROPOSAL0,
    cookiePair: IKEEXT_COOKIE_PAIR0,
    ikeCredentials: IKEEXT_CREDENTIALS2,
    ikePolicyKey: Guid,
    virtualIfTunnelId: u64,
    correlationKey: FWP_BYTE_BLOB,
};

pub const IKEEXT_SA_ENUM_TEMPLATE0 = extern struct {
    localSubNet: FWP_CONDITION_VALUE0,
    remoteSubNet: FWP_CONDITION_VALUE0,
    localMainModeCertHash: FWP_BYTE_BLOB,
};

pub const IKEEXT_MM_SA_STATE = enum(i32) {
    NONE = 0,
    SA_SENT = 1,
    SSPI_SENT = 2,
    FINAL = 3,
    FINAL_SENT = 4,
    COMPLETE = 5,
    MAX = 6,
};
pub const IKEEXT_MM_SA_STATE_NONE = IKEEXT_MM_SA_STATE.NONE;
pub const IKEEXT_MM_SA_STATE_SA_SENT = IKEEXT_MM_SA_STATE.SA_SENT;
pub const IKEEXT_MM_SA_STATE_SSPI_SENT = IKEEXT_MM_SA_STATE.SSPI_SENT;
pub const IKEEXT_MM_SA_STATE_FINAL = IKEEXT_MM_SA_STATE.FINAL;
pub const IKEEXT_MM_SA_STATE_FINAL_SENT = IKEEXT_MM_SA_STATE.FINAL_SENT;
pub const IKEEXT_MM_SA_STATE_COMPLETE = IKEEXT_MM_SA_STATE.COMPLETE;
pub const IKEEXT_MM_SA_STATE_MAX = IKEEXT_MM_SA_STATE.MAX;

pub const IKEEXT_QM_SA_STATE = enum(i32) {
    NONE = 0,
    INITIAL = 1,
    FINAL = 2,
    COMPLETE = 3,
    MAX = 4,
};
pub const IKEEXT_QM_SA_STATE_NONE = IKEEXT_QM_SA_STATE.NONE;
pub const IKEEXT_QM_SA_STATE_INITIAL = IKEEXT_QM_SA_STATE.INITIAL;
pub const IKEEXT_QM_SA_STATE_FINAL = IKEEXT_QM_SA_STATE.FINAL;
pub const IKEEXT_QM_SA_STATE_COMPLETE = IKEEXT_QM_SA_STATE.COMPLETE;
pub const IKEEXT_QM_SA_STATE_MAX = IKEEXT_QM_SA_STATE.MAX;

pub const IKEEXT_EM_SA_STATE = enum(i32) {
    NONE = 0,
    SENT_ATTS = 1,
    SSPI_SENT = 2,
    AUTH_COMPLETE = 3,
    FINAL = 4,
    COMPLETE = 5,
    MAX = 6,
};
pub const IKEEXT_EM_SA_STATE_NONE = IKEEXT_EM_SA_STATE.NONE;
pub const IKEEXT_EM_SA_STATE_SENT_ATTS = IKEEXT_EM_SA_STATE.SENT_ATTS;
pub const IKEEXT_EM_SA_STATE_SSPI_SENT = IKEEXT_EM_SA_STATE.SSPI_SENT;
pub const IKEEXT_EM_SA_STATE_AUTH_COMPLETE = IKEEXT_EM_SA_STATE.AUTH_COMPLETE;
pub const IKEEXT_EM_SA_STATE_FINAL = IKEEXT_EM_SA_STATE.FINAL;
pub const IKEEXT_EM_SA_STATE_COMPLETE = IKEEXT_EM_SA_STATE.COMPLETE;
pub const IKEEXT_EM_SA_STATE_MAX = IKEEXT_EM_SA_STATE.MAX;

pub const IKEEXT_SA_ROLE = enum(i32) {
    INITIATOR = 0,
    RESPONDER = 1,
    MAX = 2,
};
pub const IKEEXT_SA_ROLE_INITIATOR = IKEEXT_SA_ROLE.INITIATOR;
pub const IKEEXT_SA_ROLE_RESPONDER = IKEEXT_SA_ROLE.RESPONDER;
pub const IKEEXT_SA_ROLE_MAX = IKEEXT_SA_ROLE.MAX;

pub const IPSEC_SA_LIFETIME0 = extern struct {
    lifetimeSeconds: u32,
    lifetimeKilobytes: u32,
    lifetimePackets: u32,
};

pub const IPSEC_TRANSFORM_TYPE = enum(i32) {
    AH = 1,
    ESP_AUTH = 2,
    ESP_CIPHER = 3,
    ESP_AUTH_AND_CIPHER = 4,
    ESP_AUTH_FW = 5,
    TYPE_MAX = 6,
};
pub const IPSEC_TRANSFORM_AH = IPSEC_TRANSFORM_TYPE.AH;
pub const IPSEC_TRANSFORM_ESP_AUTH = IPSEC_TRANSFORM_TYPE.ESP_AUTH;
pub const IPSEC_TRANSFORM_ESP_CIPHER = IPSEC_TRANSFORM_TYPE.ESP_CIPHER;
pub const IPSEC_TRANSFORM_ESP_AUTH_AND_CIPHER = IPSEC_TRANSFORM_TYPE.ESP_AUTH_AND_CIPHER;
pub const IPSEC_TRANSFORM_ESP_AUTH_FW = IPSEC_TRANSFORM_TYPE.ESP_AUTH_FW;
pub const IPSEC_TRANSFORM_TYPE_MAX = IPSEC_TRANSFORM_TYPE.TYPE_MAX;

pub const IPSEC_AUTH_TYPE = enum(i32) {
    MD5 = 0,
    SHA_1 = 1,
    SHA_256 = 2,
    AES_128 = 3,
    AES_192 = 4,
    AES_256 = 5,
    MAX = 6,
};
pub const IPSEC_AUTH_MD5 = IPSEC_AUTH_TYPE.MD5;
pub const IPSEC_AUTH_SHA_1 = IPSEC_AUTH_TYPE.SHA_1;
pub const IPSEC_AUTH_SHA_256 = IPSEC_AUTH_TYPE.SHA_256;
pub const IPSEC_AUTH_AES_128 = IPSEC_AUTH_TYPE.AES_128;
pub const IPSEC_AUTH_AES_192 = IPSEC_AUTH_TYPE.AES_192;
pub const IPSEC_AUTH_AES_256 = IPSEC_AUTH_TYPE.AES_256;
pub const IPSEC_AUTH_MAX = IPSEC_AUTH_TYPE.MAX;

pub const IPSEC_AUTH_TRANSFORM_ID0 = extern struct {
    authType: IPSEC_AUTH_TYPE,
    authConfig: u8,
};

pub const IPSEC_AUTH_TRANSFORM0 = extern struct {
    authTransformId: IPSEC_AUTH_TRANSFORM_ID0,
    cryptoModuleId: ?*Guid,
};

pub const IPSEC_CIPHER_TYPE = enum(i32) {
    DES = 1,
    @"3DES" = 2,
    AES_128 = 3,
    AES_192 = 4,
    AES_256 = 5,
    MAX = 6,
};
pub const IPSEC_CIPHER_TYPE_DES = IPSEC_CIPHER_TYPE.DES;
pub const IPSEC_CIPHER_TYPE_3DES = IPSEC_CIPHER_TYPE.@"3DES";
pub const IPSEC_CIPHER_TYPE_AES_128 = IPSEC_CIPHER_TYPE.AES_128;
pub const IPSEC_CIPHER_TYPE_AES_192 = IPSEC_CIPHER_TYPE.AES_192;
pub const IPSEC_CIPHER_TYPE_AES_256 = IPSEC_CIPHER_TYPE.AES_256;
pub const IPSEC_CIPHER_TYPE_MAX = IPSEC_CIPHER_TYPE.MAX;

pub const IPSEC_CIPHER_TRANSFORM_ID0 = extern struct {
    cipherType: IPSEC_CIPHER_TYPE,
    cipherConfig: u8,
};

pub const IPSEC_CIPHER_TRANSFORM0 = extern struct {
    cipherTransformId: IPSEC_CIPHER_TRANSFORM_ID0,
    cryptoModuleId: ?*Guid,
};

pub const IPSEC_AUTH_AND_CIPHER_TRANSFORM0 = extern struct {
    authTransform: IPSEC_AUTH_TRANSFORM0,
    cipherTransform: IPSEC_CIPHER_TRANSFORM0,
};

pub const IPSEC_SA_TRANSFORM0 = extern struct {
    ipsecTransformType: IPSEC_TRANSFORM_TYPE,
    Anonymous: extern union {
        ahTransform: ?*IPSEC_AUTH_TRANSFORM0,
        espAuthTransform: ?*IPSEC_AUTH_TRANSFORM0,
        espCipherTransform: ?*IPSEC_CIPHER_TRANSFORM0,
        espAuthAndCipherTransform: ?*IPSEC_AUTH_AND_CIPHER_TRANSFORM0,
        espAuthFwTransform: ?*IPSEC_AUTH_TRANSFORM0,
    },
};

pub const IPSEC_PFS_GROUP = enum(i32) {
    NONE = 0,
    @"1" = 1,
    @"2" = 2,
    @"2048" = 3,
    ECP_256 = 4,
    ECP_384 = 5,
    MM = 6,
    @"24" = 7,
    MAX = 8,
    pub const @"14" = .@"2048";
};
pub const IPSEC_PFS_NONE = IPSEC_PFS_GROUP.NONE;
pub const IPSEC_PFS_1 = IPSEC_PFS_GROUP.@"1";
pub const IPSEC_PFS_2 = IPSEC_PFS_GROUP.@"2";
pub const IPSEC_PFS_2048 = IPSEC_PFS_GROUP.@"2048";
pub const IPSEC_PFS_14 = IPSEC_PFS_GROUP.@"2048";
pub const IPSEC_PFS_ECP_256 = IPSEC_PFS_GROUP.ECP_256;
pub const IPSEC_PFS_ECP_384 = IPSEC_PFS_GROUP.ECP_384;
pub const IPSEC_PFS_MM = IPSEC_PFS_GROUP.MM;
pub const IPSEC_PFS_24 = IPSEC_PFS_GROUP.@"24";
pub const IPSEC_PFS_MAX = IPSEC_PFS_GROUP.MAX;

pub const IPSEC_PROPOSAL0 = extern struct {
    lifetime: IPSEC_SA_LIFETIME0,
    numSaTransforms: u32,
    saTransforms: ?*IPSEC_SA_TRANSFORM0,
    pfsGroup: IPSEC_PFS_GROUP,
};

pub const IPSEC_SA_IDLE_TIMEOUT0 = extern struct {
    idleTimeoutSeconds: u32,
    idleTimeoutSecondsFailOver: u32,
};

pub const IPSEC_TRAFFIC_SELECTOR0_ = extern struct {
    protocolId: u8,
    portStart: u16,
    portEnd: u16,
    ipVersion: FWP_IP_VERSION,
    Anonymous1: extern union {
        startV4Address: u32,
        startV6Address: [16]u8,
    },
    Anonymous2: extern union {
        endV4Address: u32,
        endV6Address: [16]u8,
    },
};

pub const IPSEC_TRAFFIC_SELECTOR_POLICY0_ = extern struct {
    flags: u32,
    numLocalTrafficSelectors: u32,
    localTrafficSelectors: ?*IPSEC_TRAFFIC_SELECTOR0_,
    numRemoteTrafficSelectors: u32,
    remoteTrafficSelectors: ?*IPSEC_TRAFFIC_SELECTOR0_,
};

pub const IPSEC_TRANSPORT_POLICY0 = extern struct {
    numIpsecProposals: u32,
    ipsecProposals: ?*IPSEC_PROPOSAL0,
    flags: IPSEC_POLICY_FLAG,
    ndAllowClearTimeoutSeconds: u32,
    saIdleTimeout: IPSEC_SA_IDLE_TIMEOUT0,
    emPolicy: ?*IKEEXT_EM_POLICY0,
};

pub const IPSEC_TRANSPORT_POLICY1 = extern struct {
    numIpsecProposals: u32,
    ipsecProposals: ?*IPSEC_PROPOSAL0,
    flags: IPSEC_POLICY_FLAG,
    ndAllowClearTimeoutSeconds: u32,
    saIdleTimeout: IPSEC_SA_IDLE_TIMEOUT0,
    emPolicy: ?*IKEEXT_EM_POLICY1,
};

pub const IPSEC_TRANSPORT_POLICY2 = extern struct {
    numIpsecProposals: u32,
    ipsecProposals: ?*IPSEC_PROPOSAL0,
    flags: IPSEC_POLICY_FLAG,
    ndAllowClearTimeoutSeconds: u32,
    saIdleTimeout: IPSEC_SA_IDLE_TIMEOUT0,
    emPolicy: ?*IKEEXT_EM_POLICY2,
};

pub const IPSEC_TUNNEL_ENDPOINTS0 = extern struct {
    ipVersion: FWP_IP_VERSION,
    Anonymous1: extern union {
        localV4Address: u32,
        localV6Address: [16]u8,
    },
    Anonymous2: extern union {
        remoteV4Address: u32,
        remoteV6Address: [16]u8,
    },
};

pub const IPSEC_TUNNEL_ENDPOINT0 = extern struct {
    ipVersion: FWP_IP_VERSION,
    Anonymous: extern union {
        v4Address: u32,
        v6Address: [16]u8,
    },
};

pub const IPSEC_TUNNEL_ENDPOINTS2 = extern struct {
    ipVersion: FWP_IP_VERSION,
    Anonymous1: extern union {
        localV4Address: u32,
        localV6Address: [16]u8,
    },
    Anonymous2: extern union {
        remoteV4Address: u32,
        remoteV6Address: [16]u8,
    },
    localIfLuid: u64,
    remoteFqdn: ?PWSTR,
    numAddresses: u32,
    remoteAddresses: ?*IPSEC_TUNNEL_ENDPOINT0,
};

pub const IPSEC_TUNNEL_ENDPOINTS1 = extern struct {
    ipVersion: FWP_IP_VERSION,
    Anonymous1: extern union {
        localV4Address: u32,
        localV6Address: [16]u8,
    },
    Anonymous2: extern union {
        remoteV4Address: u32,
        remoteV6Address: [16]u8,
    },
    localIfLuid: u64,
};

pub const IPSEC_TUNNEL_POLICY0 = extern struct {
    flags: IPSEC_POLICY_FLAG,
    numIpsecProposals: u32,
    ipsecProposals: ?*IPSEC_PROPOSAL0,
    tunnelEndpoints: IPSEC_TUNNEL_ENDPOINTS0,
    saIdleTimeout: IPSEC_SA_IDLE_TIMEOUT0,
    emPolicy: ?*IKEEXT_EM_POLICY0,
};

pub const IPSEC_TUNNEL_POLICY1 = extern struct {
    flags: IPSEC_POLICY_FLAG,
    numIpsecProposals: u32,
    ipsecProposals: ?*IPSEC_PROPOSAL0,
    tunnelEndpoints: IPSEC_TUNNEL_ENDPOINTS1,
    saIdleTimeout: IPSEC_SA_IDLE_TIMEOUT0,
    emPolicy: ?*IKEEXT_EM_POLICY1,
};

pub const IPSEC_TUNNEL_POLICY2 = extern struct {
    flags: IPSEC_POLICY_FLAG,
    numIpsecProposals: u32,
    ipsecProposals: ?*IPSEC_PROPOSAL0,
    tunnelEndpoints: IPSEC_TUNNEL_ENDPOINTS2,
    saIdleTimeout: IPSEC_SA_IDLE_TIMEOUT0,
    emPolicy: ?*IKEEXT_EM_POLICY2,
    fwdPathSaLifetime: u32,
};

pub const IPSEC_TUNNEL_POLICY3_ = extern struct {
    flags: u32,
    numIpsecProposals: u32,
    ipsecProposals: ?*IPSEC_PROPOSAL0,
    tunnelEndpoints: IPSEC_TUNNEL_ENDPOINTS2,
    saIdleTimeout: IPSEC_SA_IDLE_TIMEOUT0,
    emPolicy: ?*IKEEXT_EM_POLICY2,
    fwdPathSaLifetime: u32,
    compartmentId: u32,
    numTrafficSelectorPolicy: u32,
    trafficSelectorPolicies: ?*IPSEC_TRAFFIC_SELECTOR_POLICY0_,
};

pub const IPSEC_KEYING_POLICY0 = extern struct {
    numKeyMods: u32,
    keyModKeys: ?*Guid,
};

pub const IPSEC_KEYING_POLICY1 = extern struct {
    numKeyMods: u32,
    keyModKeys: ?*Guid,
    flags: u32,
};

pub const IPSEC_AGGREGATE_SA_STATISTICS0 = extern struct {
    activeSas: u32,
    pendingSaNegotiations: u32,
    totalSasAdded: u32,
    totalSasDeleted: u32,
    successfulRekeys: u32,
    activeTunnels: u32,
    offloadedSas: u32,
};

pub const IPSEC_ESP_DROP_PACKET_STATISTICS0 = extern struct {
    invalidSpisOnInbound: u32,
    decryptionFailuresOnInbound: u32,
    authenticationFailuresOnInbound: u32,
    replayCheckFailuresOnInbound: u32,
    saNotInitializedOnInbound: u32,
};

pub const IPSEC_AH_DROP_PACKET_STATISTICS0 = extern struct {
    invalidSpisOnInbound: u32,
    authenticationFailuresOnInbound: u32,
    replayCheckFailuresOnInbound: u32,
    saNotInitializedOnInbound: u32,
};

pub const IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0 = extern struct {
    invalidSpisOnInbound: u32,
    decryptionFailuresOnInbound: u32,
    authenticationFailuresOnInbound: u32,
    udpEspValidationFailuresOnInbound: u32,
    replayCheckFailuresOnInbound: u32,
    invalidClearTextInbound: u32,
    saNotInitializedOnInbound: u32,
    receiveOverIncorrectSaInbound: u32,
    secureReceivesNotMatchingFilters: u32,
};

pub const IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1 = extern struct {
    invalidSpisOnInbound: u32,
    decryptionFailuresOnInbound: u32,
    authenticationFailuresOnInbound: u32,
    udpEspValidationFailuresOnInbound: u32,
    replayCheckFailuresOnInbound: u32,
    invalidClearTextInbound: u32,
    saNotInitializedOnInbound: u32,
    receiveOverIncorrectSaInbound: u32,
    secureReceivesNotMatchingFilters: u32,
    totalDropPacketsInbound: u32,
};

pub const IPSEC_TRAFFIC_STATISTICS0 = extern struct {
    encryptedByteCount: u64,
    authenticatedAHByteCount: u64,
    authenticatedESPByteCount: u64,
    transportByteCount: u64,
    tunnelByteCount: u64,
    offloadByteCount: u64,
};

pub const IPSEC_TRAFFIC_STATISTICS1 = extern struct {
    encryptedByteCount: u64,
    authenticatedAHByteCount: u64,
    authenticatedESPByteCount: u64,
    transportByteCount: u64,
    tunnelByteCount: u64,
    offloadByteCount: u64,
    totalSuccessfulPackets: u64,
};

pub const IPSEC_STATISTICS0 = extern struct {
    aggregateSaStatistics: IPSEC_AGGREGATE_SA_STATISTICS0,
    espDropPacketStatistics: IPSEC_ESP_DROP_PACKET_STATISTICS0,
    ahDropPacketStatistics: IPSEC_AH_DROP_PACKET_STATISTICS0,
    aggregateDropPacketStatistics: IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0,
    inboundTrafficStatistics: IPSEC_TRAFFIC_STATISTICS0,
    outboundTrafficStatistics: IPSEC_TRAFFIC_STATISTICS0,
};

pub const IPSEC_STATISTICS1 = extern struct {
    aggregateSaStatistics: IPSEC_AGGREGATE_SA_STATISTICS0,
    espDropPacketStatistics: IPSEC_ESP_DROP_PACKET_STATISTICS0,
    ahDropPacketStatistics: IPSEC_AH_DROP_PACKET_STATISTICS0,
    aggregateDropPacketStatistics: IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1,
    inboundTrafficStatistics: IPSEC_TRAFFIC_STATISTICS1,
    outboundTrafficStatistics: IPSEC_TRAFFIC_STATISTICS1,
};

pub const IPSEC_SA_AUTH_INFORMATION0 = extern struct {
    authTransform: IPSEC_AUTH_TRANSFORM0,
    authKey: FWP_BYTE_BLOB,
};

pub const IPSEC_SA_CIPHER_INFORMATION0 = extern struct {
    cipherTransform: IPSEC_CIPHER_TRANSFORM0,
    cipherKey: FWP_BYTE_BLOB,
};

pub const IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0 = extern struct {
    saCipherInformation: IPSEC_SA_CIPHER_INFORMATION0,
    saAuthInformation: IPSEC_SA_AUTH_INFORMATION0,
};

pub const IPSEC_SA0 = extern struct {
    spi: u32,
    saTransformType: IPSEC_TRANSFORM_TYPE,
    Anonymous: extern union {
        ahInformation: ?*IPSEC_SA_AUTH_INFORMATION0,
        espAuthInformation: ?*IPSEC_SA_AUTH_INFORMATION0,
        espCipherInformation: ?*IPSEC_SA_CIPHER_INFORMATION0,
        espAuthAndCipherInformation: ?*IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0,
        espAuthFwInformation: ?*IPSEC_SA_AUTH_INFORMATION0,
    },
};

pub const IPSEC_KEYMODULE_STATE0 = extern struct {
    keyModuleKey: Guid,
    stateBlob: FWP_BYTE_BLOB,
};

pub const IPSEC_TOKEN_TYPE = enum(i32) {
    MACHINE = 0,
    IMPERSONATION = 1,
    MAX = 2,
};
pub const IPSEC_TOKEN_TYPE_MACHINE = IPSEC_TOKEN_TYPE.MACHINE;
pub const IPSEC_TOKEN_TYPE_IMPERSONATION = IPSEC_TOKEN_TYPE.IMPERSONATION;
pub const IPSEC_TOKEN_TYPE_MAX = IPSEC_TOKEN_TYPE.MAX;

pub const IPSEC_TOKEN_PRINCIPAL = enum(i32) {
    LOCAL = 0,
    PEER = 1,
    MAX = 2,
};
pub const IPSEC_TOKEN_PRINCIPAL_LOCAL = IPSEC_TOKEN_PRINCIPAL.LOCAL;
pub const IPSEC_TOKEN_PRINCIPAL_PEER = IPSEC_TOKEN_PRINCIPAL.PEER;
pub const IPSEC_TOKEN_PRINCIPAL_MAX = IPSEC_TOKEN_PRINCIPAL.MAX;

pub const IPSEC_TOKEN_MODE = enum(i32) {
    MAIN = 0,
    EXTENDED = 1,
    MAX = 2,
};
pub const IPSEC_TOKEN_MODE_MAIN = IPSEC_TOKEN_MODE.MAIN;
pub const IPSEC_TOKEN_MODE_EXTENDED = IPSEC_TOKEN_MODE.EXTENDED;
pub const IPSEC_TOKEN_MODE_MAX = IPSEC_TOKEN_MODE.MAX;

pub const IPSEC_TOKEN0 = extern struct {
    type: IPSEC_TOKEN_TYPE,
    principal: IPSEC_TOKEN_PRINCIPAL,
    mode: IPSEC_TOKEN_MODE,
    token: u64,
};

pub const IPSEC_ID0 = extern struct {
    mmTargetName: ?PWSTR,
    emTargetName: ?PWSTR,
    numTokens: u32,
    tokens: ?*IPSEC_TOKEN0,
    explicitCredentials: u64,
    logonId: u64,
};

pub const IPSEC_SA_BUNDLE0 = extern struct {
    flags: IPSEC_SA_BUNDLE_FLAGS,
    lifetime: IPSEC_SA_LIFETIME0,
    idleTimeoutSeconds: u32,
    ndAllowClearTimeoutSeconds: u32,
    ipsecId: ?*IPSEC_ID0,
    napContext: u32,
    qmSaId: u32,
    numSAs: u32,
    saList: ?*IPSEC_SA0,
    keyModuleState: ?*IPSEC_KEYMODULE_STATE0,
    ipVersion: FWP_IP_VERSION,
    Anonymous: extern union {
        peerV4PrivateAddress: u32,
    },
    mmSaId: u64,
    pfsGroup: IPSEC_PFS_GROUP,
};

pub const IPSEC_SA_BUNDLE1 = extern struct {
    flags: IPSEC_SA_BUNDLE_FLAGS,
    lifetime: IPSEC_SA_LIFETIME0,
    idleTimeoutSeconds: u32,
    ndAllowClearTimeoutSeconds: u32,
    ipsecId: ?*IPSEC_ID0,
    napContext: u32,
    qmSaId: u32,
    numSAs: u32,
    saList: ?*IPSEC_SA0,
    keyModuleState: ?*IPSEC_KEYMODULE_STATE0,
    ipVersion: FWP_IP_VERSION,
    Anonymous: extern union {
        peerV4PrivateAddress: u32,
    },
    mmSaId: u64,
    pfsGroup: IPSEC_PFS_GROUP,
    saLookupContext: Guid,
    qmFilterId: u64,
};

pub const IPSEC_TRAFFIC_TYPE = enum(i32) {
    TRANSPORT = 0,
    TUNNEL = 1,
    MAX = 2,
};
pub const IPSEC_TRAFFIC_TYPE_TRANSPORT = IPSEC_TRAFFIC_TYPE.TRANSPORT;
pub const IPSEC_TRAFFIC_TYPE_TUNNEL = IPSEC_TRAFFIC_TYPE.TUNNEL;
pub const IPSEC_TRAFFIC_TYPE_MAX = IPSEC_TRAFFIC_TYPE.MAX;

pub const IPSEC_TRAFFIC0 = extern struct {
    ipVersion: FWP_IP_VERSION,
    Anonymous1: extern union {
        localV4Address: u32,
        localV6Address: [16]u8,
    },
    Anonymous2: extern union {
        remoteV4Address: u32,
        remoteV6Address: [16]u8,
    },
    trafficType: IPSEC_TRAFFIC_TYPE,
    Anonymous3: extern union {
        ipsecFilterId: u64,
        tunnelPolicyId: u64,
    },
    remotePort: u16,
};

pub const IPSEC_TRAFFIC1 = extern struct {
    ipVersion: FWP_IP_VERSION,
    Anonymous1: extern union {
        localV4Address: u32,
        localV6Address: [16]u8,
    },
    Anonymous2: extern union {
        remoteV4Address: u32,
        remoteV6Address: [16]u8,
    },
    trafficType: IPSEC_TRAFFIC_TYPE,
    Anonymous3: extern union {
        ipsecFilterId: u64,
        tunnelPolicyId: u64,
    },
    remotePort: u16,
    localPort: u16,
    ipProtocol: u8,
    localIfLuid: u64,
    realIfProfileId: u32,
};

pub const IPSEC_V4_UDP_ENCAPSULATION0 = extern struct {
    localUdpEncapPort: u16,
    remoteUdpEncapPort: u16,
};

pub const IPSEC_GETSPI0 = extern struct {
    inboundIpsecTraffic: IPSEC_TRAFFIC0,
    ipVersion: FWP_IP_VERSION,
    Anonymous: extern union {
        inboundUdpEncapsulation: ?*IPSEC_V4_UDP_ENCAPSULATION0,
    },
    rngCryptoModuleID: ?*Guid,
};

pub const IPSEC_GETSPI1 = extern struct {
    inboundIpsecTraffic: IPSEC_TRAFFIC1,
    ipVersion: FWP_IP_VERSION,
    Anonymous: extern union {
        inboundUdpEncapsulation: ?*IPSEC_V4_UDP_ENCAPSULATION0,
    },
    rngCryptoModuleID: ?*Guid,
};

pub const IPSEC_SA_DETAILS0 = extern struct {
    ipVersion: FWP_IP_VERSION,
    saDirection: FWP_DIRECTION,
    traffic: IPSEC_TRAFFIC0,
    saBundle: IPSEC_SA_BUNDLE0,
    Anonymous: extern union {
        udpEncapsulation: ?*IPSEC_V4_UDP_ENCAPSULATION0,
    },
    transportFilter: ?*FWPM_FILTER0,
};

pub const IPSEC_SA_DETAILS1 = extern struct {
    ipVersion: FWP_IP_VERSION,
    saDirection: FWP_DIRECTION,
    traffic: IPSEC_TRAFFIC1,
    saBundle: IPSEC_SA_BUNDLE1,
    Anonymous: extern union {
        udpEncapsulation: ?*IPSEC_V4_UDP_ENCAPSULATION0,
    },
    transportFilter: ?*FWPM_FILTER0,
    virtualIfTunnelInfo: IPSEC_VIRTUAL_IF_TUNNEL_INFO0,
};

pub const IPSEC_SA_CONTEXT0 = extern struct {
    saContextId: u64,
    inboundSa: ?*IPSEC_SA_DETAILS0,
    outboundSa: ?*IPSEC_SA_DETAILS0,
};

pub const IPSEC_SA_CONTEXT1 = extern struct {
    saContextId: u64,
    inboundSa: ?*IPSEC_SA_DETAILS1,
    outboundSa: ?*IPSEC_SA_DETAILS1,
};

pub const IPSEC_SA_CONTEXT_ENUM_TEMPLATE0 = extern struct {
    localSubNet: FWP_CONDITION_VALUE0,
    remoteSubNet: FWP_CONDITION_VALUE0,
};

pub const IPSEC_SA_ENUM_TEMPLATE0 = extern struct {
    saDirection: FWP_DIRECTION,
};

pub const IPSEC_SA_CONTEXT_SUBSCRIPTION0 = extern struct {
    enumTemplate: ?*IPSEC_SA_CONTEXT_ENUM_TEMPLATE0,
    flags: u32,
    sessionKey: Guid,
};

pub const IPSEC_SA_CONTEXT_EVENT_TYPE0 = enum(i32) {
    ADD = 1,
    DELETE = 2,
    MAX = 3,
};
pub const IPSEC_SA_CONTEXT_EVENT_ADD = IPSEC_SA_CONTEXT_EVENT_TYPE0.ADD;
pub const IPSEC_SA_CONTEXT_EVENT_DELETE = IPSEC_SA_CONTEXT_EVENT_TYPE0.DELETE;
pub const IPSEC_SA_CONTEXT_EVENT_MAX = IPSEC_SA_CONTEXT_EVENT_TYPE0.MAX;

pub const IPSEC_SA_CONTEXT_CHANGE0 = extern struct {
    changeType: IPSEC_SA_CONTEXT_EVENT_TYPE0,
    saContextId: u64,
};

pub const IPSEC_FAILURE_POINT = enum(i32) {
    NONE = 0,
    ME = 1,
    PEER = 2,
    POINT_MAX = 3,
};
pub const IPSEC_FAILURE_NONE = IPSEC_FAILURE_POINT.NONE;
pub const IPSEC_FAILURE_ME = IPSEC_FAILURE_POINT.ME;
pub const IPSEC_FAILURE_PEER = IPSEC_FAILURE_POINT.PEER;
pub const IPSEC_FAILURE_POINT_MAX = IPSEC_FAILURE_POINT.POINT_MAX;

pub const IPSEC_ADDRESS_INFO0 = extern struct {
    numV4Addresses: u32,
    v4Addresses: ?*u32,
    numV6Addresses: u32,
    v6Addresses: ?*FWP_BYTE_ARRAY16,
};

pub const IPSEC_DOSP_OPTIONS0 = extern struct {
    stateIdleTimeoutSeconds: u32,
    perIPRateLimitQueueIdleTimeoutSeconds: u32,
    ipV6IPsecUnauthDscp: u8,
    ipV6IPsecUnauthRateLimitBytesPerSec: u32,
    ipV6IPsecUnauthPerIPRateLimitBytesPerSec: u32,
    ipV6IPsecAuthDscp: u8,
    ipV6IPsecAuthRateLimitBytesPerSec: u32,
    icmpV6Dscp: u8,
    icmpV6RateLimitBytesPerSec: u32,
    ipV6FilterExemptDscp: u8,
    ipV6FilterExemptRateLimitBytesPerSec: u32,
    defBlockExemptDscp: u8,
    defBlockExemptRateLimitBytesPerSec: u32,
    maxStateEntries: u32,
    maxPerIPRateLimitQueues: u32,
    flags: IPSEC_DOSP_FLAGS,
    numPublicIFLuids: u32,
    publicIFLuids: ?*u64,
    numInternalIFLuids: u32,
    internalIFLuids: ?*u64,
    publicV6AddrMask: FWP_V6_ADDR_AND_MASK,
    internalV6AddrMask: FWP_V6_ADDR_AND_MASK,
};

pub const IPSEC_DOSP_STATISTICS0 = extern struct {
    totalStateEntriesCreated: u64,
    currentStateEntries: u64,
    totalInboundAllowedIPv6IPsecUnauthPkts: u64,
    totalInboundRatelimitDiscardedIPv6IPsecUnauthPkts: u64,
    totalInboundPerIPRatelimitDiscardedIPv6IPsecUnauthPkts: u64,
    totalInboundOtherDiscardedIPv6IPsecUnauthPkts: u64,
    totalInboundAllowedIPv6IPsecAuthPkts: u64,
    totalInboundRatelimitDiscardedIPv6IPsecAuthPkts: u64,
    totalInboundOtherDiscardedIPv6IPsecAuthPkts: u64,
    totalInboundAllowedICMPv6Pkts: u64,
    totalInboundRatelimitDiscardedICMPv6Pkts: u64,
    totalInboundAllowedIPv6FilterExemptPkts: u64,
    totalInboundRatelimitDiscardedIPv6FilterExemptPkts: u64,
    totalInboundDiscardedIPv6FilterBlockPkts: u64,
    totalInboundAllowedDefBlockExemptPkts: u64,
    totalInboundRatelimitDiscardedDefBlockExemptPkts: u64,
    totalInboundDiscardedDefBlockPkts: u64,
    currentInboundIPv6IPsecUnauthPerIPRateLimitQueues: u64,
};

pub const IPSEC_DOSP_STATE0 = extern struct {
    publicHostV6Addr: [16]u8,
    internalHostV6Addr: [16]u8,
    totalInboundIPv6IPsecAuthPackets: u64,
    totalOutboundIPv6IPsecAuthPackets: u64,
    durationSecs: u32,
};

pub const IPSEC_DOSP_STATE_ENUM_TEMPLATE0 = extern struct {
    publicV6AddrMask: FWP_V6_ADDR_AND_MASK,
    internalV6AddrMask: FWP_V6_ADDR_AND_MASK,
};

pub const IPSEC_KEY_MANAGER0 = extern struct {
    keyManagerKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    keyDictationTimeoutHint: u8,
};

pub const DL_ADDRESS_TYPE = enum(i32) {
    Unicast = 0,
    Multicast = 1,
    Broadcast = 2,
};
pub const DlUnicast = DL_ADDRESS_TYPE.Unicast;
pub const DlMulticast = DL_ADDRESS_TYPE.Multicast;
pub const DlBroadcast = DL_ADDRESS_TYPE.Broadcast;

pub const FWPM_CHANGE_TYPE = enum(i32) {
    ADD = 1,
    DELETE = 2,
    TYPE_MAX = 3,
};
pub const FWPM_CHANGE_ADD = FWPM_CHANGE_TYPE.ADD;
pub const FWPM_CHANGE_DELETE = FWPM_CHANGE_TYPE.DELETE;
pub const FWPM_CHANGE_TYPE_MAX = FWPM_CHANGE_TYPE.TYPE_MAX;

pub const FWPM_SERVICE_STATE = enum(i32) {
    STOPPED = 0,
    START_PENDING = 1,
    STOP_PENDING = 2,
    RUNNING = 3,
    STATE_MAX = 4,
};
pub const FWPM_SERVICE_STOPPED = FWPM_SERVICE_STATE.STOPPED;
pub const FWPM_SERVICE_START_PENDING = FWPM_SERVICE_STATE.START_PENDING;
pub const FWPM_SERVICE_STOP_PENDING = FWPM_SERVICE_STATE.STOP_PENDING;
pub const FWPM_SERVICE_RUNNING = FWPM_SERVICE_STATE.RUNNING;
pub const FWPM_SERVICE_STATE_MAX = FWPM_SERVICE_STATE.STATE_MAX;

pub const FWPM_ENGINE_OPTION = enum(i32) {
    COLLECT_NET_EVENTS = 0,
    NET_EVENT_MATCH_ANY_KEYWORDS = 1,
    NAME_CACHE = 2,
    MONITOR_IPSEC_CONNECTIONS = 3,
    PACKET_QUEUING = 4,
    TXN_WATCHDOG_TIMEOUT_IN_MSEC = 5,
    OPTION_MAX = 6,
};
pub const FWPM_ENGINE_COLLECT_NET_EVENTS = FWPM_ENGINE_OPTION.COLLECT_NET_EVENTS;
pub const FWPM_ENGINE_NET_EVENT_MATCH_ANY_KEYWORDS = FWPM_ENGINE_OPTION.NET_EVENT_MATCH_ANY_KEYWORDS;
pub const FWPM_ENGINE_NAME_CACHE = FWPM_ENGINE_OPTION.NAME_CACHE;
pub const FWPM_ENGINE_MONITOR_IPSEC_CONNECTIONS = FWPM_ENGINE_OPTION.MONITOR_IPSEC_CONNECTIONS;
pub const FWPM_ENGINE_PACKET_QUEUING = FWPM_ENGINE_OPTION.PACKET_QUEUING;
pub const FWPM_ENGINE_TXN_WATCHDOG_TIMEOUT_IN_MSEC = FWPM_ENGINE_OPTION.TXN_WATCHDOG_TIMEOUT_IN_MSEC;
pub const FWPM_ENGINE_OPTION_MAX = FWPM_ENGINE_OPTION.OPTION_MAX;

pub const FWPM_SESSION0 = extern struct {
    sessionKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    txnWaitTimeoutInMSec: u32,
    processId: u32,
    sid: ?*SID,
    username: ?PWSTR,
    kernelMode: BOOL,
};

pub const FWPM_SESSION_ENUM_TEMPLATE0 = extern struct {
    reserved: u64,
};

pub const FWPM_PROVIDER0 = extern struct {
    providerKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    providerData: FWP_BYTE_BLOB,
    serviceName: ?PWSTR,
};

pub const FWPM_PROVIDER_ENUM_TEMPLATE0 = extern struct {
    reserved: u64,
};

pub const FWPM_PROVIDER_CHANGE0 = extern struct {
    changeType: FWPM_CHANGE_TYPE,
    providerKey: Guid,
};

pub const FWPM_PROVIDER_SUBSCRIPTION0 = extern struct {
    enumTemplate: ?*FWPM_PROVIDER_ENUM_TEMPLATE0,
    flags: u32,
    sessionKey: Guid,
};

pub const FWPM_CLASSIFY_OPTION0 = extern struct {
    type: FWP_CLASSIFY_OPTION_TYPE,
    value: FWP_VALUE0,
};

pub const FWPM_CLASSIFY_OPTIONS0 = extern struct {
    numOptions: u32,
    options: ?*FWPM_CLASSIFY_OPTION0,
};

pub const FWPM_PROVIDER_CONTEXT_TYPE = enum(i32) {
    IPSEC_KEYING_CONTEXT = 0,
    IPSEC_IKE_QM_TRANSPORT_CONTEXT = 1,
    IPSEC_IKE_QM_TUNNEL_CONTEXT = 2,
    IPSEC_AUTHIP_QM_TRANSPORT_CONTEXT = 3,
    IPSEC_AUTHIP_QM_TUNNEL_CONTEXT = 4,
    IPSEC_IKE_MM_CONTEXT = 5,
    IPSEC_AUTHIP_MM_CONTEXT = 6,
    CLASSIFY_OPTIONS_CONTEXT = 7,
    GENERAL_CONTEXT = 8,
    IPSEC_IKEV2_QM_TUNNEL_CONTEXT = 9,
    IPSEC_IKEV2_MM_CONTEXT = 10,
    IPSEC_DOSP_CONTEXT = 11,
    IPSEC_IKEV2_QM_TRANSPORT_CONTEXT = 12,
    PROVIDER_CONTEXT_TYPE_MAX = 13,
};
pub const FWPM_IPSEC_KEYING_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.IPSEC_KEYING_CONTEXT;
pub const FWPM_IPSEC_IKE_QM_TRANSPORT_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.IPSEC_IKE_QM_TRANSPORT_CONTEXT;
pub const FWPM_IPSEC_IKE_QM_TUNNEL_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.IPSEC_IKE_QM_TUNNEL_CONTEXT;
pub const FWPM_IPSEC_AUTHIP_QM_TRANSPORT_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.IPSEC_AUTHIP_QM_TRANSPORT_CONTEXT;
pub const FWPM_IPSEC_AUTHIP_QM_TUNNEL_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.IPSEC_AUTHIP_QM_TUNNEL_CONTEXT;
pub const FWPM_IPSEC_IKE_MM_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.IPSEC_IKE_MM_CONTEXT;
pub const FWPM_IPSEC_AUTHIP_MM_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.IPSEC_AUTHIP_MM_CONTEXT;
pub const FWPM_CLASSIFY_OPTIONS_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.CLASSIFY_OPTIONS_CONTEXT;
pub const FWPM_GENERAL_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.GENERAL_CONTEXT;
pub const FWPM_IPSEC_IKEV2_QM_TUNNEL_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.IPSEC_IKEV2_QM_TUNNEL_CONTEXT;
pub const FWPM_IPSEC_IKEV2_MM_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.IPSEC_IKEV2_MM_CONTEXT;
pub const FWPM_IPSEC_DOSP_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.IPSEC_DOSP_CONTEXT;
pub const FWPM_IPSEC_IKEV2_QM_TRANSPORT_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.IPSEC_IKEV2_QM_TRANSPORT_CONTEXT;
pub const FWPM_PROVIDER_CONTEXT_TYPE_MAX = FWPM_PROVIDER_CONTEXT_TYPE.PROVIDER_CONTEXT_TYPE_MAX;

pub const FWPM_PROVIDER_CONTEXT0 = extern struct {
    providerContextKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    providerKey: ?*Guid,
    providerData: FWP_BYTE_BLOB,
    type: FWPM_PROVIDER_CONTEXT_TYPE,
    Anonymous: extern union {
        keyingPolicy: ?*IPSEC_KEYING_POLICY0,
        ikeQmTransportPolicy: ?*IPSEC_TRANSPORT_POLICY0,
        ikeQmTunnelPolicy: ?*IPSEC_TUNNEL_POLICY0,
        authipQmTransportPolicy: ?*IPSEC_TRANSPORT_POLICY0,
        authipQmTunnelPolicy: ?*IPSEC_TUNNEL_POLICY0,
        ikeMmPolicy: ?*IKEEXT_POLICY0,
        authIpMmPolicy: ?*IKEEXT_POLICY0,
        dataBuffer: ?*FWP_BYTE_BLOB,
        classifyOptions: ?*FWPM_CLASSIFY_OPTIONS0,
    },
    providerContextId: u64,
};

pub const FWPM_PROVIDER_CONTEXT1 = extern struct {
    providerContextKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    providerKey: ?*Guid,
    providerData: FWP_BYTE_BLOB,
    type: FWPM_PROVIDER_CONTEXT_TYPE,
    Anonymous: extern union {
        keyingPolicy: ?*IPSEC_KEYING_POLICY0,
        ikeQmTransportPolicy: ?*IPSEC_TRANSPORT_POLICY1,
        ikeQmTunnelPolicy: ?*IPSEC_TUNNEL_POLICY1,
        authipQmTransportPolicy: ?*IPSEC_TRANSPORT_POLICY1,
        authipQmTunnelPolicy: ?*IPSEC_TUNNEL_POLICY1,
        ikeMmPolicy: ?*IKEEXT_POLICY1,
        authIpMmPolicy: ?*IKEEXT_POLICY1,
        dataBuffer: ?*FWP_BYTE_BLOB,
        classifyOptions: ?*FWPM_CLASSIFY_OPTIONS0,
        ikeV2QmTunnelPolicy: ?*IPSEC_TUNNEL_POLICY1,
        ikeV2MmPolicy: ?*IKEEXT_POLICY1,
        idpOptions: ?*IPSEC_DOSP_OPTIONS0,
    },
    providerContextId: u64,
};

pub const FWPM_PROVIDER_CONTEXT2 = extern struct {
    providerContextKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    providerKey: ?*Guid,
    providerData: FWP_BYTE_BLOB,
    type: FWPM_PROVIDER_CONTEXT_TYPE,
    Anonymous: extern union {
        keyingPolicy: ?*IPSEC_KEYING_POLICY1,
        ikeQmTransportPolicy: ?*IPSEC_TRANSPORT_POLICY2,
        ikeQmTunnelPolicy: ?*IPSEC_TUNNEL_POLICY2,
        authipQmTransportPolicy: ?*IPSEC_TRANSPORT_POLICY2,
        authipQmTunnelPolicy: ?*IPSEC_TUNNEL_POLICY2,
        ikeMmPolicy: ?*IKEEXT_POLICY2,
        authIpMmPolicy: ?*IKEEXT_POLICY2,
        dataBuffer: ?*FWP_BYTE_BLOB,
        classifyOptions: ?*FWPM_CLASSIFY_OPTIONS0,
        ikeV2QmTunnelPolicy: ?*IPSEC_TUNNEL_POLICY2,
        ikeV2QmTransportPolicy: ?*IPSEC_TRANSPORT_POLICY2,
        ikeV2MmPolicy: ?*IKEEXT_POLICY2,
        idpOptions: ?*IPSEC_DOSP_OPTIONS0,
    },
    providerContextId: u64,
};

pub const FWPM_PROVIDER_CONTEXT3_ = extern struct {
    providerContextKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    providerKey: ?*Guid,
    providerData: FWP_BYTE_BLOB,
    type: FWPM_PROVIDER_CONTEXT_TYPE,
    Anonymous: extern union {
        keyingPolicy: ?*IPSEC_KEYING_POLICY1,
        ikeQmTransportPolicy: ?*IPSEC_TRANSPORT_POLICY2,
        ikeQmTunnelPolicy: ?*IPSEC_TUNNEL_POLICY3_,
        authipQmTransportPolicy: ?*IPSEC_TRANSPORT_POLICY2,
        authipQmTunnelPolicy: ?*IPSEC_TUNNEL_POLICY3_,
        ikeMmPolicy: ?*IKEEXT_POLICY2,
        authIpMmPolicy: ?*IKEEXT_POLICY2,
        dataBuffer: ?*FWP_BYTE_BLOB,
        classifyOptions: ?*FWPM_CLASSIFY_OPTIONS0,
        ikeV2QmTunnelPolicy: ?*IPSEC_TUNNEL_POLICY3_,
        ikeV2QmTransportPolicy: ?*IPSEC_TRANSPORT_POLICY2,
        ikeV2MmPolicy: ?*IKEEXT_POLICY2,
        idpOptions: ?*IPSEC_DOSP_OPTIONS0,
    },
    providerContextId: u64,
};

pub const FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0 = extern struct {
    providerKey: ?*Guid,
    providerContextType: FWPM_PROVIDER_CONTEXT_TYPE,
};

pub const FWPM_PROVIDER_CONTEXT_CHANGE0 = extern struct {
    changeType: FWPM_CHANGE_TYPE,
    providerContextKey: Guid,
    providerContextId: u64,
};

pub const FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0 = extern struct {
    enumTemplate: ?*FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0,
    flags: FWPM_SUBSCRIPTION_FLAGS,
    sessionKey: Guid,
};

pub const FWPM_SUBLAYER0 = extern struct {
    subLayerKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    providerKey: ?*Guid,
    providerData: FWP_BYTE_BLOB,
    weight: u16,
};

pub const FWPM_SUBLAYER_ENUM_TEMPLATE0 = extern struct {
    providerKey: ?*Guid,
};

pub const FWPM_SUBLAYER_CHANGE0 = extern struct {
    changeType: FWPM_CHANGE_TYPE,
    subLayerKey: Guid,
};

pub const FWPM_SUBLAYER_SUBSCRIPTION0 = extern struct {
    enumTemplate: ?*FWPM_SUBLAYER_ENUM_TEMPLATE0,
    flags: FWPM_SUBSCRIPTION_FLAGS,
    sessionKey: Guid,
};

pub const FWPM_FIELD_TYPE = enum(i32) {
    RAW_DATA = 0,
    IP_ADDRESS = 1,
    FLAGS = 2,
    TYPE_MAX = 3,
};
pub const FWPM_FIELD_RAW_DATA = FWPM_FIELD_TYPE.RAW_DATA;
pub const FWPM_FIELD_IP_ADDRESS = FWPM_FIELD_TYPE.IP_ADDRESS;
pub const FWPM_FIELD_FLAGS = FWPM_FIELD_TYPE.FLAGS;
pub const FWPM_FIELD_TYPE_MAX = FWPM_FIELD_TYPE.TYPE_MAX;

pub const FWPM_FIELD0 = extern struct {
    fieldKey: ?*Guid,
    type: FWPM_FIELD_TYPE,
    dataType: FWP_DATA_TYPE,
};

pub const FWPM_LAYER0 = extern struct {
    layerKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    numFields: u32,
    field: ?*FWPM_FIELD0,
    defaultSubLayerKey: Guid,
    layerId: u16,
};

pub const FWPM_LAYER_ENUM_TEMPLATE0 = extern struct {
    reserved: u64,
};

pub const FWPM_CALLOUT0 = extern struct {
    calloutKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    providerKey: ?*Guid,
    providerData: FWP_BYTE_BLOB,
    applicableLayer: Guid,
    calloutId: u32,
};

pub const FWPM_CALLOUT_ENUM_TEMPLATE0 = extern struct {
    providerKey: ?*Guid,
    layerKey: Guid,
};

pub const FWPM_CALLOUT_CHANGE0 = extern struct {
    changeType: FWPM_CHANGE_TYPE,
    calloutKey: Guid,
    calloutId: u32,
};

pub const FWPM_CALLOUT_SUBSCRIPTION0 = extern struct {
    enumTemplate: ?*FWPM_CALLOUT_ENUM_TEMPLATE0,
    flags: u32,
    sessionKey: Guid,
};

pub const FWPM_ACTION0 = extern struct {
    type: u32,
    Anonymous: extern union {
        filterType: Guid,
        calloutKey: Guid,
    },
};

pub const FWPM_FILTER_CONDITION0 = extern struct {
    fieldKey: Guid,
    matchType: FWP_MATCH_TYPE,
    conditionValue: FWP_CONDITION_VALUE0,
};

pub const FWPM_FILTER0 = extern struct {
    filterKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: FWPM_FILTER_FLAGS,
    providerKey: ?*Guid,
    providerData: FWP_BYTE_BLOB,
    layerKey: Guid,
    subLayerKey: Guid,
    weight: FWP_VALUE0,
    numFilterConditions: u32,
    filterCondition: ?*FWPM_FILTER_CONDITION0,
    action: FWPM_ACTION0,
    Anonymous: extern union {
        rawContext: u64,
        providerContextKey: Guid,
    },
    reserved: ?*Guid,
    filterId: u64,
    effectiveWeight: FWP_VALUE0,
};

pub const FWPM_FILTER_ENUM_TEMPLATE0 = extern struct {
    providerKey: ?*Guid,
    layerKey: Guid,
    enumType: FWP_FILTER_ENUM_TYPE,
    flags: u32,
    providerContextTemplate: ?*FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0,
    numFilterConditions: u32,
    filterCondition: ?*FWPM_FILTER_CONDITION0,
    actionMask: u32,
    calloutKey: ?*Guid,
};

pub const FWPM_FILTER_CHANGE0 = extern struct {
    changeType: FWPM_CHANGE_TYPE,
    filterKey: Guid,
    filterId: u64,
};

pub const FWPM_FILTER_SUBSCRIPTION0 = extern struct {
    enumTemplate: ?*FWPM_FILTER_ENUM_TEMPLATE0,
    flags: u32,
    sessionKey: Guid,
};

pub const FWPM_LAYER_STATISTICS0 = extern struct {
    layerId: Guid,
    classifyPermitCount: u32,
    classifyBlockCount: u32,
    classifyVetoCount: u32,
    numCacheEntries: u32,
};

pub const FWPM_STATISTICS0 = extern struct {
    numLayerStatistics: u32,
    layerStatistics: ?*FWPM_LAYER_STATISTICS0,
    inboundAllowedConnectionsV4: u32,
    inboundBlockedConnectionsV4: u32,
    outboundAllowedConnectionsV4: u32,
    outboundBlockedConnectionsV4: u32,
    inboundAllowedConnectionsV6: u32,
    inboundBlockedConnectionsV6: u32,
    outboundAllowedConnectionsV6: u32,
    outboundBlockedConnectionsV6: u32,
    inboundActiveConnectionsV4: u32,
    outboundActiveConnectionsV4: u32,
    inboundActiveConnectionsV6: u32,
    outboundActiveConnectionsV6: u32,
    reauthDirInbound: u64,
    reauthDirOutbound: u64,
    reauthFamilyV4: u64,
    reauthFamilyV6: u64,
    reauthProtoOther: u64,
    reauthProtoIPv4: u64,
    reauthProtoIPv6: u64,
    reauthProtoICMP: u64,
    reauthProtoICMP6: u64,
    reauthProtoUDP: u64,
    reauthProtoTCP: u64,
    reauthReasonPolicyChange: u64,
    reauthReasonNewArrivalInterface: u64,
    reauthReasonNewNextHopInterface: u64,
    reauthReasonProfileCrossing: u64,
    reauthReasonClassifyCompletion: u64,
    reauthReasonIPSecPropertiesChanged: u64,
    reauthReasonMidStreamInspection: u64,
    reauthReasonSocketPropertyChanged: u64,
    reauthReasonNewInboundMCastBCastPacket: u64,
    reauthReasonEDPPolicyChanged: u64,
    reauthReasonProxyHandleChanged: u64,
};

pub const FWPM_NET_EVENT_HEADER0 = extern struct {
    timeStamp: FILETIME,
    flags: u32,
    ipVersion: FWP_IP_VERSION,
    ipProtocol: u8,
    Anonymous1: extern union {
        localAddrV4: u32,
        localAddrV6: FWP_BYTE_ARRAY16,
    },
    Anonymous2: extern union {
        remoteAddrV4: u32,
        remoteAddrV6: FWP_BYTE_ARRAY16,
    },
    localPort: u16,
    remotePort: u16,
    scopeId: u32,
    appId: FWP_BYTE_BLOB,
    userId: ?*SID,
};

pub const FWPM_NET_EVENT_HEADER1 = extern struct {
    timeStamp: FILETIME,
    flags: u32,
    ipVersion: FWP_IP_VERSION,
    ipProtocol: u8,
    Anonymous1: extern union {
        localAddrV4: u32,
        localAddrV6: FWP_BYTE_ARRAY16,
    },
    Anonymous2: extern union {
        remoteAddrV4: u32,
        remoteAddrV6: FWP_BYTE_ARRAY16,
    },
    localPort: u16,
    remotePort: u16,
    scopeId: u32,
    appId: FWP_BYTE_BLOB,
    userId: ?*SID,
    Anonymous3: extern union {
        Anonymous: extern struct {
            reserved1: FWP_AF,
            Anonymous: extern union {
                Anonymous: extern struct {
                    reserved2: FWP_BYTE_ARRAY6,
                    reserved3: FWP_BYTE_ARRAY6,
                    reserved4: u32,
                    reserved5: u32,
                    reserved6: u16,
                    reserved7: u32,
                    reserved8: u32,
                    reserved9: u16,
                    reserved10: u64,
                },
            },
        },
    },
};

pub const FWPM_NET_EVENT_HEADER2 = extern struct {
    timeStamp: FILETIME,
    flags: u32,
    ipVersion: FWP_IP_VERSION,
    ipProtocol: u8,
    Anonymous1: extern union {
        localAddrV4: u32,
        localAddrV6: FWP_BYTE_ARRAY16,
    },
    Anonymous2: extern union {
        remoteAddrV4: u32,
        remoteAddrV6: FWP_BYTE_ARRAY16,
    },
    localPort: u16,
    remotePort: u16,
    scopeId: u32,
    appId: FWP_BYTE_BLOB,
    userId: ?*SID,
    addressFamily: FWP_AF,
    packageSid: ?*SID,
};

pub const FWPM_NET_EVENT_HEADER3 = extern struct {
    timeStamp: FILETIME,
    flags: u32,
    ipVersion: FWP_IP_VERSION,
    ipProtocol: u8,
    Anonymous1: extern union {
        localAddrV4: u32,
        localAddrV6: FWP_BYTE_ARRAY16,
    },
    Anonymous2: extern union {
        remoteAddrV4: u32,
        remoteAddrV6: FWP_BYTE_ARRAY16,
    },
    localPort: u16,
    remotePort: u16,
    scopeId: u32,
    appId: FWP_BYTE_BLOB,
    userId: ?*SID,
    addressFamily: FWP_AF,
    packageSid: ?*SID,
    enterpriseId: ?PWSTR,
    policyFlags: u64,
    effectiveName: FWP_BYTE_BLOB,
};

pub const FWPM_NET_EVENT_TYPE = enum(i32) {
    IKEEXT_MM_FAILURE = 0,
    IKEEXT_QM_FAILURE = 1,
    IKEEXT_EM_FAILURE = 2,
    CLASSIFY_DROP = 3,
    IPSEC_KERNEL_DROP = 4,
    IPSEC_DOSP_DROP = 5,
    CLASSIFY_ALLOW = 6,
    CAPABILITY_DROP = 7,
    CAPABILITY_ALLOW = 8,
    CLASSIFY_DROP_MAC = 9,
    LPM_PACKET_ARRIVAL = 10,
    MAX = 11,
};
pub const FWPM_NET_EVENT_TYPE_IKEEXT_MM_FAILURE = FWPM_NET_EVENT_TYPE.IKEEXT_MM_FAILURE;
pub const FWPM_NET_EVENT_TYPE_IKEEXT_QM_FAILURE = FWPM_NET_EVENT_TYPE.IKEEXT_QM_FAILURE;
pub const FWPM_NET_EVENT_TYPE_IKEEXT_EM_FAILURE = FWPM_NET_EVENT_TYPE.IKEEXT_EM_FAILURE;
pub const FWPM_NET_EVENT_TYPE_CLASSIFY_DROP = FWPM_NET_EVENT_TYPE.CLASSIFY_DROP;
pub const FWPM_NET_EVENT_TYPE_IPSEC_KERNEL_DROP = FWPM_NET_EVENT_TYPE.IPSEC_KERNEL_DROP;
pub const FWPM_NET_EVENT_TYPE_IPSEC_DOSP_DROP = FWPM_NET_EVENT_TYPE.IPSEC_DOSP_DROP;
pub const FWPM_NET_EVENT_TYPE_CLASSIFY_ALLOW = FWPM_NET_EVENT_TYPE.CLASSIFY_ALLOW;
pub const FWPM_NET_EVENT_TYPE_CAPABILITY_DROP = FWPM_NET_EVENT_TYPE.CAPABILITY_DROP;
pub const FWPM_NET_EVENT_TYPE_CAPABILITY_ALLOW = FWPM_NET_EVENT_TYPE.CAPABILITY_ALLOW;
pub const FWPM_NET_EVENT_TYPE_CLASSIFY_DROP_MAC = FWPM_NET_EVENT_TYPE.CLASSIFY_DROP_MAC;
pub const FWPM_NET_EVENT_TYPE_LPM_PACKET_ARRIVAL = FWPM_NET_EVENT_TYPE.LPM_PACKET_ARRIVAL;
pub const FWPM_NET_EVENT_TYPE_MAX = FWPM_NET_EVENT_TYPE.MAX;

pub const FWPM_NET_EVENT_IKEEXT_MM_FAILURE0 = extern struct {
    failureErrorCode: u32,
    failurePoint: IPSEC_FAILURE_POINT,
    flags: u32,
    keyingModuleType: IKEEXT_KEY_MODULE_TYPE,
    mmState: IKEEXT_MM_SA_STATE,
    saRole: IKEEXT_SA_ROLE,
    mmAuthMethod: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    endCertHash: [20]u8,
    mmId: u64,
    mmFilterId: u64,
};

pub const FWPM_NET_EVENT_IKEEXT_MM_FAILURE1 = extern struct {
    failureErrorCode: u32,
    failurePoint: IPSEC_FAILURE_POINT,
    flags: u32,
    keyingModuleType: IKEEXT_KEY_MODULE_TYPE,
    mmState: IKEEXT_MM_SA_STATE,
    saRole: IKEEXT_SA_ROLE,
    mmAuthMethod: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    endCertHash: [20]u8,
    mmId: u64,
    mmFilterId: u64,
    localPrincipalNameForAuth: ?PWSTR,
    remotePrincipalNameForAuth: ?PWSTR,
    numLocalPrincipalGroupSids: u32,
    localPrincipalGroupSids: ?*?PWSTR,
    numRemotePrincipalGroupSids: u32,
    remotePrincipalGroupSids: ?*?PWSTR,
};

pub const FWPM_NET_EVENT_IKEEXT_MM_FAILURE2_ = extern struct {
    failureErrorCode: u32,
    failurePoint: IPSEC_FAILURE_POINT,
    flags: u32,
    keyingModuleType: IKEEXT_KEY_MODULE_TYPE,
    mmState: IKEEXT_MM_SA_STATE,
    saRole: IKEEXT_SA_ROLE,
    mmAuthMethod: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    endCertHash: [20]u8,
    mmId: u64,
    mmFilterId: u64,
    localPrincipalNameForAuth: ?PWSTR,
    remotePrincipalNameForAuth: ?PWSTR,
    numLocalPrincipalGroupSids: u32,
    localPrincipalGroupSids: ?*?PWSTR,
    numRemotePrincipalGroupSids: u32,
    remotePrincipalGroupSids: ?*?PWSTR,
    providerContextKey: ?*Guid,
};

pub const FWPM_NET_EVENT_IKEEXT_QM_FAILURE0 = extern struct {
    failureErrorCode: u32,
    failurePoint: IPSEC_FAILURE_POINT,
    keyingModuleType: IKEEXT_KEY_MODULE_TYPE,
    qmState: IKEEXT_QM_SA_STATE,
    saRole: IKEEXT_SA_ROLE,
    saTrafficType: IPSEC_TRAFFIC_TYPE,
    Anonymous1: extern union {
        localSubNet: FWP_CONDITION_VALUE0,
    },
    Anonymous2: extern union {
        remoteSubNet: FWP_CONDITION_VALUE0,
    },
    qmFilterId: u64,
};

pub const FWPM_NET_EVENT_IKEEXT_QM_FAILURE1_ = extern struct {
    failureErrorCode: u32,
    failurePoint: IPSEC_FAILURE_POINT,
    keyingModuleType: IKEEXT_KEY_MODULE_TYPE,
    qmState: IKEEXT_QM_SA_STATE,
    saRole: IKEEXT_SA_ROLE,
    saTrafficType: IPSEC_TRAFFIC_TYPE,
    Anonymous1: extern union {
        localSubNet: FWP_CONDITION_VALUE0,
    },
    Anonymous2: extern union {
        remoteSubNet: FWP_CONDITION_VALUE0,
    },
    qmFilterId: u64,
    mmSaLuid: u64,
    mmProviderContextKey: Guid,
};

pub const FWPM_NET_EVENT_IKEEXT_EM_FAILURE0 = extern struct {
    failureErrorCode: u32,
    failurePoint: IPSEC_FAILURE_POINT,
    flags: u32,
    emState: IKEEXT_EM_SA_STATE,
    saRole: IKEEXT_SA_ROLE,
    emAuthMethod: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    endCertHash: [20]u8,
    mmId: u64,
    qmFilterId: u64,
};

pub const FWPM_NET_EVENT_IKEEXT_EM_FAILURE1 = extern struct {
    failureErrorCode: u32,
    failurePoint: IPSEC_FAILURE_POINT,
    flags: u32,
    emState: IKEEXT_EM_SA_STATE,
    saRole: IKEEXT_SA_ROLE,
    emAuthMethod: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    endCertHash: [20]u8,
    mmId: u64,
    qmFilterId: u64,
    localPrincipalNameForAuth: ?PWSTR,
    remotePrincipalNameForAuth: ?PWSTR,
    numLocalPrincipalGroupSids: u32,
    localPrincipalGroupSids: ?*?PWSTR,
    numRemotePrincipalGroupSids: u32,
    remotePrincipalGroupSids: ?*?PWSTR,
    saTrafficType: IPSEC_TRAFFIC_TYPE,
};

pub const FWPM_NET_EVENT_CLASSIFY_DROP0 = extern struct {
    filterId: u64,
    layerId: u16,
};

pub const FWPM_NET_EVENT_CLASSIFY_DROP1 = extern struct {
    filterId: u64,
    layerId: u16,
    reauthReason: u32,
    originalProfile: u32,
    currentProfile: u32,
    msFwpDirection: u32,
    isLoopback: BOOL,
};

pub const FWPM_NET_EVENT_CLASSIFY_DROP2 = extern struct {
    filterId: u64,
    layerId: u16,
    reauthReason: u32,
    originalProfile: u32,
    currentProfile: u32,
    msFwpDirection: u32,
    isLoopback: BOOL,
    vSwitchId: FWP_BYTE_BLOB,
    vSwitchSourcePort: u32,
    vSwitchDestinationPort: u32,
};

pub const FWPM_NET_EVENT_CLASSIFY_DROP_MAC0 = extern struct {
    localMacAddr: FWP_BYTE_ARRAY6,
    remoteMacAddr: FWP_BYTE_ARRAY6,
    mediaType: u32,
    ifType: u32,
    etherType: u16,
    ndisPortNumber: u32,
    reserved: u32,
    vlanTag: u16,
    ifLuid: u64,
    filterId: u64,
    layerId: u16,
    reauthReason: u32,
    originalProfile: u32,
    currentProfile: u32,
    msFwpDirection: u32,
    isLoopback: BOOL,
    vSwitchId: FWP_BYTE_BLOB,
    vSwitchSourcePort: u32,
    vSwitchDestinationPort: u32,
};

pub const FWPM_NET_EVENT_CLASSIFY_ALLOW0 = extern struct {
    filterId: u64,
    layerId: u16,
    reauthReason: u32,
    originalProfile: u32,
    currentProfile: u32,
    msFwpDirection: u32,
    isLoopback: BOOL,
};

pub const FWPM_NET_EVENT_IPSEC_KERNEL_DROP0 = extern struct {
    failureStatus: i32,
    direction: FWP_DIRECTION,
    spi: u32,
    filterId: u64,
    layerId: u16,
};

pub const FWPM_NET_EVENT_IPSEC_DOSP_DROP0 = extern struct {
    ipVersion: FWP_IP_VERSION,
    Anonymous1: extern union {
        publicHostV4Addr: u32,
        publicHostV6Addr: [16]u8,
    },
    Anonymous2: extern union {
        internalHostV4Addr: u32,
        internalHostV6Addr: [16]u8,
    },
    failureStatus: i32,
    direction: FWP_DIRECTION,
};

pub const FWPM_APPC_NETWORK_CAPABILITY_TYPE = enum(i32) {
    CLIENT = 0,
    CLIENT_SERVER = 1,
    PRIVATE_NETWORK = 2,
};
pub const FWPM_APPC_NETWORK_CAPABILITY_INTERNET_CLIENT = FWPM_APPC_NETWORK_CAPABILITY_TYPE.CLIENT;
pub const FWPM_APPC_NETWORK_CAPABILITY_INTERNET_CLIENT_SERVER = FWPM_APPC_NETWORK_CAPABILITY_TYPE.CLIENT_SERVER;
pub const FWPM_APPC_NETWORK_CAPABILITY_INTERNET_PRIVATE_NETWORK = FWPM_APPC_NETWORK_CAPABILITY_TYPE.PRIVATE_NETWORK;

pub const FWPM_NET_EVENT_CAPABILITY_DROP0 = extern struct {
    networkCapabilityId: FWPM_APPC_NETWORK_CAPABILITY_TYPE,
    filterId: u64,
    isLoopback: BOOL,
};

pub const FWPM_NET_EVENT_CAPABILITY_ALLOW0 = extern struct {
    networkCapabilityId: FWPM_APPC_NETWORK_CAPABILITY_TYPE,
    filterId: u64,
    isLoopback: BOOL,
};

pub const FWPM_NET_EVENT_LPM_PACKET_ARRIVAL0_ = extern struct {
    spi: u32,
};

pub const FWPM_NET_EVENT0 = extern struct {
    header: FWPM_NET_EVENT_HEADER0,
    type: FWPM_NET_EVENT_TYPE,
    Anonymous: extern union {
        ikeMmFailure: ?*FWPM_NET_EVENT_IKEEXT_MM_FAILURE0,
        ikeQmFailure: ?*FWPM_NET_EVENT_IKEEXT_QM_FAILURE0,
        ikeEmFailure: ?*FWPM_NET_EVENT_IKEEXT_EM_FAILURE0,
        classifyDrop: ?*FWPM_NET_EVENT_CLASSIFY_DROP0,
        ipsecDrop: ?*FWPM_NET_EVENT_IPSEC_KERNEL_DROP0,
        idpDrop: ?*FWPM_NET_EVENT_IPSEC_DOSP_DROP0,
    },
};

pub const FWPM_NET_EVENT1 = extern struct {
    header: FWPM_NET_EVENT_HEADER1,
    type: FWPM_NET_EVENT_TYPE,
    Anonymous: extern union {
        ikeMmFailure: ?*FWPM_NET_EVENT_IKEEXT_MM_FAILURE1,
        ikeQmFailure: ?*FWPM_NET_EVENT_IKEEXT_QM_FAILURE0,
        ikeEmFailure: ?*FWPM_NET_EVENT_IKEEXT_EM_FAILURE1,
        classifyDrop: ?*FWPM_NET_EVENT_CLASSIFY_DROP1,
        ipsecDrop: ?*FWPM_NET_EVENT_IPSEC_KERNEL_DROP0,
        idpDrop: ?*FWPM_NET_EVENT_IPSEC_DOSP_DROP0,
    },
};

pub const FWPM_NET_EVENT2 = extern struct {
    header: FWPM_NET_EVENT_HEADER2,
    type: FWPM_NET_EVENT_TYPE,
    Anonymous: extern union {
        ikeMmFailure: ?*FWPM_NET_EVENT_IKEEXT_MM_FAILURE1,
        ikeQmFailure: ?*FWPM_NET_EVENT_IKEEXT_QM_FAILURE0,
        ikeEmFailure: ?*FWPM_NET_EVENT_IKEEXT_EM_FAILURE1,
        classifyDrop: ?*FWPM_NET_EVENT_CLASSIFY_DROP2,
        ipsecDrop: ?*FWPM_NET_EVENT_IPSEC_KERNEL_DROP0,
        idpDrop: ?*FWPM_NET_EVENT_IPSEC_DOSP_DROP0,
        classifyAllow: ?*FWPM_NET_EVENT_CLASSIFY_ALLOW0,
        capabilityDrop: ?*FWPM_NET_EVENT_CAPABILITY_DROP0,
        capabilityAllow: ?*FWPM_NET_EVENT_CAPABILITY_ALLOW0,
        classifyDropMac: ?*FWPM_NET_EVENT_CLASSIFY_DROP_MAC0,
    },
};

pub const FWPM_NET_EVENT3 = extern struct {
    header: FWPM_NET_EVENT_HEADER3,
    type: FWPM_NET_EVENT_TYPE,
    Anonymous: extern union {
        ikeMmFailure: ?*FWPM_NET_EVENT_IKEEXT_MM_FAILURE1,
        ikeQmFailure: ?*FWPM_NET_EVENT_IKEEXT_QM_FAILURE0,
        ikeEmFailure: ?*FWPM_NET_EVENT_IKEEXT_EM_FAILURE1,
        classifyDrop: ?*FWPM_NET_EVENT_CLASSIFY_DROP2,
        ipsecDrop: ?*FWPM_NET_EVENT_IPSEC_KERNEL_DROP0,
        idpDrop: ?*FWPM_NET_EVENT_IPSEC_DOSP_DROP0,
        classifyAllow: ?*FWPM_NET_EVENT_CLASSIFY_ALLOW0,
        capabilityDrop: ?*FWPM_NET_EVENT_CAPABILITY_DROP0,
        capabilityAllow: ?*FWPM_NET_EVENT_CAPABILITY_ALLOW0,
        classifyDropMac: ?*FWPM_NET_EVENT_CLASSIFY_DROP_MAC0,
    },
};

pub const FWPM_NET_EVENT4_ = extern struct {
    header: FWPM_NET_EVENT_HEADER3,
    type: FWPM_NET_EVENT_TYPE,
    Anonymous: extern union {
        ikeMmFailure: ?*FWPM_NET_EVENT_IKEEXT_MM_FAILURE2_,
        ikeQmFailure: ?*FWPM_NET_EVENT_IKEEXT_QM_FAILURE1_,
        ikeEmFailure: ?*FWPM_NET_EVENT_IKEEXT_EM_FAILURE1,
        classifyDrop: ?*FWPM_NET_EVENT_CLASSIFY_DROP2,
        ipsecDrop: ?*FWPM_NET_EVENT_IPSEC_KERNEL_DROP0,
        idpDrop: ?*FWPM_NET_EVENT_IPSEC_DOSP_DROP0,
        classifyAllow: ?*FWPM_NET_EVENT_CLASSIFY_ALLOW0,
        capabilityDrop: ?*FWPM_NET_EVENT_CAPABILITY_DROP0,
        capabilityAllow: ?*FWPM_NET_EVENT_CAPABILITY_ALLOW0,
        classifyDropMac: ?*FWPM_NET_EVENT_CLASSIFY_DROP_MAC0,
    },
};

pub const FWPM_NET_EVENT5_ = extern struct {
    header: FWPM_NET_EVENT_HEADER3,
    type: FWPM_NET_EVENT_TYPE,
    Anonymous: extern union {
        ikeMmFailure: ?*FWPM_NET_EVENT_IKEEXT_MM_FAILURE2_,
        ikeQmFailure: ?*FWPM_NET_EVENT_IKEEXT_QM_FAILURE1_,
        ikeEmFailure: ?*FWPM_NET_EVENT_IKEEXT_EM_FAILURE1,
        classifyDrop: ?*FWPM_NET_EVENT_CLASSIFY_DROP2,
        ipsecDrop: ?*FWPM_NET_EVENT_IPSEC_KERNEL_DROP0,
        idpDrop: ?*FWPM_NET_EVENT_IPSEC_DOSP_DROP0,
        classifyAllow: ?*FWPM_NET_EVENT_CLASSIFY_ALLOW0,
        capabilityDrop: ?*FWPM_NET_EVENT_CAPABILITY_DROP0,
        capabilityAllow: ?*FWPM_NET_EVENT_CAPABILITY_ALLOW0,
        classifyDropMac: ?*FWPM_NET_EVENT_CLASSIFY_DROP_MAC0,
        lpmPacketArrival: ?*FWPM_NET_EVENT_LPM_PACKET_ARRIVAL0_,
    },
};

pub const FWPM_NET_EVENT_ENUM_TEMPLATE0 = extern struct {
    startTime: FILETIME,
    endTime: FILETIME,
    numFilterConditions: u32,
    filterCondition: ?*FWPM_FILTER_CONDITION0,
};

pub const FWPM_NET_EVENT_SUBSCRIPTION0 = extern struct {
    enumTemplate: ?*FWPM_NET_EVENT_ENUM_TEMPLATE0,
    flags: u32,
    sessionKey: Guid,
};

pub const FWPM_SYSTEM_PORT_TYPE = enum(i32) {
    RPC_EPMAP = 0,
    TEREDO = 1,
    IPHTTPS_IN = 2,
    IPHTTPS_OUT = 3,
    TYPE_MAX = 4,
};
pub const FWPM_SYSTEM_PORT_RPC_EPMAP = FWPM_SYSTEM_PORT_TYPE.RPC_EPMAP;
pub const FWPM_SYSTEM_PORT_TEREDO = FWPM_SYSTEM_PORT_TYPE.TEREDO;
pub const FWPM_SYSTEM_PORT_IPHTTPS_IN = FWPM_SYSTEM_PORT_TYPE.IPHTTPS_IN;
pub const FWPM_SYSTEM_PORT_IPHTTPS_OUT = FWPM_SYSTEM_PORT_TYPE.IPHTTPS_OUT;
pub const FWPM_SYSTEM_PORT_TYPE_MAX = FWPM_SYSTEM_PORT_TYPE.TYPE_MAX;

pub const FWPM_SYSTEM_PORTS_BY_TYPE0 = extern struct {
    type: FWPM_SYSTEM_PORT_TYPE,
    numPorts: u32,
    ports: ?*u16,
};

pub const FWPM_SYSTEM_PORTS0 = extern struct {
    numTypes: u32,
    types: ?*FWPM_SYSTEM_PORTS_BY_TYPE0,
};

pub const FWPM_CONNECTION0 = extern struct {
    connectionId: u64,
    ipVersion: FWP_IP_VERSION,
    Anonymous1: extern union {
        localV4Address: u32,
        localV6Address: [16]u8,
    },
    Anonymous2: extern union {
        remoteV4Address: u32,
        remoteV6Address: [16]u8,
    },
    providerKey: ?*Guid,
    ipsecTrafficModeType: IPSEC_TRAFFIC_TYPE,
    keyModuleType: IKEEXT_KEY_MODULE_TYPE,
    mmCrypto: IKEEXT_PROPOSAL0,
    mmPeer: IKEEXT_CREDENTIAL2,
    emPeer: IKEEXT_CREDENTIAL2,
    bytesTransferredIn: u64,
    bytesTransferredOut: u64,
    bytesTransferredTotal: u64,
    startSysTime: FILETIME,
};

pub const FWPM_CONNECTION_ENUM_TEMPLATE0 = extern struct {
    connectionId: u64,
    flags: u32,
};

pub const FWPM_CONNECTION_SUBSCRIPTION0 = extern struct {
    enumTemplate: ?*FWPM_CONNECTION_ENUM_TEMPLATE0,
    flags: u32,
    sessionKey: Guid,
};

pub const FWPM_CONNECTION_EVENT_TYPE = enum(i32) {
    ADD = 0,
    DELETE = 1,
    MAX = 2,
};
pub const FWPM_CONNECTION_EVENT_ADD = FWPM_CONNECTION_EVENT_TYPE.ADD;
pub const FWPM_CONNECTION_EVENT_DELETE = FWPM_CONNECTION_EVENT_TYPE.DELETE;
pub const FWPM_CONNECTION_EVENT_MAX = FWPM_CONNECTION_EVENT_TYPE.MAX;

pub const FWPM_VSWITCH_EVENT_TYPE = enum(i32) {
    FILTER_ADD_TO_INCOMPLETE_LAYER = 0,
    FILTER_ENGINE_NOT_IN_REQUIRED_POSITION = 1,
    ENABLED_FOR_INSPECTION = 2,
    DISABLED_FOR_INSPECTION = 3,
    FILTER_ENGINE_REORDER = 4,
    MAX = 5,
};
pub const FWPM_VSWITCH_EVENT_FILTER_ADD_TO_INCOMPLETE_LAYER = FWPM_VSWITCH_EVENT_TYPE.FILTER_ADD_TO_INCOMPLETE_LAYER;
pub const FWPM_VSWITCH_EVENT_FILTER_ENGINE_NOT_IN_REQUIRED_POSITION = FWPM_VSWITCH_EVENT_TYPE.FILTER_ENGINE_NOT_IN_REQUIRED_POSITION;
pub const FWPM_VSWITCH_EVENT_ENABLED_FOR_INSPECTION = FWPM_VSWITCH_EVENT_TYPE.ENABLED_FOR_INSPECTION;
pub const FWPM_VSWITCH_EVENT_DISABLED_FOR_INSPECTION = FWPM_VSWITCH_EVENT_TYPE.DISABLED_FOR_INSPECTION;
pub const FWPM_VSWITCH_EVENT_FILTER_ENGINE_REORDER = FWPM_VSWITCH_EVENT_TYPE.FILTER_ENGINE_REORDER;
pub const FWPM_VSWITCH_EVENT_MAX = FWPM_VSWITCH_EVENT_TYPE.MAX;

pub const FWPM_VSWITCH_EVENT0 = extern struct {
    eventType: FWPM_VSWITCH_EVENT_TYPE,
    vSwitchId: ?PWSTR,
    Anonymous: extern union {
        positionInfo: extern struct {
            numvSwitchFilterExtensions: u32,
            vSwitchFilterExtensions: ?*?PWSTR,
        },
        reorderInfo: extern struct {
            inRequiredPosition: BOOL,
            numvSwitchFilterExtensions: u32,
            vSwitchFilterExtensions: ?*?PWSTR,
        },
    },
};

pub const FWPM_VSWITCH_EVENT_SUBSCRIPTION0 = extern struct {
    flags: u32,
    sessionKey: Guid,
};

pub const FWPM_PROVIDER_CHANGE_CALLBACK0 = *const fn(
    context: ?*anyopaque,
    change: ?*const FWPM_PROVIDER_CHANGE0,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FWPM_PROVIDER_CONTEXT_CHANGE_CALLBACK0 = *const fn(
    context: ?*anyopaque,
    change: ?*const FWPM_PROVIDER_CONTEXT_CHANGE0,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FWPM_SUBLAYER_CHANGE_CALLBACK0 = *const fn(
    context: ?*anyopaque,
    change: ?*const FWPM_SUBLAYER_CHANGE0,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FWPM_CALLOUT_CHANGE_CALLBACK0 = *const fn(
    context: ?*anyopaque,
    change: ?*const FWPM_CALLOUT_CHANGE0,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FWPM_FILTER_CHANGE_CALLBACK0 = *const fn(
    context: ?*anyopaque,
    change: ?*const FWPM_FILTER_CHANGE0,
) callconv(@import("std").os.windows.WINAPI) void;

pub const IPSEC_SA_CONTEXT_CALLBACK0 = *const fn(
    context: ?*anyopaque,
    change: ?*const IPSEC_SA_CONTEXT_CHANGE0,
) callconv(@import("std").os.windows.WINAPI) void;

pub const IPSEC_KEY_MANAGER_KEY_DICTATION_CHECK0 = *const fn(
    ikeTraffic: ?*const IKEEXT_TRAFFIC0,
    willDictateKey: ?*BOOL,
    weight: ?*u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const IPSEC_KEY_MANAGER_DICTATE_KEY0 = *const fn(
    inboundSaDetails: ?*IPSEC_SA_DETAILS1,
    outboundSaDetails: ?*IPSEC_SA_DETAILS1,
    keyingModuleGenKey: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const IPSEC_KEY_MANAGER_NOTIFY_KEY0 = *const fn(
    inboundSa: ?*const IPSEC_SA_DETAILS1,
    outboundSa: ?*const IPSEC_SA_DETAILS1,
) callconv(@import("std").os.windows.WINAPI) void;

pub const IPSEC_KEY_MANAGER_CALLBACKS0 = extern struct {
    reserved: Guid,
    flags: u32,
    keyDictationCheck: ?IPSEC_KEY_MANAGER_KEY_DICTATION_CHECK0,
    keyDictation: ?IPSEC_KEY_MANAGER_DICTATE_KEY0,
    keyNotify: ?IPSEC_KEY_MANAGER_NOTIFY_KEY0,
};

pub const FWPM_NET_EVENT_CALLBACK0 = *const fn(
    context: ?*anyopaque,
    event: ?*const FWPM_NET_EVENT1,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FWPM_NET_EVENT_CALLBACK1 = *const fn(
    context: ?*anyopaque,
    event: ?*const FWPM_NET_EVENT2,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FWPM_NET_EVENT_CALLBACK2 = *const fn(
    context: ?*anyopaque,
    event: ?*const FWPM_NET_EVENT3,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FWPM_NET_EVENT_CALLBACK3 = *const fn(
    context: ?*anyopaque,
    event: ?*const FWPM_NET_EVENT4_,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FWPM_NET_EVENT_CALLBACK4 = *const fn(
    context: ?*anyopaque,
    event: ?*const FWPM_NET_EVENT5_,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FWPM_DYNAMIC_KEYWORD_CALLBACK0 = *const fn(
    notification: ?*anyopaque,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FWPM_SYSTEM_PORTS_CALLBACK0 = *const fn(
    context: ?*anyopaque,
    sysPorts: ?*const FWPM_SYSTEM_PORTS0,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FWPM_CONNECTION_CALLBACK0 = *const fn(
    context: ?*anyopaque,
    eventType: FWPM_CONNECTION_EVENT_TYPE,
    connection: ?*const FWPM_CONNECTION0,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FWPM_VSWITCH_EVENT_CALLBACK0 = *const fn(
    context: ?*anyopaque,
    vSwitchEvent: ?*const FWPM_VSWITCH_EVENT0,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Functions (186)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmFreeMemory0(
    p: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmEngineOpen0(
    serverName: ?[*:0]const u16,
    authnService: u32,
    authIdentity: ?*SEC_WINNT_AUTH_IDENTITY_W,
    session: ?*const FWPM_SESSION0,
    engineHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmEngineClose0(
    engineHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmEngineGetOption0(
    engineHandle: ?HANDLE,
    option: FWPM_ENGINE_OPTION,
    value: ?*?*FWP_VALUE0,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmEngineSetOption0(
    engineHandle: ?HANDLE,
    option: FWPM_ENGINE_OPTION,
    newValue: ?*const FWP_VALUE0,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmEngineGetSecurityInfo0(
    engineHandle: ?HANDLE,
    securityInfo: u32,
    sidOwner: ?*?PSID,
    sidGroup: ?*?PSID,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmEngineSetSecurityInfo0(
    engineHandle: ?HANDLE,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmSessionCreateEnumHandle0(
    engineHandle: ?HANDLE,
    enumTemplate: ?*const FWPM_SESSION_ENUM_TEMPLATE0,
    enumHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmSessionEnum0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_SESSION0,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmSessionDestroyEnumHandle0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmTransactionBegin0(
    engineHandle: ?HANDLE,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmTransactionCommit0(
    engineHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmTransactionAbort0(
    engineHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmProviderAdd0(
    engineHandle: ?HANDLE,
    provider: ?*const FWPM_PROVIDER0,
    sd: ?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmProviderDeleteByKey0(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmProviderGetByKey0(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
    provider: ?*?*FWPM_PROVIDER0,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmProviderCreateEnumHandle0(
    engineHandle: ?HANDLE,
    enumTemplate: ?*const FWPM_PROVIDER_ENUM_TEMPLATE0,
    enumHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmProviderEnum0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_PROVIDER0,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmProviderDestroyEnumHandle0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmProviderGetSecurityInfoByKey0(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
    securityInfo: u32,
    sidOwner: ?*?PSID,
    sidGroup: ?*?PSID,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmProviderSetSecurityInfoByKey0(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmProviderSubscribeChanges0(
    engineHandle: ?HANDLE,
    subscription: ?*const FWPM_PROVIDER_SUBSCRIPTION0,
    callback: ?FWPM_PROVIDER_CHANGE_CALLBACK0,
    context: ?*anyopaque,
    changeHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmProviderUnsubscribeChanges0(
    engineHandle: ?HANDLE,
    changeHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmProviderSubscriptionsGet0(
    engineHandle: ?HANDLE,
    entries: ?*?*?*FWPM_PROVIDER_SUBSCRIPTION0,
    numEntries: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmProviderContextAdd0(
    engineHandle: ?HANDLE,
    providerContext: ?*const FWPM_PROVIDER_CONTEXT0,
    sd: ?PSECURITY_DESCRIPTOR,
    id: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn FwpmProviderContextAdd1(
    engineHandle: ?HANDLE,
    providerContext: ?*const FWPM_PROVIDER_CONTEXT1,
    sd: ?PSECURITY_DESCRIPTOR,
    id: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn FwpmProviderContextAdd2(
    engineHandle: ?HANDLE,
    providerContext: ?*const FWPM_PROVIDER_CONTEXT2,
    sd: ?PSECURITY_DESCRIPTOR,
    id: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextAdd3(
    engineHandle: ?HANDLE,
    providerContext: ?*const FWPM_PROVIDER_CONTEXT3_,
    sd: ?PSECURITY_DESCRIPTOR,
    id: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmProviderContextDeleteById0(
    engineHandle: ?HANDLE,
    id: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmProviderContextDeleteByKey0(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmProviderContextGetById0(
    engineHandle: ?HANDLE,
    id: u64,
    providerContext: ?*?*FWPM_PROVIDER_CONTEXT0,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn FwpmProviderContextGetById1(
    engineHandle: ?HANDLE,
    id: u64,
    providerContext: ?*?*FWPM_PROVIDER_CONTEXT1,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn FwpmProviderContextGetById2(
    engineHandle: ?HANDLE,
    id: u64,
    providerContext: ?*?*FWPM_PROVIDER_CONTEXT2,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextGetById3(
    engineHandle: ?HANDLE,
    id: u64,
    providerContext: ?*?*FWPM_PROVIDER_CONTEXT3_,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmProviderContextGetByKey0(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
    providerContext: ?*?*FWPM_PROVIDER_CONTEXT0,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn FwpmProviderContextGetByKey1(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
    providerContext: ?*?*FWPM_PROVIDER_CONTEXT1,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn FwpmProviderContextGetByKey2(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
    providerContext: ?*?*FWPM_PROVIDER_CONTEXT2,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextGetByKey3(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
    providerContext: ?*?*FWPM_PROVIDER_CONTEXT3_,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmProviderContextCreateEnumHandle0(
    engineHandle: ?HANDLE,
    enumTemplate: ?*const FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0,
    enumHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmProviderContextEnum0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_PROVIDER_CONTEXT0,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn FwpmProviderContextEnum1(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_PROVIDER_CONTEXT1,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn FwpmProviderContextEnum2(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_PROVIDER_CONTEXT2,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextEnum3(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_PROVIDER_CONTEXT3_,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmProviderContextDestroyEnumHandle0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmProviderContextGetSecurityInfoByKey0(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
    securityInfo: u32,
    sidOwner: ?*?PSID,
    sidGroup: ?*?PSID,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmProviderContextSetSecurityInfoByKey0(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmProviderContextSubscribeChanges0(
    engineHandle: ?HANDLE,
    subscription: ?*const FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0,
    callback: ?FWPM_PROVIDER_CONTEXT_CHANGE_CALLBACK0,
    context: ?*anyopaque,
    changeHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmProviderContextUnsubscribeChanges0(
    engineHandle: ?HANDLE,
    changeHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmProviderContextSubscriptionsGet0(
    engineHandle: ?HANDLE,
    entries: ?*?*?*FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0,
    numEntries: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmSubLayerAdd0(
    engineHandle: ?HANDLE,
    subLayer: ?*const FWPM_SUBLAYER0,
    sd: ?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmSubLayerDeleteByKey0(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmSubLayerGetByKey0(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
    subLayer: ?*?*FWPM_SUBLAYER0,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmSubLayerCreateEnumHandle0(
    engineHandle: ?HANDLE,
    enumTemplate: ?*const FWPM_SUBLAYER_ENUM_TEMPLATE0,
    enumHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmSubLayerEnum0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_SUBLAYER0,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmSubLayerDestroyEnumHandle0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmSubLayerGetSecurityInfoByKey0(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
    securityInfo: u32,
    sidOwner: ?*?PSID,
    sidGroup: ?*?PSID,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmSubLayerSetSecurityInfoByKey0(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmSubLayerSubscribeChanges0(
    engineHandle: ?HANDLE,
    subscription: ?*const FWPM_SUBLAYER_SUBSCRIPTION0,
    callback: ?FWPM_SUBLAYER_CHANGE_CALLBACK0,
    context: ?*anyopaque,
    changeHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmSubLayerUnsubscribeChanges0(
    engineHandle: ?HANDLE,
    changeHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmSubLayerSubscriptionsGet0(
    engineHandle: ?HANDLE,
    entries: ?*?*?*FWPM_SUBLAYER_SUBSCRIPTION0,
    numEntries: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmLayerGetById0(
    engineHandle: ?HANDLE,
    id: u16,
    layer: ?*?*FWPM_LAYER0,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmLayerGetByKey0(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
    layer: ?*?*FWPM_LAYER0,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmLayerCreateEnumHandle0(
    engineHandle: ?HANDLE,
    enumTemplate: ?*const FWPM_LAYER_ENUM_TEMPLATE0,
    enumHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmLayerEnum0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_LAYER0,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmLayerDestroyEnumHandle0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmLayerGetSecurityInfoByKey0(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
    securityInfo: u32,
    sidOwner: ?*?PSID,
    sidGroup: ?*?PSID,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmLayerSetSecurityInfoByKey0(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmCalloutAdd0(
    engineHandle: ?HANDLE,
    callout: ?*const FWPM_CALLOUT0,
    sd: ?PSECURITY_DESCRIPTOR,
    id: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmCalloutDeleteById0(
    engineHandle: ?HANDLE,
    id: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmCalloutDeleteByKey0(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmCalloutGetById0(
    engineHandle: ?HANDLE,
    id: u32,
    callout: ?*?*FWPM_CALLOUT0,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmCalloutGetByKey0(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
    callout: ?*?*FWPM_CALLOUT0,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmCalloutCreateEnumHandle0(
    engineHandle: ?HANDLE,
    enumTemplate: ?*const FWPM_CALLOUT_ENUM_TEMPLATE0,
    enumHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmCalloutEnum0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_CALLOUT0,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmCalloutDestroyEnumHandle0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmCalloutGetSecurityInfoByKey0(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
    securityInfo: u32,
    sidOwner: ?*?PSID,
    sidGroup: ?*?PSID,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmCalloutSetSecurityInfoByKey0(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmCalloutSubscribeChanges0(
    engineHandle: ?HANDLE,
    subscription: ?*const FWPM_CALLOUT_SUBSCRIPTION0,
    callback: ?FWPM_CALLOUT_CHANGE_CALLBACK0,
    context: ?*anyopaque,
    changeHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmCalloutUnsubscribeChanges0(
    engineHandle: ?HANDLE,
    changeHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmCalloutSubscriptionsGet0(
    engineHandle: ?HANDLE,
    entries: ?*?*?*FWPM_CALLOUT_SUBSCRIPTION0,
    numEntries: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmFilterAdd0(
    engineHandle: ?HANDLE,
    filter: ?*const FWPM_FILTER0,
    sd: ?PSECURITY_DESCRIPTOR,
    id: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmFilterDeleteById0(
    engineHandle: ?HANDLE,
    id: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmFilterDeleteByKey0(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmFilterGetById0(
    engineHandle: ?HANDLE,
    id: u64,
    filter: ?*?*FWPM_FILTER0,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmFilterGetByKey0(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
    filter: ?*?*FWPM_FILTER0,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmFilterCreateEnumHandle0(
    engineHandle: ?HANDLE,
    enumTemplate: ?*const FWPM_FILTER_ENUM_TEMPLATE0,
    enumHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmFilterEnum0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_FILTER0,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmFilterDestroyEnumHandle0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmFilterGetSecurityInfoByKey0(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
    securityInfo: u32,
    sidOwner: ?*?PSID,
    sidGroup: ?*?PSID,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmFilterSetSecurityInfoByKey0(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmFilterSubscribeChanges0(
    engineHandle: ?HANDLE,
    subscription: ?*const FWPM_FILTER_SUBSCRIPTION0,
    callback: ?FWPM_FILTER_CHANGE_CALLBACK0,
    context: ?*anyopaque,
    changeHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmFilterUnsubscribeChanges0(
    engineHandle: ?HANDLE,
    changeHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmFilterSubscriptionsGet0(
    engineHandle: ?HANDLE,
    entries: ?*?*?*FWPM_FILTER_SUBSCRIPTION0,
    numEntries: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmGetAppIdFromFileName0(
    fileName: ?[*:0]const u16,
    appId: ?*?*FWP_BYTE_BLOB,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmIPsecTunnelAdd0(
    engineHandle: ?HANDLE,
    flags: u32,
    mainModePolicy: ?*const FWPM_PROVIDER_CONTEXT0,
    tunnelPolicy: ?*const FWPM_PROVIDER_CONTEXT0,
    numFilterConditions: u32,
    filterConditions: [*]const FWPM_FILTER_CONDITION0,
    sd: ?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn FwpmIPsecTunnelAdd1(
    engineHandle: ?HANDLE,
    flags: u32,
    mainModePolicy: ?*const FWPM_PROVIDER_CONTEXT1,
    tunnelPolicy: ?*const FWPM_PROVIDER_CONTEXT1,
    numFilterConditions: u32,
    filterConditions: [*]const FWPM_FILTER_CONDITION0,
    keyModKey: ?*const Guid,
    sd: ?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn FwpmIPsecTunnelAdd2(
    engineHandle: ?HANDLE,
    flags: u32,
    mainModePolicy: ?*const FWPM_PROVIDER_CONTEXT2,
    tunnelPolicy: ?*const FWPM_PROVIDER_CONTEXT2,
    numFilterConditions: u32,
    filterConditions: [*]const FWPM_FILTER_CONDITION0,
    keyModKey: ?*const Guid,
    sd: ?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmIPsecTunnelAdd3(
    engineHandle: ?HANDLE,
    flags: u32,
    mainModePolicy: ?*const FWPM_PROVIDER_CONTEXT3_,
    tunnelPolicy: ?*const FWPM_PROVIDER_CONTEXT3_,
    numFilterConditions: u32,
    filterConditions: [*]const FWPM_FILTER_CONDITION0,
    keyModKey: ?*const Guid,
    sd: ?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmIPsecTunnelDeleteByKey0(
    engineHandle: ?HANDLE,
    key: ?*const Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn IPsecGetStatistics0(
    engineHandle: ?HANDLE,
    ipsecStatistics: ?*IPSEC_STATISTICS0,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn IPsecGetStatistics1(
    engineHandle: ?HANDLE,
    ipsecStatistics: ?*IPSEC_STATISTICS1,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn IPsecSaContextCreate0(
    engineHandle: ?HANDLE,
    outboundTraffic: ?*const IPSEC_TRAFFIC0,
    inboundFilterId: ?*u64,
    id: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn IPsecSaContextCreate1(
    engineHandle: ?HANDLE,
    outboundTraffic: ?*const IPSEC_TRAFFIC1,
    virtualIfTunnelInfo: ?*const IPSEC_VIRTUAL_IF_TUNNEL_INFO0,
    inboundFilterId: ?*u64,
    id: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn IPsecSaContextDeleteById0(
    engineHandle: ?HANDLE,
    id: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn IPsecSaContextGetById0(
    engineHandle: ?HANDLE,
    id: u64,
    saContext: ?*?*IPSEC_SA_CONTEXT0,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn IPsecSaContextGetById1(
    engineHandle: ?HANDLE,
    id: u64,
    saContext: ?*?*IPSEC_SA_CONTEXT1,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn IPsecSaContextGetSpi0(
    engineHandle: ?HANDLE,
    id: u64,
    getSpi: ?*const IPSEC_GETSPI0,
    inboundSpi: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn IPsecSaContextGetSpi1(
    engineHandle: ?HANDLE,
    id: u64,
    getSpi: ?*const IPSEC_GETSPI1,
    inboundSpi: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn IPsecSaContextSetSpi0(
    engineHandle: ?HANDLE,
    id: u64,
    getSpi: ?*const IPSEC_GETSPI1,
    inboundSpi: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn IPsecSaContextAddInbound0(
    engineHandle: ?HANDLE,
    id: u64,
    inboundBundle: ?*const IPSEC_SA_BUNDLE0,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn IPsecSaContextAddOutbound0(
    engineHandle: ?HANDLE,
    id: u64,
    outboundBundle: ?*const IPSEC_SA_BUNDLE0,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn IPsecSaContextAddInbound1(
    engineHandle: ?HANDLE,
    id: u64,
    inboundBundle: ?*const IPSEC_SA_BUNDLE1,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn IPsecSaContextAddOutbound1(
    engineHandle: ?HANDLE,
    id: u64,
    outboundBundle: ?*const IPSEC_SA_BUNDLE1,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn IPsecSaContextExpire0(
    engineHandle: ?HANDLE,
    id: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn IPsecSaContextUpdate0(
    engineHandle: ?HANDLE,
    flags: u64,
    newValues: ?*const IPSEC_SA_CONTEXT1,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn IPsecSaContextCreateEnumHandle0(
    engineHandle: ?HANDLE,
    enumTemplate: ?*const IPSEC_SA_CONTEXT_ENUM_TEMPLATE0,
    enumHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn IPsecSaContextEnum0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*IPSEC_SA_CONTEXT0,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn IPsecSaContextEnum1(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*IPSEC_SA_CONTEXT1,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn IPsecSaContextDestroyEnumHandle0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn IPsecSaContextSubscribe0(
    engineHandle: ?HANDLE,
    subscription: ?*const IPSEC_SA_CONTEXT_SUBSCRIPTION0,
    callback: ?IPSEC_SA_CONTEXT_CALLBACK0,
    context: ?*anyopaque,
    eventsHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn IPsecSaContextUnsubscribe0(
    engineHandle: ?HANDLE,
    eventsHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn IPsecSaContextSubscriptionsGet0(
    engineHandle: ?HANDLE,
    entries: ?*?*?*IPSEC_SA_CONTEXT_SUBSCRIPTION0,
    numEntries: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn IPsecSaCreateEnumHandle0(
    engineHandle: ?HANDLE,
    enumTemplate: ?*const IPSEC_SA_ENUM_TEMPLATE0,
    enumHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn IPsecSaEnum0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*IPSEC_SA_DETAILS0,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn IPsecSaEnum1(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*IPSEC_SA_DETAILS1,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn IPsecSaDestroyEnumHandle0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn IPsecSaDbGetSecurityInfo0(
    engineHandle: ?HANDLE,
    securityInfo: u32,
    sidOwner: ?*?PSID,
    sidGroup: ?*?PSID,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn IPsecSaDbSetSecurityInfo0(
    engineHandle: ?HANDLE,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn IPsecDospGetStatistics0(
    engineHandle: ?HANDLE,
    idpStatistics: ?*IPSEC_DOSP_STATISTICS0,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn IPsecDospStateCreateEnumHandle0(
    engineHandle: ?HANDLE,
    enumTemplate: ?*const IPSEC_DOSP_STATE_ENUM_TEMPLATE0,
    enumHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn IPsecDospStateEnum0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*IPSEC_DOSP_STATE0,
    numEntries: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn IPsecDospStateDestroyEnumHandle0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn IPsecDospGetSecurityInfo0(
    engineHandle: ?HANDLE,
    securityInfo: u32,
    sidOwner: ?*?PSID,
    sidGroup: ?*?PSID,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn IPsecDospSetSecurityInfo0(
    engineHandle: ?HANDLE,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn IPsecKeyManagerAddAndRegister0(
    engineHandle: ?HANDLE,
    keyManager: ?*const IPSEC_KEY_MANAGER0,
    keyManagerCallbacks: ?*const IPSEC_KEY_MANAGER_CALLBACKS0,
    keyMgmtHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn IPsecKeyManagerUnregisterAndDelete0(
    engineHandle: ?HANDLE,
    keyMgmtHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn IPsecKeyManagersGet0(
    engineHandle: ?HANDLE,
    entries: ?*?*?*IPSEC_KEY_MANAGER0,
    numEntries: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn IPsecKeyManagerGetSecurityInfoByKey0(
    engineHandle: ?HANDLE,
    reserved: ?*const anyopaque,
    securityInfo: u32,
    sidOwner: ?*?PSID,
    sidGroup: ?*?PSID,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn IPsecKeyManagerSetSecurityInfoByKey0(
    engineHandle: ?HANDLE,
    reserved: ?*const anyopaque,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn IkeextGetStatistics0(
    engineHandle: ?HANDLE,
    ikeextStatistics: ?*IKEEXT_STATISTICS0,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn IkeextGetStatistics1(
    engineHandle: ?HANDLE,
    ikeextStatistics: ?*IKEEXT_STATISTICS1,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn IkeextSaDeleteById0(
    engineHandle: ?HANDLE,
    id: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn IkeextSaGetById0(
    engineHandle: ?HANDLE,
    id: u64,
    sa: ?*?*IKEEXT_SA_DETAILS0,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn IkeextSaGetById1(
    engineHandle: ?HANDLE,
    id: u64,
    saLookupContext: ?*Guid,
    sa: ?*?*IKEEXT_SA_DETAILS1,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn IkeextSaGetById2(
    engineHandle: ?HANDLE,
    id: u64,
    saLookupContext: ?*Guid,
    sa: ?*?*IKEEXT_SA_DETAILS2,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn IkeextSaCreateEnumHandle0(
    engineHandle: ?HANDLE,
    enumTemplate: ?*const IKEEXT_SA_ENUM_TEMPLATE0,
    enumHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn IkeextSaEnum0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*IKEEXT_SA_DETAILS0,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn IkeextSaEnum1(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*IKEEXT_SA_DETAILS1,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn IkeextSaEnum2(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*IKEEXT_SA_DETAILS2,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn IkeextSaDestroyEnumHandle0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn IkeextSaDbGetSecurityInfo0(
    engineHandle: ?HANDLE,
    securityInfo: u32,
    sidOwner: ?*?PSID,
    sidGroup: ?*?PSID,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn IkeextSaDbSetSecurityInfo0(
    engineHandle: ?HANDLE,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmNetEventCreateEnumHandle0(
    engineHandle: ?HANDLE,
    enumTemplate: ?*const FWPM_NET_EVENT_ENUM_TEMPLATE0,
    enumHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmNetEventEnum0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_NET_EVENT0,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn FwpmNetEventEnum1(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_NET_EVENT1,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn FwpmNetEventEnum2(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_NET_EVENT2,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "fwpuclnt" fn FwpmNetEventEnum3(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_NET_EVENT3,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmNetEventEnum4(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_NET_EVENT4_,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmNetEventEnum5(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_NET_EVENT5_,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmNetEventDestroyEnumHandle0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmNetEventsGetSecurityInfo0(
    engineHandle: ?HANDLE,
    securityInfo: u32,
    sidOwner: ?*?PSID,
    sidGroup: ?*?PSID,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fwpuclnt" fn FwpmNetEventsSetSecurityInfo0(
    engineHandle: ?HANDLE,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn FwpmNetEventSubscribe0(
    engineHandle: ?HANDLE,
    subscription: ?*const FWPM_NET_EVENT_SUBSCRIPTION0,
    callback: ?FWPM_NET_EVENT_CALLBACK0,
    context: ?*anyopaque,
    eventsHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn FwpmNetEventUnsubscribe0(
    engineHandle: ?HANDLE,
    eventsHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn FwpmNetEventSubscriptionsGet0(
    engineHandle: ?HANDLE,
    entries: ?*?*?*FWPM_NET_EVENT_SUBSCRIPTION0,
    numEntries: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn FwpmNetEventSubscribe1(
    engineHandle: ?HANDLE,
    subscription: ?*const FWPM_NET_EVENT_SUBSCRIPTION0,
    callback: ?FWPM_NET_EVENT_CALLBACK1,
    context: ?*anyopaque,
    eventsHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "fwpuclnt" fn FwpmNetEventSubscribe2(
    engineHandle: ?HANDLE,
    subscription: ?*const FWPM_NET_EVENT_SUBSCRIPTION0,
    callback: ?FWPM_NET_EVENT_CALLBACK2,
    context: ?*anyopaque,
    eventsHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmNetEventSubscribe3(
    engineHandle: ?HANDLE,
    subscription: ?*const FWPM_NET_EVENT_SUBSCRIPTION0,
    callback: ?FWPM_NET_EVENT_CALLBACK3,
    context: ?*anyopaque,
    eventsHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmNetEventSubscribe4(
    engineHandle: ?HANDLE,
    subscription: ?*const FWPM_NET_EVENT_SUBSCRIPTION0,
    callback: ?FWPM_NET_EVENT_CALLBACK4,
    context: ?*anyopaque,
    eventsHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmDynamicKeywordSubscribe0(
    flags: u32,
    callback: ?FWPM_DYNAMIC_KEYWORD_CALLBACK0,
    context: ?*anyopaque,
    subscriptionHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmDynamicKeywordUnsubscribe0(
    subscriptionHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn FwpmSystemPortsGet0(
    engineHandle: ?HANDLE,
    sysPorts: ?*?*FWPM_SYSTEM_PORTS0,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn FwpmSystemPortsSubscribe0(
    engineHandle: ?HANDLE,
    reserved: ?*anyopaque,
    callback: ?FWPM_SYSTEM_PORTS_CALLBACK0,
    context: ?*anyopaque,
    sysPortsHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "fwpuclnt" fn FwpmSystemPortsUnsubscribe0(
    engineHandle: ?HANDLE,
    sysPortsHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn FwpmConnectionGetById0(
    engineHandle: ?HANDLE,
    id: u64,
    connection: ?*?*FWPM_CONNECTION0,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn FwpmConnectionEnum0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
    numEntriesRequested: u32,
    entries: ?*?*?*FWPM_CONNECTION0,
    numEntriesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn FwpmConnectionCreateEnumHandle0(
    engineHandle: ?HANDLE,
    enumTemplate: ?*const FWPM_CONNECTION_ENUM_TEMPLATE0,
    enumHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn FwpmConnectionDestroyEnumHandle0(
    engineHandle: ?HANDLE,
    enumHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn FwpmConnectionGetSecurityInfo0(
    engineHandle: ?HANDLE,
    securityInfo: u32,
    sidOwner: ?*?PSID,
    sidGroup: ?*?PSID,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn FwpmConnectionSetSecurityInfo0(
    engineHandle: ?HANDLE,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn FwpmConnectionSubscribe0(
    engineHandle: ?HANDLE,
    subscription: ?*const FWPM_CONNECTION_SUBSCRIPTION0,
    callback: ?FWPM_CONNECTION_CALLBACK0,
    context: ?*anyopaque,
    eventsHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn FwpmConnectionUnsubscribe0(
    engineHandle: ?HANDLE,
    eventsHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn FwpmvSwitchEventSubscribe0(
    engineHandle: ?HANDLE,
    subscription: ?*const FWPM_VSWITCH_EVENT_SUBSCRIPTION0,
    callback: ?FWPM_VSWITCH_EVENT_CALLBACK0,
    context: ?*anyopaque,
    subscriptionHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn FwpmvSwitchEventUnsubscribe0(
    engineHandle: ?HANDLE,
    subscriptionHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn FwpmvSwitchEventsGetSecurityInfo0(
    engineHandle: ?HANDLE,
    securityInfo: u32,
    sidOwner: ?*?PSID,
    sidGroup: ?*?PSID,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: ?*?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "fwpuclnt" fn FwpmvSwitchEventsSetSecurityInfo0(
    engineHandle: ?HANDLE,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (12)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const ACL = @import("../security.zig").ACL;
const BOOL = @import("../foundation.zig").BOOL;
const FILETIME = @import("../foundation.zig").FILETIME;
const HANDLE = @import("../foundation.zig").HANDLE;
const PSECURITY_DESCRIPTOR = @import("../security.zig").PSECURITY_DESCRIPTOR;
const PSID = @import("../foundation.zig").PSID;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;
const SEC_WINNT_AUTH_IDENTITY_W = @import("../system/rpc.zig").SEC_WINNT_AUTH_IDENTITY_W;
const SID = @import("../security.zig").SID;
const SID_AND_ATTRIBUTES = @import("../security.zig").SID_AND_ATTRIBUTES;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "FWPM_PROVIDER_CHANGE_CALLBACK0")) { _ = FWPM_PROVIDER_CHANGE_CALLBACK0; }
    if (@hasDecl(@This(), "FWPM_PROVIDER_CONTEXT_CHANGE_CALLBACK0")) { _ = FWPM_PROVIDER_CONTEXT_CHANGE_CALLBACK0; }
    if (@hasDecl(@This(), "FWPM_SUBLAYER_CHANGE_CALLBACK0")) { _ = FWPM_SUBLAYER_CHANGE_CALLBACK0; }
    if (@hasDecl(@This(), "FWPM_CALLOUT_CHANGE_CALLBACK0")) { _ = FWPM_CALLOUT_CHANGE_CALLBACK0; }
    if (@hasDecl(@This(), "FWPM_FILTER_CHANGE_CALLBACK0")) { _ = FWPM_FILTER_CHANGE_CALLBACK0; }
    if (@hasDecl(@This(), "IPSEC_SA_CONTEXT_CALLBACK0")) { _ = IPSEC_SA_CONTEXT_CALLBACK0; }
    if (@hasDecl(@This(), "IPSEC_KEY_MANAGER_KEY_DICTATION_CHECK0")) { _ = IPSEC_KEY_MANAGER_KEY_DICTATION_CHECK0; }
    if (@hasDecl(@This(), "IPSEC_KEY_MANAGER_DICTATE_KEY0")) { _ = IPSEC_KEY_MANAGER_DICTATE_KEY0; }
    if (@hasDecl(@This(), "IPSEC_KEY_MANAGER_NOTIFY_KEY0")) { _ = IPSEC_KEY_MANAGER_NOTIFY_KEY0; }
    if (@hasDecl(@This(), "FWPM_NET_EVENT_CALLBACK0")) { _ = FWPM_NET_EVENT_CALLBACK0; }
    if (@hasDecl(@This(), "FWPM_NET_EVENT_CALLBACK1")) { _ = FWPM_NET_EVENT_CALLBACK1; }
    if (@hasDecl(@This(), "FWPM_NET_EVENT_CALLBACK2")) { _ = FWPM_NET_EVENT_CALLBACK2; }
    if (@hasDecl(@This(), "FWPM_NET_EVENT_CALLBACK3")) { _ = FWPM_NET_EVENT_CALLBACK3; }
    if (@hasDecl(@This(), "FWPM_NET_EVENT_CALLBACK4")) { _ = FWPM_NET_EVENT_CALLBACK4; }
    if (@hasDecl(@This(), "FWPM_DYNAMIC_KEYWORD_CALLBACK0")) { _ = FWPM_DYNAMIC_KEYWORD_CALLBACK0; }
    if (@hasDecl(@This(), "FWPM_SYSTEM_PORTS_CALLBACK0")) { _ = FWPM_SYSTEM_PORTS_CALLBACK0; }
    if (@hasDecl(@This(), "FWPM_CONNECTION_CALLBACK0")) { _ = FWPM_CONNECTION_CALLBACK0; }
    if (@hasDecl(@This(), "FWPM_VSWITCH_EVENT_CALLBACK0")) { _ = FWPM_VSWITCH_EVENT_CALLBACK0; }

    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
