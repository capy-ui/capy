//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (6526)
//--------------------------------------------------------------------------------
pub const INVALID_HANDLE_VALUE = @import("zig.zig").typedConst(HANDLE, @as(i32, -1));
pub const CO_E_NOTINITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221008));
pub const STILL_ACTIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 259));
pub const EXCEPTION_ACCESS_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741819));
pub const EXCEPTION_DATATYPE_MISALIGNMENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483646));
pub const EXCEPTION_BREAKPOINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483645));
pub const EXCEPTION_SINGLE_STEP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483644));
pub const EXCEPTION_ARRAY_BOUNDS_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741684));
pub const EXCEPTION_FLT_DENORMAL_OPERAND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741683));
pub const EXCEPTION_FLT_DIVIDE_BY_ZERO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741682));
pub const EXCEPTION_FLT_INEXACT_RESULT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741681));
pub const EXCEPTION_FLT_INVALID_OPERATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741680));
pub const EXCEPTION_FLT_OVERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741679));
pub const EXCEPTION_FLT_STACK_CHECK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741678));
pub const EXCEPTION_FLT_UNDERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741677));
pub const EXCEPTION_INT_DIVIDE_BY_ZERO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741676));
pub const EXCEPTION_INT_OVERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741675));
pub const EXCEPTION_PRIV_INSTRUCTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741674));
pub const EXCEPTION_IN_PAGE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741818));
pub const EXCEPTION_ILLEGAL_INSTRUCTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741795));
pub const EXCEPTION_NONCONTINUABLE_EXCEPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741787));
pub const EXCEPTION_STACK_OVERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741571));
pub const EXCEPTION_INVALID_DISPOSITION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741786));
pub const EXCEPTION_GUARD_PAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483647));
pub const EXCEPTION_INVALID_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741816));
pub const EXCEPTION_POSSIBLE_DEADLOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741420));
pub const CONTROL_C_EXIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741510));
pub const STATUS_ACCESS_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741790));
pub const E_NOTIMPL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467263));
pub const E_OUTOFMEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147024882));
pub const E_INVALIDARG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147024809));
pub const E_FAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467259));
pub const STRICT = @as(u32, 1);
pub const MAX_PATH = @as(u32, 260);
pub const STATUS_WAIT_0 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 0));
pub const FACILTIY_MUI_ERROR_CODE = @as(u32, 11);
pub const STATUS_SUCCESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 0));
pub const STATUS_WAIT_1 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1));
pub const STATUS_WAIT_2 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 2));
pub const STATUS_WAIT_3 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 3));
pub const STATUS_WAIT_63 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 63));
pub const STATUS_ABANDONED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 128));
pub const STATUS_ABANDONED_WAIT_0 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 128));
pub const STATUS_ABANDONED_WAIT_63 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 191));
pub const STATUS_USER_APC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 192));
pub const STATUS_ALREADY_COMPLETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 255));
pub const STATUS_KERNEL_APC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 256));
pub const STATUS_ALERTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 257));
pub const STATUS_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 258));
pub const STATUS_PENDING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 259));
pub const STATUS_REPARSE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 260));
pub const STATUS_MORE_ENTRIES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 261));
pub const STATUS_NOT_ALL_ASSIGNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 262));
pub const STATUS_SOME_NOT_MAPPED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 263));
pub const STATUS_OPLOCK_BREAK_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 264));
pub const STATUS_VOLUME_MOUNTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 265));
pub const STATUS_RXACT_COMMITTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 266));
pub const STATUS_NOTIFY_CLEANUP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 267));
pub const STATUS_NOTIFY_ENUM_DIR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 268));
pub const STATUS_NO_QUOTAS_FOR_ACCOUNT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 269));
pub const STATUS_PRIMARY_TRANSPORT_CONNECT_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 270));
pub const STATUS_PAGE_FAULT_TRANSITION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 272));
pub const STATUS_PAGE_FAULT_DEMAND_ZERO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 273));
pub const STATUS_PAGE_FAULT_COPY_ON_WRITE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 274));
pub const STATUS_PAGE_FAULT_GUARD_PAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 275));
pub const STATUS_PAGE_FAULT_PAGING_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 276));
pub const STATUS_CACHE_PAGE_LOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 277));
pub const STATUS_CRASH_DUMP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 278));
pub const STATUS_BUFFER_ALL_ZEROS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 279));
pub const STATUS_REPARSE_OBJECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 280));
pub const STATUS_RESOURCE_REQUIREMENTS_CHANGED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 281));
pub const STATUS_TRANSLATION_COMPLETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 288));
pub const STATUS_DS_MEMBERSHIP_EVALUATED_LOCALLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 289));
pub const STATUS_NOTHING_TO_TERMINATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 290));
pub const STATUS_PROCESS_NOT_IN_JOB = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 291));
pub const STATUS_PROCESS_IN_JOB = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 292));
pub const STATUS_VOLSNAP_HIBERNATE_READY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 293));
pub const STATUS_FSFILTER_OP_COMPLETED_SUCCESSFULLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 294));
pub const STATUS_INTERRUPT_VECTOR_ALREADY_CONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 295));
pub const STATUS_INTERRUPT_STILL_CONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 296));
pub const STATUS_PROCESS_CLONED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 297));
pub const STATUS_FILE_LOCKED_WITH_ONLY_READERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 298));
pub const STATUS_FILE_LOCKED_WITH_WRITERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 299));
pub const STATUS_VALID_IMAGE_HASH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 300));
pub const STATUS_VALID_CATALOG_HASH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 301));
pub const STATUS_VALID_STRONG_CODE_HASH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 302));
pub const STATUS_GHOSTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 303));
pub const STATUS_DATA_OVERWRITTEN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 304));
pub const STATUS_RESOURCEMANAGER_READ_ONLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 514));
pub const STATUS_RING_PREVIOUSLY_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 528));
pub const STATUS_RING_PREVIOUSLY_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 529));
pub const STATUS_RING_PREVIOUSLY_ABOVE_QUOTA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 530));
pub const STATUS_RING_NEWLY_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 531));
pub const STATUS_RING_SIGNAL_OPPOSITE_ENDPOINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 532));
pub const STATUS_OPLOCK_SWITCHED_TO_NEW_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 533));
pub const STATUS_OPLOCK_HANDLE_CLOSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 534));
pub const STATUS_WAIT_FOR_OPLOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 871));
pub const STATUS_REPARSE_GLOBAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 872));
pub const DBG_EXCEPTION_HANDLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 65537));
pub const DBG_CONTINUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 65538));
pub const STATUS_FLT_IO_COMPLETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1835009));
pub const STATUS_OBJECT_NAME_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741824));
pub const STATUS_THREAD_WAS_SUSPENDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741825));
pub const STATUS_WORKING_SET_LIMIT_RANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741826));
pub const STATUS_IMAGE_NOT_AT_BASE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741827));
pub const STATUS_RXACT_STATE_CREATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741828));
pub const STATUS_SEGMENT_NOTIFICATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741829));
pub const STATUS_LOCAL_USER_SESSION_KEY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741830));
pub const STATUS_BAD_CURRENT_DIRECTORY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741831));
pub const STATUS_SERIAL_MORE_WRITES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741832));
pub const STATUS_REGISTRY_RECOVERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741833));
pub const STATUS_FT_READ_RECOVERY_FROM_BACKUP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741834));
pub const STATUS_FT_WRITE_RECOVERY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741835));
pub const STATUS_SERIAL_COUNTER_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741836));
pub const STATUS_NULL_LM_PASSWORD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741837));
pub const STATUS_IMAGE_MACHINE_TYPE_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741838));
pub const STATUS_RECEIVE_PARTIAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741839));
pub const STATUS_RECEIVE_EXPEDITED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741840));
pub const STATUS_RECEIVE_PARTIAL_EXPEDITED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741841));
pub const STATUS_EVENT_DONE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741842));
pub const STATUS_EVENT_PENDING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741843));
pub const STATUS_CHECKING_FILE_SYSTEM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741844));
pub const STATUS_FATAL_APP_EXIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741845));
pub const STATUS_PREDEFINED_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741846));
pub const STATUS_WAS_UNLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741847));
pub const STATUS_SERVICE_NOTIFICATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741848));
pub const STATUS_WAS_LOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741849));
pub const STATUS_LOG_HARD_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741850));
pub const STATUS_ALREADY_WIN32 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741851));
pub const STATUS_WX86_UNSIMULATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741852));
pub const STATUS_WX86_CONTINUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741853));
pub const STATUS_WX86_SINGLE_STEP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741854));
pub const STATUS_WX86_BREAKPOINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741855));
pub const STATUS_WX86_EXCEPTION_CONTINUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741856));
pub const STATUS_WX86_EXCEPTION_LASTCHANCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741857));
pub const STATUS_WX86_EXCEPTION_CHAIN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741858));
pub const STATUS_IMAGE_MACHINE_TYPE_MISMATCH_EXE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741859));
pub const STATUS_NO_YIELD_PERFORMED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741860));
pub const STATUS_TIMER_RESUME_IGNORED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741861));
pub const STATUS_ARBITRATION_UNHANDLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741862));
pub const STATUS_CARDBUS_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741863));
pub const STATUS_WX86_CREATEWX86TIB = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741864));
pub const STATUS_MP_PROCESSOR_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741865));
pub const STATUS_HIBERNATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741866));
pub const STATUS_RESUME_HIBERNATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741867));
pub const STATUS_FIRMWARE_UPDATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741868));
pub const STATUS_DRIVERS_LEAKING_LOCKED_PAGES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741869));
pub const STATUS_MESSAGE_RETRIEVED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741870));
pub const STATUS_SYSTEM_POWERSTATE_TRANSITION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741871));
pub const STATUS_ALPC_CHECK_COMPLETION_LIST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741872));
pub const STATUS_SYSTEM_POWERSTATE_COMPLEX_TRANSITION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741873));
pub const STATUS_ACCESS_AUDIT_BY_POLICY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741874));
pub const STATUS_ABANDON_HIBERFILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741875));
pub const STATUS_BIZRULES_NOT_ENABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741876));
pub const STATUS_FT_READ_FROM_COPY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741877));
pub const STATUS_IMAGE_AT_DIFFERENT_BASE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741878));
pub const STATUS_PATCH_DEFERRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741879));
pub const STATUS_EMULATION_BREAKPOINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741880));
pub const STATUS_EMULATION_SYSCALL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741881));
pub const DBG_REPLY_LATER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073807361));
pub const DBG_UNABLE_TO_PROVIDE_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073807362));
pub const DBG_TERMINATE_THREAD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073807363));
pub const DBG_TERMINATE_PROCESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073807364));
pub const DBG_CONTROL_C = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073807365));
pub const DBG_PRINTEXCEPTION_C = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073807366));
pub const DBG_RIPEXCEPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073807367));
pub const DBG_CONTROL_BREAK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073807368));
pub const DBG_COMMAND_EXCEPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073807369));
pub const DBG_PRINTEXCEPTION_WIDE_C = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073807370));
pub const STATUS_HEURISTIC_DAMAGE_POSSIBLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075380225));
pub const STATUS_GUARD_PAGE_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483647));
pub const STATUS_DATATYPE_MISALIGNMENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483646));
pub const STATUS_BREAKPOINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483645));
pub const STATUS_SINGLE_STEP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483644));
pub const STATUS_BUFFER_OVERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483643));
pub const STATUS_NO_MORE_FILES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483642));
pub const STATUS_WAKE_SYSTEM_DEBUGGER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483641));
pub const STATUS_HANDLES_CLOSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483638));
pub const STATUS_NO_INHERITANCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483637));
pub const STATUS_GUID_SUBSTITUTION_MADE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483636));
pub const STATUS_PARTIAL_COPY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483635));
pub const STATUS_DEVICE_PAPER_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483634));
pub const STATUS_DEVICE_POWERED_OFF = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483633));
pub const STATUS_DEVICE_OFF_LINE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483632));
pub const STATUS_DEVICE_BUSY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483631));
pub const STATUS_NO_MORE_EAS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483630));
pub const STATUS_INVALID_EA_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483629));
pub const STATUS_EA_LIST_INCONSISTENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483628));
pub const STATUS_INVALID_EA_FLAG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483627));
pub const STATUS_VERIFY_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483626));
pub const STATUS_EXTRANEOUS_INFORMATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483625));
pub const STATUS_RXACT_COMMIT_NECESSARY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483624));
pub const STATUS_NO_MORE_ENTRIES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483622));
pub const STATUS_FILEMARK_DETECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483621));
pub const STATUS_MEDIA_CHANGED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483620));
pub const STATUS_BUS_RESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483619));
pub const STATUS_END_OF_MEDIA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483618));
pub const STATUS_BEGINNING_OF_MEDIA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483617));
pub const STATUS_MEDIA_CHECK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483616));
pub const STATUS_SETMARK_DETECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483615));
pub const STATUS_NO_DATA_DETECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483614));
pub const STATUS_REDIRECTOR_HAS_OPEN_HANDLES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483613));
pub const STATUS_SERVER_HAS_OPEN_HANDLES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483612));
pub const STATUS_ALREADY_DISCONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483611));
pub const STATUS_LONGJUMP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483610));
pub const STATUS_CLEANER_CARTRIDGE_INSTALLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483609));
pub const STATUS_PLUGPLAY_QUERY_VETOED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483608));
pub const STATUS_UNWIND_CONSOLIDATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483607));
pub const STATUS_REGISTRY_HIVE_RECOVERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483606));
pub const STATUS_DLL_MIGHT_BE_INSECURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483605));
pub const STATUS_DLL_MIGHT_BE_INCOMPATIBLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483604));
pub const STATUS_STOPPED_ON_SYMLINK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483603));
pub const STATUS_CANNOT_GRANT_REQUESTED_OPLOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483602));
pub const STATUS_NO_ACE_CONDITION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483601));
pub const STATUS_DEVICE_SUPPORT_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483600));
pub const STATUS_DEVICE_POWER_CYCLE_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483599));
pub const STATUS_NO_WORK_DONE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483598));
pub const STATUS_RETURN_ADDRESS_HIJACK_ATTEMPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483597));
pub const STATUS_RECOVERABLE_BUGCHECK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483596));
pub const DBG_EXCEPTION_NOT_HANDLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147418111));
pub const STATUS_CLUSTER_NODE_ALREADY_UP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2146238463));
pub const STATUS_CLUSTER_NODE_ALREADY_DOWN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2146238462));
pub const STATUS_CLUSTER_NETWORK_ALREADY_ONLINE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2146238461));
pub const STATUS_CLUSTER_NETWORK_ALREADY_OFFLINE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2146238460));
pub const STATUS_CLUSTER_NODE_ALREADY_MEMBER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2146238459));
pub const STATUS_FLT_BUFFER_TOO_SMALL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2145648639));
pub const STATUS_FVE_PARTIAL_METADATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2145320959));
pub const STATUS_FVE_TRANSIENT_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2145320958));
pub const STATUS_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147430656));
pub const STATUS_UNSUCCESSFUL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741823));
pub const STATUS_NOT_IMPLEMENTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741822));
pub const STATUS_INVALID_INFO_CLASS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741821));
pub const STATUS_INFO_LENGTH_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741820));
pub const STATUS_ACCESS_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741819));
pub const STATUS_IN_PAGE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741818));
pub const STATUS_PAGEFILE_QUOTA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741817));
pub const STATUS_INVALID_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741816));
pub const STATUS_BAD_INITIAL_STACK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741815));
pub const STATUS_BAD_INITIAL_PC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741814));
pub const STATUS_INVALID_CID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741813));
pub const STATUS_TIMER_NOT_CANCELED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741812));
pub const STATUS_INVALID_PARAMETER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741811));
pub const STATUS_NO_SUCH_DEVICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741810));
pub const STATUS_NO_SUCH_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741809));
pub const STATUS_INVALID_DEVICE_REQUEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741808));
pub const STATUS_END_OF_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741807));
pub const STATUS_WRONG_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741806));
pub const STATUS_NO_MEDIA_IN_DEVICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741805));
pub const STATUS_UNRECOGNIZED_MEDIA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741804));
pub const STATUS_NONEXISTENT_SECTOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741803));
pub const STATUS_MORE_PROCESSING_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741802));
pub const STATUS_NO_MEMORY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741801));
pub const STATUS_CONFLICTING_ADDRESSES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741800));
pub const STATUS_NOT_MAPPED_VIEW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741799));
pub const STATUS_UNABLE_TO_FREE_VM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741798));
pub const STATUS_UNABLE_TO_DELETE_SECTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741797));
pub const STATUS_INVALID_SYSTEM_SERVICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741796));
pub const STATUS_ILLEGAL_INSTRUCTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741795));
pub const STATUS_INVALID_LOCK_SEQUENCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741794));
pub const STATUS_INVALID_VIEW_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741793));
pub const STATUS_INVALID_FILE_FOR_SECTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741792));
pub const STATUS_ALREADY_COMMITTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741791));
pub const STATUS_BUFFER_TOO_SMALL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741789));
pub const STATUS_OBJECT_TYPE_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741788));
pub const STATUS_NONCONTINUABLE_EXCEPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741787));
pub const STATUS_INVALID_DISPOSITION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741786));
pub const STATUS_UNWIND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741785));
pub const STATUS_BAD_STACK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741784));
pub const STATUS_INVALID_UNWIND_TARGET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741783));
pub const STATUS_NOT_LOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741782));
pub const STATUS_PARITY_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741781));
pub const STATUS_UNABLE_TO_DECOMMIT_VM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741780));
pub const STATUS_NOT_COMMITTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741779));
pub const STATUS_INVALID_PORT_ATTRIBUTES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741778));
pub const STATUS_PORT_MESSAGE_TOO_LONG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741777));
pub const STATUS_INVALID_PARAMETER_MIX = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741776));
pub const STATUS_INVALID_QUOTA_LOWER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741775));
pub const STATUS_DISK_CORRUPT_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741774));
pub const STATUS_OBJECT_NAME_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741773));
pub const STATUS_OBJECT_NAME_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741772));
pub const STATUS_OBJECT_NAME_COLLISION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741771));
pub const STATUS_PORT_DO_NOT_DISTURB = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741770));
pub const STATUS_PORT_DISCONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741769));
pub const STATUS_DEVICE_ALREADY_ATTACHED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741768));
pub const STATUS_OBJECT_PATH_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741767));
pub const STATUS_OBJECT_PATH_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741766));
pub const STATUS_OBJECT_PATH_SYNTAX_BAD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741765));
pub const STATUS_DATA_OVERRUN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741764));
pub const STATUS_DATA_LATE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741763));
pub const STATUS_DATA_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741762));
pub const STATUS_CRC_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741761));
pub const STATUS_SECTION_TOO_BIG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741760));
pub const STATUS_PORT_CONNECTION_REFUSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741759));
pub const STATUS_INVALID_PORT_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741758));
pub const STATUS_SHARING_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741757));
pub const STATUS_QUOTA_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741756));
pub const STATUS_INVALID_PAGE_PROTECTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741755));
pub const STATUS_MUTANT_NOT_OWNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741754));
pub const STATUS_SEMAPHORE_LIMIT_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741753));
pub const STATUS_PORT_ALREADY_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741752));
pub const STATUS_SECTION_NOT_IMAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741751));
pub const STATUS_SUSPEND_COUNT_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741750));
pub const STATUS_THREAD_IS_TERMINATING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741749));
pub const STATUS_BAD_WORKING_SET_LIMIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741748));
pub const STATUS_INCOMPATIBLE_FILE_MAP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741747));
pub const STATUS_SECTION_PROTECTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741746));
pub const STATUS_EAS_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741745));
pub const STATUS_EA_TOO_LARGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741744));
pub const STATUS_NONEXISTENT_EA_ENTRY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741743));
pub const STATUS_NO_EAS_ON_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741742));
pub const STATUS_EA_CORRUPT_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741741));
pub const STATUS_FILE_LOCK_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741740));
pub const STATUS_LOCK_NOT_GRANTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741739));
pub const STATUS_DELETE_PENDING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741738));
pub const STATUS_CTL_FILE_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741737));
pub const STATUS_UNKNOWN_REVISION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741736));
pub const STATUS_REVISION_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741735));
pub const STATUS_INVALID_OWNER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741734));
pub const STATUS_INVALID_PRIMARY_GROUP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741733));
pub const STATUS_NO_IMPERSONATION_TOKEN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741732));
pub const STATUS_CANT_DISABLE_MANDATORY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741731));
pub const STATUS_NO_LOGON_SERVERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741730));
pub const STATUS_NO_SUCH_PRIVILEGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741728));
pub const STATUS_PRIVILEGE_NOT_HELD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741727));
pub const STATUS_INVALID_ACCOUNT_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741726));
pub const STATUS_USER_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741725));
pub const STATUS_GROUP_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741723));
pub const STATUS_NO_SUCH_GROUP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741722));
pub const STATUS_MEMBER_IN_GROUP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741721));
pub const STATUS_MEMBER_NOT_IN_GROUP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741720));
pub const STATUS_LAST_ADMIN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741719));
pub const STATUS_ILL_FORMED_PASSWORD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741717));
pub const STATUS_PASSWORD_RESTRICTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741716));
pub const STATUS_INVALID_LOGON_HOURS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741713));
pub const STATUS_INVALID_WORKSTATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741712));
pub const STATUS_NONE_MAPPED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741709));
pub const STATUS_TOO_MANY_LUIDS_REQUESTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741708));
pub const STATUS_LUIDS_EXHAUSTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741707));
pub const STATUS_INVALID_SUB_AUTHORITY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741706));
pub const STATUS_INVALID_ACL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741705));
pub const STATUS_INVALID_SID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741704));
pub const STATUS_INVALID_SECURITY_DESCR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741703));
pub const STATUS_PROCEDURE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741702));
pub const STATUS_INVALID_IMAGE_FORMAT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741701));
pub const STATUS_NO_TOKEN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741700));
pub const STATUS_BAD_INHERITANCE_ACL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741699));
pub const STATUS_RANGE_NOT_LOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741698));
pub const STATUS_DISK_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741697));
pub const STATUS_SERVER_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741696));
pub const STATUS_SERVER_NOT_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741695));
pub const STATUS_TOO_MANY_GUIDS_REQUESTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741694));
pub const STATUS_GUIDS_EXHAUSTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741693));
pub const STATUS_INVALID_ID_AUTHORITY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741692));
pub const STATUS_AGENTS_EXHAUSTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741691));
pub const STATUS_INVALID_VOLUME_LABEL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741690));
pub const STATUS_SECTION_NOT_EXTENDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741689));
pub const STATUS_NOT_MAPPED_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741688));
pub const STATUS_RESOURCE_DATA_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741687));
pub const STATUS_RESOURCE_TYPE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741686));
pub const STATUS_RESOURCE_NAME_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741685));
pub const STATUS_ARRAY_BOUNDS_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741684));
pub const STATUS_FLOAT_DENORMAL_OPERAND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741683));
pub const STATUS_FLOAT_DIVIDE_BY_ZERO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741682));
pub const STATUS_FLOAT_INEXACT_RESULT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741681));
pub const STATUS_FLOAT_INVALID_OPERATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741680));
pub const STATUS_FLOAT_OVERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741679));
pub const STATUS_FLOAT_STACK_CHECK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741678));
pub const STATUS_FLOAT_UNDERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741677));
pub const STATUS_INTEGER_DIVIDE_BY_ZERO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741676));
pub const STATUS_INTEGER_OVERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741675));
pub const STATUS_PRIVILEGED_INSTRUCTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741674));
pub const STATUS_TOO_MANY_PAGING_FILES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741673));
pub const STATUS_FILE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741672));
pub const STATUS_ALLOTTED_SPACE_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741671));
pub const STATUS_INSUFFICIENT_RESOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741670));
pub const STATUS_DFS_EXIT_PATH_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741669));
pub const STATUS_DEVICE_DATA_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741668));
pub const STATUS_DEVICE_NOT_CONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741667));
pub const STATUS_DEVICE_POWER_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741666));
pub const STATUS_FREE_VM_NOT_AT_BASE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741665));
pub const STATUS_MEMORY_NOT_ALLOCATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741664));
pub const STATUS_WORKING_SET_QUOTA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741663));
pub const STATUS_MEDIA_WRITE_PROTECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741662));
pub const STATUS_DEVICE_NOT_READY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741661));
pub const STATUS_INVALID_GROUP_ATTRIBUTES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741660));
pub const STATUS_BAD_IMPERSONATION_LEVEL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741659));
pub const STATUS_CANT_OPEN_ANONYMOUS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741658));
pub const STATUS_BAD_VALIDATION_CLASS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741657));
pub const STATUS_BAD_TOKEN_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741656));
pub const STATUS_BAD_MASTER_BOOT_RECORD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741655));
pub const STATUS_INSTRUCTION_MISALIGNMENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741654));
pub const STATUS_INSTANCE_NOT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741653));
pub const STATUS_PIPE_NOT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741652));
pub const STATUS_INVALID_PIPE_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741651));
pub const STATUS_PIPE_BUSY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741650));
pub const STATUS_ILLEGAL_FUNCTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741649));
pub const STATUS_PIPE_DISCONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741648));
pub const STATUS_PIPE_CLOSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741647));
pub const STATUS_PIPE_CONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741646));
pub const STATUS_PIPE_LISTENING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741645));
pub const STATUS_INVALID_READ_MODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741644));
pub const STATUS_IO_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741643));
pub const STATUS_FILE_FORCED_CLOSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741642));
pub const STATUS_PROFILING_NOT_STARTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741641));
pub const STATUS_PROFILING_NOT_STOPPED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741640));
pub const STATUS_COULD_NOT_INTERPRET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741639));
pub const STATUS_FILE_IS_A_DIRECTORY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741638));
pub const STATUS_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741637));
pub const STATUS_REMOTE_NOT_LISTENING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741636));
pub const STATUS_DUPLICATE_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741635));
pub const STATUS_BAD_NETWORK_PATH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741634));
pub const STATUS_NETWORK_BUSY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741633));
pub const STATUS_DEVICE_DOES_NOT_EXIST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741632));
pub const STATUS_TOO_MANY_COMMANDS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741631));
pub const STATUS_ADAPTER_HARDWARE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741630));
pub const STATUS_INVALID_NETWORK_RESPONSE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741629));
pub const STATUS_UNEXPECTED_NETWORK_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741628));
pub const STATUS_BAD_REMOTE_ADAPTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741627));
pub const STATUS_PRINT_QUEUE_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741626));
pub const STATUS_NO_SPOOL_SPACE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741625));
pub const STATUS_PRINT_CANCELLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741624));
pub const STATUS_NETWORK_NAME_DELETED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741623));
pub const STATUS_NETWORK_ACCESS_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741622));
pub const STATUS_BAD_DEVICE_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741621));
pub const STATUS_BAD_NETWORK_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741620));
pub const STATUS_TOO_MANY_NAMES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741619));
pub const STATUS_TOO_MANY_SESSIONS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741618));
pub const STATUS_SHARING_PAUSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741617));
pub const STATUS_REQUEST_NOT_ACCEPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741616));
pub const STATUS_REDIRECTOR_PAUSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741615));
pub const STATUS_NET_WRITE_FAULT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741614));
pub const STATUS_PROFILING_AT_LIMIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741613));
pub const STATUS_NOT_SAME_DEVICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741612));
pub const STATUS_FILE_RENAMED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741611));
pub const STATUS_VIRTUAL_CIRCUIT_CLOSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741610));
pub const STATUS_NO_SECURITY_ON_OBJECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741609));
pub const STATUS_CANT_WAIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741608));
pub const STATUS_PIPE_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741607));
pub const STATUS_CANT_ACCESS_DOMAIN_INFO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741606));
pub const STATUS_CANT_TERMINATE_SELF = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741605));
pub const STATUS_INVALID_SERVER_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741604));
pub const STATUS_INVALID_DOMAIN_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741603));
pub const STATUS_INVALID_DOMAIN_ROLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741602));
pub const STATUS_NO_SUCH_DOMAIN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741601));
pub const STATUS_DOMAIN_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741600));
pub const STATUS_DOMAIN_LIMIT_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741599));
pub const STATUS_OPLOCK_NOT_GRANTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741598));
pub const STATUS_INVALID_OPLOCK_PROTOCOL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741597));
pub const STATUS_INTERNAL_DB_CORRUPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741596));
pub const STATUS_INTERNAL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741595));
pub const STATUS_GENERIC_NOT_MAPPED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741594));
pub const STATUS_BAD_DESCRIPTOR_FORMAT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741593));
pub const STATUS_INVALID_USER_BUFFER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741592));
pub const STATUS_UNEXPECTED_IO_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741591));
pub const STATUS_UNEXPECTED_MM_CREATE_ERR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741590));
pub const STATUS_UNEXPECTED_MM_MAP_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741589));
pub const STATUS_UNEXPECTED_MM_EXTEND_ERR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741588));
pub const STATUS_NOT_LOGON_PROCESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741587));
pub const STATUS_LOGON_SESSION_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741586));
pub const STATUS_INVALID_PARAMETER_1 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741585));
pub const STATUS_INVALID_PARAMETER_2 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741584));
pub const STATUS_INVALID_PARAMETER_3 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741583));
pub const STATUS_INVALID_PARAMETER_4 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741582));
pub const STATUS_INVALID_PARAMETER_5 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741581));
pub const STATUS_INVALID_PARAMETER_6 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741580));
pub const STATUS_INVALID_PARAMETER_7 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741579));
pub const STATUS_INVALID_PARAMETER_8 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741578));
pub const STATUS_INVALID_PARAMETER_9 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741577));
pub const STATUS_INVALID_PARAMETER_10 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741576));
pub const STATUS_INVALID_PARAMETER_11 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741575));
pub const STATUS_INVALID_PARAMETER_12 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741574));
pub const STATUS_REDIRECTOR_NOT_STARTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741573));
pub const STATUS_REDIRECTOR_STARTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741572));
pub const STATUS_STACK_OVERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741571));
pub const STATUS_NO_SUCH_PACKAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741570));
pub const STATUS_BAD_FUNCTION_TABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741569));
pub const STATUS_VARIABLE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741568));
pub const STATUS_DIRECTORY_NOT_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741567));
pub const STATUS_FILE_CORRUPT_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741566));
pub const STATUS_NOT_A_DIRECTORY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741565));
pub const STATUS_BAD_LOGON_SESSION_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741564));
pub const STATUS_LOGON_SESSION_COLLISION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741563));
pub const STATUS_NAME_TOO_LONG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741562));
pub const STATUS_FILES_OPEN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741561));
pub const STATUS_CONNECTION_IN_USE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741560));
pub const STATUS_MESSAGE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741559));
pub const STATUS_PROCESS_IS_TERMINATING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741558));
pub const STATUS_INVALID_LOGON_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741557));
pub const STATUS_NO_GUID_TRANSLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741556));
pub const STATUS_CANNOT_IMPERSONATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741555));
pub const STATUS_IMAGE_ALREADY_LOADED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741554));
pub const STATUS_ABIOS_NOT_PRESENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741553));
pub const STATUS_ABIOS_LID_NOT_EXIST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741552));
pub const STATUS_ABIOS_LID_ALREADY_OWNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741551));
pub const STATUS_ABIOS_NOT_LID_OWNER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741550));
pub const STATUS_ABIOS_INVALID_COMMAND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741549));
pub const STATUS_ABIOS_INVALID_LID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741548));
pub const STATUS_ABIOS_SELECTOR_NOT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741547));
pub const STATUS_ABIOS_INVALID_SELECTOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741546));
pub const STATUS_NO_LDT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741545));
pub const STATUS_INVALID_LDT_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741544));
pub const STATUS_INVALID_LDT_OFFSET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741543));
pub const STATUS_INVALID_LDT_DESCRIPTOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741542));
pub const STATUS_INVALID_IMAGE_NE_FORMAT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741541));
pub const STATUS_RXACT_INVALID_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741540));
pub const STATUS_RXACT_COMMIT_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741539));
pub const STATUS_MAPPED_FILE_SIZE_ZERO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741538));
pub const STATUS_TOO_MANY_OPENED_FILES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741537));
pub const STATUS_CANCELLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741536));
pub const STATUS_CANNOT_DELETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741535));
pub const STATUS_INVALID_COMPUTER_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741534));
pub const STATUS_FILE_DELETED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741533));
pub const STATUS_SPECIAL_ACCOUNT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741532));
pub const STATUS_SPECIAL_GROUP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741531));
pub const STATUS_SPECIAL_USER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741530));
pub const STATUS_MEMBERS_PRIMARY_GROUP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741529));
pub const STATUS_FILE_CLOSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741528));
pub const STATUS_TOO_MANY_THREADS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741527));
pub const STATUS_THREAD_NOT_IN_PROCESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741526));
pub const STATUS_TOKEN_ALREADY_IN_USE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741525));
pub const STATUS_PAGEFILE_QUOTA_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741524));
pub const STATUS_COMMITMENT_LIMIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741523));
pub const STATUS_INVALID_IMAGE_LE_FORMAT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741522));
pub const STATUS_INVALID_IMAGE_NOT_MZ = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741521));
pub const STATUS_INVALID_IMAGE_PROTECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741520));
pub const STATUS_INVALID_IMAGE_WIN_16 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741519));
pub const STATUS_LOGON_SERVER_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741518));
pub const STATUS_TIME_DIFFERENCE_AT_DC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741517));
pub const STATUS_SYNCHRONIZATION_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741516));
pub const STATUS_DLL_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741515));
pub const STATUS_OPEN_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741514));
pub const STATUS_IO_PRIVILEGE_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741513));
pub const STATUS_ORDINAL_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741512));
pub const STATUS_ENTRYPOINT_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741511));
pub const STATUS_CONTROL_C_EXIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741510));
pub const STATUS_LOCAL_DISCONNECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741509));
pub const STATUS_REMOTE_DISCONNECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741508));
pub const STATUS_REMOTE_RESOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741507));
pub const STATUS_LINK_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741506));
pub const STATUS_LINK_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741505));
pub const STATUS_INVALID_CONNECTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741504));
pub const STATUS_INVALID_ADDRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741503));
pub const STATUS_DLL_INIT_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741502));
pub const STATUS_MISSING_SYSTEMFILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741501));
pub const STATUS_UNHANDLED_EXCEPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741500));
pub const STATUS_APP_INIT_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741499));
pub const STATUS_PAGEFILE_CREATE_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741498));
pub const STATUS_NO_PAGEFILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741497));
pub const STATUS_INVALID_LEVEL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741496));
pub const STATUS_WRONG_PASSWORD_CORE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741495));
pub const STATUS_ILLEGAL_FLOAT_CONTEXT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741494));
pub const STATUS_PIPE_BROKEN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741493));
pub const STATUS_REGISTRY_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741492));
pub const STATUS_REGISTRY_IO_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741491));
pub const STATUS_NO_EVENT_PAIR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741490));
pub const STATUS_UNRECOGNIZED_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741489));
pub const STATUS_SERIAL_NO_DEVICE_INITED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741488));
pub const STATUS_NO_SUCH_ALIAS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741487));
pub const STATUS_MEMBER_NOT_IN_ALIAS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741486));
pub const STATUS_MEMBER_IN_ALIAS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741485));
pub const STATUS_ALIAS_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741484));
pub const STATUS_LOGON_NOT_GRANTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741483));
pub const STATUS_TOO_MANY_SECRETS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741482));
pub const STATUS_SECRET_TOO_LONG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741481));
pub const STATUS_INTERNAL_DB_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741480));
pub const STATUS_FULLSCREEN_MODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741479));
pub const STATUS_TOO_MANY_CONTEXT_IDS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741478));
pub const STATUS_NOT_REGISTRY_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741476));
pub const STATUS_NT_CROSS_ENCRYPTION_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741475));
pub const STATUS_DOMAIN_CTRLR_CONFIG_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741474));
pub const STATUS_FT_MISSING_MEMBER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741473));
pub const STATUS_ILL_FORMED_SERVICE_ENTRY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741472));
pub const STATUS_ILLEGAL_CHARACTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741471));
pub const STATUS_UNMAPPABLE_CHARACTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741470));
pub const STATUS_UNDEFINED_CHARACTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741469));
pub const STATUS_FLOPPY_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741468));
pub const STATUS_FLOPPY_ID_MARK_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741467));
pub const STATUS_FLOPPY_WRONG_CYLINDER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741466));
pub const STATUS_FLOPPY_UNKNOWN_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741465));
pub const STATUS_FLOPPY_BAD_REGISTERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741464));
pub const STATUS_DISK_RECALIBRATE_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741463));
pub const STATUS_DISK_OPERATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741462));
pub const STATUS_DISK_RESET_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741461));
pub const STATUS_SHARED_IRQ_BUSY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741460));
pub const STATUS_FT_ORPHANING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741459));
pub const STATUS_BIOS_FAILED_TO_CONNECT_INTERRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741458));
pub const STATUS_PARTITION_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741454));
pub const STATUS_INVALID_BLOCK_LENGTH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741453));
pub const STATUS_DEVICE_NOT_PARTITIONED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741452));
pub const STATUS_UNABLE_TO_LOCK_MEDIA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741451));
pub const STATUS_UNABLE_TO_UNLOAD_MEDIA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741450));
pub const STATUS_EOM_OVERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741449));
pub const STATUS_NO_MEDIA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741448));
pub const STATUS_NO_SUCH_MEMBER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741446));
pub const STATUS_INVALID_MEMBER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741445));
pub const STATUS_KEY_DELETED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741444));
pub const STATUS_NO_LOG_SPACE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741443));
pub const STATUS_TOO_MANY_SIDS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741442));
pub const STATUS_LM_CROSS_ENCRYPTION_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741441));
pub const STATUS_KEY_HAS_CHILDREN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741440));
pub const STATUS_CHILD_MUST_BE_VOLATILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741439));
pub const STATUS_DEVICE_CONFIGURATION_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741438));
pub const STATUS_DRIVER_INTERNAL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741437));
pub const STATUS_INVALID_DEVICE_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741436));
pub const STATUS_IO_DEVICE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741435));
pub const STATUS_DEVICE_PROTOCOL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741434));
pub const STATUS_BACKUP_CONTROLLER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741433));
pub const STATUS_LOG_FILE_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741432));
pub const STATUS_TOO_LATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741431));
pub const STATUS_NO_TRUST_LSA_SECRET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741430));
pub const STATUS_NO_TRUST_SAM_ACCOUNT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741429));
pub const STATUS_TRUSTED_DOMAIN_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741428));
pub const STATUS_TRUSTED_RELATIONSHIP_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741427));
pub const STATUS_EVENTLOG_FILE_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741426));
pub const STATUS_EVENTLOG_CANT_START = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741425));
pub const STATUS_TRUST_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741424));
pub const STATUS_MUTANT_LIMIT_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741423));
pub const STATUS_NETLOGON_NOT_STARTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741422));
pub const STATUS_POSSIBLE_DEADLOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741420));
pub const STATUS_NETWORK_CREDENTIAL_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741419));
pub const STATUS_REMOTE_SESSION_LIMIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741418));
pub const STATUS_EVENTLOG_FILE_CHANGED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741417));
pub const STATUS_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741416));
pub const STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741415));
pub const STATUS_NOLOGON_SERVER_TRUST_ACCOUNT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741414));
pub const STATUS_DOMAIN_TRUST_INCONSISTENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741413));
pub const STATUS_FS_DRIVER_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741412));
pub const STATUS_IMAGE_ALREADY_LOADED_AS_DLL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741411));
pub const STATUS_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741410));
pub const STATUS_SHORT_NAMES_NOT_ENABLED_ON_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741409));
pub const STATUS_SECURITY_STREAM_IS_INCONSISTENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741408));
pub const STATUS_INVALID_LOCK_RANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741407));
pub const STATUS_INVALID_ACE_CONDITION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741406));
pub const STATUS_IMAGE_SUBSYSTEM_NOT_PRESENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741405));
pub const STATUS_NOTIFICATION_GUID_ALREADY_DEFINED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741404));
pub const STATUS_INVALID_EXCEPTION_HANDLER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741403));
pub const STATUS_DUPLICATE_PRIVILEGES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741402));
pub const STATUS_NOT_ALLOWED_ON_SYSTEM_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741401));
pub const STATUS_REPAIR_NEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741400));
pub const STATUS_QUOTA_NOT_ENABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741399));
pub const STATUS_NO_APPLICATION_PACKAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741398));
pub const STATUS_FILE_METADATA_OPTIMIZATION_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741397));
pub const STATUS_NOT_SAME_OBJECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741396));
pub const STATUS_FATAL_MEMORY_EXHAUSTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741395));
pub const STATUS_ERROR_PROCESS_NOT_IN_JOB = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741394));
pub const STATUS_CPU_SET_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741393));
pub const STATUS_IO_DEVICE_INVALID_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741392));
pub const STATUS_IO_UNALIGNED_WRITE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741391));
pub const STATUS_CONTROL_STACK_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741390));
pub const STATUS_WEAK_WHFBKEY_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741389));
pub const STATUS_SERVER_TRANSPORT_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741388));
pub const STATUS_CERTIFICATE_VALIDATION_PREFERENCE_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741387));
pub const STATUS_DEVICE_RESET_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483210));
pub const STATUS_NETWORK_OPEN_RESTRICTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741311));
pub const STATUS_NO_USER_SESSION_KEY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741310));
pub const STATUS_USER_SESSION_DELETED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741309));
pub const STATUS_RESOURCE_LANG_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741308));
pub const STATUS_INSUFF_SERVER_RESOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741307));
pub const STATUS_INVALID_BUFFER_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741306));
pub const STATUS_INVALID_ADDRESS_COMPONENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741305));
pub const STATUS_INVALID_ADDRESS_WILDCARD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741304));
pub const STATUS_TOO_MANY_ADDRESSES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741303));
pub const STATUS_ADDRESS_ALREADY_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741302));
pub const STATUS_ADDRESS_CLOSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741301));
pub const STATUS_CONNECTION_DISCONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741300));
pub const STATUS_CONNECTION_RESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741299));
pub const STATUS_TOO_MANY_NODES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741298));
pub const STATUS_TRANSACTION_ABORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741297));
pub const STATUS_TRANSACTION_TIMED_OUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741296));
pub const STATUS_TRANSACTION_NO_RELEASE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741295));
pub const STATUS_TRANSACTION_NO_MATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741294));
pub const STATUS_TRANSACTION_RESPONDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741293));
pub const STATUS_TRANSACTION_INVALID_ID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741292));
pub const STATUS_TRANSACTION_INVALID_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741291));
pub const STATUS_NOT_SERVER_SESSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741290));
pub const STATUS_NOT_CLIENT_SESSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741289));
pub const STATUS_CANNOT_LOAD_REGISTRY_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741288));
pub const STATUS_DEBUG_ATTACH_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741287));
pub const STATUS_SYSTEM_PROCESS_TERMINATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741286));
pub const STATUS_DATA_NOT_ACCEPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741285));
pub const STATUS_NO_BROWSER_SERVERS_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741284));
pub const STATUS_VDM_HARD_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741283));
pub const STATUS_DRIVER_CANCEL_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741282));
pub const STATUS_REPLY_MESSAGE_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741281));
pub const STATUS_MAPPED_ALIGNMENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741280));
pub const STATUS_IMAGE_CHECKSUM_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741279));
pub const STATUS_LOST_WRITEBEHIND_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741278));
pub const STATUS_CLIENT_SERVER_PARAMETERS_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741277));
pub const STATUS_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741275));
pub const STATUS_NOT_TINY_STREAM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741274));
pub const STATUS_RECOVERY_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741273));
pub const STATUS_STACK_OVERFLOW_READ = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741272));
pub const STATUS_FAIL_CHECK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741271));
pub const STATUS_DUPLICATE_OBJECTID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741270));
pub const STATUS_OBJECTID_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741269));
pub const STATUS_CONVERT_TO_LARGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741268));
pub const STATUS_RETRY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741267));
pub const STATUS_FOUND_OUT_OF_SCOPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741266));
pub const STATUS_ALLOCATE_BUCKET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741265));
pub const STATUS_PROPSET_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741264));
pub const STATUS_MARSHALL_OVERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741263));
pub const STATUS_INVALID_VARIANT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741262));
pub const STATUS_DOMAIN_CONTROLLER_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741261));
pub const STATUS_HANDLE_NOT_CLOSABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741259));
pub const STATUS_CONNECTION_REFUSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741258));
pub const STATUS_GRACEFUL_DISCONNECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741257));
pub const STATUS_ADDRESS_ALREADY_ASSOCIATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741256));
pub const STATUS_ADDRESS_NOT_ASSOCIATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741255));
pub const STATUS_CONNECTION_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741254));
pub const STATUS_CONNECTION_ACTIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741253));
pub const STATUS_NETWORK_UNREACHABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741252));
pub const STATUS_HOST_UNREACHABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741251));
pub const STATUS_PROTOCOL_UNREACHABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741250));
pub const STATUS_PORT_UNREACHABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741249));
pub const STATUS_REQUEST_ABORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741248));
pub const STATUS_CONNECTION_ABORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741247));
pub const STATUS_BAD_COMPRESSION_BUFFER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741246));
pub const STATUS_USER_MAPPED_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741245));
pub const STATUS_AUDIT_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741244));
pub const STATUS_TIMER_RESOLUTION_NOT_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741243));
pub const STATUS_CONNECTION_COUNT_LIMIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741242));
pub const STATUS_LOGIN_TIME_RESTRICTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741241));
pub const STATUS_LOGIN_WKSTA_RESTRICTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741240));
pub const STATUS_IMAGE_MP_UP_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741239));
pub const STATUS_INSUFFICIENT_LOGON_INFO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741232));
pub const STATUS_BAD_DLL_ENTRYPOINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741231));
pub const STATUS_BAD_SERVICE_ENTRYPOINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741230));
pub const STATUS_LPC_REPLY_LOST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741229));
pub const STATUS_IP_ADDRESS_CONFLICT1 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741228));
pub const STATUS_IP_ADDRESS_CONFLICT2 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741227));
pub const STATUS_REGISTRY_QUOTA_LIMIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741226));
pub const STATUS_PATH_NOT_COVERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741225));
pub const STATUS_NO_CALLBACK_ACTIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741224));
pub const STATUS_LICENSE_QUOTA_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741223));
pub const STATUS_PWD_TOO_SHORT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741222));
pub const STATUS_PWD_TOO_RECENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741221));
pub const STATUS_PWD_HISTORY_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741220));
pub const STATUS_PLUGPLAY_NO_DEVICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741218));
pub const STATUS_UNSUPPORTED_COMPRESSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741217));
pub const STATUS_INVALID_HW_PROFILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741216));
pub const STATUS_INVALID_PLUGPLAY_DEVICE_PATH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741215));
pub const STATUS_DRIVER_ORDINAL_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741214));
pub const STATUS_DRIVER_ENTRYPOINT_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741213));
pub const STATUS_RESOURCE_NOT_OWNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741212));
pub const STATUS_TOO_MANY_LINKS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741211));
pub const STATUS_QUOTA_LIST_INCONSISTENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741210));
pub const STATUS_FILE_IS_OFFLINE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741209));
pub const STATUS_EVALUATION_EXPIRATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741208));
pub const STATUS_ILLEGAL_DLL_RELOCATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741207));
pub const STATUS_LICENSE_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741206));
pub const STATUS_DLL_INIT_FAILED_LOGOFF = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741205));
pub const STATUS_DRIVER_UNABLE_TO_LOAD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741204));
pub const STATUS_DFS_UNAVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741203));
pub const STATUS_VOLUME_DISMOUNTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741202));
pub const STATUS_WX86_INTERNAL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741201));
pub const STATUS_WX86_FLOAT_STACK_CHECK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741200));
pub const STATUS_VALIDATE_CONTINUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741199));
pub const STATUS_NO_MATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741198));
pub const STATUS_NO_MORE_MATCHES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741197));
pub const STATUS_NOT_A_REPARSE_POINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741195));
pub const STATUS_IO_REPARSE_TAG_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741194));
pub const STATUS_IO_REPARSE_TAG_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741193));
pub const STATUS_IO_REPARSE_DATA_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741192));
pub const STATUS_IO_REPARSE_TAG_NOT_HANDLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741191));
pub const STATUS_PWD_TOO_LONG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741190));
pub const STATUS_STOWED_EXCEPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741189));
pub const STATUS_CONTEXT_STOWED_EXCEPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741188));
pub const STATUS_REPARSE_POINT_NOT_RESOLVED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741184));
pub const STATUS_DIRECTORY_IS_A_REPARSE_POINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741183));
pub const STATUS_RANGE_LIST_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741182));
pub const STATUS_SOURCE_ELEMENT_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741181));
pub const STATUS_DESTINATION_ELEMENT_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741180));
pub const STATUS_ILLEGAL_ELEMENT_ADDRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741179));
pub const STATUS_MAGAZINE_NOT_PRESENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741178));
pub const STATUS_REINITIALIZATION_NEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741177));
pub const STATUS_DEVICE_REQUIRES_CLEANING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483000));
pub const STATUS_DEVICE_DOOR_OPEN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147482999));
pub const STATUS_ENCRYPTION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741174));
pub const STATUS_DECRYPTION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741173));
pub const STATUS_RANGE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741172));
pub const STATUS_NO_RECOVERY_POLICY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741171));
pub const STATUS_NO_EFS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741170));
pub const STATUS_WRONG_EFS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741169));
pub const STATUS_NO_USER_KEYS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741168));
pub const STATUS_FILE_NOT_ENCRYPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741167));
pub const STATUS_NOT_EXPORT_FORMAT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741166));
pub const STATUS_FILE_ENCRYPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741165));
pub const STATUS_WAKE_SYSTEM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073742484));
pub const STATUS_WMI_GUID_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741163));
pub const STATUS_WMI_INSTANCE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741162));
pub const STATUS_WMI_ITEMID_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741161));
pub const STATUS_WMI_TRY_AGAIN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741160));
pub const STATUS_SHARED_POLICY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741159));
pub const STATUS_POLICY_OBJECT_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741158));
pub const STATUS_POLICY_ONLY_IN_DS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741157));
pub const STATUS_VOLUME_NOT_UPGRADED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741156));
pub const STATUS_REMOTE_STORAGE_NOT_ACTIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741155));
pub const STATUS_REMOTE_STORAGE_MEDIA_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741154));
pub const STATUS_NO_TRACKING_SERVICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741153));
pub const STATUS_SERVER_SID_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741152));
pub const STATUS_DS_NO_ATTRIBUTE_OR_VALUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741151));
pub const STATUS_DS_INVALID_ATTRIBUTE_SYNTAX = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741150));
pub const STATUS_DS_ATTRIBUTE_TYPE_UNDEFINED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741149));
pub const STATUS_DS_ATTRIBUTE_OR_VALUE_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741148));
pub const STATUS_DS_BUSY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741147));
pub const STATUS_DS_UNAVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741146));
pub const STATUS_DS_NO_RIDS_ALLOCATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741145));
pub const STATUS_DS_NO_MORE_RIDS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741144));
pub const STATUS_DS_INCORRECT_ROLE_OWNER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741143));
pub const STATUS_DS_RIDMGR_INIT_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741142));
pub const STATUS_DS_OBJ_CLASS_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741141));
pub const STATUS_DS_CANT_ON_NON_LEAF = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741140));
pub const STATUS_DS_CANT_ON_RDN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741139));
pub const STATUS_DS_CANT_MOD_OBJ_CLASS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741138));
pub const STATUS_DS_CROSS_DOM_MOVE_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741137));
pub const STATUS_DS_GC_NOT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741136));
pub const STATUS_DIRECTORY_SERVICE_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741135));
pub const STATUS_REPARSE_ATTRIBUTE_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741134));
pub const STATUS_CANT_ENABLE_DENY_ONLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741133));
pub const STATUS_FLOAT_MULTIPLE_FAULTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741132));
pub const STATUS_FLOAT_MULTIPLE_TRAPS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741131));
pub const STATUS_DEVICE_REMOVED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741130));
pub const STATUS_JOURNAL_DELETE_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741129));
pub const STATUS_JOURNAL_NOT_ACTIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741128));
pub const STATUS_NOINTERFACE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741127));
pub const STATUS_DS_RIDMGR_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741126));
pub const STATUS_DS_ADMIN_LIMIT_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741119));
pub const STATUS_DRIVER_FAILED_SLEEP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741118));
pub const STATUS_MUTUAL_AUTHENTICATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741117));
pub const STATUS_CORRUPT_SYSTEM_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741116));
pub const STATUS_DATATYPE_MISALIGNMENT_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741115));
pub const STATUS_WMI_READ_ONLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741114));
pub const STATUS_WMI_SET_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741113));
pub const STATUS_COMMITMENT_MINIMUM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741112));
pub const STATUS_REG_NAT_CONSUMPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741111));
pub const STATUS_TRANSPORT_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741110));
pub const STATUS_DS_SAM_INIT_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741109));
pub const STATUS_ONLY_IF_CONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741108));
pub const STATUS_DS_SENSITIVE_GROUP_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741107));
pub const STATUS_PNP_RESTART_ENUMERATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741106));
pub const STATUS_JOURNAL_ENTRY_DELETED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741105));
pub const STATUS_DS_CANT_MOD_PRIMARYGROUPID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741104));
pub const STATUS_SYSTEM_IMAGE_BAD_SIGNATURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741103));
pub const STATUS_PNP_REBOOT_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741102));
pub const STATUS_POWER_STATE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741101));
pub const STATUS_DS_INVALID_GROUP_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741100));
pub const STATUS_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741099));
pub const STATUS_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741098));
pub const STATUS_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741097));
pub const STATUS_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741096));
pub const STATUS_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741095));
pub const STATUS_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741094));
pub const STATUS_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741093));
pub const STATUS_DS_HAVE_PRIMARY_MEMBERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741092));
pub const STATUS_WMI_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741091));
pub const STATUS_INSUFFICIENT_POWER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741090));
pub const STATUS_SAM_NEED_BOOTKEY_PASSWORD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741089));
pub const STATUS_SAM_NEED_BOOTKEY_FLOPPY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741088));
pub const STATUS_DS_CANT_START = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741087));
pub const STATUS_DS_INIT_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741086));
pub const STATUS_SAM_INIT_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741085));
pub const STATUS_DS_GC_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741084));
pub const STATUS_DS_LOCAL_MEMBER_OF_LOCAL_ONLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741083));
pub const STATUS_DS_NO_FPO_IN_UNIVERSAL_GROUPS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741082));
pub const STATUS_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741081));
pub const STATUS_MULTIPLE_FAULT_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741080));
pub const STATUS_CURRENT_DOMAIN_NOT_ALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741079));
pub const STATUS_CANNOT_MAKE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741078));
pub const STATUS_SYSTEM_SHUTDOWN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741077));
pub const STATUS_DS_INIT_FAILURE_CONSOLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741076));
pub const STATUS_DS_SAM_INIT_FAILURE_CONSOLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741075));
pub const STATUS_UNFINISHED_CONTEXT_DELETED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741074));
pub const STATUS_NO_TGT_REPLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741073));
pub const STATUS_OBJECTID_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741072));
pub const STATUS_NO_IP_ADDRESSES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741071));
pub const STATUS_WRONG_CREDENTIAL_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741070));
pub const STATUS_CRYPTO_SYSTEM_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741069));
pub const STATUS_MAX_REFERRALS_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741068));
pub const STATUS_MUST_BE_KDC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741067));
pub const STATUS_STRONG_CRYPTO_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741066));
pub const STATUS_TOO_MANY_PRINCIPALS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741065));
pub const STATUS_NO_PA_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741064));
pub const STATUS_PKINIT_NAME_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741063));
pub const STATUS_SMARTCARD_LOGON_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741062));
pub const STATUS_KDC_INVALID_REQUEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741061));
pub const STATUS_KDC_UNABLE_TO_REFER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741060));
pub const STATUS_KDC_UNKNOWN_ETYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741059));
pub const STATUS_SHUTDOWN_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741058));
pub const STATUS_SERVER_SHUTDOWN_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741057));
pub const STATUS_NOT_SUPPORTED_ON_SBS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741056));
pub const STATUS_WMI_GUID_DISCONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741055));
pub const STATUS_WMI_ALREADY_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741054));
pub const STATUS_WMI_ALREADY_ENABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741053));
pub const STATUS_MFT_TOO_FRAGMENTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741052));
pub const STATUS_COPY_PROTECTION_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741051));
pub const STATUS_CSS_AUTHENTICATION_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741050));
pub const STATUS_CSS_KEY_NOT_PRESENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741049));
pub const STATUS_CSS_KEY_NOT_ESTABLISHED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741048));
pub const STATUS_CSS_SCRAMBLED_SECTOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741047));
pub const STATUS_CSS_REGION_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741046));
pub const STATUS_CSS_RESETS_EXHAUSTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741045));
pub const STATUS_PASSWORD_CHANGE_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741044));
pub const STATUS_LOST_MODE_LOGON_RESTRICTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741043));
pub const STATUS_PKINIT_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741024));
pub const STATUS_SMARTCARD_SUBSYSTEM_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741023));
pub const STATUS_NO_KERB_KEY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741022));
pub const STATUS_HOST_DOWN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740976));
pub const STATUS_UNSUPPORTED_PREAUTH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740975));
pub const STATUS_EFS_ALG_BLOB_TOO_BIG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740974));
pub const STATUS_PORT_NOT_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740973));
pub const STATUS_DEBUGGER_INACTIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740972));
pub const STATUS_DS_VERSION_CHECK_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740971));
pub const STATUS_AUDITING_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740970));
pub const STATUS_PRENT4_MACHINE_ACCOUNT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740969));
pub const STATUS_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740968));
pub const STATUS_INVALID_IMAGE_WIN_32 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740967));
pub const STATUS_INVALID_IMAGE_WIN_64 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740966));
pub const STATUS_BAD_BINDINGS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740965));
pub const STATUS_NETWORK_SESSION_EXPIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740964));
pub const STATUS_APPHELP_BLOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740963));
pub const STATUS_ALL_SIDS_FILTERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740962));
pub const STATUS_NOT_SAFE_MODE_DRIVER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740961));
pub const STATUS_ACCESS_DISABLED_BY_POLICY_DEFAULT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740959));
pub const STATUS_ACCESS_DISABLED_BY_POLICY_PATH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740958));
pub const STATUS_ACCESS_DISABLED_BY_POLICY_PUBLISHER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740957));
pub const STATUS_ACCESS_DISABLED_BY_POLICY_OTHER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740956));
pub const STATUS_FAILED_DRIVER_ENTRY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740955));
pub const STATUS_DEVICE_ENUMERATION_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740954));
pub const STATUS_MOUNT_POINT_NOT_RESOLVED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740952));
pub const STATUS_INVALID_DEVICE_OBJECT_PARAMETER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740951));
pub const STATUS_MCA_OCCURED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740950));
pub const STATUS_DRIVER_BLOCKED_CRITICAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740949));
pub const STATUS_DRIVER_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740948));
pub const STATUS_DRIVER_DATABASE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740947));
pub const STATUS_SYSTEM_HIVE_TOO_LARGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740946));
pub const STATUS_INVALID_IMPORT_OF_NON_DLL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740945));
pub const STATUS_DS_SHUTTING_DOWN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073742704));
pub const STATUS_NO_SECRETS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740943));
pub const STATUS_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740942));
pub const STATUS_FAILED_STACK_SWITCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740941));
pub const STATUS_HEAP_CORRUPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740940));
pub const STATUS_SMARTCARD_WRONG_PIN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740928));
pub const STATUS_SMARTCARD_CARD_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740927));
pub const STATUS_SMARTCARD_CARD_NOT_AUTHENTICATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740926));
pub const STATUS_SMARTCARD_NO_CARD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740925));
pub const STATUS_SMARTCARD_NO_KEY_CONTAINER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740924));
pub const STATUS_SMARTCARD_NO_CERTIFICATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740923));
pub const STATUS_SMARTCARD_NO_KEYSET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740922));
pub const STATUS_SMARTCARD_IO_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740921));
pub const STATUS_SMARTCARD_CERT_REVOKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740919));
pub const STATUS_ISSUING_CA_UNTRUSTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740918));
pub const STATUS_REVOCATION_OFFLINE_C = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740917));
pub const STATUS_PKINIT_CLIENT_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740916));
pub const STATUS_SMARTCARD_CERT_EXPIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740915));
pub const STATUS_DRIVER_FAILED_PRIOR_UNLOAD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740914));
pub const STATUS_SMARTCARD_SILENT_CONTEXT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740913));
pub const STATUS_PER_USER_TRUST_QUOTA_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740799));
pub const STATUS_ALL_USER_TRUST_QUOTA_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740798));
pub const STATUS_USER_DELETE_TRUST_QUOTA_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740797));
pub const STATUS_DS_NAME_NOT_UNIQUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740796));
pub const STATUS_DS_DUPLICATE_ID_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740795));
pub const STATUS_DS_GROUP_CONVERSION_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740794));
pub const STATUS_VOLSNAP_PREPARE_HIBERNATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740793));
pub const STATUS_USER2USER_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740792));
pub const STATUS_STACK_BUFFER_OVERRUN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740791));
pub const STATUS_NO_S4U_PROT_SUPPORT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740790));
pub const STATUS_CROSSREALM_DELEGATION_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740789));
pub const STATUS_REVOCATION_OFFLINE_KDC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740788));
pub const STATUS_ISSUING_CA_UNTRUSTED_KDC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740787));
pub const STATUS_KDC_CERT_EXPIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740786));
pub const STATUS_KDC_CERT_REVOKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740785));
pub const STATUS_PARAMETER_QUOTA_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740784));
pub const STATUS_HIBERNATION_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740783));
pub const STATUS_DELAY_LOAD_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740782));
pub const STATUS_VDM_DISALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740780));
pub const STATUS_HUNG_DISPLAY_DRIVER_THREAD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740779));
pub const STATUS_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740778));
pub const STATUS_INVALID_CRUNTIME_PARAMETER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740777));
pub const STATUS_NTLM_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740776));
pub const STATUS_DS_SRC_SID_EXISTS_IN_FOREST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740775));
pub const STATUS_DS_DOMAIN_NAME_EXISTS_IN_FOREST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740774));
pub const STATUS_DS_FLAT_NAME_EXISTS_IN_FOREST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740773));
pub const STATUS_INVALID_USER_PRINCIPAL_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740772));
pub const STATUS_FATAL_USER_CALLBACK_EXCEPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740771));
pub const STATUS_ASSERTION_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740768));
pub const STATUS_VERIFIER_STOP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740767));
pub const STATUS_CALLBACK_POP_STACK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740765));
pub const STATUS_INCOMPATIBLE_DRIVER_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740764));
pub const STATUS_HIVE_UNLOADED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740763));
pub const STATUS_COMPRESSION_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740762));
pub const STATUS_FILE_SYSTEM_LIMITATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740761));
pub const STATUS_INVALID_IMAGE_HASH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740760));
pub const STATUS_NOT_CAPABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740759));
pub const STATUS_REQUEST_OUT_OF_SEQUENCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740758));
pub const STATUS_IMPLEMENTATION_LIMIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740757));
pub const STATUS_ELEVATION_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740756));
pub const STATUS_NO_SECURITY_CONTEXT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740755));
pub const STATUS_PKU2U_CERT_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740753));
pub const STATUS_BEYOND_VDL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740750));
pub const STATUS_ENCOUNTERED_WRITE_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740749));
pub const STATUS_PTE_CHANGED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740748));
pub const STATUS_PURGE_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740747));
pub const STATUS_CRED_REQUIRES_CONFIRMATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740736));
pub const STATUS_CS_ENCRYPTION_INVALID_SERVER_RESPONSE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740735));
pub const STATUS_CS_ENCRYPTION_UNSUPPORTED_SERVER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740734));
pub const STATUS_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740733));
pub const STATUS_CS_ENCRYPTION_NEW_ENCRYPTED_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740732));
pub const STATUS_CS_ENCRYPTION_FILE_NOT_CSE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740731));
pub const STATUS_INVALID_LABEL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740730));
pub const STATUS_DRIVER_PROCESS_TERMINATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740720));
pub const STATUS_AMBIGUOUS_SYSTEM_DEVICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740719));
pub const STATUS_SYSTEM_DEVICE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740718));
pub const STATUS_RESTART_BOOT_APPLICATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740717));
pub const STATUS_INSUFFICIENT_NVRAM_RESOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740716));
pub const STATUS_INVALID_SESSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740715));
pub const STATUS_THREAD_ALREADY_IN_SESSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740714));
pub const STATUS_THREAD_NOT_IN_SESSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740713));
pub const STATUS_INVALID_WEIGHT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740712));
pub const STATUS_REQUEST_PAUSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740711));
pub const STATUS_NO_RANGES_PROCESSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740704));
pub const STATUS_DISK_RESOURCES_EXHAUSTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740703));
pub const STATUS_NEEDS_REMEDIATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740702));
pub const STATUS_DEVICE_FEATURE_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740701));
pub const STATUS_DEVICE_UNREACHABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740700));
pub const STATUS_INVALID_TOKEN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740699));
pub const STATUS_SERVER_UNAVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740698));
pub const STATUS_FILE_NOT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740697));
pub const STATUS_DEVICE_INSUFFICIENT_RESOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740696));
pub const STATUS_PACKAGE_UPDATING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740695));
pub const STATUS_NOT_READ_FROM_COPY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740694));
pub const STATUS_FT_WRITE_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740693));
pub const STATUS_FT_DI_SCAN_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740692));
pub const STATUS_OBJECT_NOT_EXTERNALLY_BACKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740691));
pub const STATUS_EXTERNAL_BACKING_PROVIDER_UNKNOWN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740690));
pub const STATUS_COMPRESSION_NOT_BENEFICIAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740689));
pub const STATUS_DATA_CHECKSUM_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740688));
pub const STATUS_INTERMIXED_KERNEL_EA_OPERATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740687));
pub const STATUS_TRIM_READ_ZERO_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740686));
pub const STATUS_TOO_MANY_SEGMENT_DESCRIPTORS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740685));
pub const STATUS_INVALID_OFFSET_ALIGNMENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740684));
pub const STATUS_INVALID_FIELD_IN_PARAMETER_LIST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740683));
pub const STATUS_OPERATION_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740682));
pub const STATUS_INVALID_INITIATOR_TARGET_PATH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740681));
pub const STATUS_SCRUB_DATA_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740680));
pub const STATUS_NOT_REDUNDANT_STORAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740679));
pub const STATUS_RESIDENT_FILE_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740678));
pub const STATUS_COMPRESSED_FILE_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740677));
pub const STATUS_DIRECTORY_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740676));
pub const STATUS_IO_OPERATION_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740675));
pub const STATUS_SYSTEM_NEEDS_REMEDIATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740674));
pub const STATUS_APPX_INTEGRITY_FAILURE_CLR_NGEN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740673));
pub const STATUS_SHARE_UNAVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740672));
pub const STATUS_APISET_NOT_HOSTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740671));
pub const STATUS_APISET_NOT_PRESENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740670));
pub const STATUS_DEVICE_HARDWARE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740669));
pub const STATUS_FIRMWARE_SLOT_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740668));
pub const STATUS_FIRMWARE_IMAGE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740667));
pub const STATUS_STORAGE_TOPOLOGY_ID_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740666));
pub const STATUS_WIM_NOT_BOOTABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740665));
pub const STATUS_BLOCKED_BY_PARENTAL_CONTROLS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740664));
pub const STATUS_NEEDS_REGISTRATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740663));
pub const STATUS_QUOTA_ACTIVITY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740662));
pub const STATUS_CALLBACK_INVOKE_INLINE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740661));
pub const STATUS_BLOCK_TOO_MANY_REFERENCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740660));
pub const STATUS_MARKED_TO_DISALLOW_WRITES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740659));
pub const STATUS_NETWORK_ACCESS_DENIED_EDP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740658));
pub const STATUS_ENCLAVE_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740657));
pub const STATUS_PNP_NO_COMPAT_DRIVERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740656));
pub const STATUS_PNP_DRIVER_PACKAGE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740655));
pub const STATUS_PNP_DRIVER_CONFIGURATION_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740654));
pub const STATUS_PNP_DRIVER_CONFIGURATION_INCOMPLETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740653));
pub const STATUS_PNP_FUNCTION_DRIVER_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740652));
pub const STATUS_PNP_DEVICE_CONFIGURATION_PENDING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740651));
pub const STATUS_DEVICE_HINT_NAME_BUFFER_TOO_SMALL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740650));
pub const STATUS_PACKAGE_NOT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740649));
pub const STATUS_DEVICE_IN_MAINTENANCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740647));
pub const STATUS_NOT_SUPPORTED_ON_DAX = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740646));
pub const STATUS_FREE_SPACE_TOO_FRAGMENTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740645));
pub const STATUS_DAX_MAPPING_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740644));
pub const STATUS_CHILD_PROCESS_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740643));
pub const STATUS_STORAGE_LOST_DATA_PERSISTENCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740642));
pub const STATUS_PARTITION_TERMINATING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740640));
pub const STATUS_EXTERNAL_SYSKEY_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740639));
pub const STATUS_ENCLAVE_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740638));
pub const STATUS_FILE_PROTECTED_UNDER_DPL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740637));
pub const STATUS_VOLUME_NOT_CLUSTER_ALIGNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740636));
pub const STATUS_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740635));
pub const STATUS_APPX_FILE_NOT_ENCRYPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740634));
pub const STATUS_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740633));
pub const STATUS_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740632));
pub const STATUS_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740631));
pub const STATUS_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740630));
pub const STATUS_FT_READ_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740629));
pub const STATUS_PATCH_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740628));
pub const STATUS_STORAGE_RESERVE_ID_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740627));
pub const STATUS_STORAGE_RESERVE_DOES_NOT_EXIST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740626));
pub const STATUS_STORAGE_RESERVE_ALREADY_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740625));
pub const STATUS_STORAGE_RESERVE_NOT_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740624));
pub const STATUS_NOT_A_DAX_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740623));
pub const STATUS_NOT_DAX_MAPPABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740622));
pub const STATUS_CASE_DIFFERING_NAMES_IN_DIR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740621));
pub const STATUS_FILE_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740620));
pub const STATUS_NOT_SUPPORTED_WITH_BTT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740619));
pub const STATUS_ENCRYPTION_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740618));
pub const STATUS_ENCRYPTING_METADATA_DISALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740617));
pub const STATUS_CANT_CLEAR_ENCRYPTION_FLAG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740616));
pub const STATUS_UNSATISFIED_DEPENDENCIES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740615));
pub const STATUS_CASE_SENSITIVE_PATH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740614));
pub const STATUS_UNSUPPORTED_PAGING_MODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740613));
pub const STATUS_UNTRUSTED_MOUNT_POINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740612));
pub const STATUS_HAS_SYSTEM_CRITICAL_FILES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740611));
pub const STATUS_OBJECT_IS_IMMUTABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740610));
pub const STATUS_FT_READ_FROM_COPY_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740609));
pub const STATUS_IMAGE_LOADED_AS_PATCH_IMAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740608));
pub const STATUS_STORAGE_STACK_ACCESS_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740607));
pub const STATUS_INSUFFICIENT_VIRTUAL_ADDR_RESOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740606));
pub const STATUS_ENCRYPTED_FILE_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740605));
pub const STATUS_SPARSE_FILE_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740604));
pub const STATUS_PAGEFILE_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740603));
pub const STATUS_VOLUME_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740602));
pub const STATUS_NOT_SUPPORTED_WITH_BYPASSIO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740601));
pub const STATUS_NO_BYPASSIO_DRIVER_SUPPORT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740600));
pub const STATUS_NOT_SUPPORTED_WITH_ENCRYPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740599));
pub const STATUS_NOT_SUPPORTED_WITH_COMPRESSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740598));
pub const STATUS_NOT_SUPPORTED_WITH_REPLICATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740597));
pub const STATUS_NOT_SUPPORTED_WITH_DEDUPLICATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740596));
pub const STATUS_NOT_SUPPORTED_WITH_AUDITING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740595));
pub const STATUS_NOT_SUPPORTED_WITH_MONITORING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740594));
pub const STATUS_NOT_SUPPORTED_WITH_SNAPSHOT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740593));
pub const STATUS_NOT_SUPPORTED_WITH_VIRTUALIZATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740592));
pub const STATUS_INDEX_OUT_OF_BOUNDS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740591));
pub const STATUS_BYPASSIO_FLT_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740590));
pub const STATUS_VOLUME_WRITE_ACCESS_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740589));
pub const STATUS_INVALID_TASK_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740544));
pub const STATUS_INVALID_TASK_INDEX = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740543));
pub const STATUS_THREAD_ALREADY_IN_TASK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740542));
pub const STATUS_CALLBACK_BYPASS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740541));
pub const STATUS_UNDEFINED_SCOPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740540));
pub const STATUS_INVALID_CAP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740539));
pub const STATUS_NOT_GUI_PROCESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740538));
pub const STATUS_DEVICE_HUNG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740537));
pub const STATUS_CONTAINER_ASSIGNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740536));
pub const STATUS_JOB_NO_CONTAINER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740535));
pub const STATUS_DEVICE_UNRESPONSIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740534));
pub const STATUS_REPARSE_POINT_ENCOUNTERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740533));
pub const STATUS_ATTRIBUTE_NOT_PRESENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740532));
pub const STATUS_NOT_A_TIERED_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740531));
pub const STATUS_ALREADY_HAS_STREAM_ID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740530));
pub const STATUS_JOB_NOT_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740529));
pub const STATUS_ALREADY_INITIALIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740528));
pub const STATUS_ENCLAVE_NOT_TERMINATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740527));
pub const STATUS_ENCLAVE_IS_TERMINATING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740526));
pub const STATUS_SMB1_NOT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740525));
pub const STATUS_SMR_GARBAGE_COLLECTION_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740524));
pub const STATUS_INTERRUPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740523));
pub const STATUS_THREAD_NOT_RUNNING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740522));
pub const STATUS_SESSION_KEY_TOO_SHORT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740521));
pub const STATUS_FAIL_FAST_EXCEPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740286));
pub const STATUS_IMAGE_CERT_REVOKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740285));
pub const STATUS_DYNAMIC_CODE_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740284));
pub const STATUS_IMAGE_CERT_EXPIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740283));
pub const STATUS_STRICT_CFG_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740282));
pub const STATUS_SET_CONTEXT_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740278));
pub const STATUS_CROSS_PARTITION_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740277));
pub const STATUS_PORT_CLOSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740032));
pub const STATUS_MESSAGE_LOST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740031));
pub const STATUS_INVALID_MESSAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740030));
pub const STATUS_REQUEST_CANCELED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740029));
pub const STATUS_RECURSIVE_DISPATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740028));
pub const STATUS_LPC_RECEIVE_BUFFER_EXPECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740027));
pub const STATUS_LPC_INVALID_CONNECTION_USAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740026));
pub const STATUS_LPC_REQUESTS_NOT_ALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740025));
pub const STATUS_RESOURCE_IN_USE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740024));
pub const STATUS_HARDWARE_MEMORY_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740023));
pub const STATUS_THREADPOOL_HANDLE_EXCEPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740022));
pub const STATUS_THREADPOOL_SET_EVENT_ON_COMPLETION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740021));
pub const STATUS_THREADPOOL_RELEASE_SEMAPHORE_ON_COMPLETION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740020));
pub const STATUS_THREADPOOL_RELEASE_MUTEX_ON_COMPLETION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740019));
pub const STATUS_THREADPOOL_FREE_LIBRARY_ON_COMPLETION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740018));
pub const STATUS_THREADPOOL_RELEASED_DURING_OPERATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740017));
pub const STATUS_CALLBACK_RETURNED_WHILE_IMPERSONATING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740016));
pub const STATUS_APC_RETURNED_WHILE_IMPERSONATING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740015));
pub const STATUS_PROCESS_IS_PROTECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740014));
pub const STATUS_MCA_EXCEPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740013));
pub const STATUS_CERTIFICATE_MAPPING_NOT_UNIQUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740012));
pub const STATUS_SYMLINK_CLASS_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740011));
pub const STATUS_INVALID_IDN_NORMALIZATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740010));
pub const STATUS_NO_UNICODE_TRANSLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740009));
pub const STATUS_ALREADY_REGISTERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740008));
pub const STATUS_CONTEXT_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740007));
pub const STATUS_PORT_ALREADY_HAS_COMPLETION_LIST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740006));
pub const STATUS_CALLBACK_RETURNED_THREAD_PRIORITY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740005));
pub const STATUS_INVALID_THREAD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740004));
pub const STATUS_CALLBACK_RETURNED_TRANSACTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740003));
pub const STATUS_CALLBACK_RETURNED_LDR_LOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740002));
pub const STATUS_CALLBACK_RETURNED_LANG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740001));
pub const STATUS_CALLBACK_RETURNED_PRI_BACK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740000));
pub const STATUS_CALLBACK_RETURNED_THREAD_AFFINITY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739999));
pub const STATUS_LPC_HANDLE_COUNT_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739998));
pub const STATUS_EXECUTABLE_MEMORY_WRITE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739997));
pub const STATUS_KERNEL_EXECUTABLE_MEMORY_WRITE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739996));
pub const STATUS_ATTACHED_EXECUTABLE_MEMORY_WRITE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739995));
pub const STATUS_TRIGGERED_EXECUTABLE_MEMORY_WRITE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739994));
pub const STATUS_DISK_REPAIR_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739776));
pub const STATUS_DS_DOMAIN_RENAME_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739775));
pub const STATUS_DISK_QUOTA_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739774));
pub const STATUS_DATA_LOST_REPAIR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147481597));
pub const STATUS_CONTENT_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739772));
pub const STATUS_BAD_CLUSTERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739771));
pub const STATUS_VOLUME_DIRTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739770));
pub const STATUS_DISK_REPAIR_REDIRECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073743879));
pub const STATUS_DISK_REPAIR_UNSUCCESSFUL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739768));
pub const STATUS_CORRUPT_LOG_OVERFULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739767));
pub const STATUS_CORRUPT_LOG_CORRUPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739766));
pub const STATUS_CORRUPT_LOG_UNAVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739765));
pub const STATUS_CORRUPT_LOG_DELETED_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739764));
pub const STATUS_CORRUPT_LOG_CLEARED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739763));
pub const STATUS_ORPHAN_NAME_EXHAUSTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739762));
pub const STATUS_PROACTIVE_SCAN_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739761));
pub const STATUS_ENCRYPTED_IO_NOT_POSSIBLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739760));
pub const STATUS_CORRUPT_LOG_UPLEVEL_RECORDS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739759));
pub const STATUS_FILE_CHECKED_OUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739519));
pub const STATUS_CHECKOUT_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739518));
pub const STATUS_BAD_FILE_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739517));
pub const STATUS_FILE_TOO_LARGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739516));
pub const STATUS_FORMS_AUTH_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739515));
pub const STATUS_VIRUS_INFECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739514));
pub const STATUS_VIRUS_DELETED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739513));
pub const STATUS_BAD_MCFG_TABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739512));
pub const STATUS_CANNOT_BREAK_OPLOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739511));
pub const STATUS_BAD_KEY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739510));
pub const STATUS_BAD_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739509));
pub const STATUS_NO_KEY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739508));
pub const STATUS_FILE_HANDLE_REVOKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739504));
pub const STATUS_SECTION_DIRECT_MAP_ONLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739503));
pub const STATUS_VRF_VOLATILE_CFG_AND_IO_ENABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073738744));
pub const STATUS_VRF_VOLATILE_NOT_STOPPABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073738743));
pub const STATUS_VRF_VOLATILE_SAFE_MODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073738742));
pub const STATUS_VRF_VOLATILE_NOT_RUNNABLE_SYSTEM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073738741));
pub const STATUS_VRF_VOLATILE_NOT_SUPPORTED_RULECLASS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073738740));
pub const STATUS_VRF_VOLATILE_PROTECTED_DRIVER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073738739));
pub const STATUS_VRF_VOLATILE_NMI_REGISTERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073738738));
pub const STATUS_VRF_VOLATILE_SETTINGS_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073738737));
pub const STATUS_DIF_IOCALLBACK_NOT_REPLACED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073738634));
pub const STATUS_DIF_LIVEDUMP_LIMIT_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073738633));
pub const STATUS_DIF_VOLATILE_SECTION_NOT_LOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073738632));
pub const STATUS_DIF_VOLATILE_DRIVER_HOTPATCHED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073738631));
pub const STATUS_DIF_VOLATILE_INVALID_INFO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073738630));
pub const STATUS_DIF_VOLATILE_DRIVER_IS_NOT_RUNNING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073738629));
pub const STATUS_DIF_VOLATILE_PLUGIN_IS_NOT_RUNNING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073738628));
pub const STATUS_DIF_VOLATILE_PLUGIN_CHANGE_NOT_ALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073738627));
pub const STATUS_DIF_VOLATILE_NOT_ALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073738626));
pub const STATUS_DIF_BINDING_API_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073738625));
pub const STATUS_WOW_ASSERTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073702760));
pub const STATUS_INVALID_SIGNATURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700864));
pub const STATUS_HMAC_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700863));
pub const STATUS_AUTH_TAG_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700862));
pub const STATUS_INVALID_STATE_TRANSITION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700861));
pub const STATUS_INVALID_KERNEL_INFO_VERSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700860));
pub const STATUS_INVALID_PEP_INFO_VERSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700859));
pub const STATUS_HANDLE_REVOKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700858));
pub const STATUS_EOF_ON_GHOSTED_RANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700857));
pub const STATUS_CC_NEEDS_CALLBACK_SECTION_DRAIN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700856));
pub const STATUS_IPSEC_QUEUE_OVERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700848));
pub const STATUS_ND_QUEUE_OVERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700847));
pub const STATUS_HOPLIMIT_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700846));
pub const STATUS_PROTOCOL_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700845));
pub const STATUS_FASTPATH_REJECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700844));
pub const STATUS_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700736));
pub const STATUS_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700735));
pub const STATUS_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700734));
pub const STATUS_XML_PARSE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700733));
pub const STATUS_XMLDSIG_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700732));
pub const STATUS_WRONG_COMPARTMENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700731));
pub const STATUS_AUTHIP_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700730));
pub const STATUS_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700729));
pub const STATUS_DS_OID_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700728));
pub const STATUS_INCORRECT_ACCOUNT_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700727));
pub const STATUS_HASH_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700608));
pub const STATUS_HASH_NOT_PRESENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700607));
pub const STATUS_SECONDARY_IC_PROVIDER_NOT_REGISTERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700575));
pub const STATUS_GPIO_CLIENT_INFORMATION_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700574));
pub const STATUS_GPIO_VERSION_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700573));
pub const STATUS_GPIO_INVALID_REGISTRATION_PACKET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700572));
pub const STATUS_GPIO_OPERATION_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700571));
pub const STATUS_GPIO_INCOMPATIBLE_CONNECT_MODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700570));
pub const STATUS_GPIO_INTERRUPT_ALREADY_UNMASKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147442393));
pub const STATUS_CANNOT_SWITCH_RUNLEVEL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700543));
pub const STATUS_INVALID_RUNLEVEL_SETTING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700542));
pub const STATUS_RUNLEVEL_SWITCH_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700541));
pub const STATUS_SERVICES_FAILED_AUTOSTART = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073783108));
pub const STATUS_RUNLEVEL_SWITCH_AGENT_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700539));
pub const STATUS_RUNLEVEL_SWITCH_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700538));
pub const STATUS_NOT_APPCONTAINER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700352));
pub const STATUS_NOT_SUPPORTED_IN_APPCONTAINER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700351));
pub const STATUS_INVALID_PACKAGE_SID_LENGTH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700350));
pub const STATUS_LPAC_ACCESS_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700349));
pub const STATUS_ADMINLESS_ACCESS_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700348));
pub const STATUS_APP_DATA_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700223));
pub const STATUS_APP_DATA_EXPIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700222));
pub const STATUS_APP_DATA_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700221));
pub const STATUS_APP_DATA_LIMIT_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700220));
pub const STATUS_APP_DATA_REBOOT_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700219));
pub const STATUS_OFFLOAD_READ_FLT_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700191));
pub const STATUS_OFFLOAD_WRITE_FLT_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700190));
pub const STATUS_OFFLOAD_READ_FILE_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700189));
pub const STATUS_OFFLOAD_WRITE_FILE_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700188));
pub const STATUS_WOF_WIM_HEADER_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700187));
pub const STATUS_WOF_WIM_RESOURCE_TABLE_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700186));
pub const STATUS_WOF_FILE_RESOURCE_TABLE_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700185));
pub const STATUS_CIMFS_IMAGE_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073692671));
pub const STATUS_CIMFS_IMAGE_VERSION_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073692670));
pub const STATUS_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073689087));
pub const STATUS_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073689086));
pub const STATUS_FILE_SYSTEM_VIRTUALIZATION_BUSY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073689085));
pub const STATUS_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073689084));
pub const STATUS_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073689083));
pub const STATUS_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688832));
pub const STATUS_CLOUD_FILE_PROVIDER_NOT_RUNNING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688831));
pub const STATUS_CLOUD_FILE_METADATA_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688830));
pub const STATUS_CLOUD_FILE_METADATA_TOO_LARGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688829));
pub const STATUS_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147430652));
pub const STATUS_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147430651));
pub const STATUS_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688826));
pub const STATUS_NOT_A_CLOUD_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688825));
pub const STATUS_CLOUD_FILE_NOT_IN_SYNC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688824));
pub const STATUS_CLOUD_FILE_ALREADY_CONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688823));
pub const STATUS_CLOUD_FILE_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688822));
pub const STATUS_CLOUD_FILE_INVALID_REQUEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688821));
pub const STATUS_CLOUD_FILE_READ_ONLY_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688820));
pub const STATUS_CLOUD_FILE_CONNECTED_PROVIDER_ONLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688819));
pub const STATUS_CLOUD_FILE_VALIDATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688818));
pub const STATUS_CLOUD_FILE_AUTHENTICATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688817));
pub const STATUS_CLOUD_FILE_INSUFFICIENT_RESOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688816));
pub const STATUS_CLOUD_FILE_NETWORK_UNAVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688815));
pub const STATUS_CLOUD_FILE_UNSUCCESSFUL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688814));
pub const STATUS_CLOUD_FILE_NOT_UNDER_SYNC_ROOT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688813));
pub const STATUS_CLOUD_FILE_IN_USE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688812));
pub const STATUS_CLOUD_FILE_PINNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688811));
pub const STATUS_CLOUD_FILE_REQUEST_ABORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688810));
pub const STATUS_CLOUD_FILE_PROPERTY_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688809));
pub const STATUS_CLOUD_FILE_ACCESS_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688808));
pub const STATUS_CLOUD_FILE_INCOMPATIBLE_HARDLINKS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688807));
pub const STATUS_CLOUD_FILE_PROPERTY_LOCK_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688806));
pub const STATUS_CLOUD_FILE_REQUEST_CANCELED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688805));
pub const STATUS_CLOUD_FILE_PROVIDER_TERMINATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688803));
pub const STATUS_NOT_A_CLOUD_SYNC_ROOT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688802));
pub const STATUS_CLOUD_FILE_REQUEST_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688801));
pub const STATUS_CLOUD_FILE_DEHYDRATION_DISALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688800));
pub const STATUS_FILE_SNAP_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073679104));
pub const STATUS_FILE_SNAP_USER_SECTION_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073679103));
pub const STATUS_FILE_SNAP_MODIFY_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073679102));
pub const STATUS_FILE_SNAP_IO_NOT_COORDINATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073679101));
pub const STATUS_FILE_SNAP_UNEXPECTED_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073679100));
pub const STATUS_FILE_SNAP_INVALID_PARAMETER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073679099));
pub const DBG_NO_STATE_CHANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073676287));
pub const DBG_APP_NOT_IDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073676286));
pub const RPC_NT_INVALID_STRING_BINDING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610751));
pub const RPC_NT_WRONG_KIND_OF_BINDING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610750));
pub const RPC_NT_INVALID_BINDING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610749));
pub const RPC_NT_PROTSEQ_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610748));
pub const RPC_NT_INVALID_RPC_PROTSEQ = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610747));
pub const RPC_NT_INVALID_STRING_UUID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610746));
pub const RPC_NT_INVALID_ENDPOINT_FORMAT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610745));
pub const RPC_NT_INVALID_NET_ADDR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610744));
pub const RPC_NT_NO_ENDPOINT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610743));
pub const RPC_NT_INVALID_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610742));
pub const RPC_NT_OBJECT_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610741));
pub const RPC_NT_ALREADY_REGISTERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610740));
pub const RPC_NT_TYPE_ALREADY_REGISTERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610739));
pub const RPC_NT_ALREADY_LISTENING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610738));
pub const RPC_NT_NO_PROTSEQS_REGISTERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610737));
pub const RPC_NT_NOT_LISTENING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610736));
pub const RPC_NT_UNKNOWN_MGR_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610735));
pub const RPC_NT_UNKNOWN_IF = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610734));
pub const RPC_NT_NO_BINDINGS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610733));
pub const RPC_NT_NO_PROTSEQS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610732));
pub const RPC_NT_CANT_CREATE_ENDPOINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610731));
pub const RPC_NT_OUT_OF_RESOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610730));
pub const RPC_NT_SERVER_UNAVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610729));
pub const RPC_NT_SERVER_TOO_BUSY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610728));
pub const RPC_NT_INVALID_NETWORK_OPTIONS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610727));
pub const RPC_NT_NO_CALL_ACTIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610726));
pub const RPC_NT_CALL_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610725));
pub const RPC_NT_CALL_FAILED_DNE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610724));
pub const RPC_NT_PROTOCOL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610723));
pub const RPC_NT_UNSUPPORTED_TRANS_SYN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610721));
pub const RPC_NT_UNSUPPORTED_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610719));
pub const RPC_NT_INVALID_TAG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610718));
pub const RPC_NT_INVALID_BOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610717));
pub const RPC_NT_NO_ENTRY_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610716));
pub const RPC_NT_INVALID_NAME_SYNTAX = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610715));
pub const RPC_NT_UNSUPPORTED_NAME_SYNTAX = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610714));
pub const RPC_NT_UUID_NO_ADDRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610712));
pub const RPC_NT_DUPLICATE_ENDPOINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610711));
pub const RPC_NT_UNKNOWN_AUTHN_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610710));
pub const RPC_NT_MAX_CALLS_TOO_SMALL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610709));
pub const RPC_NT_STRING_TOO_LONG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610708));
pub const RPC_NT_PROTSEQ_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610707));
pub const RPC_NT_PROCNUM_OUT_OF_RANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610706));
pub const RPC_NT_BINDING_HAS_NO_AUTH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610705));
pub const RPC_NT_UNKNOWN_AUTHN_SERVICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610704));
pub const RPC_NT_UNKNOWN_AUTHN_LEVEL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610703));
pub const RPC_NT_INVALID_AUTH_IDENTITY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610702));
pub const RPC_NT_UNKNOWN_AUTHZ_SERVICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610701));
pub const EPT_NT_INVALID_ENTRY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610700));
pub const EPT_NT_CANT_PERFORM_OP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610699));
pub const EPT_NT_NOT_REGISTERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610698));
pub const RPC_NT_NOTHING_TO_EXPORT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610697));
pub const RPC_NT_INCOMPLETE_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610696));
pub const RPC_NT_INVALID_VERS_OPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610695));
pub const RPC_NT_NO_MORE_MEMBERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610694));
pub const RPC_NT_NOT_ALL_OBJS_UNEXPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610693));
pub const RPC_NT_INTERFACE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610692));
pub const RPC_NT_ENTRY_ALREADY_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610691));
pub const RPC_NT_ENTRY_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610690));
pub const RPC_NT_NAME_SERVICE_UNAVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610689));
pub const RPC_NT_INVALID_NAF_ID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610688));
pub const RPC_NT_CANNOT_SUPPORT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610687));
pub const RPC_NT_NO_CONTEXT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610686));
pub const RPC_NT_INTERNAL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610685));
pub const RPC_NT_ZERO_DIVIDE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610684));
pub const RPC_NT_ADDRESS_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610683));
pub const RPC_NT_FP_DIV_ZERO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610682));
pub const RPC_NT_FP_UNDERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610681));
pub const RPC_NT_FP_OVERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610680));
pub const RPC_NT_NO_MORE_ENTRIES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545215));
pub const RPC_NT_SS_CHAR_TRANS_OPEN_FAIL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545214));
pub const RPC_NT_SS_CHAR_TRANS_SHORT_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545213));
pub const RPC_NT_SS_IN_NULL_CONTEXT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545212));
pub const RPC_NT_SS_CONTEXT_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545211));
pub const RPC_NT_SS_CONTEXT_DAMAGED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545210));
pub const RPC_NT_SS_HANDLES_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545209));
pub const RPC_NT_SS_CANNOT_GET_CALL_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545208));
pub const RPC_NT_NULL_REF_POINTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545207));
pub const RPC_NT_ENUM_VALUE_OUT_OF_RANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545206));
pub const RPC_NT_BYTE_COUNT_TOO_SMALL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545205));
pub const RPC_NT_BAD_STUB_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545204));
pub const RPC_NT_CALL_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610679));
pub const RPC_NT_NO_MORE_BINDINGS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610678));
pub const RPC_NT_GROUP_MEMBER_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610677));
pub const EPT_NT_CANT_CREATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610676));
pub const RPC_NT_INVALID_OBJECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610675));
pub const RPC_NT_NO_INTERFACES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610673));
pub const RPC_NT_CALL_CANCELLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610672));
pub const RPC_NT_BINDING_INCOMPLETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610671));
pub const RPC_NT_COMM_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610670));
pub const RPC_NT_UNSUPPORTED_AUTHN_LEVEL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610669));
pub const RPC_NT_NO_PRINC_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610668));
pub const RPC_NT_NOT_RPC_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610667));
pub const RPC_NT_UUID_LOCAL_ONLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073872982));
pub const RPC_NT_SEC_PKG_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610665));
pub const RPC_NT_NOT_CANCELLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610664));
pub const RPC_NT_INVALID_ES_ACTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545127));
pub const RPC_NT_WRONG_ES_VERSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545126));
pub const RPC_NT_WRONG_STUB_VERSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545125));
pub const RPC_NT_INVALID_PIPE_OBJECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545124));
pub const RPC_NT_INVALID_PIPE_OPERATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545123));
pub const RPC_NT_WRONG_PIPE_VERSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545122));
pub const RPC_NT_PIPE_CLOSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545121));
pub const RPC_NT_PIPE_DISCIPLINE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545120));
pub const RPC_NT_PIPE_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545119));
pub const RPC_NT_INVALID_ASYNC_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610654));
pub const RPC_NT_INVALID_ASYNC_CALL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610653));
pub const RPC_NT_PROXY_ACCESS_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610652));
pub const RPC_NT_COOKIE_AUTH_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610651));
pub const RPC_NT_SEND_INCOMPLETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073873071));
pub const STATUS_ACPI_INVALID_OPCODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431103));
pub const STATUS_ACPI_STACK_OVERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431102));
pub const STATUS_ACPI_ASSERT_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431101));
pub const STATUS_ACPI_INVALID_INDEX = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431100));
pub const STATUS_ACPI_INVALID_ARGUMENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431099));
pub const STATUS_ACPI_FATAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431098));
pub const STATUS_ACPI_INVALID_SUPERNAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431097));
pub const STATUS_ACPI_INVALID_ARGTYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431096));
pub const STATUS_ACPI_INVALID_OBJTYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431095));
pub const STATUS_ACPI_INVALID_TARGETTYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431094));
pub const STATUS_ACPI_INCORRECT_ARGUMENT_COUNT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431093));
pub const STATUS_ACPI_ADDRESS_NOT_MAPPED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431092));
pub const STATUS_ACPI_INVALID_EVENTTYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431091));
pub const STATUS_ACPI_HANDLER_COLLISION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431090));
pub const STATUS_ACPI_INVALID_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431089));
pub const STATUS_ACPI_INVALID_REGION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431088));
pub const STATUS_ACPI_INVALID_ACCESS_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431087));
pub const STATUS_ACPI_ACQUIRE_GLOBAL_LOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431086));
pub const STATUS_ACPI_ALREADY_INITIALIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431085));
pub const STATUS_ACPI_NOT_INITIALIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431084));
pub const STATUS_ACPI_INVALID_MUTEX_LEVEL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431083));
pub const STATUS_ACPI_MUTEX_NOT_OWNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431082));
pub const STATUS_ACPI_MUTEX_NOT_OWNER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431081));
pub const STATUS_ACPI_RS_ACCESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431080));
pub const STATUS_ACPI_INVALID_TABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431079));
pub const STATUS_ACPI_REG_HANDLER_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431072));
pub const STATUS_ACPI_POWER_REQUEST_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431071));
pub const STATUS_CTX_WINSTATION_NAME_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086463));
pub const STATUS_CTX_INVALID_PD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086462));
pub const STATUS_CTX_PD_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086461));
pub const STATUS_CTX_CDM_CONNECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1074397188));
pub const STATUS_CTX_CDM_DISCONNECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1074397189));
pub const STATUS_CTX_CLOSE_PENDING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086458));
pub const STATUS_CTX_NO_OUTBUF = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086457));
pub const STATUS_CTX_MODEM_INF_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086456));
pub const STATUS_CTX_INVALID_MODEMNAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086455));
pub const STATUS_CTX_RESPONSE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086454));
pub const STATUS_CTX_MODEM_RESPONSE_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086453));
pub const STATUS_CTX_MODEM_RESPONSE_NO_CARRIER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086452));
pub const STATUS_CTX_MODEM_RESPONSE_NO_DIALTONE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086451));
pub const STATUS_CTX_MODEM_RESPONSE_BUSY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086450));
pub const STATUS_CTX_MODEM_RESPONSE_VOICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086449));
pub const STATUS_CTX_TD_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086448));
pub const STATUS_CTX_LICENSE_CLIENT_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086446));
pub const STATUS_CTX_LICENSE_NOT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086445));
pub const STATUS_CTX_LICENSE_EXPIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086444));
pub const STATUS_CTX_WINSTATION_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086443));
pub const STATUS_CTX_WINSTATION_NAME_COLLISION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086442));
pub const STATUS_CTX_WINSTATION_BUSY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086441));
pub const STATUS_CTX_BAD_VIDEO_MODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086440));
pub const STATUS_CTX_GRAPHICS_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086430));
pub const STATUS_CTX_NOT_CONSOLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086428));
pub const STATUS_CTX_CLIENT_QUERY_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086426));
pub const STATUS_CTX_CONSOLE_DISCONNECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086425));
pub const STATUS_CTX_CONSOLE_CONNECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086424));
pub const STATUS_CTX_SHADOW_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086422));
pub const STATUS_CTX_WINSTATION_ACCESS_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086421));
pub const STATUS_CTX_INVALID_WD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086418));
pub const STATUS_CTX_WD_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086417));
pub const STATUS_CTX_SHADOW_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086416));
pub const STATUS_CTX_SHADOW_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086415));
pub const STATUS_RDP_PROTOCOL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086414));
pub const STATUS_CTX_CLIENT_LICENSE_NOT_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086413));
pub const STATUS_CTX_CLIENT_LICENSE_IN_USE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086412));
pub const STATUS_CTX_SHADOW_ENDED_BY_MODE_CHANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086411));
pub const STATUS_CTX_SHADOW_NOT_RUNNING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086410));
pub const STATUS_CTX_LOGON_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086409));
pub const STATUS_CTX_SECURITY_LAYER_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086408));
pub const STATUS_TS_INCOMPATIBLE_SESSIONS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086407));
pub const STATUS_TS_VIDEO_SUBSYSTEM_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086406));
pub const STATUS_PNP_BAD_MPS_TABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073479627));
pub const STATUS_PNP_TRANSLATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073479626));
pub const STATUS_PNP_IRQ_TRANSLATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073479625));
pub const STATUS_PNP_INVALID_ID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073479624));
pub const STATUS_IO_REISSUE_AS_CACHED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073479623));
pub const STATUS_MUI_FILE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073020927));
pub const STATUS_MUI_INVALID_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073020926));
pub const STATUS_MUI_INVALID_RC_CONFIG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073020925));
pub const STATUS_MUI_INVALID_LOCALE_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073020924));
pub const STATUS_MUI_INVALID_ULTIMATEFALLBACK_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073020923));
pub const STATUS_MUI_FILE_NOT_LOADED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073020922));
pub const STATUS_RESOURCE_ENUM_USER_STOP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073020921));
pub const STATUS_FLT_NO_HANDLER_DEFINED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906815));
pub const STATUS_FLT_CONTEXT_ALREADY_DEFINED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906814));
pub const STATUS_FLT_INVALID_ASYNCHRONOUS_REQUEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906813));
pub const STATUS_FLT_DISALLOW_FAST_IO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906812));
pub const STATUS_FLT_DISALLOW_FSFILTER_IO = @as(i32, -1071906812);
pub const STATUS_FLT_INVALID_NAME_REQUEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906811));
pub const STATUS_FLT_NOT_SAFE_TO_POST_OPERATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906810));
pub const STATUS_FLT_NOT_INITIALIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906809));
pub const STATUS_FLT_FILTER_NOT_READY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906808));
pub const STATUS_FLT_POST_OPERATION_CLEANUP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906807));
pub const STATUS_FLT_INTERNAL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906806));
pub const STATUS_FLT_DELETING_OBJECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906805));
pub const STATUS_FLT_MUST_BE_NONPAGED_POOL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906804));
pub const STATUS_FLT_DUPLICATE_ENTRY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906803));
pub const STATUS_FLT_CBDQ_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906802));
pub const STATUS_FLT_DO_NOT_ATTACH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906801));
pub const STATUS_FLT_DO_NOT_DETACH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906800));
pub const STATUS_FLT_INSTANCE_ALTITUDE_COLLISION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906799));
pub const STATUS_FLT_INSTANCE_NAME_COLLISION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906798));
pub const STATUS_FLT_FILTER_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906797));
pub const STATUS_FLT_VOLUME_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906796));
pub const STATUS_FLT_INSTANCE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906795));
pub const STATUS_FLT_CONTEXT_ALLOCATION_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906794));
pub const STATUS_FLT_INVALID_CONTEXT_REGISTRATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906793));
pub const STATUS_FLT_NAME_CACHE_MISS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906792));
pub const STATUS_FLT_NO_DEVICE_OBJECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906791));
pub const STATUS_FLT_VOLUME_ALREADY_MOUNTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906790));
pub const STATUS_FLT_ALREADY_ENLISTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906789));
pub const STATUS_FLT_CONTEXT_ALREADY_LINKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906788));
pub const STATUS_FLT_NO_WAITER_FOR_REPLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906784));
pub const STATUS_FLT_REGISTRATION_BUSY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906781));
pub const STATUS_FLT_WCOS_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906780));
pub const STATUS_SXS_SECTION_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365567));
pub const STATUS_SXS_CANT_GEN_ACTCTX = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365566));
pub const STATUS_SXS_INVALID_ACTCTXDATA_FORMAT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365565));
pub const STATUS_SXS_ASSEMBLY_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365564));
pub const STATUS_SXS_MANIFEST_FORMAT_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365563));
pub const STATUS_SXS_MANIFEST_PARSE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365562));
pub const STATUS_SXS_ACTIVATION_CONTEXT_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365561));
pub const STATUS_SXS_KEY_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365560));
pub const STATUS_SXS_VERSION_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365559));
pub const STATUS_SXS_WRONG_SECTION_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365558));
pub const STATUS_SXS_THREAD_QUERIES_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365557));
pub const STATUS_SXS_ASSEMBLY_MISSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365556));
pub const STATUS_SXS_RELEASE_ACTIVATION_CONTEXT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075118093));
pub const STATUS_SXS_PROCESS_DEFAULT_ALREADY_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365554));
pub const STATUS_SXS_EARLY_DEACTIVATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365553));
pub const STATUS_SXS_INVALID_DEACTIVATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365552));
pub const STATUS_SXS_MULTIPLE_DEACTIVATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365551));
pub const STATUS_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365550));
pub const STATUS_SXS_PROCESS_TERMINATION_REQUESTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365549));
pub const STATUS_SXS_CORRUPT_ACTIVATION_STACK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365548));
pub const STATUS_SXS_CORRUPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365547));
pub const STATUS_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365546));
pub const STATUS_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365545));
pub const STATUS_SXS_IDENTITY_DUPLICATE_ATTRIBUTE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365544));
pub const STATUS_SXS_IDENTITY_PARSE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365543));
pub const STATUS_SXS_COMPONENT_STORE_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365542));
pub const STATUS_SXS_FILE_HASH_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365541));
pub const STATUS_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365540));
pub const STATUS_SXS_IDENTITIES_DIFFERENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365539));
pub const STATUS_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365538));
pub const STATUS_SXS_FILE_NOT_PART_OF_ASSEMBLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365537));
pub const STATUS_ADVANCED_INSTALLER_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365536));
pub const STATUS_XML_ENCODING_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365535));
pub const STATUS_SXS_MANIFEST_TOO_BIG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365534));
pub const STATUS_SXS_SETTING_NOT_REGISTERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365533));
pub const STATUS_SXS_TRANSACTION_CLOSURE_INCOMPLETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365532));
pub const STATUS_SMI_PRIMITIVE_INSTALLER_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365531));
pub const STATUS_GENERIC_COMMAND_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365530));
pub const STATUS_SXS_FILE_HASH_MISSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365529));
pub const STATUS_CLUSTER_INVALID_NODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496639));
pub const STATUS_CLUSTER_NODE_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496638));
pub const STATUS_CLUSTER_JOIN_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496637));
pub const STATUS_CLUSTER_NODE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496636));
pub const STATUS_CLUSTER_LOCAL_NODE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496635));
pub const STATUS_CLUSTER_NETWORK_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496634));
pub const STATUS_CLUSTER_NETWORK_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496633));
pub const STATUS_CLUSTER_NETINTERFACE_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496632));
pub const STATUS_CLUSTER_NETINTERFACE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496631));
pub const STATUS_CLUSTER_INVALID_REQUEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496630));
pub const STATUS_CLUSTER_INVALID_NETWORK_PROVIDER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496629));
pub const STATUS_CLUSTER_NODE_DOWN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496628));
pub const STATUS_CLUSTER_NODE_UNREACHABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496627));
pub const STATUS_CLUSTER_NODE_NOT_MEMBER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496626));
pub const STATUS_CLUSTER_JOIN_NOT_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496625));
pub const STATUS_CLUSTER_INVALID_NETWORK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496624));
pub const STATUS_CLUSTER_NO_NET_ADAPTERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496623));
pub const STATUS_CLUSTER_NODE_UP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496622));
pub const STATUS_CLUSTER_NODE_PAUSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496621));
pub const STATUS_CLUSTER_NODE_NOT_PAUSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496620));
pub const STATUS_CLUSTER_NO_SECURITY_CONTEXT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496619));
pub const STATUS_CLUSTER_NETWORK_NOT_INTERNAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496618));
pub const STATUS_CLUSTER_POISONED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496617));
pub const STATUS_CLUSTER_NON_CSV_PATH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496616));
pub const STATUS_CLUSTER_CSV_VOLUME_NOT_LOCAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496615));
pub const STATUS_CLUSTER_CSV_READ_OPLOCK_BREAK_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496608));
pub const STATUS_CLUSTER_CSV_AUTO_PAUSE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496607));
pub const STATUS_CLUSTER_CSV_REDIRECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496606));
pub const STATUS_CLUSTER_CSV_NOT_REDIRECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496605));
pub const STATUS_CLUSTER_CSV_VOLUME_DRAINING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496604));
pub const STATUS_CLUSTER_CSV_SNAPSHOT_CREATION_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496603));
pub const STATUS_CLUSTER_CSV_VOLUME_DRAINING_SUCCEEDED_DOWNLEVEL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496602));
pub const STATUS_CLUSTER_CSV_NO_SNAPSHOTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496601));
pub const STATUS_CSV_IO_PAUSE_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496600));
pub const STATUS_CLUSTER_CSV_INVALID_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496599));
pub const STATUS_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496592));
pub const STATUS_CLUSTER_CAM_TICKET_REPLAY_DETECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496591));
pub const STATUS_TRANSACTIONAL_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103423));
pub const STATUS_INVALID_TRANSACTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103422));
pub const STATUS_TRANSACTION_NOT_ACTIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103421));
pub const STATUS_TM_INITIALIZATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103420));
pub const STATUS_RM_NOT_ACTIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103419));
pub const STATUS_RM_METADATA_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103418));
pub const STATUS_TRANSACTION_NOT_JOINED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103417));
pub const STATUS_DIRECTORY_NOT_RM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103416));
pub const STATUS_COULD_NOT_RESIZE_LOG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2145845239));
pub const STATUS_TRANSACTIONS_UNSUPPORTED_REMOTE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103414));
pub const STATUS_LOG_RESIZE_INVALID_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103413));
pub const STATUS_REMOTE_FILE_VERSION_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103412));
pub const STATUS_CRM_PROTOCOL_ALREADY_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103409));
pub const STATUS_TRANSACTION_PROPAGATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103408));
pub const STATUS_CRM_PROTOCOL_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103407));
pub const STATUS_TRANSACTION_SUPERIOR_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103406));
pub const STATUS_TRANSACTION_REQUEST_NOT_VALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103405));
pub const STATUS_TRANSACTION_NOT_REQUESTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103404));
pub const STATUS_TRANSACTION_ALREADY_ABORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103403));
pub const STATUS_TRANSACTION_ALREADY_COMMITTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103402));
pub const STATUS_TRANSACTION_INVALID_MARSHALL_BUFFER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103401));
pub const STATUS_CURRENT_TRANSACTION_NOT_VALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103400));
pub const STATUS_LOG_GROWTH_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103399));
pub const STATUS_OBJECT_NO_LONGER_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103391));
pub const STATUS_STREAM_MINIVERSION_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103390));
pub const STATUS_STREAM_MINIVERSION_NOT_VALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103389));
pub const STATUS_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103388));
pub const STATUS_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103387));
pub const STATUS_CANT_CREATE_MORE_STREAM_MINIVERSIONS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103386));
pub const STATUS_HANDLE_NO_LONGER_VALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103384));
pub const STATUS_NO_TXF_METADATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2145845207));
pub const STATUS_LOG_CORRUPTION_DETECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103376));
pub const STATUS_CANT_RECOVER_WITH_HANDLE_OPEN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2145845199));
pub const STATUS_RM_DISCONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103374));
pub const STATUS_ENLISTMENT_NOT_SUPERIOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103373));
pub const STATUS_RECOVERY_NOT_NEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075380276));
pub const STATUS_RM_ALREADY_STARTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075380277));
pub const STATUS_FILE_IDENTITY_NOT_PERSISTENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103370));
pub const STATUS_CANT_BREAK_TRANSACTIONAL_DEPENDENCY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103369));
pub const STATUS_CANT_CROSS_RM_BOUNDARY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103368));
pub const STATUS_TXF_DIR_NOT_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103367));
pub const STATUS_INDOUBT_TRANSACTIONS_EXIST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103366));
pub const STATUS_TM_VOLATILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103365));
pub const STATUS_ROLLBACK_TIMER_EXPIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103364));
pub const STATUS_TXF_ATTRIBUTE_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103363));
pub const STATUS_EFS_NOT_ALLOWED_IN_TRANSACTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103362));
pub const STATUS_TRANSACTIONAL_OPEN_NOT_ALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103361));
pub const STATUS_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103360));
pub const STATUS_TXF_METADATA_ALREADY_PRESENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2145845183));
pub const STATUS_TRANSACTION_SCOPE_CALLBACKS_NOT_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2145845182));
pub const STATUS_TRANSACTION_REQUIRED_PROMOTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103357));
pub const STATUS_CANNOT_EXECUTE_FILE_IN_TRANSACTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103356));
pub const STATUS_TRANSACTIONS_NOT_FROZEN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103355));
pub const STATUS_TRANSACTION_FREEZE_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103354));
pub const STATUS_NOT_SNAPSHOT_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103353));
pub const STATUS_NO_SAVEPOINT_WITH_OPEN_FILES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103352));
pub const STATUS_SPARSE_NOT_ALLOWED_IN_TRANSACTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103351));
pub const STATUS_TM_IDENTITY_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103350));
pub const STATUS_FLOATED_SECTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103349));
pub const STATUS_CANNOT_ACCEPT_TRANSACTED_WORK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103348));
pub const STATUS_CANNOT_ABORT_TRANSACTIONS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103347));
pub const STATUS_TRANSACTION_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103346));
pub const STATUS_RESOURCEMANAGER_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103345));
pub const STATUS_ENLISTMENT_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103344));
pub const STATUS_TRANSACTIONMANAGER_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103343));
pub const STATUS_TRANSACTIONMANAGER_NOT_ONLINE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103342));
pub const STATUS_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103341));
pub const STATUS_TRANSACTION_NOT_ROOT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103340));
pub const STATUS_TRANSACTION_OBJECT_EXPIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103339));
pub const STATUS_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103338));
pub const STATUS_TRANSACTION_RESPONSE_NOT_ENLISTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103337));
pub const STATUS_TRANSACTION_RECORD_TOO_LONG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103336));
pub const STATUS_NO_LINK_TRACKING_IN_TRANSACTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103335));
pub const STATUS_OPERATION_NOT_SUPPORTED_IN_TRANSACTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103334));
pub const STATUS_TRANSACTION_INTEGRITY_VIOLATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103333));
pub const STATUS_TRANSACTIONMANAGER_IDENTITY_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103332));
pub const STATUS_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103331));
pub const STATUS_TRANSACTION_MUST_WRITETHROUGH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103330));
pub const STATUS_TRANSACTION_NO_SUPERIOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103329));
pub const STATUS_EXPIRED_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103328));
pub const STATUS_TRANSACTION_NOT_ENLISTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103327));
pub const STATUS_LOG_SECTOR_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037887));
pub const STATUS_LOG_SECTOR_PARITY_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037886));
pub const STATUS_LOG_SECTOR_REMAPPED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037885));
pub const STATUS_LOG_BLOCK_INCOMPLETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037884));
pub const STATUS_LOG_INVALID_RANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037883));
pub const STATUS_LOG_BLOCKS_EXHAUSTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037882));
pub const STATUS_LOG_READ_CONTEXT_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037881));
pub const STATUS_LOG_RESTART_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037880));
pub const STATUS_LOG_BLOCK_VERSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037879));
pub const STATUS_LOG_BLOCK_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037878));
pub const STATUS_LOG_READ_MODE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037877));
pub const STATUS_LOG_NO_RESTART = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075445772));
pub const STATUS_LOG_METADATA_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037875));
pub const STATUS_LOG_METADATA_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037874));
pub const STATUS_LOG_METADATA_INCONSISTENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037873));
pub const STATUS_LOG_RESERVATION_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037872));
pub const STATUS_LOG_CANT_DELETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037871));
pub const STATUS_LOG_CONTAINER_LIMIT_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037870));
pub const STATUS_LOG_START_OF_LOG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037869));
pub const STATUS_LOG_POLICY_ALREADY_INSTALLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037868));
pub const STATUS_LOG_POLICY_NOT_INSTALLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037867));
pub const STATUS_LOG_POLICY_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037866));
pub const STATUS_LOG_POLICY_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037865));
pub const STATUS_LOG_PINNED_ARCHIVE_TAIL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037864));
pub const STATUS_LOG_RECORD_NONEXISTENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037863));
pub const STATUS_LOG_RECORDS_RESERVED_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037862));
pub const STATUS_LOG_SPACE_RESERVED_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037861));
pub const STATUS_LOG_TAIL_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037860));
pub const STATUS_LOG_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037859));
pub const STATUS_LOG_MULTIPLEXED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037858));
pub const STATUS_LOG_DEDICATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037857));
pub const STATUS_LOG_ARCHIVE_NOT_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037856));
pub const STATUS_LOG_ARCHIVE_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037855));
pub const STATUS_LOG_EPHEMERAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037854));
pub const STATUS_LOG_NOT_ENOUGH_CONTAINERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037853));
pub const STATUS_LOG_CLIENT_ALREADY_REGISTERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037852));
pub const STATUS_LOG_CLIENT_NOT_REGISTERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037851));
pub const STATUS_LOG_FULL_HANDLER_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037850));
pub const STATUS_LOG_CONTAINER_READ_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037849));
pub const STATUS_LOG_CONTAINER_WRITE_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037848));
pub const STATUS_LOG_CONTAINER_OPEN_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037847));
pub const STATUS_LOG_CONTAINER_STATE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037846));
pub const STATUS_LOG_STATE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037845));
pub const STATUS_LOG_PINNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037844));
pub const STATUS_LOG_METADATA_FLUSH_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037843));
pub const STATUS_LOG_INCONSISTENT_SECURITY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037842));
pub const STATUS_LOG_APPENDED_FLUSH_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037841));
pub const STATUS_LOG_PINNED_RESERVATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037840));
pub const STATUS_VIDEO_HUNG_DISPLAY_DRIVER_THREAD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071972118));
pub const STATUS_VIDEO_HUNG_DISPLAY_DRIVER_THREAD_RECOVERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2145713941));
pub const STATUS_VIDEO_DRIVER_DEBUG_REPORT_REQUEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075511532));
pub const STATUS_MONITOR_NO_DESCRIPTOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071841279));
pub const STATUS_MONITOR_UNKNOWN_DESCRIPTOR_FORMAT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071841278));
pub const STATUS_MONITOR_INVALID_DESCRIPTOR_CHECKSUM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071841277));
pub const STATUS_MONITOR_INVALID_STANDARD_TIMING_BLOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071841276));
pub const STATUS_MONITOR_WMI_DATABLOCK_REGISTRATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071841275));
pub const STATUS_MONITOR_INVALID_SERIAL_NUMBER_MONDSC_BLOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071841274));
pub const STATUS_MONITOR_INVALID_USER_FRIENDLY_MONDSC_BLOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071841273));
pub const STATUS_MONITOR_NO_MORE_DESCRIPTOR_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071841272));
pub const STATUS_MONITOR_INVALID_DETAILED_TIMING_BLOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071841271));
pub const STATUS_MONITOR_INVALID_MANUFACTURE_DATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071841270));
pub const STATUS_GRAPHICS_NOT_EXCLUSIVE_MODE_OWNER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775744));
pub const STATUS_GRAPHICS_INSUFFICIENT_DMA_BUFFER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775743));
pub const STATUS_GRAPHICS_INVALID_DISPLAY_ADAPTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775742));
pub const STATUS_GRAPHICS_ADAPTER_WAS_RESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775741));
pub const STATUS_GRAPHICS_INVALID_DRIVER_MODEL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775740));
pub const STATUS_GRAPHICS_PRESENT_MODE_CHANGED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775739));
pub const STATUS_GRAPHICS_PRESENT_OCCLUDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775738));
pub const STATUS_GRAPHICS_PRESENT_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775737));
pub const STATUS_GRAPHICS_CANNOTCOLORCONVERT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775736));
pub const STATUS_GRAPHICS_DRIVER_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775735));
pub const STATUS_GRAPHICS_PARTIAL_DATA_POPULATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075707914));
pub const STATUS_GRAPHICS_PRESENT_REDIRECTION_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775733));
pub const STATUS_GRAPHICS_PRESENT_UNOCCLUDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775732));
pub const STATUS_GRAPHICS_WINDOWDC_NOT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775731));
pub const STATUS_GRAPHICS_WINDOWLESS_PRESENT_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775730));
pub const STATUS_GRAPHICS_PRESENT_INVALID_WINDOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775729));
pub const STATUS_GRAPHICS_PRESENT_BUFFER_NOT_BOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775728));
pub const STATUS_GRAPHICS_VAIL_STATE_CHANGED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775727));
pub const STATUS_GRAPHICS_INDIRECT_DISPLAY_ABANDON_SWAPCHAIN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775726));
pub const STATUS_GRAPHICS_INDIRECT_DISPLAY_DEVICE_STOPPED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775725));
pub const STATUS_GRAPHICS_NO_VIDEO_MEMORY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775488));
pub const STATUS_GRAPHICS_CANT_LOCK_MEMORY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775487));
pub const STATUS_GRAPHICS_ALLOCATION_BUSY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775486));
pub const STATUS_GRAPHICS_TOO_MANY_REFERENCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775485));
pub const STATUS_GRAPHICS_TRY_AGAIN_LATER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775484));
pub const STATUS_GRAPHICS_TRY_AGAIN_NOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775483));
pub const STATUS_GRAPHICS_ALLOCATION_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775482));
pub const STATUS_GRAPHICS_UNSWIZZLING_APERTURE_UNAVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775481));
pub const STATUS_GRAPHICS_UNSWIZZLING_APERTURE_UNSUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775480));
pub const STATUS_GRAPHICS_CANT_EVICT_PINNED_ALLOCATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775479));
pub const STATUS_GRAPHICS_INVALID_ALLOCATION_USAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775472));
pub const STATUS_GRAPHICS_CANT_RENDER_LOCKED_ALLOCATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775471));
pub const STATUS_GRAPHICS_ALLOCATION_CLOSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775470));
pub const STATUS_GRAPHICS_INVALID_ALLOCATION_INSTANCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775469));
pub const STATUS_GRAPHICS_INVALID_ALLOCATION_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775468));
pub const STATUS_GRAPHICS_WRONG_ALLOCATION_DEVICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775467));
pub const STATUS_GRAPHICS_ALLOCATION_CONTENT_LOST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775466));
pub const STATUS_GRAPHICS_GPU_EXCEPTION_ON_DEVICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775232));
pub const STATUS_GRAPHICS_SKIP_ALLOCATION_PREPARATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075708417));
pub const STATUS_GRAPHICS_INVALID_VIDPN_TOPOLOGY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774976));
pub const STATUS_GRAPHICS_VIDPN_TOPOLOGY_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774975));
pub const STATUS_GRAPHICS_VIDPN_TOPOLOGY_CURRENTLY_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774974));
pub const STATUS_GRAPHICS_INVALID_VIDPN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774973));
pub const STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774972));
pub const STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774971));
pub const STATUS_GRAPHICS_VIDPN_MODALITY_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774970));
pub const STATUS_GRAPHICS_MODE_NOT_PINNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075708679));
pub const STATUS_GRAPHICS_INVALID_VIDPN_SOURCEMODESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774968));
pub const STATUS_GRAPHICS_INVALID_VIDPN_TARGETMODESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774967));
pub const STATUS_GRAPHICS_INVALID_FREQUENCY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774966));
pub const STATUS_GRAPHICS_INVALID_ACTIVE_REGION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774965));
pub const STATUS_GRAPHICS_INVALID_TOTAL_REGION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774964));
pub const STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE_MODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774960));
pub const STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET_MODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774959));
pub const STATUS_GRAPHICS_PINNED_MODE_MUST_REMAIN_IN_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774958));
pub const STATUS_GRAPHICS_PATH_ALREADY_IN_TOPOLOGY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774957));
pub const STATUS_GRAPHICS_MODE_ALREADY_IN_MODESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774956));
pub const STATUS_GRAPHICS_INVALID_VIDEOPRESENTSOURCESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774955));
pub const STATUS_GRAPHICS_INVALID_VIDEOPRESENTTARGETSET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774954));
pub const STATUS_GRAPHICS_SOURCE_ALREADY_IN_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774953));
pub const STATUS_GRAPHICS_TARGET_ALREADY_IN_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774952));
pub const STATUS_GRAPHICS_INVALID_VIDPN_PRESENT_PATH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774951));
pub const STATUS_GRAPHICS_NO_RECOMMENDED_VIDPN_TOPOLOGY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774950));
pub const STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774949));
pub const STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774948));
pub const STATUS_GRAPHICS_FREQUENCYRANGE_NOT_IN_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774947));
pub const STATUS_GRAPHICS_NO_PREFERRED_MODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075708702));
pub const STATUS_GRAPHICS_FREQUENCYRANGE_ALREADY_IN_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774945));
pub const STATUS_GRAPHICS_STALE_MODESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774944));
pub const STATUS_GRAPHICS_INVALID_MONITOR_SOURCEMODESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774943));
pub const STATUS_GRAPHICS_INVALID_MONITOR_SOURCE_MODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774942));
pub const STATUS_GRAPHICS_NO_RECOMMENDED_FUNCTIONAL_VIDPN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774941));
pub const STATUS_GRAPHICS_MODE_ID_MUST_BE_UNIQUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774940));
pub const STATUS_GRAPHICS_EMPTY_ADAPTER_MONITOR_MODE_SUPPORT_INTERSECTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774939));
pub const STATUS_GRAPHICS_VIDEO_PRESENT_TARGETS_LESS_THAN_SOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774938));
pub const STATUS_GRAPHICS_PATH_NOT_IN_TOPOLOGY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774937));
pub const STATUS_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_SOURCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774936));
pub const STATUS_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_TARGET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774935));
pub const STATUS_GRAPHICS_INVALID_MONITORDESCRIPTORSET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774934));
pub const STATUS_GRAPHICS_INVALID_MONITORDESCRIPTOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774933));
pub const STATUS_GRAPHICS_MONITORDESCRIPTOR_NOT_IN_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774932));
pub const STATUS_GRAPHICS_MONITORDESCRIPTOR_ALREADY_IN_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774931));
pub const STATUS_GRAPHICS_MONITORDESCRIPTOR_ID_MUST_BE_UNIQUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774930));
pub const STATUS_GRAPHICS_INVALID_VIDPN_TARGET_SUBSET_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774929));
pub const STATUS_GRAPHICS_RESOURCES_NOT_RELATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774928));
pub const STATUS_GRAPHICS_SOURCE_ID_MUST_BE_UNIQUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774927));
pub const STATUS_GRAPHICS_TARGET_ID_MUST_BE_UNIQUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774926));
pub const STATUS_GRAPHICS_NO_AVAILABLE_VIDPN_TARGET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774925));
pub const STATUS_GRAPHICS_MONITOR_COULD_NOT_BE_ASSOCIATED_WITH_ADAPTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774924));
pub const STATUS_GRAPHICS_NO_VIDPNMGR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774923));
pub const STATUS_GRAPHICS_NO_ACTIVE_VIDPN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774922));
pub const STATUS_GRAPHICS_STALE_VIDPN_TOPOLOGY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774921));
pub const STATUS_GRAPHICS_MONITOR_NOT_CONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774920));
pub const STATUS_GRAPHICS_SOURCE_NOT_IN_TOPOLOGY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774919));
pub const STATUS_GRAPHICS_INVALID_PRIMARYSURFACE_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774918));
pub const STATUS_GRAPHICS_INVALID_VISIBLEREGION_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774917));
pub const STATUS_GRAPHICS_INVALID_STRIDE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774916));
pub const STATUS_GRAPHICS_INVALID_PIXELFORMAT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774915));
pub const STATUS_GRAPHICS_INVALID_COLORBASIS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774914));
pub const STATUS_GRAPHICS_INVALID_PIXELVALUEACCESSMODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774913));
pub const STATUS_GRAPHICS_TARGET_NOT_IN_TOPOLOGY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774912));
pub const STATUS_GRAPHICS_NO_DISPLAY_MODE_MANAGEMENT_SUPPORT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774911));
pub const STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774910));
pub const STATUS_GRAPHICS_CANT_ACCESS_ACTIVE_VIDPN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774909));
pub const STATUS_GRAPHICS_INVALID_PATH_IMPORTANCE_ORDINAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774908));
pub const STATUS_GRAPHICS_INVALID_PATH_CONTENT_GEOMETRY_TRANSFORMATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774907));
pub const STATUS_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774906));
pub const STATUS_GRAPHICS_INVALID_GAMMA_RAMP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774905));
pub const STATUS_GRAPHICS_GAMMA_RAMP_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774904));
pub const STATUS_GRAPHICS_MULTISAMPLING_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774903));
pub const STATUS_GRAPHICS_MODE_NOT_IN_MODESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774902));
pub const STATUS_GRAPHICS_DATASET_IS_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075708747));
pub const STATUS_GRAPHICS_NO_MORE_ELEMENTS_IN_DATASET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075708748));
pub const STATUS_GRAPHICS_INVALID_VIDPN_TOPOLOGY_RECOMMENDATION_REASON = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774899));
pub const STATUS_GRAPHICS_INVALID_PATH_CONTENT_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774898));
pub const STATUS_GRAPHICS_INVALID_COPYPROTECTION_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774897));
pub const STATUS_GRAPHICS_UNASSIGNED_MODESET_ALREADY_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774896));
pub const STATUS_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_PINNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075708753));
pub const STATUS_GRAPHICS_INVALID_SCANLINE_ORDERING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774894));
pub const STATUS_GRAPHICS_TOPOLOGY_CHANGES_NOT_ALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774893));
pub const STATUS_GRAPHICS_NO_AVAILABLE_IMPORTANCE_ORDINALS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774892));
pub const STATUS_GRAPHICS_INCOMPATIBLE_PRIVATE_FORMAT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774891));
pub const STATUS_GRAPHICS_INVALID_MODE_PRUNING_ALGORITHM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774890));
pub const STATUS_GRAPHICS_INVALID_MONITOR_CAPABILITY_ORIGIN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774889));
pub const STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE_CONSTRAINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774888));
pub const STATUS_GRAPHICS_MAX_NUM_PATHS_REACHED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774887));
pub const STATUS_GRAPHICS_CANCEL_VIDPN_TOPOLOGY_AUGMENTATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774886));
pub const STATUS_GRAPHICS_INVALID_CLIENT_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774885));
pub const STATUS_GRAPHICS_CLIENTVIDPN_NOT_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774884));
pub const STATUS_GRAPHICS_SPECIFIED_CHILD_ALREADY_CONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774720));
pub const STATUS_GRAPHICS_CHILD_DESCRIPTOR_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774719));
pub const STATUS_GRAPHICS_UNKNOWN_CHILD_STATUS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075708975));
pub const STATUS_GRAPHICS_NOT_A_LINKED_ADAPTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774672));
pub const STATUS_GRAPHICS_LEADLINK_NOT_ENUMERATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774671));
pub const STATUS_GRAPHICS_CHAINLINKS_NOT_ENUMERATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774670));
pub const STATUS_GRAPHICS_ADAPTER_CHAIN_NOT_READY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774669));
pub const STATUS_GRAPHICS_CHAINLINKS_NOT_STARTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774668));
pub const STATUS_GRAPHICS_CHAINLINKS_NOT_POWERED_ON = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774667));
pub const STATUS_GRAPHICS_INCONSISTENT_DEVICE_LINK_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774666));
pub const STATUS_GRAPHICS_LEADLINK_START_DEFERRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075708983));
pub const STATUS_GRAPHICS_NOT_POST_DEVICE_DRIVER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774664));
pub const STATUS_GRAPHICS_POLLING_TOO_FREQUENTLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075708985));
pub const STATUS_GRAPHICS_START_DEFERRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075708986));
pub const STATUS_GRAPHICS_ADAPTER_ACCESS_NOT_EXCLUDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774661));
pub const STATUS_GRAPHICS_DEPENDABLE_CHILD_STATUS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075708988));
pub const STATUS_GRAPHICS_OPM_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774464));
pub const STATUS_GRAPHICS_COPP_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774463));
pub const STATUS_GRAPHICS_UAB_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774462));
pub const STATUS_GRAPHICS_OPM_INVALID_ENCRYPTED_PARAMETERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774461));
pub const STATUS_GRAPHICS_OPM_NO_PROTECTED_OUTPUTS_EXIST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774459));
pub const STATUS_GRAPHICS_OPM_INTERNAL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774453));
pub const STATUS_GRAPHICS_OPM_INVALID_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774452));
pub const STATUS_GRAPHICS_PVP_INVALID_CERTIFICATE_LENGTH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774450));
pub const STATUS_GRAPHICS_OPM_SPANNING_MODE_ENABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774449));
pub const STATUS_GRAPHICS_OPM_THEATER_MODE_ENABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774448));
pub const STATUS_GRAPHICS_PVP_HFS_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774447));
pub const STATUS_GRAPHICS_OPM_INVALID_SRM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774446));
pub const STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_HDCP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774445));
pub const STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_ACP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774444));
pub const STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_CGMSA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774443));
pub const STATUS_GRAPHICS_OPM_HDCP_SRM_NEVER_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774442));
pub const STATUS_GRAPHICS_OPM_RESOLUTION_TOO_HIGH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774441));
pub const STATUS_GRAPHICS_OPM_ALL_HDCP_HARDWARE_ALREADY_IN_USE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774440));
pub const STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_NO_LONGER_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774438));
pub const STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_COPP_SEMANTICS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774436));
pub const STATUS_GRAPHICS_OPM_INVALID_INFORMATION_REQUEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774435));
pub const STATUS_GRAPHICS_OPM_DRIVER_INTERNAL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774434));
pub const STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_OPM_SEMANTICS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774433));
pub const STATUS_GRAPHICS_OPM_SIGNALING_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774432));
pub const STATUS_GRAPHICS_OPM_INVALID_CONFIGURATION_REQUEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774431));
pub const STATUS_GRAPHICS_I2C_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774336));
pub const STATUS_GRAPHICS_I2C_DEVICE_DOES_NOT_EXIST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774335));
pub const STATUS_GRAPHICS_I2C_ERROR_TRANSMITTING_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774334));
pub const STATUS_GRAPHICS_I2C_ERROR_RECEIVING_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774333));
pub const STATUS_GRAPHICS_DDCCI_VCP_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774332));
pub const STATUS_GRAPHICS_DDCCI_INVALID_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774331));
pub const STATUS_GRAPHICS_DDCCI_MONITOR_RETURNED_INVALID_TIMING_STATUS_BYTE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774330));
pub const STATUS_GRAPHICS_DDCCI_INVALID_CAPABILITIES_STRING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774329));
pub const STATUS_GRAPHICS_MCA_INTERNAL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774328));
pub const STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_COMMAND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774327));
pub const STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_LENGTH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774326));
pub const STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_CHECKSUM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774325));
pub const STATUS_GRAPHICS_INVALID_PHYSICAL_MONITOR_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774324));
pub const STATUS_GRAPHICS_MONITOR_NO_LONGER_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774323));
pub const STATUS_GRAPHICS_ONLY_CONSOLE_SESSION_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774240));
pub const STATUS_GRAPHICS_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774239));
pub const STATUS_GRAPHICS_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774238));
pub const STATUS_GRAPHICS_MIRRORING_DEVICES_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774237));
pub const STATUS_GRAPHICS_INVALID_POINTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774236));
pub const STATUS_GRAPHICS_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774235));
pub const STATUS_GRAPHICS_PARAMETER_ARRAY_TOO_SMALL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774234));
pub const STATUS_GRAPHICS_INTERNAL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774233));
pub const STATUS_GRAPHICS_SESSION_TYPE_CHANGE_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774232));
pub const STATUS_FVE_LOCKED_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579136));
pub const STATUS_FVE_NOT_ENCRYPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579135));
pub const STATUS_FVE_BAD_INFORMATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579134));
pub const STATUS_FVE_TOO_SMALL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579133));
pub const STATUS_FVE_FAILED_WRONG_FS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579132));
pub const STATUS_FVE_BAD_PARTITION_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579131));
pub const STATUS_FVE_FS_NOT_EXTENDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579130));
pub const STATUS_FVE_FS_MOUNTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579129));
pub const STATUS_FVE_NO_LICENSE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579128));
pub const STATUS_FVE_ACTION_NOT_ALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579127));
pub const STATUS_FVE_BAD_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579126));
pub const STATUS_FVE_VOLUME_NOT_BOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579125));
pub const STATUS_FVE_NOT_DATA_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579124));
pub const STATUS_FVE_CONV_READ_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579123));
pub const STATUS_FVE_CONV_WRITE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579122));
pub const STATUS_FVE_OVERLAPPED_UPDATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579121));
pub const STATUS_FVE_FAILED_SECTOR_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579120));
pub const STATUS_FVE_FAILED_AUTHENTICATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579119));
pub const STATUS_FVE_NOT_OS_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579118));
pub const STATUS_FVE_KEYFILE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579117));
pub const STATUS_FVE_KEYFILE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579116));
pub const STATUS_FVE_KEYFILE_NO_VMK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579115));
pub const STATUS_FVE_TPM_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579114));
pub const STATUS_FVE_TPM_SRK_AUTH_NOT_ZERO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579113));
pub const STATUS_FVE_TPM_INVALID_PCR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579112));
pub const STATUS_FVE_TPM_NO_VMK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579111));
pub const STATUS_FVE_PIN_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579110));
pub const STATUS_FVE_AUTH_INVALID_APPLICATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579109));
pub const STATUS_FVE_AUTH_INVALID_CONFIG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579108));
pub const STATUS_FVE_DEBUGGER_ENABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579107));
pub const STATUS_FVE_DRY_RUN_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579106));
pub const STATUS_FVE_BAD_METADATA_POINTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579105));
pub const STATUS_FVE_OLD_METADATA_COPY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579104));
pub const STATUS_FVE_REBOOT_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579103));
pub const STATUS_FVE_RAW_ACCESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579102));
pub const STATUS_FVE_RAW_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579101));
pub const STATUS_FVE_NO_AUTOUNLOCK_MASTER_KEY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579100));
pub const STATUS_FVE_MOR_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579099));
pub const STATUS_FVE_NO_FEATURE_LICENSE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579098));
pub const STATUS_FVE_POLICY_USER_DISABLE_RDV_NOT_ALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579097));
pub const STATUS_FVE_CONV_RECOVERY_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579096));
pub const STATUS_FVE_VIRTUALIZED_SPACE_TOO_BIG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579095));
pub const STATUS_FVE_INVALID_DATUM_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579094));
pub const STATUS_FVE_VOLUME_TOO_SMALL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579088));
pub const STATUS_FVE_ENH_PIN_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579087));
pub const STATUS_FVE_FULL_ENCRYPTION_NOT_ALLOWED_ON_TP_STORAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579086));
pub const STATUS_FVE_WIPE_NOT_ALLOWED_ON_TP_STORAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579085));
pub const STATUS_FVE_NOT_ALLOWED_ON_CSV_STACK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579084));
pub const STATUS_FVE_NOT_ALLOWED_ON_CLUSTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579083));
pub const STATUS_FVE_NOT_ALLOWED_TO_UPGRADE_WHILE_CONVERTING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579082));
pub const STATUS_FVE_WIPE_CANCEL_NOT_APPLICABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579081));
pub const STATUS_FVE_EDRIVE_DRY_RUN_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579080));
pub const STATUS_FVE_SECUREBOOT_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579079));
pub const STATUS_FVE_SECUREBOOT_CONFIG_CHANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579078));
pub const STATUS_FVE_DEVICE_LOCKEDOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579077));
pub const STATUS_FVE_VOLUME_EXTEND_PREVENTS_EOW_DECRYPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579076));
pub const STATUS_FVE_NOT_DE_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579075));
pub const STATUS_FVE_PROTECTION_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579074));
pub const STATUS_FVE_PROTECTION_CANNOT_BE_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579073));
pub const STATUS_FVE_OSV_KSR_NOT_ALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579072));
pub const STATUS_FVE_EDRIVE_BAND_ENUMERATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579071));
pub const STATUS_FWP_CALLOUT_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513599));
pub const STATUS_FWP_CONDITION_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513598));
pub const STATUS_FWP_FILTER_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513597));
pub const STATUS_FWP_LAYER_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513596));
pub const STATUS_FWP_PROVIDER_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513595));
pub const STATUS_FWP_PROVIDER_CONTEXT_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513594));
pub const STATUS_FWP_SUBLAYER_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513593));
pub const STATUS_FWP_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513592));
pub const STATUS_FWP_ALREADY_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513591));
pub const STATUS_FWP_IN_USE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513590));
pub const STATUS_FWP_DYNAMIC_SESSION_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513589));
pub const STATUS_FWP_WRONG_SESSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513588));
pub const STATUS_FWP_NO_TXN_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513587));
pub const STATUS_FWP_TXN_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513586));
pub const STATUS_FWP_TXN_ABORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513585));
pub const STATUS_FWP_SESSION_ABORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513584));
pub const STATUS_FWP_INCOMPATIBLE_TXN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513583));
pub const STATUS_FWP_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513582));
pub const STATUS_FWP_NET_EVENTS_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513581));
pub const STATUS_FWP_INCOMPATIBLE_LAYER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513580));
pub const STATUS_FWP_KM_CLIENTS_ONLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513579));
pub const STATUS_FWP_LIFETIME_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513578));
pub const STATUS_FWP_BUILTIN_OBJECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513577));
pub const STATUS_FWP_TOO_MANY_CALLOUTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513576));
pub const STATUS_FWP_NOTIFICATION_DROPPED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513575));
pub const STATUS_FWP_TRAFFIC_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513574));
pub const STATUS_FWP_INCOMPATIBLE_SA_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513573));
pub const STATUS_FWP_NULL_POINTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513572));
pub const STATUS_FWP_INVALID_ENUMERATOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513571));
pub const STATUS_FWP_INVALID_FLAGS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513570));
pub const STATUS_FWP_INVALID_NET_MASK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513569));
pub const STATUS_FWP_INVALID_RANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513568));
pub const STATUS_FWP_INVALID_INTERVAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513567));
pub const STATUS_FWP_ZERO_LENGTH_ARRAY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513566));
pub const STATUS_FWP_NULL_DISPLAY_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513565));
pub const STATUS_FWP_INVALID_ACTION_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513564));
pub const STATUS_FWP_INVALID_WEIGHT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513563));
pub const STATUS_FWP_MATCH_TYPE_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513562));
pub const STATUS_FWP_TYPE_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513561));
pub const STATUS_FWP_OUT_OF_BOUNDS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513560));
pub const STATUS_FWP_RESERVED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513559));
pub const STATUS_FWP_DUPLICATE_CONDITION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513558));
pub const STATUS_FWP_DUPLICATE_KEYMOD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513557));
pub const STATUS_FWP_ACTION_INCOMPATIBLE_WITH_LAYER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513556));
pub const STATUS_FWP_ACTION_INCOMPATIBLE_WITH_SUBLAYER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513555));
pub const STATUS_FWP_CONTEXT_INCOMPATIBLE_WITH_LAYER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513554));
pub const STATUS_FWP_CONTEXT_INCOMPATIBLE_WITH_CALLOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513553));
pub const STATUS_FWP_INCOMPATIBLE_AUTH_METHOD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513552));
pub const STATUS_FWP_INCOMPATIBLE_DH_GROUP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513551));
pub const STATUS_FWP_EM_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513550));
pub const STATUS_FWP_NEVER_MATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513549));
pub const STATUS_FWP_PROVIDER_CONTEXT_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513548));
pub const STATUS_FWP_INVALID_PARAMETER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513547));
pub const STATUS_FWP_TOO_MANY_SUBLAYERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513546));
pub const STATUS_FWP_CALLOUT_NOTIFICATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513545));
pub const STATUS_FWP_INVALID_AUTH_TRANSFORM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513544));
pub const STATUS_FWP_INVALID_CIPHER_TRANSFORM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513543));
pub const STATUS_FWP_INCOMPATIBLE_CIPHER_TRANSFORM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513542));
pub const STATUS_FWP_INVALID_TRANSFORM_COMBINATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513541));
pub const STATUS_FWP_DUPLICATE_AUTH_METHOD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513540));
pub const STATUS_FWP_INVALID_TUNNEL_ENDPOINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513539));
pub const STATUS_FWP_L2_DRIVER_NOT_READY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513538));
pub const STATUS_FWP_KEY_DICTATOR_ALREADY_REGISTERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513537));
pub const STATUS_FWP_KEY_DICTATION_INVALID_KEYING_MATERIAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513536));
pub const STATUS_FWP_CONNECTIONS_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513535));
pub const STATUS_FWP_INVALID_DNS_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513534));
pub const STATUS_FWP_STILL_ON = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513533));
pub const STATUS_FWP_IKEEXT_NOT_RUNNING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513532));
pub const STATUS_FWP_TCPIP_NOT_READY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513344));
pub const STATUS_FWP_INJECT_HANDLE_CLOSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513343));
pub const STATUS_FWP_INJECT_HANDLE_STALE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513342));
pub const STATUS_FWP_CANNOT_PEND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513341));
pub const STATUS_FWP_DROP_NOICMP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513340));
pub const STATUS_NDIS_CLOSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448062));
pub const STATUS_NDIS_BAD_VERSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448060));
pub const STATUS_NDIS_BAD_CHARACTERISTICS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448059));
pub const STATUS_NDIS_ADAPTER_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448058));
pub const STATUS_NDIS_OPEN_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448057));
pub const STATUS_NDIS_DEVICE_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448056));
pub const STATUS_NDIS_MULTICAST_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448055));
pub const STATUS_NDIS_MULTICAST_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448054));
pub const STATUS_NDIS_MULTICAST_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448053));
pub const STATUS_NDIS_REQUEST_ABORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448052));
pub const STATUS_NDIS_RESET_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448051));
pub const STATUS_NDIS_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071447877));
pub const STATUS_NDIS_INVALID_PACKET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448049));
pub const STATUS_NDIS_ADAPTER_NOT_READY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448047));
pub const STATUS_NDIS_INVALID_LENGTH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448044));
pub const STATUS_NDIS_INVALID_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448043));
pub const STATUS_NDIS_BUFFER_TOO_SHORT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448042));
pub const STATUS_NDIS_INVALID_OID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448041));
pub const STATUS_NDIS_ADAPTER_REMOVED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448040));
pub const STATUS_NDIS_UNSUPPORTED_MEDIA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448039));
pub const STATUS_NDIS_GROUP_ADDRESS_IN_USE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448038));
pub const STATUS_NDIS_FILE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448037));
pub const STATUS_NDIS_ERROR_READING_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448036));
pub const STATUS_NDIS_ALREADY_MAPPED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448035));
pub const STATUS_NDIS_RESOURCE_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448034));
pub const STATUS_NDIS_MEDIA_DISCONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448033));
pub const STATUS_NDIS_INVALID_ADDRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448030));
pub const STATUS_NDIS_INVALID_DEVICE_REQUEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448048));
pub const STATUS_NDIS_PAUSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448022));
pub const STATUS_NDIS_INTERFACE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448021));
pub const STATUS_NDIS_UNSUPPORTED_REVISION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448020));
pub const STATUS_NDIS_INVALID_PORT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448019));
pub const STATUS_NDIS_INVALID_PORT_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448018));
pub const STATUS_NDIS_LOW_POWER_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448017));
pub const STATUS_NDIS_REINIT_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448016));
pub const STATUS_NDIS_NO_QUEUES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448015));
pub const STATUS_NDIS_DOT11_AUTO_CONFIG_ENABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071439872));
pub const STATUS_NDIS_DOT11_MEDIA_IN_USE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071439871));
pub const STATUS_NDIS_DOT11_POWER_STATE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071439870));
pub const STATUS_NDIS_PM_WOL_PATTERN_LIST_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071439869));
pub const STATUS_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071439868));
pub const STATUS_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071439867));
pub const STATUS_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071439866));
pub const STATUS_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071439865));
pub const STATUS_NDIS_DOT11_AP_BAND_NOT_ALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071439864));
pub const STATUS_NDIS_INDICATION_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1076035585));
pub const STATUS_NDIS_OFFLOAD_POLICY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071443953));
pub const STATUS_NDIS_OFFLOAD_CONNECTION_REJECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071443950));
pub const STATUS_NDIS_OFFLOAD_PATH_REJECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071443949));
pub const STATUS_TPM_ERROR_MASK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054848));
pub const STATUS_TPM_AUTHFAIL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054847));
pub const STATUS_TPM_BADINDEX = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054846));
pub const STATUS_TPM_BAD_PARAMETER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054845));
pub const STATUS_TPM_AUDITFAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054844));
pub const STATUS_TPM_CLEAR_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054843));
pub const STATUS_TPM_DEACTIVATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054842));
pub const STATUS_TPM_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054841));
pub const STATUS_TPM_DISABLED_CMD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054840));
pub const STATUS_TPM_FAIL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054839));
pub const STATUS_TPM_BAD_ORDINAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054838));
pub const STATUS_TPM_INSTALL_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054837));
pub const STATUS_TPM_INVALID_KEYHANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054836));
pub const STATUS_TPM_KEYNOTFOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054835));
pub const STATUS_TPM_INAPPROPRIATE_ENC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054834));
pub const STATUS_TPM_MIGRATEFAIL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054833));
pub const STATUS_TPM_INVALID_PCR_INFO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054832));
pub const STATUS_TPM_NOSPACE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054831));
pub const STATUS_TPM_NOSRK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054830));
pub const STATUS_TPM_NOTSEALED_BLOB = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054829));
pub const STATUS_TPM_OWNER_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054828));
pub const STATUS_TPM_RESOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054827));
pub const STATUS_TPM_SHORTRANDOM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054826));
pub const STATUS_TPM_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054825));
pub const STATUS_TPM_WRONGPCRVAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054824));
pub const STATUS_TPM_BAD_PARAM_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054823));
pub const STATUS_TPM_SHA_THREAD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054822));
pub const STATUS_TPM_SHA_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054821));
pub const STATUS_TPM_FAILEDSELFTEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054820));
pub const STATUS_TPM_AUTH2FAIL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054819));
pub const STATUS_TPM_BADTAG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054818));
pub const STATUS_TPM_IOERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054817));
pub const STATUS_TPM_ENCRYPT_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054816));
pub const STATUS_TPM_DECRYPT_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054815));
pub const STATUS_TPM_INVALID_AUTHHANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054814));
pub const STATUS_TPM_NO_ENDORSEMENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054813));
pub const STATUS_TPM_INVALID_KEYUSAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054812));
pub const STATUS_TPM_WRONG_ENTITYTYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054811));
pub const STATUS_TPM_INVALID_POSTINIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054810));
pub const STATUS_TPM_INAPPROPRIATE_SIG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054809));
pub const STATUS_TPM_BAD_KEY_PROPERTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054808));
pub const STATUS_TPM_BAD_MIGRATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054807));
pub const STATUS_TPM_BAD_SCHEME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054806));
pub const STATUS_TPM_BAD_DATASIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054805));
pub const STATUS_TPM_BAD_MODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054804));
pub const STATUS_TPM_BAD_PRESENCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054803));
pub const STATUS_TPM_BAD_VERSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054802));
pub const STATUS_TPM_NO_WRAP_TRANSPORT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054801));
pub const STATUS_TPM_AUDITFAIL_UNSUCCESSFUL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054800));
pub const STATUS_TPM_AUDITFAIL_SUCCESSFUL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054799));
pub const STATUS_TPM_NOTRESETABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054798));
pub const STATUS_TPM_NOTLOCAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054797));
pub const STATUS_TPM_BAD_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054796));
pub const STATUS_TPM_INVALID_RESOURCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054795));
pub const STATUS_TPM_NOTFIPS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054794));
pub const STATUS_TPM_INVALID_FAMILY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054793));
pub const STATUS_TPM_NO_NV_PERMISSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054792));
pub const STATUS_TPM_REQUIRES_SIGN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054791));
pub const STATUS_TPM_KEY_NOTSUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054790));
pub const STATUS_TPM_AUTH_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054789));
pub const STATUS_TPM_AREA_LOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054788));
pub const STATUS_TPM_BAD_LOCALITY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054787));
pub const STATUS_TPM_READ_ONLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054786));
pub const STATUS_TPM_PER_NOWRITE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054785));
pub const STATUS_TPM_FAMILYCOUNT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054784));
pub const STATUS_TPM_WRITE_LOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054783));
pub const STATUS_TPM_BAD_ATTRIBUTES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054782));
pub const STATUS_TPM_INVALID_STRUCTURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054781));
pub const STATUS_TPM_KEY_OWNER_CONTROL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054780));
pub const STATUS_TPM_BAD_COUNTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054779));
pub const STATUS_TPM_NOT_FULLWRITE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054778));
pub const STATUS_TPM_CONTEXT_GAP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054777));
pub const STATUS_TPM_MAXNVWRITES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054776));
pub const STATUS_TPM_NOOPERATOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054775));
pub const STATUS_TPM_RESOURCEMISSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054774));
pub const STATUS_TPM_DELEGATE_LOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054773));
pub const STATUS_TPM_DELEGATE_FAMILY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054772));
pub const STATUS_TPM_DELEGATE_ADMIN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054771));
pub const STATUS_TPM_TRANSPORT_NOTEXCLUSIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054770));
pub const STATUS_TPM_OWNER_CONTROL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054769));
pub const STATUS_TPM_DAA_RESOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054768));
pub const STATUS_TPM_DAA_INPUT_DATA0 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054767));
pub const STATUS_TPM_DAA_INPUT_DATA1 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054766));
pub const STATUS_TPM_DAA_ISSUER_SETTINGS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054765));
pub const STATUS_TPM_DAA_TPM_SETTINGS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054764));
pub const STATUS_TPM_DAA_STAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054763));
pub const STATUS_TPM_DAA_ISSUER_VALIDITY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054762));
pub const STATUS_TPM_DAA_WRONG_W = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054761));
pub const STATUS_TPM_BAD_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054760));
pub const STATUS_TPM_BAD_DELEGATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054759));
pub const STATUS_TPM_BADCONTEXT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054758));
pub const STATUS_TPM_TOOMANYCONTEXTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054757));
pub const STATUS_TPM_MA_TICKET_SIGNATURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054756));
pub const STATUS_TPM_MA_DESTINATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054755));
pub const STATUS_TPM_MA_SOURCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054754));
pub const STATUS_TPM_MA_AUTHORITY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054753));
pub const STATUS_TPM_PERMANENTEK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054751));
pub const STATUS_TPM_BAD_SIGNATURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054750));
pub const STATUS_TPM_NOCONTEXTSPACE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054749));
pub const STATUS_TPM_20_E_ASYMMETRIC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054719));
pub const STATUS_TPM_20_E_ATTRIBUTES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054718));
pub const STATUS_TPM_20_E_HASH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054717));
pub const STATUS_TPM_20_E_VALUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054716));
pub const STATUS_TPM_20_E_HIERARCHY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054715));
pub const STATUS_TPM_20_E_KEY_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054713));
pub const STATUS_TPM_20_E_MGF = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054712));
pub const STATUS_TPM_20_E_MODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054711));
pub const STATUS_TPM_20_E_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054710));
pub const STATUS_TPM_20_E_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054709));
pub const STATUS_TPM_20_E_KDF = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054708));
pub const STATUS_TPM_20_E_RANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054707));
pub const STATUS_TPM_20_E_AUTH_FAIL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054706));
pub const STATUS_TPM_20_E_NONCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054705));
pub const STATUS_TPM_20_E_PP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054704));
pub const STATUS_TPM_20_E_SCHEME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054702));
pub const STATUS_TPM_20_E_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054699));
pub const STATUS_TPM_20_E_SYMMETRIC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054698));
pub const STATUS_TPM_20_E_TAG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054697));
pub const STATUS_TPM_20_E_SELECTOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054696));
pub const STATUS_TPM_20_E_INSUFFICIENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054694));
pub const STATUS_TPM_20_E_SIGNATURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054693));
pub const STATUS_TPM_20_E_KEY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054692));
pub const STATUS_TPM_20_E_POLICY_FAIL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054691));
pub const STATUS_TPM_20_E_INTEGRITY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054689));
pub const STATUS_TPM_20_E_TICKET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054688));
pub const STATUS_TPM_20_E_RESERVED_BITS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054687));
pub const STATUS_TPM_20_E_BAD_AUTH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054686));
pub const STATUS_TPM_20_E_EXPIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054685));
pub const STATUS_TPM_20_E_POLICY_CC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054684));
pub const STATUS_TPM_20_E_BINDING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054683));
pub const STATUS_TPM_20_E_CURVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054682));
pub const STATUS_TPM_20_E_ECC_POINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054681));
pub const STATUS_TPM_20_E_INITIALIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054592));
pub const STATUS_TPM_20_E_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054591));
pub const STATUS_TPM_20_E_SEQUENCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054589));
pub const STATUS_TPM_20_E_PRIVATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054581));
pub const STATUS_TPM_20_E_HMAC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054567));
pub const STATUS_TPM_20_E_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054560));
pub const STATUS_TPM_20_E_EXCLUSIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054559));
pub const STATUS_TPM_20_E_ECC_CURVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054557));
pub const STATUS_TPM_20_E_AUTH_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054556));
pub const STATUS_TPM_20_E_AUTH_MISSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054555));
pub const STATUS_TPM_20_E_POLICY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054554));
pub const STATUS_TPM_20_E_PCR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054553));
pub const STATUS_TPM_20_E_PCR_CHANGED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054552));
pub const STATUS_TPM_20_E_UPGRADE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054547));
pub const STATUS_TPM_20_E_TOO_MANY_CONTEXTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054546));
pub const STATUS_TPM_20_E_AUTH_UNAVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054545));
pub const STATUS_TPM_20_E_REBOOT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054544));
pub const STATUS_TPM_20_E_UNBALANCED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054543));
pub const STATUS_TPM_20_E_COMMAND_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054526));
pub const STATUS_TPM_20_E_COMMAND_CODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054525));
pub const STATUS_TPM_20_E_AUTHSIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054524));
pub const STATUS_TPM_20_E_AUTH_CONTEXT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054523));
pub const STATUS_TPM_20_E_NV_RANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054522));
pub const STATUS_TPM_20_E_NV_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054521));
pub const STATUS_TPM_20_E_NV_LOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054520));
pub const STATUS_TPM_20_E_NV_AUTHORIZATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054519));
pub const STATUS_TPM_20_E_NV_UNINITIALIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054518));
pub const STATUS_TPM_20_E_NV_SPACE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054517));
pub const STATUS_TPM_20_E_NV_DEFINED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054516));
pub const STATUS_TPM_20_E_BAD_CONTEXT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054512));
pub const STATUS_TPM_20_E_CPHASH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054511));
pub const STATUS_TPM_20_E_PARENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054510));
pub const STATUS_TPM_20_E_NEEDS_TEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054509));
pub const STATUS_TPM_20_E_NO_RESULT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054508));
pub const STATUS_TPM_20_E_SENSITIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054507));
pub const STATUS_TPM_COMMAND_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071053824));
pub const STATUS_TPM_INVALID_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071053823));
pub const STATUS_TPM_DUPLICATE_VHANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071053822));
pub const STATUS_TPM_EMBEDDED_COMMAND_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071053821));
pub const STATUS_TPM_EMBEDDED_COMMAND_UNSUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071053820));
pub const STATUS_TPM_RETRY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071052800));
pub const STATUS_TPM_NEEDS_SELFTEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071052799));
pub const STATUS_TPM_DOING_SELFTEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071052798));
pub const STATUS_TPM_DEFEND_LOCK_RUNNING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071052797));
pub const STATUS_TPM_COMMAND_CANCELED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071050751));
pub const STATUS_TPM_TOO_MANY_CONTEXTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071050750));
pub const STATUS_TPM_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071050749));
pub const STATUS_TPM_ACCESS_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071050748));
pub const STATUS_TPM_INSUFFICIENT_BUFFER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071050747));
pub const STATUS_TPM_PPI_FUNCTION_UNSUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071050746));
pub const STATUS_PCP_ERROR_MASK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046656));
pub const STATUS_PCP_DEVICE_NOT_READY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046655));
pub const STATUS_PCP_INVALID_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046654));
pub const STATUS_PCP_INVALID_PARAMETER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046653));
pub const STATUS_PCP_FLAG_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046652));
pub const STATUS_PCP_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046651));
pub const STATUS_PCP_BUFFER_TOO_SMALL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046650));
pub const STATUS_PCP_INTERNAL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046649));
pub const STATUS_PCP_AUTHENTICATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046648));
pub const STATUS_PCP_AUTHENTICATION_IGNORED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046647));
pub const STATUS_PCP_POLICY_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046646));
pub const STATUS_PCP_PROFILE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046645));
pub const STATUS_PCP_VALIDATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046644));
pub const STATUS_PCP_DEVICE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046643));
pub const STATUS_PCP_WRONG_PARENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046642));
pub const STATUS_PCP_KEY_NOT_LOADED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046641));
pub const STATUS_PCP_NO_KEY_CERTIFICATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046640));
pub const STATUS_PCP_KEY_NOT_FINALIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046639));
pub const STATUS_PCP_ATTESTATION_CHALLENGE_NOT_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046638));
pub const STATUS_PCP_NOT_PCR_BOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046637));
pub const STATUS_PCP_KEY_ALREADY_FINALIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046636));
pub const STATUS_PCP_KEY_USAGE_POLICY_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046635));
pub const STATUS_PCP_KEY_USAGE_POLICY_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046634));
pub const STATUS_PCP_SOFT_KEY_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046633));
pub const STATUS_PCP_KEY_NOT_AUTHENTICATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046632));
pub const STATUS_PCP_KEY_NOT_AIK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046631));
pub const STATUS_PCP_KEY_NOT_SIGNING_KEY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046630));
pub const STATUS_PCP_LOCKED_OUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046629));
pub const STATUS_PCP_CLAIM_TYPE_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046628));
pub const STATUS_PCP_TPM_VERSION_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046627));
pub const STATUS_PCP_BUFFER_LENGTH_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046626));
pub const STATUS_PCP_IFX_RSA_KEY_CREATION_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046625));
pub const STATUS_PCP_TICKET_MISSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046624));
pub const STATUS_PCP_RAW_POLICY_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046623));
pub const STATUS_PCP_KEY_HANDLE_INVALIDATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046622));
pub const STATUS_PCP_UNSUPPORTED_PSS_SALT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1076437027));
pub const STATUS_RTPM_CONTEXT_CONTINUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 2699264));
pub const STATUS_RTPM_CONTEXT_COMPLETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 2699265));
pub const STATUS_RTPM_NO_RESULT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071042558));
pub const STATUS_RTPM_PCR_READ_INCOMPLETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071042557));
pub const STATUS_RTPM_INVALID_CONTEXT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071042556));
pub const STATUS_RTPM_UNSUPPORTED_CMD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071042555));
pub const STATUS_TPM_ZERO_EXHAUST_ENABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071038464));
pub const STATUS_HV_INVALID_HYPERCALL_CODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268414));
pub const STATUS_HV_INVALID_HYPERCALL_INPUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268413));
pub const STATUS_HV_INVALID_ALIGNMENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268412));
pub const STATUS_HV_INVALID_PARAMETER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268411));
pub const STATUS_HV_ACCESS_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268410));
pub const STATUS_HV_INVALID_PARTITION_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268409));
pub const STATUS_HV_OPERATION_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268408));
pub const STATUS_HV_UNKNOWN_PROPERTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268407));
pub const STATUS_HV_PROPERTY_VALUE_OUT_OF_RANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268406));
pub const STATUS_HV_INSUFFICIENT_MEMORY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268405));
pub const STATUS_HV_PARTITION_TOO_DEEP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268404));
pub const STATUS_HV_INVALID_PARTITION_ID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268403));
pub const STATUS_HV_INVALID_VP_INDEX = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268402));
pub const STATUS_HV_INVALID_PORT_ID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268399));
pub const STATUS_HV_INVALID_CONNECTION_ID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268398));
pub const STATUS_HV_INSUFFICIENT_BUFFERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268397));
pub const STATUS_HV_NOT_ACKNOWLEDGED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268396));
pub const STATUS_HV_INVALID_VP_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268395));
pub const STATUS_HV_ACKNOWLEDGED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268394));
pub const STATUS_HV_INVALID_SAVE_RESTORE_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268393));
pub const STATUS_HV_INVALID_SYNIC_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268392));
pub const STATUS_HV_OBJECT_IN_USE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268391));
pub const STATUS_HV_INVALID_PROXIMITY_DOMAIN_INFO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268390));
pub const STATUS_HV_NO_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268389));
pub const STATUS_HV_INACTIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268388));
pub const STATUS_HV_NO_RESOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268387));
pub const STATUS_HV_FEATURE_UNAVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268386));
pub const STATUS_HV_INSUFFICIENT_BUFFER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268365));
pub const STATUS_HV_INSUFFICIENT_DEVICE_DOMAINS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268360));
pub const STATUS_HV_CPUID_FEATURE_VALIDATION_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268356));
pub const STATUS_HV_CPUID_XSAVE_FEATURE_VALIDATION_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268355));
pub const STATUS_HV_PROCESSOR_STARTUP_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268354));
pub const STATUS_HV_SMX_ENABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268353));
pub const STATUS_HV_INVALID_LP_INDEX = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268351));
pub const STATUS_HV_INVALID_REGISTER_VALUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268336));
pub const STATUS_HV_INVALID_VTL_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268335));
pub const STATUS_HV_NX_NOT_DETECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268331));
pub const STATUS_HV_INVALID_DEVICE_ID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268329));
pub const STATUS_HV_INVALID_DEVICE_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268328));
pub const STATUS_HV_PENDING_PAGE_REQUESTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 3473497));
pub const STATUS_HV_PAGE_REQUEST_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268320));
pub const STATUS_HV_INVALID_CPU_GROUP_ID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268305));
pub const STATUS_HV_INVALID_CPU_GROUP_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268304));
pub const STATUS_HV_OPERATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268303));
pub const STATUS_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268302));
pub const STATUS_HV_INSUFFICIENT_ROOT_MEMORY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268301));
pub const STATUS_HV_EVENT_BUFFER_ALREADY_FREED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268300));
pub const STATUS_HV_INSUFFICIENT_CONTIGUOUS_MEMORY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268299));
pub const STATUS_HV_DEVICE_NOT_IN_DOMAIN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268298));
pub const STATUS_HV_NESTED_VM_EXIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268297));
pub const STATUS_HV_CALL_PENDING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268295));
pub const STATUS_HV_MSR_ACCESS_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268288));
pub const STATUS_HV_NOT_PRESENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070264320));
pub const STATUS_VID_DUPLICATE_HANDLER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137343));
pub const STATUS_VID_TOO_MANY_HANDLERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137342));
pub const STATUS_VID_QUEUE_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137341));
pub const STATUS_VID_HANDLER_NOT_PRESENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137340));
pub const STATUS_VID_INVALID_OBJECT_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137339));
pub const STATUS_VID_PARTITION_NAME_TOO_LONG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137338));
pub const STATUS_VID_MESSAGE_QUEUE_NAME_TOO_LONG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137337));
pub const STATUS_VID_PARTITION_ALREADY_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137336));
pub const STATUS_VID_PARTITION_DOES_NOT_EXIST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137335));
pub const STATUS_VID_PARTITION_NAME_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137334));
pub const STATUS_VID_MESSAGE_QUEUE_ALREADY_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137333));
pub const STATUS_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137332));
pub const STATUS_VID_MB_STILL_REFERENCED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137331));
pub const STATUS_VID_CHILD_GPA_PAGE_SET_CORRUPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137330));
pub const STATUS_VID_INVALID_NUMA_SETTINGS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137329));
pub const STATUS_VID_INVALID_NUMA_NODE_INDEX = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137328));
pub const STATUS_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137327));
pub const STATUS_VID_INVALID_MEMORY_BLOCK_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137326));
pub const STATUS_VID_PAGE_RANGE_OVERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137325));
pub const STATUS_VID_INVALID_MESSAGE_QUEUE_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137324));
pub const STATUS_VID_INVALID_GPA_RANGE_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137323));
pub const STATUS_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137322));
pub const STATUS_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137321));
pub const STATUS_VID_INVALID_PPM_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137320));
pub const STATUS_VID_MBPS_ARE_LOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137319));
pub const STATUS_VID_MESSAGE_QUEUE_CLOSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137318));
pub const STATUS_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137317));
pub const STATUS_VID_STOP_PENDING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137316));
pub const STATUS_VID_INVALID_PROCESSOR_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137315));
pub const STATUS_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137314));
pub const STATUS_VID_KM_INTERFACE_ALREADY_INITIALIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137313));
pub const STATUS_VID_MB_PROPERTY_ALREADY_SET_RESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137312));
pub const STATUS_VID_MMIO_RANGE_DESTROYED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137311));
pub const STATUS_VID_INVALID_CHILD_GPA_PAGE_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137310));
pub const STATUS_VID_RESERVE_PAGE_SET_IS_BEING_USED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137309));
pub const STATUS_VID_RESERVE_PAGE_SET_TOO_SMALL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137308));
pub const STATUS_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137307));
pub const STATUS_VID_MBP_COUNT_EXCEEDED_LIMIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137306));
pub const STATUS_VID_SAVED_STATE_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137305));
pub const STATUS_VID_SAVED_STATE_UNRECOGNIZED_ITEM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137304));
pub const STATUS_VID_SAVED_STATE_INCOMPATIBLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137303));
pub const STATUS_VID_VTL_ACCESS_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137302));
pub const STATUS_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2143879167));
pub const STATUS_IPSEC_BAD_SPI = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070202879));
pub const STATUS_IPSEC_SA_LIFETIME_EXPIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070202878));
pub const STATUS_IPSEC_WRONG_SA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070202877));
pub const STATUS_IPSEC_REPLAY_CHECK_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070202876));
pub const STATUS_IPSEC_INVALID_PACKET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070202875));
pub const STATUS_IPSEC_INTEGRITY_CHECK_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070202874));
pub const STATUS_IPSEC_CLEAR_TEXT_DROP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070202873));
pub const STATUS_IPSEC_AUTH_FIREWALL_DROP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070202872));
pub const STATUS_IPSEC_THROTTLE_DROP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070202871));
pub const STATUS_IPSEC_DOSP_BLOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070170112));
pub const STATUS_IPSEC_DOSP_RECEIVED_MULTICAST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070170111));
pub const STATUS_IPSEC_DOSP_INVALID_PACKET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070170110));
pub const STATUS_IPSEC_DOSP_STATE_LOOKUP_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070170109));
pub const STATUS_IPSEC_DOSP_MAX_ENTRIES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070170108));
pub const STATUS_IPSEC_DOSP_KEYMOD_NOT_ALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070170107));
pub const STATUS_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070170106));
pub const STATUS_VOLMGR_INCOMPLETE_REGENERATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2143813631));
pub const STATUS_VOLMGR_INCOMPLETE_DISK_MIGRATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2143813630));
pub const STATUS_VOLMGR_DATABASE_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071807));
pub const STATUS_VOLMGR_DISK_CONFIGURATION_CORRUPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071806));
pub const STATUS_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071805));
pub const STATUS_VOLMGR_PACK_CONFIG_UPDATE_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071804));
pub const STATUS_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071803));
pub const STATUS_VOLMGR_DISK_DUPLICATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071802));
pub const STATUS_VOLMGR_DISK_DYNAMIC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071801));
pub const STATUS_VOLMGR_DISK_ID_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071800));
pub const STATUS_VOLMGR_DISK_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071799));
pub const STATUS_VOLMGR_DISK_LAST_VOTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071798));
pub const STATUS_VOLMGR_DISK_LAYOUT_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071797));
pub const STATUS_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071796));
pub const STATUS_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071795));
pub const STATUS_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071794));
pub const STATUS_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071793));
pub const STATUS_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071792));
pub const STATUS_VOLMGR_DISK_MISSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071791));
pub const STATUS_VOLMGR_DISK_NOT_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071790));
pub const STATUS_VOLMGR_DISK_NOT_ENOUGH_SPACE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071789));
pub const STATUS_VOLMGR_DISK_REVECTORING_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071788));
pub const STATUS_VOLMGR_DISK_SECTOR_SIZE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071787));
pub const STATUS_VOLMGR_DISK_SET_NOT_CONTAINED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071786));
pub const STATUS_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071785));
pub const STATUS_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071784));
pub const STATUS_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071783));
pub const STATUS_VOLMGR_EXTENT_ALREADY_USED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071782));
pub const STATUS_VOLMGR_EXTENT_NOT_CONTIGUOUS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071781));
pub const STATUS_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071780));
pub const STATUS_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071779));
pub const STATUS_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071778));
pub const STATUS_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071777));
pub const STATUS_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071776));
pub const STATUS_VOLMGR_INTERLEAVE_LENGTH_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071775));
pub const STATUS_VOLMGR_MAXIMUM_REGISTERED_USERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071774));
pub const STATUS_VOLMGR_MEMBER_IN_SYNC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071773));
pub const STATUS_VOLMGR_MEMBER_INDEX_DUPLICATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071772));
pub const STATUS_VOLMGR_MEMBER_INDEX_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071771));
pub const STATUS_VOLMGR_MEMBER_MISSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071770));
pub const STATUS_VOLMGR_MEMBER_NOT_DETACHED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071769));
pub const STATUS_VOLMGR_MEMBER_REGENERATING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071768));
pub const STATUS_VOLMGR_ALL_DISKS_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071767));
pub const STATUS_VOLMGR_NO_REGISTERED_USERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071766));
pub const STATUS_VOLMGR_NO_SUCH_USER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071765));
pub const STATUS_VOLMGR_NOTIFICATION_RESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071764));
pub const STATUS_VOLMGR_NUMBER_OF_MEMBERS_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071763));
pub const STATUS_VOLMGR_NUMBER_OF_PLEXES_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071762));
pub const STATUS_VOLMGR_PACK_DUPLICATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071761));
pub const STATUS_VOLMGR_PACK_ID_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071760));
pub const STATUS_VOLMGR_PACK_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071759));
pub const STATUS_VOLMGR_PACK_NAME_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071758));
pub const STATUS_VOLMGR_PACK_OFFLINE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071757));
pub const STATUS_VOLMGR_PACK_HAS_QUORUM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071756));
pub const STATUS_VOLMGR_PACK_WITHOUT_QUORUM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071755));
pub const STATUS_VOLMGR_PARTITION_STYLE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071754));
pub const STATUS_VOLMGR_PARTITION_UPDATE_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071753));
pub const STATUS_VOLMGR_PLEX_IN_SYNC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071752));
pub const STATUS_VOLMGR_PLEX_INDEX_DUPLICATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071751));
pub const STATUS_VOLMGR_PLEX_INDEX_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071750));
pub const STATUS_VOLMGR_PLEX_LAST_ACTIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071749));
pub const STATUS_VOLMGR_PLEX_MISSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071748));
pub const STATUS_VOLMGR_PLEX_REGENERATING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071747));
pub const STATUS_VOLMGR_PLEX_TYPE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071746));
pub const STATUS_VOLMGR_PLEX_NOT_RAID5 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071745));
pub const STATUS_VOLMGR_PLEX_NOT_SIMPLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071744));
pub const STATUS_VOLMGR_STRUCTURE_SIZE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071743));
pub const STATUS_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071742));
pub const STATUS_VOLMGR_TRANSACTION_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071741));
pub const STATUS_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071740));
pub const STATUS_VOLMGR_VOLUME_CONTAINS_MISSING_DISK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071739));
pub const STATUS_VOLMGR_VOLUME_ID_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071738));
pub const STATUS_VOLMGR_VOLUME_LENGTH_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071737));
pub const STATUS_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071736));
pub const STATUS_VOLMGR_VOLUME_NOT_MIRRORED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071735));
pub const STATUS_VOLMGR_VOLUME_NOT_RETAINED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071734));
pub const STATUS_VOLMGR_VOLUME_OFFLINE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071733));
pub const STATUS_VOLMGR_VOLUME_RETAINED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071732));
pub const STATUS_VOLMGR_NUMBER_OF_EXTENTS_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071731));
pub const STATUS_VOLMGR_DIFFERENT_SECTOR_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071730));
pub const STATUS_VOLMGR_BAD_BOOT_DISK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071729));
pub const STATUS_VOLMGR_PACK_CONFIG_OFFLINE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071728));
pub const STATUS_VOLMGR_PACK_CONFIG_ONLINE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071727));
pub const STATUS_VOLMGR_NOT_PRIMARY_PACK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071726));
pub const STATUS_VOLMGR_PACK_LOG_UPDATE_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071725));
pub const STATUS_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071724));
pub const STATUS_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071723));
pub const STATUS_VOLMGR_VOLUME_MIRRORED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071722));
pub const STATUS_VOLMGR_PLEX_NOT_SIMPLE_SPANNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071721));
pub const STATUS_VOLMGR_NO_VALID_LOG_COPIES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071720));
pub const STATUS_VOLMGR_PRIMARY_PACK_PRESENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071719));
pub const STATUS_VOLMGR_NUMBER_OF_DISKS_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071718));
pub const STATUS_VOLMGR_MIRROR_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071717));
pub const STATUS_VOLMGR_RAID5_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071716));
pub const STATUS_BCD_NOT_ALL_ENTRIES_IMPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2143748095));
pub const STATUS_BCD_TOO_MANY_ELEMENTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070006270));
pub const STATUS_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2143748093));
pub const STATUS_VHD_DRIVE_FOOTER_MISSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940735));
pub const STATUS_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940734));
pub const STATUS_VHD_DRIVE_FOOTER_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940733));
pub const STATUS_VHD_FORMAT_UNKNOWN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940732));
pub const STATUS_VHD_FORMAT_UNSUPPORTED_VERSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940731));
pub const STATUS_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940730));
pub const STATUS_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940729));
pub const STATUS_VHD_SPARSE_HEADER_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940728));
pub const STATUS_VHD_BLOCK_ALLOCATION_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940727));
pub const STATUS_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940726));
pub const STATUS_VHD_INVALID_BLOCK_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940725));
pub const STATUS_VHD_BITMAP_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940724));
pub const STATUS_VHD_PARENT_VHD_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940723));
pub const STATUS_VHD_CHILD_PARENT_ID_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940722));
pub const STATUS_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940721));
pub const STATUS_VHD_METADATA_READ_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940720));
pub const STATUS_VHD_METADATA_WRITE_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940719));
pub const STATUS_VHD_INVALID_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940718));
pub const STATUS_VHD_INVALID_FILE_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940717));
pub const STATUS_VIRTDISK_PROVIDER_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940716));
pub const STATUS_VIRTDISK_NOT_VIRTUAL_DISK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940715));
pub const STATUS_VHD_PARENT_VHD_ACCESS_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940714));
pub const STATUS_VHD_CHILD_PARENT_SIZE_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940713));
pub const STATUS_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940712));
pub const STATUS_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940711));
pub const STATUS_VIRTUAL_DISK_LIMITATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940710));
pub const STATUS_VHD_INVALID_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940709));
pub const STATUS_VHD_INVALID_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940708));
pub const STATUS_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940707));
pub const STATUS_VIRTDISK_DISK_ALREADY_OWNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940706));
pub const STATUS_VIRTDISK_DISK_ONLINE_AND_WRITABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940705));
pub const STATUS_CTLOG_TRACKING_NOT_INITIALIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940704));
pub const STATUS_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940703));
pub const STATUS_CTLOG_VHD_CHANGED_OFFLINE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940702));
pub const STATUS_CTLOG_INVALID_TRACKING_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940701));
pub const STATUS_CTLOG_INCONSISTENT_TRACKING_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940700));
pub const STATUS_VHD_METADATA_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940696));
pub const STATUS_VHD_INVALID_CHANGE_TRACKING_ID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940695));
pub const STATUS_VHD_CHANGE_TRACKING_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940694));
pub const STATUS_VHD_MISSING_CHANGE_TRACKING_INFORMATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940688));
pub const STATUS_VHD_RESIZE_WOULD_TRUNCATE_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940687));
pub const STATUS_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940686));
pub const STATUS_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940685));
pub const STATUS_QUERY_STORAGE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2143682559));
pub const STATUS_GDI_HANDLE_LEAK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2143354879));
pub const STATUS_RKF_KEY_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069547519));
pub const STATUS_RKF_DUPLICATE_KEY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069547518));
pub const STATUS_RKF_BLOB_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069547517));
pub const STATUS_RKF_STORE_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069547516));
pub const STATUS_RKF_FILE_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069547515));
pub const STATUS_RKF_ACTIVE_KEY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069547514));
pub const STATUS_RDBSS_RESTART_OPERATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069481983));
pub const STATUS_RDBSS_CONTINUE_OPERATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069481982));
pub const STATUS_RDBSS_POST_OPERATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069481981));
pub const STATUS_RDBSS_RETRY_LOOKUP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069481980));
pub const STATUS_BTH_ATT_INVALID_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416447));
pub const STATUS_BTH_ATT_READ_NOT_PERMITTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416446));
pub const STATUS_BTH_ATT_WRITE_NOT_PERMITTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416445));
pub const STATUS_BTH_ATT_INVALID_PDU = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416444));
pub const STATUS_BTH_ATT_INSUFFICIENT_AUTHENTICATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416443));
pub const STATUS_BTH_ATT_REQUEST_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416442));
pub const STATUS_BTH_ATT_INVALID_OFFSET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416441));
pub const STATUS_BTH_ATT_INSUFFICIENT_AUTHORIZATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416440));
pub const STATUS_BTH_ATT_PREPARE_QUEUE_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416439));
pub const STATUS_BTH_ATT_ATTRIBUTE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416438));
pub const STATUS_BTH_ATT_ATTRIBUTE_NOT_LONG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416437));
pub const STATUS_BTH_ATT_INSUFFICIENT_ENCRYPTION_KEY_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416436));
pub const STATUS_BTH_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416435));
pub const STATUS_BTH_ATT_UNLIKELY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416434));
pub const STATUS_BTH_ATT_INSUFFICIENT_ENCRYPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416433));
pub const STATUS_BTH_ATT_UNSUPPORTED_GROUP_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416432));
pub const STATUS_BTH_ATT_INSUFFICIENT_RESOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416431));
pub const STATUS_BTH_ATT_UNKNOWN_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069412352));
pub const STATUS_SECUREBOOT_ROLLBACK_DETECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350911));
pub const STATUS_SECUREBOOT_POLICY_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350910));
pub const STATUS_SECUREBOOT_INVALID_POLICY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350909));
pub const STATUS_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350908));
pub const STATUS_SECUREBOOT_POLICY_NOT_SIGNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350907));
pub const STATUS_SECUREBOOT_NOT_ENABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2143092730));
pub const STATUS_SECUREBOOT_FILE_REPLACED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350905));
pub const STATUS_SECUREBOOT_POLICY_NOT_AUTHORIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350904));
pub const STATUS_SECUREBOOT_POLICY_UNKNOWN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350903));
pub const STATUS_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350902));
pub const STATUS_SECUREBOOT_PLATFORM_ID_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350901));
pub const STATUS_SECUREBOOT_POLICY_ROLLBACK_DETECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350900));
pub const STATUS_SECUREBOOT_POLICY_UPGRADE_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350899));
pub const STATUS_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350898));
pub const STATUS_SECUREBOOT_NOT_BASE_POLICY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350897));
pub const STATUS_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350896));
pub const STATUS_PLATFORM_MANIFEST_NOT_AUTHORIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058340863));
pub const STATUS_PLATFORM_MANIFEST_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058340862));
pub const STATUS_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058340861));
pub const STATUS_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058340860));
pub const STATUS_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058340859));
pub const STATUS_PLATFORM_MANIFEST_NOT_ACTIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058340858));
pub const STATUS_PLATFORM_MANIFEST_NOT_SIGNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058340857));
pub const STATUS_SYSTEM_INTEGRITY_ROLLBACK_DETECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058471935));
pub const STATUS_SYSTEM_INTEGRITY_POLICY_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058471934));
pub const STATUS_SYSTEM_INTEGRITY_INVALID_POLICY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058471933));
pub const STATUS_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058471932));
pub const STATUS_SYSTEM_INTEGRITY_TOO_MANY_POLICIES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058471931));
pub const STATUS_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058471930));
pub const STATUS_SYSTEM_INTEGRITY_REPUTATION_MALICIOUS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058471929));
pub const STATUS_SYSTEM_INTEGRITY_REPUTATION_PUA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058471928));
pub const STATUS_SYSTEM_INTEGRITY_REPUTATION_DANGEROUS_EXT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058471927));
pub const STATUS_SYSTEM_INTEGRITY_REPUTATION_OFFLINE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058471926));
pub const STATUS_NO_APPLICABLE_APP_LICENSES_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058406399));
pub const STATUS_CLIP_LICENSE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058406398));
pub const STATUS_CLIP_DEVICE_LICENSE_MISSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058406397));
pub const STATUS_CLIP_LICENSE_INVALID_SIGNATURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058406396));
pub const STATUS_CLIP_KEYHOLDER_LICENSE_MISSING_OR_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058406395));
pub const STATUS_CLIP_LICENSE_EXPIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058406394));
pub const STATUS_CLIP_LICENSE_SIGNED_BY_UNKNOWN_SOURCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058406393));
pub const STATUS_CLIP_LICENSE_NOT_SIGNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058406392));
pub const STATUS_CLIP_LICENSE_HARDWARE_ID_OUT_OF_TOLERANCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058406391));
pub const STATUS_CLIP_LICENSE_DEVICE_ID_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058406390));
pub const STATUS_AUDIO_ENGINE_NODE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069285375));
pub const STATUS_HDAUDIO_EMPTY_CONNECTION_LIST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069285374));
pub const STATUS_HDAUDIO_CONNECTION_LIST_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069285373));
pub const STATUS_HDAUDIO_NO_LOGICAL_DEVICES_CREATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069285372));
pub const STATUS_HDAUDIO_NULL_LINKED_LIST_ENTRY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069285371));
pub const STATUS_SPACES_REPAIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 15138816));
pub const STATUS_SPACES_PAUSE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 15138817));
pub const STATUS_SPACES_COMPLETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 15138818));
pub const STATUS_SPACES_REDIRECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 15138819));
pub const STATUS_SPACES_FAULT_DOMAIN_TYPE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058603007));
pub const STATUS_SPACES_RESILIENCY_TYPE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058603005));
pub const STATUS_SPACES_DRIVE_SECTOR_SIZE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058603004));
pub const STATUS_SPACES_DRIVE_REDUNDANCY_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058603002));
pub const STATUS_SPACES_NUMBER_OF_DATA_COPIES_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058603001));
pub const STATUS_SPACES_INTERLEAVE_LENGTH_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602999));
pub const STATUS_SPACES_NUMBER_OF_COLUMNS_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602998));
pub const STATUS_SPACES_NOT_ENOUGH_DRIVES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602997));
pub const STATUS_SPACES_EXTENDED_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602996));
pub const STATUS_SPACES_PROVISIONING_TYPE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602995));
pub const STATUS_SPACES_ALLOCATION_SIZE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602994));
pub const STATUS_SPACES_ENCLOSURE_AWARE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602993));
pub const STATUS_SPACES_WRITE_CACHE_SIZE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602992));
pub const STATUS_SPACES_NUMBER_OF_GROUPS_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602991));
pub const STATUS_SPACES_DRIVE_OPERATIONAL_STATE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602990));
pub const STATUS_SPACES_UPDATE_COLUMN_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602989));
pub const STATUS_SPACES_MAP_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602988));
pub const STATUS_SPACES_UNSUPPORTED_VERSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602987));
pub const STATUS_SPACES_CORRUPT_METADATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602986));
pub const STATUS_SPACES_DRT_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602985));
pub const STATUS_SPACES_INCONSISTENCY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602984));
pub const STATUS_SPACES_LOG_NOT_READY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602983));
pub const STATUS_SPACES_NO_REDUNDANCY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602982));
pub const STATUS_SPACES_DRIVE_NOT_READY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602981));
pub const STATUS_SPACES_DRIVE_SPLIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602980));
pub const STATUS_SPACES_DRIVE_LOST_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602979));
pub const STATUS_SPACES_ENTRY_INCOMPLETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602978));
pub const STATUS_SPACES_ENTRY_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602977));
pub const STATUS_SPACES_MARK_DIRTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602976));
pub const STATUS_SPACES_PD_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602975));
pub const STATUS_SPACES_PD_LENGTH_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602974));
pub const STATUS_SPACES_PD_UNSUPPORTED_VERSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602973));
pub const STATUS_SPACES_PD_INVALID_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602972));
pub const STATUS_SPACES_FLUSH_METADATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602971));
pub const STATUS_SPACES_CACHE_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602970));
pub const STATUS_VOLSNAP_BOOTFILE_NOT_VALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1068498941));
pub const STATUS_VOLSNAP_ACTIVATION_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1068498940));
pub const STATUS_VOLSNAP_NO_BYPASSIO_WITH_SNAPSHOT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1068498939));
pub const STATUS_IO_PREEMPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1068433407));
pub const STATUS_SVHDX_ERROR_STORED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067712512));
pub const STATUS_SVHDX_ERROR_NOT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647232));
pub const STATUS_SVHDX_UNIT_ATTENTION_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647231));
pub const STATUS_SVHDX_UNIT_ATTENTION_CAPACITY_DATA_CHANGED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647230));
pub const STATUS_SVHDX_UNIT_ATTENTION_RESERVATIONS_PREEMPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647229));
pub const STATUS_SVHDX_UNIT_ATTENTION_RESERVATIONS_RELEASED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647228));
pub const STATUS_SVHDX_UNIT_ATTENTION_REGISTRATIONS_PREEMPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647227));
pub const STATUS_SVHDX_UNIT_ATTENTION_OPERATING_DEFINITION_CHANGED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647226));
pub const STATUS_SVHDX_RESERVATION_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647225));
pub const STATUS_SVHDX_WRONG_FILE_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647224));
pub const STATUS_SVHDX_VERSION_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647223));
pub const STATUS_VHD_SHARED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647222));
pub const STATUS_SVHDX_NO_INITIATOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647221));
pub const STATUS_VHDSET_BACKING_STORAGE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647220));
pub const STATUS_SMB_NO_PREAUTH_INTEGRITY_HASH_OVERLAP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067646976));
pub const STATUS_SMB_BAD_CLUSTER_DIALECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067646975));
pub const STATUS_SMB_GUEST_LOGON_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067646974));
pub const STATUS_SMB_NO_SIGNING_ALGORITHM_OVERLAP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067646973));
pub const STATUS_SECCORE_INVALID_COMMAND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058537472));
pub const STATUS_VSM_NOT_INITIALIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069219840));
pub const STATUS_VSM_DMA_PROTECTION_NOT_IN_USE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069219839));
pub const STATUS_APPEXEC_CONDITION_NOT_SATISFIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058275328));
pub const STATUS_APPEXEC_HANDLE_INVALIDATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058275327));
pub const STATUS_APPEXEC_INVALID_HOST_GENERATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058275326));
pub const STATUS_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058275325));
pub const STATUS_APPEXEC_INVALID_HOST_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058275324));
pub const STATUS_APPEXEC_NO_DONOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058275323));
pub const STATUS_APPEXEC_HOST_ID_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058275322));
pub const STATUS_APPEXEC_UNKNOWN_USER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058275321));
pub const STATUS_APPEXEC_APP_COMPAT_BLOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058275320));
pub const STATUS_APPEXEC_CALLER_WAIT_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058275319));
pub const STATUS_APPEXEC_CALLER_WAIT_TIMEOUT_TERMINATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058275318));
pub const STATUS_APPEXEC_CALLER_WAIT_TIMEOUT_LICENSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058275317));
pub const STATUS_APPEXEC_CALLER_WAIT_TIMEOUT_RESOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058275316));
pub const STATUS_QUIC_HANDSHAKE_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071382528));
pub const STATUS_QUIC_VER_NEG_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071382527));
pub const STATUS_QUIC_USER_CANCELED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071382526));
pub const STATUS_QUIC_INTERNAL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071382525));
pub const STATUS_QUIC_PROTOCOL_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071382524));
pub const STATUS_QUIC_CONNECTION_IDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071382523));
pub const STATUS_QUIC_CONNECTION_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071382522));
pub const STATUS_QUIC_ALPN_NEG_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071382521));
pub const STATUS_IORING_REQUIRED_FLAG_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069154303));
pub const STATUS_IORING_SUBMISSION_QUEUE_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069154302));
pub const STATUS_IORING_VERSION_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069154301));
pub const STATUS_IORING_SUBMISSION_QUEUE_TOO_BIG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069154300));
pub const STATUS_IORING_COMPLETION_QUEUE_TOO_BIG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069154299));
pub const STATUS_IORING_SUBMIT_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069154298));
pub const STATUS_IORING_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069154297));
pub const WINVER = @as(u32, 1280);
pub const APP_LOCAL_DEVICE_ID_SIZE = @as(u32, 32);
pub const DM_UPDATE = @as(u32, 1);
pub const DM_COPY = @as(u32, 2);
pub const DM_PROMPT = @as(u32, 4);
pub const DM_MODIFY = @as(u32, 8);
pub const DM_IN_BUFFER = @as(u32, 8);
pub const DM_IN_PROMPT = @as(u32, 4);
pub const DM_OUT_BUFFER = @as(u32, 2);
pub const DM_OUT_DEFAULT = @as(u32, 1);
pub const SEC_E_OK = @import("zig.zig").typedConst(HRESULT, @as(i32, 0));
pub const RPC_X_NO_MORE_ENTRIES = @as(i32, 1772);
pub const RPC_X_SS_CHAR_TRANS_OPEN_FAIL = @as(i32, 1773);
pub const RPC_X_SS_CHAR_TRANS_SHORT_FILE = @as(i32, 1774);
pub const RPC_X_SS_IN_NULL_CONTEXT = @as(i32, 1775);
pub const RPC_X_SS_CONTEXT_DAMAGED = @as(i32, 1777);
pub const RPC_X_SS_HANDLES_MISMATCH = @as(i32, 1778);
pub const RPC_X_SS_CANNOT_GET_CALL_HANDLE = @as(i32, 1779);
pub const RPC_X_NULL_REF_POINTER = @as(i32, 1780);
pub const RPC_X_ENUM_VALUE_OUT_OF_RANGE = @as(i32, 1781);
pub const RPC_X_BYTE_COUNT_TOO_SMALL = @as(i32, 1782);
pub const RPC_X_BAD_STUB_DATA = @as(i32, 1783);
pub const RPC_X_INVALID_ES_ACTION = @as(i32, 1827);
pub const RPC_X_WRONG_ES_VERSION = @as(i32, 1828);
pub const RPC_X_WRONG_STUB_VERSION = @as(i32, 1829);
pub const RPC_X_INVALID_PIPE_OBJECT = @as(i32, 1830);
pub const RPC_X_WRONG_PIPE_ORDER = @as(i32, 1831);
pub const RPC_X_WRONG_PIPE_VERSION = @as(i32, 1832);
pub const OR_INVALID_OXID = @as(i32, 1910);
pub const OR_INVALID_OID = @as(i32, 1911);
pub const OR_INVALID_SET = @as(i32, 1912);
pub const RPC_X_PIPE_CLOSED = @as(i32, 1916);
pub const RPC_X_PIPE_DISCIPLINE_ERROR = @as(i32, 1917);
pub const RPC_X_PIPE_EMPTY = @as(i32, 1918);
pub const PEERDIST_ERROR_CONTENTINFO_VERSION_UNSUPPORTED = @as(i32, 4050);
pub const PEERDIST_ERROR_CANNOT_PARSE_CONTENTINFO = @as(i32, 4051);
pub const PEERDIST_ERROR_MISSING_DATA = @as(i32, 4052);
pub const PEERDIST_ERROR_NO_MORE = @as(i32, 4053);
pub const PEERDIST_ERROR_NOT_INITIALIZED = @as(i32, 4054);
pub const PEERDIST_ERROR_ALREADY_INITIALIZED = @as(i32, 4055);
pub const PEERDIST_ERROR_SHUTDOWN_IN_PROGRESS = @as(i32, 4056);
pub const PEERDIST_ERROR_INVALIDATED = @as(i32, 4057);
pub const PEERDIST_ERROR_ALREADY_EXISTS = @as(i32, 4058);
pub const PEERDIST_ERROR_OPERATION_NOTFOUND = @as(i32, 4059);
pub const PEERDIST_ERROR_ALREADY_COMPLETED = @as(i32, 4060);
pub const PEERDIST_ERROR_OUT_OF_BOUNDS = @as(i32, 4061);
pub const PEERDIST_ERROR_VERSION_UNSUPPORTED = @as(i32, 4062);
pub const PEERDIST_ERROR_INVALID_CONFIGURATION = @as(i32, 4063);
pub const PEERDIST_ERROR_NOT_LICENSED = @as(i32, 4064);
pub const PEERDIST_ERROR_SERVICE_UNAVAILABLE = @as(i32, 4065);
pub const PEERDIST_ERROR_TRUST_FAILURE = @as(i32, 4066);
pub const SCHED_E_SERVICE_NOT_LOCALSYSTEM = @as(i32, 6200);
pub const FRS_ERR_INVALID_API_SEQUENCE = @as(i32, 8001);
pub const FRS_ERR_STARTING_SERVICE = @as(i32, 8002);
pub const FRS_ERR_STOPPING_SERVICE = @as(i32, 8003);
pub const FRS_ERR_INTERNAL_API = @as(i32, 8004);
pub const FRS_ERR_INTERNAL = @as(i32, 8005);
pub const FRS_ERR_SERVICE_COMM = @as(i32, 8006);
pub const FRS_ERR_INSUFFICIENT_PRIV = @as(i32, 8007);
pub const FRS_ERR_AUTHENTICATION = @as(i32, 8008);
pub const FRS_ERR_PARENT_INSUFFICIENT_PRIV = @as(i32, 8009);
pub const FRS_ERR_PARENT_AUTHENTICATION = @as(i32, 8010);
pub const FRS_ERR_CHILD_TO_PARENT_COMM = @as(i32, 8011);
pub const FRS_ERR_PARENT_TO_CHILD_COMM = @as(i32, 8012);
pub const FRS_ERR_SYSVOL_POPULATE = @as(i32, 8013);
pub const FRS_ERR_SYSVOL_POPULATE_TIMEOUT = @as(i32, 8014);
pub const FRS_ERR_SYSVOL_IS_BUSY = @as(i32, 8015);
pub const FRS_ERR_SYSVOL_DEMOTE = @as(i32, 8016);
pub const FRS_ERR_INVALID_SERVICE_PARAMETER = @as(i32, 8017);
pub const DNS_INFO_NO_RECORDS = @as(i32, 9501);
pub const DNS_REQUEST_PENDING = @as(i32, 9506);
pub const DNS_STATUS_FQDN = @as(i32, 9557);
pub const DNS_STATUS_DOTTED_NAME = @as(i32, 9558);
pub const DNS_STATUS_SINGLE_PART_NAME = @as(i32, 9559);
pub const DNS_WARNING_PTR_CREATE_FAILED = @as(i32, 9715);
pub const DNS_WARNING_DOMAIN_UNDELETED = @as(i32, 9716);
pub const DNS_INFO_AXFR_COMPLETE = @as(i32, 9751);
pub const DNS_INFO_ADDED_LOCAL_WINS = @as(i32, 9753);
pub const DNS_STATUS_CONTINUE_NEEDED = @as(i32, 9801);
pub const WARNING_IPSEC_MM_POLICY_PRUNED = @as(i32, 13024);
pub const WARNING_IPSEC_QM_POLICY_PRUNED = @as(i32, 13025);
pub const APPMODEL_ERROR_NO_PACKAGE = @as(i32, 15700);
pub const APPMODEL_ERROR_PACKAGE_RUNTIME_CORRUPT = @as(i32, 15701);
pub const APPMODEL_ERROR_PACKAGE_IDENTITY_CORRUPT = @as(i32, 15702);
pub const APPMODEL_ERROR_NO_APPLICATION = @as(i32, 15703);
pub const APPMODEL_ERROR_DYNAMIC_PROPERTY_READ_FAILED = @as(i32, 15704);
pub const APPMODEL_ERROR_DYNAMIC_PROPERTY_INVALID = @as(i32, 15705);
pub const APPMODEL_ERROR_PACKAGE_NOT_AVAILABLE = @as(i32, 15706);
pub const APPMODEL_ERROR_NO_MUTABLE_DIRECTORY = @as(i32, 15707);
pub const STORE_ERROR_UNLICENSED = @as(i32, 15861);
pub const STORE_ERROR_UNLICENSED_USER = @as(i32, 15862);
pub const STORE_ERROR_PENDING_COM_TRANSACTION = @as(i32, 15863);
pub const STORE_ERROR_LICENSE_REVOKED = @as(i32, 15864);
pub const SEVERITY_SUCCESS = @as(u32, 0);
pub const SEVERITY_ERROR = @as(u32, 1);
pub const NOERROR = @as(u32, 0);
pub const E_UNEXPECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418113));
pub const E_NOINTERFACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467262));
pub const E_POINTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467261));
pub const E_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147024890));
pub const E_ABORT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467260));
pub const E_ACCESSDENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147024891));
pub const E_BOUNDS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483637));
pub const E_CHANGED_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483636));
pub const E_ILLEGAL_STATE_CHANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483635));
pub const E_ILLEGAL_METHOD_CALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483634));
pub const RO_E_METADATA_NAME_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483633));
pub const RO_E_METADATA_NAME_IS_NAMESPACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483632));
pub const RO_E_METADATA_INVALID_TYPE_FORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483631));
pub const RO_E_INVALID_METADATA_FILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483630));
pub const RO_E_CLOSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483629));
pub const RO_E_EXCLUSIVE_WRITE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483628));
pub const RO_E_CHANGE_NOTIFICATION_IN_PROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483627));
pub const RO_E_ERROR_STRING_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483626));
pub const E_STRING_NOT_NULL_TERMINATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483625));
pub const E_ILLEGAL_DELEGATE_ASSIGNMENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483624));
pub const E_ASYNC_OPERATION_NOT_STARTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483623));
pub const E_APPLICATION_EXITING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483622));
pub const E_APPLICATION_VIEW_EXITING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483621));
pub const RO_E_MUST_BE_AGILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483620));
pub const RO_E_UNSUPPORTED_FROM_MTA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483619));
pub const RO_E_COMMITTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483618));
pub const RO_E_BLOCKED_CROSS_ASTA_CALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483617));
pub const RO_E_CANNOT_ACTIVATE_FULL_TRUST_SERVER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483616));
pub const RO_E_CANNOT_ACTIVATE_UNIVERSAL_APPLICATION_SERVER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483615));
pub const CO_E_INIT_TLS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467258));
pub const CO_E_INIT_SHARED_ALLOCATOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467257));
pub const CO_E_INIT_MEMORY_ALLOCATOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467256));
pub const CO_E_INIT_CLASS_CACHE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467255));
pub const CO_E_INIT_RPC_CHANNEL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467254));
pub const CO_E_INIT_TLS_SET_CHANNEL_CONTROL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467253));
pub const CO_E_INIT_TLS_CHANNEL_CONTROL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467252));
pub const CO_E_INIT_UNACCEPTED_USER_ALLOCATOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467251));
pub const CO_E_INIT_SCM_MUTEX_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467250));
pub const CO_E_INIT_SCM_FILE_MAPPING_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467249));
pub const CO_E_INIT_SCM_MAP_VIEW_OF_FILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467248));
pub const CO_E_INIT_SCM_EXEC_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467247));
pub const CO_E_INIT_ONLY_SINGLE_THREADED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467246));
pub const CO_E_CANT_REMOTE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467245));
pub const CO_E_BAD_SERVER_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467244));
pub const CO_E_WRONG_SERVER_IDENTITY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467243));
pub const CO_E_OLE1DDE_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467242));
pub const CO_E_RUNAS_SYNTAX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467241));
pub const CO_E_CREATEPROCESS_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467240));
pub const CO_E_RUNAS_CREATEPROCESS_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467239));
pub const CO_E_RUNAS_LOGON_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467238));
pub const CO_E_LAUNCH_PERMSSION_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467237));
pub const CO_E_START_SERVICE_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467236));
pub const CO_E_REMOTE_COMMUNICATION_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467235));
pub const CO_E_SERVER_START_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467234));
pub const CO_E_CLSREG_INCONSISTENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467233));
pub const CO_E_IIDREG_INCONSISTENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467232));
pub const CO_E_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467231));
pub const CO_E_RELOAD_DLL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467230));
pub const CO_E_MSI_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467229));
pub const CO_E_ATTEMPT_TO_CREATE_OUTSIDE_CLIENT_CONTEXT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467228));
pub const CO_E_SERVER_PAUSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467227));
pub const CO_E_SERVER_NOT_PAUSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467226));
pub const CO_E_CLASS_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467225));
pub const CO_E_CLRNOTAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467224));
pub const CO_E_ASYNC_WORK_REJECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467223));
pub const CO_E_SERVER_INIT_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467222));
pub const CO_E_NO_SECCTX_IN_ACTIVATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467221));
pub const CO_E_TRACKER_CONFIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467216));
pub const CO_E_THREADPOOL_CONFIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467215));
pub const CO_E_SXS_CONFIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467214));
pub const CO_E_MALFORMED_SPN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467213));
pub const CO_E_UNREVOKED_REGISTRATION_ON_APARTMENT_SHUTDOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467212));
pub const CO_E_PREMATURE_STUB_RUNDOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467211));
pub const S_OK = @import("zig.zig").typedConst(HRESULT, @as(i32, 0));
pub const S_FALSE = @import("zig.zig").typedConst(HRESULT, @as(i32, 1));
pub const OLE_E_FIRST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221504));
pub const OLE_E_LAST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221249));
pub const OLE_S_FIRST = @import("zig.zig").typedConst(HRESULT, @as(i32, 262144));
pub const OLE_S_LAST = @import("zig.zig").typedConst(HRESULT, @as(i32, 262399));
pub const OLE_E_OLEVERB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221504));
pub const OLE_E_ADVF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221503));
pub const OLE_E_ENUM_NOMORE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221502));
pub const OLE_E_ADVISENOTSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221501));
pub const OLE_E_NOCONNECTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221500));
pub const OLE_E_NOTRUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221499));
pub const OLE_E_NOCACHE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221498));
pub const OLE_E_BLANK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221497));
pub const OLE_E_CLASSDIFF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221496));
pub const OLE_E_CANT_GETMONIKER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221495));
pub const OLE_E_CANT_BINDTOSOURCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221494));
pub const OLE_E_STATIC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221493));
pub const OLE_E_PROMPTSAVECANCELLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221492));
pub const OLE_E_INVALIDRECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221491));
pub const OLE_E_WRONGCOMPOBJ = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221490));
pub const OLE_E_INVALIDHWND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221489));
pub const OLE_E_NOT_INPLACEACTIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221488));
pub const OLE_E_CANTCONVERT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221487));
pub const OLE_E_NOSTORAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221486));
pub const DV_E_FORMATETC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221404));
pub const DV_E_DVTARGETDEVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221403));
pub const DV_E_STGMEDIUM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221402));
pub const DV_E_STATDATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221401));
pub const DV_E_LINDEX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221400));
pub const DV_E_TYMED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221399));
pub const DV_E_CLIPFORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221398));
pub const DV_E_DVASPECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221397));
pub const DV_E_DVTARGETDEVICE_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221396));
pub const DV_E_NOIVIEWOBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221395));
pub const DRAGDROP_E_FIRST = @as(i32, -2147221248);
pub const DRAGDROP_E_LAST = @as(i32, -2147221233);
pub const DRAGDROP_S_FIRST = @as(i32, 262400);
pub const DRAGDROP_S_LAST = @as(i32, 262415);
pub const DRAGDROP_E_NOTREGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221248));
pub const DRAGDROP_E_ALREADYREGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221247));
pub const DRAGDROP_E_INVALIDHWND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221246));
pub const DRAGDROP_E_CONCURRENT_DRAG_ATTEMPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221245));
pub const CLASSFACTORY_E_FIRST = @as(i32, -2147221232);
pub const CLASSFACTORY_E_LAST = @as(i32, -2147221217);
pub const CLASSFACTORY_S_FIRST = @as(i32, 262416);
pub const CLASSFACTORY_S_LAST = @as(i32, 262431);
pub const CLASS_E_NOAGGREGATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221232));
pub const CLASS_E_CLASSNOTAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221231));
pub const CLASS_E_NOTLICENSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221230));
pub const MARSHAL_E_FIRST = @as(i32, -2147221216);
pub const MARSHAL_E_LAST = @as(i32, -2147221201);
pub const MARSHAL_S_FIRST = @as(i32, 262432);
pub const MARSHAL_S_LAST = @as(i32, 262447);
pub const DATA_E_FIRST = @as(i32, -2147221200);
pub const DATA_E_LAST = @as(i32, -2147221185);
pub const DATA_S_FIRST = @as(i32, 262448);
pub const DATA_S_LAST = @as(i32, 262463);
pub const VIEW_E_FIRST = @as(i32, -2147221184);
pub const VIEW_E_LAST = @as(i32, -2147221169);
pub const VIEW_S_FIRST = @as(i32, 262464);
pub const VIEW_S_LAST = @as(i32, 262479);
pub const VIEW_E_DRAW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221184));
pub const REGDB_E_FIRST = @as(i32, -2147221168);
pub const REGDB_E_LAST = @as(i32, -2147221153);
pub const REGDB_S_FIRST = @as(i32, 262480);
pub const REGDB_S_LAST = @as(i32, 262495);
pub const REGDB_E_READREGDB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221168));
pub const REGDB_E_WRITEREGDB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221167));
pub const REGDB_E_KEYMISSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221166));
pub const REGDB_E_INVALIDVALUE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221165));
pub const REGDB_E_CLASSNOTREG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221164));
pub const REGDB_E_IIDNOTREG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221163));
pub const REGDB_E_BADTHREADINGMODEL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221162));
pub const REGDB_E_PACKAGEPOLICYVIOLATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221161));
pub const CAT_E_FIRST = @as(i32, -2147221152);
pub const CAT_E_LAST = @as(i32, -2147221151);
pub const CAT_E_CATIDNOEXIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221152));
pub const CAT_E_NODESCRIPTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221151));
pub const CS_E_FIRST = @as(i32, -2147221148);
pub const CS_E_LAST = @as(i32, -2147221137);
pub const CS_E_PACKAGE_NOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221148));
pub const CS_E_NOT_DELETABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221147));
pub const CS_E_CLASS_NOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221146));
pub const CS_E_INVALID_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221145));
pub const CS_E_NO_CLASSSTORE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221144));
pub const CS_E_OBJECT_NOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221143));
pub const CS_E_OBJECT_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221142));
pub const CS_E_INVALID_PATH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221141));
pub const CS_E_NETWORK_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221140));
pub const CS_E_ADMIN_LIMIT_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221139));
pub const CS_E_SCHEMA_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221138));
pub const CS_E_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221137));
pub const CACHE_E_FIRST = @as(i32, -2147221136);
pub const CACHE_E_LAST = @as(i32, -2147221121);
pub const CACHE_S_FIRST = @as(i32, 262512);
pub const CACHE_S_LAST = @as(i32, 262527);
pub const CACHE_E_NOCACHE_UPDATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221136));
pub const OLEOBJ_E_FIRST = @as(i32, -2147221120);
pub const OLEOBJ_E_LAST = @as(i32, -2147221105);
pub const OLEOBJ_S_FIRST = @as(i32, 262528);
pub const OLEOBJ_S_LAST = @as(i32, 262543);
pub const OLEOBJ_E_NOVERBS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221120));
pub const OLEOBJ_E_INVALIDVERB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221119));
pub const CLIENTSITE_E_FIRST = @as(i32, -2147221104);
pub const CLIENTSITE_E_LAST = @as(i32, -2147221089);
pub const CLIENTSITE_S_FIRST = @as(i32, 262544);
pub const CLIENTSITE_S_LAST = @as(i32, 262559);
pub const INPLACE_E_NOTUNDOABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221088));
pub const INPLACE_E_NOTOOLSPACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221087));
pub const INPLACE_E_FIRST = @as(i32, -2147221088);
pub const INPLACE_E_LAST = @as(i32, -2147221073);
pub const INPLACE_S_FIRST = @as(i32, 262560);
pub const INPLACE_S_LAST = @as(i32, 262575);
pub const ENUM_E_FIRST = @as(i32, -2147221072);
pub const ENUM_E_LAST = @as(i32, -2147221057);
pub const ENUM_S_FIRST = @as(i32, 262576);
pub const ENUM_S_LAST = @as(i32, 262591);
pub const CONVERT10_E_FIRST = @as(i32, -2147221056);
pub const CONVERT10_E_LAST = @as(i32, -2147221041);
pub const CONVERT10_S_FIRST = @as(i32, 262592);
pub const CONVERT10_S_LAST = @as(i32, 262607);
pub const CONVERT10_E_OLESTREAM_GET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221056));
pub const CONVERT10_E_OLESTREAM_PUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221055));
pub const CONVERT10_E_OLESTREAM_FMT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221054));
pub const CONVERT10_E_OLESTREAM_BITMAP_TO_DIB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221053));
pub const CONVERT10_E_STG_FMT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221052));
pub const CONVERT10_E_STG_NO_STD_STREAM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221051));
pub const CONVERT10_E_STG_DIB_TO_BITMAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221050));
pub const CLIPBRD_E_FIRST = @as(i32, -2147221040);
pub const CLIPBRD_E_LAST = @as(i32, -2147221025);
pub const CLIPBRD_S_FIRST = @as(i32, 262608);
pub const CLIPBRD_S_LAST = @as(i32, 262623);
pub const CLIPBRD_E_CANT_OPEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221040));
pub const CLIPBRD_E_CANT_EMPTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221039));
pub const CLIPBRD_E_CANT_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221038));
pub const CLIPBRD_E_BAD_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221037));
pub const CLIPBRD_E_CANT_CLOSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221036));
pub const MK_E_FIRST = @as(i32, -2147221024);
pub const MK_E_LAST = @as(i32, -2147221009);
pub const MK_S_FIRST = @as(i32, 262624);
pub const MK_S_LAST = @as(i32, 262639);
pub const MK_E_CONNECTMANUALLY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221024));
pub const MK_E_EXCEEDEDDEADLINE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221023));
pub const MK_E_NEEDGENERIC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221022));
pub const MK_E_UNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221021));
pub const MK_E_SYNTAX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221020));
pub const MK_E_NOOBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221019));
pub const MK_E_INVALIDEXTENSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221018));
pub const MK_E_INTERMEDIATEINTERFACENOTSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221017));
pub const MK_E_NOTBINDABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221016));
pub const MK_E_NOTBOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221015));
pub const MK_E_CANTOPENFILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221014));
pub const MK_E_MUSTBOTHERUSER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221013));
pub const MK_E_NOINVERSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221012));
pub const MK_E_NOSTORAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221011));
pub const MK_E_NOPREFIX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221010));
pub const MK_E_ENUMERATION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221009));
pub const CO_E_FIRST = @as(i32, -2147221008);
pub const CO_E_LAST = @as(i32, -2147220993);
pub const CO_S_FIRST = @as(i32, 262640);
pub const CO_S_LAST = @as(i32, 262655);
pub const CO_E_ALREADYINITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221007));
pub const CO_E_CANTDETERMINECLASS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221006));
pub const CO_E_CLASSSTRING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221005));
pub const CO_E_IIDSTRING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221004));
pub const CO_E_APPNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221003));
pub const CO_E_APPSINGLEUSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221002));
pub const CO_E_ERRORINAPP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221001));
pub const CO_E_DLLNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221000));
pub const CO_E_ERRORINDLL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220999));
pub const CO_E_WRONGOSFORAPP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220998));
pub const CO_E_OBJNOTREG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220997));
pub const CO_E_OBJISREG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220996));
pub const CO_E_OBJNOTCONNECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220995));
pub const CO_E_APPDIDNTREG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220994));
pub const CO_E_RELEASED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220993));
pub const EVENT_E_FIRST = @as(i32, -2147220992);
pub const EVENT_E_LAST = @as(i32, -2147220961);
pub const EVENT_S_FIRST = @as(i32, 262656);
pub const EVENT_S_LAST = @as(i32, 262687);
pub const EVENT_S_SOME_SUBSCRIBERS_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, 262656));
pub const EVENT_E_ALL_SUBSCRIBERS_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220991));
pub const EVENT_S_NOSUBSCRIBERS = @import("zig.zig").typedConst(HRESULT, @as(i32, 262658));
pub const EVENT_E_QUERYSYNTAX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220989));
pub const EVENT_E_QUERYFIELD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220988));
pub const EVENT_E_INTERNALEXCEPTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220987));
pub const EVENT_E_INTERNALERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220986));
pub const EVENT_E_INVALID_PER_USER_SID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220985));
pub const EVENT_E_USER_EXCEPTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220984));
pub const EVENT_E_TOO_MANY_METHODS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220983));
pub const EVENT_E_MISSING_EVENTCLASS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220982));
pub const EVENT_E_NOT_ALL_REMOVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220981));
pub const EVENT_E_COMPLUS_NOT_INSTALLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220980));
pub const EVENT_E_CANT_MODIFY_OR_DELETE_UNCONFIGURED_OBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220979));
pub const EVENT_E_CANT_MODIFY_OR_DELETE_CONFIGURED_OBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220978));
pub const EVENT_E_INVALID_EVENT_CLASS_PARTITION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220977));
pub const EVENT_E_PER_USER_SID_NOT_LOGGED_ON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220976));
pub const TPC_E_INVALID_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220927));
pub const TPC_E_NO_DEFAULT_TABLET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220974));
pub const TPC_E_UNKNOWN_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220965));
pub const TPC_E_INVALID_INPUT_RECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220967));
pub const TPC_E_INVALID_STROKE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220958));
pub const TPC_E_INITIALIZE_FAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220957));
pub const TPC_E_NOT_RELEVANT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220942));
pub const TPC_E_INVALID_PACKET_DESCRIPTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220941));
pub const TPC_E_RECOGNIZER_NOT_REGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220939));
pub const TPC_E_INVALID_RIGHTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220938));
pub const TPC_E_OUT_OF_ORDER_CALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220937));
pub const TPC_E_QUEUE_FULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220936));
pub const TPC_E_INVALID_CONFIGURATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220935));
pub const TPC_E_INVALID_DATA_FROM_RECOGNIZER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220934));
pub const TPC_S_TRUNCATED = @import("zig.zig").typedConst(HRESULT, @as(i32, 262738));
pub const TPC_S_INTERRUPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, 262739));
pub const TPC_S_NO_DATA_TO_PROCESS = @import("zig.zig").typedConst(HRESULT, @as(i32, 262740));
pub const XACT_E_FIRST = @as(u32, 2147799040);
pub const XACT_E_LAST = @as(u32, 2147799083);
pub const XACT_S_FIRST = @as(u32, 315392);
pub const XACT_S_LAST = @as(u32, 315408);
pub const XACT_E_ALREADYOTHERSINGLEPHASE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168256));
pub const XACT_E_CANTRETAIN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168255));
pub const XACT_E_COMMITFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168254));
pub const XACT_E_COMMITPREVENTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168253));
pub const XACT_E_HEURISTICABORT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168252));
pub const XACT_E_HEURISTICCOMMIT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168251));
pub const XACT_E_HEURISTICDAMAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168250));
pub const XACT_E_HEURISTICDANGER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168249));
pub const XACT_E_ISOLATIONLEVEL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168248));
pub const XACT_E_NOASYNC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168247));
pub const XACT_E_NOENLIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168246));
pub const XACT_E_NOISORETAIN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168245));
pub const XACT_E_NORESOURCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168244));
pub const XACT_E_NOTCURRENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168243));
pub const XACT_E_NOTRANSACTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168242));
pub const XACT_E_NOTSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168241));
pub const XACT_E_UNKNOWNRMGRID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168240));
pub const XACT_E_WRONGSTATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168239));
pub const XACT_E_WRONGUOW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168238));
pub const XACT_E_XTIONEXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168237));
pub const XACT_E_NOIMPORTOBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168236));
pub const XACT_E_INVALIDCOOKIE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168235));
pub const XACT_E_INDOUBT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168234));
pub const XACT_E_NOTIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168233));
pub const XACT_E_ALREADYINPROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168232));
pub const XACT_E_ABORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168231));
pub const XACT_E_LOGFULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168230));
pub const XACT_E_TMNOTAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168229));
pub const XACT_E_CONNECTION_DOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168228));
pub const XACT_E_CONNECTION_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168227));
pub const XACT_E_REENLISTTIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168226));
pub const XACT_E_TIP_CONNECT_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168225));
pub const XACT_E_TIP_PROTOCOL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168224));
pub const XACT_E_TIP_PULL_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168223));
pub const XACT_E_DEST_TMNOTAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168222));
pub const XACT_E_TIP_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168221));
pub const XACT_E_NETWORK_TX_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168220));
pub const XACT_E_PARTNER_NETWORK_TX_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168219));
pub const XACT_E_XA_TX_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168218));
pub const XACT_E_UNABLE_TO_READ_DTC_CONFIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168217));
pub const XACT_E_UNABLE_TO_LOAD_DTC_PROXY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168216));
pub const XACT_E_ABORTING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168215));
pub const XACT_E_PUSH_COMM_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168214));
pub const XACT_E_PULL_COMM_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168213));
pub const XACT_E_LU_TX_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168212));
pub const XACT_E_CLERKNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168128));
pub const XACT_E_CLERKEXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168127));
pub const XACT_E_RECOVERYINPROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168126));
pub const XACT_E_TRANSACTIONCLOSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168125));
pub const XACT_E_INVALIDLSN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168124));
pub const XACT_E_REPLAYREQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168123));
pub const XACT_S_ASYNC = @import("zig.zig").typedConst(HRESULT, @as(i32, 315392));
pub const XACT_S_DEFECT = @import("zig.zig").typedConst(HRESULT, @as(i32, 315393));
pub const XACT_S_READONLY = @import("zig.zig").typedConst(HRESULT, @as(i32, 315394));
pub const XACT_S_SOMENORETAIN = @import("zig.zig").typedConst(HRESULT, @as(i32, 315395));
pub const XACT_S_OKINFORM = @import("zig.zig").typedConst(HRESULT, @as(i32, 315396));
pub const XACT_S_MADECHANGESCONTENT = @import("zig.zig").typedConst(HRESULT, @as(i32, 315397));
pub const XACT_S_MADECHANGESINFORM = @import("zig.zig").typedConst(HRESULT, @as(i32, 315398));
pub const XACT_S_ALLNORETAIN = @import("zig.zig").typedConst(HRESULT, @as(i32, 315399));
pub const XACT_S_ABORTING = @import("zig.zig").typedConst(HRESULT, @as(i32, 315400));
pub const XACT_S_SINGLEPHASE = @import("zig.zig").typedConst(HRESULT, @as(i32, 315401));
pub const XACT_S_LOCALLY_OK = @import("zig.zig").typedConst(HRESULT, @as(i32, 315402));
pub const XACT_S_LASTRESOURCEMANAGER = @import("zig.zig").typedConst(HRESULT, @as(i32, 315408));
pub const CONTEXT_E_FIRST = @as(i32, -2147164160);
pub const CONTEXT_E_LAST = @as(i32, -2147164113);
pub const CONTEXT_S_FIRST = @as(i32, 319488);
pub const CONTEXT_S_LAST = @as(i32, 319535);
pub const CONTEXT_E_ABORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164158));
pub const CONTEXT_E_ABORTING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164157));
pub const CONTEXT_E_NOCONTEXT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164156));
pub const CONTEXT_E_WOULD_DEADLOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164155));
pub const CONTEXT_E_SYNCH_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164154));
pub const CONTEXT_E_OLDREF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164153));
pub const CONTEXT_E_ROLENOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164148));
pub const CONTEXT_E_TMNOTAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164145));
pub const CO_E_ACTIVATIONFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164127));
pub const CO_E_ACTIVATIONFAILED_EVENTLOGGED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164126));
pub const CO_E_ACTIVATIONFAILED_CATALOGERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164125));
pub const CO_E_ACTIVATIONFAILED_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164124));
pub const CO_E_INITIALIZATIONFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164123));
pub const CONTEXT_E_NOJIT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164122));
pub const CONTEXT_E_NOTRANSACTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164121));
pub const CO_E_THREADINGMODEL_CHANGED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164120));
pub const CO_E_NOIISINTRINSICS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164119));
pub const CO_E_NOCOOKIES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164118));
pub const CO_E_DBERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164117));
pub const CO_E_NOTPOOLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164116));
pub const CO_E_NOTCONSTRUCTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164115));
pub const CO_E_NOSYNCHRONIZATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164114));
pub const CO_E_ISOLEVELMISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164113));
pub const CO_E_CALL_OUT_OF_TX_SCOPE_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164112));
pub const CO_E_EXIT_TRANSACTION_SCOPE_NOT_CALLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164111));
pub const OLE_S_USEREG = @import("zig.zig").typedConst(HRESULT, @as(i32, 262144));
pub const OLE_S_STATIC = @import("zig.zig").typedConst(HRESULT, @as(i32, 262145));
pub const OLE_S_MAC_CLIPFORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, 262146));
pub const DRAGDROP_S_DROP = @import("zig.zig").typedConst(HRESULT, @as(i32, 262400));
pub const DRAGDROP_S_CANCEL = @import("zig.zig").typedConst(HRESULT, @as(i32, 262401));
pub const DRAGDROP_S_USEDEFAULTCURSORS = @import("zig.zig").typedConst(HRESULT, @as(i32, 262402));
pub const DATA_S_SAMEFORMATETC = @import("zig.zig").typedConst(HRESULT, @as(i32, 262448));
pub const VIEW_S_ALREADY_FROZEN = @import("zig.zig").typedConst(HRESULT, @as(i32, 262464));
pub const CACHE_S_FORMATETC_NOTSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, 262512));
pub const CACHE_S_SAMECACHE = @import("zig.zig").typedConst(HRESULT, @as(i32, 262513));
pub const CACHE_S_SOMECACHES_NOTUPDATED = @import("zig.zig").typedConst(HRESULT, @as(i32, 262514));
pub const OLEOBJ_S_INVALIDVERB = @import("zig.zig").typedConst(HRESULT, @as(i32, 262528));
pub const OLEOBJ_S_CANNOT_DOVERB_NOW = @import("zig.zig").typedConst(HRESULT, @as(i32, 262529));
pub const OLEOBJ_S_INVALIDHWND = @import("zig.zig").typedConst(HRESULT, @as(i32, 262530));
pub const INPLACE_S_TRUNCATED = @import("zig.zig").typedConst(HRESULT, @as(i32, 262560));
pub const CONVERT10_S_NO_PRESENTATION = @import("zig.zig").typedConst(HRESULT, @as(i32, 262592));
pub const MK_S_REDUCED_TO_SELF = @import("zig.zig").typedConst(HRESULT, @as(i32, 262626));
pub const MK_S_ME = @import("zig.zig").typedConst(HRESULT, @as(i32, 262628));
pub const MK_S_HIM = @import("zig.zig").typedConst(HRESULT, @as(i32, 262629));
pub const MK_S_US = @import("zig.zig").typedConst(HRESULT, @as(i32, 262630));
pub const MK_S_MONIKERALREADYREGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, 262631));
pub const SCHED_S_TASK_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, 267008));
pub const SCHED_S_TASK_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, 267009));
pub const SCHED_S_TASK_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, 267010));
pub const SCHED_S_TASK_HAS_NOT_RUN = @import("zig.zig").typedConst(HRESULT, @as(i32, 267011));
pub const SCHED_S_TASK_NO_MORE_RUNS = @import("zig.zig").typedConst(HRESULT, @as(i32, 267012));
pub const SCHED_S_TASK_NOT_SCHEDULED = @import("zig.zig").typedConst(HRESULT, @as(i32, 267013));
pub const SCHED_S_TASK_TERMINATED = @import("zig.zig").typedConst(HRESULT, @as(i32, 267014));
pub const SCHED_S_TASK_NO_VALID_TRIGGERS = @import("zig.zig").typedConst(HRESULT, @as(i32, 267015));
pub const SCHED_S_EVENT_TRIGGER = @import("zig.zig").typedConst(HRESULT, @as(i32, 267016));
pub const SCHED_E_TRIGGER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216631));
pub const SCHED_E_TASK_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216630));
pub const SCHED_E_TASK_NOT_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216629));
pub const SCHED_E_SERVICE_NOT_INSTALLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216628));
pub const SCHED_E_CANNOT_OPEN_TASK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216627));
pub const SCHED_E_INVALID_TASK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216626));
pub const SCHED_E_ACCOUNT_INFORMATION_NOT_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216625));
pub const SCHED_E_ACCOUNT_NAME_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216624));
pub const SCHED_E_ACCOUNT_DBASE_CORRUPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216623));
pub const SCHED_E_NO_SECURITY_SERVICES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216622));
pub const SCHED_E_UNKNOWN_OBJECT_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216621));
pub const SCHED_E_UNSUPPORTED_ACCOUNT_OPTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216620));
pub const SCHED_E_SERVICE_NOT_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216619));
pub const SCHED_E_UNEXPECTEDNODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216618));
pub const SCHED_E_NAMESPACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216617));
pub const SCHED_E_INVALIDVALUE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216616));
pub const SCHED_E_MISSINGNODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216615));
pub const SCHED_E_MALFORMEDXML = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216614));
pub const SCHED_S_SOME_TRIGGERS_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, 267035));
pub const SCHED_S_BATCH_LOGON_PROBLEM = @import("zig.zig").typedConst(HRESULT, @as(i32, 267036));
pub const SCHED_E_TOO_MANY_NODES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216611));
pub const SCHED_E_PAST_END_BOUNDARY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216610));
pub const SCHED_E_ALREADY_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216609));
pub const SCHED_E_USER_NOT_LOGGED_ON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216608));
pub const SCHED_E_INVALID_TASK_HASH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216607));
pub const SCHED_E_SERVICE_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216606));
pub const SCHED_E_SERVICE_TOO_BUSY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216605));
pub const SCHED_E_TASK_ATTEMPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216604));
pub const SCHED_S_TASK_QUEUED = @import("zig.zig").typedConst(HRESULT, @as(i32, 267045));
pub const SCHED_E_TASK_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216602));
pub const SCHED_E_TASK_NOT_V1_COMPAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216601));
pub const SCHED_E_START_ON_DEMAND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216600));
pub const SCHED_E_TASK_NOT_UBPM_COMPAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216599));
pub const SCHED_E_DEPRECATED_FEATURE_USED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216592));
pub const CO_E_CLASS_CREATE_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959359));
pub const CO_E_SCM_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959358));
pub const CO_E_SCM_RPC_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959357));
pub const CO_E_BAD_PATH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959356));
pub const CO_E_SERVER_EXEC_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959355));
pub const CO_E_OBJSRV_RPC_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959354));
pub const MK_E_NO_NORMALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959353));
pub const CO_E_SERVER_STOPPING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959352));
pub const MEM_E_INVALID_ROOT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959351));
pub const MEM_E_INVALID_LINK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959344));
pub const MEM_E_INVALID_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959343));
pub const CO_S_NOTALLINTERFACES = @import("zig.zig").typedConst(HRESULT, @as(i32, 524306));
pub const CO_S_MACHINENAMENOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, 524307));
pub const CO_E_MISSING_DISPLAYNAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959339));
pub const CO_E_RUNAS_VALUE_MUST_BE_AAA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959338));
pub const CO_E_ELEVATION_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959337));
pub const APPX_E_PACKAGING_INTERNAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958848));
pub const APPX_E_INTERLEAVING_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958847));
pub const APPX_E_RELATIONSHIPS_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958846));
pub const APPX_E_MISSING_REQUIRED_FILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958845));
pub const APPX_E_INVALID_MANIFEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958844));
pub const APPX_E_INVALID_BLOCKMAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958843));
pub const APPX_E_CORRUPT_CONTENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958842));
pub const APPX_E_BLOCK_HASH_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958841));
pub const APPX_E_REQUESTED_RANGE_TOO_LARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958840));
pub const APPX_E_INVALID_SIP_CLIENT_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958839));
pub const APPX_E_INVALID_KEY_INFO = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958838));
pub const APPX_E_INVALID_CONTENTGROUPMAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958837));
pub const APPX_E_INVALID_APPINSTALLER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958836));
pub const APPX_E_DELTA_BASELINE_VERSION_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958835));
pub const APPX_E_DELTA_PACKAGE_MISSING_FILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958834));
pub const APPX_E_INVALID_DELTA_PACKAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958833));
pub const APPX_E_DELTA_APPENDED_PACKAGE_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958832));
pub const APPX_E_INVALID_PACKAGING_LAYOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958831));
pub const APPX_E_INVALID_PACKAGESIGNCONFIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958830));
pub const APPX_E_RESOURCESPRI_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958829));
pub const APPX_E_FILE_COMPRESSION_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958828));
pub const APPX_E_INVALID_PAYLOAD_PACKAGE_EXTENSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958827));
pub const APPX_E_INVALID_ENCRYPTION_EXCLUSION_FILE_LIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958826));
pub const APPX_E_INVALID_PACKAGE_FOLDER_ACLS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958825));
pub const APPX_E_INVALID_PUBLISHER_BRIDGING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958824));
pub const BT_E_SPURIOUS_ACTIVATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958592));
pub const DISP_E_UNKNOWNINTERFACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352575));
pub const DISP_E_MEMBERNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352573));
pub const DISP_E_PARAMNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352572));
pub const DISP_E_TYPEMISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352571));
pub const DISP_E_UNKNOWNNAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352570));
pub const DISP_E_NONAMEDARGS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352569));
pub const DISP_E_BADVARTYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352568));
pub const DISP_E_EXCEPTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352567));
pub const DISP_E_OVERFLOW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352566));
pub const DISP_E_BADINDEX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352565));
pub const DISP_E_UNKNOWNLCID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352564));
pub const DISP_E_ARRAYISLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352563));
pub const DISP_E_BADPARAMCOUNT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352562));
pub const DISP_E_PARAMNOTOPTIONAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352561));
pub const DISP_E_BADCALLEE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352560));
pub const DISP_E_NOTACOLLECTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352559));
pub const DISP_E_DIVBYZERO = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352558));
pub const DISP_E_BUFFERTOOSMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352557));
pub const TYPE_E_BUFFERTOOSMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319786));
pub const TYPE_E_FIELDNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319785));
pub const TYPE_E_INVDATAREAD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319784));
pub const TYPE_E_UNSUPFORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319783));
pub const TYPE_E_REGISTRYACCESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319780));
pub const TYPE_E_LIBNOTREGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319779));
pub const TYPE_E_UNDEFINEDTYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319769));
pub const TYPE_E_QUALIFIEDNAMEDISALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319768));
pub const TYPE_E_INVALIDSTATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319767));
pub const TYPE_E_WRONGTYPEKIND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319766));
pub const TYPE_E_ELEMENTNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319765));
pub const TYPE_E_AMBIGUOUSNAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319764));
pub const TYPE_E_NAMECONFLICT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319763));
pub const TYPE_E_UNKNOWNLCID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319762));
pub const TYPE_E_DLLFUNCTIONNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319761));
pub const TYPE_E_BADMODULEKIND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147317571));
pub const TYPE_E_SIZETOOBIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147317563));
pub const TYPE_E_DUPLICATEID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147317562));
pub const TYPE_E_INVALIDID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147317553));
pub const TYPE_E_TYPEMISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147316576));
pub const TYPE_E_OUTOFBOUNDS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147316575));
pub const TYPE_E_IOERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147316574));
pub const TYPE_E_CANTCREATETMPFILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147316573));
pub const TYPE_E_CANTLOADLIBRARY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147312566));
pub const TYPE_E_INCONSISTENTPROPFUNCS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147312509));
pub const TYPE_E_CIRCULARTYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147312508));
pub const STG_E_INVALIDFUNCTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287039));
pub const STG_E_FILENOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287038));
pub const STG_E_PATHNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287037));
pub const STG_E_TOOMANYOPENFILES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287036));
pub const STG_E_ACCESSDENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287035));
pub const STG_E_INVALIDHANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287034));
pub const STG_E_INSUFFICIENTMEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287032));
pub const STG_E_INVALIDPOINTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287031));
pub const STG_E_NOMOREFILES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287022));
pub const STG_E_DISKISWRITEPROTECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287021));
pub const STG_E_SEEKERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287015));
pub const STG_E_WRITEFAULT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287011));
pub const STG_E_READFAULT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287010));
pub const STG_E_SHAREVIOLATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287008));
pub const STG_E_LOCKVIOLATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287007));
pub const STG_E_FILEALREADYEXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286960));
pub const STG_E_INVALIDPARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286953));
pub const STG_E_MEDIUMFULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286928));
pub const STG_E_PROPSETMISMATCHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286800));
pub const STG_E_ABNORMALAPIEXIT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286790));
pub const STG_E_INVALIDHEADER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286789));
pub const STG_E_INVALIDNAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286788));
pub const STG_E_UNKNOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286787));
pub const STG_E_UNIMPLEMENTEDFUNCTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286786));
pub const STG_E_INVALIDFLAG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286785));
pub const STG_E_INUSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286784));
pub const STG_E_NOTCURRENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286783));
pub const STG_E_REVERTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286782));
pub const STG_E_CANTSAVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286781));
pub const STG_E_OLDFORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286780));
pub const STG_E_OLDDLL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286779));
pub const STG_E_SHAREREQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286778));
pub const STG_E_NOTFILEBASEDSTORAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286777));
pub const STG_E_EXTANTMARSHALLINGS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286776));
pub const STG_E_DOCFILECORRUPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286775));
pub const STG_E_BADBASEADDRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286768));
pub const STG_E_DOCFILETOOLARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286767));
pub const STG_E_NOTSIMPLEFORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286766));
pub const STG_E_INCOMPLETE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286527));
pub const STG_E_TERMINATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286526));
pub const STG_S_CONVERTED = @import("zig.zig").typedConst(HRESULT, @as(i32, 197120));
pub const STG_S_BLOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, 197121));
pub const STG_S_RETRYNOW = @import("zig.zig").typedConst(HRESULT, @as(i32, 197122));
pub const STG_S_MONITORING = @import("zig.zig").typedConst(HRESULT, @as(i32, 197123));
pub const STG_S_MULTIPLEOPENS = @import("zig.zig").typedConst(HRESULT, @as(i32, 197124));
pub const STG_S_CONSOLIDATIONFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, 197125));
pub const STG_S_CANNOTCONSOLIDATE = @import("zig.zig").typedConst(HRESULT, @as(i32, 197126));
pub const STG_S_POWER_CYCLE_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, 197127));
pub const STG_E_FIRMWARE_SLOT_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286520));
pub const STG_E_FIRMWARE_IMAGE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286519));
pub const STG_E_DEVICE_UNRESPONSIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286518));
pub const STG_E_STATUS_COPY_PROTECTION_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286267));
pub const STG_E_CSS_AUTHENTICATION_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286266));
pub const STG_E_CSS_KEY_NOT_PRESENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286265));
pub const STG_E_CSS_KEY_NOT_ESTABLISHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286264));
pub const STG_E_CSS_SCRAMBLED_SECTOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286263));
pub const STG_E_CSS_REGION_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286262));
pub const STG_E_RESETS_EXHAUSTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286261));
pub const RPC_E_CALL_REJECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418111));
pub const RPC_E_CALL_CANCELED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418110));
pub const RPC_E_CANTPOST_INSENDCALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418109));
pub const RPC_E_CANTCALLOUT_INASYNCCALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418108));
pub const RPC_E_CANTCALLOUT_INEXTERNALCALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418107));
pub const RPC_E_CONNECTION_TERMINATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418106));
pub const RPC_E_SERVER_DIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418105));
pub const RPC_E_CLIENT_DIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418104));
pub const RPC_E_INVALID_DATAPACKET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418103));
pub const RPC_E_CANTTRANSMIT_CALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418102));
pub const RPC_E_CLIENT_CANTMARSHAL_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418101));
pub const RPC_E_CLIENT_CANTUNMARSHAL_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418100));
pub const RPC_E_SERVER_CANTMARSHAL_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418099));
pub const RPC_E_SERVER_CANTUNMARSHAL_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418098));
pub const RPC_E_INVALID_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418097));
pub const RPC_E_INVALID_PARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418096));
pub const RPC_E_CANTCALLOUT_AGAIN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418095));
pub const RPC_E_SERVER_DIED_DNE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418094));
pub const RPC_E_SYS_CALL_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417856));
pub const RPC_E_OUT_OF_RESOURCES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417855));
pub const RPC_E_ATTEMPTED_MULTITHREAD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417854));
pub const RPC_E_NOT_REGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417853));
pub const RPC_E_FAULT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417852));
pub const RPC_E_SERVERFAULT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417851));
pub const RPC_E_CHANGED_MODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417850));
pub const RPC_E_INVALIDMETHOD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417849));
pub const RPC_E_DISCONNECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417848));
pub const RPC_E_RETRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417847));
pub const RPC_E_SERVERCALL_RETRYLATER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417846));
pub const RPC_E_SERVERCALL_REJECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417845));
pub const RPC_E_INVALID_CALLDATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417844));
pub const RPC_E_CANTCALLOUT_ININPUTSYNCCALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417843));
pub const RPC_E_WRONG_THREAD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417842));
pub const RPC_E_THREAD_NOT_INIT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417841));
pub const RPC_E_VERSION_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417840));
pub const RPC_E_INVALID_HEADER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417839));
pub const RPC_E_INVALID_EXTENSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417838));
pub const RPC_E_INVALID_IPID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417837));
pub const RPC_E_INVALID_OBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417836));
pub const RPC_S_CALLPENDING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417835));
pub const RPC_S_WAITONTIMER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417834));
pub const RPC_E_CALL_COMPLETE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417833));
pub const RPC_E_UNSECURE_CALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417832));
pub const RPC_E_TOO_LATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417831));
pub const RPC_E_NO_GOOD_SECURITY_PACKAGES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417830));
pub const RPC_E_ACCESS_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417829));
pub const RPC_E_REMOTE_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417828));
pub const RPC_E_INVALID_OBJREF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417827));
pub const RPC_E_NO_CONTEXT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417826));
pub const RPC_E_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417825));
pub const RPC_E_NO_SYNC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417824));
pub const RPC_E_FULLSIC_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417823));
pub const RPC_E_INVALID_STD_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417822));
pub const CO_E_FAILEDTOIMPERSONATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417821));
pub const CO_E_FAILEDTOGETSECCTX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417820));
pub const CO_E_FAILEDTOOPENTHREADTOKEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417819));
pub const CO_E_FAILEDTOGETTOKENINFO = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417818));
pub const CO_E_TRUSTEEDOESNTMATCHCLIENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417817));
pub const CO_E_FAILEDTOQUERYCLIENTBLANKET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417816));
pub const CO_E_FAILEDTOSETDACL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417815));
pub const CO_E_ACCESSCHECKFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417814));
pub const CO_E_NETACCESSAPIFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417813));
pub const CO_E_WRONGTRUSTEENAMESYNTAX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417812));
pub const CO_E_INVALIDSID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417811));
pub const CO_E_CONVERSIONFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417810));
pub const CO_E_NOMATCHINGSIDFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417809));
pub const CO_E_LOOKUPACCSIDFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417808));
pub const CO_E_NOMATCHINGNAMEFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417807));
pub const CO_E_LOOKUPACCNAMEFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417806));
pub const CO_E_SETSERLHNDLFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417805));
pub const CO_E_FAILEDTOGETWINDIR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417804));
pub const CO_E_PATHTOOLONG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417803));
pub const CO_E_FAILEDTOGENUUID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417802));
pub const CO_E_FAILEDTOCREATEFILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417801));
pub const CO_E_FAILEDTOCLOSEHANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417800));
pub const CO_E_EXCEEDSYSACLLIMIT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417799));
pub const CO_E_ACESINWRONGORDER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417798));
pub const CO_E_INCOMPATIBLESTREAMVERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417797));
pub const CO_E_FAILEDTOOPENPROCESSTOKEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417796));
pub const CO_E_DECODEFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417795));
pub const CO_E_ACNOTINITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417793));
pub const CO_E_CANCEL_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417792));
pub const RPC_E_UNEXPECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352577));
pub const ERROR_AUDITING_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1073151999));
pub const ERROR_ALL_SIDS_FILTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1073151998));
pub const ERROR_BIZRULES_NOT_ENABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1073151997));
pub const NTE_BAD_UID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893823));
pub const NTE_BAD_HASH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893822));
pub const NTE_BAD_KEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893821));
pub const NTE_BAD_LEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893820));
pub const NTE_BAD_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893819));
pub const NTE_BAD_SIGNATURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893818));
pub const NTE_BAD_VER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893817));
pub const NTE_BAD_ALGID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893816));
pub const NTE_BAD_FLAGS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893815));
pub const NTE_BAD_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893814));
pub const NTE_BAD_KEY_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893813));
pub const NTE_BAD_HASH_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893812));
pub const NTE_NO_KEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893811));
pub const NTE_NO_MEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893810));
pub const NTE_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893809));
pub const NTE_PERM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893808));
pub const NTE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893807));
pub const NTE_DOUBLE_ENCRYPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893806));
pub const NTE_BAD_PROVIDER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893805));
pub const NTE_BAD_PROV_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893804));
pub const NTE_BAD_PUBLIC_KEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893803));
pub const NTE_BAD_KEYSET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893802));
pub const NTE_PROV_TYPE_NOT_DEF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893801));
pub const NTE_PROV_TYPE_ENTRY_BAD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893800));
pub const NTE_KEYSET_NOT_DEF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893799));
pub const NTE_KEYSET_ENTRY_BAD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893798));
pub const NTE_PROV_TYPE_NO_MATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893797));
pub const NTE_SIGNATURE_FILE_BAD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893796));
pub const NTE_PROVIDER_DLL_FAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893795));
pub const NTE_PROV_DLL_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893794));
pub const NTE_BAD_KEYSET_PARAM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893793));
pub const NTE_FAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893792));
pub const NTE_SYS_ERR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893791));
pub const NTE_SILENT_CONTEXT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893790));
pub const NTE_TOKEN_KEYSET_STORAGE_FULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893789));
pub const NTE_TEMPORARY_PROFILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893788));
pub const NTE_FIXEDPARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893787));
pub const NTE_INVALID_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893786));
pub const NTE_INVALID_PARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893785));
pub const NTE_BUFFER_TOO_SMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893784));
pub const NTE_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893783));
pub const NTE_NO_MORE_ITEMS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893782));
pub const NTE_BUFFERS_OVERLAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893781));
pub const NTE_DECRYPTION_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893780));
pub const NTE_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893779));
pub const NTE_UI_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893778));
pub const NTE_HMAC_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893777));
pub const NTE_DEVICE_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893776));
pub const NTE_AUTHENTICATION_IGNORED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893775));
pub const NTE_VALIDATION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893774));
pub const NTE_INCORRECT_PASSWORD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893773));
pub const NTE_ENCRYPTION_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893772));
pub const NTE_DEVICE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893771));
pub const NTE_USER_CANCELLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893770));
pub const NTE_PASSWORD_CHANGE_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893769));
pub const NTE_NOT_ACTIVE_CONSOLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893768));
pub const SEC_E_INSUFFICIENT_MEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893056));
pub const SEC_E_INVALID_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893055));
pub const SEC_E_UNSUPPORTED_FUNCTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893054));
pub const SEC_E_TARGET_UNKNOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893053));
pub const SEC_E_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893052));
pub const SEC_E_SECPKG_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893051));
pub const SEC_E_NOT_OWNER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893050));
pub const SEC_E_CANNOT_INSTALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893049));
pub const SEC_E_INVALID_TOKEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893048));
pub const SEC_E_CANNOT_PACK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893047));
pub const SEC_E_QOP_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893046));
pub const SEC_E_NO_IMPERSONATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893045));
pub const SEC_E_LOGON_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893044));
pub const SEC_E_UNKNOWN_CREDENTIALS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893043));
pub const SEC_E_NO_CREDENTIALS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893042));
pub const SEC_E_MESSAGE_ALTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893041));
pub const SEC_E_OUT_OF_SEQUENCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893040));
pub const SEC_E_NO_AUTHENTICATING_AUTHORITY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893039));
pub const SEC_I_CONTINUE_NEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, 590610));
pub const SEC_I_COMPLETE_NEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, 590611));
pub const SEC_I_COMPLETE_AND_CONTINUE = @import("zig.zig").typedConst(HRESULT, @as(i32, 590612));
pub const SEC_I_LOCAL_LOGON = @import("zig.zig").typedConst(HRESULT, @as(i32, 590613));
pub const SEC_I_GENERIC_EXTENSION_RECEIVED = @import("zig.zig").typedConst(HRESULT, @as(i32, 590614));
pub const SEC_E_BAD_PKGID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893034));
pub const SEC_E_CONTEXT_EXPIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893033));
pub const SEC_I_CONTEXT_EXPIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, 590615));
pub const SEC_E_INCOMPLETE_MESSAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893032));
pub const SEC_E_INCOMPLETE_CREDENTIALS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893024));
pub const SEC_E_BUFFER_TOO_SMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893023));
pub const SEC_I_INCOMPLETE_CREDENTIALS = @import("zig.zig").typedConst(HRESULT, @as(i32, 590624));
pub const SEC_I_RENEGOTIATE = @import("zig.zig").typedConst(HRESULT, @as(i32, 590625));
pub const SEC_E_WRONG_PRINCIPAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893022));
pub const SEC_I_NO_LSA_CONTEXT = @import("zig.zig").typedConst(HRESULT, @as(i32, 590627));
pub const SEC_E_TIME_SKEW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893020));
pub const SEC_E_UNTRUSTED_ROOT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893019));
pub const SEC_E_ILLEGAL_MESSAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893018));
pub const SEC_E_CERT_UNKNOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893017));
pub const SEC_E_CERT_EXPIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893016));
pub const SEC_E_ENCRYPT_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893015));
pub const SEC_E_DECRYPT_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893008));
pub const SEC_E_ALGORITHM_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893007));
pub const SEC_E_SECURITY_QOS_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893006));
pub const SEC_E_UNFINISHED_CONTEXT_DELETED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893005));
pub const SEC_E_NO_TGT_REPLY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893004));
pub const SEC_E_NO_IP_ADDRESSES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893003));
pub const SEC_E_WRONG_CREDENTIAL_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893002));
pub const SEC_E_CRYPTO_SYSTEM_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893001));
pub const SEC_E_MAX_REFERRALS_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893000));
pub const SEC_E_MUST_BE_KDC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892999));
pub const SEC_E_STRONG_CRYPTO_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892998));
pub const SEC_E_TOO_MANY_PRINCIPALS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892997));
pub const SEC_E_NO_PA_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892996));
pub const SEC_E_PKINIT_NAME_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892995));
pub const SEC_E_SMARTCARD_LOGON_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892994));
pub const SEC_E_SHUTDOWN_IN_PROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892993));
pub const SEC_E_KDC_INVALID_REQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892992));
pub const SEC_E_KDC_UNABLE_TO_REFER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892991));
pub const SEC_E_KDC_UNKNOWN_ETYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892990));
pub const SEC_E_UNSUPPORTED_PREAUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892989));
pub const SEC_E_DELEGATION_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892987));
pub const SEC_E_BAD_BINDINGS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892986));
pub const SEC_E_MULTIPLE_ACCOUNTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892985));
pub const SEC_E_NO_KERB_KEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892984));
pub const SEC_E_CERT_WRONG_USAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892983));
pub const SEC_E_DOWNGRADE_DETECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892976));
pub const SEC_E_SMARTCARD_CERT_REVOKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892975));
pub const SEC_E_ISSUING_CA_UNTRUSTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892974));
pub const SEC_E_REVOCATION_OFFLINE_C = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892973));
pub const SEC_E_PKINIT_CLIENT_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892972));
pub const SEC_E_SMARTCARD_CERT_EXPIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892971));
pub const SEC_E_NO_S4U_PROT_SUPPORT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892970));
pub const SEC_E_CROSSREALM_DELEGATION_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892969));
pub const SEC_E_REVOCATION_OFFLINE_KDC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892968));
pub const SEC_E_ISSUING_CA_UNTRUSTED_KDC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892967));
pub const SEC_E_KDC_CERT_EXPIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892966));
pub const SEC_E_KDC_CERT_REVOKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892965));
pub const SEC_I_SIGNATURE_NEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, 590684));
pub const SEC_E_INVALID_PARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892963));
pub const SEC_E_DELEGATION_POLICY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892962));
pub const SEC_E_POLICY_NLTM_ONLY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892961));
pub const SEC_I_NO_RENEGOTIATION = @import("zig.zig").typedConst(HRESULT, @as(i32, 590688));
pub const SEC_E_NO_CONTEXT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892959));
pub const SEC_E_PKU2U_CERT_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892958));
pub const SEC_E_MUTUAL_AUTH_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892957));
pub const SEC_I_MESSAGE_FRAGMENT = @import("zig.zig").typedConst(HRESULT, @as(i32, 590692));
pub const SEC_E_ONLY_HTTPS_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892955));
pub const SEC_I_CONTINUE_NEEDED_MESSAGE_OK = @import("zig.zig").typedConst(HRESULT, @as(i32, 590694));
pub const SEC_E_APPLICATION_PROTOCOL_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892953));
pub const SEC_I_ASYNC_CALL_PENDING = @import("zig.zig").typedConst(HRESULT, @as(i32, 590696));
pub const SEC_E_INVALID_UPN_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892951));
pub const SEC_E_EXT_BUFFER_TOO_SMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892950));
pub const SEC_E_INSUFFICIENT_BUFFERS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892949));
pub const SEC_E_NO_SPM = @as(i32, -2146893052);
pub const SEC_E_NOT_SUPPORTED = @as(i32, -2146893054);
pub const CRYPT_E_MSG_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889727));
pub const CRYPT_E_UNKNOWN_ALGO = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889726));
pub const CRYPT_E_OID_FORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889725));
pub const CRYPT_E_INVALID_MSG_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889724));
pub const CRYPT_E_UNEXPECTED_ENCODING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889723));
pub const CRYPT_E_AUTH_ATTR_MISSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889722));
pub const CRYPT_E_HASH_VALUE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889721));
pub const CRYPT_E_INVALID_INDEX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889720));
pub const CRYPT_E_ALREADY_DECRYPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889719));
pub const CRYPT_E_NOT_DECRYPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889718));
pub const CRYPT_E_RECIPIENT_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889717));
pub const CRYPT_E_CONTROL_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889716));
pub const CRYPT_E_ISSUER_SERIALNUMBER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889715));
pub const CRYPT_E_SIGNER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889714));
pub const CRYPT_E_ATTRIBUTES_MISSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889713));
pub const CRYPT_E_STREAM_MSG_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889712));
pub const CRYPT_E_STREAM_INSUFFICIENT_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889711));
pub const CRYPT_I_NEW_PROTECTION_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, 593938));
pub const CRYPT_E_BAD_LEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885631));
pub const CRYPT_E_BAD_ENCODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885630));
pub const CRYPT_E_FILE_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885629));
pub const CRYPT_E_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885628));
pub const CRYPT_E_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885627));
pub const CRYPT_E_NO_PROVIDER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885626));
pub const CRYPT_E_SELF_SIGNED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885625));
pub const CRYPT_E_DELETED_PREV = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885624));
pub const CRYPT_E_NO_MATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885623));
pub const CRYPT_E_UNEXPECTED_MSG_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885622));
pub const CRYPT_E_NO_KEY_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885621));
pub const CRYPT_E_NO_DECRYPT_CERT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885620));
pub const CRYPT_E_BAD_MSG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885619));
pub const CRYPT_E_NO_SIGNER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885618));
pub const CRYPT_E_PENDING_CLOSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885617));
pub const CRYPT_E_REVOKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885616));
pub const CRYPT_E_NO_REVOCATION_DLL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885615));
pub const CRYPT_E_NO_REVOCATION_CHECK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885614));
pub const CRYPT_E_REVOCATION_OFFLINE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885613));
pub const CRYPT_E_NOT_IN_REVOCATION_DATABASE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885612));
pub const CRYPT_E_INVALID_NUMERIC_STRING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885600));
pub const CRYPT_E_INVALID_PRINTABLE_STRING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885599));
pub const CRYPT_E_INVALID_IA5_STRING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885598));
pub const CRYPT_E_INVALID_X500_STRING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885597));
pub const CRYPT_E_NOT_CHAR_STRING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885596));
pub const CRYPT_E_FILERESIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885595));
pub const CRYPT_E_SECURITY_SETTINGS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885594));
pub const CRYPT_E_NO_VERIFY_USAGE_DLL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885593));
pub const CRYPT_E_NO_VERIFY_USAGE_CHECK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885592));
pub const CRYPT_E_VERIFY_USAGE_OFFLINE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885591));
pub const CRYPT_E_NOT_IN_CTL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885590));
pub const CRYPT_E_NO_TRUSTED_SIGNER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885589));
pub const CRYPT_E_MISSING_PUBKEY_PARA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885588));
pub const CRYPT_E_OBJECT_LOCATOR_OBJECT_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885587));
pub const CRYPT_E_OSS_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881536));
pub const OSS_MORE_BUF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881535));
pub const OSS_NEGATIVE_UINTEGER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881534));
pub const OSS_PDU_RANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881533));
pub const OSS_MORE_INPUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881532));
pub const OSS_DATA_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881531));
pub const OSS_BAD_ARG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881530));
pub const OSS_BAD_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881529));
pub const OSS_OUT_MEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881528));
pub const OSS_PDU_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881527));
pub const OSS_LIMITED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881526));
pub const OSS_BAD_PTR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881525));
pub const OSS_BAD_TIME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881524));
pub const OSS_INDEFINITE_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881523));
pub const OSS_MEM_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881522));
pub const OSS_BAD_TABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881521));
pub const OSS_TOO_LONG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881520));
pub const OSS_CONSTRAINT_VIOLATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881519));
pub const OSS_FATAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881518));
pub const OSS_ACCESS_SERIALIZATION_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881517));
pub const OSS_NULL_TBL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881516));
pub const OSS_NULL_FCN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881515));
pub const OSS_BAD_ENCRULES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881514));
pub const OSS_UNAVAIL_ENCRULES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881513));
pub const OSS_CANT_OPEN_TRACE_WINDOW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881512));
pub const OSS_UNIMPLEMENTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881511));
pub const OSS_OID_DLL_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881510));
pub const OSS_CANT_OPEN_TRACE_FILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881509));
pub const OSS_TRACE_FILE_ALREADY_OPEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881508));
pub const OSS_TABLE_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881507));
pub const OSS_TYPE_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881506));
pub const OSS_REAL_DLL_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881505));
pub const OSS_REAL_CODE_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881504));
pub const OSS_OUT_OF_RANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881503));
pub const OSS_COPIER_DLL_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881502));
pub const OSS_CONSTRAINT_DLL_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881501));
pub const OSS_COMPARATOR_DLL_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881500));
pub const OSS_COMPARATOR_CODE_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881499));
pub const OSS_MEM_MGR_DLL_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881498));
pub const OSS_PDV_DLL_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881497));
pub const OSS_PDV_CODE_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881496));
pub const OSS_API_DLL_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881495));
pub const OSS_BERDER_DLL_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881494));
pub const OSS_PER_DLL_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881493));
pub const OSS_OPEN_TYPE_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881492));
pub const OSS_MUTEX_NOT_CREATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881491));
pub const OSS_CANT_CLOSE_TRACE_FILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881490));
pub const CRYPT_E_ASN1_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881280));
pub const CRYPT_E_ASN1_INTERNAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881279));
pub const CRYPT_E_ASN1_EOD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881278));
pub const CRYPT_E_ASN1_CORRUPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881277));
pub const CRYPT_E_ASN1_LARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881276));
pub const CRYPT_E_ASN1_CONSTRAINT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881275));
pub const CRYPT_E_ASN1_MEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881274));
pub const CRYPT_E_ASN1_OVERFLOW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881273));
pub const CRYPT_E_ASN1_BADPDU = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881272));
pub const CRYPT_E_ASN1_BADARGS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881271));
pub const CRYPT_E_ASN1_BADREAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881270));
pub const CRYPT_E_ASN1_BADTAG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881269));
pub const CRYPT_E_ASN1_CHOICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881268));
pub const CRYPT_E_ASN1_RULE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881267));
pub const CRYPT_E_ASN1_UTF8 = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881266));
pub const CRYPT_E_ASN1_PDU_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881229));
pub const CRYPT_E_ASN1_NYI = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881228));
pub const CRYPT_E_ASN1_EXTENDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881023));
pub const CRYPT_E_ASN1_NOEOD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881022));
pub const CERTSRV_E_BAD_REQUESTSUBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877439));
pub const CERTSRV_E_NO_REQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877438));
pub const CERTSRV_E_BAD_REQUESTSTATUS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877437));
pub const CERTSRV_E_PROPERTY_EMPTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877436));
pub const CERTSRV_E_INVALID_CA_CERTIFICATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877435));
pub const CERTSRV_E_SERVER_SUSPENDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877434));
pub const CERTSRV_E_ENCODING_LENGTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877433));
pub const CERTSRV_E_ROLECONFLICT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877432));
pub const CERTSRV_E_RESTRICTEDOFFICER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877431));
pub const CERTSRV_E_KEY_ARCHIVAL_NOT_CONFIGURED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877430));
pub const CERTSRV_E_NO_VALID_KRA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877429));
pub const CERTSRV_E_BAD_REQUEST_KEY_ARCHIVAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877428));
pub const CERTSRV_E_NO_CAADMIN_DEFINED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877427));
pub const CERTSRV_E_BAD_RENEWAL_CERT_ATTRIBUTE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877426));
pub const CERTSRV_E_NO_DB_SESSIONS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877425));
pub const CERTSRV_E_ALIGNMENT_FAULT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877424));
pub const CERTSRV_E_ENROLL_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877423));
pub const CERTSRV_E_TEMPLATE_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877422));
pub const CERTSRV_E_DOWNLEVEL_DC_SSL_OR_UPGRADE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877421));
pub const CERTSRV_E_ADMIN_DENIED_REQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877420));
pub const CERTSRV_E_NO_POLICY_SERVER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877419));
pub const CERTSRV_E_WEAK_SIGNATURE_OR_KEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877418));
pub const CERTSRV_E_KEY_ATTESTATION_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877417));
pub const CERTSRV_E_ENCRYPTION_CERT_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877416));
pub const CERTSRV_E_UNSUPPORTED_CERT_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875392));
pub const CERTSRV_E_NO_CERT_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875391));
pub const CERTSRV_E_TEMPLATE_CONFLICT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875390));
pub const CERTSRV_E_SUBJECT_ALT_NAME_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875389));
pub const CERTSRV_E_ARCHIVED_KEY_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875388));
pub const CERTSRV_E_SMIME_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875387));
pub const CERTSRV_E_BAD_RENEWAL_SUBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875386));
pub const CERTSRV_E_BAD_TEMPLATE_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875385));
pub const CERTSRV_E_TEMPLATE_POLICY_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875384));
pub const CERTSRV_E_SIGNATURE_POLICY_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875383));
pub const CERTSRV_E_SIGNATURE_COUNT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875382));
pub const CERTSRV_E_SIGNATURE_REJECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875381));
pub const CERTSRV_E_ISSUANCE_POLICY_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875380));
pub const CERTSRV_E_SUBJECT_UPN_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875379));
pub const CERTSRV_E_SUBJECT_DIRECTORY_GUID_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875378));
pub const CERTSRV_E_SUBJECT_DNS_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875377));
pub const CERTSRV_E_ARCHIVED_KEY_UNEXPECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875376));
pub const CERTSRV_E_KEY_LENGTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875375));
pub const CERTSRV_E_SUBJECT_EMAIL_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875374));
pub const CERTSRV_E_UNKNOWN_CERT_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875373));
pub const CERTSRV_E_CERT_TYPE_OVERLAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875372));
pub const CERTSRV_E_TOO_MANY_SIGNATURES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875371));
pub const CERTSRV_E_RENEWAL_BAD_PUBLIC_KEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875370));
pub const CERTSRV_E_INVALID_EK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875369));
pub const CERTSRV_E_INVALID_IDBINDING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875368));
pub const CERTSRV_E_INVALID_ATTESTATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875367));
pub const CERTSRV_E_KEY_ATTESTATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875366));
pub const CERTSRV_E_CORRUPT_KEY_ATTESTATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875365));
pub const CERTSRV_E_EXPIRED_CHALLENGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875364));
pub const CERTSRV_E_INVALID_RESPONSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875363));
pub const CERTSRV_E_INVALID_REQUESTID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875362));
pub const CERTSRV_E_REQUEST_PRECERTIFICATE_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875361));
pub const CERTSRV_E_PENDING_CLIENT_RESPONSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875360));
pub const XENROLL_E_KEY_NOT_EXPORTABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146873344));
pub const XENROLL_E_CANNOT_ADD_ROOT_CERT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146873343));
pub const XENROLL_E_RESPONSE_KA_HASH_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146873342));
pub const XENROLL_E_RESPONSE_UNEXPECTED_KA_HASH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146873341));
pub const XENROLL_E_RESPONSE_KA_HASH_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146873340));
pub const XENROLL_E_KEYSPEC_SMIME_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146873339));
pub const TRUST_E_SYSTEM_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146869247));
pub const TRUST_E_NO_SIGNER_CERT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146869246));
pub const TRUST_E_COUNTER_SIGNER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146869245));
pub const TRUST_E_CERT_SIGNATURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146869244));
pub const TRUST_E_TIME_STAMP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146869243));
pub const TRUST_E_BAD_DIGEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146869232));
pub const TRUST_E_MALFORMED_SIGNATURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146869231));
pub const TRUST_E_BASIC_CONSTRAINTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146869223));
pub const TRUST_E_FINANCIAL_CRITERIA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146869218));
pub const MSSIPOTF_E_OUTOFMEMRANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865151));
pub const MSSIPOTF_E_CANTGETOBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865150));
pub const MSSIPOTF_E_NOHEADTABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865149));
pub const MSSIPOTF_E_BAD_MAGICNUMBER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865148));
pub const MSSIPOTF_E_BAD_OFFSET_TABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865147));
pub const MSSIPOTF_E_TABLE_TAGORDER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865146));
pub const MSSIPOTF_E_TABLE_LONGWORD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865145));
pub const MSSIPOTF_E_BAD_FIRST_TABLE_PLACEMENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865144));
pub const MSSIPOTF_E_TABLES_OVERLAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865143));
pub const MSSIPOTF_E_TABLE_PADBYTES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865142));
pub const MSSIPOTF_E_FILETOOSMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865141));
pub const MSSIPOTF_E_TABLE_CHECKSUM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865140));
pub const MSSIPOTF_E_FILE_CHECKSUM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865139));
pub const MSSIPOTF_E_FAILED_POLICY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865136));
pub const MSSIPOTF_E_FAILED_HINTS_CHECK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865135));
pub const MSSIPOTF_E_NOT_OPENTYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865134));
pub const MSSIPOTF_E_FILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865133));
pub const MSSIPOTF_E_CRYPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865132));
pub const MSSIPOTF_E_BADVERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865131));
pub const MSSIPOTF_E_DSIG_STRUCTURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865130));
pub const MSSIPOTF_E_PCONST_CHECK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865129));
pub const MSSIPOTF_E_STRUCTURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865128));
pub const ERROR_CRED_REQUIRES_CONFIRMATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865127));
pub const NTE_OP_OK = @as(u32, 0);
pub const TRUST_E_PROVIDER_UNKNOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762751));
pub const TRUST_E_ACTION_UNKNOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762750));
pub const TRUST_E_SUBJECT_FORM_UNKNOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762749));
pub const TRUST_E_SUBJECT_NOT_TRUSTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762748));
pub const DIGSIG_E_ENCODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762747));
pub const DIGSIG_E_DECODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762746));
pub const DIGSIG_E_EXTENSIBILITY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762745));
pub const DIGSIG_E_CRYPTO = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762744));
pub const PERSIST_E_SIZEDEFINITE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762743));
pub const PERSIST_E_SIZEINDEFINITE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762742));
pub const PERSIST_E_NOTSELFSIZING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762741));
pub const TRUST_E_NOSIGNATURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762496));
pub const CERT_E_EXPIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762495));
pub const CERT_E_VALIDITYPERIODNESTING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762494));
pub const CERT_E_ROLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762493));
pub const CERT_E_PATHLENCONST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762492));
pub const CERT_E_CRITICAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762491));
pub const CERT_E_PURPOSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762490));
pub const CERT_E_ISSUERCHAINING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762489));
pub const CERT_E_MALFORMED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762488));
pub const CERT_E_UNTRUSTEDROOT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762487));
pub const CERT_E_CHAINING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762486));
pub const TRUST_E_FAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762485));
pub const CERT_E_REVOKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762484));
pub const CERT_E_UNTRUSTEDTESTROOT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762483));
pub const CERT_E_REVOCATION_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762482));
pub const CERT_E_CN_NO_MATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762481));
pub const CERT_E_WRONG_USAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762480));
pub const TRUST_E_EXPLICIT_DISTRUST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762479));
pub const CERT_E_UNTRUSTEDCA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762478));
pub const CERT_E_INVALID_POLICY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762477));
pub const CERT_E_INVALID_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762476));
pub const SPAPI_E_EXPECTED_SECTION_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500608));
pub const SPAPI_E_BAD_SECTION_NAME_LINE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500607));
pub const SPAPI_E_SECTION_NAME_TOO_LONG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500606));
pub const SPAPI_E_GENERAL_SYNTAX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500605));
pub const SPAPI_E_WRONG_INF_STYLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500352));
pub const SPAPI_E_SECTION_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500351));
pub const SPAPI_E_LINE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500350));
pub const SPAPI_E_NO_BACKUP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500349));
pub const SPAPI_E_NO_ASSOCIATED_CLASS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500096));
pub const SPAPI_E_CLASS_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500095));
pub const SPAPI_E_DUPLICATE_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500094));
pub const SPAPI_E_NO_DRIVER_SELECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500093));
pub const SPAPI_E_KEY_DOES_NOT_EXIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500092));
pub const SPAPI_E_INVALID_DEVINST_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500091));
pub const SPAPI_E_INVALID_CLASS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500090));
pub const SPAPI_E_DEVINST_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500089));
pub const SPAPI_E_DEVINFO_NOT_REGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500088));
pub const SPAPI_E_INVALID_REG_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500087));
pub const SPAPI_E_NO_INF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500086));
pub const SPAPI_E_NO_SUCH_DEVINST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500085));
pub const SPAPI_E_CANT_LOAD_CLASS_ICON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500084));
pub const SPAPI_E_INVALID_CLASS_INSTALLER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500083));
pub const SPAPI_E_DI_DO_DEFAULT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500082));
pub const SPAPI_E_DI_NOFILECOPY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500081));
pub const SPAPI_E_INVALID_HWPROFILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500080));
pub const SPAPI_E_NO_DEVICE_SELECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500079));
pub const SPAPI_E_DEVINFO_LIST_LOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500078));
pub const SPAPI_E_DEVINFO_DATA_LOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500077));
pub const SPAPI_E_DI_BAD_PATH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500076));
pub const SPAPI_E_NO_CLASSINSTALL_PARAMS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500075));
pub const SPAPI_E_FILEQUEUE_LOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500074));
pub const SPAPI_E_BAD_SERVICE_INSTALLSECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500073));
pub const SPAPI_E_NO_CLASS_DRIVER_LIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500072));
pub const SPAPI_E_NO_ASSOCIATED_SERVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500071));
pub const SPAPI_E_NO_DEFAULT_DEVICE_INTERFACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500070));
pub const SPAPI_E_DEVICE_INTERFACE_ACTIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500069));
pub const SPAPI_E_DEVICE_INTERFACE_REMOVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500068));
pub const SPAPI_E_BAD_INTERFACE_INSTALLSECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500067));
pub const SPAPI_E_NO_SUCH_INTERFACE_CLASS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500066));
pub const SPAPI_E_INVALID_REFERENCE_STRING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500065));
pub const SPAPI_E_INVALID_MACHINENAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500064));
pub const SPAPI_E_REMOTE_COMM_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500063));
pub const SPAPI_E_MACHINE_UNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500062));
pub const SPAPI_E_NO_CONFIGMGR_SERVICES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500061));
pub const SPAPI_E_INVALID_PROPPAGE_PROVIDER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500060));
pub const SPAPI_E_NO_SUCH_DEVICE_INTERFACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500059));
pub const SPAPI_E_DI_POSTPROCESSING_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500058));
pub const SPAPI_E_INVALID_COINSTALLER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500057));
pub const SPAPI_E_NO_COMPAT_DRIVERS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500056));
pub const SPAPI_E_NO_DEVICE_ICON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500055));
pub const SPAPI_E_INVALID_INF_LOGCONFIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500054));
pub const SPAPI_E_DI_DONT_INSTALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500053));
pub const SPAPI_E_INVALID_FILTER_DRIVER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500052));
pub const SPAPI_E_NON_WINDOWS_NT_DRIVER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500051));
pub const SPAPI_E_NON_WINDOWS_DRIVER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500050));
pub const SPAPI_E_NO_CATALOG_FOR_OEM_INF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500049));
pub const SPAPI_E_DEVINSTALL_QUEUE_NONNATIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500048));
pub const SPAPI_E_NOT_DISABLEABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500047));
pub const SPAPI_E_CANT_REMOVE_DEVINST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500046));
pub const SPAPI_E_INVALID_TARGET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500045));
pub const SPAPI_E_DRIVER_NONNATIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500044));
pub const SPAPI_E_IN_WOW64 = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500043));
pub const SPAPI_E_SET_SYSTEM_RESTORE_POINT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500042));
pub const SPAPI_E_INCORRECTLY_COPIED_INF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500041));
pub const SPAPI_E_SCE_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500040));
pub const SPAPI_E_UNKNOWN_EXCEPTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500039));
pub const SPAPI_E_PNP_REGISTRY_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500038));
pub const SPAPI_E_REMOTE_REQUEST_UNSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500037));
pub const SPAPI_E_NOT_AN_INSTALLED_OEM_INF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500036));
pub const SPAPI_E_INF_IN_USE_BY_DEVICES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500035));
pub const SPAPI_E_DI_FUNCTION_OBSOLETE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500034));
pub const SPAPI_E_NO_AUTHENTICODE_CATALOG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500033));
pub const SPAPI_E_AUTHENTICODE_DISALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500032));
pub const SPAPI_E_AUTHENTICODE_TRUSTED_PUBLISHER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500031));
pub const SPAPI_E_AUTHENTICODE_TRUST_NOT_ESTABLISHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500030));
pub const SPAPI_E_AUTHENTICODE_PUBLISHER_NOT_TRUSTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500029));
pub const SPAPI_E_SIGNATURE_OSATTRIBUTE_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500028));
pub const SPAPI_E_ONLY_VALIDATE_VIA_AUTHENTICODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500027));
pub const SPAPI_E_DEVICE_INSTALLER_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500026));
pub const SPAPI_E_DRIVER_STORE_ADD_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500025));
pub const SPAPI_E_DEVICE_INSTALL_BLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500024));
pub const SPAPI_E_DRIVER_INSTALL_BLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500023));
pub const SPAPI_E_WRONG_INF_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500022));
pub const SPAPI_E_FILE_HASH_NOT_IN_CATALOG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500021));
pub const SPAPI_E_DRIVER_STORE_DELETE_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500020));
pub const SPAPI_E_UNRECOVERABLE_STACK_OVERFLOW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146499840));
pub const SPAPI_E_ERROR_NOT_INSTALLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146496512));
pub const SCARD_F_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435071));
pub const SCARD_E_CANCELLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435070));
pub const SCARD_E_INVALID_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435069));
pub const SCARD_E_INVALID_PARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435068));
pub const SCARD_E_INVALID_TARGET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435067));
pub const SCARD_E_NO_MEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435066));
pub const SCARD_F_WAITED_TOO_LONG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435065));
pub const SCARD_E_INSUFFICIENT_BUFFER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435064));
pub const SCARD_E_UNKNOWN_READER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435063));
pub const SCARD_E_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435062));
pub const SCARD_E_SHARING_VIOLATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435061));
pub const SCARD_E_NO_SMARTCARD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435060));
pub const SCARD_E_UNKNOWN_CARD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435059));
pub const SCARD_E_CANT_DISPOSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435058));
pub const SCARD_E_PROTO_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435057));
pub const SCARD_E_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435056));
pub const SCARD_E_INVALID_VALUE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435055));
pub const SCARD_E_SYSTEM_CANCELLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435054));
pub const SCARD_F_COMM_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435053));
pub const SCARD_F_UNKNOWN_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435052));
pub const SCARD_E_INVALID_ATR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435051));
pub const SCARD_E_NOT_TRANSACTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435050));
pub const SCARD_E_READER_UNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435049));
pub const SCARD_P_SHUTDOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435048));
pub const SCARD_E_PCI_TOO_SMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435047));
pub const SCARD_E_READER_UNSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435046));
pub const SCARD_E_DUPLICATE_READER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435045));
pub const SCARD_E_CARD_UNSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435044));
pub const SCARD_E_NO_SERVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435043));
pub const SCARD_E_SERVICE_STOPPED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435042));
pub const SCARD_E_UNEXPECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435041));
pub const SCARD_E_ICC_INSTALLATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435040));
pub const SCARD_E_ICC_CREATEORDER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435039));
pub const SCARD_E_UNSUPPORTED_FEATURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435038));
pub const SCARD_E_DIR_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435037));
pub const SCARD_E_FILE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435036));
pub const SCARD_E_NO_DIR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435035));
pub const SCARD_E_NO_FILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435034));
pub const SCARD_E_NO_ACCESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435033));
pub const SCARD_E_WRITE_TOO_MANY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435032));
pub const SCARD_E_BAD_SEEK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435031));
pub const SCARD_E_INVALID_CHV = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435030));
pub const SCARD_E_UNKNOWN_RES_MNG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435029));
pub const SCARD_E_NO_SUCH_CERTIFICATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435028));
pub const SCARD_E_CERTIFICATE_UNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435027));
pub const SCARD_E_NO_READERS_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435026));
pub const SCARD_E_COMM_DATA_LOST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435025));
pub const SCARD_E_NO_KEY_CONTAINER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435024));
pub const SCARD_E_SERVER_TOO_BUSY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435023));
pub const SCARD_E_PIN_CACHE_EXPIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435022));
pub const SCARD_E_NO_PIN_CACHE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435021));
pub const SCARD_E_READ_ONLY_CARD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435020));
pub const SCARD_W_UNSUPPORTED_CARD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434971));
pub const SCARD_W_UNRESPONSIVE_CARD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434970));
pub const SCARD_W_UNPOWERED_CARD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434969));
pub const SCARD_W_RESET_CARD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434968));
pub const SCARD_W_REMOVED_CARD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434967));
pub const SCARD_W_SECURITY_VIOLATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434966));
pub const SCARD_W_WRONG_CHV = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434965));
pub const SCARD_W_CHV_BLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434964));
pub const SCARD_W_EOF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434963));
pub const SCARD_W_CANCELLED_BY_USER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434962));
pub const SCARD_W_CARD_NOT_AUTHENTICATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434961));
pub const SCARD_W_CACHE_ITEM_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434960));
pub const SCARD_W_CACHE_ITEM_STALE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434959));
pub const SCARD_W_CACHE_ITEM_TOO_BIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434958));
pub const COMADMIN_E_OBJECTERRORS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368511));
pub const COMADMIN_E_OBJECTINVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368510));
pub const COMADMIN_E_KEYMISSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368509));
pub const COMADMIN_E_ALREADYINSTALLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368508));
pub const COMADMIN_E_APP_FILE_WRITEFAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368505));
pub const COMADMIN_E_APP_FILE_READFAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368504));
pub const COMADMIN_E_APP_FILE_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368503));
pub const COMADMIN_E_BADPATH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368502));
pub const COMADMIN_E_APPLICATIONEXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368501));
pub const COMADMIN_E_ROLEEXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368500));
pub const COMADMIN_E_CANTCOPYFILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368499));
pub const COMADMIN_E_NOUSER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368497));
pub const COMADMIN_E_INVALIDUSERIDS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368496));
pub const COMADMIN_E_NOREGISTRYCLSID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368495));
pub const COMADMIN_E_BADREGISTRYPROGID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368494));
pub const COMADMIN_E_AUTHENTICATIONLEVEL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368493));
pub const COMADMIN_E_USERPASSWDNOTVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368492));
pub const COMADMIN_E_CLSIDORIIDMISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368488));
pub const COMADMIN_E_REMOTEINTERFACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368487));
pub const COMADMIN_E_DLLREGISTERSERVER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368486));
pub const COMADMIN_E_NOSERVERSHARE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368485));
pub const COMADMIN_E_DLLLOADFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368483));
pub const COMADMIN_E_BADREGISTRYLIBID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368482));
pub const COMADMIN_E_APPDIRNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368481));
pub const COMADMIN_E_REGISTRARFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368477));
pub const COMADMIN_E_COMPFILE_DOESNOTEXIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368476));
pub const COMADMIN_E_COMPFILE_LOADDLLFAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368475));
pub const COMADMIN_E_COMPFILE_GETCLASSOBJ = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368474));
pub const COMADMIN_E_COMPFILE_CLASSNOTAVAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368473));
pub const COMADMIN_E_COMPFILE_BADTLB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368472));
pub const COMADMIN_E_COMPFILE_NOTINSTALLABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368471));
pub const COMADMIN_E_NOTCHANGEABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368470));
pub const COMADMIN_E_NOTDELETEABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368469));
pub const COMADMIN_E_SESSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368468));
pub const COMADMIN_E_COMP_MOVE_LOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368467));
pub const COMADMIN_E_COMP_MOVE_BAD_DEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368466));
pub const COMADMIN_E_REGISTERTLB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368464));
pub const COMADMIN_E_SYSTEMAPP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368461));
pub const COMADMIN_E_COMPFILE_NOREGISTRAR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368460));
pub const COMADMIN_E_COREQCOMPINSTALLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368459));
pub const COMADMIN_E_SERVICENOTINSTALLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368458));
pub const COMADMIN_E_PROPERTYSAVEFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368457));
pub const COMADMIN_E_OBJECTEXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368456));
pub const COMADMIN_E_COMPONENTEXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368455));
pub const COMADMIN_E_REGFILE_CORRUPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368453));
pub const COMADMIN_E_PROPERTY_OVERFLOW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368452));
pub const COMADMIN_E_NOTINREGISTRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368450));
pub const COMADMIN_E_OBJECTNOTPOOLABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368449));
pub const COMADMIN_E_APPLID_MATCHES_CLSID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368442));
pub const COMADMIN_E_ROLE_DOES_NOT_EXIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368441));
pub const COMADMIN_E_START_APP_NEEDS_COMPONENTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368440));
pub const COMADMIN_E_REQUIRES_DIFFERENT_PLATFORM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368439));
pub const COMADMIN_E_CAN_NOT_EXPORT_APP_PROXY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368438));
pub const COMADMIN_E_CAN_NOT_START_APP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368437));
pub const COMADMIN_E_CAN_NOT_EXPORT_SYS_APP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368436));
pub const COMADMIN_E_CANT_SUBSCRIBE_TO_COMPONENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368435));
pub const COMADMIN_E_EVENTCLASS_CANT_BE_SUBSCRIBER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368434));
pub const COMADMIN_E_LIB_APP_PROXY_INCOMPATIBLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368433));
pub const COMADMIN_E_BASE_PARTITION_ONLY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368432));
pub const COMADMIN_E_START_APP_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368431));
pub const COMADMIN_E_CAT_DUPLICATE_PARTITION_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368425));
pub const COMADMIN_E_CAT_INVALID_PARTITION_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368424));
pub const COMADMIN_E_CAT_PARTITION_IN_USE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368423));
pub const COMADMIN_E_FILE_PARTITION_DUPLICATE_FILES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368422));
pub const COMADMIN_E_CAT_IMPORTED_COMPONENTS_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368421));
pub const COMADMIN_E_AMBIGUOUS_APPLICATION_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368420));
pub const COMADMIN_E_AMBIGUOUS_PARTITION_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368419));
pub const COMADMIN_E_REGDB_NOTINITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368398));
pub const COMADMIN_E_REGDB_NOTOPEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368397));
pub const COMADMIN_E_REGDB_SYSTEMERR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368396));
pub const COMADMIN_E_REGDB_ALREADYRUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368395));
pub const COMADMIN_E_MIG_VERSIONNOTSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368384));
pub const COMADMIN_E_MIG_SCHEMANOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368383));
pub const COMADMIN_E_CAT_BITNESSMISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368382));
pub const COMADMIN_E_CAT_UNACCEPTABLEBITNESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368381));
pub const COMADMIN_E_CAT_WRONGAPPBITNESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368380));
pub const COMADMIN_E_CAT_PAUSE_RESUME_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368379));
pub const COMADMIN_E_CAT_SERVERFAULT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368378));
pub const COMQC_E_APPLICATION_NOT_QUEUED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368000));
pub const COMQC_E_NO_QUEUEABLE_INTERFACES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367999));
pub const COMQC_E_QUEUING_SERVICE_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367998));
pub const COMQC_E_NO_IPERSISTSTREAM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367997));
pub const COMQC_E_BAD_MESSAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367996));
pub const COMQC_E_UNAUTHENTICATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367995));
pub const COMQC_E_UNTRUSTED_ENQUEUER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367994));
pub const MSDTC_E_DUPLICATE_RESOURCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367743));
pub const COMADMIN_E_OBJECT_PARENT_MISSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367480));
pub const COMADMIN_E_OBJECT_DOES_NOT_EXIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367479));
pub const COMADMIN_E_APP_NOT_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367478));
pub const COMADMIN_E_INVALID_PARTITION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367477));
pub const COMADMIN_E_SVCAPP_NOT_POOLABLE_OR_RECYCLABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367475));
pub const COMADMIN_E_USER_IN_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367474));
pub const COMADMIN_E_CANTRECYCLELIBRARYAPPS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367473));
pub const COMADMIN_E_CANTRECYCLESERVICEAPPS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367471));
pub const COMADMIN_E_PROCESSALREADYRECYCLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367470));
pub const COMADMIN_E_PAUSEDPROCESSMAYNOTBERECYCLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367469));
pub const COMADMIN_E_CANTMAKEINPROCSERVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367468));
pub const COMADMIN_E_PROGIDINUSEBYCLSID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367467));
pub const COMADMIN_E_DEFAULT_PARTITION_NOT_IN_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367466));
pub const COMADMIN_E_RECYCLEDPROCESSMAYNOTBEPAUSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367465));
pub const COMADMIN_E_PARTITION_ACCESSDENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367464));
pub const COMADMIN_E_PARTITION_MSI_ONLY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367463));
pub const COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_1_0_FORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367462));
pub const COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_NONBASE_PARTITIONS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367461));
pub const COMADMIN_E_COMP_MOVE_SOURCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367460));
pub const COMADMIN_E_COMP_MOVE_DEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367459));
pub const COMADMIN_E_COMP_MOVE_PRIVATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367458));
pub const COMADMIN_E_BASEPARTITION_REQUIRED_IN_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367457));
pub const COMADMIN_E_CANNOT_ALIAS_EVENTCLASS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367456));
pub const COMADMIN_E_PRIVATE_ACCESSDENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367455));
pub const COMADMIN_E_SAFERINVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367454));
pub const COMADMIN_E_REGISTRY_ACCESSDENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367453));
pub const COMADMIN_E_PARTITIONS_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367452));
pub const MENROLL_S_ENROLLMENT_SUSPENDED = @import("zig.zig").typedConst(HRESULT, @as(i32, 1572881));
pub const WER_S_REPORT_DEBUG = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769472));
pub const WER_S_REPORT_UPLOADED = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769473));
pub const WER_S_REPORT_QUEUED = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769474));
pub const WER_S_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769475));
pub const WER_S_SUSPENDED_UPLOAD = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769476));
pub const WER_S_DISABLED_QUEUE = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769477));
pub const WER_S_DISABLED_ARCHIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769478));
pub const WER_S_REPORT_ASYNC = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769479));
pub const WER_S_IGNORE_ASSERT_INSTANCE = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769480));
pub const WER_S_IGNORE_ALL_ASSERTS = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769481));
pub const WER_S_ASSERT_CONTINUE = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769482));
pub const WER_S_THROTTLED = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769483));
pub const WER_S_REPORT_UPLOADED_CAB = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769484));
pub const WER_E_CRASH_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145681408));
pub const WER_E_CANCELED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145681407));
pub const WER_E_NETWORK_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145681406));
pub const WER_E_NOT_INITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145681405));
pub const WER_E_ALREADY_REPORTING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145681404));
pub const WER_E_DUMP_THROTTLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145681403));
pub const WER_E_INSUFFICIENT_CONSENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145681402));
pub const WER_E_TOO_HEAVY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145681401));
pub const ERROR_FLT_IO_COMPLETE = @import("zig.zig").typedConst(HRESULT, @as(i32, 2031617));
pub const ERROR_FLT_NO_HANDLER_DEFINED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452031));
pub const ERROR_FLT_CONTEXT_ALREADY_DEFINED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452030));
pub const ERROR_FLT_INVALID_ASYNCHRONOUS_REQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452029));
pub const ERROR_FLT_DISALLOW_FAST_IO = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452028));
pub const ERROR_FLT_INVALID_NAME_REQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452027));
pub const ERROR_FLT_NOT_SAFE_TO_POST_OPERATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452026));
pub const ERROR_FLT_NOT_INITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452025));
pub const ERROR_FLT_FILTER_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452024));
pub const ERROR_FLT_POST_OPERATION_CLEANUP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452023));
pub const ERROR_FLT_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452022));
pub const ERROR_FLT_DELETING_OBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452021));
pub const ERROR_FLT_MUST_BE_NONPAGED_POOL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452020));
pub const ERROR_FLT_DUPLICATE_ENTRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452019));
pub const ERROR_FLT_CBDQ_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452018));
pub const ERROR_FLT_DO_NOT_ATTACH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452017));
pub const ERROR_FLT_DO_NOT_DETACH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452016));
pub const ERROR_FLT_INSTANCE_ALTITUDE_COLLISION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452015));
pub const ERROR_FLT_INSTANCE_NAME_COLLISION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452014));
pub const ERROR_FLT_FILTER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452013));
pub const ERROR_FLT_VOLUME_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452012));
pub const ERROR_FLT_INSTANCE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452011));
pub const ERROR_FLT_CONTEXT_ALLOCATION_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452010));
pub const ERROR_FLT_INVALID_CONTEXT_REGISTRATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452009));
pub const ERROR_FLT_NAME_CACHE_MISS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452008));
pub const ERROR_FLT_NO_DEVICE_OBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452007));
pub const ERROR_FLT_VOLUME_ALREADY_MOUNTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452006));
pub const ERROR_FLT_ALREADY_ENLISTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452005));
pub const ERROR_FLT_CONTEXT_ALREADY_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452004));
pub const ERROR_FLT_NO_WAITER_FOR_REPLY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452000));
pub const ERROR_FLT_REGISTRATION_BUSY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145451997));
pub const ERROR_FLT_WCOS_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145451996));
pub const ERROR_HUNG_DISPLAY_DRIVER_THREAD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144993279));
pub const DWM_E_COMPOSITIONDISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144980991));
pub const DWM_E_REMOTING_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144980990));
pub const DWM_E_NO_REDIRECTION_SURFACE_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144980989));
pub const DWM_E_NOT_QUEUING_PRESENTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144980988));
pub const DWM_E_ADAPTER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144980987));
pub const DWM_S_GDI_REDIRECTION_SURFACE = @import("zig.zig").typedConst(HRESULT, @as(i32, 2502661));
pub const DWM_E_TEXTURE_TOO_LARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144980985));
pub const DWM_S_GDI_REDIRECTION_SURFACE_BLT_VIA_GDI = @import("zig.zig").typedConst(HRESULT, @as(i32, 2502664));
pub const ERROR_MONITOR_NO_DESCRIPTOR = @import("zig.zig").typedConst(HRESULT, @as(i32, 2494465));
pub const ERROR_MONITOR_UNKNOWN_DESCRIPTOR_FORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, 2494466));
pub const ERROR_MONITOR_INVALID_DESCRIPTOR_CHECKSUM = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071247357));
pub const ERROR_MONITOR_INVALID_STANDARD_TIMING_BLOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071247356));
pub const ERROR_MONITOR_WMI_DATABLOCK_REGISTRATION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071247355));
pub const ERROR_MONITOR_INVALID_SERIAL_NUMBER_MONDSC_BLOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071247354));
pub const ERROR_MONITOR_INVALID_USER_FRIENDLY_MONDSC_BLOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071247353));
pub const ERROR_MONITOR_NO_MORE_DESCRIPTOR_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071247352));
pub const ERROR_MONITOR_INVALID_DETAILED_TIMING_BLOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071247351));
pub const ERROR_MONITOR_INVALID_MANUFACTURE_DATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071247350));
pub const ERROR_GRAPHICS_NOT_EXCLUSIVE_MODE_OWNER = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243264));
pub const ERROR_GRAPHICS_INSUFFICIENT_DMA_BUFFER = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243263));
pub const ERROR_GRAPHICS_INVALID_DISPLAY_ADAPTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243262));
pub const ERROR_GRAPHICS_ADAPTER_WAS_RESET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243261));
pub const ERROR_GRAPHICS_INVALID_DRIVER_MODEL = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243260));
pub const ERROR_GRAPHICS_PRESENT_MODE_CHANGED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243259));
pub const ERROR_GRAPHICS_PRESENT_OCCLUDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243258));
pub const ERROR_GRAPHICS_PRESENT_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243257));
pub const ERROR_GRAPHICS_CANNOTCOLORCONVERT = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243256));
pub const ERROR_GRAPHICS_DRIVER_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243255));
pub const ERROR_GRAPHICS_PARTIAL_DATA_POPULATED = @import("zig.zig").typedConst(HRESULT, @as(i32, 1076240394));
pub const ERROR_GRAPHICS_PRESENT_REDIRECTION_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243253));
pub const ERROR_GRAPHICS_PRESENT_UNOCCLUDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243252));
pub const ERROR_GRAPHICS_WINDOWDC_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243251));
pub const ERROR_GRAPHICS_WINDOWLESS_PRESENT_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243250));
pub const ERROR_GRAPHICS_PRESENT_INVALID_WINDOW = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243249));
pub const ERROR_GRAPHICS_PRESENT_BUFFER_NOT_BOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243248));
pub const ERROR_GRAPHICS_VAIL_STATE_CHANGED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243247));
pub const ERROR_GRAPHICS_INDIRECT_DISPLAY_ABANDON_SWAPCHAIN = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243246));
pub const ERROR_GRAPHICS_INDIRECT_DISPLAY_DEVICE_STOPPED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243245));
pub const ERROR_GRAPHICS_VAIL_FAILED_TO_SEND_CREATE_SUPERWETINK_MESSAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243244));
pub const ERROR_GRAPHICS_VAIL_FAILED_TO_SEND_DESTROY_SUPERWETINK_MESSAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243243));
pub const ERROR_GRAPHICS_VAIL_FAILED_TO_SEND_COMPOSITION_WINDOW_DPI_MESSAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243242));
pub const ERROR_GRAPHICS_NO_VIDEO_MEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243008));
pub const ERROR_GRAPHICS_CANT_LOCK_MEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243007));
pub const ERROR_GRAPHICS_ALLOCATION_BUSY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243006));
pub const ERROR_GRAPHICS_TOO_MANY_REFERENCES = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243005));
pub const ERROR_GRAPHICS_TRY_AGAIN_LATER = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243004));
pub const ERROR_GRAPHICS_TRY_AGAIN_NOW = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243003));
pub const ERROR_GRAPHICS_ALLOCATION_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243002));
pub const ERROR_GRAPHICS_UNSWIZZLING_APERTURE_UNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243001));
pub const ERROR_GRAPHICS_UNSWIZZLING_APERTURE_UNSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243000));
pub const ERROR_GRAPHICS_CANT_EVICT_PINNED_ALLOCATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242999));
pub const ERROR_GRAPHICS_INVALID_ALLOCATION_USAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242992));
pub const ERROR_GRAPHICS_CANT_RENDER_LOCKED_ALLOCATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242991));
pub const ERROR_GRAPHICS_ALLOCATION_CLOSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242990));
pub const ERROR_GRAPHICS_INVALID_ALLOCATION_INSTANCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242989));
pub const ERROR_GRAPHICS_INVALID_ALLOCATION_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242988));
pub const ERROR_GRAPHICS_WRONG_ALLOCATION_DEVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242987));
pub const ERROR_GRAPHICS_ALLOCATION_CONTENT_LOST = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242986));
pub const ERROR_GRAPHICS_GPU_EXCEPTION_ON_DEVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242752));
pub const ERROR_GRAPHICS_SKIP_ALLOCATION_PREPARATION = @import("zig.zig").typedConst(HRESULT, @as(i32, 1076240897));
pub const ERROR_GRAPHICS_INVALID_VIDPN_TOPOLOGY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242496));
pub const ERROR_GRAPHICS_VIDPN_TOPOLOGY_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242495));
pub const ERROR_GRAPHICS_VIDPN_TOPOLOGY_CURRENTLY_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242494));
pub const ERROR_GRAPHICS_INVALID_VIDPN = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242493));
pub const ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242492));
pub const ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242491));
pub const ERROR_GRAPHICS_VIDPN_MODALITY_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242490));
pub const ERROR_GRAPHICS_MODE_NOT_PINNED = @import("zig.zig").typedConst(HRESULT, @as(i32, 2499335));
pub const ERROR_GRAPHICS_INVALID_VIDPN_SOURCEMODESET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242488));
pub const ERROR_GRAPHICS_INVALID_VIDPN_TARGETMODESET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242487));
pub const ERROR_GRAPHICS_INVALID_FREQUENCY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242486));
pub const ERROR_GRAPHICS_INVALID_ACTIVE_REGION = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242485));
pub const ERROR_GRAPHICS_INVALID_TOTAL_REGION = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242484));
pub const ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE_MODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242480));
pub const ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET_MODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242479));
pub const ERROR_GRAPHICS_PINNED_MODE_MUST_REMAIN_IN_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242478));
pub const ERROR_GRAPHICS_PATH_ALREADY_IN_TOPOLOGY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242477));
pub const ERROR_GRAPHICS_MODE_ALREADY_IN_MODESET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242476));
pub const ERROR_GRAPHICS_INVALID_VIDEOPRESENTSOURCESET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242475));
pub const ERROR_GRAPHICS_INVALID_VIDEOPRESENTTARGETSET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242474));
pub const ERROR_GRAPHICS_SOURCE_ALREADY_IN_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242473));
pub const ERROR_GRAPHICS_TARGET_ALREADY_IN_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242472));
pub const ERROR_GRAPHICS_INVALID_VIDPN_PRESENT_PATH = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242471));
pub const ERROR_GRAPHICS_NO_RECOMMENDED_VIDPN_TOPOLOGY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242470));
pub const ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGESET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242469));
pub const ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242468));
pub const ERROR_GRAPHICS_FREQUENCYRANGE_NOT_IN_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242467));
pub const ERROR_GRAPHICS_NO_PREFERRED_MODE = @import("zig.zig").typedConst(HRESULT, @as(i32, 2499358));
pub const ERROR_GRAPHICS_FREQUENCYRANGE_ALREADY_IN_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242465));
pub const ERROR_GRAPHICS_STALE_MODESET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242464));
pub const ERROR_GRAPHICS_INVALID_MONITOR_SOURCEMODESET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242463));
pub const ERROR_GRAPHICS_INVALID_MONITOR_SOURCE_MODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242462));
pub const ERROR_GRAPHICS_NO_RECOMMENDED_FUNCTIONAL_VIDPN = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242461));
pub const ERROR_GRAPHICS_MODE_ID_MUST_BE_UNIQUE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242460));
pub const ERROR_GRAPHICS_EMPTY_ADAPTER_MONITOR_MODE_SUPPORT_INTERSECTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242459));
pub const ERROR_GRAPHICS_VIDEO_PRESENT_TARGETS_LESS_THAN_SOURCES = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242458));
pub const ERROR_GRAPHICS_PATH_NOT_IN_TOPOLOGY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242457));
pub const ERROR_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_SOURCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242456));
pub const ERROR_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_TARGET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242455));
pub const ERROR_GRAPHICS_INVALID_MONITORDESCRIPTORSET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242454));
pub const ERROR_GRAPHICS_INVALID_MONITORDESCRIPTOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242453));
pub const ERROR_GRAPHICS_MONITORDESCRIPTOR_NOT_IN_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242452));
pub const ERROR_GRAPHICS_MONITORDESCRIPTOR_ALREADY_IN_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242451));
pub const ERROR_GRAPHICS_MONITORDESCRIPTOR_ID_MUST_BE_UNIQUE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242450));
pub const ERROR_GRAPHICS_INVALID_VIDPN_TARGET_SUBSET_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242449));
pub const ERROR_GRAPHICS_RESOURCES_NOT_RELATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242448));
pub const ERROR_GRAPHICS_SOURCE_ID_MUST_BE_UNIQUE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242447));
pub const ERROR_GRAPHICS_TARGET_ID_MUST_BE_UNIQUE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242446));
pub const ERROR_GRAPHICS_NO_AVAILABLE_VIDPN_TARGET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242445));
pub const ERROR_GRAPHICS_MONITOR_COULD_NOT_BE_ASSOCIATED_WITH_ADAPTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242444));
pub const ERROR_GRAPHICS_NO_VIDPNMGR = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242443));
pub const ERROR_GRAPHICS_NO_ACTIVE_VIDPN = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242442));
pub const ERROR_GRAPHICS_STALE_VIDPN_TOPOLOGY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242441));
pub const ERROR_GRAPHICS_MONITOR_NOT_CONNECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242440));
pub const ERROR_GRAPHICS_SOURCE_NOT_IN_TOPOLOGY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242439));
pub const ERROR_GRAPHICS_INVALID_PRIMARYSURFACE_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242438));
pub const ERROR_GRAPHICS_INVALID_VISIBLEREGION_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242437));
pub const ERROR_GRAPHICS_INVALID_STRIDE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242436));
pub const ERROR_GRAPHICS_INVALID_PIXELFORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242435));
pub const ERROR_GRAPHICS_INVALID_COLORBASIS = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242434));
pub const ERROR_GRAPHICS_INVALID_PIXELVALUEACCESSMODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242433));
pub const ERROR_GRAPHICS_TARGET_NOT_IN_TOPOLOGY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242432));
pub const ERROR_GRAPHICS_NO_DISPLAY_MODE_MANAGEMENT_SUPPORT = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242431));
pub const ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242430));
pub const ERROR_GRAPHICS_CANT_ACCESS_ACTIVE_VIDPN = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242429));
pub const ERROR_GRAPHICS_INVALID_PATH_IMPORTANCE_ORDINAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242428));
pub const ERROR_GRAPHICS_INVALID_PATH_CONTENT_GEOMETRY_TRANSFORMATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242427));
pub const ERROR_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242426));
pub const ERROR_GRAPHICS_INVALID_GAMMA_RAMP = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242425));
pub const ERROR_GRAPHICS_GAMMA_RAMP_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242424));
pub const ERROR_GRAPHICS_MULTISAMPLING_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242423));
pub const ERROR_GRAPHICS_MODE_NOT_IN_MODESET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242422));
pub const ERROR_GRAPHICS_DATASET_IS_EMPTY = @import("zig.zig").typedConst(HRESULT, @as(i32, 2499403));
pub const ERROR_GRAPHICS_NO_MORE_ELEMENTS_IN_DATASET = @import("zig.zig").typedConst(HRESULT, @as(i32, 2499404));
pub const ERROR_GRAPHICS_INVALID_VIDPN_TOPOLOGY_RECOMMENDATION_REASON = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242419));
pub const ERROR_GRAPHICS_INVALID_PATH_CONTENT_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242418));
pub const ERROR_GRAPHICS_INVALID_COPYPROTECTION_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242417));
pub const ERROR_GRAPHICS_UNASSIGNED_MODESET_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242416));
pub const ERROR_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_PINNED = @import("zig.zig").typedConst(HRESULT, @as(i32, 2499409));
pub const ERROR_GRAPHICS_INVALID_SCANLINE_ORDERING = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242414));
pub const ERROR_GRAPHICS_TOPOLOGY_CHANGES_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242413));
pub const ERROR_GRAPHICS_NO_AVAILABLE_IMPORTANCE_ORDINALS = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242412));
pub const ERROR_GRAPHICS_INCOMPATIBLE_PRIVATE_FORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242411));
pub const ERROR_GRAPHICS_INVALID_MODE_PRUNING_ALGORITHM = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242410));
pub const ERROR_GRAPHICS_INVALID_MONITOR_CAPABILITY_ORIGIN = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242409));
pub const ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE_CONSTRAINT = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242408));
pub const ERROR_GRAPHICS_MAX_NUM_PATHS_REACHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242407));
pub const ERROR_GRAPHICS_CANCEL_VIDPN_TOPOLOGY_AUGMENTATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242406));
pub const ERROR_GRAPHICS_INVALID_CLIENT_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242405));
pub const ERROR_GRAPHICS_CLIENTVIDPN_NOT_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242404));
pub const ERROR_GRAPHICS_SPECIFIED_CHILD_ALREADY_CONNECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242240));
pub const ERROR_GRAPHICS_CHILD_DESCRIPTOR_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242239));
pub const ERROR_GRAPHICS_UNKNOWN_CHILD_STATUS = @import("zig.zig").typedConst(HRESULT, @as(i32, 1076241455));
pub const ERROR_GRAPHICS_NOT_A_LINKED_ADAPTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242192));
pub const ERROR_GRAPHICS_LEADLINK_NOT_ENUMERATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242191));
pub const ERROR_GRAPHICS_CHAINLINKS_NOT_ENUMERATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242190));
pub const ERROR_GRAPHICS_ADAPTER_CHAIN_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242189));
pub const ERROR_GRAPHICS_CHAINLINKS_NOT_STARTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242188));
pub const ERROR_GRAPHICS_CHAINLINKS_NOT_POWERED_ON = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242187));
pub const ERROR_GRAPHICS_INCONSISTENT_DEVICE_LINK_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242186));
pub const ERROR_GRAPHICS_LEADLINK_START_DEFERRED = @import("zig.zig").typedConst(HRESULT, @as(i32, 1076241463));
pub const ERROR_GRAPHICS_NOT_POST_DEVICE_DRIVER = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242184));
pub const ERROR_GRAPHICS_POLLING_TOO_FREQUENTLY = @import("zig.zig").typedConst(HRESULT, @as(i32, 1076241465));
pub const ERROR_GRAPHICS_START_DEFERRED = @import("zig.zig").typedConst(HRESULT, @as(i32, 1076241466));
pub const ERROR_GRAPHICS_ADAPTER_ACCESS_NOT_EXCLUDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242181));
pub const ERROR_GRAPHICS_DEPENDABLE_CHILD_STATUS = @import("zig.zig").typedConst(HRESULT, @as(i32, 1076241468));
pub const ERROR_GRAPHICS_OPM_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241984));
pub const ERROR_GRAPHICS_COPP_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241983));
pub const ERROR_GRAPHICS_UAB_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241982));
pub const ERROR_GRAPHICS_OPM_INVALID_ENCRYPTED_PARAMETERS = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241981));
pub const ERROR_GRAPHICS_OPM_NO_VIDEO_OUTPUTS_EXIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241979));
pub const ERROR_GRAPHICS_OPM_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241973));
pub const ERROR_GRAPHICS_OPM_INVALID_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241972));
pub const ERROR_GRAPHICS_PVP_INVALID_CERTIFICATE_LENGTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241970));
pub const ERROR_GRAPHICS_OPM_SPANNING_MODE_ENABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241969));
pub const ERROR_GRAPHICS_OPM_THEATER_MODE_ENABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241968));
pub const ERROR_GRAPHICS_PVP_HFS_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241967));
pub const ERROR_GRAPHICS_OPM_INVALID_SRM = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241966));
pub const ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_HDCP = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241965));
pub const ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_ACP = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241964));
pub const ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_CGMSA = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241963));
pub const ERROR_GRAPHICS_OPM_HDCP_SRM_NEVER_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241962));
pub const ERROR_GRAPHICS_OPM_RESOLUTION_TOO_HIGH = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241961));
pub const ERROR_GRAPHICS_OPM_ALL_HDCP_HARDWARE_ALREADY_IN_USE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241960));
pub const ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_NO_LONGER_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241958));
pub const ERROR_GRAPHICS_OPM_SESSION_TYPE_CHANGE_IN_PROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241957));
pub const ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_DOES_NOT_HAVE_COPP_SEMANTICS = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241956));
pub const ERROR_GRAPHICS_OPM_INVALID_INFORMATION_REQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241955));
pub const ERROR_GRAPHICS_OPM_DRIVER_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241954));
pub const ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_DOES_NOT_HAVE_OPM_SEMANTICS = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241953));
pub const ERROR_GRAPHICS_OPM_SIGNALING_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241952));
pub const ERROR_GRAPHICS_OPM_INVALID_CONFIGURATION_REQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241951));
pub const ERROR_GRAPHICS_I2C_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241856));
pub const ERROR_GRAPHICS_I2C_DEVICE_DOES_NOT_EXIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241855));
pub const ERROR_GRAPHICS_I2C_ERROR_TRANSMITTING_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241854));
pub const ERROR_GRAPHICS_I2C_ERROR_RECEIVING_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241853));
pub const ERROR_GRAPHICS_DDCCI_VCP_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241852));
pub const ERROR_GRAPHICS_DDCCI_INVALID_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241851));
pub const ERROR_GRAPHICS_DDCCI_MONITOR_RETURNED_INVALID_TIMING_STATUS_BYTE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241850));
pub const ERROR_GRAPHICS_MCA_INVALID_CAPABILITIES_STRING = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241849));
pub const ERROR_GRAPHICS_MCA_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241848));
pub const ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_COMMAND = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241847));
pub const ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_LENGTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241846));
pub const ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_CHECKSUM = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241845));
pub const ERROR_GRAPHICS_INVALID_PHYSICAL_MONITOR_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241844));
pub const ERROR_GRAPHICS_MONITOR_NO_LONGER_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241843));
pub const ERROR_GRAPHICS_DDCCI_CURRENT_CURRENT_VALUE_GREATER_THAN_MAXIMUM_VALUE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241768));
pub const ERROR_GRAPHICS_MCA_INVALID_VCP_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241767));
pub const ERROR_GRAPHICS_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241766));
pub const ERROR_GRAPHICS_MCA_MCCS_VERSION_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241765));
pub const ERROR_GRAPHICS_MCA_UNSUPPORTED_MCCS_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241764));
pub const ERROR_GRAPHICS_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241762));
pub const ERROR_GRAPHICS_MCA_UNSUPPORTED_COLOR_TEMPERATURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241761));
pub const ERROR_GRAPHICS_ONLY_CONSOLE_SESSION_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241760));
pub const ERROR_GRAPHICS_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241759));
pub const ERROR_GRAPHICS_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241758));
pub const ERROR_GRAPHICS_MIRRORING_DEVICES_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241757));
pub const ERROR_GRAPHICS_INVALID_POINTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241756));
pub const ERROR_GRAPHICS_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241755));
pub const ERROR_GRAPHICS_PARAMETER_ARRAY_TOO_SMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241754));
pub const ERROR_GRAPHICS_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241753));
pub const ERROR_GRAPHICS_SESSION_TYPE_CHANGE_IN_PROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071249944));
pub const NAP_E_INVALID_PACKET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927743));
pub const NAP_E_MISSING_SOH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927742));
pub const NAP_E_CONFLICTING_ID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927741));
pub const NAP_E_NO_CACHED_SOH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927740));
pub const NAP_E_STILL_BOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927739));
pub const NAP_E_NOT_REGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927738));
pub const NAP_E_NOT_INITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927737));
pub const NAP_E_MISMATCHED_ID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927736));
pub const NAP_E_NOT_PENDING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927735));
pub const NAP_E_ID_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927734));
pub const NAP_E_MAXSIZE_TOO_SMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927733));
pub const NAP_E_SERVICE_NOT_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927732));
pub const NAP_S_CERT_ALREADY_PRESENT = @import("zig.zig").typedConst(HRESULT, @as(i32, 2555917));
pub const NAP_E_ENTITY_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927730));
pub const NAP_E_NETSH_GROUPPOLICY_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927729));
pub const NAP_E_TOO_MANY_CALLS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927728));
pub const NAP_E_SHV_CONFIG_EXISTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927727));
pub const NAP_E_SHV_CONFIG_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927726));
pub const NAP_E_SHV_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927725));
pub const TPM_E_ERROR_MASK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862208));
pub const TPM_E_AUTHFAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862207));
pub const TPM_E_BADINDEX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862206));
pub const TPM_E_BAD_PARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862205));
pub const TPM_E_AUDITFAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862204));
pub const TPM_E_CLEAR_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862203));
pub const TPM_E_DEACTIVATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862202));
pub const TPM_E_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862201));
pub const TPM_E_DISABLED_CMD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862200));
pub const TPM_E_FAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862199));
pub const TPM_E_BAD_ORDINAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862198));
pub const TPM_E_INSTALL_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862197));
pub const TPM_E_INVALID_KEYHANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862196));
pub const TPM_E_KEYNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862195));
pub const TPM_E_INAPPROPRIATE_ENC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862194));
pub const TPM_E_MIGRATEFAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862193));
pub const TPM_E_INVALID_PCR_INFO = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862192));
pub const TPM_E_NOSPACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862191));
pub const TPM_E_NOSRK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862190));
pub const TPM_E_NOTSEALED_BLOB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862189));
pub const TPM_E_OWNER_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862188));
pub const TPM_E_RESOURCES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862187));
pub const TPM_E_SHORTRANDOM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862186));
pub const TPM_E_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862185));
pub const TPM_E_WRONGPCRVAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862184));
pub const TPM_E_BAD_PARAM_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862183));
pub const TPM_E_SHA_THREAD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862182));
pub const TPM_E_SHA_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862181));
pub const TPM_E_FAILEDSELFTEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862180));
pub const TPM_E_AUTH2FAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862179));
pub const TPM_E_BADTAG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862178));
pub const TPM_E_IOERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862177));
pub const TPM_E_ENCRYPT_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862176));
pub const TPM_E_DECRYPT_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862175));
pub const TPM_E_INVALID_AUTHHANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862174));
pub const TPM_E_NO_ENDORSEMENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862173));
pub const TPM_E_INVALID_KEYUSAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862172));
pub const TPM_E_WRONG_ENTITYTYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862171));
pub const TPM_E_INVALID_POSTINIT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862170));
pub const TPM_E_INAPPROPRIATE_SIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862169));
pub const TPM_E_BAD_KEY_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862168));
pub const TPM_E_BAD_MIGRATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862167));
pub const TPM_E_BAD_SCHEME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862166));
pub const TPM_E_BAD_DATASIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862165));
pub const TPM_E_BAD_MODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862164));
pub const TPM_E_BAD_PRESENCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862163));
pub const TPM_E_BAD_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862162));
pub const TPM_E_NO_WRAP_TRANSPORT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862161));
pub const TPM_E_AUDITFAIL_UNSUCCESSFUL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862160));
pub const TPM_E_AUDITFAIL_SUCCESSFUL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862159));
pub const TPM_E_NOTRESETABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862158));
pub const TPM_E_NOTLOCAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862157));
pub const TPM_E_BAD_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862156));
pub const TPM_E_INVALID_RESOURCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862155));
pub const TPM_E_NOTFIPS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862154));
pub const TPM_E_INVALID_FAMILY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862153));
pub const TPM_E_NO_NV_PERMISSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862152));
pub const TPM_E_REQUIRES_SIGN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862151));
pub const TPM_E_KEY_NOTSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862150));
pub const TPM_E_AUTH_CONFLICT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862149));
pub const TPM_E_AREA_LOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862148));
pub const TPM_E_BAD_LOCALITY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862147));
pub const TPM_E_READ_ONLY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862146));
pub const TPM_E_PER_NOWRITE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862145));
pub const TPM_E_FAMILYCOUNT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862144));
pub const TPM_E_WRITE_LOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862143));
pub const TPM_E_BAD_ATTRIBUTES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862142));
pub const TPM_E_INVALID_STRUCTURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862141));
pub const TPM_E_KEY_OWNER_CONTROL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862140));
pub const TPM_E_BAD_COUNTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862139));
pub const TPM_E_NOT_FULLWRITE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862138));
pub const TPM_E_CONTEXT_GAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862137));
pub const TPM_E_MAXNVWRITES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862136));
pub const TPM_E_NOOPERATOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862135));
pub const TPM_E_RESOURCEMISSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862134));
pub const TPM_E_DELEGATE_LOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862133));
pub const TPM_E_DELEGATE_FAMILY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862132));
pub const TPM_E_DELEGATE_ADMIN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862131));
pub const TPM_E_TRANSPORT_NOTEXCLUSIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862130));
pub const TPM_E_OWNER_CONTROL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862129));
pub const TPM_E_DAA_RESOURCES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862128));
pub const TPM_E_DAA_INPUT_DATA0 = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862127));
pub const TPM_E_DAA_INPUT_DATA1 = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862126));
pub const TPM_E_DAA_ISSUER_SETTINGS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862125));
pub const TPM_E_DAA_TPM_SETTINGS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862124));
pub const TPM_E_DAA_STAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862123));
pub const TPM_E_DAA_ISSUER_VALIDITY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862122));
pub const TPM_E_DAA_WRONG_W = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862121));
pub const TPM_E_BAD_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862120));
pub const TPM_E_BAD_DELEGATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862119));
pub const TPM_E_BADCONTEXT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862118));
pub const TPM_E_TOOMANYCONTEXTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862117));
pub const TPM_E_MA_TICKET_SIGNATURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862116));
pub const TPM_E_MA_DESTINATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862115));
pub const TPM_E_MA_SOURCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862114));
pub const TPM_E_MA_AUTHORITY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862113));
pub const TPM_E_PERMANENTEK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862111));
pub const TPM_E_BAD_SIGNATURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862110));
pub const TPM_E_NOCONTEXTSPACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862109));
pub const TPM_20_E_ASYMMETRIC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862079));
pub const TPM_20_E_ATTRIBUTES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862078));
pub const TPM_20_E_HASH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862077));
pub const TPM_20_E_VALUE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862076));
pub const TPM_20_E_HIERARCHY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862075));
pub const TPM_20_E_KEY_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862073));
pub const TPM_20_E_MGF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862072));
pub const TPM_20_E_MODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862071));
pub const TPM_20_E_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862070));
pub const TPM_20_E_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862069));
pub const TPM_20_E_KDF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862068));
pub const TPM_20_E_RANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862067));
pub const TPM_20_E_AUTH_FAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862066));
pub const TPM_20_E_NONCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862065));
pub const TPM_20_E_PP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862064));
pub const TPM_20_E_SCHEME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862062));
pub const TPM_20_E_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862059));
pub const TPM_20_E_SYMMETRIC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862058));
pub const TPM_20_E_TAG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862057));
pub const TPM_20_E_SELECTOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862056));
pub const TPM_20_E_INSUFFICIENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862054));
pub const TPM_20_E_SIGNATURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862053));
pub const TPM_20_E_KEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862052));
pub const TPM_20_E_POLICY_FAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862051));
pub const TPM_20_E_INTEGRITY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862049));
pub const TPM_20_E_TICKET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862048));
pub const TPM_20_E_RESERVED_BITS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862047));
pub const TPM_20_E_BAD_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862046));
pub const TPM_20_E_EXPIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862045));
pub const TPM_20_E_POLICY_CC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862044));
pub const TPM_20_E_BINDING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862043));
pub const TPM_20_E_CURVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862042));
pub const TPM_20_E_ECC_POINT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862041));
pub const TPM_20_E_INITIALIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861952));
pub const TPM_20_E_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861951));
pub const TPM_20_E_SEQUENCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861949));
pub const TPM_20_E_PRIVATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861941));
pub const TPM_20_E_HMAC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861927));
pub const TPM_20_E_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861920));
pub const TPM_20_E_EXCLUSIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861919));
pub const TPM_20_E_ECC_CURVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861917));
pub const TPM_20_E_AUTH_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861916));
pub const TPM_20_E_AUTH_MISSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861915));
pub const TPM_20_E_POLICY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861914));
pub const TPM_20_E_PCR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861913));
pub const TPM_20_E_PCR_CHANGED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861912));
pub const TPM_20_E_UPGRADE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861907));
pub const TPM_20_E_TOO_MANY_CONTEXTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861906));
pub const TPM_20_E_AUTH_UNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861905));
pub const TPM_20_E_REBOOT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861904));
pub const TPM_20_E_UNBALANCED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861903));
pub const TPM_20_E_COMMAND_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861886));
pub const TPM_20_E_COMMAND_CODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861885));
pub const TPM_20_E_AUTHSIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861884));
pub const TPM_20_E_AUTH_CONTEXT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861883));
pub const TPM_20_E_NV_RANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861882));
pub const TPM_20_E_NV_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861881));
pub const TPM_20_E_NV_LOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861880));
pub const TPM_20_E_NV_AUTHORIZATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861879));
pub const TPM_20_E_NV_UNINITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861878));
pub const TPM_20_E_NV_SPACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861877));
pub const TPM_20_E_NV_DEFINED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861876));
pub const TPM_20_E_BAD_CONTEXT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861872));
pub const TPM_20_E_CPHASH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861871));
pub const TPM_20_E_PARENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861870));
pub const TPM_20_E_NEEDS_TEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861869));
pub const TPM_20_E_NO_RESULT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861868));
pub const TPM_20_E_SENSITIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861867));
pub const TPM_E_COMMAND_BLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861184));
pub const TPM_E_INVALID_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861183));
pub const TPM_E_DUPLICATE_VHANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861182));
pub const TPM_E_EMBEDDED_COMMAND_BLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861181));
pub const TPM_E_EMBEDDED_COMMAND_UNSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861180));
pub const TPM_E_RETRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144860160));
pub const TPM_E_NEEDS_SELFTEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144860159));
pub const TPM_E_DOING_SELFTEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144860158));
pub const TPM_E_DEFEND_LOCK_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144860157));
pub const TPM_20_E_CONTEXT_GAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859903));
pub const TPM_20_E_OBJECT_MEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859902));
pub const TPM_20_E_SESSION_MEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859901));
pub const TPM_20_E_MEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859900));
pub const TPM_20_E_SESSION_HANDLES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859899));
pub const TPM_20_E_OBJECT_HANDLES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859898));
pub const TPM_20_E_LOCALITY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859897));
pub const TPM_20_E_YIELDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859896));
pub const TPM_20_E_CANCELED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859895));
pub const TPM_20_E_TESTING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859894));
pub const TPM_20_E_NV_RATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859872));
pub const TPM_20_E_LOCKOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859871));
pub const TPM_20_E_RETRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859870));
pub const TPM_20_E_NV_UNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859869));
pub const TBS_E_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845823));
pub const TBS_E_BAD_PARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845822));
pub const TBS_E_INVALID_OUTPUT_POINTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845821));
pub const TBS_E_INVALID_CONTEXT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845820));
pub const TBS_E_INSUFFICIENT_BUFFER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845819));
pub const TBS_E_IOERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845818));
pub const TBS_E_INVALID_CONTEXT_PARAM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845817));
pub const TBS_E_SERVICE_NOT_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845816));
pub const TBS_E_TOO_MANY_TBS_CONTEXTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845815));
pub const TBS_E_TOO_MANY_RESOURCES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845814));
pub const TBS_E_SERVICE_START_PENDING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845813));
pub const TBS_E_PPI_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845812));
pub const TBS_E_COMMAND_CANCELED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845811));
pub const TBS_E_BUFFER_TOO_LARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845810));
pub const TBS_E_TPM_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845809));
pub const TBS_E_SERVICE_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845808));
pub const TBS_E_NO_EVENT_LOG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845807));
pub const TBS_E_ACCESS_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845806));
pub const TBS_E_PROVISIONING_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845805));
pub const TBS_E_PPI_FUNCTION_UNSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845804));
pub const TBS_E_OWNERAUTH_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845803));
pub const TBS_E_PROVISIONING_INCOMPLETE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845802));
pub const TPMAPI_E_INVALID_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796416));
pub const TPMAPI_E_NOT_ENOUGH_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796415));
pub const TPMAPI_E_TOO_MUCH_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796414));
pub const TPMAPI_E_INVALID_OUTPUT_POINTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796413));
pub const TPMAPI_E_INVALID_PARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796412));
pub const TPMAPI_E_OUT_OF_MEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796411));
pub const TPMAPI_E_BUFFER_TOO_SMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796410));
pub const TPMAPI_E_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796409));
pub const TPMAPI_E_ACCESS_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796408));
pub const TPMAPI_E_AUTHORIZATION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796407));
pub const TPMAPI_E_INVALID_CONTEXT_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796406));
pub const TPMAPI_E_TBS_COMMUNICATION_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796405));
pub const TPMAPI_E_TPM_COMMAND_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796404));
pub const TPMAPI_E_MESSAGE_TOO_LARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796403));
pub const TPMAPI_E_INVALID_ENCODING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796402));
pub const TPMAPI_E_INVALID_KEY_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796401));
pub const TPMAPI_E_ENCRYPTION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796400));
pub const TPMAPI_E_INVALID_KEY_PARAMS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796399));
pub const TPMAPI_E_INVALID_MIGRATION_AUTHORIZATION_BLOB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796398));
pub const TPMAPI_E_INVALID_PCR_INDEX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796397));
pub const TPMAPI_E_INVALID_DELEGATE_BLOB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796396));
pub const TPMAPI_E_INVALID_CONTEXT_PARAMS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796395));
pub const TPMAPI_E_INVALID_KEY_BLOB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796394));
pub const TPMAPI_E_INVALID_PCR_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796393));
pub const TPMAPI_E_INVALID_OWNER_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796392));
pub const TPMAPI_E_FIPS_RNG_CHECK_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796391));
pub const TPMAPI_E_EMPTY_TCG_LOG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796390));
pub const TPMAPI_E_INVALID_TCG_LOG_ENTRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796389));
pub const TPMAPI_E_TCG_SEPARATOR_ABSENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796388));
pub const TPMAPI_E_TCG_INVALID_DIGEST_ENTRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796387));
pub const TPMAPI_E_POLICY_DENIES_OPERATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796386));
pub const TPMAPI_E_NV_BITS_NOT_DEFINED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796385));
pub const TPMAPI_E_NV_BITS_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796384));
pub const TPMAPI_E_SEALING_KEY_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796383));
pub const TPMAPI_E_NO_AUTHORIZATION_CHAIN_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796382));
pub const TPMAPI_E_SVN_COUNTER_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796381));
pub const TPMAPI_E_OWNER_AUTH_NOT_NULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796380));
pub const TPMAPI_E_ENDORSEMENT_AUTH_NOT_NULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796379));
pub const TPMAPI_E_AUTHORIZATION_REVOKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796378));
pub const TPMAPI_E_MALFORMED_AUTHORIZATION_KEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796377));
pub const TPMAPI_E_AUTHORIZING_KEY_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796376));
pub const TPMAPI_E_INVALID_AUTHORIZATION_SIGNATURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796375));
pub const TPMAPI_E_MALFORMED_AUTHORIZATION_POLICY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796374));
pub const TPMAPI_E_MALFORMED_AUTHORIZATION_OTHER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796373));
pub const TPMAPI_E_SEALING_KEY_CHANGED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796372));
pub const TPMAPI_E_INVALID_TPM_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796371));
pub const TPMAPI_E_INVALID_POLICYAUTH_BLOB_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796370));
pub const TBSIMP_E_BUFFER_TOO_SMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796160));
pub const TBSIMP_E_CLEANUP_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796159));
pub const TBSIMP_E_INVALID_CONTEXT_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796158));
pub const TBSIMP_E_INVALID_CONTEXT_PARAM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796157));
pub const TBSIMP_E_TPM_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796156));
pub const TBSIMP_E_HASH_BAD_KEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796155));
pub const TBSIMP_E_DUPLICATE_VHANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796154));
pub const TBSIMP_E_INVALID_OUTPUT_POINTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796153));
pub const TBSIMP_E_INVALID_PARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796152));
pub const TBSIMP_E_RPC_INIT_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796151));
pub const TBSIMP_E_SCHEDULER_NOT_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796150));
pub const TBSIMP_E_COMMAND_CANCELED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796149));
pub const TBSIMP_E_OUT_OF_MEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796148));
pub const TBSIMP_E_LIST_NO_MORE_ITEMS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796147));
pub const TBSIMP_E_LIST_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796146));
pub const TBSIMP_E_NOT_ENOUGH_SPACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796145));
pub const TBSIMP_E_NOT_ENOUGH_TPM_CONTEXTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796144));
pub const TBSIMP_E_COMMAND_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796143));
pub const TBSIMP_E_UNKNOWN_ORDINAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796142));
pub const TBSIMP_E_RESOURCE_EXPIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796141));
pub const TBSIMP_E_INVALID_RESOURCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796140));
pub const TBSIMP_E_NOTHING_TO_UNLOAD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796139));
pub const TBSIMP_E_HASH_TABLE_FULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796138));
pub const TBSIMP_E_TOO_MANY_TBS_CONTEXTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796137));
pub const TBSIMP_E_TOO_MANY_RESOURCES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796136));
pub const TBSIMP_E_PPI_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796135));
pub const TBSIMP_E_TPM_INCOMPATIBLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796134));
pub const TBSIMP_E_NO_EVENT_LOG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796133));
pub const TPM_E_PPI_ACPI_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795904));
pub const TPM_E_PPI_USER_ABORT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795903));
pub const TPM_E_PPI_BIOS_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795902));
pub const TPM_E_PPI_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795901));
pub const TPM_E_PPI_BLOCKED_IN_BIOS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795900));
pub const TPM_E_PCP_ERROR_MASK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795648));
pub const TPM_E_PCP_DEVICE_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795647));
pub const TPM_E_PCP_INVALID_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795646));
pub const TPM_E_PCP_INVALID_PARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795645));
pub const TPM_E_PCP_FLAG_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795644));
pub const TPM_E_PCP_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795643));
pub const TPM_E_PCP_BUFFER_TOO_SMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795642));
pub const TPM_E_PCP_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795641));
pub const TPM_E_PCP_AUTHENTICATION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795640));
pub const TPM_E_PCP_AUTHENTICATION_IGNORED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795639));
pub const TPM_E_PCP_POLICY_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795638));
pub const TPM_E_PCP_PROFILE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795637));
pub const TPM_E_PCP_VALIDATION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795636));
pub const TPM_E_PCP_WRONG_PARENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795634));
pub const TPM_E_KEY_NOT_LOADED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795633));
pub const TPM_E_NO_KEY_CERTIFICATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795632));
pub const TPM_E_KEY_NOT_FINALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795631));
pub const TPM_E_ATTESTATION_CHALLENGE_NOT_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795630));
pub const TPM_E_NOT_PCR_BOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795629));
pub const TPM_E_KEY_ALREADY_FINALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795628));
pub const TPM_E_KEY_USAGE_POLICY_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795627));
pub const TPM_E_KEY_USAGE_POLICY_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795626));
pub const TPM_E_SOFT_KEY_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795625));
pub const TPM_E_KEY_NOT_AUTHENTICATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795624));
pub const TPM_E_PCP_KEY_NOT_AIK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795623));
pub const TPM_E_KEY_NOT_SIGNING_KEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795622));
pub const TPM_E_LOCKED_OUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795621));
pub const TPM_E_CLAIM_TYPE_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795620));
pub const TPM_E_VERSION_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795619));
pub const TPM_E_BUFFER_LENGTH_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795618));
pub const TPM_E_PCP_IFX_RSA_KEY_CREATION_BLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795617));
pub const TPM_E_PCP_TICKET_MISSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795616));
pub const TPM_E_PCP_RAW_POLICY_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795615));
pub const TPM_E_PCP_KEY_HANDLE_INVALIDATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795614));
pub const TPM_E_PCP_UNSUPPORTED_PSS_SALT = @import("zig.zig").typedConst(HRESULT, @as(i32, 1076429859));
pub const TPM_E_PCP_PLATFORM_CLAIM_MAY_BE_OUTDATED = @import("zig.zig").typedConst(HRESULT, @as(i32, 1076429860));
pub const TPM_E_PCP_PLATFORM_CLAIM_OUTDATED = @import("zig.zig").typedConst(HRESULT, @as(i32, 1076429861));
pub const TPM_E_PCP_PLATFORM_CLAIM_REBOOT = @import("zig.zig").typedConst(HRESULT, @as(i32, 1076429862));
pub const TPM_E_ZERO_EXHAUST_ENABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795392));
pub const TPM_E_PROVISIONING_INCOMPLETE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795136));
pub const TPM_E_INVALID_OWNER_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795135));
pub const TPM_E_TOO_MUCH_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795134));
pub const PLA_E_DCS_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337918));
pub const PLA_E_DCS_IN_USE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337750));
pub const PLA_E_TOO_MANY_FOLDERS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337851));
pub const PLA_E_NO_MIN_DISK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337808));
pub const PLA_E_DCS_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337737));
pub const PLA_S_PROPERTY_IGNORED = @import("zig.zig").typedConst(HRESULT, @as(i32, 3145984));
pub const PLA_E_PROPERTY_CONFLICT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337663));
pub const PLA_E_DCS_SINGLETON_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337662));
pub const PLA_E_CREDENTIALS_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337661));
pub const PLA_E_DCS_NOT_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337660));
pub const PLA_E_CONFLICT_INCL_EXCL_API = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337659));
pub const PLA_E_NETWORK_EXE_NOT_VALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337658));
pub const PLA_E_EXE_ALREADY_CONFIGURED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337657));
pub const PLA_E_EXE_PATH_NOT_VALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337656));
pub const PLA_E_DC_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337655));
pub const PLA_E_DCS_START_WAIT_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337654));
pub const PLA_E_DC_START_WAIT_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337653));
pub const PLA_E_REPORT_WAIT_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337652));
pub const PLA_E_NO_DUPLICATES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337651));
pub const PLA_E_EXE_FULL_PATH_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337650));
pub const PLA_E_INVALID_SESSION_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337649));
pub const PLA_E_PLA_CHANNEL_NOT_ENABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337648));
pub const PLA_E_TASKSCHED_CHANNEL_NOT_ENABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337647));
pub const PLA_E_RULES_MANAGER_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337646));
pub const PLA_E_CABAPI_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337645));
pub const FVE_E_LOCKED_VOLUME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272384));
pub const FVE_E_NOT_ENCRYPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272383));
pub const FVE_E_NO_TPM_BIOS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272382));
pub const FVE_E_NO_MBR_METRIC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272381));
pub const FVE_E_NO_BOOTSECTOR_METRIC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272380));
pub const FVE_E_NO_BOOTMGR_METRIC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272379));
pub const FVE_E_WRONG_BOOTMGR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272378));
pub const FVE_E_SECURE_KEY_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272377));
pub const FVE_E_NOT_ACTIVATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272376));
pub const FVE_E_ACTION_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272375));
pub const FVE_E_AD_SCHEMA_NOT_INSTALLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272374));
pub const FVE_E_AD_INVALID_DATATYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272373));
pub const FVE_E_AD_INVALID_DATASIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272372));
pub const FVE_E_AD_NO_VALUES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272371));
pub const FVE_E_AD_ATTR_NOT_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272370));
pub const FVE_E_AD_GUID_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272369));
pub const FVE_E_BAD_INFORMATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272368));
pub const FVE_E_TOO_SMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272367));
pub const FVE_E_SYSTEM_VOLUME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272366));
pub const FVE_E_FAILED_WRONG_FS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272365));
pub const FVE_E_BAD_PARTITION_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272364));
pub const FVE_E_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272363));
pub const FVE_E_BAD_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272362));
pub const FVE_E_VOLUME_NOT_BOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272361));
pub const FVE_E_TPM_NOT_OWNED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272360));
pub const FVE_E_NOT_DATA_VOLUME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272359));
pub const FVE_E_AD_INSUFFICIENT_BUFFER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272358));
pub const FVE_E_CONV_READ = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272357));
pub const FVE_E_CONV_WRITE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272356));
pub const FVE_E_KEY_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272355));
pub const FVE_E_CLUSTERING_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272354));
pub const FVE_E_VOLUME_BOUND_ALREADY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272353));
pub const FVE_E_OS_NOT_PROTECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272352));
pub const FVE_E_PROTECTION_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272351));
pub const FVE_E_RECOVERY_KEY_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272350));
pub const FVE_E_FOREIGN_VOLUME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272349));
pub const FVE_E_OVERLAPPED_UPDATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272348));
pub const FVE_E_TPM_SRK_AUTH_NOT_ZERO = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272347));
pub const FVE_E_FAILED_SECTOR_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272346));
pub const FVE_E_FAILED_AUTHENTICATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272345));
pub const FVE_E_NOT_OS_VOLUME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272344));
pub const FVE_E_AUTOUNLOCK_ENABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272343));
pub const FVE_E_WRONG_BOOTSECTOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272342));
pub const FVE_E_WRONG_SYSTEM_FS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272341));
pub const FVE_E_POLICY_PASSWORD_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272340));
pub const FVE_E_CANNOT_SET_FVEK_ENCRYPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272339));
pub const FVE_E_CANNOT_ENCRYPT_NO_KEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272338));
pub const FVE_E_BOOTABLE_CDDVD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272336));
pub const FVE_E_PROTECTOR_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272335));
pub const FVE_E_RELATIVE_PATH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272334));
pub const FVE_E_PROTECTOR_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272333));
pub const FVE_E_INVALID_KEY_FORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272332));
pub const FVE_E_INVALID_PASSWORD_FORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272331));
pub const FVE_E_FIPS_RNG_CHECK_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272330));
pub const FVE_E_FIPS_PREVENTS_RECOVERY_PASSWORD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272329));
pub const FVE_E_FIPS_PREVENTS_EXTERNAL_KEY_EXPORT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272328));
pub const FVE_E_NOT_DECRYPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272327));
pub const FVE_E_INVALID_PROTECTOR_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272326));
pub const FVE_E_NO_PROTECTORS_TO_TEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272325));
pub const FVE_E_KEYFILE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272324));
pub const FVE_E_KEYFILE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272323));
pub const FVE_E_KEYFILE_NO_VMK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272322));
pub const FVE_E_TPM_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272321));
pub const FVE_E_NOT_ALLOWED_IN_SAFE_MODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272320));
pub const FVE_E_TPM_INVALID_PCR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272319));
pub const FVE_E_TPM_NO_VMK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272318));
pub const FVE_E_PIN_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272317));
pub const FVE_E_AUTH_INVALID_APPLICATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272316));
pub const FVE_E_AUTH_INVALID_CONFIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272315));
pub const FVE_E_FIPS_DISABLE_PROTECTION_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272314));
pub const FVE_E_FS_NOT_EXTENDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272313));
pub const FVE_E_FIRMWARE_TYPE_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272312));
pub const FVE_E_NO_LICENSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272311));
pub const FVE_E_NOT_ON_STACK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272310));
pub const FVE_E_FS_MOUNTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272309));
pub const FVE_E_TOKEN_NOT_IMPERSONATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272308));
pub const FVE_E_DRY_RUN_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272307));
pub const FVE_E_REBOOT_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272306));
pub const FVE_E_DEBUGGER_ENABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272305));
pub const FVE_E_RAW_ACCESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272304));
pub const FVE_E_RAW_BLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272303));
pub const FVE_E_BCD_APPLICATIONS_PATH_INCORRECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272302));
pub const FVE_E_NOT_ALLOWED_IN_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272301));
pub const FVE_E_NO_AUTOUNLOCK_MASTER_KEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272300));
pub const FVE_E_MOR_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272299));
pub const FVE_E_HIDDEN_VOLUME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272298));
pub const FVE_E_TRANSIENT_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272297));
pub const FVE_E_PUBKEY_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272296));
pub const FVE_E_VOLUME_HANDLE_OPEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272295));
pub const FVE_E_NO_FEATURE_LICENSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272294));
pub const FVE_E_INVALID_STARTUP_OPTIONS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272293));
pub const FVE_E_POLICY_RECOVERY_PASSWORD_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272292));
pub const FVE_E_POLICY_RECOVERY_PASSWORD_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272291));
pub const FVE_E_POLICY_RECOVERY_KEY_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272290));
pub const FVE_E_POLICY_RECOVERY_KEY_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272289));
pub const FVE_E_POLICY_STARTUP_PIN_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272288));
pub const FVE_E_POLICY_STARTUP_PIN_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272287));
pub const FVE_E_POLICY_STARTUP_KEY_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272286));
pub const FVE_E_POLICY_STARTUP_KEY_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272285));
pub const FVE_E_POLICY_STARTUP_PIN_KEY_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272284));
pub const FVE_E_POLICY_STARTUP_PIN_KEY_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272283));
pub const FVE_E_POLICY_STARTUP_TPM_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272282));
pub const FVE_E_POLICY_STARTUP_TPM_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272281));
pub const FVE_E_POLICY_INVALID_PIN_LENGTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272280));
pub const FVE_E_KEY_PROTECTOR_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272279));
pub const FVE_E_POLICY_PASSPHRASE_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272278));
pub const FVE_E_POLICY_PASSPHRASE_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272277));
pub const FVE_E_FIPS_PREVENTS_PASSPHRASE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272276));
pub const FVE_E_OS_VOLUME_PASSPHRASE_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272275));
pub const FVE_E_INVALID_BITLOCKER_OID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272274));
pub const FVE_E_VOLUME_TOO_SMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272273));
pub const FVE_E_DV_NOT_SUPPORTED_ON_FS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272272));
pub const FVE_E_DV_NOT_ALLOWED_BY_GP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272271));
pub const FVE_E_POLICY_USER_CERTIFICATE_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272270));
pub const FVE_E_POLICY_USER_CERTIFICATE_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272269));
pub const FVE_E_POLICY_USER_CERT_MUST_BE_HW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272268));
pub const FVE_E_POLICY_USER_CONFIGURE_FDV_AUTOUNLOCK_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272267));
pub const FVE_E_POLICY_USER_CONFIGURE_RDV_AUTOUNLOCK_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272266));
pub const FVE_E_POLICY_USER_CONFIGURE_RDV_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272265));
pub const FVE_E_POLICY_USER_ENABLE_RDV_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272264));
pub const FVE_E_POLICY_USER_DISABLE_RDV_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272263));
pub const FVE_E_POLICY_INVALID_PASSPHRASE_LENGTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272256));
pub const FVE_E_POLICY_PASSPHRASE_TOO_SIMPLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272255));
pub const FVE_E_RECOVERY_PARTITION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272254));
pub const FVE_E_POLICY_CONFLICT_FDV_RK_OFF_AUK_ON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272253));
pub const FVE_E_POLICY_CONFLICT_RDV_RK_OFF_AUK_ON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272252));
pub const FVE_E_NON_BITLOCKER_OID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272251));
pub const FVE_E_POLICY_PROHIBITS_SELFSIGNED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272250));
pub const FVE_E_POLICY_CONFLICT_RO_AND_STARTUP_KEY_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272249));
pub const FVE_E_CONV_RECOVERY_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272248));
pub const FVE_E_VIRTUALIZED_SPACE_TOO_BIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272247));
pub const FVE_E_POLICY_CONFLICT_OSV_RP_OFF_ADB_ON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272240));
pub const FVE_E_POLICY_CONFLICT_FDV_RP_OFF_ADB_ON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272239));
pub const FVE_E_POLICY_CONFLICT_RDV_RP_OFF_ADB_ON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272238));
pub const FVE_E_NON_BITLOCKER_KU = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272237));
pub const FVE_E_PRIVATEKEY_AUTH_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272236));
pub const FVE_E_REMOVAL_OF_DRA_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272235));
pub const FVE_E_OPERATION_NOT_SUPPORTED_ON_VISTA_VOLUME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272234));
pub const FVE_E_CANT_LOCK_AUTOUNLOCK_ENABLED_VOLUME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272233));
pub const FVE_E_FIPS_HASH_KDF_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272232));
pub const FVE_E_ENH_PIN_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272231));
pub const FVE_E_INVALID_PIN_CHARS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272230));
pub const FVE_E_INVALID_DATUM_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272229));
pub const FVE_E_EFI_ONLY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272228));
pub const FVE_E_MULTIPLE_NKP_CERTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272227));
pub const FVE_E_REMOVAL_OF_NKP_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272226));
pub const FVE_E_INVALID_NKP_CERT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272225));
pub const FVE_E_NO_EXISTING_PIN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272224));
pub const FVE_E_PROTECTOR_CHANGE_PIN_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272223));
pub const FVE_E_PIN_PROTECTOR_CHANGE_BY_STD_USER_DISALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272222));
pub const FVE_E_PROTECTOR_CHANGE_MAX_PIN_CHANGE_ATTEMPTS_REACHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272221));
pub const FVE_E_POLICY_PASSPHRASE_REQUIRES_ASCII = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272220));
pub const FVE_E_FULL_ENCRYPTION_NOT_ALLOWED_ON_TP_STORAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272219));
pub const FVE_E_WIPE_NOT_ALLOWED_ON_TP_STORAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272218));
pub const FVE_E_KEY_LENGTH_NOT_SUPPORTED_BY_EDRIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272217));
pub const FVE_E_NO_EXISTING_PASSPHRASE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272216));
pub const FVE_E_PROTECTOR_CHANGE_PASSPHRASE_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272215));
pub const FVE_E_PASSPHRASE_TOO_LONG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272214));
pub const FVE_E_NO_PASSPHRASE_WITH_TPM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272213));
pub const FVE_E_NO_TPM_WITH_PASSPHRASE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272212));
pub const FVE_E_NOT_ALLOWED_ON_CSV_STACK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272211));
pub const FVE_E_NOT_ALLOWED_ON_CLUSTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272210));
pub const FVE_E_EDRIVE_NO_FAILOVER_TO_SW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272209));
pub const FVE_E_EDRIVE_BAND_IN_USE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272208));
pub const FVE_E_EDRIVE_DISALLOWED_BY_GP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272207));
pub const FVE_E_EDRIVE_INCOMPATIBLE_VOLUME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272206));
pub const FVE_E_NOT_ALLOWED_TO_UPGRADE_WHILE_CONVERTING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272205));
pub const FVE_E_EDRIVE_DV_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272204));
pub const FVE_E_NO_PREBOOT_KEYBOARD_DETECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272203));
pub const FVE_E_NO_PREBOOT_KEYBOARD_OR_WINRE_DETECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272202));
pub const FVE_E_POLICY_REQUIRES_STARTUP_PIN_ON_TOUCH_DEVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272201));
pub const FVE_E_POLICY_REQUIRES_RECOVERY_PASSWORD_ON_TOUCH_DEVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272200));
pub const FVE_E_WIPE_CANCEL_NOT_APPLICABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272199));
pub const FVE_E_SECUREBOOT_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272198));
pub const FVE_E_SECUREBOOT_CONFIGURATION_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272197));
pub const FVE_E_EDRIVE_DRY_RUN_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272196));
pub const FVE_E_SHADOW_COPY_PRESENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272195));
pub const FVE_E_POLICY_INVALID_ENHANCED_BCD_SETTINGS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272194));
pub const FVE_E_EDRIVE_INCOMPATIBLE_FIRMWARE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272193));
pub const FVE_E_PROTECTOR_CHANGE_MAX_PASSPHRASE_CHANGE_ATTEMPTS_REACHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272192));
pub const FVE_E_PASSPHRASE_PROTECTOR_CHANGE_BY_STD_USER_DISALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272191));
pub const FVE_E_LIVEID_ACCOUNT_SUSPENDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272190));
pub const FVE_E_LIVEID_ACCOUNT_BLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272189));
pub const FVE_E_NOT_PROVISIONED_ON_ALL_VOLUMES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272188));
pub const FVE_E_DE_FIXED_DATA_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272187));
pub const FVE_E_DE_HARDWARE_NOT_COMPLIANT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272186));
pub const FVE_E_DE_WINRE_NOT_CONFIGURED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272185));
pub const FVE_E_DE_PROTECTION_SUSPENDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272184));
pub const FVE_E_DE_OS_VOLUME_NOT_PROTECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272183));
pub const FVE_E_DE_DEVICE_LOCKEDOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272182));
pub const FVE_E_DE_PROTECTION_NOT_YET_ENABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272181));
pub const FVE_E_INVALID_PIN_CHARS_DETAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272180));
pub const FVE_E_DEVICE_LOCKOUT_COUNTER_UNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272179));
pub const FVE_E_DEVICELOCKOUT_COUNTER_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272178));
pub const FVE_E_BUFFER_TOO_LARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272177));
pub const FVE_E_NO_SUCH_CAPABILITY_ON_TARGET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272176));
pub const FVE_E_DE_PREVENTED_FOR_OS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272175));
pub const FVE_E_DE_VOLUME_OPTED_OUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272174));
pub const FVE_E_DE_VOLUME_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272173));
pub const FVE_E_EOW_NOT_SUPPORTED_IN_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272172));
pub const FVE_E_ADBACKUP_NOT_ENABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272171));
pub const FVE_E_VOLUME_EXTEND_PREVENTS_EOW_DECRYPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272170));
pub const FVE_E_NOT_DE_VOLUME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272169));
pub const FVE_E_PROTECTION_CANNOT_BE_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272168));
pub const FVE_E_OSV_KSR_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272167));
pub const FVE_E_AD_BACKUP_REQUIRED_POLICY_NOT_SET_OS_DRIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272166));
pub const FVE_E_AD_BACKUP_REQUIRED_POLICY_NOT_SET_FIXED_DRIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272165));
pub const FVE_E_AD_BACKUP_REQUIRED_POLICY_NOT_SET_REMOVABLE_DRIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272164));
pub const FVE_E_KEY_ROTATION_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272163));
pub const FVE_E_EXECUTE_REQUEST_SENT_TOO_SOON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272162));
pub const FVE_E_KEY_ROTATION_NOT_ENABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272161));
pub const FVE_E_DEVICE_NOT_JOINED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272160));
pub const FVE_E_AAD_ENDPOINT_BUSY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272159));
pub const FVE_E_INVALID_NBP_CERT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272158));
pub const FVE_E_EDRIVE_BAND_ENUMERATION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272157));
pub const FVE_E_POLICY_ON_RDV_EXCLUSION_LIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272156));
pub const FVE_E_PREDICTED_TPM_PROTECTOR_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272155));
pub const FVE_E_SETUP_TPM_CALLBACK_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272154));
pub const FVE_E_TPM_CONTEXT_SETUP_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272153));
pub const FWP_E_CALLOUT_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206847));
pub const FWP_E_CONDITION_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206846));
pub const FWP_E_FILTER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206845));
pub const FWP_E_LAYER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206844));
pub const FWP_E_PROVIDER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206843));
pub const FWP_E_PROVIDER_CONTEXT_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206842));
pub const FWP_E_SUBLAYER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206841));
pub const FWP_E_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206840));
pub const FWP_E_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206839));
pub const FWP_E_IN_USE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206838));
pub const FWP_E_DYNAMIC_SESSION_IN_PROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206837));
pub const FWP_E_WRONG_SESSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206836));
pub const FWP_E_NO_TXN_IN_PROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206835));
pub const FWP_E_TXN_IN_PROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206834));
pub const FWP_E_TXN_ABORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206833));
pub const FWP_E_SESSION_ABORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206832));
pub const FWP_E_INCOMPATIBLE_TXN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206831));
pub const FWP_E_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206830));
pub const FWP_E_NET_EVENTS_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206829));
pub const FWP_E_INCOMPATIBLE_LAYER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206828));
pub const FWP_E_KM_CLIENTS_ONLY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206827));
pub const FWP_E_LIFETIME_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206826));
pub const FWP_E_BUILTIN_OBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206825));
pub const FWP_E_TOO_MANY_CALLOUTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206824));
pub const FWP_E_NOTIFICATION_DROPPED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206823));
pub const FWP_E_TRAFFIC_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206822));
pub const FWP_E_INCOMPATIBLE_SA_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206821));
pub const FWP_E_NULL_POINTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206820));
pub const FWP_E_INVALID_ENUMERATOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206819));
pub const FWP_E_INVALID_FLAGS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206818));
pub const FWP_E_INVALID_NET_MASK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206817));
pub const FWP_E_INVALID_RANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206816));
pub const FWP_E_INVALID_INTERVAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206815));
pub const FWP_E_ZERO_LENGTH_ARRAY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206814));
pub const FWP_E_NULL_DISPLAY_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206813));
pub const FWP_E_INVALID_ACTION_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206812));
pub const FWP_E_INVALID_WEIGHT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206811));
pub const FWP_E_MATCH_TYPE_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206810));
pub const FWP_E_TYPE_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206809));
pub const FWP_E_OUT_OF_BOUNDS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206808));
pub const FWP_E_RESERVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206807));
pub const FWP_E_DUPLICATE_CONDITION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206806));
pub const FWP_E_DUPLICATE_KEYMOD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206805));
pub const FWP_E_ACTION_INCOMPATIBLE_WITH_LAYER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206804));
pub const FWP_E_ACTION_INCOMPATIBLE_WITH_SUBLAYER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206803));
pub const FWP_E_CONTEXT_INCOMPATIBLE_WITH_LAYER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206802));
pub const FWP_E_CONTEXT_INCOMPATIBLE_WITH_CALLOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206801));
pub const FWP_E_INCOMPATIBLE_AUTH_METHOD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206800));
pub const FWP_E_INCOMPATIBLE_DH_GROUP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206799));
pub const FWP_E_EM_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206798));
pub const FWP_E_NEVER_MATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206797));
pub const FWP_E_PROVIDER_CONTEXT_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206796));
pub const FWP_E_INVALID_PARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206795));
pub const FWP_E_TOO_MANY_SUBLAYERS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206794));
pub const FWP_E_CALLOUT_NOTIFICATION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206793));
pub const FWP_E_INVALID_AUTH_TRANSFORM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206792));
pub const FWP_E_INVALID_CIPHER_TRANSFORM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206791));
pub const FWP_E_INCOMPATIBLE_CIPHER_TRANSFORM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206790));
pub const FWP_E_INVALID_TRANSFORM_COMBINATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206789));
pub const FWP_E_DUPLICATE_AUTH_METHOD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206788));
pub const FWP_E_INVALID_TUNNEL_ENDPOINT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206787));
pub const FWP_E_L2_DRIVER_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206786));
pub const FWP_E_KEY_DICTATOR_ALREADY_REGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206785));
pub const FWP_E_KEY_DICTATION_INVALID_KEYING_MATERIAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206784));
pub const FWP_E_CONNECTIONS_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206783));
pub const FWP_E_INVALID_DNS_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206782));
pub const FWP_E_STILL_ON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206781));
pub const FWP_E_IKEEXT_NOT_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206780));
pub const FWP_E_DROP_NOICMP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206588));
pub const WS_S_ASYNC = @import("zig.zig").typedConst(HRESULT, @as(i32, 3997696));
pub const WS_S_END = @import("zig.zig").typedConst(HRESULT, @as(i32, 3997697));
pub const WS_E_INVALID_FORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485952));
pub const WS_E_OBJECT_FAULTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485951));
pub const WS_E_NUMERIC_OVERFLOW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485950));
pub const WS_E_INVALID_OPERATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485949));
pub const WS_E_OPERATION_ABORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485948));
pub const WS_E_ENDPOINT_ACCESS_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485947));
pub const WS_E_OPERATION_TIMED_OUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485946));
pub const WS_E_OPERATION_ABANDONED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485945));
pub const WS_E_QUOTA_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485944));
pub const WS_E_NO_TRANSLATION_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485943));
pub const WS_E_SECURITY_VERIFICATION_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485942));
pub const WS_E_ADDRESS_IN_USE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485941));
pub const WS_E_ADDRESS_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485940));
pub const WS_E_ENDPOINT_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485939));
pub const WS_E_ENDPOINT_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485938));
pub const WS_E_ENDPOINT_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485937));
pub const WS_E_ENDPOINT_UNREACHABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485936));
pub const WS_E_ENDPOINT_ACTION_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485935));
pub const WS_E_ENDPOINT_TOO_BUSY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485934));
pub const WS_E_ENDPOINT_FAULT_RECEIVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485933));
pub const WS_E_ENDPOINT_DISCONNECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485932));
pub const WS_E_PROXY_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485931));
pub const WS_E_PROXY_ACCESS_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485930));
pub const WS_E_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485929));
pub const WS_E_PROXY_REQUIRES_BASIC_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485928));
pub const WS_E_PROXY_REQUIRES_DIGEST_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485927));
pub const WS_E_PROXY_REQUIRES_NTLM_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485926));
pub const WS_E_PROXY_REQUIRES_NEGOTIATE_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485925));
pub const WS_E_SERVER_REQUIRES_BASIC_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485924));
pub const WS_E_SERVER_REQUIRES_DIGEST_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485923));
pub const WS_E_SERVER_REQUIRES_NTLM_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485922));
pub const WS_E_SERVER_REQUIRES_NEGOTIATE_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485921));
pub const WS_E_INVALID_ENDPOINT_URL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485920));
pub const WS_E_OTHER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485919));
pub const WS_E_SECURITY_TOKEN_EXPIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485918));
pub const WS_E_SECURITY_SYSTEM_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485917));
pub const HCS_E_TERMINATED_DURING_START = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878912));
pub const HCS_E_IMAGE_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878911));
pub const HCS_E_HYPERV_NOT_INSTALLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878910));
pub const HCS_E_INVALID_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878907));
pub const HCS_E_UNEXPECTED_EXIT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878906));
pub const HCS_E_TERMINATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878905));
pub const HCS_E_CONNECT_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878904));
pub const HCS_E_CONNECTION_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878903));
pub const HCS_E_CONNECTION_CLOSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878902));
pub const HCS_E_UNKNOWN_MESSAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878901));
pub const HCS_E_UNSUPPORTED_PROTOCOL_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878900));
pub const HCS_E_INVALID_JSON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878899));
pub const HCS_E_SYSTEM_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878898));
pub const HCS_E_SYSTEM_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878897));
pub const HCS_E_SYSTEM_ALREADY_STOPPED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878896));
pub const HCS_E_PROTOCOL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878895));
pub const HCS_E_INVALID_LAYER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878894));
pub const HCS_E_WINDOWS_INSIDER_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878893));
pub const HCS_E_SERVICE_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878892));
pub const HCS_E_OPERATION_NOT_STARTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878891));
pub const HCS_E_OPERATION_ALREADY_STARTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878890));
pub const HCS_E_OPERATION_PENDING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878889));
pub const HCS_E_OPERATION_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878888));
pub const HCS_E_OPERATION_SYSTEM_CALLBACK_ALREADY_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878887));
pub const HCS_E_OPERATION_RESULT_ALLOCATION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878886));
pub const HCS_E_ACCESS_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878885));
pub const HCS_E_GUEST_CRITICAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878884));
pub const HCS_E_PROCESS_INFO_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878883));
pub const HCS_E_SERVICE_DISCONNECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878882));
pub const HCS_E_PROCESS_ALREADY_STOPPED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878881));
pub const HCS_E_SYSTEM_NOT_CONFIGURED_FOR_OPERATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878880));
pub const WHV_E_UNKNOWN_CAPABILITY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878400));
pub const WHV_E_INSUFFICIENT_BUFFER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878399));
pub const WHV_E_UNKNOWN_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878398));
pub const WHV_E_UNSUPPORTED_HYPERVISOR_CONFIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878397));
pub const WHV_E_INVALID_PARTITION_CONFIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878396));
pub const WHV_E_GPA_RANGE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878395));
pub const WHV_E_VP_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878394));
pub const WHV_E_VP_DOES_NOT_EXIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878393));
pub const WHV_E_INVALID_VP_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878392));
pub const WHV_E_INVALID_VP_REGISTER_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878391));
pub const WHV_E_UNSUPPORTED_PROCESSOR_CONFIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878384));
pub const VM_SAVED_STATE_DUMP_E_PARTITION_STATE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -1070136064));
pub const VM_SAVED_STATE_DUMP_E_GUEST_MEMORY_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -1070136063));
pub const VM_SAVED_STATE_DUMP_E_NO_VP_FOUND_IN_PARTITION_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1070136062));
pub const VM_SAVED_STATE_DUMP_E_NESTED_VIRTUALIZATION_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1070136061));
pub const VM_SAVED_STATE_DUMP_E_WINDOWS_KERNEL_IMAGE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -1070136060));
pub const VM_SAVED_STATE_DUMP_E_VA_NOT_MAPPED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1070136059));
pub const VM_SAVED_STATE_DUMP_E_INVALID_VP_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1070136058));
pub const VM_SAVED_STATE_DUMP_E_VP_VTL_NOT_ENABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1070136055));
pub const HCN_E_NETWORK_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617023));
pub const HCN_E_ENDPOINT_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617022));
pub const HCN_E_LAYER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617021));
pub const HCN_E_SWITCH_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617020));
pub const HCN_E_SUBNET_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617019));
pub const HCN_E_ADAPTER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617018));
pub const HCN_E_PORT_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617017));
pub const HCN_E_POLICY_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617016));
pub const HCN_E_VFP_PORTSETTING_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617015));
pub const HCN_E_INVALID_NETWORK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617014));
pub const HCN_E_INVALID_NETWORK_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617013));
pub const HCN_E_INVALID_ENDPOINT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617012));
pub const HCN_E_INVALID_POLICY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617011));
pub const HCN_E_INVALID_POLICY_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617010));
pub const HCN_E_INVALID_REMOTE_ENDPOINT_OPERATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617009));
pub const HCN_E_NETWORK_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617008));
pub const HCN_E_LAYER_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617007));
pub const HCN_E_POLICY_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617006));
pub const HCN_E_PORT_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617005));
pub const HCN_E_ENDPOINT_ALREADY_ATTACHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617004));
pub const HCN_E_REQUEST_UNSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617003));
pub const HCN_E_MAPPING_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617002));
pub const HCN_E_DEGRADED_OPERATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617001));
pub const HCN_E_SHARED_SWITCH_MODIFICATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617000));
pub const HCN_E_GUID_CONVERSION_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616999));
pub const HCN_E_REGKEY_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616998));
pub const HCN_E_INVALID_JSON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616997));
pub const HCN_E_INVALID_JSON_REFERENCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616996));
pub const HCN_E_ENDPOINT_SHARING_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616995));
pub const HCN_E_INVALID_IP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616994));
pub const HCN_E_SWITCH_EXTENSION_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616993));
pub const HCN_E_MANAGER_STOPPED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616992));
pub const GCN_E_MODULE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616991));
pub const GCN_E_NO_REQUEST_HANDLERS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616990));
pub const GCN_E_REQUEST_UNSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616989));
pub const GCN_E_RUNTIMEKEYS_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616988));
pub const GCN_E_NETADAPTER_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616987));
pub const GCN_E_NETADAPTER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616986));
pub const GCN_E_NETCOMPARTMENT_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616985));
pub const GCN_E_NETINTERFACE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616984));
pub const GCN_E_DEFAULTNAMESPACE_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616983));
pub const HCN_E_ICS_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616982));
pub const HCN_E_ENDPOINT_NAMESPACE_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616981));
pub const HCN_E_ENTITY_HAS_REFERENCES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616980));
pub const HCN_E_INVALID_INTERNAL_PORT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616979));
pub const HCN_E_NAMESPACE_ATTACH_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616978));
pub const HCN_E_ADDR_INVALID_OR_RESERVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616977));
pub const HCN_E_INVALID_PREFIX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616976));
pub const HCN_E_OBJECT_USED_AFTER_UNLOAD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616975));
pub const HCN_E_INVALID_SUBNET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616974));
pub const HCN_E_INVALID_IP_SUBNET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616973));
pub const HCN_E_ENDPOINT_NOT_ATTACHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616972));
pub const HCN_E_ENDPOINT_NOT_LOCAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616971));
pub const HCN_INTERFACEPARAMETERS_ALREADY_APPLIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616970));
pub const HCN_E_VFP_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616969));
pub const SDIAG_E_CANCELLED = @as(i32, -2143551232);
pub const SDIAG_E_SCRIPT = @as(i32, -2143551231);
pub const SDIAG_E_POWERSHELL = @as(i32, -2143551230);
pub const SDIAG_E_MANAGEDHOST = @as(i32, -2143551229);
pub const SDIAG_E_NOVERIFIER = @as(i32, -2143551228);
pub const SDIAG_S_CANNOTRUN = @as(i32, 3932421);
pub const SDIAG_E_DISABLED = @as(i32, -2143551226);
pub const SDIAG_E_TRUST = @as(i32, -2143551225);
pub const SDIAG_E_CANNOTRUN = @as(i32, -2143551224);
pub const SDIAG_E_VERSION = @as(i32, -2143551223);
pub const SDIAG_E_RESOURCE = @as(i32, -2143551222);
pub const SDIAG_E_ROOTCAUSE = @as(i32, -2143551221);
pub const WPN_E_CHANNEL_CLOSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420160));
pub const WPN_E_CHANNEL_REQUEST_NOT_COMPLETE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420159));
pub const WPN_E_INVALID_APP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420158));
pub const WPN_E_OUTSTANDING_CHANNEL_REQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420157));
pub const WPN_E_DUPLICATE_CHANNEL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420156));
pub const WPN_E_PLATFORM_UNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420155));
pub const WPN_E_NOTIFICATION_POSTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420154));
pub const WPN_E_NOTIFICATION_HIDDEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420153));
pub const WPN_E_NOTIFICATION_NOT_POSTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420152));
pub const WPN_E_CLOUD_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420151));
pub const WPN_E_CLOUD_INCAPABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420144));
pub const WPN_E_CLOUD_AUTH_UNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420134));
pub const WPN_E_CLOUD_SERVICE_UNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420133));
pub const WPN_E_FAILED_LOCK_SCREEN_UPDATE_INTIALIZATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420132));
pub const WPN_E_NOTIFICATION_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420143));
pub const WPN_E_NOTIFICATION_INCAPABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420142));
pub const WPN_E_INTERNET_INCAPABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420141));
pub const WPN_E_NOTIFICATION_TYPE_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420140));
pub const WPN_E_NOTIFICATION_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420139));
pub const WPN_E_TAG_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420138));
pub const WPN_E_ACCESS_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420137));
pub const WPN_E_DUPLICATE_REGISTRATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420136));
pub const WPN_E_PUSH_NOTIFICATION_INCAPABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420135));
pub const WPN_E_DEV_ID_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420128));
pub const WPN_E_TAG_ALPHANUMERIC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420118));
pub const WPN_E_INVALID_HTTP_STATUS_CODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420117));
pub const WPN_E_OUT_OF_SESSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143419904));
pub const WPN_E_POWER_SAVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143419903));
pub const WPN_E_IMAGE_NOT_FOUND_IN_CACHE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143419902));
pub const WPN_E_ALL_URL_NOT_COMPLETED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143419901));
pub const WPN_E_INVALID_CLOUD_IMAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143419900));
pub const WPN_E_NOTIFICATION_ID_MATCHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143419899));
pub const WPN_E_CALLBACK_ALREADY_REGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143419898));
pub const WPN_E_TOAST_NOTIFICATION_DROPPED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143419897));
pub const WPN_E_STORAGE_LOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143419896));
pub const WPN_E_GROUP_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143419895));
pub const WPN_E_GROUP_ALPHANUMERIC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143419894));
pub const WPN_E_CLOUD_DISABLED_FOR_APP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143419893));
pub const E_MBN_CONTEXT_NOT_ACTIVATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945343));
pub const E_MBN_BAD_SIM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945342));
pub const E_MBN_DATA_CLASS_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945341));
pub const E_MBN_INVALID_ACCESS_STRING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945340));
pub const E_MBN_MAX_ACTIVATED_CONTEXTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945339));
pub const E_MBN_PACKET_SVC_DETACHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945338));
pub const E_MBN_PROVIDER_NOT_VISIBLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945337));
pub const E_MBN_RADIO_POWER_OFF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945336));
pub const E_MBN_SERVICE_NOT_ACTIVATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945335));
pub const E_MBN_SIM_NOT_INSERTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945334));
pub const E_MBN_VOICE_CALL_IN_PROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945333));
pub const E_MBN_INVALID_CACHE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945332));
pub const E_MBN_NOT_REGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945331));
pub const E_MBN_PROVIDERS_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945330));
pub const E_MBN_PIN_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945329));
pub const E_MBN_PIN_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945328));
pub const E_MBN_PIN_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945327));
pub const E_MBN_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945326));
pub const E_MBN_INVALID_PROFILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945320));
pub const E_MBN_DEFAULT_PROFILE_EXIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945319));
pub const E_MBN_SMS_ENCODING_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945312));
pub const E_MBN_SMS_FILTER_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945311));
pub const E_MBN_SMS_INVALID_MEMORY_INDEX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945310));
pub const E_MBN_SMS_LANG_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945309));
pub const E_MBN_SMS_MEMORY_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945308));
pub const E_MBN_SMS_NETWORK_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945307));
pub const E_MBN_SMS_UNKNOWN_SMSC_ADDRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945306));
pub const E_MBN_SMS_FORMAT_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945305));
pub const E_MBN_SMS_OPERATION_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945304));
pub const E_MBN_SMS_MEMORY_FULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945303));
pub const PEER_E_IPV6_NOT_INSTALLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995583));
pub const PEER_E_NOT_INITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995582));
pub const PEER_E_CANNOT_START_SERVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995581));
pub const PEER_E_NOT_LICENSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995580));
pub const PEER_E_INVALID_GRAPH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995568));
pub const PEER_E_DBNAME_CHANGED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995567));
pub const PEER_E_DUPLICATE_GRAPH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995566));
pub const PEER_E_GRAPH_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995565));
pub const PEER_E_GRAPH_SHUTTING_DOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995564));
pub const PEER_E_GRAPH_IN_USE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995563));
pub const PEER_E_INVALID_DATABASE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995562));
pub const PEER_E_TOO_MANY_ATTRIBUTES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995561));
pub const PEER_E_CONNECTION_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995325));
pub const PEER_E_CONNECT_SELF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995322));
pub const PEER_E_ALREADY_LISTENING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995321));
pub const PEER_E_NODE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995320));
pub const PEER_E_CONNECTION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995319));
pub const PEER_E_CONNECTION_NOT_AUTHENTICATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995318));
pub const PEER_E_CONNECTION_REFUSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995317));
pub const PEER_E_CLASSIFIER_TOO_LONG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995071));
pub const PEER_E_TOO_MANY_IDENTITIES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995070));
pub const PEER_E_NO_KEY_ACCESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995069));
pub const PEER_E_GROUPS_EXIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995068));
pub const PEER_E_RECORD_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140994815));
pub const PEER_E_DATABASE_ACCESSDENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140994814));
pub const PEER_E_DBINITIALIZATION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140994813));
pub const PEER_E_MAX_RECORD_SIZE_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140994812));
pub const PEER_E_DATABASE_ALREADY_PRESENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140994811));
pub const PEER_E_DATABASE_NOT_PRESENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140994810));
pub const PEER_E_IDENTITY_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140994559));
pub const PEER_E_EVENT_HANDLE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140994303));
pub const PEER_E_INVALID_SEARCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140994047));
pub const PEER_E_INVALID_ATTRIBUTES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140994046));
pub const PEER_E_INVITATION_NOT_TRUSTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140993791));
pub const PEER_E_CHAIN_TOO_LONG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140993789));
pub const PEER_E_INVALID_TIME_PERIOD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140993787));
pub const PEER_E_CIRCULAR_CHAIN_DETECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140993786));
pub const PEER_E_CERT_STORE_CORRUPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140993535));
pub const PEER_E_NO_CLOUD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140991487));
pub const PEER_E_CLOUD_NAME_AMBIGUOUS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140991483));
pub const PEER_E_INVALID_RECORD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987376));
pub const PEER_E_NOT_AUTHORIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987360));
pub const PEER_E_PASSWORD_DOES_NOT_MEET_POLICY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987359));
pub const PEER_E_DEFERRED_VALIDATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987344));
pub const PEER_E_INVALID_GROUP_PROPERTIES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987328));
pub const PEER_E_INVALID_PEER_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987312));
pub const PEER_E_INVALID_CLASSIFIER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987296));
pub const PEER_E_INVALID_FRIENDLY_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987280));
pub const PEER_E_INVALID_ROLE_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987279));
pub const PEER_E_INVALID_CLASSIFIER_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987278));
pub const PEER_E_INVALID_RECORD_EXPIRATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987264));
pub const PEER_E_INVALID_CREDENTIAL_INFO = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987263));
pub const PEER_E_INVALID_CREDENTIAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987262));
pub const PEER_E_INVALID_RECORD_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987261));
pub const PEER_E_UNSUPPORTED_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987248));
pub const PEER_E_GROUP_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987247));
pub const PEER_E_GROUP_IN_USE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987246));
pub const PEER_E_INVALID_GROUP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987245));
pub const PEER_E_NO_MEMBERS_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987244));
pub const PEER_E_NO_MEMBER_CONNECTIONS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987243));
pub const PEER_E_UNABLE_TO_LISTEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987242));
pub const PEER_E_IDENTITY_DELETED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987232));
pub const PEER_E_SERVICE_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987231));
pub const PEER_E_CONTACT_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140971007));
pub const PEER_S_GRAPH_DATA_CREATED = @import("zig.zig").typedConst(HRESULT, @as(i32, 6488065));
pub const PEER_S_NO_EVENT_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, 6488066));
pub const PEER_S_ALREADY_CONNECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, 6496256));
pub const PEER_S_SUBSCRIPTION_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, 6512640));
pub const PEER_S_NO_CONNECTIVITY = @import("zig.zig").typedConst(HRESULT, @as(i32, 6488069));
pub const PEER_S_ALREADY_A_MEMBER = @import("zig.zig").typedConst(HRESULT, @as(i32, 6488070));
pub const PEER_E_CANNOT_CONVERT_PEER_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140979199));
pub const PEER_E_INVALID_PEER_HOST_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140979198));
pub const PEER_E_NO_MORE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140979197));
pub const PEER_E_PNRP_DUPLICATE_PEER_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140979195));
pub const PEER_E_INVITE_CANCELLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140966912));
pub const PEER_E_INVITE_RESPONSE_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140966911));
pub const PEER_E_NOT_SIGNED_IN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140966909));
pub const PEER_E_PRIVACY_DECLINED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140966908));
pub const PEER_E_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140966907));
pub const PEER_E_INVALID_ADDRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140966905));
pub const PEER_E_FW_EXCEPTION_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140966904));
pub const PEER_E_FW_BLOCKED_BY_POLICY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140966903));
pub const PEER_E_FW_BLOCKED_BY_SHIELDS_UP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140966902));
pub const PEER_E_FW_DECLINED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140966901));
pub const UI_E_CREATE_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144731135));
pub const UI_E_SHUTDOWN_CALLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144731134));
pub const UI_E_ILLEGAL_REENTRANCY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144731133));
pub const UI_E_OBJECT_SEALED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144731132));
pub const UI_E_VALUE_NOT_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144731131));
pub const UI_E_VALUE_NOT_DETERMINED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144731130));
pub const UI_E_INVALID_OUTPUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144731129));
pub const UI_E_BOOLEAN_EXPECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144731128));
pub const UI_E_DIFFERENT_OWNER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144731127));
pub const UI_E_AMBIGUOUS_MATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144731126));
pub const UI_E_FP_OVERFLOW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144731125));
pub const UI_E_WRONG_THREAD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144731124));
pub const UI_E_STORYBOARD_ACTIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730879));
pub const UI_E_STORYBOARD_NOT_PLAYING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730878));
pub const UI_E_START_KEYFRAME_AFTER_END = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730877));
pub const UI_E_END_KEYFRAME_NOT_DETERMINED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730876));
pub const UI_E_LOOPS_OVERLAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730875));
pub const UI_E_TRANSITION_ALREADY_USED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730874));
pub const UI_E_TRANSITION_NOT_IN_STORYBOARD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730873));
pub const UI_E_TRANSITION_ECLIPSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730872));
pub const UI_E_TIME_BEFORE_LAST_UPDATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730871));
pub const UI_E_TIMER_CLIENT_ALREADY_CONNECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730870));
pub const UI_E_INVALID_DIMENSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730869));
pub const UI_E_PRIMITIVE_OUT_OF_BOUNDS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730868));
pub const UI_E_WINDOW_CLOSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730623));
pub const E_BLUETOOTH_ATT_INVALID_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864511));
pub const E_BLUETOOTH_ATT_READ_NOT_PERMITTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864510));
pub const E_BLUETOOTH_ATT_WRITE_NOT_PERMITTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864509));
pub const E_BLUETOOTH_ATT_INVALID_PDU = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864508));
pub const E_BLUETOOTH_ATT_INSUFFICIENT_AUTHENTICATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864507));
pub const E_BLUETOOTH_ATT_REQUEST_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864506));
pub const E_BLUETOOTH_ATT_INVALID_OFFSET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864505));
pub const E_BLUETOOTH_ATT_INSUFFICIENT_AUTHORIZATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864504));
pub const E_BLUETOOTH_ATT_PREPARE_QUEUE_FULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864503));
pub const E_BLUETOOTH_ATT_ATTRIBUTE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864502));
pub const E_BLUETOOTH_ATT_ATTRIBUTE_NOT_LONG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864501));
pub const E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION_KEY_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864500));
pub const E_BLUETOOTH_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864499));
pub const E_BLUETOOTH_ATT_UNLIKELY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864498));
pub const E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864497));
pub const E_BLUETOOTH_ATT_UNSUPPORTED_GROUP_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864496));
pub const E_BLUETOOTH_ATT_INSUFFICIENT_RESOURCES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864495));
pub const E_BLUETOOTH_ATT_UNKNOWN_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140860416));
pub const E_AUDIO_ENGINE_NODE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140798975));
pub const E_HDAUDIO_EMPTY_CONNECTION_LIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140798974));
pub const E_HDAUDIO_CONNECTION_LIST_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140798973));
pub const E_HDAUDIO_NO_LOGICAL_DEVICES_CREATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140798972));
pub const E_HDAUDIO_NULL_LINKED_LIST_ENTRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140798971));
pub const STATEREPOSITORY_E_CONCURRENCY_LOCKING_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733439));
pub const STATEREPOSITORY_E_STATEMENT_INPROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733438));
pub const STATEREPOSITORY_E_CONFIGURATION_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733437));
pub const STATEREPOSITORY_E_UNKNOWN_SCHEMA_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733436));
pub const STATEREPOSITORY_ERROR_DICTIONARY_CORRUPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733435));
pub const STATEREPOSITORY_E_BLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733434));
pub const STATEREPOSITORY_E_BUSY_RETRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733433));
pub const STATEREPOSITORY_E_BUSY_RECOVERY_RETRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733432));
pub const STATEREPOSITORY_E_LOCKED_RETRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733431));
pub const STATEREPOSITORY_E_LOCKED_SHAREDCACHE_RETRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733430));
pub const STATEREPOSITORY_E_TRANSACTION_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733429));
pub const STATEREPOSITORY_E_BUSY_TIMEOUT_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733428));
pub const STATEREPOSITORY_E_BUSY_RECOVERY_TIMEOUT_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733427));
pub const STATEREPOSITORY_E_LOCKED_TIMEOUT_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733426));
pub const STATEREPOSITORY_E_LOCKED_SHAREDCACHE_TIMEOUT_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733425));
pub const STATEREPOSITORY_E_SERVICE_STOP_IN_PROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733424));
pub const STATEREPOSTORY_E_NESTED_TRANSACTION_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733423));
pub const STATEREPOSITORY_ERROR_CACHE_CORRUPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733422));
pub const STATEREPOSITORY_TRANSACTION_CALLER_ID_CHANGED = @import("zig.zig").typedConst(HRESULT, @as(i32, 6750227));
pub const STATEREPOSITORY_TRANSACTION_IN_PROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733420));
pub const STATEREPOSITORY_E_CACHE_NOT_INIITALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733419));
pub const STATEREPOSITORY_E_DEPENDENCY_NOT_RESOLVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733418));
pub const ERROR_SPACES_POOL_WAS_DELETED = @import("zig.zig").typedConst(HRESULT, @as(i32, 15138817));
pub const ERROR_SPACES_FAULT_DOMAIN_TYPE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344831));
pub const ERROR_SPACES_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344830));
pub const ERROR_SPACES_RESILIENCY_TYPE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344829));
pub const ERROR_SPACES_DRIVE_SECTOR_SIZE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344828));
pub const ERROR_SPACES_DRIVE_REDUNDANCY_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344826));
pub const ERROR_SPACES_NUMBER_OF_DATA_COPIES_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344825));
pub const ERROR_SPACES_PARITY_LAYOUT_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344824));
pub const ERROR_SPACES_INTERLEAVE_LENGTH_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344823));
pub const ERROR_SPACES_NUMBER_OF_COLUMNS_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344822));
pub const ERROR_SPACES_NOT_ENOUGH_DRIVES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344821));
pub const ERROR_SPACES_EXTENDED_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344820));
pub const ERROR_SPACES_PROVISIONING_TYPE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344819));
pub const ERROR_SPACES_ALLOCATION_SIZE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344818));
pub const ERROR_SPACES_ENCLOSURE_AWARE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344817));
pub const ERROR_SPACES_WRITE_CACHE_SIZE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344816));
pub const ERROR_SPACES_NUMBER_OF_GROUPS_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344815));
pub const ERROR_SPACES_DRIVE_OPERATIONAL_STATE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344814));
pub const ERROR_SPACES_ENTRY_INCOMPLETE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344813));
pub const ERROR_SPACES_ENTRY_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344812));
pub const ERROR_SPACES_UPDATE_COLUMN_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344811));
pub const ERROR_SPACES_MAP_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344810));
pub const ERROR_SPACES_UNSUPPORTED_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344809));
pub const ERROR_SPACES_CORRUPT_METADATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344808));
pub const ERROR_SPACES_DRT_FULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344807));
pub const ERROR_SPACES_INCONSISTENCY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344806));
pub const ERROR_SPACES_LOG_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344805));
pub const ERROR_SPACES_NO_REDUNDANCY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344804));
pub const ERROR_SPACES_DRIVE_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344803));
pub const ERROR_SPACES_DRIVE_SPLIT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344802));
pub const ERROR_SPACES_DRIVE_LOST_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344801));
pub const ERROR_SPACES_MARK_DIRTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344800));
pub const ERROR_SPACES_FLUSH_METADATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344795));
pub const ERROR_SPACES_CACHE_FULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344794));
pub const ERROR_VOLSNAP_BOOTFILE_NOT_VALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138963967));
pub const ERROR_VOLSNAP_ACTIVATION_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138963966));
pub const ERROR_VOLSNAP_NO_BYPASSIO_WITH_SNAPSHOT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138963965));
pub const ERROR_TIERING_NOT_SUPPORTED_ON_VOLUME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138898431));
pub const ERROR_TIERING_VOLUME_DISMOUNT_IN_PROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138898430));
pub const ERROR_TIERING_STORAGE_TIER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138898429));
pub const ERROR_TIERING_INVALID_FILE_ID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138898428));
pub const ERROR_TIERING_WRONG_CLUSTER_NODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138898427));
pub const ERROR_TIERING_ALREADY_PROCESSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138898426));
pub const ERROR_TIERING_CANNOT_PIN_OBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138898425));
pub const ERROR_TIERING_FILE_IS_NOT_PINNED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138898424));
pub const ERROR_NOT_A_TIERED_VOLUME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138898423));
pub const ERROR_ATTRIBUTE_NOT_PRESENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138898422));
pub const ERROR_SECCORE_INVALID_COMMAND = @import("zig.zig").typedConst(HRESULT, @as(i32, -1058537472));
pub const ERROR_NO_APPLICABLE_APP_LICENSES_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -1058406399));
pub const ERROR_CLIP_LICENSE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -1058406398));
pub const ERROR_CLIP_DEVICE_LICENSE_MISSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -1058406397));
pub const ERROR_CLIP_LICENSE_INVALID_SIGNATURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1058406396));
pub const ERROR_CLIP_KEYHOLDER_LICENSE_MISSING_OR_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -1058406395));
pub const ERROR_CLIP_LICENSE_EXPIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1058406394));
pub const ERROR_CLIP_LICENSE_SIGNED_BY_UNKNOWN_SOURCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1058406393));
pub const ERROR_CLIP_LICENSE_NOT_SIGNED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1058406392));
pub const ERROR_CLIP_LICENSE_HARDWARE_ID_OUT_OF_TOLERANCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1058406391));
pub const ERROR_CLIP_LICENSE_DEVICE_ID_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -1058406390));
pub const DXGI_STATUS_OCCLUDED = @import("zig.zig").typedConst(HRESULT, @as(i32, 142213121));
pub const DXGI_STATUS_CLIPPED = @import("zig.zig").typedConst(HRESULT, @as(i32, 142213122));
pub const DXGI_STATUS_NO_REDIRECTION = @import("zig.zig").typedConst(HRESULT, @as(i32, 142213124));
pub const DXGI_STATUS_NO_DESKTOP_ACCESS = @import("zig.zig").typedConst(HRESULT, @as(i32, 142213125));
pub const DXGI_STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE = @import("zig.zig").typedConst(HRESULT, @as(i32, 142213126));
pub const DXGI_STATUS_MODE_CHANGED = @import("zig.zig").typedConst(HRESULT, @as(i32, 142213127));
pub const DXGI_STATUS_MODE_CHANGE_IN_PROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, 142213128));
pub const DXCORE_ERROR_EVENT_NOT_UNREGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2004877311));
pub const PRESENTATION_ERROR_LOST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2004811775));
pub const DXGI_STATUS_UNOCCLUDED = @import("zig.zig").typedConst(HRESULT, @as(i32, 142213129));
pub const DXGI_STATUS_DDA_WAS_STILL_DRAWING = @import("zig.zig").typedConst(HRESULT, @as(i32, 142213130));
pub const DXGI_STATUS_PRESENT_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, 142213167));
pub const DXGI_DDI_ERR_WASSTILLDRAWING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2005204991));
pub const DXGI_DDI_ERR_UNSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2005204990));
pub const DXGI_DDI_ERR_NONEXCLUSIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2005204989));
pub const D3D10_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2005336063));
pub const D3D10_ERROR_FILE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2005336062));
pub const D3D11_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2005139455));
pub const D3D11_ERROR_FILE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2005139454));
pub const D3D11_ERROR_TOO_MANY_UNIQUE_VIEW_OBJECTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2005139453));
pub const D3D11_ERROR_DEFERRED_CONTEXT_MAP_WITHOUT_INITIAL_DISCARD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2005139452));
pub const D3D12_ERROR_ADAPTER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2005008383));
pub const D3D12_ERROR_DRIVER_VERSION_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2005008382));
pub const D3D12_ERROR_INVALID_REDIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2005008381));
pub const D2DERR_WRONG_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238911));
pub const D2DERR_NOT_INITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238910));
pub const D2DERR_UNSUPPORTED_OPERATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238909));
pub const D2DERR_SCANNER_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238908));
pub const D2DERR_SCREEN_ACCESS_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238907));
pub const D2DERR_DISPLAY_STATE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238906));
pub const D2DERR_ZERO_VECTOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238905));
pub const D2DERR_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238904));
pub const D2DERR_DISPLAY_FORMAT_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238903));
pub const D2DERR_INVALID_CALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238902));
pub const D2DERR_NO_HARDWARE_DEVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238901));
pub const D2DERR_RECREATE_TARGET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238900));
pub const D2DERR_TOO_MANY_SHADER_ELEMENTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238899));
pub const D2DERR_SHADER_COMPILE_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238898));
pub const D2DERR_MAX_TEXTURE_SIZE_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238897));
pub const D2DERR_UNSUPPORTED_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238896));
pub const D2DERR_BAD_NUMBER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238895));
pub const D2DERR_WRONG_FACTORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238894));
pub const D2DERR_LAYER_ALREADY_IN_USE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238893));
pub const D2DERR_POP_CALL_DID_NOT_MATCH_PUSH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238892));
pub const D2DERR_WRONG_RESOURCE_DOMAIN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238891));
pub const D2DERR_PUSH_POP_UNBALANCED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238890));
pub const D2DERR_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238889));
pub const D2DERR_INCOMPATIBLE_BRUSH_TYPES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238888));
pub const D2DERR_WIN32_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238887));
pub const D2DERR_TARGET_NOT_GDI_COMPATIBLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238886));
pub const D2DERR_TEXT_EFFECT_IS_WRONG_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238885));
pub const D2DERR_TEXT_RENDERER_NOT_RELEASED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238884));
pub const D2DERR_EXCEEDS_MAX_BITMAP_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238883));
pub const D2DERR_INVALID_GRAPH_CONFIGURATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238882));
pub const D2DERR_INVALID_INTERNAL_GRAPH_CONFIGURATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238881));
pub const D2DERR_CYCLIC_GRAPH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238880));
pub const D2DERR_BITMAP_CANNOT_DRAW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238879));
pub const D2DERR_OUTSTANDING_BITMAP_REFERENCES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238878));
pub const D2DERR_ORIGINAL_TARGET_NOT_BOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238877));
pub const D2DERR_INVALID_TARGET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238876));
pub const D2DERR_BITMAP_BOUND_AS_TARGET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238875));
pub const D2DERR_INSUFFICIENT_DEVICE_CAPABILITIES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238874));
pub const D2DERR_INTERMEDIATE_TOO_LARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238873));
pub const D2DERR_EFFECT_IS_NOT_REGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238872));
pub const D2DERR_INVALID_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238871));
pub const D2DERR_NO_SUBPROPERTIES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238870));
pub const D2DERR_PRINT_JOB_CLOSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238869));
pub const D2DERR_PRINT_FORMAT_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238868));
pub const D2DERR_TOO_MANY_TRANSFORM_INPUTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238867));
pub const D2DERR_INVALID_GLYPH_IMAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238866));
pub const DWRITE_E_FILEFORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283968));
pub const DWRITE_E_UNEXPECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283967));
pub const DWRITE_E_NOFONT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283966));
pub const DWRITE_E_FILENOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283965));
pub const DWRITE_E_FILEACCESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283964));
pub const DWRITE_E_FONTCOLLECTIONOBSOLETE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283963));
pub const DWRITE_E_ALREADYREGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283962));
pub const DWRITE_E_CACHEFORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283961));
pub const DWRITE_E_CACHEVERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283960));
pub const DWRITE_E_UNSUPPORTEDOPERATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283959));
pub const DWRITE_E_TEXTRENDERERINCOMPATIBLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283958));
pub const DWRITE_E_FLOWDIRECTIONCONFLICTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283957));
pub const DWRITE_E_NOCOLOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283956));
pub const WINCODEC_ERR_WRONGSTATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292412));
pub const WINCODEC_ERR_VALUEOUTOFRANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292411));
pub const WINCODEC_ERR_UNKNOWNIMAGEFORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292409));
pub const WINCODEC_ERR_UNSUPPORTEDVERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292405));
pub const WINCODEC_ERR_NOTINITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292404));
pub const WINCODEC_ERR_ALREADYLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292403));
pub const WINCODEC_ERR_PROPERTYNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292352));
pub const WINCODEC_ERR_PROPERTYNOTSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292351));
pub const WINCODEC_ERR_PROPERTYSIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292350));
pub const WINCODEC_ERR_CODECPRESENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292349));
pub const WINCODEC_ERR_CODECNOTHUMBNAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292348));
pub const WINCODEC_ERR_PALETTEUNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292347));
pub const WINCODEC_ERR_CODECTOOMANYSCANLINES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292346));
pub const WINCODEC_ERR_INTERNALERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292344));
pub const WINCODEC_ERR_SOURCERECTDOESNOTMATCHDIMENSIONS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292343));
pub const WINCODEC_ERR_COMPONENTNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292336));
pub const WINCODEC_ERR_IMAGESIZEOUTOFRANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292335));
pub const WINCODEC_ERR_TOOMUCHMETADATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292334));
pub const WINCODEC_ERR_BADIMAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292320));
pub const WINCODEC_ERR_BADHEADER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292319));
pub const WINCODEC_ERR_FRAMEMISSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292318));
pub const WINCODEC_ERR_BADMETADATAHEADER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292317));
pub const WINCODEC_ERR_BADSTREAMDATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292304));
pub const WINCODEC_ERR_STREAMWRITE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292303));
pub const WINCODEC_ERR_STREAMREAD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292302));
pub const WINCODEC_ERR_STREAMNOTAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292301));
pub const WINCODEC_ERR_UNSUPPORTEDPIXELFORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292288));
pub const WINCODEC_ERR_UNSUPPORTEDOPERATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292287));
pub const WINCODEC_ERR_INVALIDREGISTRATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292278));
pub const WINCODEC_ERR_COMPONENTINITIALIZEFAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292277));
pub const WINCODEC_ERR_INSUFFICIENTBUFFER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292276));
pub const WINCODEC_ERR_DUPLICATEMETADATAPRESENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292275));
pub const WINCODEC_ERR_PROPERTYUNEXPECTEDTYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292274));
pub const WINCODEC_ERR_UNEXPECTEDSIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292273));
pub const WINCODEC_ERR_INVALIDQUERYREQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292272));
pub const WINCODEC_ERR_UNEXPECTEDMETADATATYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292271));
pub const WINCODEC_ERR_REQUESTONLYVALIDATMETADATAROOT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292270));
pub const WINCODEC_ERR_INVALIDQUERYCHARACTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292269));
pub const WINCODEC_ERR_WIN32ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292268));
pub const WINCODEC_ERR_INVALIDPROGRESSIVELEVEL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292267));
pub const WINCODEC_ERR_INVALIDJPEGSCANINDEX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292266));
pub const MILERR_OBJECTBUSY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304447));
pub const MILERR_INSUFFICIENTBUFFER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304446));
pub const MILERR_WIN32ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304445));
pub const MILERR_SCANNER_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304444));
pub const MILERR_SCREENACCESSDENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304443));
pub const MILERR_DISPLAYSTATEINVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304442));
pub const MILERR_NONINVERTIBLEMATRIX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304441));
pub const MILERR_ZEROVECTOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304440));
pub const MILERR_TERMINATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304439));
pub const MILERR_BADNUMBER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304438));
pub const MILERR_INTERNALERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304320));
pub const MILERR_DISPLAYFORMATNOTSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304316));
pub const MILERR_INVALIDCALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304315));
pub const MILERR_ALREADYLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304314));
pub const MILERR_NOTLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304313));
pub const MILERR_DEVICECANNOTRENDERTEXT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304312));
pub const MILERR_GLYPHBITMAPMISSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304311));
pub const MILERR_MALFORMEDGLYPHCACHE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304310));
pub const MILERR_GENERIC_IGNORE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304309));
pub const MILERR_MALFORMED_GUIDELINE_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304308));
pub const MILERR_NO_HARDWARE_DEVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304307));
pub const MILERR_NEED_RECREATE_AND_PRESENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304306));
pub const MILERR_ALREADY_INITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304305));
pub const MILERR_MISMATCHED_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304304));
pub const MILERR_NO_REDIRECTION_SURFACE_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304303));
pub const MILERR_REMOTING_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304302));
pub const MILERR_QUEUED_PRESENT_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304301));
pub const MILERR_NOT_QUEUING_PRESENTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304300));
pub const MILERR_NO_REDIRECTION_SURFACE_RETRY_LATER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304299));
pub const MILERR_TOOMANYSHADERELEMNTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304298));
pub const MILERR_MROW_READLOCK_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304297));
pub const MILERR_MROW_UPDATE_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304296));
pub const MILERR_SHADER_COMPILE_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304295));
pub const MILERR_MAX_TEXTURE_SIZE_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304294));
pub const MILERR_QPC_TIME_WENT_BACKWARD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304293));
pub const MILERR_DXGI_ENUMERATION_OUT_OF_SYNC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304291));
pub const MILERR_ADAPTER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304290));
pub const MILERR_COLORSPACE_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304289));
pub const MILERR_PREFILTER_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304288));
pub const MILERR_DISPLAYID_ACCESS_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304287));
pub const UCEERR_INVALIDPACKETHEADER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303424));
pub const UCEERR_UNKNOWNPACKET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303423));
pub const UCEERR_ILLEGALPACKET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303422));
pub const UCEERR_MALFORMEDPACKET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303421));
pub const UCEERR_ILLEGALHANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303420));
pub const UCEERR_HANDLELOOKUPFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303419));
pub const UCEERR_RENDERTHREADFAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303418));
pub const UCEERR_CTXSTACKFRSTTARGETNULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303417));
pub const UCEERR_CONNECTIONIDLOOKUPFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303416));
pub const UCEERR_BLOCKSFULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303415));
pub const UCEERR_MEMORYFAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303414));
pub const UCEERR_PACKETRECORDOUTOFRANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303413));
pub const UCEERR_ILLEGALRECORDTYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303412));
pub const UCEERR_OUTOFHANDLES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303411));
pub const UCEERR_UNCHANGABLE_UPDATE_ATTEMPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303410));
pub const UCEERR_NO_MULTIPLE_WORKER_THREADS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303409));
pub const UCEERR_REMOTINGNOTSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303408));
pub const UCEERR_MISSINGENDCOMMAND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303407));
pub const UCEERR_MISSINGBEGINCOMMAND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303406));
pub const UCEERR_CHANNELSYNCTIMEDOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303405));
pub const UCEERR_CHANNELSYNCABANDONED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303404));
pub const UCEERR_UNSUPPORTEDTRANSPORTVERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303403));
pub const UCEERR_TRANSPORTUNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303402));
pub const UCEERR_FEEDBACK_UNSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303401));
pub const UCEERR_COMMANDTRANSPORTDENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303400));
pub const UCEERR_GRAPHICSSTREAMUNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303399));
pub const UCEERR_GRAPHICSSTREAMALREADYOPEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303392));
pub const UCEERR_TRANSPORTDISCONNECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303391));
pub const UCEERR_TRANSPORTOVERLOADED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303390));
pub const UCEERR_PARTITION_ZOMBIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303389));
pub const MILAVERR_NOCLOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303168));
pub const MILAVERR_NOMEDIATYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303167));
pub const MILAVERR_NOVIDEOMIXER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303166));
pub const MILAVERR_NOVIDEOPRESENTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303165));
pub const MILAVERR_NOREADYFRAMES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303164));
pub const MILAVERR_MODULENOTLOADED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303163));
pub const MILAVERR_WMPFACTORYNOTREGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303162));
pub const MILAVERR_INVALIDWMPVERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303161));
pub const MILAVERR_INSUFFICIENTVIDEORESOURCES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303160));
pub const MILAVERR_VIDEOACCELERATIONNOTAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303159));
pub const MILAVERR_REQUESTEDTEXTURETOOBIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303158));
pub const MILAVERR_SEEKFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303157));
pub const MILAVERR_UNEXPECTEDWMPFAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303156));
pub const MILAVERR_MEDIAPLAYERCLOSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303155));
pub const MILAVERR_UNKNOWNHARDWAREERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303154));
pub const MILEFFECTSERR_UNKNOWNPROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302898));
pub const MILEFFECTSERR_EFFECTNOTPARTOFGROUP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302897));
pub const MILEFFECTSERR_NOINPUTSOURCEATTACHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302896));
pub const MILEFFECTSERR_CONNECTORNOTCONNECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302895));
pub const MILEFFECTSERR_CONNECTORNOTASSOCIATEDWITHEFFECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302894));
pub const MILEFFECTSERR_RESERVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302893));
pub const MILEFFECTSERR_CYCLEDETECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302892));
pub const MILEFFECTSERR_EFFECTINMORETHANONEGRAPH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302891));
pub const MILEFFECTSERR_EFFECTALREADYINAGRAPH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302890));
pub const MILEFFECTSERR_EFFECTHASNOCHILDREN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302889));
pub const MILEFFECTSERR_ALREADYATTACHEDTOLISTENER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302888));
pub const MILEFFECTSERR_NOTAFFINETRANSFORM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302887));
pub const MILEFFECTSERR_EMPTYBOUNDS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302886));
pub const MILEFFECTSERR_OUTPUTSIZETOOLARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302885));
pub const DWMERR_STATE_TRANSITION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302656));
pub const DWMERR_THEME_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302655));
pub const DWMERR_CATASTROPHIC_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302654));
pub const DCOMPOSITION_ERROR_WINDOW_ALREADY_COMPOSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302400));
pub const DCOMPOSITION_ERROR_SURFACE_BEING_RENDERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302399));
pub const DCOMPOSITION_ERROR_SURFACE_NOT_BEING_RENDERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302398));
pub const ONL_E_INVALID_AUTHENTICATION_TARGET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701823));
pub const ONL_E_ACCESS_DENIED_BY_TOU = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701822));
pub const ONL_E_INVALID_APPLICATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701821));
pub const ONL_E_PASSWORD_UPDATE_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701820));
pub const ONL_E_ACCOUNT_UPDATE_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701819));
pub const ONL_E_FORCESIGNIN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701818));
pub const ONL_E_ACCOUNT_LOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701817));
pub const ONL_E_PARENTAL_CONSENT_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701816));
pub const ONL_E_EMAIL_VERIFICATION_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701815));
pub const ONL_E_ACCOUNT_SUSPENDED_COMPROIMISE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701814));
pub const ONL_E_ACCOUNT_SUSPENDED_ABUSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701813));
pub const ONL_E_ACTION_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701812));
pub const ONL_CONNECTION_COUNT_LIMIT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701811));
pub const ONL_E_CONNECTED_ACCOUNT_CAN_NOT_SIGNOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701810));
pub const ONL_E_USER_AUTHENTICATION_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701809));
pub const ONL_E_REQUEST_THROTTLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701808));
pub const FA_E_MAX_PERSISTED_ITEMS_REACHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927200));
pub const FA_E_HOMEGROUP_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927198));
pub const E_MONITOR_RESOLUTION_TOO_LOW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927152));
pub const E_ELEVATED_ACTIVATION_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927151));
pub const E_UAC_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927150));
pub const E_FULL_ADMIN_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927149));
pub const E_APPLICATION_NOT_REGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927148));
pub const E_MULTIPLE_EXTENSIONS_FOR_APPLICATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927147));
pub const E_MULTIPLE_PACKAGES_FOR_FAMILY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927146));
pub const E_APPLICATION_MANAGER_NOT_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927145));
pub const S_STORE_LAUNCHED_FOR_REMEDIATION = @import("zig.zig").typedConst(HRESULT, @as(i32, 2556504));
pub const S_APPLICATION_ACTIVATION_ERROR_HANDLED_BY_DIALOG = @import("zig.zig").typedConst(HRESULT, @as(i32, 2556505));
pub const E_APPLICATION_ACTIVATION_TIMED_OUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927142));
pub const E_APPLICATION_ACTIVATION_EXEC_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927141));
pub const E_APPLICATION_TEMPORARY_LICENSE_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927140));
pub const E_APPLICATION_TRIAL_LICENSE_EXPIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927139));
pub const E_SKYDRIVE_ROOT_TARGET_FILE_SYSTEM_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927136));
pub const E_SKYDRIVE_ROOT_TARGET_OVERLAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927135));
pub const E_SKYDRIVE_ROOT_TARGET_CANNOT_INDEX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927134));
pub const E_SKYDRIVE_FILE_NOT_UPLOADED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927133));
pub const E_SKYDRIVE_UPDATE_AVAILABILITY_FAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927132));
pub const E_SKYDRIVE_ROOT_TARGET_VOLUME_ROOT_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927131));
pub const E_SYNCENGINE_FILE_SIZE_OVER_LIMIT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013089791));
pub const E_SYNCENGINE_FILE_SIZE_EXCEEDS_REMAINING_QUOTA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013089790));
pub const E_SYNCENGINE_UNSUPPORTED_FILE_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013089789));
pub const E_SYNCENGINE_FOLDER_ITEM_COUNT_LIMIT_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013089788));
pub const E_SYNCENGINE_FILE_SYNC_PARTNER_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013089787));
pub const E_SYNCENGINE_SYNC_PAUSED_BY_SERVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013089786));
pub const E_SYNCENGINE_FILE_IDENTIFIER_UNKNOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013085694));
pub const E_SYNCENGINE_SERVICE_AUTHENTICATION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013085693));
pub const E_SYNCENGINE_UNKNOWN_SERVICE_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013085692));
pub const E_SYNCENGINE_SERVICE_RETURNED_UNEXPECTED_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013085691));
pub const E_SYNCENGINE_REQUEST_BLOCKED_BY_SERVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013085690));
pub const E_SYNCENGINE_REQUEST_BLOCKED_DUE_TO_CLIENT_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013085689));
pub const E_SYNCENGINE_FOLDER_INACCESSIBLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013081599));
pub const E_SYNCENGINE_UNSUPPORTED_FOLDER_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013081598));
pub const E_SYNCENGINE_UNSUPPORTED_MARKET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013081597));
pub const E_SYNCENGINE_PATH_LENGTH_LIMIT_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013081596));
pub const E_SYNCENGINE_REMOTE_PATH_LENGTH_LIMIT_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013081595));
pub const E_SYNCENGINE_CLIENT_UPDATE_NEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013081594));
pub const E_SYNCENGINE_PROXY_AUTHENTICATION_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013081593));
pub const E_SYNCENGINE_STORAGE_SERVICE_PROVISIONING_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013081592));
pub const E_SYNCENGINE_UNSUPPORTED_REPARSE_POINT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013081591));
pub const E_SYNCENGINE_STORAGE_SERVICE_BLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013081590));
pub const E_SYNCENGINE_FOLDER_IN_REDIRECTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013081589));
pub const EAS_E_POLICY_NOT_MANAGED_BY_OS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913087));
pub const EAS_E_POLICY_COMPLIANT_WITH_ACTIONS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913086));
pub const EAS_E_REQUESTED_POLICY_NOT_ENFORCEABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913085));
pub const EAS_E_CURRENT_USER_HAS_BLANK_PASSWORD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913084));
pub const EAS_E_REQUESTED_POLICY_PASSWORD_EXPIRATION_INCOMPATIBLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913083));
pub const EAS_E_USER_CANNOT_CHANGE_PASSWORD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913082));
pub const EAS_E_ADMINS_HAVE_BLANK_PASSWORD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913081));
pub const EAS_E_ADMINS_CANNOT_CHANGE_PASSWORD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913080));
pub const EAS_E_LOCAL_CONTROLLED_USERS_CANNOT_CHANGE_PASSWORD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913079));
pub const EAS_E_PASSWORD_POLICY_NOT_ENFORCEABLE_FOR_CONNECTED_ADMINS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913078));
pub const EAS_E_CONNECTED_ADMINS_NEED_TO_CHANGE_PASSWORD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913077));
pub const EAS_E_PASSWORD_POLICY_NOT_ENFORCEABLE_FOR_CURRENT_CONNECTED_USER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913076));
pub const EAS_E_CURRENT_CONNECTED_USER_NEED_TO_CHANGE_PASSWORD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913075));
pub const WEB_E_UNSUPPORTED_FORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089484287));
pub const WEB_E_INVALID_XML = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089484286));
pub const WEB_E_MISSING_REQUIRED_ELEMENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089484285));
pub const WEB_E_MISSING_REQUIRED_ATTRIBUTE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089484284));
pub const WEB_E_UNEXPECTED_CONTENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089484283));
pub const WEB_E_RESOURCE_TOO_LARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089484282));
pub const WEB_E_INVALID_JSON_STRING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089484281));
pub const WEB_E_INVALID_JSON_NUMBER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089484280));
pub const WEB_E_JSON_VALUE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089484279));
pub const HTTP_E_STATUS_UNEXPECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145845247));
pub const HTTP_E_STATUS_UNEXPECTED_REDIRECTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145845245));
pub const HTTP_E_STATUS_UNEXPECTED_CLIENT_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145845244));
pub const HTTP_E_STATUS_UNEXPECTED_SERVER_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145845243));
pub const HTTP_E_STATUS_AMBIGUOUS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844948));
pub const HTTP_E_STATUS_MOVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844947));
pub const HTTP_E_STATUS_REDIRECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844946));
pub const HTTP_E_STATUS_REDIRECT_METHOD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844945));
pub const HTTP_E_STATUS_NOT_MODIFIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844944));
pub const HTTP_E_STATUS_USE_PROXY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844943));
pub const HTTP_E_STATUS_REDIRECT_KEEP_VERB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844941));
pub const HTTP_E_STATUS_BAD_REQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844848));
pub const HTTP_E_STATUS_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844847));
pub const HTTP_E_STATUS_PAYMENT_REQ = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844846));
pub const HTTP_E_STATUS_FORBIDDEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844845));
pub const HTTP_E_STATUS_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844844));
pub const HTTP_E_STATUS_BAD_METHOD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844843));
pub const HTTP_E_STATUS_NONE_ACCEPTABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844842));
pub const HTTP_E_STATUS_PROXY_AUTH_REQ = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844841));
pub const HTTP_E_STATUS_REQUEST_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844840));
pub const HTTP_E_STATUS_CONFLICT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844839));
pub const HTTP_E_STATUS_GONE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844838));
pub const HTTP_E_STATUS_LENGTH_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844837));
pub const HTTP_E_STATUS_PRECOND_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844836));
pub const HTTP_E_STATUS_REQUEST_TOO_LARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844835));
pub const HTTP_E_STATUS_URI_TOO_LONG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844834));
pub const HTTP_E_STATUS_UNSUPPORTED_MEDIA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844833));
pub const HTTP_E_STATUS_RANGE_NOT_SATISFIABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844832));
pub const HTTP_E_STATUS_EXPECTATION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844831));
pub const HTTP_E_STATUS_SERVER_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844748));
pub const HTTP_E_STATUS_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844747));
pub const HTTP_E_STATUS_BAD_GATEWAY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844746));
pub const HTTP_E_STATUS_SERVICE_UNAVAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844745));
pub const HTTP_E_STATUS_GATEWAY_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844744));
pub const HTTP_E_STATUS_VERSION_NOT_SUP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844743));
pub const E_INVALID_PROTOCOL_OPERATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089418751));
pub const E_INVALID_PROTOCOL_FORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089418750));
pub const E_PROTOCOL_EXTENSIONS_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089418749));
pub const E_SUBPROTOCOL_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089418748));
pub const E_PROTOCOL_VERSION_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089418747));
pub const INPUT_E_OUT_OF_ORDER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143289344));
pub const INPUT_E_REENTRANCY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143289343));
pub const INPUT_E_MULTIMODAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143289342));
pub const INPUT_E_PACKET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143289341));
pub const INPUT_E_FRAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143289340));
pub const INPUT_E_HISTORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143289339));
pub const INPUT_E_DEVICE_INFO = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143289338));
pub const INPUT_E_TRANSFORM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143289337));
pub const INPUT_E_DEVICE_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143289336));
pub const ERROR_DBG_CREATE_PROCESS_FAILURE_LOCKDOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2135949311));
pub const ERROR_DBG_ATTACH_PROCESS_FAILURE_LOCKDOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2135949310));
pub const ERROR_DBG_CONNECT_SERVER_FAILURE_LOCKDOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2135949309));
pub const ERROR_DBG_START_SERVER_FAILURE_LOCKDOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2135949308));
pub const HSP_E_ERROR_MASK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128084992));
pub const HSP_E_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128080897));
pub const HSP_BS_ERROR_MASK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128080896));
pub const HSP_BS_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128080641));
pub const HSP_DRV_ERROR_MASK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128019456));
pub const HSP_DRV_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128019201));
pub const HSP_BASE_ERROR_MASK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128019200));
pub const HSP_BASE_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128018945));
pub const HSP_KSP_ERROR_MASK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128018944));
pub const HSP_KSP_DEVICE_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128018943));
pub const HSP_KSP_INVALID_PROVIDER_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128018942));
pub const HSP_KSP_INVALID_KEY_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128018941));
pub const HSP_KSP_INVALID_PARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128018940));
pub const HSP_KSP_BUFFER_TOO_SMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128018939));
pub const HSP_KSP_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128018938));
pub const HSP_KSP_INVALID_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128018937));
pub const HSP_KSP_INVALID_FLAGS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128018936));
pub const HSP_KSP_ALGORITHM_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128018935));
pub const HSP_KSP_KEY_ALREADY_FINALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128018934));
pub const HSP_KSP_KEY_NOT_FINALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128018933));
pub const HSP_KSP_INVALID_KEY_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128018932));
pub const HSP_KSP_NO_MEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128018928));
pub const HSP_KSP_PARAMETER_NOT_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128018927));
pub const HSP_KSP_KEY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128018923));
pub const HSP_KSP_KEY_MISSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128018922));
pub const HSP_KSP_KEY_LOAD_FAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128018921));
pub const HSP_KSP_NO_MORE_ITEMS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128018920));
pub const HSP_KSP_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2128018689));
pub const ERROR_IO_PREEMPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1996423167));
pub const JSCRIPT_E_CANTEXECUTE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1996357631));
pub const WEP_E_NOT_PROVISIONED_ON_ALL_VOLUMES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013200383));
pub const WEP_E_FIXED_DATA_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013200382));
pub const WEP_E_HARDWARE_NOT_COMPLIANT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013200381));
pub const WEP_E_LOCK_NOT_CONFIGURED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013200380));
pub const WEP_E_PROTECTION_SUSPENDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013200379));
pub const WEP_E_NO_LICENSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013200378));
pub const WEP_E_OS_NOT_PROTECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013200377));
pub const WEP_E_UNEXPECTED_FAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013200376));
pub const WEP_E_BUFFER_TOO_LARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013200375));
pub const ERROR_SVHDX_ERROR_STORED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067712512));
pub const ERROR_SVHDX_ERROR_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647232));
pub const ERROR_SVHDX_UNIT_ATTENTION_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647231));
pub const ERROR_SVHDX_UNIT_ATTENTION_CAPACITY_DATA_CHANGED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647230));
pub const ERROR_SVHDX_UNIT_ATTENTION_RESERVATIONS_PREEMPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647229));
pub const ERROR_SVHDX_UNIT_ATTENTION_RESERVATIONS_RELEASED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647228));
pub const ERROR_SVHDX_UNIT_ATTENTION_REGISTRATIONS_PREEMPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647227));
pub const ERROR_SVHDX_UNIT_ATTENTION_OPERATING_DEFINITION_CHANGED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647226));
pub const ERROR_SVHDX_RESERVATION_CONFLICT = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647225));
pub const ERROR_SVHDX_WRONG_FILE_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647224));
pub const ERROR_SVHDX_VERSION_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647223));
pub const ERROR_VHD_SHARED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647222));
pub const ERROR_SVHDX_NO_INITIATOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647221));
pub const ERROR_VHDSET_BACKING_STORAGE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647220));
pub const ERROR_SMB_NO_PREAUTH_INTEGRITY_HASH_OVERLAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067646976));
pub const ERROR_SMB_BAD_CLUSTER_DIALECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067646975));
pub const ERROR_SMB_NO_SIGNING_ALGORITHM_OVERLAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067646974));
pub const WININET_E_OUT_OF_HANDLES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012895));
pub const WININET_E_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012894));
pub const WININET_E_EXTENDED_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012893));
pub const WININET_E_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012892));
pub const WININET_E_INVALID_URL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012891));
pub const WININET_E_UNRECOGNIZED_SCHEME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012890));
pub const WININET_E_NAME_NOT_RESOLVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012889));
pub const WININET_E_PROTOCOL_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012888));
pub const WININET_E_INVALID_OPTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012887));
pub const WININET_E_BAD_OPTION_LENGTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012886));
pub const WININET_E_OPTION_NOT_SETTABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012885));
pub const WININET_E_SHUTDOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012884));
pub const WININET_E_INCORRECT_USER_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012883));
pub const WININET_E_INCORRECT_PASSWORD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012882));
pub const WININET_E_LOGIN_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012881));
pub const WININET_E_INVALID_OPERATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012880));
pub const WININET_E_OPERATION_CANCELLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012879));
pub const WININET_E_INCORRECT_HANDLE_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012878));
pub const WININET_E_INCORRECT_HANDLE_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012877));
pub const WININET_E_NOT_PROXY_REQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012876));
pub const WININET_E_REGISTRY_VALUE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012875));
pub const WININET_E_BAD_REGISTRY_PARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012874));
pub const WININET_E_NO_DIRECT_ACCESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012873));
pub const WININET_E_NO_CONTEXT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012872));
pub const WININET_E_NO_CALLBACK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012871));
pub const WININET_E_REQUEST_PENDING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012870));
pub const WININET_E_INCORRECT_FORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012869));
pub const WININET_E_ITEM_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012868));
pub const WININET_E_CANNOT_CONNECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012867));
pub const WININET_E_CONNECTION_ABORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012866));
pub const WININET_E_CONNECTION_RESET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012865));
pub const WININET_E_FORCE_RETRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012864));
pub const WININET_E_INVALID_PROXY_REQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012863));
pub const WININET_E_NEED_UI = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012862));
pub const WININET_E_HANDLE_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012860));
pub const WININET_E_SEC_CERT_DATE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012859));
pub const WININET_E_SEC_CERT_CN_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012858));
pub const WININET_E_HTTP_TO_HTTPS_ON_REDIR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012857));
pub const WININET_E_HTTPS_TO_HTTP_ON_REDIR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012856));
pub const WININET_E_MIXED_SECURITY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012855));
pub const WININET_E_CHG_POST_IS_NON_SECURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012854));
pub const WININET_E_POST_IS_NON_SECURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012853));
pub const WININET_E_CLIENT_AUTH_CERT_NEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012852));
pub const WININET_E_INVALID_CA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012851));
pub const WININET_E_CLIENT_AUTH_NOT_SETUP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012850));
pub const WININET_E_ASYNC_THREAD_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012849));
pub const WININET_E_REDIRECT_SCHEME_CHANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012848));
pub const WININET_E_DIALOG_PENDING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012847));
pub const WININET_E_RETRY_DIALOG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012846));
pub const WININET_E_NO_NEW_CONTAINERS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012845));
pub const WININET_E_HTTPS_HTTP_SUBMIT_REDIR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012844));
pub const WININET_E_SEC_CERT_ERRORS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012841));
pub const WININET_E_SEC_CERT_REV_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012839));
pub const WININET_E_HEADER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012746));
pub const WININET_E_DOWNLEVEL_SERVER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012745));
pub const WININET_E_INVALID_SERVER_RESPONSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012744));
pub const WININET_E_INVALID_HEADER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012743));
pub const WININET_E_INVALID_QUERY_REQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012742));
pub const WININET_E_HEADER_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012741));
pub const WININET_E_REDIRECT_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012740));
pub const WININET_E_SECURITY_CHANNEL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012739));
pub const WININET_E_UNABLE_TO_CACHE_FILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012738));
pub const WININET_E_TCPIP_NOT_INSTALLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012737));
pub const WININET_E_DISCONNECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012733));
pub const WININET_E_SERVER_UNREACHABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012732));
pub const WININET_E_PROXY_SERVER_UNREACHABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012731));
pub const WININET_E_BAD_AUTO_PROXY_SCRIPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012730));
pub const WININET_E_UNABLE_TO_DOWNLOAD_SCRIPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012729));
pub const WININET_E_SEC_INVALID_CERT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012727));
pub const WININET_E_SEC_CERT_REVOKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012726));
pub const WININET_E_FAILED_DUETOSECURITYCHECK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012725));
pub const WININET_E_NOT_INITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012724));
pub const WININET_E_LOGIN_FAILURE_DISPLAY_ENTITY_BODY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012722));
pub const WININET_E_DECODING_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012721));
pub const WININET_E_NOT_REDIRECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012736));
pub const WININET_E_COOKIE_NEEDS_CONFIRMATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012735));
pub const WININET_E_COOKIE_DECLINED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012734));
pub const WININET_E_REDIRECT_NEEDS_CONFIRMATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012728));
pub const SQLITE_E_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574335));
pub const SQLITE_E_INTERNAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574334));
pub const SQLITE_E_PERM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574333));
pub const SQLITE_E_ABORT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574332));
pub const SQLITE_E_BUSY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574331));
pub const SQLITE_E_LOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574330));
pub const SQLITE_E_NOMEM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574329));
pub const SQLITE_E_READONLY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574328));
pub const SQLITE_E_INTERRUPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574327));
pub const SQLITE_E_IOERR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574326));
pub const SQLITE_E_CORRUPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574325));
pub const SQLITE_E_NOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574324));
pub const SQLITE_E_FULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574323));
pub const SQLITE_E_CANTOPEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574322));
pub const SQLITE_E_PROTOCOL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574321));
pub const SQLITE_E_EMPTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574320));
pub const SQLITE_E_SCHEMA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574319));
pub const SQLITE_E_TOOBIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574318));
pub const SQLITE_E_CONSTRAINT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574317));
pub const SQLITE_E_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574316));
pub const SQLITE_E_MISUSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574315));
pub const SQLITE_E_NOLFS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574314));
pub const SQLITE_E_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574313));
pub const SQLITE_E_FORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574312));
pub const SQLITE_E_RANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574311));
pub const SQLITE_E_NOTADB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574310));
pub const SQLITE_E_NOTICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574309));
pub const SQLITE_E_WARNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574308));
pub const SQLITE_E_ROW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574236));
pub const SQLITE_E_DONE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574235));
pub const SQLITE_E_IOERR_READ = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574070));
pub const SQLITE_E_IOERR_SHORT_READ = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573814));
pub const SQLITE_E_IOERR_WRITE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573558));
pub const SQLITE_E_IOERR_FSYNC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573302));
pub const SQLITE_E_IOERR_DIR_FSYNC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573046));
pub const SQLITE_E_IOERR_TRUNCATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018572790));
pub const SQLITE_E_IOERR_FSTAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018572534));
pub const SQLITE_E_IOERR_UNLOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018572278));
pub const SQLITE_E_IOERR_RDLOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018572022));
pub const SQLITE_E_IOERR_DELETE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018571766));
pub const SQLITE_E_IOERR_BLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018571510));
pub const SQLITE_E_IOERR_NOMEM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018571254));
pub const SQLITE_E_IOERR_ACCESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018570998));
pub const SQLITE_E_IOERR_CHECKRESERVEDLOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018570742));
pub const SQLITE_E_IOERR_LOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018570486));
pub const SQLITE_E_IOERR_CLOSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018570230));
pub const SQLITE_E_IOERR_DIR_CLOSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018569974));
pub const SQLITE_E_IOERR_SHMOPEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018569718));
pub const SQLITE_E_IOERR_SHMSIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018569462));
pub const SQLITE_E_IOERR_SHMLOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018569206));
pub const SQLITE_E_IOERR_SHMMAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018568950));
pub const SQLITE_E_IOERR_SEEK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018568694));
pub const SQLITE_E_IOERR_DELETE_NOENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018568438));
pub const SQLITE_E_IOERR_MMAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018568182));
pub const SQLITE_E_IOERR_GETTEMPPATH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018567926));
pub const SQLITE_E_IOERR_CONVPATH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018567670));
pub const SQLITE_E_IOERR_VNODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018567678));
pub const SQLITE_E_IOERR_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018567677));
pub const SQLITE_E_LOCKED_SHAREDCACHE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574074));
pub const SQLITE_E_BUSY_RECOVERY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574075));
pub const SQLITE_E_BUSY_SNAPSHOT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573819));
pub const SQLITE_E_CANTOPEN_NOTEMPDIR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574066));
pub const SQLITE_E_CANTOPEN_ISDIR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573810));
pub const SQLITE_E_CANTOPEN_FULLPATH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573554));
pub const SQLITE_E_CANTOPEN_CONVPATH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573298));
pub const SQLITE_E_CORRUPT_VTAB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574069));
pub const SQLITE_E_READONLY_RECOVERY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574072));
pub const SQLITE_E_READONLY_CANTLOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573816));
pub const SQLITE_E_READONLY_ROLLBACK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573560));
pub const SQLITE_E_READONLY_DBMOVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573304));
pub const SQLITE_E_ABORT_ROLLBACK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573820));
pub const SQLITE_E_CONSTRAINT_CHECK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574061));
pub const SQLITE_E_CONSTRAINT_COMMITHOOK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573805));
pub const SQLITE_E_CONSTRAINT_FOREIGNKEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573549));
pub const SQLITE_E_CONSTRAINT_FUNCTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573293));
pub const SQLITE_E_CONSTRAINT_NOTNULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573037));
pub const SQLITE_E_CONSTRAINT_PRIMARYKEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018572781));
pub const SQLITE_E_CONSTRAINT_TRIGGER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018572525));
pub const SQLITE_E_CONSTRAINT_UNIQUE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018572269));
pub const SQLITE_E_CONSTRAINT_VTAB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018572013));
pub const SQLITE_E_CONSTRAINT_ROWID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018571757));
pub const SQLITE_E_NOTICE_RECOVER_WAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574053));
pub const SQLITE_E_NOTICE_RECOVER_ROLLBACK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573797));
pub const SQLITE_E_WARNING_AUTOINDEX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574052));
pub const UTC_E_TOGGLE_TRACE_STARTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128447));
pub const UTC_E_ALTERNATIVE_TRACE_CANNOT_PREEMPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128446));
pub const UTC_E_AOT_NOT_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128445));
pub const UTC_E_SCRIPT_TYPE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128444));
pub const UTC_E_SCENARIODEF_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128443));
pub const UTC_E_TRACEPROFILE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128442));
pub const UTC_E_FORWARDER_ALREADY_ENABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128441));
pub const UTC_E_FORWARDER_ALREADY_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128440));
pub const UTC_E_EVENTLOG_ENTRY_MALFORMED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128439));
pub const UTC_E_DIAGRULES_SCHEMAVERSION_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128438));
pub const UTC_E_SCRIPT_TERMINATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128437));
pub const UTC_E_INVALID_CUSTOM_FILTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128436));
pub const UTC_E_TRACE_NOT_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128435));
pub const UTC_E_REESCALATED_TOO_QUICKLY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128434));
pub const UTC_E_ESCALATION_ALREADY_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128433));
pub const UTC_E_PERFTRACK_ALREADY_TRACING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128432));
pub const UTC_E_REACHED_MAX_ESCALATIONS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128431));
pub const UTC_E_FORWARDER_PRODUCER_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128430));
pub const UTC_E_INTENTIONAL_SCRIPT_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128429));
pub const UTC_E_SQM_INIT_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128428));
pub const UTC_E_NO_WER_LOGGER_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128427));
pub const UTC_E_TRACERS_DONT_EXIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128426));
pub const UTC_E_WINRT_INIT_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128425));
pub const UTC_E_SCENARIODEF_SCHEMAVERSION_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128424));
pub const UTC_E_INVALID_FILTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128423));
pub const UTC_E_EXE_TERMINATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128422));
pub const UTC_E_ESCALATION_NOT_AUTHORIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128421));
pub const UTC_E_SETUP_NOT_AUTHORIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128420));
pub const UTC_E_CHILD_PROCESS_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128419));
pub const UTC_E_COMMAND_LINE_NOT_AUTHORIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128418));
pub const UTC_E_CANNOT_LOAD_SCENARIO_EDITOR_XML = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128417));
pub const UTC_E_ESCALATION_TIMED_OUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128416));
pub const UTC_E_SETUP_TIMED_OUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128415));
pub const UTC_E_TRIGGER_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128414));
pub const UTC_E_TRIGGER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128413));
pub const UTC_E_SIF_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128412));
pub const UTC_E_DELAY_TERMINATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128411));
pub const UTC_E_DEVICE_TICKET_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128410));
pub const UTC_E_TRACE_BUFFER_LIMIT_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128409));
pub const UTC_E_API_RESULT_UNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128408));
pub const UTC_E_RPC_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128407));
pub const UTC_E_RPC_WAIT_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128406));
pub const UTC_E_API_BUSY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128405));
pub const UTC_E_TRACE_MIN_DURATION_REQUIREMENT_NOT_MET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128404));
pub const UTC_E_EXCLUSIVITY_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128403));
pub const UTC_E_GETFILE_FILE_PATH_NOT_APPROVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128402));
pub const UTC_E_ESCALATION_DIRECTORY_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128401));
pub const UTC_E_TIME_TRIGGER_ON_START_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128400));
pub const UTC_E_TIME_TRIGGER_ONLY_VALID_ON_SINGLE_TRANSITION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128399));
pub const UTC_E_TIME_TRIGGER_INVALID_TIME_RANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128398));
pub const UTC_E_MULTIPLE_TIME_TRIGGER_ON_SINGLE_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128397));
pub const UTC_E_BINARY_MISSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128396));
pub const UTC_E_FAILED_TO_RESOLVE_CONTAINER_ID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128394));
pub const UTC_E_UNABLE_TO_RESOLVE_SESSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128393));
pub const UTC_E_THROTTLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128392));
pub const UTC_E_UNAPPROVED_SCRIPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128391));
pub const UTC_E_SCRIPT_MISSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128390));
pub const UTC_E_SCENARIO_THROTTLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128389));
pub const UTC_E_API_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128388));
pub const UTC_E_GETFILE_EXTERNAL_PATH_NOT_APPROVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128387));
pub const UTC_E_TRY_GET_SCENARIO_TIMEOUT_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128386));
pub const UTC_E_CERT_REV_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128385));
pub const UTC_E_FAILED_TO_START_NDISCAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128384));
pub const UTC_E_KERNELDUMP_LIMIT_REACHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128383));
pub const UTC_E_MISSING_AGGREGATE_EVENT_TAG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128382));
pub const UTC_E_INVALID_AGGREGATION_STRUCT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128381));
pub const UTC_E_ACTION_NOT_SUPPORTED_IN_DESTINATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128380));
pub const UTC_E_FILTER_MISSING_ATTRIBUTE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128379));
pub const UTC_E_FILTER_INVALID_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128378));
pub const UTC_E_FILTER_VARIABLE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128377));
pub const UTC_E_FILTER_FUNCTION_RESTRICTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128376));
pub const UTC_E_FILTER_VERSION_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128375));
pub const UTC_E_FILTER_INVALID_FUNCTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128368));
pub const UTC_E_FILTER_INVALID_FUNCTION_PARAMS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128367));
pub const UTC_E_FILTER_INVALID_COMMAND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128366));
pub const UTC_E_FILTER_ILLEGAL_EVAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128365));
pub const UTC_E_TTTRACER_RETURNED_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128364));
pub const UTC_E_AGENT_DIAGNOSTICS_TOO_LARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128363));
pub const UTC_E_FAILED_TO_RECEIVE_AGENT_DIAGNOSTICS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128362));
pub const UTC_E_SCENARIO_HAS_NO_ACTIONS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128361));
pub const UTC_E_TTTRACER_STORAGE_FULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128360));
pub const UTC_E_INSUFFICIENT_SPACE_TO_START_TRACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128359));
pub const UTC_E_ESCALATION_CANCELLED_AT_SHUTDOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128358));
pub const UTC_E_GETFILEINFOACTION_FILE_NOT_APPROVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128357));
pub const UTC_E_SETREGKEYACTION_TYPE_NOT_APPROVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128356));
pub const UTC_E_TRACE_THROTTLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128355));
pub const WINML_ERR_INVALID_DEVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003828735));
pub const WINML_ERR_INVALID_BINDING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003828734));
pub const WINML_ERR_VALUE_NOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003828733));
pub const WINML_ERR_SIZE_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003828732));
pub const ERROR_QUIC_HANDSHAKE_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143223808));
pub const ERROR_QUIC_VER_NEG_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143223807));
pub const ERROR_QUIC_USER_CANCELED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143223806));
pub const ERROR_QUIC_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143223805));
pub const ERROR_QUIC_PROTOCOL_VIOLATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143223804));
pub const ERROR_QUIC_CONNECTION_IDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143223803));
pub const ERROR_QUIC_CONNECTION_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143223802));
pub const ERROR_QUIC_ALPN_NEG_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143223801));
pub const IORING_E_REQUIRED_FLAG_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2142896127));
pub const IORING_E_SUBMISSION_QUEUE_FULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2142896126));
pub const IORING_E_VERSION_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2142896125));
pub const IORING_E_SUBMISSION_QUEUE_TOO_BIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2142896124));
pub const IORING_E_COMPLETION_QUEUE_TOO_BIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2142896123));
pub const IORING_E_SUBMIT_IN_PROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2142896122));
pub const IORING_E_CORRUPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2142896121));
pub const STATUS_SEVERITY_COERROR = @as(u32, 2);
pub const STATUS_SEVERITY_COFAIL = @as(u32, 3);
pub const NOT_AN_ERROR1 = @import("zig.zig").typedConst(HRESULT, @as(i32, 529920));
pub const QUERY_E_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215872));
pub const QUERY_E_INVALIDQUERY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215871));
pub const QUERY_E_INVALIDRESTRICTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215870));
pub const QUERY_E_INVALIDSORT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215869));
pub const QUERY_E_INVALIDCATEGORIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215868));
pub const QUERY_E_ALLNOISE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215867));
pub const QUERY_E_TOOCOMPLEX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215866));
pub const QUERY_E_TIMEDOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215865));
pub const QUERY_E_DUPLICATE_OUTPUT_COLUMN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215864));
pub const QUERY_E_INVALID_OUTPUT_COLUMN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215863));
pub const QUERY_E_INVALID_DIRECTORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215862));
pub const QUERY_E_DIR_ON_REMOVABLE_DRIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215861));
pub const QUERY_S_NO_QUERY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215860));
pub const QPLIST_E_CANT_OPEN_FILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215791));
pub const QPLIST_E_READ_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215790));
pub const QPLIST_E_EXPECTING_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215789));
pub const QPLIST_E_EXPECTING_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215788));
pub const QPLIST_E_UNRECOGNIZED_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215787));
pub const QPLIST_E_EXPECTING_INTEGER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215786));
pub const QPLIST_E_EXPECTING_CLOSE_PAREN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215785));
pub const QPLIST_E_EXPECTING_GUID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215784));
pub const QPLIST_E_BAD_GUID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215783));
pub const QPLIST_E_EXPECTING_PROP_SPEC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215782));
pub const QPLIST_E_CANT_SET_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215781));
pub const QPLIST_E_DUPLICATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215780));
pub const QPLIST_E_VECTORBYREF_USED_ALONE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215779));
pub const QPLIST_E_BYREF_USED_WITHOUT_PTRTYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215778));
pub const QPARSE_E_UNEXPECTED_NOT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215776));
pub const QPARSE_E_EXPECTING_INTEGER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215775));
pub const QPARSE_E_EXPECTING_REAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215774));
pub const QPARSE_E_EXPECTING_DATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215773));
pub const QPARSE_E_EXPECTING_CURRENCY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215772));
pub const QPARSE_E_EXPECTING_GUID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215771));
pub const QPARSE_E_EXPECTING_BRACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215770));
pub const QPARSE_E_EXPECTING_PAREN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215769));
pub const QPARSE_E_EXPECTING_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215768));
pub const QPARSE_E_NOT_YET_IMPLEMENTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215767));
pub const QPARSE_E_EXPECTING_PHRASE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215766));
pub const QPARSE_E_UNSUPPORTED_PROPERTY_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215765));
pub const QPARSE_E_EXPECTING_REGEX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215764));
pub const QPARSE_E_EXPECTING_REGEX_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215763));
pub const QPARSE_E_INVALID_LITERAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215762));
pub const QPARSE_E_NO_SUCH_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215761));
pub const QPARSE_E_EXPECTING_EOS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215760));
pub const QPARSE_E_EXPECTING_COMMA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215759));
pub const QPARSE_E_UNEXPECTED_EOS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215758));
pub const QPARSE_E_WEIGHT_OUT_OF_RANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215757));
pub const QPARSE_E_NO_SUCH_SORT_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215756));
pub const QPARSE_E_INVALID_SORT_ORDER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215755));
pub const QUTIL_E_CANT_CONVERT_VROOT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215754));
pub const QPARSE_E_INVALID_GROUPING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215753));
pub const QUTIL_E_INVALID_CODEPAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1073473928));
pub const QPLIST_S_DUPLICATE = @import("zig.zig").typedConst(HRESULT, @as(i32, 267897));
pub const QPARSE_E_INVALID_QUERY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215750));
pub const QPARSE_E_INVALID_RANKMETHOD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215749));
pub const FDAEMON_W_WORDLISTFULL = @import("zig.zig").typedConst(HRESULT, @as(i32, 267904));
pub const FDAEMON_E_LOWRESOURCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215743));
pub const FDAEMON_E_FATALERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215742));
pub const FDAEMON_E_PARTITIONDELETED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215741));
pub const FDAEMON_E_CHANGEUPDATEFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215740));
pub const FDAEMON_W_EMPTYWORDLIST = @import("zig.zig").typedConst(HRESULT, @as(i32, 267909));
pub const FDAEMON_E_WORDLISTCOMMITFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215738));
pub const FDAEMON_E_NOWORDLIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215737));
pub const FDAEMON_E_TOOMANYFILTEREDBLOCKS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215736));
pub const SEARCH_S_NOMOREHITS = @import("zig.zig").typedConst(HRESULT, @as(i32, 267936));
pub const SEARCH_E_NOMONIKER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215711));
pub const SEARCH_E_NOREGION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215710));
pub const FILTER_E_TOO_BIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215568));
pub const FILTER_S_PARTIAL_CONTENTSCAN_IMMEDIATE = @import("zig.zig").typedConst(HRESULT, @as(i32, 268081));
pub const FILTER_S_FULL_CONTENTSCAN_IMMEDIATE = @import("zig.zig").typedConst(HRESULT, @as(i32, 268082));
pub const FILTER_S_CONTENTSCAN_DELAYED = @import("zig.zig").typedConst(HRESULT, @as(i32, 268083));
pub const FILTER_E_CONTENTINDEXCORRUPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -1073473740));
pub const FILTER_S_DISK_FULL = @import("zig.zig").typedConst(HRESULT, @as(i32, 268085));
pub const FILTER_E_ALREADY_OPEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215562));
pub const FILTER_E_UNREACHABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215561));
pub const FILTER_E_IN_USE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215560));
pub const FILTER_E_NOT_OPEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215559));
pub const FILTER_S_NO_PROPSETS = @import("zig.zig").typedConst(HRESULT, @as(i32, 268090));
pub const FILTER_E_NO_SUCH_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215557));
pub const FILTER_S_NO_SECURITY_DESCRIPTOR = @import("zig.zig").typedConst(HRESULT, @as(i32, 268092));
pub const FILTER_E_OFFLINE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215555));
pub const FILTER_E_PARTIALLY_FILTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215554));
pub const WBREAK_E_END_OF_TEXT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215488));
pub const LANGUAGE_S_LARGE_WORD = @import("zig.zig").typedConst(HRESULT, @as(i32, 268161));
pub const WBREAK_E_QUERY_ONLY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215486));
pub const WBREAK_E_BUFFER_TOO_SMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215485));
pub const LANGUAGE_E_DATABASE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215484));
pub const WBREAK_E_INIT_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215483));
pub const PSINK_E_QUERY_ONLY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215472));
pub const PSINK_E_INDEX_ONLY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215471));
pub const PSINK_E_LARGE_ATTACHMENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215470));
pub const PSINK_S_LARGE_WORD = @import("zig.zig").typedConst(HRESULT, @as(i32, 268179));
pub const CI_CORRUPT_DATABASE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1073473536));
pub const CI_CORRUPT_CATALOG = @import("zig.zig").typedConst(HRESULT, @as(i32, -1073473535));
pub const CI_INVALID_PARTITION = @import("zig.zig").typedConst(HRESULT, @as(i32, -1073473534));
pub const CI_INVALID_PRIORITY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1073473533));
pub const CI_NO_STARTING_KEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1073473532));
pub const CI_OUT_OF_INDEX_IDS = @import("zig.zig").typedConst(HRESULT, @as(i32, -1073473531));
pub const CI_NO_CATALOG = @import("zig.zig").typedConst(HRESULT, @as(i32, -1073473530));
pub const CI_CORRUPT_FILTER_BUFFER = @import("zig.zig").typedConst(HRESULT, @as(i32, -1073473529));
pub const CI_INVALID_INDEX = @import("zig.zig").typedConst(HRESULT, @as(i32, -1073473528));
pub const CI_PROPSTORE_INCONSISTENCY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1073473527));
pub const CI_E_ALREADY_INITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215350));
pub const CI_E_NOT_INITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215349));
pub const CI_E_BUFFERTOOSMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215348));
pub const CI_E_PROPERTY_NOT_CACHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215347));
pub const CI_S_WORKID_DELETED = @import("zig.zig").typedConst(HRESULT, @as(i32, 268302));
pub const CI_E_INVALID_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215345));
pub const CI_E_FILTERING_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215344));
pub const CI_E_DISK_FULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215343));
pub const CI_E_SHUTDOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215342));
pub const CI_E_WORKID_NOTVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215341));
pub const CI_S_END_OF_ENUMERATION = @import("zig.zig").typedConst(HRESULT, @as(i32, 268308));
pub const CI_E_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215339));
pub const CI_E_USE_DEFAULT_PID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215338));
pub const CI_E_DUPLICATE_NOTIFICATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215337));
pub const CI_E_UPDATES_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215336));
pub const CI_E_INVALID_FLAGS_COMBINATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215335));
pub const CI_E_OUTOFSEQ_INCREMENT_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215334));
pub const CI_E_SHARING_VIOLATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215333));
pub const CI_E_LOGON_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215332));
pub const CI_E_NO_CATALOG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215331));
pub const CI_E_STRANGE_PAGEORSECTOR_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215330));
pub const CI_E_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215329));
pub const CI_E_NOT_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215328));
pub const CI_INCORRECT_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -1073473503));
pub const CI_E_ENUMERATION_STARTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1073473502));
pub const CI_E_PROPERTY_TOOLARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1073473501));
pub const CI_E_CLIENT_FILTER_ABORT = @import("zig.zig").typedConst(HRESULT, @as(i32, -1073473500));
pub const CI_S_NO_DOCSTORE = @import("zig.zig").typedConst(HRESULT, @as(i32, 268325));
pub const CI_S_CAT_STOPPED = @import("zig.zig").typedConst(HRESULT, @as(i32, 268326));
pub const CI_E_CARDINALITY_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215321));
pub const CI_E_CONFIG_DISK_FULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215320));
pub const CI_E_DISTRIBUTED_GROUPBY_UNSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147215319));
pub const ROUTEBASE = @as(u32, 900);
pub const SUCCESS = @as(u32, 0);
pub const ERROR_ROUTER_STOPPED = @as(u32, 900);
pub const ERROR_ALREADY_CONNECTED = @as(u32, 901);
pub const ERROR_UNKNOWN_PROTOCOL_ID = @as(u32, 902);
pub const ERROR_DDM_NOT_RUNNING = @as(u32, 903);
pub const ERROR_INTERFACE_ALREADY_EXISTS = @as(u32, 904);
pub const ERROR_NO_SUCH_INTERFACE = @as(u32, 905);
pub const ERROR_INTERFACE_NOT_CONNECTED = @as(u32, 906);
pub const ERROR_PROTOCOL_STOP_PENDING = @as(u32, 907);
pub const ERROR_INTERFACE_CONNECTED = @as(u32, 908);
pub const ERROR_NO_INTERFACE_CREDENTIALS_SET = @as(u32, 909);
pub const ERROR_ALREADY_CONNECTING = @as(u32, 910);
pub const ERROR_UPDATE_IN_PROGRESS = @as(u32, 911);
pub const ERROR_INTERFACE_CONFIGURATION = @as(u32, 912);
pub const ERROR_NOT_CLIENT_PORT = @as(u32, 913);
pub const ERROR_NOT_ROUTER_PORT = @as(u32, 914);
pub const ERROR_CLIENT_INTERFACE_ALREADY_EXISTS = @as(u32, 915);
pub const ERROR_INTERFACE_DISABLED = @as(u32, 916);
pub const ERROR_AUTH_PROTOCOL_REJECTED = @as(u32, 917);
pub const ERROR_NO_AUTH_PROTOCOL_AVAILABLE = @as(u32, 918);
pub const ERROR_PEER_REFUSED_AUTH = @as(u32, 919);
pub const ERROR_REMOTE_NO_DIALIN_PERMISSION = @as(u32, 920);
pub const ERROR_REMOTE_PASSWD_EXPIRED = @as(u32, 921);
pub const ERROR_REMOTE_ACCT_DISABLED = @as(u32, 922);
pub const ERROR_REMOTE_RESTRICTED_LOGON_HOURS = @as(u32, 923);
pub const ERROR_REMOTE_AUTHENTICATION_FAILURE = @as(u32, 924);
pub const ERROR_INTERFACE_HAS_NO_DEVICES = @as(u32, 925);
pub const ERROR_IDLE_DISCONNECTED = @as(u32, 926);
pub const ERROR_INTERFACE_UNREACHABLE = @as(u32, 927);
pub const ERROR_SERVICE_IS_PAUSED = @as(u32, 928);
pub const ERROR_INTERFACE_DISCONNECTED = @as(u32, 929);
pub const ERROR_AUTH_SERVER_TIMEOUT = @as(u32, 930);
pub const ERROR_PORT_LIMIT_REACHED = @as(u32, 931);
pub const ERROR_PPP_SESSION_TIMEOUT = @as(u32, 932);
pub const ERROR_MAX_LAN_INTERFACE_LIMIT = @as(u32, 933);
pub const ERROR_MAX_WAN_INTERFACE_LIMIT = @as(u32, 934);
pub const ERROR_MAX_CLIENT_INTERFACE_LIMIT = @as(u32, 935);
pub const ERROR_BAP_DISCONNECTED = @as(u32, 936);
pub const ERROR_USER_LIMIT = @as(u32, 937);
pub const ERROR_NO_RADIUS_SERVERS = @as(u32, 938);
pub const ERROR_INVALID_RADIUS_RESPONSE = @as(u32, 939);
pub const ERROR_DIALIN_HOURS_RESTRICTION = @as(u32, 940);
pub const ERROR_ALLOWED_PORT_TYPE_RESTRICTION = @as(u32, 941);
pub const ERROR_AUTH_PROTOCOL_RESTRICTION = @as(u32, 942);
pub const ERROR_BAP_REQUIRED = @as(u32, 943);
pub const ERROR_DIALOUT_HOURS_RESTRICTION = @as(u32, 944);
pub const ERROR_ROUTER_CONFIG_INCOMPATIBLE = @as(u32, 945);
pub const WARNING_NO_MD5_MIGRATION = @as(u32, 946);
pub const ERROR_PROTOCOL_ALREADY_INSTALLED = @as(u32, 948);
pub const ERROR_INVALID_SIGNATURE_LENGTH = @as(u32, 949);
pub const ERROR_INVALID_SIGNATURE = @as(u32, 950);
pub const ERROR_NO_SIGNATURE = @as(u32, 951);
pub const ERROR_INVALID_PACKET_LENGTH_OR_ID = @as(u32, 952);
pub const ERROR_INVALID_ATTRIBUTE_LENGTH = @as(u32, 953);
pub const ERROR_INVALID_PACKET = @as(u32, 954);
pub const ERROR_AUTHENTICATOR_MISMATCH = @as(u32, 955);
pub const ERROR_REMOTEACCESS_NOT_CONFIGURED = @as(u32, 956);
pub const ROUTEBASEEND = @as(u32, 957);
pub const _WIN32_MAXVER = @as(u32, 2560);
pub const _WIN32_WINDOWS_MAXVER = @as(u32, 2560);
pub const NTDDI_MAXVER = @as(u32, 2560);
pub const _WIN32_IE_MAXVER = @as(u32, 2560);
pub const _WIN32_WINNT_MAXVER = @as(u32, 2560);
pub const WINVER_MAXVER = @as(u32, 2560);

//--------------------------------------------------------------------------------
// Section: Types (45)
//--------------------------------------------------------------------------------
pub const WIN32_ERROR = enum(u32) {
    NO_ERROR = 0,
    WAIT_ABANDONED = 128,
    WAIT_IO_COMPLETION = 129,
    WAIT_TIMEOUT = 258,
    WAIT_FAILED = 4294967295,
    ERROR_INVALID_FUNCTION = 1,
    ERROR_FILE_NOT_FOUND = 2,
    ERROR_PATH_NOT_FOUND = 3,
    ERROR_TOO_MANY_OPEN_FILES = 4,
    ERROR_ACCESS_DENIED = 5,
    ERROR_INVALID_HANDLE = 6,
    ERROR_ARENA_TRASHED = 7,
    ERROR_NOT_ENOUGH_MEMORY = 8,
    ERROR_INVALID_BLOCK = 9,
    ERROR_BAD_ENVIRONMENT = 10,
    ERROR_BAD_FORMAT = 11,
    ERROR_INVALID_ACCESS = 12,
    ERROR_INVALID_DATA = 13,
    ERROR_OUTOFMEMORY = 14,
    ERROR_INVALID_DRIVE = 15,
    ERROR_CURRENT_DIRECTORY = 16,
    ERROR_NOT_SAME_DEVICE = 17,
    ERROR_NO_MORE_FILES = 18,
    ERROR_WRITE_PROTECT = 19,
    ERROR_BAD_UNIT = 20,
    ERROR_NOT_READY = 21,
    ERROR_BAD_COMMAND = 22,
    ERROR_CRC = 23,
    ERROR_BAD_LENGTH = 24,
    ERROR_SEEK = 25,
    ERROR_NOT_DOS_DISK = 26,
    ERROR_SECTOR_NOT_FOUND = 27,
    ERROR_OUT_OF_PAPER = 28,
    ERROR_WRITE_FAULT = 29,
    ERROR_READ_FAULT = 30,
    ERROR_GEN_FAILURE = 31,
    ERROR_SHARING_VIOLATION = 32,
    ERROR_LOCK_VIOLATION = 33,
    ERROR_WRONG_DISK = 34,
    ERROR_SHARING_BUFFER_EXCEEDED = 36,
    ERROR_HANDLE_EOF = 38,
    ERROR_HANDLE_DISK_FULL = 39,
    ERROR_NOT_SUPPORTED = 50,
    ERROR_REM_NOT_LIST = 51,
    ERROR_DUP_NAME = 52,
    ERROR_BAD_NETPATH = 53,
    ERROR_NETWORK_BUSY = 54,
    ERROR_DEV_NOT_EXIST = 55,
    ERROR_TOO_MANY_CMDS = 56,
    ERROR_ADAP_HDW_ERR = 57,
    ERROR_BAD_NET_RESP = 58,
    ERROR_UNEXP_NET_ERR = 59,
    ERROR_BAD_REM_ADAP = 60,
    ERROR_PRINTQ_FULL = 61,
    ERROR_NO_SPOOL_SPACE = 62,
    ERROR_PRINT_CANCELLED = 63,
    ERROR_NETNAME_DELETED = 64,
    ERROR_NETWORK_ACCESS_DENIED = 65,
    ERROR_BAD_DEV_TYPE = 66,
    ERROR_BAD_NET_NAME = 67,
    ERROR_TOO_MANY_NAMES = 68,
    ERROR_TOO_MANY_SESS = 69,
    ERROR_SHARING_PAUSED = 70,
    ERROR_REQ_NOT_ACCEP = 71,
    ERROR_REDIR_PAUSED = 72,
    ERROR_FILE_EXISTS = 80,
    ERROR_CANNOT_MAKE = 82,
    ERROR_FAIL_I24 = 83,
    ERROR_OUT_OF_STRUCTURES = 84,
    ERROR_ALREADY_ASSIGNED = 85,
    ERROR_INVALID_PASSWORD = 86,
    ERROR_INVALID_PARAMETER = 87,
    ERROR_NET_WRITE_FAULT = 88,
    ERROR_NO_PROC_SLOTS = 89,
    ERROR_TOO_MANY_SEMAPHORES = 100,
    ERROR_EXCL_SEM_ALREADY_OWNED = 101,
    ERROR_SEM_IS_SET = 102,
    ERROR_TOO_MANY_SEM_REQUESTS = 103,
    ERROR_INVALID_AT_INTERRUPT_TIME = 104,
    ERROR_SEM_OWNER_DIED = 105,
    ERROR_SEM_USER_LIMIT = 106,
    ERROR_DISK_CHANGE = 107,
    ERROR_DRIVE_LOCKED = 108,
    ERROR_BROKEN_PIPE = 109,
    ERROR_OPEN_FAILED = 110,
    ERROR_BUFFER_OVERFLOW = 111,
    ERROR_DISK_FULL = 112,
    ERROR_NO_MORE_SEARCH_HANDLES = 113,
    ERROR_INVALID_TARGET_HANDLE = 114,
    ERROR_INVALID_CATEGORY = 117,
    ERROR_INVALID_VERIFY_SWITCH = 118,
    ERROR_BAD_DRIVER_LEVEL = 119,
    ERROR_CALL_NOT_IMPLEMENTED = 120,
    ERROR_SEM_TIMEOUT = 121,
    ERROR_INSUFFICIENT_BUFFER = 122,
    ERROR_INVALID_NAME = 123,
    ERROR_INVALID_LEVEL = 124,
    ERROR_NO_VOLUME_LABEL = 125,
    ERROR_MOD_NOT_FOUND = 126,
    ERROR_PROC_NOT_FOUND = 127,
    ERROR_DIRECT_ACCESS_HANDLE = 130,
    ERROR_NEGATIVE_SEEK = 131,
    ERROR_SEEK_ON_DEVICE = 132,
    ERROR_IS_JOIN_TARGET = 133,
    ERROR_IS_JOINED = 134,
    ERROR_IS_SUBSTED = 135,
    ERROR_NOT_JOINED = 136,
    ERROR_NOT_SUBSTED = 137,
    ERROR_JOIN_TO_JOIN = 138,
    ERROR_SUBST_TO_SUBST = 139,
    ERROR_JOIN_TO_SUBST = 140,
    ERROR_SUBST_TO_JOIN = 141,
    ERROR_BUSY_DRIVE = 142,
    ERROR_SAME_DRIVE = 143,
    ERROR_DIR_NOT_ROOT = 144,
    ERROR_DIR_NOT_EMPTY = 145,
    ERROR_IS_SUBST_PATH = 146,
    ERROR_IS_JOIN_PATH = 147,
    ERROR_PATH_BUSY = 148,
    ERROR_IS_SUBST_TARGET = 149,
    ERROR_SYSTEM_TRACE = 150,
    ERROR_INVALID_EVENT_COUNT = 151,
    ERROR_TOO_MANY_MUXWAITERS = 152,
    ERROR_INVALID_LIST_FORMAT = 153,
    ERROR_LABEL_TOO_LONG = 154,
    ERROR_TOO_MANY_TCBS = 155,
    ERROR_SIGNAL_REFUSED = 156,
    ERROR_DISCARDED = 157,
    ERROR_NOT_LOCKED = 158,
    ERROR_BAD_THREADID_ADDR = 159,
    ERROR_BAD_ARGUMENTS = 160,
    ERROR_BAD_PATHNAME = 161,
    ERROR_SIGNAL_PENDING = 162,
    ERROR_MAX_THRDS_REACHED = 164,
    ERROR_LOCK_FAILED = 167,
    ERROR_BUSY = 170,
    ERROR_DEVICE_SUPPORT_IN_PROGRESS = 171,
    ERROR_CANCEL_VIOLATION = 173,
    ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = 174,
    ERROR_INVALID_SEGMENT_NUMBER = 180,
    ERROR_INVALID_ORDINAL = 182,
    ERROR_ALREADY_EXISTS = 183,
    ERROR_INVALID_FLAG_NUMBER = 186,
    ERROR_SEM_NOT_FOUND = 187,
    ERROR_INVALID_STARTING_CODESEG = 188,
    ERROR_INVALID_STACKSEG = 189,
    ERROR_INVALID_MODULETYPE = 190,
    ERROR_INVALID_EXE_SIGNATURE = 191,
    ERROR_EXE_MARKED_INVALID = 192,
    ERROR_BAD_EXE_FORMAT = 193,
    ERROR_ITERATED_DATA_EXCEEDS_64k = 194,
    ERROR_INVALID_MINALLOCSIZE = 195,
    ERROR_DYNLINK_FROM_INVALID_RING = 196,
    ERROR_IOPL_NOT_ENABLED = 197,
    ERROR_INVALID_SEGDPL = 198,
    ERROR_AUTODATASEG_EXCEEDS_64k = 199,
    ERROR_RING2SEG_MUST_BE_MOVABLE = 200,
    ERROR_RELOC_CHAIN_XEEDS_SEGLIM = 201,
    ERROR_INFLOOP_IN_RELOC_CHAIN = 202,
    ERROR_ENVVAR_NOT_FOUND = 203,
    ERROR_NO_SIGNAL_SENT = 205,
    ERROR_FILENAME_EXCED_RANGE = 206,
    ERROR_RING2_STACK_IN_USE = 207,
    ERROR_META_EXPANSION_TOO_LONG = 208,
    ERROR_INVALID_SIGNAL_NUMBER = 209,
    ERROR_THREAD_1_INACTIVE = 210,
    ERROR_LOCKED = 212,
    ERROR_TOO_MANY_MODULES = 214,
    ERROR_NESTING_NOT_ALLOWED = 215,
    ERROR_EXE_MACHINE_TYPE_MISMATCH = 216,
    ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY = 217,
    ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY = 218,
    ERROR_FILE_CHECKED_OUT = 220,
    ERROR_CHECKOUT_REQUIRED = 221,
    ERROR_BAD_FILE_TYPE = 222,
    ERROR_FILE_TOO_LARGE = 223,
    ERROR_FORMS_AUTH_REQUIRED = 224,
    ERROR_VIRUS_INFECTED = 225,
    ERROR_VIRUS_DELETED = 226,
    ERROR_PIPE_LOCAL = 229,
    ERROR_BAD_PIPE = 230,
    ERROR_PIPE_BUSY = 231,
    ERROR_NO_DATA = 232,
    ERROR_PIPE_NOT_CONNECTED = 233,
    ERROR_MORE_DATA = 234,
    ERROR_NO_WORK_DONE = 235,
    ERROR_VC_DISCONNECTED = 240,
    ERROR_INVALID_EA_NAME = 254,
    ERROR_EA_LIST_INCONSISTENT = 255,
    ERROR_NO_MORE_ITEMS = 259,
    ERROR_CANNOT_COPY = 266,
    ERROR_DIRECTORY = 267,
    ERROR_EAS_DIDNT_FIT = 275,
    ERROR_EA_FILE_CORRUPT = 276,
    ERROR_EA_TABLE_FULL = 277,
    ERROR_INVALID_EA_HANDLE = 278,
    ERROR_EAS_NOT_SUPPORTED = 282,
    ERROR_NOT_OWNER = 288,
    ERROR_TOO_MANY_POSTS = 298,
    ERROR_PARTIAL_COPY = 299,
    ERROR_OPLOCK_NOT_GRANTED = 300,
    ERROR_INVALID_OPLOCK_PROTOCOL = 301,
    ERROR_DISK_TOO_FRAGMENTED = 302,
    ERROR_DELETE_PENDING = 303,
    ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING = 304,
    ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME = 305,
    ERROR_SECURITY_STREAM_IS_INCONSISTENT = 306,
    ERROR_INVALID_LOCK_RANGE = 307,
    ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT = 308,
    ERROR_NOTIFICATION_GUID_ALREADY_DEFINED = 309,
    ERROR_INVALID_EXCEPTION_HANDLER = 310,
    ERROR_DUPLICATE_PRIVILEGES = 311,
    ERROR_NO_RANGES_PROCESSED = 312,
    ERROR_NOT_ALLOWED_ON_SYSTEM_FILE = 313,
    ERROR_DISK_RESOURCES_EXHAUSTED = 314,
    ERROR_INVALID_TOKEN = 315,
    ERROR_DEVICE_FEATURE_NOT_SUPPORTED = 316,
    ERROR_MR_MID_NOT_FOUND = 317,
    ERROR_SCOPE_NOT_FOUND = 318,
    ERROR_UNDEFINED_SCOPE = 319,
    ERROR_INVALID_CAP = 320,
    ERROR_DEVICE_UNREACHABLE = 321,
    ERROR_DEVICE_NO_RESOURCES = 322,
    ERROR_DATA_CHECKSUM_ERROR = 323,
    ERROR_INTERMIXED_KERNEL_EA_OPERATION = 324,
    ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED = 326,
    ERROR_OFFSET_ALIGNMENT_VIOLATION = 327,
    ERROR_INVALID_FIELD_IN_PARAMETER_LIST = 328,
    ERROR_OPERATION_IN_PROGRESS = 329,
    ERROR_BAD_DEVICE_PATH = 330,
    ERROR_TOO_MANY_DESCRIPTORS = 331,
    ERROR_SCRUB_DATA_DISABLED = 332,
    ERROR_NOT_REDUNDANT_STORAGE = 333,
    ERROR_RESIDENT_FILE_NOT_SUPPORTED = 334,
    ERROR_COMPRESSED_FILE_NOT_SUPPORTED = 335,
    ERROR_DIRECTORY_NOT_SUPPORTED = 336,
    ERROR_NOT_READ_FROM_COPY = 337,
    ERROR_FT_WRITE_FAILURE = 338,
    ERROR_FT_DI_SCAN_REQUIRED = 339,
    ERROR_INVALID_KERNEL_INFO_VERSION = 340,
    ERROR_INVALID_PEP_INFO_VERSION = 341,
    ERROR_OBJECT_NOT_EXTERNALLY_BACKED = 342,
    ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN = 343,
    ERROR_COMPRESSION_NOT_BENEFICIAL = 344,
    ERROR_STORAGE_TOPOLOGY_ID_MISMATCH = 345,
    ERROR_BLOCKED_BY_PARENTAL_CONTROLS = 346,
    ERROR_BLOCK_TOO_MANY_REFERENCES = 347,
    ERROR_MARKED_TO_DISALLOW_WRITES = 348,
    ERROR_ENCLAVE_FAILURE = 349,
    ERROR_FAIL_NOACTION_REBOOT = 350,
    ERROR_FAIL_SHUTDOWN = 351,
    ERROR_FAIL_RESTART = 352,
    ERROR_MAX_SESSIONS_REACHED = 353,
    ERROR_NETWORK_ACCESS_DENIED_EDP = 354,
    ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL = 355,
    ERROR_EDP_POLICY_DENIES_OPERATION = 356,
    ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED = 357,
    ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT = 358,
    ERROR_DEVICE_IN_MAINTENANCE = 359,
    ERROR_NOT_SUPPORTED_ON_DAX = 360,
    ERROR_DAX_MAPPING_EXISTS = 361,
    ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING = 362,
    ERROR_CLOUD_FILE_METADATA_CORRUPT = 363,
    ERROR_CLOUD_FILE_METADATA_TOO_LARGE = 364,
    ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE = 365,
    ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH = 366,
    ERROR_CHILD_PROCESS_BLOCKED = 367,
    ERROR_STORAGE_LOST_DATA_PERSISTENCE = 368,
    ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE = 369,
    ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT = 370,
    ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY = 371,
    ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN = 372,
    ERROR_GDI_HANDLE_LEAK = 373,
    ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS = 374,
    ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED = 375,
    ERROR_NOT_A_CLOUD_FILE = 376,
    ERROR_CLOUD_FILE_NOT_IN_SYNC = 377,
    ERROR_CLOUD_FILE_ALREADY_CONNECTED = 378,
    ERROR_CLOUD_FILE_NOT_SUPPORTED = 379,
    ERROR_CLOUD_FILE_INVALID_REQUEST = 380,
    ERROR_CLOUD_FILE_READ_ONLY_VOLUME = 381,
    ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY = 382,
    ERROR_CLOUD_FILE_VALIDATION_FAILED = 383,
    ERROR_SMB1_NOT_AVAILABLE = 384,
    ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION = 385,
    ERROR_CLOUD_FILE_AUTHENTICATION_FAILED = 386,
    ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES = 387,
    ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE = 388,
    ERROR_CLOUD_FILE_UNSUCCESSFUL = 389,
    ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT = 390,
    ERROR_CLOUD_FILE_IN_USE = 391,
    ERROR_CLOUD_FILE_PINNED = 392,
    ERROR_CLOUD_FILE_REQUEST_ABORTED = 393,
    ERROR_CLOUD_FILE_PROPERTY_CORRUPT = 394,
    ERROR_CLOUD_FILE_ACCESS_DENIED = 395,
    ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS = 396,
    ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT = 397,
    ERROR_CLOUD_FILE_REQUEST_CANCELED = 398,
    ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED = 399,
    ERROR_THREAD_MODE_ALREADY_BACKGROUND = 400,
    ERROR_THREAD_MODE_NOT_BACKGROUND = 401,
    ERROR_PROCESS_MODE_ALREADY_BACKGROUND = 402,
    ERROR_PROCESS_MODE_NOT_BACKGROUND = 403,
    ERROR_CLOUD_FILE_PROVIDER_TERMINATED = 404,
    ERROR_NOT_A_CLOUD_SYNC_ROOT = 405,
    ERROR_FILE_PROTECTED_UNDER_DPL = 406,
    ERROR_VOLUME_NOT_CLUSTER_ALIGNED = 407,
    ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND = 408,
    ERROR_APPX_FILE_NOT_ENCRYPTED = 409,
    ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED = 410,
    ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET = 411,
    ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE = 412,
    ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER = 413,
    ERROR_LINUX_SUBSYSTEM_NOT_PRESENT = 414,
    ERROR_FT_READ_FAILURE = 415,
    ERROR_STORAGE_RESERVE_ID_INVALID = 416,
    ERROR_STORAGE_RESERVE_DOES_NOT_EXIST = 417,
    ERROR_STORAGE_RESERVE_ALREADY_EXISTS = 418,
    ERROR_STORAGE_RESERVE_NOT_EMPTY = 419,
    ERROR_NOT_A_DAX_VOLUME = 420,
    ERROR_NOT_DAX_MAPPABLE = 421,
    ERROR_TIME_SENSITIVE_THREAD = 422,
    ERROR_DPL_NOT_SUPPORTED_FOR_USER = 423,
    ERROR_CASE_DIFFERING_NAMES_IN_DIR = 424,
    ERROR_FILE_NOT_SUPPORTED = 425,
    ERROR_CLOUD_FILE_REQUEST_TIMEOUT = 426,
    ERROR_NO_TASK_QUEUE = 427,
    ERROR_SRC_SRV_DLL_LOAD_FAILED = 428,
    ERROR_NOT_SUPPORTED_WITH_BTT = 429,
    ERROR_ENCRYPTION_DISABLED = 430,
    ERROR_ENCRYPTING_METADATA_DISALLOWED = 431,
    ERROR_CANT_CLEAR_ENCRYPTION_FLAG = 432,
    ERROR_NO_SUCH_DEVICE = 433,
    ERROR_CLOUD_FILE_DEHYDRATION_DISALLOWED = 434,
    ERROR_FILE_SNAP_IN_PROGRESS = 435,
    ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED = 436,
    ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED = 437,
    ERROR_FILE_SNAP_IO_NOT_COORDINATED = 438,
    ERROR_FILE_SNAP_UNEXPECTED_ERROR = 439,
    ERROR_FILE_SNAP_INVALID_PARAMETER = 440,
    ERROR_UNSATISFIED_DEPENDENCIES = 441,
    ERROR_CASE_SENSITIVE_PATH = 442,
    ERROR_UNEXPECTED_NTCACHEMANAGER_ERROR = 443,
    ERROR_LINUX_SUBSYSTEM_UPDATE_REQUIRED = 444,
    ERROR_DLP_POLICY_WARNS_AGAINST_OPERATION = 445,
    ERROR_DLP_POLICY_DENIES_OPERATION = 446,
    ERROR_SECURITY_DENIES_OPERATION = 447,
    ERROR_UNTRUSTED_MOUNT_POINT = 448,
    ERROR_DLP_POLICY_SILENTLY_FAIL = 449,
    ERROR_CAPAUTHZ_NOT_DEVUNLOCKED = 450,
    ERROR_CAPAUTHZ_CHANGE_TYPE = 451,
    ERROR_CAPAUTHZ_NOT_PROVISIONED = 452,
    ERROR_CAPAUTHZ_NOT_AUTHORIZED = 453,
    ERROR_CAPAUTHZ_NO_POLICY = 454,
    ERROR_CAPAUTHZ_DB_CORRUPTED = 455,
    ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG = 456,
    ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY = 457,
    ERROR_CAPAUTHZ_SCCD_PARSE_ERROR = 458,
    ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED = 459,
    ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH = 460,
    ERROR_CIMFS_IMAGE_CORRUPT = 470,
    ERROR_CIMFS_IMAGE_VERSION_NOT_SUPPORTED = 471,
    ERROR_STORAGE_STACK_ACCESS_DENIED = 472,
    ERROR_INSUFFICIENT_VIRTUAL_ADDR_RESOURCES = 473,
    ERROR_INDEX_OUT_OF_BOUNDS = 474,
    ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT = 480,
    ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT = 481,
    ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT = 482,
    ERROR_DEVICE_HARDWARE_ERROR = 483,
    ERROR_INVALID_ADDRESS = 487,
    ERROR_HAS_SYSTEM_CRITICAL_FILES = 488,
    ERROR_ENCRYPTED_FILE_NOT_SUPPORTED = 489,
    ERROR_SPARSE_FILE_NOT_SUPPORTED = 490,
    ERROR_PAGEFILE_NOT_SUPPORTED = 491,
    ERROR_VOLUME_NOT_SUPPORTED = 492,
    ERROR_NOT_SUPPORTED_WITH_BYPASSIO = 493,
    ERROR_NO_BYPASSIO_DRIVER_SUPPORT = 494,
    ERROR_NOT_SUPPORTED_WITH_ENCRYPTION = 495,
    ERROR_NOT_SUPPORTED_WITH_COMPRESSION = 496,
    ERROR_NOT_SUPPORTED_WITH_REPLICATION = 497,
    ERROR_NOT_SUPPORTED_WITH_DEDUPLICATION = 498,
    ERROR_NOT_SUPPORTED_WITH_AUDITING = 499,
    ERROR_USER_PROFILE_LOAD = 500,
    ERROR_SESSION_KEY_TOO_SHORT = 501,
    ERROR_ACCESS_DENIED_APPDATA = 502,
    ERROR_NOT_SUPPORTED_WITH_MONITORING = 503,
    ERROR_NOT_SUPPORTED_WITH_SNAPSHOT = 504,
    ERROR_NOT_SUPPORTED_WITH_VIRTUALIZATION = 505,
    ERROR_BYPASSIO_FLT_NOT_SUPPORTED = 506,
    ERROR_DEVICE_RESET_REQUIRED = 507,
    ERROR_VOLUME_WRITE_ACCESS_DENIED = 508,
    ERROR_ARITHMETIC_OVERFLOW = 534,
    ERROR_PIPE_CONNECTED = 535,
    ERROR_PIPE_LISTENING = 536,
    ERROR_VERIFIER_STOP = 537,
    ERROR_ABIOS_ERROR = 538,
    ERROR_WX86_WARNING = 539,
    ERROR_WX86_ERROR = 540,
    ERROR_TIMER_NOT_CANCELED = 541,
    ERROR_UNWIND = 542,
    ERROR_BAD_STACK = 543,
    ERROR_INVALID_UNWIND_TARGET = 544,
    ERROR_INVALID_PORT_ATTRIBUTES = 545,
    ERROR_PORT_MESSAGE_TOO_LONG = 546,
    ERROR_INVALID_QUOTA_LOWER = 547,
    ERROR_DEVICE_ALREADY_ATTACHED = 548,
    ERROR_INSTRUCTION_MISALIGNMENT = 549,
    ERROR_PROFILING_NOT_STARTED = 550,
    ERROR_PROFILING_NOT_STOPPED = 551,
    ERROR_COULD_NOT_INTERPRET = 552,
    ERROR_PROFILING_AT_LIMIT = 553,
    ERROR_CANT_WAIT = 554,
    ERROR_CANT_TERMINATE_SELF = 555,
    ERROR_UNEXPECTED_MM_CREATE_ERR = 556,
    ERROR_UNEXPECTED_MM_MAP_ERROR = 557,
    ERROR_UNEXPECTED_MM_EXTEND_ERR = 558,
    ERROR_BAD_FUNCTION_TABLE = 559,
    ERROR_NO_GUID_TRANSLATION = 560,
    ERROR_INVALID_LDT_SIZE = 561,
    ERROR_INVALID_LDT_OFFSET = 563,
    ERROR_INVALID_LDT_DESCRIPTOR = 564,
    ERROR_TOO_MANY_THREADS = 565,
    ERROR_THREAD_NOT_IN_PROCESS = 566,
    ERROR_PAGEFILE_QUOTA_EXCEEDED = 567,
    ERROR_LOGON_SERVER_CONFLICT = 568,
    ERROR_SYNCHRONIZATION_REQUIRED = 569,
    ERROR_NET_OPEN_FAILED = 570,
    ERROR_IO_PRIVILEGE_FAILED = 571,
    ERROR_CONTROL_C_EXIT = 572,
    ERROR_MISSING_SYSTEMFILE = 573,
    ERROR_UNHANDLED_EXCEPTION = 574,
    ERROR_APP_INIT_FAILURE = 575,
    ERROR_PAGEFILE_CREATE_FAILED = 576,
    ERROR_INVALID_IMAGE_HASH = 577,
    ERROR_NO_PAGEFILE = 578,
    ERROR_ILLEGAL_FLOAT_CONTEXT = 579,
    ERROR_NO_EVENT_PAIR = 580,
    ERROR_DOMAIN_CTRLR_CONFIG_ERROR = 581,
    ERROR_ILLEGAL_CHARACTER = 582,
    ERROR_UNDEFINED_CHARACTER = 583,
    ERROR_FLOPPY_VOLUME = 584,
    ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT = 585,
    ERROR_BACKUP_CONTROLLER = 586,
    ERROR_MUTANT_LIMIT_EXCEEDED = 587,
    ERROR_FS_DRIVER_REQUIRED = 588,
    ERROR_CANNOT_LOAD_REGISTRY_FILE = 589,
    ERROR_DEBUG_ATTACH_FAILED = 590,
    ERROR_SYSTEM_PROCESS_TERMINATED = 591,
    ERROR_DATA_NOT_ACCEPTED = 592,
    ERROR_VDM_HARD_ERROR = 593,
    ERROR_DRIVER_CANCEL_TIMEOUT = 594,
    ERROR_REPLY_MESSAGE_MISMATCH = 595,
    ERROR_LOST_WRITEBEHIND_DATA = 596,
    ERROR_CLIENT_SERVER_PARAMETERS_INVALID = 597,
    ERROR_NOT_TINY_STREAM = 598,
    ERROR_STACK_OVERFLOW_READ = 599,
    ERROR_CONVERT_TO_LARGE = 600,
    ERROR_FOUND_OUT_OF_SCOPE = 601,
    ERROR_ALLOCATE_BUCKET = 602,
    ERROR_MARSHALL_OVERFLOW = 603,
    ERROR_INVALID_VARIANT = 604,
    ERROR_BAD_COMPRESSION_BUFFER = 605,
    ERROR_AUDIT_FAILED = 606,
    ERROR_TIMER_RESOLUTION_NOT_SET = 607,
    ERROR_INSUFFICIENT_LOGON_INFO = 608,
    ERROR_BAD_DLL_ENTRYPOINT = 609,
    ERROR_BAD_SERVICE_ENTRYPOINT = 610,
    ERROR_IP_ADDRESS_CONFLICT1 = 611,
    ERROR_IP_ADDRESS_CONFLICT2 = 612,
    ERROR_REGISTRY_QUOTA_LIMIT = 613,
    ERROR_NO_CALLBACK_ACTIVE = 614,
    ERROR_PWD_TOO_SHORT = 615,
    ERROR_PWD_TOO_RECENT = 616,
    ERROR_PWD_HISTORY_CONFLICT = 617,
    ERROR_UNSUPPORTED_COMPRESSION = 618,
    ERROR_INVALID_HW_PROFILE = 619,
    ERROR_INVALID_PLUGPLAY_DEVICE_PATH = 620,
    ERROR_QUOTA_LIST_INCONSISTENT = 621,
    ERROR_EVALUATION_EXPIRATION = 622,
    ERROR_ILLEGAL_DLL_RELOCATION = 623,
    ERROR_DLL_INIT_FAILED_LOGOFF = 624,
    ERROR_VALIDATE_CONTINUE = 625,
    ERROR_NO_MORE_MATCHES = 626,
    ERROR_RANGE_LIST_CONFLICT = 627,
    ERROR_SERVER_SID_MISMATCH = 628,
    ERROR_CANT_ENABLE_DENY_ONLY = 629,
    ERROR_FLOAT_MULTIPLE_FAULTS = 630,
    ERROR_FLOAT_MULTIPLE_TRAPS = 631,
    ERROR_NOINTERFACE = 632,
    ERROR_DRIVER_FAILED_SLEEP = 633,
    ERROR_CORRUPT_SYSTEM_FILE = 634,
    ERROR_COMMITMENT_MINIMUM = 635,
    ERROR_PNP_RESTART_ENUMERATION = 636,
    ERROR_SYSTEM_IMAGE_BAD_SIGNATURE = 637,
    ERROR_PNP_REBOOT_REQUIRED = 638,
    ERROR_INSUFFICIENT_POWER = 639,
    ERROR_MULTIPLE_FAULT_VIOLATION = 640,
    ERROR_SYSTEM_SHUTDOWN = 641,
    ERROR_PORT_NOT_SET = 642,
    ERROR_DS_VERSION_CHECK_FAILURE = 643,
    ERROR_RANGE_NOT_FOUND = 644,
    ERROR_NOT_SAFE_MODE_DRIVER = 646,
    ERROR_FAILED_DRIVER_ENTRY = 647,
    ERROR_DEVICE_ENUMERATION_ERROR = 648,
    ERROR_MOUNT_POINT_NOT_RESOLVED = 649,
    ERROR_INVALID_DEVICE_OBJECT_PARAMETER = 650,
    ERROR_MCA_OCCURED = 651,
    ERROR_DRIVER_DATABASE_ERROR = 652,
    ERROR_SYSTEM_HIVE_TOO_LARGE = 653,
    ERROR_DRIVER_FAILED_PRIOR_UNLOAD = 654,
    ERROR_VOLSNAP_PREPARE_HIBERNATE = 655,
    ERROR_HIBERNATION_FAILURE = 656,
    ERROR_PWD_TOO_LONG = 657,
    ERROR_FILE_SYSTEM_LIMITATION = 665,
    ERROR_ASSERTION_FAILURE = 668,
    ERROR_ACPI_ERROR = 669,
    ERROR_WOW_ASSERTION = 670,
    ERROR_PNP_BAD_MPS_TABLE = 671,
    ERROR_PNP_TRANSLATION_FAILED = 672,
    ERROR_PNP_IRQ_TRANSLATION_FAILED = 673,
    ERROR_PNP_INVALID_ID = 674,
    ERROR_WAKE_SYSTEM_DEBUGGER = 675,
    ERROR_HANDLES_CLOSED = 676,
    ERROR_EXTRANEOUS_INFORMATION = 677,
    ERROR_RXACT_COMMIT_NECESSARY = 678,
    ERROR_MEDIA_CHECK = 679,
    ERROR_GUID_SUBSTITUTION_MADE = 680,
    ERROR_STOPPED_ON_SYMLINK = 681,
    ERROR_LONGJUMP = 682,
    ERROR_PLUGPLAY_QUERY_VETOED = 683,
    ERROR_UNWIND_CONSOLIDATE = 684,
    ERROR_REGISTRY_HIVE_RECOVERED = 685,
    ERROR_DLL_MIGHT_BE_INSECURE = 686,
    ERROR_DLL_MIGHT_BE_INCOMPATIBLE = 687,
    ERROR_DBG_EXCEPTION_NOT_HANDLED = 688,
    ERROR_DBG_REPLY_LATER = 689,
    ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE = 690,
    ERROR_DBG_TERMINATE_THREAD = 691,
    ERROR_DBG_TERMINATE_PROCESS = 692,
    ERROR_DBG_CONTROL_C = 693,
    ERROR_DBG_PRINTEXCEPTION_C = 694,
    ERROR_DBG_RIPEXCEPTION = 695,
    ERROR_DBG_CONTROL_BREAK = 696,
    ERROR_DBG_COMMAND_EXCEPTION = 697,
    ERROR_OBJECT_NAME_EXISTS = 698,
    ERROR_THREAD_WAS_SUSPENDED = 699,
    ERROR_IMAGE_NOT_AT_BASE = 700,
    ERROR_RXACT_STATE_CREATED = 701,
    ERROR_SEGMENT_NOTIFICATION = 702,
    ERROR_BAD_CURRENT_DIRECTORY = 703,
    ERROR_FT_READ_RECOVERY_FROM_BACKUP = 704,
    ERROR_FT_WRITE_RECOVERY = 705,
    ERROR_IMAGE_MACHINE_TYPE_MISMATCH = 706,
    ERROR_RECEIVE_PARTIAL = 707,
    ERROR_RECEIVE_EXPEDITED = 708,
    ERROR_RECEIVE_PARTIAL_EXPEDITED = 709,
    ERROR_EVENT_DONE = 710,
    ERROR_EVENT_PENDING = 711,
    ERROR_CHECKING_FILE_SYSTEM = 712,
    ERROR_FATAL_APP_EXIT = 713,
    ERROR_PREDEFINED_HANDLE = 714,
    ERROR_WAS_UNLOCKED = 715,
    ERROR_SERVICE_NOTIFICATION = 716,
    ERROR_WAS_LOCKED = 717,
    ERROR_LOG_HARD_ERROR = 718,
    ERROR_ALREADY_WIN32 = 719,
    ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE = 720,
    ERROR_NO_YIELD_PERFORMED = 721,
    ERROR_TIMER_RESUME_IGNORED = 722,
    ERROR_ARBITRATION_UNHANDLED = 723,
    ERROR_CARDBUS_NOT_SUPPORTED = 724,
    ERROR_MP_PROCESSOR_MISMATCH = 725,
    ERROR_HIBERNATED = 726,
    ERROR_RESUME_HIBERNATION = 727,
    ERROR_FIRMWARE_UPDATED = 728,
    ERROR_DRIVERS_LEAKING_LOCKED_PAGES = 729,
    ERROR_WAKE_SYSTEM = 730,
    ERROR_WAIT_1 = 731,
    ERROR_WAIT_2 = 732,
    ERROR_WAIT_3 = 733,
    ERROR_WAIT_63 = 734,
    ERROR_ABANDONED_WAIT_0 = 735,
    ERROR_ABANDONED_WAIT_63 = 736,
    ERROR_USER_APC = 737,
    ERROR_KERNEL_APC = 738,
    ERROR_ALERTED = 739,
    ERROR_ELEVATION_REQUIRED = 740,
    ERROR_REPARSE = 741,
    ERROR_OPLOCK_BREAK_IN_PROGRESS = 742,
    ERROR_VOLUME_MOUNTED = 743,
    ERROR_RXACT_COMMITTED = 744,
    ERROR_NOTIFY_CLEANUP = 745,
    ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED = 746,
    ERROR_PAGE_FAULT_TRANSITION = 747,
    ERROR_PAGE_FAULT_DEMAND_ZERO = 748,
    ERROR_PAGE_FAULT_COPY_ON_WRITE = 749,
    ERROR_PAGE_FAULT_GUARD_PAGE = 750,
    ERROR_PAGE_FAULT_PAGING_FILE = 751,
    ERROR_CACHE_PAGE_LOCKED = 752,
    ERROR_CRASH_DUMP = 753,
    ERROR_BUFFER_ALL_ZEROS = 754,
    ERROR_REPARSE_OBJECT = 755,
    ERROR_RESOURCE_REQUIREMENTS_CHANGED = 756,
    ERROR_TRANSLATION_COMPLETE = 757,
    ERROR_NOTHING_TO_TERMINATE = 758,
    ERROR_PROCESS_NOT_IN_JOB = 759,
    ERROR_PROCESS_IN_JOB = 760,
    ERROR_VOLSNAP_HIBERNATE_READY = 761,
    ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY = 762,
    ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED = 763,
    ERROR_INTERRUPT_STILL_CONNECTED = 764,
    ERROR_WAIT_FOR_OPLOCK = 765,
    ERROR_DBG_EXCEPTION_HANDLED = 766,
    ERROR_DBG_CONTINUE = 767,
    ERROR_CALLBACK_POP_STACK = 768,
    ERROR_COMPRESSION_DISABLED = 769,
    ERROR_CANTFETCHBACKWARDS = 770,
    ERROR_CANTSCROLLBACKWARDS = 771,
    ERROR_ROWSNOTRELEASED = 772,
    ERROR_BAD_ACCESSOR_FLAGS = 773,
    ERROR_ERRORS_ENCOUNTERED = 774,
    ERROR_NOT_CAPABLE = 775,
    ERROR_REQUEST_OUT_OF_SEQUENCE = 776,
    ERROR_VERSION_PARSE_ERROR = 777,
    ERROR_BADSTARTPOSITION = 778,
    ERROR_MEMORY_HARDWARE = 779,
    ERROR_DISK_REPAIR_DISABLED = 780,
    ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE = 781,
    ERROR_SYSTEM_POWERSTATE_TRANSITION = 782,
    ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION = 783,
    ERROR_MCA_EXCEPTION = 784,
    ERROR_ACCESS_AUDIT_BY_POLICY = 785,
    ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY = 786,
    ERROR_ABANDON_HIBERFILE = 787,
    ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED = 788,
    ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR = 789,
    ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR = 790,
    ERROR_BAD_MCFG_TABLE = 791,
    ERROR_DISK_REPAIR_REDIRECTED = 792,
    ERROR_DISK_REPAIR_UNSUCCESSFUL = 793,
    ERROR_CORRUPT_LOG_OVERFULL = 794,
    ERROR_CORRUPT_LOG_CORRUPTED = 795,
    ERROR_CORRUPT_LOG_UNAVAILABLE = 796,
    ERROR_CORRUPT_LOG_DELETED_FULL = 797,
    ERROR_CORRUPT_LOG_CLEARED = 798,
    ERROR_ORPHAN_NAME_EXHAUSTED = 799,
    ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE = 800,
    ERROR_CANNOT_GRANT_REQUESTED_OPLOCK = 801,
    ERROR_CANNOT_BREAK_OPLOCK = 802,
    ERROR_OPLOCK_HANDLE_CLOSED = 803,
    ERROR_NO_ACE_CONDITION = 804,
    ERROR_INVALID_ACE_CONDITION = 805,
    ERROR_FILE_HANDLE_REVOKED = 806,
    ERROR_IMAGE_AT_DIFFERENT_BASE = 807,
    ERROR_ENCRYPTED_IO_NOT_POSSIBLE = 808,
    ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS = 809,
    ERROR_QUOTA_ACTIVITY = 810,
    ERROR_HANDLE_REVOKED = 811,
    ERROR_CALLBACK_INVOKE_INLINE = 812,
    ERROR_CPU_SET_INVALID = 813,
    ERROR_ENCLAVE_NOT_TERMINATED = 814,
    ERROR_ENCLAVE_VIOLATION = 815,
    ERROR_SERVER_TRANSPORT_CONFLICT = 816,
    ERROR_CERTIFICATE_VALIDATION_PREFERENCE_CONFLICT = 817,
    ERROR_FT_READ_FROM_COPY_FAILURE = 818,
    ERROR_SECTION_DIRECT_MAP_ONLY = 819,
    ERROR_EA_ACCESS_DENIED = 994,
    ERROR_OPERATION_ABORTED = 995,
    ERROR_IO_INCOMPLETE = 996,
    ERROR_IO_PENDING = 997,
    ERROR_NOACCESS = 998,
    ERROR_SWAPERROR = 999,
    ERROR_STACK_OVERFLOW = 1001,
    ERROR_INVALID_MESSAGE = 1002,
    ERROR_CAN_NOT_COMPLETE = 1003,
    ERROR_INVALID_FLAGS = 1004,
    ERROR_UNRECOGNIZED_VOLUME = 1005,
    ERROR_FILE_INVALID = 1006,
    ERROR_FULLSCREEN_MODE = 1007,
    ERROR_NO_TOKEN = 1008,
    ERROR_BADDB = 1009,
    ERROR_BADKEY = 1010,
    ERROR_CANTOPEN = 1011,
    ERROR_CANTREAD = 1012,
    ERROR_CANTWRITE = 1013,
    ERROR_REGISTRY_RECOVERED = 1014,
    ERROR_REGISTRY_CORRUPT = 1015,
    ERROR_REGISTRY_IO_FAILED = 1016,
    ERROR_NOT_REGISTRY_FILE = 1017,
    ERROR_KEY_DELETED = 1018,
    ERROR_NO_LOG_SPACE = 1019,
    ERROR_KEY_HAS_CHILDREN = 1020,
    ERROR_CHILD_MUST_BE_VOLATILE = 1021,
    ERROR_NOTIFY_ENUM_DIR = 1022,
    ERROR_DEPENDENT_SERVICES_RUNNING = 1051,
    ERROR_INVALID_SERVICE_CONTROL = 1052,
    ERROR_SERVICE_REQUEST_TIMEOUT = 1053,
    ERROR_SERVICE_NO_THREAD = 1054,
    ERROR_SERVICE_DATABASE_LOCKED = 1055,
    ERROR_SERVICE_ALREADY_RUNNING = 1056,
    ERROR_INVALID_SERVICE_ACCOUNT = 1057,
    ERROR_SERVICE_DISABLED = 1058,
    ERROR_CIRCULAR_DEPENDENCY = 1059,
    ERROR_SERVICE_DOES_NOT_EXIST = 1060,
    ERROR_SERVICE_CANNOT_ACCEPT_CTRL = 1061,
    ERROR_SERVICE_NOT_ACTIVE = 1062,
    ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = 1063,
    ERROR_EXCEPTION_IN_SERVICE = 1064,
    ERROR_DATABASE_DOES_NOT_EXIST = 1065,
    ERROR_SERVICE_SPECIFIC_ERROR = 1066,
    ERROR_PROCESS_ABORTED = 1067,
    ERROR_SERVICE_DEPENDENCY_FAIL = 1068,
    ERROR_SERVICE_LOGON_FAILED = 1069,
    ERROR_SERVICE_START_HANG = 1070,
    ERROR_INVALID_SERVICE_LOCK = 1071,
    ERROR_SERVICE_MARKED_FOR_DELETE = 1072,
    ERROR_SERVICE_EXISTS = 1073,
    ERROR_ALREADY_RUNNING_LKG = 1074,
    ERROR_SERVICE_DEPENDENCY_DELETED = 1075,
    ERROR_BOOT_ALREADY_ACCEPTED = 1076,
    ERROR_SERVICE_NEVER_STARTED = 1077,
    ERROR_DUPLICATE_SERVICE_NAME = 1078,
    ERROR_DIFFERENT_SERVICE_ACCOUNT = 1079,
    ERROR_CANNOT_DETECT_DRIVER_FAILURE = 1080,
    ERROR_CANNOT_DETECT_PROCESS_ABORT = 1081,
    ERROR_NO_RECOVERY_PROGRAM = 1082,
    ERROR_SERVICE_NOT_IN_EXE = 1083,
    ERROR_NOT_SAFEBOOT_SERVICE = 1084,
    ERROR_END_OF_MEDIA = 1100,
    ERROR_FILEMARK_DETECTED = 1101,
    ERROR_BEGINNING_OF_MEDIA = 1102,
    ERROR_SETMARK_DETECTED = 1103,
    ERROR_NO_DATA_DETECTED = 1104,
    ERROR_PARTITION_FAILURE = 1105,
    ERROR_INVALID_BLOCK_LENGTH = 1106,
    ERROR_DEVICE_NOT_PARTITIONED = 1107,
    ERROR_UNABLE_TO_LOCK_MEDIA = 1108,
    ERROR_UNABLE_TO_UNLOAD_MEDIA = 1109,
    ERROR_MEDIA_CHANGED = 1110,
    ERROR_BUS_RESET = 1111,
    ERROR_NO_MEDIA_IN_DRIVE = 1112,
    ERROR_NO_UNICODE_TRANSLATION = 1113,
    ERROR_DLL_INIT_FAILED = 1114,
    ERROR_SHUTDOWN_IN_PROGRESS = 1115,
    ERROR_NO_SHUTDOWN_IN_PROGRESS = 1116,
    ERROR_IO_DEVICE = 1117,
    ERROR_SERIAL_NO_DEVICE = 1118,
    ERROR_IRQ_BUSY = 1119,
    ERROR_MORE_WRITES = 1120,
    ERROR_COUNTER_TIMEOUT = 1121,
    ERROR_FLOPPY_ID_MARK_NOT_FOUND = 1122,
    ERROR_FLOPPY_WRONG_CYLINDER = 1123,
    ERROR_FLOPPY_UNKNOWN_ERROR = 1124,
    ERROR_FLOPPY_BAD_REGISTERS = 1125,
    ERROR_DISK_RECALIBRATE_FAILED = 1126,
    ERROR_DISK_OPERATION_FAILED = 1127,
    ERROR_DISK_RESET_FAILED = 1128,
    ERROR_EOM_OVERFLOW = 1129,
    ERROR_NOT_ENOUGH_SERVER_MEMORY = 1130,
    ERROR_POSSIBLE_DEADLOCK = 1131,
    ERROR_MAPPED_ALIGNMENT = 1132,
    ERROR_SET_POWER_STATE_VETOED = 1140,
    ERROR_SET_POWER_STATE_FAILED = 1141,
    ERROR_TOO_MANY_LINKS = 1142,
    ERROR_OLD_WIN_VERSION = 1150,
    ERROR_APP_WRONG_OS = 1151,
    ERROR_SINGLE_INSTANCE_APP = 1152,
    ERROR_RMODE_APP = 1153,
    ERROR_INVALID_DLL = 1154,
    ERROR_NO_ASSOCIATION = 1155,
    ERROR_DDE_FAIL = 1156,
    ERROR_DLL_NOT_FOUND = 1157,
    ERROR_NO_MORE_USER_HANDLES = 1158,
    ERROR_MESSAGE_SYNC_ONLY = 1159,
    ERROR_SOURCE_ELEMENT_EMPTY = 1160,
    ERROR_DESTINATION_ELEMENT_FULL = 1161,
    ERROR_ILLEGAL_ELEMENT_ADDRESS = 1162,
    ERROR_MAGAZINE_NOT_PRESENT = 1163,
    ERROR_DEVICE_REINITIALIZATION_NEEDED = 1164,
    ERROR_DEVICE_REQUIRES_CLEANING = 1165,
    ERROR_DEVICE_DOOR_OPEN = 1166,
    ERROR_DEVICE_NOT_CONNECTED = 1167,
    ERROR_NOT_FOUND = 1168,
    ERROR_NO_MATCH = 1169,
    ERROR_SET_NOT_FOUND = 1170,
    ERROR_POINT_NOT_FOUND = 1171,
    ERROR_NO_TRACKING_SERVICE = 1172,
    ERROR_NO_VOLUME_ID = 1173,
    ERROR_UNABLE_TO_REMOVE_REPLACED = 1175,
    ERROR_UNABLE_TO_MOVE_REPLACEMENT = 1176,
    ERROR_UNABLE_TO_MOVE_REPLACEMENT_2 = 1177,
    ERROR_JOURNAL_DELETE_IN_PROGRESS = 1178,
    ERROR_JOURNAL_NOT_ACTIVE = 1179,
    ERROR_POTENTIAL_FILE_FOUND = 1180,
    ERROR_JOURNAL_ENTRY_DELETED = 1181,
    ERROR_PARTITION_TERMINATING = 1184,
    ERROR_SHUTDOWN_IS_SCHEDULED = 1190,
    ERROR_SHUTDOWN_USERS_LOGGED_ON = 1191,
    ERROR_SHUTDOWN_DISKS_NOT_IN_MAINTENANCE_MODE = 1192,
    ERROR_BAD_DEVICE = 1200,
    ERROR_CONNECTION_UNAVAIL = 1201,
    ERROR_DEVICE_ALREADY_REMEMBERED = 1202,
    ERROR_NO_NET_OR_BAD_PATH = 1203,
    ERROR_BAD_PROVIDER = 1204,
    ERROR_CANNOT_OPEN_PROFILE = 1205,
    ERROR_BAD_PROFILE = 1206,
    ERROR_NOT_CONTAINER = 1207,
    ERROR_EXTENDED_ERROR = 1208,
    ERROR_INVALID_GROUPNAME = 1209,
    ERROR_INVALID_COMPUTERNAME = 1210,
    ERROR_INVALID_EVENTNAME = 1211,
    ERROR_INVALID_DOMAINNAME = 1212,
    ERROR_INVALID_SERVICENAME = 1213,
    ERROR_INVALID_NETNAME = 1214,
    ERROR_INVALID_SHARENAME = 1215,
    ERROR_INVALID_PASSWORDNAME = 1216,
    ERROR_INVALID_MESSAGENAME = 1217,
    ERROR_INVALID_MESSAGEDEST = 1218,
    ERROR_SESSION_CREDENTIAL_CONFLICT = 1219,
    ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = 1220,
    ERROR_DUP_DOMAINNAME = 1221,
    ERROR_NO_NETWORK = 1222,
    ERROR_CANCELLED = 1223,
    ERROR_USER_MAPPED_FILE = 1224,
    ERROR_CONNECTION_REFUSED = 1225,
    ERROR_GRACEFUL_DISCONNECT = 1226,
    ERROR_ADDRESS_ALREADY_ASSOCIATED = 1227,
    ERROR_ADDRESS_NOT_ASSOCIATED = 1228,
    ERROR_CONNECTION_INVALID = 1229,
    ERROR_CONNECTION_ACTIVE = 1230,
    ERROR_NETWORK_UNREACHABLE = 1231,
    ERROR_HOST_UNREACHABLE = 1232,
    ERROR_PROTOCOL_UNREACHABLE = 1233,
    ERROR_PORT_UNREACHABLE = 1234,
    ERROR_REQUEST_ABORTED = 1235,
    ERROR_CONNECTION_ABORTED = 1236,
    ERROR_RETRY = 1237,
    ERROR_CONNECTION_COUNT_LIMIT = 1238,
    ERROR_LOGIN_TIME_RESTRICTION = 1239,
    ERROR_LOGIN_WKSTA_RESTRICTION = 1240,
    ERROR_INCORRECT_ADDRESS = 1241,
    ERROR_ALREADY_REGISTERED = 1242,
    ERROR_SERVICE_NOT_FOUND = 1243,
    ERROR_NOT_AUTHENTICATED = 1244,
    ERROR_NOT_LOGGED_ON = 1245,
    ERROR_CONTINUE = 1246,
    ERROR_ALREADY_INITIALIZED = 1247,
    ERROR_NO_MORE_DEVICES = 1248,
    ERROR_NO_SUCH_SITE = 1249,
    ERROR_DOMAIN_CONTROLLER_EXISTS = 1250,
    ERROR_ONLY_IF_CONNECTED = 1251,
    ERROR_OVERRIDE_NOCHANGES = 1252,
    ERROR_BAD_USER_PROFILE = 1253,
    ERROR_NOT_SUPPORTED_ON_SBS = 1254,
    ERROR_SERVER_SHUTDOWN_IN_PROGRESS = 1255,
    ERROR_HOST_DOWN = 1256,
    ERROR_NON_ACCOUNT_SID = 1257,
    ERROR_NON_DOMAIN_SID = 1258,
    ERROR_APPHELP_BLOCK = 1259,
    ERROR_ACCESS_DISABLED_BY_POLICY = 1260,
    ERROR_REG_NAT_CONSUMPTION = 1261,
    ERROR_CSCSHARE_OFFLINE = 1262,
    ERROR_PKINIT_FAILURE = 1263,
    ERROR_SMARTCARD_SUBSYSTEM_FAILURE = 1264,
    ERROR_DOWNGRADE_DETECTED = 1265,
    ERROR_MACHINE_LOCKED = 1271,
    ERROR_SMB_GUEST_LOGON_BLOCKED = 1272,
    ERROR_CALLBACK_SUPPLIED_INVALID_DATA = 1273,
    ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED = 1274,
    ERROR_DRIVER_BLOCKED = 1275,
    ERROR_INVALID_IMPORT_OF_NON_DLL = 1276,
    ERROR_ACCESS_DISABLED_WEBBLADE = 1277,
    ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER = 1278,
    ERROR_RECOVERY_FAILURE = 1279,
    ERROR_ALREADY_FIBER = 1280,
    ERROR_ALREADY_THREAD = 1281,
    ERROR_STACK_BUFFER_OVERRUN = 1282,
    ERROR_PARAMETER_QUOTA_EXCEEDED = 1283,
    ERROR_DEBUGGER_INACTIVE = 1284,
    ERROR_DELAY_LOAD_FAILED = 1285,
    ERROR_VDM_DISALLOWED = 1286,
    ERROR_UNIDENTIFIED_ERROR = 1287,
    ERROR_INVALID_CRUNTIME_PARAMETER = 1288,
    ERROR_BEYOND_VDL = 1289,
    ERROR_INCOMPATIBLE_SERVICE_SID_TYPE = 1290,
    ERROR_DRIVER_PROCESS_TERMINATED = 1291,
    ERROR_IMPLEMENTATION_LIMIT = 1292,
    ERROR_PROCESS_IS_PROTECTED = 1293,
    ERROR_SERVICE_NOTIFY_CLIENT_LAGGING = 1294,
    ERROR_DISK_QUOTA_EXCEEDED = 1295,
    ERROR_CONTENT_BLOCKED = 1296,
    ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE = 1297,
    ERROR_APP_HANG = 1298,
    ERROR_INVALID_LABEL = 1299,
    ERROR_NOT_ALL_ASSIGNED = 1300,
    ERROR_SOME_NOT_MAPPED = 1301,
    ERROR_NO_QUOTAS_FOR_ACCOUNT = 1302,
    ERROR_LOCAL_USER_SESSION_KEY = 1303,
    ERROR_NULL_LM_PASSWORD = 1304,
    ERROR_UNKNOWN_REVISION = 1305,
    ERROR_REVISION_MISMATCH = 1306,
    ERROR_INVALID_OWNER = 1307,
    ERROR_INVALID_PRIMARY_GROUP = 1308,
    ERROR_NO_IMPERSONATION_TOKEN = 1309,
    ERROR_CANT_DISABLE_MANDATORY = 1310,
    ERROR_NO_LOGON_SERVERS = 1311,
    ERROR_NO_SUCH_LOGON_SESSION = 1312,
    ERROR_NO_SUCH_PRIVILEGE = 1313,
    ERROR_PRIVILEGE_NOT_HELD = 1314,
    ERROR_INVALID_ACCOUNT_NAME = 1315,
    ERROR_USER_EXISTS = 1316,
    ERROR_NO_SUCH_USER = 1317,
    ERROR_GROUP_EXISTS = 1318,
    ERROR_NO_SUCH_GROUP = 1319,
    ERROR_MEMBER_IN_GROUP = 1320,
    ERROR_MEMBER_NOT_IN_GROUP = 1321,
    ERROR_LAST_ADMIN = 1322,
    ERROR_WRONG_PASSWORD = 1323,
    ERROR_ILL_FORMED_PASSWORD = 1324,
    ERROR_PASSWORD_RESTRICTION = 1325,
    ERROR_LOGON_FAILURE = 1326,
    ERROR_ACCOUNT_RESTRICTION = 1327,
    ERROR_INVALID_LOGON_HOURS = 1328,
    ERROR_INVALID_WORKSTATION = 1329,
    ERROR_PASSWORD_EXPIRED = 1330,
    ERROR_ACCOUNT_DISABLED = 1331,
    ERROR_NONE_MAPPED = 1332,
    ERROR_TOO_MANY_LUIDS_REQUESTED = 1333,
    ERROR_LUIDS_EXHAUSTED = 1334,
    ERROR_INVALID_SUB_AUTHORITY = 1335,
    ERROR_INVALID_ACL = 1336,
    ERROR_INVALID_SID = 1337,
    ERROR_INVALID_SECURITY_DESCR = 1338,
    ERROR_BAD_INHERITANCE_ACL = 1340,
    ERROR_SERVER_DISABLED = 1341,
    ERROR_SERVER_NOT_DISABLED = 1342,
    ERROR_INVALID_ID_AUTHORITY = 1343,
    ERROR_ALLOTTED_SPACE_EXCEEDED = 1344,
    ERROR_INVALID_GROUP_ATTRIBUTES = 1345,
    ERROR_BAD_IMPERSONATION_LEVEL = 1346,
    ERROR_CANT_OPEN_ANONYMOUS = 1347,
    ERROR_BAD_VALIDATION_CLASS = 1348,
    ERROR_BAD_TOKEN_TYPE = 1349,
    ERROR_NO_SECURITY_ON_OBJECT = 1350,
    ERROR_CANT_ACCESS_DOMAIN_INFO = 1351,
    ERROR_INVALID_SERVER_STATE = 1352,
    ERROR_INVALID_DOMAIN_STATE = 1353,
    ERROR_INVALID_DOMAIN_ROLE = 1354,
    ERROR_NO_SUCH_DOMAIN = 1355,
    ERROR_DOMAIN_EXISTS = 1356,
    ERROR_DOMAIN_LIMIT_EXCEEDED = 1357,
    ERROR_INTERNAL_DB_CORRUPTION = 1358,
    ERROR_INTERNAL_ERROR = 1359,
    ERROR_GENERIC_NOT_MAPPED = 1360,
    ERROR_BAD_DESCRIPTOR_FORMAT = 1361,
    ERROR_NOT_LOGON_PROCESS = 1362,
    ERROR_LOGON_SESSION_EXISTS = 1363,
    ERROR_NO_SUCH_PACKAGE = 1364,
    ERROR_BAD_LOGON_SESSION_STATE = 1365,
    ERROR_LOGON_SESSION_COLLISION = 1366,
    ERROR_INVALID_LOGON_TYPE = 1367,
    ERROR_CANNOT_IMPERSONATE = 1368,
    ERROR_RXACT_INVALID_STATE = 1369,
    ERROR_RXACT_COMMIT_FAILURE = 1370,
    ERROR_SPECIAL_ACCOUNT = 1371,
    ERROR_SPECIAL_GROUP = 1372,
    ERROR_SPECIAL_USER = 1373,
    ERROR_MEMBERS_PRIMARY_GROUP = 1374,
    ERROR_TOKEN_ALREADY_IN_USE = 1375,
    ERROR_NO_SUCH_ALIAS = 1376,
    ERROR_MEMBER_NOT_IN_ALIAS = 1377,
    ERROR_MEMBER_IN_ALIAS = 1378,
    ERROR_ALIAS_EXISTS = 1379,
    ERROR_LOGON_NOT_GRANTED = 1380,
    ERROR_TOO_MANY_SECRETS = 1381,
    ERROR_SECRET_TOO_LONG = 1382,
    ERROR_INTERNAL_DB_ERROR = 1383,
    ERROR_TOO_MANY_CONTEXT_IDS = 1384,
    ERROR_LOGON_TYPE_NOT_GRANTED = 1385,
    ERROR_NT_CROSS_ENCRYPTION_REQUIRED = 1386,
    ERROR_NO_SUCH_MEMBER = 1387,
    ERROR_INVALID_MEMBER = 1388,
    ERROR_TOO_MANY_SIDS = 1389,
    ERROR_LM_CROSS_ENCRYPTION_REQUIRED = 1390,
    ERROR_NO_INHERITANCE = 1391,
    ERROR_FILE_CORRUPT = 1392,
    ERROR_DISK_CORRUPT = 1393,
    ERROR_NO_USER_SESSION_KEY = 1394,
    ERROR_LICENSE_QUOTA_EXCEEDED = 1395,
    ERROR_WRONG_TARGET_NAME = 1396,
    ERROR_MUTUAL_AUTH_FAILED = 1397,
    ERROR_TIME_SKEW = 1398,
    ERROR_CURRENT_DOMAIN_NOT_ALLOWED = 1399,
    ERROR_INVALID_WINDOW_HANDLE = 1400,
    ERROR_INVALID_MENU_HANDLE = 1401,
    ERROR_INVALID_CURSOR_HANDLE = 1402,
    ERROR_INVALID_ACCEL_HANDLE = 1403,
    ERROR_INVALID_HOOK_HANDLE = 1404,
    ERROR_INVALID_DWP_HANDLE = 1405,
    ERROR_TLW_WITH_WSCHILD = 1406,
    ERROR_CANNOT_FIND_WND_CLASS = 1407,
    ERROR_WINDOW_OF_OTHER_THREAD = 1408,
    ERROR_HOTKEY_ALREADY_REGISTERED = 1409,
    ERROR_CLASS_ALREADY_EXISTS = 1410,
    ERROR_CLASS_DOES_NOT_EXIST = 1411,
    ERROR_CLASS_HAS_WINDOWS = 1412,
    ERROR_INVALID_INDEX = 1413,
    ERROR_INVALID_ICON_HANDLE = 1414,
    ERROR_PRIVATE_DIALOG_INDEX = 1415,
    ERROR_LISTBOX_ID_NOT_FOUND = 1416,
    ERROR_NO_WILDCARD_CHARACTERS = 1417,
    ERROR_CLIPBOARD_NOT_OPEN = 1418,
    ERROR_HOTKEY_NOT_REGISTERED = 1419,
    ERROR_WINDOW_NOT_DIALOG = 1420,
    ERROR_CONTROL_ID_NOT_FOUND = 1421,
    ERROR_INVALID_COMBOBOX_MESSAGE = 1422,
    ERROR_WINDOW_NOT_COMBOBOX = 1423,
    ERROR_INVALID_EDIT_HEIGHT = 1424,
    ERROR_DC_NOT_FOUND = 1425,
    ERROR_INVALID_HOOK_FILTER = 1426,
    ERROR_INVALID_FILTER_PROC = 1427,
    ERROR_HOOK_NEEDS_HMOD = 1428,
    ERROR_GLOBAL_ONLY_HOOK = 1429,
    ERROR_JOURNAL_HOOK_SET = 1430,
    ERROR_HOOK_NOT_INSTALLED = 1431,
    ERROR_INVALID_LB_MESSAGE = 1432,
    ERROR_SETCOUNT_ON_BAD_LB = 1433,
    ERROR_LB_WITHOUT_TABSTOPS = 1434,
    ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = 1435,
    ERROR_CHILD_WINDOW_MENU = 1436,
    ERROR_NO_SYSTEM_MENU = 1437,
    ERROR_INVALID_MSGBOX_STYLE = 1438,
    ERROR_INVALID_SPI_VALUE = 1439,
    ERROR_SCREEN_ALREADY_LOCKED = 1440,
    ERROR_HWNDS_HAVE_DIFF_PARENT = 1441,
    ERROR_NOT_CHILD_WINDOW = 1442,
    ERROR_INVALID_GW_COMMAND = 1443,
    ERROR_INVALID_THREAD_ID = 1444,
    ERROR_NON_MDICHILD_WINDOW = 1445,
    ERROR_POPUP_ALREADY_ACTIVE = 1446,
    ERROR_NO_SCROLLBARS = 1447,
    ERROR_INVALID_SCROLLBAR_RANGE = 1448,
    ERROR_INVALID_SHOWWIN_COMMAND = 1449,
    ERROR_NO_SYSTEM_RESOURCES = 1450,
    ERROR_NONPAGED_SYSTEM_RESOURCES = 1451,
    ERROR_PAGED_SYSTEM_RESOURCES = 1452,
    ERROR_WORKING_SET_QUOTA = 1453,
    ERROR_PAGEFILE_QUOTA = 1454,
    ERROR_COMMITMENT_LIMIT = 1455,
    ERROR_MENU_ITEM_NOT_FOUND = 1456,
    ERROR_INVALID_KEYBOARD_HANDLE = 1457,
    ERROR_HOOK_TYPE_NOT_ALLOWED = 1458,
    ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION = 1459,
    ERROR_TIMEOUT = 1460,
    ERROR_INVALID_MONITOR_HANDLE = 1461,
    ERROR_INCORRECT_SIZE = 1462,
    ERROR_SYMLINK_CLASS_DISABLED = 1463,
    ERROR_SYMLINK_NOT_SUPPORTED = 1464,
    ERROR_XML_PARSE_ERROR = 1465,
    ERROR_XMLDSIG_ERROR = 1466,
    ERROR_RESTART_APPLICATION = 1467,
    ERROR_WRONG_COMPARTMENT = 1468,
    ERROR_AUTHIP_FAILURE = 1469,
    ERROR_NO_NVRAM_RESOURCES = 1470,
    ERROR_NOT_GUI_PROCESS = 1471,
    ERROR_EVENTLOG_FILE_CORRUPT = 1500,
    ERROR_EVENTLOG_CANT_START = 1501,
    ERROR_LOG_FILE_FULL = 1502,
    ERROR_EVENTLOG_FILE_CHANGED = 1503,
    ERROR_CONTAINER_ASSIGNED = 1504,
    ERROR_JOB_NO_CONTAINER = 1505,
    ERROR_INVALID_TASK_NAME = 1550,
    ERROR_INVALID_TASK_INDEX = 1551,
    ERROR_THREAD_ALREADY_IN_TASK = 1552,
    ERROR_INSTALL_SERVICE_FAILURE = 1601,
    ERROR_INSTALL_USEREXIT = 1602,
    ERROR_INSTALL_FAILURE = 1603,
    ERROR_INSTALL_SUSPEND = 1604,
    ERROR_UNKNOWN_PRODUCT = 1605,
    ERROR_UNKNOWN_FEATURE = 1606,
    ERROR_UNKNOWN_COMPONENT = 1607,
    ERROR_UNKNOWN_PROPERTY = 1608,
    ERROR_INVALID_HANDLE_STATE = 1609,
    ERROR_BAD_CONFIGURATION = 1610,
    ERROR_INDEX_ABSENT = 1611,
    ERROR_INSTALL_SOURCE_ABSENT = 1612,
    ERROR_INSTALL_PACKAGE_VERSION = 1613,
    ERROR_PRODUCT_UNINSTALLED = 1614,
    ERROR_BAD_QUERY_SYNTAX = 1615,
    ERROR_INVALID_FIELD = 1616,
    ERROR_DEVICE_REMOVED = 1617,
    ERROR_INSTALL_ALREADY_RUNNING = 1618,
    ERROR_INSTALL_PACKAGE_OPEN_FAILED = 1619,
    ERROR_INSTALL_PACKAGE_INVALID = 1620,
    ERROR_INSTALL_UI_FAILURE = 1621,
    ERROR_INSTALL_LOG_FAILURE = 1622,
    ERROR_INSTALL_LANGUAGE_UNSUPPORTED = 1623,
    ERROR_INSTALL_TRANSFORM_FAILURE = 1624,
    ERROR_INSTALL_PACKAGE_REJECTED = 1625,
    ERROR_FUNCTION_NOT_CALLED = 1626,
    ERROR_FUNCTION_FAILED = 1627,
    ERROR_INVALID_TABLE = 1628,
    ERROR_DATATYPE_MISMATCH = 1629,
    ERROR_UNSUPPORTED_TYPE = 1630,
    ERROR_CREATE_FAILED = 1631,
    ERROR_INSTALL_TEMP_UNWRITABLE = 1632,
    ERROR_INSTALL_PLATFORM_UNSUPPORTED = 1633,
    ERROR_INSTALL_NOTUSED = 1634,
    ERROR_PATCH_PACKAGE_OPEN_FAILED = 1635,
    ERROR_PATCH_PACKAGE_INVALID = 1636,
    ERROR_PATCH_PACKAGE_UNSUPPORTED = 1637,
    ERROR_PRODUCT_VERSION = 1638,
    ERROR_INVALID_COMMAND_LINE = 1639,
    ERROR_INSTALL_REMOTE_DISALLOWED = 1640,
    ERROR_SUCCESS_REBOOT_INITIATED = 1641,
    ERROR_PATCH_TARGET_NOT_FOUND = 1642,
    ERROR_PATCH_PACKAGE_REJECTED = 1643,
    ERROR_INSTALL_TRANSFORM_REJECTED = 1644,
    ERROR_INSTALL_REMOTE_PROHIBITED = 1645,
    ERROR_PATCH_REMOVAL_UNSUPPORTED = 1646,
    ERROR_UNKNOWN_PATCH = 1647,
    ERROR_PATCH_NO_SEQUENCE = 1648,
    ERROR_PATCH_REMOVAL_DISALLOWED = 1649,
    ERROR_INVALID_PATCH_XML = 1650,
    ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT = 1651,
    ERROR_INSTALL_SERVICE_SAFEBOOT = 1652,
    ERROR_FAIL_FAST_EXCEPTION = 1653,
    ERROR_INSTALL_REJECTED = 1654,
    ERROR_DYNAMIC_CODE_BLOCKED = 1655,
    ERROR_NOT_SAME_OBJECT = 1656,
    ERROR_STRICT_CFG_VIOLATION = 1657,
    ERROR_SET_CONTEXT_DENIED = 1660,
    ERROR_CROSS_PARTITION_VIOLATION = 1661,
    ERROR_RETURN_ADDRESS_HIJACK_ATTEMPT = 1662,
    ERROR_INVALID_USER_BUFFER = 1784,
    ERROR_UNRECOGNIZED_MEDIA = 1785,
    ERROR_NO_TRUST_LSA_SECRET = 1786,
    ERROR_NO_TRUST_SAM_ACCOUNT = 1787,
    ERROR_TRUSTED_DOMAIN_FAILURE = 1788,
    ERROR_TRUSTED_RELATIONSHIP_FAILURE = 1789,
    ERROR_TRUST_FAILURE = 1790,
    ERROR_NETLOGON_NOT_STARTED = 1792,
    ERROR_ACCOUNT_EXPIRED = 1793,
    ERROR_REDIRECTOR_HAS_OPEN_HANDLES = 1794,
    ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = 1795,
    ERROR_UNKNOWN_PORT = 1796,
    ERROR_UNKNOWN_PRINTER_DRIVER = 1797,
    ERROR_UNKNOWN_PRINTPROCESSOR = 1798,
    ERROR_INVALID_SEPARATOR_FILE = 1799,
    ERROR_INVALID_PRIORITY = 1800,
    ERROR_INVALID_PRINTER_NAME = 1801,
    ERROR_PRINTER_ALREADY_EXISTS = 1802,
    ERROR_INVALID_PRINTER_COMMAND = 1803,
    ERROR_INVALID_DATATYPE = 1804,
    ERROR_INVALID_ENVIRONMENT = 1805,
    ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = 1807,
    ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = 1808,
    ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = 1809,
    ERROR_DOMAIN_TRUST_INCONSISTENT = 1810,
    ERROR_SERVER_HAS_OPEN_HANDLES = 1811,
    ERROR_RESOURCE_DATA_NOT_FOUND = 1812,
    ERROR_RESOURCE_TYPE_NOT_FOUND = 1813,
    ERROR_RESOURCE_NAME_NOT_FOUND = 1814,
    ERROR_RESOURCE_LANG_NOT_FOUND = 1815,
    ERROR_NOT_ENOUGH_QUOTA = 1816,
    ERROR_INVALID_TIME = 1901,
    ERROR_INVALID_FORM_NAME = 1902,
    ERROR_INVALID_FORM_SIZE = 1903,
    ERROR_ALREADY_WAITING = 1904,
    ERROR_PRINTER_DELETED = 1905,
    ERROR_INVALID_PRINTER_STATE = 1906,
    ERROR_PASSWORD_MUST_CHANGE = 1907,
    ERROR_DOMAIN_CONTROLLER_NOT_FOUND = 1908,
    ERROR_ACCOUNT_LOCKED_OUT = 1909,
    ERROR_NO_SITENAME = 1919,
    ERROR_CANT_ACCESS_FILE = 1920,
    ERROR_CANT_RESOLVE_FILENAME = 1921,
    ERROR_KM_DRIVER_BLOCKED = 1930,
    ERROR_CONTEXT_EXPIRED = 1931,
    ERROR_PER_USER_TRUST_QUOTA_EXCEEDED = 1932,
    ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED = 1933,
    ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED = 1934,
    ERROR_AUTHENTICATION_FIREWALL_FAILED = 1935,
    ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED = 1936,
    ERROR_NTLM_BLOCKED = 1937,
    ERROR_PASSWORD_CHANGE_REQUIRED = 1938,
    ERROR_LOST_MODE_LOGON_RESTRICTION = 1939,
    ERROR_INVALID_PIXEL_FORMAT = 2000,
    ERROR_BAD_DRIVER = 2001,
    ERROR_INVALID_WINDOW_STYLE = 2002,
    ERROR_METAFILE_NOT_SUPPORTED = 2003,
    ERROR_TRANSFORM_NOT_SUPPORTED = 2004,
    ERROR_CLIPPING_NOT_SUPPORTED = 2005,
    ERROR_INVALID_CMM = 2010,
    ERROR_INVALID_PROFILE = 2011,
    ERROR_TAG_NOT_FOUND = 2012,
    ERROR_TAG_NOT_PRESENT = 2013,
    ERROR_DUPLICATE_TAG = 2014,
    ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE = 2015,
    ERROR_PROFILE_NOT_FOUND = 2016,
    ERROR_INVALID_COLORSPACE = 2017,
    ERROR_ICM_NOT_ENABLED = 2018,
    ERROR_DELETING_ICM_XFORM = 2019,
    ERROR_INVALID_TRANSFORM = 2020,
    ERROR_COLORSPACE_MISMATCH = 2021,
    ERROR_INVALID_COLORINDEX = 2022,
    ERROR_PROFILE_DOES_NOT_MATCH_DEVICE = 2023,
    ERROR_CONNECTED_OTHER_PASSWORD = 2108,
    ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT = 2109,
    ERROR_BAD_USERNAME = 2202,
    ERROR_NOT_CONNECTED = 2250,
    ERROR_OPEN_FILES = 2401,
    ERROR_ACTIVE_CONNECTIONS = 2402,
    ERROR_DEVICE_IN_USE = 2404,
    ERROR_UNKNOWN_PRINT_MONITOR = 3000,
    ERROR_PRINTER_DRIVER_IN_USE = 3001,
    ERROR_SPOOL_FILE_NOT_FOUND = 3002,
    ERROR_SPL_NO_STARTDOC = 3003,
    ERROR_SPL_NO_ADDJOB = 3004,
    ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = 3005,
    ERROR_PRINT_MONITOR_ALREADY_INSTALLED = 3006,
    ERROR_INVALID_PRINT_MONITOR = 3007,
    ERROR_PRINT_MONITOR_IN_USE = 3008,
    ERROR_PRINTER_HAS_JOBS_QUEUED = 3009,
    ERROR_SUCCESS_REBOOT_REQUIRED = 3010,
    ERROR_SUCCESS_RESTART_REQUIRED = 3011,
    ERROR_PRINTER_NOT_FOUND = 3012,
    ERROR_PRINTER_DRIVER_WARNED = 3013,
    ERROR_PRINTER_DRIVER_BLOCKED = 3014,
    ERROR_PRINTER_DRIVER_PACKAGE_IN_USE = 3015,
    ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND = 3016,
    ERROR_FAIL_REBOOT_REQUIRED = 3017,
    ERROR_FAIL_REBOOT_INITIATED = 3018,
    ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED = 3019,
    ERROR_PRINT_JOB_RESTART_REQUIRED = 3020,
    ERROR_INVALID_PRINTER_DRIVER_MANIFEST = 3021,
    ERROR_PRINTER_NOT_SHAREABLE = 3022,
    ERROR_REQUEST_PAUSED = 3050,
    ERROR_APPEXEC_CONDITION_NOT_SATISFIED = 3060,
    ERROR_APPEXEC_HANDLE_INVALIDATED = 3061,
    ERROR_APPEXEC_INVALID_HOST_GENERATION = 3062,
    ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION = 3063,
    ERROR_APPEXEC_INVALID_HOST_STATE = 3064,
    ERROR_APPEXEC_NO_DONOR = 3065,
    ERROR_APPEXEC_HOST_ID_MISMATCH = 3066,
    ERROR_APPEXEC_UNKNOWN_USER = 3067,
    ERROR_APPEXEC_APP_COMPAT_BLOCK = 3068,
    ERROR_APPEXEC_CALLER_WAIT_TIMEOUT = 3069,
    ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_TERMINATION = 3070,
    ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_LICENSING = 3071,
    ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_RESOURCES = 3072,
    ERROR_VRF_VOLATILE_CFG_AND_IO_ENABLED = 3080,
    ERROR_VRF_VOLATILE_NOT_STOPPABLE = 3081,
    ERROR_VRF_VOLATILE_SAFE_MODE = 3082,
    ERROR_VRF_VOLATILE_NOT_RUNNABLE_SYSTEM = 3083,
    ERROR_VRF_VOLATILE_NOT_SUPPORTED_RULECLASS = 3084,
    ERROR_VRF_VOLATILE_PROTECTED_DRIVER = 3085,
    ERROR_VRF_VOLATILE_NMI_REGISTERED = 3086,
    ERROR_VRF_VOLATILE_SETTINGS_CONFLICT = 3087,
    ERROR_DIF_IOCALLBACK_NOT_REPLACED = 3190,
    ERROR_DIF_LIVEDUMP_LIMIT_EXCEEDED = 3191,
    ERROR_DIF_VOLATILE_SECTION_NOT_LOCKED = 3192,
    ERROR_DIF_VOLATILE_DRIVER_HOTPATCHED = 3193,
    ERROR_DIF_VOLATILE_INVALID_INFO = 3194,
    ERROR_DIF_VOLATILE_DRIVER_IS_NOT_RUNNING = 3195,
    ERROR_DIF_VOLATILE_PLUGIN_IS_NOT_RUNNING = 3196,
    ERROR_DIF_VOLATILE_PLUGIN_CHANGE_NOT_ALLOWED = 3197,
    ERROR_DIF_VOLATILE_NOT_ALLOWED = 3198,
    ERROR_DIF_BINDING_API_NOT_FOUND = 3199,
    ERROR_IO_REISSUE_AS_CACHED = 3950,
    ERROR_WINS_INTERNAL = 4000,
    ERROR_CAN_NOT_DEL_LOCAL_WINS = 4001,
    ERROR_STATIC_INIT = 4002,
    ERROR_INC_BACKUP = 4003,
    ERROR_FULL_BACKUP = 4004,
    ERROR_REC_NON_EXISTENT = 4005,
    ERROR_RPL_NOT_ALLOWED = 4006,
    ERROR_DHCP_ADDRESS_CONFLICT = 4100,
    ERROR_WMI_GUID_NOT_FOUND = 4200,
    ERROR_WMI_INSTANCE_NOT_FOUND = 4201,
    ERROR_WMI_ITEMID_NOT_FOUND = 4202,
    ERROR_WMI_TRY_AGAIN = 4203,
    ERROR_WMI_DP_NOT_FOUND = 4204,
    ERROR_WMI_UNRESOLVED_INSTANCE_REF = 4205,
    ERROR_WMI_ALREADY_ENABLED = 4206,
    ERROR_WMI_GUID_DISCONNECTED = 4207,
    ERROR_WMI_SERVER_UNAVAILABLE = 4208,
    ERROR_WMI_DP_FAILED = 4209,
    ERROR_WMI_INVALID_MOF = 4210,
    ERROR_WMI_INVALID_REGINFO = 4211,
    ERROR_WMI_ALREADY_DISABLED = 4212,
    ERROR_WMI_READ_ONLY = 4213,
    ERROR_WMI_SET_FAILURE = 4214,
    ERROR_NOT_APPCONTAINER = 4250,
    ERROR_APPCONTAINER_REQUIRED = 4251,
    ERROR_NOT_SUPPORTED_IN_APPCONTAINER = 4252,
    ERROR_INVALID_PACKAGE_SID_LENGTH = 4253,
    ERROR_INVALID_MEDIA = 4300,
    ERROR_INVALID_LIBRARY = 4301,
    ERROR_INVALID_MEDIA_POOL = 4302,
    ERROR_DRIVE_MEDIA_MISMATCH = 4303,
    ERROR_MEDIA_OFFLINE = 4304,
    ERROR_LIBRARY_OFFLINE = 4305,
    ERROR_EMPTY = 4306,
    ERROR_NOT_EMPTY = 4307,
    ERROR_MEDIA_UNAVAILABLE = 4308,
    ERROR_RESOURCE_DISABLED = 4309,
    ERROR_INVALID_CLEANER = 4310,
    ERROR_UNABLE_TO_CLEAN = 4311,
    ERROR_OBJECT_NOT_FOUND = 4312,
    ERROR_DATABASE_FAILURE = 4313,
    ERROR_DATABASE_FULL = 4314,
    ERROR_MEDIA_INCOMPATIBLE = 4315,
    ERROR_RESOURCE_NOT_PRESENT = 4316,
    ERROR_INVALID_OPERATION = 4317,
    ERROR_MEDIA_NOT_AVAILABLE = 4318,
    ERROR_DEVICE_NOT_AVAILABLE = 4319,
    ERROR_REQUEST_REFUSED = 4320,
    ERROR_INVALID_DRIVE_OBJECT = 4321,
    ERROR_LIBRARY_FULL = 4322,
    ERROR_MEDIUM_NOT_ACCESSIBLE = 4323,
    ERROR_UNABLE_TO_LOAD_MEDIUM = 4324,
    ERROR_UNABLE_TO_INVENTORY_DRIVE = 4325,
    ERROR_UNABLE_TO_INVENTORY_SLOT = 4326,
    ERROR_UNABLE_TO_INVENTORY_TRANSPORT = 4327,
    ERROR_TRANSPORT_FULL = 4328,
    ERROR_CONTROLLING_IEPORT = 4329,
    ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA = 4330,
    ERROR_CLEANER_SLOT_SET = 4331,
    ERROR_CLEANER_SLOT_NOT_SET = 4332,
    ERROR_CLEANER_CARTRIDGE_SPENT = 4333,
    ERROR_UNEXPECTED_OMID = 4334,
    ERROR_CANT_DELETE_LAST_ITEM = 4335,
    ERROR_MESSAGE_EXCEEDS_MAX_SIZE = 4336,
    ERROR_VOLUME_CONTAINS_SYS_FILES = 4337,
    ERROR_INDIGENOUS_TYPE = 4338,
    ERROR_NO_SUPPORTING_DRIVES = 4339,
    ERROR_CLEANER_CARTRIDGE_INSTALLED = 4340,
    ERROR_IEPORT_FULL = 4341,
    ERROR_FILE_OFFLINE = 4350,
    ERROR_REMOTE_STORAGE_NOT_ACTIVE = 4351,
    ERROR_REMOTE_STORAGE_MEDIA_ERROR = 4352,
    ERROR_NOT_A_REPARSE_POINT = 4390,
    ERROR_REPARSE_ATTRIBUTE_CONFLICT = 4391,
    ERROR_INVALID_REPARSE_DATA = 4392,
    ERROR_REPARSE_TAG_INVALID = 4393,
    ERROR_REPARSE_TAG_MISMATCH = 4394,
    ERROR_REPARSE_POINT_ENCOUNTERED = 4395,
    ERROR_APP_DATA_NOT_FOUND = 4400,
    ERROR_APP_DATA_EXPIRED = 4401,
    ERROR_APP_DATA_CORRUPT = 4402,
    ERROR_APP_DATA_LIMIT_EXCEEDED = 4403,
    ERROR_APP_DATA_REBOOT_REQUIRED = 4404,
    ERROR_SECUREBOOT_ROLLBACK_DETECTED = 4420,
    ERROR_SECUREBOOT_POLICY_VIOLATION = 4421,
    ERROR_SECUREBOOT_INVALID_POLICY = 4422,
    ERROR_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND = 4423,
    ERROR_SECUREBOOT_POLICY_NOT_SIGNED = 4424,
    ERROR_SECUREBOOT_NOT_ENABLED = 4425,
    ERROR_SECUREBOOT_FILE_REPLACED = 4426,
    ERROR_SECUREBOOT_POLICY_NOT_AUTHORIZED = 4427,
    ERROR_SECUREBOOT_POLICY_UNKNOWN = 4428,
    ERROR_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION = 4429,
    ERROR_SECUREBOOT_PLATFORM_ID_MISMATCH = 4430,
    ERROR_SECUREBOOT_POLICY_ROLLBACK_DETECTED = 4431,
    ERROR_SECUREBOOT_POLICY_UPGRADE_MISMATCH = 4432,
    ERROR_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING = 4433,
    ERROR_SECUREBOOT_NOT_BASE_POLICY = 4434,
    ERROR_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY = 4435,
    ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED = 4440,
    ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED = 4441,
    ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED = 4442,
    ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED = 4443,
    ERROR_ALREADY_HAS_STREAM_ID = 4444,
    ERROR_SMR_GARBAGE_COLLECTION_REQUIRED = 4445,
    ERROR_WOF_WIM_HEADER_CORRUPT = 4446,
    ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT = 4447,
    ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT = 4448,
    ERROR_OBJECT_IS_IMMUTABLE = 4449,
    ERROR_VOLUME_NOT_SIS_ENABLED = 4500,
    ERROR_SYSTEM_INTEGRITY_ROLLBACK_DETECTED = 4550,
    ERROR_SYSTEM_INTEGRITY_POLICY_VIOLATION = 4551,
    ERROR_SYSTEM_INTEGRITY_INVALID_POLICY = 4552,
    ERROR_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED = 4553,
    ERROR_SYSTEM_INTEGRITY_TOO_MANY_POLICIES = 4554,
    ERROR_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED = 4555,
    ERROR_SYSTEM_INTEGRITY_REPUTATION_MALICIOUS = 4556,
    ERROR_SYSTEM_INTEGRITY_REPUTATION_PUA = 4557,
    ERROR_SYSTEM_INTEGRITY_REPUTATION_DANGEROUS_EXT = 4558,
    ERROR_SYSTEM_INTEGRITY_REPUTATION_OFFLINE = 4559,
    ERROR_VSM_NOT_INITIALIZED = 4560,
    ERROR_VSM_DMA_PROTECTION_NOT_IN_USE = 4561,
    ERROR_PLATFORM_MANIFEST_NOT_AUTHORIZED = 4570,
    ERROR_PLATFORM_MANIFEST_INVALID = 4571,
    ERROR_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED = 4572,
    ERROR_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED = 4573,
    ERROR_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND = 4574,
    ERROR_PLATFORM_MANIFEST_NOT_ACTIVE = 4575,
    ERROR_PLATFORM_MANIFEST_NOT_SIGNED = 4576,
    ERROR_DEPENDENT_RESOURCE_EXISTS = 5001,
    ERROR_DEPENDENCY_NOT_FOUND = 5002,
    ERROR_DEPENDENCY_ALREADY_EXISTS = 5003,
    ERROR_RESOURCE_NOT_ONLINE = 5004,
    ERROR_HOST_NODE_NOT_AVAILABLE = 5005,
    ERROR_RESOURCE_NOT_AVAILABLE = 5006,
    ERROR_RESOURCE_NOT_FOUND = 5007,
    ERROR_SHUTDOWN_CLUSTER = 5008,
    ERROR_CANT_EVICT_ACTIVE_NODE = 5009,
    ERROR_OBJECT_ALREADY_EXISTS = 5010,
    ERROR_OBJECT_IN_LIST = 5011,
    ERROR_GROUP_NOT_AVAILABLE = 5012,
    ERROR_GROUP_NOT_FOUND = 5013,
    ERROR_GROUP_NOT_ONLINE = 5014,
    ERROR_HOST_NODE_NOT_RESOURCE_OWNER = 5015,
    ERROR_HOST_NODE_NOT_GROUP_OWNER = 5016,
    ERROR_RESMON_CREATE_FAILED = 5017,
    ERROR_RESMON_ONLINE_FAILED = 5018,
    ERROR_RESOURCE_ONLINE = 5019,
    ERROR_QUORUM_RESOURCE = 5020,
    ERROR_NOT_QUORUM_CAPABLE = 5021,
    ERROR_CLUSTER_SHUTTING_DOWN = 5022,
    ERROR_INVALID_STATE = 5023,
    ERROR_RESOURCE_PROPERTIES_STORED = 5024,
    ERROR_NOT_QUORUM_CLASS = 5025,
    ERROR_CORE_RESOURCE = 5026,
    ERROR_QUORUM_RESOURCE_ONLINE_FAILED = 5027,
    ERROR_QUORUMLOG_OPEN_FAILED = 5028,
    ERROR_CLUSTERLOG_CORRUPT = 5029,
    ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE = 5030,
    ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE = 5031,
    ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND = 5032,
    ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE = 5033,
    ERROR_QUORUM_OWNER_ALIVE = 5034,
    ERROR_NETWORK_NOT_AVAILABLE = 5035,
    ERROR_NODE_NOT_AVAILABLE = 5036,
    ERROR_ALL_NODES_NOT_AVAILABLE = 5037,
    ERROR_RESOURCE_FAILED = 5038,
    ERROR_CLUSTER_INVALID_NODE = 5039,
    ERROR_CLUSTER_NODE_EXISTS = 5040,
    ERROR_CLUSTER_JOIN_IN_PROGRESS = 5041,
    ERROR_CLUSTER_NODE_NOT_FOUND = 5042,
    ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND = 5043,
    ERROR_CLUSTER_NETWORK_EXISTS = 5044,
    ERROR_CLUSTER_NETWORK_NOT_FOUND = 5045,
    ERROR_CLUSTER_NETINTERFACE_EXISTS = 5046,
    ERROR_CLUSTER_NETINTERFACE_NOT_FOUND = 5047,
    ERROR_CLUSTER_INVALID_REQUEST = 5048,
    ERROR_CLUSTER_INVALID_NETWORK_PROVIDER = 5049,
    ERROR_CLUSTER_NODE_DOWN = 5050,
    ERROR_CLUSTER_NODE_UNREACHABLE = 5051,
    ERROR_CLUSTER_NODE_NOT_MEMBER = 5052,
    ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS = 5053,
    ERROR_CLUSTER_INVALID_NETWORK = 5054,
    ERROR_CLUSTER_NODE_UP = 5056,
    ERROR_CLUSTER_IPADDR_IN_USE = 5057,
    ERROR_CLUSTER_NODE_NOT_PAUSED = 5058,
    ERROR_CLUSTER_NO_SECURITY_CONTEXT = 5059,
    ERROR_CLUSTER_NETWORK_NOT_INTERNAL = 5060,
    ERROR_CLUSTER_NODE_ALREADY_UP = 5061,
    ERROR_CLUSTER_NODE_ALREADY_DOWN = 5062,
    ERROR_CLUSTER_NETWORK_ALREADY_ONLINE = 5063,
    ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE = 5064,
    ERROR_CLUSTER_NODE_ALREADY_MEMBER = 5065,
    ERROR_CLUSTER_LAST_INTERNAL_NETWORK = 5066,
    ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS = 5067,
    ERROR_INVALID_OPERATION_ON_QUORUM = 5068,
    ERROR_DEPENDENCY_NOT_ALLOWED = 5069,
    ERROR_CLUSTER_NODE_PAUSED = 5070,
    ERROR_NODE_CANT_HOST_RESOURCE = 5071,
    ERROR_CLUSTER_NODE_NOT_READY = 5072,
    ERROR_CLUSTER_NODE_SHUTTING_DOWN = 5073,
    ERROR_CLUSTER_JOIN_ABORTED = 5074,
    ERROR_CLUSTER_INCOMPATIBLE_VERSIONS = 5075,
    ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED = 5076,
    ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED = 5077,
    ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND = 5078,
    ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED = 5079,
    ERROR_CLUSTER_RESNAME_NOT_FOUND = 5080,
    ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED = 5081,
    ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST = 5082,
    ERROR_CLUSTER_DATABASE_SEQMISMATCH = 5083,
    ERROR_RESMON_INVALID_STATE = 5084,
    ERROR_CLUSTER_GUM_NOT_LOCKER = 5085,
    ERROR_QUORUM_DISK_NOT_FOUND = 5086,
    ERROR_DATABASE_BACKUP_CORRUPT = 5087,
    ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT = 5088,
    ERROR_RESOURCE_PROPERTY_UNCHANGEABLE = 5089,
    ERROR_NO_ADMIN_ACCESS_POINT = 5090,
    ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE = 5890,
    ERROR_CLUSTER_QUORUMLOG_NOT_FOUND = 5891,
    ERROR_CLUSTER_MEMBERSHIP_HALT = 5892,
    ERROR_CLUSTER_INSTANCE_ID_MISMATCH = 5893,
    ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP = 5894,
    ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH = 5895,
    ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP = 5896,
    ERROR_CLUSTER_PARAMETER_MISMATCH = 5897,
    ERROR_NODE_CANNOT_BE_CLUSTERED = 5898,
    ERROR_CLUSTER_WRONG_OS_VERSION = 5899,
    ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME = 5900,
    ERROR_CLUSCFG_ALREADY_COMMITTED = 5901,
    ERROR_CLUSCFG_ROLLBACK_FAILED = 5902,
    ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT = 5903,
    ERROR_CLUSTER_OLD_VERSION = 5904,
    ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME = 5905,
    ERROR_CLUSTER_NO_NET_ADAPTERS = 5906,
    ERROR_CLUSTER_POISONED = 5907,
    ERROR_CLUSTER_GROUP_MOVING = 5908,
    ERROR_CLUSTER_RESOURCE_TYPE_BUSY = 5909,
    ERROR_RESOURCE_CALL_TIMED_OUT = 5910,
    ERROR_INVALID_CLUSTER_IPV6_ADDRESS = 5911,
    ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION = 5912,
    ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS = 5913,
    ERROR_CLUSTER_PARTIAL_SEND = 5914,
    ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION = 5915,
    ERROR_CLUSTER_INVALID_STRING_TERMINATION = 5916,
    ERROR_CLUSTER_INVALID_STRING_FORMAT = 5917,
    ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS = 5918,
    ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS = 5919,
    ERROR_CLUSTER_NULL_DATA = 5920,
    ERROR_CLUSTER_PARTIAL_READ = 5921,
    ERROR_CLUSTER_PARTIAL_WRITE = 5922,
    ERROR_CLUSTER_CANT_DESERIALIZE_DATA = 5923,
    ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT = 5924,
    ERROR_CLUSTER_NO_QUORUM = 5925,
    ERROR_CLUSTER_INVALID_IPV6_NETWORK = 5926,
    ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK = 5927,
    ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP = 5928,
    ERROR_DEPENDENCY_TREE_TOO_COMPLEX = 5929,
    ERROR_EXCEPTION_IN_RESOURCE_CALL = 5930,
    ERROR_CLUSTER_RHS_FAILED_INITIALIZATION = 5931,
    ERROR_CLUSTER_NOT_INSTALLED = 5932,
    ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE = 5933,
    ERROR_CLUSTER_MAX_NODES_IN_CLUSTER = 5934,
    ERROR_CLUSTER_TOO_MANY_NODES = 5935,
    ERROR_CLUSTER_OBJECT_ALREADY_USED = 5936,
    ERROR_NONCORE_GROUPS_FOUND = 5937,
    ERROR_FILE_SHARE_RESOURCE_CONFLICT = 5938,
    ERROR_CLUSTER_EVICT_INVALID_REQUEST = 5939,
    ERROR_CLUSTER_SINGLETON_RESOURCE = 5940,
    ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE = 5941,
    ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED = 5942,
    ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR = 5943,
    ERROR_CLUSTER_GROUP_BUSY = 5944,
    ERROR_CLUSTER_NOT_SHARED_VOLUME = 5945,
    ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR = 5946,
    ERROR_CLUSTER_SHARED_VOLUMES_IN_USE = 5947,
    ERROR_CLUSTER_USE_SHARED_VOLUMES_API = 5948,
    ERROR_CLUSTER_BACKUP_IN_PROGRESS = 5949,
    ERROR_NON_CSV_PATH = 5950,
    ERROR_CSV_VOLUME_NOT_LOCAL = 5951,
    ERROR_CLUSTER_WATCHDOG_TERMINATING = 5952,
    ERROR_CLUSTER_RESOURCE_VETOED_MOVE_INCOMPATIBLE_NODES = 5953,
    ERROR_CLUSTER_INVALID_NODE_WEIGHT = 5954,
    ERROR_CLUSTER_RESOURCE_VETOED_CALL = 5955,
    ERROR_RESMON_SYSTEM_RESOURCES_LACKING = 5956,
    ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_DESTINATION = 5957,
    ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_SOURCE = 5958,
    ERROR_CLUSTER_GROUP_QUEUED = 5959,
    ERROR_CLUSTER_RESOURCE_LOCKED_STATUS = 5960,
    ERROR_CLUSTER_SHARED_VOLUME_FAILOVER_NOT_ALLOWED = 5961,
    ERROR_CLUSTER_NODE_DRAIN_IN_PROGRESS = 5962,
    ERROR_CLUSTER_DISK_NOT_CONNECTED = 5963,
    ERROR_DISK_NOT_CSV_CAPABLE = 5964,
    ERROR_RESOURCE_NOT_IN_AVAILABLE_STORAGE = 5965,
    ERROR_CLUSTER_SHARED_VOLUME_REDIRECTED = 5966,
    ERROR_CLUSTER_SHARED_VOLUME_NOT_REDIRECTED = 5967,
    ERROR_CLUSTER_CANNOT_RETURN_PROPERTIES = 5968,
    ERROR_CLUSTER_RESOURCE_CONTAINS_UNSUPPORTED_DIFF_AREA_FOR_SHARED_VOLUMES = 5969,
    ERROR_CLUSTER_RESOURCE_IS_IN_MAINTENANCE_MODE = 5970,
    ERROR_CLUSTER_AFFINITY_CONFLICT = 5971,
    ERROR_CLUSTER_RESOURCE_IS_REPLICA_VIRTUAL_MACHINE = 5972,
    ERROR_CLUSTER_UPGRADE_INCOMPATIBLE_VERSIONS = 5973,
    ERROR_CLUSTER_UPGRADE_FIX_QUORUM_NOT_SUPPORTED = 5974,
    ERROR_CLUSTER_UPGRADE_RESTART_REQUIRED = 5975,
    ERROR_CLUSTER_UPGRADE_IN_PROGRESS = 5976,
    ERROR_CLUSTER_UPGRADE_INCOMPLETE = 5977,
    ERROR_CLUSTER_NODE_IN_GRACE_PERIOD = 5978,
    ERROR_CLUSTER_CSV_IO_PAUSE_TIMEOUT = 5979,
    ERROR_NODE_NOT_ACTIVE_CLUSTER_MEMBER = 5980,
    ERROR_CLUSTER_RESOURCE_NOT_MONITORED = 5981,
    ERROR_CLUSTER_RESOURCE_DOES_NOT_SUPPORT_UNMONITORED = 5982,
    ERROR_CLUSTER_RESOURCE_IS_REPLICATED = 5983,
    ERROR_CLUSTER_NODE_ISOLATED = 5984,
    ERROR_CLUSTER_NODE_QUARANTINED = 5985,
    ERROR_CLUSTER_DATABASE_UPDATE_CONDITION_FAILED = 5986,
    ERROR_CLUSTER_SPACE_DEGRADED = 5987,
    ERROR_CLUSTER_TOKEN_DELEGATION_NOT_SUPPORTED = 5988,
    ERROR_CLUSTER_CSV_INVALID_HANDLE = 5989,
    ERROR_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR = 5990,
    ERROR_GROUPSET_NOT_AVAILABLE = 5991,
    ERROR_GROUPSET_NOT_FOUND = 5992,
    ERROR_GROUPSET_CANT_PROVIDE = 5993,
    ERROR_CLUSTER_FAULT_DOMAIN_PARENT_NOT_FOUND = 5994,
    ERROR_CLUSTER_FAULT_DOMAIN_INVALID_HIERARCHY = 5995,
    ERROR_CLUSTER_FAULT_DOMAIN_FAILED_S2D_VALIDATION = 5996,
    ERROR_CLUSTER_FAULT_DOMAIN_S2D_CONNECTIVITY_LOSS = 5997,
    ERROR_CLUSTER_INVALID_INFRASTRUCTURE_FILESERVER_NAME = 5998,
    ERROR_CLUSTERSET_MANAGEMENT_CLUSTER_UNREACHABLE = 5999,
    ERROR_ENCRYPTION_FAILED = 6000,
    ERROR_DECRYPTION_FAILED = 6001,
    ERROR_FILE_ENCRYPTED = 6002,
    ERROR_NO_RECOVERY_POLICY = 6003,
    ERROR_NO_EFS = 6004,
    ERROR_WRONG_EFS = 6005,
    ERROR_NO_USER_KEYS = 6006,
    ERROR_FILE_NOT_ENCRYPTED = 6007,
    ERROR_NOT_EXPORT_FORMAT = 6008,
    ERROR_FILE_READ_ONLY = 6009,
    ERROR_DIR_EFS_DISALLOWED = 6010,
    ERROR_EFS_SERVER_NOT_TRUSTED = 6011,
    ERROR_BAD_RECOVERY_POLICY = 6012,
    ERROR_EFS_ALG_BLOB_TOO_BIG = 6013,
    ERROR_VOLUME_NOT_SUPPORT_EFS = 6014,
    ERROR_EFS_DISABLED = 6015,
    ERROR_EFS_VERSION_NOT_SUPPORT = 6016,
    ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE = 6017,
    ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER = 6018,
    ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE = 6019,
    ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE = 6020,
    ERROR_CS_ENCRYPTION_FILE_NOT_CSE = 6021,
    ERROR_ENCRYPTION_POLICY_DENIES_OPERATION = 6022,
    ERROR_WIP_ENCRYPTION_FAILED = 6023,
    ERROR_NO_BROWSER_SERVERS_FOUND = 6118,
    ERROR_CLUSTER_OBJECT_IS_CLUSTER_SET_VM = 6250,
    ERROR_LOG_SECTOR_INVALID = 6600,
    ERROR_LOG_SECTOR_PARITY_INVALID = 6601,
    ERROR_LOG_SECTOR_REMAPPED = 6602,
    ERROR_LOG_BLOCK_INCOMPLETE = 6603,
    ERROR_LOG_INVALID_RANGE = 6604,
    ERROR_LOG_BLOCKS_EXHAUSTED = 6605,
    ERROR_LOG_READ_CONTEXT_INVALID = 6606,
    ERROR_LOG_RESTART_INVALID = 6607,
    ERROR_LOG_BLOCK_VERSION = 6608,
    ERROR_LOG_BLOCK_INVALID = 6609,
    ERROR_LOG_READ_MODE_INVALID = 6610,
    ERROR_LOG_NO_RESTART = 6611,
    ERROR_LOG_METADATA_CORRUPT = 6612,
    ERROR_LOG_METADATA_INVALID = 6613,
    ERROR_LOG_METADATA_INCONSISTENT = 6614,
    ERROR_LOG_RESERVATION_INVALID = 6615,
    ERROR_LOG_CANT_DELETE = 6616,
    ERROR_LOG_CONTAINER_LIMIT_EXCEEDED = 6617,
    ERROR_LOG_START_OF_LOG = 6618,
    ERROR_LOG_POLICY_ALREADY_INSTALLED = 6619,
    ERROR_LOG_POLICY_NOT_INSTALLED = 6620,
    ERROR_LOG_POLICY_INVALID = 6621,
    ERROR_LOG_POLICY_CONFLICT = 6622,
    ERROR_LOG_PINNED_ARCHIVE_TAIL = 6623,
    ERROR_LOG_RECORD_NONEXISTENT = 6624,
    ERROR_LOG_RECORDS_RESERVED_INVALID = 6625,
    ERROR_LOG_SPACE_RESERVED_INVALID = 6626,
    ERROR_LOG_TAIL_INVALID = 6627,
    ERROR_LOG_FULL = 6628,
    ERROR_COULD_NOT_RESIZE_LOG = 6629,
    ERROR_LOG_MULTIPLEXED = 6630,
    ERROR_LOG_DEDICATED = 6631,
    ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS = 6632,
    ERROR_LOG_ARCHIVE_IN_PROGRESS = 6633,
    ERROR_LOG_EPHEMERAL = 6634,
    ERROR_LOG_NOT_ENOUGH_CONTAINERS = 6635,
    ERROR_LOG_CLIENT_ALREADY_REGISTERED = 6636,
    ERROR_LOG_CLIENT_NOT_REGISTERED = 6637,
    ERROR_LOG_FULL_HANDLER_IN_PROGRESS = 6638,
    ERROR_LOG_CONTAINER_READ_FAILED = 6639,
    ERROR_LOG_CONTAINER_WRITE_FAILED = 6640,
    ERROR_LOG_CONTAINER_OPEN_FAILED = 6641,
    ERROR_LOG_CONTAINER_STATE_INVALID = 6642,
    ERROR_LOG_STATE_INVALID = 6643,
    ERROR_LOG_PINNED = 6644,
    ERROR_LOG_METADATA_FLUSH_FAILED = 6645,
    ERROR_LOG_INCONSISTENT_SECURITY = 6646,
    ERROR_LOG_APPENDED_FLUSH_FAILED = 6647,
    ERROR_LOG_PINNED_RESERVATION = 6648,
    ERROR_INVALID_TRANSACTION = 6700,
    ERROR_TRANSACTION_NOT_ACTIVE = 6701,
    ERROR_TRANSACTION_REQUEST_NOT_VALID = 6702,
    ERROR_TRANSACTION_NOT_REQUESTED = 6703,
    ERROR_TRANSACTION_ALREADY_ABORTED = 6704,
    ERROR_TRANSACTION_ALREADY_COMMITTED = 6705,
    ERROR_TM_INITIALIZATION_FAILED = 6706,
    ERROR_RESOURCEMANAGER_READ_ONLY = 6707,
    ERROR_TRANSACTION_NOT_JOINED = 6708,
    ERROR_TRANSACTION_SUPERIOR_EXISTS = 6709,
    ERROR_CRM_PROTOCOL_ALREADY_EXISTS = 6710,
    ERROR_TRANSACTION_PROPAGATION_FAILED = 6711,
    ERROR_CRM_PROTOCOL_NOT_FOUND = 6712,
    ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER = 6713,
    ERROR_CURRENT_TRANSACTION_NOT_VALID = 6714,
    ERROR_TRANSACTION_NOT_FOUND = 6715,
    ERROR_RESOURCEMANAGER_NOT_FOUND = 6716,
    ERROR_ENLISTMENT_NOT_FOUND = 6717,
    ERROR_TRANSACTIONMANAGER_NOT_FOUND = 6718,
    ERROR_TRANSACTIONMANAGER_NOT_ONLINE = 6719,
    ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION = 6720,
    ERROR_TRANSACTION_NOT_ROOT = 6721,
    ERROR_TRANSACTION_OBJECT_EXPIRED = 6722,
    ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED = 6723,
    ERROR_TRANSACTION_RECORD_TOO_LONG = 6724,
    ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED = 6725,
    ERROR_TRANSACTION_INTEGRITY_VIOLATED = 6726,
    ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH = 6727,
    ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT = 6728,
    ERROR_TRANSACTION_MUST_WRITETHROUGH = 6729,
    ERROR_TRANSACTION_NO_SUPERIOR = 6730,
    ERROR_HEURISTIC_DAMAGE_POSSIBLE = 6731,
    ERROR_TRANSACTIONAL_CONFLICT = 6800,
    ERROR_RM_NOT_ACTIVE = 6801,
    ERROR_RM_METADATA_CORRUPT = 6802,
    ERROR_DIRECTORY_NOT_RM = 6803,
    ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE = 6805,
    ERROR_LOG_RESIZE_INVALID_SIZE = 6806,
    ERROR_OBJECT_NO_LONGER_EXISTS = 6807,
    ERROR_STREAM_MINIVERSION_NOT_FOUND = 6808,
    ERROR_STREAM_MINIVERSION_NOT_VALID = 6809,
    ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION = 6810,
    ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT = 6811,
    ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS = 6812,
    ERROR_REMOTE_FILE_VERSION_MISMATCH = 6814,
    ERROR_HANDLE_NO_LONGER_VALID = 6815,
    ERROR_NO_TXF_METADATA = 6816,
    ERROR_LOG_CORRUPTION_DETECTED = 6817,
    ERROR_CANT_RECOVER_WITH_HANDLE_OPEN = 6818,
    ERROR_RM_DISCONNECTED = 6819,
    ERROR_ENLISTMENT_NOT_SUPERIOR = 6820,
    ERROR_RECOVERY_NOT_NEEDED = 6821,
    ERROR_RM_ALREADY_STARTED = 6822,
    ERROR_FILE_IDENTITY_NOT_PERSISTENT = 6823,
    ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY = 6824,
    ERROR_CANT_CROSS_RM_BOUNDARY = 6825,
    ERROR_TXF_DIR_NOT_EMPTY = 6826,
    ERROR_INDOUBT_TRANSACTIONS_EXIST = 6827,
    ERROR_TM_VOLATILE = 6828,
    ERROR_ROLLBACK_TIMER_EXPIRED = 6829,
    ERROR_TXF_ATTRIBUTE_CORRUPT = 6830,
    ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION = 6831,
    ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED = 6832,
    ERROR_LOG_GROWTH_FAILED = 6833,
    ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE = 6834,
    ERROR_TXF_METADATA_ALREADY_PRESENT = 6835,
    ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET = 6836,
    ERROR_TRANSACTION_REQUIRED_PROMOTION = 6837,
    ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION = 6838,
    ERROR_TRANSACTIONS_NOT_FROZEN = 6839,
    ERROR_TRANSACTION_FREEZE_IN_PROGRESS = 6840,
    ERROR_NOT_SNAPSHOT_VOLUME = 6841,
    ERROR_NO_SAVEPOINT_WITH_OPEN_FILES = 6842,
    ERROR_DATA_LOST_REPAIR = 6843,
    ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION = 6844,
    ERROR_TM_IDENTITY_MISMATCH = 6845,
    ERROR_FLOATED_SECTION = 6846,
    ERROR_CANNOT_ACCEPT_TRANSACTED_WORK = 6847,
    ERROR_CANNOT_ABORT_TRANSACTIONS = 6848,
    ERROR_BAD_CLUSTERS = 6849,
    ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION = 6850,
    ERROR_VOLUME_DIRTY = 6851,
    ERROR_NO_LINK_TRACKING_IN_TRANSACTION = 6852,
    ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION = 6853,
    ERROR_EXPIRED_HANDLE = 6854,
    ERROR_TRANSACTION_NOT_ENLISTED = 6855,
    ERROR_CTX_WINSTATION_NAME_INVALID = 7001,
    ERROR_CTX_INVALID_PD = 7002,
    ERROR_CTX_PD_NOT_FOUND = 7003,
    ERROR_CTX_WD_NOT_FOUND = 7004,
    ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY = 7005,
    ERROR_CTX_SERVICE_NAME_COLLISION = 7006,
    ERROR_CTX_CLOSE_PENDING = 7007,
    ERROR_CTX_NO_OUTBUF = 7008,
    ERROR_CTX_MODEM_INF_NOT_FOUND = 7009,
    ERROR_CTX_INVALID_MODEMNAME = 7010,
    ERROR_CTX_MODEM_RESPONSE_ERROR = 7011,
    ERROR_CTX_MODEM_RESPONSE_TIMEOUT = 7012,
    ERROR_CTX_MODEM_RESPONSE_NO_CARRIER = 7013,
    ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE = 7014,
    ERROR_CTX_MODEM_RESPONSE_BUSY = 7015,
    ERROR_CTX_MODEM_RESPONSE_VOICE = 7016,
    ERROR_CTX_TD_ERROR = 7017,
    ERROR_CTX_WINSTATION_NOT_FOUND = 7022,
    ERROR_CTX_WINSTATION_ALREADY_EXISTS = 7023,
    ERROR_CTX_WINSTATION_BUSY = 7024,
    ERROR_CTX_BAD_VIDEO_MODE = 7025,
    ERROR_CTX_GRAPHICS_INVALID = 7035,
    ERROR_CTX_LOGON_DISABLED = 7037,
    ERROR_CTX_NOT_CONSOLE = 7038,
    ERROR_CTX_CLIENT_QUERY_TIMEOUT = 7040,
    ERROR_CTX_CONSOLE_DISCONNECT = 7041,
    ERROR_CTX_CONSOLE_CONNECT = 7042,
    ERROR_CTX_SHADOW_DENIED = 7044,
    ERROR_CTX_WINSTATION_ACCESS_DENIED = 7045,
    ERROR_CTX_INVALID_WD = 7049,
    ERROR_CTX_SHADOW_INVALID = 7050,
    ERROR_CTX_SHADOW_DISABLED = 7051,
    ERROR_CTX_CLIENT_LICENSE_IN_USE = 7052,
    ERROR_CTX_CLIENT_LICENSE_NOT_SET = 7053,
    ERROR_CTX_LICENSE_NOT_AVAILABLE = 7054,
    ERROR_CTX_LICENSE_CLIENT_INVALID = 7055,
    ERROR_CTX_LICENSE_EXPIRED = 7056,
    ERROR_CTX_SHADOW_NOT_RUNNING = 7057,
    ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE = 7058,
    ERROR_ACTIVATION_COUNT_EXCEEDED = 7059,
    ERROR_CTX_WINSTATIONS_DISABLED = 7060,
    ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED = 7061,
    ERROR_CTX_SESSION_IN_USE = 7062,
    ERROR_CTX_NO_FORCE_LOGOFF = 7063,
    ERROR_CTX_ACCOUNT_RESTRICTION = 7064,
    ERROR_RDP_PROTOCOL_ERROR = 7065,
    ERROR_CTX_CDM_CONNECT = 7066,
    ERROR_CTX_CDM_DISCONNECT = 7067,
    ERROR_CTX_SECURITY_LAYER_ERROR = 7068,
    ERROR_TS_INCOMPATIBLE_SESSIONS = 7069,
    ERROR_TS_VIDEO_SUBSYSTEM_ERROR = 7070,
    ERROR_DS_NOT_INSTALLED = 8200,
    ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY = 8201,
    ERROR_DS_NO_ATTRIBUTE_OR_VALUE = 8202,
    ERROR_DS_INVALID_ATTRIBUTE_SYNTAX = 8203,
    ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED = 8204,
    ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS = 8205,
    ERROR_DS_BUSY = 8206,
    ERROR_DS_UNAVAILABLE = 8207,
    ERROR_DS_NO_RIDS_ALLOCATED = 8208,
    ERROR_DS_NO_MORE_RIDS = 8209,
    ERROR_DS_INCORRECT_ROLE_OWNER = 8210,
    ERROR_DS_RIDMGR_INIT_ERROR = 8211,
    ERROR_DS_OBJ_CLASS_VIOLATION = 8212,
    ERROR_DS_CANT_ON_NON_LEAF = 8213,
    ERROR_DS_CANT_ON_RDN = 8214,
    ERROR_DS_CANT_MOD_OBJ_CLASS = 8215,
    ERROR_DS_CROSS_DOM_MOVE_ERROR = 8216,
    ERROR_DS_GC_NOT_AVAILABLE = 8217,
    ERROR_SHARED_POLICY = 8218,
    ERROR_POLICY_OBJECT_NOT_FOUND = 8219,
    ERROR_POLICY_ONLY_IN_DS = 8220,
    ERROR_PROMOTION_ACTIVE = 8221,
    ERROR_NO_PROMOTION_ACTIVE = 8222,
    ERROR_DS_OPERATIONS_ERROR = 8224,
    ERROR_DS_PROTOCOL_ERROR = 8225,
    ERROR_DS_TIMELIMIT_EXCEEDED = 8226,
    ERROR_DS_SIZELIMIT_EXCEEDED = 8227,
    ERROR_DS_ADMIN_LIMIT_EXCEEDED = 8228,
    ERROR_DS_COMPARE_FALSE = 8229,
    ERROR_DS_COMPARE_TRUE = 8230,
    ERROR_DS_AUTH_METHOD_NOT_SUPPORTED = 8231,
    ERROR_DS_STRONG_AUTH_REQUIRED = 8232,
    ERROR_DS_INAPPROPRIATE_AUTH = 8233,
    ERROR_DS_AUTH_UNKNOWN = 8234,
    ERROR_DS_REFERRAL = 8235,
    ERROR_DS_UNAVAILABLE_CRIT_EXTENSION = 8236,
    ERROR_DS_CONFIDENTIALITY_REQUIRED = 8237,
    ERROR_DS_INAPPROPRIATE_MATCHING = 8238,
    ERROR_DS_CONSTRAINT_VIOLATION = 8239,
    ERROR_DS_NO_SUCH_OBJECT = 8240,
    ERROR_DS_ALIAS_PROBLEM = 8241,
    ERROR_DS_INVALID_DN_SYNTAX = 8242,
    ERROR_DS_IS_LEAF = 8243,
    ERROR_DS_ALIAS_DEREF_PROBLEM = 8244,
    ERROR_DS_UNWILLING_TO_PERFORM = 8245,
    ERROR_DS_LOOP_DETECT = 8246,
    ERROR_DS_NAMING_VIOLATION = 8247,
    ERROR_DS_OBJECT_RESULTS_TOO_LARGE = 8248,
    ERROR_DS_AFFECTS_MULTIPLE_DSAS = 8249,
    ERROR_DS_SERVER_DOWN = 8250,
    ERROR_DS_LOCAL_ERROR = 8251,
    ERROR_DS_ENCODING_ERROR = 8252,
    ERROR_DS_DECODING_ERROR = 8253,
    ERROR_DS_FILTER_UNKNOWN = 8254,
    ERROR_DS_PARAM_ERROR = 8255,
    ERROR_DS_NOT_SUPPORTED = 8256,
    ERROR_DS_NO_RESULTS_RETURNED = 8257,
    ERROR_DS_CONTROL_NOT_FOUND = 8258,
    ERROR_DS_CLIENT_LOOP = 8259,
    ERROR_DS_REFERRAL_LIMIT_EXCEEDED = 8260,
    ERROR_DS_SORT_CONTROL_MISSING = 8261,
    ERROR_DS_OFFSET_RANGE_ERROR = 8262,
    ERROR_DS_RIDMGR_DISABLED = 8263,
    ERROR_DS_ROOT_MUST_BE_NC = 8301,
    ERROR_DS_ADD_REPLICA_INHIBITED = 8302,
    ERROR_DS_ATT_NOT_DEF_IN_SCHEMA = 8303,
    ERROR_DS_MAX_OBJ_SIZE_EXCEEDED = 8304,
    ERROR_DS_OBJ_STRING_NAME_EXISTS = 8305,
    ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA = 8306,
    ERROR_DS_RDN_DOESNT_MATCH_SCHEMA = 8307,
    ERROR_DS_NO_REQUESTED_ATTS_FOUND = 8308,
    ERROR_DS_USER_BUFFER_TO_SMALL = 8309,
    ERROR_DS_ATT_IS_NOT_ON_OBJ = 8310,
    ERROR_DS_ILLEGAL_MOD_OPERATION = 8311,
    ERROR_DS_OBJ_TOO_LARGE = 8312,
    ERROR_DS_BAD_INSTANCE_TYPE = 8313,
    ERROR_DS_MASTERDSA_REQUIRED = 8314,
    ERROR_DS_OBJECT_CLASS_REQUIRED = 8315,
    ERROR_DS_MISSING_REQUIRED_ATT = 8316,
    ERROR_DS_ATT_NOT_DEF_FOR_CLASS = 8317,
    ERROR_DS_ATT_ALREADY_EXISTS = 8318,
    ERROR_DS_CANT_ADD_ATT_VALUES = 8320,
    ERROR_DS_SINGLE_VALUE_CONSTRAINT = 8321,
    ERROR_DS_RANGE_CONSTRAINT = 8322,
    ERROR_DS_ATT_VAL_ALREADY_EXISTS = 8323,
    ERROR_DS_CANT_REM_MISSING_ATT = 8324,
    ERROR_DS_CANT_REM_MISSING_ATT_VAL = 8325,
    ERROR_DS_ROOT_CANT_BE_SUBREF = 8326,
    ERROR_DS_NO_CHAINING = 8327,
    ERROR_DS_NO_CHAINED_EVAL = 8328,
    ERROR_DS_NO_PARENT_OBJECT = 8329,
    ERROR_DS_PARENT_IS_AN_ALIAS = 8330,
    ERROR_DS_CANT_MIX_MASTER_AND_REPS = 8331,
    ERROR_DS_CHILDREN_EXIST = 8332,
    ERROR_DS_OBJ_NOT_FOUND = 8333,
    ERROR_DS_ALIASED_OBJ_MISSING = 8334,
    ERROR_DS_BAD_NAME_SYNTAX = 8335,
    ERROR_DS_ALIAS_POINTS_TO_ALIAS = 8336,
    ERROR_DS_CANT_DEREF_ALIAS = 8337,
    ERROR_DS_OUT_OF_SCOPE = 8338,
    ERROR_DS_OBJECT_BEING_REMOVED = 8339,
    ERROR_DS_CANT_DELETE_DSA_OBJ = 8340,
    ERROR_DS_GENERIC_ERROR = 8341,
    ERROR_DS_DSA_MUST_BE_INT_MASTER = 8342,
    ERROR_DS_CLASS_NOT_DSA = 8343,
    ERROR_DS_INSUFF_ACCESS_RIGHTS = 8344,
    ERROR_DS_ILLEGAL_SUPERIOR = 8345,
    ERROR_DS_ATTRIBUTE_OWNED_BY_SAM = 8346,
    ERROR_DS_NAME_TOO_MANY_PARTS = 8347,
    ERROR_DS_NAME_TOO_LONG = 8348,
    ERROR_DS_NAME_VALUE_TOO_LONG = 8349,
    ERROR_DS_NAME_UNPARSEABLE = 8350,
    ERROR_DS_NAME_TYPE_UNKNOWN = 8351,
    ERROR_DS_NOT_AN_OBJECT = 8352,
    ERROR_DS_SEC_DESC_TOO_SHORT = 8353,
    ERROR_DS_SEC_DESC_INVALID = 8354,
    ERROR_DS_NO_DELETED_NAME = 8355,
    ERROR_DS_SUBREF_MUST_HAVE_PARENT = 8356,
    ERROR_DS_NCNAME_MUST_BE_NC = 8357,
    ERROR_DS_CANT_ADD_SYSTEM_ONLY = 8358,
    ERROR_DS_CLASS_MUST_BE_CONCRETE = 8359,
    ERROR_DS_INVALID_DMD = 8360,
    ERROR_DS_OBJ_GUID_EXISTS = 8361,
    ERROR_DS_NOT_ON_BACKLINK = 8362,
    ERROR_DS_NO_CROSSREF_FOR_NC = 8363,
    ERROR_DS_SHUTTING_DOWN = 8364,
    ERROR_DS_UNKNOWN_OPERATION = 8365,
    ERROR_DS_INVALID_ROLE_OWNER = 8366,
    ERROR_DS_COULDNT_CONTACT_FSMO = 8367,
    ERROR_DS_CROSS_NC_DN_RENAME = 8368,
    ERROR_DS_CANT_MOD_SYSTEM_ONLY = 8369,
    ERROR_DS_REPLICATOR_ONLY = 8370,
    ERROR_DS_OBJ_CLASS_NOT_DEFINED = 8371,
    ERROR_DS_OBJ_CLASS_NOT_SUBCLASS = 8372,
    ERROR_DS_NAME_REFERENCE_INVALID = 8373,
    ERROR_DS_CROSS_REF_EXISTS = 8374,
    ERROR_DS_CANT_DEL_MASTER_CROSSREF = 8375,
    ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD = 8376,
    ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX = 8377,
    ERROR_DS_DUP_RDN = 8378,
    ERROR_DS_DUP_OID = 8379,
    ERROR_DS_DUP_MAPI_ID = 8380,
    ERROR_DS_DUP_SCHEMA_ID_GUID = 8381,
    ERROR_DS_DUP_LDAP_DISPLAY_NAME = 8382,
    ERROR_DS_SEMANTIC_ATT_TEST = 8383,
    ERROR_DS_SYNTAX_MISMATCH = 8384,
    ERROR_DS_EXISTS_IN_MUST_HAVE = 8385,
    ERROR_DS_EXISTS_IN_MAY_HAVE = 8386,
    ERROR_DS_NONEXISTENT_MAY_HAVE = 8387,
    ERROR_DS_NONEXISTENT_MUST_HAVE = 8388,
    ERROR_DS_AUX_CLS_TEST_FAIL = 8389,
    ERROR_DS_NONEXISTENT_POSS_SUP = 8390,
    ERROR_DS_SUB_CLS_TEST_FAIL = 8391,
    ERROR_DS_BAD_RDN_ATT_ID_SYNTAX = 8392,
    ERROR_DS_EXISTS_IN_AUX_CLS = 8393,
    ERROR_DS_EXISTS_IN_SUB_CLS = 8394,
    ERROR_DS_EXISTS_IN_POSS_SUP = 8395,
    ERROR_DS_RECALCSCHEMA_FAILED = 8396,
    ERROR_DS_TREE_DELETE_NOT_FINISHED = 8397,
    ERROR_DS_CANT_DELETE = 8398,
    ERROR_DS_ATT_SCHEMA_REQ_ID = 8399,
    ERROR_DS_BAD_ATT_SCHEMA_SYNTAX = 8400,
    ERROR_DS_CANT_CACHE_ATT = 8401,
    ERROR_DS_CANT_CACHE_CLASS = 8402,
    ERROR_DS_CANT_REMOVE_ATT_CACHE = 8403,
    ERROR_DS_CANT_REMOVE_CLASS_CACHE = 8404,
    ERROR_DS_CANT_RETRIEVE_DN = 8405,
    ERROR_DS_MISSING_SUPREF = 8406,
    ERROR_DS_CANT_RETRIEVE_INSTANCE = 8407,
    ERROR_DS_CODE_INCONSISTENCY = 8408,
    ERROR_DS_DATABASE_ERROR = 8409,
    ERROR_DS_GOVERNSID_MISSING = 8410,
    ERROR_DS_MISSING_EXPECTED_ATT = 8411,
    ERROR_DS_NCNAME_MISSING_CR_REF = 8412,
    ERROR_DS_SECURITY_CHECKING_ERROR = 8413,
    ERROR_DS_SCHEMA_NOT_LOADED = 8414,
    ERROR_DS_SCHEMA_ALLOC_FAILED = 8415,
    ERROR_DS_ATT_SCHEMA_REQ_SYNTAX = 8416,
    ERROR_DS_GCVERIFY_ERROR = 8417,
    ERROR_DS_DRA_SCHEMA_MISMATCH = 8418,
    ERROR_DS_CANT_FIND_DSA_OBJ = 8419,
    ERROR_DS_CANT_FIND_EXPECTED_NC = 8420,
    ERROR_DS_CANT_FIND_NC_IN_CACHE = 8421,
    ERROR_DS_CANT_RETRIEVE_CHILD = 8422,
    ERROR_DS_SECURITY_ILLEGAL_MODIFY = 8423,
    ERROR_DS_CANT_REPLACE_HIDDEN_REC = 8424,
    ERROR_DS_BAD_HIERARCHY_FILE = 8425,
    ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED = 8426,
    ERROR_DS_CONFIG_PARAM_MISSING = 8427,
    ERROR_DS_COUNTING_AB_INDICES_FAILED = 8428,
    ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED = 8429,
    ERROR_DS_INTERNAL_FAILURE = 8430,
    ERROR_DS_UNKNOWN_ERROR = 8431,
    ERROR_DS_ROOT_REQUIRES_CLASS_TOP = 8432,
    ERROR_DS_REFUSING_FSMO_ROLES = 8433,
    ERROR_DS_MISSING_FSMO_SETTINGS = 8434,
    ERROR_DS_UNABLE_TO_SURRENDER_ROLES = 8435,
    ERROR_DS_DRA_GENERIC = 8436,
    ERROR_DS_DRA_INVALID_PARAMETER = 8437,
    ERROR_DS_DRA_BUSY = 8438,
    ERROR_DS_DRA_BAD_DN = 8439,
    ERROR_DS_DRA_BAD_NC = 8440,
    ERROR_DS_DRA_DN_EXISTS = 8441,
    ERROR_DS_DRA_INTERNAL_ERROR = 8442,
    ERROR_DS_DRA_INCONSISTENT_DIT = 8443,
    ERROR_DS_DRA_CONNECTION_FAILED = 8444,
    ERROR_DS_DRA_BAD_INSTANCE_TYPE = 8445,
    ERROR_DS_DRA_OUT_OF_MEM = 8446,
    ERROR_DS_DRA_MAIL_PROBLEM = 8447,
    ERROR_DS_DRA_REF_ALREADY_EXISTS = 8448,
    ERROR_DS_DRA_REF_NOT_FOUND = 8449,
    ERROR_DS_DRA_OBJ_IS_REP_SOURCE = 8450,
    ERROR_DS_DRA_DB_ERROR = 8451,
    ERROR_DS_DRA_NO_REPLICA = 8452,
    ERROR_DS_DRA_ACCESS_DENIED = 8453,
    ERROR_DS_DRA_NOT_SUPPORTED = 8454,
    ERROR_DS_DRA_RPC_CANCELLED = 8455,
    ERROR_DS_DRA_SOURCE_DISABLED = 8456,
    ERROR_DS_DRA_SINK_DISABLED = 8457,
    ERROR_DS_DRA_NAME_COLLISION = 8458,
    ERROR_DS_DRA_SOURCE_REINSTALLED = 8459,
    ERROR_DS_DRA_MISSING_PARENT = 8460,
    ERROR_DS_DRA_PREEMPTED = 8461,
    ERROR_DS_DRA_ABANDON_SYNC = 8462,
    ERROR_DS_DRA_SHUTDOWN = 8463,
    ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET = 8464,
    ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA = 8465,
    ERROR_DS_DRA_EXTN_CONNECTION_FAILED = 8466,
    ERROR_DS_INSTALL_SCHEMA_MISMATCH = 8467,
    ERROR_DS_DUP_LINK_ID = 8468,
    ERROR_DS_NAME_ERROR_RESOLVING = 8469,
    ERROR_DS_NAME_ERROR_NOT_FOUND = 8470,
    ERROR_DS_NAME_ERROR_NOT_UNIQUE = 8471,
    ERROR_DS_NAME_ERROR_NO_MAPPING = 8472,
    ERROR_DS_NAME_ERROR_DOMAIN_ONLY = 8473,
    ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING = 8474,
    ERROR_DS_CONSTRUCTED_ATT_MOD = 8475,
    ERROR_DS_WRONG_OM_OBJ_CLASS = 8476,
    ERROR_DS_DRA_REPL_PENDING = 8477,
    ERROR_DS_DS_REQUIRED = 8478,
    ERROR_DS_INVALID_LDAP_DISPLAY_NAME = 8479,
    ERROR_DS_NON_BASE_SEARCH = 8480,
    ERROR_DS_CANT_RETRIEVE_ATTS = 8481,
    ERROR_DS_BACKLINK_WITHOUT_LINK = 8482,
    ERROR_DS_EPOCH_MISMATCH = 8483,
    ERROR_DS_SRC_NAME_MISMATCH = 8484,
    ERROR_DS_SRC_AND_DST_NC_IDENTICAL = 8485,
    ERROR_DS_DST_NC_MISMATCH = 8486,
    ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC = 8487,
    ERROR_DS_SRC_GUID_MISMATCH = 8488,
    ERROR_DS_CANT_MOVE_DELETED_OBJECT = 8489,
    ERROR_DS_PDC_OPERATION_IN_PROGRESS = 8490,
    ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD = 8491,
    ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION = 8492,
    ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS = 8493,
    ERROR_DS_NC_MUST_HAVE_NC_PARENT = 8494,
    ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE = 8495,
    ERROR_DS_DST_DOMAIN_NOT_NATIVE = 8496,
    ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER = 8497,
    ERROR_DS_CANT_MOVE_ACCOUNT_GROUP = 8498,
    ERROR_DS_CANT_MOVE_RESOURCE_GROUP = 8499,
    ERROR_DS_INVALID_SEARCH_FLAG = 8500,
    ERROR_DS_NO_TREE_DELETE_ABOVE_NC = 8501,
    ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE = 8502,
    ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE = 8503,
    ERROR_DS_SAM_INIT_FAILURE = 8504,
    ERROR_DS_SENSITIVE_GROUP_VIOLATION = 8505,
    ERROR_DS_CANT_MOD_PRIMARYGROUPID = 8506,
    ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD = 8507,
    ERROR_DS_NONSAFE_SCHEMA_CHANGE = 8508,
    ERROR_DS_SCHEMA_UPDATE_DISALLOWED = 8509,
    ERROR_DS_CANT_CREATE_UNDER_SCHEMA = 8510,
    ERROR_DS_INSTALL_NO_SRC_SCH_VERSION = 8511,
    ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE = 8512,
    ERROR_DS_INVALID_GROUP_TYPE = 8513,
    ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN = 8514,
    ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN = 8515,
    ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER = 8516,
    ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER = 8517,
    ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER = 8518,
    ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER = 8519,
    ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER = 8520,
    ERROR_DS_HAVE_PRIMARY_MEMBERS = 8521,
    ERROR_DS_STRING_SD_CONVERSION_FAILED = 8522,
    ERROR_DS_NAMING_MASTER_GC = 8523,
    ERROR_DS_DNS_LOOKUP_FAILURE = 8524,
    ERROR_DS_COULDNT_UPDATE_SPNS = 8525,
    ERROR_DS_CANT_RETRIEVE_SD = 8526,
    ERROR_DS_KEY_NOT_UNIQUE = 8527,
    ERROR_DS_WRONG_LINKED_ATT_SYNTAX = 8528,
    ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD = 8529,
    ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY = 8530,
    ERROR_DS_CANT_START = 8531,
    ERROR_DS_INIT_FAILURE = 8532,
    ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION = 8533,
    ERROR_DS_SOURCE_DOMAIN_IN_FOREST = 8534,
    ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST = 8535,
    ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED = 8536,
    ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN = 8537,
    ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER = 8538,
    ERROR_DS_SRC_SID_EXISTS_IN_FOREST = 8539,
    ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH = 8540,
    ERROR_SAM_INIT_FAILURE = 8541,
    ERROR_DS_DRA_SCHEMA_INFO_SHIP = 8542,
    ERROR_DS_DRA_SCHEMA_CONFLICT = 8543,
    ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT = 8544,
    ERROR_DS_DRA_OBJ_NC_MISMATCH = 8545,
    ERROR_DS_NC_STILL_HAS_DSAS = 8546,
    ERROR_DS_GC_REQUIRED = 8547,
    ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY = 8548,
    ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS = 8549,
    ERROR_DS_CANT_ADD_TO_GC = 8550,
    ERROR_DS_NO_CHECKPOINT_WITH_PDC = 8551,
    ERROR_DS_SOURCE_AUDITING_NOT_ENABLED = 8552,
    ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC = 8553,
    ERROR_DS_INVALID_NAME_FOR_SPN = 8554,
    ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS = 8555,
    ERROR_DS_UNICODEPWD_NOT_IN_QUOTES = 8556,
    ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = 8557,
    ERROR_DS_MUST_BE_RUN_ON_DST_DC = 8558,
    ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER = 8559,
    ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ = 8560,
    ERROR_DS_INIT_FAILURE_CONSOLE = 8561,
    ERROR_DS_SAM_INIT_FAILURE_CONSOLE = 8562,
    ERROR_DS_FOREST_VERSION_TOO_HIGH = 8563,
    ERROR_DS_DOMAIN_VERSION_TOO_HIGH = 8564,
    ERROR_DS_FOREST_VERSION_TOO_LOW = 8565,
    ERROR_DS_DOMAIN_VERSION_TOO_LOW = 8566,
    ERROR_DS_INCOMPATIBLE_VERSION = 8567,
    ERROR_DS_LOW_DSA_VERSION = 8568,
    ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN = 8569,
    ERROR_DS_NOT_SUPPORTED_SORT_ORDER = 8570,
    ERROR_DS_NAME_NOT_UNIQUE = 8571,
    ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4 = 8572,
    ERROR_DS_OUT_OF_VERSION_STORE = 8573,
    ERROR_DS_INCOMPATIBLE_CONTROLS_USED = 8574,
    ERROR_DS_NO_REF_DOMAIN = 8575,
    ERROR_DS_RESERVED_LINK_ID = 8576,
    ERROR_DS_LINK_ID_NOT_AVAILABLE = 8577,
    ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER = 8578,
    ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE = 8579,
    ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC = 8580,
    ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG = 8581,
    ERROR_DS_MODIFYDN_WRONG_GRANDPARENT = 8582,
    ERROR_DS_NAME_ERROR_TRUST_REFERRAL = 8583,
    ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER = 8584,
    ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD = 8585,
    ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2 = 8586,
    ERROR_DS_THREAD_LIMIT_EXCEEDED = 8587,
    ERROR_DS_NOT_CLOSEST = 8588,
    ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF = 8589,
    ERROR_DS_SINGLE_USER_MODE_FAILED = 8590,
    ERROR_DS_NTDSCRIPT_SYNTAX_ERROR = 8591,
    ERROR_DS_NTDSCRIPT_PROCESS_ERROR = 8592,
    ERROR_DS_DIFFERENT_REPL_EPOCHS = 8593,
    ERROR_DS_DRS_EXTENSIONS_CHANGED = 8594,
    ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR = 8595,
    ERROR_DS_NO_MSDS_INTID = 8596,
    ERROR_DS_DUP_MSDS_INTID = 8597,
    ERROR_DS_EXISTS_IN_RDNATTID = 8598,
    ERROR_DS_AUTHORIZATION_FAILED = 8599,
    ERROR_DS_INVALID_SCRIPT = 8600,
    ERROR_DS_REMOTE_CROSSREF_OP_FAILED = 8601,
    ERROR_DS_CROSS_REF_BUSY = 8602,
    ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN = 8603,
    ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC = 8604,
    ERROR_DS_DUPLICATE_ID_FOUND = 8605,
    ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT = 8606,
    ERROR_DS_GROUP_CONVERSION_ERROR = 8607,
    ERROR_DS_CANT_MOVE_APP_BASIC_GROUP = 8608,
    ERROR_DS_CANT_MOVE_APP_QUERY_GROUP = 8609,
    ERROR_DS_ROLE_NOT_VERIFIED = 8610,
    ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL = 8611,
    ERROR_DS_DOMAIN_RENAME_IN_PROGRESS = 8612,
    ERROR_DS_EXISTING_AD_CHILD_NC = 8613,
    ERROR_DS_REPL_LIFETIME_EXCEEDED = 8614,
    ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER = 8615,
    ERROR_DS_LDAP_SEND_QUEUE_FULL = 8616,
    ERROR_DS_DRA_OUT_SCHEDULE_WINDOW = 8617,
    ERROR_DS_POLICY_NOT_KNOWN = 8618,
    ERROR_NO_SITE_SETTINGS_OBJECT = 8619,
    ERROR_NO_SECRETS = 8620,
    ERROR_NO_WRITABLE_DC_FOUND = 8621,
    ERROR_DS_NO_SERVER_OBJECT = 8622,
    ERROR_DS_NO_NTDSA_OBJECT = 8623,
    ERROR_DS_NON_ASQ_SEARCH = 8624,
    ERROR_DS_AUDIT_FAILURE = 8625,
    ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE = 8626,
    ERROR_DS_INVALID_SEARCH_FLAG_TUPLE = 8627,
    ERROR_DS_HIERARCHY_TABLE_TOO_DEEP = 8628,
    ERROR_DS_DRA_CORRUPT_UTD_VECTOR = 8629,
    ERROR_DS_DRA_SECRETS_DENIED = 8630,
    ERROR_DS_RESERVED_MAPI_ID = 8631,
    ERROR_DS_MAPI_ID_NOT_AVAILABLE = 8632,
    ERROR_DS_DRA_MISSING_KRBTGT_SECRET = 8633,
    ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST = 8634,
    ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST = 8635,
    ERROR_INVALID_USER_PRINCIPAL_NAME = 8636,
    ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS = 8637,
    ERROR_DS_OID_NOT_FOUND = 8638,
    ERROR_DS_DRA_RECYCLED_TARGET = 8639,
    ERROR_DS_DISALLOWED_NC_REDIRECT = 8640,
    ERROR_DS_HIGH_ADLDS_FFL = 8641,
    ERROR_DS_HIGH_DSA_VERSION = 8642,
    ERROR_DS_LOW_ADLDS_FFL = 8643,
    ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION = 8644,
    ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED = 8645,
    ERROR_INCORRECT_ACCOUNT_TYPE = 8646,
    ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST = 8647,
    ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST = 8648,
    ERROR_DS_MISSING_FOREST_TRUST = 8649,
    ERROR_DS_VALUE_KEY_NOT_UNIQUE = 8650,
    ERROR_WEAK_WHFBKEY_BLOCKED = 8651,
    DNS_ERROR_RESPONSE_CODES_BASE = 9000,
    DNS_ERROR_RCODE_FORMAT_ERROR = 9001,
    DNS_ERROR_RCODE_SERVER_FAILURE = 9002,
    DNS_ERROR_RCODE_NAME_ERROR = 9003,
    DNS_ERROR_RCODE_NOT_IMPLEMENTED = 9004,
    DNS_ERROR_RCODE_REFUSED = 9005,
    DNS_ERROR_RCODE_YXDOMAIN = 9006,
    DNS_ERROR_RCODE_YXRRSET = 9007,
    DNS_ERROR_RCODE_NXRRSET = 9008,
    DNS_ERROR_RCODE_NOTAUTH = 9009,
    DNS_ERROR_RCODE_NOTZONE = 9010,
    DNS_ERROR_RCODE_BADSIG = 9016,
    DNS_ERROR_RCODE_BADKEY = 9017,
    DNS_ERROR_RCODE_BADTIME = 9018,
    DNS_ERROR_DNSSEC_BASE = 9100,
    DNS_ERROR_KEYMASTER_REQUIRED = 9101,
    DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE = 9102,
    DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1 = 9103,
    DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS = 9104,
    DNS_ERROR_UNSUPPORTED_ALGORITHM = 9105,
    DNS_ERROR_INVALID_KEY_SIZE = 9106,
    DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE = 9107,
    DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION = 9108,
    DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR = 9109,
    DNS_ERROR_UNEXPECTED_CNG_ERROR = 9110,
    DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION = 9111,
    DNS_ERROR_KSP_NOT_ACCESSIBLE = 9112,
    DNS_ERROR_TOO_MANY_SKDS = 9113,
    DNS_ERROR_INVALID_ROLLOVER_PERIOD = 9114,
    DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET = 9115,
    DNS_ERROR_ROLLOVER_IN_PROGRESS = 9116,
    DNS_ERROR_STANDBY_KEY_NOT_PRESENT = 9117,
    DNS_ERROR_NOT_ALLOWED_ON_ZSK = 9118,
    DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD = 9119,
    DNS_ERROR_ROLLOVER_ALREADY_QUEUED = 9120,
    DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE = 9121,
    DNS_ERROR_BAD_KEYMASTER = 9122,
    DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD = 9123,
    DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT = 9124,
    DNS_ERROR_DNSSEC_IS_DISABLED = 9125,
    DNS_ERROR_INVALID_XML = 9126,
    DNS_ERROR_NO_VALID_TRUST_ANCHORS = 9127,
    DNS_ERROR_ROLLOVER_NOT_POKEABLE = 9128,
    DNS_ERROR_NSEC3_NAME_COLLISION = 9129,
    DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1 = 9130,
    DNS_ERROR_PACKET_FMT_BASE = 9500,
    DNS_ERROR_BAD_PACKET = 9502,
    DNS_ERROR_NO_PACKET = 9503,
    DNS_ERROR_RCODE = 9504,
    DNS_ERROR_UNSECURE_PACKET = 9505,
    DNS_ERROR_GENERAL_API_BASE = 9550,
    DNS_ERROR_INVALID_TYPE = 9551,
    DNS_ERROR_INVALID_IP_ADDRESS = 9552,
    DNS_ERROR_INVALID_PROPERTY = 9553,
    DNS_ERROR_TRY_AGAIN_LATER = 9554,
    DNS_ERROR_NOT_UNIQUE = 9555,
    DNS_ERROR_NON_RFC_NAME = 9556,
    DNS_ERROR_INVALID_NAME_CHAR = 9560,
    DNS_ERROR_NUMERIC_NAME = 9561,
    DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER = 9562,
    DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION = 9563,
    DNS_ERROR_CANNOT_FIND_ROOT_HINTS = 9564,
    DNS_ERROR_INCONSISTENT_ROOT_HINTS = 9565,
    DNS_ERROR_DWORD_VALUE_TOO_SMALL = 9566,
    DNS_ERROR_DWORD_VALUE_TOO_LARGE = 9567,
    DNS_ERROR_BACKGROUND_LOADING = 9568,
    DNS_ERROR_NOT_ALLOWED_ON_RODC = 9569,
    DNS_ERROR_NOT_ALLOWED_UNDER_DNAME = 9570,
    DNS_ERROR_DELEGATION_REQUIRED = 9571,
    DNS_ERROR_INVALID_POLICY_TABLE = 9572,
    DNS_ERROR_ADDRESS_REQUIRED = 9573,
    DNS_ERROR_ZONE_BASE = 9600,
    DNS_ERROR_ZONE_DOES_NOT_EXIST = 9601,
    DNS_ERROR_NO_ZONE_INFO = 9602,
    DNS_ERROR_INVALID_ZONE_OPERATION = 9603,
    DNS_ERROR_ZONE_CONFIGURATION_ERROR = 9604,
    DNS_ERROR_ZONE_HAS_NO_SOA_RECORD = 9605,
    DNS_ERROR_ZONE_HAS_NO_NS_RECORDS = 9606,
    DNS_ERROR_ZONE_LOCKED = 9607,
    DNS_ERROR_ZONE_CREATION_FAILED = 9608,
    DNS_ERROR_ZONE_ALREADY_EXISTS = 9609,
    DNS_ERROR_AUTOZONE_ALREADY_EXISTS = 9610,
    DNS_ERROR_INVALID_ZONE_TYPE = 9611,
    DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP = 9612,
    DNS_ERROR_ZONE_NOT_SECONDARY = 9613,
    DNS_ERROR_NEED_SECONDARY_ADDRESSES = 9614,
    DNS_ERROR_WINS_INIT_FAILED = 9615,
    DNS_ERROR_NEED_WINS_SERVERS = 9616,
    DNS_ERROR_NBSTAT_INIT_FAILED = 9617,
    DNS_ERROR_SOA_DELETE_INVALID = 9618,
    DNS_ERROR_FORWARDER_ALREADY_EXISTS = 9619,
    DNS_ERROR_ZONE_REQUIRES_MASTER_IP = 9620,
    DNS_ERROR_ZONE_IS_SHUTDOWN = 9621,
    DNS_ERROR_ZONE_LOCKED_FOR_SIGNING = 9622,
    DNS_ERROR_DATAFILE_BASE = 9650,
    DNS_ERROR_PRIMARY_REQUIRES_DATAFILE = 9651,
    DNS_ERROR_INVALID_DATAFILE_NAME = 9652,
    DNS_ERROR_DATAFILE_OPEN_FAILURE = 9653,
    DNS_ERROR_FILE_WRITEBACK_FAILED = 9654,
    DNS_ERROR_DATAFILE_PARSING = 9655,
    DNS_ERROR_DATABASE_BASE = 9700,
    DNS_ERROR_RECORD_DOES_NOT_EXIST = 9701,
    DNS_ERROR_RECORD_FORMAT = 9702,
    DNS_ERROR_NODE_CREATION_FAILED = 9703,
    DNS_ERROR_UNKNOWN_RECORD_TYPE = 9704,
    DNS_ERROR_RECORD_TIMED_OUT = 9705,
    DNS_ERROR_NAME_NOT_IN_ZONE = 9706,
    DNS_ERROR_CNAME_LOOP = 9707,
    DNS_ERROR_NODE_IS_CNAME = 9708,
    DNS_ERROR_CNAME_COLLISION = 9709,
    DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT = 9710,
    DNS_ERROR_RECORD_ALREADY_EXISTS = 9711,
    DNS_ERROR_SECONDARY_DATA = 9712,
    DNS_ERROR_NO_CREATE_CACHE_DATA = 9713,
    DNS_ERROR_NAME_DOES_NOT_EXIST = 9714,
    DNS_ERROR_DS_UNAVAILABLE = 9717,
    DNS_ERROR_DS_ZONE_ALREADY_EXISTS = 9718,
    DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE = 9719,
    DNS_ERROR_NODE_IS_DNAME = 9720,
    DNS_ERROR_DNAME_COLLISION = 9721,
    DNS_ERROR_ALIAS_LOOP = 9722,
    DNS_ERROR_OPERATION_BASE = 9750,
    DNS_ERROR_AXFR = 9752,
    DNS_ERROR_SECURE_BASE = 9800,
    DNS_ERROR_SETUP_BASE = 9850,
    DNS_ERROR_NO_TCPIP = 9851,
    DNS_ERROR_NO_DNS_SERVERS = 9852,
    DNS_ERROR_DP_BASE = 9900,
    DNS_ERROR_DP_DOES_NOT_EXIST = 9901,
    DNS_ERROR_DP_ALREADY_EXISTS = 9902,
    DNS_ERROR_DP_NOT_ENLISTED = 9903,
    DNS_ERROR_DP_ALREADY_ENLISTED = 9904,
    DNS_ERROR_DP_NOT_AVAILABLE = 9905,
    DNS_ERROR_DP_FSMO_ERROR = 9906,
    DNS_ERROR_RRL_NOT_ENABLED = 9911,
    DNS_ERROR_RRL_INVALID_WINDOW_SIZE = 9912,
    DNS_ERROR_RRL_INVALID_IPV4_PREFIX = 9913,
    DNS_ERROR_RRL_INVALID_IPV6_PREFIX = 9914,
    DNS_ERROR_RRL_INVALID_TC_RATE = 9915,
    DNS_ERROR_RRL_INVALID_LEAK_RATE = 9916,
    DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE = 9917,
    DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS = 9921,
    DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST = 9922,
    DNS_ERROR_VIRTUALIZATION_TREE_LOCKED = 9923,
    DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME = 9924,
    DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE = 9925,
    DNS_ERROR_ZONESCOPE_ALREADY_EXISTS = 9951,
    DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST = 9952,
    DNS_ERROR_DEFAULT_ZONESCOPE = 9953,
    DNS_ERROR_INVALID_ZONESCOPE_NAME = 9954,
    DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES = 9955,
    DNS_ERROR_LOAD_ZONESCOPE_FAILED = 9956,
    DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED = 9957,
    DNS_ERROR_INVALID_SCOPE_NAME = 9958,
    DNS_ERROR_SCOPE_DOES_NOT_EXIST = 9959,
    DNS_ERROR_DEFAULT_SCOPE = 9960,
    DNS_ERROR_INVALID_SCOPE_OPERATION = 9961,
    DNS_ERROR_SCOPE_LOCKED = 9962,
    DNS_ERROR_SCOPE_ALREADY_EXISTS = 9963,
    DNS_ERROR_POLICY_ALREADY_EXISTS = 9971,
    DNS_ERROR_POLICY_DOES_NOT_EXIST = 9972,
    DNS_ERROR_POLICY_INVALID_CRITERIA = 9973,
    DNS_ERROR_POLICY_INVALID_SETTINGS = 9974,
    DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED = 9975,
    DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST = 9976,
    DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS = 9977,
    DNS_ERROR_SUBNET_DOES_NOT_EXIST = 9978,
    DNS_ERROR_SUBNET_ALREADY_EXISTS = 9979,
    DNS_ERROR_POLICY_LOCKED = 9980,
    DNS_ERROR_POLICY_INVALID_WEIGHT = 9981,
    DNS_ERROR_POLICY_INVALID_NAME = 9982,
    DNS_ERROR_POLICY_MISSING_CRITERIA = 9983,
    DNS_ERROR_INVALID_CLIENT_SUBNET_NAME = 9984,
    DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID = 9985,
    DNS_ERROR_POLICY_SCOPE_MISSING = 9986,
    DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED = 9987,
    DNS_ERROR_SERVERSCOPE_IS_REFERENCED = 9988,
    DNS_ERROR_ZONESCOPE_IS_REFERENCED = 9989,
    DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET = 9990,
    DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL = 9991,
    DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL = 9992,
    DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE = 9993,
    DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN = 9994,
    DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE = 9995,
    DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY = 9996,
    ERROR_IPSEC_QM_POLICY_EXISTS = 13000,
    ERROR_IPSEC_QM_POLICY_NOT_FOUND = 13001,
    ERROR_IPSEC_QM_POLICY_IN_USE = 13002,
    ERROR_IPSEC_MM_POLICY_EXISTS = 13003,
    ERROR_IPSEC_MM_POLICY_NOT_FOUND = 13004,
    ERROR_IPSEC_MM_POLICY_IN_USE = 13005,
    ERROR_IPSEC_MM_FILTER_EXISTS = 13006,
    ERROR_IPSEC_MM_FILTER_NOT_FOUND = 13007,
    ERROR_IPSEC_TRANSPORT_FILTER_EXISTS = 13008,
    ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND = 13009,
    ERROR_IPSEC_MM_AUTH_EXISTS = 13010,
    ERROR_IPSEC_MM_AUTH_NOT_FOUND = 13011,
    ERROR_IPSEC_MM_AUTH_IN_USE = 13012,
    ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND = 13013,
    ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND = 13014,
    ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND = 13015,
    ERROR_IPSEC_TUNNEL_FILTER_EXISTS = 13016,
    ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND = 13017,
    ERROR_IPSEC_MM_FILTER_PENDING_DELETION = 13018,
    ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION = 13019,
    ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION = 13020,
    ERROR_IPSEC_MM_POLICY_PENDING_DELETION = 13021,
    ERROR_IPSEC_MM_AUTH_PENDING_DELETION = 13022,
    ERROR_IPSEC_QM_POLICY_PENDING_DELETION = 13023,
    ERROR_IPSEC_IKE_NEG_STATUS_BEGIN = 13800,
    ERROR_IPSEC_IKE_AUTH_FAIL = 13801,
    ERROR_IPSEC_IKE_ATTRIB_FAIL = 13802,
    ERROR_IPSEC_IKE_NEGOTIATION_PENDING = 13803,
    ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR = 13804,
    ERROR_IPSEC_IKE_TIMED_OUT = 13805,
    ERROR_IPSEC_IKE_NO_CERT = 13806,
    ERROR_IPSEC_IKE_SA_DELETED = 13807,
    ERROR_IPSEC_IKE_SA_REAPED = 13808,
    ERROR_IPSEC_IKE_MM_ACQUIRE_DROP = 13809,
    ERROR_IPSEC_IKE_QM_ACQUIRE_DROP = 13810,
    ERROR_IPSEC_IKE_QUEUE_DROP_MM = 13811,
    ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM = 13812,
    ERROR_IPSEC_IKE_DROP_NO_RESPONSE = 13813,
    ERROR_IPSEC_IKE_MM_DELAY_DROP = 13814,
    ERROR_IPSEC_IKE_QM_DELAY_DROP = 13815,
    ERROR_IPSEC_IKE_ERROR = 13816,
    ERROR_IPSEC_IKE_CRL_FAILED = 13817,
    ERROR_IPSEC_IKE_INVALID_KEY_USAGE = 13818,
    ERROR_IPSEC_IKE_INVALID_CERT_TYPE = 13819,
    ERROR_IPSEC_IKE_NO_PRIVATE_KEY = 13820,
    ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY = 13821,
    ERROR_IPSEC_IKE_DH_FAIL = 13822,
    ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED = 13823,
    ERROR_IPSEC_IKE_INVALID_HEADER = 13824,
    ERROR_IPSEC_IKE_NO_POLICY = 13825,
    ERROR_IPSEC_IKE_INVALID_SIGNATURE = 13826,
    ERROR_IPSEC_IKE_KERBEROS_ERROR = 13827,
    ERROR_IPSEC_IKE_NO_PUBLIC_KEY = 13828,
    ERROR_IPSEC_IKE_PROCESS_ERR = 13829,
    ERROR_IPSEC_IKE_PROCESS_ERR_SA = 13830,
    ERROR_IPSEC_IKE_PROCESS_ERR_PROP = 13831,
    ERROR_IPSEC_IKE_PROCESS_ERR_TRANS = 13832,
    ERROR_IPSEC_IKE_PROCESS_ERR_KE = 13833,
    ERROR_IPSEC_IKE_PROCESS_ERR_ID = 13834,
    ERROR_IPSEC_IKE_PROCESS_ERR_CERT = 13835,
    ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ = 13836,
    ERROR_IPSEC_IKE_PROCESS_ERR_HASH = 13837,
    ERROR_IPSEC_IKE_PROCESS_ERR_SIG = 13838,
    ERROR_IPSEC_IKE_PROCESS_ERR_NONCE = 13839,
    ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY = 13840,
    ERROR_IPSEC_IKE_PROCESS_ERR_DELETE = 13841,
    ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR = 13842,
    ERROR_IPSEC_IKE_INVALID_PAYLOAD = 13843,
    ERROR_IPSEC_IKE_LOAD_SOFT_SA = 13844,
    ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN = 13845,
    ERROR_IPSEC_IKE_INVALID_COOKIE = 13846,
    ERROR_IPSEC_IKE_NO_PEER_CERT = 13847,
    ERROR_IPSEC_IKE_PEER_CRL_FAILED = 13848,
    ERROR_IPSEC_IKE_POLICY_CHANGE = 13849,
    ERROR_IPSEC_IKE_NO_MM_POLICY = 13850,
    ERROR_IPSEC_IKE_NOTCBPRIV = 13851,
    ERROR_IPSEC_IKE_SECLOADFAIL = 13852,
    ERROR_IPSEC_IKE_FAILSSPINIT = 13853,
    ERROR_IPSEC_IKE_FAILQUERYSSP = 13854,
    ERROR_IPSEC_IKE_SRVACQFAIL = 13855,
    ERROR_IPSEC_IKE_SRVQUERYCRED = 13856,
    ERROR_IPSEC_IKE_GETSPIFAIL = 13857,
    ERROR_IPSEC_IKE_INVALID_FILTER = 13858,
    ERROR_IPSEC_IKE_OUT_OF_MEMORY = 13859,
    ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED = 13860,
    ERROR_IPSEC_IKE_INVALID_POLICY = 13861,
    ERROR_IPSEC_IKE_UNKNOWN_DOI = 13862,
    ERROR_IPSEC_IKE_INVALID_SITUATION = 13863,
    ERROR_IPSEC_IKE_DH_FAILURE = 13864,
    ERROR_IPSEC_IKE_INVALID_GROUP = 13865,
    ERROR_IPSEC_IKE_ENCRYPT = 13866,
    ERROR_IPSEC_IKE_DECRYPT = 13867,
    ERROR_IPSEC_IKE_POLICY_MATCH = 13868,
    ERROR_IPSEC_IKE_UNSUPPORTED_ID = 13869,
    ERROR_IPSEC_IKE_INVALID_HASH = 13870,
    ERROR_IPSEC_IKE_INVALID_HASH_ALG = 13871,
    ERROR_IPSEC_IKE_INVALID_HASH_SIZE = 13872,
    ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG = 13873,
    ERROR_IPSEC_IKE_INVALID_AUTH_ALG = 13874,
    ERROR_IPSEC_IKE_INVALID_SIG = 13875,
    ERROR_IPSEC_IKE_LOAD_FAILED = 13876,
    ERROR_IPSEC_IKE_RPC_DELETE = 13877,
    ERROR_IPSEC_IKE_BENIGN_REINIT = 13878,
    ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY = 13879,
    ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION = 13880,
    ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN = 13881,
    ERROR_IPSEC_IKE_MM_LIMIT = 13882,
    ERROR_IPSEC_IKE_NEGOTIATION_DISABLED = 13883,
    ERROR_IPSEC_IKE_QM_LIMIT = 13884,
    ERROR_IPSEC_IKE_MM_EXPIRED = 13885,
    ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID = 13886,
    ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH = 13887,
    ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID = 13888,
    ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD = 13889,
    ERROR_IPSEC_IKE_DOS_COOKIE_SENT = 13890,
    ERROR_IPSEC_IKE_SHUTTING_DOWN = 13891,
    ERROR_IPSEC_IKE_CGA_AUTH_FAILED = 13892,
    ERROR_IPSEC_IKE_PROCESS_ERR_NATOA = 13893,
    ERROR_IPSEC_IKE_INVALID_MM_FOR_QM = 13894,
    ERROR_IPSEC_IKE_QM_EXPIRED = 13895,
    ERROR_IPSEC_IKE_TOO_MANY_FILTERS = 13896,
    ERROR_IPSEC_IKE_NEG_STATUS_END = 13897,
    ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL = 13898,
    ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE = 13899,
    ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING = 13900,
    ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING = 13901,
    ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS = 13902,
    ERROR_IPSEC_IKE_RATELIMIT_DROP = 13903,
    ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE = 13904,
    ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE = 13905,
    ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE = 13906,
    ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY = 13907,
    ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE = 13908,
    ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END = 13909,
    ERROR_IPSEC_BAD_SPI = 13910,
    ERROR_IPSEC_SA_LIFETIME_EXPIRED = 13911,
    ERROR_IPSEC_WRONG_SA = 13912,
    ERROR_IPSEC_REPLAY_CHECK_FAILED = 13913,
    ERROR_IPSEC_INVALID_PACKET = 13914,
    ERROR_IPSEC_INTEGRITY_CHECK_FAILED = 13915,
    ERROR_IPSEC_CLEAR_TEXT_DROP = 13916,
    ERROR_IPSEC_AUTH_FIREWALL_DROP = 13917,
    ERROR_IPSEC_THROTTLE_DROP = 13918,
    ERROR_IPSEC_DOSP_BLOCK = 13925,
    ERROR_IPSEC_DOSP_RECEIVED_MULTICAST = 13926,
    ERROR_IPSEC_DOSP_INVALID_PACKET = 13927,
    ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED = 13928,
    ERROR_IPSEC_DOSP_MAX_ENTRIES = 13929,
    ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED = 13930,
    ERROR_IPSEC_DOSP_NOT_INSTALLED = 13931,
    ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES = 13932,
    ERROR_SXS_SECTION_NOT_FOUND = 14000,
    ERROR_SXS_CANT_GEN_ACTCTX = 14001,
    ERROR_SXS_INVALID_ACTCTXDATA_FORMAT = 14002,
    ERROR_SXS_ASSEMBLY_NOT_FOUND = 14003,
    ERROR_SXS_MANIFEST_FORMAT_ERROR = 14004,
    ERROR_SXS_MANIFEST_PARSE_ERROR = 14005,
    ERROR_SXS_ACTIVATION_CONTEXT_DISABLED = 14006,
    ERROR_SXS_KEY_NOT_FOUND = 14007,
    ERROR_SXS_VERSION_CONFLICT = 14008,
    ERROR_SXS_WRONG_SECTION_TYPE = 14009,
    ERROR_SXS_THREAD_QUERIES_DISABLED = 14010,
    ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET = 14011,
    ERROR_SXS_UNKNOWN_ENCODING_GROUP = 14012,
    ERROR_SXS_UNKNOWN_ENCODING = 14013,
    ERROR_SXS_INVALID_XML_NAMESPACE_URI = 14014,
    ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14015,
    ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14016,
    ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE = 14017,
    ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE = 14018,
    ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE = 14019,
    ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT = 14020,
    ERROR_SXS_DUPLICATE_DLL_NAME = 14021,
    ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME = 14022,
    ERROR_SXS_DUPLICATE_CLSID = 14023,
    ERROR_SXS_DUPLICATE_IID = 14024,
    ERROR_SXS_DUPLICATE_TLBID = 14025,
    ERROR_SXS_DUPLICATE_PROGID = 14026,
    ERROR_SXS_DUPLICATE_ASSEMBLY_NAME = 14027,
    ERROR_SXS_FILE_HASH_MISMATCH = 14028,
    ERROR_SXS_POLICY_PARSE_ERROR = 14029,
    ERROR_SXS_XML_E_MISSINGQUOTE = 14030,
    ERROR_SXS_XML_E_COMMENTSYNTAX = 14031,
    ERROR_SXS_XML_E_BADSTARTNAMECHAR = 14032,
    ERROR_SXS_XML_E_BADNAMECHAR = 14033,
    ERROR_SXS_XML_E_BADCHARINSTRING = 14034,
    ERROR_SXS_XML_E_XMLDECLSYNTAX = 14035,
    ERROR_SXS_XML_E_BADCHARDATA = 14036,
    ERROR_SXS_XML_E_MISSINGWHITESPACE = 14037,
    ERROR_SXS_XML_E_EXPECTINGTAGEND = 14038,
    ERROR_SXS_XML_E_MISSINGSEMICOLON = 14039,
    ERROR_SXS_XML_E_UNBALANCEDPAREN = 14040,
    ERROR_SXS_XML_E_INTERNALERROR = 14041,
    ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE = 14042,
    ERROR_SXS_XML_E_INCOMPLETE_ENCODING = 14043,
    ERROR_SXS_XML_E_MISSING_PAREN = 14044,
    ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE = 14045,
    ERROR_SXS_XML_E_MULTIPLE_COLONS = 14046,
    ERROR_SXS_XML_E_INVALID_DECIMAL = 14047,
    ERROR_SXS_XML_E_INVALID_HEXIDECIMAL = 14048,
    ERROR_SXS_XML_E_INVALID_UNICODE = 14049,
    ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK = 14050,
    ERROR_SXS_XML_E_UNEXPECTEDENDTAG = 14051,
    ERROR_SXS_XML_E_UNCLOSEDTAG = 14052,
    ERROR_SXS_XML_E_DUPLICATEATTRIBUTE = 14053,
    ERROR_SXS_XML_E_MULTIPLEROOTS = 14054,
    ERROR_SXS_XML_E_INVALIDATROOTLEVEL = 14055,
    ERROR_SXS_XML_E_BADXMLDECL = 14056,
    ERROR_SXS_XML_E_MISSINGROOT = 14057,
    ERROR_SXS_XML_E_UNEXPECTEDEOF = 14058,
    ERROR_SXS_XML_E_BADPEREFINSUBSET = 14059,
    ERROR_SXS_XML_E_UNCLOSEDSTARTTAG = 14060,
    ERROR_SXS_XML_E_UNCLOSEDENDTAG = 14061,
    ERROR_SXS_XML_E_UNCLOSEDSTRING = 14062,
    ERROR_SXS_XML_E_UNCLOSEDCOMMENT = 14063,
    ERROR_SXS_XML_E_UNCLOSEDDECL = 14064,
    ERROR_SXS_XML_E_UNCLOSEDCDATA = 14065,
    ERROR_SXS_XML_E_RESERVEDNAMESPACE = 14066,
    ERROR_SXS_XML_E_INVALIDENCODING = 14067,
    ERROR_SXS_XML_E_INVALIDSWITCH = 14068,
    ERROR_SXS_XML_E_BADXMLCASE = 14069,
    ERROR_SXS_XML_E_INVALID_STANDALONE = 14070,
    ERROR_SXS_XML_E_UNEXPECTED_STANDALONE = 14071,
    ERROR_SXS_XML_E_INVALID_VERSION = 14072,
    ERROR_SXS_XML_E_MISSINGEQUALS = 14073,
    ERROR_SXS_PROTECTION_RECOVERY_FAILED = 14074,
    ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT = 14075,
    ERROR_SXS_PROTECTION_CATALOG_NOT_VALID = 14076,
    ERROR_SXS_UNTRANSLATABLE_HRESULT = 14077,
    ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING = 14078,
    ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE = 14079,
    ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME = 14080,
    ERROR_SXS_ASSEMBLY_MISSING = 14081,
    ERROR_SXS_CORRUPT_ACTIVATION_STACK = 14082,
    ERROR_SXS_CORRUPTION = 14083,
    ERROR_SXS_EARLY_DEACTIVATION = 14084,
    ERROR_SXS_INVALID_DEACTIVATION = 14085,
    ERROR_SXS_MULTIPLE_DEACTIVATION = 14086,
    ERROR_SXS_PROCESS_TERMINATION_REQUESTED = 14087,
    ERROR_SXS_RELEASE_ACTIVATION_CONTEXT = 14088,
    ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY = 14089,
    ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE = 14090,
    ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME = 14091,
    ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE = 14092,
    ERROR_SXS_IDENTITY_PARSE_ERROR = 14093,
    ERROR_MALFORMED_SUBSTITUTION_STRING = 14094,
    ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN = 14095,
    ERROR_UNMAPPED_SUBSTITUTION_STRING = 14096,
    ERROR_SXS_ASSEMBLY_NOT_LOCKED = 14097,
    ERROR_SXS_COMPONENT_STORE_CORRUPT = 14098,
    ERROR_ADVANCED_INSTALLER_FAILED = 14099,
    ERROR_XML_ENCODING_MISMATCH = 14100,
    ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT = 14101,
    ERROR_SXS_IDENTITIES_DIFFERENT = 14102,
    ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT = 14103,
    ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY = 14104,
    ERROR_SXS_MANIFEST_TOO_BIG = 14105,
    ERROR_SXS_SETTING_NOT_REGISTERED = 14106,
    ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE = 14107,
    ERROR_SMI_PRIMITIVE_INSTALLER_FAILED = 14108,
    ERROR_GENERIC_COMMAND_FAILED = 14109,
    ERROR_SXS_FILE_HASH_MISSING = 14110,
    ERROR_SXS_DUPLICATE_ACTIVATABLE_CLASS = 14111,
    ERROR_EVT_INVALID_CHANNEL_PATH = 15000,
    ERROR_EVT_INVALID_QUERY = 15001,
    ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND = 15002,
    ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND = 15003,
    ERROR_EVT_INVALID_PUBLISHER_NAME = 15004,
    ERROR_EVT_INVALID_EVENT_DATA = 15005,
    ERROR_EVT_CHANNEL_NOT_FOUND = 15007,
    ERROR_EVT_MALFORMED_XML_TEXT = 15008,
    ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL = 15009,
    ERROR_EVT_CONFIGURATION_ERROR = 15010,
    ERROR_EVT_QUERY_RESULT_STALE = 15011,
    ERROR_EVT_QUERY_RESULT_INVALID_POSITION = 15012,
    ERROR_EVT_NON_VALIDATING_MSXML = 15013,
    ERROR_EVT_FILTER_ALREADYSCOPED = 15014,
    ERROR_EVT_FILTER_NOTELTSET = 15015,
    ERROR_EVT_FILTER_INVARG = 15016,
    ERROR_EVT_FILTER_INVTEST = 15017,
    ERROR_EVT_FILTER_INVTYPE = 15018,
    ERROR_EVT_FILTER_PARSEERR = 15019,
    ERROR_EVT_FILTER_UNSUPPORTEDOP = 15020,
    ERROR_EVT_FILTER_UNEXPECTEDTOKEN = 15021,
    ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL = 15022,
    ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE = 15023,
    ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE = 15024,
    ERROR_EVT_CHANNEL_CANNOT_ACTIVATE = 15025,
    ERROR_EVT_FILTER_TOO_COMPLEX = 15026,
    ERROR_EVT_MESSAGE_NOT_FOUND = 15027,
    ERROR_EVT_MESSAGE_ID_NOT_FOUND = 15028,
    ERROR_EVT_UNRESOLVED_VALUE_INSERT = 15029,
    ERROR_EVT_UNRESOLVED_PARAMETER_INSERT = 15030,
    ERROR_EVT_MAX_INSERTS_REACHED = 15031,
    ERROR_EVT_EVENT_DEFINITION_NOT_FOUND = 15032,
    ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND = 15033,
    ERROR_EVT_VERSION_TOO_OLD = 15034,
    ERROR_EVT_VERSION_TOO_NEW = 15035,
    ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY = 15036,
    ERROR_EVT_PUBLISHER_DISABLED = 15037,
    ERROR_EVT_FILTER_OUT_OF_RANGE = 15038,
    ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE = 15080,
    ERROR_EC_LOG_DISABLED = 15081,
    ERROR_EC_CIRCULAR_FORWARDING = 15082,
    ERROR_EC_CREDSTORE_FULL = 15083,
    ERROR_EC_CRED_NOT_FOUND = 15084,
    ERROR_EC_NO_ACTIVE_CHANNEL = 15085,
    ERROR_MUI_FILE_NOT_FOUND = 15100,
    ERROR_MUI_INVALID_FILE = 15101,
    ERROR_MUI_INVALID_RC_CONFIG = 15102,
    ERROR_MUI_INVALID_LOCALE_NAME = 15103,
    ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME = 15104,
    ERROR_MUI_FILE_NOT_LOADED = 15105,
    ERROR_RESOURCE_ENUM_USER_STOP = 15106,
    ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED = 15107,
    ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME = 15108,
    ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE = 15110,
    ERROR_MRM_INVALID_PRICONFIG = 15111,
    ERROR_MRM_INVALID_FILE_TYPE = 15112,
    ERROR_MRM_UNKNOWN_QUALIFIER = 15113,
    ERROR_MRM_INVALID_QUALIFIER_VALUE = 15114,
    ERROR_MRM_NO_CANDIDATE = 15115,
    ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE = 15116,
    ERROR_MRM_RESOURCE_TYPE_MISMATCH = 15117,
    ERROR_MRM_DUPLICATE_MAP_NAME = 15118,
    ERROR_MRM_DUPLICATE_ENTRY = 15119,
    ERROR_MRM_INVALID_RESOURCE_IDENTIFIER = 15120,
    ERROR_MRM_FILEPATH_TOO_LONG = 15121,
    ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE = 15122,
    ERROR_MRM_INVALID_PRI_FILE = 15126,
    ERROR_MRM_NAMED_RESOURCE_NOT_FOUND = 15127,
    ERROR_MRM_MAP_NOT_FOUND = 15135,
    ERROR_MRM_UNSUPPORTED_PROFILE_TYPE = 15136,
    ERROR_MRM_INVALID_QUALIFIER_OPERATOR = 15137,
    ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE = 15138,
    ERROR_MRM_AUTOMERGE_ENABLED = 15139,
    ERROR_MRM_TOO_MANY_RESOURCES = 15140,
    ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_MERGE = 15141,
    ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_LOAD_UNLOAD_PRI_FILE = 15142,
    ERROR_MRM_NO_CURRENT_VIEW_ON_THREAD = 15143,
    ERROR_DIFFERENT_PROFILE_RESOURCE_MANAGER_EXIST = 15144,
    ERROR_OPERATION_NOT_ALLOWED_FROM_SYSTEM_COMPONENT = 15145,
    ERROR_MRM_DIRECT_REF_TO_NON_DEFAULT_RESOURCE = 15146,
    ERROR_MRM_GENERATION_COUNT_MISMATCH = 15147,
    ERROR_PRI_MERGE_VERSION_MISMATCH = 15148,
    ERROR_PRI_MERGE_MISSING_SCHEMA = 15149,
    ERROR_PRI_MERGE_LOAD_FILE_FAILED = 15150,
    ERROR_PRI_MERGE_ADD_FILE_FAILED = 15151,
    ERROR_PRI_MERGE_WRITE_FILE_FAILED = 15152,
    ERROR_PRI_MERGE_MULTIPLE_PACKAGE_FAMILIES_NOT_ALLOWED = 15153,
    ERROR_PRI_MERGE_MULTIPLE_MAIN_PACKAGES_NOT_ALLOWED = 15154,
    ERROR_PRI_MERGE_BUNDLE_PACKAGES_NOT_ALLOWED = 15155,
    ERROR_PRI_MERGE_MAIN_PACKAGE_REQUIRED = 15156,
    ERROR_PRI_MERGE_RESOURCE_PACKAGE_REQUIRED = 15157,
    ERROR_PRI_MERGE_INVALID_FILE_NAME = 15158,
    ERROR_MRM_PACKAGE_NOT_FOUND = 15159,
    ERROR_MRM_MISSING_DEFAULT_LANGUAGE = 15160,
    ERROR_MCA_INVALID_CAPABILITIES_STRING = 15200,
    ERROR_MCA_INVALID_VCP_VERSION = 15201,
    ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION = 15202,
    ERROR_MCA_MCCS_VERSION_MISMATCH = 15203,
    ERROR_MCA_UNSUPPORTED_MCCS_VERSION = 15204,
    ERROR_MCA_INTERNAL_ERROR = 15205,
    ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED = 15206,
    ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE = 15207,
    ERROR_AMBIGUOUS_SYSTEM_DEVICE = 15250,
    ERROR_SYSTEM_DEVICE_NOT_FOUND = 15299,
    ERROR_HASH_NOT_SUPPORTED = 15300,
    ERROR_HASH_NOT_PRESENT = 15301,
    ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED = 15321,
    ERROR_GPIO_CLIENT_INFORMATION_INVALID = 15322,
    ERROR_GPIO_VERSION_NOT_SUPPORTED = 15323,
    ERROR_GPIO_INVALID_REGISTRATION_PACKET = 15324,
    ERROR_GPIO_OPERATION_DENIED = 15325,
    ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE = 15326,
    ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED = 15327,
    ERROR_CANNOT_SWITCH_RUNLEVEL = 15400,
    ERROR_INVALID_RUNLEVEL_SETTING = 15401,
    ERROR_RUNLEVEL_SWITCH_TIMEOUT = 15402,
    ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT = 15403,
    ERROR_RUNLEVEL_SWITCH_IN_PROGRESS = 15404,
    ERROR_SERVICES_FAILED_AUTOSTART = 15405,
    ERROR_COM_TASK_STOP_PENDING = 15501,
    ERROR_INSTALL_OPEN_PACKAGE_FAILED = 15600,
    ERROR_INSTALL_PACKAGE_NOT_FOUND = 15601,
    ERROR_INSTALL_INVALID_PACKAGE = 15602,
    ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED = 15603,
    ERROR_INSTALL_OUT_OF_DISK_SPACE = 15604,
    ERROR_INSTALL_NETWORK_FAILURE = 15605,
    ERROR_INSTALL_REGISTRATION_FAILURE = 15606,
    ERROR_INSTALL_DEREGISTRATION_FAILURE = 15607,
    ERROR_INSTALL_CANCEL = 15608,
    ERROR_INSTALL_FAILED = 15609,
    ERROR_REMOVE_FAILED = 15610,
    ERROR_PACKAGE_ALREADY_EXISTS = 15611,
    ERROR_NEEDS_REMEDIATION = 15612,
    ERROR_INSTALL_PREREQUISITE_FAILED = 15613,
    ERROR_PACKAGE_REPOSITORY_CORRUPTED = 15614,
    ERROR_INSTALL_POLICY_FAILURE = 15615,
    ERROR_PACKAGE_UPDATING = 15616,
    ERROR_DEPLOYMENT_BLOCKED_BY_POLICY = 15617,
    ERROR_PACKAGES_IN_USE = 15618,
    ERROR_RECOVERY_FILE_CORRUPT = 15619,
    ERROR_INVALID_STAGED_SIGNATURE = 15620,
    ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED = 15621,
    ERROR_INSTALL_PACKAGE_DOWNGRADE = 15622,
    ERROR_SYSTEM_NEEDS_REMEDIATION = 15623,
    ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN = 15624,
    ERROR_RESILIENCY_FILE_CORRUPT = 15625,
    ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING = 15626,
    ERROR_PACKAGE_MOVE_FAILED = 15627,
    ERROR_INSTALL_VOLUME_NOT_EMPTY = 15628,
    ERROR_INSTALL_VOLUME_OFFLINE = 15629,
    ERROR_INSTALL_VOLUME_CORRUPT = 15630,
    ERROR_NEEDS_REGISTRATION = 15631,
    ERROR_INSTALL_WRONG_PROCESSOR_ARCHITECTURE = 15632,
    ERROR_DEV_SIDELOAD_LIMIT_EXCEEDED = 15633,
    ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE = 15634,
    ERROR_PACKAGE_NOT_SUPPORTED_ON_FILESYSTEM = 15635,
    ERROR_PACKAGE_MOVE_BLOCKED_BY_STREAMING = 15636,
    ERROR_INSTALL_OPTIONAL_PACKAGE_APPLICATIONID_NOT_UNIQUE = 15637,
    ERROR_PACKAGE_STAGING_ONHOLD = 15638,
    ERROR_INSTALL_INVALID_RELATED_SET_UPDATE = 15639,
    ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY = 15640,
    ERROR_DEPLOYMENT_BLOCKED_BY_USER_LOG_OFF = 15641,
    ERROR_PROVISION_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_PROVISIONED = 15642,
    ERROR_PACKAGES_REPUTATION_CHECK_FAILED = 15643,
    ERROR_PACKAGES_REPUTATION_CHECK_TIMEDOUT = 15644,
    ERROR_DEPLOYMENT_OPTION_NOT_SUPPORTED = 15645,
    ERROR_APPINSTALLER_ACTIVATION_BLOCKED = 15646,
    ERROR_REGISTRATION_FROM_REMOTE_DRIVE_NOT_SUPPORTED = 15647,
    ERROR_APPX_RAW_DATA_WRITE_FAILED = 15648,
    ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_PACKAGE = 15649,
    ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_MACHINE = 15650,
    ERROR_DEPLOYMENT_BLOCKED_BY_PROFILE_POLICY = 15651,
    ERROR_DEPLOYMENT_FAILED_CONFLICTING_MUTABLE_PACKAGE_DIRECTORY = 15652,
    ERROR_SINGLETON_RESOURCE_INSTALLED_IN_ACTIVE_USER = 15653,
    ERROR_DIFFERENT_VERSION_OF_PACKAGED_SERVICE_INSTALLED = 15654,
    ERROR_SERVICE_EXISTS_AS_NON_PACKAGED_SERVICE = 15655,
    ERROR_PACKAGED_SERVICE_REQUIRES_ADMIN_PRIVILEGES = 15656,
    ERROR_REDIRECTION_TO_DEFAULT_ACCOUNT_NOT_ALLOWED = 15657,
    ERROR_PACKAGE_LACKS_CAPABILITY_TO_DEPLOY_ON_HOST = 15658,
    ERROR_UNSIGNED_PACKAGE_INVALID_CONTENT = 15659,
    ERROR_UNSIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE = 15660,
    ERROR_SIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE = 15661,
    ERROR_PACKAGE_EXTERNAL_LOCATION_NOT_ALLOWED = 15662,
    ERROR_INSTALL_FULLTRUST_HOSTRUNTIME_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY = 15663,
    ERROR_PACKAGE_LACKS_CAPABILITY_FOR_MANDATORY_STARTUPTASKS = 15664,
    ERROR_INSTALL_RESOLVE_HOSTRUNTIME_DEPENDENCY_FAILED = 15665,
    ERROR_MACHINE_SCOPE_NOT_ALLOWED = 15666,
    ERROR_CLASSIC_COMPAT_MODE_NOT_ALLOWED = 15667,
    ERROR_STAGEFROMUPDATEAGENT_PACKAGE_NOT_APPLICABLE = 15668,
    ERROR_PACKAGE_NOT_REGISTERED_FOR_USER = 15669,
    ERROR_STATE_LOAD_STORE_FAILED = 15800,
    ERROR_STATE_GET_VERSION_FAILED = 15801,
    ERROR_STATE_SET_VERSION_FAILED = 15802,
    ERROR_STATE_STRUCTURED_RESET_FAILED = 15803,
    ERROR_STATE_OPEN_CONTAINER_FAILED = 15804,
    ERROR_STATE_CREATE_CONTAINER_FAILED = 15805,
    ERROR_STATE_DELETE_CONTAINER_FAILED = 15806,
    ERROR_STATE_READ_SETTING_FAILED = 15807,
    ERROR_STATE_WRITE_SETTING_FAILED = 15808,
    ERROR_STATE_DELETE_SETTING_FAILED = 15809,
    ERROR_STATE_QUERY_SETTING_FAILED = 15810,
    ERROR_STATE_READ_COMPOSITE_SETTING_FAILED = 15811,
    ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED = 15812,
    ERROR_STATE_ENUMERATE_CONTAINER_FAILED = 15813,
    ERROR_STATE_ENUMERATE_SETTINGS_FAILED = 15814,
    ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = 15815,
    ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = 15816,
    ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED = 15817,
    ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED = 15818,
    ERROR_API_UNAVAILABLE = 15841,
    ERROR_NDIS_INTERFACE_CLOSING = 2150891522,
    ERROR_NDIS_BAD_VERSION = 2150891524,
    ERROR_NDIS_BAD_CHARACTERISTICS = 2150891525,
    ERROR_NDIS_ADAPTER_NOT_FOUND = 2150891526,
    ERROR_NDIS_OPEN_FAILED = 2150891527,
    ERROR_NDIS_DEVICE_FAILED = 2150891528,
    ERROR_NDIS_MULTICAST_FULL = 2150891529,
    ERROR_NDIS_MULTICAST_EXISTS = 2150891530,
    ERROR_NDIS_MULTICAST_NOT_FOUND = 2150891531,
    ERROR_NDIS_REQUEST_ABORTED = 2150891532,
    ERROR_NDIS_RESET_IN_PROGRESS = 2150891533,
    ERROR_NDIS_NOT_SUPPORTED = 2150891707,
    ERROR_NDIS_INVALID_PACKET = 2150891535,
    ERROR_NDIS_ADAPTER_NOT_READY = 2150891537,
    ERROR_NDIS_INVALID_LENGTH = 2150891540,
    ERROR_NDIS_INVALID_DATA = 2150891541,
    ERROR_NDIS_BUFFER_TOO_SHORT = 2150891542,
    ERROR_NDIS_INVALID_OID = 2150891543,
    ERROR_NDIS_ADAPTER_REMOVED = 2150891544,
    ERROR_NDIS_UNSUPPORTED_MEDIA = 2150891545,
    ERROR_NDIS_GROUP_ADDRESS_IN_USE = 2150891546,
    ERROR_NDIS_FILE_NOT_FOUND = 2150891547,
    ERROR_NDIS_ERROR_READING_FILE = 2150891548,
    ERROR_NDIS_ALREADY_MAPPED = 2150891549,
    ERROR_NDIS_RESOURCE_CONFLICT = 2150891550,
    ERROR_NDIS_MEDIA_DISCONNECTED = 2150891551,
    ERROR_NDIS_INVALID_ADDRESS = 2150891554,
    ERROR_NDIS_INVALID_DEVICE_REQUEST = 2150891536,
    ERROR_NDIS_PAUSED = 2150891562,
    ERROR_NDIS_INTERFACE_NOT_FOUND = 2150891563,
    ERROR_NDIS_UNSUPPORTED_REVISION = 2150891564,
    ERROR_NDIS_INVALID_PORT = 2150891565,
    ERROR_NDIS_INVALID_PORT_STATE = 2150891566,
    ERROR_NDIS_LOW_POWER_STATE = 2150891567,
    ERROR_NDIS_REINIT_REQUIRED = 2150891568,
    ERROR_NDIS_NO_QUEUES = 2150891569,
    ERROR_NDIS_DOT11_AUTO_CONFIG_ENABLED = 2150899712,
    ERROR_NDIS_DOT11_MEDIA_IN_USE = 2150899713,
    ERROR_NDIS_DOT11_POWER_STATE_INVALID = 2150899714,
    ERROR_NDIS_PM_WOL_PATTERN_LIST_FULL = 2150899715,
    ERROR_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL = 2150899716,
    ERROR_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE = 2150899717,
    ERROR_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE = 2150899718,
    ERROR_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED = 2150899719,
    ERROR_NDIS_DOT11_AP_BAND_NOT_ALLOWED = 2150899720,
    ERROR_NDIS_INDICATION_REQUIRED = 3407873,
    ERROR_NDIS_OFFLOAD_POLICY = 3224637455,
    ERROR_NDIS_OFFLOAD_CONNECTION_REJECTED = 3224637458,
    ERROR_NDIS_OFFLOAD_PATH_REJECTED = 3224637459,
    ERROR_HV_INVALID_HYPERCALL_CODE = 3224698882,
    ERROR_HV_INVALID_HYPERCALL_INPUT = 3224698883,
    ERROR_HV_INVALID_ALIGNMENT = 3224698884,
    ERROR_HV_INVALID_PARAMETER = 3224698885,
    ERROR_HV_ACCESS_DENIED = 3224698886,
    ERROR_HV_INVALID_PARTITION_STATE = 3224698887,
    ERROR_HV_OPERATION_DENIED = 3224698888,
    ERROR_HV_UNKNOWN_PROPERTY = 3224698889,
    ERROR_HV_PROPERTY_VALUE_OUT_OF_RANGE = 3224698890,
    ERROR_HV_INSUFFICIENT_MEMORY = 3224698891,
    ERROR_HV_PARTITION_TOO_DEEP = 3224698892,
    ERROR_HV_INVALID_PARTITION_ID = 3224698893,
    ERROR_HV_INVALID_VP_INDEX = 3224698894,
    ERROR_HV_INVALID_PORT_ID = 3224698897,
    ERROR_HV_INVALID_CONNECTION_ID = 3224698898,
    ERROR_HV_INSUFFICIENT_BUFFERS = 3224698899,
    ERROR_HV_NOT_ACKNOWLEDGED = 3224698900,
    ERROR_HV_INVALID_VP_STATE = 3224698901,
    ERROR_HV_ACKNOWLEDGED = 3224698902,
    ERROR_HV_INVALID_SAVE_RESTORE_STATE = 3224698903,
    ERROR_HV_INVALID_SYNIC_STATE = 3224698904,
    ERROR_HV_OBJECT_IN_USE = 3224698905,
    ERROR_HV_INVALID_PROXIMITY_DOMAIN_INFO = 3224698906,
    ERROR_HV_NO_DATA = 3224698907,
    ERROR_HV_INACTIVE = 3224698908,
    ERROR_HV_NO_RESOURCES = 3224698909,
    ERROR_HV_FEATURE_UNAVAILABLE = 3224698910,
    ERROR_HV_INSUFFICIENT_BUFFER = 3224698931,
    ERROR_HV_INSUFFICIENT_DEVICE_DOMAINS = 3224698936,
    ERROR_HV_CPUID_FEATURE_VALIDATION = 3224698940,
    ERROR_HV_CPUID_XSAVE_FEATURE_VALIDATION = 3224698941,
    ERROR_HV_PROCESSOR_STARTUP_TIMEOUT = 3224698942,
    ERROR_HV_SMX_ENABLED = 3224698943,
    ERROR_HV_INVALID_LP_INDEX = 3224698945,
    ERROR_HV_INVALID_REGISTER_VALUE = 3224698960,
    ERROR_HV_INVALID_VTL_STATE = 3224698961,
    ERROR_HV_NX_NOT_DETECTED = 3224698965,
    ERROR_HV_INVALID_DEVICE_ID = 3224698967,
    ERROR_HV_INVALID_DEVICE_STATE = 3224698968,
    ERROR_HV_PENDING_PAGE_REQUESTS = 3473497,
    ERROR_HV_PAGE_REQUEST_INVALID = 3224698976,
    ERROR_HV_INVALID_CPU_GROUP_ID = 3224698991,
    ERROR_HV_INVALID_CPU_GROUP_STATE = 3224698992,
    ERROR_HV_OPERATION_FAILED = 3224698993,
    ERROR_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE = 3224698994,
    ERROR_HV_INSUFFICIENT_ROOT_MEMORY = 3224698995,
    ERROR_HV_EVENT_BUFFER_ALREADY_FREED = 3224698996,
    ERROR_HV_INSUFFICIENT_CONTIGUOUS_MEMORY = 3224698997,
    ERROR_HV_DEVICE_NOT_IN_DOMAIN = 3224698998,
    ERROR_HV_NESTED_VM_EXIT = 3224698999,
    ERROR_HV_MSR_ACCESS_FAILED = 3224699008,
    ERROR_HV_NOT_PRESENT = 3224702976,
    ERROR_VID_DUPLICATE_HANDLER = 3224829953,
    ERROR_VID_TOO_MANY_HANDLERS = 3224829954,
    ERROR_VID_QUEUE_FULL = 3224829955,
    ERROR_VID_HANDLER_NOT_PRESENT = 3224829956,
    ERROR_VID_INVALID_OBJECT_NAME = 3224829957,
    ERROR_VID_PARTITION_NAME_TOO_LONG = 3224829958,
    ERROR_VID_MESSAGE_QUEUE_NAME_TOO_LONG = 3224829959,
    ERROR_VID_PARTITION_ALREADY_EXISTS = 3224829960,
    ERROR_VID_PARTITION_DOES_NOT_EXIST = 3224829961,
    ERROR_VID_PARTITION_NAME_NOT_FOUND = 3224829962,
    ERROR_VID_MESSAGE_QUEUE_ALREADY_EXISTS = 3224829963,
    ERROR_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT = 3224829964,
    ERROR_VID_MB_STILL_REFERENCED = 3224829965,
    ERROR_VID_CHILD_GPA_PAGE_SET_CORRUPTED = 3224829966,
    ERROR_VID_INVALID_NUMA_SETTINGS = 3224829967,
    ERROR_VID_INVALID_NUMA_NODE_INDEX = 3224829968,
    ERROR_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED = 3224829969,
    ERROR_VID_INVALID_MEMORY_BLOCK_HANDLE = 3224829970,
    ERROR_VID_PAGE_RANGE_OVERFLOW = 3224829971,
    ERROR_VID_INVALID_MESSAGE_QUEUE_HANDLE = 3224829972,
    ERROR_VID_INVALID_GPA_RANGE_HANDLE = 3224829973,
    ERROR_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE = 3224829974,
    ERROR_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED = 3224829975,
    ERROR_VID_INVALID_PPM_HANDLE = 3224829976,
    ERROR_VID_MBPS_ARE_LOCKED = 3224829977,
    ERROR_VID_MESSAGE_QUEUE_CLOSED = 3224829978,
    ERROR_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED = 3224829979,
    ERROR_VID_STOP_PENDING = 3224829980,
    ERROR_VID_INVALID_PROCESSOR_STATE = 3224829981,
    ERROR_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT = 3224829982,
    ERROR_VID_KM_INTERFACE_ALREADY_INITIALIZED = 3224829983,
    ERROR_VID_MB_PROPERTY_ALREADY_SET_RESET = 3224829984,
    ERROR_VID_MMIO_RANGE_DESTROYED = 3224829985,
    ERROR_VID_INVALID_CHILD_GPA_PAGE_SET = 3224829986,
    ERROR_VID_RESERVE_PAGE_SET_IS_BEING_USED = 3224829987,
    ERROR_VID_RESERVE_PAGE_SET_TOO_SMALL = 3224829988,
    ERROR_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE = 3224829989,
    ERROR_VID_MBP_COUNT_EXCEEDED_LIMIT = 3224829990,
    ERROR_VID_SAVED_STATE_CORRUPT = 3224829991,
    ERROR_VID_SAVED_STATE_UNRECOGNIZED_ITEM = 3224829992,
    ERROR_VID_SAVED_STATE_INCOMPATIBLE = 3224829993,
    ERROR_VID_VTL_ACCESS_DENIED = 3224829994,
    ERROR_VMCOMPUTE_TERMINATED_DURING_START = 3224830208,
    ERROR_VMCOMPUTE_IMAGE_MISMATCH = 3224830209,
    ERROR_VMCOMPUTE_HYPERV_NOT_INSTALLED = 3224830210,
    ERROR_VMCOMPUTE_OPERATION_PENDING = 3224830211,
    ERROR_VMCOMPUTE_TOO_MANY_NOTIFICATIONS = 3224830212,
    ERROR_VMCOMPUTE_INVALID_STATE = 3224830213,
    ERROR_VMCOMPUTE_UNEXPECTED_EXIT = 3224830214,
    ERROR_VMCOMPUTE_TERMINATED = 3224830215,
    ERROR_VMCOMPUTE_CONNECT_FAILED = 3224830216,
    ERROR_VMCOMPUTE_TIMEOUT = 3224830217,
    ERROR_VMCOMPUTE_CONNECTION_CLOSED = 3224830218,
    ERROR_VMCOMPUTE_UNKNOWN_MESSAGE = 3224830219,
    ERROR_VMCOMPUTE_UNSUPPORTED_PROTOCOL_VERSION = 3224830220,
    ERROR_VMCOMPUTE_INVALID_JSON = 3224830221,
    ERROR_VMCOMPUTE_SYSTEM_NOT_FOUND = 3224830222,
    ERROR_VMCOMPUTE_SYSTEM_ALREADY_EXISTS = 3224830223,
    ERROR_VMCOMPUTE_SYSTEM_ALREADY_STOPPED = 3224830224,
    ERROR_VMCOMPUTE_PROTOCOL_ERROR = 3224830225,
    ERROR_VMCOMPUTE_INVALID_LAYER = 3224830226,
    ERROR_VMCOMPUTE_WINDOWS_INSIDER_REQUIRED = 3224830227,
    ERROR_VNET_VIRTUAL_SWITCH_NAME_NOT_FOUND = 3224830464,
    ERROR_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED = 2151088129,
    ERROR_VSMB_SAVED_STATE_FILE_NOT_FOUND = 3224830976,
    ERROR_VSMB_SAVED_STATE_CORRUPT = 3224830977,
    ERROR_VOLMGR_INCOMPLETE_REGENERATION = 2151153665,
    ERROR_VOLMGR_INCOMPLETE_DISK_MIGRATION = 2151153666,
    ERROR_VOLMGR_DATABASE_FULL = 3224895489,
    ERROR_VOLMGR_DISK_CONFIGURATION_CORRUPTED = 3224895490,
    ERROR_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC = 3224895491,
    ERROR_VOLMGR_PACK_CONFIG_UPDATE_FAILED = 3224895492,
    ERROR_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME = 3224895493,
    ERROR_VOLMGR_DISK_DUPLICATE = 3224895494,
    ERROR_VOLMGR_DISK_DYNAMIC = 3224895495,
    ERROR_VOLMGR_DISK_ID_INVALID = 3224895496,
    ERROR_VOLMGR_DISK_INVALID = 3224895497,
    ERROR_VOLMGR_DISK_LAST_VOTER = 3224895498,
    ERROR_VOLMGR_DISK_LAYOUT_INVALID = 3224895499,
    ERROR_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS = 3224895500,
    ERROR_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED = 3224895501,
    ERROR_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL = 3224895502,
    ERROR_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS = 3224895503,
    ERROR_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS = 3224895504,
    ERROR_VOLMGR_DISK_MISSING = 3224895505,
    ERROR_VOLMGR_DISK_NOT_EMPTY = 3224895506,
    ERROR_VOLMGR_DISK_NOT_ENOUGH_SPACE = 3224895507,
    ERROR_VOLMGR_DISK_REVECTORING_FAILED = 3224895508,
    ERROR_VOLMGR_DISK_SECTOR_SIZE_INVALID = 3224895509,
    ERROR_VOLMGR_DISK_SET_NOT_CONTAINED = 3224895510,
    ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS = 3224895511,
    ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES = 3224895512,
    ERROR_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED = 3224895513,
    ERROR_VOLMGR_EXTENT_ALREADY_USED = 3224895514,
    ERROR_VOLMGR_EXTENT_NOT_CONTIGUOUS = 3224895515,
    ERROR_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION = 3224895516,
    ERROR_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED = 3224895517,
    ERROR_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION = 3224895518,
    ERROR_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH = 3224895519,
    ERROR_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED = 3224895520,
    ERROR_VOLMGR_INTERLEAVE_LENGTH_INVALID = 3224895521,
    ERROR_VOLMGR_MAXIMUM_REGISTERED_USERS = 3224895522,
    ERROR_VOLMGR_MEMBER_IN_SYNC = 3224895523,
    ERROR_VOLMGR_MEMBER_INDEX_DUPLICATE = 3224895524,
    ERROR_VOLMGR_MEMBER_INDEX_INVALID = 3224895525,
    ERROR_VOLMGR_MEMBER_MISSING = 3224895526,
    ERROR_VOLMGR_MEMBER_NOT_DETACHED = 3224895527,
    ERROR_VOLMGR_MEMBER_REGENERATING = 3224895528,
    ERROR_VOLMGR_ALL_DISKS_FAILED = 3224895529,
    ERROR_VOLMGR_NO_REGISTERED_USERS = 3224895530,
    ERROR_VOLMGR_NO_SUCH_USER = 3224895531,
    ERROR_VOLMGR_NOTIFICATION_RESET = 3224895532,
    ERROR_VOLMGR_NUMBER_OF_MEMBERS_INVALID = 3224895533,
    ERROR_VOLMGR_NUMBER_OF_PLEXES_INVALID = 3224895534,
    ERROR_VOLMGR_PACK_DUPLICATE = 3224895535,
    ERROR_VOLMGR_PACK_ID_INVALID = 3224895536,
    ERROR_VOLMGR_PACK_INVALID = 3224895537,
    ERROR_VOLMGR_PACK_NAME_INVALID = 3224895538,
    ERROR_VOLMGR_PACK_OFFLINE = 3224895539,
    ERROR_VOLMGR_PACK_HAS_QUORUM = 3224895540,
    ERROR_VOLMGR_PACK_WITHOUT_QUORUM = 3224895541,
    ERROR_VOLMGR_PARTITION_STYLE_INVALID = 3224895542,
    ERROR_VOLMGR_PARTITION_UPDATE_FAILED = 3224895543,
    ERROR_VOLMGR_PLEX_IN_SYNC = 3224895544,
    ERROR_VOLMGR_PLEX_INDEX_DUPLICATE = 3224895545,
    ERROR_VOLMGR_PLEX_INDEX_INVALID = 3224895546,
    ERROR_VOLMGR_PLEX_LAST_ACTIVE = 3224895547,
    ERROR_VOLMGR_PLEX_MISSING = 3224895548,
    ERROR_VOLMGR_PLEX_REGENERATING = 3224895549,
    ERROR_VOLMGR_PLEX_TYPE_INVALID = 3224895550,
    ERROR_VOLMGR_PLEX_NOT_RAID5 = 3224895551,
    ERROR_VOLMGR_PLEX_NOT_SIMPLE = 3224895552,
    ERROR_VOLMGR_STRUCTURE_SIZE_INVALID = 3224895553,
    ERROR_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS = 3224895554,
    ERROR_VOLMGR_TRANSACTION_IN_PROGRESS = 3224895555,
    ERROR_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE = 3224895556,
    ERROR_VOLMGR_VOLUME_CONTAINS_MISSING_DISK = 3224895557,
    ERROR_VOLMGR_VOLUME_ID_INVALID = 3224895558,
    ERROR_VOLMGR_VOLUME_LENGTH_INVALID = 3224895559,
    ERROR_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE = 3224895560,
    ERROR_VOLMGR_VOLUME_NOT_MIRRORED = 3224895561,
    ERROR_VOLMGR_VOLUME_NOT_RETAINED = 3224895562,
    ERROR_VOLMGR_VOLUME_OFFLINE = 3224895563,
    ERROR_VOLMGR_VOLUME_RETAINED = 3224895564,
    ERROR_VOLMGR_NUMBER_OF_EXTENTS_INVALID = 3224895565,
    ERROR_VOLMGR_DIFFERENT_SECTOR_SIZE = 3224895566,
    ERROR_VOLMGR_BAD_BOOT_DISK = 3224895567,
    ERROR_VOLMGR_PACK_CONFIG_OFFLINE = 3224895568,
    ERROR_VOLMGR_PACK_CONFIG_ONLINE = 3224895569,
    ERROR_VOLMGR_NOT_PRIMARY_PACK = 3224895570,
    ERROR_VOLMGR_PACK_LOG_UPDATE_FAILED = 3224895571,
    ERROR_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID = 3224895572,
    ERROR_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID = 3224895573,
    ERROR_VOLMGR_VOLUME_MIRRORED = 3224895574,
    ERROR_VOLMGR_PLEX_NOT_SIMPLE_SPANNED = 3224895575,
    ERROR_VOLMGR_NO_VALID_LOG_COPIES = 3224895576,
    ERROR_VOLMGR_PRIMARY_PACK_PRESENT = 3224895577,
    ERROR_VOLMGR_NUMBER_OF_DISKS_INVALID = 3224895578,
    ERROR_VOLMGR_MIRROR_NOT_SUPPORTED = 3224895579,
    ERROR_VOLMGR_RAID5_NOT_SUPPORTED = 3224895580,
    ERROR_BCD_NOT_ALL_ENTRIES_IMPORTED = 2151219201,
    ERROR_BCD_TOO_MANY_ELEMENTS = 3224961026,
    ERROR_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED = 2151219203,
    ERROR_VHD_DRIVE_FOOTER_MISSING = 3225026561,
    ERROR_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH = 3225026562,
    ERROR_VHD_DRIVE_FOOTER_CORRUPT = 3225026563,
    ERROR_VHD_FORMAT_UNKNOWN = 3225026564,
    ERROR_VHD_FORMAT_UNSUPPORTED_VERSION = 3225026565,
    ERROR_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH = 3225026566,
    ERROR_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION = 3225026567,
    ERROR_VHD_SPARSE_HEADER_CORRUPT = 3225026568,
    ERROR_VHD_BLOCK_ALLOCATION_FAILURE = 3225026569,
    ERROR_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT = 3225026570,
    ERROR_VHD_INVALID_BLOCK_SIZE = 3225026571,
    ERROR_VHD_BITMAP_MISMATCH = 3225026572,
    ERROR_VHD_PARENT_VHD_NOT_FOUND = 3225026573,
    ERROR_VHD_CHILD_PARENT_ID_MISMATCH = 3225026574,
    ERROR_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH = 3225026575,
    ERROR_VHD_METADATA_READ_FAILURE = 3225026576,
    ERROR_VHD_METADATA_WRITE_FAILURE = 3225026577,
    ERROR_VHD_INVALID_SIZE = 3225026578,
    ERROR_VHD_INVALID_FILE_SIZE = 3225026579,
    ERROR_VIRTDISK_PROVIDER_NOT_FOUND = 3225026580,
    ERROR_VIRTDISK_NOT_VIRTUAL_DISK = 3225026581,
    ERROR_VHD_PARENT_VHD_ACCESS_DENIED = 3225026582,
    ERROR_VHD_CHILD_PARENT_SIZE_MISMATCH = 3225026583,
    ERROR_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED = 3225026584,
    ERROR_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT = 3225026585,
    ERROR_VIRTUAL_DISK_LIMITATION = 3225026586,
    ERROR_VHD_INVALID_TYPE = 3225026587,
    ERROR_VHD_INVALID_STATE = 3225026588,
    ERROR_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE = 3225026589,
    ERROR_VIRTDISK_DISK_ALREADY_OWNED = 3225026590,
    ERROR_VIRTDISK_DISK_ONLINE_AND_WRITABLE = 3225026591,
    ERROR_CTLOG_TRACKING_NOT_INITIALIZED = 3225026592,
    ERROR_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE = 3225026593,
    ERROR_CTLOG_VHD_CHANGED_OFFLINE = 3225026594,
    ERROR_CTLOG_INVALID_TRACKING_STATE = 3225026595,
    ERROR_CTLOG_INCONSISTENT_TRACKING_FILE = 3225026596,
    ERROR_VHD_RESIZE_WOULD_TRUNCATE_DATA = 3225026597,
    ERROR_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE = 3225026598,
    ERROR_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE = 3225026599,
    ERROR_VHD_METADATA_FULL = 3225026600,
    ERROR_VHD_INVALID_CHANGE_TRACKING_ID = 3225026601,
    ERROR_VHD_CHANGE_TRACKING_DISABLED = 3225026602,
    ERROR_VHD_MISSING_CHANGE_TRACKING_INFORMATION = 3225026608,
    ERROR_QUERY_STORAGE_ERROR = 2151284737,
_,
    pub const WAIT_OBJECT_0 = .NO_ERROR;
    pub const WAIT_ABANDONED_0 = .WAIT_ABANDONED;
    pub const ERROR_SUCCESS = .NO_ERROR;
    pub const ERROR_WAIT_NO_CHILDREN = .WAIT_ABANDONED;
    pub const ERROR_CHILD_NOT_COMPLETE = .WAIT_IO_COMPLETION;
    pub const DNS_ERROR_RCODE_NO_ERROR = .NO_ERROR;
    pub const DNS_ERROR_MASK = .DNS_ERROR_RESPONSE_CODES_BASE;
    pub const DNS_ERROR_RCODE_LAST = .DNS_ERROR_RCODE_BADTIME;
    pub const DNS_ERROR_NO_MEMORY = .ERROR_OUTOFMEMORY;
    pub const DNS_ERROR_INVALID_NAME = .ERROR_INVALID_NAME;
    pub const DNS_ERROR_INVALID_DATA = .ERROR_INVALID_DATA;
    pub fn tagName(self: WIN32_ERROR) ?[:0]const u8 {
        return switch (self) {
            .NO_ERROR => "NO_ERROR",
            .WAIT_ABANDONED => "WAIT_ABANDONED",
            .WAIT_IO_COMPLETION => "WAIT_IO_COMPLETION",
            .WAIT_TIMEOUT => "WAIT_TIMEOUT",
            .WAIT_FAILED => "WAIT_FAILED",
            .ERROR_INVALID_FUNCTION => "ERROR_INVALID_FUNCTION",
            .ERROR_FILE_NOT_FOUND => "ERROR_FILE_NOT_FOUND",
            .ERROR_PATH_NOT_FOUND => "ERROR_PATH_NOT_FOUND",
            .ERROR_TOO_MANY_OPEN_FILES => "ERROR_TOO_MANY_OPEN_FILES",
            .ERROR_ACCESS_DENIED => "ERROR_ACCESS_DENIED",
            .ERROR_INVALID_HANDLE => "ERROR_INVALID_HANDLE",
            .ERROR_ARENA_TRASHED => "ERROR_ARENA_TRASHED",
            .ERROR_NOT_ENOUGH_MEMORY => "ERROR_NOT_ENOUGH_MEMORY",
            .ERROR_INVALID_BLOCK => "ERROR_INVALID_BLOCK",
            .ERROR_BAD_ENVIRONMENT => "ERROR_BAD_ENVIRONMENT",
            .ERROR_BAD_FORMAT => "ERROR_BAD_FORMAT",
            .ERROR_INVALID_ACCESS => "ERROR_INVALID_ACCESS",
            .ERROR_INVALID_DATA => "ERROR_INVALID_DATA",
            .ERROR_OUTOFMEMORY => "ERROR_OUTOFMEMORY",
            .ERROR_INVALID_DRIVE => "ERROR_INVALID_DRIVE",
            .ERROR_CURRENT_DIRECTORY => "ERROR_CURRENT_DIRECTORY",
            .ERROR_NOT_SAME_DEVICE => "ERROR_NOT_SAME_DEVICE",
            .ERROR_NO_MORE_FILES => "ERROR_NO_MORE_FILES",
            .ERROR_WRITE_PROTECT => "ERROR_WRITE_PROTECT",
            .ERROR_BAD_UNIT => "ERROR_BAD_UNIT",
            .ERROR_NOT_READY => "ERROR_NOT_READY",
            .ERROR_BAD_COMMAND => "ERROR_BAD_COMMAND",
            .ERROR_CRC => "ERROR_CRC",
            .ERROR_BAD_LENGTH => "ERROR_BAD_LENGTH",
            .ERROR_SEEK => "ERROR_SEEK",
            .ERROR_NOT_DOS_DISK => "ERROR_NOT_DOS_DISK",
            .ERROR_SECTOR_NOT_FOUND => "ERROR_SECTOR_NOT_FOUND",
            .ERROR_OUT_OF_PAPER => "ERROR_OUT_OF_PAPER",
            .ERROR_WRITE_FAULT => "ERROR_WRITE_FAULT",
            .ERROR_READ_FAULT => "ERROR_READ_FAULT",
            .ERROR_GEN_FAILURE => "ERROR_GEN_FAILURE",
            .ERROR_SHARING_VIOLATION => "ERROR_SHARING_VIOLATION",
            .ERROR_LOCK_VIOLATION => "ERROR_LOCK_VIOLATION",
            .ERROR_WRONG_DISK => "ERROR_WRONG_DISK",
            .ERROR_SHARING_BUFFER_EXCEEDED => "ERROR_SHARING_BUFFER_EXCEEDED",
            .ERROR_HANDLE_EOF => "ERROR_HANDLE_EOF",
            .ERROR_HANDLE_DISK_FULL => "ERROR_HANDLE_DISK_FULL",
            .ERROR_NOT_SUPPORTED => "ERROR_NOT_SUPPORTED",
            .ERROR_REM_NOT_LIST => "ERROR_REM_NOT_LIST",
            .ERROR_DUP_NAME => "ERROR_DUP_NAME",
            .ERROR_BAD_NETPATH => "ERROR_BAD_NETPATH",
            .ERROR_NETWORK_BUSY => "ERROR_NETWORK_BUSY",
            .ERROR_DEV_NOT_EXIST => "ERROR_DEV_NOT_EXIST",
            .ERROR_TOO_MANY_CMDS => "ERROR_TOO_MANY_CMDS",
            .ERROR_ADAP_HDW_ERR => "ERROR_ADAP_HDW_ERR",
            .ERROR_BAD_NET_RESP => "ERROR_BAD_NET_RESP",
            .ERROR_UNEXP_NET_ERR => "ERROR_UNEXP_NET_ERR",
            .ERROR_BAD_REM_ADAP => "ERROR_BAD_REM_ADAP",
            .ERROR_PRINTQ_FULL => "ERROR_PRINTQ_FULL",
            .ERROR_NO_SPOOL_SPACE => "ERROR_NO_SPOOL_SPACE",
            .ERROR_PRINT_CANCELLED => "ERROR_PRINT_CANCELLED",
            .ERROR_NETNAME_DELETED => "ERROR_NETNAME_DELETED",
            .ERROR_NETWORK_ACCESS_DENIED => "ERROR_NETWORK_ACCESS_DENIED",
            .ERROR_BAD_DEV_TYPE => "ERROR_BAD_DEV_TYPE",
            .ERROR_BAD_NET_NAME => "ERROR_BAD_NET_NAME",
            .ERROR_TOO_MANY_NAMES => "ERROR_TOO_MANY_NAMES",
            .ERROR_TOO_MANY_SESS => "ERROR_TOO_MANY_SESS",
            .ERROR_SHARING_PAUSED => "ERROR_SHARING_PAUSED",
            .ERROR_REQ_NOT_ACCEP => "ERROR_REQ_NOT_ACCEP",
            .ERROR_REDIR_PAUSED => "ERROR_REDIR_PAUSED",
            .ERROR_FILE_EXISTS => "ERROR_FILE_EXISTS",
            .ERROR_CANNOT_MAKE => "ERROR_CANNOT_MAKE",
            .ERROR_FAIL_I24 => "ERROR_FAIL_I24",
            .ERROR_OUT_OF_STRUCTURES => "ERROR_OUT_OF_STRUCTURES",
            .ERROR_ALREADY_ASSIGNED => "ERROR_ALREADY_ASSIGNED",
            .ERROR_INVALID_PASSWORD => "ERROR_INVALID_PASSWORD",
            .ERROR_INVALID_PARAMETER => "ERROR_INVALID_PARAMETER",
            .ERROR_NET_WRITE_FAULT => "ERROR_NET_WRITE_FAULT",
            .ERROR_NO_PROC_SLOTS => "ERROR_NO_PROC_SLOTS",
            .ERROR_TOO_MANY_SEMAPHORES => "ERROR_TOO_MANY_SEMAPHORES",
            .ERROR_EXCL_SEM_ALREADY_OWNED => "ERROR_EXCL_SEM_ALREADY_OWNED",
            .ERROR_SEM_IS_SET => "ERROR_SEM_IS_SET",
            .ERROR_TOO_MANY_SEM_REQUESTS => "ERROR_TOO_MANY_SEM_REQUESTS",
            .ERROR_INVALID_AT_INTERRUPT_TIME => "ERROR_INVALID_AT_INTERRUPT_TIME",
            .ERROR_SEM_OWNER_DIED => "ERROR_SEM_OWNER_DIED",
            .ERROR_SEM_USER_LIMIT => "ERROR_SEM_USER_LIMIT",
            .ERROR_DISK_CHANGE => "ERROR_DISK_CHANGE",
            .ERROR_DRIVE_LOCKED => "ERROR_DRIVE_LOCKED",
            .ERROR_BROKEN_PIPE => "ERROR_BROKEN_PIPE",
            .ERROR_OPEN_FAILED => "ERROR_OPEN_FAILED",
            .ERROR_BUFFER_OVERFLOW => "ERROR_BUFFER_OVERFLOW",
            .ERROR_DISK_FULL => "ERROR_DISK_FULL",
            .ERROR_NO_MORE_SEARCH_HANDLES => "ERROR_NO_MORE_SEARCH_HANDLES",
            .ERROR_INVALID_TARGET_HANDLE => "ERROR_INVALID_TARGET_HANDLE",
            .ERROR_INVALID_CATEGORY => "ERROR_INVALID_CATEGORY",
            .ERROR_INVALID_VERIFY_SWITCH => "ERROR_INVALID_VERIFY_SWITCH",
            .ERROR_BAD_DRIVER_LEVEL => "ERROR_BAD_DRIVER_LEVEL",
            .ERROR_CALL_NOT_IMPLEMENTED => "ERROR_CALL_NOT_IMPLEMENTED",
            .ERROR_SEM_TIMEOUT => "ERROR_SEM_TIMEOUT",
            .ERROR_INSUFFICIENT_BUFFER => "ERROR_INSUFFICIENT_BUFFER",
            .ERROR_INVALID_NAME => "ERROR_INVALID_NAME",
            .ERROR_INVALID_LEVEL => "ERROR_INVALID_LEVEL",
            .ERROR_NO_VOLUME_LABEL => "ERROR_NO_VOLUME_LABEL",
            .ERROR_MOD_NOT_FOUND => "ERROR_MOD_NOT_FOUND",
            .ERROR_PROC_NOT_FOUND => "ERROR_PROC_NOT_FOUND",
            .ERROR_DIRECT_ACCESS_HANDLE => "ERROR_DIRECT_ACCESS_HANDLE",
            .ERROR_NEGATIVE_SEEK => "ERROR_NEGATIVE_SEEK",
            .ERROR_SEEK_ON_DEVICE => "ERROR_SEEK_ON_DEVICE",
            .ERROR_IS_JOIN_TARGET => "ERROR_IS_JOIN_TARGET",
            .ERROR_IS_JOINED => "ERROR_IS_JOINED",
            .ERROR_IS_SUBSTED => "ERROR_IS_SUBSTED",
            .ERROR_NOT_JOINED => "ERROR_NOT_JOINED",
            .ERROR_NOT_SUBSTED => "ERROR_NOT_SUBSTED",
            .ERROR_JOIN_TO_JOIN => "ERROR_JOIN_TO_JOIN",
            .ERROR_SUBST_TO_SUBST => "ERROR_SUBST_TO_SUBST",
            .ERROR_JOIN_TO_SUBST => "ERROR_JOIN_TO_SUBST",
            .ERROR_SUBST_TO_JOIN => "ERROR_SUBST_TO_JOIN",
            .ERROR_BUSY_DRIVE => "ERROR_BUSY_DRIVE",
            .ERROR_SAME_DRIVE => "ERROR_SAME_DRIVE",
            .ERROR_DIR_NOT_ROOT => "ERROR_DIR_NOT_ROOT",
            .ERROR_DIR_NOT_EMPTY => "ERROR_DIR_NOT_EMPTY",
            .ERROR_IS_SUBST_PATH => "ERROR_IS_SUBST_PATH",
            .ERROR_IS_JOIN_PATH => "ERROR_IS_JOIN_PATH",
            .ERROR_PATH_BUSY => "ERROR_PATH_BUSY",
            .ERROR_IS_SUBST_TARGET => "ERROR_IS_SUBST_TARGET",
            .ERROR_SYSTEM_TRACE => "ERROR_SYSTEM_TRACE",
            .ERROR_INVALID_EVENT_COUNT => "ERROR_INVALID_EVENT_COUNT",
            .ERROR_TOO_MANY_MUXWAITERS => "ERROR_TOO_MANY_MUXWAITERS",
            .ERROR_INVALID_LIST_FORMAT => "ERROR_INVALID_LIST_FORMAT",
            .ERROR_LABEL_TOO_LONG => "ERROR_LABEL_TOO_LONG",
            .ERROR_TOO_MANY_TCBS => "ERROR_TOO_MANY_TCBS",
            .ERROR_SIGNAL_REFUSED => "ERROR_SIGNAL_REFUSED",
            .ERROR_DISCARDED => "ERROR_DISCARDED",
            .ERROR_NOT_LOCKED => "ERROR_NOT_LOCKED",
            .ERROR_BAD_THREADID_ADDR => "ERROR_BAD_THREADID_ADDR",
            .ERROR_BAD_ARGUMENTS => "ERROR_BAD_ARGUMENTS",
            .ERROR_BAD_PATHNAME => "ERROR_BAD_PATHNAME",
            .ERROR_SIGNAL_PENDING => "ERROR_SIGNAL_PENDING",
            .ERROR_MAX_THRDS_REACHED => "ERROR_MAX_THRDS_REACHED",
            .ERROR_LOCK_FAILED => "ERROR_LOCK_FAILED",
            .ERROR_BUSY => "ERROR_BUSY",
            .ERROR_DEVICE_SUPPORT_IN_PROGRESS => "ERROR_DEVICE_SUPPORT_IN_PROGRESS",
            .ERROR_CANCEL_VIOLATION => "ERROR_CANCEL_VIOLATION",
            .ERROR_ATOMIC_LOCKS_NOT_SUPPORTED => "ERROR_ATOMIC_LOCKS_NOT_SUPPORTED",
            .ERROR_INVALID_SEGMENT_NUMBER => "ERROR_INVALID_SEGMENT_NUMBER",
            .ERROR_INVALID_ORDINAL => "ERROR_INVALID_ORDINAL",
            .ERROR_ALREADY_EXISTS => "ERROR_ALREADY_EXISTS",
            .ERROR_INVALID_FLAG_NUMBER => "ERROR_INVALID_FLAG_NUMBER",
            .ERROR_SEM_NOT_FOUND => "ERROR_SEM_NOT_FOUND",
            .ERROR_INVALID_STARTING_CODESEG => "ERROR_INVALID_STARTING_CODESEG",
            .ERROR_INVALID_STACKSEG => "ERROR_INVALID_STACKSEG",
            .ERROR_INVALID_MODULETYPE => "ERROR_INVALID_MODULETYPE",
            .ERROR_INVALID_EXE_SIGNATURE => "ERROR_INVALID_EXE_SIGNATURE",
            .ERROR_EXE_MARKED_INVALID => "ERROR_EXE_MARKED_INVALID",
            .ERROR_BAD_EXE_FORMAT => "ERROR_BAD_EXE_FORMAT",
            .ERROR_ITERATED_DATA_EXCEEDS_64k => "ERROR_ITERATED_DATA_EXCEEDS_64k",
            .ERROR_INVALID_MINALLOCSIZE => "ERROR_INVALID_MINALLOCSIZE",
            .ERROR_DYNLINK_FROM_INVALID_RING => "ERROR_DYNLINK_FROM_INVALID_RING",
            .ERROR_IOPL_NOT_ENABLED => "ERROR_IOPL_NOT_ENABLED",
            .ERROR_INVALID_SEGDPL => "ERROR_INVALID_SEGDPL",
            .ERROR_AUTODATASEG_EXCEEDS_64k => "ERROR_AUTODATASEG_EXCEEDS_64k",
            .ERROR_RING2SEG_MUST_BE_MOVABLE => "ERROR_RING2SEG_MUST_BE_MOVABLE",
            .ERROR_RELOC_CHAIN_XEEDS_SEGLIM => "ERROR_RELOC_CHAIN_XEEDS_SEGLIM",
            .ERROR_INFLOOP_IN_RELOC_CHAIN => "ERROR_INFLOOP_IN_RELOC_CHAIN",
            .ERROR_ENVVAR_NOT_FOUND => "ERROR_ENVVAR_NOT_FOUND",
            .ERROR_NO_SIGNAL_SENT => "ERROR_NO_SIGNAL_SENT",
            .ERROR_FILENAME_EXCED_RANGE => "ERROR_FILENAME_EXCED_RANGE",
            .ERROR_RING2_STACK_IN_USE => "ERROR_RING2_STACK_IN_USE",
            .ERROR_META_EXPANSION_TOO_LONG => "ERROR_META_EXPANSION_TOO_LONG",
            .ERROR_INVALID_SIGNAL_NUMBER => "ERROR_INVALID_SIGNAL_NUMBER",
            .ERROR_THREAD_1_INACTIVE => "ERROR_THREAD_1_INACTIVE",
            .ERROR_LOCKED => "ERROR_LOCKED",
            .ERROR_TOO_MANY_MODULES => "ERROR_TOO_MANY_MODULES",
            .ERROR_NESTING_NOT_ALLOWED => "ERROR_NESTING_NOT_ALLOWED",
            .ERROR_EXE_MACHINE_TYPE_MISMATCH => "ERROR_EXE_MACHINE_TYPE_MISMATCH",
            .ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY => "ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY",
            .ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY => "ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY",
            .ERROR_FILE_CHECKED_OUT => "ERROR_FILE_CHECKED_OUT",
            .ERROR_CHECKOUT_REQUIRED => "ERROR_CHECKOUT_REQUIRED",
            .ERROR_BAD_FILE_TYPE => "ERROR_BAD_FILE_TYPE",
            .ERROR_FILE_TOO_LARGE => "ERROR_FILE_TOO_LARGE",
            .ERROR_FORMS_AUTH_REQUIRED => "ERROR_FORMS_AUTH_REQUIRED",
            .ERROR_VIRUS_INFECTED => "ERROR_VIRUS_INFECTED",
            .ERROR_VIRUS_DELETED => "ERROR_VIRUS_DELETED",
            .ERROR_PIPE_LOCAL => "ERROR_PIPE_LOCAL",
            .ERROR_BAD_PIPE => "ERROR_BAD_PIPE",
            .ERROR_PIPE_BUSY => "ERROR_PIPE_BUSY",
            .ERROR_NO_DATA => "ERROR_NO_DATA",
            .ERROR_PIPE_NOT_CONNECTED => "ERROR_PIPE_NOT_CONNECTED",
            .ERROR_MORE_DATA => "ERROR_MORE_DATA",
            .ERROR_NO_WORK_DONE => "ERROR_NO_WORK_DONE",
            .ERROR_VC_DISCONNECTED => "ERROR_VC_DISCONNECTED",
            .ERROR_INVALID_EA_NAME => "ERROR_INVALID_EA_NAME",
            .ERROR_EA_LIST_INCONSISTENT => "ERROR_EA_LIST_INCONSISTENT",
            .ERROR_NO_MORE_ITEMS => "ERROR_NO_MORE_ITEMS",
            .ERROR_CANNOT_COPY => "ERROR_CANNOT_COPY",
            .ERROR_DIRECTORY => "ERROR_DIRECTORY",
            .ERROR_EAS_DIDNT_FIT => "ERROR_EAS_DIDNT_FIT",
            .ERROR_EA_FILE_CORRUPT => "ERROR_EA_FILE_CORRUPT",
            .ERROR_EA_TABLE_FULL => "ERROR_EA_TABLE_FULL",
            .ERROR_INVALID_EA_HANDLE => "ERROR_INVALID_EA_HANDLE",
            .ERROR_EAS_NOT_SUPPORTED => "ERROR_EAS_NOT_SUPPORTED",
            .ERROR_NOT_OWNER => "ERROR_NOT_OWNER",
            .ERROR_TOO_MANY_POSTS => "ERROR_TOO_MANY_POSTS",
            .ERROR_PARTIAL_COPY => "ERROR_PARTIAL_COPY",
            .ERROR_OPLOCK_NOT_GRANTED => "ERROR_OPLOCK_NOT_GRANTED",
            .ERROR_INVALID_OPLOCK_PROTOCOL => "ERROR_INVALID_OPLOCK_PROTOCOL",
            .ERROR_DISK_TOO_FRAGMENTED => "ERROR_DISK_TOO_FRAGMENTED",
            .ERROR_DELETE_PENDING => "ERROR_DELETE_PENDING",
            .ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING => "ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING",
            .ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME => "ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME",
            .ERROR_SECURITY_STREAM_IS_INCONSISTENT => "ERROR_SECURITY_STREAM_IS_INCONSISTENT",
            .ERROR_INVALID_LOCK_RANGE => "ERROR_INVALID_LOCK_RANGE",
            .ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT => "ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT",
            .ERROR_NOTIFICATION_GUID_ALREADY_DEFINED => "ERROR_NOTIFICATION_GUID_ALREADY_DEFINED",
            .ERROR_INVALID_EXCEPTION_HANDLER => "ERROR_INVALID_EXCEPTION_HANDLER",
            .ERROR_DUPLICATE_PRIVILEGES => "ERROR_DUPLICATE_PRIVILEGES",
            .ERROR_NO_RANGES_PROCESSED => "ERROR_NO_RANGES_PROCESSED",
            .ERROR_NOT_ALLOWED_ON_SYSTEM_FILE => "ERROR_NOT_ALLOWED_ON_SYSTEM_FILE",
            .ERROR_DISK_RESOURCES_EXHAUSTED => "ERROR_DISK_RESOURCES_EXHAUSTED",
            .ERROR_INVALID_TOKEN => "ERROR_INVALID_TOKEN",
            .ERROR_DEVICE_FEATURE_NOT_SUPPORTED => "ERROR_DEVICE_FEATURE_NOT_SUPPORTED",
            .ERROR_MR_MID_NOT_FOUND => "ERROR_MR_MID_NOT_FOUND",
            .ERROR_SCOPE_NOT_FOUND => "ERROR_SCOPE_NOT_FOUND",
            .ERROR_UNDEFINED_SCOPE => "ERROR_UNDEFINED_SCOPE",
            .ERROR_INVALID_CAP => "ERROR_INVALID_CAP",
            .ERROR_DEVICE_UNREACHABLE => "ERROR_DEVICE_UNREACHABLE",
            .ERROR_DEVICE_NO_RESOURCES => "ERROR_DEVICE_NO_RESOURCES",
            .ERROR_DATA_CHECKSUM_ERROR => "ERROR_DATA_CHECKSUM_ERROR",
            .ERROR_INTERMIXED_KERNEL_EA_OPERATION => "ERROR_INTERMIXED_KERNEL_EA_OPERATION",
            .ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED => "ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED",
            .ERROR_OFFSET_ALIGNMENT_VIOLATION => "ERROR_OFFSET_ALIGNMENT_VIOLATION",
            .ERROR_INVALID_FIELD_IN_PARAMETER_LIST => "ERROR_INVALID_FIELD_IN_PARAMETER_LIST",
            .ERROR_OPERATION_IN_PROGRESS => "ERROR_OPERATION_IN_PROGRESS",
            .ERROR_BAD_DEVICE_PATH => "ERROR_BAD_DEVICE_PATH",
            .ERROR_TOO_MANY_DESCRIPTORS => "ERROR_TOO_MANY_DESCRIPTORS",
            .ERROR_SCRUB_DATA_DISABLED => "ERROR_SCRUB_DATA_DISABLED",
            .ERROR_NOT_REDUNDANT_STORAGE => "ERROR_NOT_REDUNDANT_STORAGE",
            .ERROR_RESIDENT_FILE_NOT_SUPPORTED => "ERROR_RESIDENT_FILE_NOT_SUPPORTED",
            .ERROR_COMPRESSED_FILE_NOT_SUPPORTED => "ERROR_COMPRESSED_FILE_NOT_SUPPORTED",
            .ERROR_DIRECTORY_NOT_SUPPORTED => "ERROR_DIRECTORY_NOT_SUPPORTED",
            .ERROR_NOT_READ_FROM_COPY => "ERROR_NOT_READ_FROM_COPY",
            .ERROR_FT_WRITE_FAILURE => "ERROR_FT_WRITE_FAILURE",
            .ERROR_FT_DI_SCAN_REQUIRED => "ERROR_FT_DI_SCAN_REQUIRED",
            .ERROR_INVALID_KERNEL_INFO_VERSION => "ERROR_INVALID_KERNEL_INFO_VERSION",
            .ERROR_INVALID_PEP_INFO_VERSION => "ERROR_INVALID_PEP_INFO_VERSION",
            .ERROR_OBJECT_NOT_EXTERNALLY_BACKED => "ERROR_OBJECT_NOT_EXTERNALLY_BACKED",
            .ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN => "ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN",
            .ERROR_COMPRESSION_NOT_BENEFICIAL => "ERROR_COMPRESSION_NOT_BENEFICIAL",
            .ERROR_STORAGE_TOPOLOGY_ID_MISMATCH => "ERROR_STORAGE_TOPOLOGY_ID_MISMATCH",
            .ERROR_BLOCKED_BY_PARENTAL_CONTROLS => "ERROR_BLOCKED_BY_PARENTAL_CONTROLS",
            .ERROR_BLOCK_TOO_MANY_REFERENCES => "ERROR_BLOCK_TOO_MANY_REFERENCES",
            .ERROR_MARKED_TO_DISALLOW_WRITES => "ERROR_MARKED_TO_DISALLOW_WRITES",
            .ERROR_ENCLAVE_FAILURE => "ERROR_ENCLAVE_FAILURE",
            .ERROR_FAIL_NOACTION_REBOOT => "ERROR_FAIL_NOACTION_REBOOT",
            .ERROR_FAIL_SHUTDOWN => "ERROR_FAIL_SHUTDOWN",
            .ERROR_FAIL_RESTART => "ERROR_FAIL_RESTART",
            .ERROR_MAX_SESSIONS_REACHED => "ERROR_MAX_SESSIONS_REACHED",
            .ERROR_NETWORK_ACCESS_DENIED_EDP => "ERROR_NETWORK_ACCESS_DENIED_EDP",
            .ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL => "ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL",
            .ERROR_EDP_POLICY_DENIES_OPERATION => "ERROR_EDP_POLICY_DENIES_OPERATION",
            .ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED => "ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED",
            .ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT => "ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT",
            .ERROR_DEVICE_IN_MAINTENANCE => "ERROR_DEVICE_IN_MAINTENANCE",
            .ERROR_NOT_SUPPORTED_ON_DAX => "ERROR_NOT_SUPPORTED_ON_DAX",
            .ERROR_DAX_MAPPING_EXISTS => "ERROR_DAX_MAPPING_EXISTS",
            .ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING => "ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING",
            .ERROR_CLOUD_FILE_METADATA_CORRUPT => "ERROR_CLOUD_FILE_METADATA_CORRUPT",
            .ERROR_CLOUD_FILE_METADATA_TOO_LARGE => "ERROR_CLOUD_FILE_METADATA_TOO_LARGE",
            .ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE => "ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE",
            .ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH => "ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH",
            .ERROR_CHILD_PROCESS_BLOCKED => "ERROR_CHILD_PROCESS_BLOCKED",
            .ERROR_STORAGE_LOST_DATA_PERSISTENCE => "ERROR_STORAGE_LOST_DATA_PERSISTENCE",
            .ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE => "ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE",
            .ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT => "ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT",
            .ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY => "ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY",
            .ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN => "ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN",
            .ERROR_GDI_HANDLE_LEAK => "ERROR_GDI_HANDLE_LEAK",
            .ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS => "ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS",
            .ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED => "ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED",
            .ERROR_NOT_A_CLOUD_FILE => "ERROR_NOT_A_CLOUD_FILE",
            .ERROR_CLOUD_FILE_NOT_IN_SYNC => "ERROR_CLOUD_FILE_NOT_IN_SYNC",
            .ERROR_CLOUD_FILE_ALREADY_CONNECTED => "ERROR_CLOUD_FILE_ALREADY_CONNECTED",
            .ERROR_CLOUD_FILE_NOT_SUPPORTED => "ERROR_CLOUD_FILE_NOT_SUPPORTED",
            .ERROR_CLOUD_FILE_INVALID_REQUEST => "ERROR_CLOUD_FILE_INVALID_REQUEST",
            .ERROR_CLOUD_FILE_READ_ONLY_VOLUME => "ERROR_CLOUD_FILE_READ_ONLY_VOLUME",
            .ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY => "ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY",
            .ERROR_CLOUD_FILE_VALIDATION_FAILED => "ERROR_CLOUD_FILE_VALIDATION_FAILED",
            .ERROR_SMB1_NOT_AVAILABLE => "ERROR_SMB1_NOT_AVAILABLE",
            .ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION => "ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION",
            .ERROR_CLOUD_FILE_AUTHENTICATION_FAILED => "ERROR_CLOUD_FILE_AUTHENTICATION_FAILED",
            .ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES => "ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES",
            .ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE => "ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE",
            .ERROR_CLOUD_FILE_UNSUCCESSFUL => "ERROR_CLOUD_FILE_UNSUCCESSFUL",
            .ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT => "ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT",
            .ERROR_CLOUD_FILE_IN_USE => "ERROR_CLOUD_FILE_IN_USE",
            .ERROR_CLOUD_FILE_PINNED => "ERROR_CLOUD_FILE_PINNED",
            .ERROR_CLOUD_FILE_REQUEST_ABORTED => "ERROR_CLOUD_FILE_REQUEST_ABORTED",
            .ERROR_CLOUD_FILE_PROPERTY_CORRUPT => "ERROR_CLOUD_FILE_PROPERTY_CORRUPT",
            .ERROR_CLOUD_FILE_ACCESS_DENIED => "ERROR_CLOUD_FILE_ACCESS_DENIED",
            .ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS => "ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS",
            .ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT => "ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT",
            .ERROR_CLOUD_FILE_REQUEST_CANCELED => "ERROR_CLOUD_FILE_REQUEST_CANCELED",
            .ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED => "ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED",
            .ERROR_THREAD_MODE_ALREADY_BACKGROUND => "ERROR_THREAD_MODE_ALREADY_BACKGROUND",
            .ERROR_THREAD_MODE_NOT_BACKGROUND => "ERROR_THREAD_MODE_NOT_BACKGROUND",
            .ERROR_PROCESS_MODE_ALREADY_BACKGROUND => "ERROR_PROCESS_MODE_ALREADY_BACKGROUND",
            .ERROR_PROCESS_MODE_NOT_BACKGROUND => "ERROR_PROCESS_MODE_NOT_BACKGROUND",
            .ERROR_CLOUD_FILE_PROVIDER_TERMINATED => "ERROR_CLOUD_FILE_PROVIDER_TERMINATED",
            .ERROR_NOT_A_CLOUD_SYNC_ROOT => "ERROR_NOT_A_CLOUD_SYNC_ROOT",
            .ERROR_FILE_PROTECTED_UNDER_DPL => "ERROR_FILE_PROTECTED_UNDER_DPL",
            .ERROR_VOLUME_NOT_CLUSTER_ALIGNED => "ERROR_VOLUME_NOT_CLUSTER_ALIGNED",
            .ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND => "ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND",
            .ERROR_APPX_FILE_NOT_ENCRYPTED => "ERROR_APPX_FILE_NOT_ENCRYPTED",
            .ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED => "ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED",
            .ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET => "ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET",
            .ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE => "ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE",
            .ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER => "ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER",
            .ERROR_LINUX_SUBSYSTEM_NOT_PRESENT => "ERROR_LINUX_SUBSYSTEM_NOT_PRESENT",
            .ERROR_FT_READ_FAILURE => "ERROR_FT_READ_FAILURE",
            .ERROR_STORAGE_RESERVE_ID_INVALID => "ERROR_STORAGE_RESERVE_ID_INVALID",
            .ERROR_STORAGE_RESERVE_DOES_NOT_EXIST => "ERROR_STORAGE_RESERVE_DOES_NOT_EXIST",
            .ERROR_STORAGE_RESERVE_ALREADY_EXISTS => "ERROR_STORAGE_RESERVE_ALREADY_EXISTS",
            .ERROR_STORAGE_RESERVE_NOT_EMPTY => "ERROR_STORAGE_RESERVE_NOT_EMPTY",
            .ERROR_NOT_A_DAX_VOLUME => "ERROR_NOT_A_DAX_VOLUME",
            .ERROR_NOT_DAX_MAPPABLE => "ERROR_NOT_DAX_MAPPABLE",
            .ERROR_TIME_SENSITIVE_THREAD => "ERROR_TIME_SENSITIVE_THREAD",
            .ERROR_DPL_NOT_SUPPORTED_FOR_USER => "ERROR_DPL_NOT_SUPPORTED_FOR_USER",
            .ERROR_CASE_DIFFERING_NAMES_IN_DIR => "ERROR_CASE_DIFFERING_NAMES_IN_DIR",
            .ERROR_FILE_NOT_SUPPORTED => "ERROR_FILE_NOT_SUPPORTED",
            .ERROR_CLOUD_FILE_REQUEST_TIMEOUT => "ERROR_CLOUD_FILE_REQUEST_TIMEOUT",
            .ERROR_NO_TASK_QUEUE => "ERROR_NO_TASK_QUEUE",
            .ERROR_SRC_SRV_DLL_LOAD_FAILED => "ERROR_SRC_SRV_DLL_LOAD_FAILED",
            .ERROR_NOT_SUPPORTED_WITH_BTT => "ERROR_NOT_SUPPORTED_WITH_BTT",
            .ERROR_ENCRYPTION_DISABLED => "ERROR_ENCRYPTION_DISABLED",
            .ERROR_ENCRYPTING_METADATA_DISALLOWED => "ERROR_ENCRYPTING_METADATA_DISALLOWED",
            .ERROR_CANT_CLEAR_ENCRYPTION_FLAG => "ERROR_CANT_CLEAR_ENCRYPTION_FLAG",
            .ERROR_NO_SUCH_DEVICE => "ERROR_NO_SUCH_DEVICE",
            .ERROR_CLOUD_FILE_DEHYDRATION_DISALLOWED => "ERROR_CLOUD_FILE_DEHYDRATION_DISALLOWED",
            .ERROR_FILE_SNAP_IN_PROGRESS => "ERROR_FILE_SNAP_IN_PROGRESS",
            .ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED => "ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED",
            .ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED => "ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED",
            .ERROR_FILE_SNAP_IO_NOT_COORDINATED => "ERROR_FILE_SNAP_IO_NOT_COORDINATED",
            .ERROR_FILE_SNAP_UNEXPECTED_ERROR => "ERROR_FILE_SNAP_UNEXPECTED_ERROR",
            .ERROR_FILE_SNAP_INVALID_PARAMETER => "ERROR_FILE_SNAP_INVALID_PARAMETER",
            .ERROR_UNSATISFIED_DEPENDENCIES => "ERROR_UNSATISFIED_DEPENDENCIES",
            .ERROR_CASE_SENSITIVE_PATH => "ERROR_CASE_SENSITIVE_PATH",
            .ERROR_UNEXPECTED_NTCACHEMANAGER_ERROR => "ERROR_UNEXPECTED_NTCACHEMANAGER_ERROR",
            .ERROR_LINUX_SUBSYSTEM_UPDATE_REQUIRED => "ERROR_LINUX_SUBSYSTEM_UPDATE_REQUIRED",
            .ERROR_DLP_POLICY_WARNS_AGAINST_OPERATION => "ERROR_DLP_POLICY_WARNS_AGAINST_OPERATION",
            .ERROR_DLP_POLICY_DENIES_OPERATION => "ERROR_DLP_POLICY_DENIES_OPERATION",
            .ERROR_SECURITY_DENIES_OPERATION => "ERROR_SECURITY_DENIES_OPERATION",
            .ERROR_UNTRUSTED_MOUNT_POINT => "ERROR_UNTRUSTED_MOUNT_POINT",
            .ERROR_DLP_POLICY_SILENTLY_FAIL => "ERROR_DLP_POLICY_SILENTLY_FAIL",
            .ERROR_CAPAUTHZ_NOT_DEVUNLOCKED => "ERROR_CAPAUTHZ_NOT_DEVUNLOCKED",
            .ERROR_CAPAUTHZ_CHANGE_TYPE => "ERROR_CAPAUTHZ_CHANGE_TYPE",
            .ERROR_CAPAUTHZ_NOT_PROVISIONED => "ERROR_CAPAUTHZ_NOT_PROVISIONED",
            .ERROR_CAPAUTHZ_NOT_AUTHORIZED => "ERROR_CAPAUTHZ_NOT_AUTHORIZED",
            .ERROR_CAPAUTHZ_NO_POLICY => "ERROR_CAPAUTHZ_NO_POLICY",
            .ERROR_CAPAUTHZ_DB_CORRUPTED => "ERROR_CAPAUTHZ_DB_CORRUPTED",
            .ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG => "ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG",
            .ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY => "ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY",
            .ERROR_CAPAUTHZ_SCCD_PARSE_ERROR => "ERROR_CAPAUTHZ_SCCD_PARSE_ERROR",
            .ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED => "ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED",
            .ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH => "ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH",
            .ERROR_CIMFS_IMAGE_CORRUPT => "ERROR_CIMFS_IMAGE_CORRUPT",
            .ERROR_CIMFS_IMAGE_VERSION_NOT_SUPPORTED => "ERROR_CIMFS_IMAGE_VERSION_NOT_SUPPORTED",
            .ERROR_STORAGE_STACK_ACCESS_DENIED => "ERROR_STORAGE_STACK_ACCESS_DENIED",
            .ERROR_INSUFFICIENT_VIRTUAL_ADDR_RESOURCES => "ERROR_INSUFFICIENT_VIRTUAL_ADDR_RESOURCES",
            .ERROR_INDEX_OUT_OF_BOUNDS => "ERROR_INDEX_OUT_OF_BOUNDS",
            .ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT => "ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT",
            .ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT => "ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT",
            .ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT => "ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT",
            .ERROR_DEVICE_HARDWARE_ERROR => "ERROR_DEVICE_HARDWARE_ERROR",
            .ERROR_INVALID_ADDRESS => "ERROR_INVALID_ADDRESS",
            .ERROR_HAS_SYSTEM_CRITICAL_FILES => "ERROR_HAS_SYSTEM_CRITICAL_FILES",
            .ERROR_ENCRYPTED_FILE_NOT_SUPPORTED => "ERROR_ENCRYPTED_FILE_NOT_SUPPORTED",
            .ERROR_SPARSE_FILE_NOT_SUPPORTED => "ERROR_SPARSE_FILE_NOT_SUPPORTED",
            .ERROR_PAGEFILE_NOT_SUPPORTED => "ERROR_PAGEFILE_NOT_SUPPORTED",
            .ERROR_VOLUME_NOT_SUPPORTED => "ERROR_VOLUME_NOT_SUPPORTED",
            .ERROR_NOT_SUPPORTED_WITH_BYPASSIO => "ERROR_NOT_SUPPORTED_WITH_BYPASSIO",
            .ERROR_NO_BYPASSIO_DRIVER_SUPPORT => "ERROR_NO_BYPASSIO_DRIVER_SUPPORT",
            .ERROR_NOT_SUPPORTED_WITH_ENCRYPTION => "ERROR_NOT_SUPPORTED_WITH_ENCRYPTION",
            .ERROR_NOT_SUPPORTED_WITH_COMPRESSION => "ERROR_NOT_SUPPORTED_WITH_COMPRESSION",
            .ERROR_NOT_SUPPORTED_WITH_REPLICATION => "ERROR_NOT_SUPPORTED_WITH_REPLICATION",
            .ERROR_NOT_SUPPORTED_WITH_DEDUPLICATION => "ERROR_NOT_SUPPORTED_WITH_DEDUPLICATION",
            .ERROR_NOT_SUPPORTED_WITH_AUDITING => "ERROR_NOT_SUPPORTED_WITH_AUDITING",
            .ERROR_USER_PROFILE_LOAD => "ERROR_USER_PROFILE_LOAD",
            .ERROR_SESSION_KEY_TOO_SHORT => "ERROR_SESSION_KEY_TOO_SHORT",
            .ERROR_ACCESS_DENIED_APPDATA => "ERROR_ACCESS_DENIED_APPDATA",
            .ERROR_NOT_SUPPORTED_WITH_MONITORING => "ERROR_NOT_SUPPORTED_WITH_MONITORING",
            .ERROR_NOT_SUPPORTED_WITH_SNAPSHOT => "ERROR_NOT_SUPPORTED_WITH_SNAPSHOT",
            .ERROR_NOT_SUPPORTED_WITH_VIRTUALIZATION => "ERROR_NOT_SUPPORTED_WITH_VIRTUALIZATION",
            .ERROR_BYPASSIO_FLT_NOT_SUPPORTED => "ERROR_BYPASSIO_FLT_NOT_SUPPORTED",
            .ERROR_DEVICE_RESET_REQUIRED => "ERROR_DEVICE_RESET_REQUIRED",
            .ERROR_VOLUME_WRITE_ACCESS_DENIED => "ERROR_VOLUME_WRITE_ACCESS_DENIED",
            .ERROR_ARITHMETIC_OVERFLOW => "ERROR_ARITHMETIC_OVERFLOW",
            .ERROR_PIPE_CONNECTED => "ERROR_PIPE_CONNECTED",
            .ERROR_PIPE_LISTENING => "ERROR_PIPE_LISTENING",
            .ERROR_VERIFIER_STOP => "ERROR_VERIFIER_STOP",
            .ERROR_ABIOS_ERROR => "ERROR_ABIOS_ERROR",
            .ERROR_WX86_WARNING => "ERROR_WX86_WARNING",
            .ERROR_WX86_ERROR => "ERROR_WX86_ERROR",
            .ERROR_TIMER_NOT_CANCELED => "ERROR_TIMER_NOT_CANCELED",
            .ERROR_UNWIND => "ERROR_UNWIND",
            .ERROR_BAD_STACK => "ERROR_BAD_STACK",
            .ERROR_INVALID_UNWIND_TARGET => "ERROR_INVALID_UNWIND_TARGET",
            .ERROR_INVALID_PORT_ATTRIBUTES => "ERROR_INVALID_PORT_ATTRIBUTES",
            .ERROR_PORT_MESSAGE_TOO_LONG => "ERROR_PORT_MESSAGE_TOO_LONG",
            .ERROR_INVALID_QUOTA_LOWER => "ERROR_INVALID_QUOTA_LOWER",
            .ERROR_DEVICE_ALREADY_ATTACHED => "ERROR_DEVICE_ALREADY_ATTACHED",
            .ERROR_INSTRUCTION_MISALIGNMENT => "ERROR_INSTRUCTION_MISALIGNMENT",
            .ERROR_PROFILING_NOT_STARTED => "ERROR_PROFILING_NOT_STARTED",
            .ERROR_PROFILING_NOT_STOPPED => "ERROR_PROFILING_NOT_STOPPED",
            .ERROR_COULD_NOT_INTERPRET => "ERROR_COULD_NOT_INTERPRET",
            .ERROR_PROFILING_AT_LIMIT => "ERROR_PROFILING_AT_LIMIT",
            .ERROR_CANT_WAIT => "ERROR_CANT_WAIT",
            .ERROR_CANT_TERMINATE_SELF => "ERROR_CANT_TERMINATE_SELF",
            .ERROR_UNEXPECTED_MM_CREATE_ERR => "ERROR_UNEXPECTED_MM_CREATE_ERR",
            .ERROR_UNEXPECTED_MM_MAP_ERROR => "ERROR_UNEXPECTED_MM_MAP_ERROR",
            .ERROR_UNEXPECTED_MM_EXTEND_ERR => "ERROR_UNEXPECTED_MM_EXTEND_ERR",
            .ERROR_BAD_FUNCTION_TABLE => "ERROR_BAD_FUNCTION_TABLE",
            .ERROR_NO_GUID_TRANSLATION => "ERROR_NO_GUID_TRANSLATION",
            .ERROR_INVALID_LDT_SIZE => "ERROR_INVALID_LDT_SIZE",
            .ERROR_INVALID_LDT_OFFSET => "ERROR_INVALID_LDT_OFFSET",
            .ERROR_INVALID_LDT_DESCRIPTOR => "ERROR_INVALID_LDT_DESCRIPTOR",
            .ERROR_TOO_MANY_THREADS => "ERROR_TOO_MANY_THREADS",
            .ERROR_THREAD_NOT_IN_PROCESS => "ERROR_THREAD_NOT_IN_PROCESS",
            .ERROR_PAGEFILE_QUOTA_EXCEEDED => "ERROR_PAGEFILE_QUOTA_EXCEEDED",
            .ERROR_LOGON_SERVER_CONFLICT => "ERROR_LOGON_SERVER_CONFLICT",
            .ERROR_SYNCHRONIZATION_REQUIRED => "ERROR_SYNCHRONIZATION_REQUIRED",
            .ERROR_NET_OPEN_FAILED => "ERROR_NET_OPEN_FAILED",
            .ERROR_IO_PRIVILEGE_FAILED => "ERROR_IO_PRIVILEGE_FAILED",
            .ERROR_CONTROL_C_EXIT => "ERROR_CONTROL_C_EXIT",
            .ERROR_MISSING_SYSTEMFILE => "ERROR_MISSING_SYSTEMFILE",
            .ERROR_UNHANDLED_EXCEPTION => "ERROR_UNHANDLED_EXCEPTION",
            .ERROR_APP_INIT_FAILURE => "ERROR_APP_INIT_FAILURE",
            .ERROR_PAGEFILE_CREATE_FAILED => "ERROR_PAGEFILE_CREATE_FAILED",
            .ERROR_INVALID_IMAGE_HASH => "ERROR_INVALID_IMAGE_HASH",
            .ERROR_NO_PAGEFILE => "ERROR_NO_PAGEFILE",
            .ERROR_ILLEGAL_FLOAT_CONTEXT => "ERROR_ILLEGAL_FLOAT_CONTEXT",
            .ERROR_NO_EVENT_PAIR => "ERROR_NO_EVENT_PAIR",
            .ERROR_DOMAIN_CTRLR_CONFIG_ERROR => "ERROR_DOMAIN_CTRLR_CONFIG_ERROR",
            .ERROR_ILLEGAL_CHARACTER => "ERROR_ILLEGAL_CHARACTER",
            .ERROR_UNDEFINED_CHARACTER => "ERROR_UNDEFINED_CHARACTER",
            .ERROR_FLOPPY_VOLUME => "ERROR_FLOPPY_VOLUME",
            .ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT => "ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT",
            .ERROR_BACKUP_CONTROLLER => "ERROR_BACKUP_CONTROLLER",
            .ERROR_MUTANT_LIMIT_EXCEEDED => "ERROR_MUTANT_LIMIT_EXCEEDED",
            .ERROR_FS_DRIVER_REQUIRED => "ERROR_FS_DRIVER_REQUIRED",
            .ERROR_CANNOT_LOAD_REGISTRY_FILE => "ERROR_CANNOT_LOAD_REGISTRY_FILE",
            .ERROR_DEBUG_ATTACH_FAILED => "ERROR_DEBUG_ATTACH_FAILED",
            .ERROR_SYSTEM_PROCESS_TERMINATED => "ERROR_SYSTEM_PROCESS_TERMINATED",
            .ERROR_DATA_NOT_ACCEPTED => "ERROR_DATA_NOT_ACCEPTED",
            .ERROR_VDM_HARD_ERROR => "ERROR_VDM_HARD_ERROR",
            .ERROR_DRIVER_CANCEL_TIMEOUT => "ERROR_DRIVER_CANCEL_TIMEOUT",
            .ERROR_REPLY_MESSAGE_MISMATCH => "ERROR_REPLY_MESSAGE_MISMATCH",
            .ERROR_LOST_WRITEBEHIND_DATA => "ERROR_LOST_WRITEBEHIND_DATA",
            .ERROR_CLIENT_SERVER_PARAMETERS_INVALID => "ERROR_CLIENT_SERVER_PARAMETERS_INVALID",
            .ERROR_NOT_TINY_STREAM => "ERROR_NOT_TINY_STREAM",
            .ERROR_STACK_OVERFLOW_READ => "ERROR_STACK_OVERFLOW_READ",
            .ERROR_CONVERT_TO_LARGE => "ERROR_CONVERT_TO_LARGE",
            .ERROR_FOUND_OUT_OF_SCOPE => "ERROR_FOUND_OUT_OF_SCOPE",
            .ERROR_ALLOCATE_BUCKET => "ERROR_ALLOCATE_BUCKET",
            .ERROR_MARSHALL_OVERFLOW => "ERROR_MARSHALL_OVERFLOW",
            .ERROR_INVALID_VARIANT => "ERROR_INVALID_VARIANT",
            .ERROR_BAD_COMPRESSION_BUFFER => "ERROR_BAD_COMPRESSION_BUFFER",
            .ERROR_AUDIT_FAILED => "ERROR_AUDIT_FAILED",
            .ERROR_TIMER_RESOLUTION_NOT_SET => "ERROR_TIMER_RESOLUTION_NOT_SET",
            .ERROR_INSUFFICIENT_LOGON_INFO => "ERROR_INSUFFICIENT_LOGON_INFO",
            .ERROR_BAD_DLL_ENTRYPOINT => "ERROR_BAD_DLL_ENTRYPOINT",
            .ERROR_BAD_SERVICE_ENTRYPOINT => "ERROR_BAD_SERVICE_ENTRYPOINT",
            .ERROR_IP_ADDRESS_CONFLICT1 => "ERROR_IP_ADDRESS_CONFLICT1",
            .ERROR_IP_ADDRESS_CONFLICT2 => "ERROR_IP_ADDRESS_CONFLICT2",
            .ERROR_REGISTRY_QUOTA_LIMIT => "ERROR_REGISTRY_QUOTA_LIMIT",
            .ERROR_NO_CALLBACK_ACTIVE => "ERROR_NO_CALLBACK_ACTIVE",
            .ERROR_PWD_TOO_SHORT => "ERROR_PWD_TOO_SHORT",
            .ERROR_PWD_TOO_RECENT => "ERROR_PWD_TOO_RECENT",
            .ERROR_PWD_HISTORY_CONFLICT => "ERROR_PWD_HISTORY_CONFLICT",
            .ERROR_UNSUPPORTED_COMPRESSION => "ERROR_UNSUPPORTED_COMPRESSION",
            .ERROR_INVALID_HW_PROFILE => "ERROR_INVALID_HW_PROFILE",
            .ERROR_INVALID_PLUGPLAY_DEVICE_PATH => "ERROR_INVALID_PLUGPLAY_DEVICE_PATH",
            .ERROR_QUOTA_LIST_INCONSISTENT => "ERROR_QUOTA_LIST_INCONSISTENT",
            .ERROR_EVALUATION_EXPIRATION => "ERROR_EVALUATION_EXPIRATION",
            .ERROR_ILLEGAL_DLL_RELOCATION => "ERROR_ILLEGAL_DLL_RELOCATION",
            .ERROR_DLL_INIT_FAILED_LOGOFF => "ERROR_DLL_INIT_FAILED_LOGOFF",
            .ERROR_VALIDATE_CONTINUE => "ERROR_VALIDATE_CONTINUE",
            .ERROR_NO_MORE_MATCHES => "ERROR_NO_MORE_MATCHES",
            .ERROR_RANGE_LIST_CONFLICT => "ERROR_RANGE_LIST_CONFLICT",
            .ERROR_SERVER_SID_MISMATCH => "ERROR_SERVER_SID_MISMATCH",
            .ERROR_CANT_ENABLE_DENY_ONLY => "ERROR_CANT_ENABLE_DENY_ONLY",
            .ERROR_FLOAT_MULTIPLE_FAULTS => "ERROR_FLOAT_MULTIPLE_FAULTS",
            .ERROR_FLOAT_MULTIPLE_TRAPS => "ERROR_FLOAT_MULTIPLE_TRAPS",
            .ERROR_NOINTERFACE => "ERROR_NOINTERFACE",
            .ERROR_DRIVER_FAILED_SLEEP => "ERROR_DRIVER_FAILED_SLEEP",
            .ERROR_CORRUPT_SYSTEM_FILE => "ERROR_CORRUPT_SYSTEM_FILE",
            .ERROR_COMMITMENT_MINIMUM => "ERROR_COMMITMENT_MINIMUM",
            .ERROR_PNP_RESTART_ENUMERATION => "ERROR_PNP_RESTART_ENUMERATION",
            .ERROR_SYSTEM_IMAGE_BAD_SIGNATURE => "ERROR_SYSTEM_IMAGE_BAD_SIGNATURE",
            .ERROR_PNP_REBOOT_REQUIRED => "ERROR_PNP_REBOOT_REQUIRED",
            .ERROR_INSUFFICIENT_POWER => "ERROR_INSUFFICIENT_POWER",
            .ERROR_MULTIPLE_FAULT_VIOLATION => "ERROR_MULTIPLE_FAULT_VIOLATION",
            .ERROR_SYSTEM_SHUTDOWN => "ERROR_SYSTEM_SHUTDOWN",
            .ERROR_PORT_NOT_SET => "ERROR_PORT_NOT_SET",
            .ERROR_DS_VERSION_CHECK_FAILURE => "ERROR_DS_VERSION_CHECK_FAILURE",
            .ERROR_RANGE_NOT_FOUND => "ERROR_RANGE_NOT_FOUND",
            .ERROR_NOT_SAFE_MODE_DRIVER => "ERROR_NOT_SAFE_MODE_DRIVER",
            .ERROR_FAILED_DRIVER_ENTRY => "ERROR_FAILED_DRIVER_ENTRY",
            .ERROR_DEVICE_ENUMERATION_ERROR => "ERROR_DEVICE_ENUMERATION_ERROR",
            .ERROR_MOUNT_POINT_NOT_RESOLVED => "ERROR_MOUNT_POINT_NOT_RESOLVED",
            .ERROR_INVALID_DEVICE_OBJECT_PARAMETER => "ERROR_INVALID_DEVICE_OBJECT_PARAMETER",
            .ERROR_MCA_OCCURED => "ERROR_MCA_OCCURED",
            .ERROR_DRIVER_DATABASE_ERROR => "ERROR_DRIVER_DATABASE_ERROR",
            .ERROR_SYSTEM_HIVE_TOO_LARGE => "ERROR_SYSTEM_HIVE_TOO_LARGE",
            .ERROR_DRIVER_FAILED_PRIOR_UNLOAD => "ERROR_DRIVER_FAILED_PRIOR_UNLOAD",
            .ERROR_VOLSNAP_PREPARE_HIBERNATE => "ERROR_VOLSNAP_PREPARE_HIBERNATE",
            .ERROR_HIBERNATION_FAILURE => "ERROR_HIBERNATION_FAILURE",
            .ERROR_PWD_TOO_LONG => "ERROR_PWD_TOO_LONG",
            .ERROR_FILE_SYSTEM_LIMITATION => "ERROR_FILE_SYSTEM_LIMITATION",
            .ERROR_ASSERTION_FAILURE => "ERROR_ASSERTION_FAILURE",
            .ERROR_ACPI_ERROR => "ERROR_ACPI_ERROR",
            .ERROR_WOW_ASSERTION => "ERROR_WOW_ASSERTION",
            .ERROR_PNP_BAD_MPS_TABLE => "ERROR_PNP_BAD_MPS_TABLE",
            .ERROR_PNP_TRANSLATION_FAILED => "ERROR_PNP_TRANSLATION_FAILED",
            .ERROR_PNP_IRQ_TRANSLATION_FAILED => "ERROR_PNP_IRQ_TRANSLATION_FAILED",
            .ERROR_PNP_INVALID_ID => "ERROR_PNP_INVALID_ID",
            .ERROR_WAKE_SYSTEM_DEBUGGER => "ERROR_WAKE_SYSTEM_DEBUGGER",
            .ERROR_HANDLES_CLOSED => "ERROR_HANDLES_CLOSED",
            .ERROR_EXTRANEOUS_INFORMATION => "ERROR_EXTRANEOUS_INFORMATION",
            .ERROR_RXACT_COMMIT_NECESSARY => "ERROR_RXACT_COMMIT_NECESSARY",
            .ERROR_MEDIA_CHECK => "ERROR_MEDIA_CHECK",
            .ERROR_GUID_SUBSTITUTION_MADE => "ERROR_GUID_SUBSTITUTION_MADE",
            .ERROR_STOPPED_ON_SYMLINK => "ERROR_STOPPED_ON_SYMLINK",
            .ERROR_LONGJUMP => "ERROR_LONGJUMP",
            .ERROR_PLUGPLAY_QUERY_VETOED => "ERROR_PLUGPLAY_QUERY_VETOED",
            .ERROR_UNWIND_CONSOLIDATE => "ERROR_UNWIND_CONSOLIDATE",
            .ERROR_REGISTRY_HIVE_RECOVERED => "ERROR_REGISTRY_HIVE_RECOVERED",
            .ERROR_DLL_MIGHT_BE_INSECURE => "ERROR_DLL_MIGHT_BE_INSECURE",
            .ERROR_DLL_MIGHT_BE_INCOMPATIBLE => "ERROR_DLL_MIGHT_BE_INCOMPATIBLE",
            .ERROR_DBG_EXCEPTION_NOT_HANDLED => "ERROR_DBG_EXCEPTION_NOT_HANDLED",
            .ERROR_DBG_REPLY_LATER => "ERROR_DBG_REPLY_LATER",
            .ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE => "ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE",
            .ERROR_DBG_TERMINATE_THREAD => "ERROR_DBG_TERMINATE_THREAD",
            .ERROR_DBG_TERMINATE_PROCESS => "ERROR_DBG_TERMINATE_PROCESS",
            .ERROR_DBG_CONTROL_C => "ERROR_DBG_CONTROL_C",
            .ERROR_DBG_PRINTEXCEPTION_C => "ERROR_DBG_PRINTEXCEPTION_C",
            .ERROR_DBG_RIPEXCEPTION => "ERROR_DBG_RIPEXCEPTION",
            .ERROR_DBG_CONTROL_BREAK => "ERROR_DBG_CONTROL_BREAK",
            .ERROR_DBG_COMMAND_EXCEPTION => "ERROR_DBG_COMMAND_EXCEPTION",
            .ERROR_OBJECT_NAME_EXISTS => "ERROR_OBJECT_NAME_EXISTS",
            .ERROR_THREAD_WAS_SUSPENDED => "ERROR_THREAD_WAS_SUSPENDED",
            .ERROR_IMAGE_NOT_AT_BASE => "ERROR_IMAGE_NOT_AT_BASE",
            .ERROR_RXACT_STATE_CREATED => "ERROR_RXACT_STATE_CREATED",
            .ERROR_SEGMENT_NOTIFICATION => "ERROR_SEGMENT_NOTIFICATION",
            .ERROR_BAD_CURRENT_DIRECTORY => "ERROR_BAD_CURRENT_DIRECTORY",
            .ERROR_FT_READ_RECOVERY_FROM_BACKUP => "ERROR_FT_READ_RECOVERY_FROM_BACKUP",
            .ERROR_FT_WRITE_RECOVERY => "ERROR_FT_WRITE_RECOVERY",
            .ERROR_IMAGE_MACHINE_TYPE_MISMATCH => "ERROR_IMAGE_MACHINE_TYPE_MISMATCH",
            .ERROR_RECEIVE_PARTIAL => "ERROR_RECEIVE_PARTIAL",
            .ERROR_RECEIVE_EXPEDITED => "ERROR_RECEIVE_EXPEDITED",
            .ERROR_RECEIVE_PARTIAL_EXPEDITED => "ERROR_RECEIVE_PARTIAL_EXPEDITED",
            .ERROR_EVENT_DONE => "ERROR_EVENT_DONE",
            .ERROR_EVENT_PENDING => "ERROR_EVENT_PENDING",
            .ERROR_CHECKING_FILE_SYSTEM => "ERROR_CHECKING_FILE_SYSTEM",
            .ERROR_FATAL_APP_EXIT => "ERROR_FATAL_APP_EXIT",
            .ERROR_PREDEFINED_HANDLE => "ERROR_PREDEFINED_HANDLE",
            .ERROR_WAS_UNLOCKED => "ERROR_WAS_UNLOCKED",
            .ERROR_SERVICE_NOTIFICATION => "ERROR_SERVICE_NOTIFICATION",
            .ERROR_WAS_LOCKED => "ERROR_WAS_LOCKED",
            .ERROR_LOG_HARD_ERROR => "ERROR_LOG_HARD_ERROR",
            .ERROR_ALREADY_WIN32 => "ERROR_ALREADY_WIN32",
            .ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE => "ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE",
            .ERROR_NO_YIELD_PERFORMED => "ERROR_NO_YIELD_PERFORMED",
            .ERROR_TIMER_RESUME_IGNORED => "ERROR_TIMER_RESUME_IGNORED",
            .ERROR_ARBITRATION_UNHANDLED => "ERROR_ARBITRATION_UNHANDLED",
            .ERROR_CARDBUS_NOT_SUPPORTED => "ERROR_CARDBUS_NOT_SUPPORTED",
            .ERROR_MP_PROCESSOR_MISMATCH => "ERROR_MP_PROCESSOR_MISMATCH",
            .ERROR_HIBERNATED => "ERROR_HIBERNATED",
            .ERROR_RESUME_HIBERNATION => "ERROR_RESUME_HIBERNATION",
            .ERROR_FIRMWARE_UPDATED => "ERROR_FIRMWARE_UPDATED",
            .ERROR_DRIVERS_LEAKING_LOCKED_PAGES => "ERROR_DRIVERS_LEAKING_LOCKED_PAGES",
            .ERROR_WAKE_SYSTEM => "ERROR_WAKE_SYSTEM",
            .ERROR_WAIT_1 => "ERROR_WAIT_1",
            .ERROR_WAIT_2 => "ERROR_WAIT_2",
            .ERROR_WAIT_3 => "ERROR_WAIT_3",
            .ERROR_WAIT_63 => "ERROR_WAIT_63",
            .ERROR_ABANDONED_WAIT_0 => "ERROR_ABANDONED_WAIT_0",
            .ERROR_ABANDONED_WAIT_63 => "ERROR_ABANDONED_WAIT_63",
            .ERROR_USER_APC => "ERROR_USER_APC",
            .ERROR_KERNEL_APC => "ERROR_KERNEL_APC",
            .ERROR_ALERTED => "ERROR_ALERTED",
            .ERROR_ELEVATION_REQUIRED => "ERROR_ELEVATION_REQUIRED",
            .ERROR_REPARSE => "ERROR_REPARSE",
            .ERROR_OPLOCK_BREAK_IN_PROGRESS => "ERROR_OPLOCK_BREAK_IN_PROGRESS",
            .ERROR_VOLUME_MOUNTED => "ERROR_VOLUME_MOUNTED",
            .ERROR_RXACT_COMMITTED => "ERROR_RXACT_COMMITTED",
            .ERROR_NOTIFY_CLEANUP => "ERROR_NOTIFY_CLEANUP",
            .ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED => "ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED",
            .ERROR_PAGE_FAULT_TRANSITION => "ERROR_PAGE_FAULT_TRANSITION",
            .ERROR_PAGE_FAULT_DEMAND_ZERO => "ERROR_PAGE_FAULT_DEMAND_ZERO",
            .ERROR_PAGE_FAULT_COPY_ON_WRITE => "ERROR_PAGE_FAULT_COPY_ON_WRITE",
            .ERROR_PAGE_FAULT_GUARD_PAGE => "ERROR_PAGE_FAULT_GUARD_PAGE",
            .ERROR_PAGE_FAULT_PAGING_FILE => "ERROR_PAGE_FAULT_PAGING_FILE",
            .ERROR_CACHE_PAGE_LOCKED => "ERROR_CACHE_PAGE_LOCKED",
            .ERROR_CRASH_DUMP => "ERROR_CRASH_DUMP",
            .ERROR_BUFFER_ALL_ZEROS => "ERROR_BUFFER_ALL_ZEROS",
            .ERROR_REPARSE_OBJECT => "ERROR_REPARSE_OBJECT",
            .ERROR_RESOURCE_REQUIREMENTS_CHANGED => "ERROR_RESOURCE_REQUIREMENTS_CHANGED",
            .ERROR_TRANSLATION_COMPLETE => "ERROR_TRANSLATION_COMPLETE",
            .ERROR_NOTHING_TO_TERMINATE => "ERROR_NOTHING_TO_TERMINATE",
            .ERROR_PROCESS_NOT_IN_JOB => "ERROR_PROCESS_NOT_IN_JOB",
            .ERROR_PROCESS_IN_JOB => "ERROR_PROCESS_IN_JOB",
            .ERROR_VOLSNAP_HIBERNATE_READY => "ERROR_VOLSNAP_HIBERNATE_READY",
            .ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY => "ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY",
            .ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED => "ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED",
            .ERROR_INTERRUPT_STILL_CONNECTED => "ERROR_INTERRUPT_STILL_CONNECTED",
            .ERROR_WAIT_FOR_OPLOCK => "ERROR_WAIT_FOR_OPLOCK",
            .ERROR_DBG_EXCEPTION_HANDLED => "ERROR_DBG_EXCEPTION_HANDLED",
            .ERROR_DBG_CONTINUE => "ERROR_DBG_CONTINUE",
            .ERROR_CALLBACK_POP_STACK => "ERROR_CALLBACK_POP_STACK",
            .ERROR_COMPRESSION_DISABLED => "ERROR_COMPRESSION_DISABLED",
            .ERROR_CANTFETCHBACKWARDS => "ERROR_CANTFETCHBACKWARDS",
            .ERROR_CANTSCROLLBACKWARDS => "ERROR_CANTSCROLLBACKWARDS",
            .ERROR_ROWSNOTRELEASED => "ERROR_ROWSNOTRELEASED",
            .ERROR_BAD_ACCESSOR_FLAGS => "ERROR_BAD_ACCESSOR_FLAGS",
            .ERROR_ERRORS_ENCOUNTERED => "ERROR_ERRORS_ENCOUNTERED",
            .ERROR_NOT_CAPABLE => "ERROR_NOT_CAPABLE",
            .ERROR_REQUEST_OUT_OF_SEQUENCE => "ERROR_REQUEST_OUT_OF_SEQUENCE",
            .ERROR_VERSION_PARSE_ERROR => "ERROR_VERSION_PARSE_ERROR",
            .ERROR_BADSTARTPOSITION => "ERROR_BADSTARTPOSITION",
            .ERROR_MEMORY_HARDWARE => "ERROR_MEMORY_HARDWARE",
            .ERROR_DISK_REPAIR_DISABLED => "ERROR_DISK_REPAIR_DISABLED",
            .ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE => "ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE",
            .ERROR_SYSTEM_POWERSTATE_TRANSITION => "ERROR_SYSTEM_POWERSTATE_TRANSITION",
            .ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION => "ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION",
            .ERROR_MCA_EXCEPTION => "ERROR_MCA_EXCEPTION",
            .ERROR_ACCESS_AUDIT_BY_POLICY => "ERROR_ACCESS_AUDIT_BY_POLICY",
            .ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY => "ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY",
            .ERROR_ABANDON_HIBERFILE => "ERROR_ABANDON_HIBERFILE",
            .ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED => "ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED",
            .ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR => "ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR",
            .ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR => "ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR",
            .ERROR_BAD_MCFG_TABLE => "ERROR_BAD_MCFG_TABLE",
            .ERROR_DISK_REPAIR_REDIRECTED => "ERROR_DISK_REPAIR_REDIRECTED",
            .ERROR_DISK_REPAIR_UNSUCCESSFUL => "ERROR_DISK_REPAIR_UNSUCCESSFUL",
            .ERROR_CORRUPT_LOG_OVERFULL => "ERROR_CORRUPT_LOG_OVERFULL",
            .ERROR_CORRUPT_LOG_CORRUPTED => "ERROR_CORRUPT_LOG_CORRUPTED",
            .ERROR_CORRUPT_LOG_UNAVAILABLE => "ERROR_CORRUPT_LOG_UNAVAILABLE",
            .ERROR_CORRUPT_LOG_DELETED_FULL => "ERROR_CORRUPT_LOG_DELETED_FULL",
            .ERROR_CORRUPT_LOG_CLEARED => "ERROR_CORRUPT_LOG_CLEARED",
            .ERROR_ORPHAN_NAME_EXHAUSTED => "ERROR_ORPHAN_NAME_EXHAUSTED",
            .ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE => "ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE",
            .ERROR_CANNOT_GRANT_REQUESTED_OPLOCK => "ERROR_CANNOT_GRANT_REQUESTED_OPLOCK",
            .ERROR_CANNOT_BREAK_OPLOCK => "ERROR_CANNOT_BREAK_OPLOCK",
            .ERROR_OPLOCK_HANDLE_CLOSED => "ERROR_OPLOCK_HANDLE_CLOSED",
            .ERROR_NO_ACE_CONDITION => "ERROR_NO_ACE_CONDITION",
            .ERROR_INVALID_ACE_CONDITION => "ERROR_INVALID_ACE_CONDITION",
            .ERROR_FILE_HANDLE_REVOKED => "ERROR_FILE_HANDLE_REVOKED",
            .ERROR_IMAGE_AT_DIFFERENT_BASE => "ERROR_IMAGE_AT_DIFFERENT_BASE",
            .ERROR_ENCRYPTED_IO_NOT_POSSIBLE => "ERROR_ENCRYPTED_IO_NOT_POSSIBLE",
            .ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS => "ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS",
            .ERROR_QUOTA_ACTIVITY => "ERROR_QUOTA_ACTIVITY",
            .ERROR_HANDLE_REVOKED => "ERROR_HANDLE_REVOKED",
            .ERROR_CALLBACK_INVOKE_INLINE => "ERROR_CALLBACK_INVOKE_INLINE",
            .ERROR_CPU_SET_INVALID => "ERROR_CPU_SET_INVALID",
            .ERROR_ENCLAVE_NOT_TERMINATED => "ERROR_ENCLAVE_NOT_TERMINATED",
            .ERROR_ENCLAVE_VIOLATION => "ERROR_ENCLAVE_VIOLATION",
            .ERROR_SERVER_TRANSPORT_CONFLICT => "ERROR_SERVER_TRANSPORT_CONFLICT",
            .ERROR_CERTIFICATE_VALIDATION_PREFERENCE_CONFLICT => "ERROR_CERTIFICATE_VALIDATION_PREFERENCE_CONFLICT",
            .ERROR_FT_READ_FROM_COPY_FAILURE => "ERROR_FT_READ_FROM_COPY_FAILURE",
            .ERROR_SECTION_DIRECT_MAP_ONLY => "ERROR_SECTION_DIRECT_MAP_ONLY",
            .ERROR_EA_ACCESS_DENIED => "ERROR_EA_ACCESS_DENIED",
            .ERROR_OPERATION_ABORTED => "ERROR_OPERATION_ABORTED",
            .ERROR_IO_INCOMPLETE => "ERROR_IO_INCOMPLETE",
            .ERROR_IO_PENDING => "ERROR_IO_PENDING",
            .ERROR_NOACCESS => "ERROR_NOACCESS",
            .ERROR_SWAPERROR => "ERROR_SWAPERROR",
            .ERROR_STACK_OVERFLOW => "ERROR_STACK_OVERFLOW",
            .ERROR_INVALID_MESSAGE => "ERROR_INVALID_MESSAGE",
            .ERROR_CAN_NOT_COMPLETE => "ERROR_CAN_NOT_COMPLETE",
            .ERROR_INVALID_FLAGS => "ERROR_INVALID_FLAGS",
            .ERROR_UNRECOGNIZED_VOLUME => "ERROR_UNRECOGNIZED_VOLUME",
            .ERROR_FILE_INVALID => "ERROR_FILE_INVALID",
            .ERROR_FULLSCREEN_MODE => "ERROR_FULLSCREEN_MODE",
            .ERROR_NO_TOKEN => "ERROR_NO_TOKEN",
            .ERROR_BADDB => "ERROR_BADDB",
            .ERROR_BADKEY => "ERROR_BADKEY",
            .ERROR_CANTOPEN => "ERROR_CANTOPEN",
            .ERROR_CANTREAD => "ERROR_CANTREAD",
            .ERROR_CANTWRITE => "ERROR_CANTWRITE",
            .ERROR_REGISTRY_RECOVERED => "ERROR_REGISTRY_RECOVERED",
            .ERROR_REGISTRY_CORRUPT => "ERROR_REGISTRY_CORRUPT",
            .ERROR_REGISTRY_IO_FAILED => "ERROR_REGISTRY_IO_FAILED",
            .ERROR_NOT_REGISTRY_FILE => "ERROR_NOT_REGISTRY_FILE",
            .ERROR_KEY_DELETED => "ERROR_KEY_DELETED",
            .ERROR_NO_LOG_SPACE => "ERROR_NO_LOG_SPACE",
            .ERROR_KEY_HAS_CHILDREN => "ERROR_KEY_HAS_CHILDREN",
            .ERROR_CHILD_MUST_BE_VOLATILE => "ERROR_CHILD_MUST_BE_VOLATILE",
            .ERROR_NOTIFY_ENUM_DIR => "ERROR_NOTIFY_ENUM_DIR",
            .ERROR_DEPENDENT_SERVICES_RUNNING => "ERROR_DEPENDENT_SERVICES_RUNNING",
            .ERROR_INVALID_SERVICE_CONTROL => "ERROR_INVALID_SERVICE_CONTROL",
            .ERROR_SERVICE_REQUEST_TIMEOUT => "ERROR_SERVICE_REQUEST_TIMEOUT",
            .ERROR_SERVICE_NO_THREAD => "ERROR_SERVICE_NO_THREAD",
            .ERROR_SERVICE_DATABASE_LOCKED => "ERROR_SERVICE_DATABASE_LOCKED",
            .ERROR_SERVICE_ALREADY_RUNNING => "ERROR_SERVICE_ALREADY_RUNNING",
            .ERROR_INVALID_SERVICE_ACCOUNT => "ERROR_INVALID_SERVICE_ACCOUNT",
            .ERROR_SERVICE_DISABLED => "ERROR_SERVICE_DISABLED",
            .ERROR_CIRCULAR_DEPENDENCY => "ERROR_CIRCULAR_DEPENDENCY",
            .ERROR_SERVICE_DOES_NOT_EXIST => "ERROR_SERVICE_DOES_NOT_EXIST",
            .ERROR_SERVICE_CANNOT_ACCEPT_CTRL => "ERROR_SERVICE_CANNOT_ACCEPT_CTRL",
            .ERROR_SERVICE_NOT_ACTIVE => "ERROR_SERVICE_NOT_ACTIVE",
            .ERROR_FAILED_SERVICE_CONTROLLER_CONNECT => "ERROR_FAILED_SERVICE_CONTROLLER_CONNECT",
            .ERROR_EXCEPTION_IN_SERVICE => "ERROR_EXCEPTION_IN_SERVICE",
            .ERROR_DATABASE_DOES_NOT_EXIST => "ERROR_DATABASE_DOES_NOT_EXIST",
            .ERROR_SERVICE_SPECIFIC_ERROR => "ERROR_SERVICE_SPECIFIC_ERROR",
            .ERROR_PROCESS_ABORTED => "ERROR_PROCESS_ABORTED",
            .ERROR_SERVICE_DEPENDENCY_FAIL => "ERROR_SERVICE_DEPENDENCY_FAIL",
            .ERROR_SERVICE_LOGON_FAILED => "ERROR_SERVICE_LOGON_FAILED",
            .ERROR_SERVICE_START_HANG => "ERROR_SERVICE_START_HANG",
            .ERROR_INVALID_SERVICE_LOCK => "ERROR_INVALID_SERVICE_LOCK",
            .ERROR_SERVICE_MARKED_FOR_DELETE => "ERROR_SERVICE_MARKED_FOR_DELETE",
            .ERROR_SERVICE_EXISTS => "ERROR_SERVICE_EXISTS",
            .ERROR_ALREADY_RUNNING_LKG => "ERROR_ALREADY_RUNNING_LKG",
            .ERROR_SERVICE_DEPENDENCY_DELETED => "ERROR_SERVICE_DEPENDENCY_DELETED",
            .ERROR_BOOT_ALREADY_ACCEPTED => "ERROR_BOOT_ALREADY_ACCEPTED",
            .ERROR_SERVICE_NEVER_STARTED => "ERROR_SERVICE_NEVER_STARTED",
            .ERROR_DUPLICATE_SERVICE_NAME => "ERROR_DUPLICATE_SERVICE_NAME",
            .ERROR_DIFFERENT_SERVICE_ACCOUNT => "ERROR_DIFFERENT_SERVICE_ACCOUNT",
            .ERROR_CANNOT_DETECT_DRIVER_FAILURE => "ERROR_CANNOT_DETECT_DRIVER_FAILURE",
            .ERROR_CANNOT_DETECT_PROCESS_ABORT => "ERROR_CANNOT_DETECT_PROCESS_ABORT",
            .ERROR_NO_RECOVERY_PROGRAM => "ERROR_NO_RECOVERY_PROGRAM",
            .ERROR_SERVICE_NOT_IN_EXE => "ERROR_SERVICE_NOT_IN_EXE",
            .ERROR_NOT_SAFEBOOT_SERVICE => "ERROR_NOT_SAFEBOOT_SERVICE",
            .ERROR_END_OF_MEDIA => "ERROR_END_OF_MEDIA",
            .ERROR_FILEMARK_DETECTED => "ERROR_FILEMARK_DETECTED",
            .ERROR_BEGINNING_OF_MEDIA => "ERROR_BEGINNING_OF_MEDIA",
            .ERROR_SETMARK_DETECTED => "ERROR_SETMARK_DETECTED",
            .ERROR_NO_DATA_DETECTED => "ERROR_NO_DATA_DETECTED",
            .ERROR_PARTITION_FAILURE => "ERROR_PARTITION_FAILURE",
            .ERROR_INVALID_BLOCK_LENGTH => "ERROR_INVALID_BLOCK_LENGTH",
            .ERROR_DEVICE_NOT_PARTITIONED => "ERROR_DEVICE_NOT_PARTITIONED",
            .ERROR_UNABLE_TO_LOCK_MEDIA => "ERROR_UNABLE_TO_LOCK_MEDIA",
            .ERROR_UNABLE_TO_UNLOAD_MEDIA => "ERROR_UNABLE_TO_UNLOAD_MEDIA",
            .ERROR_MEDIA_CHANGED => "ERROR_MEDIA_CHANGED",
            .ERROR_BUS_RESET => "ERROR_BUS_RESET",
            .ERROR_NO_MEDIA_IN_DRIVE => "ERROR_NO_MEDIA_IN_DRIVE",
            .ERROR_NO_UNICODE_TRANSLATION => "ERROR_NO_UNICODE_TRANSLATION",
            .ERROR_DLL_INIT_FAILED => "ERROR_DLL_INIT_FAILED",
            .ERROR_SHUTDOWN_IN_PROGRESS => "ERROR_SHUTDOWN_IN_PROGRESS",
            .ERROR_NO_SHUTDOWN_IN_PROGRESS => "ERROR_NO_SHUTDOWN_IN_PROGRESS",
            .ERROR_IO_DEVICE => "ERROR_IO_DEVICE",
            .ERROR_SERIAL_NO_DEVICE => "ERROR_SERIAL_NO_DEVICE",
            .ERROR_IRQ_BUSY => "ERROR_IRQ_BUSY",
            .ERROR_MORE_WRITES => "ERROR_MORE_WRITES",
            .ERROR_COUNTER_TIMEOUT => "ERROR_COUNTER_TIMEOUT",
            .ERROR_FLOPPY_ID_MARK_NOT_FOUND => "ERROR_FLOPPY_ID_MARK_NOT_FOUND",
            .ERROR_FLOPPY_WRONG_CYLINDER => "ERROR_FLOPPY_WRONG_CYLINDER",
            .ERROR_FLOPPY_UNKNOWN_ERROR => "ERROR_FLOPPY_UNKNOWN_ERROR",
            .ERROR_FLOPPY_BAD_REGISTERS => "ERROR_FLOPPY_BAD_REGISTERS",
            .ERROR_DISK_RECALIBRATE_FAILED => "ERROR_DISK_RECALIBRATE_FAILED",
            .ERROR_DISK_OPERATION_FAILED => "ERROR_DISK_OPERATION_FAILED",
            .ERROR_DISK_RESET_FAILED => "ERROR_DISK_RESET_FAILED",
            .ERROR_EOM_OVERFLOW => "ERROR_EOM_OVERFLOW",
            .ERROR_NOT_ENOUGH_SERVER_MEMORY => "ERROR_NOT_ENOUGH_SERVER_MEMORY",
            .ERROR_POSSIBLE_DEADLOCK => "ERROR_POSSIBLE_DEADLOCK",
            .ERROR_MAPPED_ALIGNMENT => "ERROR_MAPPED_ALIGNMENT",
            .ERROR_SET_POWER_STATE_VETOED => "ERROR_SET_POWER_STATE_VETOED",
            .ERROR_SET_POWER_STATE_FAILED => "ERROR_SET_POWER_STATE_FAILED",
            .ERROR_TOO_MANY_LINKS => "ERROR_TOO_MANY_LINKS",
            .ERROR_OLD_WIN_VERSION => "ERROR_OLD_WIN_VERSION",
            .ERROR_APP_WRONG_OS => "ERROR_APP_WRONG_OS",
            .ERROR_SINGLE_INSTANCE_APP => "ERROR_SINGLE_INSTANCE_APP",
            .ERROR_RMODE_APP => "ERROR_RMODE_APP",
            .ERROR_INVALID_DLL => "ERROR_INVALID_DLL",
            .ERROR_NO_ASSOCIATION => "ERROR_NO_ASSOCIATION",
            .ERROR_DDE_FAIL => "ERROR_DDE_FAIL",
            .ERROR_DLL_NOT_FOUND => "ERROR_DLL_NOT_FOUND",
            .ERROR_NO_MORE_USER_HANDLES => "ERROR_NO_MORE_USER_HANDLES",
            .ERROR_MESSAGE_SYNC_ONLY => "ERROR_MESSAGE_SYNC_ONLY",
            .ERROR_SOURCE_ELEMENT_EMPTY => "ERROR_SOURCE_ELEMENT_EMPTY",
            .ERROR_DESTINATION_ELEMENT_FULL => "ERROR_DESTINATION_ELEMENT_FULL",
            .ERROR_ILLEGAL_ELEMENT_ADDRESS => "ERROR_ILLEGAL_ELEMENT_ADDRESS",
            .ERROR_MAGAZINE_NOT_PRESENT => "ERROR_MAGAZINE_NOT_PRESENT",
            .ERROR_DEVICE_REINITIALIZATION_NEEDED => "ERROR_DEVICE_REINITIALIZATION_NEEDED",
            .ERROR_DEVICE_REQUIRES_CLEANING => "ERROR_DEVICE_REQUIRES_CLEANING",
            .ERROR_DEVICE_DOOR_OPEN => "ERROR_DEVICE_DOOR_OPEN",
            .ERROR_DEVICE_NOT_CONNECTED => "ERROR_DEVICE_NOT_CONNECTED",
            .ERROR_NOT_FOUND => "ERROR_NOT_FOUND",
            .ERROR_NO_MATCH => "ERROR_NO_MATCH",
            .ERROR_SET_NOT_FOUND => "ERROR_SET_NOT_FOUND",
            .ERROR_POINT_NOT_FOUND => "ERROR_POINT_NOT_FOUND",
            .ERROR_NO_TRACKING_SERVICE => "ERROR_NO_TRACKING_SERVICE",
            .ERROR_NO_VOLUME_ID => "ERROR_NO_VOLUME_ID",
            .ERROR_UNABLE_TO_REMOVE_REPLACED => "ERROR_UNABLE_TO_REMOVE_REPLACED",
            .ERROR_UNABLE_TO_MOVE_REPLACEMENT => "ERROR_UNABLE_TO_MOVE_REPLACEMENT",
            .ERROR_UNABLE_TO_MOVE_REPLACEMENT_2 => "ERROR_UNABLE_TO_MOVE_REPLACEMENT_2",
            .ERROR_JOURNAL_DELETE_IN_PROGRESS => "ERROR_JOURNAL_DELETE_IN_PROGRESS",
            .ERROR_JOURNAL_NOT_ACTIVE => "ERROR_JOURNAL_NOT_ACTIVE",
            .ERROR_POTENTIAL_FILE_FOUND => "ERROR_POTENTIAL_FILE_FOUND",
            .ERROR_JOURNAL_ENTRY_DELETED => "ERROR_JOURNAL_ENTRY_DELETED",
            .ERROR_PARTITION_TERMINATING => "ERROR_PARTITION_TERMINATING",
            .ERROR_SHUTDOWN_IS_SCHEDULED => "ERROR_SHUTDOWN_IS_SCHEDULED",
            .ERROR_SHUTDOWN_USERS_LOGGED_ON => "ERROR_SHUTDOWN_USERS_LOGGED_ON",
            .ERROR_SHUTDOWN_DISKS_NOT_IN_MAINTENANCE_MODE => "ERROR_SHUTDOWN_DISKS_NOT_IN_MAINTENANCE_MODE",
            .ERROR_BAD_DEVICE => "ERROR_BAD_DEVICE",
            .ERROR_CONNECTION_UNAVAIL => "ERROR_CONNECTION_UNAVAIL",
            .ERROR_DEVICE_ALREADY_REMEMBERED => "ERROR_DEVICE_ALREADY_REMEMBERED",
            .ERROR_NO_NET_OR_BAD_PATH => "ERROR_NO_NET_OR_BAD_PATH",
            .ERROR_BAD_PROVIDER => "ERROR_BAD_PROVIDER",
            .ERROR_CANNOT_OPEN_PROFILE => "ERROR_CANNOT_OPEN_PROFILE",
            .ERROR_BAD_PROFILE => "ERROR_BAD_PROFILE",
            .ERROR_NOT_CONTAINER => "ERROR_NOT_CONTAINER",
            .ERROR_EXTENDED_ERROR => "ERROR_EXTENDED_ERROR",
            .ERROR_INVALID_GROUPNAME => "ERROR_INVALID_GROUPNAME",
            .ERROR_INVALID_COMPUTERNAME => "ERROR_INVALID_COMPUTERNAME",
            .ERROR_INVALID_EVENTNAME => "ERROR_INVALID_EVENTNAME",
            .ERROR_INVALID_DOMAINNAME => "ERROR_INVALID_DOMAINNAME",
            .ERROR_INVALID_SERVICENAME => "ERROR_INVALID_SERVICENAME",
            .ERROR_INVALID_NETNAME => "ERROR_INVALID_NETNAME",
            .ERROR_INVALID_SHARENAME => "ERROR_INVALID_SHARENAME",
            .ERROR_INVALID_PASSWORDNAME => "ERROR_INVALID_PASSWORDNAME",
            .ERROR_INVALID_MESSAGENAME => "ERROR_INVALID_MESSAGENAME",
            .ERROR_INVALID_MESSAGEDEST => "ERROR_INVALID_MESSAGEDEST",
            .ERROR_SESSION_CREDENTIAL_CONFLICT => "ERROR_SESSION_CREDENTIAL_CONFLICT",
            .ERROR_REMOTE_SESSION_LIMIT_EXCEEDED => "ERROR_REMOTE_SESSION_LIMIT_EXCEEDED",
            .ERROR_DUP_DOMAINNAME => "ERROR_DUP_DOMAINNAME",
            .ERROR_NO_NETWORK => "ERROR_NO_NETWORK",
            .ERROR_CANCELLED => "ERROR_CANCELLED",
            .ERROR_USER_MAPPED_FILE => "ERROR_USER_MAPPED_FILE",
            .ERROR_CONNECTION_REFUSED => "ERROR_CONNECTION_REFUSED",
            .ERROR_GRACEFUL_DISCONNECT => "ERROR_GRACEFUL_DISCONNECT",
            .ERROR_ADDRESS_ALREADY_ASSOCIATED => "ERROR_ADDRESS_ALREADY_ASSOCIATED",
            .ERROR_ADDRESS_NOT_ASSOCIATED => "ERROR_ADDRESS_NOT_ASSOCIATED",
            .ERROR_CONNECTION_INVALID => "ERROR_CONNECTION_INVALID",
            .ERROR_CONNECTION_ACTIVE => "ERROR_CONNECTION_ACTIVE",
            .ERROR_NETWORK_UNREACHABLE => "ERROR_NETWORK_UNREACHABLE",
            .ERROR_HOST_UNREACHABLE => "ERROR_HOST_UNREACHABLE",
            .ERROR_PROTOCOL_UNREACHABLE => "ERROR_PROTOCOL_UNREACHABLE",
            .ERROR_PORT_UNREACHABLE => "ERROR_PORT_UNREACHABLE",
            .ERROR_REQUEST_ABORTED => "ERROR_REQUEST_ABORTED",
            .ERROR_CONNECTION_ABORTED => "ERROR_CONNECTION_ABORTED",
            .ERROR_RETRY => "ERROR_RETRY",
            .ERROR_CONNECTION_COUNT_LIMIT => "ERROR_CONNECTION_COUNT_LIMIT",
            .ERROR_LOGIN_TIME_RESTRICTION => "ERROR_LOGIN_TIME_RESTRICTION",
            .ERROR_LOGIN_WKSTA_RESTRICTION => "ERROR_LOGIN_WKSTA_RESTRICTION",
            .ERROR_INCORRECT_ADDRESS => "ERROR_INCORRECT_ADDRESS",
            .ERROR_ALREADY_REGISTERED => "ERROR_ALREADY_REGISTERED",
            .ERROR_SERVICE_NOT_FOUND => "ERROR_SERVICE_NOT_FOUND",
            .ERROR_NOT_AUTHENTICATED => "ERROR_NOT_AUTHENTICATED",
            .ERROR_NOT_LOGGED_ON => "ERROR_NOT_LOGGED_ON",
            .ERROR_CONTINUE => "ERROR_CONTINUE",
            .ERROR_ALREADY_INITIALIZED => "ERROR_ALREADY_INITIALIZED",
            .ERROR_NO_MORE_DEVICES => "ERROR_NO_MORE_DEVICES",
            .ERROR_NO_SUCH_SITE => "ERROR_NO_SUCH_SITE",
            .ERROR_DOMAIN_CONTROLLER_EXISTS => "ERROR_DOMAIN_CONTROLLER_EXISTS",
            .ERROR_ONLY_IF_CONNECTED => "ERROR_ONLY_IF_CONNECTED",
            .ERROR_OVERRIDE_NOCHANGES => "ERROR_OVERRIDE_NOCHANGES",
            .ERROR_BAD_USER_PROFILE => "ERROR_BAD_USER_PROFILE",
            .ERROR_NOT_SUPPORTED_ON_SBS => "ERROR_NOT_SUPPORTED_ON_SBS",
            .ERROR_SERVER_SHUTDOWN_IN_PROGRESS => "ERROR_SERVER_SHUTDOWN_IN_PROGRESS",
            .ERROR_HOST_DOWN => "ERROR_HOST_DOWN",
            .ERROR_NON_ACCOUNT_SID => "ERROR_NON_ACCOUNT_SID",
            .ERROR_NON_DOMAIN_SID => "ERROR_NON_DOMAIN_SID",
            .ERROR_APPHELP_BLOCK => "ERROR_APPHELP_BLOCK",
            .ERROR_ACCESS_DISABLED_BY_POLICY => "ERROR_ACCESS_DISABLED_BY_POLICY",
            .ERROR_REG_NAT_CONSUMPTION => "ERROR_REG_NAT_CONSUMPTION",
            .ERROR_CSCSHARE_OFFLINE => "ERROR_CSCSHARE_OFFLINE",
            .ERROR_PKINIT_FAILURE => "ERROR_PKINIT_FAILURE",
            .ERROR_SMARTCARD_SUBSYSTEM_FAILURE => "ERROR_SMARTCARD_SUBSYSTEM_FAILURE",
            .ERROR_DOWNGRADE_DETECTED => "ERROR_DOWNGRADE_DETECTED",
            .ERROR_MACHINE_LOCKED => "ERROR_MACHINE_LOCKED",
            .ERROR_SMB_GUEST_LOGON_BLOCKED => "ERROR_SMB_GUEST_LOGON_BLOCKED",
            .ERROR_CALLBACK_SUPPLIED_INVALID_DATA => "ERROR_CALLBACK_SUPPLIED_INVALID_DATA",
            .ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED => "ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED",
            .ERROR_DRIVER_BLOCKED => "ERROR_DRIVER_BLOCKED",
            .ERROR_INVALID_IMPORT_OF_NON_DLL => "ERROR_INVALID_IMPORT_OF_NON_DLL",
            .ERROR_ACCESS_DISABLED_WEBBLADE => "ERROR_ACCESS_DISABLED_WEBBLADE",
            .ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER => "ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER",
            .ERROR_RECOVERY_FAILURE => "ERROR_RECOVERY_FAILURE",
            .ERROR_ALREADY_FIBER => "ERROR_ALREADY_FIBER",
            .ERROR_ALREADY_THREAD => "ERROR_ALREADY_THREAD",
            .ERROR_STACK_BUFFER_OVERRUN => "ERROR_STACK_BUFFER_OVERRUN",
            .ERROR_PARAMETER_QUOTA_EXCEEDED => "ERROR_PARAMETER_QUOTA_EXCEEDED",
            .ERROR_DEBUGGER_INACTIVE => "ERROR_DEBUGGER_INACTIVE",
            .ERROR_DELAY_LOAD_FAILED => "ERROR_DELAY_LOAD_FAILED",
            .ERROR_VDM_DISALLOWED => "ERROR_VDM_DISALLOWED",
            .ERROR_UNIDENTIFIED_ERROR => "ERROR_UNIDENTIFIED_ERROR",
            .ERROR_INVALID_CRUNTIME_PARAMETER => "ERROR_INVALID_CRUNTIME_PARAMETER",
            .ERROR_BEYOND_VDL => "ERROR_BEYOND_VDL",
            .ERROR_INCOMPATIBLE_SERVICE_SID_TYPE => "ERROR_INCOMPATIBLE_SERVICE_SID_TYPE",
            .ERROR_DRIVER_PROCESS_TERMINATED => "ERROR_DRIVER_PROCESS_TERMINATED",
            .ERROR_IMPLEMENTATION_LIMIT => "ERROR_IMPLEMENTATION_LIMIT",
            .ERROR_PROCESS_IS_PROTECTED => "ERROR_PROCESS_IS_PROTECTED",
            .ERROR_SERVICE_NOTIFY_CLIENT_LAGGING => "ERROR_SERVICE_NOTIFY_CLIENT_LAGGING",
            .ERROR_DISK_QUOTA_EXCEEDED => "ERROR_DISK_QUOTA_EXCEEDED",
            .ERROR_CONTENT_BLOCKED => "ERROR_CONTENT_BLOCKED",
            .ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE => "ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE",
            .ERROR_APP_HANG => "ERROR_APP_HANG",
            .ERROR_INVALID_LABEL => "ERROR_INVALID_LABEL",
            .ERROR_NOT_ALL_ASSIGNED => "ERROR_NOT_ALL_ASSIGNED",
            .ERROR_SOME_NOT_MAPPED => "ERROR_SOME_NOT_MAPPED",
            .ERROR_NO_QUOTAS_FOR_ACCOUNT => "ERROR_NO_QUOTAS_FOR_ACCOUNT",
            .ERROR_LOCAL_USER_SESSION_KEY => "ERROR_LOCAL_USER_SESSION_KEY",
            .ERROR_NULL_LM_PASSWORD => "ERROR_NULL_LM_PASSWORD",
            .ERROR_UNKNOWN_REVISION => "ERROR_UNKNOWN_REVISION",
            .ERROR_REVISION_MISMATCH => "ERROR_REVISION_MISMATCH",
            .ERROR_INVALID_OWNER => "ERROR_INVALID_OWNER",
            .ERROR_INVALID_PRIMARY_GROUP => "ERROR_INVALID_PRIMARY_GROUP",
            .ERROR_NO_IMPERSONATION_TOKEN => "ERROR_NO_IMPERSONATION_TOKEN",
            .ERROR_CANT_DISABLE_MANDATORY => "ERROR_CANT_DISABLE_MANDATORY",
            .ERROR_NO_LOGON_SERVERS => "ERROR_NO_LOGON_SERVERS",
            .ERROR_NO_SUCH_LOGON_SESSION => "ERROR_NO_SUCH_LOGON_SESSION",
            .ERROR_NO_SUCH_PRIVILEGE => "ERROR_NO_SUCH_PRIVILEGE",
            .ERROR_PRIVILEGE_NOT_HELD => "ERROR_PRIVILEGE_NOT_HELD",
            .ERROR_INVALID_ACCOUNT_NAME => "ERROR_INVALID_ACCOUNT_NAME",
            .ERROR_USER_EXISTS => "ERROR_USER_EXISTS",
            .ERROR_NO_SUCH_USER => "ERROR_NO_SUCH_USER",
            .ERROR_GROUP_EXISTS => "ERROR_GROUP_EXISTS",
            .ERROR_NO_SUCH_GROUP => "ERROR_NO_SUCH_GROUP",
            .ERROR_MEMBER_IN_GROUP => "ERROR_MEMBER_IN_GROUP",
            .ERROR_MEMBER_NOT_IN_GROUP => "ERROR_MEMBER_NOT_IN_GROUP",
            .ERROR_LAST_ADMIN => "ERROR_LAST_ADMIN",
            .ERROR_WRONG_PASSWORD => "ERROR_WRONG_PASSWORD",
            .ERROR_ILL_FORMED_PASSWORD => "ERROR_ILL_FORMED_PASSWORD",
            .ERROR_PASSWORD_RESTRICTION => "ERROR_PASSWORD_RESTRICTION",
            .ERROR_LOGON_FAILURE => "ERROR_LOGON_FAILURE",
            .ERROR_ACCOUNT_RESTRICTION => "ERROR_ACCOUNT_RESTRICTION",
            .ERROR_INVALID_LOGON_HOURS => "ERROR_INVALID_LOGON_HOURS",
            .ERROR_INVALID_WORKSTATION => "ERROR_INVALID_WORKSTATION",
            .ERROR_PASSWORD_EXPIRED => "ERROR_PASSWORD_EXPIRED",
            .ERROR_ACCOUNT_DISABLED => "ERROR_ACCOUNT_DISABLED",
            .ERROR_NONE_MAPPED => "ERROR_NONE_MAPPED",
            .ERROR_TOO_MANY_LUIDS_REQUESTED => "ERROR_TOO_MANY_LUIDS_REQUESTED",
            .ERROR_LUIDS_EXHAUSTED => "ERROR_LUIDS_EXHAUSTED",
            .ERROR_INVALID_SUB_AUTHORITY => "ERROR_INVALID_SUB_AUTHORITY",
            .ERROR_INVALID_ACL => "ERROR_INVALID_ACL",
            .ERROR_INVALID_SID => "ERROR_INVALID_SID",
            .ERROR_INVALID_SECURITY_DESCR => "ERROR_INVALID_SECURITY_DESCR",
            .ERROR_BAD_INHERITANCE_ACL => "ERROR_BAD_INHERITANCE_ACL",
            .ERROR_SERVER_DISABLED => "ERROR_SERVER_DISABLED",
            .ERROR_SERVER_NOT_DISABLED => "ERROR_SERVER_NOT_DISABLED",
            .ERROR_INVALID_ID_AUTHORITY => "ERROR_INVALID_ID_AUTHORITY",
            .ERROR_ALLOTTED_SPACE_EXCEEDED => "ERROR_ALLOTTED_SPACE_EXCEEDED",
            .ERROR_INVALID_GROUP_ATTRIBUTES => "ERROR_INVALID_GROUP_ATTRIBUTES",
            .ERROR_BAD_IMPERSONATION_LEVEL => "ERROR_BAD_IMPERSONATION_LEVEL",
            .ERROR_CANT_OPEN_ANONYMOUS => "ERROR_CANT_OPEN_ANONYMOUS",
            .ERROR_BAD_VALIDATION_CLASS => "ERROR_BAD_VALIDATION_CLASS",
            .ERROR_BAD_TOKEN_TYPE => "ERROR_BAD_TOKEN_TYPE",
            .ERROR_NO_SECURITY_ON_OBJECT => "ERROR_NO_SECURITY_ON_OBJECT",
            .ERROR_CANT_ACCESS_DOMAIN_INFO => "ERROR_CANT_ACCESS_DOMAIN_INFO",
            .ERROR_INVALID_SERVER_STATE => "ERROR_INVALID_SERVER_STATE",
            .ERROR_INVALID_DOMAIN_STATE => "ERROR_INVALID_DOMAIN_STATE",
            .ERROR_INVALID_DOMAIN_ROLE => "ERROR_INVALID_DOMAIN_ROLE",
            .ERROR_NO_SUCH_DOMAIN => "ERROR_NO_SUCH_DOMAIN",
            .ERROR_DOMAIN_EXISTS => "ERROR_DOMAIN_EXISTS",
            .ERROR_DOMAIN_LIMIT_EXCEEDED => "ERROR_DOMAIN_LIMIT_EXCEEDED",
            .ERROR_INTERNAL_DB_CORRUPTION => "ERROR_INTERNAL_DB_CORRUPTION",
            .ERROR_INTERNAL_ERROR => "ERROR_INTERNAL_ERROR",
            .ERROR_GENERIC_NOT_MAPPED => "ERROR_GENERIC_NOT_MAPPED",
            .ERROR_BAD_DESCRIPTOR_FORMAT => "ERROR_BAD_DESCRIPTOR_FORMAT",
            .ERROR_NOT_LOGON_PROCESS => "ERROR_NOT_LOGON_PROCESS",
            .ERROR_LOGON_SESSION_EXISTS => "ERROR_LOGON_SESSION_EXISTS",
            .ERROR_NO_SUCH_PACKAGE => "ERROR_NO_SUCH_PACKAGE",
            .ERROR_BAD_LOGON_SESSION_STATE => "ERROR_BAD_LOGON_SESSION_STATE",
            .ERROR_LOGON_SESSION_COLLISION => "ERROR_LOGON_SESSION_COLLISION",
            .ERROR_INVALID_LOGON_TYPE => "ERROR_INVALID_LOGON_TYPE",
            .ERROR_CANNOT_IMPERSONATE => "ERROR_CANNOT_IMPERSONATE",
            .ERROR_RXACT_INVALID_STATE => "ERROR_RXACT_INVALID_STATE",
            .ERROR_RXACT_COMMIT_FAILURE => "ERROR_RXACT_COMMIT_FAILURE",
            .ERROR_SPECIAL_ACCOUNT => "ERROR_SPECIAL_ACCOUNT",
            .ERROR_SPECIAL_GROUP => "ERROR_SPECIAL_GROUP",
            .ERROR_SPECIAL_USER => "ERROR_SPECIAL_USER",
            .ERROR_MEMBERS_PRIMARY_GROUP => "ERROR_MEMBERS_PRIMARY_GROUP",
            .ERROR_TOKEN_ALREADY_IN_USE => "ERROR_TOKEN_ALREADY_IN_USE",
            .ERROR_NO_SUCH_ALIAS => "ERROR_NO_SUCH_ALIAS",
            .ERROR_MEMBER_NOT_IN_ALIAS => "ERROR_MEMBER_NOT_IN_ALIAS",
            .ERROR_MEMBER_IN_ALIAS => "ERROR_MEMBER_IN_ALIAS",
            .ERROR_ALIAS_EXISTS => "ERROR_ALIAS_EXISTS",
            .ERROR_LOGON_NOT_GRANTED => "ERROR_LOGON_NOT_GRANTED",
            .ERROR_TOO_MANY_SECRETS => "ERROR_TOO_MANY_SECRETS",
            .ERROR_SECRET_TOO_LONG => "ERROR_SECRET_TOO_LONG",
            .ERROR_INTERNAL_DB_ERROR => "ERROR_INTERNAL_DB_ERROR",
            .ERROR_TOO_MANY_CONTEXT_IDS => "ERROR_TOO_MANY_CONTEXT_IDS",
            .ERROR_LOGON_TYPE_NOT_GRANTED => "ERROR_LOGON_TYPE_NOT_GRANTED",
            .ERROR_NT_CROSS_ENCRYPTION_REQUIRED => "ERROR_NT_CROSS_ENCRYPTION_REQUIRED",
            .ERROR_NO_SUCH_MEMBER => "ERROR_NO_SUCH_MEMBER",
            .ERROR_INVALID_MEMBER => "ERROR_INVALID_MEMBER",
            .ERROR_TOO_MANY_SIDS => "ERROR_TOO_MANY_SIDS",
            .ERROR_LM_CROSS_ENCRYPTION_REQUIRED => "ERROR_LM_CROSS_ENCRYPTION_REQUIRED",
            .ERROR_NO_INHERITANCE => "ERROR_NO_INHERITANCE",
            .ERROR_FILE_CORRUPT => "ERROR_FILE_CORRUPT",
            .ERROR_DISK_CORRUPT => "ERROR_DISK_CORRUPT",
            .ERROR_NO_USER_SESSION_KEY => "ERROR_NO_USER_SESSION_KEY",
            .ERROR_LICENSE_QUOTA_EXCEEDED => "ERROR_LICENSE_QUOTA_EXCEEDED",
            .ERROR_WRONG_TARGET_NAME => "ERROR_WRONG_TARGET_NAME",
            .ERROR_MUTUAL_AUTH_FAILED => "ERROR_MUTUAL_AUTH_FAILED",
            .ERROR_TIME_SKEW => "ERROR_TIME_SKEW",
            .ERROR_CURRENT_DOMAIN_NOT_ALLOWED => "ERROR_CURRENT_DOMAIN_NOT_ALLOWED",
            .ERROR_INVALID_WINDOW_HANDLE => "ERROR_INVALID_WINDOW_HANDLE",
            .ERROR_INVALID_MENU_HANDLE => "ERROR_INVALID_MENU_HANDLE",
            .ERROR_INVALID_CURSOR_HANDLE => "ERROR_INVALID_CURSOR_HANDLE",
            .ERROR_INVALID_ACCEL_HANDLE => "ERROR_INVALID_ACCEL_HANDLE",
            .ERROR_INVALID_HOOK_HANDLE => "ERROR_INVALID_HOOK_HANDLE",
            .ERROR_INVALID_DWP_HANDLE => "ERROR_INVALID_DWP_HANDLE",
            .ERROR_TLW_WITH_WSCHILD => "ERROR_TLW_WITH_WSCHILD",
            .ERROR_CANNOT_FIND_WND_CLASS => "ERROR_CANNOT_FIND_WND_CLASS",
            .ERROR_WINDOW_OF_OTHER_THREAD => "ERROR_WINDOW_OF_OTHER_THREAD",
            .ERROR_HOTKEY_ALREADY_REGISTERED => "ERROR_HOTKEY_ALREADY_REGISTERED",
            .ERROR_CLASS_ALREADY_EXISTS => "ERROR_CLASS_ALREADY_EXISTS",
            .ERROR_CLASS_DOES_NOT_EXIST => "ERROR_CLASS_DOES_NOT_EXIST",
            .ERROR_CLASS_HAS_WINDOWS => "ERROR_CLASS_HAS_WINDOWS",
            .ERROR_INVALID_INDEX => "ERROR_INVALID_INDEX",
            .ERROR_INVALID_ICON_HANDLE => "ERROR_INVALID_ICON_HANDLE",
            .ERROR_PRIVATE_DIALOG_INDEX => "ERROR_PRIVATE_DIALOG_INDEX",
            .ERROR_LISTBOX_ID_NOT_FOUND => "ERROR_LISTBOX_ID_NOT_FOUND",
            .ERROR_NO_WILDCARD_CHARACTERS => "ERROR_NO_WILDCARD_CHARACTERS",
            .ERROR_CLIPBOARD_NOT_OPEN => "ERROR_CLIPBOARD_NOT_OPEN",
            .ERROR_HOTKEY_NOT_REGISTERED => "ERROR_HOTKEY_NOT_REGISTERED",
            .ERROR_WINDOW_NOT_DIALOG => "ERROR_WINDOW_NOT_DIALOG",
            .ERROR_CONTROL_ID_NOT_FOUND => "ERROR_CONTROL_ID_NOT_FOUND",
            .ERROR_INVALID_COMBOBOX_MESSAGE => "ERROR_INVALID_COMBOBOX_MESSAGE",
            .ERROR_WINDOW_NOT_COMBOBOX => "ERROR_WINDOW_NOT_COMBOBOX",
            .ERROR_INVALID_EDIT_HEIGHT => "ERROR_INVALID_EDIT_HEIGHT",
            .ERROR_DC_NOT_FOUND => "ERROR_DC_NOT_FOUND",
            .ERROR_INVALID_HOOK_FILTER => "ERROR_INVALID_HOOK_FILTER",
            .ERROR_INVALID_FILTER_PROC => "ERROR_INVALID_FILTER_PROC",
            .ERROR_HOOK_NEEDS_HMOD => "ERROR_HOOK_NEEDS_HMOD",
            .ERROR_GLOBAL_ONLY_HOOK => "ERROR_GLOBAL_ONLY_HOOK",
            .ERROR_JOURNAL_HOOK_SET => "ERROR_JOURNAL_HOOK_SET",
            .ERROR_HOOK_NOT_INSTALLED => "ERROR_HOOK_NOT_INSTALLED",
            .ERROR_INVALID_LB_MESSAGE => "ERROR_INVALID_LB_MESSAGE",
            .ERROR_SETCOUNT_ON_BAD_LB => "ERROR_SETCOUNT_ON_BAD_LB",
            .ERROR_LB_WITHOUT_TABSTOPS => "ERROR_LB_WITHOUT_TABSTOPS",
            .ERROR_DESTROY_OBJECT_OF_OTHER_THREAD => "ERROR_DESTROY_OBJECT_OF_OTHER_THREAD",
            .ERROR_CHILD_WINDOW_MENU => "ERROR_CHILD_WINDOW_MENU",
            .ERROR_NO_SYSTEM_MENU => "ERROR_NO_SYSTEM_MENU",
            .ERROR_INVALID_MSGBOX_STYLE => "ERROR_INVALID_MSGBOX_STYLE",
            .ERROR_INVALID_SPI_VALUE => "ERROR_INVALID_SPI_VALUE",
            .ERROR_SCREEN_ALREADY_LOCKED => "ERROR_SCREEN_ALREADY_LOCKED",
            .ERROR_HWNDS_HAVE_DIFF_PARENT => "ERROR_HWNDS_HAVE_DIFF_PARENT",
            .ERROR_NOT_CHILD_WINDOW => "ERROR_NOT_CHILD_WINDOW",
            .ERROR_INVALID_GW_COMMAND => "ERROR_INVALID_GW_COMMAND",
            .ERROR_INVALID_THREAD_ID => "ERROR_INVALID_THREAD_ID",
            .ERROR_NON_MDICHILD_WINDOW => "ERROR_NON_MDICHILD_WINDOW",
            .ERROR_POPUP_ALREADY_ACTIVE => "ERROR_POPUP_ALREADY_ACTIVE",
            .ERROR_NO_SCROLLBARS => "ERROR_NO_SCROLLBARS",
            .ERROR_INVALID_SCROLLBAR_RANGE => "ERROR_INVALID_SCROLLBAR_RANGE",
            .ERROR_INVALID_SHOWWIN_COMMAND => "ERROR_INVALID_SHOWWIN_COMMAND",
            .ERROR_NO_SYSTEM_RESOURCES => "ERROR_NO_SYSTEM_RESOURCES",
            .ERROR_NONPAGED_SYSTEM_RESOURCES => "ERROR_NONPAGED_SYSTEM_RESOURCES",
            .ERROR_PAGED_SYSTEM_RESOURCES => "ERROR_PAGED_SYSTEM_RESOURCES",
            .ERROR_WORKING_SET_QUOTA => "ERROR_WORKING_SET_QUOTA",
            .ERROR_PAGEFILE_QUOTA => "ERROR_PAGEFILE_QUOTA",
            .ERROR_COMMITMENT_LIMIT => "ERROR_COMMITMENT_LIMIT",
            .ERROR_MENU_ITEM_NOT_FOUND => "ERROR_MENU_ITEM_NOT_FOUND",
            .ERROR_INVALID_KEYBOARD_HANDLE => "ERROR_INVALID_KEYBOARD_HANDLE",
            .ERROR_HOOK_TYPE_NOT_ALLOWED => "ERROR_HOOK_TYPE_NOT_ALLOWED",
            .ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION => "ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION",
            .ERROR_TIMEOUT => "ERROR_TIMEOUT",
            .ERROR_INVALID_MONITOR_HANDLE => "ERROR_INVALID_MONITOR_HANDLE",
            .ERROR_INCORRECT_SIZE => "ERROR_INCORRECT_SIZE",
            .ERROR_SYMLINK_CLASS_DISABLED => "ERROR_SYMLINK_CLASS_DISABLED",
            .ERROR_SYMLINK_NOT_SUPPORTED => "ERROR_SYMLINK_NOT_SUPPORTED",
            .ERROR_XML_PARSE_ERROR => "ERROR_XML_PARSE_ERROR",
            .ERROR_XMLDSIG_ERROR => "ERROR_XMLDSIG_ERROR",
            .ERROR_RESTART_APPLICATION => "ERROR_RESTART_APPLICATION",
            .ERROR_WRONG_COMPARTMENT => "ERROR_WRONG_COMPARTMENT",
            .ERROR_AUTHIP_FAILURE => "ERROR_AUTHIP_FAILURE",
            .ERROR_NO_NVRAM_RESOURCES => "ERROR_NO_NVRAM_RESOURCES",
            .ERROR_NOT_GUI_PROCESS => "ERROR_NOT_GUI_PROCESS",
            .ERROR_EVENTLOG_FILE_CORRUPT => "ERROR_EVENTLOG_FILE_CORRUPT",
            .ERROR_EVENTLOG_CANT_START => "ERROR_EVENTLOG_CANT_START",
            .ERROR_LOG_FILE_FULL => "ERROR_LOG_FILE_FULL",
            .ERROR_EVENTLOG_FILE_CHANGED => "ERROR_EVENTLOG_FILE_CHANGED",
            .ERROR_CONTAINER_ASSIGNED => "ERROR_CONTAINER_ASSIGNED",
            .ERROR_JOB_NO_CONTAINER => "ERROR_JOB_NO_CONTAINER",
            .ERROR_INVALID_TASK_NAME => "ERROR_INVALID_TASK_NAME",
            .ERROR_INVALID_TASK_INDEX => "ERROR_INVALID_TASK_INDEX",
            .ERROR_THREAD_ALREADY_IN_TASK => "ERROR_THREAD_ALREADY_IN_TASK",
            .ERROR_INSTALL_SERVICE_FAILURE => "ERROR_INSTALL_SERVICE_FAILURE",
            .ERROR_INSTALL_USEREXIT => "ERROR_INSTALL_USEREXIT",
            .ERROR_INSTALL_FAILURE => "ERROR_INSTALL_FAILURE",
            .ERROR_INSTALL_SUSPEND => "ERROR_INSTALL_SUSPEND",
            .ERROR_UNKNOWN_PRODUCT => "ERROR_UNKNOWN_PRODUCT",
            .ERROR_UNKNOWN_FEATURE => "ERROR_UNKNOWN_FEATURE",
            .ERROR_UNKNOWN_COMPONENT => "ERROR_UNKNOWN_COMPONENT",
            .ERROR_UNKNOWN_PROPERTY => "ERROR_UNKNOWN_PROPERTY",
            .ERROR_INVALID_HANDLE_STATE => "ERROR_INVALID_HANDLE_STATE",
            .ERROR_BAD_CONFIGURATION => "ERROR_BAD_CONFIGURATION",
            .ERROR_INDEX_ABSENT => "ERROR_INDEX_ABSENT",
            .ERROR_INSTALL_SOURCE_ABSENT => "ERROR_INSTALL_SOURCE_ABSENT",
            .ERROR_INSTALL_PACKAGE_VERSION => "ERROR_INSTALL_PACKAGE_VERSION",
            .ERROR_PRODUCT_UNINSTALLED => "ERROR_PRODUCT_UNINSTALLED",
            .ERROR_BAD_QUERY_SYNTAX => "ERROR_BAD_QUERY_SYNTAX",
            .ERROR_INVALID_FIELD => "ERROR_INVALID_FIELD",
            .ERROR_DEVICE_REMOVED => "ERROR_DEVICE_REMOVED",
            .ERROR_INSTALL_ALREADY_RUNNING => "ERROR_INSTALL_ALREADY_RUNNING",
            .ERROR_INSTALL_PACKAGE_OPEN_FAILED => "ERROR_INSTALL_PACKAGE_OPEN_FAILED",
            .ERROR_INSTALL_PACKAGE_INVALID => "ERROR_INSTALL_PACKAGE_INVALID",
            .ERROR_INSTALL_UI_FAILURE => "ERROR_INSTALL_UI_FAILURE",
            .ERROR_INSTALL_LOG_FAILURE => "ERROR_INSTALL_LOG_FAILURE",
            .ERROR_INSTALL_LANGUAGE_UNSUPPORTED => "ERROR_INSTALL_LANGUAGE_UNSUPPORTED",
            .ERROR_INSTALL_TRANSFORM_FAILURE => "ERROR_INSTALL_TRANSFORM_FAILURE",
            .ERROR_INSTALL_PACKAGE_REJECTED => "ERROR_INSTALL_PACKAGE_REJECTED",
            .ERROR_FUNCTION_NOT_CALLED => "ERROR_FUNCTION_NOT_CALLED",
            .ERROR_FUNCTION_FAILED => "ERROR_FUNCTION_FAILED",
            .ERROR_INVALID_TABLE => "ERROR_INVALID_TABLE",
            .ERROR_DATATYPE_MISMATCH => "ERROR_DATATYPE_MISMATCH",
            .ERROR_UNSUPPORTED_TYPE => "ERROR_UNSUPPORTED_TYPE",
            .ERROR_CREATE_FAILED => "ERROR_CREATE_FAILED",
            .ERROR_INSTALL_TEMP_UNWRITABLE => "ERROR_INSTALL_TEMP_UNWRITABLE",
            .ERROR_INSTALL_PLATFORM_UNSUPPORTED => "ERROR_INSTALL_PLATFORM_UNSUPPORTED",
            .ERROR_INSTALL_NOTUSED => "ERROR_INSTALL_NOTUSED",
            .ERROR_PATCH_PACKAGE_OPEN_FAILED => "ERROR_PATCH_PACKAGE_OPEN_FAILED",
            .ERROR_PATCH_PACKAGE_INVALID => "ERROR_PATCH_PACKAGE_INVALID",
            .ERROR_PATCH_PACKAGE_UNSUPPORTED => "ERROR_PATCH_PACKAGE_UNSUPPORTED",
            .ERROR_PRODUCT_VERSION => "ERROR_PRODUCT_VERSION",
            .ERROR_INVALID_COMMAND_LINE => "ERROR_INVALID_COMMAND_LINE",
            .ERROR_INSTALL_REMOTE_DISALLOWED => "ERROR_INSTALL_REMOTE_DISALLOWED",
            .ERROR_SUCCESS_REBOOT_INITIATED => "ERROR_SUCCESS_REBOOT_INITIATED",
            .ERROR_PATCH_TARGET_NOT_FOUND => "ERROR_PATCH_TARGET_NOT_FOUND",
            .ERROR_PATCH_PACKAGE_REJECTED => "ERROR_PATCH_PACKAGE_REJECTED",
            .ERROR_INSTALL_TRANSFORM_REJECTED => "ERROR_INSTALL_TRANSFORM_REJECTED",
            .ERROR_INSTALL_REMOTE_PROHIBITED => "ERROR_INSTALL_REMOTE_PROHIBITED",
            .ERROR_PATCH_REMOVAL_UNSUPPORTED => "ERROR_PATCH_REMOVAL_UNSUPPORTED",
            .ERROR_UNKNOWN_PATCH => "ERROR_UNKNOWN_PATCH",
            .ERROR_PATCH_NO_SEQUENCE => "ERROR_PATCH_NO_SEQUENCE",
            .ERROR_PATCH_REMOVAL_DISALLOWED => "ERROR_PATCH_REMOVAL_DISALLOWED",
            .ERROR_INVALID_PATCH_XML => "ERROR_INVALID_PATCH_XML",
            .ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT => "ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT",
            .ERROR_INSTALL_SERVICE_SAFEBOOT => "ERROR_INSTALL_SERVICE_SAFEBOOT",
            .ERROR_FAIL_FAST_EXCEPTION => "ERROR_FAIL_FAST_EXCEPTION",
            .ERROR_INSTALL_REJECTED => "ERROR_INSTALL_REJECTED",
            .ERROR_DYNAMIC_CODE_BLOCKED => "ERROR_DYNAMIC_CODE_BLOCKED",
            .ERROR_NOT_SAME_OBJECT => "ERROR_NOT_SAME_OBJECT",
            .ERROR_STRICT_CFG_VIOLATION => "ERROR_STRICT_CFG_VIOLATION",
            .ERROR_SET_CONTEXT_DENIED => "ERROR_SET_CONTEXT_DENIED",
            .ERROR_CROSS_PARTITION_VIOLATION => "ERROR_CROSS_PARTITION_VIOLATION",
            .ERROR_RETURN_ADDRESS_HIJACK_ATTEMPT => "ERROR_RETURN_ADDRESS_HIJACK_ATTEMPT",
            .ERROR_INVALID_USER_BUFFER => "ERROR_INVALID_USER_BUFFER",
            .ERROR_UNRECOGNIZED_MEDIA => "ERROR_UNRECOGNIZED_MEDIA",
            .ERROR_NO_TRUST_LSA_SECRET => "ERROR_NO_TRUST_LSA_SECRET",
            .ERROR_NO_TRUST_SAM_ACCOUNT => "ERROR_NO_TRUST_SAM_ACCOUNT",
            .ERROR_TRUSTED_DOMAIN_FAILURE => "ERROR_TRUSTED_DOMAIN_FAILURE",
            .ERROR_TRUSTED_RELATIONSHIP_FAILURE => "ERROR_TRUSTED_RELATIONSHIP_FAILURE",
            .ERROR_TRUST_FAILURE => "ERROR_TRUST_FAILURE",
            .ERROR_NETLOGON_NOT_STARTED => "ERROR_NETLOGON_NOT_STARTED",
            .ERROR_ACCOUNT_EXPIRED => "ERROR_ACCOUNT_EXPIRED",
            .ERROR_REDIRECTOR_HAS_OPEN_HANDLES => "ERROR_REDIRECTOR_HAS_OPEN_HANDLES",
            .ERROR_PRINTER_DRIVER_ALREADY_INSTALLED => "ERROR_PRINTER_DRIVER_ALREADY_INSTALLED",
            .ERROR_UNKNOWN_PORT => "ERROR_UNKNOWN_PORT",
            .ERROR_UNKNOWN_PRINTER_DRIVER => "ERROR_UNKNOWN_PRINTER_DRIVER",
            .ERROR_UNKNOWN_PRINTPROCESSOR => "ERROR_UNKNOWN_PRINTPROCESSOR",
            .ERROR_INVALID_SEPARATOR_FILE => "ERROR_INVALID_SEPARATOR_FILE",
            .ERROR_INVALID_PRIORITY => "ERROR_INVALID_PRIORITY",
            .ERROR_INVALID_PRINTER_NAME => "ERROR_INVALID_PRINTER_NAME",
            .ERROR_PRINTER_ALREADY_EXISTS => "ERROR_PRINTER_ALREADY_EXISTS",
            .ERROR_INVALID_PRINTER_COMMAND => "ERROR_INVALID_PRINTER_COMMAND",
            .ERROR_INVALID_DATATYPE => "ERROR_INVALID_DATATYPE",
            .ERROR_INVALID_ENVIRONMENT => "ERROR_INVALID_ENVIRONMENT",
            .ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT => "ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT",
            .ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT => "ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT",
            .ERROR_NOLOGON_SERVER_TRUST_ACCOUNT => "ERROR_NOLOGON_SERVER_TRUST_ACCOUNT",
            .ERROR_DOMAIN_TRUST_INCONSISTENT => "ERROR_DOMAIN_TRUST_INCONSISTENT",
            .ERROR_SERVER_HAS_OPEN_HANDLES => "ERROR_SERVER_HAS_OPEN_HANDLES",
            .ERROR_RESOURCE_DATA_NOT_FOUND => "ERROR_RESOURCE_DATA_NOT_FOUND",
            .ERROR_RESOURCE_TYPE_NOT_FOUND => "ERROR_RESOURCE_TYPE_NOT_FOUND",
            .ERROR_RESOURCE_NAME_NOT_FOUND => "ERROR_RESOURCE_NAME_NOT_FOUND",
            .ERROR_RESOURCE_LANG_NOT_FOUND => "ERROR_RESOURCE_LANG_NOT_FOUND",
            .ERROR_NOT_ENOUGH_QUOTA => "ERROR_NOT_ENOUGH_QUOTA",
            .ERROR_INVALID_TIME => "ERROR_INVALID_TIME",
            .ERROR_INVALID_FORM_NAME => "ERROR_INVALID_FORM_NAME",
            .ERROR_INVALID_FORM_SIZE => "ERROR_INVALID_FORM_SIZE",
            .ERROR_ALREADY_WAITING => "ERROR_ALREADY_WAITING",
            .ERROR_PRINTER_DELETED => "ERROR_PRINTER_DELETED",
            .ERROR_INVALID_PRINTER_STATE => "ERROR_INVALID_PRINTER_STATE",
            .ERROR_PASSWORD_MUST_CHANGE => "ERROR_PASSWORD_MUST_CHANGE",
            .ERROR_DOMAIN_CONTROLLER_NOT_FOUND => "ERROR_DOMAIN_CONTROLLER_NOT_FOUND",
            .ERROR_ACCOUNT_LOCKED_OUT => "ERROR_ACCOUNT_LOCKED_OUT",
            .ERROR_NO_SITENAME => "ERROR_NO_SITENAME",
            .ERROR_CANT_ACCESS_FILE => "ERROR_CANT_ACCESS_FILE",
            .ERROR_CANT_RESOLVE_FILENAME => "ERROR_CANT_RESOLVE_FILENAME",
            .ERROR_KM_DRIVER_BLOCKED => "ERROR_KM_DRIVER_BLOCKED",
            .ERROR_CONTEXT_EXPIRED => "ERROR_CONTEXT_EXPIRED",
            .ERROR_PER_USER_TRUST_QUOTA_EXCEEDED => "ERROR_PER_USER_TRUST_QUOTA_EXCEEDED",
            .ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED => "ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED",
            .ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED => "ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED",
            .ERROR_AUTHENTICATION_FIREWALL_FAILED => "ERROR_AUTHENTICATION_FIREWALL_FAILED",
            .ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED => "ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED",
            .ERROR_NTLM_BLOCKED => "ERROR_NTLM_BLOCKED",
            .ERROR_PASSWORD_CHANGE_REQUIRED => "ERROR_PASSWORD_CHANGE_REQUIRED",
            .ERROR_LOST_MODE_LOGON_RESTRICTION => "ERROR_LOST_MODE_LOGON_RESTRICTION",
            .ERROR_INVALID_PIXEL_FORMAT => "ERROR_INVALID_PIXEL_FORMAT",
            .ERROR_BAD_DRIVER => "ERROR_BAD_DRIVER",
            .ERROR_INVALID_WINDOW_STYLE => "ERROR_INVALID_WINDOW_STYLE",
            .ERROR_METAFILE_NOT_SUPPORTED => "ERROR_METAFILE_NOT_SUPPORTED",
            .ERROR_TRANSFORM_NOT_SUPPORTED => "ERROR_TRANSFORM_NOT_SUPPORTED",
            .ERROR_CLIPPING_NOT_SUPPORTED => "ERROR_CLIPPING_NOT_SUPPORTED",
            .ERROR_INVALID_CMM => "ERROR_INVALID_CMM",
            .ERROR_INVALID_PROFILE => "ERROR_INVALID_PROFILE",
            .ERROR_TAG_NOT_FOUND => "ERROR_TAG_NOT_FOUND",
            .ERROR_TAG_NOT_PRESENT => "ERROR_TAG_NOT_PRESENT",
            .ERROR_DUPLICATE_TAG => "ERROR_DUPLICATE_TAG",
            .ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE => "ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE",
            .ERROR_PROFILE_NOT_FOUND => "ERROR_PROFILE_NOT_FOUND",
            .ERROR_INVALID_COLORSPACE => "ERROR_INVALID_COLORSPACE",
            .ERROR_ICM_NOT_ENABLED => "ERROR_ICM_NOT_ENABLED",
            .ERROR_DELETING_ICM_XFORM => "ERROR_DELETING_ICM_XFORM",
            .ERROR_INVALID_TRANSFORM => "ERROR_INVALID_TRANSFORM",
            .ERROR_COLORSPACE_MISMATCH => "ERROR_COLORSPACE_MISMATCH",
            .ERROR_INVALID_COLORINDEX => "ERROR_INVALID_COLORINDEX",
            .ERROR_PROFILE_DOES_NOT_MATCH_DEVICE => "ERROR_PROFILE_DOES_NOT_MATCH_DEVICE",
            .ERROR_CONNECTED_OTHER_PASSWORD => "ERROR_CONNECTED_OTHER_PASSWORD",
            .ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT => "ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT",
            .ERROR_BAD_USERNAME => "ERROR_BAD_USERNAME",
            .ERROR_NOT_CONNECTED => "ERROR_NOT_CONNECTED",
            .ERROR_OPEN_FILES => "ERROR_OPEN_FILES",
            .ERROR_ACTIVE_CONNECTIONS => "ERROR_ACTIVE_CONNECTIONS",
            .ERROR_DEVICE_IN_USE => "ERROR_DEVICE_IN_USE",
            .ERROR_UNKNOWN_PRINT_MONITOR => "ERROR_UNKNOWN_PRINT_MONITOR",
            .ERROR_PRINTER_DRIVER_IN_USE => "ERROR_PRINTER_DRIVER_IN_USE",
            .ERROR_SPOOL_FILE_NOT_FOUND => "ERROR_SPOOL_FILE_NOT_FOUND",
            .ERROR_SPL_NO_STARTDOC => "ERROR_SPL_NO_STARTDOC",
            .ERROR_SPL_NO_ADDJOB => "ERROR_SPL_NO_ADDJOB",
            .ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED => "ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED",
            .ERROR_PRINT_MONITOR_ALREADY_INSTALLED => "ERROR_PRINT_MONITOR_ALREADY_INSTALLED",
            .ERROR_INVALID_PRINT_MONITOR => "ERROR_INVALID_PRINT_MONITOR",
            .ERROR_PRINT_MONITOR_IN_USE => "ERROR_PRINT_MONITOR_IN_USE",
            .ERROR_PRINTER_HAS_JOBS_QUEUED => "ERROR_PRINTER_HAS_JOBS_QUEUED",
            .ERROR_SUCCESS_REBOOT_REQUIRED => "ERROR_SUCCESS_REBOOT_REQUIRED",
            .ERROR_SUCCESS_RESTART_REQUIRED => "ERROR_SUCCESS_RESTART_REQUIRED",
            .ERROR_PRINTER_NOT_FOUND => "ERROR_PRINTER_NOT_FOUND",
            .ERROR_PRINTER_DRIVER_WARNED => "ERROR_PRINTER_DRIVER_WARNED",
            .ERROR_PRINTER_DRIVER_BLOCKED => "ERROR_PRINTER_DRIVER_BLOCKED",
            .ERROR_PRINTER_DRIVER_PACKAGE_IN_USE => "ERROR_PRINTER_DRIVER_PACKAGE_IN_USE",
            .ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND => "ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND",
            .ERROR_FAIL_REBOOT_REQUIRED => "ERROR_FAIL_REBOOT_REQUIRED",
            .ERROR_FAIL_REBOOT_INITIATED => "ERROR_FAIL_REBOOT_INITIATED",
            .ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED => "ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED",
            .ERROR_PRINT_JOB_RESTART_REQUIRED => "ERROR_PRINT_JOB_RESTART_REQUIRED",
            .ERROR_INVALID_PRINTER_DRIVER_MANIFEST => "ERROR_INVALID_PRINTER_DRIVER_MANIFEST",
            .ERROR_PRINTER_NOT_SHAREABLE => "ERROR_PRINTER_NOT_SHAREABLE",
            .ERROR_REQUEST_PAUSED => "ERROR_REQUEST_PAUSED",
            .ERROR_APPEXEC_CONDITION_NOT_SATISFIED => "ERROR_APPEXEC_CONDITION_NOT_SATISFIED",
            .ERROR_APPEXEC_HANDLE_INVALIDATED => "ERROR_APPEXEC_HANDLE_INVALIDATED",
            .ERROR_APPEXEC_INVALID_HOST_GENERATION => "ERROR_APPEXEC_INVALID_HOST_GENERATION",
            .ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION => "ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION",
            .ERROR_APPEXEC_INVALID_HOST_STATE => "ERROR_APPEXEC_INVALID_HOST_STATE",
            .ERROR_APPEXEC_NO_DONOR => "ERROR_APPEXEC_NO_DONOR",
            .ERROR_APPEXEC_HOST_ID_MISMATCH => "ERROR_APPEXEC_HOST_ID_MISMATCH",
            .ERROR_APPEXEC_UNKNOWN_USER => "ERROR_APPEXEC_UNKNOWN_USER",
            .ERROR_APPEXEC_APP_COMPAT_BLOCK => "ERROR_APPEXEC_APP_COMPAT_BLOCK",
            .ERROR_APPEXEC_CALLER_WAIT_TIMEOUT => "ERROR_APPEXEC_CALLER_WAIT_TIMEOUT",
            .ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_TERMINATION => "ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_TERMINATION",
            .ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_LICENSING => "ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_LICENSING",
            .ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_RESOURCES => "ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_RESOURCES",
            .ERROR_VRF_VOLATILE_CFG_AND_IO_ENABLED => "ERROR_VRF_VOLATILE_CFG_AND_IO_ENABLED",
            .ERROR_VRF_VOLATILE_NOT_STOPPABLE => "ERROR_VRF_VOLATILE_NOT_STOPPABLE",
            .ERROR_VRF_VOLATILE_SAFE_MODE => "ERROR_VRF_VOLATILE_SAFE_MODE",
            .ERROR_VRF_VOLATILE_NOT_RUNNABLE_SYSTEM => "ERROR_VRF_VOLATILE_NOT_RUNNABLE_SYSTEM",
            .ERROR_VRF_VOLATILE_NOT_SUPPORTED_RULECLASS => "ERROR_VRF_VOLATILE_NOT_SUPPORTED_RULECLASS",
            .ERROR_VRF_VOLATILE_PROTECTED_DRIVER => "ERROR_VRF_VOLATILE_PROTECTED_DRIVER",
            .ERROR_VRF_VOLATILE_NMI_REGISTERED => "ERROR_VRF_VOLATILE_NMI_REGISTERED",
            .ERROR_VRF_VOLATILE_SETTINGS_CONFLICT => "ERROR_VRF_VOLATILE_SETTINGS_CONFLICT",
            .ERROR_DIF_IOCALLBACK_NOT_REPLACED => "ERROR_DIF_IOCALLBACK_NOT_REPLACED",
            .ERROR_DIF_LIVEDUMP_LIMIT_EXCEEDED => "ERROR_DIF_LIVEDUMP_LIMIT_EXCEEDED",
            .ERROR_DIF_VOLATILE_SECTION_NOT_LOCKED => "ERROR_DIF_VOLATILE_SECTION_NOT_LOCKED",
            .ERROR_DIF_VOLATILE_DRIVER_HOTPATCHED => "ERROR_DIF_VOLATILE_DRIVER_HOTPATCHED",
            .ERROR_DIF_VOLATILE_INVALID_INFO => "ERROR_DIF_VOLATILE_INVALID_INFO",
            .ERROR_DIF_VOLATILE_DRIVER_IS_NOT_RUNNING => "ERROR_DIF_VOLATILE_DRIVER_IS_NOT_RUNNING",
            .ERROR_DIF_VOLATILE_PLUGIN_IS_NOT_RUNNING => "ERROR_DIF_VOLATILE_PLUGIN_IS_NOT_RUNNING",
            .ERROR_DIF_VOLATILE_PLUGIN_CHANGE_NOT_ALLOWED => "ERROR_DIF_VOLATILE_PLUGIN_CHANGE_NOT_ALLOWED",
            .ERROR_DIF_VOLATILE_NOT_ALLOWED => "ERROR_DIF_VOLATILE_NOT_ALLOWED",
            .ERROR_DIF_BINDING_API_NOT_FOUND => "ERROR_DIF_BINDING_API_NOT_FOUND",
            .ERROR_IO_REISSUE_AS_CACHED => "ERROR_IO_REISSUE_AS_CACHED",
            .ERROR_WINS_INTERNAL => "ERROR_WINS_INTERNAL",
            .ERROR_CAN_NOT_DEL_LOCAL_WINS => "ERROR_CAN_NOT_DEL_LOCAL_WINS",
            .ERROR_STATIC_INIT => "ERROR_STATIC_INIT",
            .ERROR_INC_BACKUP => "ERROR_INC_BACKUP",
            .ERROR_FULL_BACKUP => "ERROR_FULL_BACKUP",
            .ERROR_REC_NON_EXISTENT => "ERROR_REC_NON_EXISTENT",
            .ERROR_RPL_NOT_ALLOWED => "ERROR_RPL_NOT_ALLOWED",
            .ERROR_DHCP_ADDRESS_CONFLICT => "ERROR_DHCP_ADDRESS_CONFLICT",
            .ERROR_WMI_GUID_NOT_FOUND => "ERROR_WMI_GUID_NOT_FOUND",
            .ERROR_WMI_INSTANCE_NOT_FOUND => "ERROR_WMI_INSTANCE_NOT_FOUND",
            .ERROR_WMI_ITEMID_NOT_FOUND => "ERROR_WMI_ITEMID_NOT_FOUND",
            .ERROR_WMI_TRY_AGAIN => "ERROR_WMI_TRY_AGAIN",
            .ERROR_WMI_DP_NOT_FOUND => "ERROR_WMI_DP_NOT_FOUND",
            .ERROR_WMI_UNRESOLVED_INSTANCE_REF => "ERROR_WMI_UNRESOLVED_INSTANCE_REF",
            .ERROR_WMI_ALREADY_ENABLED => "ERROR_WMI_ALREADY_ENABLED",
            .ERROR_WMI_GUID_DISCONNECTED => "ERROR_WMI_GUID_DISCONNECTED",
            .ERROR_WMI_SERVER_UNAVAILABLE => "ERROR_WMI_SERVER_UNAVAILABLE",
            .ERROR_WMI_DP_FAILED => "ERROR_WMI_DP_FAILED",
            .ERROR_WMI_INVALID_MOF => "ERROR_WMI_INVALID_MOF",
            .ERROR_WMI_INVALID_REGINFO => "ERROR_WMI_INVALID_REGINFO",
            .ERROR_WMI_ALREADY_DISABLED => "ERROR_WMI_ALREADY_DISABLED",
            .ERROR_WMI_READ_ONLY => "ERROR_WMI_READ_ONLY",
            .ERROR_WMI_SET_FAILURE => "ERROR_WMI_SET_FAILURE",
            .ERROR_NOT_APPCONTAINER => "ERROR_NOT_APPCONTAINER",
            .ERROR_APPCONTAINER_REQUIRED => "ERROR_APPCONTAINER_REQUIRED",
            .ERROR_NOT_SUPPORTED_IN_APPCONTAINER => "ERROR_NOT_SUPPORTED_IN_APPCONTAINER",
            .ERROR_INVALID_PACKAGE_SID_LENGTH => "ERROR_INVALID_PACKAGE_SID_LENGTH",
            .ERROR_INVALID_MEDIA => "ERROR_INVALID_MEDIA",
            .ERROR_INVALID_LIBRARY => "ERROR_INVALID_LIBRARY",
            .ERROR_INVALID_MEDIA_POOL => "ERROR_INVALID_MEDIA_POOL",
            .ERROR_DRIVE_MEDIA_MISMATCH => "ERROR_DRIVE_MEDIA_MISMATCH",
            .ERROR_MEDIA_OFFLINE => "ERROR_MEDIA_OFFLINE",
            .ERROR_LIBRARY_OFFLINE => "ERROR_LIBRARY_OFFLINE",
            .ERROR_EMPTY => "ERROR_EMPTY",
            .ERROR_NOT_EMPTY => "ERROR_NOT_EMPTY",
            .ERROR_MEDIA_UNAVAILABLE => "ERROR_MEDIA_UNAVAILABLE",
            .ERROR_RESOURCE_DISABLED => "ERROR_RESOURCE_DISABLED",
            .ERROR_INVALID_CLEANER => "ERROR_INVALID_CLEANER",
            .ERROR_UNABLE_TO_CLEAN => "ERROR_UNABLE_TO_CLEAN",
            .ERROR_OBJECT_NOT_FOUND => "ERROR_OBJECT_NOT_FOUND",
            .ERROR_DATABASE_FAILURE => "ERROR_DATABASE_FAILURE",
            .ERROR_DATABASE_FULL => "ERROR_DATABASE_FULL",
            .ERROR_MEDIA_INCOMPATIBLE => "ERROR_MEDIA_INCOMPATIBLE",
            .ERROR_RESOURCE_NOT_PRESENT => "ERROR_RESOURCE_NOT_PRESENT",
            .ERROR_INVALID_OPERATION => "ERROR_INVALID_OPERATION",
            .ERROR_MEDIA_NOT_AVAILABLE => "ERROR_MEDIA_NOT_AVAILABLE",
            .ERROR_DEVICE_NOT_AVAILABLE => "ERROR_DEVICE_NOT_AVAILABLE",
            .ERROR_REQUEST_REFUSED => "ERROR_REQUEST_REFUSED",
            .ERROR_INVALID_DRIVE_OBJECT => "ERROR_INVALID_DRIVE_OBJECT",
            .ERROR_LIBRARY_FULL => "ERROR_LIBRARY_FULL",
            .ERROR_MEDIUM_NOT_ACCESSIBLE => "ERROR_MEDIUM_NOT_ACCESSIBLE",
            .ERROR_UNABLE_TO_LOAD_MEDIUM => "ERROR_UNABLE_TO_LOAD_MEDIUM",
            .ERROR_UNABLE_TO_INVENTORY_DRIVE => "ERROR_UNABLE_TO_INVENTORY_DRIVE",
            .ERROR_UNABLE_TO_INVENTORY_SLOT => "ERROR_UNABLE_TO_INVENTORY_SLOT",
            .ERROR_UNABLE_TO_INVENTORY_TRANSPORT => "ERROR_UNABLE_TO_INVENTORY_TRANSPORT",
            .ERROR_TRANSPORT_FULL => "ERROR_TRANSPORT_FULL",
            .ERROR_CONTROLLING_IEPORT => "ERROR_CONTROLLING_IEPORT",
            .ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA => "ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA",
            .ERROR_CLEANER_SLOT_SET => "ERROR_CLEANER_SLOT_SET",
            .ERROR_CLEANER_SLOT_NOT_SET => "ERROR_CLEANER_SLOT_NOT_SET",
            .ERROR_CLEANER_CARTRIDGE_SPENT => "ERROR_CLEANER_CARTRIDGE_SPENT",
            .ERROR_UNEXPECTED_OMID => "ERROR_UNEXPECTED_OMID",
            .ERROR_CANT_DELETE_LAST_ITEM => "ERROR_CANT_DELETE_LAST_ITEM",
            .ERROR_MESSAGE_EXCEEDS_MAX_SIZE => "ERROR_MESSAGE_EXCEEDS_MAX_SIZE",
            .ERROR_VOLUME_CONTAINS_SYS_FILES => "ERROR_VOLUME_CONTAINS_SYS_FILES",
            .ERROR_INDIGENOUS_TYPE => "ERROR_INDIGENOUS_TYPE",
            .ERROR_NO_SUPPORTING_DRIVES => "ERROR_NO_SUPPORTING_DRIVES",
            .ERROR_CLEANER_CARTRIDGE_INSTALLED => "ERROR_CLEANER_CARTRIDGE_INSTALLED",
            .ERROR_IEPORT_FULL => "ERROR_IEPORT_FULL",
            .ERROR_FILE_OFFLINE => "ERROR_FILE_OFFLINE",
            .ERROR_REMOTE_STORAGE_NOT_ACTIVE => "ERROR_REMOTE_STORAGE_NOT_ACTIVE",
            .ERROR_REMOTE_STORAGE_MEDIA_ERROR => "ERROR_REMOTE_STORAGE_MEDIA_ERROR",
            .ERROR_NOT_A_REPARSE_POINT => "ERROR_NOT_A_REPARSE_POINT",
            .ERROR_REPARSE_ATTRIBUTE_CONFLICT => "ERROR_REPARSE_ATTRIBUTE_CONFLICT",
            .ERROR_INVALID_REPARSE_DATA => "ERROR_INVALID_REPARSE_DATA",
            .ERROR_REPARSE_TAG_INVALID => "ERROR_REPARSE_TAG_INVALID",
            .ERROR_REPARSE_TAG_MISMATCH => "ERROR_REPARSE_TAG_MISMATCH",
            .ERROR_REPARSE_POINT_ENCOUNTERED => "ERROR_REPARSE_POINT_ENCOUNTERED",
            .ERROR_APP_DATA_NOT_FOUND => "ERROR_APP_DATA_NOT_FOUND",
            .ERROR_APP_DATA_EXPIRED => "ERROR_APP_DATA_EXPIRED",
            .ERROR_APP_DATA_CORRUPT => "ERROR_APP_DATA_CORRUPT",
            .ERROR_APP_DATA_LIMIT_EXCEEDED => "ERROR_APP_DATA_LIMIT_EXCEEDED",
            .ERROR_APP_DATA_REBOOT_REQUIRED => "ERROR_APP_DATA_REBOOT_REQUIRED",
            .ERROR_SECUREBOOT_ROLLBACK_DETECTED => "ERROR_SECUREBOOT_ROLLBACK_DETECTED",
            .ERROR_SECUREBOOT_POLICY_VIOLATION => "ERROR_SECUREBOOT_POLICY_VIOLATION",
            .ERROR_SECUREBOOT_INVALID_POLICY => "ERROR_SECUREBOOT_INVALID_POLICY",
            .ERROR_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND => "ERROR_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND",
            .ERROR_SECUREBOOT_POLICY_NOT_SIGNED => "ERROR_SECUREBOOT_POLICY_NOT_SIGNED",
            .ERROR_SECUREBOOT_NOT_ENABLED => "ERROR_SECUREBOOT_NOT_ENABLED",
            .ERROR_SECUREBOOT_FILE_REPLACED => "ERROR_SECUREBOOT_FILE_REPLACED",
            .ERROR_SECUREBOOT_POLICY_NOT_AUTHORIZED => "ERROR_SECUREBOOT_POLICY_NOT_AUTHORIZED",
            .ERROR_SECUREBOOT_POLICY_UNKNOWN => "ERROR_SECUREBOOT_POLICY_UNKNOWN",
            .ERROR_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION => "ERROR_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION",
            .ERROR_SECUREBOOT_PLATFORM_ID_MISMATCH => "ERROR_SECUREBOOT_PLATFORM_ID_MISMATCH",
            .ERROR_SECUREBOOT_POLICY_ROLLBACK_DETECTED => "ERROR_SECUREBOOT_POLICY_ROLLBACK_DETECTED",
            .ERROR_SECUREBOOT_POLICY_UPGRADE_MISMATCH => "ERROR_SECUREBOOT_POLICY_UPGRADE_MISMATCH",
            .ERROR_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING => "ERROR_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING",
            .ERROR_SECUREBOOT_NOT_BASE_POLICY => "ERROR_SECUREBOOT_NOT_BASE_POLICY",
            .ERROR_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY => "ERROR_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY",
            .ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED => "ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED",
            .ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED => "ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED",
            .ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED => "ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED",
            .ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED => "ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED",
            .ERROR_ALREADY_HAS_STREAM_ID => "ERROR_ALREADY_HAS_STREAM_ID",
            .ERROR_SMR_GARBAGE_COLLECTION_REQUIRED => "ERROR_SMR_GARBAGE_COLLECTION_REQUIRED",
            .ERROR_WOF_WIM_HEADER_CORRUPT => "ERROR_WOF_WIM_HEADER_CORRUPT",
            .ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT => "ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT",
            .ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT => "ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT",
            .ERROR_OBJECT_IS_IMMUTABLE => "ERROR_OBJECT_IS_IMMUTABLE",
            .ERROR_VOLUME_NOT_SIS_ENABLED => "ERROR_VOLUME_NOT_SIS_ENABLED",
            .ERROR_SYSTEM_INTEGRITY_ROLLBACK_DETECTED => "ERROR_SYSTEM_INTEGRITY_ROLLBACK_DETECTED",
            .ERROR_SYSTEM_INTEGRITY_POLICY_VIOLATION => "ERROR_SYSTEM_INTEGRITY_POLICY_VIOLATION",
            .ERROR_SYSTEM_INTEGRITY_INVALID_POLICY => "ERROR_SYSTEM_INTEGRITY_INVALID_POLICY",
            .ERROR_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED => "ERROR_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED",
            .ERROR_SYSTEM_INTEGRITY_TOO_MANY_POLICIES => "ERROR_SYSTEM_INTEGRITY_TOO_MANY_POLICIES",
            .ERROR_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED => "ERROR_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED",
            .ERROR_SYSTEM_INTEGRITY_REPUTATION_MALICIOUS => "ERROR_SYSTEM_INTEGRITY_REPUTATION_MALICIOUS",
            .ERROR_SYSTEM_INTEGRITY_REPUTATION_PUA => "ERROR_SYSTEM_INTEGRITY_REPUTATION_PUA",
            .ERROR_SYSTEM_INTEGRITY_REPUTATION_DANGEROUS_EXT => "ERROR_SYSTEM_INTEGRITY_REPUTATION_DANGEROUS_EXT",
            .ERROR_SYSTEM_INTEGRITY_REPUTATION_OFFLINE => "ERROR_SYSTEM_INTEGRITY_REPUTATION_OFFLINE",
            .ERROR_VSM_NOT_INITIALIZED => "ERROR_VSM_NOT_INITIALIZED",
            .ERROR_VSM_DMA_PROTECTION_NOT_IN_USE => "ERROR_VSM_DMA_PROTECTION_NOT_IN_USE",
            .ERROR_PLATFORM_MANIFEST_NOT_AUTHORIZED => "ERROR_PLATFORM_MANIFEST_NOT_AUTHORIZED",
            .ERROR_PLATFORM_MANIFEST_INVALID => "ERROR_PLATFORM_MANIFEST_INVALID",
            .ERROR_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED => "ERROR_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED",
            .ERROR_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED => "ERROR_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED",
            .ERROR_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND => "ERROR_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND",
            .ERROR_PLATFORM_MANIFEST_NOT_ACTIVE => "ERROR_PLATFORM_MANIFEST_NOT_ACTIVE",
            .ERROR_PLATFORM_MANIFEST_NOT_SIGNED => "ERROR_PLATFORM_MANIFEST_NOT_SIGNED",
            .ERROR_DEPENDENT_RESOURCE_EXISTS => "ERROR_DEPENDENT_RESOURCE_EXISTS",
            .ERROR_DEPENDENCY_NOT_FOUND => "ERROR_DEPENDENCY_NOT_FOUND",
            .ERROR_DEPENDENCY_ALREADY_EXISTS => "ERROR_DEPENDENCY_ALREADY_EXISTS",
            .ERROR_RESOURCE_NOT_ONLINE => "ERROR_RESOURCE_NOT_ONLINE",
            .ERROR_HOST_NODE_NOT_AVAILABLE => "ERROR_HOST_NODE_NOT_AVAILABLE",
            .ERROR_RESOURCE_NOT_AVAILABLE => "ERROR_RESOURCE_NOT_AVAILABLE",
            .ERROR_RESOURCE_NOT_FOUND => "ERROR_RESOURCE_NOT_FOUND",
            .ERROR_SHUTDOWN_CLUSTER => "ERROR_SHUTDOWN_CLUSTER",
            .ERROR_CANT_EVICT_ACTIVE_NODE => "ERROR_CANT_EVICT_ACTIVE_NODE",
            .ERROR_OBJECT_ALREADY_EXISTS => "ERROR_OBJECT_ALREADY_EXISTS",
            .ERROR_OBJECT_IN_LIST => "ERROR_OBJECT_IN_LIST",
            .ERROR_GROUP_NOT_AVAILABLE => "ERROR_GROUP_NOT_AVAILABLE",
            .ERROR_GROUP_NOT_FOUND => "ERROR_GROUP_NOT_FOUND",
            .ERROR_GROUP_NOT_ONLINE => "ERROR_GROUP_NOT_ONLINE",
            .ERROR_HOST_NODE_NOT_RESOURCE_OWNER => "ERROR_HOST_NODE_NOT_RESOURCE_OWNER",
            .ERROR_HOST_NODE_NOT_GROUP_OWNER => "ERROR_HOST_NODE_NOT_GROUP_OWNER",
            .ERROR_RESMON_CREATE_FAILED => "ERROR_RESMON_CREATE_FAILED",
            .ERROR_RESMON_ONLINE_FAILED => "ERROR_RESMON_ONLINE_FAILED",
            .ERROR_RESOURCE_ONLINE => "ERROR_RESOURCE_ONLINE",
            .ERROR_QUORUM_RESOURCE => "ERROR_QUORUM_RESOURCE",
            .ERROR_NOT_QUORUM_CAPABLE => "ERROR_NOT_QUORUM_CAPABLE",
            .ERROR_CLUSTER_SHUTTING_DOWN => "ERROR_CLUSTER_SHUTTING_DOWN",
            .ERROR_INVALID_STATE => "ERROR_INVALID_STATE",
            .ERROR_RESOURCE_PROPERTIES_STORED => "ERROR_RESOURCE_PROPERTIES_STORED",
            .ERROR_NOT_QUORUM_CLASS => "ERROR_NOT_QUORUM_CLASS",
            .ERROR_CORE_RESOURCE => "ERROR_CORE_RESOURCE",
            .ERROR_QUORUM_RESOURCE_ONLINE_FAILED => "ERROR_QUORUM_RESOURCE_ONLINE_FAILED",
            .ERROR_QUORUMLOG_OPEN_FAILED => "ERROR_QUORUMLOG_OPEN_FAILED",
            .ERROR_CLUSTERLOG_CORRUPT => "ERROR_CLUSTERLOG_CORRUPT",
            .ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE => "ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE",
            .ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE => "ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE",
            .ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND => "ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND",
            .ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE => "ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE",
            .ERROR_QUORUM_OWNER_ALIVE => "ERROR_QUORUM_OWNER_ALIVE",
            .ERROR_NETWORK_NOT_AVAILABLE => "ERROR_NETWORK_NOT_AVAILABLE",
            .ERROR_NODE_NOT_AVAILABLE => "ERROR_NODE_NOT_AVAILABLE",
            .ERROR_ALL_NODES_NOT_AVAILABLE => "ERROR_ALL_NODES_NOT_AVAILABLE",
            .ERROR_RESOURCE_FAILED => "ERROR_RESOURCE_FAILED",
            .ERROR_CLUSTER_INVALID_NODE => "ERROR_CLUSTER_INVALID_NODE",
            .ERROR_CLUSTER_NODE_EXISTS => "ERROR_CLUSTER_NODE_EXISTS",
            .ERROR_CLUSTER_JOIN_IN_PROGRESS => "ERROR_CLUSTER_JOIN_IN_PROGRESS",
            .ERROR_CLUSTER_NODE_NOT_FOUND => "ERROR_CLUSTER_NODE_NOT_FOUND",
            .ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND => "ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND",
            .ERROR_CLUSTER_NETWORK_EXISTS => "ERROR_CLUSTER_NETWORK_EXISTS",
            .ERROR_CLUSTER_NETWORK_NOT_FOUND => "ERROR_CLUSTER_NETWORK_NOT_FOUND",
            .ERROR_CLUSTER_NETINTERFACE_EXISTS => "ERROR_CLUSTER_NETINTERFACE_EXISTS",
            .ERROR_CLUSTER_NETINTERFACE_NOT_FOUND => "ERROR_CLUSTER_NETINTERFACE_NOT_FOUND",
            .ERROR_CLUSTER_INVALID_REQUEST => "ERROR_CLUSTER_INVALID_REQUEST",
            .ERROR_CLUSTER_INVALID_NETWORK_PROVIDER => "ERROR_CLUSTER_INVALID_NETWORK_PROVIDER",
            .ERROR_CLUSTER_NODE_DOWN => "ERROR_CLUSTER_NODE_DOWN",
            .ERROR_CLUSTER_NODE_UNREACHABLE => "ERROR_CLUSTER_NODE_UNREACHABLE",
            .ERROR_CLUSTER_NODE_NOT_MEMBER => "ERROR_CLUSTER_NODE_NOT_MEMBER",
            .ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS => "ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS",
            .ERROR_CLUSTER_INVALID_NETWORK => "ERROR_CLUSTER_INVALID_NETWORK",
            .ERROR_CLUSTER_NODE_UP => "ERROR_CLUSTER_NODE_UP",
            .ERROR_CLUSTER_IPADDR_IN_USE => "ERROR_CLUSTER_IPADDR_IN_USE",
            .ERROR_CLUSTER_NODE_NOT_PAUSED => "ERROR_CLUSTER_NODE_NOT_PAUSED",
            .ERROR_CLUSTER_NO_SECURITY_CONTEXT => "ERROR_CLUSTER_NO_SECURITY_CONTEXT",
            .ERROR_CLUSTER_NETWORK_NOT_INTERNAL => "ERROR_CLUSTER_NETWORK_NOT_INTERNAL",
            .ERROR_CLUSTER_NODE_ALREADY_UP => "ERROR_CLUSTER_NODE_ALREADY_UP",
            .ERROR_CLUSTER_NODE_ALREADY_DOWN => "ERROR_CLUSTER_NODE_ALREADY_DOWN",
            .ERROR_CLUSTER_NETWORK_ALREADY_ONLINE => "ERROR_CLUSTER_NETWORK_ALREADY_ONLINE",
            .ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE => "ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE",
            .ERROR_CLUSTER_NODE_ALREADY_MEMBER => "ERROR_CLUSTER_NODE_ALREADY_MEMBER",
            .ERROR_CLUSTER_LAST_INTERNAL_NETWORK => "ERROR_CLUSTER_LAST_INTERNAL_NETWORK",
            .ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS => "ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS",
            .ERROR_INVALID_OPERATION_ON_QUORUM => "ERROR_INVALID_OPERATION_ON_QUORUM",
            .ERROR_DEPENDENCY_NOT_ALLOWED => "ERROR_DEPENDENCY_NOT_ALLOWED",
            .ERROR_CLUSTER_NODE_PAUSED => "ERROR_CLUSTER_NODE_PAUSED",
            .ERROR_NODE_CANT_HOST_RESOURCE => "ERROR_NODE_CANT_HOST_RESOURCE",
            .ERROR_CLUSTER_NODE_NOT_READY => "ERROR_CLUSTER_NODE_NOT_READY",
            .ERROR_CLUSTER_NODE_SHUTTING_DOWN => "ERROR_CLUSTER_NODE_SHUTTING_DOWN",
            .ERROR_CLUSTER_JOIN_ABORTED => "ERROR_CLUSTER_JOIN_ABORTED",
            .ERROR_CLUSTER_INCOMPATIBLE_VERSIONS => "ERROR_CLUSTER_INCOMPATIBLE_VERSIONS",
            .ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED => "ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED",
            .ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED => "ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED",
            .ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND => "ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND",
            .ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED => "ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED",
            .ERROR_CLUSTER_RESNAME_NOT_FOUND => "ERROR_CLUSTER_RESNAME_NOT_FOUND",
            .ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED => "ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED",
            .ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST => "ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST",
            .ERROR_CLUSTER_DATABASE_SEQMISMATCH => "ERROR_CLUSTER_DATABASE_SEQMISMATCH",
            .ERROR_RESMON_INVALID_STATE => "ERROR_RESMON_INVALID_STATE",
            .ERROR_CLUSTER_GUM_NOT_LOCKER => "ERROR_CLUSTER_GUM_NOT_LOCKER",
            .ERROR_QUORUM_DISK_NOT_FOUND => "ERROR_QUORUM_DISK_NOT_FOUND",
            .ERROR_DATABASE_BACKUP_CORRUPT => "ERROR_DATABASE_BACKUP_CORRUPT",
            .ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT => "ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT",
            .ERROR_RESOURCE_PROPERTY_UNCHANGEABLE => "ERROR_RESOURCE_PROPERTY_UNCHANGEABLE",
            .ERROR_NO_ADMIN_ACCESS_POINT => "ERROR_NO_ADMIN_ACCESS_POINT",
            .ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE => "ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE",
            .ERROR_CLUSTER_QUORUMLOG_NOT_FOUND => "ERROR_CLUSTER_QUORUMLOG_NOT_FOUND",
            .ERROR_CLUSTER_MEMBERSHIP_HALT => "ERROR_CLUSTER_MEMBERSHIP_HALT",
            .ERROR_CLUSTER_INSTANCE_ID_MISMATCH => "ERROR_CLUSTER_INSTANCE_ID_MISMATCH",
            .ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP => "ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP",
            .ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH => "ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH",
            .ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP => "ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP",
            .ERROR_CLUSTER_PARAMETER_MISMATCH => "ERROR_CLUSTER_PARAMETER_MISMATCH",
            .ERROR_NODE_CANNOT_BE_CLUSTERED => "ERROR_NODE_CANNOT_BE_CLUSTERED",
            .ERROR_CLUSTER_WRONG_OS_VERSION => "ERROR_CLUSTER_WRONG_OS_VERSION",
            .ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME => "ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME",
            .ERROR_CLUSCFG_ALREADY_COMMITTED => "ERROR_CLUSCFG_ALREADY_COMMITTED",
            .ERROR_CLUSCFG_ROLLBACK_FAILED => "ERROR_CLUSCFG_ROLLBACK_FAILED",
            .ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT => "ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT",
            .ERROR_CLUSTER_OLD_VERSION => "ERROR_CLUSTER_OLD_VERSION",
            .ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME => "ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME",
            .ERROR_CLUSTER_NO_NET_ADAPTERS => "ERROR_CLUSTER_NO_NET_ADAPTERS",
            .ERROR_CLUSTER_POISONED => "ERROR_CLUSTER_POISONED",
            .ERROR_CLUSTER_GROUP_MOVING => "ERROR_CLUSTER_GROUP_MOVING",
            .ERROR_CLUSTER_RESOURCE_TYPE_BUSY => "ERROR_CLUSTER_RESOURCE_TYPE_BUSY",
            .ERROR_RESOURCE_CALL_TIMED_OUT => "ERROR_RESOURCE_CALL_TIMED_OUT",
            .ERROR_INVALID_CLUSTER_IPV6_ADDRESS => "ERROR_INVALID_CLUSTER_IPV6_ADDRESS",
            .ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION => "ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION",
            .ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS => "ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS",
            .ERROR_CLUSTER_PARTIAL_SEND => "ERROR_CLUSTER_PARTIAL_SEND",
            .ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION => "ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION",
            .ERROR_CLUSTER_INVALID_STRING_TERMINATION => "ERROR_CLUSTER_INVALID_STRING_TERMINATION",
            .ERROR_CLUSTER_INVALID_STRING_FORMAT => "ERROR_CLUSTER_INVALID_STRING_FORMAT",
            .ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS => "ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS",
            .ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS => "ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS",
            .ERROR_CLUSTER_NULL_DATA => "ERROR_CLUSTER_NULL_DATA",
            .ERROR_CLUSTER_PARTIAL_READ => "ERROR_CLUSTER_PARTIAL_READ",
            .ERROR_CLUSTER_PARTIAL_WRITE => "ERROR_CLUSTER_PARTIAL_WRITE",
            .ERROR_CLUSTER_CANT_DESERIALIZE_DATA => "ERROR_CLUSTER_CANT_DESERIALIZE_DATA",
            .ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT => "ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT",
            .ERROR_CLUSTER_NO_QUORUM => "ERROR_CLUSTER_NO_QUORUM",
            .ERROR_CLUSTER_INVALID_IPV6_NETWORK => "ERROR_CLUSTER_INVALID_IPV6_NETWORK",
            .ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK => "ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK",
            .ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP => "ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP",
            .ERROR_DEPENDENCY_TREE_TOO_COMPLEX => "ERROR_DEPENDENCY_TREE_TOO_COMPLEX",
            .ERROR_EXCEPTION_IN_RESOURCE_CALL => "ERROR_EXCEPTION_IN_RESOURCE_CALL",
            .ERROR_CLUSTER_RHS_FAILED_INITIALIZATION => "ERROR_CLUSTER_RHS_FAILED_INITIALIZATION",
            .ERROR_CLUSTER_NOT_INSTALLED => "ERROR_CLUSTER_NOT_INSTALLED",
            .ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE => "ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE",
            .ERROR_CLUSTER_MAX_NODES_IN_CLUSTER => "ERROR_CLUSTER_MAX_NODES_IN_CLUSTER",
            .ERROR_CLUSTER_TOO_MANY_NODES => "ERROR_CLUSTER_TOO_MANY_NODES",
            .ERROR_CLUSTER_OBJECT_ALREADY_USED => "ERROR_CLUSTER_OBJECT_ALREADY_USED",
            .ERROR_NONCORE_GROUPS_FOUND => "ERROR_NONCORE_GROUPS_FOUND",
            .ERROR_FILE_SHARE_RESOURCE_CONFLICT => "ERROR_FILE_SHARE_RESOURCE_CONFLICT",
            .ERROR_CLUSTER_EVICT_INVALID_REQUEST => "ERROR_CLUSTER_EVICT_INVALID_REQUEST",
            .ERROR_CLUSTER_SINGLETON_RESOURCE => "ERROR_CLUSTER_SINGLETON_RESOURCE",
            .ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE => "ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE",
            .ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED => "ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED",
            .ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR => "ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR",
            .ERROR_CLUSTER_GROUP_BUSY => "ERROR_CLUSTER_GROUP_BUSY",
            .ERROR_CLUSTER_NOT_SHARED_VOLUME => "ERROR_CLUSTER_NOT_SHARED_VOLUME",
            .ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR => "ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR",
            .ERROR_CLUSTER_SHARED_VOLUMES_IN_USE => "ERROR_CLUSTER_SHARED_VOLUMES_IN_USE",
            .ERROR_CLUSTER_USE_SHARED_VOLUMES_API => "ERROR_CLUSTER_USE_SHARED_VOLUMES_API",
            .ERROR_CLUSTER_BACKUP_IN_PROGRESS => "ERROR_CLUSTER_BACKUP_IN_PROGRESS",
            .ERROR_NON_CSV_PATH => "ERROR_NON_CSV_PATH",
            .ERROR_CSV_VOLUME_NOT_LOCAL => "ERROR_CSV_VOLUME_NOT_LOCAL",
            .ERROR_CLUSTER_WATCHDOG_TERMINATING => "ERROR_CLUSTER_WATCHDOG_TERMINATING",
            .ERROR_CLUSTER_RESOURCE_VETOED_MOVE_INCOMPATIBLE_NODES => "ERROR_CLUSTER_RESOURCE_VETOED_MOVE_INCOMPATIBLE_NODES",
            .ERROR_CLUSTER_INVALID_NODE_WEIGHT => "ERROR_CLUSTER_INVALID_NODE_WEIGHT",
            .ERROR_CLUSTER_RESOURCE_VETOED_CALL => "ERROR_CLUSTER_RESOURCE_VETOED_CALL",
            .ERROR_RESMON_SYSTEM_RESOURCES_LACKING => "ERROR_RESMON_SYSTEM_RESOURCES_LACKING",
            .ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_DESTINATION => "ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_DESTINATION",
            .ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_SOURCE => "ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_SOURCE",
            .ERROR_CLUSTER_GROUP_QUEUED => "ERROR_CLUSTER_GROUP_QUEUED",
            .ERROR_CLUSTER_RESOURCE_LOCKED_STATUS => "ERROR_CLUSTER_RESOURCE_LOCKED_STATUS",
            .ERROR_CLUSTER_SHARED_VOLUME_FAILOVER_NOT_ALLOWED => "ERROR_CLUSTER_SHARED_VOLUME_FAILOVER_NOT_ALLOWED",
            .ERROR_CLUSTER_NODE_DRAIN_IN_PROGRESS => "ERROR_CLUSTER_NODE_DRAIN_IN_PROGRESS",
            .ERROR_CLUSTER_DISK_NOT_CONNECTED => "ERROR_CLUSTER_DISK_NOT_CONNECTED",
            .ERROR_DISK_NOT_CSV_CAPABLE => "ERROR_DISK_NOT_CSV_CAPABLE",
            .ERROR_RESOURCE_NOT_IN_AVAILABLE_STORAGE => "ERROR_RESOURCE_NOT_IN_AVAILABLE_STORAGE",
            .ERROR_CLUSTER_SHARED_VOLUME_REDIRECTED => "ERROR_CLUSTER_SHARED_VOLUME_REDIRECTED",
            .ERROR_CLUSTER_SHARED_VOLUME_NOT_REDIRECTED => "ERROR_CLUSTER_SHARED_VOLUME_NOT_REDIRECTED",
            .ERROR_CLUSTER_CANNOT_RETURN_PROPERTIES => "ERROR_CLUSTER_CANNOT_RETURN_PROPERTIES",
            .ERROR_CLUSTER_RESOURCE_CONTAINS_UNSUPPORTED_DIFF_AREA_FOR_SHARED_VOLUMES => "ERROR_CLUSTER_RESOURCE_CONTAINS_UNSUPPORTED_DIFF_AREA_FOR_SHARED_VOLUMES",
            .ERROR_CLUSTER_RESOURCE_IS_IN_MAINTENANCE_MODE => "ERROR_CLUSTER_RESOURCE_IS_IN_MAINTENANCE_MODE",
            .ERROR_CLUSTER_AFFINITY_CONFLICT => "ERROR_CLUSTER_AFFINITY_CONFLICT",
            .ERROR_CLUSTER_RESOURCE_IS_REPLICA_VIRTUAL_MACHINE => "ERROR_CLUSTER_RESOURCE_IS_REPLICA_VIRTUAL_MACHINE",
            .ERROR_CLUSTER_UPGRADE_INCOMPATIBLE_VERSIONS => "ERROR_CLUSTER_UPGRADE_INCOMPATIBLE_VERSIONS",
            .ERROR_CLUSTER_UPGRADE_FIX_QUORUM_NOT_SUPPORTED => "ERROR_CLUSTER_UPGRADE_FIX_QUORUM_NOT_SUPPORTED",
            .ERROR_CLUSTER_UPGRADE_RESTART_REQUIRED => "ERROR_CLUSTER_UPGRADE_RESTART_REQUIRED",
            .ERROR_CLUSTER_UPGRADE_IN_PROGRESS => "ERROR_CLUSTER_UPGRADE_IN_PROGRESS",
            .ERROR_CLUSTER_UPGRADE_INCOMPLETE => "ERROR_CLUSTER_UPGRADE_INCOMPLETE",
            .ERROR_CLUSTER_NODE_IN_GRACE_PERIOD => "ERROR_CLUSTER_NODE_IN_GRACE_PERIOD",
            .ERROR_CLUSTER_CSV_IO_PAUSE_TIMEOUT => "ERROR_CLUSTER_CSV_IO_PAUSE_TIMEOUT",
            .ERROR_NODE_NOT_ACTIVE_CLUSTER_MEMBER => "ERROR_NODE_NOT_ACTIVE_CLUSTER_MEMBER",
            .ERROR_CLUSTER_RESOURCE_NOT_MONITORED => "ERROR_CLUSTER_RESOURCE_NOT_MONITORED",
            .ERROR_CLUSTER_RESOURCE_DOES_NOT_SUPPORT_UNMONITORED => "ERROR_CLUSTER_RESOURCE_DOES_NOT_SUPPORT_UNMONITORED",
            .ERROR_CLUSTER_RESOURCE_IS_REPLICATED => "ERROR_CLUSTER_RESOURCE_IS_REPLICATED",
            .ERROR_CLUSTER_NODE_ISOLATED => "ERROR_CLUSTER_NODE_ISOLATED",
            .ERROR_CLUSTER_NODE_QUARANTINED => "ERROR_CLUSTER_NODE_QUARANTINED",
            .ERROR_CLUSTER_DATABASE_UPDATE_CONDITION_FAILED => "ERROR_CLUSTER_DATABASE_UPDATE_CONDITION_FAILED",
            .ERROR_CLUSTER_SPACE_DEGRADED => "ERROR_CLUSTER_SPACE_DEGRADED",
            .ERROR_CLUSTER_TOKEN_DELEGATION_NOT_SUPPORTED => "ERROR_CLUSTER_TOKEN_DELEGATION_NOT_SUPPORTED",
            .ERROR_CLUSTER_CSV_INVALID_HANDLE => "ERROR_CLUSTER_CSV_INVALID_HANDLE",
            .ERROR_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR => "ERROR_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR",
            .ERROR_GROUPSET_NOT_AVAILABLE => "ERROR_GROUPSET_NOT_AVAILABLE",
            .ERROR_GROUPSET_NOT_FOUND => "ERROR_GROUPSET_NOT_FOUND",
            .ERROR_GROUPSET_CANT_PROVIDE => "ERROR_GROUPSET_CANT_PROVIDE",
            .ERROR_CLUSTER_FAULT_DOMAIN_PARENT_NOT_FOUND => "ERROR_CLUSTER_FAULT_DOMAIN_PARENT_NOT_FOUND",
            .ERROR_CLUSTER_FAULT_DOMAIN_INVALID_HIERARCHY => "ERROR_CLUSTER_FAULT_DOMAIN_INVALID_HIERARCHY",
            .ERROR_CLUSTER_FAULT_DOMAIN_FAILED_S2D_VALIDATION => "ERROR_CLUSTER_FAULT_DOMAIN_FAILED_S2D_VALIDATION",
            .ERROR_CLUSTER_FAULT_DOMAIN_S2D_CONNECTIVITY_LOSS => "ERROR_CLUSTER_FAULT_DOMAIN_S2D_CONNECTIVITY_LOSS",
            .ERROR_CLUSTER_INVALID_INFRASTRUCTURE_FILESERVER_NAME => "ERROR_CLUSTER_INVALID_INFRASTRUCTURE_FILESERVER_NAME",
            .ERROR_CLUSTERSET_MANAGEMENT_CLUSTER_UNREACHABLE => "ERROR_CLUSTERSET_MANAGEMENT_CLUSTER_UNREACHABLE",
            .ERROR_ENCRYPTION_FAILED => "ERROR_ENCRYPTION_FAILED",
            .ERROR_DECRYPTION_FAILED => "ERROR_DECRYPTION_FAILED",
            .ERROR_FILE_ENCRYPTED => "ERROR_FILE_ENCRYPTED",
            .ERROR_NO_RECOVERY_POLICY => "ERROR_NO_RECOVERY_POLICY",
            .ERROR_NO_EFS => "ERROR_NO_EFS",
            .ERROR_WRONG_EFS => "ERROR_WRONG_EFS",
            .ERROR_NO_USER_KEYS => "ERROR_NO_USER_KEYS",
            .ERROR_FILE_NOT_ENCRYPTED => "ERROR_FILE_NOT_ENCRYPTED",
            .ERROR_NOT_EXPORT_FORMAT => "ERROR_NOT_EXPORT_FORMAT",
            .ERROR_FILE_READ_ONLY => "ERROR_FILE_READ_ONLY",
            .ERROR_DIR_EFS_DISALLOWED => "ERROR_DIR_EFS_DISALLOWED",
            .ERROR_EFS_SERVER_NOT_TRUSTED => "ERROR_EFS_SERVER_NOT_TRUSTED",
            .ERROR_BAD_RECOVERY_POLICY => "ERROR_BAD_RECOVERY_POLICY",
            .ERROR_EFS_ALG_BLOB_TOO_BIG => "ERROR_EFS_ALG_BLOB_TOO_BIG",
            .ERROR_VOLUME_NOT_SUPPORT_EFS => "ERROR_VOLUME_NOT_SUPPORT_EFS",
            .ERROR_EFS_DISABLED => "ERROR_EFS_DISABLED",
            .ERROR_EFS_VERSION_NOT_SUPPORT => "ERROR_EFS_VERSION_NOT_SUPPORT",
            .ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE => "ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE",
            .ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER => "ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER",
            .ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE => "ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE",
            .ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE => "ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE",
            .ERROR_CS_ENCRYPTION_FILE_NOT_CSE => "ERROR_CS_ENCRYPTION_FILE_NOT_CSE",
            .ERROR_ENCRYPTION_POLICY_DENIES_OPERATION => "ERROR_ENCRYPTION_POLICY_DENIES_OPERATION",
            .ERROR_WIP_ENCRYPTION_FAILED => "ERROR_WIP_ENCRYPTION_FAILED",
            .ERROR_NO_BROWSER_SERVERS_FOUND => "ERROR_NO_BROWSER_SERVERS_FOUND",
            .ERROR_CLUSTER_OBJECT_IS_CLUSTER_SET_VM => "ERROR_CLUSTER_OBJECT_IS_CLUSTER_SET_VM",
            .ERROR_LOG_SECTOR_INVALID => "ERROR_LOG_SECTOR_INVALID",
            .ERROR_LOG_SECTOR_PARITY_INVALID => "ERROR_LOG_SECTOR_PARITY_INVALID",
            .ERROR_LOG_SECTOR_REMAPPED => "ERROR_LOG_SECTOR_REMAPPED",
            .ERROR_LOG_BLOCK_INCOMPLETE => "ERROR_LOG_BLOCK_INCOMPLETE",
            .ERROR_LOG_INVALID_RANGE => "ERROR_LOG_INVALID_RANGE",
            .ERROR_LOG_BLOCKS_EXHAUSTED => "ERROR_LOG_BLOCKS_EXHAUSTED",
            .ERROR_LOG_READ_CONTEXT_INVALID => "ERROR_LOG_READ_CONTEXT_INVALID",
            .ERROR_LOG_RESTART_INVALID => "ERROR_LOG_RESTART_INVALID",
            .ERROR_LOG_BLOCK_VERSION => "ERROR_LOG_BLOCK_VERSION",
            .ERROR_LOG_BLOCK_INVALID => "ERROR_LOG_BLOCK_INVALID",
            .ERROR_LOG_READ_MODE_INVALID => "ERROR_LOG_READ_MODE_INVALID",
            .ERROR_LOG_NO_RESTART => "ERROR_LOG_NO_RESTART",
            .ERROR_LOG_METADATA_CORRUPT => "ERROR_LOG_METADATA_CORRUPT",
            .ERROR_LOG_METADATA_INVALID => "ERROR_LOG_METADATA_INVALID",
            .ERROR_LOG_METADATA_INCONSISTENT => "ERROR_LOG_METADATA_INCONSISTENT",
            .ERROR_LOG_RESERVATION_INVALID => "ERROR_LOG_RESERVATION_INVALID",
            .ERROR_LOG_CANT_DELETE => "ERROR_LOG_CANT_DELETE",
            .ERROR_LOG_CONTAINER_LIMIT_EXCEEDED => "ERROR_LOG_CONTAINER_LIMIT_EXCEEDED",
            .ERROR_LOG_START_OF_LOG => "ERROR_LOG_START_OF_LOG",
            .ERROR_LOG_POLICY_ALREADY_INSTALLED => "ERROR_LOG_POLICY_ALREADY_INSTALLED",
            .ERROR_LOG_POLICY_NOT_INSTALLED => "ERROR_LOG_POLICY_NOT_INSTALLED",
            .ERROR_LOG_POLICY_INVALID => "ERROR_LOG_POLICY_INVALID",
            .ERROR_LOG_POLICY_CONFLICT => "ERROR_LOG_POLICY_CONFLICT",
            .ERROR_LOG_PINNED_ARCHIVE_TAIL => "ERROR_LOG_PINNED_ARCHIVE_TAIL",
            .ERROR_LOG_RECORD_NONEXISTENT => "ERROR_LOG_RECORD_NONEXISTENT",
            .ERROR_LOG_RECORDS_RESERVED_INVALID => "ERROR_LOG_RECORDS_RESERVED_INVALID",
            .ERROR_LOG_SPACE_RESERVED_INVALID => "ERROR_LOG_SPACE_RESERVED_INVALID",
            .ERROR_LOG_TAIL_INVALID => "ERROR_LOG_TAIL_INVALID",
            .ERROR_LOG_FULL => "ERROR_LOG_FULL",
            .ERROR_COULD_NOT_RESIZE_LOG => "ERROR_COULD_NOT_RESIZE_LOG",
            .ERROR_LOG_MULTIPLEXED => "ERROR_LOG_MULTIPLEXED",
            .ERROR_LOG_DEDICATED => "ERROR_LOG_DEDICATED",
            .ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS => "ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS",
            .ERROR_LOG_ARCHIVE_IN_PROGRESS => "ERROR_LOG_ARCHIVE_IN_PROGRESS",
            .ERROR_LOG_EPHEMERAL => "ERROR_LOG_EPHEMERAL",
            .ERROR_LOG_NOT_ENOUGH_CONTAINERS => "ERROR_LOG_NOT_ENOUGH_CONTAINERS",
            .ERROR_LOG_CLIENT_ALREADY_REGISTERED => "ERROR_LOG_CLIENT_ALREADY_REGISTERED",
            .ERROR_LOG_CLIENT_NOT_REGISTERED => "ERROR_LOG_CLIENT_NOT_REGISTERED",
            .ERROR_LOG_FULL_HANDLER_IN_PROGRESS => "ERROR_LOG_FULL_HANDLER_IN_PROGRESS",
            .ERROR_LOG_CONTAINER_READ_FAILED => "ERROR_LOG_CONTAINER_READ_FAILED",
            .ERROR_LOG_CONTAINER_WRITE_FAILED => "ERROR_LOG_CONTAINER_WRITE_FAILED",
            .ERROR_LOG_CONTAINER_OPEN_FAILED => "ERROR_LOG_CONTAINER_OPEN_FAILED",
            .ERROR_LOG_CONTAINER_STATE_INVALID => "ERROR_LOG_CONTAINER_STATE_INVALID",
            .ERROR_LOG_STATE_INVALID => "ERROR_LOG_STATE_INVALID",
            .ERROR_LOG_PINNED => "ERROR_LOG_PINNED",
            .ERROR_LOG_METADATA_FLUSH_FAILED => "ERROR_LOG_METADATA_FLUSH_FAILED",
            .ERROR_LOG_INCONSISTENT_SECURITY => "ERROR_LOG_INCONSISTENT_SECURITY",
            .ERROR_LOG_APPENDED_FLUSH_FAILED => "ERROR_LOG_APPENDED_FLUSH_FAILED",
            .ERROR_LOG_PINNED_RESERVATION => "ERROR_LOG_PINNED_RESERVATION",
            .ERROR_INVALID_TRANSACTION => "ERROR_INVALID_TRANSACTION",
            .ERROR_TRANSACTION_NOT_ACTIVE => "ERROR_TRANSACTION_NOT_ACTIVE",
            .ERROR_TRANSACTION_REQUEST_NOT_VALID => "ERROR_TRANSACTION_REQUEST_NOT_VALID",
            .ERROR_TRANSACTION_NOT_REQUESTED => "ERROR_TRANSACTION_NOT_REQUESTED",
            .ERROR_TRANSACTION_ALREADY_ABORTED => "ERROR_TRANSACTION_ALREADY_ABORTED",
            .ERROR_TRANSACTION_ALREADY_COMMITTED => "ERROR_TRANSACTION_ALREADY_COMMITTED",
            .ERROR_TM_INITIALIZATION_FAILED => "ERROR_TM_INITIALIZATION_FAILED",
            .ERROR_RESOURCEMANAGER_READ_ONLY => "ERROR_RESOURCEMANAGER_READ_ONLY",
            .ERROR_TRANSACTION_NOT_JOINED => "ERROR_TRANSACTION_NOT_JOINED",
            .ERROR_TRANSACTION_SUPERIOR_EXISTS => "ERROR_TRANSACTION_SUPERIOR_EXISTS",
            .ERROR_CRM_PROTOCOL_ALREADY_EXISTS => "ERROR_CRM_PROTOCOL_ALREADY_EXISTS",
            .ERROR_TRANSACTION_PROPAGATION_FAILED => "ERROR_TRANSACTION_PROPAGATION_FAILED",
            .ERROR_CRM_PROTOCOL_NOT_FOUND => "ERROR_CRM_PROTOCOL_NOT_FOUND",
            .ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER => "ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER",
            .ERROR_CURRENT_TRANSACTION_NOT_VALID => "ERROR_CURRENT_TRANSACTION_NOT_VALID",
            .ERROR_TRANSACTION_NOT_FOUND => "ERROR_TRANSACTION_NOT_FOUND",
            .ERROR_RESOURCEMANAGER_NOT_FOUND => "ERROR_RESOURCEMANAGER_NOT_FOUND",
            .ERROR_ENLISTMENT_NOT_FOUND => "ERROR_ENLISTMENT_NOT_FOUND",
            .ERROR_TRANSACTIONMANAGER_NOT_FOUND => "ERROR_TRANSACTIONMANAGER_NOT_FOUND",
            .ERROR_TRANSACTIONMANAGER_NOT_ONLINE => "ERROR_TRANSACTIONMANAGER_NOT_ONLINE",
            .ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION => "ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION",
            .ERROR_TRANSACTION_NOT_ROOT => "ERROR_TRANSACTION_NOT_ROOT",
            .ERROR_TRANSACTION_OBJECT_EXPIRED => "ERROR_TRANSACTION_OBJECT_EXPIRED",
            .ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED => "ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED",
            .ERROR_TRANSACTION_RECORD_TOO_LONG => "ERROR_TRANSACTION_RECORD_TOO_LONG",
            .ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED => "ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED",
            .ERROR_TRANSACTION_INTEGRITY_VIOLATED => "ERROR_TRANSACTION_INTEGRITY_VIOLATED",
            .ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH => "ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH",
            .ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT => "ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT",
            .ERROR_TRANSACTION_MUST_WRITETHROUGH => "ERROR_TRANSACTION_MUST_WRITETHROUGH",
            .ERROR_TRANSACTION_NO_SUPERIOR => "ERROR_TRANSACTION_NO_SUPERIOR",
            .ERROR_HEURISTIC_DAMAGE_POSSIBLE => "ERROR_HEURISTIC_DAMAGE_POSSIBLE",
            .ERROR_TRANSACTIONAL_CONFLICT => "ERROR_TRANSACTIONAL_CONFLICT",
            .ERROR_RM_NOT_ACTIVE => "ERROR_RM_NOT_ACTIVE",
            .ERROR_RM_METADATA_CORRUPT => "ERROR_RM_METADATA_CORRUPT",
            .ERROR_DIRECTORY_NOT_RM => "ERROR_DIRECTORY_NOT_RM",
            .ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE => "ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE",
            .ERROR_LOG_RESIZE_INVALID_SIZE => "ERROR_LOG_RESIZE_INVALID_SIZE",
            .ERROR_OBJECT_NO_LONGER_EXISTS => "ERROR_OBJECT_NO_LONGER_EXISTS",
            .ERROR_STREAM_MINIVERSION_NOT_FOUND => "ERROR_STREAM_MINIVERSION_NOT_FOUND",
            .ERROR_STREAM_MINIVERSION_NOT_VALID => "ERROR_STREAM_MINIVERSION_NOT_VALID",
            .ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION => "ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION",
            .ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT => "ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT",
            .ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS => "ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS",
            .ERROR_REMOTE_FILE_VERSION_MISMATCH => "ERROR_REMOTE_FILE_VERSION_MISMATCH",
            .ERROR_HANDLE_NO_LONGER_VALID => "ERROR_HANDLE_NO_LONGER_VALID",
            .ERROR_NO_TXF_METADATA => "ERROR_NO_TXF_METADATA",
            .ERROR_LOG_CORRUPTION_DETECTED => "ERROR_LOG_CORRUPTION_DETECTED",
            .ERROR_CANT_RECOVER_WITH_HANDLE_OPEN => "ERROR_CANT_RECOVER_WITH_HANDLE_OPEN",
            .ERROR_RM_DISCONNECTED => "ERROR_RM_DISCONNECTED",
            .ERROR_ENLISTMENT_NOT_SUPERIOR => "ERROR_ENLISTMENT_NOT_SUPERIOR",
            .ERROR_RECOVERY_NOT_NEEDED => "ERROR_RECOVERY_NOT_NEEDED",
            .ERROR_RM_ALREADY_STARTED => "ERROR_RM_ALREADY_STARTED",
            .ERROR_FILE_IDENTITY_NOT_PERSISTENT => "ERROR_FILE_IDENTITY_NOT_PERSISTENT",
            .ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY => "ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY",
            .ERROR_CANT_CROSS_RM_BOUNDARY => "ERROR_CANT_CROSS_RM_BOUNDARY",
            .ERROR_TXF_DIR_NOT_EMPTY => "ERROR_TXF_DIR_NOT_EMPTY",
            .ERROR_INDOUBT_TRANSACTIONS_EXIST => "ERROR_INDOUBT_TRANSACTIONS_EXIST",
            .ERROR_TM_VOLATILE => "ERROR_TM_VOLATILE",
            .ERROR_ROLLBACK_TIMER_EXPIRED => "ERROR_ROLLBACK_TIMER_EXPIRED",
            .ERROR_TXF_ATTRIBUTE_CORRUPT => "ERROR_TXF_ATTRIBUTE_CORRUPT",
            .ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION => "ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION",
            .ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED => "ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED",
            .ERROR_LOG_GROWTH_FAILED => "ERROR_LOG_GROWTH_FAILED",
            .ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE => "ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE",
            .ERROR_TXF_METADATA_ALREADY_PRESENT => "ERROR_TXF_METADATA_ALREADY_PRESENT",
            .ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET => "ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET",
            .ERROR_TRANSACTION_REQUIRED_PROMOTION => "ERROR_TRANSACTION_REQUIRED_PROMOTION",
            .ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION => "ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION",
            .ERROR_TRANSACTIONS_NOT_FROZEN => "ERROR_TRANSACTIONS_NOT_FROZEN",
            .ERROR_TRANSACTION_FREEZE_IN_PROGRESS => "ERROR_TRANSACTION_FREEZE_IN_PROGRESS",
            .ERROR_NOT_SNAPSHOT_VOLUME => "ERROR_NOT_SNAPSHOT_VOLUME",
            .ERROR_NO_SAVEPOINT_WITH_OPEN_FILES => "ERROR_NO_SAVEPOINT_WITH_OPEN_FILES",
            .ERROR_DATA_LOST_REPAIR => "ERROR_DATA_LOST_REPAIR",
            .ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION => "ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION",
            .ERROR_TM_IDENTITY_MISMATCH => "ERROR_TM_IDENTITY_MISMATCH",
            .ERROR_FLOATED_SECTION => "ERROR_FLOATED_SECTION",
            .ERROR_CANNOT_ACCEPT_TRANSACTED_WORK => "ERROR_CANNOT_ACCEPT_TRANSACTED_WORK",
            .ERROR_CANNOT_ABORT_TRANSACTIONS => "ERROR_CANNOT_ABORT_TRANSACTIONS",
            .ERROR_BAD_CLUSTERS => "ERROR_BAD_CLUSTERS",
            .ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION => "ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION",
            .ERROR_VOLUME_DIRTY => "ERROR_VOLUME_DIRTY",
            .ERROR_NO_LINK_TRACKING_IN_TRANSACTION => "ERROR_NO_LINK_TRACKING_IN_TRANSACTION",
            .ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION => "ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION",
            .ERROR_EXPIRED_HANDLE => "ERROR_EXPIRED_HANDLE",
            .ERROR_TRANSACTION_NOT_ENLISTED => "ERROR_TRANSACTION_NOT_ENLISTED",
            .ERROR_CTX_WINSTATION_NAME_INVALID => "ERROR_CTX_WINSTATION_NAME_INVALID",
            .ERROR_CTX_INVALID_PD => "ERROR_CTX_INVALID_PD",
            .ERROR_CTX_PD_NOT_FOUND => "ERROR_CTX_PD_NOT_FOUND",
            .ERROR_CTX_WD_NOT_FOUND => "ERROR_CTX_WD_NOT_FOUND",
            .ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY => "ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY",
            .ERROR_CTX_SERVICE_NAME_COLLISION => "ERROR_CTX_SERVICE_NAME_COLLISION",
            .ERROR_CTX_CLOSE_PENDING => "ERROR_CTX_CLOSE_PENDING",
            .ERROR_CTX_NO_OUTBUF => "ERROR_CTX_NO_OUTBUF",
            .ERROR_CTX_MODEM_INF_NOT_FOUND => "ERROR_CTX_MODEM_INF_NOT_FOUND",
            .ERROR_CTX_INVALID_MODEMNAME => "ERROR_CTX_INVALID_MODEMNAME",
            .ERROR_CTX_MODEM_RESPONSE_ERROR => "ERROR_CTX_MODEM_RESPONSE_ERROR",
            .ERROR_CTX_MODEM_RESPONSE_TIMEOUT => "ERROR_CTX_MODEM_RESPONSE_TIMEOUT",
            .ERROR_CTX_MODEM_RESPONSE_NO_CARRIER => "ERROR_CTX_MODEM_RESPONSE_NO_CARRIER",
            .ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE => "ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE",
            .ERROR_CTX_MODEM_RESPONSE_BUSY => "ERROR_CTX_MODEM_RESPONSE_BUSY",
            .ERROR_CTX_MODEM_RESPONSE_VOICE => "ERROR_CTX_MODEM_RESPONSE_VOICE",
            .ERROR_CTX_TD_ERROR => "ERROR_CTX_TD_ERROR",
            .ERROR_CTX_WINSTATION_NOT_FOUND => "ERROR_CTX_WINSTATION_NOT_FOUND",
            .ERROR_CTX_WINSTATION_ALREADY_EXISTS => "ERROR_CTX_WINSTATION_ALREADY_EXISTS",
            .ERROR_CTX_WINSTATION_BUSY => "ERROR_CTX_WINSTATION_BUSY",
            .ERROR_CTX_BAD_VIDEO_MODE => "ERROR_CTX_BAD_VIDEO_MODE",
            .ERROR_CTX_GRAPHICS_INVALID => "ERROR_CTX_GRAPHICS_INVALID",
            .ERROR_CTX_LOGON_DISABLED => "ERROR_CTX_LOGON_DISABLED",
            .ERROR_CTX_NOT_CONSOLE => "ERROR_CTX_NOT_CONSOLE",
            .ERROR_CTX_CLIENT_QUERY_TIMEOUT => "ERROR_CTX_CLIENT_QUERY_TIMEOUT",
            .ERROR_CTX_CONSOLE_DISCONNECT => "ERROR_CTX_CONSOLE_DISCONNECT",
            .ERROR_CTX_CONSOLE_CONNECT => "ERROR_CTX_CONSOLE_CONNECT",
            .ERROR_CTX_SHADOW_DENIED => "ERROR_CTX_SHADOW_DENIED",
            .ERROR_CTX_WINSTATION_ACCESS_DENIED => "ERROR_CTX_WINSTATION_ACCESS_DENIED",
            .ERROR_CTX_INVALID_WD => "ERROR_CTX_INVALID_WD",
            .ERROR_CTX_SHADOW_INVALID => "ERROR_CTX_SHADOW_INVALID",
            .ERROR_CTX_SHADOW_DISABLED => "ERROR_CTX_SHADOW_DISABLED",
            .ERROR_CTX_CLIENT_LICENSE_IN_USE => "ERROR_CTX_CLIENT_LICENSE_IN_USE",
            .ERROR_CTX_CLIENT_LICENSE_NOT_SET => "ERROR_CTX_CLIENT_LICENSE_NOT_SET",
            .ERROR_CTX_LICENSE_NOT_AVAILABLE => "ERROR_CTX_LICENSE_NOT_AVAILABLE",
            .ERROR_CTX_LICENSE_CLIENT_INVALID => "ERROR_CTX_LICENSE_CLIENT_INVALID",
            .ERROR_CTX_LICENSE_EXPIRED => "ERROR_CTX_LICENSE_EXPIRED",
            .ERROR_CTX_SHADOW_NOT_RUNNING => "ERROR_CTX_SHADOW_NOT_RUNNING",
            .ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE => "ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE",
            .ERROR_ACTIVATION_COUNT_EXCEEDED => "ERROR_ACTIVATION_COUNT_EXCEEDED",
            .ERROR_CTX_WINSTATIONS_DISABLED => "ERROR_CTX_WINSTATIONS_DISABLED",
            .ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED => "ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED",
            .ERROR_CTX_SESSION_IN_USE => "ERROR_CTX_SESSION_IN_USE",
            .ERROR_CTX_NO_FORCE_LOGOFF => "ERROR_CTX_NO_FORCE_LOGOFF",
            .ERROR_CTX_ACCOUNT_RESTRICTION => "ERROR_CTX_ACCOUNT_RESTRICTION",
            .ERROR_RDP_PROTOCOL_ERROR => "ERROR_RDP_PROTOCOL_ERROR",
            .ERROR_CTX_CDM_CONNECT => "ERROR_CTX_CDM_CONNECT",
            .ERROR_CTX_CDM_DISCONNECT => "ERROR_CTX_CDM_DISCONNECT",
            .ERROR_CTX_SECURITY_LAYER_ERROR => "ERROR_CTX_SECURITY_LAYER_ERROR",
            .ERROR_TS_INCOMPATIBLE_SESSIONS => "ERROR_TS_INCOMPATIBLE_SESSIONS",
            .ERROR_TS_VIDEO_SUBSYSTEM_ERROR => "ERROR_TS_VIDEO_SUBSYSTEM_ERROR",
            .ERROR_DS_NOT_INSTALLED => "ERROR_DS_NOT_INSTALLED",
            .ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY => "ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY",
            .ERROR_DS_NO_ATTRIBUTE_OR_VALUE => "ERROR_DS_NO_ATTRIBUTE_OR_VALUE",
            .ERROR_DS_INVALID_ATTRIBUTE_SYNTAX => "ERROR_DS_INVALID_ATTRIBUTE_SYNTAX",
            .ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED => "ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED",
            .ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS => "ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS",
            .ERROR_DS_BUSY => "ERROR_DS_BUSY",
            .ERROR_DS_UNAVAILABLE => "ERROR_DS_UNAVAILABLE",
            .ERROR_DS_NO_RIDS_ALLOCATED => "ERROR_DS_NO_RIDS_ALLOCATED",
            .ERROR_DS_NO_MORE_RIDS => "ERROR_DS_NO_MORE_RIDS",
            .ERROR_DS_INCORRECT_ROLE_OWNER => "ERROR_DS_INCORRECT_ROLE_OWNER",
            .ERROR_DS_RIDMGR_INIT_ERROR => "ERROR_DS_RIDMGR_INIT_ERROR",
            .ERROR_DS_OBJ_CLASS_VIOLATION => "ERROR_DS_OBJ_CLASS_VIOLATION",
            .ERROR_DS_CANT_ON_NON_LEAF => "ERROR_DS_CANT_ON_NON_LEAF",
            .ERROR_DS_CANT_ON_RDN => "ERROR_DS_CANT_ON_RDN",
            .ERROR_DS_CANT_MOD_OBJ_CLASS => "ERROR_DS_CANT_MOD_OBJ_CLASS",
            .ERROR_DS_CROSS_DOM_MOVE_ERROR => "ERROR_DS_CROSS_DOM_MOVE_ERROR",
            .ERROR_DS_GC_NOT_AVAILABLE => "ERROR_DS_GC_NOT_AVAILABLE",
            .ERROR_SHARED_POLICY => "ERROR_SHARED_POLICY",
            .ERROR_POLICY_OBJECT_NOT_FOUND => "ERROR_POLICY_OBJECT_NOT_FOUND",
            .ERROR_POLICY_ONLY_IN_DS => "ERROR_POLICY_ONLY_IN_DS",
            .ERROR_PROMOTION_ACTIVE => "ERROR_PROMOTION_ACTIVE",
            .ERROR_NO_PROMOTION_ACTIVE => "ERROR_NO_PROMOTION_ACTIVE",
            .ERROR_DS_OPERATIONS_ERROR => "ERROR_DS_OPERATIONS_ERROR",
            .ERROR_DS_PROTOCOL_ERROR => "ERROR_DS_PROTOCOL_ERROR",
            .ERROR_DS_TIMELIMIT_EXCEEDED => "ERROR_DS_TIMELIMIT_EXCEEDED",
            .ERROR_DS_SIZELIMIT_EXCEEDED => "ERROR_DS_SIZELIMIT_EXCEEDED",
            .ERROR_DS_ADMIN_LIMIT_EXCEEDED => "ERROR_DS_ADMIN_LIMIT_EXCEEDED",
            .ERROR_DS_COMPARE_FALSE => "ERROR_DS_COMPARE_FALSE",
            .ERROR_DS_COMPARE_TRUE => "ERROR_DS_COMPARE_TRUE",
            .ERROR_DS_AUTH_METHOD_NOT_SUPPORTED => "ERROR_DS_AUTH_METHOD_NOT_SUPPORTED",
            .ERROR_DS_STRONG_AUTH_REQUIRED => "ERROR_DS_STRONG_AUTH_REQUIRED",
            .ERROR_DS_INAPPROPRIATE_AUTH => "ERROR_DS_INAPPROPRIATE_AUTH",
            .ERROR_DS_AUTH_UNKNOWN => "ERROR_DS_AUTH_UNKNOWN",
            .ERROR_DS_REFERRAL => "ERROR_DS_REFERRAL",
            .ERROR_DS_UNAVAILABLE_CRIT_EXTENSION => "ERROR_DS_UNAVAILABLE_CRIT_EXTENSION",
            .ERROR_DS_CONFIDENTIALITY_REQUIRED => "ERROR_DS_CONFIDENTIALITY_REQUIRED",
            .ERROR_DS_INAPPROPRIATE_MATCHING => "ERROR_DS_INAPPROPRIATE_MATCHING",
            .ERROR_DS_CONSTRAINT_VIOLATION => "ERROR_DS_CONSTRAINT_VIOLATION",
            .ERROR_DS_NO_SUCH_OBJECT => "ERROR_DS_NO_SUCH_OBJECT",
            .ERROR_DS_ALIAS_PROBLEM => "ERROR_DS_ALIAS_PROBLEM",
            .ERROR_DS_INVALID_DN_SYNTAX => "ERROR_DS_INVALID_DN_SYNTAX",
            .ERROR_DS_IS_LEAF => "ERROR_DS_IS_LEAF",
            .ERROR_DS_ALIAS_DEREF_PROBLEM => "ERROR_DS_ALIAS_DEREF_PROBLEM",
            .ERROR_DS_UNWILLING_TO_PERFORM => "ERROR_DS_UNWILLING_TO_PERFORM",
            .ERROR_DS_LOOP_DETECT => "ERROR_DS_LOOP_DETECT",
            .ERROR_DS_NAMING_VIOLATION => "ERROR_DS_NAMING_VIOLATION",
            .ERROR_DS_OBJECT_RESULTS_TOO_LARGE => "ERROR_DS_OBJECT_RESULTS_TOO_LARGE",
            .ERROR_DS_AFFECTS_MULTIPLE_DSAS => "ERROR_DS_AFFECTS_MULTIPLE_DSAS",
            .ERROR_DS_SERVER_DOWN => "ERROR_DS_SERVER_DOWN",
            .ERROR_DS_LOCAL_ERROR => "ERROR_DS_LOCAL_ERROR",
            .ERROR_DS_ENCODING_ERROR => "ERROR_DS_ENCODING_ERROR",
            .ERROR_DS_DECODING_ERROR => "ERROR_DS_DECODING_ERROR",
            .ERROR_DS_FILTER_UNKNOWN => "ERROR_DS_FILTER_UNKNOWN",
            .ERROR_DS_PARAM_ERROR => "ERROR_DS_PARAM_ERROR",
            .ERROR_DS_NOT_SUPPORTED => "ERROR_DS_NOT_SUPPORTED",
            .ERROR_DS_NO_RESULTS_RETURNED => "ERROR_DS_NO_RESULTS_RETURNED",
            .ERROR_DS_CONTROL_NOT_FOUND => "ERROR_DS_CONTROL_NOT_FOUND",
            .ERROR_DS_CLIENT_LOOP => "ERROR_DS_CLIENT_LOOP",
            .ERROR_DS_REFERRAL_LIMIT_EXCEEDED => "ERROR_DS_REFERRAL_LIMIT_EXCEEDED",
            .ERROR_DS_SORT_CONTROL_MISSING => "ERROR_DS_SORT_CONTROL_MISSING",
            .ERROR_DS_OFFSET_RANGE_ERROR => "ERROR_DS_OFFSET_RANGE_ERROR",
            .ERROR_DS_RIDMGR_DISABLED => "ERROR_DS_RIDMGR_DISABLED",
            .ERROR_DS_ROOT_MUST_BE_NC => "ERROR_DS_ROOT_MUST_BE_NC",
            .ERROR_DS_ADD_REPLICA_INHIBITED => "ERROR_DS_ADD_REPLICA_INHIBITED",
            .ERROR_DS_ATT_NOT_DEF_IN_SCHEMA => "ERROR_DS_ATT_NOT_DEF_IN_SCHEMA",
            .ERROR_DS_MAX_OBJ_SIZE_EXCEEDED => "ERROR_DS_MAX_OBJ_SIZE_EXCEEDED",
            .ERROR_DS_OBJ_STRING_NAME_EXISTS => "ERROR_DS_OBJ_STRING_NAME_EXISTS",
            .ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA => "ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA",
            .ERROR_DS_RDN_DOESNT_MATCH_SCHEMA => "ERROR_DS_RDN_DOESNT_MATCH_SCHEMA",
            .ERROR_DS_NO_REQUESTED_ATTS_FOUND => "ERROR_DS_NO_REQUESTED_ATTS_FOUND",
            .ERROR_DS_USER_BUFFER_TO_SMALL => "ERROR_DS_USER_BUFFER_TO_SMALL",
            .ERROR_DS_ATT_IS_NOT_ON_OBJ => "ERROR_DS_ATT_IS_NOT_ON_OBJ",
            .ERROR_DS_ILLEGAL_MOD_OPERATION => "ERROR_DS_ILLEGAL_MOD_OPERATION",
            .ERROR_DS_OBJ_TOO_LARGE => "ERROR_DS_OBJ_TOO_LARGE",
            .ERROR_DS_BAD_INSTANCE_TYPE => "ERROR_DS_BAD_INSTANCE_TYPE",
            .ERROR_DS_MASTERDSA_REQUIRED => "ERROR_DS_MASTERDSA_REQUIRED",
            .ERROR_DS_OBJECT_CLASS_REQUIRED => "ERROR_DS_OBJECT_CLASS_REQUIRED",
            .ERROR_DS_MISSING_REQUIRED_ATT => "ERROR_DS_MISSING_REQUIRED_ATT",
            .ERROR_DS_ATT_NOT_DEF_FOR_CLASS => "ERROR_DS_ATT_NOT_DEF_FOR_CLASS",
            .ERROR_DS_ATT_ALREADY_EXISTS => "ERROR_DS_ATT_ALREADY_EXISTS",
            .ERROR_DS_CANT_ADD_ATT_VALUES => "ERROR_DS_CANT_ADD_ATT_VALUES",
            .ERROR_DS_SINGLE_VALUE_CONSTRAINT => "ERROR_DS_SINGLE_VALUE_CONSTRAINT",
            .ERROR_DS_RANGE_CONSTRAINT => "ERROR_DS_RANGE_CONSTRAINT",
            .ERROR_DS_ATT_VAL_ALREADY_EXISTS => "ERROR_DS_ATT_VAL_ALREADY_EXISTS",
            .ERROR_DS_CANT_REM_MISSING_ATT => "ERROR_DS_CANT_REM_MISSING_ATT",
            .ERROR_DS_CANT_REM_MISSING_ATT_VAL => "ERROR_DS_CANT_REM_MISSING_ATT_VAL",
            .ERROR_DS_ROOT_CANT_BE_SUBREF => "ERROR_DS_ROOT_CANT_BE_SUBREF",
            .ERROR_DS_NO_CHAINING => "ERROR_DS_NO_CHAINING",
            .ERROR_DS_NO_CHAINED_EVAL => "ERROR_DS_NO_CHAINED_EVAL",
            .ERROR_DS_NO_PARENT_OBJECT => "ERROR_DS_NO_PARENT_OBJECT",
            .ERROR_DS_PARENT_IS_AN_ALIAS => "ERROR_DS_PARENT_IS_AN_ALIAS",
            .ERROR_DS_CANT_MIX_MASTER_AND_REPS => "ERROR_DS_CANT_MIX_MASTER_AND_REPS",
            .ERROR_DS_CHILDREN_EXIST => "ERROR_DS_CHILDREN_EXIST",
            .ERROR_DS_OBJ_NOT_FOUND => "ERROR_DS_OBJ_NOT_FOUND",
            .ERROR_DS_ALIASED_OBJ_MISSING => "ERROR_DS_ALIASED_OBJ_MISSING",
            .ERROR_DS_BAD_NAME_SYNTAX => "ERROR_DS_BAD_NAME_SYNTAX",
            .ERROR_DS_ALIAS_POINTS_TO_ALIAS => "ERROR_DS_ALIAS_POINTS_TO_ALIAS",
            .ERROR_DS_CANT_DEREF_ALIAS => "ERROR_DS_CANT_DEREF_ALIAS",
            .ERROR_DS_OUT_OF_SCOPE => "ERROR_DS_OUT_OF_SCOPE",
            .ERROR_DS_OBJECT_BEING_REMOVED => "ERROR_DS_OBJECT_BEING_REMOVED",
            .ERROR_DS_CANT_DELETE_DSA_OBJ => "ERROR_DS_CANT_DELETE_DSA_OBJ",
            .ERROR_DS_GENERIC_ERROR => "ERROR_DS_GENERIC_ERROR",
            .ERROR_DS_DSA_MUST_BE_INT_MASTER => "ERROR_DS_DSA_MUST_BE_INT_MASTER",
            .ERROR_DS_CLASS_NOT_DSA => "ERROR_DS_CLASS_NOT_DSA",
            .ERROR_DS_INSUFF_ACCESS_RIGHTS => "ERROR_DS_INSUFF_ACCESS_RIGHTS",
            .ERROR_DS_ILLEGAL_SUPERIOR => "ERROR_DS_ILLEGAL_SUPERIOR",
            .ERROR_DS_ATTRIBUTE_OWNED_BY_SAM => "ERROR_DS_ATTRIBUTE_OWNED_BY_SAM",
            .ERROR_DS_NAME_TOO_MANY_PARTS => "ERROR_DS_NAME_TOO_MANY_PARTS",
            .ERROR_DS_NAME_TOO_LONG => "ERROR_DS_NAME_TOO_LONG",
            .ERROR_DS_NAME_VALUE_TOO_LONG => "ERROR_DS_NAME_VALUE_TOO_LONG",
            .ERROR_DS_NAME_UNPARSEABLE => "ERROR_DS_NAME_UNPARSEABLE",
            .ERROR_DS_NAME_TYPE_UNKNOWN => "ERROR_DS_NAME_TYPE_UNKNOWN",
            .ERROR_DS_NOT_AN_OBJECT => "ERROR_DS_NOT_AN_OBJECT",
            .ERROR_DS_SEC_DESC_TOO_SHORT => "ERROR_DS_SEC_DESC_TOO_SHORT",
            .ERROR_DS_SEC_DESC_INVALID => "ERROR_DS_SEC_DESC_INVALID",
            .ERROR_DS_NO_DELETED_NAME => "ERROR_DS_NO_DELETED_NAME",
            .ERROR_DS_SUBREF_MUST_HAVE_PARENT => "ERROR_DS_SUBREF_MUST_HAVE_PARENT",
            .ERROR_DS_NCNAME_MUST_BE_NC => "ERROR_DS_NCNAME_MUST_BE_NC",
            .ERROR_DS_CANT_ADD_SYSTEM_ONLY => "ERROR_DS_CANT_ADD_SYSTEM_ONLY",
            .ERROR_DS_CLASS_MUST_BE_CONCRETE => "ERROR_DS_CLASS_MUST_BE_CONCRETE",
            .ERROR_DS_INVALID_DMD => "ERROR_DS_INVALID_DMD",
            .ERROR_DS_OBJ_GUID_EXISTS => "ERROR_DS_OBJ_GUID_EXISTS",
            .ERROR_DS_NOT_ON_BACKLINK => "ERROR_DS_NOT_ON_BACKLINK",
            .ERROR_DS_NO_CROSSREF_FOR_NC => "ERROR_DS_NO_CROSSREF_FOR_NC",
            .ERROR_DS_SHUTTING_DOWN => "ERROR_DS_SHUTTING_DOWN",
            .ERROR_DS_UNKNOWN_OPERATION => "ERROR_DS_UNKNOWN_OPERATION",
            .ERROR_DS_INVALID_ROLE_OWNER => "ERROR_DS_INVALID_ROLE_OWNER",
            .ERROR_DS_COULDNT_CONTACT_FSMO => "ERROR_DS_COULDNT_CONTACT_FSMO",
            .ERROR_DS_CROSS_NC_DN_RENAME => "ERROR_DS_CROSS_NC_DN_RENAME",
            .ERROR_DS_CANT_MOD_SYSTEM_ONLY => "ERROR_DS_CANT_MOD_SYSTEM_ONLY",
            .ERROR_DS_REPLICATOR_ONLY => "ERROR_DS_REPLICATOR_ONLY",
            .ERROR_DS_OBJ_CLASS_NOT_DEFINED => "ERROR_DS_OBJ_CLASS_NOT_DEFINED",
            .ERROR_DS_OBJ_CLASS_NOT_SUBCLASS => "ERROR_DS_OBJ_CLASS_NOT_SUBCLASS",
            .ERROR_DS_NAME_REFERENCE_INVALID => "ERROR_DS_NAME_REFERENCE_INVALID",
            .ERROR_DS_CROSS_REF_EXISTS => "ERROR_DS_CROSS_REF_EXISTS",
            .ERROR_DS_CANT_DEL_MASTER_CROSSREF => "ERROR_DS_CANT_DEL_MASTER_CROSSREF",
            .ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD => "ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD",
            .ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX => "ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX",
            .ERROR_DS_DUP_RDN => "ERROR_DS_DUP_RDN",
            .ERROR_DS_DUP_OID => "ERROR_DS_DUP_OID",
            .ERROR_DS_DUP_MAPI_ID => "ERROR_DS_DUP_MAPI_ID",
            .ERROR_DS_DUP_SCHEMA_ID_GUID => "ERROR_DS_DUP_SCHEMA_ID_GUID",
            .ERROR_DS_DUP_LDAP_DISPLAY_NAME => "ERROR_DS_DUP_LDAP_DISPLAY_NAME",
            .ERROR_DS_SEMANTIC_ATT_TEST => "ERROR_DS_SEMANTIC_ATT_TEST",
            .ERROR_DS_SYNTAX_MISMATCH => "ERROR_DS_SYNTAX_MISMATCH",
            .ERROR_DS_EXISTS_IN_MUST_HAVE => "ERROR_DS_EXISTS_IN_MUST_HAVE",
            .ERROR_DS_EXISTS_IN_MAY_HAVE => "ERROR_DS_EXISTS_IN_MAY_HAVE",
            .ERROR_DS_NONEXISTENT_MAY_HAVE => "ERROR_DS_NONEXISTENT_MAY_HAVE",
            .ERROR_DS_NONEXISTENT_MUST_HAVE => "ERROR_DS_NONEXISTENT_MUST_HAVE",
            .ERROR_DS_AUX_CLS_TEST_FAIL => "ERROR_DS_AUX_CLS_TEST_FAIL",
            .ERROR_DS_NONEXISTENT_POSS_SUP => "ERROR_DS_NONEXISTENT_POSS_SUP",
            .ERROR_DS_SUB_CLS_TEST_FAIL => "ERROR_DS_SUB_CLS_TEST_FAIL",
            .ERROR_DS_BAD_RDN_ATT_ID_SYNTAX => "ERROR_DS_BAD_RDN_ATT_ID_SYNTAX",
            .ERROR_DS_EXISTS_IN_AUX_CLS => "ERROR_DS_EXISTS_IN_AUX_CLS",
            .ERROR_DS_EXISTS_IN_SUB_CLS => "ERROR_DS_EXISTS_IN_SUB_CLS",
            .ERROR_DS_EXISTS_IN_POSS_SUP => "ERROR_DS_EXISTS_IN_POSS_SUP",
            .ERROR_DS_RECALCSCHEMA_FAILED => "ERROR_DS_RECALCSCHEMA_FAILED",
            .ERROR_DS_TREE_DELETE_NOT_FINISHED => "ERROR_DS_TREE_DELETE_NOT_FINISHED",
            .ERROR_DS_CANT_DELETE => "ERROR_DS_CANT_DELETE",
            .ERROR_DS_ATT_SCHEMA_REQ_ID => "ERROR_DS_ATT_SCHEMA_REQ_ID",
            .ERROR_DS_BAD_ATT_SCHEMA_SYNTAX => "ERROR_DS_BAD_ATT_SCHEMA_SYNTAX",
            .ERROR_DS_CANT_CACHE_ATT => "ERROR_DS_CANT_CACHE_ATT",
            .ERROR_DS_CANT_CACHE_CLASS => "ERROR_DS_CANT_CACHE_CLASS",
            .ERROR_DS_CANT_REMOVE_ATT_CACHE => "ERROR_DS_CANT_REMOVE_ATT_CACHE",
            .ERROR_DS_CANT_REMOVE_CLASS_CACHE => "ERROR_DS_CANT_REMOVE_CLASS_CACHE",
            .ERROR_DS_CANT_RETRIEVE_DN => "ERROR_DS_CANT_RETRIEVE_DN",
            .ERROR_DS_MISSING_SUPREF => "ERROR_DS_MISSING_SUPREF",
            .ERROR_DS_CANT_RETRIEVE_INSTANCE => "ERROR_DS_CANT_RETRIEVE_INSTANCE",
            .ERROR_DS_CODE_INCONSISTENCY => "ERROR_DS_CODE_INCONSISTENCY",
            .ERROR_DS_DATABASE_ERROR => "ERROR_DS_DATABASE_ERROR",
            .ERROR_DS_GOVERNSID_MISSING => "ERROR_DS_GOVERNSID_MISSING",
            .ERROR_DS_MISSING_EXPECTED_ATT => "ERROR_DS_MISSING_EXPECTED_ATT",
            .ERROR_DS_NCNAME_MISSING_CR_REF => "ERROR_DS_NCNAME_MISSING_CR_REF",
            .ERROR_DS_SECURITY_CHECKING_ERROR => "ERROR_DS_SECURITY_CHECKING_ERROR",
            .ERROR_DS_SCHEMA_NOT_LOADED => "ERROR_DS_SCHEMA_NOT_LOADED",
            .ERROR_DS_SCHEMA_ALLOC_FAILED => "ERROR_DS_SCHEMA_ALLOC_FAILED",
            .ERROR_DS_ATT_SCHEMA_REQ_SYNTAX => "ERROR_DS_ATT_SCHEMA_REQ_SYNTAX",
            .ERROR_DS_GCVERIFY_ERROR => "ERROR_DS_GCVERIFY_ERROR",
            .ERROR_DS_DRA_SCHEMA_MISMATCH => "ERROR_DS_DRA_SCHEMA_MISMATCH",
            .ERROR_DS_CANT_FIND_DSA_OBJ => "ERROR_DS_CANT_FIND_DSA_OBJ",
            .ERROR_DS_CANT_FIND_EXPECTED_NC => "ERROR_DS_CANT_FIND_EXPECTED_NC",
            .ERROR_DS_CANT_FIND_NC_IN_CACHE => "ERROR_DS_CANT_FIND_NC_IN_CACHE",
            .ERROR_DS_CANT_RETRIEVE_CHILD => "ERROR_DS_CANT_RETRIEVE_CHILD",
            .ERROR_DS_SECURITY_ILLEGAL_MODIFY => "ERROR_DS_SECURITY_ILLEGAL_MODIFY",
            .ERROR_DS_CANT_REPLACE_HIDDEN_REC => "ERROR_DS_CANT_REPLACE_HIDDEN_REC",
            .ERROR_DS_BAD_HIERARCHY_FILE => "ERROR_DS_BAD_HIERARCHY_FILE",
            .ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED => "ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED",
            .ERROR_DS_CONFIG_PARAM_MISSING => "ERROR_DS_CONFIG_PARAM_MISSING",
            .ERROR_DS_COUNTING_AB_INDICES_FAILED => "ERROR_DS_COUNTING_AB_INDICES_FAILED",
            .ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED => "ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED",
            .ERROR_DS_INTERNAL_FAILURE => "ERROR_DS_INTERNAL_FAILURE",
            .ERROR_DS_UNKNOWN_ERROR => "ERROR_DS_UNKNOWN_ERROR",
            .ERROR_DS_ROOT_REQUIRES_CLASS_TOP => "ERROR_DS_ROOT_REQUIRES_CLASS_TOP",
            .ERROR_DS_REFUSING_FSMO_ROLES => "ERROR_DS_REFUSING_FSMO_ROLES",
            .ERROR_DS_MISSING_FSMO_SETTINGS => "ERROR_DS_MISSING_FSMO_SETTINGS",
            .ERROR_DS_UNABLE_TO_SURRENDER_ROLES => "ERROR_DS_UNABLE_TO_SURRENDER_ROLES",
            .ERROR_DS_DRA_GENERIC => "ERROR_DS_DRA_GENERIC",
            .ERROR_DS_DRA_INVALID_PARAMETER => "ERROR_DS_DRA_INVALID_PARAMETER",
            .ERROR_DS_DRA_BUSY => "ERROR_DS_DRA_BUSY",
            .ERROR_DS_DRA_BAD_DN => "ERROR_DS_DRA_BAD_DN",
            .ERROR_DS_DRA_BAD_NC => "ERROR_DS_DRA_BAD_NC",
            .ERROR_DS_DRA_DN_EXISTS => "ERROR_DS_DRA_DN_EXISTS",
            .ERROR_DS_DRA_INTERNAL_ERROR => "ERROR_DS_DRA_INTERNAL_ERROR",
            .ERROR_DS_DRA_INCONSISTENT_DIT => "ERROR_DS_DRA_INCONSISTENT_DIT",
            .ERROR_DS_DRA_CONNECTION_FAILED => "ERROR_DS_DRA_CONNECTION_FAILED",
            .ERROR_DS_DRA_BAD_INSTANCE_TYPE => "ERROR_DS_DRA_BAD_INSTANCE_TYPE",
            .ERROR_DS_DRA_OUT_OF_MEM => "ERROR_DS_DRA_OUT_OF_MEM",
            .ERROR_DS_DRA_MAIL_PROBLEM => "ERROR_DS_DRA_MAIL_PROBLEM",
            .ERROR_DS_DRA_REF_ALREADY_EXISTS => "ERROR_DS_DRA_REF_ALREADY_EXISTS",
            .ERROR_DS_DRA_REF_NOT_FOUND => "ERROR_DS_DRA_REF_NOT_FOUND",
            .ERROR_DS_DRA_OBJ_IS_REP_SOURCE => "ERROR_DS_DRA_OBJ_IS_REP_SOURCE",
            .ERROR_DS_DRA_DB_ERROR => "ERROR_DS_DRA_DB_ERROR",
            .ERROR_DS_DRA_NO_REPLICA => "ERROR_DS_DRA_NO_REPLICA",
            .ERROR_DS_DRA_ACCESS_DENIED => "ERROR_DS_DRA_ACCESS_DENIED",
            .ERROR_DS_DRA_NOT_SUPPORTED => "ERROR_DS_DRA_NOT_SUPPORTED",
            .ERROR_DS_DRA_RPC_CANCELLED => "ERROR_DS_DRA_RPC_CANCELLED",
            .ERROR_DS_DRA_SOURCE_DISABLED => "ERROR_DS_DRA_SOURCE_DISABLED",
            .ERROR_DS_DRA_SINK_DISABLED => "ERROR_DS_DRA_SINK_DISABLED",
            .ERROR_DS_DRA_NAME_COLLISION => "ERROR_DS_DRA_NAME_COLLISION",
            .ERROR_DS_DRA_SOURCE_REINSTALLED => "ERROR_DS_DRA_SOURCE_REINSTALLED",
            .ERROR_DS_DRA_MISSING_PARENT => "ERROR_DS_DRA_MISSING_PARENT",
            .ERROR_DS_DRA_PREEMPTED => "ERROR_DS_DRA_PREEMPTED",
            .ERROR_DS_DRA_ABANDON_SYNC => "ERROR_DS_DRA_ABANDON_SYNC",
            .ERROR_DS_DRA_SHUTDOWN => "ERROR_DS_DRA_SHUTDOWN",
            .ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET => "ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET",
            .ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA => "ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA",
            .ERROR_DS_DRA_EXTN_CONNECTION_FAILED => "ERROR_DS_DRA_EXTN_CONNECTION_FAILED",
            .ERROR_DS_INSTALL_SCHEMA_MISMATCH => "ERROR_DS_INSTALL_SCHEMA_MISMATCH",
            .ERROR_DS_DUP_LINK_ID => "ERROR_DS_DUP_LINK_ID",
            .ERROR_DS_NAME_ERROR_RESOLVING => "ERROR_DS_NAME_ERROR_RESOLVING",
            .ERROR_DS_NAME_ERROR_NOT_FOUND => "ERROR_DS_NAME_ERROR_NOT_FOUND",
            .ERROR_DS_NAME_ERROR_NOT_UNIQUE => "ERROR_DS_NAME_ERROR_NOT_UNIQUE",
            .ERROR_DS_NAME_ERROR_NO_MAPPING => "ERROR_DS_NAME_ERROR_NO_MAPPING",
            .ERROR_DS_NAME_ERROR_DOMAIN_ONLY => "ERROR_DS_NAME_ERROR_DOMAIN_ONLY",
            .ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING => "ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING",
            .ERROR_DS_CONSTRUCTED_ATT_MOD => "ERROR_DS_CONSTRUCTED_ATT_MOD",
            .ERROR_DS_WRONG_OM_OBJ_CLASS => "ERROR_DS_WRONG_OM_OBJ_CLASS",
            .ERROR_DS_DRA_REPL_PENDING => "ERROR_DS_DRA_REPL_PENDING",
            .ERROR_DS_DS_REQUIRED => "ERROR_DS_DS_REQUIRED",
            .ERROR_DS_INVALID_LDAP_DISPLAY_NAME => "ERROR_DS_INVALID_LDAP_DISPLAY_NAME",
            .ERROR_DS_NON_BASE_SEARCH => "ERROR_DS_NON_BASE_SEARCH",
            .ERROR_DS_CANT_RETRIEVE_ATTS => "ERROR_DS_CANT_RETRIEVE_ATTS",
            .ERROR_DS_BACKLINK_WITHOUT_LINK => "ERROR_DS_BACKLINK_WITHOUT_LINK",
            .ERROR_DS_EPOCH_MISMATCH => "ERROR_DS_EPOCH_MISMATCH",
            .ERROR_DS_SRC_NAME_MISMATCH => "ERROR_DS_SRC_NAME_MISMATCH",
            .ERROR_DS_SRC_AND_DST_NC_IDENTICAL => "ERROR_DS_SRC_AND_DST_NC_IDENTICAL",
            .ERROR_DS_DST_NC_MISMATCH => "ERROR_DS_DST_NC_MISMATCH",
            .ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC => "ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC",
            .ERROR_DS_SRC_GUID_MISMATCH => "ERROR_DS_SRC_GUID_MISMATCH",
            .ERROR_DS_CANT_MOVE_DELETED_OBJECT => "ERROR_DS_CANT_MOVE_DELETED_OBJECT",
            .ERROR_DS_PDC_OPERATION_IN_PROGRESS => "ERROR_DS_PDC_OPERATION_IN_PROGRESS",
            .ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD => "ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD",
            .ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION => "ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION",
            .ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS => "ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS",
            .ERROR_DS_NC_MUST_HAVE_NC_PARENT => "ERROR_DS_NC_MUST_HAVE_NC_PARENT",
            .ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE => "ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE",
            .ERROR_DS_DST_DOMAIN_NOT_NATIVE => "ERROR_DS_DST_DOMAIN_NOT_NATIVE",
            .ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER => "ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER",
            .ERROR_DS_CANT_MOVE_ACCOUNT_GROUP => "ERROR_DS_CANT_MOVE_ACCOUNT_GROUP",
            .ERROR_DS_CANT_MOVE_RESOURCE_GROUP => "ERROR_DS_CANT_MOVE_RESOURCE_GROUP",
            .ERROR_DS_INVALID_SEARCH_FLAG => "ERROR_DS_INVALID_SEARCH_FLAG",
            .ERROR_DS_NO_TREE_DELETE_ABOVE_NC => "ERROR_DS_NO_TREE_DELETE_ABOVE_NC",
            .ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE => "ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE",
            .ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE => "ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE",
            .ERROR_DS_SAM_INIT_FAILURE => "ERROR_DS_SAM_INIT_FAILURE",
            .ERROR_DS_SENSITIVE_GROUP_VIOLATION => "ERROR_DS_SENSITIVE_GROUP_VIOLATION",
            .ERROR_DS_CANT_MOD_PRIMARYGROUPID => "ERROR_DS_CANT_MOD_PRIMARYGROUPID",
            .ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD => "ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD",
            .ERROR_DS_NONSAFE_SCHEMA_CHANGE => "ERROR_DS_NONSAFE_SCHEMA_CHANGE",
            .ERROR_DS_SCHEMA_UPDATE_DISALLOWED => "ERROR_DS_SCHEMA_UPDATE_DISALLOWED",
            .ERROR_DS_CANT_CREATE_UNDER_SCHEMA => "ERROR_DS_CANT_CREATE_UNDER_SCHEMA",
            .ERROR_DS_INSTALL_NO_SRC_SCH_VERSION => "ERROR_DS_INSTALL_NO_SRC_SCH_VERSION",
            .ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE => "ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE",
            .ERROR_DS_INVALID_GROUP_TYPE => "ERROR_DS_INVALID_GROUP_TYPE",
            .ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN => "ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN",
            .ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN => "ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN",
            .ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER => "ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER",
            .ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER => "ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER",
            .ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER => "ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER",
            .ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER => "ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER",
            .ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER => "ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER",
            .ERROR_DS_HAVE_PRIMARY_MEMBERS => "ERROR_DS_HAVE_PRIMARY_MEMBERS",
            .ERROR_DS_STRING_SD_CONVERSION_FAILED => "ERROR_DS_STRING_SD_CONVERSION_FAILED",
            .ERROR_DS_NAMING_MASTER_GC => "ERROR_DS_NAMING_MASTER_GC",
            .ERROR_DS_DNS_LOOKUP_FAILURE => "ERROR_DS_DNS_LOOKUP_FAILURE",
            .ERROR_DS_COULDNT_UPDATE_SPNS => "ERROR_DS_COULDNT_UPDATE_SPNS",
            .ERROR_DS_CANT_RETRIEVE_SD => "ERROR_DS_CANT_RETRIEVE_SD",
            .ERROR_DS_KEY_NOT_UNIQUE => "ERROR_DS_KEY_NOT_UNIQUE",
            .ERROR_DS_WRONG_LINKED_ATT_SYNTAX => "ERROR_DS_WRONG_LINKED_ATT_SYNTAX",
            .ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD => "ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD",
            .ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY => "ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY",
            .ERROR_DS_CANT_START => "ERROR_DS_CANT_START",
            .ERROR_DS_INIT_FAILURE => "ERROR_DS_INIT_FAILURE",
            .ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION => "ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION",
            .ERROR_DS_SOURCE_DOMAIN_IN_FOREST => "ERROR_DS_SOURCE_DOMAIN_IN_FOREST",
            .ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST => "ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST",
            .ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED => "ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED",
            .ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN => "ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN",
            .ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER => "ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER",
            .ERROR_DS_SRC_SID_EXISTS_IN_FOREST => "ERROR_DS_SRC_SID_EXISTS_IN_FOREST",
            .ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH => "ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH",
            .ERROR_SAM_INIT_FAILURE => "ERROR_SAM_INIT_FAILURE",
            .ERROR_DS_DRA_SCHEMA_INFO_SHIP => "ERROR_DS_DRA_SCHEMA_INFO_SHIP",
            .ERROR_DS_DRA_SCHEMA_CONFLICT => "ERROR_DS_DRA_SCHEMA_CONFLICT",
            .ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT => "ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT",
            .ERROR_DS_DRA_OBJ_NC_MISMATCH => "ERROR_DS_DRA_OBJ_NC_MISMATCH",
            .ERROR_DS_NC_STILL_HAS_DSAS => "ERROR_DS_NC_STILL_HAS_DSAS",
            .ERROR_DS_GC_REQUIRED => "ERROR_DS_GC_REQUIRED",
            .ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY => "ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY",
            .ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS => "ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS",
            .ERROR_DS_CANT_ADD_TO_GC => "ERROR_DS_CANT_ADD_TO_GC",
            .ERROR_DS_NO_CHECKPOINT_WITH_PDC => "ERROR_DS_NO_CHECKPOINT_WITH_PDC",
            .ERROR_DS_SOURCE_AUDITING_NOT_ENABLED => "ERROR_DS_SOURCE_AUDITING_NOT_ENABLED",
            .ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC => "ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC",
            .ERROR_DS_INVALID_NAME_FOR_SPN => "ERROR_DS_INVALID_NAME_FOR_SPN",
            .ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS => "ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS",
            .ERROR_DS_UNICODEPWD_NOT_IN_QUOTES => "ERROR_DS_UNICODEPWD_NOT_IN_QUOTES",
            .ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED => "ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED",
            .ERROR_DS_MUST_BE_RUN_ON_DST_DC => "ERROR_DS_MUST_BE_RUN_ON_DST_DC",
            .ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER => "ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER",
            .ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ => "ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ",
            .ERROR_DS_INIT_FAILURE_CONSOLE => "ERROR_DS_INIT_FAILURE_CONSOLE",
            .ERROR_DS_SAM_INIT_FAILURE_CONSOLE => "ERROR_DS_SAM_INIT_FAILURE_CONSOLE",
            .ERROR_DS_FOREST_VERSION_TOO_HIGH => "ERROR_DS_FOREST_VERSION_TOO_HIGH",
            .ERROR_DS_DOMAIN_VERSION_TOO_HIGH => "ERROR_DS_DOMAIN_VERSION_TOO_HIGH",
            .ERROR_DS_FOREST_VERSION_TOO_LOW => "ERROR_DS_FOREST_VERSION_TOO_LOW",
            .ERROR_DS_DOMAIN_VERSION_TOO_LOW => "ERROR_DS_DOMAIN_VERSION_TOO_LOW",
            .ERROR_DS_INCOMPATIBLE_VERSION => "ERROR_DS_INCOMPATIBLE_VERSION",
            .ERROR_DS_LOW_DSA_VERSION => "ERROR_DS_LOW_DSA_VERSION",
            .ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN => "ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN",
            .ERROR_DS_NOT_SUPPORTED_SORT_ORDER => "ERROR_DS_NOT_SUPPORTED_SORT_ORDER",
            .ERROR_DS_NAME_NOT_UNIQUE => "ERROR_DS_NAME_NOT_UNIQUE",
            .ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4 => "ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4",
            .ERROR_DS_OUT_OF_VERSION_STORE => "ERROR_DS_OUT_OF_VERSION_STORE",
            .ERROR_DS_INCOMPATIBLE_CONTROLS_USED => "ERROR_DS_INCOMPATIBLE_CONTROLS_USED",
            .ERROR_DS_NO_REF_DOMAIN => "ERROR_DS_NO_REF_DOMAIN",
            .ERROR_DS_RESERVED_LINK_ID => "ERROR_DS_RESERVED_LINK_ID",
            .ERROR_DS_LINK_ID_NOT_AVAILABLE => "ERROR_DS_LINK_ID_NOT_AVAILABLE",
            .ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER => "ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER",
            .ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE => "ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE",
            .ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC => "ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC",
            .ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG => "ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG",
            .ERROR_DS_MODIFYDN_WRONG_GRANDPARENT => "ERROR_DS_MODIFYDN_WRONG_GRANDPARENT",
            .ERROR_DS_NAME_ERROR_TRUST_REFERRAL => "ERROR_DS_NAME_ERROR_TRUST_REFERRAL",
            .ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER => "ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER",
            .ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD => "ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD",
            .ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2 => "ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2",
            .ERROR_DS_THREAD_LIMIT_EXCEEDED => "ERROR_DS_THREAD_LIMIT_EXCEEDED",
            .ERROR_DS_NOT_CLOSEST => "ERROR_DS_NOT_CLOSEST",
            .ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF => "ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF",
            .ERROR_DS_SINGLE_USER_MODE_FAILED => "ERROR_DS_SINGLE_USER_MODE_FAILED",
            .ERROR_DS_NTDSCRIPT_SYNTAX_ERROR => "ERROR_DS_NTDSCRIPT_SYNTAX_ERROR",
            .ERROR_DS_NTDSCRIPT_PROCESS_ERROR => "ERROR_DS_NTDSCRIPT_PROCESS_ERROR",
            .ERROR_DS_DIFFERENT_REPL_EPOCHS => "ERROR_DS_DIFFERENT_REPL_EPOCHS",
            .ERROR_DS_DRS_EXTENSIONS_CHANGED => "ERROR_DS_DRS_EXTENSIONS_CHANGED",
            .ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR => "ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR",
            .ERROR_DS_NO_MSDS_INTID => "ERROR_DS_NO_MSDS_INTID",
            .ERROR_DS_DUP_MSDS_INTID => "ERROR_DS_DUP_MSDS_INTID",
            .ERROR_DS_EXISTS_IN_RDNATTID => "ERROR_DS_EXISTS_IN_RDNATTID",
            .ERROR_DS_AUTHORIZATION_FAILED => "ERROR_DS_AUTHORIZATION_FAILED",
            .ERROR_DS_INVALID_SCRIPT => "ERROR_DS_INVALID_SCRIPT",
            .ERROR_DS_REMOTE_CROSSREF_OP_FAILED => "ERROR_DS_REMOTE_CROSSREF_OP_FAILED",
            .ERROR_DS_CROSS_REF_BUSY => "ERROR_DS_CROSS_REF_BUSY",
            .ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN => "ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN",
            .ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC => "ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC",
            .ERROR_DS_DUPLICATE_ID_FOUND => "ERROR_DS_DUPLICATE_ID_FOUND",
            .ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT => "ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT",
            .ERROR_DS_GROUP_CONVERSION_ERROR => "ERROR_DS_GROUP_CONVERSION_ERROR",
            .ERROR_DS_CANT_MOVE_APP_BASIC_GROUP => "ERROR_DS_CANT_MOVE_APP_BASIC_GROUP",
            .ERROR_DS_CANT_MOVE_APP_QUERY_GROUP => "ERROR_DS_CANT_MOVE_APP_QUERY_GROUP",
            .ERROR_DS_ROLE_NOT_VERIFIED => "ERROR_DS_ROLE_NOT_VERIFIED",
            .ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL => "ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL",
            .ERROR_DS_DOMAIN_RENAME_IN_PROGRESS => "ERROR_DS_DOMAIN_RENAME_IN_PROGRESS",
            .ERROR_DS_EXISTING_AD_CHILD_NC => "ERROR_DS_EXISTING_AD_CHILD_NC",
            .ERROR_DS_REPL_LIFETIME_EXCEEDED => "ERROR_DS_REPL_LIFETIME_EXCEEDED",
            .ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER => "ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER",
            .ERROR_DS_LDAP_SEND_QUEUE_FULL => "ERROR_DS_LDAP_SEND_QUEUE_FULL",
            .ERROR_DS_DRA_OUT_SCHEDULE_WINDOW => "ERROR_DS_DRA_OUT_SCHEDULE_WINDOW",
            .ERROR_DS_POLICY_NOT_KNOWN => "ERROR_DS_POLICY_NOT_KNOWN",
            .ERROR_NO_SITE_SETTINGS_OBJECT => "ERROR_NO_SITE_SETTINGS_OBJECT",
            .ERROR_NO_SECRETS => "ERROR_NO_SECRETS",
            .ERROR_NO_WRITABLE_DC_FOUND => "ERROR_NO_WRITABLE_DC_FOUND",
            .ERROR_DS_NO_SERVER_OBJECT => "ERROR_DS_NO_SERVER_OBJECT",
            .ERROR_DS_NO_NTDSA_OBJECT => "ERROR_DS_NO_NTDSA_OBJECT",
            .ERROR_DS_NON_ASQ_SEARCH => "ERROR_DS_NON_ASQ_SEARCH",
            .ERROR_DS_AUDIT_FAILURE => "ERROR_DS_AUDIT_FAILURE",
            .ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE => "ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE",
            .ERROR_DS_INVALID_SEARCH_FLAG_TUPLE => "ERROR_DS_INVALID_SEARCH_FLAG_TUPLE",
            .ERROR_DS_HIERARCHY_TABLE_TOO_DEEP => "ERROR_DS_HIERARCHY_TABLE_TOO_DEEP",
            .ERROR_DS_DRA_CORRUPT_UTD_VECTOR => "ERROR_DS_DRA_CORRUPT_UTD_VECTOR",
            .ERROR_DS_DRA_SECRETS_DENIED => "ERROR_DS_DRA_SECRETS_DENIED",
            .ERROR_DS_RESERVED_MAPI_ID => "ERROR_DS_RESERVED_MAPI_ID",
            .ERROR_DS_MAPI_ID_NOT_AVAILABLE => "ERROR_DS_MAPI_ID_NOT_AVAILABLE",
            .ERROR_DS_DRA_MISSING_KRBTGT_SECRET => "ERROR_DS_DRA_MISSING_KRBTGT_SECRET",
            .ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST => "ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST",
            .ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST => "ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST",
            .ERROR_INVALID_USER_PRINCIPAL_NAME => "ERROR_INVALID_USER_PRINCIPAL_NAME",
            .ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS => "ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS",
            .ERROR_DS_OID_NOT_FOUND => "ERROR_DS_OID_NOT_FOUND",
            .ERROR_DS_DRA_RECYCLED_TARGET => "ERROR_DS_DRA_RECYCLED_TARGET",
            .ERROR_DS_DISALLOWED_NC_REDIRECT => "ERROR_DS_DISALLOWED_NC_REDIRECT",
            .ERROR_DS_HIGH_ADLDS_FFL => "ERROR_DS_HIGH_ADLDS_FFL",
            .ERROR_DS_HIGH_DSA_VERSION => "ERROR_DS_HIGH_DSA_VERSION",
            .ERROR_DS_LOW_ADLDS_FFL => "ERROR_DS_LOW_ADLDS_FFL",
            .ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION => "ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION",
            .ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED => "ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED",
            .ERROR_INCORRECT_ACCOUNT_TYPE => "ERROR_INCORRECT_ACCOUNT_TYPE",
            .ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST => "ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST",
            .ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST => "ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST",
            .ERROR_DS_MISSING_FOREST_TRUST => "ERROR_DS_MISSING_FOREST_TRUST",
            .ERROR_DS_VALUE_KEY_NOT_UNIQUE => "ERROR_DS_VALUE_KEY_NOT_UNIQUE",
            .ERROR_WEAK_WHFBKEY_BLOCKED => "ERROR_WEAK_WHFBKEY_BLOCKED",
            .DNS_ERROR_RESPONSE_CODES_BASE => "DNS_ERROR_RESPONSE_CODES_BASE",
            .DNS_ERROR_RCODE_FORMAT_ERROR => "DNS_ERROR_RCODE_FORMAT_ERROR",
            .DNS_ERROR_RCODE_SERVER_FAILURE => "DNS_ERROR_RCODE_SERVER_FAILURE",
            .DNS_ERROR_RCODE_NAME_ERROR => "DNS_ERROR_RCODE_NAME_ERROR",
            .DNS_ERROR_RCODE_NOT_IMPLEMENTED => "DNS_ERROR_RCODE_NOT_IMPLEMENTED",
            .DNS_ERROR_RCODE_REFUSED => "DNS_ERROR_RCODE_REFUSED",
            .DNS_ERROR_RCODE_YXDOMAIN => "DNS_ERROR_RCODE_YXDOMAIN",
            .DNS_ERROR_RCODE_YXRRSET => "DNS_ERROR_RCODE_YXRRSET",
            .DNS_ERROR_RCODE_NXRRSET => "DNS_ERROR_RCODE_NXRRSET",
            .DNS_ERROR_RCODE_NOTAUTH => "DNS_ERROR_RCODE_NOTAUTH",
            .DNS_ERROR_RCODE_NOTZONE => "DNS_ERROR_RCODE_NOTZONE",
            .DNS_ERROR_RCODE_BADSIG => "DNS_ERROR_RCODE_BADSIG",
            .DNS_ERROR_RCODE_BADKEY => "DNS_ERROR_RCODE_BADKEY",
            .DNS_ERROR_RCODE_BADTIME => "DNS_ERROR_RCODE_BADTIME",
            .DNS_ERROR_DNSSEC_BASE => "DNS_ERROR_DNSSEC_BASE",
            .DNS_ERROR_KEYMASTER_REQUIRED => "DNS_ERROR_KEYMASTER_REQUIRED",
            .DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE => "DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE",
            .DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1 => "DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1",
            .DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS => "DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS",
            .DNS_ERROR_UNSUPPORTED_ALGORITHM => "DNS_ERROR_UNSUPPORTED_ALGORITHM",
            .DNS_ERROR_INVALID_KEY_SIZE => "DNS_ERROR_INVALID_KEY_SIZE",
            .DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE => "DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE",
            .DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION => "DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION",
            .DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR => "DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR",
            .DNS_ERROR_UNEXPECTED_CNG_ERROR => "DNS_ERROR_UNEXPECTED_CNG_ERROR",
            .DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION => "DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION",
            .DNS_ERROR_KSP_NOT_ACCESSIBLE => "DNS_ERROR_KSP_NOT_ACCESSIBLE",
            .DNS_ERROR_TOO_MANY_SKDS => "DNS_ERROR_TOO_MANY_SKDS",
            .DNS_ERROR_INVALID_ROLLOVER_PERIOD => "DNS_ERROR_INVALID_ROLLOVER_PERIOD",
            .DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET => "DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET",
            .DNS_ERROR_ROLLOVER_IN_PROGRESS => "DNS_ERROR_ROLLOVER_IN_PROGRESS",
            .DNS_ERROR_STANDBY_KEY_NOT_PRESENT => "DNS_ERROR_STANDBY_KEY_NOT_PRESENT",
            .DNS_ERROR_NOT_ALLOWED_ON_ZSK => "DNS_ERROR_NOT_ALLOWED_ON_ZSK",
            .DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD => "DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD",
            .DNS_ERROR_ROLLOVER_ALREADY_QUEUED => "DNS_ERROR_ROLLOVER_ALREADY_QUEUED",
            .DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE => "DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE",
            .DNS_ERROR_BAD_KEYMASTER => "DNS_ERROR_BAD_KEYMASTER",
            .DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD => "DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD",
            .DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT => "DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT",
            .DNS_ERROR_DNSSEC_IS_DISABLED => "DNS_ERROR_DNSSEC_IS_DISABLED",
            .DNS_ERROR_INVALID_XML => "DNS_ERROR_INVALID_XML",
            .DNS_ERROR_NO_VALID_TRUST_ANCHORS => "DNS_ERROR_NO_VALID_TRUST_ANCHORS",
            .DNS_ERROR_ROLLOVER_NOT_POKEABLE => "DNS_ERROR_ROLLOVER_NOT_POKEABLE",
            .DNS_ERROR_NSEC3_NAME_COLLISION => "DNS_ERROR_NSEC3_NAME_COLLISION",
            .DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1 => "DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1",
            .DNS_ERROR_PACKET_FMT_BASE => "DNS_ERROR_PACKET_FMT_BASE",
            .DNS_ERROR_BAD_PACKET => "DNS_ERROR_BAD_PACKET",
            .DNS_ERROR_NO_PACKET => "DNS_ERROR_NO_PACKET",
            .DNS_ERROR_RCODE => "DNS_ERROR_RCODE",
            .DNS_ERROR_UNSECURE_PACKET => "DNS_ERROR_UNSECURE_PACKET",
            .DNS_ERROR_GENERAL_API_BASE => "DNS_ERROR_GENERAL_API_BASE",
            .DNS_ERROR_INVALID_TYPE => "DNS_ERROR_INVALID_TYPE",
            .DNS_ERROR_INVALID_IP_ADDRESS => "DNS_ERROR_INVALID_IP_ADDRESS",
            .DNS_ERROR_INVALID_PROPERTY => "DNS_ERROR_INVALID_PROPERTY",
            .DNS_ERROR_TRY_AGAIN_LATER => "DNS_ERROR_TRY_AGAIN_LATER",
            .DNS_ERROR_NOT_UNIQUE => "DNS_ERROR_NOT_UNIQUE",
            .DNS_ERROR_NON_RFC_NAME => "DNS_ERROR_NON_RFC_NAME",
            .DNS_ERROR_INVALID_NAME_CHAR => "DNS_ERROR_INVALID_NAME_CHAR",
            .DNS_ERROR_NUMERIC_NAME => "DNS_ERROR_NUMERIC_NAME",
            .DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER => "DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER",
            .DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION => "DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION",
            .DNS_ERROR_CANNOT_FIND_ROOT_HINTS => "DNS_ERROR_CANNOT_FIND_ROOT_HINTS",
            .DNS_ERROR_INCONSISTENT_ROOT_HINTS => "DNS_ERROR_INCONSISTENT_ROOT_HINTS",
            .DNS_ERROR_DWORD_VALUE_TOO_SMALL => "DNS_ERROR_DWORD_VALUE_TOO_SMALL",
            .DNS_ERROR_DWORD_VALUE_TOO_LARGE => "DNS_ERROR_DWORD_VALUE_TOO_LARGE",
            .DNS_ERROR_BACKGROUND_LOADING => "DNS_ERROR_BACKGROUND_LOADING",
            .DNS_ERROR_NOT_ALLOWED_ON_RODC => "DNS_ERROR_NOT_ALLOWED_ON_RODC",
            .DNS_ERROR_NOT_ALLOWED_UNDER_DNAME => "DNS_ERROR_NOT_ALLOWED_UNDER_DNAME",
            .DNS_ERROR_DELEGATION_REQUIRED => "DNS_ERROR_DELEGATION_REQUIRED",
            .DNS_ERROR_INVALID_POLICY_TABLE => "DNS_ERROR_INVALID_POLICY_TABLE",
            .DNS_ERROR_ADDRESS_REQUIRED => "DNS_ERROR_ADDRESS_REQUIRED",
            .DNS_ERROR_ZONE_BASE => "DNS_ERROR_ZONE_BASE",
            .DNS_ERROR_ZONE_DOES_NOT_EXIST => "DNS_ERROR_ZONE_DOES_NOT_EXIST",
            .DNS_ERROR_NO_ZONE_INFO => "DNS_ERROR_NO_ZONE_INFO",
            .DNS_ERROR_INVALID_ZONE_OPERATION => "DNS_ERROR_INVALID_ZONE_OPERATION",
            .DNS_ERROR_ZONE_CONFIGURATION_ERROR => "DNS_ERROR_ZONE_CONFIGURATION_ERROR",
            .DNS_ERROR_ZONE_HAS_NO_SOA_RECORD => "DNS_ERROR_ZONE_HAS_NO_SOA_RECORD",
            .DNS_ERROR_ZONE_HAS_NO_NS_RECORDS => "DNS_ERROR_ZONE_HAS_NO_NS_RECORDS",
            .DNS_ERROR_ZONE_LOCKED => "DNS_ERROR_ZONE_LOCKED",
            .DNS_ERROR_ZONE_CREATION_FAILED => "DNS_ERROR_ZONE_CREATION_FAILED",
            .DNS_ERROR_ZONE_ALREADY_EXISTS => "DNS_ERROR_ZONE_ALREADY_EXISTS",
            .DNS_ERROR_AUTOZONE_ALREADY_EXISTS => "DNS_ERROR_AUTOZONE_ALREADY_EXISTS",
            .DNS_ERROR_INVALID_ZONE_TYPE => "DNS_ERROR_INVALID_ZONE_TYPE",
            .DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP => "DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP",
            .DNS_ERROR_ZONE_NOT_SECONDARY => "DNS_ERROR_ZONE_NOT_SECONDARY",
            .DNS_ERROR_NEED_SECONDARY_ADDRESSES => "DNS_ERROR_NEED_SECONDARY_ADDRESSES",
            .DNS_ERROR_WINS_INIT_FAILED => "DNS_ERROR_WINS_INIT_FAILED",
            .DNS_ERROR_NEED_WINS_SERVERS => "DNS_ERROR_NEED_WINS_SERVERS",
            .DNS_ERROR_NBSTAT_INIT_FAILED => "DNS_ERROR_NBSTAT_INIT_FAILED",
            .DNS_ERROR_SOA_DELETE_INVALID => "DNS_ERROR_SOA_DELETE_INVALID",
            .DNS_ERROR_FORWARDER_ALREADY_EXISTS => "DNS_ERROR_FORWARDER_ALREADY_EXISTS",
            .DNS_ERROR_ZONE_REQUIRES_MASTER_IP => "DNS_ERROR_ZONE_REQUIRES_MASTER_IP",
            .DNS_ERROR_ZONE_IS_SHUTDOWN => "DNS_ERROR_ZONE_IS_SHUTDOWN",
            .DNS_ERROR_ZONE_LOCKED_FOR_SIGNING => "DNS_ERROR_ZONE_LOCKED_FOR_SIGNING",
            .DNS_ERROR_DATAFILE_BASE => "DNS_ERROR_DATAFILE_BASE",
            .DNS_ERROR_PRIMARY_REQUIRES_DATAFILE => "DNS_ERROR_PRIMARY_REQUIRES_DATAFILE",
            .DNS_ERROR_INVALID_DATAFILE_NAME => "DNS_ERROR_INVALID_DATAFILE_NAME",
            .DNS_ERROR_DATAFILE_OPEN_FAILURE => "DNS_ERROR_DATAFILE_OPEN_FAILURE",
            .DNS_ERROR_FILE_WRITEBACK_FAILED => "DNS_ERROR_FILE_WRITEBACK_FAILED",
            .DNS_ERROR_DATAFILE_PARSING => "DNS_ERROR_DATAFILE_PARSING",
            .DNS_ERROR_DATABASE_BASE => "DNS_ERROR_DATABASE_BASE",
            .DNS_ERROR_RECORD_DOES_NOT_EXIST => "DNS_ERROR_RECORD_DOES_NOT_EXIST",
            .DNS_ERROR_RECORD_FORMAT => "DNS_ERROR_RECORD_FORMAT",
            .DNS_ERROR_NODE_CREATION_FAILED => "DNS_ERROR_NODE_CREATION_FAILED",
            .DNS_ERROR_UNKNOWN_RECORD_TYPE => "DNS_ERROR_UNKNOWN_RECORD_TYPE",
            .DNS_ERROR_RECORD_TIMED_OUT => "DNS_ERROR_RECORD_TIMED_OUT",
            .DNS_ERROR_NAME_NOT_IN_ZONE => "DNS_ERROR_NAME_NOT_IN_ZONE",
            .DNS_ERROR_CNAME_LOOP => "DNS_ERROR_CNAME_LOOP",
            .DNS_ERROR_NODE_IS_CNAME => "DNS_ERROR_NODE_IS_CNAME",
            .DNS_ERROR_CNAME_COLLISION => "DNS_ERROR_CNAME_COLLISION",
            .DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT => "DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT",
            .DNS_ERROR_RECORD_ALREADY_EXISTS => "DNS_ERROR_RECORD_ALREADY_EXISTS",
            .DNS_ERROR_SECONDARY_DATA => "DNS_ERROR_SECONDARY_DATA",
            .DNS_ERROR_NO_CREATE_CACHE_DATA => "DNS_ERROR_NO_CREATE_CACHE_DATA",
            .DNS_ERROR_NAME_DOES_NOT_EXIST => "DNS_ERROR_NAME_DOES_NOT_EXIST",
            .DNS_ERROR_DS_UNAVAILABLE => "DNS_ERROR_DS_UNAVAILABLE",
            .DNS_ERROR_DS_ZONE_ALREADY_EXISTS => "DNS_ERROR_DS_ZONE_ALREADY_EXISTS",
            .DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE => "DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE",
            .DNS_ERROR_NODE_IS_DNAME => "DNS_ERROR_NODE_IS_DNAME",
            .DNS_ERROR_DNAME_COLLISION => "DNS_ERROR_DNAME_COLLISION",
            .DNS_ERROR_ALIAS_LOOP => "DNS_ERROR_ALIAS_LOOP",
            .DNS_ERROR_OPERATION_BASE => "DNS_ERROR_OPERATION_BASE",
            .DNS_ERROR_AXFR => "DNS_ERROR_AXFR",
            .DNS_ERROR_SECURE_BASE => "DNS_ERROR_SECURE_BASE",
            .DNS_ERROR_SETUP_BASE => "DNS_ERROR_SETUP_BASE",
            .DNS_ERROR_NO_TCPIP => "DNS_ERROR_NO_TCPIP",
            .DNS_ERROR_NO_DNS_SERVERS => "DNS_ERROR_NO_DNS_SERVERS",
            .DNS_ERROR_DP_BASE => "DNS_ERROR_DP_BASE",
            .DNS_ERROR_DP_DOES_NOT_EXIST => "DNS_ERROR_DP_DOES_NOT_EXIST",
            .DNS_ERROR_DP_ALREADY_EXISTS => "DNS_ERROR_DP_ALREADY_EXISTS",
            .DNS_ERROR_DP_NOT_ENLISTED => "DNS_ERROR_DP_NOT_ENLISTED",
            .DNS_ERROR_DP_ALREADY_ENLISTED => "DNS_ERROR_DP_ALREADY_ENLISTED",
            .DNS_ERROR_DP_NOT_AVAILABLE => "DNS_ERROR_DP_NOT_AVAILABLE",
            .DNS_ERROR_DP_FSMO_ERROR => "DNS_ERROR_DP_FSMO_ERROR",
            .DNS_ERROR_RRL_NOT_ENABLED => "DNS_ERROR_RRL_NOT_ENABLED",
            .DNS_ERROR_RRL_INVALID_WINDOW_SIZE => "DNS_ERROR_RRL_INVALID_WINDOW_SIZE",
            .DNS_ERROR_RRL_INVALID_IPV4_PREFIX => "DNS_ERROR_RRL_INVALID_IPV4_PREFIX",
            .DNS_ERROR_RRL_INVALID_IPV6_PREFIX => "DNS_ERROR_RRL_INVALID_IPV6_PREFIX",
            .DNS_ERROR_RRL_INVALID_TC_RATE => "DNS_ERROR_RRL_INVALID_TC_RATE",
            .DNS_ERROR_RRL_INVALID_LEAK_RATE => "DNS_ERROR_RRL_INVALID_LEAK_RATE",
            .DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE => "DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE",
            .DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS => "DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS",
            .DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST => "DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST",
            .DNS_ERROR_VIRTUALIZATION_TREE_LOCKED => "DNS_ERROR_VIRTUALIZATION_TREE_LOCKED",
            .DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME => "DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME",
            .DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE => "DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE",
            .DNS_ERROR_ZONESCOPE_ALREADY_EXISTS => "DNS_ERROR_ZONESCOPE_ALREADY_EXISTS",
            .DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST => "DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST",
            .DNS_ERROR_DEFAULT_ZONESCOPE => "DNS_ERROR_DEFAULT_ZONESCOPE",
            .DNS_ERROR_INVALID_ZONESCOPE_NAME => "DNS_ERROR_INVALID_ZONESCOPE_NAME",
            .DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES => "DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES",
            .DNS_ERROR_LOAD_ZONESCOPE_FAILED => "DNS_ERROR_LOAD_ZONESCOPE_FAILED",
            .DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED => "DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED",
            .DNS_ERROR_INVALID_SCOPE_NAME => "DNS_ERROR_INVALID_SCOPE_NAME",
            .DNS_ERROR_SCOPE_DOES_NOT_EXIST => "DNS_ERROR_SCOPE_DOES_NOT_EXIST",
            .DNS_ERROR_DEFAULT_SCOPE => "DNS_ERROR_DEFAULT_SCOPE",
            .DNS_ERROR_INVALID_SCOPE_OPERATION => "DNS_ERROR_INVALID_SCOPE_OPERATION",
            .DNS_ERROR_SCOPE_LOCKED => "DNS_ERROR_SCOPE_LOCKED",
            .DNS_ERROR_SCOPE_ALREADY_EXISTS => "DNS_ERROR_SCOPE_ALREADY_EXISTS",
            .DNS_ERROR_POLICY_ALREADY_EXISTS => "DNS_ERROR_POLICY_ALREADY_EXISTS",
            .DNS_ERROR_POLICY_DOES_NOT_EXIST => "DNS_ERROR_POLICY_DOES_NOT_EXIST",
            .DNS_ERROR_POLICY_INVALID_CRITERIA => "DNS_ERROR_POLICY_INVALID_CRITERIA",
            .DNS_ERROR_POLICY_INVALID_SETTINGS => "DNS_ERROR_POLICY_INVALID_SETTINGS",
            .DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED => "DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED",
            .DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST => "DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST",
            .DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS => "DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS",
            .DNS_ERROR_SUBNET_DOES_NOT_EXIST => "DNS_ERROR_SUBNET_DOES_NOT_EXIST",
            .DNS_ERROR_SUBNET_ALREADY_EXISTS => "DNS_ERROR_SUBNET_ALREADY_EXISTS",
            .DNS_ERROR_POLICY_LOCKED => "DNS_ERROR_POLICY_LOCKED",
            .DNS_ERROR_POLICY_INVALID_WEIGHT => "DNS_ERROR_POLICY_INVALID_WEIGHT",
            .DNS_ERROR_POLICY_INVALID_NAME => "DNS_ERROR_POLICY_INVALID_NAME",
            .DNS_ERROR_POLICY_MISSING_CRITERIA => "DNS_ERROR_POLICY_MISSING_CRITERIA",
            .DNS_ERROR_INVALID_CLIENT_SUBNET_NAME => "DNS_ERROR_INVALID_CLIENT_SUBNET_NAME",
            .DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID => "DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID",
            .DNS_ERROR_POLICY_SCOPE_MISSING => "DNS_ERROR_POLICY_SCOPE_MISSING",
            .DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED => "DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED",
            .DNS_ERROR_SERVERSCOPE_IS_REFERENCED => "DNS_ERROR_SERVERSCOPE_IS_REFERENCED",
            .DNS_ERROR_ZONESCOPE_IS_REFERENCED => "DNS_ERROR_ZONESCOPE_IS_REFERENCED",
            .DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET => "DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET",
            .DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL => "DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL",
            .DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL => "DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL",
            .DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE => "DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE",
            .DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN => "DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN",
            .DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE => "DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE",
            .DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY => "DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY",
            .ERROR_IPSEC_QM_POLICY_EXISTS => "ERROR_IPSEC_QM_POLICY_EXISTS",
            .ERROR_IPSEC_QM_POLICY_NOT_FOUND => "ERROR_IPSEC_QM_POLICY_NOT_FOUND",
            .ERROR_IPSEC_QM_POLICY_IN_USE => "ERROR_IPSEC_QM_POLICY_IN_USE",
            .ERROR_IPSEC_MM_POLICY_EXISTS => "ERROR_IPSEC_MM_POLICY_EXISTS",
            .ERROR_IPSEC_MM_POLICY_NOT_FOUND => "ERROR_IPSEC_MM_POLICY_NOT_FOUND",
            .ERROR_IPSEC_MM_POLICY_IN_USE => "ERROR_IPSEC_MM_POLICY_IN_USE",
            .ERROR_IPSEC_MM_FILTER_EXISTS => "ERROR_IPSEC_MM_FILTER_EXISTS",
            .ERROR_IPSEC_MM_FILTER_NOT_FOUND => "ERROR_IPSEC_MM_FILTER_NOT_FOUND",
            .ERROR_IPSEC_TRANSPORT_FILTER_EXISTS => "ERROR_IPSEC_TRANSPORT_FILTER_EXISTS",
            .ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND => "ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND",
            .ERROR_IPSEC_MM_AUTH_EXISTS => "ERROR_IPSEC_MM_AUTH_EXISTS",
            .ERROR_IPSEC_MM_AUTH_NOT_FOUND => "ERROR_IPSEC_MM_AUTH_NOT_FOUND",
            .ERROR_IPSEC_MM_AUTH_IN_USE => "ERROR_IPSEC_MM_AUTH_IN_USE",
            .ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND => "ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND",
            .ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND => "ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND",
            .ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND => "ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND",
            .ERROR_IPSEC_TUNNEL_FILTER_EXISTS => "ERROR_IPSEC_TUNNEL_FILTER_EXISTS",
            .ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND => "ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND",
            .ERROR_IPSEC_MM_FILTER_PENDING_DELETION => "ERROR_IPSEC_MM_FILTER_PENDING_DELETION",
            .ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION => "ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION",
            .ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION => "ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION",
            .ERROR_IPSEC_MM_POLICY_PENDING_DELETION => "ERROR_IPSEC_MM_POLICY_PENDING_DELETION",
            .ERROR_IPSEC_MM_AUTH_PENDING_DELETION => "ERROR_IPSEC_MM_AUTH_PENDING_DELETION",
            .ERROR_IPSEC_QM_POLICY_PENDING_DELETION => "ERROR_IPSEC_QM_POLICY_PENDING_DELETION",
            .ERROR_IPSEC_IKE_NEG_STATUS_BEGIN => "ERROR_IPSEC_IKE_NEG_STATUS_BEGIN",
            .ERROR_IPSEC_IKE_AUTH_FAIL => "ERROR_IPSEC_IKE_AUTH_FAIL",
            .ERROR_IPSEC_IKE_ATTRIB_FAIL => "ERROR_IPSEC_IKE_ATTRIB_FAIL",
            .ERROR_IPSEC_IKE_NEGOTIATION_PENDING => "ERROR_IPSEC_IKE_NEGOTIATION_PENDING",
            .ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR => "ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR",
            .ERROR_IPSEC_IKE_TIMED_OUT => "ERROR_IPSEC_IKE_TIMED_OUT",
            .ERROR_IPSEC_IKE_NO_CERT => "ERROR_IPSEC_IKE_NO_CERT",
            .ERROR_IPSEC_IKE_SA_DELETED => "ERROR_IPSEC_IKE_SA_DELETED",
            .ERROR_IPSEC_IKE_SA_REAPED => "ERROR_IPSEC_IKE_SA_REAPED",
            .ERROR_IPSEC_IKE_MM_ACQUIRE_DROP => "ERROR_IPSEC_IKE_MM_ACQUIRE_DROP",
            .ERROR_IPSEC_IKE_QM_ACQUIRE_DROP => "ERROR_IPSEC_IKE_QM_ACQUIRE_DROP",
            .ERROR_IPSEC_IKE_QUEUE_DROP_MM => "ERROR_IPSEC_IKE_QUEUE_DROP_MM",
            .ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM => "ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM",
            .ERROR_IPSEC_IKE_DROP_NO_RESPONSE => "ERROR_IPSEC_IKE_DROP_NO_RESPONSE",
            .ERROR_IPSEC_IKE_MM_DELAY_DROP => "ERROR_IPSEC_IKE_MM_DELAY_DROP",
            .ERROR_IPSEC_IKE_QM_DELAY_DROP => "ERROR_IPSEC_IKE_QM_DELAY_DROP",
            .ERROR_IPSEC_IKE_ERROR => "ERROR_IPSEC_IKE_ERROR",
            .ERROR_IPSEC_IKE_CRL_FAILED => "ERROR_IPSEC_IKE_CRL_FAILED",
            .ERROR_IPSEC_IKE_INVALID_KEY_USAGE => "ERROR_IPSEC_IKE_INVALID_KEY_USAGE",
            .ERROR_IPSEC_IKE_INVALID_CERT_TYPE => "ERROR_IPSEC_IKE_INVALID_CERT_TYPE",
            .ERROR_IPSEC_IKE_NO_PRIVATE_KEY => "ERROR_IPSEC_IKE_NO_PRIVATE_KEY",
            .ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY => "ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY",
            .ERROR_IPSEC_IKE_DH_FAIL => "ERROR_IPSEC_IKE_DH_FAIL",
            .ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED => "ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED",
            .ERROR_IPSEC_IKE_INVALID_HEADER => "ERROR_IPSEC_IKE_INVALID_HEADER",
            .ERROR_IPSEC_IKE_NO_POLICY => "ERROR_IPSEC_IKE_NO_POLICY",
            .ERROR_IPSEC_IKE_INVALID_SIGNATURE => "ERROR_IPSEC_IKE_INVALID_SIGNATURE",
            .ERROR_IPSEC_IKE_KERBEROS_ERROR => "ERROR_IPSEC_IKE_KERBEROS_ERROR",
            .ERROR_IPSEC_IKE_NO_PUBLIC_KEY => "ERROR_IPSEC_IKE_NO_PUBLIC_KEY",
            .ERROR_IPSEC_IKE_PROCESS_ERR => "ERROR_IPSEC_IKE_PROCESS_ERR",
            .ERROR_IPSEC_IKE_PROCESS_ERR_SA => "ERROR_IPSEC_IKE_PROCESS_ERR_SA",
            .ERROR_IPSEC_IKE_PROCESS_ERR_PROP => "ERROR_IPSEC_IKE_PROCESS_ERR_PROP",
            .ERROR_IPSEC_IKE_PROCESS_ERR_TRANS => "ERROR_IPSEC_IKE_PROCESS_ERR_TRANS",
            .ERROR_IPSEC_IKE_PROCESS_ERR_KE => "ERROR_IPSEC_IKE_PROCESS_ERR_KE",
            .ERROR_IPSEC_IKE_PROCESS_ERR_ID => "ERROR_IPSEC_IKE_PROCESS_ERR_ID",
            .ERROR_IPSEC_IKE_PROCESS_ERR_CERT => "ERROR_IPSEC_IKE_PROCESS_ERR_CERT",
            .ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ => "ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ",
            .ERROR_IPSEC_IKE_PROCESS_ERR_HASH => "ERROR_IPSEC_IKE_PROCESS_ERR_HASH",
            .ERROR_IPSEC_IKE_PROCESS_ERR_SIG => "ERROR_IPSEC_IKE_PROCESS_ERR_SIG",
            .ERROR_IPSEC_IKE_PROCESS_ERR_NONCE => "ERROR_IPSEC_IKE_PROCESS_ERR_NONCE",
            .ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY => "ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY",
            .ERROR_IPSEC_IKE_PROCESS_ERR_DELETE => "ERROR_IPSEC_IKE_PROCESS_ERR_DELETE",
            .ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR => "ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR",
            .ERROR_IPSEC_IKE_INVALID_PAYLOAD => "ERROR_IPSEC_IKE_INVALID_PAYLOAD",
            .ERROR_IPSEC_IKE_LOAD_SOFT_SA => "ERROR_IPSEC_IKE_LOAD_SOFT_SA",
            .ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN => "ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN",
            .ERROR_IPSEC_IKE_INVALID_COOKIE => "ERROR_IPSEC_IKE_INVALID_COOKIE",
            .ERROR_IPSEC_IKE_NO_PEER_CERT => "ERROR_IPSEC_IKE_NO_PEER_CERT",
            .ERROR_IPSEC_IKE_PEER_CRL_FAILED => "ERROR_IPSEC_IKE_PEER_CRL_FAILED",
            .ERROR_IPSEC_IKE_POLICY_CHANGE => "ERROR_IPSEC_IKE_POLICY_CHANGE",
            .ERROR_IPSEC_IKE_NO_MM_POLICY => "ERROR_IPSEC_IKE_NO_MM_POLICY",
            .ERROR_IPSEC_IKE_NOTCBPRIV => "ERROR_IPSEC_IKE_NOTCBPRIV",
            .ERROR_IPSEC_IKE_SECLOADFAIL => "ERROR_IPSEC_IKE_SECLOADFAIL",
            .ERROR_IPSEC_IKE_FAILSSPINIT => "ERROR_IPSEC_IKE_FAILSSPINIT",
            .ERROR_IPSEC_IKE_FAILQUERYSSP => "ERROR_IPSEC_IKE_FAILQUERYSSP",
            .ERROR_IPSEC_IKE_SRVACQFAIL => "ERROR_IPSEC_IKE_SRVACQFAIL",
            .ERROR_IPSEC_IKE_SRVQUERYCRED => "ERROR_IPSEC_IKE_SRVQUERYCRED",
            .ERROR_IPSEC_IKE_GETSPIFAIL => "ERROR_IPSEC_IKE_GETSPIFAIL",
            .ERROR_IPSEC_IKE_INVALID_FILTER => "ERROR_IPSEC_IKE_INVALID_FILTER",
            .ERROR_IPSEC_IKE_OUT_OF_MEMORY => "ERROR_IPSEC_IKE_OUT_OF_MEMORY",
            .ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED => "ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED",
            .ERROR_IPSEC_IKE_INVALID_POLICY => "ERROR_IPSEC_IKE_INVALID_POLICY",
            .ERROR_IPSEC_IKE_UNKNOWN_DOI => "ERROR_IPSEC_IKE_UNKNOWN_DOI",
            .ERROR_IPSEC_IKE_INVALID_SITUATION => "ERROR_IPSEC_IKE_INVALID_SITUATION",
            .ERROR_IPSEC_IKE_DH_FAILURE => "ERROR_IPSEC_IKE_DH_FAILURE",
            .ERROR_IPSEC_IKE_INVALID_GROUP => "ERROR_IPSEC_IKE_INVALID_GROUP",
            .ERROR_IPSEC_IKE_ENCRYPT => "ERROR_IPSEC_IKE_ENCRYPT",
            .ERROR_IPSEC_IKE_DECRYPT => "ERROR_IPSEC_IKE_DECRYPT",
            .ERROR_IPSEC_IKE_POLICY_MATCH => "ERROR_IPSEC_IKE_POLICY_MATCH",
            .ERROR_IPSEC_IKE_UNSUPPORTED_ID => "ERROR_IPSEC_IKE_UNSUPPORTED_ID",
            .ERROR_IPSEC_IKE_INVALID_HASH => "ERROR_IPSEC_IKE_INVALID_HASH",
            .ERROR_IPSEC_IKE_INVALID_HASH_ALG => "ERROR_IPSEC_IKE_INVALID_HASH_ALG",
            .ERROR_IPSEC_IKE_INVALID_HASH_SIZE => "ERROR_IPSEC_IKE_INVALID_HASH_SIZE",
            .ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG => "ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG",
            .ERROR_IPSEC_IKE_INVALID_AUTH_ALG => "ERROR_IPSEC_IKE_INVALID_AUTH_ALG",
            .ERROR_IPSEC_IKE_INVALID_SIG => "ERROR_IPSEC_IKE_INVALID_SIG",
            .ERROR_IPSEC_IKE_LOAD_FAILED => "ERROR_IPSEC_IKE_LOAD_FAILED",
            .ERROR_IPSEC_IKE_RPC_DELETE => "ERROR_IPSEC_IKE_RPC_DELETE",
            .ERROR_IPSEC_IKE_BENIGN_REINIT => "ERROR_IPSEC_IKE_BENIGN_REINIT",
            .ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY => "ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY",
            .ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION => "ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION",
            .ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN => "ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN",
            .ERROR_IPSEC_IKE_MM_LIMIT => "ERROR_IPSEC_IKE_MM_LIMIT",
            .ERROR_IPSEC_IKE_NEGOTIATION_DISABLED => "ERROR_IPSEC_IKE_NEGOTIATION_DISABLED",
            .ERROR_IPSEC_IKE_QM_LIMIT => "ERROR_IPSEC_IKE_QM_LIMIT",
            .ERROR_IPSEC_IKE_MM_EXPIRED => "ERROR_IPSEC_IKE_MM_EXPIRED",
            .ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID => "ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID",
            .ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH => "ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH",
            .ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID => "ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID",
            .ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD => "ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD",
            .ERROR_IPSEC_IKE_DOS_COOKIE_SENT => "ERROR_IPSEC_IKE_DOS_COOKIE_SENT",
            .ERROR_IPSEC_IKE_SHUTTING_DOWN => "ERROR_IPSEC_IKE_SHUTTING_DOWN",
            .ERROR_IPSEC_IKE_CGA_AUTH_FAILED => "ERROR_IPSEC_IKE_CGA_AUTH_FAILED",
            .ERROR_IPSEC_IKE_PROCESS_ERR_NATOA => "ERROR_IPSEC_IKE_PROCESS_ERR_NATOA",
            .ERROR_IPSEC_IKE_INVALID_MM_FOR_QM => "ERROR_IPSEC_IKE_INVALID_MM_FOR_QM",
            .ERROR_IPSEC_IKE_QM_EXPIRED => "ERROR_IPSEC_IKE_QM_EXPIRED",
            .ERROR_IPSEC_IKE_TOO_MANY_FILTERS => "ERROR_IPSEC_IKE_TOO_MANY_FILTERS",
            .ERROR_IPSEC_IKE_NEG_STATUS_END => "ERROR_IPSEC_IKE_NEG_STATUS_END",
            .ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL => "ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL",
            .ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE => "ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE",
            .ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING => "ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING",
            .ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING => "ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING",
            .ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS => "ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS",
            .ERROR_IPSEC_IKE_RATELIMIT_DROP => "ERROR_IPSEC_IKE_RATELIMIT_DROP",
            .ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE => "ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE",
            .ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE => "ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE",
            .ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE => "ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE",
            .ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY => "ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY",
            .ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE => "ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE",
            .ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END => "ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END",
            .ERROR_IPSEC_BAD_SPI => "ERROR_IPSEC_BAD_SPI",
            .ERROR_IPSEC_SA_LIFETIME_EXPIRED => "ERROR_IPSEC_SA_LIFETIME_EXPIRED",
            .ERROR_IPSEC_WRONG_SA => "ERROR_IPSEC_WRONG_SA",
            .ERROR_IPSEC_REPLAY_CHECK_FAILED => "ERROR_IPSEC_REPLAY_CHECK_FAILED",
            .ERROR_IPSEC_INVALID_PACKET => "ERROR_IPSEC_INVALID_PACKET",
            .ERROR_IPSEC_INTEGRITY_CHECK_FAILED => "ERROR_IPSEC_INTEGRITY_CHECK_FAILED",
            .ERROR_IPSEC_CLEAR_TEXT_DROP => "ERROR_IPSEC_CLEAR_TEXT_DROP",
            .ERROR_IPSEC_AUTH_FIREWALL_DROP => "ERROR_IPSEC_AUTH_FIREWALL_DROP",
            .ERROR_IPSEC_THROTTLE_DROP => "ERROR_IPSEC_THROTTLE_DROP",
            .ERROR_IPSEC_DOSP_BLOCK => "ERROR_IPSEC_DOSP_BLOCK",
            .ERROR_IPSEC_DOSP_RECEIVED_MULTICAST => "ERROR_IPSEC_DOSP_RECEIVED_MULTICAST",
            .ERROR_IPSEC_DOSP_INVALID_PACKET => "ERROR_IPSEC_DOSP_INVALID_PACKET",
            .ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED => "ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED",
            .ERROR_IPSEC_DOSP_MAX_ENTRIES => "ERROR_IPSEC_DOSP_MAX_ENTRIES",
            .ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED => "ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED",
            .ERROR_IPSEC_DOSP_NOT_INSTALLED => "ERROR_IPSEC_DOSP_NOT_INSTALLED",
            .ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES => "ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES",
            .ERROR_SXS_SECTION_NOT_FOUND => "ERROR_SXS_SECTION_NOT_FOUND",
            .ERROR_SXS_CANT_GEN_ACTCTX => "ERROR_SXS_CANT_GEN_ACTCTX",
            .ERROR_SXS_INVALID_ACTCTXDATA_FORMAT => "ERROR_SXS_INVALID_ACTCTXDATA_FORMAT",
            .ERROR_SXS_ASSEMBLY_NOT_FOUND => "ERROR_SXS_ASSEMBLY_NOT_FOUND",
            .ERROR_SXS_MANIFEST_FORMAT_ERROR => "ERROR_SXS_MANIFEST_FORMAT_ERROR",
            .ERROR_SXS_MANIFEST_PARSE_ERROR => "ERROR_SXS_MANIFEST_PARSE_ERROR",
            .ERROR_SXS_ACTIVATION_CONTEXT_DISABLED => "ERROR_SXS_ACTIVATION_CONTEXT_DISABLED",
            .ERROR_SXS_KEY_NOT_FOUND => "ERROR_SXS_KEY_NOT_FOUND",
            .ERROR_SXS_VERSION_CONFLICT => "ERROR_SXS_VERSION_CONFLICT",
            .ERROR_SXS_WRONG_SECTION_TYPE => "ERROR_SXS_WRONG_SECTION_TYPE",
            .ERROR_SXS_THREAD_QUERIES_DISABLED => "ERROR_SXS_THREAD_QUERIES_DISABLED",
            .ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET => "ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET",
            .ERROR_SXS_UNKNOWN_ENCODING_GROUP => "ERROR_SXS_UNKNOWN_ENCODING_GROUP",
            .ERROR_SXS_UNKNOWN_ENCODING => "ERROR_SXS_UNKNOWN_ENCODING",
            .ERROR_SXS_INVALID_XML_NAMESPACE_URI => "ERROR_SXS_INVALID_XML_NAMESPACE_URI",
            .ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED => "ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED",
            .ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED => "ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED",
            .ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE => "ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE",
            .ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE => "ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE",
            .ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE => "ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE",
            .ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT => "ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT",
            .ERROR_SXS_DUPLICATE_DLL_NAME => "ERROR_SXS_DUPLICATE_DLL_NAME",
            .ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME => "ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME",
            .ERROR_SXS_DUPLICATE_CLSID => "ERROR_SXS_DUPLICATE_CLSID",
            .ERROR_SXS_DUPLICATE_IID => "ERROR_SXS_DUPLICATE_IID",
            .ERROR_SXS_DUPLICATE_TLBID => "ERROR_SXS_DUPLICATE_TLBID",
            .ERROR_SXS_DUPLICATE_PROGID => "ERROR_SXS_DUPLICATE_PROGID",
            .ERROR_SXS_DUPLICATE_ASSEMBLY_NAME => "ERROR_SXS_DUPLICATE_ASSEMBLY_NAME",
            .ERROR_SXS_FILE_HASH_MISMATCH => "ERROR_SXS_FILE_HASH_MISMATCH",
            .ERROR_SXS_POLICY_PARSE_ERROR => "ERROR_SXS_POLICY_PARSE_ERROR",
            .ERROR_SXS_XML_E_MISSINGQUOTE => "ERROR_SXS_XML_E_MISSINGQUOTE",
            .ERROR_SXS_XML_E_COMMENTSYNTAX => "ERROR_SXS_XML_E_COMMENTSYNTAX",
            .ERROR_SXS_XML_E_BADSTARTNAMECHAR => "ERROR_SXS_XML_E_BADSTARTNAMECHAR",
            .ERROR_SXS_XML_E_BADNAMECHAR => "ERROR_SXS_XML_E_BADNAMECHAR",
            .ERROR_SXS_XML_E_BADCHARINSTRING => "ERROR_SXS_XML_E_BADCHARINSTRING",
            .ERROR_SXS_XML_E_XMLDECLSYNTAX => "ERROR_SXS_XML_E_XMLDECLSYNTAX",
            .ERROR_SXS_XML_E_BADCHARDATA => "ERROR_SXS_XML_E_BADCHARDATA",
            .ERROR_SXS_XML_E_MISSINGWHITESPACE => "ERROR_SXS_XML_E_MISSINGWHITESPACE",
            .ERROR_SXS_XML_E_EXPECTINGTAGEND => "ERROR_SXS_XML_E_EXPECTINGTAGEND",
            .ERROR_SXS_XML_E_MISSINGSEMICOLON => "ERROR_SXS_XML_E_MISSINGSEMICOLON",
            .ERROR_SXS_XML_E_UNBALANCEDPAREN => "ERROR_SXS_XML_E_UNBALANCEDPAREN",
            .ERROR_SXS_XML_E_INTERNALERROR => "ERROR_SXS_XML_E_INTERNALERROR",
            .ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE => "ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE",
            .ERROR_SXS_XML_E_INCOMPLETE_ENCODING => "ERROR_SXS_XML_E_INCOMPLETE_ENCODING",
            .ERROR_SXS_XML_E_MISSING_PAREN => "ERROR_SXS_XML_E_MISSING_PAREN",
            .ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE => "ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE",
            .ERROR_SXS_XML_E_MULTIPLE_COLONS => "ERROR_SXS_XML_E_MULTIPLE_COLONS",
            .ERROR_SXS_XML_E_INVALID_DECIMAL => "ERROR_SXS_XML_E_INVALID_DECIMAL",
            .ERROR_SXS_XML_E_INVALID_HEXIDECIMAL => "ERROR_SXS_XML_E_INVALID_HEXIDECIMAL",
            .ERROR_SXS_XML_E_INVALID_UNICODE => "ERROR_SXS_XML_E_INVALID_UNICODE",
            .ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK => "ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK",
            .ERROR_SXS_XML_E_UNEXPECTEDENDTAG => "ERROR_SXS_XML_E_UNEXPECTEDENDTAG",
            .ERROR_SXS_XML_E_UNCLOSEDTAG => "ERROR_SXS_XML_E_UNCLOSEDTAG",
            .ERROR_SXS_XML_E_DUPLICATEATTRIBUTE => "ERROR_SXS_XML_E_DUPLICATEATTRIBUTE",
            .ERROR_SXS_XML_E_MULTIPLEROOTS => "ERROR_SXS_XML_E_MULTIPLEROOTS",
            .ERROR_SXS_XML_E_INVALIDATROOTLEVEL => "ERROR_SXS_XML_E_INVALIDATROOTLEVEL",
            .ERROR_SXS_XML_E_BADXMLDECL => "ERROR_SXS_XML_E_BADXMLDECL",
            .ERROR_SXS_XML_E_MISSINGROOT => "ERROR_SXS_XML_E_MISSINGROOT",
            .ERROR_SXS_XML_E_UNEXPECTEDEOF => "ERROR_SXS_XML_E_UNEXPECTEDEOF",
            .ERROR_SXS_XML_E_BADPEREFINSUBSET => "ERROR_SXS_XML_E_BADPEREFINSUBSET",
            .ERROR_SXS_XML_E_UNCLOSEDSTARTTAG => "ERROR_SXS_XML_E_UNCLOSEDSTARTTAG",
            .ERROR_SXS_XML_E_UNCLOSEDENDTAG => "ERROR_SXS_XML_E_UNCLOSEDENDTAG",
            .ERROR_SXS_XML_E_UNCLOSEDSTRING => "ERROR_SXS_XML_E_UNCLOSEDSTRING",
            .ERROR_SXS_XML_E_UNCLOSEDCOMMENT => "ERROR_SXS_XML_E_UNCLOSEDCOMMENT",
            .ERROR_SXS_XML_E_UNCLOSEDDECL => "ERROR_SXS_XML_E_UNCLOSEDDECL",
            .ERROR_SXS_XML_E_UNCLOSEDCDATA => "ERROR_SXS_XML_E_UNCLOSEDCDATA",
            .ERROR_SXS_XML_E_RESERVEDNAMESPACE => "ERROR_SXS_XML_E_RESERVEDNAMESPACE",
            .ERROR_SXS_XML_E_INVALIDENCODING => "ERROR_SXS_XML_E_INVALIDENCODING",
            .ERROR_SXS_XML_E_INVALIDSWITCH => "ERROR_SXS_XML_E_INVALIDSWITCH",
            .ERROR_SXS_XML_E_BADXMLCASE => "ERROR_SXS_XML_E_BADXMLCASE",
            .ERROR_SXS_XML_E_INVALID_STANDALONE => "ERROR_SXS_XML_E_INVALID_STANDALONE",
            .ERROR_SXS_XML_E_UNEXPECTED_STANDALONE => "ERROR_SXS_XML_E_UNEXPECTED_STANDALONE",
            .ERROR_SXS_XML_E_INVALID_VERSION => "ERROR_SXS_XML_E_INVALID_VERSION",
            .ERROR_SXS_XML_E_MISSINGEQUALS => "ERROR_SXS_XML_E_MISSINGEQUALS",
            .ERROR_SXS_PROTECTION_RECOVERY_FAILED => "ERROR_SXS_PROTECTION_RECOVERY_FAILED",
            .ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT => "ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT",
            .ERROR_SXS_PROTECTION_CATALOG_NOT_VALID => "ERROR_SXS_PROTECTION_CATALOG_NOT_VALID",
            .ERROR_SXS_UNTRANSLATABLE_HRESULT => "ERROR_SXS_UNTRANSLATABLE_HRESULT",
            .ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING => "ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING",
            .ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE => "ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE",
            .ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME => "ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME",
            .ERROR_SXS_ASSEMBLY_MISSING => "ERROR_SXS_ASSEMBLY_MISSING",
            .ERROR_SXS_CORRUPT_ACTIVATION_STACK => "ERROR_SXS_CORRUPT_ACTIVATION_STACK",
            .ERROR_SXS_CORRUPTION => "ERROR_SXS_CORRUPTION",
            .ERROR_SXS_EARLY_DEACTIVATION => "ERROR_SXS_EARLY_DEACTIVATION",
            .ERROR_SXS_INVALID_DEACTIVATION => "ERROR_SXS_INVALID_DEACTIVATION",
            .ERROR_SXS_MULTIPLE_DEACTIVATION => "ERROR_SXS_MULTIPLE_DEACTIVATION",
            .ERROR_SXS_PROCESS_TERMINATION_REQUESTED => "ERROR_SXS_PROCESS_TERMINATION_REQUESTED",
            .ERROR_SXS_RELEASE_ACTIVATION_CONTEXT => "ERROR_SXS_RELEASE_ACTIVATION_CONTEXT",
            .ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY => "ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY",
            .ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE => "ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE",
            .ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME => "ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME",
            .ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE => "ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE",
            .ERROR_SXS_IDENTITY_PARSE_ERROR => "ERROR_SXS_IDENTITY_PARSE_ERROR",
            .ERROR_MALFORMED_SUBSTITUTION_STRING => "ERROR_MALFORMED_SUBSTITUTION_STRING",
            .ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN => "ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN",
            .ERROR_UNMAPPED_SUBSTITUTION_STRING => "ERROR_UNMAPPED_SUBSTITUTION_STRING",
            .ERROR_SXS_ASSEMBLY_NOT_LOCKED => "ERROR_SXS_ASSEMBLY_NOT_LOCKED",
            .ERROR_SXS_COMPONENT_STORE_CORRUPT => "ERROR_SXS_COMPONENT_STORE_CORRUPT",
            .ERROR_ADVANCED_INSTALLER_FAILED => "ERROR_ADVANCED_INSTALLER_FAILED",
            .ERROR_XML_ENCODING_MISMATCH => "ERROR_XML_ENCODING_MISMATCH",
            .ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT => "ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT",
            .ERROR_SXS_IDENTITIES_DIFFERENT => "ERROR_SXS_IDENTITIES_DIFFERENT",
            .ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT => "ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT",
            .ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY => "ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY",
            .ERROR_SXS_MANIFEST_TOO_BIG => "ERROR_SXS_MANIFEST_TOO_BIG",
            .ERROR_SXS_SETTING_NOT_REGISTERED => "ERROR_SXS_SETTING_NOT_REGISTERED",
            .ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE => "ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE",
            .ERROR_SMI_PRIMITIVE_INSTALLER_FAILED => "ERROR_SMI_PRIMITIVE_INSTALLER_FAILED",
            .ERROR_GENERIC_COMMAND_FAILED => "ERROR_GENERIC_COMMAND_FAILED",
            .ERROR_SXS_FILE_HASH_MISSING => "ERROR_SXS_FILE_HASH_MISSING",
            .ERROR_SXS_DUPLICATE_ACTIVATABLE_CLASS => "ERROR_SXS_DUPLICATE_ACTIVATABLE_CLASS",
            .ERROR_EVT_INVALID_CHANNEL_PATH => "ERROR_EVT_INVALID_CHANNEL_PATH",
            .ERROR_EVT_INVALID_QUERY => "ERROR_EVT_INVALID_QUERY",
            .ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND => "ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND",
            .ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND => "ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND",
            .ERROR_EVT_INVALID_PUBLISHER_NAME => "ERROR_EVT_INVALID_PUBLISHER_NAME",
            .ERROR_EVT_INVALID_EVENT_DATA => "ERROR_EVT_INVALID_EVENT_DATA",
            .ERROR_EVT_CHANNEL_NOT_FOUND => "ERROR_EVT_CHANNEL_NOT_FOUND",
            .ERROR_EVT_MALFORMED_XML_TEXT => "ERROR_EVT_MALFORMED_XML_TEXT",
            .ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL => "ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL",
            .ERROR_EVT_CONFIGURATION_ERROR => "ERROR_EVT_CONFIGURATION_ERROR",
            .ERROR_EVT_QUERY_RESULT_STALE => "ERROR_EVT_QUERY_RESULT_STALE",
            .ERROR_EVT_QUERY_RESULT_INVALID_POSITION => "ERROR_EVT_QUERY_RESULT_INVALID_POSITION",
            .ERROR_EVT_NON_VALIDATING_MSXML => "ERROR_EVT_NON_VALIDATING_MSXML",
            .ERROR_EVT_FILTER_ALREADYSCOPED => "ERROR_EVT_FILTER_ALREADYSCOPED",
            .ERROR_EVT_FILTER_NOTELTSET => "ERROR_EVT_FILTER_NOTELTSET",
            .ERROR_EVT_FILTER_INVARG => "ERROR_EVT_FILTER_INVARG",
            .ERROR_EVT_FILTER_INVTEST => "ERROR_EVT_FILTER_INVTEST",
            .ERROR_EVT_FILTER_INVTYPE => "ERROR_EVT_FILTER_INVTYPE",
            .ERROR_EVT_FILTER_PARSEERR => "ERROR_EVT_FILTER_PARSEERR",
            .ERROR_EVT_FILTER_UNSUPPORTEDOP => "ERROR_EVT_FILTER_UNSUPPORTEDOP",
            .ERROR_EVT_FILTER_UNEXPECTEDTOKEN => "ERROR_EVT_FILTER_UNEXPECTEDTOKEN",
            .ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL => "ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL",
            .ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE => "ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE",
            .ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE => "ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE",
            .ERROR_EVT_CHANNEL_CANNOT_ACTIVATE => "ERROR_EVT_CHANNEL_CANNOT_ACTIVATE",
            .ERROR_EVT_FILTER_TOO_COMPLEX => "ERROR_EVT_FILTER_TOO_COMPLEX",
            .ERROR_EVT_MESSAGE_NOT_FOUND => "ERROR_EVT_MESSAGE_NOT_FOUND",
            .ERROR_EVT_MESSAGE_ID_NOT_FOUND => "ERROR_EVT_MESSAGE_ID_NOT_FOUND",
            .ERROR_EVT_UNRESOLVED_VALUE_INSERT => "ERROR_EVT_UNRESOLVED_VALUE_INSERT",
            .ERROR_EVT_UNRESOLVED_PARAMETER_INSERT => "ERROR_EVT_UNRESOLVED_PARAMETER_INSERT",
            .ERROR_EVT_MAX_INSERTS_REACHED => "ERROR_EVT_MAX_INSERTS_REACHED",
            .ERROR_EVT_EVENT_DEFINITION_NOT_FOUND => "ERROR_EVT_EVENT_DEFINITION_NOT_FOUND",
            .ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND => "ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND",
            .ERROR_EVT_VERSION_TOO_OLD => "ERROR_EVT_VERSION_TOO_OLD",
            .ERROR_EVT_VERSION_TOO_NEW => "ERROR_EVT_VERSION_TOO_NEW",
            .ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY => "ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY",
            .ERROR_EVT_PUBLISHER_DISABLED => "ERROR_EVT_PUBLISHER_DISABLED",
            .ERROR_EVT_FILTER_OUT_OF_RANGE => "ERROR_EVT_FILTER_OUT_OF_RANGE",
            .ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE => "ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE",
            .ERROR_EC_LOG_DISABLED => "ERROR_EC_LOG_DISABLED",
            .ERROR_EC_CIRCULAR_FORWARDING => "ERROR_EC_CIRCULAR_FORWARDING",
            .ERROR_EC_CREDSTORE_FULL => "ERROR_EC_CREDSTORE_FULL",
            .ERROR_EC_CRED_NOT_FOUND => "ERROR_EC_CRED_NOT_FOUND",
            .ERROR_EC_NO_ACTIVE_CHANNEL => "ERROR_EC_NO_ACTIVE_CHANNEL",
            .ERROR_MUI_FILE_NOT_FOUND => "ERROR_MUI_FILE_NOT_FOUND",
            .ERROR_MUI_INVALID_FILE => "ERROR_MUI_INVALID_FILE",
            .ERROR_MUI_INVALID_RC_CONFIG => "ERROR_MUI_INVALID_RC_CONFIG",
            .ERROR_MUI_INVALID_LOCALE_NAME => "ERROR_MUI_INVALID_LOCALE_NAME",
            .ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME => "ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME",
            .ERROR_MUI_FILE_NOT_LOADED => "ERROR_MUI_FILE_NOT_LOADED",
            .ERROR_RESOURCE_ENUM_USER_STOP => "ERROR_RESOURCE_ENUM_USER_STOP",
            .ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED => "ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED",
            .ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME => "ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME",
            .ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE => "ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE",
            .ERROR_MRM_INVALID_PRICONFIG => "ERROR_MRM_INVALID_PRICONFIG",
            .ERROR_MRM_INVALID_FILE_TYPE => "ERROR_MRM_INVALID_FILE_TYPE",
            .ERROR_MRM_UNKNOWN_QUALIFIER => "ERROR_MRM_UNKNOWN_QUALIFIER",
            .ERROR_MRM_INVALID_QUALIFIER_VALUE => "ERROR_MRM_INVALID_QUALIFIER_VALUE",
            .ERROR_MRM_NO_CANDIDATE => "ERROR_MRM_NO_CANDIDATE",
            .ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE => "ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE",
            .ERROR_MRM_RESOURCE_TYPE_MISMATCH => "ERROR_MRM_RESOURCE_TYPE_MISMATCH",
            .ERROR_MRM_DUPLICATE_MAP_NAME => "ERROR_MRM_DUPLICATE_MAP_NAME",
            .ERROR_MRM_DUPLICATE_ENTRY => "ERROR_MRM_DUPLICATE_ENTRY",
            .ERROR_MRM_INVALID_RESOURCE_IDENTIFIER => "ERROR_MRM_INVALID_RESOURCE_IDENTIFIER",
            .ERROR_MRM_FILEPATH_TOO_LONG => "ERROR_MRM_FILEPATH_TOO_LONG",
            .ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE => "ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE",
            .ERROR_MRM_INVALID_PRI_FILE => "ERROR_MRM_INVALID_PRI_FILE",
            .ERROR_MRM_NAMED_RESOURCE_NOT_FOUND => "ERROR_MRM_NAMED_RESOURCE_NOT_FOUND",
            .ERROR_MRM_MAP_NOT_FOUND => "ERROR_MRM_MAP_NOT_FOUND",
            .ERROR_MRM_UNSUPPORTED_PROFILE_TYPE => "ERROR_MRM_UNSUPPORTED_PROFILE_TYPE",
            .ERROR_MRM_INVALID_QUALIFIER_OPERATOR => "ERROR_MRM_INVALID_QUALIFIER_OPERATOR",
            .ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE => "ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE",
            .ERROR_MRM_AUTOMERGE_ENABLED => "ERROR_MRM_AUTOMERGE_ENABLED",
            .ERROR_MRM_TOO_MANY_RESOURCES => "ERROR_MRM_TOO_MANY_RESOURCES",
            .ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_MERGE => "ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_MERGE",
            .ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_LOAD_UNLOAD_PRI_FILE => "ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_LOAD_UNLOAD_PRI_FILE",
            .ERROR_MRM_NO_CURRENT_VIEW_ON_THREAD => "ERROR_MRM_NO_CURRENT_VIEW_ON_THREAD",
            .ERROR_DIFFERENT_PROFILE_RESOURCE_MANAGER_EXIST => "ERROR_DIFFERENT_PROFILE_RESOURCE_MANAGER_EXIST",
            .ERROR_OPERATION_NOT_ALLOWED_FROM_SYSTEM_COMPONENT => "ERROR_OPERATION_NOT_ALLOWED_FROM_SYSTEM_COMPONENT",
            .ERROR_MRM_DIRECT_REF_TO_NON_DEFAULT_RESOURCE => "ERROR_MRM_DIRECT_REF_TO_NON_DEFAULT_RESOURCE",
            .ERROR_MRM_GENERATION_COUNT_MISMATCH => "ERROR_MRM_GENERATION_COUNT_MISMATCH",
            .ERROR_PRI_MERGE_VERSION_MISMATCH => "ERROR_PRI_MERGE_VERSION_MISMATCH",
            .ERROR_PRI_MERGE_MISSING_SCHEMA => "ERROR_PRI_MERGE_MISSING_SCHEMA",
            .ERROR_PRI_MERGE_LOAD_FILE_FAILED => "ERROR_PRI_MERGE_LOAD_FILE_FAILED",
            .ERROR_PRI_MERGE_ADD_FILE_FAILED => "ERROR_PRI_MERGE_ADD_FILE_FAILED",
            .ERROR_PRI_MERGE_WRITE_FILE_FAILED => "ERROR_PRI_MERGE_WRITE_FILE_FAILED",
            .ERROR_PRI_MERGE_MULTIPLE_PACKAGE_FAMILIES_NOT_ALLOWED => "ERROR_PRI_MERGE_MULTIPLE_PACKAGE_FAMILIES_NOT_ALLOWED",
            .ERROR_PRI_MERGE_MULTIPLE_MAIN_PACKAGES_NOT_ALLOWED => "ERROR_PRI_MERGE_MULTIPLE_MAIN_PACKAGES_NOT_ALLOWED",
            .ERROR_PRI_MERGE_BUNDLE_PACKAGES_NOT_ALLOWED => "ERROR_PRI_MERGE_BUNDLE_PACKAGES_NOT_ALLOWED",
            .ERROR_PRI_MERGE_MAIN_PACKAGE_REQUIRED => "ERROR_PRI_MERGE_MAIN_PACKAGE_REQUIRED",
            .ERROR_PRI_MERGE_RESOURCE_PACKAGE_REQUIRED => "ERROR_PRI_MERGE_RESOURCE_PACKAGE_REQUIRED",
            .ERROR_PRI_MERGE_INVALID_FILE_NAME => "ERROR_PRI_MERGE_INVALID_FILE_NAME",
            .ERROR_MRM_PACKAGE_NOT_FOUND => "ERROR_MRM_PACKAGE_NOT_FOUND",
            .ERROR_MRM_MISSING_DEFAULT_LANGUAGE => "ERROR_MRM_MISSING_DEFAULT_LANGUAGE",
            .ERROR_MCA_INVALID_CAPABILITIES_STRING => "ERROR_MCA_INVALID_CAPABILITIES_STRING",
            .ERROR_MCA_INVALID_VCP_VERSION => "ERROR_MCA_INVALID_VCP_VERSION",
            .ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION => "ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION",
            .ERROR_MCA_MCCS_VERSION_MISMATCH => "ERROR_MCA_MCCS_VERSION_MISMATCH",
            .ERROR_MCA_UNSUPPORTED_MCCS_VERSION => "ERROR_MCA_UNSUPPORTED_MCCS_VERSION",
            .ERROR_MCA_INTERNAL_ERROR => "ERROR_MCA_INTERNAL_ERROR",
            .ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED => "ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED",
            .ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE => "ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE",
            .ERROR_AMBIGUOUS_SYSTEM_DEVICE => "ERROR_AMBIGUOUS_SYSTEM_DEVICE",
            .ERROR_SYSTEM_DEVICE_NOT_FOUND => "ERROR_SYSTEM_DEVICE_NOT_FOUND",
            .ERROR_HASH_NOT_SUPPORTED => "ERROR_HASH_NOT_SUPPORTED",
            .ERROR_HASH_NOT_PRESENT => "ERROR_HASH_NOT_PRESENT",
            .ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED => "ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED",
            .ERROR_GPIO_CLIENT_INFORMATION_INVALID => "ERROR_GPIO_CLIENT_INFORMATION_INVALID",
            .ERROR_GPIO_VERSION_NOT_SUPPORTED => "ERROR_GPIO_VERSION_NOT_SUPPORTED",
            .ERROR_GPIO_INVALID_REGISTRATION_PACKET => "ERROR_GPIO_INVALID_REGISTRATION_PACKET",
            .ERROR_GPIO_OPERATION_DENIED => "ERROR_GPIO_OPERATION_DENIED",
            .ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE => "ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE",
            .ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED => "ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED",
            .ERROR_CANNOT_SWITCH_RUNLEVEL => "ERROR_CANNOT_SWITCH_RUNLEVEL",
            .ERROR_INVALID_RUNLEVEL_SETTING => "ERROR_INVALID_RUNLEVEL_SETTING",
            .ERROR_RUNLEVEL_SWITCH_TIMEOUT => "ERROR_RUNLEVEL_SWITCH_TIMEOUT",
            .ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT => "ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT",
            .ERROR_RUNLEVEL_SWITCH_IN_PROGRESS => "ERROR_RUNLEVEL_SWITCH_IN_PROGRESS",
            .ERROR_SERVICES_FAILED_AUTOSTART => "ERROR_SERVICES_FAILED_AUTOSTART",
            .ERROR_COM_TASK_STOP_PENDING => "ERROR_COM_TASK_STOP_PENDING",
            .ERROR_INSTALL_OPEN_PACKAGE_FAILED => "ERROR_INSTALL_OPEN_PACKAGE_FAILED",
            .ERROR_INSTALL_PACKAGE_NOT_FOUND => "ERROR_INSTALL_PACKAGE_NOT_FOUND",
            .ERROR_INSTALL_INVALID_PACKAGE => "ERROR_INSTALL_INVALID_PACKAGE",
            .ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED => "ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED",
            .ERROR_INSTALL_OUT_OF_DISK_SPACE => "ERROR_INSTALL_OUT_OF_DISK_SPACE",
            .ERROR_INSTALL_NETWORK_FAILURE => "ERROR_INSTALL_NETWORK_FAILURE",
            .ERROR_INSTALL_REGISTRATION_FAILURE => "ERROR_INSTALL_REGISTRATION_FAILURE",
            .ERROR_INSTALL_DEREGISTRATION_FAILURE => "ERROR_INSTALL_DEREGISTRATION_FAILURE",
            .ERROR_INSTALL_CANCEL => "ERROR_INSTALL_CANCEL",
            .ERROR_INSTALL_FAILED => "ERROR_INSTALL_FAILED",
            .ERROR_REMOVE_FAILED => "ERROR_REMOVE_FAILED",
            .ERROR_PACKAGE_ALREADY_EXISTS => "ERROR_PACKAGE_ALREADY_EXISTS",
            .ERROR_NEEDS_REMEDIATION => "ERROR_NEEDS_REMEDIATION",
            .ERROR_INSTALL_PREREQUISITE_FAILED => "ERROR_INSTALL_PREREQUISITE_FAILED",
            .ERROR_PACKAGE_REPOSITORY_CORRUPTED => "ERROR_PACKAGE_REPOSITORY_CORRUPTED",
            .ERROR_INSTALL_POLICY_FAILURE => "ERROR_INSTALL_POLICY_FAILURE",
            .ERROR_PACKAGE_UPDATING => "ERROR_PACKAGE_UPDATING",
            .ERROR_DEPLOYMENT_BLOCKED_BY_POLICY => "ERROR_DEPLOYMENT_BLOCKED_BY_POLICY",
            .ERROR_PACKAGES_IN_USE => "ERROR_PACKAGES_IN_USE",
            .ERROR_RECOVERY_FILE_CORRUPT => "ERROR_RECOVERY_FILE_CORRUPT",
            .ERROR_INVALID_STAGED_SIGNATURE => "ERROR_INVALID_STAGED_SIGNATURE",
            .ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED => "ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED",
            .ERROR_INSTALL_PACKAGE_DOWNGRADE => "ERROR_INSTALL_PACKAGE_DOWNGRADE",
            .ERROR_SYSTEM_NEEDS_REMEDIATION => "ERROR_SYSTEM_NEEDS_REMEDIATION",
            .ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN => "ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN",
            .ERROR_RESILIENCY_FILE_CORRUPT => "ERROR_RESILIENCY_FILE_CORRUPT",
            .ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING => "ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING",
            .ERROR_PACKAGE_MOVE_FAILED => "ERROR_PACKAGE_MOVE_FAILED",
            .ERROR_INSTALL_VOLUME_NOT_EMPTY => "ERROR_INSTALL_VOLUME_NOT_EMPTY",
            .ERROR_INSTALL_VOLUME_OFFLINE => "ERROR_INSTALL_VOLUME_OFFLINE",
            .ERROR_INSTALL_VOLUME_CORRUPT => "ERROR_INSTALL_VOLUME_CORRUPT",
            .ERROR_NEEDS_REGISTRATION => "ERROR_NEEDS_REGISTRATION",
            .ERROR_INSTALL_WRONG_PROCESSOR_ARCHITECTURE => "ERROR_INSTALL_WRONG_PROCESSOR_ARCHITECTURE",
            .ERROR_DEV_SIDELOAD_LIMIT_EXCEEDED => "ERROR_DEV_SIDELOAD_LIMIT_EXCEEDED",
            .ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE => "ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE",
            .ERROR_PACKAGE_NOT_SUPPORTED_ON_FILESYSTEM => "ERROR_PACKAGE_NOT_SUPPORTED_ON_FILESYSTEM",
            .ERROR_PACKAGE_MOVE_BLOCKED_BY_STREAMING => "ERROR_PACKAGE_MOVE_BLOCKED_BY_STREAMING",
            .ERROR_INSTALL_OPTIONAL_PACKAGE_APPLICATIONID_NOT_UNIQUE => "ERROR_INSTALL_OPTIONAL_PACKAGE_APPLICATIONID_NOT_UNIQUE",
            .ERROR_PACKAGE_STAGING_ONHOLD => "ERROR_PACKAGE_STAGING_ONHOLD",
            .ERROR_INSTALL_INVALID_RELATED_SET_UPDATE => "ERROR_INSTALL_INVALID_RELATED_SET_UPDATE",
            .ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY => "ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY",
            .ERROR_DEPLOYMENT_BLOCKED_BY_USER_LOG_OFF => "ERROR_DEPLOYMENT_BLOCKED_BY_USER_LOG_OFF",
            .ERROR_PROVISION_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_PROVISIONED => "ERROR_PROVISION_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_PROVISIONED",
            .ERROR_PACKAGES_REPUTATION_CHECK_FAILED => "ERROR_PACKAGES_REPUTATION_CHECK_FAILED",
            .ERROR_PACKAGES_REPUTATION_CHECK_TIMEDOUT => "ERROR_PACKAGES_REPUTATION_CHECK_TIMEDOUT",
            .ERROR_DEPLOYMENT_OPTION_NOT_SUPPORTED => "ERROR_DEPLOYMENT_OPTION_NOT_SUPPORTED",
            .ERROR_APPINSTALLER_ACTIVATION_BLOCKED => "ERROR_APPINSTALLER_ACTIVATION_BLOCKED",
            .ERROR_REGISTRATION_FROM_REMOTE_DRIVE_NOT_SUPPORTED => "ERROR_REGISTRATION_FROM_REMOTE_DRIVE_NOT_SUPPORTED",
            .ERROR_APPX_RAW_DATA_WRITE_FAILED => "ERROR_APPX_RAW_DATA_WRITE_FAILED",
            .ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_PACKAGE => "ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_PACKAGE",
            .ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_MACHINE => "ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_MACHINE",
            .ERROR_DEPLOYMENT_BLOCKED_BY_PROFILE_POLICY => "ERROR_DEPLOYMENT_BLOCKED_BY_PROFILE_POLICY",
            .ERROR_DEPLOYMENT_FAILED_CONFLICTING_MUTABLE_PACKAGE_DIRECTORY => "ERROR_DEPLOYMENT_FAILED_CONFLICTING_MUTABLE_PACKAGE_DIRECTORY",
            .ERROR_SINGLETON_RESOURCE_INSTALLED_IN_ACTIVE_USER => "ERROR_SINGLETON_RESOURCE_INSTALLED_IN_ACTIVE_USER",
            .ERROR_DIFFERENT_VERSION_OF_PACKAGED_SERVICE_INSTALLED => "ERROR_DIFFERENT_VERSION_OF_PACKAGED_SERVICE_INSTALLED",
            .ERROR_SERVICE_EXISTS_AS_NON_PACKAGED_SERVICE => "ERROR_SERVICE_EXISTS_AS_NON_PACKAGED_SERVICE",
            .ERROR_PACKAGED_SERVICE_REQUIRES_ADMIN_PRIVILEGES => "ERROR_PACKAGED_SERVICE_REQUIRES_ADMIN_PRIVILEGES",
            .ERROR_REDIRECTION_TO_DEFAULT_ACCOUNT_NOT_ALLOWED => "ERROR_REDIRECTION_TO_DEFAULT_ACCOUNT_NOT_ALLOWED",
            .ERROR_PACKAGE_LACKS_CAPABILITY_TO_DEPLOY_ON_HOST => "ERROR_PACKAGE_LACKS_CAPABILITY_TO_DEPLOY_ON_HOST",
            .ERROR_UNSIGNED_PACKAGE_INVALID_CONTENT => "ERROR_UNSIGNED_PACKAGE_INVALID_CONTENT",
            .ERROR_UNSIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE => "ERROR_UNSIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE",
            .ERROR_SIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE => "ERROR_SIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE",
            .ERROR_PACKAGE_EXTERNAL_LOCATION_NOT_ALLOWED => "ERROR_PACKAGE_EXTERNAL_LOCATION_NOT_ALLOWED",
            .ERROR_INSTALL_FULLTRUST_HOSTRUNTIME_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY => "ERROR_INSTALL_FULLTRUST_HOSTRUNTIME_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY",
            .ERROR_PACKAGE_LACKS_CAPABILITY_FOR_MANDATORY_STARTUPTASKS => "ERROR_PACKAGE_LACKS_CAPABILITY_FOR_MANDATORY_STARTUPTASKS",
            .ERROR_INSTALL_RESOLVE_HOSTRUNTIME_DEPENDENCY_FAILED => "ERROR_INSTALL_RESOLVE_HOSTRUNTIME_DEPENDENCY_FAILED",
            .ERROR_MACHINE_SCOPE_NOT_ALLOWED => "ERROR_MACHINE_SCOPE_NOT_ALLOWED",
            .ERROR_CLASSIC_COMPAT_MODE_NOT_ALLOWED => "ERROR_CLASSIC_COMPAT_MODE_NOT_ALLOWED",
            .ERROR_STAGEFROMUPDATEAGENT_PACKAGE_NOT_APPLICABLE => "ERROR_STAGEFROMUPDATEAGENT_PACKAGE_NOT_APPLICABLE",
            .ERROR_PACKAGE_NOT_REGISTERED_FOR_USER => "ERROR_PACKAGE_NOT_REGISTERED_FOR_USER",
            .ERROR_STATE_LOAD_STORE_FAILED => "ERROR_STATE_LOAD_STORE_FAILED",
            .ERROR_STATE_GET_VERSION_FAILED => "ERROR_STATE_GET_VERSION_FAILED",
            .ERROR_STATE_SET_VERSION_FAILED => "ERROR_STATE_SET_VERSION_FAILED",
            .ERROR_STATE_STRUCTURED_RESET_FAILED => "ERROR_STATE_STRUCTURED_RESET_FAILED",
            .ERROR_STATE_OPEN_CONTAINER_FAILED => "ERROR_STATE_OPEN_CONTAINER_FAILED",
            .ERROR_STATE_CREATE_CONTAINER_FAILED => "ERROR_STATE_CREATE_CONTAINER_FAILED",
            .ERROR_STATE_DELETE_CONTAINER_FAILED => "ERROR_STATE_DELETE_CONTAINER_FAILED",
            .ERROR_STATE_READ_SETTING_FAILED => "ERROR_STATE_READ_SETTING_FAILED",
            .ERROR_STATE_WRITE_SETTING_FAILED => "ERROR_STATE_WRITE_SETTING_FAILED",
            .ERROR_STATE_DELETE_SETTING_FAILED => "ERROR_STATE_DELETE_SETTING_FAILED",
            .ERROR_STATE_QUERY_SETTING_FAILED => "ERROR_STATE_QUERY_SETTING_FAILED",
            .ERROR_STATE_READ_COMPOSITE_SETTING_FAILED => "ERROR_STATE_READ_COMPOSITE_SETTING_FAILED",
            .ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED => "ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED",
            .ERROR_STATE_ENUMERATE_CONTAINER_FAILED => "ERROR_STATE_ENUMERATE_CONTAINER_FAILED",
            .ERROR_STATE_ENUMERATE_SETTINGS_FAILED => "ERROR_STATE_ENUMERATE_SETTINGS_FAILED",
            .ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED => "ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED",
            .ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED => "ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED",
            .ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED => "ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED",
            .ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED => "ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED",
            .ERROR_API_UNAVAILABLE => "ERROR_API_UNAVAILABLE",
            .ERROR_NDIS_INTERFACE_CLOSING => "ERROR_NDIS_INTERFACE_CLOSING",
            .ERROR_NDIS_BAD_VERSION => "ERROR_NDIS_BAD_VERSION",
            .ERROR_NDIS_BAD_CHARACTERISTICS => "ERROR_NDIS_BAD_CHARACTERISTICS",
            .ERROR_NDIS_ADAPTER_NOT_FOUND => "ERROR_NDIS_ADAPTER_NOT_FOUND",
            .ERROR_NDIS_OPEN_FAILED => "ERROR_NDIS_OPEN_FAILED",
            .ERROR_NDIS_DEVICE_FAILED => "ERROR_NDIS_DEVICE_FAILED",
            .ERROR_NDIS_MULTICAST_FULL => "ERROR_NDIS_MULTICAST_FULL",
            .ERROR_NDIS_MULTICAST_EXISTS => "ERROR_NDIS_MULTICAST_EXISTS",
            .ERROR_NDIS_MULTICAST_NOT_FOUND => "ERROR_NDIS_MULTICAST_NOT_FOUND",
            .ERROR_NDIS_REQUEST_ABORTED => "ERROR_NDIS_REQUEST_ABORTED",
            .ERROR_NDIS_RESET_IN_PROGRESS => "ERROR_NDIS_RESET_IN_PROGRESS",
            .ERROR_NDIS_NOT_SUPPORTED => "ERROR_NDIS_NOT_SUPPORTED",
            .ERROR_NDIS_INVALID_PACKET => "ERROR_NDIS_INVALID_PACKET",
            .ERROR_NDIS_ADAPTER_NOT_READY => "ERROR_NDIS_ADAPTER_NOT_READY",
            .ERROR_NDIS_INVALID_LENGTH => "ERROR_NDIS_INVALID_LENGTH",
            .ERROR_NDIS_INVALID_DATA => "ERROR_NDIS_INVALID_DATA",
            .ERROR_NDIS_BUFFER_TOO_SHORT => "ERROR_NDIS_BUFFER_TOO_SHORT",
            .ERROR_NDIS_INVALID_OID => "ERROR_NDIS_INVALID_OID",
            .ERROR_NDIS_ADAPTER_REMOVED => "ERROR_NDIS_ADAPTER_REMOVED",
            .ERROR_NDIS_UNSUPPORTED_MEDIA => "ERROR_NDIS_UNSUPPORTED_MEDIA",
            .ERROR_NDIS_GROUP_ADDRESS_IN_USE => "ERROR_NDIS_GROUP_ADDRESS_IN_USE",
            .ERROR_NDIS_FILE_NOT_FOUND => "ERROR_NDIS_FILE_NOT_FOUND",
            .ERROR_NDIS_ERROR_READING_FILE => "ERROR_NDIS_ERROR_READING_FILE",
            .ERROR_NDIS_ALREADY_MAPPED => "ERROR_NDIS_ALREADY_MAPPED",
            .ERROR_NDIS_RESOURCE_CONFLICT => "ERROR_NDIS_RESOURCE_CONFLICT",
            .ERROR_NDIS_MEDIA_DISCONNECTED => "ERROR_NDIS_MEDIA_DISCONNECTED",
            .ERROR_NDIS_INVALID_ADDRESS => "ERROR_NDIS_INVALID_ADDRESS",
            .ERROR_NDIS_INVALID_DEVICE_REQUEST => "ERROR_NDIS_INVALID_DEVICE_REQUEST",
            .ERROR_NDIS_PAUSED => "ERROR_NDIS_PAUSED",
            .ERROR_NDIS_INTERFACE_NOT_FOUND => "ERROR_NDIS_INTERFACE_NOT_FOUND",
            .ERROR_NDIS_UNSUPPORTED_REVISION => "ERROR_NDIS_UNSUPPORTED_REVISION",
            .ERROR_NDIS_INVALID_PORT => "ERROR_NDIS_INVALID_PORT",
            .ERROR_NDIS_INVALID_PORT_STATE => "ERROR_NDIS_INVALID_PORT_STATE",
            .ERROR_NDIS_LOW_POWER_STATE => "ERROR_NDIS_LOW_POWER_STATE",
            .ERROR_NDIS_REINIT_REQUIRED => "ERROR_NDIS_REINIT_REQUIRED",
            .ERROR_NDIS_NO_QUEUES => "ERROR_NDIS_NO_QUEUES",
            .ERROR_NDIS_DOT11_AUTO_CONFIG_ENABLED => "ERROR_NDIS_DOT11_AUTO_CONFIG_ENABLED",
            .ERROR_NDIS_DOT11_MEDIA_IN_USE => "ERROR_NDIS_DOT11_MEDIA_IN_USE",
            .ERROR_NDIS_DOT11_POWER_STATE_INVALID => "ERROR_NDIS_DOT11_POWER_STATE_INVALID",
            .ERROR_NDIS_PM_WOL_PATTERN_LIST_FULL => "ERROR_NDIS_PM_WOL_PATTERN_LIST_FULL",
            .ERROR_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL => "ERROR_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL",
            .ERROR_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE => "ERROR_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE",
            .ERROR_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE => "ERROR_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE",
            .ERROR_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED => "ERROR_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED",
            .ERROR_NDIS_DOT11_AP_BAND_NOT_ALLOWED => "ERROR_NDIS_DOT11_AP_BAND_NOT_ALLOWED",
            .ERROR_NDIS_INDICATION_REQUIRED => "ERROR_NDIS_INDICATION_REQUIRED",
            .ERROR_NDIS_OFFLOAD_POLICY => "ERROR_NDIS_OFFLOAD_POLICY",
            .ERROR_NDIS_OFFLOAD_CONNECTION_REJECTED => "ERROR_NDIS_OFFLOAD_CONNECTION_REJECTED",
            .ERROR_NDIS_OFFLOAD_PATH_REJECTED => "ERROR_NDIS_OFFLOAD_PATH_REJECTED",
            .ERROR_HV_INVALID_HYPERCALL_CODE => "ERROR_HV_INVALID_HYPERCALL_CODE",
            .ERROR_HV_INVALID_HYPERCALL_INPUT => "ERROR_HV_INVALID_HYPERCALL_INPUT",
            .ERROR_HV_INVALID_ALIGNMENT => "ERROR_HV_INVALID_ALIGNMENT",
            .ERROR_HV_INVALID_PARAMETER => "ERROR_HV_INVALID_PARAMETER",
            .ERROR_HV_ACCESS_DENIED => "ERROR_HV_ACCESS_DENIED",
            .ERROR_HV_INVALID_PARTITION_STATE => "ERROR_HV_INVALID_PARTITION_STATE",
            .ERROR_HV_OPERATION_DENIED => "ERROR_HV_OPERATION_DENIED",
            .ERROR_HV_UNKNOWN_PROPERTY => "ERROR_HV_UNKNOWN_PROPERTY",
            .ERROR_HV_PROPERTY_VALUE_OUT_OF_RANGE => "ERROR_HV_PROPERTY_VALUE_OUT_OF_RANGE",
            .ERROR_HV_INSUFFICIENT_MEMORY => "ERROR_HV_INSUFFICIENT_MEMORY",
            .ERROR_HV_PARTITION_TOO_DEEP => "ERROR_HV_PARTITION_TOO_DEEP",
            .ERROR_HV_INVALID_PARTITION_ID => "ERROR_HV_INVALID_PARTITION_ID",
            .ERROR_HV_INVALID_VP_INDEX => "ERROR_HV_INVALID_VP_INDEX",
            .ERROR_HV_INVALID_PORT_ID => "ERROR_HV_INVALID_PORT_ID",
            .ERROR_HV_INVALID_CONNECTION_ID => "ERROR_HV_INVALID_CONNECTION_ID",
            .ERROR_HV_INSUFFICIENT_BUFFERS => "ERROR_HV_INSUFFICIENT_BUFFERS",
            .ERROR_HV_NOT_ACKNOWLEDGED => "ERROR_HV_NOT_ACKNOWLEDGED",
            .ERROR_HV_INVALID_VP_STATE => "ERROR_HV_INVALID_VP_STATE",
            .ERROR_HV_ACKNOWLEDGED => "ERROR_HV_ACKNOWLEDGED",
            .ERROR_HV_INVALID_SAVE_RESTORE_STATE => "ERROR_HV_INVALID_SAVE_RESTORE_STATE",
            .ERROR_HV_INVALID_SYNIC_STATE => "ERROR_HV_INVALID_SYNIC_STATE",
            .ERROR_HV_OBJECT_IN_USE => "ERROR_HV_OBJECT_IN_USE",
            .ERROR_HV_INVALID_PROXIMITY_DOMAIN_INFO => "ERROR_HV_INVALID_PROXIMITY_DOMAIN_INFO",
            .ERROR_HV_NO_DATA => "ERROR_HV_NO_DATA",
            .ERROR_HV_INACTIVE => "ERROR_HV_INACTIVE",
            .ERROR_HV_NO_RESOURCES => "ERROR_HV_NO_RESOURCES",
            .ERROR_HV_FEATURE_UNAVAILABLE => "ERROR_HV_FEATURE_UNAVAILABLE",
            .ERROR_HV_INSUFFICIENT_BUFFER => "ERROR_HV_INSUFFICIENT_BUFFER",
            .ERROR_HV_INSUFFICIENT_DEVICE_DOMAINS => "ERROR_HV_INSUFFICIENT_DEVICE_DOMAINS",
            .ERROR_HV_CPUID_FEATURE_VALIDATION => "ERROR_HV_CPUID_FEATURE_VALIDATION",
            .ERROR_HV_CPUID_XSAVE_FEATURE_VALIDATION => "ERROR_HV_CPUID_XSAVE_FEATURE_VALIDATION",
            .ERROR_HV_PROCESSOR_STARTUP_TIMEOUT => "ERROR_HV_PROCESSOR_STARTUP_TIMEOUT",
            .ERROR_HV_SMX_ENABLED => "ERROR_HV_SMX_ENABLED",
            .ERROR_HV_INVALID_LP_INDEX => "ERROR_HV_INVALID_LP_INDEX",
            .ERROR_HV_INVALID_REGISTER_VALUE => "ERROR_HV_INVALID_REGISTER_VALUE",
            .ERROR_HV_INVALID_VTL_STATE => "ERROR_HV_INVALID_VTL_STATE",
            .ERROR_HV_NX_NOT_DETECTED => "ERROR_HV_NX_NOT_DETECTED",
            .ERROR_HV_INVALID_DEVICE_ID => "ERROR_HV_INVALID_DEVICE_ID",
            .ERROR_HV_INVALID_DEVICE_STATE => "ERROR_HV_INVALID_DEVICE_STATE",
            .ERROR_HV_PENDING_PAGE_REQUESTS => "ERROR_HV_PENDING_PAGE_REQUESTS",
            .ERROR_HV_PAGE_REQUEST_INVALID => "ERROR_HV_PAGE_REQUEST_INVALID",
            .ERROR_HV_INVALID_CPU_GROUP_ID => "ERROR_HV_INVALID_CPU_GROUP_ID",
            .ERROR_HV_INVALID_CPU_GROUP_STATE => "ERROR_HV_INVALID_CPU_GROUP_STATE",
            .ERROR_HV_OPERATION_FAILED => "ERROR_HV_OPERATION_FAILED",
            .ERROR_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE => "ERROR_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE",
            .ERROR_HV_INSUFFICIENT_ROOT_MEMORY => "ERROR_HV_INSUFFICIENT_ROOT_MEMORY",
            .ERROR_HV_EVENT_BUFFER_ALREADY_FREED => "ERROR_HV_EVENT_BUFFER_ALREADY_FREED",
            .ERROR_HV_INSUFFICIENT_CONTIGUOUS_MEMORY => "ERROR_HV_INSUFFICIENT_CONTIGUOUS_MEMORY",
            .ERROR_HV_DEVICE_NOT_IN_DOMAIN => "ERROR_HV_DEVICE_NOT_IN_DOMAIN",
            .ERROR_HV_NESTED_VM_EXIT => "ERROR_HV_NESTED_VM_EXIT",
            .ERROR_HV_MSR_ACCESS_FAILED => "ERROR_HV_MSR_ACCESS_FAILED",
            .ERROR_HV_NOT_PRESENT => "ERROR_HV_NOT_PRESENT",
            .ERROR_VID_DUPLICATE_HANDLER => "ERROR_VID_DUPLICATE_HANDLER",
            .ERROR_VID_TOO_MANY_HANDLERS => "ERROR_VID_TOO_MANY_HANDLERS",
            .ERROR_VID_QUEUE_FULL => "ERROR_VID_QUEUE_FULL",
            .ERROR_VID_HANDLER_NOT_PRESENT => "ERROR_VID_HANDLER_NOT_PRESENT",
            .ERROR_VID_INVALID_OBJECT_NAME => "ERROR_VID_INVALID_OBJECT_NAME",
            .ERROR_VID_PARTITION_NAME_TOO_LONG => "ERROR_VID_PARTITION_NAME_TOO_LONG",
            .ERROR_VID_MESSAGE_QUEUE_NAME_TOO_LONG => "ERROR_VID_MESSAGE_QUEUE_NAME_TOO_LONG",
            .ERROR_VID_PARTITION_ALREADY_EXISTS => "ERROR_VID_PARTITION_ALREADY_EXISTS",
            .ERROR_VID_PARTITION_DOES_NOT_EXIST => "ERROR_VID_PARTITION_DOES_NOT_EXIST",
            .ERROR_VID_PARTITION_NAME_NOT_FOUND => "ERROR_VID_PARTITION_NAME_NOT_FOUND",
            .ERROR_VID_MESSAGE_QUEUE_ALREADY_EXISTS => "ERROR_VID_MESSAGE_QUEUE_ALREADY_EXISTS",
            .ERROR_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT => "ERROR_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT",
            .ERROR_VID_MB_STILL_REFERENCED => "ERROR_VID_MB_STILL_REFERENCED",
            .ERROR_VID_CHILD_GPA_PAGE_SET_CORRUPTED => "ERROR_VID_CHILD_GPA_PAGE_SET_CORRUPTED",
            .ERROR_VID_INVALID_NUMA_SETTINGS => "ERROR_VID_INVALID_NUMA_SETTINGS",
            .ERROR_VID_INVALID_NUMA_NODE_INDEX => "ERROR_VID_INVALID_NUMA_NODE_INDEX",
            .ERROR_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED => "ERROR_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED",
            .ERROR_VID_INVALID_MEMORY_BLOCK_HANDLE => "ERROR_VID_INVALID_MEMORY_BLOCK_HANDLE",
            .ERROR_VID_PAGE_RANGE_OVERFLOW => "ERROR_VID_PAGE_RANGE_OVERFLOW",
            .ERROR_VID_INVALID_MESSAGE_QUEUE_HANDLE => "ERROR_VID_INVALID_MESSAGE_QUEUE_HANDLE",
            .ERROR_VID_INVALID_GPA_RANGE_HANDLE => "ERROR_VID_INVALID_GPA_RANGE_HANDLE",
            .ERROR_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE => "ERROR_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE",
            .ERROR_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED => "ERROR_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED",
            .ERROR_VID_INVALID_PPM_HANDLE => "ERROR_VID_INVALID_PPM_HANDLE",
            .ERROR_VID_MBPS_ARE_LOCKED => "ERROR_VID_MBPS_ARE_LOCKED",
            .ERROR_VID_MESSAGE_QUEUE_CLOSED => "ERROR_VID_MESSAGE_QUEUE_CLOSED",
            .ERROR_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED => "ERROR_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED",
            .ERROR_VID_STOP_PENDING => "ERROR_VID_STOP_PENDING",
            .ERROR_VID_INVALID_PROCESSOR_STATE => "ERROR_VID_INVALID_PROCESSOR_STATE",
            .ERROR_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT => "ERROR_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT",
            .ERROR_VID_KM_INTERFACE_ALREADY_INITIALIZED => "ERROR_VID_KM_INTERFACE_ALREADY_INITIALIZED",
            .ERROR_VID_MB_PROPERTY_ALREADY_SET_RESET => "ERROR_VID_MB_PROPERTY_ALREADY_SET_RESET",
            .ERROR_VID_MMIO_RANGE_DESTROYED => "ERROR_VID_MMIO_RANGE_DESTROYED",
            .ERROR_VID_INVALID_CHILD_GPA_PAGE_SET => "ERROR_VID_INVALID_CHILD_GPA_PAGE_SET",
            .ERROR_VID_RESERVE_PAGE_SET_IS_BEING_USED => "ERROR_VID_RESERVE_PAGE_SET_IS_BEING_USED",
            .ERROR_VID_RESERVE_PAGE_SET_TOO_SMALL => "ERROR_VID_RESERVE_PAGE_SET_TOO_SMALL",
            .ERROR_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE => "ERROR_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE",
            .ERROR_VID_MBP_COUNT_EXCEEDED_LIMIT => "ERROR_VID_MBP_COUNT_EXCEEDED_LIMIT",
            .ERROR_VID_SAVED_STATE_CORRUPT => "ERROR_VID_SAVED_STATE_CORRUPT",
            .ERROR_VID_SAVED_STATE_UNRECOGNIZED_ITEM => "ERROR_VID_SAVED_STATE_UNRECOGNIZED_ITEM",
            .ERROR_VID_SAVED_STATE_INCOMPATIBLE => "ERROR_VID_SAVED_STATE_INCOMPATIBLE",
            .ERROR_VID_VTL_ACCESS_DENIED => "ERROR_VID_VTL_ACCESS_DENIED",
            .ERROR_VMCOMPUTE_TERMINATED_DURING_START => "ERROR_VMCOMPUTE_TERMINATED_DURING_START",
            .ERROR_VMCOMPUTE_IMAGE_MISMATCH => "ERROR_VMCOMPUTE_IMAGE_MISMATCH",
            .ERROR_VMCOMPUTE_HYPERV_NOT_INSTALLED => "ERROR_VMCOMPUTE_HYPERV_NOT_INSTALLED",
            .ERROR_VMCOMPUTE_OPERATION_PENDING => "ERROR_VMCOMPUTE_OPERATION_PENDING",
            .ERROR_VMCOMPUTE_TOO_MANY_NOTIFICATIONS => "ERROR_VMCOMPUTE_TOO_MANY_NOTIFICATIONS",
            .ERROR_VMCOMPUTE_INVALID_STATE => "ERROR_VMCOMPUTE_INVALID_STATE",
            .ERROR_VMCOMPUTE_UNEXPECTED_EXIT => "ERROR_VMCOMPUTE_UNEXPECTED_EXIT",
            .ERROR_VMCOMPUTE_TERMINATED => "ERROR_VMCOMPUTE_TERMINATED",
            .ERROR_VMCOMPUTE_CONNECT_FAILED => "ERROR_VMCOMPUTE_CONNECT_FAILED",
            .ERROR_VMCOMPUTE_TIMEOUT => "ERROR_VMCOMPUTE_TIMEOUT",
            .ERROR_VMCOMPUTE_CONNECTION_CLOSED => "ERROR_VMCOMPUTE_CONNECTION_CLOSED",
            .ERROR_VMCOMPUTE_UNKNOWN_MESSAGE => "ERROR_VMCOMPUTE_UNKNOWN_MESSAGE",
            .ERROR_VMCOMPUTE_UNSUPPORTED_PROTOCOL_VERSION => "ERROR_VMCOMPUTE_UNSUPPORTED_PROTOCOL_VERSION",
            .ERROR_VMCOMPUTE_INVALID_JSON => "ERROR_VMCOMPUTE_INVALID_JSON",
            .ERROR_VMCOMPUTE_SYSTEM_NOT_FOUND => "ERROR_VMCOMPUTE_SYSTEM_NOT_FOUND",
            .ERROR_VMCOMPUTE_SYSTEM_ALREADY_EXISTS => "ERROR_VMCOMPUTE_SYSTEM_ALREADY_EXISTS",
            .ERROR_VMCOMPUTE_SYSTEM_ALREADY_STOPPED => "ERROR_VMCOMPUTE_SYSTEM_ALREADY_STOPPED",
            .ERROR_VMCOMPUTE_PROTOCOL_ERROR => "ERROR_VMCOMPUTE_PROTOCOL_ERROR",
            .ERROR_VMCOMPUTE_INVALID_LAYER => "ERROR_VMCOMPUTE_INVALID_LAYER",
            .ERROR_VMCOMPUTE_WINDOWS_INSIDER_REQUIRED => "ERROR_VMCOMPUTE_WINDOWS_INSIDER_REQUIRED",
            .ERROR_VNET_VIRTUAL_SWITCH_NAME_NOT_FOUND => "ERROR_VNET_VIRTUAL_SWITCH_NAME_NOT_FOUND",
            .ERROR_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED => "ERROR_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED",
            .ERROR_VSMB_SAVED_STATE_FILE_NOT_FOUND => "ERROR_VSMB_SAVED_STATE_FILE_NOT_FOUND",
            .ERROR_VSMB_SAVED_STATE_CORRUPT => "ERROR_VSMB_SAVED_STATE_CORRUPT",
            .ERROR_VOLMGR_INCOMPLETE_REGENERATION => "ERROR_VOLMGR_INCOMPLETE_REGENERATION",
            .ERROR_VOLMGR_INCOMPLETE_DISK_MIGRATION => "ERROR_VOLMGR_INCOMPLETE_DISK_MIGRATION",
            .ERROR_VOLMGR_DATABASE_FULL => "ERROR_VOLMGR_DATABASE_FULL",
            .ERROR_VOLMGR_DISK_CONFIGURATION_CORRUPTED => "ERROR_VOLMGR_DISK_CONFIGURATION_CORRUPTED",
            .ERROR_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC => "ERROR_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC",
            .ERROR_VOLMGR_PACK_CONFIG_UPDATE_FAILED => "ERROR_VOLMGR_PACK_CONFIG_UPDATE_FAILED",
            .ERROR_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME => "ERROR_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME",
            .ERROR_VOLMGR_DISK_DUPLICATE => "ERROR_VOLMGR_DISK_DUPLICATE",
            .ERROR_VOLMGR_DISK_DYNAMIC => "ERROR_VOLMGR_DISK_DYNAMIC",
            .ERROR_VOLMGR_DISK_ID_INVALID => "ERROR_VOLMGR_DISK_ID_INVALID",
            .ERROR_VOLMGR_DISK_INVALID => "ERROR_VOLMGR_DISK_INVALID",
            .ERROR_VOLMGR_DISK_LAST_VOTER => "ERROR_VOLMGR_DISK_LAST_VOTER",
            .ERROR_VOLMGR_DISK_LAYOUT_INVALID => "ERROR_VOLMGR_DISK_LAYOUT_INVALID",
            .ERROR_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS => "ERROR_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS",
            .ERROR_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED => "ERROR_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED",
            .ERROR_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL => "ERROR_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL",
            .ERROR_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS => "ERROR_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS",
            .ERROR_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS => "ERROR_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS",
            .ERROR_VOLMGR_DISK_MISSING => "ERROR_VOLMGR_DISK_MISSING",
            .ERROR_VOLMGR_DISK_NOT_EMPTY => "ERROR_VOLMGR_DISK_NOT_EMPTY",
            .ERROR_VOLMGR_DISK_NOT_ENOUGH_SPACE => "ERROR_VOLMGR_DISK_NOT_ENOUGH_SPACE",
            .ERROR_VOLMGR_DISK_REVECTORING_FAILED => "ERROR_VOLMGR_DISK_REVECTORING_FAILED",
            .ERROR_VOLMGR_DISK_SECTOR_SIZE_INVALID => "ERROR_VOLMGR_DISK_SECTOR_SIZE_INVALID",
            .ERROR_VOLMGR_DISK_SET_NOT_CONTAINED => "ERROR_VOLMGR_DISK_SET_NOT_CONTAINED",
            .ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS => "ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS",
            .ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES => "ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES",
            .ERROR_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED => "ERROR_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED",
            .ERROR_VOLMGR_EXTENT_ALREADY_USED => "ERROR_VOLMGR_EXTENT_ALREADY_USED",
            .ERROR_VOLMGR_EXTENT_NOT_CONTIGUOUS => "ERROR_VOLMGR_EXTENT_NOT_CONTIGUOUS",
            .ERROR_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION => "ERROR_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION",
            .ERROR_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED => "ERROR_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED",
            .ERROR_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION => "ERROR_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION",
            .ERROR_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH => "ERROR_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH",
            .ERROR_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED => "ERROR_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED",
            .ERROR_VOLMGR_INTERLEAVE_LENGTH_INVALID => "ERROR_VOLMGR_INTERLEAVE_LENGTH_INVALID",
            .ERROR_VOLMGR_MAXIMUM_REGISTERED_USERS => "ERROR_VOLMGR_MAXIMUM_REGISTERED_USERS",
            .ERROR_VOLMGR_MEMBER_IN_SYNC => "ERROR_VOLMGR_MEMBER_IN_SYNC",
            .ERROR_VOLMGR_MEMBER_INDEX_DUPLICATE => "ERROR_VOLMGR_MEMBER_INDEX_DUPLICATE",
            .ERROR_VOLMGR_MEMBER_INDEX_INVALID => "ERROR_VOLMGR_MEMBER_INDEX_INVALID",
            .ERROR_VOLMGR_MEMBER_MISSING => "ERROR_VOLMGR_MEMBER_MISSING",
            .ERROR_VOLMGR_MEMBER_NOT_DETACHED => "ERROR_VOLMGR_MEMBER_NOT_DETACHED",
            .ERROR_VOLMGR_MEMBER_REGENERATING => "ERROR_VOLMGR_MEMBER_REGENERATING",
            .ERROR_VOLMGR_ALL_DISKS_FAILED => "ERROR_VOLMGR_ALL_DISKS_FAILED",
            .ERROR_VOLMGR_NO_REGISTERED_USERS => "ERROR_VOLMGR_NO_REGISTERED_USERS",
            .ERROR_VOLMGR_NO_SUCH_USER => "ERROR_VOLMGR_NO_SUCH_USER",
            .ERROR_VOLMGR_NOTIFICATION_RESET => "ERROR_VOLMGR_NOTIFICATION_RESET",
            .ERROR_VOLMGR_NUMBER_OF_MEMBERS_INVALID => "ERROR_VOLMGR_NUMBER_OF_MEMBERS_INVALID",
            .ERROR_VOLMGR_NUMBER_OF_PLEXES_INVALID => "ERROR_VOLMGR_NUMBER_OF_PLEXES_INVALID",
            .ERROR_VOLMGR_PACK_DUPLICATE => "ERROR_VOLMGR_PACK_DUPLICATE",
            .ERROR_VOLMGR_PACK_ID_INVALID => "ERROR_VOLMGR_PACK_ID_INVALID",
            .ERROR_VOLMGR_PACK_INVALID => "ERROR_VOLMGR_PACK_INVALID",
            .ERROR_VOLMGR_PACK_NAME_INVALID => "ERROR_VOLMGR_PACK_NAME_INVALID",
            .ERROR_VOLMGR_PACK_OFFLINE => "ERROR_VOLMGR_PACK_OFFLINE",
            .ERROR_VOLMGR_PACK_HAS_QUORUM => "ERROR_VOLMGR_PACK_HAS_QUORUM",
            .ERROR_VOLMGR_PACK_WITHOUT_QUORUM => "ERROR_VOLMGR_PACK_WITHOUT_QUORUM",
            .ERROR_VOLMGR_PARTITION_STYLE_INVALID => "ERROR_VOLMGR_PARTITION_STYLE_INVALID",
            .ERROR_VOLMGR_PARTITION_UPDATE_FAILED => "ERROR_VOLMGR_PARTITION_UPDATE_FAILED",
            .ERROR_VOLMGR_PLEX_IN_SYNC => "ERROR_VOLMGR_PLEX_IN_SYNC",
            .ERROR_VOLMGR_PLEX_INDEX_DUPLICATE => "ERROR_VOLMGR_PLEX_INDEX_DUPLICATE",
            .ERROR_VOLMGR_PLEX_INDEX_INVALID => "ERROR_VOLMGR_PLEX_INDEX_INVALID",
            .ERROR_VOLMGR_PLEX_LAST_ACTIVE => "ERROR_VOLMGR_PLEX_LAST_ACTIVE",
            .ERROR_VOLMGR_PLEX_MISSING => "ERROR_VOLMGR_PLEX_MISSING",
            .ERROR_VOLMGR_PLEX_REGENERATING => "ERROR_VOLMGR_PLEX_REGENERATING",
            .ERROR_VOLMGR_PLEX_TYPE_INVALID => "ERROR_VOLMGR_PLEX_TYPE_INVALID",
            .ERROR_VOLMGR_PLEX_NOT_RAID5 => "ERROR_VOLMGR_PLEX_NOT_RAID5",
            .ERROR_VOLMGR_PLEX_NOT_SIMPLE => "ERROR_VOLMGR_PLEX_NOT_SIMPLE",
            .ERROR_VOLMGR_STRUCTURE_SIZE_INVALID => "ERROR_VOLMGR_STRUCTURE_SIZE_INVALID",
            .ERROR_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS => "ERROR_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS",
            .ERROR_VOLMGR_TRANSACTION_IN_PROGRESS => "ERROR_VOLMGR_TRANSACTION_IN_PROGRESS",
            .ERROR_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE => "ERROR_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE",
            .ERROR_VOLMGR_VOLUME_CONTAINS_MISSING_DISK => "ERROR_VOLMGR_VOLUME_CONTAINS_MISSING_DISK",
            .ERROR_VOLMGR_VOLUME_ID_INVALID => "ERROR_VOLMGR_VOLUME_ID_INVALID",
            .ERROR_VOLMGR_VOLUME_LENGTH_INVALID => "ERROR_VOLMGR_VOLUME_LENGTH_INVALID",
            .ERROR_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE => "ERROR_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE",
            .ERROR_VOLMGR_VOLUME_NOT_MIRRORED => "ERROR_VOLMGR_VOLUME_NOT_MIRRORED",
            .ERROR_VOLMGR_VOLUME_NOT_RETAINED => "ERROR_VOLMGR_VOLUME_NOT_RETAINED",
            .ERROR_VOLMGR_VOLUME_OFFLINE => "ERROR_VOLMGR_VOLUME_OFFLINE",
            .ERROR_VOLMGR_VOLUME_RETAINED => "ERROR_VOLMGR_VOLUME_RETAINED",
            .ERROR_VOLMGR_NUMBER_OF_EXTENTS_INVALID => "ERROR_VOLMGR_NUMBER_OF_EXTENTS_INVALID",
            .ERROR_VOLMGR_DIFFERENT_SECTOR_SIZE => "ERROR_VOLMGR_DIFFERENT_SECTOR_SIZE",
            .ERROR_VOLMGR_BAD_BOOT_DISK => "ERROR_VOLMGR_BAD_BOOT_DISK",
            .ERROR_VOLMGR_PACK_CONFIG_OFFLINE => "ERROR_VOLMGR_PACK_CONFIG_OFFLINE",
            .ERROR_VOLMGR_PACK_CONFIG_ONLINE => "ERROR_VOLMGR_PACK_CONFIG_ONLINE",
            .ERROR_VOLMGR_NOT_PRIMARY_PACK => "ERROR_VOLMGR_NOT_PRIMARY_PACK",
            .ERROR_VOLMGR_PACK_LOG_UPDATE_FAILED => "ERROR_VOLMGR_PACK_LOG_UPDATE_FAILED",
            .ERROR_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID => "ERROR_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID",
            .ERROR_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID => "ERROR_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID",
            .ERROR_VOLMGR_VOLUME_MIRRORED => "ERROR_VOLMGR_VOLUME_MIRRORED",
            .ERROR_VOLMGR_PLEX_NOT_SIMPLE_SPANNED => "ERROR_VOLMGR_PLEX_NOT_SIMPLE_SPANNED",
            .ERROR_VOLMGR_NO_VALID_LOG_COPIES => "ERROR_VOLMGR_NO_VALID_LOG_COPIES",
            .ERROR_VOLMGR_PRIMARY_PACK_PRESENT => "ERROR_VOLMGR_PRIMARY_PACK_PRESENT",
            .ERROR_VOLMGR_NUMBER_OF_DISKS_INVALID => "ERROR_VOLMGR_NUMBER_OF_DISKS_INVALID",
            .ERROR_VOLMGR_MIRROR_NOT_SUPPORTED => "ERROR_VOLMGR_MIRROR_NOT_SUPPORTED",
            .ERROR_VOLMGR_RAID5_NOT_SUPPORTED => "ERROR_VOLMGR_RAID5_NOT_SUPPORTED",
            .ERROR_BCD_NOT_ALL_ENTRIES_IMPORTED => "ERROR_BCD_NOT_ALL_ENTRIES_IMPORTED",
            .ERROR_BCD_TOO_MANY_ELEMENTS => "ERROR_BCD_TOO_MANY_ELEMENTS",
            .ERROR_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED => "ERROR_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED",
            .ERROR_VHD_DRIVE_FOOTER_MISSING => "ERROR_VHD_DRIVE_FOOTER_MISSING",
            .ERROR_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH => "ERROR_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH",
            .ERROR_VHD_DRIVE_FOOTER_CORRUPT => "ERROR_VHD_DRIVE_FOOTER_CORRUPT",
            .ERROR_VHD_FORMAT_UNKNOWN => "ERROR_VHD_FORMAT_UNKNOWN",
            .ERROR_VHD_FORMAT_UNSUPPORTED_VERSION => "ERROR_VHD_FORMAT_UNSUPPORTED_VERSION",
            .ERROR_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH => "ERROR_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH",
            .ERROR_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION => "ERROR_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION",
            .ERROR_VHD_SPARSE_HEADER_CORRUPT => "ERROR_VHD_SPARSE_HEADER_CORRUPT",
            .ERROR_VHD_BLOCK_ALLOCATION_FAILURE => "ERROR_VHD_BLOCK_ALLOCATION_FAILURE",
            .ERROR_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT => "ERROR_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT",
            .ERROR_VHD_INVALID_BLOCK_SIZE => "ERROR_VHD_INVALID_BLOCK_SIZE",
            .ERROR_VHD_BITMAP_MISMATCH => "ERROR_VHD_BITMAP_MISMATCH",
            .ERROR_VHD_PARENT_VHD_NOT_FOUND => "ERROR_VHD_PARENT_VHD_NOT_FOUND",
            .ERROR_VHD_CHILD_PARENT_ID_MISMATCH => "ERROR_VHD_CHILD_PARENT_ID_MISMATCH",
            .ERROR_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH => "ERROR_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH",
            .ERROR_VHD_METADATA_READ_FAILURE => "ERROR_VHD_METADATA_READ_FAILURE",
            .ERROR_VHD_METADATA_WRITE_FAILURE => "ERROR_VHD_METADATA_WRITE_FAILURE",
            .ERROR_VHD_INVALID_SIZE => "ERROR_VHD_INVALID_SIZE",
            .ERROR_VHD_INVALID_FILE_SIZE => "ERROR_VHD_INVALID_FILE_SIZE",
            .ERROR_VIRTDISK_PROVIDER_NOT_FOUND => "ERROR_VIRTDISK_PROVIDER_NOT_FOUND",
            .ERROR_VIRTDISK_NOT_VIRTUAL_DISK => "ERROR_VIRTDISK_NOT_VIRTUAL_DISK",
            .ERROR_VHD_PARENT_VHD_ACCESS_DENIED => "ERROR_VHD_PARENT_VHD_ACCESS_DENIED",
            .ERROR_VHD_CHILD_PARENT_SIZE_MISMATCH => "ERROR_VHD_CHILD_PARENT_SIZE_MISMATCH",
            .ERROR_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED => "ERROR_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED",
            .ERROR_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT => "ERROR_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT",
            .ERROR_VIRTUAL_DISK_LIMITATION => "ERROR_VIRTUAL_DISK_LIMITATION",
            .ERROR_VHD_INVALID_TYPE => "ERROR_VHD_INVALID_TYPE",
            .ERROR_VHD_INVALID_STATE => "ERROR_VHD_INVALID_STATE",
            .ERROR_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE => "ERROR_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE",
            .ERROR_VIRTDISK_DISK_ALREADY_OWNED => "ERROR_VIRTDISK_DISK_ALREADY_OWNED",
            .ERROR_VIRTDISK_DISK_ONLINE_AND_WRITABLE => "ERROR_VIRTDISK_DISK_ONLINE_AND_WRITABLE",
            .ERROR_CTLOG_TRACKING_NOT_INITIALIZED => "ERROR_CTLOG_TRACKING_NOT_INITIALIZED",
            .ERROR_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE => "ERROR_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE",
            .ERROR_CTLOG_VHD_CHANGED_OFFLINE => "ERROR_CTLOG_VHD_CHANGED_OFFLINE",
            .ERROR_CTLOG_INVALID_TRACKING_STATE => "ERROR_CTLOG_INVALID_TRACKING_STATE",
            .ERROR_CTLOG_INCONSISTENT_TRACKING_FILE => "ERROR_CTLOG_INCONSISTENT_TRACKING_FILE",
            .ERROR_VHD_RESIZE_WOULD_TRUNCATE_DATA => "ERROR_VHD_RESIZE_WOULD_TRUNCATE_DATA",
            .ERROR_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE => "ERROR_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE",
            .ERROR_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE => "ERROR_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE",
            .ERROR_VHD_METADATA_FULL => "ERROR_VHD_METADATA_FULL",
            .ERROR_VHD_INVALID_CHANGE_TRACKING_ID => "ERROR_VHD_INVALID_CHANGE_TRACKING_ID",
            .ERROR_VHD_CHANGE_TRACKING_DISABLED => "ERROR_VHD_CHANGE_TRACKING_DISABLED",
            .ERROR_VHD_MISSING_CHANGE_TRACKING_INFORMATION => "ERROR_VHD_MISSING_CHANGE_TRACKING_INFORMATION",
            .ERROR_QUERY_STORAGE_ERROR => "ERROR_QUERY_STORAGE_ERROR",
            else => null,
        };
    }
    // We use a special format implementation for the WIN32_ERROR enum that avoids
    // getting the tag name. This is because the enum has over 3,000 values which
    // results in needing over 100Kb to store them as strings.
    // Instead, we use FormatMessage to access a string for each error.
    pub fn format(
        self: WIN32_ERROR,
        comptime fmt: []const u8,
        options: @import("std").fmt.FormatOptions,
        writer: anytype,
    ) !void {
        try @import("zig.zig").fmtError(@intFromEnum(self)).format(fmt, options, writer);
    }
};
pub const NO_ERROR = WIN32_ERROR.NO_ERROR;
pub const WAIT_OBJECT_0 = WIN32_ERROR.NO_ERROR;
pub const WAIT_ABANDONED = WIN32_ERROR.WAIT_ABANDONED;
pub const WAIT_ABANDONED_0 = WIN32_ERROR.WAIT_ABANDONED;
pub const WAIT_IO_COMPLETION = WIN32_ERROR.WAIT_IO_COMPLETION;
pub const WAIT_TIMEOUT = WIN32_ERROR.WAIT_TIMEOUT;
pub const WAIT_FAILED = WIN32_ERROR.WAIT_FAILED;
pub const ERROR_SUCCESS = WIN32_ERROR.NO_ERROR;
pub const ERROR_INVALID_FUNCTION = WIN32_ERROR.ERROR_INVALID_FUNCTION;
pub const ERROR_FILE_NOT_FOUND = WIN32_ERROR.ERROR_FILE_NOT_FOUND;
pub const ERROR_PATH_NOT_FOUND = WIN32_ERROR.ERROR_PATH_NOT_FOUND;
pub const ERROR_TOO_MANY_OPEN_FILES = WIN32_ERROR.ERROR_TOO_MANY_OPEN_FILES;
pub const ERROR_ACCESS_DENIED = WIN32_ERROR.ERROR_ACCESS_DENIED;
pub const ERROR_INVALID_HANDLE = WIN32_ERROR.ERROR_INVALID_HANDLE;
pub const ERROR_ARENA_TRASHED = WIN32_ERROR.ERROR_ARENA_TRASHED;
pub const ERROR_NOT_ENOUGH_MEMORY = WIN32_ERROR.ERROR_NOT_ENOUGH_MEMORY;
pub const ERROR_INVALID_BLOCK = WIN32_ERROR.ERROR_INVALID_BLOCK;
pub const ERROR_BAD_ENVIRONMENT = WIN32_ERROR.ERROR_BAD_ENVIRONMENT;
pub const ERROR_BAD_FORMAT = WIN32_ERROR.ERROR_BAD_FORMAT;
pub const ERROR_INVALID_ACCESS = WIN32_ERROR.ERROR_INVALID_ACCESS;
pub const ERROR_INVALID_DATA = WIN32_ERROR.ERROR_INVALID_DATA;
pub const ERROR_OUTOFMEMORY = WIN32_ERROR.ERROR_OUTOFMEMORY;
pub const ERROR_INVALID_DRIVE = WIN32_ERROR.ERROR_INVALID_DRIVE;
pub const ERROR_CURRENT_DIRECTORY = WIN32_ERROR.ERROR_CURRENT_DIRECTORY;
pub const ERROR_NOT_SAME_DEVICE = WIN32_ERROR.ERROR_NOT_SAME_DEVICE;
pub const ERROR_NO_MORE_FILES = WIN32_ERROR.ERROR_NO_MORE_FILES;
pub const ERROR_WRITE_PROTECT = WIN32_ERROR.ERROR_WRITE_PROTECT;
pub const ERROR_BAD_UNIT = WIN32_ERROR.ERROR_BAD_UNIT;
pub const ERROR_NOT_READY = WIN32_ERROR.ERROR_NOT_READY;
pub const ERROR_BAD_COMMAND = WIN32_ERROR.ERROR_BAD_COMMAND;
pub const ERROR_CRC = WIN32_ERROR.ERROR_CRC;
pub const ERROR_BAD_LENGTH = WIN32_ERROR.ERROR_BAD_LENGTH;
pub const ERROR_SEEK = WIN32_ERROR.ERROR_SEEK;
pub const ERROR_NOT_DOS_DISK = WIN32_ERROR.ERROR_NOT_DOS_DISK;
pub const ERROR_SECTOR_NOT_FOUND = WIN32_ERROR.ERROR_SECTOR_NOT_FOUND;
pub const ERROR_OUT_OF_PAPER = WIN32_ERROR.ERROR_OUT_OF_PAPER;
pub const ERROR_WRITE_FAULT = WIN32_ERROR.ERROR_WRITE_FAULT;
pub const ERROR_READ_FAULT = WIN32_ERROR.ERROR_READ_FAULT;
pub const ERROR_GEN_FAILURE = WIN32_ERROR.ERROR_GEN_FAILURE;
pub const ERROR_SHARING_VIOLATION = WIN32_ERROR.ERROR_SHARING_VIOLATION;
pub const ERROR_LOCK_VIOLATION = WIN32_ERROR.ERROR_LOCK_VIOLATION;
pub const ERROR_WRONG_DISK = WIN32_ERROR.ERROR_WRONG_DISK;
pub const ERROR_SHARING_BUFFER_EXCEEDED = WIN32_ERROR.ERROR_SHARING_BUFFER_EXCEEDED;
pub const ERROR_HANDLE_EOF = WIN32_ERROR.ERROR_HANDLE_EOF;
pub const ERROR_HANDLE_DISK_FULL = WIN32_ERROR.ERROR_HANDLE_DISK_FULL;
pub const ERROR_NOT_SUPPORTED = WIN32_ERROR.ERROR_NOT_SUPPORTED;
pub const ERROR_REM_NOT_LIST = WIN32_ERROR.ERROR_REM_NOT_LIST;
pub const ERROR_DUP_NAME = WIN32_ERROR.ERROR_DUP_NAME;
pub const ERROR_BAD_NETPATH = WIN32_ERROR.ERROR_BAD_NETPATH;
pub const ERROR_NETWORK_BUSY = WIN32_ERROR.ERROR_NETWORK_BUSY;
pub const ERROR_DEV_NOT_EXIST = WIN32_ERROR.ERROR_DEV_NOT_EXIST;
pub const ERROR_TOO_MANY_CMDS = WIN32_ERROR.ERROR_TOO_MANY_CMDS;
pub const ERROR_ADAP_HDW_ERR = WIN32_ERROR.ERROR_ADAP_HDW_ERR;
pub const ERROR_BAD_NET_RESP = WIN32_ERROR.ERROR_BAD_NET_RESP;
pub const ERROR_UNEXP_NET_ERR = WIN32_ERROR.ERROR_UNEXP_NET_ERR;
pub const ERROR_BAD_REM_ADAP = WIN32_ERROR.ERROR_BAD_REM_ADAP;
pub const ERROR_PRINTQ_FULL = WIN32_ERROR.ERROR_PRINTQ_FULL;
pub const ERROR_NO_SPOOL_SPACE = WIN32_ERROR.ERROR_NO_SPOOL_SPACE;
pub const ERROR_PRINT_CANCELLED = WIN32_ERROR.ERROR_PRINT_CANCELLED;
pub const ERROR_NETNAME_DELETED = WIN32_ERROR.ERROR_NETNAME_DELETED;
pub const ERROR_NETWORK_ACCESS_DENIED = WIN32_ERROR.ERROR_NETWORK_ACCESS_DENIED;
pub const ERROR_BAD_DEV_TYPE = WIN32_ERROR.ERROR_BAD_DEV_TYPE;
pub const ERROR_BAD_NET_NAME = WIN32_ERROR.ERROR_BAD_NET_NAME;
pub const ERROR_TOO_MANY_NAMES = WIN32_ERROR.ERROR_TOO_MANY_NAMES;
pub const ERROR_TOO_MANY_SESS = WIN32_ERROR.ERROR_TOO_MANY_SESS;
pub const ERROR_SHARING_PAUSED = WIN32_ERROR.ERROR_SHARING_PAUSED;
pub const ERROR_REQ_NOT_ACCEP = WIN32_ERROR.ERROR_REQ_NOT_ACCEP;
pub const ERROR_REDIR_PAUSED = WIN32_ERROR.ERROR_REDIR_PAUSED;
pub const ERROR_FILE_EXISTS = WIN32_ERROR.ERROR_FILE_EXISTS;
pub const ERROR_CANNOT_MAKE = WIN32_ERROR.ERROR_CANNOT_MAKE;
pub const ERROR_FAIL_I24 = WIN32_ERROR.ERROR_FAIL_I24;
pub const ERROR_OUT_OF_STRUCTURES = WIN32_ERROR.ERROR_OUT_OF_STRUCTURES;
pub const ERROR_ALREADY_ASSIGNED = WIN32_ERROR.ERROR_ALREADY_ASSIGNED;
pub const ERROR_INVALID_PASSWORD = WIN32_ERROR.ERROR_INVALID_PASSWORD;
pub const ERROR_INVALID_PARAMETER = WIN32_ERROR.ERROR_INVALID_PARAMETER;
pub const ERROR_NET_WRITE_FAULT = WIN32_ERROR.ERROR_NET_WRITE_FAULT;
pub const ERROR_NO_PROC_SLOTS = WIN32_ERROR.ERROR_NO_PROC_SLOTS;
pub const ERROR_TOO_MANY_SEMAPHORES = WIN32_ERROR.ERROR_TOO_MANY_SEMAPHORES;
pub const ERROR_EXCL_SEM_ALREADY_OWNED = WIN32_ERROR.ERROR_EXCL_SEM_ALREADY_OWNED;
pub const ERROR_SEM_IS_SET = WIN32_ERROR.ERROR_SEM_IS_SET;
pub const ERROR_TOO_MANY_SEM_REQUESTS = WIN32_ERROR.ERROR_TOO_MANY_SEM_REQUESTS;
pub const ERROR_INVALID_AT_INTERRUPT_TIME = WIN32_ERROR.ERROR_INVALID_AT_INTERRUPT_TIME;
pub const ERROR_SEM_OWNER_DIED = WIN32_ERROR.ERROR_SEM_OWNER_DIED;
pub const ERROR_SEM_USER_LIMIT = WIN32_ERROR.ERROR_SEM_USER_LIMIT;
pub const ERROR_DISK_CHANGE = WIN32_ERROR.ERROR_DISK_CHANGE;
pub const ERROR_DRIVE_LOCKED = WIN32_ERROR.ERROR_DRIVE_LOCKED;
pub const ERROR_BROKEN_PIPE = WIN32_ERROR.ERROR_BROKEN_PIPE;
pub const ERROR_OPEN_FAILED = WIN32_ERROR.ERROR_OPEN_FAILED;
pub const ERROR_BUFFER_OVERFLOW = WIN32_ERROR.ERROR_BUFFER_OVERFLOW;
pub const ERROR_DISK_FULL = WIN32_ERROR.ERROR_DISK_FULL;
pub const ERROR_NO_MORE_SEARCH_HANDLES = WIN32_ERROR.ERROR_NO_MORE_SEARCH_HANDLES;
pub const ERROR_INVALID_TARGET_HANDLE = WIN32_ERROR.ERROR_INVALID_TARGET_HANDLE;
pub const ERROR_INVALID_CATEGORY = WIN32_ERROR.ERROR_INVALID_CATEGORY;
pub const ERROR_INVALID_VERIFY_SWITCH = WIN32_ERROR.ERROR_INVALID_VERIFY_SWITCH;
pub const ERROR_BAD_DRIVER_LEVEL = WIN32_ERROR.ERROR_BAD_DRIVER_LEVEL;
pub const ERROR_CALL_NOT_IMPLEMENTED = WIN32_ERROR.ERROR_CALL_NOT_IMPLEMENTED;
pub const ERROR_SEM_TIMEOUT = WIN32_ERROR.ERROR_SEM_TIMEOUT;
pub const ERROR_INSUFFICIENT_BUFFER = WIN32_ERROR.ERROR_INSUFFICIENT_BUFFER;
pub const ERROR_INVALID_NAME = WIN32_ERROR.ERROR_INVALID_NAME;
pub const ERROR_INVALID_LEVEL = WIN32_ERROR.ERROR_INVALID_LEVEL;
pub const ERROR_NO_VOLUME_LABEL = WIN32_ERROR.ERROR_NO_VOLUME_LABEL;
pub const ERROR_MOD_NOT_FOUND = WIN32_ERROR.ERROR_MOD_NOT_FOUND;
pub const ERROR_PROC_NOT_FOUND = WIN32_ERROR.ERROR_PROC_NOT_FOUND;
pub const ERROR_WAIT_NO_CHILDREN = WIN32_ERROR.WAIT_ABANDONED;
pub const ERROR_CHILD_NOT_COMPLETE = WIN32_ERROR.WAIT_IO_COMPLETION;
pub const ERROR_DIRECT_ACCESS_HANDLE = WIN32_ERROR.ERROR_DIRECT_ACCESS_HANDLE;
pub const ERROR_NEGATIVE_SEEK = WIN32_ERROR.ERROR_NEGATIVE_SEEK;
pub const ERROR_SEEK_ON_DEVICE = WIN32_ERROR.ERROR_SEEK_ON_DEVICE;
pub const ERROR_IS_JOIN_TARGET = WIN32_ERROR.ERROR_IS_JOIN_TARGET;
pub const ERROR_IS_JOINED = WIN32_ERROR.ERROR_IS_JOINED;
pub const ERROR_IS_SUBSTED = WIN32_ERROR.ERROR_IS_SUBSTED;
pub const ERROR_NOT_JOINED = WIN32_ERROR.ERROR_NOT_JOINED;
pub const ERROR_NOT_SUBSTED = WIN32_ERROR.ERROR_NOT_SUBSTED;
pub const ERROR_JOIN_TO_JOIN = WIN32_ERROR.ERROR_JOIN_TO_JOIN;
pub const ERROR_SUBST_TO_SUBST = WIN32_ERROR.ERROR_SUBST_TO_SUBST;
pub const ERROR_JOIN_TO_SUBST = WIN32_ERROR.ERROR_JOIN_TO_SUBST;
pub const ERROR_SUBST_TO_JOIN = WIN32_ERROR.ERROR_SUBST_TO_JOIN;
pub const ERROR_BUSY_DRIVE = WIN32_ERROR.ERROR_BUSY_DRIVE;
pub const ERROR_SAME_DRIVE = WIN32_ERROR.ERROR_SAME_DRIVE;
pub const ERROR_DIR_NOT_ROOT = WIN32_ERROR.ERROR_DIR_NOT_ROOT;
pub const ERROR_DIR_NOT_EMPTY = WIN32_ERROR.ERROR_DIR_NOT_EMPTY;
pub const ERROR_IS_SUBST_PATH = WIN32_ERROR.ERROR_IS_SUBST_PATH;
pub const ERROR_IS_JOIN_PATH = WIN32_ERROR.ERROR_IS_JOIN_PATH;
pub const ERROR_PATH_BUSY = WIN32_ERROR.ERROR_PATH_BUSY;
pub const ERROR_IS_SUBST_TARGET = WIN32_ERROR.ERROR_IS_SUBST_TARGET;
pub const ERROR_SYSTEM_TRACE = WIN32_ERROR.ERROR_SYSTEM_TRACE;
pub const ERROR_INVALID_EVENT_COUNT = WIN32_ERROR.ERROR_INVALID_EVENT_COUNT;
pub const ERROR_TOO_MANY_MUXWAITERS = WIN32_ERROR.ERROR_TOO_MANY_MUXWAITERS;
pub const ERROR_INVALID_LIST_FORMAT = WIN32_ERROR.ERROR_INVALID_LIST_FORMAT;
pub const ERROR_LABEL_TOO_LONG = WIN32_ERROR.ERROR_LABEL_TOO_LONG;
pub const ERROR_TOO_MANY_TCBS = WIN32_ERROR.ERROR_TOO_MANY_TCBS;
pub const ERROR_SIGNAL_REFUSED = WIN32_ERROR.ERROR_SIGNAL_REFUSED;
pub const ERROR_DISCARDED = WIN32_ERROR.ERROR_DISCARDED;
pub const ERROR_NOT_LOCKED = WIN32_ERROR.ERROR_NOT_LOCKED;
pub const ERROR_BAD_THREADID_ADDR = WIN32_ERROR.ERROR_BAD_THREADID_ADDR;
pub const ERROR_BAD_ARGUMENTS = WIN32_ERROR.ERROR_BAD_ARGUMENTS;
pub const ERROR_BAD_PATHNAME = WIN32_ERROR.ERROR_BAD_PATHNAME;
pub const ERROR_SIGNAL_PENDING = WIN32_ERROR.ERROR_SIGNAL_PENDING;
pub const ERROR_MAX_THRDS_REACHED = WIN32_ERROR.ERROR_MAX_THRDS_REACHED;
pub const ERROR_LOCK_FAILED = WIN32_ERROR.ERROR_LOCK_FAILED;
pub const ERROR_BUSY = WIN32_ERROR.ERROR_BUSY;
pub const ERROR_DEVICE_SUPPORT_IN_PROGRESS = WIN32_ERROR.ERROR_DEVICE_SUPPORT_IN_PROGRESS;
pub const ERROR_CANCEL_VIOLATION = WIN32_ERROR.ERROR_CANCEL_VIOLATION;
pub const ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = WIN32_ERROR.ERROR_ATOMIC_LOCKS_NOT_SUPPORTED;
pub const ERROR_INVALID_SEGMENT_NUMBER = WIN32_ERROR.ERROR_INVALID_SEGMENT_NUMBER;
pub const ERROR_INVALID_ORDINAL = WIN32_ERROR.ERROR_INVALID_ORDINAL;
pub const ERROR_ALREADY_EXISTS = WIN32_ERROR.ERROR_ALREADY_EXISTS;
pub const ERROR_INVALID_FLAG_NUMBER = WIN32_ERROR.ERROR_INVALID_FLAG_NUMBER;
pub const ERROR_SEM_NOT_FOUND = WIN32_ERROR.ERROR_SEM_NOT_FOUND;
pub const ERROR_INVALID_STARTING_CODESEG = WIN32_ERROR.ERROR_INVALID_STARTING_CODESEG;
pub const ERROR_INVALID_STACKSEG = WIN32_ERROR.ERROR_INVALID_STACKSEG;
pub const ERROR_INVALID_MODULETYPE = WIN32_ERROR.ERROR_INVALID_MODULETYPE;
pub const ERROR_INVALID_EXE_SIGNATURE = WIN32_ERROR.ERROR_INVALID_EXE_SIGNATURE;
pub const ERROR_EXE_MARKED_INVALID = WIN32_ERROR.ERROR_EXE_MARKED_INVALID;
pub const ERROR_BAD_EXE_FORMAT = WIN32_ERROR.ERROR_BAD_EXE_FORMAT;
pub const ERROR_ITERATED_DATA_EXCEEDS_64k = WIN32_ERROR.ERROR_ITERATED_DATA_EXCEEDS_64k;
pub const ERROR_INVALID_MINALLOCSIZE = WIN32_ERROR.ERROR_INVALID_MINALLOCSIZE;
pub const ERROR_DYNLINK_FROM_INVALID_RING = WIN32_ERROR.ERROR_DYNLINK_FROM_INVALID_RING;
pub const ERROR_IOPL_NOT_ENABLED = WIN32_ERROR.ERROR_IOPL_NOT_ENABLED;
pub const ERROR_INVALID_SEGDPL = WIN32_ERROR.ERROR_INVALID_SEGDPL;
pub const ERROR_AUTODATASEG_EXCEEDS_64k = WIN32_ERROR.ERROR_AUTODATASEG_EXCEEDS_64k;
pub const ERROR_RING2SEG_MUST_BE_MOVABLE = WIN32_ERROR.ERROR_RING2SEG_MUST_BE_MOVABLE;
pub const ERROR_RELOC_CHAIN_XEEDS_SEGLIM = WIN32_ERROR.ERROR_RELOC_CHAIN_XEEDS_SEGLIM;
pub const ERROR_INFLOOP_IN_RELOC_CHAIN = WIN32_ERROR.ERROR_INFLOOP_IN_RELOC_CHAIN;
pub const ERROR_ENVVAR_NOT_FOUND = WIN32_ERROR.ERROR_ENVVAR_NOT_FOUND;
pub const ERROR_NO_SIGNAL_SENT = WIN32_ERROR.ERROR_NO_SIGNAL_SENT;
pub const ERROR_FILENAME_EXCED_RANGE = WIN32_ERROR.ERROR_FILENAME_EXCED_RANGE;
pub const ERROR_RING2_STACK_IN_USE = WIN32_ERROR.ERROR_RING2_STACK_IN_USE;
pub const ERROR_META_EXPANSION_TOO_LONG = WIN32_ERROR.ERROR_META_EXPANSION_TOO_LONG;
pub const ERROR_INVALID_SIGNAL_NUMBER = WIN32_ERROR.ERROR_INVALID_SIGNAL_NUMBER;
pub const ERROR_THREAD_1_INACTIVE = WIN32_ERROR.ERROR_THREAD_1_INACTIVE;
pub const ERROR_LOCKED = WIN32_ERROR.ERROR_LOCKED;
pub const ERROR_TOO_MANY_MODULES = WIN32_ERROR.ERROR_TOO_MANY_MODULES;
pub const ERROR_NESTING_NOT_ALLOWED = WIN32_ERROR.ERROR_NESTING_NOT_ALLOWED;
pub const ERROR_EXE_MACHINE_TYPE_MISMATCH = WIN32_ERROR.ERROR_EXE_MACHINE_TYPE_MISMATCH;
pub const ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY = WIN32_ERROR.ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY;
pub const ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY = WIN32_ERROR.ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY;
pub const ERROR_FILE_CHECKED_OUT = WIN32_ERROR.ERROR_FILE_CHECKED_OUT;
pub const ERROR_CHECKOUT_REQUIRED = WIN32_ERROR.ERROR_CHECKOUT_REQUIRED;
pub const ERROR_BAD_FILE_TYPE = WIN32_ERROR.ERROR_BAD_FILE_TYPE;
pub const ERROR_FILE_TOO_LARGE = WIN32_ERROR.ERROR_FILE_TOO_LARGE;
pub const ERROR_FORMS_AUTH_REQUIRED = WIN32_ERROR.ERROR_FORMS_AUTH_REQUIRED;
pub const ERROR_VIRUS_INFECTED = WIN32_ERROR.ERROR_VIRUS_INFECTED;
pub const ERROR_VIRUS_DELETED = WIN32_ERROR.ERROR_VIRUS_DELETED;
pub const ERROR_PIPE_LOCAL = WIN32_ERROR.ERROR_PIPE_LOCAL;
pub const ERROR_BAD_PIPE = WIN32_ERROR.ERROR_BAD_PIPE;
pub const ERROR_PIPE_BUSY = WIN32_ERROR.ERROR_PIPE_BUSY;
pub const ERROR_NO_DATA = WIN32_ERROR.ERROR_NO_DATA;
pub const ERROR_PIPE_NOT_CONNECTED = WIN32_ERROR.ERROR_PIPE_NOT_CONNECTED;
pub const ERROR_MORE_DATA = WIN32_ERROR.ERROR_MORE_DATA;
pub const ERROR_NO_WORK_DONE = WIN32_ERROR.ERROR_NO_WORK_DONE;
pub const ERROR_VC_DISCONNECTED = WIN32_ERROR.ERROR_VC_DISCONNECTED;
pub const ERROR_INVALID_EA_NAME = WIN32_ERROR.ERROR_INVALID_EA_NAME;
pub const ERROR_EA_LIST_INCONSISTENT = WIN32_ERROR.ERROR_EA_LIST_INCONSISTENT;
pub const ERROR_NO_MORE_ITEMS = WIN32_ERROR.ERROR_NO_MORE_ITEMS;
pub const ERROR_CANNOT_COPY = WIN32_ERROR.ERROR_CANNOT_COPY;
pub const ERROR_DIRECTORY = WIN32_ERROR.ERROR_DIRECTORY;
pub const ERROR_EAS_DIDNT_FIT = WIN32_ERROR.ERROR_EAS_DIDNT_FIT;
pub const ERROR_EA_FILE_CORRUPT = WIN32_ERROR.ERROR_EA_FILE_CORRUPT;
pub const ERROR_EA_TABLE_FULL = WIN32_ERROR.ERROR_EA_TABLE_FULL;
pub const ERROR_INVALID_EA_HANDLE = WIN32_ERROR.ERROR_INVALID_EA_HANDLE;
pub const ERROR_EAS_NOT_SUPPORTED = WIN32_ERROR.ERROR_EAS_NOT_SUPPORTED;
pub const ERROR_NOT_OWNER = WIN32_ERROR.ERROR_NOT_OWNER;
pub const ERROR_TOO_MANY_POSTS = WIN32_ERROR.ERROR_TOO_MANY_POSTS;
pub const ERROR_PARTIAL_COPY = WIN32_ERROR.ERROR_PARTIAL_COPY;
pub const ERROR_OPLOCK_NOT_GRANTED = WIN32_ERROR.ERROR_OPLOCK_NOT_GRANTED;
pub const ERROR_INVALID_OPLOCK_PROTOCOL = WIN32_ERROR.ERROR_INVALID_OPLOCK_PROTOCOL;
pub const ERROR_DISK_TOO_FRAGMENTED = WIN32_ERROR.ERROR_DISK_TOO_FRAGMENTED;
pub const ERROR_DELETE_PENDING = WIN32_ERROR.ERROR_DELETE_PENDING;
pub const ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING = WIN32_ERROR.ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING;
pub const ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME = WIN32_ERROR.ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME;
pub const ERROR_SECURITY_STREAM_IS_INCONSISTENT = WIN32_ERROR.ERROR_SECURITY_STREAM_IS_INCONSISTENT;
pub const ERROR_INVALID_LOCK_RANGE = WIN32_ERROR.ERROR_INVALID_LOCK_RANGE;
pub const ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT = WIN32_ERROR.ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT;
pub const ERROR_NOTIFICATION_GUID_ALREADY_DEFINED = WIN32_ERROR.ERROR_NOTIFICATION_GUID_ALREADY_DEFINED;
pub const ERROR_INVALID_EXCEPTION_HANDLER = WIN32_ERROR.ERROR_INVALID_EXCEPTION_HANDLER;
pub const ERROR_DUPLICATE_PRIVILEGES = WIN32_ERROR.ERROR_DUPLICATE_PRIVILEGES;
pub const ERROR_NO_RANGES_PROCESSED = WIN32_ERROR.ERROR_NO_RANGES_PROCESSED;
pub const ERROR_NOT_ALLOWED_ON_SYSTEM_FILE = WIN32_ERROR.ERROR_NOT_ALLOWED_ON_SYSTEM_FILE;
pub const ERROR_DISK_RESOURCES_EXHAUSTED = WIN32_ERROR.ERROR_DISK_RESOURCES_EXHAUSTED;
pub const ERROR_INVALID_TOKEN = WIN32_ERROR.ERROR_INVALID_TOKEN;
pub const ERROR_DEVICE_FEATURE_NOT_SUPPORTED = WIN32_ERROR.ERROR_DEVICE_FEATURE_NOT_SUPPORTED;
pub const ERROR_MR_MID_NOT_FOUND = WIN32_ERROR.ERROR_MR_MID_NOT_FOUND;
pub const ERROR_SCOPE_NOT_FOUND = WIN32_ERROR.ERROR_SCOPE_NOT_FOUND;
pub const ERROR_UNDEFINED_SCOPE = WIN32_ERROR.ERROR_UNDEFINED_SCOPE;
pub const ERROR_INVALID_CAP = WIN32_ERROR.ERROR_INVALID_CAP;
pub const ERROR_DEVICE_UNREACHABLE = WIN32_ERROR.ERROR_DEVICE_UNREACHABLE;
pub const ERROR_DEVICE_NO_RESOURCES = WIN32_ERROR.ERROR_DEVICE_NO_RESOURCES;
pub const ERROR_DATA_CHECKSUM_ERROR = WIN32_ERROR.ERROR_DATA_CHECKSUM_ERROR;
pub const ERROR_INTERMIXED_KERNEL_EA_OPERATION = WIN32_ERROR.ERROR_INTERMIXED_KERNEL_EA_OPERATION;
pub const ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED = WIN32_ERROR.ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED;
pub const ERROR_OFFSET_ALIGNMENT_VIOLATION = WIN32_ERROR.ERROR_OFFSET_ALIGNMENT_VIOLATION;
pub const ERROR_INVALID_FIELD_IN_PARAMETER_LIST = WIN32_ERROR.ERROR_INVALID_FIELD_IN_PARAMETER_LIST;
pub const ERROR_OPERATION_IN_PROGRESS = WIN32_ERROR.ERROR_OPERATION_IN_PROGRESS;
pub const ERROR_BAD_DEVICE_PATH = WIN32_ERROR.ERROR_BAD_DEVICE_PATH;
pub const ERROR_TOO_MANY_DESCRIPTORS = WIN32_ERROR.ERROR_TOO_MANY_DESCRIPTORS;
pub const ERROR_SCRUB_DATA_DISABLED = WIN32_ERROR.ERROR_SCRUB_DATA_DISABLED;
pub const ERROR_NOT_REDUNDANT_STORAGE = WIN32_ERROR.ERROR_NOT_REDUNDANT_STORAGE;
pub const ERROR_RESIDENT_FILE_NOT_SUPPORTED = WIN32_ERROR.ERROR_RESIDENT_FILE_NOT_SUPPORTED;
pub const ERROR_COMPRESSED_FILE_NOT_SUPPORTED = WIN32_ERROR.ERROR_COMPRESSED_FILE_NOT_SUPPORTED;
pub const ERROR_DIRECTORY_NOT_SUPPORTED = WIN32_ERROR.ERROR_DIRECTORY_NOT_SUPPORTED;
pub const ERROR_NOT_READ_FROM_COPY = WIN32_ERROR.ERROR_NOT_READ_FROM_COPY;
pub const ERROR_FT_WRITE_FAILURE = WIN32_ERROR.ERROR_FT_WRITE_FAILURE;
pub const ERROR_FT_DI_SCAN_REQUIRED = WIN32_ERROR.ERROR_FT_DI_SCAN_REQUIRED;
pub const ERROR_INVALID_KERNEL_INFO_VERSION = WIN32_ERROR.ERROR_INVALID_KERNEL_INFO_VERSION;
pub const ERROR_INVALID_PEP_INFO_VERSION = WIN32_ERROR.ERROR_INVALID_PEP_INFO_VERSION;
pub const ERROR_OBJECT_NOT_EXTERNALLY_BACKED = WIN32_ERROR.ERROR_OBJECT_NOT_EXTERNALLY_BACKED;
pub const ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN = WIN32_ERROR.ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN;
pub const ERROR_COMPRESSION_NOT_BENEFICIAL = WIN32_ERROR.ERROR_COMPRESSION_NOT_BENEFICIAL;
pub const ERROR_STORAGE_TOPOLOGY_ID_MISMATCH = WIN32_ERROR.ERROR_STORAGE_TOPOLOGY_ID_MISMATCH;
pub const ERROR_BLOCKED_BY_PARENTAL_CONTROLS = WIN32_ERROR.ERROR_BLOCKED_BY_PARENTAL_CONTROLS;
pub const ERROR_BLOCK_TOO_MANY_REFERENCES = WIN32_ERROR.ERROR_BLOCK_TOO_MANY_REFERENCES;
pub const ERROR_MARKED_TO_DISALLOW_WRITES = WIN32_ERROR.ERROR_MARKED_TO_DISALLOW_WRITES;
pub const ERROR_ENCLAVE_FAILURE = WIN32_ERROR.ERROR_ENCLAVE_FAILURE;
pub const ERROR_FAIL_NOACTION_REBOOT = WIN32_ERROR.ERROR_FAIL_NOACTION_REBOOT;
pub const ERROR_FAIL_SHUTDOWN = WIN32_ERROR.ERROR_FAIL_SHUTDOWN;
pub const ERROR_FAIL_RESTART = WIN32_ERROR.ERROR_FAIL_RESTART;
pub const ERROR_MAX_SESSIONS_REACHED = WIN32_ERROR.ERROR_MAX_SESSIONS_REACHED;
pub const ERROR_NETWORK_ACCESS_DENIED_EDP = WIN32_ERROR.ERROR_NETWORK_ACCESS_DENIED_EDP;
pub const ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL = WIN32_ERROR.ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL;
pub const ERROR_EDP_POLICY_DENIES_OPERATION = WIN32_ERROR.ERROR_EDP_POLICY_DENIES_OPERATION;
pub const ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED = WIN32_ERROR.ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED;
pub const ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT = WIN32_ERROR.ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT;
pub const ERROR_DEVICE_IN_MAINTENANCE = WIN32_ERROR.ERROR_DEVICE_IN_MAINTENANCE;
pub const ERROR_NOT_SUPPORTED_ON_DAX = WIN32_ERROR.ERROR_NOT_SUPPORTED_ON_DAX;
pub const ERROR_DAX_MAPPING_EXISTS = WIN32_ERROR.ERROR_DAX_MAPPING_EXISTS;
pub const ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING = WIN32_ERROR.ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING;
pub const ERROR_CLOUD_FILE_METADATA_CORRUPT = WIN32_ERROR.ERROR_CLOUD_FILE_METADATA_CORRUPT;
pub const ERROR_CLOUD_FILE_METADATA_TOO_LARGE = WIN32_ERROR.ERROR_CLOUD_FILE_METADATA_TOO_LARGE;
pub const ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE = WIN32_ERROR.ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE;
pub const ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH = WIN32_ERROR.ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH;
pub const ERROR_CHILD_PROCESS_BLOCKED = WIN32_ERROR.ERROR_CHILD_PROCESS_BLOCKED;
pub const ERROR_STORAGE_LOST_DATA_PERSISTENCE = WIN32_ERROR.ERROR_STORAGE_LOST_DATA_PERSISTENCE;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE = WIN32_ERROR.ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT = WIN32_ERROR.ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY = WIN32_ERROR.ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN = WIN32_ERROR.ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN;
pub const ERROR_GDI_HANDLE_LEAK = WIN32_ERROR.ERROR_GDI_HANDLE_LEAK;
pub const ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS = WIN32_ERROR.ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS;
pub const ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED = WIN32_ERROR.ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED;
pub const ERROR_NOT_A_CLOUD_FILE = WIN32_ERROR.ERROR_NOT_A_CLOUD_FILE;
pub const ERROR_CLOUD_FILE_NOT_IN_SYNC = WIN32_ERROR.ERROR_CLOUD_FILE_NOT_IN_SYNC;
pub const ERROR_CLOUD_FILE_ALREADY_CONNECTED = WIN32_ERROR.ERROR_CLOUD_FILE_ALREADY_CONNECTED;
pub const ERROR_CLOUD_FILE_NOT_SUPPORTED = WIN32_ERROR.ERROR_CLOUD_FILE_NOT_SUPPORTED;
pub const ERROR_CLOUD_FILE_INVALID_REQUEST = WIN32_ERROR.ERROR_CLOUD_FILE_INVALID_REQUEST;
pub const ERROR_CLOUD_FILE_READ_ONLY_VOLUME = WIN32_ERROR.ERROR_CLOUD_FILE_READ_ONLY_VOLUME;
pub const ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY = WIN32_ERROR.ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY;
pub const ERROR_CLOUD_FILE_VALIDATION_FAILED = WIN32_ERROR.ERROR_CLOUD_FILE_VALIDATION_FAILED;
pub const ERROR_SMB1_NOT_AVAILABLE = WIN32_ERROR.ERROR_SMB1_NOT_AVAILABLE;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION = WIN32_ERROR.ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION;
pub const ERROR_CLOUD_FILE_AUTHENTICATION_FAILED = WIN32_ERROR.ERROR_CLOUD_FILE_AUTHENTICATION_FAILED;
pub const ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES = WIN32_ERROR.ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES;
pub const ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE = WIN32_ERROR.ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE;
pub const ERROR_CLOUD_FILE_UNSUCCESSFUL = WIN32_ERROR.ERROR_CLOUD_FILE_UNSUCCESSFUL;
pub const ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT = WIN32_ERROR.ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT;
pub const ERROR_CLOUD_FILE_IN_USE = WIN32_ERROR.ERROR_CLOUD_FILE_IN_USE;
pub const ERROR_CLOUD_FILE_PINNED = WIN32_ERROR.ERROR_CLOUD_FILE_PINNED;
pub const ERROR_CLOUD_FILE_REQUEST_ABORTED = WIN32_ERROR.ERROR_CLOUD_FILE_REQUEST_ABORTED;
pub const ERROR_CLOUD_FILE_PROPERTY_CORRUPT = WIN32_ERROR.ERROR_CLOUD_FILE_PROPERTY_CORRUPT;
pub const ERROR_CLOUD_FILE_ACCESS_DENIED = WIN32_ERROR.ERROR_CLOUD_FILE_ACCESS_DENIED;
pub const ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS = WIN32_ERROR.ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS;
pub const ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT = WIN32_ERROR.ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT;
pub const ERROR_CLOUD_FILE_REQUEST_CANCELED = WIN32_ERROR.ERROR_CLOUD_FILE_REQUEST_CANCELED;
pub const ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED = WIN32_ERROR.ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED;
pub const ERROR_THREAD_MODE_ALREADY_BACKGROUND = WIN32_ERROR.ERROR_THREAD_MODE_ALREADY_BACKGROUND;
pub const ERROR_THREAD_MODE_NOT_BACKGROUND = WIN32_ERROR.ERROR_THREAD_MODE_NOT_BACKGROUND;
pub const ERROR_PROCESS_MODE_ALREADY_BACKGROUND = WIN32_ERROR.ERROR_PROCESS_MODE_ALREADY_BACKGROUND;
pub const ERROR_PROCESS_MODE_NOT_BACKGROUND = WIN32_ERROR.ERROR_PROCESS_MODE_NOT_BACKGROUND;
pub const ERROR_CLOUD_FILE_PROVIDER_TERMINATED = WIN32_ERROR.ERROR_CLOUD_FILE_PROVIDER_TERMINATED;
pub const ERROR_NOT_A_CLOUD_SYNC_ROOT = WIN32_ERROR.ERROR_NOT_A_CLOUD_SYNC_ROOT;
pub const ERROR_FILE_PROTECTED_UNDER_DPL = WIN32_ERROR.ERROR_FILE_PROTECTED_UNDER_DPL;
pub const ERROR_VOLUME_NOT_CLUSTER_ALIGNED = WIN32_ERROR.ERROR_VOLUME_NOT_CLUSTER_ALIGNED;
pub const ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND = WIN32_ERROR.ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND;
pub const ERROR_APPX_FILE_NOT_ENCRYPTED = WIN32_ERROR.ERROR_APPX_FILE_NOT_ENCRYPTED;
pub const ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED = WIN32_ERROR.ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED;
pub const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET = WIN32_ERROR.ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET;
pub const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE = WIN32_ERROR.ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE;
pub const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER = WIN32_ERROR.ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER;
pub const ERROR_LINUX_SUBSYSTEM_NOT_PRESENT = WIN32_ERROR.ERROR_LINUX_SUBSYSTEM_NOT_PRESENT;
pub const ERROR_FT_READ_FAILURE = WIN32_ERROR.ERROR_FT_READ_FAILURE;
pub const ERROR_STORAGE_RESERVE_ID_INVALID = WIN32_ERROR.ERROR_STORAGE_RESERVE_ID_INVALID;
pub const ERROR_STORAGE_RESERVE_DOES_NOT_EXIST = WIN32_ERROR.ERROR_STORAGE_RESERVE_DOES_NOT_EXIST;
pub const ERROR_STORAGE_RESERVE_ALREADY_EXISTS = WIN32_ERROR.ERROR_STORAGE_RESERVE_ALREADY_EXISTS;
pub const ERROR_STORAGE_RESERVE_NOT_EMPTY = WIN32_ERROR.ERROR_STORAGE_RESERVE_NOT_EMPTY;
pub const ERROR_NOT_A_DAX_VOLUME = WIN32_ERROR.ERROR_NOT_A_DAX_VOLUME;
pub const ERROR_NOT_DAX_MAPPABLE = WIN32_ERROR.ERROR_NOT_DAX_MAPPABLE;
pub const ERROR_TIME_SENSITIVE_THREAD = WIN32_ERROR.ERROR_TIME_SENSITIVE_THREAD;
pub const ERROR_DPL_NOT_SUPPORTED_FOR_USER = WIN32_ERROR.ERROR_DPL_NOT_SUPPORTED_FOR_USER;
pub const ERROR_CASE_DIFFERING_NAMES_IN_DIR = WIN32_ERROR.ERROR_CASE_DIFFERING_NAMES_IN_DIR;
pub const ERROR_FILE_NOT_SUPPORTED = WIN32_ERROR.ERROR_FILE_NOT_SUPPORTED;
pub const ERROR_CLOUD_FILE_REQUEST_TIMEOUT = WIN32_ERROR.ERROR_CLOUD_FILE_REQUEST_TIMEOUT;
pub const ERROR_NO_TASK_QUEUE = WIN32_ERROR.ERROR_NO_TASK_QUEUE;
pub const ERROR_SRC_SRV_DLL_LOAD_FAILED = WIN32_ERROR.ERROR_SRC_SRV_DLL_LOAD_FAILED;
pub const ERROR_NOT_SUPPORTED_WITH_BTT = WIN32_ERROR.ERROR_NOT_SUPPORTED_WITH_BTT;
pub const ERROR_ENCRYPTION_DISABLED = WIN32_ERROR.ERROR_ENCRYPTION_DISABLED;
pub const ERROR_ENCRYPTING_METADATA_DISALLOWED = WIN32_ERROR.ERROR_ENCRYPTING_METADATA_DISALLOWED;
pub const ERROR_CANT_CLEAR_ENCRYPTION_FLAG = WIN32_ERROR.ERROR_CANT_CLEAR_ENCRYPTION_FLAG;
pub const ERROR_NO_SUCH_DEVICE = WIN32_ERROR.ERROR_NO_SUCH_DEVICE;
pub const ERROR_CLOUD_FILE_DEHYDRATION_DISALLOWED = WIN32_ERROR.ERROR_CLOUD_FILE_DEHYDRATION_DISALLOWED;
pub const ERROR_FILE_SNAP_IN_PROGRESS = WIN32_ERROR.ERROR_FILE_SNAP_IN_PROGRESS;
pub const ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED = WIN32_ERROR.ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED;
pub const ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED = WIN32_ERROR.ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED;
pub const ERROR_FILE_SNAP_IO_NOT_COORDINATED = WIN32_ERROR.ERROR_FILE_SNAP_IO_NOT_COORDINATED;
pub const ERROR_FILE_SNAP_UNEXPECTED_ERROR = WIN32_ERROR.ERROR_FILE_SNAP_UNEXPECTED_ERROR;
pub const ERROR_FILE_SNAP_INVALID_PARAMETER = WIN32_ERROR.ERROR_FILE_SNAP_INVALID_PARAMETER;
pub const ERROR_UNSATISFIED_DEPENDENCIES = WIN32_ERROR.ERROR_UNSATISFIED_DEPENDENCIES;
pub const ERROR_CASE_SENSITIVE_PATH = WIN32_ERROR.ERROR_CASE_SENSITIVE_PATH;
pub const ERROR_UNEXPECTED_NTCACHEMANAGER_ERROR = WIN32_ERROR.ERROR_UNEXPECTED_NTCACHEMANAGER_ERROR;
pub const ERROR_LINUX_SUBSYSTEM_UPDATE_REQUIRED = WIN32_ERROR.ERROR_LINUX_SUBSYSTEM_UPDATE_REQUIRED;
pub const ERROR_DLP_POLICY_WARNS_AGAINST_OPERATION = WIN32_ERROR.ERROR_DLP_POLICY_WARNS_AGAINST_OPERATION;
pub const ERROR_DLP_POLICY_DENIES_OPERATION = WIN32_ERROR.ERROR_DLP_POLICY_DENIES_OPERATION;
pub const ERROR_SECURITY_DENIES_OPERATION = WIN32_ERROR.ERROR_SECURITY_DENIES_OPERATION;
pub const ERROR_UNTRUSTED_MOUNT_POINT = WIN32_ERROR.ERROR_UNTRUSTED_MOUNT_POINT;
pub const ERROR_DLP_POLICY_SILENTLY_FAIL = WIN32_ERROR.ERROR_DLP_POLICY_SILENTLY_FAIL;
pub const ERROR_CAPAUTHZ_NOT_DEVUNLOCKED = WIN32_ERROR.ERROR_CAPAUTHZ_NOT_DEVUNLOCKED;
pub const ERROR_CAPAUTHZ_CHANGE_TYPE = WIN32_ERROR.ERROR_CAPAUTHZ_CHANGE_TYPE;
pub const ERROR_CAPAUTHZ_NOT_PROVISIONED = WIN32_ERROR.ERROR_CAPAUTHZ_NOT_PROVISIONED;
pub const ERROR_CAPAUTHZ_NOT_AUTHORIZED = WIN32_ERROR.ERROR_CAPAUTHZ_NOT_AUTHORIZED;
pub const ERROR_CAPAUTHZ_NO_POLICY = WIN32_ERROR.ERROR_CAPAUTHZ_NO_POLICY;
pub const ERROR_CAPAUTHZ_DB_CORRUPTED = WIN32_ERROR.ERROR_CAPAUTHZ_DB_CORRUPTED;
pub const ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG = WIN32_ERROR.ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG;
pub const ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY = WIN32_ERROR.ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY;
pub const ERROR_CAPAUTHZ_SCCD_PARSE_ERROR = WIN32_ERROR.ERROR_CAPAUTHZ_SCCD_PARSE_ERROR;
pub const ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED = WIN32_ERROR.ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED;
pub const ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH = WIN32_ERROR.ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH;
pub const ERROR_CIMFS_IMAGE_CORRUPT = WIN32_ERROR.ERROR_CIMFS_IMAGE_CORRUPT;
pub const ERROR_CIMFS_IMAGE_VERSION_NOT_SUPPORTED = WIN32_ERROR.ERROR_CIMFS_IMAGE_VERSION_NOT_SUPPORTED;
pub const ERROR_STORAGE_STACK_ACCESS_DENIED = WIN32_ERROR.ERROR_STORAGE_STACK_ACCESS_DENIED;
pub const ERROR_INSUFFICIENT_VIRTUAL_ADDR_RESOURCES = WIN32_ERROR.ERROR_INSUFFICIENT_VIRTUAL_ADDR_RESOURCES;
pub const ERROR_INDEX_OUT_OF_BOUNDS = WIN32_ERROR.ERROR_INDEX_OUT_OF_BOUNDS;
pub const ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT = WIN32_ERROR.ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT;
pub const ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT = WIN32_ERROR.ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT;
pub const ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT = WIN32_ERROR.ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT;
pub const ERROR_DEVICE_HARDWARE_ERROR = WIN32_ERROR.ERROR_DEVICE_HARDWARE_ERROR;
pub const ERROR_INVALID_ADDRESS = WIN32_ERROR.ERROR_INVALID_ADDRESS;
pub const ERROR_HAS_SYSTEM_CRITICAL_FILES = WIN32_ERROR.ERROR_HAS_SYSTEM_CRITICAL_FILES;
pub const ERROR_ENCRYPTED_FILE_NOT_SUPPORTED = WIN32_ERROR.ERROR_ENCRYPTED_FILE_NOT_SUPPORTED;
pub const ERROR_SPARSE_FILE_NOT_SUPPORTED = WIN32_ERROR.ERROR_SPARSE_FILE_NOT_SUPPORTED;
pub const ERROR_PAGEFILE_NOT_SUPPORTED = WIN32_ERROR.ERROR_PAGEFILE_NOT_SUPPORTED;
pub const ERROR_VOLUME_NOT_SUPPORTED = WIN32_ERROR.ERROR_VOLUME_NOT_SUPPORTED;
pub const ERROR_NOT_SUPPORTED_WITH_BYPASSIO = WIN32_ERROR.ERROR_NOT_SUPPORTED_WITH_BYPASSIO;
pub const ERROR_NO_BYPASSIO_DRIVER_SUPPORT = WIN32_ERROR.ERROR_NO_BYPASSIO_DRIVER_SUPPORT;
pub const ERROR_NOT_SUPPORTED_WITH_ENCRYPTION = WIN32_ERROR.ERROR_NOT_SUPPORTED_WITH_ENCRYPTION;
pub const ERROR_NOT_SUPPORTED_WITH_COMPRESSION = WIN32_ERROR.ERROR_NOT_SUPPORTED_WITH_COMPRESSION;
pub const ERROR_NOT_SUPPORTED_WITH_REPLICATION = WIN32_ERROR.ERROR_NOT_SUPPORTED_WITH_REPLICATION;
pub const ERROR_NOT_SUPPORTED_WITH_DEDUPLICATION = WIN32_ERROR.ERROR_NOT_SUPPORTED_WITH_DEDUPLICATION;
pub const ERROR_NOT_SUPPORTED_WITH_AUDITING = WIN32_ERROR.ERROR_NOT_SUPPORTED_WITH_AUDITING;
pub const ERROR_USER_PROFILE_LOAD = WIN32_ERROR.ERROR_USER_PROFILE_LOAD;
pub const ERROR_SESSION_KEY_TOO_SHORT = WIN32_ERROR.ERROR_SESSION_KEY_TOO_SHORT;
pub const ERROR_ACCESS_DENIED_APPDATA = WIN32_ERROR.ERROR_ACCESS_DENIED_APPDATA;
pub const ERROR_NOT_SUPPORTED_WITH_MONITORING = WIN32_ERROR.ERROR_NOT_SUPPORTED_WITH_MONITORING;
pub const ERROR_NOT_SUPPORTED_WITH_SNAPSHOT = WIN32_ERROR.ERROR_NOT_SUPPORTED_WITH_SNAPSHOT;
pub const ERROR_NOT_SUPPORTED_WITH_VIRTUALIZATION = WIN32_ERROR.ERROR_NOT_SUPPORTED_WITH_VIRTUALIZATION;
pub const ERROR_BYPASSIO_FLT_NOT_SUPPORTED = WIN32_ERROR.ERROR_BYPASSIO_FLT_NOT_SUPPORTED;
pub const ERROR_DEVICE_RESET_REQUIRED = WIN32_ERROR.ERROR_DEVICE_RESET_REQUIRED;
pub const ERROR_VOLUME_WRITE_ACCESS_DENIED = WIN32_ERROR.ERROR_VOLUME_WRITE_ACCESS_DENIED;
pub const ERROR_ARITHMETIC_OVERFLOW = WIN32_ERROR.ERROR_ARITHMETIC_OVERFLOW;
pub const ERROR_PIPE_CONNECTED = WIN32_ERROR.ERROR_PIPE_CONNECTED;
pub const ERROR_PIPE_LISTENING = WIN32_ERROR.ERROR_PIPE_LISTENING;
pub const ERROR_VERIFIER_STOP = WIN32_ERROR.ERROR_VERIFIER_STOP;
pub const ERROR_ABIOS_ERROR = WIN32_ERROR.ERROR_ABIOS_ERROR;
pub const ERROR_WX86_WARNING = WIN32_ERROR.ERROR_WX86_WARNING;
pub const ERROR_WX86_ERROR = WIN32_ERROR.ERROR_WX86_ERROR;
pub const ERROR_TIMER_NOT_CANCELED = WIN32_ERROR.ERROR_TIMER_NOT_CANCELED;
pub const ERROR_UNWIND = WIN32_ERROR.ERROR_UNWIND;
pub const ERROR_BAD_STACK = WIN32_ERROR.ERROR_BAD_STACK;
pub const ERROR_INVALID_UNWIND_TARGET = WIN32_ERROR.ERROR_INVALID_UNWIND_TARGET;
pub const ERROR_INVALID_PORT_ATTRIBUTES = WIN32_ERROR.ERROR_INVALID_PORT_ATTRIBUTES;
pub const ERROR_PORT_MESSAGE_TOO_LONG = WIN32_ERROR.ERROR_PORT_MESSAGE_TOO_LONG;
pub const ERROR_INVALID_QUOTA_LOWER = WIN32_ERROR.ERROR_INVALID_QUOTA_LOWER;
pub const ERROR_DEVICE_ALREADY_ATTACHED = WIN32_ERROR.ERROR_DEVICE_ALREADY_ATTACHED;
pub const ERROR_INSTRUCTION_MISALIGNMENT = WIN32_ERROR.ERROR_INSTRUCTION_MISALIGNMENT;
pub const ERROR_PROFILING_NOT_STARTED = WIN32_ERROR.ERROR_PROFILING_NOT_STARTED;
pub const ERROR_PROFILING_NOT_STOPPED = WIN32_ERROR.ERROR_PROFILING_NOT_STOPPED;
pub const ERROR_COULD_NOT_INTERPRET = WIN32_ERROR.ERROR_COULD_NOT_INTERPRET;
pub const ERROR_PROFILING_AT_LIMIT = WIN32_ERROR.ERROR_PROFILING_AT_LIMIT;
pub const ERROR_CANT_WAIT = WIN32_ERROR.ERROR_CANT_WAIT;
pub const ERROR_CANT_TERMINATE_SELF = WIN32_ERROR.ERROR_CANT_TERMINATE_SELF;
pub const ERROR_UNEXPECTED_MM_CREATE_ERR = WIN32_ERROR.ERROR_UNEXPECTED_MM_CREATE_ERR;
pub const ERROR_UNEXPECTED_MM_MAP_ERROR = WIN32_ERROR.ERROR_UNEXPECTED_MM_MAP_ERROR;
pub const ERROR_UNEXPECTED_MM_EXTEND_ERR = WIN32_ERROR.ERROR_UNEXPECTED_MM_EXTEND_ERR;
pub const ERROR_BAD_FUNCTION_TABLE = WIN32_ERROR.ERROR_BAD_FUNCTION_TABLE;
pub const ERROR_NO_GUID_TRANSLATION = WIN32_ERROR.ERROR_NO_GUID_TRANSLATION;
pub const ERROR_INVALID_LDT_SIZE = WIN32_ERROR.ERROR_INVALID_LDT_SIZE;
pub const ERROR_INVALID_LDT_OFFSET = WIN32_ERROR.ERROR_INVALID_LDT_OFFSET;
pub const ERROR_INVALID_LDT_DESCRIPTOR = WIN32_ERROR.ERROR_INVALID_LDT_DESCRIPTOR;
pub const ERROR_TOO_MANY_THREADS = WIN32_ERROR.ERROR_TOO_MANY_THREADS;
pub const ERROR_THREAD_NOT_IN_PROCESS = WIN32_ERROR.ERROR_THREAD_NOT_IN_PROCESS;
pub const ERROR_PAGEFILE_QUOTA_EXCEEDED = WIN32_ERROR.ERROR_PAGEFILE_QUOTA_EXCEEDED;
pub const ERROR_LOGON_SERVER_CONFLICT = WIN32_ERROR.ERROR_LOGON_SERVER_CONFLICT;
pub const ERROR_SYNCHRONIZATION_REQUIRED = WIN32_ERROR.ERROR_SYNCHRONIZATION_REQUIRED;
pub const ERROR_NET_OPEN_FAILED = WIN32_ERROR.ERROR_NET_OPEN_FAILED;
pub const ERROR_IO_PRIVILEGE_FAILED = WIN32_ERROR.ERROR_IO_PRIVILEGE_FAILED;
pub const ERROR_CONTROL_C_EXIT = WIN32_ERROR.ERROR_CONTROL_C_EXIT;
pub const ERROR_MISSING_SYSTEMFILE = WIN32_ERROR.ERROR_MISSING_SYSTEMFILE;
pub const ERROR_UNHANDLED_EXCEPTION = WIN32_ERROR.ERROR_UNHANDLED_EXCEPTION;
pub const ERROR_APP_INIT_FAILURE = WIN32_ERROR.ERROR_APP_INIT_FAILURE;
pub const ERROR_PAGEFILE_CREATE_FAILED = WIN32_ERROR.ERROR_PAGEFILE_CREATE_FAILED;
pub const ERROR_INVALID_IMAGE_HASH = WIN32_ERROR.ERROR_INVALID_IMAGE_HASH;
pub const ERROR_NO_PAGEFILE = WIN32_ERROR.ERROR_NO_PAGEFILE;
pub const ERROR_ILLEGAL_FLOAT_CONTEXT = WIN32_ERROR.ERROR_ILLEGAL_FLOAT_CONTEXT;
pub const ERROR_NO_EVENT_PAIR = WIN32_ERROR.ERROR_NO_EVENT_PAIR;
pub const ERROR_DOMAIN_CTRLR_CONFIG_ERROR = WIN32_ERROR.ERROR_DOMAIN_CTRLR_CONFIG_ERROR;
pub const ERROR_ILLEGAL_CHARACTER = WIN32_ERROR.ERROR_ILLEGAL_CHARACTER;
pub const ERROR_UNDEFINED_CHARACTER = WIN32_ERROR.ERROR_UNDEFINED_CHARACTER;
pub const ERROR_FLOPPY_VOLUME = WIN32_ERROR.ERROR_FLOPPY_VOLUME;
pub const ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT = WIN32_ERROR.ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT;
pub const ERROR_BACKUP_CONTROLLER = WIN32_ERROR.ERROR_BACKUP_CONTROLLER;
pub const ERROR_MUTANT_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_MUTANT_LIMIT_EXCEEDED;
pub const ERROR_FS_DRIVER_REQUIRED = WIN32_ERROR.ERROR_FS_DRIVER_REQUIRED;
pub const ERROR_CANNOT_LOAD_REGISTRY_FILE = WIN32_ERROR.ERROR_CANNOT_LOAD_REGISTRY_FILE;
pub const ERROR_DEBUG_ATTACH_FAILED = WIN32_ERROR.ERROR_DEBUG_ATTACH_FAILED;
pub const ERROR_SYSTEM_PROCESS_TERMINATED = WIN32_ERROR.ERROR_SYSTEM_PROCESS_TERMINATED;
pub const ERROR_DATA_NOT_ACCEPTED = WIN32_ERROR.ERROR_DATA_NOT_ACCEPTED;
pub const ERROR_VDM_HARD_ERROR = WIN32_ERROR.ERROR_VDM_HARD_ERROR;
pub const ERROR_DRIVER_CANCEL_TIMEOUT = WIN32_ERROR.ERROR_DRIVER_CANCEL_TIMEOUT;
pub const ERROR_REPLY_MESSAGE_MISMATCH = WIN32_ERROR.ERROR_REPLY_MESSAGE_MISMATCH;
pub const ERROR_LOST_WRITEBEHIND_DATA = WIN32_ERROR.ERROR_LOST_WRITEBEHIND_DATA;
pub const ERROR_CLIENT_SERVER_PARAMETERS_INVALID = WIN32_ERROR.ERROR_CLIENT_SERVER_PARAMETERS_INVALID;
pub const ERROR_NOT_TINY_STREAM = WIN32_ERROR.ERROR_NOT_TINY_STREAM;
pub const ERROR_STACK_OVERFLOW_READ = WIN32_ERROR.ERROR_STACK_OVERFLOW_READ;
pub const ERROR_CONVERT_TO_LARGE = WIN32_ERROR.ERROR_CONVERT_TO_LARGE;
pub const ERROR_FOUND_OUT_OF_SCOPE = WIN32_ERROR.ERROR_FOUND_OUT_OF_SCOPE;
pub const ERROR_ALLOCATE_BUCKET = WIN32_ERROR.ERROR_ALLOCATE_BUCKET;
pub const ERROR_MARSHALL_OVERFLOW = WIN32_ERROR.ERROR_MARSHALL_OVERFLOW;
pub const ERROR_INVALID_VARIANT = WIN32_ERROR.ERROR_INVALID_VARIANT;
pub const ERROR_BAD_COMPRESSION_BUFFER = WIN32_ERROR.ERROR_BAD_COMPRESSION_BUFFER;
pub const ERROR_AUDIT_FAILED = WIN32_ERROR.ERROR_AUDIT_FAILED;
pub const ERROR_TIMER_RESOLUTION_NOT_SET = WIN32_ERROR.ERROR_TIMER_RESOLUTION_NOT_SET;
pub const ERROR_INSUFFICIENT_LOGON_INFO = WIN32_ERROR.ERROR_INSUFFICIENT_LOGON_INFO;
pub const ERROR_BAD_DLL_ENTRYPOINT = WIN32_ERROR.ERROR_BAD_DLL_ENTRYPOINT;
pub const ERROR_BAD_SERVICE_ENTRYPOINT = WIN32_ERROR.ERROR_BAD_SERVICE_ENTRYPOINT;
pub const ERROR_IP_ADDRESS_CONFLICT1 = WIN32_ERROR.ERROR_IP_ADDRESS_CONFLICT1;
pub const ERROR_IP_ADDRESS_CONFLICT2 = WIN32_ERROR.ERROR_IP_ADDRESS_CONFLICT2;
pub const ERROR_REGISTRY_QUOTA_LIMIT = WIN32_ERROR.ERROR_REGISTRY_QUOTA_LIMIT;
pub const ERROR_NO_CALLBACK_ACTIVE = WIN32_ERROR.ERROR_NO_CALLBACK_ACTIVE;
pub const ERROR_PWD_TOO_SHORT = WIN32_ERROR.ERROR_PWD_TOO_SHORT;
pub const ERROR_PWD_TOO_RECENT = WIN32_ERROR.ERROR_PWD_TOO_RECENT;
pub const ERROR_PWD_HISTORY_CONFLICT = WIN32_ERROR.ERROR_PWD_HISTORY_CONFLICT;
pub const ERROR_UNSUPPORTED_COMPRESSION = WIN32_ERROR.ERROR_UNSUPPORTED_COMPRESSION;
pub const ERROR_INVALID_HW_PROFILE = WIN32_ERROR.ERROR_INVALID_HW_PROFILE;
pub const ERROR_INVALID_PLUGPLAY_DEVICE_PATH = WIN32_ERROR.ERROR_INVALID_PLUGPLAY_DEVICE_PATH;
pub const ERROR_QUOTA_LIST_INCONSISTENT = WIN32_ERROR.ERROR_QUOTA_LIST_INCONSISTENT;
pub const ERROR_EVALUATION_EXPIRATION = WIN32_ERROR.ERROR_EVALUATION_EXPIRATION;
pub const ERROR_ILLEGAL_DLL_RELOCATION = WIN32_ERROR.ERROR_ILLEGAL_DLL_RELOCATION;
pub const ERROR_DLL_INIT_FAILED_LOGOFF = WIN32_ERROR.ERROR_DLL_INIT_FAILED_LOGOFF;
pub const ERROR_VALIDATE_CONTINUE = WIN32_ERROR.ERROR_VALIDATE_CONTINUE;
pub const ERROR_NO_MORE_MATCHES = WIN32_ERROR.ERROR_NO_MORE_MATCHES;
pub const ERROR_RANGE_LIST_CONFLICT = WIN32_ERROR.ERROR_RANGE_LIST_CONFLICT;
pub const ERROR_SERVER_SID_MISMATCH = WIN32_ERROR.ERROR_SERVER_SID_MISMATCH;
pub const ERROR_CANT_ENABLE_DENY_ONLY = WIN32_ERROR.ERROR_CANT_ENABLE_DENY_ONLY;
pub const ERROR_FLOAT_MULTIPLE_FAULTS = WIN32_ERROR.ERROR_FLOAT_MULTIPLE_FAULTS;
pub const ERROR_FLOAT_MULTIPLE_TRAPS = WIN32_ERROR.ERROR_FLOAT_MULTIPLE_TRAPS;
pub const ERROR_NOINTERFACE = WIN32_ERROR.ERROR_NOINTERFACE;
pub const ERROR_DRIVER_FAILED_SLEEP = WIN32_ERROR.ERROR_DRIVER_FAILED_SLEEP;
pub const ERROR_CORRUPT_SYSTEM_FILE = WIN32_ERROR.ERROR_CORRUPT_SYSTEM_FILE;
pub const ERROR_COMMITMENT_MINIMUM = WIN32_ERROR.ERROR_COMMITMENT_MINIMUM;
pub const ERROR_PNP_RESTART_ENUMERATION = WIN32_ERROR.ERROR_PNP_RESTART_ENUMERATION;
pub const ERROR_SYSTEM_IMAGE_BAD_SIGNATURE = WIN32_ERROR.ERROR_SYSTEM_IMAGE_BAD_SIGNATURE;
pub const ERROR_PNP_REBOOT_REQUIRED = WIN32_ERROR.ERROR_PNP_REBOOT_REQUIRED;
pub const ERROR_INSUFFICIENT_POWER = WIN32_ERROR.ERROR_INSUFFICIENT_POWER;
pub const ERROR_MULTIPLE_FAULT_VIOLATION = WIN32_ERROR.ERROR_MULTIPLE_FAULT_VIOLATION;
pub const ERROR_SYSTEM_SHUTDOWN = WIN32_ERROR.ERROR_SYSTEM_SHUTDOWN;
pub const ERROR_PORT_NOT_SET = WIN32_ERROR.ERROR_PORT_NOT_SET;
pub const ERROR_DS_VERSION_CHECK_FAILURE = WIN32_ERROR.ERROR_DS_VERSION_CHECK_FAILURE;
pub const ERROR_RANGE_NOT_FOUND = WIN32_ERROR.ERROR_RANGE_NOT_FOUND;
pub const ERROR_NOT_SAFE_MODE_DRIVER = WIN32_ERROR.ERROR_NOT_SAFE_MODE_DRIVER;
pub const ERROR_FAILED_DRIVER_ENTRY = WIN32_ERROR.ERROR_FAILED_DRIVER_ENTRY;
pub const ERROR_DEVICE_ENUMERATION_ERROR = WIN32_ERROR.ERROR_DEVICE_ENUMERATION_ERROR;
pub const ERROR_MOUNT_POINT_NOT_RESOLVED = WIN32_ERROR.ERROR_MOUNT_POINT_NOT_RESOLVED;
pub const ERROR_INVALID_DEVICE_OBJECT_PARAMETER = WIN32_ERROR.ERROR_INVALID_DEVICE_OBJECT_PARAMETER;
pub const ERROR_MCA_OCCURED = WIN32_ERROR.ERROR_MCA_OCCURED;
pub const ERROR_DRIVER_DATABASE_ERROR = WIN32_ERROR.ERROR_DRIVER_DATABASE_ERROR;
pub const ERROR_SYSTEM_HIVE_TOO_LARGE = WIN32_ERROR.ERROR_SYSTEM_HIVE_TOO_LARGE;
pub const ERROR_DRIVER_FAILED_PRIOR_UNLOAD = WIN32_ERROR.ERROR_DRIVER_FAILED_PRIOR_UNLOAD;
pub const ERROR_VOLSNAP_PREPARE_HIBERNATE = WIN32_ERROR.ERROR_VOLSNAP_PREPARE_HIBERNATE;
pub const ERROR_HIBERNATION_FAILURE = WIN32_ERROR.ERROR_HIBERNATION_FAILURE;
pub const ERROR_PWD_TOO_LONG = WIN32_ERROR.ERROR_PWD_TOO_LONG;
pub const ERROR_FILE_SYSTEM_LIMITATION = WIN32_ERROR.ERROR_FILE_SYSTEM_LIMITATION;
pub const ERROR_ASSERTION_FAILURE = WIN32_ERROR.ERROR_ASSERTION_FAILURE;
pub const ERROR_ACPI_ERROR = WIN32_ERROR.ERROR_ACPI_ERROR;
pub const ERROR_WOW_ASSERTION = WIN32_ERROR.ERROR_WOW_ASSERTION;
pub const ERROR_PNP_BAD_MPS_TABLE = WIN32_ERROR.ERROR_PNP_BAD_MPS_TABLE;
pub const ERROR_PNP_TRANSLATION_FAILED = WIN32_ERROR.ERROR_PNP_TRANSLATION_FAILED;
pub const ERROR_PNP_IRQ_TRANSLATION_FAILED = WIN32_ERROR.ERROR_PNP_IRQ_TRANSLATION_FAILED;
pub const ERROR_PNP_INVALID_ID = WIN32_ERROR.ERROR_PNP_INVALID_ID;
pub const ERROR_WAKE_SYSTEM_DEBUGGER = WIN32_ERROR.ERROR_WAKE_SYSTEM_DEBUGGER;
pub const ERROR_HANDLES_CLOSED = WIN32_ERROR.ERROR_HANDLES_CLOSED;
pub const ERROR_EXTRANEOUS_INFORMATION = WIN32_ERROR.ERROR_EXTRANEOUS_INFORMATION;
pub const ERROR_RXACT_COMMIT_NECESSARY = WIN32_ERROR.ERROR_RXACT_COMMIT_NECESSARY;
pub const ERROR_MEDIA_CHECK = WIN32_ERROR.ERROR_MEDIA_CHECK;
pub const ERROR_GUID_SUBSTITUTION_MADE = WIN32_ERROR.ERROR_GUID_SUBSTITUTION_MADE;
pub const ERROR_STOPPED_ON_SYMLINK = WIN32_ERROR.ERROR_STOPPED_ON_SYMLINK;
pub const ERROR_LONGJUMP = WIN32_ERROR.ERROR_LONGJUMP;
pub const ERROR_PLUGPLAY_QUERY_VETOED = WIN32_ERROR.ERROR_PLUGPLAY_QUERY_VETOED;
pub const ERROR_UNWIND_CONSOLIDATE = WIN32_ERROR.ERROR_UNWIND_CONSOLIDATE;
pub const ERROR_REGISTRY_HIVE_RECOVERED = WIN32_ERROR.ERROR_REGISTRY_HIVE_RECOVERED;
pub const ERROR_DLL_MIGHT_BE_INSECURE = WIN32_ERROR.ERROR_DLL_MIGHT_BE_INSECURE;
pub const ERROR_DLL_MIGHT_BE_INCOMPATIBLE = WIN32_ERROR.ERROR_DLL_MIGHT_BE_INCOMPATIBLE;
pub const ERROR_DBG_EXCEPTION_NOT_HANDLED = WIN32_ERROR.ERROR_DBG_EXCEPTION_NOT_HANDLED;
pub const ERROR_DBG_REPLY_LATER = WIN32_ERROR.ERROR_DBG_REPLY_LATER;
pub const ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE = WIN32_ERROR.ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE;
pub const ERROR_DBG_TERMINATE_THREAD = WIN32_ERROR.ERROR_DBG_TERMINATE_THREAD;
pub const ERROR_DBG_TERMINATE_PROCESS = WIN32_ERROR.ERROR_DBG_TERMINATE_PROCESS;
pub const ERROR_DBG_CONTROL_C = WIN32_ERROR.ERROR_DBG_CONTROL_C;
pub const ERROR_DBG_PRINTEXCEPTION_C = WIN32_ERROR.ERROR_DBG_PRINTEXCEPTION_C;
pub const ERROR_DBG_RIPEXCEPTION = WIN32_ERROR.ERROR_DBG_RIPEXCEPTION;
pub const ERROR_DBG_CONTROL_BREAK = WIN32_ERROR.ERROR_DBG_CONTROL_BREAK;
pub const ERROR_DBG_COMMAND_EXCEPTION = WIN32_ERROR.ERROR_DBG_COMMAND_EXCEPTION;
pub const ERROR_OBJECT_NAME_EXISTS = WIN32_ERROR.ERROR_OBJECT_NAME_EXISTS;
pub const ERROR_THREAD_WAS_SUSPENDED = WIN32_ERROR.ERROR_THREAD_WAS_SUSPENDED;
pub const ERROR_IMAGE_NOT_AT_BASE = WIN32_ERROR.ERROR_IMAGE_NOT_AT_BASE;
pub const ERROR_RXACT_STATE_CREATED = WIN32_ERROR.ERROR_RXACT_STATE_CREATED;
pub const ERROR_SEGMENT_NOTIFICATION = WIN32_ERROR.ERROR_SEGMENT_NOTIFICATION;
pub const ERROR_BAD_CURRENT_DIRECTORY = WIN32_ERROR.ERROR_BAD_CURRENT_DIRECTORY;
pub const ERROR_FT_READ_RECOVERY_FROM_BACKUP = WIN32_ERROR.ERROR_FT_READ_RECOVERY_FROM_BACKUP;
pub const ERROR_FT_WRITE_RECOVERY = WIN32_ERROR.ERROR_FT_WRITE_RECOVERY;
pub const ERROR_IMAGE_MACHINE_TYPE_MISMATCH = WIN32_ERROR.ERROR_IMAGE_MACHINE_TYPE_MISMATCH;
pub const ERROR_RECEIVE_PARTIAL = WIN32_ERROR.ERROR_RECEIVE_PARTIAL;
pub const ERROR_RECEIVE_EXPEDITED = WIN32_ERROR.ERROR_RECEIVE_EXPEDITED;
pub const ERROR_RECEIVE_PARTIAL_EXPEDITED = WIN32_ERROR.ERROR_RECEIVE_PARTIAL_EXPEDITED;
pub const ERROR_EVENT_DONE = WIN32_ERROR.ERROR_EVENT_DONE;
pub const ERROR_EVENT_PENDING = WIN32_ERROR.ERROR_EVENT_PENDING;
pub const ERROR_CHECKING_FILE_SYSTEM = WIN32_ERROR.ERROR_CHECKING_FILE_SYSTEM;
pub const ERROR_FATAL_APP_EXIT = WIN32_ERROR.ERROR_FATAL_APP_EXIT;
pub const ERROR_PREDEFINED_HANDLE = WIN32_ERROR.ERROR_PREDEFINED_HANDLE;
pub const ERROR_WAS_UNLOCKED = WIN32_ERROR.ERROR_WAS_UNLOCKED;
pub const ERROR_SERVICE_NOTIFICATION = WIN32_ERROR.ERROR_SERVICE_NOTIFICATION;
pub const ERROR_WAS_LOCKED = WIN32_ERROR.ERROR_WAS_LOCKED;
pub const ERROR_LOG_HARD_ERROR = WIN32_ERROR.ERROR_LOG_HARD_ERROR;
pub const ERROR_ALREADY_WIN32 = WIN32_ERROR.ERROR_ALREADY_WIN32;
pub const ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE = WIN32_ERROR.ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE;
pub const ERROR_NO_YIELD_PERFORMED = WIN32_ERROR.ERROR_NO_YIELD_PERFORMED;
pub const ERROR_TIMER_RESUME_IGNORED = WIN32_ERROR.ERROR_TIMER_RESUME_IGNORED;
pub const ERROR_ARBITRATION_UNHANDLED = WIN32_ERROR.ERROR_ARBITRATION_UNHANDLED;
pub const ERROR_CARDBUS_NOT_SUPPORTED = WIN32_ERROR.ERROR_CARDBUS_NOT_SUPPORTED;
pub const ERROR_MP_PROCESSOR_MISMATCH = WIN32_ERROR.ERROR_MP_PROCESSOR_MISMATCH;
pub const ERROR_HIBERNATED = WIN32_ERROR.ERROR_HIBERNATED;
pub const ERROR_RESUME_HIBERNATION = WIN32_ERROR.ERROR_RESUME_HIBERNATION;
pub const ERROR_FIRMWARE_UPDATED = WIN32_ERROR.ERROR_FIRMWARE_UPDATED;
pub const ERROR_DRIVERS_LEAKING_LOCKED_PAGES = WIN32_ERROR.ERROR_DRIVERS_LEAKING_LOCKED_PAGES;
pub const ERROR_WAKE_SYSTEM = WIN32_ERROR.ERROR_WAKE_SYSTEM;
pub const ERROR_WAIT_1 = WIN32_ERROR.ERROR_WAIT_1;
pub const ERROR_WAIT_2 = WIN32_ERROR.ERROR_WAIT_2;
pub const ERROR_WAIT_3 = WIN32_ERROR.ERROR_WAIT_3;
pub const ERROR_WAIT_63 = WIN32_ERROR.ERROR_WAIT_63;
pub const ERROR_ABANDONED_WAIT_0 = WIN32_ERROR.ERROR_ABANDONED_WAIT_0;
pub const ERROR_ABANDONED_WAIT_63 = WIN32_ERROR.ERROR_ABANDONED_WAIT_63;
pub const ERROR_USER_APC = WIN32_ERROR.ERROR_USER_APC;
pub const ERROR_KERNEL_APC = WIN32_ERROR.ERROR_KERNEL_APC;
pub const ERROR_ALERTED = WIN32_ERROR.ERROR_ALERTED;
pub const ERROR_ELEVATION_REQUIRED = WIN32_ERROR.ERROR_ELEVATION_REQUIRED;
pub const ERROR_REPARSE = WIN32_ERROR.ERROR_REPARSE;
pub const ERROR_OPLOCK_BREAK_IN_PROGRESS = WIN32_ERROR.ERROR_OPLOCK_BREAK_IN_PROGRESS;
pub const ERROR_VOLUME_MOUNTED = WIN32_ERROR.ERROR_VOLUME_MOUNTED;
pub const ERROR_RXACT_COMMITTED = WIN32_ERROR.ERROR_RXACT_COMMITTED;
pub const ERROR_NOTIFY_CLEANUP = WIN32_ERROR.ERROR_NOTIFY_CLEANUP;
pub const ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED = WIN32_ERROR.ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED;
pub const ERROR_PAGE_FAULT_TRANSITION = WIN32_ERROR.ERROR_PAGE_FAULT_TRANSITION;
pub const ERROR_PAGE_FAULT_DEMAND_ZERO = WIN32_ERROR.ERROR_PAGE_FAULT_DEMAND_ZERO;
pub const ERROR_PAGE_FAULT_COPY_ON_WRITE = WIN32_ERROR.ERROR_PAGE_FAULT_COPY_ON_WRITE;
pub const ERROR_PAGE_FAULT_GUARD_PAGE = WIN32_ERROR.ERROR_PAGE_FAULT_GUARD_PAGE;
pub const ERROR_PAGE_FAULT_PAGING_FILE = WIN32_ERROR.ERROR_PAGE_FAULT_PAGING_FILE;
pub const ERROR_CACHE_PAGE_LOCKED = WIN32_ERROR.ERROR_CACHE_PAGE_LOCKED;
pub const ERROR_CRASH_DUMP = WIN32_ERROR.ERROR_CRASH_DUMP;
pub const ERROR_BUFFER_ALL_ZEROS = WIN32_ERROR.ERROR_BUFFER_ALL_ZEROS;
pub const ERROR_REPARSE_OBJECT = WIN32_ERROR.ERROR_REPARSE_OBJECT;
pub const ERROR_RESOURCE_REQUIREMENTS_CHANGED = WIN32_ERROR.ERROR_RESOURCE_REQUIREMENTS_CHANGED;
pub const ERROR_TRANSLATION_COMPLETE = WIN32_ERROR.ERROR_TRANSLATION_COMPLETE;
pub const ERROR_NOTHING_TO_TERMINATE = WIN32_ERROR.ERROR_NOTHING_TO_TERMINATE;
pub const ERROR_PROCESS_NOT_IN_JOB = WIN32_ERROR.ERROR_PROCESS_NOT_IN_JOB;
pub const ERROR_PROCESS_IN_JOB = WIN32_ERROR.ERROR_PROCESS_IN_JOB;
pub const ERROR_VOLSNAP_HIBERNATE_READY = WIN32_ERROR.ERROR_VOLSNAP_HIBERNATE_READY;
pub const ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY = WIN32_ERROR.ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY;
pub const ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED = WIN32_ERROR.ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED;
pub const ERROR_INTERRUPT_STILL_CONNECTED = WIN32_ERROR.ERROR_INTERRUPT_STILL_CONNECTED;
pub const ERROR_WAIT_FOR_OPLOCK = WIN32_ERROR.ERROR_WAIT_FOR_OPLOCK;
pub const ERROR_DBG_EXCEPTION_HANDLED = WIN32_ERROR.ERROR_DBG_EXCEPTION_HANDLED;
pub const ERROR_DBG_CONTINUE = WIN32_ERROR.ERROR_DBG_CONTINUE;
pub const ERROR_CALLBACK_POP_STACK = WIN32_ERROR.ERROR_CALLBACK_POP_STACK;
pub const ERROR_COMPRESSION_DISABLED = WIN32_ERROR.ERROR_COMPRESSION_DISABLED;
pub const ERROR_CANTFETCHBACKWARDS = WIN32_ERROR.ERROR_CANTFETCHBACKWARDS;
pub const ERROR_CANTSCROLLBACKWARDS = WIN32_ERROR.ERROR_CANTSCROLLBACKWARDS;
pub const ERROR_ROWSNOTRELEASED = WIN32_ERROR.ERROR_ROWSNOTRELEASED;
pub const ERROR_BAD_ACCESSOR_FLAGS = WIN32_ERROR.ERROR_BAD_ACCESSOR_FLAGS;
pub const ERROR_ERRORS_ENCOUNTERED = WIN32_ERROR.ERROR_ERRORS_ENCOUNTERED;
pub const ERROR_NOT_CAPABLE = WIN32_ERROR.ERROR_NOT_CAPABLE;
pub const ERROR_REQUEST_OUT_OF_SEQUENCE = WIN32_ERROR.ERROR_REQUEST_OUT_OF_SEQUENCE;
pub const ERROR_VERSION_PARSE_ERROR = WIN32_ERROR.ERROR_VERSION_PARSE_ERROR;
pub const ERROR_BADSTARTPOSITION = WIN32_ERROR.ERROR_BADSTARTPOSITION;
pub const ERROR_MEMORY_HARDWARE = WIN32_ERROR.ERROR_MEMORY_HARDWARE;
pub const ERROR_DISK_REPAIR_DISABLED = WIN32_ERROR.ERROR_DISK_REPAIR_DISABLED;
pub const ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE = WIN32_ERROR.ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE;
pub const ERROR_SYSTEM_POWERSTATE_TRANSITION = WIN32_ERROR.ERROR_SYSTEM_POWERSTATE_TRANSITION;
pub const ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION = WIN32_ERROR.ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION;
pub const ERROR_MCA_EXCEPTION = WIN32_ERROR.ERROR_MCA_EXCEPTION;
pub const ERROR_ACCESS_AUDIT_BY_POLICY = WIN32_ERROR.ERROR_ACCESS_AUDIT_BY_POLICY;
pub const ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY = WIN32_ERROR.ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY;
pub const ERROR_ABANDON_HIBERFILE = WIN32_ERROR.ERROR_ABANDON_HIBERFILE;
pub const ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED = WIN32_ERROR.ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED;
pub const ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR = WIN32_ERROR.ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR;
pub const ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR = WIN32_ERROR.ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR;
pub const ERROR_BAD_MCFG_TABLE = WIN32_ERROR.ERROR_BAD_MCFG_TABLE;
pub const ERROR_DISK_REPAIR_REDIRECTED = WIN32_ERROR.ERROR_DISK_REPAIR_REDIRECTED;
pub const ERROR_DISK_REPAIR_UNSUCCESSFUL = WIN32_ERROR.ERROR_DISK_REPAIR_UNSUCCESSFUL;
pub const ERROR_CORRUPT_LOG_OVERFULL = WIN32_ERROR.ERROR_CORRUPT_LOG_OVERFULL;
pub const ERROR_CORRUPT_LOG_CORRUPTED = WIN32_ERROR.ERROR_CORRUPT_LOG_CORRUPTED;
pub const ERROR_CORRUPT_LOG_UNAVAILABLE = WIN32_ERROR.ERROR_CORRUPT_LOG_UNAVAILABLE;
pub const ERROR_CORRUPT_LOG_DELETED_FULL = WIN32_ERROR.ERROR_CORRUPT_LOG_DELETED_FULL;
pub const ERROR_CORRUPT_LOG_CLEARED = WIN32_ERROR.ERROR_CORRUPT_LOG_CLEARED;
pub const ERROR_ORPHAN_NAME_EXHAUSTED = WIN32_ERROR.ERROR_ORPHAN_NAME_EXHAUSTED;
pub const ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE = WIN32_ERROR.ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE;
pub const ERROR_CANNOT_GRANT_REQUESTED_OPLOCK = WIN32_ERROR.ERROR_CANNOT_GRANT_REQUESTED_OPLOCK;
pub const ERROR_CANNOT_BREAK_OPLOCK = WIN32_ERROR.ERROR_CANNOT_BREAK_OPLOCK;
pub const ERROR_OPLOCK_HANDLE_CLOSED = WIN32_ERROR.ERROR_OPLOCK_HANDLE_CLOSED;
pub const ERROR_NO_ACE_CONDITION = WIN32_ERROR.ERROR_NO_ACE_CONDITION;
pub const ERROR_INVALID_ACE_CONDITION = WIN32_ERROR.ERROR_INVALID_ACE_CONDITION;
pub const ERROR_FILE_HANDLE_REVOKED = WIN32_ERROR.ERROR_FILE_HANDLE_REVOKED;
pub const ERROR_IMAGE_AT_DIFFERENT_BASE = WIN32_ERROR.ERROR_IMAGE_AT_DIFFERENT_BASE;
pub const ERROR_ENCRYPTED_IO_NOT_POSSIBLE = WIN32_ERROR.ERROR_ENCRYPTED_IO_NOT_POSSIBLE;
pub const ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS = WIN32_ERROR.ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS;
pub const ERROR_QUOTA_ACTIVITY = WIN32_ERROR.ERROR_QUOTA_ACTIVITY;
pub const ERROR_HANDLE_REVOKED = WIN32_ERROR.ERROR_HANDLE_REVOKED;
pub const ERROR_CALLBACK_INVOKE_INLINE = WIN32_ERROR.ERROR_CALLBACK_INVOKE_INLINE;
pub const ERROR_CPU_SET_INVALID = WIN32_ERROR.ERROR_CPU_SET_INVALID;
pub const ERROR_ENCLAVE_NOT_TERMINATED = WIN32_ERROR.ERROR_ENCLAVE_NOT_TERMINATED;
pub const ERROR_ENCLAVE_VIOLATION = WIN32_ERROR.ERROR_ENCLAVE_VIOLATION;
pub const ERROR_SERVER_TRANSPORT_CONFLICT = WIN32_ERROR.ERROR_SERVER_TRANSPORT_CONFLICT;
pub const ERROR_CERTIFICATE_VALIDATION_PREFERENCE_CONFLICT = WIN32_ERROR.ERROR_CERTIFICATE_VALIDATION_PREFERENCE_CONFLICT;
pub const ERROR_FT_READ_FROM_COPY_FAILURE = WIN32_ERROR.ERROR_FT_READ_FROM_COPY_FAILURE;
pub const ERROR_SECTION_DIRECT_MAP_ONLY = WIN32_ERROR.ERROR_SECTION_DIRECT_MAP_ONLY;
pub const ERROR_EA_ACCESS_DENIED = WIN32_ERROR.ERROR_EA_ACCESS_DENIED;
pub const ERROR_OPERATION_ABORTED = WIN32_ERROR.ERROR_OPERATION_ABORTED;
pub const ERROR_IO_INCOMPLETE = WIN32_ERROR.ERROR_IO_INCOMPLETE;
pub const ERROR_IO_PENDING = WIN32_ERROR.ERROR_IO_PENDING;
pub const ERROR_NOACCESS = WIN32_ERROR.ERROR_NOACCESS;
pub const ERROR_SWAPERROR = WIN32_ERROR.ERROR_SWAPERROR;
pub const ERROR_STACK_OVERFLOW = WIN32_ERROR.ERROR_STACK_OVERFLOW;
pub const ERROR_INVALID_MESSAGE = WIN32_ERROR.ERROR_INVALID_MESSAGE;
pub const ERROR_CAN_NOT_COMPLETE = WIN32_ERROR.ERROR_CAN_NOT_COMPLETE;
pub const ERROR_INVALID_FLAGS = WIN32_ERROR.ERROR_INVALID_FLAGS;
pub const ERROR_UNRECOGNIZED_VOLUME = WIN32_ERROR.ERROR_UNRECOGNIZED_VOLUME;
pub const ERROR_FILE_INVALID = WIN32_ERROR.ERROR_FILE_INVALID;
pub const ERROR_FULLSCREEN_MODE = WIN32_ERROR.ERROR_FULLSCREEN_MODE;
pub const ERROR_NO_TOKEN = WIN32_ERROR.ERROR_NO_TOKEN;
pub const ERROR_BADDB = WIN32_ERROR.ERROR_BADDB;
pub const ERROR_BADKEY = WIN32_ERROR.ERROR_BADKEY;
pub const ERROR_CANTOPEN = WIN32_ERROR.ERROR_CANTOPEN;
pub const ERROR_CANTREAD = WIN32_ERROR.ERROR_CANTREAD;
pub const ERROR_CANTWRITE = WIN32_ERROR.ERROR_CANTWRITE;
pub const ERROR_REGISTRY_RECOVERED = WIN32_ERROR.ERROR_REGISTRY_RECOVERED;
pub const ERROR_REGISTRY_CORRUPT = WIN32_ERROR.ERROR_REGISTRY_CORRUPT;
pub const ERROR_REGISTRY_IO_FAILED = WIN32_ERROR.ERROR_REGISTRY_IO_FAILED;
pub const ERROR_NOT_REGISTRY_FILE = WIN32_ERROR.ERROR_NOT_REGISTRY_FILE;
pub const ERROR_KEY_DELETED = WIN32_ERROR.ERROR_KEY_DELETED;
pub const ERROR_NO_LOG_SPACE = WIN32_ERROR.ERROR_NO_LOG_SPACE;
pub const ERROR_KEY_HAS_CHILDREN = WIN32_ERROR.ERROR_KEY_HAS_CHILDREN;
pub const ERROR_CHILD_MUST_BE_VOLATILE = WIN32_ERROR.ERROR_CHILD_MUST_BE_VOLATILE;
pub const ERROR_NOTIFY_ENUM_DIR = WIN32_ERROR.ERROR_NOTIFY_ENUM_DIR;
pub const ERROR_DEPENDENT_SERVICES_RUNNING = WIN32_ERROR.ERROR_DEPENDENT_SERVICES_RUNNING;
pub const ERROR_INVALID_SERVICE_CONTROL = WIN32_ERROR.ERROR_INVALID_SERVICE_CONTROL;
pub const ERROR_SERVICE_REQUEST_TIMEOUT = WIN32_ERROR.ERROR_SERVICE_REQUEST_TIMEOUT;
pub const ERROR_SERVICE_NO_THREAD = WIN32_ERROR.ERROR_SERVICE_NO_THREAD;
pub const ERROR_SERVICE_DATABASE_LOCKED = WIN32_ERROR.ERROR_SERVICE_DATABASE_LOCKED;
pub const ERROR_SERVICE_ALREADY_RUNNING = WIN32_ERROR.ERROR_SERVICE_ALREADY_RUNNING;
pub const ERROR_INVALID_SERVICE_ACCOUNT = WIN32_ERROR.ERROR_INVALID_SERVICE_ACCOUNT;
pub const ERROR_SERVICE_DISABLED = WIN32_ERROR.ERROR_SERVICE_DISABLED;
pub const ERROR_CIRCULAR_DEPENDENCY = WIN32_ERROR.ERROR_CIRCULAR_DEPENDENCY;
pub const ERROR_SERVICE_DOES_NOT_EXIST = WIN32_ERROR.ERROR_SERVICE_DOES_NOT_EXIST;
pub const ERROR_SERVICE_CANNOT_ACCEPT_CTRL = WIN32_ERROR.ERROR_SERVICE_CANNOT_ACCEPT_CTRL;
pub const ERROR_SERVICE_NOT_ACTIVE = WIN32_ERROR.ERROR_SERVICE_NOT_ACTIVE;
pub const ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = WIN32_ERROR.ERROR_FAILED_SERVICE_CONTROLLER_CONNECT;
pub const ERROR_EXCEPTION_IN_SERVICE = WIN32_ERROR.ERROR_EXCEPTION_IN_SERVICE;
pub const ERROR_DATABASE_DOES_NOT_EXIST = WIN32_ERROR.ERROR_DATABASE_DOES_NOT_EXIST;
pub const ERROR_SERVICE_SPECIFIC_ERROR = WIN32_ERROR.ERROR_SERVICE_SPECIFIC_ERROR;
pub const ERROR_PROCESS_ABORTED = WIN32_ERROR.ERROR_PROCESS_ABORTED;
pub const ERROR_SERVICE_DEPENDENCY_FAIL = WIN32_ERROR.ERROR_SERVICE_DEPENDENCY_FAIL;
pub const ERROR_SERVICE_LOGON_FAILED = WIN32_ERROR.ERROR_SERVICE_LOGON_FAILED;
pub const ERROR_SERVICE_START_HANG = WIN32_ERROR.ERROR_SERVICE_START_HANG;
pub const ERROR_INVALID_SERVICE_LOCK = WIN32_ERROR.ERROR_INVALID_SERVICE_LOCK;
pub const ERROR_SERVICE_MARKED_FOR_DELETE = WIN32_ERROR.ERROR_SERVICE_MARKED_FOR_DELETE;
pub const ERROR_SERVICE_EXISTS = WIN32_ERROR.ERROR_SERVICE_EXISTS;
pub const ERROR_ALREADY_RUNNING_LKG = WIN32_ERROR.ERROR_ALREADY_RUNNING_LKG;
pub const ERROR_SERVICE_DEPENDENCY_DELETED = WIN32_ERROR.ERROR_SERVICE_DEPENDENCY_DELETED;
pub const ERROR_BOOT_ALREADY_ACCEPTED = WIN32_ERROR.ERROR_BOOT_ALREADY_ACCEPTED;
pub const ERROR_SERVICE_NEVER_STARTED = WIN32_ERROR.ERROR_SERVICE_NEVER_STARTED;
pub const ERROR_DUPLICATE_SERVICE_NAME = WIN32_ERROR.ERROR_DUPLICATE_SERVICE_NAME;
pub const ERROR_DIFFERENT_SERVICE_ACCOUNT = WIN32_ERROR.ERROR_DIFFERENT_SERVICE_ACCOUNT;
pub const ERROR_CANNOT_DETECT_DRIVER_FAILURE = WIN32_ERROR.ERROR_CANNOT_DETECT_DRIVER_FAILURE;
pub const ERROR_CANNOT_DETECT_PROCESS_ABORT = WIN32_ERROR.ERROR_CANNOT_DETECT_PROCESS_ABORT;
pub const ERROR_NO_RECOVERY_PROGRAM = WIN32_ERROR.ERROR_NO_RECOVERY_PROGRAM;
pub const ERROR_SERVICE_NOT_IN_EXE = WIN32_ERROR.ERROR_SERVICE_NOT_IN_EXE;
pub const ERROR_NOT_SAFEBOOT_SERVICE = WIN32_ERROR.ERROR_NOT_SAFEBOOT_SERVICE;
pub const ERROR_END_OF_MEDIA = WIN32_ERROR.ERROR_END_OF_MEDIA;
pub const ERROR_FILEMARK_DETECTED = WIN32_ERROR.ERROR_FILEMARK_DETECTED;
pub const ERROR_BEGINNING_OF_MEDIA = WIN32_ERROR.ERROR_BEGINNING_OF_MEDIA;
pub const ERROR_SETMARK_DETECTED = WIN32_ERROR.ERROR_SETMARK_DETECTED;
pub const ERROR_NO_DATA_DETECTED = WIN32_ERROR.ERROR_NO_DATA_DETECTED;
pub const ERROR_PARTITION_FAILURE = WIN32_ERROR.ERROR_PARTITION_FAILURE;
pub const ERROR_INVALID_BLOCK_LENGTH = WIN32_ERROR.ERROR_INVALID_BLOCK_LENGTH;
pub const ERROR_DEVICE_NOT_PARTITIONED = WIN32_ERROR.ERROR_DEVICE_NOT_PARTITIONED;
pub const ERROR_UNABLE_TO_LOCK_MEDIA = WIN32_ERROR.ERROR_UNABLE_TO_LOCK_MEDIA;
pub const ERROR_UNABLE_TO_UNLOAD_MEDIA = WIN32_ERROR.ERROR_UNABLE_TO_UNLOAD_MEDIA;
pub const ERROR_MEDIA_CHANGED = WIN32_ERROR.ERROR_MEDIA_CHANGED;
pub const ERROR_BUS_RESET = WIN32_ERROR.ERROR_BUS_RESET;
pub const ERROR_NO_MEDIA_IN_DRIVE = WIN32_ERROR.ERROR_NO_MEDIA_IN_DRIVE;
pub const ERROR_NO_UNICODE_TRANSLATION = WIN32_ERROR.ERROR_NO_UNICODE_TRANSLATION;
pub const ERROR_DLL_INIT_FAILED = WIN32_ERROR.ERROR_DLL_INIT_FAILED;
pub const ERROR_SHUTDOWN_IN_PROGRESS = WIN32_ERROR.ERROR_SHUTDOWN_IN_PROGRESS;
pub const ERROR_NO_SHUTDOWN_IN_PROGRESS = WIN32_ERROR.ERROR_NO_SHUTDOWN_IN_PROGRESS;
pub const ERROR_IO_DEVICE = WIN32_ERROR.ERROR_IO_DEVICE;
pub const ERROR_SERIAL_NO_DEVICE = WIN32_ERROR.ERROR_SERIAL_NO_DEVICE;
pub const ERROR_IRQ_BUSY = WIN32_ERROR.ERROR_IRQ_BUSY;
pub const ERROR_MORE_WRITES = WIN32_ERROR.ERROR_MORE_WRITES;
pub const ERROR_COUNTER_TIMEOUT = WIN32_ERROR.ERROR_COUNTER_TIMEOUT;
pub const ERROR_FLOPPY_ID_MARK_NOT_FOUND = WIN32_ERROR.ERROR_FLOPPY_ID_MARK_NOT_FOUND;
pub const ERROR_FLOPPY_WRONG_CYLINDER = WIN32_ERROR.ERROR_FLOPPY_WRONG_CYLINDER;
pub const ERROR_FLOPPY_UNKNOWN_ERROR = WIN32_ERROR.ERROR_FLOPPY_UNKNOWN_ERROR;
pub const ERROR_FLOPPY_BAD_REGISTERS = WIN32_ERROR.ERROR_FLOPPY_BAD_REGISTERS;
pub const ERROR_DISK_RECALIBRATE_FAILED = WIN32_ERROR.ERROR_DISK_RECALIBRATE_FAILED;
pub const ERROR_DISK_OPERATION_FAILED = WIN32_ERROR.ERROR_DISK_OPERATION_FAILED;
pub const ERROR_DISK_RESET_FAILED = WIN32_ERROR.ERROR_DISK_RESET_FAILED;
pub const ERROR_EOM_OVERFLOW = WIN32_ERROR.ERROR_EOM_OVERFLOW;
pub const ERROR_NOT_ENOUGH_SERVER_MEMORY = WIN32_ERROR.ERROR_NOT_ENOUGH_SERVER_MEMORY;
pub const ERROR_POSSIBLE_DEADLOCK = WIN32_ERROR.ERROR_POSSIBLE_DEADLOCK;
pub const ERROR_MAPPED_ALIGNMENT = WIN32_ERROR.ERROR_MAPPED_ALIGNMENT;
pub const ERROR_SET_POWER_STATE_VETOED = WIN32_ERROR.ERROR_SET_POWER_STATE_VETOED;
pub const ERROR_SET_POWER_STATE_FAILED = WIN32_ERROR.ERROR_SET_POWER_STATE_FAILED;
pub const ERROR_TOO_MANY_LINKS = WIN32_ERROR.ERROR_TOO_MANY_LINKS;
pub const ERROR_OLD_WIN_VERSION = WIN32_ERROR.ERROR_OLD_WIN_VERSION;
pub const ERROR_APP_WRONG_OS = WIN32_ERROR.ERROR_APP_WRONG_OS;
pub const ERROR_SINGLE_INSTANCE_APP = WIN32_ERROR.ERROR_SINGLE_INSTANCE_APP;
pub const ERROR_RMODE_APP = WIN32_ERROR.ERROR_RMODE_APP;
pub const ERROR_INVALID_DLL = WIN32_ERROR.ERROR_INVALID_DLL;
pub const ERROR_NO_ASSOCIATION = WIN32_ERROR.ERROR_NO_ASSOCIATION;
pub const ERROR_DDE_FAIL = WIN32_ERROR.ERROR_DDE_FAIL;
pub const ERROR_DLL_NOT_FOUND = WIN32_ERROR.ERROR_DLL_NOT_FOUND;
pub const ERROR_NO_MORE_USER_HANDLES = WIN32_ERROR.ERROR_NO_MORE_USER_HANDLES;
pub const ERROR_MESSAGE_SYNC_ONLY = WIN32_ERROR.ERROR_MESSAGE_SYNC_ONLY;
pub const ERROR_SOURCE_ELEMENT_EMPTY = WIN32_ERROR.ERROR_SOURCE_ELEMENT_EMPTY;
pub const ERROR_DESTINATION_ELEMENT_FULL = WIN32_ERROR.ERROR_DESTINATION_ELEMENT_FULL;
pub const ERROR_ILLEGAL_ELEMENT_ADDRESS = WIN32_ERROR.ERROR_ILLEGAL_ELEMENT_ADDRESS;
pub const ERROR_MAGAZINE_NOT_PRESENT = WIN32_ERROR.ERROR_MAGAZINE_NOT_PRESENT;
pub const ERROR_DEVICE_REINITIALIZATION_NEEDED = WIN32_ERROR.ERROR_DEVICE_REINITIALIZATION_NEEDED;
pub const ERROR_DEVICE_REQUIRES_CLEANING = WIN32_ERROR.ERROR_DEVICE_REQUIRES_CLEANING;
pub const ERROR_DEVICE_DOOR_OPEN = WIN32_ERROR.ERROR_DEVICE_DOOR_OPEN;
pub const ERROR_DEVICE_NOT_CONNECTED = WIN32_ERROR.ERROR_DEVICE_NOT_CONNECTED;
pub const ERROR_NOT_FOUND = WIN32_ERROR.ERROR_NOT_FOUND;
pub const ERROR_NO_MATCH = WIN32_ERROR.ERROR_NO_MATCH;
pub const ERROR_SET_NOT_FOUND = WIN32_ERROR.ERROR_SET_NOT_FOUND;
pub const ERROR_POINT_NOT_FOUND = WIN32_ERROR.ERROR_POINT_NOT_FOUND;
pub const ERROR_NO_TRACKING_SERVICE = WIN32_ERROR.ERROR_NO_TRACKING_SERVICE;
pub const ERROR_NO_VOLUME_ID = WIN32_ERROR.ERROR_NO_VOLUME_ID;
pub const ERROR_UNABLE_TO_REMOVE_REPLACED = WIN32_ERROR.ERROR_UNABLE_TO_REMOVE_REPLACED;
pub const ERROR_UNABLE_TO_MOVE_REPLACEMENT = WIN32_ERROR.ERROR_UNABLE_TO_MOVE_REPLACEMENT;
pub const ERROR_UNABLE_TO_MOVE_REPLACEMENT_2 = WIN32_ERROR.ERROR_UNABLE_TO_MOVE_REPLACEMENT_2;
pub const ERROR_JOURNAL_DELETE_IN_PROGRESS = WIN32_ERROR.ERROR_JOURNAL_DELETE_IN_PROGRESS;
pub const ERROR_JOURNAL_NOT_ACTIVE = WIN32_ERROR.ERROR_JOURNAL_NOT_ACTIVE;
pub const ERROR_POTENTIAL_FILE_FOUND = WIN32_ERROR.ERROR_POTENTIAL_FILE_FOUND;
pub const ERROR_JOURNAL_ENTRY_DELETED = WIN32_ERROR.ERROR_JOURNAL_ENTRY_DELETED;
pub const ERROR_PARTITION_TERMINATING = WIN32_ERROR.ERROR_PARTITION_TERMINATING;
pub const ERROR_SHUTDOWN_IS_SCHEDULED = WIN32_ERROR.ERROR_SHUTDOWN_IS_SCHEDULED;
pub const ERROR_SHUTDOWN_USERS_LOGGED_ON = WIN32_ERROR.ERROR_SHUTDOWN_USERS_LOGGED_ON;
pub const ERROR_SHUTDOWN_DISKS_NOT_IN_MAINTENANCE_MODE = WIN32_ERROR.ERROR_SHUTDOWN_DISKS_NOT_IN_MAINTENANCE_MODE;
pub const ERROR_BAD_DEVICE = WIN32_ERROR.ERROR_BAD_DEVICE;
pub const ERROR_CONNECTION_UNAVAIL = WIN32_ERROR.ERROR_CONNECTION_UNAVAIL;
pub const ERROR_DEVICE_ALREADY_REMEMBERED = WIN32_ERROR.ERROR_DEVICE_ALREADY_REMEMBERED;
pub const ERROR_NO_NET_OR_BAD_PATH = WIN32_ERROR.ERROR_NO_NET_OR_BAD_PATH;
pub const ERROR_BAD_PROVIDER = WIN32_ERROR.ERROR_BAD_PROVIDER;
pub const ERROR_CANNOT_OPEN_PROFILE = WIN32_ERROR.ERROR_CANNOT_OPEN_PROFILE;
pub const ERROR_BAD_PROFILE = WIN32_ERROR.ERROR_BAD_PROFILE;
pub const ERROR_NOT_CONTAINER = WIN32_ERROR.ERROR_NOT_CONTAINER;
pub const ERROR_EXTENDED_ERROR = WIN32_ERROR.ERROR_EXTENDED_ERROR;
pub const ERROR_INVALID_GROUPNAME = WIN32_ERROR.ERROR_INVALID_GROUPNAME;
pub const ERROR_INVALID_COMPUTERNAME = WIN32_ERROR.ERROR_INVALID_COMPUTERNAME;
pub const ERROR_INVALID_EVENTNAME = WIN32_ERROR.ERROR_INVALID_EVENTNAME;
pub const ERROR_INVALID_DOMAINNAME = WIN32_ERROR.ERROR_INVALID_DOMAINNAME;
pub const ERROR_INVALID_SERVICENAME = WIN32_ERROR.ERROR_INVALID_SERVICENAME;
pub const ERROR_INVALID_NETNAME = WIN32_ERROR.ERROR_INVALID_NETNAME;
pub const ERROR_INVALID_SHARENAME = WIN32_ERROR.ERROR_INVALID_SHARENAME;
pub const ERROR_INVALID_PASSWORDNAME = WIN32_ERROR.ERROR_INVALID_PASSWORDNAME;
pub const ERROR_INVALID_MESSAGENAME = WIN32_ERROR.ERROR_INVALID_MESSAGENAME;
pub const ERROR_INVALID_MESSAGEDEST = WIN32_ERROR.ERROR_INVALID_MESSAGEDEST;
pub const ERROR_SESSION_CREDENTIAL_CONFLICT = WIN32_ERROR.ERROR_SESSION_CREDENTIAL_CONFLICT;
pub const ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_REMOTE_SESSION_LIMIT_EXCEEDED;
pub const ERROR_DUP_DOMAINNAME = WIN32_ERROR.ERROR_DUP_DOMAINNAME;
pub const ERROR_NO_NETWORK = WIN32_ERROR.ERROR_NO_NETWORK;
pub const ERROR_CANCELLED = WIN32_ERROR.ERROR_CANCELLED;
pub const ERROR_USER_MAPPED_FILE = WIN32_ERROR.ERROR_USER_MAPPED_FILE;
pub const ERROR_CONNECTION_REFUSED = WIN32_ERROR.ERROR_CONNECTION_REFUSED;
pub const ERROR_GRACEFUL_DISCONNECT = WIN32_ERROR.ERROR_GRACEFUL_DISCONNECT;
pub const ERROR_ADDRESS_ALREADY_ASSOCIATED = WIN32_ERROR.ERROR_ADDRESS_ALREADY_ASSOCIATED;
pub const ERROR_ADDRESS_NOT_ASSOCIATED = WIN32_ERROR.ERROR_ADDRESS_NOT_ASSOCIATED;
pub const ERROR_CONNECTION_INVALID = WIN32_ERROR.ERROR_CONNECTION_INVALID;
pub const ERROR_CONNECTION_ACTIVE = WIN32_ERROR.ERROR_CONNECTION_ACTIVE;
pub const ERROR_NETWORK_UNREACHABLE = WIN32_ERROR.ERROR_NETWORK_UNREACHABLE;
pub const ERROR_HOST_UNREACHABLE = WIN32_ERROR.ERROR_HOST_UNREACHABLE;
pub const ERROR_PROTOCOL_UNREACHABLE = WIN32_ERROR.ERROR_PROTOCOL_UNREACHABLE;
pub const ERROR_PORT_UNREACHABLE = WIN32_ERROR.ERROR_PORT_UNREACHABLE;
pub const ERROR_REQUEST_ABORTED = WIN32_ERROR.ERROR_REQUEST_ABORTED;
pub const ERROR_CONNECTION_ABORTED = WIN32_ERROR.ERROR_CONNECTION_ABORTED;
pub const ERROR_RETRY = WIN32_ERROR.ERROR_RETRY;
pub const ERROR_CONNECTION_COUNT_LIMIT = WIN32_ERROR.ERROR_CONNECTION_COUNT_LIMIT;
pub const ERROR_LOGIN_TIME_RESTRICTION = WIN32_ERROR.ERROR_LOGIN_TIME_RESTRICTION;
pub const ERROR_LOGIN_WKSTA_RESTRICTION = WIN32_ERROR.ERROR_LOGIN_WKSTA_RESTRICTION;
pub const ERROR_INCORRECT_ADDRESS = WIN32_ERROR.ERROR_INCORRECT_ADDRESS;
pub const ERROR_ALREADY_REGISTERED = WIN32_ERROR.ERROR_ALREADY_REGISTERED;
pub const ERROR_SERVICE_NOT_FOUND = WIN32_ERROR.ERROR_SERVICE_NOT_FOUND;
pub const ERROR_NOT_AUTHENTICATED = WIN32_ERROR.ERROR_NOT_AUTHENTICATED;
pub const ERROR_NOT_LOGGED_ON = WIN32_ERROR.ERROR_NOT_LOGGED_ON;
pub const ERROR_CONTINUE = WIN32_ERROR.ERROR_CONTINUE;
pub const ERROR_ALREADY_INITIALIZED = WIN32_ERROR.ERROR_ALREADY_INITIALIZED;
pub const ERROR_NO_MORE_DEVICES = WIN32_ERROR.ERROR_NO_MORE_DEVICES;
pub const ERROR_NO_SUCH_SITE = WIN32_ERROR.ERROR_NO_SUCH_SITE;
pub const ERROR_DOMAIN_CONTROLLER_EXISTS = WIN32_ERROR.ERROR_DOMAIN_CONTROLLER_EXISTS;
pub const ERROR_ONLY_IF_CONNECTED = WIN32_ERROR.ERROR_ONLY_IF_CONNECTED;
pub const ERROR_OVERRIDE_NOCHANGES = WIN32_ERROR.ERROR_OVERRIDE_NOCHANGES;
pub const ERROR_BAD_USER_PROFILE = WIN32_ERROR.ERROR_BAD_USER_PROFILE;
pub const ERROR_NOT_SUPPORTED_ON_SBS = WIN32_ERROR.ERROR_NOT_SUPPORTED_ON_SBS;
pub const ERROR_SERVER_SHUTDOWN_IN_PROGRESS = WIN32_ERROR.ERROR_SERVER_SHUTDOWN_IN_PROGRESS;
pub const ERROR_HOST_DOWN = WIN32_ERROR.ERROR_HOST_DOWN;
pub const ERROR_NON_ACCOUNT_SID = WIN32_ERROR.ERROR_NON_ACCOUNT_SID;
pub const ERROR_NON_DOMAIN_SID = WIN32_ERROR.ERROR_NON_DOMAIN_SID;
pub const ERROR_APPHELP_BLOCK = WIN32_ERROR.ERROR_APPHELP_BLOCK;
pub const ERROR_ACCESS_DISABLED_BY_POLICY = WIN32_ERROR.ERROR_ACCESS_DISABLED_BY_POLICY;
pub const ERROR_REG_NAT_CONSUMPTION = WIN32_ERROR.ERROR_REG_NAT_CONSUMPTION;
pub const ERROR_CSCSHARE_OFFLINE = WIN32_ERROR.ERROR_CSCSHARE_OFFLINE;
pub const ERROR_PKINIT_FAILURE = WIN32_ERROR.ERROR_PKINIT_FAILURE;
pub const ERROR_SMARTCARD_SUBSYSTEM_FAILURE = WIN32_ERROR.ERROR_SMARTCARD_SUBSYSTEM_FAILURE;
pub const ERROR_DOWNGRADE_DETECTED = WIN32_ERROR.ERROR_DOWNGRADE_DETECTED;
pub const ERROR_MACHINE_LOCKED = WIN32_ERROR.ERROR_MACHINE_LOCKED;
pub const ERROR_SMB_GUEST_LOGON_BLOCKED = WIN32_ERROR.ERROR_SMB_GUEST_LOGON_BLOCKED;
pub const ERROR_CALLBACK_SUPPLIED_INVALID_DATA = WIN32_ERROR.ERROR_CALLBACK_SUPPLIED_INVALID_DATA;
pub const ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED = WIN32_ERROR.ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED;
pub const ERROR_DRIVER_BLOCKED = WIN32_ERROR.ERROR_DRIVER_BLOCKED;
pub const ERROR_INVALID_IMPORT_OF_NON_DLL = WIN32_ERROR.ERROR_INVALID_IMPORT_OF_NON_DLL;
pub const ERROR_ACCESS_DISABLED_WEBBLADE = WIN32_ERROR.ERROR_ACCESS_DISABLED_WEBBLADE;
pub const ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER = WIN32_ERROR.ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER;
pub const ERROR_RECOVERY_FAILURE = WIN32_ERROR.ERROR_RECOVERY_FAILURE;
pub const ERROR_ALREADY_FIBER = WIN32_ERROR.ERROR_ALREADY_FIBER;
pub const ERROR_ALREADY_THREAD = WIN32_ERROR.ERROR_ALREADY_THREAD;
pub const ERROR_STACK_BUFFER_OVERRUN = WIN32_ERROR.ERROR_STACK_BUFFER_OVERRUN;
pub const ERROR_PARAMETER_QUOTA_EXCEEDED = WIN32_ERROR.ERROR_PARAMETER_QUOTA_EXCEEDED;
pub const ERROR_DEBUGGER_INACTIVE = WIN32_ERROR.ERROR_DEBUGGER_INACTIVE;
pub const ERROR_DELAY_LOAD_FAILED = WIN32_ERROR.ERROR_DELAY_LOAD_FAILED;
pub const ERROR_VDM_DISALLOWED = WIN32_ERROR.ERROR_VDM_DISALLOWED;
pub const ERROR_UNIDENTIFIED_ERROR = WIN32_ERROR.ERROR_UNIDENTIFIED_ERROR;
pub const ERROR_INVALID_CRUNTIME_PARAMETER = WIN32_ERROR.ERROR_INVALID_CRUNTIME_PARAMETER;
pub const ERROR_BEYOND_VDL = WIN32_ERROR.ERROR_BEYOND_VDL;
pub const ERROR_INCOMPATIBLE_SERVICE_SID_TYPE = WIN32_ERROR.ERROR_INCOMPATIBLE_SERVICE_SID_TYPE;
pub const ERROR_DRIVER_PROCESS_TERMINATED = WIN32_ERROR.ERROR_DRIVER_PROCESS_TERMINATED;
pub const ERROR_IMPLEMENTATION_LIMIT = WIN32_ERROR.ERROR_IMPLEMENTATION_LIMIT;
pub const ERROR_PROCESS_IS_PROTECTED = WIN32_ERROR.ERROR_PROCESS_IS_PROTECTED;
pub const ERROR_SERVICE_NOTIFY_CLIENT_LAGGING = WIN32_ERROR.ERROR_SERVICE_NOTIFY_CLIENT_LAGGING;
pub const ERROR_DISK_QUOTA_EXCEEDED = WIN32_ERROR.ERROR_DISK_QUOTA_EXCEEDED;
pub const ERROR_CONTENT_BLOCKED = WIN32_ERROR.ERROR_CONTENT_BLOCKED;
pub const ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE = WIN32_ERROR.ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE;
pub const ERROR_APP_HANG = WIN32_ERROR.ERROR_APP_HANG;
pub const ERROR_INVALID_LABEL = WIN32_ERROR.ERROR_INVALID_LABEL;
pub const ERROR_NOT_ALL_ASSIGNED = WIN32_ERROR.ERROR_NOT_ALL_ASSIGNED;
pub const ERROR_SOME_NOT_MAPPED = WIN32_ERROR.ERROR_SOME_NOT_MAPPED;
pub const ERROR_NO_QUOTAS_FOR_ACCOUNT = WIN32_ERROR.ERROR_NO_QUOTAS_FOR_ACCOUNT;
pub const ERROR_LOCAL_USER_SESSION_KEY = WIN32_ERROR.ERROR_LOCAL_USER_SESSION_KEY;
pub const ERROR_NULL_LM_PASSWORD = WIN32_ERROR.ERROR_NULL_LM_PASSWORD;
pub const ERROR_UNKNOWN_REVISION = WIN32_ERROR.ERROR_UNKNOWN_REVISION;
pub const ERROR_REVISION_MISMATCH = WIN32_ERROR.ERROR_REVISION_MISMATCH;
pub const ERROR_INVALID_OWNER = WIN32_ERROR.ERROR_INVALID_OWNER;
pub const ERROR_INVALID_PRIMARY_GROUP = WIN32_ERROR.ERROR_INVALID_PRIMARY_GROUP;
pub const ERROR_NO_IMPERSONATION_TOKEN = WIN32_ERROR.ERROR_NO_IMPERSONATION_TOKEN;
pub const ERROR_CANT_DISABLE_MANDATORY = WIN32_ERROR.ERROR_CANT_DISABLE_MANDATORY;
pub const ERROR_NO_LOGON_SERVERS = WIN32_ERROR.ERROR_NO_LOGON_SERVERS;
pub const ERROR_NO_SUCH_LOGON_SESSION = WIN32_ERROR.ERROR_NO_SUCH_LOGON_SESSION;
pub const ERROR_NO_SUCH_PRIVILEGE = WIN32_ERROR.ERROR_NO_SUCH_PRIVILEGE;
pub const ERROR_PRIVILEGE_NOT_HELD = WIN32_ERROR.ERROR_PRIVILEGE_NOT_HELD;
pub const ERROR_INVALID_ACCOUNT_NAME = WIN32_ERROR.ERROR_INVALID_ACCOUNT_NAME;
pub const ERROR_USER_EXISTS = WIN32_ERROR.ERROR_USER_EXISTS;
pub const ERROR_NO_SUCH_USER = WIN32_ERROR.ERROR_NO_SUCH_USER;
pub const ERROR_GROUP_EXISTS = WIN32_ERROR.ERROR_GROUP_EXISTS;
pub const ERROR_NO_SUCH_GROUP = WIN32_ERROR.ERROR_NO_SUCH_GROUP;
pub const ERROR_MEMBER_IN_GROUP = WIN32_ERROR.ERROR_MEMBER_IN_GROUP;
pub const ERROR_MEMBER_NOT_IN_GROUP = WIN32_ERROR.ERROR_MEMBER_NOT_IN_GROUP;
pub const ERROR_LAST_ADMIN = WIN32_ERROR.ERROR_LAST_ADMIN;
pub const ERROR_WRONG_PASSWORD = WIN32_ERROR.ERROR_WRONG_PASSWORD;
pub const ERROR_ILL_FORMED_PASSWORD = WIN32_ERROR.ERROR_ILL_FORMED_PASSWORD;
pub const ERROR_PASSWORD_RESTRICTION = WIN32_ERROR.ERROR_PASSWORD_RESTRICTION;
pub const ERROR_LOGON_FAILURE = WIN32_ERROR.ERROR_LOGON_FAILURE;
pub const ERROR_ACCOUNT_RESTRICTION = WIN32_ERROR.ERROR_ACCOUNT_RESTRICTION;
pub const ERROR_INVALID_LOGON_HOURS = WIN32_ERROR.ERROR_INVALID_LOGON_HOURS;
pub const ERROR_INVALID_WORKSTATION = WIN32_ERROR.ERROR_INVALID_WORKSTATION;
pub const ERROR_PASSWORD_EXPIRED = WIN32_ERROR.ERROR_PASSWORD_EXPIRED;
pub const ERROR_ACCOUNT_DISABLED = WIN32_ERROR.ERROR_ACCOUNT_DISABLED;
pub const ERROR_NONE_MAPPED = WIN32_ERROR.ERROR_NONE_MAPPED;
pub const ERROR_TOO_MANY_LUIDS_REQUESTED = WIN32_ERROR.ERROR_TOO_MANY_LUIDS_REQUESTED;
pub const ERROR_LUIDS_EXHAUSTED = WIN32_ERROR.ERROR_LUIDS_EXHAUSTED;
pub const ERROR_INVALID_SUB_AUTHORITY = WIN32_ERROR.ERROR_INVALID_SUB_AUTHORITY;
pub const ERROR_INVALID_ACL = WIN32_ERROR.ERROR_INVALID_ACL;
pub const ERROR_INVALID_SID = WIN32_ERROR.ERROR_INVALID_SID;
pub const ERROR_INVALID_SECURITY_DESCR = WIN32_ERROR.ERROR_INVALID_SECURITY_DESCR;
pub const ERROR_BAD_INHERITANCE_ACL = WIN32_ERROR.ERROR_BAD_INHERITANCE_ACL;
pub const ERROR_SERVER_DISABLED = WIN32_ERROR.ERROR_SERVER_DISABLED;
pub const ERROR_SERVER_NOT_DISABLED = WIN32_ERROR.ERROR_SERVER_NOT_DISABLED;
pub const ERROR_INVALID_ID_AUTHORITY = WIN32_ERROR.ERROR_INVALID_ID_AUTHORITY;
pub const ERROR_ALLOTTED_SPACE_EXCEEDED = WIN32_ERROR.ERROR_ALLOTTED_SPACE_EXCEEDED;
pub const ERROR_INVALID_GROUP_ATTRIBUTES = WIN32_ERROR.ERROR_INVALID_GROUP_ATTRIBUTES;
pub const ERROR_BAD_IMPERSONATION_LEVEL = WIN32_ERROR.ERROR_BAD_IMPERSONATION_LEVEL;
pub const ERROR_CANT_OPEN_ANONYMOUS = WIN32_ERROR.ERROR_CANT_OPEN_ANONYMOUS;
pub const ERROR_BAD_VALIDATION_CLASS = WIN32_ERROR.ERROR_BAD_VALIDATION_CLASS;
pub const ERROR_BAD_TOKEN_TYPE = WIN32_ERROR.ERROR_BAD_TOKEN_TYPE;
pub const ERROR_NO_SECURITY_ON_OBJECT = WIN32_ERROR.ERROR_NO_SECURITY_ON_OBJECT;
pub const ERROR_CANT_ACCESS_DOMAIN_INFO = WIN32_ERROR.ERROR_CANT_ACCESS_DOMAIN_INFO;
pub const ERROR_INVALID_SERVER_STATE = WIN32_ERROR.ERROR_INVALID_SERVER_STATE;
pub const ERROR_INVALID_DOMAIN_STATE = WIN32_ERROR.ERROR_INVALID_DOMAIN_STATE;
pub const ERROR_INVALID_DOMAIN_ROLE = WIN32_ERROR.ERROR_INVALID_DOMAIN_ROLE;
pub const ERROR_NO_SUCH_DOMAIN = WIN32_ERROR.ERROR_NO_SUCH_DOMAIN;
pub const ERROR_DOMAIN_EXISTS = WIN32_ERROR.ERROR_DOMAIN_EXISTS;
pub const ERROR_DOMAIN_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_DOMAIN_LIMIT_EXCEEDED;
pub const ERROR_INTERNAL_DB_CORRUPTION = WIN32_ERROR.ERROR_INTERNAL_DB_CORRUPTION;
pub const ERROR_INTERNAL_ERROR = WIN32_ERROR.ERROR_INTERNAL_ERROR;
pub const ERROR_GENERIC_NOT_MAPPED = WIN32_ERROR.ERROR_GENERIC_NOT_MAPPED;
pub const ERROR_BAD_DESCRIPTOR_FORMAT = WIN32_ERROR.ERROR_BAD_DESCRIPTOR_FORMAT;
pub const ERROR_NOT_LOGON_PROCESS = WIN32_ERROR.ERROR_NOT_LOGON_PROCESS;
pub const ERROR_LOGON_SESSION_EXISTS = WIN32_ERROR.ERROR_LOGON_SESSION_EXISTS;
pub const ERROR_NO_SUCH_PACKAGE = WIN32_ERROR.ERROR_NO_SUCH_PACKAGE;
pub const ERROR_BAD_LOGON_SESSION_STATE = WIN32_ERROR.ERROR_BAD_LOGON_SESSION_STATE;
pub const ERROR_LOGON_SESSION_COLLISION = WIN32_ERROR.ERROR_LOGON_SESSION_COLLISION;
pub const ERROR_INVALID_LOGON_TYPE = WIN32_ERROR.ERROR_INVALID_LOGON_TYPE;
pub const ERROR_CANNOT_IMPERSONATE = WIN32_ERROR.ERROR_CANNOT_IMPERSONATE;
pub const ERROR_RXACT_INVALID_STATE = WIN32_ERROR.ERROR_RXACT_INVALID_STATE;
pub const ERROR_RXACT_COMMIT_FAILURE = WIN32_ERROR.ERROR_RXACT_COMMIT_FAILURE;
pub const ERROR_SPECIAL_ACCOUNT = WIN32_ERROR.ERROR_SPECIAL_ACCOUNT;
pub const ERROR_SPECIAL_GROUP = WIN32_ERROR.ERROR_SPECIAL_GROUP;
pub const ERROR_SPECIAL_USER = WIN32_ERROR.ERROR_SPECIAL_USER;
pub const ERROR_MEMBERS_PRIMARY_GROUP = WIN32_ERROR.ERROR_MEMBERS_PRIMARY_GROUP;
pub const ERROR_TOKEN_ALREADY_IN_USE = WIN32_ERROR.ERROR_TOKEN_ALREADY_IN_USE;
pub const ERROR_NO_SUCH_ALIAS = WIN32_ERROR.ERROR_NO_SUCH_ALIAS;
pub const ERROR_MEMBER_NOT_IN_ALIAS = WIN32_ERROR.ERROR_MEMBER_NOT_IN_ALIAS;
pub const ERROR_MEMBER_IN_ALIAS = WIN32_ERROR.ERROR_MEMBER_IN_ALIAS;
pub const ERROR_ALIAS_EXISTS = WIN32_ERROR.ERROR_ALIAS_EXISTS;
pub const ERROR_LOGON_NOT_GRANTED = WIN32_ERROR.ERROR_LOGON_NOT_GRANTED;
pub const ERROR_TOO_MANY_SECRETS = WIN32_ERROR.ERROR_TOO_MANY_SECRETS;
pub const ERROR_SECRET_TOO_LONG = WIN32_ERROR.ERROR_SECRET_TOO_LONG;
pub const ERROR_INTERNAL_DB_ERROR = WIN32_ERROR.ERROR_INTERNAL_DB_ERROR;
pub const ERROR_TOO_MANY_CONTEXT_IDS = WIN32_ERROR.ERROR_TOO_MANY_CONTEXT_IDS;
pub const ERROR_LOGON_TYPE_NOT_GRANTED = WIN32_ERROR.ERROR_LOGON_TYPE_NOT_GRANTED;
pub const ERROR_NT_CROSS_ENCRYPTION_REQUIRED = WIN32_ERROR.ERROR_NT_CROSS_ENCRYPTION_REQUIRED;
pub const ERROR_NO_SUCH_MEMBER = WIN32_ERROR.ERROR_NO_SUCH_MEMBER;
pub const ERROR_INVALID_MEMBER = WIN32_ERROR.ERROR_INVALID_MEMBER;
pub const ERROR_TOO_MANY_SIDS = WIN32_ERROR.ERROR_TOO_MANY_SIDS;
pub const ERROR_LM_CROSS_ENCRYPTION_REQUIRED = WIN32_ERROR.ERROR_LM_CROSS_ENCRYPTION_REQUIRED;
pub const ERROR_NO_INHERITANCE = WIN32_ERROR.ERROR_NO_INHERITANCE;
pub const ERROR_FILE_CORRUPT = WIN32_ERROR.ERROR_FILE_CORRUPT;
pub const ERROR_DISK_CORRUPT = WIN32_ERROR.ERROR_DISK_CORRUPT;
pub const ERROR_NO_USER_SESSION_KEY = WIN32_ERROR.ERROR_NO_USER_SESSION_KEY;
pub const ERROR_LICENSE_QUOTA_EXCEEDED = WIN32_ERROR.ERROR_LICENSE_QUOTA_EXCEEDED;
pub const ERROR_WRONG_TARGET_NAME = WIN32_ERROR.ERROR_WRONG_TARGET_NAME;
pub const ERROR_MUTUAL_AUTH_FAILED = WIN32_ERROR.ERROR_MUTUAL_AUTH_FAILED;
pub const ERROR_TIME_SKEW = WIN32_ERROR.ERROR_TIME_SKEW;
pub const ERROR_CURRENT_DOMAIN_NOT_ALLOWED = WIN32_ERROR.ERROR_CURRENT_DOMAIN_NOT_ALLOWED;
pub const ERROR_INVALID_WINDOW_HANDLE = WIN32_ERROR.ERROR_INVALID_WINDOW_HANDLE;
pub const ERROR_INVALID_MENU_HANDLE = WIN32_ERROR.ERROR_INVALID_MENU_HANDLE;
pub const ERROR_INVALID_CURSOR_HANDLE = WIN32_ERROR.ERROR_INVALID_CURSOR_HANDLE;
pub const ERROR_INVALID_ACCEL_HANDLE = WIN32_ERROR.ERROR_INVALID_ACCEL_HANDLE;
pub const ERROR_INVALID_HOOK_HANDLE = WIN32_ERROR.ERROR_INVALID_HOOK_HANDLE;
pub const ERROR_INVALID_DWP_HANDLE = WIN32_ERROR.ERROR_INVALID_DWP_HANDLE;
pub const ERROR_TLW_WITH_WSCHILD = WIN32_ERROR.ERROR_TLW_WITH_WSCHILD;
pub const ERROR_CANNOT_FIND_WND_CLASS = WIN32_ERROR.ERROR_CANNOT_FIND_WND_CLASS;
pub const ERROR_WINDOW_OF_OTHER_THREAD = WIN32_ERROR.ERROR_WINDOW_OF_OTHER_THREAD;
pub const ERROR_HOTKEY_ALREADY_REGISTERED = WIN32_ERROR.ERROR_HOTKEY_ALREADY_REGISTERED;
pub const ERROR_CLASS_ALREADY_EXISTS = WIN32_ERROR.ERROR_CLASS_ALREADY_EXISTS;
pub const ERROR_CLASS_DOES_NOT_EXIST = WIN32_ERROR.ERROR_CLASS_DOES_NOT_EXIST;
pub const ERROR_CLASS_HAS_WINDOWS = WIN32_ERROR.ERROR_CLASS_HAS_WINDOWS;
pub const ERROR_INVALID_INDEX = WIN32_ERROR.ERROR_INVALID_INDEX;
pub const ERROR_INVALID_ICON_HANDLE = WIN32_ERROR.ERROR_INVALID_ICON_HANDLE;
pub const ERROR_PRIVATE_DIALOG_INDEX = WIN32_ERROR.ERROR_PRIVATE_DIALOG_INDEX;
pub const ERROR_LISTBOX_ID_NOT_FOUND = WIN32_ERROR.ERROR_LISTBOX_ID_NOT_FOUND;
pub const ERROR_NO_WILDCARD_CHARACTERS = WIN32_ERROR.ERROR_NO_WILDCARD_CHARACTERS;
pub const ERROR_CLIPBOARD_NOT_OPEN = WIN32_ERROR.ERROR_CLIPBOARD_NOT_OPEN;
pub const ERROR_HOTKEY_NOT_REGISTERED = WIN32_ERROR.ERROR_HOTKEY_NOT_REGISTERED;
pub const ERROR_WINDOW_NOT_DIALOG = WIN32_ERROR.ERROR_WINDOW_NOT_DIALOG;
pub const ERROR_CONTROL_ID_NOT_FOUND = WIN32_ERROR.ERROR_CONTROL_ID_NOT_FOUND;
pub const ERROR_INVALID_COMBOBOX_MESSAGE = WIN32_ERROR.ERROR_INVALID_COMBOBOX_MESSAGE;
pub const ERROR_WINDOW_NOT_COMBOBOX = WIN32_ERROR.ERROR_WINDOW_NOT_COMBOBOX;
pub const ERROR_INVALID_EDIT_HEIGHT = WIN32_ERROR.ERROR_INVALID_EDIT_HEIGHT;
pub const ERROR_DC_NOT_FOUND = WIN32_ERROR.ERROR_DC_NOT_FOUND;
pub const ERROR_INVALID_HOOK_FILTER = WIN32_ERROR.ERROR_INVALID_HOOK_FILTER;
pub const ERROR_INVALID_FILTER_PROC = WIN32_ERROR.ERROR_INVALID_FILTER_PROC;
pub const ERROR_HOOK_NEEDS_HMOD = WIN32_ERROR.ERROR_HOOK_NEEDS_HMOD;
pub const ERROR_GLOBAL_ONLY_HOOK = WIN32_ERROR.ERROR_GLOBAL_ONLY_HOOK;
pub const ERROR_JOURNAL_HOOK_SET = WIN32_ERROR.ERROR_JOURNAL_HOOK_SET;
pub const ERROR_HOOK_NOT_INSTALLED = WIN32_ERROR.ERROR_HOOK_NOT_INSTALLED;
pub const ERROR_INVALID_LB_MESSAGE = WIN32_ERROR.ERROR_INVALID_LB_MESSAGE;
pub const ERROR_SETCOUNT_ON_BAD_LB = WIN32_ERROR.ERROR_SETCOUNT_ON_BAD_LB;
pub const ERROR_LB_WITHOUT_TABSTOPS = WIN32_ERROR.ERROR_LB_WITHOUT_TABSTOPS;
pub const ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = WIN32_ERROR.ERROR_DESTROY_OBJECT_OF_OTHER_THREAD;
pub const ERROR_CHILD_WINDOW_MENU = WIN32_ERROR.ERROR_CHILD_WINDOW_MENU;
pub const ERROR_NO_SYSTEM_MENU = WIN32_ERROR.ERROR_NO_SYSTEM_MENU;
pub const ERROR_INVALID_MSGBOX_STYLE = WIN32_ERROR.ERROR_INVALID_MSGBOX_STYLE;
pub const ERROR_INVALID_SPI_VALUE = WIN32_ERROR.ERROR_INVALID_SPI_VALUE;
pub const ERROR_SCREEN_ALREADY_LOCKED = WIN32_ERROR.ERROR_SCREEN_ALREADY_LOCKED;
pub const ERROR_HWNDS_HAVE_DIFF_PARENT = WIN32_ERROR.ERROR_HWNDS_HAVE_DIFF_PARENT;
pub const ERROR_NOT_CHILD_WINDOW = WIN32_ERROR.ERROR_NOT_CHILD_WINDOW;
pub const ERROR_INVALID_GW_COMMAND = WIN32_ERROR.ERROR_INVALID_GW_COMMAND;
pub const ERROR_INVALID_THREAD_ID = WIN32_ERROR.ERROR_INVALID_THREAD_ID;
pub const ERROR_NON_MDICHILD_WINDOW = WIN32_ERROR.ERROR_NON_MDICHILD_WINDOW;
pub const ERROR_POPUP_ALREADY_ACTIVE = WIN32_ERROR.ERROR_POPUP_ALREADY_ACTIVE;
pub const ERROR_NO_SCROLLBARS = WIN32_ERROR.ERROR_NO_SCROLLBARS;
pub const ERROR_INVALID_SCROLLBAR_RANGE = WIN32_ERROR.ERROR_INVALID_SCROLLBAR_RANGE;
pub const ERROR_INVALID_SHOWWIN_COMMAND = WIN32_ERROR.ERROR_INVALID_SHOWWIN_COMMAND;
pub const ERROR_NO_SYSTEM_RESOURCES = WIN32_ERROR.ERROR_NO_SYSTEM_RESOURCES;
pub const ERROR_NONPAGED_SYSTEM_RESOURCES = WIN32_ERROR.ERROR_NONPAGED_SYSTEM_RESOURCES;
pub const ERROR_PAGED_SYSTEM_RESOURCES = WIN32_ERROR.ERROR_PAGED_SYSTEM_RESOURCES;
pub const ERROR_WORKING_SET_QUOTA = WIN32_ERROR.ERROR_WORKING_SET_QUOTA;
pub const ERROR_PAGEFILE_QUOTA = WIN32_ERROR.ERROR_PAGEFILE_QUOTA;
pub const ERROR_COMMITMENT_LIMIT = WIN32_ERROR.ERROR_COMMITMENT_LIMIT;
pub const ERROR_MENU_ITEM_NOT_FOUND = WIN32_ERROR.ERROR_MENU_ITEM_NOT_FOUND;
pub const ERROR_INVALID_KEYBOARD_HANDLE = WIN32_ERROR.ERROR_INVALID_KEYBOARD_HANDLE;
pub const ERROR_HOOK_TYPE_NOT_ALLOWED = WIN32_ERROR.ERROR_HOOK_TYPE_NOT_ALLOWED;
pub const ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION = WIN32_ERROR.ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION;
pub const ERROR_TIMEOUT = WIN32_ERROR.ERROR_TIMEOUT;
pub const ERROR_INVALID_MONITOR_HANDLE = WIN32_ERROR.ERROR_INVALID_MONITOR_HANDLE;
pub const ERROR_INCORRECT_SIZE = WIN32_ERROR.ERROR_INCORRECT_SIZE;
pub const ERROR_SYMLINK_CLASS_DISABLED = WIN32_ERROR.ERROR_SYMLINK_CLASS_DISABLED;
pub const ERROR_SYMLINK_NOT_SUPPORTED = WIN32_ERROR.ERROR_SYMLINK_NOT_SUPPORTED;
pub const ERROR_XML_PARSE_ERROR = WIN32_ERROR.ERROR_XML_PARSE_ERROR;
pub const ERROR_XMLDSIG_ERROR = WIN32_ERROR.ERROR_XMLDSIG_ERROR;
pub const ERROR_RESTART_APPLICATION = WIN32_ERROR.ERROR_RESTART_APPLICATION;
pub const ERROR_WRONG_COMPARTMENT = WIN32_ERROR.ERROR_WRONG_COMPARTMENT;
pub const ERROR_AUTHIP_FAILURE = WIN32_ERROR.ERROR_AUTHIP_FAILURE;
pub const ERROR_NO_NVRAM_RESOURCES = WIN32_ERROR.ERROR_NO_NVRAM_RESOURCES;
pub const ERROR_NOT_GUI_PROCESS = WIN32_ERROR.ERROR_NOT_GUI_PROCESS;
pub const ERROR_EVENTLOG_FILE_CORRUPT = WIN32_ERROR.ERROR_EVENTLOG_FILE_CORRUPT;
pub const ERROR_EVENTLOG_CANT_START = WIN32_ERROR.ERROR_EVENTLOG_CANT_START;
pub const ERROR_LOG_FILE_FULL = WIN32_ERROR.ERROR_LOG_FILE_FULL;
pub const ERROR_EVENTLOG_FILE_CHANGED = WIN32_ERROR.ERROR_EVENTLOG_FILE_CHANGED;
pub const ERROR_CONTAINER_ASSIGNED = WIN32_ERROR.ERROR_CONTAINER_ASSIGNED;
pub const ERROR_JOB_NO_CONTAINER = WIN32_ERROR.ERROR_JOB_NO_CONTAINER;
pub const ERROR_INVALID_TASK_NAME = WIN32_ERROR.ERROR_INVALID_TASK_NAME;
pub const ERROR_INVALID_TASK_INDEX = WIN32_ERROR.ERROR_INVALID_TASK_INDEX;
pub const ERROR_THREAD_ALREADY_IN_TASK = WIN32_ERROR.ERROR_THREAD_ALREADY_IN_TASK;
pub const ERROR_INSTALL_SERVICE_FAILURE = WIN32_ERROR.ERROR_INSTALL_SERVICE_FAILURE;
pub const ERROR_INSTALL_USEREXIT = WIN32_ERROR.ERROR_INSTALL_USEREXIT;
pub const ERROR_INSTALL_FAILURE = WIN32_ERROR.ERROR_INSTALL_FAILURE;
pub const ERROR_INSTALL_SUSPEND = WIN32_ERROR.ERROR_INSTALL_SUSPEND;
pub const ERROR_UNKNOWN_PRODUCT = WIN32_ERROR.ERROR_UNKNOWN_PRODUCT;
pub const ERROR_UNKNOWN_FEATURE = WIN32_ERROR.ERROR_UNKNOWN_FEATURE;
pub const ERROR_UNKNOWN_COMPONENT = WIN32_ERROR.ERROR_UNKNOWN_COMPONENT;
pub const ERROR_UNKNOWN_PROPERTY = WIN32_ERROR.ERROR_UNKNOWN_PROPERTY;
pub const ERROR_INVALID_HANDLE_STATE = WIN32_ERROR.ERROR_INVALID_HANDLE_STATE;
pub const ERROR_BAD_CONFIGURATION = WIN32_ERROR.ERROR_BAD_CONFIGURATION;
pub const ERROR_INDEX_ABSENT = WIN32_ERROR.ERROR_INDEX_ABSENT;
pub const ERROR_INSTALL_SOURCE_ABSENT = WIN32_ERROR.ERROR_INSTALL_SOURCE_ABSENT;
pub const ERROR_INSTALL_PACKAGE_VERSION = WIN32_ERROR.ERROR_INSTALL_PACKAGE_VERSION;
pub const ERROR_PRODUCT_UNINSTALLED = WIN32_ERROR.ERROR_PRODUCT_UNINSTALLED;
pub const ERROR_BAD_QUERY_SYNTAX = WIN32_ERROR.ERROR_BAD_QUERY_SYNTAX;
pub const ERROR_INVALID_FIELD = WIN32_ERROR.ERROR_INVALID_FIELD;
pub const ERROR_DEVICE_REMOVED = WIN32_ERROR.ERROR_DEVICE_REMOVED;
pub const ERROR_INSTALL_ALREADY_RUNNING = WIN32_ERROR.ERROR_INSTALL_ALREADY_RUNNING;
pub const ERROR_INSTALL_PACKAGE_OPEN_FAILED = WIN32_ERROR.ERROR_INSTALL_PACKAGE_OPEN_FAILED;
pub const ERROR_INSTALL_PACKAGE_INVALID = WIN32_ERROR.ERROR_INSTALL_PACKAGE_INVALID;
pub const ERROR_INSTALL_UI_FAILURE = WIN32_ERROR.ERROR_INSTALL_UI_FAILURE;
pub const ERROR_INSTALL_LOG_FAILURE = WIN32_ERROR.ERROR_INSTALL_LOG_FAILURE;
pub const ERROR_INSTALL_LANGUAGE_UNSUPPORTED = WIN32_ERROR.ERROR_INSTALL_LANGUAGE_UNSUPPORTED;
pub const ERROR_INSTALL_TRANSFORM_FAILURE = WIN32_ERROR.ERROR_INSTALL_TRANSFORM_FAILURE;
pub const ERROR_INSTALL_PACKAGE_REJECTED = WIN32_ERROR.ERROR_INSTALL_PACKAGE_REJECTED;
pub const ERROR_FUNCTION_NOT_CALLED = WIN32_ERROR.ERROR_FUNCTION_NOT_CALLED;
pub const ERROR_FUNCTION_FAILED = WIN32_ERROR.ERROR_FUNCTION_FAILED;
pub const ERROR_INVALID_TABLE = WIN32_ERROR.ERROR_INVALID_TABLE;
pub const ERROR_DATATYPE_MISMATCH = WIN32_ERROR.ERROR_DATATYPE_MISMATCH;
pub const ERROR_UNSUPPORTED_TYPE = WIN32_ERROR.ERROR_UNSUPPORTED_TYPE;
pub const ERROR_CREATE_FAILED = WIN32_ERROR.ERROR_CREATE_FAILED;
pub const ERROR_INSTALL_TEMP_UNWRITABLE = WIN32_ERROR.ERROR_INSTALL_TEMP_UNWRITABLE;
pub const ERROR_INSTALL_PLATFORM_UNSUPPORTED = WIN32_ERROR.ERROR_INSTALL_PLATFORM_UNSUPPORTED;
pub const ERROR_INSTALL_NOTUSED = WIN32_ERROR.ERROR_INSTALL_NOTUSED;
pub const ERROR_PATCH_PACKAGE_OPEN_FAILED = WIN32_ERROR.ERROR_PATCH_PACKAGE_OPEN_FAILED;
pub const ERROR_PATCH_PACKAGE_INVALID = WIN32_ERROR.ERROR_PATCH_PACKAGE_INVALID;
pub const ERROR_PATCH_PACKAGE_UNSUPPORTED = WIN32_ERROR.ERROR_PATCH_PACKAGE_UNSUPPORTED;
pub const ERROR_PRODUCT_VERSION = WIN32_ERROR.ERROR_PRODUCT_VERSION;
pub const ERROR_INVALID_COMMAND_LINE = WIN32_ERROR.ERROR_INVALID_COMMAND_LINE;
pub const ERROR_INSTALL_REMOTE_DISALLOWED = WIN32_ERROR.ERROR_INSTALL_REMOTE_DISALLOWED;
pub const ERROR_SUCCESS_REBOOT_INITIATED = WIN32_ERROR.ERROR_SUCCESS_REBOOT_INITIATED;
pub const ERROR_PATCH_TARGET_NOT_FOUND = WIN32_ERROR.ERROR_PATCH_TARGET_NOT_FOUND;
pub const ERROR_PATCH_PACKAGE_REJECTED = WIN32_ERROR.ERROR_PATCH_PACKAGE_REJECTED;
pub const ERROR_INSTALL_TRANSFORM_REJECTED = WIN32_ERROR.ERROR_INSTALL_TRANSFORM_REJECTED;
pub const ERROR_INSTALL_REMOTE_PROHIBITED = WIN32_ERROR.ERROR_INSTALL_REMOTE_PROHIBITED;
pub const ERROR_PATCH_REMOVAL_UNSUPPORTED = WIN32_ERROR.ERROR_PATCH_REMOVAL_UNSUPPORTED;
pub const ERROR_UNKNOWN_PATCH = WIN32_ERROR.ERROR_UNKNOWN_PATCH;
pub const ERROR_PATCH_NO_SEQUENCE = WIN32_ERROR.ERROR_PATCH_NO_SEQUENCE;
pub const ERROR_PATCH_REMOVAL_DISALLOWED = WIN32_ERROR.ERROR_PATCH_REMOVAL_DISALLOWED;
pub const ERROR_INVALID_PATCH_XML = WIN32_ERROR.ERROR_INVALID_PATCH_XML;
pub const ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT = WIN32_ERROR.ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT;
pub const ERROR_INSTALL_SERVICE_SAFEBOOT = WIN32_ERROR.ERROR_INSTALL_SERVICE_SAFEBOOT;
pub const ERROR_FAIL_FAST_EXCEPTION = WIN32_ERROR.ERROR_FAIL_FAST_EXCEPTION;
pub const ERROR_INSTALL_REJECTED = WIN32_ERROR.ERROR_INSTALL_REJECTED;
pub const ERROR_DYNAMIC_CODE_BLOCKED = WIN32_ERROR.ERROR_DYNAMIC_CODE_BLOCKED;
pub const ERROR_NOT_SAME_OBJECT = WIN32_ERROR.ERROR_NOT_SAME_OBJECT;
pub const ERROR_STRICT_CFG_VIOLATION = WIN32_ERROR.ERROR_STRICT_CFG_VIOLATION;
pub const ERROR_SET_CONTEXT_DENIED = WIN32_ERROR.ERROR_SET_CONTEXT_DENIED;
pub const ERROR_CROSS_PARTITION_VIOLATION = WIN32_ERROR.ERROR_CROSS_PARTITION_VIOLATION;
pub const ERROR_RETURN_ADDRESS_HIJACK_ATTEMPT = WIN32_ERROR.ERROR_RETURN_ADDRESS_HIJACK_ATTEMPT;
pub const ERROR_INVALID_USER_BUFFER = WIN32_ERROR.ERROR_INVALID_USER_BUFFER;
pub const ERROR_UNRECOGNIZED_MEDIA = WIN32_ERROR.ERROR_UNRECOGNIZED_MEDIA;
pub const ERROR_NO_TRUST_LSA_SECRET = WIN32_ERROR.ERROR_NO_TRUST_LSA_SECRET;
pub const ERROR_NO_TRUST_SAM_ACCOUNT = WIN32_ERROR.ERROR_NO_TRUST_SAM_ACCOUNT;
pub const ERROR_TRUSTED_DOMAIN_FAILURE = WIN32_ERROR.ERROR_TRUSTED_DOMAIN_FAILURE;
pub const ERROR_TRUSTED_RELATIONSHIP_FAILURE = WIN32_ERROR.ERROR_TRUSTED_RELATIONSHIP_FAILURE;
pub const ERROR_TRUST_FAILURE = WIN32_ERROR.ERROR_TRUST_FAILURE;
pub const ERROR_NETLOGON_NOT_STARTED = WIN32_ERROR.ERROR_NETLOGON_NOT_STARTED;
pub const ERROR_ACCOUNT_EXPIRED = WIN32_ERROR.ERROR_ACCOUNT_EXPIRED;
pub const ERROR_REDIRECTOR_HAS_OPEN_HANDLES = WIN32_ERROR.ERROR_REDIRECTOR_HAS_OPEN_HANDLES;
pub const ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = WIN32_ERROR.ERROR_PRINTER_DRIVER_ALREADY_INSTALLED;
pub const ERROR_UNKNOWN_PORT = WIN32_ERROR.ERROR_UNKNOWN_PORT;
pub const ERROR_UNKNOWN_PRINTER_DRIVER = WIN32_ERROR.ERROR_UNKNOWN_PRINTER_DRIVER;
pub const ERROR_UNKNOWN_PRINTPROCESSOR = WIN32_ERROR.ERROR_UNKNOWN_PRINTPROCESSOR;
pub const ERROR_INVALID_SEPARATOR_FILE = WIN32_ERROR.ERROR_INVALID_SEPARATOR_FILE;
pub const ERROR_INVALID_PRIORITY = WIN32_ERROR.ERROR_INVALID_PRIORITY;
pub const ERROR_INVALID_PRINTER_NAME = WIN32_ERROR.ERROR_INVALID_PRINTER_NAME;
pub const ERROR_PRINTER_ALREADY_EXISTS = WIN32_ERROR.ERROR_PRINTER_ALREADY_EXISTS;
pub const ERROR_INVALID_PRINTER_COMMAND = WIN32_ERROR.ERROR_INVALID_PRINTER_COMMAND;
pub const ERROR_INVALID_DATATYPE = WIN32_ERROR.ERROR_INVALID_DATATYPE;
pub const ERROR_INVALID_ENVIRONMENT = WIN32_ERROR.ERROR_INVALID_ENVIRONMENT;
pub const ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = WIN32_ERROR.ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT;
pub const ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = WIN32_ERROR.ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT;
pub const ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = WIN32_ERROR.ERROR_NOLOGON_SERVER_TRUST_ACCOUNT;
pub const ERROR_DOMAIN_TRUST_INCONSISTENT = WIN32_ERROR.ERROR_DOMAIN_TRUST_INCONSISTENT;
pub const ERROR_SERVER_HAS_OPEN_HANDLES = WIN32_ERROR.ERROR_SERVER_HAS_OPEN_HANDLES;
pub const ERROR_RESOURCE_DATA_NOT_FOUND = WIN32_ERROR.ERROR_RESOURCE_DATA_NOT_FOUND;
pub const ERROR_RESOURCE_TYPE_NOT_FOUND = WIN32_ERROR.ERROR_RESOURCE_TYPE_NOT_FOUND;
pub const ERROR_RESOURCE_NAME_NOT_FOUND = WIN32_ERROR.ERROR_RESOURCE_NAME_NOT_FOUND;
pub const ERROR_RESOURCE_LANG_NOT_FOUND = WIN32_ERROR.ERROR_RESOURCE_LANG_NOT_FOUND;
pub const ERROR_NOT_ENOUGH_QUOTA = WIN32_ERROR.ERROR_NOT_ENOUGH_QUOTA;
pub const ERROR_INVALID_TIME = WIN32_ERROR.ERROR_INVALID_TIME;
pub const ERROR_INVALID_FORM_NAME = WIN32_ERROR.ERROR_INVALID_FORM_NAME;
pub const ERROR_INVALID_FORM_SIZE = WIN32_ERROR.ERROR_INVALID_FORM_SIZE;
pub const ERROR_ALREADY_WAITING = WIN32_ERROR.ERROR_ALREADY_WAITING;
pub const ERROR_PRINTER_DELETED = WIN32_ERROR.ERROR_PRINTER_DELETED;
pub const ERROR_INVALID_PRINTER_STATE = WIN32_ERROR.ERROR_INVALID_PRINTER_STATE;
pub const ERROR_PASSWORD_MUST_CHANGE = WIN32_ERROR.ERROR_PASSWORD_MUST_CHANGE;
pub const ERROR_DOMAIN_CONTROLLER_NOT_FOUND = WIN32_ERROR.ERROR_DOMAIN_CONTROLLER_NOT_FOUND;
pub const ERROR_ACCOUNT_LOCKED_OUT = WIN32_ERROR.ERROR_ACCOUNT_LOCKED_OUT;
pub const ERROR_NO_SITENAME = WIN32_ERROR.ERROR_NO_SITENAME;
pub const ERROR_CANT_ACCESS_FILE = WIN32_ERROR.ERROR_CANT_ACCESS_FILE;
pub const ERROR_CANT_RESOLVE_FILENAME = WIN32_ERROR.ERROR_CANT_RESOLVE_FILENAME;
pub const ERROR_KM_DRIVER_BLOCKED = WIN32_ERROR.ERROR_KM_DRIVER_BLOCKED;
pub const ERROR_CONTEXT_EXPIRED = WIN32_ERROR.ERROR_CONTEXT_EXPIRED;
pub const ERROR_PER_USER_TRUST_QUOTA_EXCEEDED = WIN32_ERROR.ERROR_PER_USER_TRUST_QUOTA_EXCEEDED;
pub const ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED = WIN32_ERROR.ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED;
pub const ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED = WIN32_ERROR.ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED;
pub const ERROR_AUTHENTICATION_FIREWALL_FAILED = WIN32_ERROR.ERROR_AUTHENTICATION_FIREWALL_FAILED;
pub const ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED = WIN32_ERROR.ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED;
pub const ERROR_NTLM_BLOCKED = WIN32_ERROR.ERROR_NTLM_BLOCKED;
pub const ERROR_PASSWORD_CHANGE_REQUIRED = WIN32_ERROR.ERROR_PASSWORD_CHANGE_REQUIRED;
pub const ERROR_LOST_MODE_LOGON_RESTRICTION = WIN32_ERROR.ERROR_LOST_MODE_LOGON_RESTRICTION;
pub const ERROR_INVALID_PIXEL_FORMAT = WIN32_ERROR.ERROR_INVALID_PIXEL_FORMAT;
pub const ERROR_BAD_DRIVER = WIN32_ERROR.ERROR_BAD_DRIVER;
pub const ERROR_INVALID_WINDOW_STYLE = WIN32_ERROR.ERROR_INVALID_WINDOW_STYLE;
pub const ERROR_METAFILE_NOT_SUPPORTED = WIN32_ERROR.ERROR_METAFILE_NOT_SUPPORTED;
pub const ERROR_TRANSFORM_NOT_SUPPORTED = WIN32_ERROR.ERROR_TRANSFORM_NOT_SUPPORTED;
pub const ERROR_CLIPPING_NOT_SUPPORTED = WIN32_ERROR.ERROR_CLIPPING_NOT_SUPPORTED;
pub const ERROR_INVALID_CMM = WIN32_ERROR.ERROR_INVALID_CMM;
pub const ERROR_INVALID_PROFILE = WIN32_ERROR.ERROR_INVALID_PROFILE;
pub const ERROR_TAG_NOT_FOUND = WIN32_ERROR.ERROR_TAG_NOT_FOUND;
pub const ERROR_TAG_NOT_PRESENT = WIN32_ERROR.ERROR_TAG_NOT_PRESENT;
pub const ERROR_DUPLICATE_TAG = WIN32_ERROR.ERROR_DUPLICATE_TAG;
pub const ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE = WIN32_ERROR.ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE;
pub const ERROR_PROFILE_NOT_FOUND = WIN32_ERROR.ERROR_PROFILE_NOT_FOUND;
pub const ERROR_INVALID_COLORSPACE = WIN32_ERROR.ERROR_INVALID_COLORSPACE;
pub const ERROR_ICM_NOT_ENABLED = WIN32_ERROR.ERROR_ICM_NOT_ENABLED;
pub const ERROR_DELETING_ICM_XFORM = WIN32_ERROR.ERROR_DELETING_ICM_XFORM;
pub const ERROR_INVALID_TRANSFORM = WIN32_ERROR.ERROR_INVALID_TRANSFORM;
pub const ERROR_COLORSPACE_MISMATCH = WIN32_ERROR.ERROR_COLORSPACE_MISMATCH;
pub const ERROR_INVALID_COLORINDEX = WIN32_ERROR.ERROR_INVALID_COLORINDEX;
pub const ERROR_PROFILE_DOES_NOT_MATCH_DEVICE = WIN32_ERROR.ERROR_PROFILE_DOES_NOT_MATCH_DEVICE;
pub const ERROR_CONNECTED_OTHER_PASSWORD = WIN32_ERROR.ERROR_CONNECTED_OTHER_PASSWORD;
pub const ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT = WIN32_ERROR.ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT;
pub const ERROR_BAD_USERNAME = WIN32_ERROR.ERROR_BAD_USERNAME;
pub const ERROR_NOT_CONNECTED = WIN32_ERROR.ERROR_NOT_CONNECTED;
pub const ERROR_OPEN_FILES = WIN32_ERROR.ERROR_OPEN_FILES;
pub const ERROR_ACTIVE_CONNECTIONS = WIN32_ERROR.ERROR_ACTIVE_CONNECTIONS;
pub const ERROR_DEVICE_IN_USE = WIN32_ERROR.ERROR_DEVICE_IN_USE;
pub const ERROR_UNKNOWN_PRINT_MONITOR = WIN32_ERROR.ERROR_UNKNOWN_PRINT_MONITOR;
pub const ERROR_PRINTER_DRIVER_IN_USE = WIN32_ERROR.ERROR_PRINTER_DRIVER_IN_USE;
pub const ERROR_SPOOL_FILE_NOT_FOUND = WIN32_ERROR.ERROR_SPOOL_FILE_NOT_FOUND;
pub const ERROR_SPL_NO_STARTDOC = WIN32_ERROR.ERROR_SPL_NO_STARTDOC;
pub const ERROR_SPL_NO_ADDJOB = WIN32_ERROR.ERROR_SPL_NO_ADDJOB;
pub const ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = WIN32_ERROR.ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED;
pub const ERROR_PRINT_MONITOR_ALREADY_INSTALLED = WIN32_ERROR.ERROR_PRINT_MONITOR_ALREADY_INSTALLED;
pub const ERROR_INVALID_PRINT_MONITOR = WIN32_ERROR.ERROR_INVALID_PRINT_MONITOR;
pub const ERROR_PRINT_MONITOR_IN_USE = WIN32_ERROR.ERROR_PRINT_MONITOR_IN_USE;
pub const ERROR_PRINTER_HAS_JOBS_QUEUED = WIN32_ERROR.ERROR_PRINTER_HAS_JOBS_QUEUED;
pub const ERROR_SUCCESS_REBOOT_REQUIRED = WIN32_ERROR.ERROR_SUCCESS_REBOOT_REQUIRED;
pub const ERROR_SUCCESS_RESTART_REQUIRED = WIN32_ERROR.ERROR_SUCCESS_RESTART_REQUIRED;
pub const ERROR_PRINTER_NOT_FOUND = WIN32_ERROR.ERROR_PRINTER_NOT_FOUND;
pub const ERROR_PRINTER_DRIVER_WARNED = WIN32_ERROR.ERROR_PRINTER_DRIVER_WARNED;
pub const ERROR_PRINTER_DRIVER_BLOCKED = WIN32_ERROR.ERROR_PRINTER_DRIVER_BLOCKED;
pub const ERROR_PRINTER_DRIVER_PACKAGE_IN_USE = WIN32_ERROR.ERROR_PRINTER_DRIVER_PACKAGE_IN_USE;
pub const ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND = WIN32_ERROR.ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND;
pub const ERROR_FAIL_REBOOT_REQUIRED = WIN32_ERROR.ERROR_FAIL_REBOOT_REQUIRED;
pub const ERROR_FAIL_REBOOT_INITIATED = WIN32_ERROR.ERROR_FAIL_REBOOT_INITIATED;
pub const ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED = WIN32_ERROR.ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED;
pub const ERROR_PRINT_JOB_RESTART_REQUIRED = WIN32_ERROR.ERROR_PRINT_JOB_RESTART_REQUIRED;
pub const ERROR_INVALID_PRINTER_DRIVER_MANIFEST = WIN32_ERROR.ERROR_INVALID_PRINTER_DRIVER_MANIFEST;
pub const ERROR_PRINTER_NOT_SHAREABLE = WIN32_ERROR.ERROR_PRINTER_NOT_SHAREABLE;
pub const ERROR_REQUEST_PAUSED = WIN32_ERROR.ERROR_REQUEST_PAUSED;
pub const ERROR_APPEXEC_CONDITION_NOT_SATISFIED = WIN32_ERROR.ERROR_APPEXEC_CONDITION_NOT_SATISFIED;
pub const ERROR_APPEXEC_HANDLE_INVALIDATED = WIN32_ERROR.ERROR_APPEXEC_HANDLE_INVALIDATED;
pub const ERROR_APPEXEC_INVALID_HOST_GENERATION = WIN32_ERROR.ERROR_APPEXEC_INVALID_HOST_GENERATION;
pub const ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION = WIN32_ERROR.ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION;
pub const ERROR_APPEXEC_INVALID_HOST_STATE = WIN32_ERROR.ERROR_APPEXEC_INVALID_HOST_STATE;
pub const ERROR_APPEXEC_NO_DONOR = WIN32_ERROR.ERROR_APPEXEC_NO_DONOR;
pub const ERROR_APPEXEC_HOST_ID_MISMATCH = WIN32_ERROR.ERROR_APPEXEC_HOST_ID_MISMATCH;
pub const ERROR_APPEXEC_UNKNOWN_USER = WIN32_ERROR.ERROR_APPEXEC_UNKNOWN_USER;
pub const ERROR_APPEXEC_APP_COMPAT_BLOCK = WIN32_ERROR.ERROR_APPEXEC_APP_COMPAT_BLOCK;
pub const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT = WIN32_ERROR.ERROR_APPEXEC_CALLER_WAIT_TIMEOUT;
pub const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_TERMINATION = WIN32_ERROR.ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_TERMINATION;
pub const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_LICENSING = WIN32_ERROR.ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_LICENSING;
pub const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_RESOURCES = WIN32_ERROR.ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_RESOURCES;
pub const ERROR_VRF_VOLATILE_CFG_AND_IO_ENABLED = WIN32_ERROR.ERROR_VRF_VOLATILE_CFG_AND_IO_ENABLED;
pub const ERROR_VRF_VOLATILE_NOT_STOPPABLE = WIN32_ERROR.ERROR_VRF_VOLATILE_NOT_STOPPABLE;
pub const ERROR_VRF_VOLATILE_SAFE_MODE = WIN32_ERROR.ERROR_VRF_VOLATILE_SAFE_MODE;
pub const ERROR_VRF_VOLATILE_NOT_RUNNABLE_SYSTEM = WIN32_ERROR.ERROR_VRF_VOLATILE_NOT_RUNNABLE_SYSTEM;
pub const ERROR_VRF_VOLATILE_NOT_SUPPORTED_RULECLASS = WIN32_ERROR.ERROR_VRF_VOLATILE_NOT_SUPPORTED_RULECLASS;
pub const ERROR_VRF_VOLATILE_PROTECTED_DRIVER = WIN32_ERROR.ERROR_VRF_VOLATILE_PROTECTED_DRIVER;
pub const ERROR_VRF_VOLATILE_NMI_REGISTERED = WIN32_ERROR.ERROR_VRF_VOLATILE_NMI_REGISTERED;
pub const ERROR_VRF_VOLATILE_SETTINGS_CONFLICT = WIN32_ERROR.ERROR_VRF_VOLATILE_SETTINGS_CONFLICT;
pub const ERROR_DIF_IOCALLBACK_NOT_REPLACED = WIN32_ERROR.ERROR_DIF_IOCALLBACK_NOT_REPLACED;
pub const ERROR_DIF_LIVEDUMP_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_DIF_LIVEDUMP_LIMIT_EXCEEDED;
pub const ERROR_DIF_VOLATILE_SECTION_NOT_LOCKED = WIN32_ERROR.ERROR_DIF_VOLATILE_SECTION_NOT_LOCKED;
pub const ERROR_DIF_VOLATILE_DRIVER_HOTPATCHED = WIN32_ERROR.ERROR_DIF_VOLATILE_DRIVER_HOTPATCHED;
pub const ERROR_DIF_VOLATILE_INVALID_INFO = WIN32_ERROR.ERROR_DIF_VOLATILE_INVALID_INFO;
pub const ERROR_DIF_VOLATILE_DRIVER_IS_NOT_RUNNING = WIN32_ERROR.ERROR_DIF_VOLATILE_DRIVER_IS_NOT_RUNNING;
pub const ERROR_DIF_VOLATILE_PLUGIN_IS_NOT_RUNNING = WIN32_ERROR.ERROR_DIF_VOLATILE_PLUGIN_IS_NOT_RUNNING;
pub const ERROR_DIF_VOLATILE_PLUGIN_CHANGE_NOT_ALLOWED = WIN32_ERROR.ERROR_DIF_VOLATILE_PLUGIN_CHANGE_NOT_ALLOWED;
pub const ERROR_DIF_VOLATILE_NOT_ALLOWED = WIN32_ERROR.ERROR_DIF_VOLATILE_NOT_ALLOWED;
pub const ERROR_DIF_BINDING_API_NOT_FOUND = WIN32_ERROR.ERROR_DIF_BINDING_API_NOT_FOUND;
pub const ERROR_IO_REISSUE_AS_CACHED = WIN32_ERROR.ERROR_IO_REISSUE_AS_CACHED;
pub const ERROR_WINS_INTERNAL = WIN32_ERROR.ERROR_WINS_INTERNAL;
pub const ERROR_CAN_NOT_DEL_LOCAL_WINS = WIN32_ERROR.ERROR_CAN_NOT_DEL_LOCAL_WINS;
pub const ERROR_STATIC_INIT = WIN32_ERROR.ERROR_STATIC_INIT;
pub const ERROR_INC_BACKUP = WIN32_ERROR.ERROR_INC_BACKUP;
pub const ERROR_FULL_BACKUP = WIN32_ERROR.ERROR_FULL_BACKUP;
pub const ERROR_REC_NON_EXISTENT = WIN32_ERROR.ERROR_REC_NON_EXISTENT;
pub const ERROR_RPL_NOT_ALLOWED = WIN32_ERROR.ERROR_RPL_NOT_ALLOWED;
pub const ERROR_DHCP_ADDRESS_CONFLICT = WIN32_ERROR.ERROR_DHCP_ADDRESS_CONFLICT;
pub const ERROR_WMI_GUID_NOT_FOUND = WIN32_ERROR.ERROR_WMI_GUID_NOT_FOUND;
pub const ERROR_WMI_INSTANCE_NOT_FOUND = WIN32_ERROR.ERROR_WMI_INSTANCE_NOT_FOUND;
pub const ERROR_WMI_ITEMID_NOT_FOUND = WIN32_ERROR.ERROR_WMI_ITEMID_NOT_FOUND;
pub const ERROR_WMI_TRY_AGAIN = WIN32_ERROR.ERROR_WMI_TRY_AGAIN;
pub const ERROR_WMI_DP_NOT_FOUND = WIN32_ERROR.ERROR_WMI_DP_NOT_FOUND;
pub const ERROR_WMI_UNRESOLVED_INSTANCE_REF = WIN32_ERROR.ERROR_WMI_UNRESOLVED_INSTANCE_REF;
pub const ERROR_WMI_ALREADY_ENABLED = WIN32_ERROR.ERROR_WMI_ALREADY_ENABLED;
pub const ERROR_WMI_GUID_DISCONNECTED = WIN32_ERROR.ERROR_WMI_GUID_DISCONNECTED;
pub const ERROR_WMI_SERVER_UNAVAILABLE = WIN32_ERROR.ERROR_WMI_SERVER_UNAVAILABLE;
pub const ERROR_WMI_DP_FAILED = WIN32_ERROR.ERROR_WMI_DP_FAILED;
pub const ERROR_WMI_INVALID_MOF = WIN32_ERROR.ERROR_WMI_INVALID_MOF;
pub const ERROR_WMI_INVALID_REGINFO = WIN32_ERROR.ERROR_WMI_INVALID_REGINFO;
pub const ERROR_WMI_ALREADY_DISABLED = WIN32_ERROR.ERROR_WMI_ALREADY_DISABLED;
pub const ERROR_WMI_READ_ONLY = WIN32_ERROR.ERROR_WMI_READ_ONLY;
pub const ERROR_WMI_SET_FAILURE = WIN32_ERROR.ERROR_WMI_SET_FAILURE;
pub const ERROR_NOT_APPCONTAINER = WIN32_ERROR.ERROR_NOT_APPCONTAINER;
pub const ERROR_APPCONTAINER_REQUIRED = WIN32_ERROR.ERROR_APPCONTAINER_REQUIRED;
pub const ERROR_NOT_SUPPORTED_IN_APPCONTAINER = WIN32_ERROR.ERROR_NOT_SUPPORTED_IN_APPCONTAINER;
pub const ERROR_INVALID_PACKAGE_SID_LENGTH = WIN32_ERROR.ERROR_INVALID_PACKAGE_SID_LENGTH;
pub const ERROR_INVALID_MEDIA = WIN32_ERROR.ERROR_INVALID_MEDIA;
pub const ERROR_INVALID_LIBRARY = WIN32_ERROR.ERROR_INVALID_LIBRARY;
pub const ERROR_INVALID_MEDIA_POOL = WIN32_ERROR.ERROR_INVALID_MEDIA_POOL;
pub const ERROR_DRIVE_MEDIA_MISMATCH = WIN32_ERROR.ERROR_DRIVE_MEDIA_MISMATCH;
pub const ERROR_MEDIA_OFFLINE = WIN32_ERROR.ERROR_MEDIA_OFFLINE;
pub const ERROR_LIBRARY_OFFLINE = WIN32_ERROR.ERROR_LIBRARY_OFFLINE;
pub const ERROR_EMPTY = WIN32_ERROR.ERROR_EMPTY;
pub const ERROR_NOT_EMPTY = WIN32_ERROR.ERROR_NOT_EMPTY;
pub const ERROR_MEDIA_UNAVAILABLE = WIN32_ERROR.ERROR_MEDIA_UNAVAILABLE;
pub const ERROR_RESOURCE_DISABLED = WIN32_ERROR.ERROR_RESOURCE_DISABLED;
pub const ERROR_INVALID_CLEANER = WIN32_ERROR.ERROR_INVALID_CLEANER;
pub const ERROR_UNABLE_TO_CLEAN = WIN32_ERROR.ERROR_UNABLE_TO_CLEAN;
pub const ERROR_OBJECT_NOT_FOUND = WIN32_ERROR.ERROR_OBJECT_NOT_FOUND;
pub const ERROR_DATABASE_FAILURE = WIN32_ERROR.ERROR_DATABASE_FAILURE;
pub const ERROR_DATABASE_FULL = WIN32_ERROR.ERROR_DATABASE_FULL;
pub const ERROR_MEDIA_INCOMPATIBLE = WIN32_ERROR.ERROR_MEDIA_INCOMPATIBLE;
pub const ERROR_RESOURCE_NOT_PRESENT = WIN32_ERROR.ERROR_RESOURCE_NOT_PRESENT;
pub const ERROR_INVALID_OPERATION = WIN32_ERROR.ERROR_INVALID_OPERATION;
pub const ERROR_MEDIA_NOT_AVAILABLE = WIN32_ERROR.ERROR_MEDIA_NOT_AVAILABLE;
pub const ERROR_DEVICE_NOT_AVAILABLE = WIN32_ERROR.ERROR_DEVICE_NOT_AVAILABLE;
pub const ERROR_REQUEST_REFUSED = WIN32_ERROR.ERROR_REQUEST_REFUSED;
pub const ERROR_INVALID_DRIVE_OBJECT = WIN32_ERROR.ERROR_INVALID_DRIVE_OBJECT;
pub const ERROR_LIBRARY_FULL = WIN32_ERROR.ERROR_LIBRARY_FULL;
pub const ERROR_MEDIUM_NOT_ACCESSIBLE = WIN32_ERROR.ERROR_MEDIUM_NOT_ACCESSIBLE;
pub const ERROR_UNABLE_TO_LOAD_MEDIUM = WIN32_ERROR.ERROR_UNABLE_TO_LOAD_MEDIUM;
pub const ERROR_UNABLE_TO_INVENTORY_DRIVE = WIN32_ERROR.ERROR_UNABLE_TO_INVENTORY_DRIVE;
pub const ERROR_UNABLE_TO_INVENTORY_SLOT = WIN32_ERROR.ERROR_UNABLE_TO_INVENTORY_SLOT;
pub const ERROR_UNABLE_TO_INVENTORY_TRANSPORT = WIN32_ERROR.ERROR_UNABLE_TO_INVENTORY_TRANSPORT;
pub const ERROR_TRANSPORT_FULL = WIN32_ERROR.ERROR_TRANSPORT_FULL;
pub const ERROR_CONTROLLING_IEPORT = WIN32_ERROR.ERROR_CONTROLLING_IEPORT;
pub const ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA = WIN32_ERROR.ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA;
pub const ERROR_CLEANER_SLOT_SET = WIN32_ERROR.ERROR_CLEANER_SLOT_SET;
pub const ERROR_CLEANER_SLOT_NOT_SET = WIN32_ERROR.ERROR_CLEANER_SLOT_NOT_SET;
pub const ERROR_CLEANER_CARTRIDGE_SPENT = WIN32_ERROR.ERROR_CLEANER_CARTRIDGE_SPENT;
pub const ERROR_UNEXPECTED_OMID = WIN32_ERROR.ERROR_UNEXPECTED_OMID;
pub const ERROR_CANT_DELETE_LAST_ITEM = WIN32_ERROR.ERROR_CANT_DELETE_LAST_ITEM;
pub const ERROR_MESSAGE_EXCEEDS_MAX_SIZE = WIN32_ERROR.ERROR_MESSAGE_EXCEEDS_MAX_SIZE;
pub const ERROR_VOLUME_CONTAINS_SYS_FILES = WIN32_ERROR.ERROR_VOLUME_CONTAINS_SYS_FILES;
pub const ERROR_INDIGENOUS_TYPE = WIN32_ERROR.ERROR_INDIGENOUS_TYPE;
pub const ERROR_NO_SUPPORTING_DRIVES = WIN32_ERROR.ERROR_NO_SUPPORTING_DRIVES;
pub const ERROR_CLEANER_CARTRIDGE_INSTALLED = WIN32_ERROR.ERROR_CLEANER_CARTRIDGE_INSTALLED;
pub const ERROR_IEPORT_FULL = WIN32_ERROR.ERROR_IEPORT_FULL;
pub const ERROR_FILE_OFFLINE = WIN32_ERROR.ERROR_FILE_OFFLINE;
pub const ERROR_REMOTE_STORAGE_NOT_ACTIVE = WIN32_ERROR.ERROR_REMOTE_STORAGE_NOT_ACTIVE;
pub const ERROR_REMOTE_STORAGE_MEDIA_ERROR = WIN32_ERROR.ERROR_REMOTE_STORAGE_MEDIA_ERROR;
pub const ERROR_NOT_A_REPARSE_POINT = WIN32_ERROR.ERROR_NOT_A_REPARSE_POINT;
pub const ERROR_REPARSE_ATTRIBUTE_CONFLICT = WIN32_ERROR.ERROR_REPARSE_ATTRIBUTE_CONFLICT;
pub const ERROR_INVALID_REPARSE_DATA = WIN32_ERROR.ERROR_INVALID_REPARSE_DATA;
pub const ERROR_REPARSE_TAG_INVALID = WIN32_ERROR.ERROR_REPARSE_TAG_INVALID;
pub const ERROR_REPARSE_TAG_MISMATCH = WIN32_ERROR.ERROR_REPARSE_TAG_MISMATCH;
pub const ERROR_REPARSE_POINT_ENCOUNTERED = WIN32_ERROR.ERROR_REPARSE_POINT_ENCOUNTERED;
pub const ERROR_APP_DATA_NOT_FOUND = WIN32_ERROR.ERROR_APP_DATA_NOT_FOUND;
pub const ERROR_APP_DATA_EXPIRED = WIN32_ERROR.ERROR_APP_DATA_EXPIRED;
pub const ERROR_APP_DATA_CORRUPT = WIN32_ERROR.ERROR_APP_DATA_CORRUPT;
pub const ERROR_APP_DATA_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_APP_DATA_LIMIT_EXCEEDED;
pub const ERROR_APP_DATA_REBOOT_REQUIRED = WIN32_ERROR.ERROR_APP_DATA_REBOOT_REQUIRED;
pub const ERROR_SECUREBOOT_ROLLBACK_DETECTED = WIN32_ERROR.ERROR_SECUREBOOT_ROLLBACK_DETECTED;
pub const ERROR_SECUREBOOT_POLICY_VIOLATION = WIN32_ERROR.ERROR_SECUREBOOT_POLICY_VIOLATION;
pub const ERROR_SECUREBOOT_INVALID_POLICY = WIN32_ERROR.ERROR_SECUREBOOT_INVALID_POLICY;
pub const ERROR_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND = WIN32_ERROR.ERROR_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND;
pub const ERROR_SECUREBOOT_POLICY_NOT_SIGNED = WIN32_ERROR.ERROR_SECUREBOOT_POLICY_NOT_SIGNED;
pub const ERROR_SECUREBOOT_NOT_ENABLED = WIN32_ERROR.ERROR_SECUREBOOT_NOT_ENABLED;
pub const ERROR_SECUREBOOT_FILE_REPLACED = WIN32_ERROR.ERROR_SECUREBOOT_FILE_REPLACED;
pub const ERROR_SECUREBOOT_POLICY_NOT_AUTHORIZED = WIN32_ERROR.ERROR_SECUREBOOT_POLICY_NOT_AUTHORIZED;
pub const ERROR_SECUREBOOT_POLICY_UNKNOWN = WIN32_ERROR.ERROR_SECUREBOOT_POLICY_UNKNOWN;
pub const ERROR_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION = WIN32_ERROR.ERROR_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION;
pub const ERROR_SECUREBOOT_PLATFORM_ID_MISMATCH = WIN32_ERROR.ERROR_SECUREBOOT_PLATFORM_ID_MISMATCH;
pub const ERROR_SECUREBOOT_POLICY_ROLLBACK_DETECTED = WIN32_ERROR.ERROR_SECUREBOOT_POLICY_ROLLBACK_DETECTED;
pub const ERROR_SECUREBOOT_POLICY_UPGRADE_MISMATCH = WIN32_ERROR.ERROR_SECUREBOOT_POLICY_UPGRADE_MISMATCH;
pub const ERROR_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING = WIN32_ERROR.ERROR_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING;
pub const ERROR_SECUREBOOT_NOT_BASE_POLICY = WIN32_ERROR.ERROR_SECUREBOOT_NOT_BASE_POLICY;
pub const ERROR_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY = WIN32_ERROR.ERROR_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY;
pub const ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED = WIN32_ERROR.ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED;
pub const ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED = WIN32_ERROR.ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED;
pub const ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED = WIN32_ERROR.ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED;
pub const ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED = WIN32_ERROR.ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED;
pub const ERROR_ALREADY_HAS_STREAM_ID = WIN32_ERROR.ERROR_ALREADY_HAS_STREAM_ID;
pub const ERROR_SMR_GARBAGE_COLLECTION_REQUIRED = WIN32_ERROR.ERROR_SMR_GARBAGE_COLLECTION_REQUIRED;
pub const ERROR_WOF_WIM_HEADER_CORRUPT = WIN32_ERROR.ERROR_WOF_WIM_HEADER_CORRUPT;
pub const ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT = WIN32_ERROR.ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT;
pub const ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT = WIN32_ERROR.ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT;
pub const ERROR_OBJECT_IS_IMMUTABLE = WIN32_ERROR.ERROR_OBJECT_IS_IMMUTABLE;
pub const ERROR_VOLUME_NOT_SIS_ENABLED = WIN32_ERROR.ERROR_VOLUME_NOT_SIS_ENABLED;
pub const ERROR_SYSTEM_INTEGRITY_ROLLBACK_DETECTED = WIN32_ERROR.ERROR_SYSTEM_INTEGRITY_ROLLBACK_DETECTED;
pub const ERROR_SYSTEM_INTEGRITY_POLICY_VIOLATION = WIN32_ERROR.ERROR_SYSTEM_INTEGRITY_POLICY_VIOLATION;
pub const ERROR_SYSTEM_INTEGRITY_INVALID_POLICY = WIN32_ERROR.ERROR_SYSTEM_INTEGRITY_INVALID_POLICY;
pub const ERROR_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED = WIN32_ERROR.ERROR_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED;
pub const ERROR_SYSTEM_INTEGRITY_TOO_MANY_POLICIES = WIN32_ERROR.ERROR_SYSTEM_INTEGRITY_TOO_MANY_POLICIES;
pub const ERROR_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED = WIN32_ERROR.ERROR_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED;
pub const ERROR_SYSTEM_INTEGRITY_REPUTATION_MALICIOUS = WIN32_ERROR.ERROR_SYSTEM_INTEGRITY_REPUTATION_MALICIOUS;
pub const ERROR_SYSTEM_INTEGRITY_REPUTATION_PUA = WIN32_ERROR.ERROR_SYSTEM_INTEGRITY_REPUTATION_PUA;
pub const ERROR_SYSTEM_INTEGRITY_REPUTATION_DANGEROUS_EXT = WIN32_ERROR.ERROR_SYSTEM_INTEGRITY_REPUTATION_DANGEROUS_EXT;
pub const ERROR_SYSTEM_INTEGRITY_REPUTATION_OFFLINE = WIN32_ERROR.ERROR_SYSTEM_INTEGRITY_REPUTATION_OFFLINE;
pub const ERROR_VSM_NOT_INITIALIZED = WIN32_ERROR.ERROR_VSM_NOT_INITIALIZED;
pub const ERROR_VSM_DMA_PROTECTION_NOT_IN_USE = WIN32_ERROR.ERROR_VSM_DMA_PROTECTION_NOT_IN_USE;
pub const ERROR_PLATFORM_MANIFEST_NOT_AUTHORIZED = WIN32_ERROR.ERROR_PLATFORM_MANIFEST_NOT_AUTHORIZED;
pub const ERROR_PLATFORM_MANIFEST_INVALID = WIN32_ERROR.ERROR_PLATFORM_MANIFEST_INVALID;
pub const ERROR_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED = WIN32_ERROR.ERROR_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED;
pub const ERROR_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED = WIN32_ERROR.ERROR_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED;
pub const ERROR_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND = WIN32_ERROR.ERROR_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND;
pub const ERROR_PLATFORM_MANIFEST_NOT_ACTIVE = WIN32_ERROR.ERROR_PLATFORM_MANIFEST_NOT_ACTIVE;
pub const ERROR_PLATFORM_MANIFEST_NOT_SIGNED = WIN32_ERROR.ERROR_PLATFORM_MANIFEST_NOT_SIGNED;
pub const ERROR_DEPENDENT_RESOURCE_EXISTS = WIN32_ERROR.ERROR_DEPENDENT_RESOURCE_EXISTS;
pub const ERROR_DEPENDENCY_NOT_FOUND = WIN32_ERROR.ERROR_DEPENDENCY_NOT_FOUND;
pub const ERROR_DEPENDENCY_ALREADY_EXISTS = WIN32_ERROR.ERROR_DEPENDENCY_ALREADY_EXISTS;
pub const ERROR_RESOURCE_NOT_ONLINE = WIN32_ERROR.ERROR_RESOURCE_NOT_ONLINE;
pub const ERROR_HOST_NODE_NOT_AVAILABLE = WIN32_ERROR.ERROR_HOST_NODE_NOT_AVAILABLE;
pub const ERROR_RESOURCE_NOT_AVAILABLE = WIN32_ERROR.ERROR_RESOURCE_NOT_AVAILABLE;
pub const ERROR_RESOURCE_NOT_FOUND = WIN32_ERROR.ERROR_RESOURCE_NOT_FOUND;
pub const ERROR_SHUTDOWN_CLUSTER = WIN32_ERROR.ERROR_SHUTDOWN_CLUSTER;
pub const ERROR_CANT_EVICT_ACTIVE_NODE = WIN32_ERROR.ERROR_CANT_EVICT_ACTIVE_NODE;
pub const ERROR_OBJECT_ALREADY_EXISTS = WIN32_ERROR.ERROR_OBJECT_ALREADY_EXISTS;
pub const ERROR_OBJECT_IN_LIST = WIN32_ERROR.ERROR_OBJECT_IN_LIST;
pub const ERROR_GROUP_NOT_AVAILABLE = WIN32_ERROR.ERROR_GROUP_NOT_AVAILABLE;
pub const ERROR_GROUP_NOT_FOUND = WIN32_ERROR.ERROR_GROUP_NOT_FOUND;
pub const ERROR_GROUP_NOT_ONLINE = WIN32_ERROR.ERROR_GROUP_NOT_ONLINE;
pub const ERROR_HOST_NODE_NOT_RESOURCE_OWNER = WIN32_ERROR.ERROR_HOST_NODE_NOT_RESOURCE_OWNER;
pub const ERROR_HOST_NODE_NOT_GROUP_OWNER = WIN32_ERROR.ERROR_HOST_NODE_NOT_GROUP_OWNER;
pub const ERROR_RESMON_CREATE_FAILED = WIN32_ERROR.ERROR_RESMON_CREATE_FAILED;
pub const ERROR_RESMON_ONLINE_FAILED = WIN32_ERROR.ERROR_RESMON_ONLINE_FAILED;
pub const ERROR_RESOURCE_ONLINE = WIN32_ERROR.ERROR_RESOURCE_ONLINE;
pub const ERROR_QUORUM_RESOURCE = WIN32_ERROR.ERROR_QUORUM_RESOURCE;
pub const ERROR_NOT_QUORUM_CAPABLE = WIN32_ERROR.ERROR_NOT_QUORUM_CAPABLE;
pub const ERROR_CLUSTER_SHUTTING_DOWN = WIN32_ERROR.ERROR_CLUSTER_SHUTTING_DOWN;
pub const ERROR_INVALID_STATE = WIN32_ERROR.ERROR_INVALID_STATE;
pub const ERROR_RESOURCE_PROPERTIES_STORED = WIN32_ERROR.ERROR_RESOURCE_PROPERTIES_STORED;
pub const ERROR_NOT_QUORUM_CLASS = WIN32_ERROR.ERROR_NOT_QUORUM_CLASS;
pub const ERROR_CORE_RESOURCE = WIN32_ERROR.ERROR_CORE_RESOURCE;
pub const ERROR_QUORUM_RESOURCE_ONLINE_FAILED = WIN32_ERROR.ERROR_QUORUM_RESOURCE_ONLINE_FAILED;
pub const ERROR_QUORUMLOG_OPEN_FAILED = WIN32_ERROR.ERROR_QUORUMLOG_OPEN_FAILED;
pub const ERROR_CLUSTERLOG_CORRUPT = WIN32_ERROR.ERROR_CLUSTERLOG_CORRUPT;
pub const ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE = WIN32_ERROR.ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE;
pub const ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE = WIN32_ERROR.ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE;
pub const ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND = WIN32_ERROR.ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND;
pub const ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE = WIN32_ERROR.ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE;
pub const ERROR_QUORUM_OWNER_ALIVE = WIN32_ERROR.ERROR_QUORUM_OWNER_ALIVE;
pub const ERROR_NETWORK_NOT_AVAILABLE = WIN32_ERROR.ERROR_NETWORK_NOT_AVAILABLE;
pub const ERROR_NODE_NOT_AVAILABLE = WIN32_ERROR.ERROR_NODE_NOT_AVAILABLE;
pub const ERROR_ALL_NODES_NOT_AVAILABLE = WIN32_ERROR.ERROR_ALL_NODES_NOT_AVAILABLE;
pub const ERROR_RESOURCE_FAILED = WIN32_ERROR.ERROR_RESOURCE_FAILED;
pub const ERROR_CLUSTER_INVALID_NODE = WIN32_ERROR.ERROR_CLUSTER_INVALID_NODE;
pub const ERROR_CLUSTER_NODE_EXISTS = WIN32_ERROR.ERROR_CLUSTER_NODE_EXISTS;
pub const ERROR_CLUSTER_JOIN_IN_PROGRESS = WIN32_ERROR.ERROR_CLUSTER_JOIN_IN_PROGRESS;
pub const ERROR_CLUSTER_NODE_NOT_FOUND = WIN32_ERROR.ERROR_CLUSTER_NODE_NOT_FOUND;
pub const ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND = WIN32_ERROR.ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND;
pub const ERROR_CLUSTER_NETWORK_EXISTS = WIN32_ERROR.ERROR_CLUSTER_NETWORK_EXISTS;
pub const ERROR_CLUSTER_NETWORK_NOT_FOUND = WIN32_ERROR.ERROR_CLUSTER_NETWORK_NOT_FOUND;
pub const ERROR_CLUSTER_NETINTERFACE_EXISTS = WIN32_ERROR.ERROR_CLUSTER_NETINTERFACE_EXISTS;
pub const ERROR_CLUSTER_NETINTERFACE_NOT_FOUND = WIN32_ERROR.ERROR_CLUSTER_NETINTERFACE_NOT_FOUND;
pub const ERROR_CLUSTER_INVALID_REQUEST = WIN32_ERROR.ERROR_CLUSTER_INVALID_REQUEST;
pub const ERROR_CLUSTER_INVALID_NETWORK_PROVIDER = WIN32_ERROR.ERROR_CLUSTER_INVALID_NETWORK_PROVIDER;
pub const ERROR_CLUSTER_NODE_DOWN = WIN32_ERROR.ERROR_CLUSTER_NODE_DOWN;
pub const ERROR_CLUSTER_NODE_UNREACHABLE = WIN32_ERROR.ERROR_CLUSTER_NODE_UNREACHABLE;
pub const ERROR_CLUSTER_NODE_NOT_MEMBER = WIN32_ERROR.ERROR_CLUSTER_NODE_NOT_MEMBER;
pub const ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS = WIN32_ERROR.ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS;
pub const ERROR_CLUSTER_INVALID_NETWORK = WIN32_ERROR.ERROR_CLUSTER_INVALID_NETWORK;
pub const ERROR_CLUSTER_NODE_UP = WIN32_ERROR.ERROR_CLUSTER_NODE_UP;
pub const ERROR_CLUSTER_IPADDR_IN_USE = WIN32_ERROR.ERROR_CLUSTER_IPADDR_IN_USE;
pub const ERROR_CLUSTER_NODE_NOT_PAUSED = WIN32_ERROR.ERROR_CLUSTER_NODE_NOT_PAUSED;
pub const ERROR_CLUSTER_NO_SECURITY_CONTEXT = WIN32_ERROR.ERROR_CLUSTER_NO_SECURITY_CONTEXT;
pub const ERROR_CLUSTER_NETWORK_NOT_INTERNAL = WIN32_ERROR.ERROR_CLUSTER_NETWORK_NOT_INTERNAL;
pub const ERROR_CLUSTER_NODE_ALREADY_UP = WIN32_ERROR.ERROR_CLUSTER_NODE_ALREADY_UP;
pub const ERROR_CLUSTER_NODE_ALREADY_DOWN = WIN32_ERROR.ERROR_CLUSTER_NODE_ALREADY_DOWN;
pub const ERROR_CLUSTER_NETWORK_ALREADY_ONLINE = WIN32_ERROR.ERROR_CLUSTER_NETWORK_ALREADY_ONLINE;
pub const ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE = WIN32_ERROR.ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE;
pub const ERROR_CLUSTER_NODE_ALREADY_MEMBER = WIN32_ERROR.ERROR_CLUSTER_NODE_ALREADY_MEMBER;
pub const ERROR_CLUSTER_LAST_INTERNAL_NETWORK = WIN32_ERROR.ERROR_CLUSTER_LAST_INTERNAL_NETWORK;
pub const ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS = WIN32_ERROR.ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS;
pub const ERROR_INVALID_OPERATION_ON_QUORUM = WIN32_ERROR.ERROR_INVALID_OPERATION_ON_QUORUM;
pub const ERROR_DEPENDENCY_NOT_ALLOWED = WIN32_ERROR.ERROR_DEPENDENCY_NOT_ALLOWED;
pub const ERROR_CLUSTER_NODE_PAUSED = WIN32_ERROR.ERROR_CLUSTER_NODE_PAUSED;
pub const ERROR_NODE_CANT_HOST_RESOURCE = WIN32_ERROR.ERROR_NODE_CANT_HOST_RESOURCE;
pub const ERROR_CLUSTER_NODE_NOT_READY = WIN32_ERROR.ERROR_CLUSTER_NODE_NOT_READY;
pub const ERROR_CLUSTER_NODE_SHUTTING_DOWN = WIN32_ERROR.ERROR_CLUSTER_NODE_SHUTTING_DOWN;
pub const ERROR_CLUSTER_JOIN_ABORTED = WIN32_ERROR.ERROR_CLUSTER_JOIN_ABORTED;
pub const ERROR_CLUSTER_INCOMPATIBLE_VERSIONS = WIN32_ERROR.ERROR_CLUSTER_INCOMPATIBLE_VERSIONS;
pub const ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED = WIN32_ERROR.ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED;
pub const ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED = WIN32_ERROR.ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED;
pub const ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND;
pub const ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED = WIN32_ERROR.ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED;
pub const ERROR_CLUSTER_RESNAME_NOT_FOUND = WIN32_ERROR.ERROR_CLUSTER_RESNAME_NOT_FOUND;
pub const ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED = WIN32_ERROR.ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED;
pub const ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST = WIN32_ERROR.ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST;
pub const ERROR_CLUSTER_DATABASE_SEQMISMATCH = WIN32_ERROR.ERROR_CLUSTER_DATABASE_SEQMISMATCH;
pub const ERROR_RESMON_INVALID_STATE = WIN32_ERROR.ERROR_RESMON_INVALID_STATE;
pub const ERROR_CLUSTER_GUM_NOT_LOCKER = WIN32_ERROR.ERROR_CLUSTER_GUM_NOT_LOCKER;
pub const ERROR_QUORUM_DISK_NOT_FOUND = WIN32_ERROR.ERROR_QUORUM_DISK_NOT_FOUND;
pub const ERROR_DATABASE_BACKUP_CORRUPT = WIN32_ERROR.ERROR_DATABASE_BACKUP_CORRUPT;
pub const ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT = WIN32_ERROR.ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT;
pub const ERROR_RESOURCE_PROPERTY_UNCHANGEABLE = WIN32_ERROR.ERROR_RESOURCE_PROPERTY_UNCHANGEABLE;
pub const ERROR_NO_ADMIN_ACCESS_POINT = WIN32_ERROR.ERROR_NO_ADMIN_ACCESS_POINT;
pub const ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE = WIN32_ERROR.ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE;
pub const ERROR_CLUSTER_QUORUMLOG_NOT_FOUND = WIN32_ERROR.ERROR_CLUSTER_QUORUMLOG_NOT_FOUND;
pub const ERROR_CLUSTER_MEMBERSHIP_HALT = WIN32_ERROR.ERROR_CLUSTER_MEMBERSHIP_HALT;
pub const ERROR_CLUSTER_INSTANCE_ID_MISMATCH = WIN32_ERROR.ERROR_CLUSTER_INSTANCE_ID_MISMATCH;
pub const ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP = WIN32_ERROR.ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP;
pub const ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH = WIN32_ERROR.ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH;
pub const ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP = WIN32_ERROR.ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP;
pub const ERROR_CLUSTER_PARAMETER_MISMATCH = WIN32_ERROR.ERROR_CLUSTER_PARAMETER_MISMATCH;
pub const ERROR_NODE_CANNOT_BE_CLUSTERED = WIN32_ERROR.ERROR_NODE_CANNOT_BE_CLUSTERED;
pub const ERROR_CLUSTER_WRONG_OS_VERSION = WIN32_ERROR.ERROR_CLUSTER_WRONG_OS_VERSION;
pub const ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME = WIN32_ERROR.ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME;
pub const ERROR_CLUSCFG_ALREADY_COMMITTED = WIN32_ERROR.ERROR_CLUSCFG_ALREADY_COMMITTED;
pub const ERROR_CLUSCFG_ROLLBACK_FAILED = WIN32_ERROR.ERROR_CLUSCFG_ROLLBACK_FAILED;
pub const ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT = WIN32_ERROR.ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT;
pub const ERROR_CLUSTER_OLD_VERSION = WIN32_ERROR.ERROR_CLUSTER_OLD_VERSION;
pub const ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME = WIN32_ERROR.ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME;
pub const ERROR_CLUSTER_NO_NET_ADAPTERS = WIN32_ERROR.ERROR_CLUSTER_NO_NET_ADAPTERS;
pub const ERROR_CLUSTER_POISONED = WIN32_ERROR.ERROR_CLUSTER_POISONED;
pub const ERROR_CLUSTER_GROUP_MOVING = WIN32_ERROR.ERROR_CLUSTER_GROUP_MOVING;
pub const ERROR_CLUSTER_RESOURCE_TYPE_BUSY = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_TYPE_BUSY;
pub const ERROR_RESOURCE_CALL_TIMED_OUT = WIN32_ERROR.ERROR_RESOURCE_CALL_TIMED_OUT;
pub const ERROR_INVALID_CLUSTER_IPV6_ADDRESS = WIN32_ERROR.ERROR_INVALID_CLUSTER_IPV6_ADDRESS;
pub const ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION = WIN32_ERROR.ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION;
pub const ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS = WIN32_ERROR.ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS;
pub const ERROR_CLUSTER_PARTIAL_SEND = WIN32_ERROR.ERROR_CLUSTER_PARTIAL_SEND;
pub const ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION = WIN32_ERROR.ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION;
pub const ERROR_CLUSTER_INVALID_STRING_TERMINATION = WIN32_ERROR.ERROR_CLUSTER_INVALID_STRING_TERMINATION;
pub const ERROR_CLUSTER_INVALID_STRING_FORMAT = WIN32_ERROR.ERROR_CLUSTER_INVALID_STRING_FORMAT;
pub const ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS = WIN32_ERROR.ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS;
pub const ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS = WIN32_ERROR.ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS;
pub const ERROR_CLUSTER_NULL_DATA = WIN32_ERROR.ERROR_CLUSTER_NULL_DATA;
pub const ERROR_CLUSTER_PARTIAL_READ = WIN32_ERROR.ERROR_CLUSTER_PARTIAL_READ;
pub const ERROR_CLUSTER_PARTIAL_WRITE = WIN32_ERROR.ERROR_CLUSTER_PARTIAL_WRITE;
pub const ERROR_CLUSTER_CANT_DESERIALIZE_DATA = WIN32_ERROR.ERROR_CLUSTER_CANT_DESERIALIZE_DATA;
pub const ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT = WIN32_ERROR.ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT;
pub const ERROR_CLUSTER_NO_QUORUM = WIN32_ERROR.ERROR_CLUSTER_NO_QUORUM;
pub const ERROR_CLUSTER_INVALID_IPV6_NETWORK = WIN32_ERROR.ERROR_CLUSTER_INVALID_IPV6_NETWORK;
pub const ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK = WIN32_ERROR.ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK;
pub const ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP = WIN32_ERROR.ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP;
pub const ERROR_DEPENDENCY_TREE_TOO_COMPLEX = WIN32_ERROR.ERROR_DEPENDENCY_TREE_TOO_COMPLEX;
pub const ERROR_EXCEPTION_IN_RESOURCE_CALL = WIN32_ERROR.ERROR_EXCEPTION_IN_RESOURCE_CALL;
pub const ERROR_CLUSTER_RHS_FAILED_INITIALIZATION = WIN32_ERROR.ERROR_CLUSTER_RHS_FAILED_INITIALIZATION;
pub const ERROR_CLUSTER_NOT_INSTALLED = WIN32_ERROR.ERROR_CLUSTER_NOT_INSTALLED;
pub const ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE = WIN32_ERROR.ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE;
pub const ERROR_CLUSTER_MAX_NODES_IN_CLUSTER = WIN32_ERROR.ERROR_CLUSTER_MAX_NODES_IN_CLUSTER;
pub const ERROR_CLUSTER_TOO_MANY_NODES = WIN32_ERROR.ERROR_CLUSTER_TOO_MANY_NODES;
pub const ERROR_CLUSTER_OBJECT_ALREADY_USED = WIN32_ERROR.ERROR_CLUSTER_OBJECT_ALREADY_USED;
pub const ERROR_NONCORE_GROUPS_FOUND = WIN32_ERROR.ERROR_NONCORE_GROUPS_FOUND;
pub const ERROR_FILE_SHARE_RESOURCE_CONFLICT = WIN32_ERROR.ERROR_FILE_SHARE_RESOURCE_CONFLICT;
pub const ERROR_CLUSTER_EVICT_INVALID_REQUEST = WIN32_ERROR.ERROR_CLUSTER_EVICT_INVALID_REQUEST;
pub const ERROR_CLUSTER_SINGLETON_RESOURCE = WIN32_ERROR.ERROR_CLUSTER_SINGLETON_RESOURCE;
pub const ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE = WIN32_ERROR.ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE;
pub const ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED;
pub const ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR;
pub const ERROR_CLUSTER_GROUP_BUSY = WIN32_ERROR.ERROR_CLUSTER_GROUP_BUSY;
pub const ERROR_CLUSTER_NOT_SHARED_VOLUME = WIN32_ERROR.ERROR_CLUSTER_NOT_SHARED_VOLUME;
pub const ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR = WIN32_ERROR.ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR;
pub const ERROR_CLUSTER_SHARED_VOLUMES_IN_USE = WIN32_ERROR.ERROR_CLUSTER_SHARED_VOLUMES_IN_USE;
pub const ERROR_CLUSTER_USE_SHARED_VOLUMES_API = WIN32_ERROR.ERROR_CLUSTER_USE_SHARED_VOLUMES_API;
pub const ERROR_CLUSTER_BACKUP_IN_PROGRESS = WIN32_ERROR.ERROR_CLUSTER_BACKUP_IN_PROGRESS;
pub const ERROR_NON_CSV_PATH = WIN32_ERROR.ERROR_NON_CSV_PATH;
pub const ERROR_CSV_VOLUME_NOT_LOCAL = WIN32_ERROR.ERROR_CSV_VOLUME_NOT_LOCAL;
pub const ERROR_CLUSTER_WATCHDOG_TERMINATING = WIN32_ERROR.ERROR_CLUSTER_WATCHDOG_TERMINATING;
pub const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_INCOMPATIBLE_NODES = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_VETOED_MOVE_INCOMPATIBLE_NODES;
pub const ERROR_CLUSTER_INVALID_NODE_WEIGHT = WIN32_ERROR.ERROR_CLUSTER_INVALID_NODE_WEIGHT;
pub const ERROR_CLUSTER_RESOURCE_VETOED_CALL = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_VETOED_CALL;
pub const ERROR_RESMON_SYSTEM_RESOURCES_LACKING = WIN32_ERROR.ERROR_RESMON_SYSTEM_RESOURCES_LACKING;
pub const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_DESTINATION = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_DESTINATION;
pub const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_SOURCE = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_SOURCE;
pub const ERROR_CLUSTER_GROUP_QUEUED = WIN32_ERROR.ERROR_CLUSTER_GROUP_QUEUED;
pub const ERROR_CLUSTER_RESOURCE_LOCKED_STATUS = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_LOCKED_STATUS;
pub const ERROR_CLUSTER_SHARED_VOLUME_FAILOVER_NOT_ALLOWED = WIN32_ERROR.ERROR_CLUSTER_SHARED_VOLUME_FAILOVER_NOT_ALLOWED;
pub const ERROR_CLUSTER_NODE_DRAIN_IN_PROGRESS = WIN32_ERROR.ERROR_CLUSTER_NODE_DRAIN_IN_PROGRESS;
pub const ERROR_CLUSTER_DISK_NOT_CONNECTED = WIN32_ERROR.ERROR_CLUSTER_DISK_NOT_CONNECTED;
pub const ERROR_DISK_NOT_CSV_CAPABLE = WIN32_ERROR.ERROR_DISK_NOT_CSV_CAPABLE;
pub const ERROR_RESOURCE_NOT_IN_AVAILABLE_STORAGE = WIN32_ERROR.ERROR_RESOURCE_NOT_IN_AVAILABLE_STORAGE;
pub const ERROR_CLUSTER_SHARED_VOLUME_REDIRECTED = WIN32_ERROR.ERROR_CLUSTER_SHARED_VOLUME_REDIRECTED;
pub const ERROR_CLUSTER_SHARED_VOLUME_NOT_REDIRECTED = WIN32_ERROR.ERROR_CLUSTER_SHARED_VOLUME_NOT_REDIRECTED;
pub const ERROR_CLUSTER_CANNOT_RETURN_PROPERTIES = WIN32_ERROR.ERROR_CLUSTER_CANNOT_RETURN_PROPERTIES;
pub const ERROR_CLUSTER_RESOURCE_CONTAINS_UNSUPPORTED_DIFF_AREA_FOR_SHARED_VOLUMES = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_CONTAINS_UNSUPPORTED_DIFF_AREA_FOR_SHARED_VOLUMES;
pub const ERROR_CLUSTER_RESOURCE_IS_IN_MAINTENANCE_MODE = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_IS_IN_MAINTENANCE_MODE;
pub const ERROR_CLUSTER_AFFINITY_CONFLICT = WIN32_ERROR.ERROR_CLUSTER_AFFINITY_CONFLICT;
pub const ERROR_CLUSTER_RESOURCE_IS_REPLICA_VIRTUAL_MACHINE = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_IS_REPLICA_VIRTUAL_MACHINE;
pub const ERROR_CLUSTER_UPGRADE_INCOMPATIBLE_VERSIONS = WIN32_ERROR.ERROR_CLUSTER_UPGRADE_INCOMPATIBLE_VERSIONS;
pub const ERROR_CLUSTER_UPGRADE_FIX_QUORUM_NOT_SUPPORTED = WIN32_ERROR.ERROR_CLUSTER_UPGRADE_FIX_QUORUM_NOT_SUPPORTED;
pub const ERROR_CLUSTER_UPGRADE_RESTART_REQUIRED = WIN32_ERROR.ERROR_CLUSTER_UPGRADE_RESTART_REQUIRED;
pub const ERROR_CLUSTER_UPGRADE_IN_PROGRESS = WIN32_ERROR.ERROR_CLUSTER_UPGRADE_IN_PROGRESS;
pub const ERROR_CLUSTER_UPGRADE_INCOMPLETE = WIN32_ERROR.ERROR_CLUSTER_UPGRADE_INCOMPLETE;
pub const ERROR_CLUSTER_NODE_IN_GRACE_PERIOD = WIN32_ERROR.ERROR_CLUSTER_NODE_IN_GRACE_PERIOD;
pub const ERROR_CLUSTER_CSV_IO_PAUSE_TIMEOUT = WIN32_ERROR.ERROR_CLUSTER_CSV_IO_PAUSE_TIMEOUT;
pub const ERROR_NODE_NOT_ACTIVE_CLUSTER_MEMBER = WIN32_ERROR.ERROR_NODE_NOT_ACTIVE_CLUSTER_MEMBER;
pub const ERROR_CLUSTER_RESOURCE_NOT_MONITORED = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_NOT_MONITORED;
pub const ERROR_CLUSTER_RESOURCE_DOES_NOT_SUPPORT_UNMONITORED = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_DOES_NOT_SUPPORT_UNMONITORED;
pub const ERROR_CLUSTER_RESOURCE_IS_REPLICATED = WIN32_ERROR.ERROR_CLUSTER_RESOURCE_IS_REPLICATED;
pub const ERROR_CLUSTER_NODE_ISOLATED = WIN32_ERROR.ERROR_CLUSTER_NODE_ISOLATED;
pub const ERROR_CLUSTER_NODE_QUARANTINED = WIN32_ERROR.ERROR_CLUSTER_NODE_QUARANTINED;
pub const ERROR_CLUSTER_DATABASE_UPDATE_CONDITION_FAILED = WIN32_ERROR.ERROR_CLUSTER_DATABASE_UPDATE_CONDITION_FAILED;
pub const ERROR_CLUSTER_SPACE_DEGRADED = WIN32_ERROR.ERROR_CLUSTER_SPACE_DEGRADED;
pub const ERROR_CLUSTER_TOKEN_DELEGATION_NOT_SUPPORTED = WIN32_ERROR.ERROR_CLUSTER_TOKEN_DELEGATION_NOT_SUPPORTED;
pub const ERROR_CLUSTER_CSV_INVALID_HANDLE = WIN32_ERROR.ERROR_CLUSTER_CSV_INVALID_HANDLE;
pub const ERROR_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR = WIN32_ERROR.ERROR_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR;
pub const ERROR_GROUPSET_NOT_AVAILABLE = WIN32_ERROR.ERROR_GROUPSET_NOT_AVAILABLE;
pub const ERROR_GROUPSET_NOT_FOUND = WIN32_ERROR.ERROR_GROUPSET_NOT_FOUND;
pub const ERROR_GROUPSET_CANT_PROVIDE = WIN32_ERROR.ERROR_GROUPSET_CANT_PROVIDE;
pub const ERROR_CLUSTER_FAULT_DOMAIN_PARENT_NOT_FOUND = WIN32_ERROR.ERROR_CLUSTER_FAULT_DOMAIN_PARENT_NOT_FOUND;
pub const ERROR_CLUSTER_FAULT_DOMAIN_INVALID_HIERARCHY = WIN32_ERROR.ERROR_CLUSTER_FAULT_DOMAIN_INVALID_HIERARCHY;
pub const ERROR_CLUSTER_FAULT_DOMAIN_FAILED_S2D_VALIDATION = WIN32_ERROR.ERROR_CLUSTER_FAULT_DOMAIN_FAILED_S2D_VALIDATION;
pub const ERROR_CLUSTER_FAULT_DOMAIN_S2D_CONNECTIVITY_LOSS = WIN32_ERROR.ERROR_CLUSTER_FAULT_DOMAIN_S2D_CONNECTIVITY_LOSS;
pub const ERROR_CLUSTER_INVALID_INFRASTRUCTURE_FILESERVER_NAME = WIN32_ERROR.ERROR_CLUSTER_INVALID_INFRASTRUCTURE_FILESERVER_NAME;
pub const ERROR_CLUSTERSET_MANAGEMENT_CLUSTER_UNREACHABLE = WIN32_ERROR.ERROR_CLUSTERSET_MANAGEMENT_CLUSTER_UNREACHABLE;
pub const ERROR_ENCRYPTION_FAILED = WIN32_ERROR.ERROR_ENCRYPTION_FAILED;
pub const ERROR_DECRYPTION_FAILED = WIN32_ERROR.ERROR_DECRYPTION_FAILED;
pub const ERROR_FILE_ENCRYPTED = WIN32_ERROR.ERROR_FILE_ENCRYPTED;
pub const ERROR_NO_RECOVERY_POLICY = WIN32_ERROR.ERROR_NO_RECOVERY_POLICY;
pub const ERROR_NO_EFS = WIN32_ERROR.ERROR_NO_EFS;
pub const ERROR_WRONG_EFS = WIN32_ERROR.ERROR_WRONG_EFS;
pub const ERROR_NO_USER_KEYS = WIN32_ERROR.ERROR_NO_USER_KEYS;
pub const ERROR_FILE_NOT_ENCRYPTED = WIN32_ERROR.ERROR_FILE_NOT_ENCRYPTED;
pub const ERROR_NOT_EXPORT_FORMAT = WIN32_ERROR.ERROR_NOT_EXPORT_FORMAT;
pub const ERROR_FILE_READ_ONLY = WIN32_ERROR.ERROR_FILE_READ_ONLY;
pub const ERROR_DIR_EFS_DISALLOWED = WIN32_ERROR.ERROR_DIR_EFS_DISALLOWED;
pub const ERROR_EFS_SERVER_NOT_TRUSTED = WIN32_ERROR.ERROR_EFS_SERVER_NOT_TRUSTED;
pub const ERROR_BAD_RECOVERY_POLICY = WIN32_ERROR.ERROR_BAD_RECOVERY_POLICY;
pub const ERROR_EFS_ALG_BLOB_TOO_BIG = WIN32_ERROR.ERROR_EFS_ALG_BLOB_TOO_BIG;
pub const ERROR_VOLUME_NOT_SUPPORT_EFS = WIN32_ERROR.ERROR_VOLUME_NOT_SUPPORT_EFS;
pub const ERROR_EFS_DISABLED = WIN32_ERROR.ERROR_EFS_DISABLED;
pub const ERROR_EFS_VERSION_NOT_SUPPORT = WIN32_ERROR.ERROR_EFS_VERSION_NOT_SUPPORT;
pub const ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE = WIN32_ERROR.ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE;
pub const ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER = WIN32_ERROR.ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER;
pub const ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE = WIN32_ERROR.ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE;
pub const ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE = WIN32_ERROR.ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE;
pub const ERROR_CS_ENCRYPTION_FILE_NOT_CSE = WIN32_ERROR.ERROR_CS_ENCRYPTION_FILE_NOT_CSE;
pub const ERROR_ENCRYPTION_POLICY_DENIES_OPERATION = WIN32_ERROR.ERROR_ENCRYPTION_POLICY_DENIES_OPERATION;
pub const ERROR_WIP_ENCRYPTION_FAILED = WIN32_ERROR.ERROR_WIP_ENCRYPTION_FAILED;
pub const ERROR_NO_BROWSER_SERVERS_FOUND = WIN32_ERROR.ERROR_NO_BROWSER_SERVERS_FOUND;
pub const ERROR_CLUSTER_OBJECT_IS_CLUSTER_SET_VM = WIN32_ERROR.ERROR_CLUSTER_OBJECT_IS_CLUSTER_SET_VM;
pub const ERROR_LOG_SECTOR_INVALID = WIN32_ERROR.ERROR_LOG_SECTOR_INVALID;
pub const ERROR_LOG_SECTOR_PARITY_INVALID = WIN32_ERROR.ERROR_LOG_SECTOR_PARITY_INVALID;
pub const ERROR_LOG_SECTOR_REMAPPED = WIN32_ERROR.ERROR_LOG_SECTOR_REMAPPED;
pub const ERROR_LOG_BLOCK_INCOMPLETE = WIN32_ERROR.ERROR_LOG_BLOCK_INCOMPLETE;
pub const ERROR_LOG_INVALID_RANGE = WIN32_ERROR.ERROR_LOG_INVALID_RANGE;
pub const ERROR_LOG_BLOCKS_EXHAUSTED = WIN32_ERROR.ERROR_LOG_BLOCKS_EXHAUSTED;
pub const ERROR_LOG_READ_CONTEXT_INVALID = WIN32_ERROR.ERROR_LOG_READ_CONTEXT_INVALID;
pub const ERROR_LOG_RESTART_INVALID = WIN32_ERROR.ERROR_LOG_RESTART_INVALID;
pub const ERROR_LOG_BLOCK_VERSION = WIN32_ERROR.ERROR_LOG_BLOCK_VERSION;
pub const ERROR_LOG_BLOCK_INVALID = WIN32_ERROR.ERROR_LOG_BLOCK_INVALID;
pub const ERROR_LOG_READ_MODE_INVALID = WIN32_ERROR.ERROR_LOG_READ_MODE_INVALID;
pub const ERROR_LOG_NO_RESTART = WIN32_ERROR.ERROR_LOG_NO_RESTART;
pub const ERROR_LOG_METADATA_CORRUPT = WIN32_ERROR.ERROR_LOG_METADATA_CORRUPT;
pub const ERROR_LOG_METADATA_INVALID = WIN32_ERROR.ERROR_LOG_METADATA_INVALID;
pub const ERROR_LOG_METADATA_INCONSISTENT = WIN32_ERROR.ERROR_LOG_METADATA_INCONSISTENT;
pub const ERROR_LOG_RESERVATION_INVALID = WIN32_ERROR.ERROR_LOG_RESERVATION_INVALID;
pub const ERROR_LOG_CANT_DELETE = WIN32_ERROR.ERROR_LOG_CANT_DELETE;
pub const ERROR_LOG_CONTAINER_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_LOG_CONTAINER_LIMIT_EXCEEDED;
pub const ERROR_LOG_START_OF_LOG = WIN32_ERROR.ERROR_LOG_START_OF_LOG;
pub const ERROR_LOG_POLICY_ALREADY_INSTALLED = WIN32_ERROR.ERROR_LOG_POLICY_ALREADY_INSTALLED;
pub const ERROR_LOG_POLICY_NOT_INSTALLED = WIN32_ERROR.ERROR_LOG_POLICY_NOT_INSTALLED;
pub const ERROR_LOG_POLICY_INVALID = WIN32_ERROR.ERROR_LOG_POLICY_INVALID;
pub const ERROR_LOG_POLICY_CONFLICT = WIN32_ERROR.ERROR_LOG_POLICY_CONFLICT;
pub const ERROR_LOG_PINNED_ARCHIVE_TAIL = WIN32_ERROR.ERROR_LOG_PINNED_ARCHIVE_TAIL;
pub const ERROR_LOG_RECORD_NONEXISTENT = WIN32_ERROR.ERROR_LOG_RECORD_NONEXISTENT;
pub const ERROR_LOG_RECORDS_RESERVED_INVALID = WIN32_ERROR.ERROR_LOG_RECORDS_RESERVED_INVALID;
pub const ERROR_LOG_SPACE_RESERVED_INVALID = WIN32_ERROR.ERROR_LOG_SPACE_RESERVED_INVALID;
pub const ERROR_LOG_TAIL_INVALID = WIN32_ERROR.ERROR_LOG_TAIL_INVALID;
pub const ERROR_LOG_FULL = WIN32_ERROR.ERROR_LOG_FULL;
pub const ERROR_COULD_NOT_RESIZE_LOG = WIN32_ERROR.ERROR_COULD_NOT_RESIZE_LOG;
pub const ERROR_LOG_MULTIPLEXED = WIN32_ERROR.ERROR_LOG_MULTIPLEXED;
pub const ERROR_LOG_DEDICATED = WIN32_ERROR.ERROR_LOG_DEDICATED;
pub const ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS = WIN32_ERROR.ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS;
pub const ERROR_LOG_ARCHIVE_IN_PROGRESS = WIN32_ERROR.ERROR_LOG_ARCHIVE_IN_PROGRESS;
pub const ERROR_LOG_EPHEMERAL = WIN32_ERROR.ERROR_LOG_EPHEMERAL;
pub const ERROR_LOG_NOT_ENOUGH_CONTAINERS = WIN32_ERROR.ERROR_LOG_NOT_ENOUGH_CONTAINERS;
pub const ERROR_LOG_CLIENT_ALREADY_REGISTERED = WIN32_ERROR.ERROR_LOG_CLIENT_ALREADY_REGISTERED;
pub const ERROR_LOG_CLIENT_NOT_REGISTERED = WIN32_ERROR.ERROR_LOG_CLIENT_NOT_REGISTERED;
pub const ERROR_LOG_FULL_HANDLER_IN_PROGRESS = WIN32_ERROR.ERROR_LOG_FULL_HANDLER_IN_PROGRESS;
pub const ERROR_LOG_CONTAINER_READ_FAILED = WIN32_ERROR.ERROR_LOG_CONTAINER_READ_FAILED;
pub const ERROR_LOG_CONTAINER_WRITE_FAILED = WIN32_ERROR.ERROR_LOG_CONTAINER_WRITE_FAILED;
pub const ERROR_LOG_CONTAINER_OPEN_FAILED = WIN32_ERROR.ERROR_LOG_CONTAINER_OPEN_FAILED;
pub const ERROR_LOG_CONTAINER_STATE_INVALID = WIN32_ERROR.ERROR_LOG_CONTAINER_STATE_INVALID;
pub const ERROR_LOG_STATE_INVALID = WIN32_ERROR.ERROR_LOG_STATE_INVALID;
pub const ERROR_LOG_PINNED = WIN32_ERROR.ERROR_LOG_PINNED;
pub const ERROR_LOG_METADATA_FLUSH_FAILED = WIN32_ERROR.ERROR_LOG_METADATA_FLUSH_FAILED;
pub const ERROR_LOG_INCONSISTENT_SECURITY = WIN32_ERROR.ERROR_LOG_INCONSISTENT_SECURITY;
pub const ERROR_LOG_APPENDED_FLUSH_FAILED = WIN32_ERROR.ERROR_LOG_APPENDED_FLUSH_FAILED;
pub const ERROR_LOG_PINNED_RESERVATION = WIN32_ERROR.ERROR_LOG_PINNED_RESERVATION;
pub const ERROR_INVALID_TRANSACTION = WIN32_ERROR.ERROR_INVALID_TRANSACTION;
pub const ERROR_TRANSACTION_NOT_ACTIVE = WIN32_ERROR.ERROR_TRANSACTION_NOT_ACTIVE;
pub const ERROR_TRANSACTION_REQUEST_NOT_VALID = WIN32_ERROR.ERROR_TRANSACTION_REQUEST_NOT_VALID;
pub const ERROR_TRANSACTION_NOT_REQUESTED = WIN32_ERROR.ERROR_TRANSACTION_NOT_REQUESTED;
pub const ERROR_TRANSACTION_ALREADY_ABORTED = WIN32_ERROR.ERROR_TRANSACTION_ALREADY_ABORTED;
pub const ERROR_TRANSACTION_ALREADY_COMMITTED = WIN32_ERROR.ERROR_TRANSACTION_ALREADY_COMMITTED;
pub const ERROR_TM_INITIALIZATION_FAILED = WIN32_ERROR.ERROR_TM_INITIALIZATION_FAILED;
pub const ERROR_RESOURCEMANAGER_READ_ONLY = WIN32_ERROR.ERROR_RESOURCEMANAGER_READ_ONLY;
pub const ERROR_TRANSACTION_NOT_JOINED = WIN32_ERROR.ERROR_TRANSACTION_NOT_JOINED;
pub const ERROR_TRANSACTION_SUPERIOR_EXISTS = WIN32_ERROR.ERROR_TRANSACTION_SUPERIOR_EXISTS;
pub const ERROR_CRM_PROTOCOL_ALREADY_EXISTS = WIN32_ERROR.ERROR_CRM_PROTOCOL_ALREADY_EXISTS;
pub const ERROR_TRANSACTION_PROPAGATION_FAILED = WIN32_ERROR.ERROR_TRANSACTION_PROPAGATION_FAILED;
pub const ERROR_CRM_PROTOCOL_NOT_FOUND = WIN32_ERROR.ERROR_CRM_PROTOCOL_NOT_FOUND;
pub const ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER = WIN32_ERROR.ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER;
pub const ERROR_CURRENT_TRANSACTION_NOT_VALID = WIN32_ERROR.ERROR_CURRENT_TRANSACTION_NOT_VALID;
pub const ERROR_TRANSACTION_NOT_FOUND = WIN32_ERROR.ERROR_TRANSACTION_NOT_FOUND;
pub const ERROR_RESOURCEMANAGER_NOT_FOUND = WIN32_ERROR.ERROR_RESOURCEMANAGER_NOT_FOUND;
pub const ERROR_ENLISTMENT_NOT_FOUND = WIN32_ERROR.ERROR_ENLISTMENT_NOT_FOUND;
pub const ERROR_TRANSACTIONMANAGER_NOT_FOUND = WIN32_ERROR.ERROR_TRANSACTIONMANAGER_NOT_FOUND;
pub const ERROR_TRANSACTIONMANAGER_NOT_ONLINE = WIN32_ERROR.ERROR_TRANSACTIONMANAGER_NOT_ONLINE;
pub const ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION = WIN32_ERROR.ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION;
pub const ERROR_TRANSACTION_NOT_ROOT = WIN32_ERROR.ERROR_TRANSACTION_NOT_ROOT;
pub const ERROR_TRANSACTION_OBJECT_EXPIRED = WIN32_ERROR.ERROR_TRANSACTION_OBJECT_EXPIRED;
pub const ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED = WIN32_ERROR.ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED;
pub const ERROR_TRANSACTION_RECORD_TOO_LONG = WIN32_ERROR.ERROR_TRANSACTION_RECORD_TOO_LONG;
pub const ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED = WIN32_ERROR.ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED;
pub const ERROR_TRANSACTION_INTEGRITY_VIOLATED = WIN32_ERROR.ERROR_TRANSACTION_INTEGRITY_VIOLATED;
pub const ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH = WIN32_ERROR.ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH;
pub const ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT = WIN32_ERROR.ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT;
pub const ERROR_TRANSACTION_MUST_WRITETHROUGH = WIN32_ERROR.ERROR_TRANSACTION_MUST_WRITETHROUGH;
pub const ERROR_TRANSACTION_NO_SUPERIOR = WIN32_ERROR.ERROR_TRANSACTION_NO_SUPERIOR;
pub const ERROR_HEURISTIC_DAMAGE_POSSIBLE = WIN32_ERROR.ERROR_HEURISTIC_DAMAGE_POSSIBLE;
pub const ERROR_TRANSACTIONAL_CONFLICT = WIN32_ERROR.ERROR_TRANSACTIONAL_CONFLICT;
pub const ERROR_RM_NOT_ACTIVE = WIN32_ERROR.ERROR_RM_NOT_ACTIVE;
pub const ERROR_RM_METADATA_CORRUPT = WIN32_ERROR.ERROR_RM_METADATA_CORRUPT;
pub const ERROR_DIRECTORY_NOT_RM = WIN32_ERROR.ERROR_DIRECTORY_NOT_RM;
pub const ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE = WIN32_ERROR.ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE;
pub const ERROR_LOG_RESIZE_INVALID_SIZE = WIN32_ERROR.ERROR_LOG_RESIZE_INVALID_SIZE;
pub const ERROR_OBJECT_NO_LONGER_EXISTS = WIN32_ERROR.ERROR_OBJECT_NO_LONGER_EXISTS;
pub const ERROR_STREAM_MINIVERSION_NOT_FOUND = WIN32_ERROR.ERROR_STREAM_MINIVERSION_NOT_FOUND;
pub const ERROR_STREAM_MINIVERSION_NOT_VALID = WIN32_ERROR.ERROR_STREAM_MINIVERSION_NOT_VALID;
pub const ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION = WIN32_ERROR.ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION;
pub const ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT = WIN32_ERROR.ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT;
pub const ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS = WIN32_ERROR.ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS;
pub const ERROR_REMOTE_FILE_VERSION_MISMATCH = WIN32_ERROR.ERROR_REMOTE_FILE_VERSION_MISMATCH;
pub const ERROR_HANDLE_NO_LONGER_VALID = WIN32_ERROR.ERROR_HANDLE_NO_LONGER_VALID;
pub const ERROR_NO_TXF_METADATA = WIN32_ERROR.ERROR_NO_TXF_METADATA;
pub const ERROR_LOG_CORRUPTION_DETECTED = WIN32_ERROR.ERROR_LOG_CORRUPTION_DETECTED;
pub const ERROR_CANT_RECOVER_WITH_HANDLE_OPEN = WIN32_ERROR.ERROR_CANT_RECOVER_WITH_HANDLE_OPEN;
pub const ERROR_RM_DISCONNECTED = WIN32_ERROR.ERROR_RM_DISCONNECTED;
pub const ERROR_ENLISTMENT_NOT_SUPERIOR = WIN32_ERROR.ERROR_ENLISTMENT_NOT_SUPERIOR;
pub const ERROR_RECOVERY_NOT_NEEDED = WIN32_ERROR.ERROR_RECOVERY_NOT_NEEDED;
pub const ERROR_RM_ALREADY_STARTED = WIN32_ERROR.ERROR_RM_ALREADY_STARTED;
pub const ERROR_FILE_IDENTITY_NOT_PERSISTENT = WIN32_ERROR.ERROR_FILE_IDENTITY_NOT_PERSISTENT;
pub const ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY = WIN32_ERROR.ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY;
pub const ERROR_CANT_CROSS_RM_BOUNDARY = WIN32_ERROR.ERROR_CANT_CROSS_RM_BOUNDARY;
pub const ERROR_TXF_DIR_NOT_EMPTY = WIN32_ERROR.ERROR_TXF_DIR_NOT_EMPTY;
pub const ERROR_INDOUBT_TRANSACTIONS_EXIST = WIN32_ERROR.ERROR_INDOUBT_TRANSACTIONS_EXIST;
pub const ERROR_TM_VOLATILE = WIN32_ERROR.ERROR_TM_VOLATILE;
pub const ERROR_ROLLBACK_TIMER_EXPIRED = WIN32_ERROR.ERROR_ROLLBACK_TIMER_EXPIRED;
pub const ERROR_TXF_ATTRIBUTE_CORRUPT = WIN32_ERROR.ERROR_TXF_ATTRIBUTE_CORRUPT;
pub const ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION = WIN32_ERROR.ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION;
pub const ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED = WIN32_ERROR.ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED;
pub const ERROR_LOG_GROWTH_FAILED = WIN32_ERROR.ERROR_LOG_GROWTH_FAILED;
pub const ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE = WIN32_ERROR.ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE;
pub const ERROR_TXF_METADATA_ALREADY_PRESENT = WIN32_ERROR.ERROR_TXF_METADATA_ALREADY_PRESENT;
pub const ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET = WIN32_ERROR.ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET;
pub const ERROR_TRANSACTION_REQUIRED_PROMOTION = WIN32_ERROR.ERROR_TRANSACTION_REQUIRED_PROMOTION;
pub const ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION = WIN32_ERROR.ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION;
pub const ERROR_TRANSACTIONS_NOT_FROZEN = WIN32_ERROR.ERROR_TRANSACTIONS_NOT_FROZEN;
pub const ERROR_TRANSACTION_FREEZE_IN_PROGRESS = WIN32_ERROR.ERROR_TRANSACTION_FREEZE_IN_PROGRESS;
pub const ERROR_NOT_SNAPSHOT_VOLUME = WIN32_ERROR.ERROR_NOT_SNAPSHOT_VOLUME;
pub const ERROR_NO_SAVEPOINT_WITH_OPEN_FILES = WIN32_ERROR.ERROR_NO_SAVEPOINT_WITH_OPEN_FILES;
pub const ERROR_DATA_LOST_REPAIR = WIN32_ERROR.ERROR_DATA_LOST_REPAIR;
pub const ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION = WIN32_ERROR.ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION;
pub const ERROR_TM_IDENTITY_MISMATCH = WIN32_ERROR.ERROR_TM_IDENTITY_MISMATCH;
pub const ERROR_FLOATED_SECTION = WIN32_ERROR.ERROR_FLOATED_SECTION;
pub const ERROR_CANNOT_ACCEPT_TRANSACTED_WORK = WIN32_ERROR.ERROR_CANNOT_ACCEPT_TRANSACTED_WORK;
pub const ERROR_CANNOT_ABORT_TRANSACTIONS = WIN32_ERROR.ERROR_CANNOT_ABORT_TRANSACTIONS;
pub const ERROR_BAD_CLUSTERS = WIN32_ERROR.ERROR_BAD_CLUSTERS;
pub const ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION = WIN32_ERROR.ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION;
pub const ERROR_VOLUME_DIRTY = WIN32_ERROR.ERROR_VOLUME_DIRTY;
pub const ERROR_NO_LINK_TRACKING_IN_TRANSACTION = WIN32_ERROR.ERROR_NO_LINK_TRACKING_IN_TRANSACTION;
pub const ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION = WIN32_ERROR.ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION;
pub const ERROR_EXPIRED_HANDLE = WIN32_ERROR.ERROR_EXPIRED_HANDLE;
pub const ERROR_TRANSACTION_NOT_ENLISTED = WIN32_ERROR.ERROR_TRANSACTION_NOT_ENLISTED;
pub const ERROR_CTX_WINSTATION_NAME_INVALID = WIN32_ERROR.ERROR_CTX_WINSTATION_NAME_INVALID;
pub const ERROR_CTX_INVALID_PD = WIN32_ERROR.ERROR_CTX_INVALID_PD;
pub const ERROR_CTX_PD_NOT_FOUND = WIN32_ERROR.ERROR_CTX_PD_NOT_FOUND;
pub const ERROR_CTX_WD_NOT_FOUND = WIN32_ERROR.ERROR_CTX_WD_NOT_FOUND;
pub const ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY = WIN32_ERROR.ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY;
pub const ERROR_CTX_SERVICE_NAME_COLLISION = WIN32_ERROR.ERROR_CTX_SERVICE_NAME_COLLISION;
pub const ERROR_CTX_CLOSE_PENDING = WIN32_ERROR.ERROR_CTX_CLOSE_PENDING;
pub const ERROR_CTX_NO_OUTBUF = WIN32_ERROR.ERROR_CTX_NO_OUTBUF;
pub const ERROR_CTX_MODEM_INF_NOT_FOUND = WIN32_ERROR.ERROR_CTX_MODEM_INF_NOT_FOUND;
pub const ERROR_CTX_INVALID_MODEMNAME = WIN32_ERROR.ERROR_CTX_INVALID_MODEMNAME;
pub const ERROR_CTX_MODEM_RESPONSE_ERROR = WIN32_ERROR.ERROR_CTX_MODEM_RESPONSE_ERROR;
pub const ERROR_CTX_MODEM_RESPONSE_TIMEOUT = WIN32_ERROR.ERROR_CTX_MODEM_RESPONSE_TIMEOUT;
pub const ERROR_CTX_MODEM_RESPONSE_NO_CARRIER = WIN32_ERROR.ERROR_CTX_MODEM_RESPONSE_NO_CARRIER;
pub const ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE = WIN32_ERROR.ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE;
pub const ERROR_CTX_MODEM_RESPONSE_BUSY = WIN32_ERROR.ERROR_CTX_MODEM_RESPONSE_BUSY;
pub const ERROR_CTX_MODEM_RESPONSE_VOICE = WIN32_ERROR.ERROR_CTX_MODEM_RESPONSE_VOICE;
pub const ERROR_CTX_TD_ERROR = WIN32_ERROR.ERROR_CTX_TD_ERROR;
pub const ERROR_CTX_WINSTATION_NOT_FOUND = WIN32_ERROR.ERROR_CTX_WINSTATION_NOT_FOUND;
pub const ERROR_CTX_WINSTATION_ALREADY_EXISTS = WIN32_ERROR.ERROR_CTX_WINSTATION_ALREADY_EXISTS;
pub const ERROR_CTX_WINSTATION_BUSY = WIN32_ERROR.ERROR_CTX_WINSTATION_BUSY;
pub const ERROR_CTX_BAD_VIDEO_MODE = WIN32_ERROR.ERROR_CTX_BAD_VIDEO_MODE;
pub const ERROR_CTX_GRAPHICS_INVALID = WIN32_ERROR.ERROR_CTX_GRAPHICS_INVALID;
pub const ERROR_CTX_LOGON_DISABLED = WIN32_ERROR.ERROR_CTX_LOGON_DISABLED;
pub const ERROR_CTX_NOT_CONSOLE = WIN32_ERROR.ERROR_CTX_NOT_CONSOLE;
pub const ERROR_CTX_CLIENT_QUERY_TIMEOUT = WIN32_ERROR.ERROR_CTX_CLIENT_QUERY_TIMEOUT;
pub const ERROR_CTX_CONSOLE_DISCONNECT = WIN32_ERROR.ERROR_CTX_CONSOLE_DISCONNECT;
pub const ERROR_CTX_CONSOLE_CONNECT = WIN32_ERROR.ERROR_CTX_CONSOLE_CONNECT;
pub const ERROR_CTX_SHADOW_DENIED = WIN32_ERROR.ERROR_CTX_SHADOW_DENIED;
pub const ERROR_CTX_WINSTATION_ACCESS_DENIED = WIN32_ERROR.ERROR_CTX_WINSTATION_ACCESS_DENIED;
pub const ERROR_CTX_INVALID_WD = WIN32_ERROR.ERROR_CTX_INVALID_WD;
pub const ERROR_CTX_SHADOW_INVALID = WIN32_ERROR.ERROR_CTX_SHADOW_INVALID;
pub const ERROR_CTX_SHADOW_DISABLED = WIN32_ERROR.ERROR_CTX_SHADOW_DISABLED;
pub const ERROR_CTX_CLIENT_LICENSE_IN_USE = WIN32_ERROR.ERROR_CTX_CLIENT_LICENSE_IN_USE;
pub const ERROR_CTX_CLIENT_LICENSE_NOT_SET = WIN32_ERROR.ERROR_CTX_CLIENT_LICENSE_NOT_SET;
pub const ERROR_CTX_LICENSE_NOT_AVAILABLE = WIN32_ERROR.ERROR_CTX_LICENSE_NOT_AVAILABLE;
pub const ERROR_CTX_LICENSE_CLIENT_INVALID = WIN32_ERROR.ERROR_CTX_LICENSE_CLIENT_INVALID;
pub const ERROR_CTX_LICENSE_EXPIRED = WIN32_ERROR.ERROR_CTX_LICENSE_EXPIRED;
pub const ERROR_CTX_SHADOW_NOT_RUNNING = WIN32_ERROR.ERROR_CTX_SHADOW_NOT_RUNNING;
pub const ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE = WIN32_ERROR.ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE;
pub const ERROR_ACTIVATION_COUNT_EXCEEDED = WIN32_ERROR.ERROR_ACTIVATION_COUNT_EXCEEDED;
pub const ERROR_CTX_WINSTATIONS_DISABLED = WIN32_ERROR.ERROR_CTX_WINSTATIONS_DISABLED;
pub const ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED = WIN32_ERROR.ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED;
pub const ERROR_CTX_SESSION_IN_USE = WIN32_ERROR.ERROR_CTX_SESSION_IN_USE;
pub const ERROR_CTX_NO_FORCE_LOGOFF = WIN32_ERROR.ERROR_CTX_NO_FORCE_LOGOFF;
pub const ERROR_CTX_ACCOUNT_RESTRICTION = WIN32_ERROR.ERROR_CTX_ACCOUNT_RESTRICTION;
pub const ERROR_RDP_PROTOCOL_ERROR = WIN32_ERROR.ERROR_RDP_PROTOCOL_ERROR;
pub const ERROR_CTX_CDM_CONNECT = WIN32_ERROR.ERROR_CTX_CDM_CONNECT;
pub const ERROR_CTX_CDM_DISCONNECT = WIN32_ERROR.ERROR_CTX_CDM_DISCONNECT;
pub const ERROR_CTX_SECURITY_LAYER_ERROR = WIN32_ERROR.ERROR_CTX_SECURITY_LAYER_ERROR;
pub const ERROR_TS_INCOMPATIBLE_SESSIONS = WIN32_ERROR.ERROR_TS_INCOMPATIBLE_SESSIONS;
pub const ERROR_TS_VIDEO_SUBSYSTEM_ERROR = WIN32_ERROR.ERROR_TS_VIDEO_SUBSYSTEM_ERROR;
pub const ERROR_DS_NOT_INSTALLED = WIN32_ERROR.ERROR_DS_NOT_INSTALLED;
pub const ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY = WIN32_ERROR.ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY;
pub const ERROR_DS_NO_ATTRIBUTE_OR_VALUE = WIN32_ERROR.ERROR_DS_NO_ATTRIBUTE_OR_VALUE;
pub const ERROR_DS_INVALID_ATTRIBUTE_SYNTAX = WIN32_ERROR.ERROR_DS_INVALID_ATTRIBUTE_SYNTAX;
pub const ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED = WIN32_ERROR.ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED;
pub const ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS = WIN32_ERROR.ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS;
pub const ERROR_DS_BUSY = WIN32_ERROR.ERROR_DS_BUSY;
pub const ERROR_DS_UNAVAILABLE = WIN32_ERROR.ERROR_DS_UNAVAILABLE;
pub const ERROR_DS_NO_RIDS_ALLOCATED = WIN32_ERROR.ERROR_DS_NO_RIDS_ALLOCATED;
pub const ERROR_DS_NO_MORE_RIDS = WIN32_ERROR.ERROR_DS_NO_MORE_RIDS;
pub const ERROR_DS_INCORRECT_ROLE_OWNER = WIN32_ERROR.ERROR_DS_INCORRECT_ROLE_OWNER;
pub const ERROR_DS_RIDMGR_INIT_ERROR = WIN32_ERROR.ERROR_DS_RIDMGR_INIT_ERROR;
pub const ERROR_DS_OBJ_CLASS_VIOLATION = WIN32_ERROR.ERROR_DS_OBJ_CLASS_VIOLATION;
pub const ERROR_DS_CANT_ON_NON_LEAF = WIN32_ERROR.ERROR_DS_CANT_ON_NON_LEAF;
pub const ERROR_DS_CANT_ON_RDN = WIN32_ERROR.ERROR_DS_CANT_ON_RDN;
pub const ERROR_DS_CANT_MOD_OBJ_CLASS = WIN32_ERROR.ERROR_DS_CANT_MOD_OBJ_CLASS;
pub const ERROR_DS_CROSS_DOM_MOVE_ERROR = WIN32_ERROR.ERROR_DS_CROSS_DOM_MOVE_ERROR;
pub const ERROR_DS_GC_NOT_AVAILABLE = WIN32_ERROR.ERROR_DS_GC_NOT_AVAILABLE;
pub const ERROR_SHARED_POLICY = WIN32_ERROR.ERROR_SHARED_POLICY;
pub const ERROR_POLICY_OBJECT_NOT_FOUND = WIN32_ERROR.ERROR_POLICY_OBJECT_NOT_FOUND;
pub const ERROR_POLICY_ONLY_IN_DS = WIN32_ERROR.ERROR_POLICY_ONLY_IN_DS;
pub const ERROR_PROMOTION_ACTIVE = WIN32_ERROR.ERROR_PROMOTION_ACTIVE;
pub const ERROR_NO_PROMOTION_ACTIVE = WIN32_ERROR.ERROR_NO_PROMOTION_ACTIVE;
pub const ERROR_DS_OPERATIONS_ERROR = WIN32_ERROR.ERROR_DS_OPERATIONS_ERROR;
pub const ERROR_DS_PROTOCOL_ERROR = WIN32_ERROR.ERROR_DS_PROTOCOL_ERROR;
pub const ERROR_DS_TIMELIMIT_EXCEEDED = WIN32_ERROR.ERROR_DS_TIMELIMIT_EXCEEDED;
pub const ERROR_DS_SIZELIMIT_EXCEEDED = WIN32_ERROR.ERROR_DS_SIZELIMIT_EXCEEDED;
pub const ERROR_DS_ADMIN_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_DS_ADMIN_LIMIT_EXCEEDED;
pub const ERROR_DS_COMPARE_FALSE = WIN32_ERROR.ERROR_DS_COMPARE_FALSE;
pub const ERROR_DS_COMPARE_TRUE = WIN32_ERROR.ERROR_DS_COMPARE_TRUE;
pub const ERROR_DS_AUTH_METHOD_NOT_SUPPORTED = WIN32_ERROR.ERROR_DS_AUTH_METHOD_NOT_SUPPORTED;
pub const ERROR_DS_STRONG_AUTH_REQUIRED = WIN32_ERROR.ERROR_DS_STRONG_AUTH_REQUIRED;
pub const ERROR_DS_INAPPROPRIATE_AUTH = WIN32_ERROR.ERROR_DS_INAPPROPRIATE_AUTH;
pub const ERROR_DS_AUTH_UNKNOWN = WIN32_ERROR.ERROR_DS_AUTH_UNKNOWN;
pub const ERROR_DS_REFERRAL = WIN32_ERROR.ERROR_DS_REFERRAL;
pub const ERROR_DS_UNAVAILABLE_CRIT_EXTENSION = WIN32_ERROR.ERROR_DS_UNAVAILABLE_CRIT_EXTENSION;
pub const ERROR_DS_CONFIDENTIALITY_REQUIRED = WIN32_ERROR.ERROR_DS_CONFIDENTIALITY_REQUIRED;
pub const ERROR_DS_INAPPROPRIATE_MATCHING = WIN32_ERROR.ERROR_DS_INAPPROPRIATE_MATCHING;
pub const ERROR_DS_CONSTRAINT_VIOLATION = WIN32_ERROR.ERROR_DS_CONSTRAINT_VIOLATION;
pub const ERROR_DS_NO_SUCH_OBJECT = WIN32_ERROR.ERROR_DS_NO_SUCH_OBJECT;
pub const ERROR_DS_ALIAS_PROBLEM = WIN32_ERROR.ERROR_DS_ALIAS_PROBLEM;
pub const ERROR_DS_INVALID_DN_SYNTAX = WIN32_ERROR.ERROR_DS_INVALID_DN_SYNTAX;
pub const ERROR_DS_IS_LEAF = WIN32_ERROR.ERROR_DS_IS_LEAF;
pub const ERROR_DS_ALIAS_DEREF_PROBLEM = WIN32_ERROR.ERROR_DS_ALIAS_DEREF_PROBLEM;
pub const ERROR_DS_UNWILLING_TO_PERFORM = WIN32_ERROR.ERROR_DS_UNWILLING_TO_PERFORM;
pub const ERROR_DS_LOOP_DETECT = WIN32_ERROR.ERROR_DS_LOOP_DETECT;
pub const ERROR_DS_NAMING_VIOLATION = WIN32_ERROR.ERROR_DS_NAMING_VIOLATION;
pub const ERROR_DS_OBJECT_RESULTS_TOO_LARGE = WIN32_ERROR.ERROR_DS_OBJECT_RESULTS_TOO_LARGE;
pub const ERROR_DS_AFFECTS_MULTIPLE_DSAS = WIN32_ERROR.ERROR_DS_AFFECTS_MULTIPLE_DSAS;
pub const ERROR_DS_SERVER_DOWN = WIN32_ERROR.ERROR_DS_SERVER_DOWN;
pub const ERROR_DS_LOCAL_ERROR = WIN32_ERROR.ERROR_DS_LOCAL_ERROR;
pub const ERROR_DS_ENCODING_ERROR = WIN32_ERROR.ERROR_DS_ENCODING_ERROR;
pub const ERROR_DS_DECODING_ERROR = WIN32_ERROR.ERROR_DS_DECODING_ERROR;
pub const ERROR_DS_FILTER_UNKNOWN = WIN32_ERROR.ERROR_DS_FILTER_UNKNOWN;
pub const ERROR_DS_PARAM_ERROR = WIN32_ERROR.ERROR_DS_PARAM_ERROR;
pub const ERROR_DS_NOT_SUPPORTED = WIN32_ERROR.ERROR_DS_NOT_SUPPORTED;
pub const ERROR_DS_NO_RESULTS_RETURNED = WIN32_ERROR.ERROR_DS_NO_RESULTS_RETURNED;
pub const ERROR_DS_CONTROL_NOT_FOUND = WIN32_ERROR.ERROR_DS_CONTROL_NOT_FOUND;
pub const ERROR_DS_CLIENT_LOOP = WIN32_ERROR.ERROR_DS_CLIENT_LOOP;
pub const ERROR_DS_REFERRAL_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_DS_REFERRAL_LIMIT_EXCEEDED;
pub const ERROR_DS_SORT_CONTROL_MISSING = WIN32_ERROR.ERROR_DS_SORT_CONTROL_MISSING;
pub const ERROR_DS_OFFSET_RANGE_ERROR = WIN32_ERROR.ERROR_DS_OFFSET_RANGE_ERROR;
pub const ERROR_DS_RIDMGR_DISABLED = WIN32_ERROR.ERROR_DS_RIDMGR_DISABLED;
pub const ERROR_DS_ROOT_MUST_BE_NC = WIN32_ERROR.ERROR_DS_ROOT_MUST_BE_NC;
pub const ERROR_DS_ADD_REPLICA_INHIBITED = WIN32_ERROR.ERROR_DS_ADD_REPLICA_INHIBITED;
pub const ERROR_DS_ATT_NOT_DEF_IN_SCHEMA = WIN32_ERROR.ERROR_DS_ATT_NOT_DEF_IN_SCHEMA;
pub const ERROR_DS_MAX_OBJ_SIZE_EXCEEDED = WIN32_ERROR.ERROR_DS_MAX_OBJ_SIZE_EXCEEDED;
pub const ERROR_DS_OBJ_STRING_NAME_EXISTS = WIN32_ERROR.ERROR_DS_OBJ_STRING_NAME_EXISTS;
pub const ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA = WIN32_ERROR.ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA;
pub const ERROR_DS_RDN_DOESNT_MATCH_SCHEMA = WIN32_ERROR.ERROR_DS_RDN_DOESNT_MATCH_SCHEMA;
pub const ERROR_DS_NO_REQUESTED_ATTS_FOUND = WIN32_ERROR.ERROR_DS_NO_REQUESTED_ATTS_FOUND;
pub const ERROR_DS_USER_BUFFER_TO_SMALL = WIN32_ERROR.ERROR_DS_USER_BUFFER_TO_SMALL;
pub const ERROR_DS_ATT_IS_NOT_ON_OBJ = WIN32_ERROR.ERROR_DS_ATT_IS_NOT_ON_OBJ;
pub const ERROR_DS_ILLEGAL_MOD_OPERATION = WIN32_ERROR.ERROR_DS_ILLEGAL_MOD_OPERATION;
pub const ERROR_DS_OBJ_TOO_LARGE = WIN32_ERROR.ERROR_DS_OBJ_TOO_LARGE;
pub const ERROR_DS_BAD_INSTANCE_TYPE = WIN32_ERROR.ERROR_DS_BAD_INSTANCE_TYPE;
pub const ERROR_DS_MASTERDSA_REQUIRED = WIN32_ERROR.ERROR_DS_MASTERDSA_REQUIRED;
pub const ERROR_DS_OBJECT_CLASS_REQUIRED = WIN32_ERROR.ERROR_DS_OBJECT_CLASS_REQUIRED;
pub const ERROR_DS_MISSING_REQUIRED_ATT = WIN32_ERROR.ERROR_DS_MISSING_REQUIRED_ATT;
pub const ERROR_DS_ATT_NOT_DEF_FOR_CLASS = WIN32_ERROR.ERROR_DS_ATT_NOT_DEF_FOR_CLASS;
pub const ERROR_DS_ATT_ALREADY_EXISTS = WIN32_ERROR.ERROR_DS_ATT_ALREADY_EXISTS;
pub const ERROR_DS_CANT_ADD_ATT_VALUES = WIN32_ERROR.ERROR_DS_CANT_ADD_ATT_VALUES;
pub const ERROR_DS_SINGLE_VALUE_CONSTRAINT = WIN32_ERROR.ERROR_DS_SINGLE_VALUE_CONSTRAINT;
pub const ERROR_DS_RANGE_CONSTRAINT = WIN32_ERROR.ERROR_DS_RANGE_CONSTRAINT;
pub const ERROR_DS_ATT_VAL_ALREADY_EXISTS = WIN32_ERROR.ERROR_DS_ATT_VAL_ALREADY_EXISTS;
pub const ERROR_DS_CANT_REM_MISSING_ATT = WIN32_ERROR.ERROR_DS_CANT_REM_MISSING_ATT;
pub const ERROR_DS_CANT_REM_MISSING_ATT_VAL = WIN32_ERROR.ERROR_DS_CANT_REM_MISSING_ATT_VAL;
pub const ERROR_DS_ROOT_CANT_BE_SUBREF = WIN32_ERROR.ERROR_DS_ROOT_CANT_BE_SUBREF;
pub const ERROR_DS_NO_CHAINING = WIN32_ERROR.ERROR_DS_NO_CHAINING;
pub const ERROR_DS_NO_CHAINED_EVAL = WIN32_ERROR.ERROR_DS_NO_CHAINED_EVAL;
pub const ERROR_DS_NO_PARENT_OBJECT = WIN32_ERROR.ERROR_DS_NO_PARENT_OBJECT;
pub const ERROR_DS_PARENT_IS_AN_ALIAS = WIN32_ERROR.ERROR_DS_PARENT_IS_AN_ALIAS;
pub const ERROR_DS_CANT_MIX_MASTER_AND_REPS = WIN32_ERROR.ERROR_DS_CANT_MIX_MASTER_AND_REPS;
pub const ERROR_DS_CHILDREN_EXIST = WIN32_ERROR.ERROR_DS_CHILDREN_EXIST;
pub const ERROR_DS_OBJ_NOT_FOUND = WIN32_ERROR.ERROR_DS_OBJ_NOT_FOUND;
pub const ERROR_DS_ALIASED_OBJ_MISSING = WIN32_ERROR.ERROR_DS_ALIASED_OBJ_MISSING;
pub const ERROR_DS_BAD_NAME_SYNTAX = WIN32_ERROR.ERROR_DS_BAD_NAME_SYNTAX;
pub const ERROR_DS_ALIAS_POINTS_TO_ALIAS = WIN32_ERROR.ERROR_DS_ALIAS_POINTS_TO_ALIAS;
pub const ERROR_DS_CANT_DEREF_ALIAS = WIN32_ERROR.ERROR_DS_CANT_DEREF_ALIAS;
pub const ERROR_DS_OUT_OF_SCOPE = WIN32_ERROR.ERROR_DS_OUT_OF_SCOPE;
pub const ERROR_DS_OBJECT_BEING_REMOVED = WIN32_ERROR.ERROR_DS_OBJECT_BEING_REMOVED;
pub const ERROR_DS_CANT_DELETE_DSA_OBJ = WIN32_ERROR.ERROR_DS_CANT_DELETE_DSA_OBJ;
pub const ERROR_DS_GENERIC_ERROR = WIN32_ERROR.ERROR_DS_GENERIC_ERROR;
pub const ERROR_DS_DSA_MUST_BE_INT_MASTER = WIN32_ERROR.ERROR_DS_DSA_MUST_BE_INT_MASTER;
pub const ERROR_DS_CLASS_NOT_DSA = WIN32_ERROR.ERROR_DS_CLASS_NOT_DSA;
pub const ERROR_DS_INSUFF_ACCESS_RIGHTS = WIN32_ERROR.ERROR_DS_INSUFF_ACCESS_RIGHTS;
pub const ERROR_DS_ILLEGAL_SUPERIOR = WIN32_ERROR.ERROR_DS_ILLEGAL_SUPERIOR;
pub const ERROR_DS_ATTRIBUTE_OWNED_BY_SAM = WIN32_ERROR.ERROR_DS_ATTRIBUTE_OWNED_BY_SAM;
pub const ERROR_DS_NAME_TOO_MANY_PARTS = WIN32_ERROR.ERROR_DS_NAME_TOO_MANY_PARTS;
pub const ERROR_DS_NAME_TOO_LONG = WIN32_ERROR.ERROR_DS_NAME_TOO_LONG;
pub const ERROR_DS_NAME_VALUE_TOO_LONG = WIN32_ERROR.ERROR_DS_NAME_VALUE_TOO_LONG;
pub const ERROR_DS_NAME_UNPARSEABLE = WIN32_ERROR.ERROR_DS_NAME_UNPARSEABLE;
pub const ERROR_DS_NAME_TYPE_UNKNOWN = WIN32_ERROR.ERROR_DS_NAME_TYPE_UNKNOWN;
pub const ERROR_DS_NOT_AN_OBJECT = WIN32_ERROR.ERROR_DS_NOT_AN_OBJECT;
pub const ERROR_DS_SEC_DESC_TOO_SHORT = WIN32_ERROR.ERROR_DS_SEC_DESC_TOO_SHORT;
pub const ERROR_DS_SEC_DESC_INVALID = WIN32_ERROR.ERROR_DS_SEC_DESC_INVALID;
pub const ERROR_DS_NO_DELETED_NAME = WIN32_ERROR.ERROR_DS_NO_DELETED_NAME;
pub const ERROR_DS_SUBREF_MUST_HAVE_PARENT = WIN32_ERROR.ERROR_DS_SUBREF_MUST_HAVE_PARENT;
pub const ERROR_DS_NCNAME_MUST_BE_NC = WIN32_ERROR.ERROR_DS_NCNAME_MUST_BE_NC;
pub const ERROR_DS_CANT_ADD_SYSTEM_ONLY = WIN32_ERROR.ERROR_DS_CANT_ADD_SYSTEM_ONLY;
pub const ERROR_DS_CLASS_MUST_BE_CONCRETE = WIN32_ERROR.ERROR_DS_CLASS_MUST_BE_CONCRETE;
pub const ERROR_DS_INVALID_DMD = WIN32_ERROR.ERROR_DS_INVALID_DMD;
pub const ERROR_DS_OBJ_GUID_EXISTS = WIN32_ERROR.ERROR_DS_OBJ_GUID_EXISTS;
pub const ERROR_DS_NOT_ON_BACKLINK = WIN32_ERROR.ERROR_DS_NOT_ON_BACKLINK;
pub const ERROR_DS_NO_CROSSREF_FOR_NC = WIN32_ERROR.ERROR_DS_NO_CROSSREF_FOR_NC;
pub const ERROR_DS_SHUTTING_DOWN = WIN32_ERROR.ERROR_DS_SHUTTING_DOWN;
pub const ERROR_DS_UNKNOWN_OPERATION = WIN32_ERROR.ERROR_DS_UNKNOWN_OPERATION;
pub const ERROR_DS_INVALID_ROLE_OWNER = WIN32_ERROR.ERROR_DS_INVALID_ROLE_OWNER;
pub const ERROR_DS_COULDNT_CONTACT_FSMO = WIN32_ERROR.ERROR_DS_COULDNT_CONTACT_FSMO;
pub const ERROR_DS_CROSS_NC_DN_RENAME = WIN32_ERROR.ERROR_DS_CROSS_NC_DN_RENAME;
pub const ERROR_DS_CANT_MOD_SYSTEM_ONLY = WIN32_ERROR.ERROR_DS_CANT_MOD_SYSTEM_ONLY;
pub const ERROR_DS_REPLICATOR_ONLY = WIN32_ERROR.ERROR_DS_REPLICATOR_ONLY;
pub const ERROR_DS_OBJ_CLASS_NOT_DEFINED = WIN32_ERROR.ERROR_DS_OBJ_CLASS_NOT_DEFINED;
pub const ERROR_DS_OBJ_CLASS_NOT_SUBCLASS = WIN32_ERROR.ERROR_DS_OBJ_CLASS_NOT_SUBCLASS;
pub const ERROR_DS_NAME_REFERENCE_INVALID = WIN32_ERROR.ERROR_DS_NAME_REFERENCE_INVALID;
pub const ERROR_DS_CROSS_REF_EXISTS = WIN32_ERROR.ERROR_DS_CROSS_REF_EXISTS;
pub const ERROR_DS_CANT_DEL_MASTER_CROSSREF = WIN32_ERROR.ERROR_DS_CANT_DEL_MASTER_CROSSREF;
pub const ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD = WIN32_ERROR.ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD;
pub const ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX = WIN32_ERROR.ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX;
pub const ERROR_DS_DUP_RDN = WIN32_ERROR.ERROR_DS_DUP_RDN;
pub const ERROR_DS_DUP_OID = WIN32_ERROR.ERROR_DS_DUP_OID;
pub const ERROR_DS_DUP_MAPI_ID = WIN32_ERROR.ERROR_DS_DUP_MAPI_ID;
pub const ERROR_DS_DUP_SCHEMA_ID_GUID = WIN32_ERROR.ERROR_DS_DUP_SCHEMA_ID_GUID;
pub const ERROR_DS_DUP_LDAP_DISPLAY_NAME = WIN32_ERROR.ERROR_DS_DUP_LDAP_DISPLAY_NAME;
pub const ERROR_DS_SEMANTIC_ATT_TEST = WIN32_ERROR.ERROR_DS_SEMANTIC_ATT_TEST;
pub const ERROR_DS_SYNTAX_MISMATCH = WIN32_ERROR.ERROR_DS_SYNTAX_MISMATCH;
pub const ERROR_DS_EXISTS_IN_MUST_HAVE = WIN32_ERROR.ERROR_DS_EXISTS_IN_MUST_HAVE;
pub const ERROR_DS_EXISTS_IN_MAY_HAVE = WIN32_ERROR.ERROR_DS_EXISTS_IN_MAY_HAVE;
pub const ERROR_DS_NONEXISTENT_MAY_HAVE = WIN32_ERROR.ERROR_DS_NONEXISTENT_MAY_HAVE;
pub const ERROR_DS_NONEXISTENT_MUST_HAVE = WIN32_ERROR.ERROR_DS_NONEXISTENT_MUST_HAVE;
pub const ERROR_DS_AUX_CLS_TEST_FAIL = WIN32_ERROR.ERROR_DS_AUX_CLS_TEST_FAIL;
pub const ERROR_DS_NONEXISTENT_POSS_SUP = WIN32_ERROR.ERROR_DS_NONEXISTENT_POSS_SUP;
pub const ERROR_DS_SUB_CLS_TEST_FAIL = WIN32_ERROR.ERROR_DS_SUB_CLS_TEST_FAIL;
pub const ERROR_DS_BAD_RDN_ATT_ID_SYNTAX = WIN32_ERROR.ERROR_DS_BAD_RDN_ATT_ID_SYNTAX;
pub const ERROR_DS_EXISTS_IN_AUX_CLS = WIN32_ERROR.ERROR_DS_EXISTS_IN_AUX_CLS;
pub const ERROR_DS_EXISTS_IN_SUB_CLS = WIN32_ERROR.ERROR_DS_EXISTS_IN_SUB_CLS;
pub const ERROR_DS_EXISTS_IN_POSS_SUP = WIN32_ERROR.ERROR_DS_EXISTS_IN_POSS_SUP;
pub const ERROR_DS_RECALCSCHEMA_FAILED = WIN32_ERROR.ERROR_DS_RECALCSCHEMA_FAILED;
pub const ERROR_DS_TREE_DELETE_NOT_FINISHED = WIN32_ERROR.ERROR_DS_TREE_DELETE_NOT_FINISHED;
pub const ERROR_DS_CANT_DELETE = WIN32_ERROR.ERROR_DS_CANT_DELETE;
pub const ERROR_DS_ATT_SCHEMA_REQ_ID = WIN32_ERROR.ERROR_DS_ATT_SCHEMA_REQ_ID;
pub const ERROR_DS_BAD_ATT_SCHEMA_SYNTAX = WIN32_ERROR.ERROR_DS_BAD_ATT_SCHEMA_SYNTAX;
pub const ERROR_DS_CANT_CACHE_ATT = WIN32_ERROR.ERROR_DS_CANT_CACHE_ATT;
pub const ERROR_DS_CANT_CACHE_CLASS = WIN32_ERROR.ERROR_DS_CANT_CACHE_CLASS;
pub const ERROR_DS_CANT_REMOVE_ATT_CACHE = WIN32_ERROR.ERROR_DS_CANT_REMOVE_ATT_CACHE;
pub const ERROR_DS_CANT_REMOVE_CLASS_CACHE = WIN32_ERROR.ERROR_DS_CANT_REMOVE_CLASS_CACHE;
pub const ERROR_DS_CANT_RETRIEVE_DN = WIN32_ERROR.ERROR_DS_CANT_RETRIEVE_DN;
pub const ERROR_DS_MISSING_SUPREF = WIN32_ERROR.ERROR_DS_MISSING_SUPREF;
pub const ERROR_DS_CANT_RETRIEVE_INSTANCE = WIN32_ERROR.ERROR_DS_CANT_RETRIEVE_INSTANCE;
pub const ERROR_DS_CODE_INCONSISTENCY = WIN32_ERROR.ERROR_DS_CODE_INCONSISTENCY;
pub const ERROR_DS_DATABASE_ERROR = WIN32_ERROR.ERROR_DS_DATABASE_ERROR;
pub const ERROR_DS_GOVERNSID_MISSING = WIN32_ERROR.ERROR_DS_GOVERNSID_MISSING;
pub const ERROR_DS_MISSING_EXPECTED_ATT = WIN32_ERROR.ERROR_DS_MISSING_EXPECTED_ATT;
pub const ERROR_DS_NCNAME_MISSING_CR_REF = WIN32_ERROR.ERROR_DS_NCNAME_MISSING_CR_REF;
pub const ERROR_DS_SECURITY_CHECKING_ERROR = WIN32_ERROR.ERROR_DS_SECURITY_CHECKING_ERROR;
pub const ERROR_DS_SCHEMA_NOT_LOADED = WIN32_ERROR.ERROR_DS_SCHEMA_NOT_LOADED;
pub const ERROR_DS_SCHEMA_ALLOC_FAILED = WIN32_ERROR.ERROR_DS_SCHEMA_ALLOC_FAILED;
pub const ERROR_DS_ATT_SCHEMA_REQ_SYNTAX = WIN32_ERROR.ERROR_DS_ATT_SCHEMA_REQ_SYNTAX;
pub const ERROR_DS_GCVERIFY_ERROR = WIN32_ERROR.ERROR_DS_GCVERIFY_ERROR;
pub const ERROR_DS_DRA_SCHEMA_MISMATCH = WIN32_ERROR.ERROR_DS_DRA_SCHEMA_MISMATCH;
pub const ERROR_DS_CANT_FIND_DSA_OBJ = WIN32_ERROR.ERROR_DS_CANT_FIND_DSA_OBJ;
pub const ERROR_DS_CANT_FIND_EXPECTED_NC = WIN32_ERROR.ERROR_DS_CANT_FIND_EXPECTED_NC;
pub const ERROR_DS_CANT_FIND_NC_IN_CACHE = WIN32_ERROR.ERROR_DS_CANT_FIND_NC_IN_CACHE;
pub const ERROR_DS_CANT_RETRIEVE_CHILD = WIN32_ERROR.ERROR_DS_CANT_RETRIEVE_CHILD;
pub const ERROR_DS_SECURITY_ILLEGAL_MODIFY = WIN32_ERROR.ERROR_DS_SECURITY_ILLEGAL_MODIFY;
pub const ERROR_DS_CANT_REPLACE_HIDDEN_REC = WIN32_ERROR.ERROR_DS_CANT_REPLACE_HIDDEN_REC;
pub const ERROR_DS_BAD_HIERARCHY_FILE = WIN32_ERROR.ERROR_DS_BAD_HIERARCHY_FILE;
pub const ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED = WIN32_ERROR.ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED;
pub const ERROR_DS_CONFIG_PARAM_MISSING = WIN32_ERROR.ERROR_DS_CONFIG_PARAM_MISSING;
pub const ERROR_DS_COUNTING_AB_INDICES_FAILED = WIN32_ERROR.ERROR_DS_COUNTING_AB_INDICES_FAILED;
pub const ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED = WIN32_ERROR.ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED;
pub const ERROR_DS_INTERNAL_FAILURE = WIN32_ERROR.ERROR_DS_INTERNAL_FAILURE;
pub const ERROR_DS_UNKNOWN_ERROR = WIN32_ERROR.ERROR_DS_UNKNOWN_ERROR;
pub const ERROR_DS_ROOT_REQUIRES_CLASS_TOP = WIN32_ERROR.ERROR_DS_ROOT_REQUIRES_CLASS_TOP;
pub const ERROR_DS_REFUSING_FSMO_ROLES = WIN32_ERROR.ERROR_DS_REFUSING_FSMO_ROLES;
pub const ERROR_DS_MISSING_FSMO_SETTINGS = WIN32_ERROR.ERROR_DS_MISSING_FSMO_SETTINGS;
pub const ERROR_DS_UNABLE_TO_SURRENDER_ROLES = WIN32_ERROR.ERROR_DS_UNABLE_TO_SURRENDER_ROLES;
pub const ERROR_DS_DRA_GENERIC = WIN32_ERROR.ERROR_DS_DRA_GENERIC;
pub const ERROR_DS_DRA_INVALID_PARAMETER = WIN32_ERROR.ERROR_DS_DRA_INVALID_PARAMETER;
pub const ERROR_DS_DRA_BUSY = WIN32_ERROR.ERROR_DS_DRA_BUSY;
pub const ERROR_DS_DRA_BAD_DN = WIN32_ERROR.ERROR_DS_DRA_BAD_DN;
pub const ERROR_DS_DRA_BAD_NC = WIN32_ERROR.ERROR_DS_DRA_BAD_NC;
pub const ERROR_DS_DRA_DN_EXISTS = WIN32_ERROR.ERROR_DS_DRA_DN_EXISTS;
pub const ERROR_DS_DRA_INTERNAL_ERROR = WIN32_ERROR.ERROR_DS_DRA_INTERNAL_ERROR;
pub const ERROR_DS_DRA_INCONSISTENT_DIT = WIN32_ERROR.ERROR_DS_DRA_INCONSISTENT_DIT;
pub const ERROR_DS_DRA_CONNECTION_FAILED = WIN32_ERROR.ERROR_DS_DRA_CONNECTION_FAILED;
pub const ERROR_DS_DRA_BAD_INSTANCE_TYPE = WIN32_ERROR.ERROR_DS_DRA_BAD_INSTANCE_TYPE;
pub const ERROR_DS_DRA_OUT_OF_MEM = WIN32_ERROR.ERROR_DS_DRA_OUT_OF_MEM;
pub const ERROR_DS_DRA_MAIL_PROBLEM = WIN32_ERROR.ERROR_DS_DRA_MAIL_PROBLEM;
pub const ERROR_DS_DRA_REF_ALREADY_EXISTS = WIN32_ERROR.ERROR_DS_DRA_REF_ALREADY_EXISTS;
pub const ERROR_DS_DRA_REF_NOT_FOUND = WIN32_ERROR.ERROR_DS_DRA_REF_NOT_FOUND;
pub const ERROR_DS_DRA_OBJ_IS_REP_SOURCE = WIN32_ERROR.ERROR_DS_DRA_OBJ_IS_REP_SOURCE;
pub const ERROR_DS_DRA_DB_ERROR = WIN32_ERROR.ERROR_DS_DRA_DB_ERROR;
pub const ERROR_DS_DRA_NO_REPLICA = WIN32_ERROR.ERROR_DS_DRA_NO_REPLICA;
pub const ERROR_DS_DRA_ACCESS_DENIED = WIN32_ERROR.ERROR_DS_DRA_ACCESS_DENIED;
pub const ERROR_DS_DRA_NOT_SUPPORTED = WIN32_ERROR.ERROR_DS_DRA_NOT_SUPPORTED;
pub const ERROR_DS_DRA_RPC_CANCELLED = WIN32_ERROR.ERROR_DS_DRA_RPC_CANCELLED;
pub const ERROR_DS_DRA_SOURCE_DISABLED = WIN32_ERROR.ERROR_DS_DRA_SOURCE_DISABLED;
pub const ERROR_DS_DRA_SINK_DISABLED = WIN32_ERROR.ERROR_DS_DRA_SINK_DISABLED;
pub const ERROR_DS_DRA_NAME_COLLISION = WIN32_ERROR.ERROR_DS_DRA_NAME_COLLISION;
pub const ERROR_DS_DRA_SOURCE_REINSTALLED = WIN32_ERROR.ERROR_DS_DRA_SOURCE_REINSTALLED;
pub const ERROR_DS_DRA_MISSING_PARENT = WIN32_ERROR.ERROR_DS_DRA_MISSING_PARENT;
pub const ERROR_DS_DRA_PREEMPTED = WIN32_ERROR.ERROR_DS_DRA_PREEMPTED;
pub const ERROR_DS_DRA_ABANDON_SYNC = WIN32_ERROR.ERROR_DS_DRA_ABANDON_SYNC;
pub const ERROR_DS_DRA_SHUTDOWN = WIN32_ERROR.ERROR_DS_DRA_SHUTDOWN;
pub const ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET = WIN32_ERROR.ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET;
pub const ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA = WIN32_ERROR.ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA;
pub const ERROR_DS_DRA_EXTN_CONNECTION_FAILED = WIN32_ERROR.ERROR_DS_DRA_EXTN_CONNECTION_FAILED;
pub const ERROR_DS_INSTALL_SCHEMA_MISMATCH = WIN32_ERROR.ERROR_DS_INSTALL_SCHEMA_MISMATCH;
pub const ERROR_DS_DUP_LINK_ID = WIN32_ERROR.ERROR_DS_DUP_LINK_ID;
pub const ERROR_DS_NAME_ERROR_RESOLVING = WIN32_ERROR.ERROR_DS_NAME_ERROR_RESOLVING;
pub const ERROR_DS_NAME_ERROR_NOT_FOUND = WIN32_ERROR.ERROR_DS_NAME_ERROR_NOT_FOUND;
pub const ERROR_DS_NAME_ERROR_NOT_UNIQUE = WIN32_ERROR.ERROR_DS_NAME_ERROR_NOT_UNIQUE;
pub const ERROR_DS_NAME_ERROR_NO_MAPPING = WIN32_ERROR.ERROR_DS_NAME_ERROR_NO_MAPPING;
pub const ERROR_DS_NAME_ERROR_DOMAIN_ONLY = WIN32_ERROR.ERROR_DS_NAME_ERROR_DOMAIN_ONLY;
pub const ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING = WIN32_ERROR.ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING;
pub const ERROR_DS_CONSTRUCTED_ATT_MOD = WIN32_ERROR.ERROR_DS_CONSTRUCTED_ATT_MOD;
pub const ERROR_DS_WRONG_OM_OBJ_CLASS = WIN32_ERROR.ERROR_DS_WRONG_OM_OBJ_CLASS;
pub const ERROR_DS_DRA_REPL_PENDING = WIN32_ERROR.ERROR_DS_DRA_REPL_PENDING;
pub const ERROR_DS_DS_REQUIRED = WIN32_ERROR.ERROR_DS_DS_REQUIRED;
pub const ERROR_DS_INVALID_LDAP_DISPLAY_NAME = WIN32_ERROR.ERROR_DS_INVALID_LDAP_DISPLAY_NAME;
pub const ERROR_DS_NON_BASE_SEARCH = WIN32_ERROR.ERROR_DS_NON_BASE_SEARCH;
pub const ERROR_DS_CANT_RETRIEVE_ATTS = WIN32_ERROR.ERROR_DS_CANT_RETRIEVE_ATTS;
pub const ERROR_DS_BACKLINK_WITHOUT_LINK = WIN32_ERROR.ERROR_DS_BACKLINK_WITHOUT_LINK;
pub const ERROR_DS_EPOCH_MISMATCH = WIN32_ERROR.ERROR_DS_EPOCH_MISMATCH;
pub const ERROR_DS_SRC_NAME_MISMATCH = WIN32_ERROR.ERROR_DS_SRC_NAME_MISMATCH;
pub const ERROR_DS_SRC_AND_DST_NC_IDENTICAL = WIN32_ERROR.ERROR_DS_SRC_AND_DST_NC_IDENTICAL;
pub const ERROR_DS_DST_NC_MISMATCH = WIN32_ERROR.ERROR_DS_DST_NC_MISMATCH;
pub const ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC = WIN32_ERROR.ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC;
pub const ERROR_DS_SRC_GUID_MISMATCH = WIN32_ERROR.ERROR_DS_SRC_GUID_MISMATCH;
pub const ERROR_DS_CANT_MOVE_DELETED_OBJECT = WIN32_ERROR.ERROR_DS_CANT_MOVE_DELETED_OBJECT;
pub const ERROR_DS_PDC_OPERATION_IN_PROGRESS = WIN32_ERROR.ERROR_DS_PDC_OPERATION_IN_PROGRESS;
pub const ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD = WIN32_ERROR.ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD;
pub const ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION = WIN32_ERROR.ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION;
pub const ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS = WIN32_ERROR.ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS;
pub const ERROR_DS_NC_MUST_HAVE_NC_PARENT = WIN32_ERROR.ERROR_DS_NC_MUST_HAVE_NC_PARENT;
pub const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE = WIN32_ERROR.ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE;
pub const ERROR_DS_DST_DOMAIN_NOT_NATIVE = WIN32_ERROR.ERROR_DS_DST_DOMAIN_NOT_NATIVE;
pub const ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER = WIN32_ERROR.ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER;
pub const ERROR_DS_CANT_MOVE_ACCOUNT_GROUP = WIN32_ERROR.ERROR_DS_CANT_MOVE_ACCOUNT_GROUP;
pub const ERROR_DS_CANT_MOVE_RESOURCE_GROUP = WIN32_ERROR.ERROR_DS_CANT_MOVE_RESOURCE_GROUP;
pub const ERROR_DS_INVALID_SEARCH_FLAG = WIN32_ERROR.ERROR_DS_INVALID_SEARCH_FLAG;
pub const ERROR_DS_NO_TREE_DELETE_ABOVE_NC = WIN32_ERROR.ERROR_DS_NO_TREE_DELETE_ABOVE_NC;
pub const ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE = WIN32_ERROR.ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE;
pub const ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE = WIN32_ERROR.ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE;
pub const ERROR_DS_SAM_INIT_FAILURE = WIN32_ERROR.ERROR_DS_SAM_INIT_FAILURE;
pub const ERROR_DS_SENSITIVE_GROUP_VIOLATION = WIN32_ERROR.ERROR_DS_SENSITIVE_GROUP_VIOLATION;
pub const ERROR_DS_CANT_MOD_PRIMARYGROUPID = WIN32_ERROR.ERROR_DS_CANT_MOD_PRIMARYGROUPID;
pub const ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD = WIN32_ERROR.ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD;
pub const ERROR_DS_NONSAFE_SCHEMA_CHANGE = WIN32_ERROR.ERROR_DS_NONSAFE_SCHEMA_CHANGE;
pub const ERROR_DS_SCHEMA_UPDATE_DISALLOWED = WIN32_ERROR.ERROR_DS_SCHEMA_UPDATE_DISALLOWED;
pub const ERROR_DS_CANT_CREATE_UNDER_SCHEMA = WIN32_ERROR.ERROR_DS_CANT_CREATE_UNDER_SCHEMA;
pub const ERROR_DS_INSTALL_NO_SRC_SCH_VERSION = WIN32_ERROR.ERROR_DS_INSTALL_NO_SRC_SCH_VERSION;
pub const ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE = WIN32_ERROR.ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE;
pub const ERROR_DS_INVALID_GROUP_TYPE = WIN32_ERROR.ERROR_DS_INVALID_GROUP_TYPE;
pub const ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN = WIN32_ERROR.ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN;
pub const ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN = WIN32_ERROR.ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN;
pub const ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER = WIN32_ERROR.ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER;
pub const ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER = WIN32_ERROR.ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER;
pub const ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER = WIN32_ERROR.ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER;
pub const ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER = WIN32_ERROR.ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER;
pub const ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER = WIN32_ERROR.ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER;
pub const ERROR_DS_HAVE_PRIMARY_MEMBERS = WIN32_ERROR.ERROR_DS_HAVE_PRIMARY_MEMBERS;
pub const ERROR_DS_STRING_SD_CONVERSION_FAILED = WIN32_ERROR.ERROR_DS_STRING_SD_CONVERSION_FAILED;
pub const ERROR_DS_NAMING_MASTER_GC = WIN32_ERROR.ERROR_DS_NAMING_MASTER_GC;
pub const ERROR_DS_DNS_LOOKUP_FAILURE = WIN32_ERROR.ERROR_DS_DNS_LOOKUP_FAILURE;
pub const ERROR_DS_COULDNT_UPDATE_SPNS = WIN32_ERROR.ERROR_DS_COULDNT_UPDATE_SPNS;
pub const ERROR_DS_CANT_RETRIEVE_SD = WIN32_ERROR.ERROR_DS_CANT_RETRIEVE_SD;
pub const ERROR_DS_KEY_NOT_UNIQUE = WIN32_ERROR.ERROR_DS_KEY_NOT_UNIQUE;
pub const ERROR_DS_WRONG_LINKED_ATT_SYNTAX = WIN32_ERROR.ERROR_DS_WRONG_LINKED_ATT_SYNTAX;
pub const ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD = WIN32_ERROR.ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD;
pub const ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY = WIN32_ERROR.ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY;
pub const ERROR_DS_CANT_START = WIN32_ERROR.ERROR_DS_CANT_START;
pub const ERROR_DS_INIT_FAILURE = WIN32_ERROR.ERROR_DS_INIT_FAILURE;
pub const ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION = WIN32_ERROR.ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION;
pub const ERROR_DS_SOURCE_DOMAIN_IN_FOREST = WIN32_ERROR.ERROR_DS_SOURCE_DOMAIN_IN_FOREST;
pub const ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST = WIN32_ERROR.ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST;
pub const ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED = WIN32_ERROR.ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED;
pub const ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN = WIN32_ERROR.ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN;
pub const ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER = WIN32_ERROR.ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER;
pub const ERROR_DS_SRC_SID_EXISTS_IN_FOREST = WIN32_ERROR.ERROR_DS_SRC_SID_EXISTS_IN_FOREST;
pub const ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH = WIN32_ERROR.ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH;
pub const ERROR_SAM_INIT_FAILURE = WIN32_ERROR.ERROR_SAM_INIT_FAILURE;
pub const ERROR_DS_DRA_SCHEMA_INFO_SHIP = WIN32_ERROR.ERROR_DS_DRA_SCHEMA_INFO_SHIP;
pub const ERROR_DS_DRA_SCHEMA_CONFLICT = WIN32_ERROR.ERROR_DS_DRA_SCHEMA_CONFLICT;
pub const ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT = WIN32_ERROR.ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT;
pub const ERROR_DS_DRA_OBJ_NC_MISMATCH = WIN32_ERROR.ERROR_DS_DRA_OBJ_NC_MISMATCH;
pub const ERROR_DS_NC_STILL_HAS_DSAS = WIN32_ERROR.ERROR_DS_NC_STILL_HAS_DSAS;
pub const ERROR_DS_GC_REQUIRED = WIN32_ERROR.ERROR_DS_GC_REQUIRED;
pub const ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY = WIN32_ERROR.ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY;
pub const ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS = WIN32_ERROR.ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS;
pub const ERROR_DS_CANT_ADD_TO_GC = WIN32_ERROR.ERROR_DS_CANT_ADD_TO_GC;
pub const ERROR_DS_NO_CHECKPOINT_WITH_PDC = WIN32_ERROR.ERROR_DS_NO_CHECKPOINT_WITH_PDC;
pub const ERROR_DS_SOURCE_AUDITING_NOT_ENABLED = WIN32_ERROR.ERROR_DS_SOURCE_AUDITING_NOT_ENABLED;
pub const ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC = WIN32_ERROR.ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC;
pub const ERROR_DS_INVALID_NAME_FOR_SPN = WIN32_ERROR.ERROR_DS_INVALID_NAME_FOR_SPN;
pub const ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS = WIN32_ERROR.ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS;
pub const ERROR_DS_UNICODEPWD_NOT_IN_QUOTES = WIN32_ERROR.ERROR_DS_UNICODEPWD_NOT_IN_QUOTES;
pub const ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = WIN32_ERROR.ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED;
pub const ERROR_DS_MUST_BE_RUN_ON_DST_DC = WIN32_ERROR.ERROR_DS_MUST_BE_RUN_ON_DST_DC;
pub const ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER = WIN32_ERROR.ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER;
pub const ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ = WIN32_ERROR.ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ;
pub const ERROR_DS_INIT_FAILURE_CONSOLE = WIN32_ERROR.ERROR_DS_INIT_FAILURE_CONSOLE;
pub const ERROR_DS_SAM_INIT_FAILURE_CONSOLE = WIN32_ERROR.ERROR_DS_SAM_INIT_FAILURE_CONSOLE;
pub const ERROR_DS_FOREST_VERSION_TOO_HIGH = WIN32_ERROR.ERROR_DS_FOREST_VERSION_TOO_HIGH;
pub const ERROR_DS_DOMAIN_VERSION_TOO_HIGH = WIN32_ERROR.ERROR_DS_DOMAIN_VERSION_TOO_HIGH;
pub const ERROR_DS_FOREST_VERSION_TOO_LOW = WIN32_ERROR.ERROR_DS_FOREST_VERSION_TOO_LOW;
pub const ERROR_DS_DOMAIN_VERSION_TOO_LOW = WIN32_ERROR.ERROR_DS_DOMAIN_VERSION_TOO_LOW;
pub const ERROR_DS_INCOMPATIBLE_VERSION = WIN32_ERROR.ERROR_DS_INCOMPATIBLE_VERSION;
pub const ERROR_DS_LOW_DSA_VERSION = WIN32_ERROR.ERROR_DS_LOW_DSA_VERSION;
pub const ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN = WIN32_ERROR.ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN;
pub const ERROR_DS_NOT_SUPPORTED_SORT_ORDER = WIN32_ERROR.ERROR_DS_NOT_SUPPORTED_SORT_ORDER;
pub const ERROR_DS_NAME_NOT_UNIQUE = WIN32_ERROR.ERROR_DS_NAME_NOT_UNIQUE;
pub const ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4 = WIN32_ERROR.ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4;
pub const ERROR_DS_OUT_OF_VERSION_STORE = WIN32_ERROR.ERROR_DS_OUT_OF_VERSION_STORE;
pub const ERROR_DS_INCOMPATIBLE_CONTROLS_USED = WIN32_ERROR.ERROR_DS_INCOMPATIBLE_CONTROLS_USED;
pub const ERROR_DS_NO_REF_DOMAIN = WIN32_ERROR.ERROR_DS_NO_REF_DOMAIN;
pub const ERROR_DS_RESERVED_LINK_ID = WIN32_ERROR.ERROR_DS_RESERVED_LINK_ID;
pub const ERROR_DS_LINK_ID_NOT_AVAILABLE = WIN32_ERROR.ERROR_DS_LINK_ID_NOT_AVAILABLE;
pub const ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER = WIN32_ERROR.ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER;
pub const ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE = WIN32_ERROR.ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE;
pub const ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC = WIN32_ERROR.ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC;
pub const ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG = WIN32_ERROR.ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG;
pub const ERROR_DS_MODIFYDN_WRONG_GRANDPARENT = WIN32_ERROR.ERROR_DS_MODIFYDN_WRONG_GRANDPARENT;
pub const ERROR_DS_NAME_ERROR_TRUST_REFERRAL = WIN32_ERROR.ERROR_DS_NAME_ERROR_TRUST_REFERRAL;
pub const ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER = WIN32_ERROR.ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER;
pub const ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD = WIN32_ERROR.ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD;
pub const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2 = WIN32_ERROR.ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2;
pub const ERROR_DS_THREAD_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_DS_THREAD_LIMIT_EXCEEDED;
pub const ERROR_DS_NOT_CLOSEST = WIN32_ERROR.ERROR_DS_NOT_CLOSEST;
pub const ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF = WIN32_ERROR.ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF;
pub const ERROR_DS_SINGLE_USER_MODE_FAILED = WIN32_ERROR.ERROR_DS_SINGLE_USER_MODE_FAILED;
pub const ERROR_DS_NTDSCRIPT_SYNTAX_ERROR = WIN32_ERROR.ERROR_DS_NTDSCRIPT_SYNTAX_ERROR;
pub const ERROR_DS_NTDSCRIPT_PROCESS_ERROR = WIN32_ERROR.ERROR_DS_NTDSCRIPT_PROCESS_ERROR;
pub const ERROR_DS_DIFFERENT_REPL_EPOCHS = WIN32_ERROR.ERROR_DS_DIFFERENT_REPL_EPOCHS;
pub const ERROR_DS_DRS_EXTENSIONS_CHANGED = WIN32_ERROR.ERROR_DS_DRS_EXTENSIONS_CHANGED;
pub const ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR = WIN32_ERROR.ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR;
pub const ERROR_DS_NO_MSDS_INTID = WIN32_ERROR.ERROR_DS_NO_MSDS_INTID;
pub const ERROR_DS_DUP_MSDS_INTID = WIN32_ERROR.ERROR_DS_DUP_MSDS_INTID;
pub const ERROR_DS_EXISTS_IN_RDNATTID = WIN32_ERROR.ERROR_DS_EXISTS_IN_RDNATTID;
pub const ERROR_DS_AUTHORIZATION_FAILED = WIN32_ERROR.ERROR_DS_AUTHORIZATION_FAILED;
pub const ERROR_DS_INVALID_SCRIPT = WIN32_ERROR.ERROR_DS_INVALID_SCRIPT;
pub const ERROR_DS_REMOTE_CROSSREF_OP_FAILED = WIN32_ERROR.ERROR_DS_REMOTE_CROSSREF_OP_FAILED;
pub const ERROR_DS_CROSS_REF_BUSY = WIN32_ERROR.ERROR_DS_CROSS_REF_BUSY;
pub const ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN = WIN32_ERROR.ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN;
pub const ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC = WIN32_ERROR.ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC;
pub const ERROR_DS_DUPLICATE_ID_FOUND = WIN32_ERROR.ERROR_DS_DUPLICATE_ID_FOUND;
pub const ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT = WIN32_ERROR.ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT;
pub const ERROR_DS_GROUP_CONVERSION_ERROR = WIN32_ERROR.ERROR_DS_GROUP_CONVERSION_ERROR;
pub const ERROR_DS_CANT_MOVE_APP_BASIC_GROUP = WIN32_ERROR.ERROR_DS_CANT_MOVE_APP_BASIC_GROUP;
pub const ERROR_DS_CANT_MOVE_APP_QUERY_GROUP = WIN32_ERROR.ERROR_DS_CANT_MOVE_APP_QUERY_GROUP;
pub const ERROR_DS_ROLE_NOT_VERIFIED = WIN32_ERROR.ERROR_DS_ROLE_NOT_VERIFIED;
pub const ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL = WIN32_ERROR.ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL;
pub const ERROR_DS_DOMAIN_RENAME_IN_PROGRESS = WIN32_ERROR.ERROR_DS_DOMAIN_RENAME_IN_PROGRESS;
pub const ERROR_DS_EXISTING_AD_CHILD_NC = WIN32_ERROR.ERROR_DS_EXISTING_AD_CHILD_NC;
pub const ERROR_DS_REPL_LIFETIME_EXCEEDED = WIN32_ERROR.ERROR_DS_REPL_LIFETIME_EXCEEDED;
pub const ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER = WIN32_ERROR.ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER;
pub const ERROR_DS_LDAP_SEND_QUEUE_FULL = WIN32_ERROR.ERROR_DS_LDAP_SEND_QUEUE_FULL;
pub const ERROR_DS_DRA_OUT_SCHEDULE_WINDOW = WIN32_ERROR.ERROR_DS_DRA_OUT_SCHEDULE_WINDOW;
pub const ERROR_DS_POLICY_NOT_KNOWN = WIN32_ERROR.ERROR_DS_POLICY_NOT_KNOWN;
pub const ERROR_NO_SITE_SETTINGS_OBJECT = WIN32_ERROR.ERROR_NO_SITE_SETTINGS_OBJECT;
pub const ERROR_NO_SECRETS = WIN32_ERROR.ERROR_NO_SECRETS;
pub const ERROR_NO_WRITABLE_DC_FOUND = WIN32_ERROR.ERROR_NO_WRITABLE_DC_FOUND;
pub const ERROR_DS_NO_SERVER_OBJECT = WIN32_ERROR.ERROR_DS_NO_SERVER_OBJECT;
pub const ERROR_DS_NO_NTDSA_OBJECT = WIN32_ERROR.ERROR_DS_NO_NTDSA_OBJECT;
pub const ERROR_DS_NON_ASQ_SEARCH = WIN32_ERROR.ERROR_DS_NON_ASQ_SEARCH;
pub const ERROR_DS_AUDIT_FAILURE = WIN32_ERROR.ERROR_DS_AUDIT_FAILURE;
pub const ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE = WIN32_ERROR.ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE;
pub const ERROR_DS_INVALID_SEARCH_FLAG_TUPLE = WIN32_ERROR.ERROR_DS_INVALID_SEARCH_FLAG_TUPLE;
pub const ERROR_DS_HIERARCHY_TABLE_TOO_DEEP = WIN32_ERROR.ERROR_DS_HIERARCHY_TABLE_TOO_DEEP;
pub const ERROR_DS_DRA_CORRUPT_UTD_VECTOR = WIN32_ERROR.ERROR_DS_DRA_CORRUPT_UTD_VECTOR;
pub const ERROR_DS_DRA_SECRETS_DENIED = WIN32_ERROR.ERROR_DS_DRA_SECRETS_DENIED;
pub const ERROR_DS_RESERVED_MAPI_ID = WIN32_ERROR.ERROR_DS_RESERVED_MAPI_ID;
pub const ERROR_DS_MAPI_ID_NOT_AVAILABLE = WIN32_ERROR.ERROR_DS_MAPI_ID_NOT_AVAILABLE;
pub const ERROR_DS_DRA_MISSING_KRBTGT_SECRET = WIN32_ERROR.ERROR_DS_DRA_MISSING_KRBTGT_SECRET;
pub const ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST = WIN32_ERROR.ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST;
pub const ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST = WIN32_ERROR.ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST;
pub const ERROR_INVALID_USER_PRINCIPAL_NAME = WIN32_ERROR.ERROR_INVALID_USER_PRINCIPAL_NAME;
pub const ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS = WIN32_ERROR.ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS;
pub const ERROR_DS_OID_NOT_FOUND = WIN32_ERROR.ERROR_DS_OID_NOT_FOUND;
pub const ERROR_DS_DRA_RECYCLED_TARGET = WIN32_ERROR.ERROR_DS_DRA_RECYCLED_TARGET;
pub const ERROR_DS_DISALLOWED_NC_REDIRECT = WIN32_ERROR.ERROR_DS_DISALLOWED_NC_REDIRECT;
pub const ERROR_DS_HIGH_ADLDS_FFL = WIN32_ERROR.ERROR_DS_HIGH_ADLDS_FFL;
pub const ERROR_DS_HIGH_DSA_VERSION = WIN32_ERROR.ERROR_DS_HIGH_DSA_VERSION;
pub const ERROR_DS_LOW_ADLDS_FFL = WIN32_ERROR.ERROR_DS_LOW_ADLDS_FFL;
pub const ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION = WIN32_ERROR.ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION;
pub const ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED = WIN32_ERROR.ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED;
pub const ERROR_INCORRECT_ACCOUNT_TYPE = WIN32_ERROR.ERROR_INCORRECT_ACCOUNT_TYPE;
pub const ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST = WIN32_ERROR.ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST;
pub const ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST = WIN32_ERROR.ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST;
pub const ERROR_DS_MISSING_FOREST_TRUST = WIN32_ERROR.ERROR_DS_MISSING_FOREST_TRUST;
pub const ERROR_DS_VALUE_KEY_NOT_UNIQUE = WIN32_ERROR.ERROR_DS_VALUE_KEY_NOT_UNIQUE;
pub const ERROR_WEAK_WHFBKEY_BLOCKED = WIN32_ERROR.ERROR_WEAK_WHFBKEY_BLOCKED;
pub const DNS_ERROR_RESPONSE_CODES_BASE = WIN32_ERROR.DNS_ERROR_RESPONSE_CODES_BASE;
pub const DNS_ERROR_RCODE_NO_ERROR = WIN32_ERROR.NO_ERROR;
pub const DNS_ERROR_MASK = WIN32_ERROR.DNS_ERROR_RESPONSE_CODES_BASE;
pub const DNS_ERROR_RCODE_FORMAT_ERROR = WIN32_ERROR.DNS_ERROR_RCODE_FORMAT_ERROR;
pub const DNS_ERROR_RCODE_SERVER_FAILURE = WIN32_ERROR.DNS_ERROR_RCODE_SERVER_FAILURE;
pub const DNS_ERROR_RCODE_NAME_ERROR = WIN32_ERROR.DNS_ERROR_RCODE_NAME_ERROR;
pub const DNS_ERROR_RCODE_NOT_IMPLEMENTED = WIN32_ERROR.DNS_ERROR_RCODE_NOT_IMPLEMENTED;
pub const DNS_ERROR_RCODE_REFUSED = WIN32_ERROR.DNS_ERROR_RCODE_REFUSED;
pub const DNS_ERROR_RCODE_YXDOMAIN = WIN32_ERROR.DNS_ERROR_RCODE_YXDOMAIN;
pub const DNS_ERROR_RCODE_YXRRSET = WIN32_ERROR.DNS_ERROR_RCODE_YXRRSET;
pub const DNS_ERROR_RCODE_NXRRSET = WIN32_ERROR.DNS_ERROR_RCODE_NXRRSET;
pub const DNS_ERROR_RCODE_NOTAUTH = WIN32_ERROR.DNS_ERROR_RCODE_NOTAUTH;
pub const DNS_ERROR_RCODE_NOTZONE = WIN32_ERROR.DNS_ERROR_RCODE_NOTZONE;
pub const DNS_ERROR_RCODE_BADSIG = WIN32_ERROR.DNS_ERROR_RCODE_BADSIG;
pub const DNS_ERROR_RCODE_BADKEY = WIN32_ERROR.DNS_ERROR_RCODE_BADKEY;
pub const DNS_ERROR_RCODE_BADTIME = WIN32_ERROR.DNS_ERROR_RCODE_BADTIME;
pub const DNS_ERROR_RCODE_LAST = WIN32_ERROR.DNS_ERROR_RCODE_BADTIME;
pub const DNS_ERROR_DNSSEC_BASE = WIN32_ERROR.DNS_ERROR_DNSSEC_BASE;
pub const DNS_ERROR_KEYMASTER_REQUIRED = WIN32_ERROR.DNS_ERROR_KEYMASTER_REQUIRED;
pub const DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE = WIN32_ERROR.DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE;
pub const DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1 = WIN32_ERROR.DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1;
pub const DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS = WIN32_ERROR.DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS;
pub const DNS_ERROR_UNSUPPORTED_ALGORITHM = WIN32_ERROR.DNS_ERROR_UNSUPPORTED_ALGORITHM;
pub const DNS_ERROR_INVALID_KEY_SIZE = WIN32_ERROR.DNS_ERROR_INVALID_KEY_SIZE;
pub const DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE = WIN32_ERROR.DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE;
pub const DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION = WIN32_ERROR.DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION;
pub const DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR = WIN32_ERROR.DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR;
pub const DNS_ERROR_UNEXPECTED_CNG_ERROR = WIN32_ERROR.DNS_ERROR_UNEXPECTED_CNG_ERROR;
pub const DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION = WIN32_ERROR.DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION;
pub const DNS_ERROR_KSP_NOT_ACCESSIBLE = WIN32_ERROR.DNS_ERROR_KSP_NOT_ACCESSIBLE;
pub const DNS_ERROR_TOO_MANY_SKDS = WIN32_ERROR.DNS_ERROR_TOO_MANY_SKDS;
pub const DNS_ERROR_INVALID_ROLLOVER_PERIOD = WIN32_ERROR.DNS_ERROR_INVALID_ROLLOVER_PERIOD;
pub const DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET = WIN32_ERROR.DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET;
pub const DNS_ERROR_ROLLOVER_IN_PROGRESS = WIN32_ERROR.DNS_ERROR_ROLLOVER_IN_PROGRESS;
pub const DNS_ERROR_STANDBY_KEY_NOT_PRESENT = WIN32_ERROR.DNS_ERROR_STANDBY_KEY_NOT_PRESENT;
pub const DNS_ERROR_NOT_ALLOWED_ON_ZSK = WIN32_ERROR.DNS_ERROR_NOT_ALLOWED_ON_ZSK;
pub const DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD = WIN32_ERROR.DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD;
pub const DNS_ERROR_ROLLOVER_ALREADY_QUEUED = WIN32_ERROR.DNS_ERROR_ROLLOVER_ALREADY_QUEUED;
pub const DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE = WIN32_ERROR.DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE;
pub const DNS_ERROR_BAD_KEYMASTER = WIN32_ERROR.DNS_ERROR_BAD_KEYMASTER;
pub const DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD = WIN32_ERROR.DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD;
pub const DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT = WIN32_ERROR.DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT;
pub const DNS_ERROR_DNSSEC_IS_DISABLED = WIN32_ERROR.DNS_ERROR_DNSSEC_IS_DISABLED;
pub const DNS_ERROR_INVALID_XML = WIN32_ERROR.DNS_ERROR_INVALID_XML;
pub const DNS_ERROR_NO_VALID_TRUST_ANCHORS = WIN32_ERROR.DNS_ERROR_NO_VALID_TRUST_ANCHORS;
pub const DNS_ERROR_ROLLOVER_NOT_POKEABLE = WIN32_ERROR.DNS_ERROR_ROLLOVER_NOT_POKEABLE;
pub const DNS_ERROR_NSEC3_NAME_COLLISION = WIN32_ERROR.DNS_ERROR_NSEC3_NAME_COLLISION;
pub const DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1 = WIN32_ERROR.DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1;
pub const DNS_ERROR_PACKET_FMT_BASE = WIN32_ERROR.DNS_ERROR_PACKET_FMT_BASE;
pub const DNS_ERROR_BAD_PACKET = WIN32_ERROR.DNS_ERROR_BAD_PACKET;
pub const DNS_ERROR_NO_PACKET = WIN32_ERROR.DNS_ERROR_NO_PACKET;
pub const DNS_ERROR_RCODE = WIN32_ERROR.DNS_ERROR_RCODE;
pub const DNS_ERROR_UNSECURE_PACKET = WIN32_ERROR.DNS_ERROR_UNSECURE_PACKET;
pub const DNS_ERROR_NO_MEMORY = WIN32_ERROR.ERROR_OUTOFMEMORY;
pub const DNS_ERROR_INVALID_NAME = WIN32_ERROR.ERROR_INVALID_NAME;
pub const DNS_ERROR_INVALID_DATA = WIN32_ERROR.ERROR_INVALID_DATA;
pub const DNS_ERROR_GENERAL_API_BASE = WIN32_ERROR.DNS_ERROR_GENERAL_API_BASE;
pub const DNS_ERROR_INVALID_TYPE = WIN32_ERROR.DNS_ERROR_INVALID_TYPE;
pub const DNS_ERROR_INVALID_IP_ADDRESS = WIN32_ERROR.DNS_ERROR_INVALID_IP_ADDRESS;
pub const DNS_ERROR_INVALID_PROPERTY = WIN32_ERROR.DNS_ERROR_INVALID_PROPERTY;
pub const DNS_ERROR_TRY_AGAIN_LATER = WIN32_ERROR.DNS_ERROR_TRY_AGAIN_LATER;
pub const DNS_ERROR_NOT_UNIQUE = WIN32_ERROR.DNS_ERROR_NOT_UNIQUE;
pub const DNS_ERROR_NON_RFC_NAME = WIN32_ERROR.DNS_ERROR_NON_RFC_NAME;
pub const DNS_ERROR_INVALID_NAME_CHAR = WIN32_ERROR.DNS_ERROR_INVALID_NAME_CHAR;
pub const DNS_ERROR_NUMERIC_NAME = WIN32_ERROR.DNS_ERROR_NUMERIC_NAME;
pub const DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER = WIN32_ERROR.DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER;
pub const DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION = WIN32_ERROR.DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION;
pub const DNS_ERROR_CANNOT_FIND_ROOT_HINTS = WIN32_ERROR.DNS_ERROR_CANNOT_FIND_ROOT_HINTS;
pub const DNS_ERROR_INCONSISTENT_ROOT_HINTS = WIN32_ERROR.DNS_ERROR_INCONSISTENT_ROOT_HINTS;
pub const DNS_ERROR_DWORD_VALUE_TOO_SMALL = WIN32_ERROR.DNS_ERROR_DWORD_VALUE_TOO_SMALL;
pub const DNS_ERROR_DWORD_VALUE_TOO_LARGE = WIN32_ERROR.DNS_ERROR_DWORD_VALUE_TOO_LARGE;
pub const DNS_ERROR_BACKGROUND_LOADING = WIN32_ERROR.DNS_ERROR_BACKGROUND_LOADING;
pub const DNS_ERROR_NOT_ALLOWED_ON_RODC = WIN32_ERROR.DNS_ERROR_NOT_ALLOWED_ON_RODC;
pub const DNS_ERROR_NOT_ALLOWED_UNDER_DNAME = WIN32_ERROR.DNS_ERROR_NOT_ALLOWED_UNDER_DNAME;
pub const DNS_ERROR_DELEGATION_REQUIRED = WIN32_ERROR.DNS_ERROR_DELEGATION_REQUIRED;
pub const DNS_ERROR_INVALID_POLICY_TABLE = WIN32_ERROR.DNS_ERROR_INVALID_POLICY_TABLE;
pub const DNS_ERROR_ADDRESS_REQUIRED = WIN32_ERROR.DNS_ERROR_ADDRESS_REQUIRED;
pub const DNS_ERROR_ZONE_BASE = WIN32_ERROR.DNS_ERROR_ZONE_BASE;
pub const DNS_ERROR_ZONE_DOES_NOT_EXIST = WIN32_ERROR.DNS_ERROR_ZONE_DOES_NOT_EXIST;
pub const DNS_ERROR_NO_ZONE_INFO = WIN32_ERROR.DNS_ERROR_NO_ZONE_INFO;
pub const DNS_ERROR_INVALID_ZONE_OPERATION = WIN32_ERROR.DNS_ERROR_INVALID_ZONE_OPERATION;
pub const DNS_ERROR_ZONE_CONFIGURATION_ERROR = WIN32_ERROR.DNS_ERROR_ZONE_CONFIGURATION_ERROR;
pub const DNS_ERROR_ZONE_HAS_NO_SOA_RECORD = WIN32_ERROR.DNS_ERROR_ZONE_HAS_NO_SOA_RECORD;
pub const DNS_ERROR_ZONE_HAS_NO_NS_RECORDS = WIN32_ERROR.DNS_ERROR_ZONE_HAS_NO_NS_RECORDS;
pub const DNS_ERROR_ZONE_LOCKED = WIN32_ERROR.DNS_ERROR_ZONE_LOCKED;
pub const DNS_ERROR_ZONE_CREATION_FAILED = WIN32_ERROR.DNS_ERROR_ZONE_CREATION_FAILED;
pub const DNS_ERROR_ZONE_ALREADY_EXISTS = WIN32_ERROR.DNS_ERROR_ZONE_ALREADY_EXISTS;
pub const DNS_ERROR_AUTOZONE_ALREADY_EXISTS = WIN32_ERROR.DNS_ERROR_AUTOZONE_ALREADY_EXISTS;
pub const DNS_ERROR_INVALID_ZONE_TYPE = WIN32_ERROR.DNS_ERROR_INVALID_ZONE_TYPE;
pub const DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP = WIN32_ERROR.DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP;
pub const DNS_ERROR_ZONE_NOT_SECONDARY = WIN32_ERROR.DNS_ERROR_ZONE_NOT_SECONDARY;
pub const DNS_ERROR_NEED_SECONDARY_ADDRESSES = WIN32_ERROR.DNS_ERROR_NEED_SECONDARY_ADDRESSES;
pub const DNS_ERROR_WINS_INIT_FAILED = WIN32_ERROR.DNS_ERROR_WINS_INIT_FAILED;
pub const DNS_ERROR_NEED_WINS_SERVERS = WIN32_ERROR.DNS_ERROR_NEED_WINS_SERVERS;
pub const DNS_ERROR_NBSTAT_INIT_FAILED = WIN32_ERROR.DNS_ERROR_NBSTAT_INIT_FAILED;
pub const DNS_ERROR_SOA_DELETE_INVALID = WIN32_ERROR.DNS_ERROR_SOA_DELETE_INVALID;
pub const DNS_ERROR_FORWARDER_ALREADY_EXISTS = WIN32_ERROR.DNS_ERROR_FORWARDER_ALREADY_EXISTS;
pub const DNS_ERROR_ZONE_REQUIRES_MASTER_IP = WIN32_ERROR.DNS_ERROR_ZONE_REQUIRES_MASTER_IP;
pub const DNS_ERROR_ZONE_IS_SHUTDOWN = WIN32_ERROR.DNS_ERROR_ZONE_IS_SHUTDOWN;
pub const DNS_ERROR_ZONE_LOCKED_FOR_SIGNING = WIN32_ERROR.DNS_ERROR_ZONE_LOCKED_FOR_SIGNING;
pub const DNS_ERROR_DATAFILE_BASE = WIN32_ERROR.DNS_ERROR_DATAFILE_BASE;
pub const DNS_ERROR_PRIMARY_REQUIRES_DATAFILE = WIN32_ERROR.DNS_ERROR_PRIMARY_REQUIRES_DATAFILE;
pub const DNS_ERROR_INVALID_DATAFILE_NAME = WIN32_ERROR.DNS_ERROR_INVALID_DATAFILE_NAME;
pub const DNS_ERROR_DATAFILE_OPEN_FAILURE = WIN32_ERROR.DNS_ERROR_DATAFILE_OPEN_FAILURE;
pub const DNS_ERROR_FILE_WRITEBACK_FAILED = WIN32_ERROR.DNS_ERROR_FILE_WRITEBACK_FAILED;
pub const DNS_ERROR_DATAFILE_PARSING = WIN32_ERROR.DNS_ERROR_DATAFILE_PARSING;
pub const DNS_ERROR_DATABASE_BASE = WIN32_ERROR.DNS_ERROR_DATABASE_BASE;
pub const DNS_ERROR_RECORD_DOES_NOT_EXIST = WIN32_ERROR.DNS_ERROR_RECORD_DOES_NOT_EXIST;
pub const DNS_ERROR_RECORD_FORMAT = WIN32_ERROR.DNS_ERROR_RECORD_FORMAT;
pub const DNS_ERROR_NODE_CREATION_FAILED = WIN32_ERROR.DNS_ERROR_NODE_CREATION_FAILED;
pub const DNS_ERROR_UNKNOWN_RECORD_TYPE = WIN32_ERROR.DNS_ERROR_UNKNOWN_RECORD_TYPE;
pub const DNS_ERROR_RECORD_TIMED_OUT = WIN32_ERROR.DNS_ERROR_RECORD_TIMED_OUT;
pub const DNS_ERROR_NAME_NOT_IN_ZONE = WIN32_ERROR.DNS_ERROR_NAME_NOT_IN_ZONE;
pub const DNS_ERROR_CNAME_LOOP = WIN32_ERROR.DNS_ERROR_CNAME_LOOP;
pub const DNS_ERROR_NODE_IS_CNAME = WIN32_ERROR.DNS_ERROR_NODE_IS_CNAME;
pub const DNS_ERROR_CNAME_COLLISION = WIN32_ERROR.DNS_ERROR_CNAME_COLLISION;
pub const DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT = WIN32_ERROR.DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT;
pub const DNS_ERROR_RECORD_ALREADY_EXISTS = WIN32_ERROR.DNS_ERROR_RECORD_ALREADY_EXISTS;
pub const DNS_ERROR_SECONDARY_DATA = WIN32_ERROR.DNS_ERROR_SECONDARY_DATA;
pub const DNS_ERROR_NO_CREATE_CACHE_DATA = WIN32_ERROR.DNS_ERROR_NO_CREATE_CACHE_DATA;
pub const DNS_ERROR_NAME_DOES_NOT_EXIST = WIN32_ERROR.DNS_ERROR_NAME_DOES_NOT_EXIST;
pub const DNS_ERROR_DS_UNAVAILABLE = WIN32_ERROR.DNS_ERROR_DS_UNAVAILABLE;
pub const DNS_ERROR_DS_ZONE_ALREADY_EXISTS = WIN32_ERROR.DNS_ERROR_DS_ZONE_ALREADY_EXISTS;
pub const DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE = WIN32_ERROR.DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE;
pub const DNS_ERROR_NODE_IS_DNAME = WIN32_ERROR.DNS_ERROR_NODE_IS_DNAME;
pub const DNS_ERROR_DNAME_COLLISION = WIN32_ERROR.DNS_ERROR_DNAME_COLLISION;
pub const DNS_ERROR_ALIAS_LOOP = WIN32_ERROR.DNS_ERROR_ALIAS_LOOP;
pub const DNS_ERROR_OPERATION_BASE = WIN32_ERROR.DNS_ERROR_OPERATION_BASE;
pub const DNS_ERROR_AXFR = WIN32_ERROR.DNS_ERROR_AXFR;
pub const DNS_ERROR_SECURE_BASE = WIN32_ERROR.DNS_ERROR_SECURE_BASE;
pub const DNS_ERROR_SETUP_BASE = WIN32_ERROR.DNS_ERROR_SETUP_BASE;
pub const DNS_ERROR_NO_TCPIP = WIN32_ERROR.DNS_ERROR_NO_TCPIP;
pub const DNS_ERROR_NO_DNS_SERVERS = WIN32_ERROR.DNS_ERROR_NO_DNS_SERVERS;
pub const DNS_ERROR_DP_BASE = WIN32_ERROR.DNS_ERROR_DP_BASE;
pub const DNS_ERROR_DP_DOES_NOT_EXIST = WIN32_ERROR.DNS_ERROR_DP_DOES_NOT_EXIST;
pub const DNS_ERROR_DP_ALREADY_EXISTS = WIN32_ERROR.DNS_ERROR_DP_ALREADY_EXISTS;
pub const DNS_ERROR_DP_NOT_ENLISTED = WIN32_ERROR.DNS_ERROR_DP_NOT_ENLISTED;
pub const DNS_ERROR_DP_ALREADY_ENLISTED = WIN32_ERROR.DNS_ERROR_DP_ALREADY_ENLISTED;
pub const DNS_ERROR_DP_NOT_AVAILABLE = WIN32_ERROR.DNS_ERROR_DP_NOT_AVAILABLE;
pub const DNS_ERROR_DP_FSMO_ERROR = WIN32_ERROR.DNS_ERROR_DP_FSMO_ERROR;
pub const DNS_ERROR_RRL_NOT_ENABLED = WIN32_ERROR.DNS_ERROR_RRL_NOT_ENABLED;
pub const DNS_ERROR_RRL_INVALID_WINDOW_SIZE = WIN32_ERROR.DNS_ERROR_RRL_INVALID_WINDOW_SIZE;
pub const DNS_ERROR_RRL_INVALID_IPV4_PREFIX = WIN32_ERROR.DNS_ERROR_RRL_INVALID_IPV4_PREFIX;
pub const DNS_ERROR_RRL_INVALID_IPV6_PREFIX = WIN32_ERROR.DNS_ERROR_RRL_INVALID_IPV6_PREFIX;
pub const DNS_ERROR_RRL_INVALID_TC_RATE = WIN32_ERROR.DNS_ERROR_RRL_INVALID_TC_RATE;
pub const DNS_ERROR_RRL_INVALID_LEAK_RATE = WIN32_ERROR.DNS_ERROR_RRL_INVALID_LEAK_RATE;
pub const DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE = WIN32_ERROR.DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE;
pub const DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS = WIN32_ERROR.DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS;
pub const DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST = WIN32_ERROR.DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST;
pub const DNS_ERROR_VIRTUALIZATION_TREE_LOCKED = WIN32_ERROR.DNS_ERROR_VIRTUALIZATION_TREE_LOCKED;
pub const DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME = WIN32_ERROR.DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME;
pub const DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE = WIN32_ERROR.DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE;
pub const DNS_ERROR_ZONESCOPE_ALREADY_EXISTS = WIN32_ERROR.DNS_ERROR_ZONESCOPE_ALREADY_EXISTS;
pub const DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST = WIN32_ERROR.DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST;
pub const DNS_ERROR_DEFAULT_ZONESCOPE = WIN32_ERROR.DNS_ERROR_DEFAULT_ZONESCOPE;
pub const DNS_ERROR_INVALID_ZONESCOPE_NAME = WIN32_ERROR.DNS_ERROR_INVALID_ZONESCOPE_NAME;
pub const DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES = WIN32_ERROR.DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES;
pub const DNS_ERROR_LOAD_ZONESCOPE_FAILED = WIN32_ERROR.DNS_ERROR_LOAD_ZONESCOPE_FAILED;
pub const DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED = WIN32_ERROR.DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED;
pub const DNS_ERROR_INVALID_SCOPE_NAME = WIN32_ERROR.DNS_ERROR_INVALID_SCOPE_NAME;
pub const DNS_ERROR_SCOPE_DOES_NOT_EXIST = WIN32_ERROR.DNS_ERROR_SCOPE_DOES_NOT_EXIST;
pub const DNS_ERROR_DEFAULT_SCOPE = WIN32_ERROR.DNS_ERROR_DEFAULT_SCOPE;
pub const DNS_ERROR_INVALID_SCOPE_OPERATION = WIN32_ERROR.DNS_ERROR_INVALID_SCOPE_OPERATION;
pub const DNS_ERROR_SCOPE_LOCKED = WIN32_ERROR.DNS_ERROR_SCOPE_LOCKED;
pub const DNS_ERROR_SCOPE_ALREADY_EXISTS = WIN32_ERROR.DNS_ERROR_SCOPE_ALREADY_EXISTS;
pub const DNS_ERROR_POLICY_ALREADY_EXISTS = WIN32_ERROR.DNS_ERROR_POLICY_ALREADY_EXISTS;
pub const DNS_ERROR_POLICY_DOES_NOT_EXIST = WIN32_ERROR.DNS_ERROR_POLICY_DOES_NOT_EXIST;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA = WIN32_ERROR.DNS_ERROR_POLICY_INVALID_CRITERIA;
pub const DNS_ERROR_POLICY_INVALID_SETTINGS = WIN32_ERROR.DNS_ERROR_POLICY_INVALID_SETTINGS;
pub const DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED = WIN32_ERROR.DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED;
pub const DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST = WIN32_ERROR.DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST;
pub const DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS = WIN32_ERROR.DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS;
pub const DNS_ERROR_SUBNET_DOES_NOT_EXIST = WIN32_ERROR.DNS_ERROR_SUBNET_DOES_NOT_EXIST;
pub const DNS_ERROR_SUBNET_ALREADY_EXISTS = WIN32_ERROR.DNS_ERROR_SUBNET_ALREADY_EXISTS;
pub const DNS_ERROR_POLICY_LOCKED = WIN32_ERROR.DNS_ERROR_POLICY_LOCKED;
pub const DNS_ERROR_POLICY_INVALID_WEIGHT = WIN32_ERROR.DNS_ERROR_POLICY_INVALID_WEIGHT;
pub const DNS_ERROR_POLICY_INVALID_NAME = WIN32_ERROR.DNS_ERROR_POLICY_INVALID_NAME;
pub const DNS_ERROR_POLICY_MISSING_CRITERIA = WIN32_ERROR.DNS_ERROR_POLICY_MISSING_CRITERIA;
pub const DNS_ERROR_INVALID_CLIENT_SUBNET_NAME = WIN32_ERROR.DNS_ERROR_INVALID_CLIENT_SUBNET_NAME;
pub const DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID = WIN32_ERROR.DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID;
pub const DNS_ERROR_POLICY_SCOPE_MISSING = WIN32_ERROR.DNS_ERROR_POLICY_SCOPE_MISSING;
pub const DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED = WIN32_ERROR.DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED;
pub const DNS_ERROR_SERVERSCOPE_IS_REFERENCED = WIN32_ERROR.DNS_ERROR_SERVERSCOPE_IS_REFERENCED;
pub const DNS_ERROR_ZONESCOPE_IS_REFERENCED = WIN32_ERROR.DNS_ERROR_ZONESCOPE_IS_REFERENCED;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET = WIN32_ERROR.DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL = WIN32_ERROR.DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL = WIN32_ERROR.DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE = WIN32_ERROR.DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN = WIN32_ERROR.DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE = WIN32_ERROR.DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY = WIN32_ERROR.DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY;
pub const ERROR_IPSEC_QM_POLICY_EXISTS = WIN32_ERROR.ERROR_IPSEC_QM_POLICY_EXISTS;
pub const ERROR_IPSEC_QM_POLICY_NOT_FOUND = WIN32_ERROR.ERROR_IPSEC_QM_POLICY_NOT_FOUND;
pub const ERROR_IPSEC_QM_POLICY_IN_USE = WIN32_ERROR.ERROR_IPSEC_QM_POLICY_IN_USE;
pub const ERROR_IPSEC_MM_POLICY_EXISTS = WIN32_ERROR.ERROR_IPSEC_MM_POLICY_EXISTS;
pub const ERROR_IPSEC_MM_POLICY_NOT_FOUND = WIN32_ERROR.ERROR_IPSEC_MM_POLICY_NOT_FOUND;
pub const ERROR_IPSEC_MM_POLICY_IN_USE = WIN32_ERROR.ERROR_IPSEC_MM_POLICY_IN_USE;
pub const ERROR_IPSEC_MM_FILTER_EXISTS = WIN32_ERROR.ERROR_IPSEC_MM_FILTER_EXISTS;
pub const ERROR_IPSEC_MM_FILTER_NOT_FOUND = WIN32_ERROR.ERROR_IPSEC_MM_FILTER_NOT_FOUND;
pub const ERROR_IPSEC_TRANSPORT_FILTER_EXISTS = WIN32_ERROR.ERROR_IPSEC_TRANSPORT_FILTER_EXISTS;
pub const ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND = WIN32_ERROR.ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND;
pub const ERROR_IPSEC_MM_AUTH_EXISTS = WIN32_ERROR.ERROR_IPSEC_MM_AUTH_EXISTS;
pub const ERROR_IPSEC_MM_AUTH_NOT_FOUND = WIN32_ERROR.ERROR_IPSEC_MM_AUTH_NOT_FOUND;
pub const ERROR_IPSEC_MM_AUTH_IN_USE = WIN32_ERROR.ERROR_IPSEC_MM_AUTH_IN_USE;
pub const ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND = WIN32_ERROR.ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND;
pub const ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND = WIN32_ERROR.ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND;
pub const ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND = WIN32_ERROR.ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND;
pub const ERROR_IPSEC_TUNNEL_FILTER_EXISTS = WIN32_ERROR.ERROR_IPSEC_TUNNEL_FILTER_EXISTS;
pub const ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND = WIN32_ERROR.ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND;
pub const ERROR_IPSEC_MM_FILTER_PENDING_DELETION = WIN32_ERROR.ERROR_IPSEC_MM_FILTER_PENDING_DELETION;
pub const ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION = WIN32_ERROR.ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION;
pub const ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION = WIN32_ERROR.ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION;
pub const ERROR_IPSEC_MM_POLICY_PENDING_DELETION = WIN32_ERROR.ERROR_IPSEC_MM_POLICY_PENDING_DELETION;
pub const ERROR_IPSEC_MM_AUTH_PENDING_DELETION = WIN32_ERROR.ERROR_IPSEC_MM_AUTH_PENDING_DELETION;
pub const ERROR_IPSEC_QM_POLICY_PENDING_DELETION = WIN32_ERROR.ERROR_IPSEC_QM_POLICY_PENDING_DELETION;
pub const ERROR_IPSEC_IKE_NEG_STATUS_BEGIN = WIN32_ERROR.ERROR_IPSEC_IKE_NEG_STATUS_BEGIN;
pub const ERROR_IPSEC_IKE_AUTH_FAIL = WIN32_ERROR.ERROR_IPSEC_IKE_AUTH_FAIL;
pub const ERROR_IPSEC_IKE_ATTRIB_FAIL = WIN32_ERROR.ERROR_IPSEC_IKE_ATTRIB_FAIL;
pub const ERROR_IPSEC_IKE_NEGOTIATION_PENDING = WIN32_ERROR.ERROR_IPSEC_IKE_NEGOTIATION_PENDING;
pub const ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR = WIN32_ERROR.ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR;
pub const ERROR_IPSEC_IKE_TIMED_OUT = WIN32_ERROR.ERROR_IPSEC_IKE_TIMED_OUT;
pub const ERROR_IPSEC_IKE_NO_CERT = WIN32_ERROR.ERROR_IPSEC_IKE_NO_CERT;
pub const ERROR_IPSEC_IKE_SA_DELETED = WIN32_ERROR.ERROR_IPSEC_IKE_SA_DELETED;
pub const ERROR_IPSEC_IKE_SA_REAPED = WIN32_ERROR.ERROR_IPSEC_IKE_SA_REAPED;
pub const ERROR_IPSEC_IKE_MM_ACQUIRE_DROP = WIN32_ERROR.ERROR_IPSEC_IKE_MM_ACQUIRE_DROP;
pub const ERROR_IPSEC_IKE_QM_ACQUIRE_DROP = WIN32_ERROR.ERROR_IPSEC_IKE_QM_ACQUIRE_DROP;
pub const ERROR_IPSEC_IKE_QUEUE_DROP_MM = WIN32_ERROR.ERROR_IPSEC_IKE_QUEUE_DROP_MM;
pub const ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM = WIN32_ERROR.ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM;
pub const ERROR_IPSEC_IKE_DROP_NO_RESPONSE = WIN32_ERROR.ERROR_IPSEC_IKE_DROP_NO_RESPONSE;
pub const ERROR_IPSEC_IKE_MM_DELAY_DROP = WIN32_ERROR.ERROR_IPSEC_IKE_MM_DELAY_DROP;
pub const ERROR_IPSEC_IKE_QM_DELAY_DROP = WIN32_ERROR.ERROR_IPSEC_IKE_QM_DELAY_DROP;
pub const ERROR_IPSEC_IKE_ERROR = WIN32_ERROR.ERROR_IPSEC_IKE_ERROR;
pub const ERROR_IPSEC_IKE_CRL_FAILED = WIN32_ERROR.ERROR_IPSEC_IKE_CRL_FAILED;
pub const ERROR_IPSEC_IKE_INVALID_KEY_USAGE = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_KEY_USAGE;
pub const ERROR_IPSEC_IKE_INVALID_CERT_TYPE = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_CERT_TYPE;
pub const ERROR_IPSEC_IKE_NO_PRIVATE_KEY = WIN32_ERROR.ERROR_IPSEC_IKE_NO_PRIVATE_KEY;
pub const ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY = WIN32_ERROR.ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY;
pub const ERROR_IPSEC_IKE_DH_FAIL = WIN32_ERROR.ERROR_IPSEC_IKE_DH_FAIL;
pub const ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED = WIN32_ERROR.ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED;
pub const ERROR_IPSEC_IKE_INVALID_HEADER = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_HEADER;
pub const ERROR_IPSEC_IKE_NO_POLICY = WIN32_ERROR.ERROR_IPSEC_IKE_NO_POLICY;
pub const ERROR_IPSEC_IKE_INVALID_SIGNATURE = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_SIGNATURE;
pub const ERROR_IPSEC_IKE_KERBEROS_ERROR = WIN32_ERROR.ERROR_IPSEC_IKE_KERBEROS_ERROR;
pub const ERROR_IPSEC_IKE_NO_PUBLIC_KEY = WIN32_ERROR.ERROR_IPSEC_IKE_NO_PUBLIC_KEY;
pub const ERROR_IPSEC_IKE_PROCESS_ERR = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_SA = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_SA;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_PROP = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_PROP;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_TRANS = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_TRANS;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_KE = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_KE;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_ID = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_ID;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_CERT = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_CERT;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_HASH = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_HASH;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_SIG = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_SIG;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_NONCE = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_NONCE;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_DELETE = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_DELETE;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR;
pub const ERROR_IPSEC_IKE_INVALID_PAYLOAD = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_PAYLOAD;
pub const ERROR_IPSEC_IKE_LOAD_SOFT_SA = WIN32_ERROR.ERROR_IPSEC_IKE_LOAD_SOFT_SA;
pub const ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN = WIN32_ERROR.ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN;
pub const ERROR_IPSEC_IKE_INVALID_COOKIE = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_COOKIE;
pub const ERROR_IPSEC_IKE_NO_PEER_CERT = WIN32_ERROR.ERROR_IPSEC_IKE_NO_PEER_CERT;
pub const ERROR_IPSEC_IKE_PEER_CRL_FAILED = WIN32_ERROR.ERROR_IPSEC_IKE_PEER_CRL_FAILED;
pub const ERROR_IPSEC_IKE_POLICY_CHANGE = WIN32_ERROR.ERROR_IPSEC_IKE_POLICY_CHANGE;
pub const ERROR_IPSEC_IKE_NO_MM_POLICY = WIN32_ERROR.ERROR_IPSEC_IKE_NO_MM_POLICY;
pub const ERROR_IPSEC_IKE_NOTCBPRIV = WIN32_ERROR.ERROR_IPSEC_IKE_NOTCBPRIV;
pub const ERROR_IPSEC_IKE_SECLOADFAIL = WIN32_ERROR.ERROR_IPSEC_IKE_SECLOADFAIL;
pub const ERROR_IPSEC_IKE_FAILSSPINIT = WIN32_ERROR.ERROR_IPSEC_IKE_FAILSSPINIT;
pub const ERROR_IPSEC_IKE_FAILQUERYSSP = WIN32_ERROR.ERROR_IPSEC_IKE_FAILQUERYSSP;
pub const ERROR_IPSEC_IKE_SRVACQFAIL = WIN32_ERROR.ERROR_IPSEC_IKE_SRVACQFAIL;
pub const ERROR_IPSEC_IKE_SRVQUERYCRED = WIN32_ERROR.ERROR_IPSEC_IKE_SRVQUERYCRED;
pub const ERROR_IPSEC_IKE_GETSPIFAIL = WIN32_ERROR.ERROR_IPSEC_IKE_GETSPIFAIL;
pub const ERROR_IPSEC_IKE_INVALID_FILTER = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_FILTER;
pub const ERROR_IPSEC_IKE_OUT_OF_MEMORY = WIN32_ERROR.ERROR_IPSEC_IKE_OUT_OF_MEMORY;
pub const ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED = WIN32_ERROR.ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED;
pub const ERROR_IPSEC_IKE_INVALID_POLICY = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_POLICY;
pub const ERROR_IPSEC_IKE_UNKNOWN_DOI = WIN32_ERROR.ERROR_IPSEC_IKE_UNKNOWN_DOI;
pub const ERROR_IPSEC_IKE_INVALID_SITUATION = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_SITUATION;
pub const ERROR_IPSEC_IKE_DH_FAILURE = WIN32_ERROR.ERROR_IPSEC_IKE_DH_FAILURE;
pub const ERROR_IPSEC_IKE_INVALID_GROUP = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_GROUP;
pub const ERROR_IPSEC_IKE_ENCRYPT = WIN32_ERROR.ERROR_IPSEC_IKE_ENCRYPT;
pub const ERROR_IPSEC_IKE_DECRYPT = WIN32_ERROR.ERROR_IPSEC_IKE_DECRYPT;
pub const ERROR_IPSEC_IKE_POLICY_MATCH = WIN32_ERROR.ERROR_IPSEC_IKE_POLICY_MATCH;
pub const ERROR_IPSEC_IKE_UNSUPPORTED_ID = WIN32_ERROR.ERROR_IPSEC_IKE_UNSUPPORTED_ID;
pub const ERROR_IPSEC_IKE_INVALID_HASH = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_HASH;
pub const ERROR_IPSEC_IKE_INVALID_HASH_ALG = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_HASH_ALG;
pub const ERROR_IPSEC_IKE_INVALID_HASH_SIZE = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_HASH_SIZE;
pub const ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG;
pub const ERROR_IPSEC_IKE_INVALID_AUTH_ALG = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_AUTH_ALG;
pub const ERROR_IPSEC_IKE_INVALID_SIG = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_SIG;
pub const ERROR_IPSEC_IKE_LOAD_FAILED = WIN32_ERROR.ERROR_IPSEC_IKE_LOAD_FAILED;
pub const ERROR_IPSEC_IKE_RPC_DELETE = WIN32_ERROR.ERROR_IPSEC_IKE_RPC_DELETE;
pub const ERROR_IPSEC_IKE_BENIGN_REINIT = WIN32_ERROR.ERROR_IPSEC_IKE_BENIGN_REINIT;
pub const ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY;
pub const ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION;
pub const ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN;
pub const ERROR_IPSEC_IKE_MM_LIMIT = WIN32_ERROR.ERROR_IPSEC_IKE_MM_LIMIT;
pub const ERROR_IPSEC_IKE_NEGOTIATION_DISABLED = WIN32_ERROR.ERROR_IPSEC_IKE_NEGOTIATION_DISABLED;
pub const ERROR_IPSEC_IKE_QM_LIMIT = WIN32_ERROR.ERROR_IPSEC_IKE_QM_LIMIT;
pub const ERROR_IPSEC_IKE_MM_EXPIRED = WIN32_ERROR.ERROR_IPSEC_IKE_MM_EXPIRED;
pub const ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID = WIN32_ERROR.ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID;
pub const ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH = WIN32_ERROR.ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH;
pub const ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID = WIN32_ERROR.ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID;
pub const ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD;
pub const ERROR_IPSEC_IKE_DOS_COOKIE_SENT = WIN32_ERROR.ERROR_IPSEC_IKE_DOS_COOKIE_SENT;
pub const ERROR_IPSEC_IKE_SHUTTING_DOWN = WIN32_ERROR.ERROR_IPSEC_IKE_SHUTTING_DOWN;
pub const ERROR_IPSEC_IKE_CGA_AUTH_FAILED = WIN32_ERROR.ERROR_IPSEC_IKE_CGA_AUTH_FAILED;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_NATOA = WIN32_ERROR.ERROR_IPSEC_IKE_PROCESS_ERR_NATOA;
pub const ERROR_IPSEC_IKE_INVALID_MM_FOR_QM = WIN32_ERROR.ERROR_IPSEC_IKE_INVALID_MM_FOR_QM;
pub const ERROR_IPSEC_IKE_QM_EXPIRED = WIN32_ERROR.ERROR_IPSEC_IKE_QM_EXPIRED;
pub const ERROR_IPSEC_IKE_TOO_MANY_FILTERS = WIN32_ERROR.ERROR_IPSEC_IKE_TOO_MANY_FILTERS;
pub const ERROR_IPSEC_IKE_NEG_STATUS_END = WIN32_ERROR.ERROR_IPSEC_IKE_NEG_STATUS_END;
pub const ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL = WIN32_ERROR.ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL;
pub const ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE = WIN32_ERROR.ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE;
pub const ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING = WIN32_ERROR.ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING;
pub const ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING = WIN32_ERROR.ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING;
pub const ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS = WIN32_ERROR.ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS;
pub const ERROR_IPSEC_IKE_RATELIMIT_DROP = WIN32_ERROR.ERROR_IPSEC_IKE_RATELIMIT_DROP;
pub const ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE = WIN32_ERROR.ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE;
pub const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE = WIN32_ERROR.ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE;
pub const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE = WIN32_ERROR.ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE;
pub const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY = WIN32_ERROR.ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY;
pub const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE = WIN32_ERROR.ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE;
pub const ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END = WIN32_ERROR.ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END;
pub const ERROR_IPSEC_BAD_SPI = WIN32_ERROR.ERROR_IPSEC_BAD_SPI;
pub const ERROR_IPSEC_SA_LIFETIME_EXPIRED = WIN32_ERROR.ERROR_IPSEC_SA_LIFETIME_EXPIRED;
pub const ERROR_IPSEC_WRONG_SA = WIN32_ERROR.ERROR_IPSEC_WRONG_SA;
pub const ERROR_IPSEC_REPLAY_CHECK_FAILED = WIN32_ERROR.ERROR_IPSEC_REPLAY_CHECK_FAILED;
pub const ERROR_IPSEC_INVALID_PACKET = WIN32_ERROR.ERROR_IPSEC_INVALID_PACKET;
pub const ERROR_IPSEC_INTEGRITY_CHECK_FAILED = WIN32_ERROR.ERROR_IPSEC_INTEGRITY_CHECK_FAILED;
pub const ERROR_IPSEC_CLEAR_TEXT_DROP = WIN32_ERROR.ERROR_IPSEC_CLEAR_TEXT_DROP;
pub const ERROR_IPSEC_AUTH_FIREWALL_DROP = WIN32_ERROR.ERROR_IPSEC_AUTH_FIREWALL_DROP;
pub const ERROR_IPSEC_THROTTLE_DROP = WIN32_ERROR.ERROR_IPSEC_THROTTLE_DROP;
pub const ERROR_IPSEC_DOSP_BLOCK = WIN32_ERROR.ERROR_IPSEC_DOSP_BLOCK;
pub const ERROR_IPSEC_DOSP_RECEIVED_MULTICAST = WIN32_ERROR.ERROR_IPSEC_DOSP_RECEIVED_MULTICAST;
pub const ERROR_IPSEC_DOSP_INVALID_PACKET = WIN32_ERROR.ERROR_IPSEC_DOSP_INVALID_PACKET;
pub const ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED = WIN32_ERROR.ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED;
pub const ERROR_IPSEC_DOSP_MAX_ENTRIES = WIN32_ERROR.ERROR_IPSEC_DOSP_MAX_ENTRIES;
pub const ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED = WIN32_ERROR.ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED;
pub const ERROR_IPSEC_DOSP_NOT_INSTALLED = WIN32_ERROR.ERROR_IPSEC_DOSP_NOT_INSTALLED;
pub const ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES = WIN32_ERROR.ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES;
pub const ERROR_SXS_SECTION_NOT_FOUND = WIN32_ERROR.ERROR_SXS_SECTION_NOT_FOUND;
pub const ERROR_SXS_CANT_GEN_ACTCTX = WIN32_ERROR.ERROR_SXS_CANT_GEN_ACTCTX;
pub const ERROR_SXS_INVALID_ACTCTXDATA_FORMAT = WIN32_ERROR.ERROR_SXS_INVALID_ACTCTXDATA_FORMAT;
pub const ERROR_SXS_ASSEMBLY_NOT_FOUND = WIN32_ERROR.ERROR_SXS_ASSEMBLY_NOT_FOUND;
pub const ERROR_SXS_MANIFEST_FORMAT_ERROR = WIN32_ERROR.ERROR_SXS_MANIFEST_FORMAT_ERROR;
pub const ERROR_SXS_MANIFEST_PARSE_ERROR = WIN32_ERROR.ERROR_SXS_MANIFEST_PARSE_ERROR;
pub const ERROR_SXS_ACTIVATION_CONTEXT_DISABLED = WIN32_ERROR.ERROR_SXS_ACTIVATION_CONTEXT_DISABLED;
pub const ERROR_SXS_KEY_NOT_FOUND = WIN32_ERROR.ERROR_SXS_KEY_NOT_FOUND;
pub const ERROR_SXS_VERSION_CONFLICT = WIN32_ERROR.ERROR_SXS_VERSION_CONFLICT;
pub const ERROR_SXS_WRONG_SECTION_TYPE = WIN32_ERROR.ERROR_SXS_WRONG_SECTION_TYPE;
pub const ERROR_SXS_THREAD_QUERIES_DISABLED = WIN32_ERROR.ERROR_SXS_THREAD_QUERIES_DISABLED;
pub const ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET = WIN32_ERROR.ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET;
pub const ERROR_SXS_UNKNOWN_ENCODING_GROUP = WIN32_ERROR.ERROR_SXS_UNKNOWN_ENCODING_GROUP;
pub const ERROR_SXS_UNKNOWN_ENCODING = WIN32_ERROR.ERROR_SXS_UNKNOWN_ENCODING;
pub const ERROR_SXS_INVALID_XML_NAMESPACE_URI = WIN32_ERROR.ERROR_SXS_INVALID_XML_NAMESPACE_URI;
pub const ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED = WIN32_ERROR.ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED;
pub const ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED = WIN32_ERROR.ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED;
pub const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE = WIN32_ERROR.ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE;
pub const ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE = WIN32_ERROR.ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE;
pub const ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE = WIN32_ERROR.ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE;
pub const ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT = WIN32_ERROR.ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT;
pub const ERROR_SXS_DUPLICATE_DLL_NAME = WIN32_ERROR.ERROR_SXS_DUPLICATE_DLL_NAME;
pub const ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME = WIN32_ERROR.ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME;
pub const ERROR_SXS_DUPLICATE_CLSID = WIN32_ERROR.ERROR_SXS_DUPLICATE_CLSID;
pub const ERROR_SXS_DUPLICATE_IID = WIN32_ERROR.ERROR_SXS_DUPLICATE_IID;
pub const ERROR_SXS_DUPLICATE_TLBID = WIN32_ERROR.ERROR_SXS_DUPLICATE_TLBID;
pub const ERROR_SXS_DUPLICATE_PROGID = WIN32_ERROR.ERROR_SXS_DUPLICATE_PROGID;
pub const ERROR_SXS_DUPLICATE_ASSEMBLY_NAME = WIN32_ERROR.ERROR_SXS_DUPLICATE_ASSEMBLY_NAME;
pub const ERROR_SXS_FILE_HASH_MISMATCH = WIN32_ERROR.ERROR_SXS_FILE_HASH_MISMATCH;
pub const ERROR_SXS_POLICY_PARSE_ERROR = WIN32_ERROR.ERROR_SXS_POLICY_PARSE_ERROR;
pub const ERROR_SXS_XML_E_MISSINGQUOTE = WIN32_ERROR.ERROR_SXS_XML_E_MISSINGQUOTE;
pub const ERROR_SXS_XML_E_COMMENTSYNTAX = WIN32_ERROR.ERROR_SXS_XML_E_COMMENTSYNTAX;
pub const ERROR_SXS_XML_E_BADSTARTNAMECHAR = WIN32_ERROR.ERROR_SXS_XML_E_BADSTARTNAMECHAR;
pub const ERROR_SXS_XML_E_BADNAMECHAR = WIN32_ERROR.ERROR_SXS_XML_E_BADNAMECHAR;
pub const ERROR_SXS_XML_E_BADCHARINSTRING = WIN32_ERROR.ERROR_SXS_XML_E_BADCHARINSTRING;
pub const ERROR_SXS_XML_E_XMLDECLSYNTAX = WIN32_ERROR.ERROR_SXS_XML_E_XMLDECLSYNTAX;
pub const ERROR_SXS_XML_E_BADCHARDATA = WIN32_ERROR.ERROR_SXS_XML_E_BADCHARDATA;
pub const ERROR_SXS_XML_E_MISSINGWHITESPACE = WIN32_ERROR.ERROR_SXS_XML_E_MISSINGWHITESPACE;
pub const ERROR_SXS_XML_E_EXPECTINGTAGEND = WIN32_ERROR.ERROR_SXS_XML_E_EXPECTINGTAGEND;
pub const ERROR_SXS_XML_E_MISSINGSEMICOLON = WIN32_ERROR.ERROR_SXS_XML_E_MISSINGSEMICOLON;
pub const ERROR_SXS_XML_E_UNBALANCEDPAREN = WIN32_ERROR.ERROR_SXS_XML_E_UNBALANCEDPAREN;
pub const ERROR_SXS_XML_E_INTERNALERROR = WIN32_ERROR.ERROR_SXS_XML_E_INTERNALERROR;
pub const ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE = WIN32_ERROR.ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE;
pub const ERROR_SXS_XML_E_INCOMPLETE_ENCODING = WIN32_ERROR.ERROR_SXS_XML_E_INCOMPLETE_ENCODING;
pub const ERROR_SXS_XML_E_MISSING_PAREN = WIN32_ERROR.ERROR_SXS_XML_E_MISSING_PAREN;
pub const ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE = WIN32_ERROR.ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE;
pub const ERROR_SXS_XML_E_MULTIPLE_COLONS = WIN32_ERROR.ERROR_SXS_XML_E_MULTIPLE_COLONS;
pub const ERROR_SXS_XML_E_INVALID_DECIMAL = WIN32_ERROR.ERROR_SXS_XML_E_INVALID_DECIMAL;
pub const ERROR_SXS_XML_E_INVALID_HEXIDECIMAL = WIN32_ERROR.ERROR_SXS_XML_E_INVALID_HEXIDECIMAL;
pub const ERROR_SXS_XML_E_INVALID_UNICODE = WIN32_ERROR.ERROR_SXS_XML_E_INVALID_UNICODE;
pub const ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK = WIN32_ERROR.ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK;
pub const ERROR_SXS_XML_E_UNEXPECTEDENDTAG = WIN32_ERROR.ERROR_SXS_XML_E_UNEXPECTEDENDTAG;
pub const ERROR_SXS_XML_E_UNCLOSEDTAG = WIN32_ERROR.ERROR_SXS_XML_E_UNCLOSEDTAG;
pub const ERROR_SXS_XML_E_DUPLICATEATTRIBUTE = WIN32_ERROR.ERROR_SXS_XML_E_DUPLICATEATTRIBUTE;
pub const ERROR_SXS_XML_E_MULTIPLEROOTS = WIN32_ERROR.ERROR_SXS_XML_E_MULTIPLEROOTS;
pub const ERROR_SXS_XML_E_INVALIDATROOTLEVEL = WIN32_ERROR.ERROR_SXS_XML_E_INVALIDATROOTLEVEL;
pub const ERROR_SXS_XML_E_BADXMLDECL = WIN32_ERROR.ERROR_SXS_XML_E_BADXMLDECL;
pub const ERROR_SXS_XML_E_MISSINGROOT = WIN32_ERROR.ERROR_SXS_XML_E_MISSINGROOT;
pub const ERROR_SXS_XML_E_UNEXPECTEDEOF = WIN32_ERROR.ERROR_SXS_XML_E_UNEXPECTEDEOF;
pub const ERROR_SXS_XML_E_BADPEREFINSUBSET = WIN32_ERROR.ERROR_SXS_XML_E_BADPEREFINSUBSET;
pub const ERROR_SXS_XML_E_UNCLOSEDSTARTTAG = WIN32_ERROR.ERROR_SXS_XML_E_UNCLOSEDSTARTTAG;
pub const ERROR_SXS_XML_E_UNCLOSEDENDTAG = WIN32_ERROR.ERROR_SXS_XML_E_UNCLOSEDENDTAG;
pub const ERROR_SXS_XML_E_UNCLOSEDSTRING = WIN32_ERROR.ERROR_SXS_XML_E_UNCLOSEDSTRING;
pub const ERROR_SXS_XML_E_UNCLOSEDCOMMENT = WIN32_ERROR.ERROR_SXS_XML_E_UNCLOSEDCOMMENT;
pub const ERROR_SXS_XML_E_UNCLOSEDDECL = WIN32_ERROR.ERROR_SXS_XML_E_UNCLOSEDDECL;
pub const ERROR_SXS_XML_E_UNCLOSEDCDATA = WIN32_ERROR.ERROR_SXS_XML_E_UNCLOSEDCDATA;
pub const ERROR_SXS_XML_E_RESERVEDNAMESPACE = WIN32_ERROR.ERROR_SXS_XML_E_RESERVEDNAMESPACE;
pub const ERROR_SXS_XML_E_INVALIDENCODING = WIN32_ERROR.ERROR_SXS_XML_E_INVALIDENCODING;
pub const ERROR_SXS_XML_E_INVALIDSWITCH = WIN32_ERROR.ERROR_SXS_XML_E_INVALIDSWITCH;
pub const ERROR_SXS_XML_E_BADXMLCASE = WIN32_ERROR.ERROR_SXS_XML_E_BADXMLCASE;
pub const ERROR_SXS_XML_E_INVALID_STANDALONE = WIN32_ERROR.ERROR_SXS_XML_E_INVALID_STANDALONE;
pub const ERROR_SXS_XML_E_UNEXPECTED_STANDALONE = WIN32_ERROR.ERROR_SXS_XML_E_UNEXPECTED_STANDALONE;
pub const ERROR_SXS_XML_E_INVALID_VERSION = WIN32_ERROR.ERROR_SXS_XML_E_INVALID_VERSION;
pub const ERROR_SXS_XML_E_MISSINGEQUALS = WIN32_ERROR.ERROR_SXS_XML_E_MISSINGEQUALS;
pub const ERROR_SXS_PROTECTION_RECOVERY_FAILED = WIN32_ERROR.ERROR_SXS_PROTECTION_RECOVERY_FAILED;
pub const ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT = WIN32_ERROR.ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT;
pub const ERROR_SXS_PROTECTION_CATALOG_NOT_VALID = WIN32_ERROR.ERROR_SXS_PROTECTION_CATALOG_NOT_VALID;
pub const ERROR_SXS_UNTRANSLATABLE_HRESULT = WIN32_ERROR.ERROR_SXS_UNTRANSLATABLE_HRESULT;
pub const ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING = WIN32_ERROR.ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING;
pub const ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE = WIN32_ERROR.ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE;
pub const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME = WIN32_ERROR.ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME;
pub const ERROR_SXS_ASSEMBLY_MISSING = WIN32_ERROR.ERROR_SXS_ASSEMBLY_MISSING;
pub const ERROR_SXS_CORRUPT_ACTIVATION_STACK = WIN32_ERROR.ERROR_SXS_CORRUPT_ACTIVATION_STACK;
pub const ERROR_SXS_CORRUPTION = WIN32_ERROR.ERROR_SXS_CORRUPTION;
pub const ERROR_SXS_EARLY_DEACTIVATION = WIN32_ERROR.ERROR_SXS_EARLY_DEACTIVATION;
pub const ERROR_SXS_INVALID_DEACTIVATION = WIN32_ERROR.ERROR_SXS_INVALID_DEACTIVATION;
pub const ERROR_SXS_MULTIPLE_DEACTIVATION = WIN32_ERROR.ERROR_SXS_MULTIPLE_DEACTIVATION;
pub const ERROR_SXS_PROCESS_TERMINATION_REQUESTED = WIN32_ERROR.ERROR_SXS_PROCESS_TERMINATION_REQUESTED;
pub const ERROR_SXS_RELEASE_ACTIVATION_CONTEXT = WIN32_ERROR.ERROR_SXS_RELEASE_ACTIVATION_CONTEXT;
pub const ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY = WIN32_ERROR.ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY;
pub const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE = WIN32_ERROR.ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE;
pub const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME = WIN32_ERROR.ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME;
pub const ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE = WIN32_ERROR.ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE;
pub const ERROR_SXS_IDENTITY_PARSE_ERROR = WIN32_ERROR.ERROR_SXS_IDENTITY_PARSE_ERROR;
pub const ERROR_MALFORMED_SUBSTITUTION_STRING = WIN32_ERROR.ERROR_MALFORMED_SUBSTITUTION_STRING;
pub const ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN = WIN32_ERROR.ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN;
pub const ERROR_UNMAPPED_SUBSTITUTION_STRING = WIN32_ERROR.ERROR_UNMAPPED_SUBSTITUTION_STRING;
pub const ERROR_SXS_ASSEMBLY_NOT_LOCKED = WIN32_ERROR.ERROR_SXS_ASSEMBLY_NOT_LOCKED;
pub const ERROR_SXS_COMPONENT_STORE_CORRUPT = WIN32_ERROR.ERROR_SXS_COMPONENT_STORE_CORRUPT;
pub const ERROR_ADVANCED_INSTALLER_FAILED = WIN32_ERROR.ERROR_ADVANCED_INSTALLER_FAILED;
pub const ERROR_XML_ENCODING_MISMATCH = WIN32_ERROR.ERROR_XML_ENCODING_MISMATCH;
pub const ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT = WIN32_ERROR.ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT;
pub const ERROR_SXS_IDENTITIES_DIFFERENT = WIN32_ERROR.ERROR_SXS_IDENTITIES_DIFFERENT;
pub const ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT = WIN32_ERROR.ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT;
pub const ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY = WIN32_ERROR.ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY;
pub const ERROR_SXS_MANIFEST_TOO_BIG = WIN32_ERROR.ERROR_SXS_MANIFEST_TOO_BIG;
pub const ERROR_SXS_SETTING_NOT_REGISTERED = WIN32_ERROR.ERROR_SXS_SETTING_NOT_REGISTERED;
pub const ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE = WIN32_ERROR.ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE;
pub const ERROR_SMI_PRIMITIVE_INSTALLER_FAILED = WIN32_ERROR.ERROR_SMI_PRIMITIVE_INSTALLER_FAILED;
pub const ERROR_GENERIC_COMMAND_FAILED = WIN32_ERROR.ERROR_GENERIC_COMMAND_FAILED;
pub const ERROR_SXS_FILE_HASH_MISSING = WIN32_ERROR.ERROR_SXS_FILE_HASH_MISSING;
pub const ERROR_SXS_DUPLICATE_ACTIVATABLE_CLASS = WIN32_ERROR.ERROR_SXS_DUPLICATE_ACTIVATABLE_CLASS;
pub const ERROR_EVT_INVALID_CHANNEL_PATH = WIN32_ERROR.ERROR_EVT_INVALID_CHANNEL_PATH;
pub const ERROR_EVT_INVALID_QUERY = WIN32_ERROR.ERROR_EVT_INVALID_QUERY;
pub const ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND = WIN32_ERROR.ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND;
pub const ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND = WIN32_ERROR.ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND;
pub const ERROR_EVT_INVALID_PUBLISHER_NAME = WIN32_ERROR.ERROR_EVT_INVALID_PUBLISHER_NAME;
pub const ERROR_EVT_INVALID_EVENT_DATA = WIN32_ERROR.ERROR_EVT_INVALID_EVENT_DATA;
pub const ERROR_EVT_CHANNEL_NOT_FOUND = WIN32_ERROR.ERROR_EVT_CHANNEL_NOT_FOUND;
pub const ERROR_EVT_MALFORMED_XML_TEXT = WIN32_ERROR.ERROR_EVT_MALFORMED_XML_TEXT;
pub const ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL = WIN32_ERROR.ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL;
pub const ERROR_EVT_CONFIGURATION_ERROR = WIN32_ERROR.ERROR_EVT_CONFIGURATION_ERROR;
pub const ERROR_EVT_QUERY_RESULT_STALE = WIN32_ERROR.ERROR_EVT_QUERY_RESULT_STALE;
pub const ERROR_EVT_QUERY_RESULT_INVALID_POSITION = WIN32_ERROR.ERROR_EVT_QUERY_RESULT_INVALID_POSITION;
pub const ERROR_EVT_NON_VALIDATING_MSXML = WIN32_ERROR.ERROR_EVT_NON_VALIDATING_MSXML;
pub const ERROR_EVT_FILTER_ALREADYSCOPED = WIN32_ERROR.ERROR_EVT_FILTER_ALREADYSCOPED;
pub const ERROR_EVT_FILTER_NOTELTSET = WIN32_ERROR.ERROR_EVT_FILTER_NOTELTSET;
pub const ERROR_EVT_FILTER_INVARG = WIN32_ERROR.ERROR_EVT_FILTER_INVARG;
pub const ERROR_EVT_FILTER_INVTEST = WIN32_ERROR.ERROR_EVT_FILTER_INVTEST;
pub const ERROR_EVT_FILTER_INVTYPE = WIN32_ERROR.ERROR_EVT_FILTER_INVTYPE;
pub const ERROR_EVT_FILTER_PARSEERR = WIN32_ERROR.ERROR_EVT_FILTER_PARSEERR;
pub const ERROR_EVT_FILTER_UNSUPPORTEDOP = WIN32_ERROR.ERROR_EVT_FILTER_UNSUPPORTEDOP;
pub const ERROR_EVT_FILTER_UNEXPECTEDTOKEN = WIN32_ERROR.ERROR_EVT_FILTER_UNEXPECTEDTOKEN;
pub const ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL = WIN32_ERROR.ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL;
pub const ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE = WIN32_ERROR.ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE;
pub const ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE = WIN32_ERROR.ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE;
pub const ERROR_EVT_CHANNEL_CANNOT_ACTIVATE = WIN32_ERROR.ERROR_EVT_CHANNEL_CANNOT_ACTIVATE;
pub const ERROR_EVT_FILTER_TOO_COMPLEX = WIN32_ERROR.ERROR_EVT_FILTER_TOO_COMPLEX;
pub const ERROR_EVT_MESSAGE_NOT_FOUND = WIN32_ERROR.ERROR_EVT_MESSAGE_NOT_FOUND;
pub const ERROR_EVT_MESSAGE_ID_NOT_FOUND = WIN32_ERROR.ERROR_EVT_MESSAGE_ID_NOT_FOUND;
pub const ERROR_EVT_UNRESOLVED_VALUE_INSERT = WIN32_ERROR.ERROR_EVT_UNRESOLVED_VALUE_INSERT;
pub const ERROR_EVT_UNRESOLVED_PARAMETER_INSERT = WIN32_ERROR.ERROR_EVT_UNRESOLVED_PARAMETER_INSERT;
pub const ERROR_EVT_MAX_INSERTS_REACHED = WIN32_ERROR.ERROR_EVT_MAX_INSERTS_REACHED;
pub const ERROR_EVT_EVENT_DEFINITION_NOT_FOUND = WIN32_ERROR.ERROR_EVT_EVENT_DEFINITION_NOT_FOUND;
pub const ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND = WIN32_ERROR.ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND;
pub const ERROR_EVT_VERSION_TOO_OLD = WIN32_ERROR.ERROR_EVT_VERSION_TOO_OLD;
pub const ERROR_EVT_VERSION_TOO_NEW = WIN32_ERROR.ERROR_EVT_VERSION_TOO_NEW;
pub const ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY = WIN32_ERROR.ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY;
pub const ERROR_EVT_PUBLISHER_DISABLED = WIN32_ERROR.ERROR_EVT_PUBLISHER_DISABLED;
pub const ERROR_EVT_FILTER_OUT_OF_RANGE = WIN32_ERROR.ERROR_EVT_FILTER_OUT_OF_RANGE;
pub const ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE = WIN32_ERROR.ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE;
pub const ERROR_EC_LOG_DISABLED = WIN32_ERROR.ERROR_EC_LOG_DISABLED;
pub const ERROR_EC_CIRCULAR_FORWARDING = WIN32_ERROR.ERROR_EC_CIRCULAR_FORWARDING;
pub const ERROR_EC_CREDSTORE_FULL = WIN32_ERROR.ERROR_EC_CREDSTORE_FULL;
pub const ERROR_EC_CRED_NOT_FOUND = WIN32_ERROR.ERROR_EC_CRED_NOT_FOUND;
pub const ERROR_EC_NO_ACTIVE_CHANNEL = WIN32_ERROR.ERROR_EC_NO_ACTIVE_CHANNEL;
pub const ERROR_MUI_FILE_NOT_FOUND = WIN32_ERROR.ERROR_MUI_FILE_NOT_FOUND;
pub const ERROR_MUI_INVALID_FILE = WIN32_ERROR.ERROR_MUI_INVALID_FILE;
pub const ERROR_MUI_INVALID_RC_CONFIG = WIN32_ERROR.ERROR_MUI_INVALID_RC_CONFIG;
pub const ERROR_MUI_INVALID_LOCALE_NAME = WIN32_ERROR.ERROR_MUI_INVALID_LOCALE_NAME;
pub const ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME = WIN32_ERROR.ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME;
pub const ERROR_MUI_FILE_NOT_LOADED = WIN32_ERROR.ERROR_MUI_FILE_NOT_LOADED;
pub const ERROR_RESOURCE_ENUM_USER_STOP = WIN32_ERROR.ERROR_RESOURCE_ENUM_USER_STOP;
pub const ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED = WIN32_ERROR.ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED;
pub const ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME = WIN32_ERROR.ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME;
pub const ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE = WIN32_ERROR.ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE;
pub const ERROR_MRM_INVALID_PRICONFIG = WIN32_ERROR.ERROR_MRM_INVALID_PRICONFIG;
pub const ERROR_MRM_INVALID_FILE_TYPE = WIN32_ERROR.ERROR_MRM_INVALID_FILE_TYPE;
pub const ERROR_MRM_UNKNOWN_QUALIFIER = WIN32_ERROR.ERROR_MRM_UNKNOWN_QUALIFIER;
pub const ERROR_MRM_INVALID_QUALIFIER_VALUE = WIN32_ERROR.ERROR_MRM_INVALID_QUALIFIER_VALUE;
pub const ERROR_MRM_NO_CANDIDATE = WIN32_ERROR.ERROR_MRM_NO_CANDIDATE;
pub const ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE = WIN32_ERROR.ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE;
pub const ERROR_MRM_RESOURCE_TYPE_MISMATCH = WIN32_ERROR.ERROR_MRM_RESOURCE_TYPE_MISMATCH;
pub const ERROR_MRM_DUPLICATE_MAP_NAME = WIN32_ERROR.ERROR_MRM_DUPLICATE_MAP_NAME;
pub const ERROR_MRM_DUPLICATE_ENTRY = WIN32_ERROR.ERROR_MRM_DUPLICATE_ENTRY;
pub const ERROR_MRM_INVALID_RESOURCE_IDENTIFIER = WIN32_ERROR.ERROR_MRM_INVALID_RESOURCE_IDENTIFIER;
pub const ERROR_MRM_FILEPATH_TOO_LONG = WIN32_ERROR.ERROR_MRM_FILEPATH_TOO_LONG;
pub const ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE = WIN32_ERROR.ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE;
pub const ERROR_MRM_INVALID_PRI_FILE = WIN32_ERROR.ERROR_MRM_INVALID_PRI_FILE;
pub const ERROR_MRM_NAMED_RESOURCE_NOT_FOUND = WIN32_ERROR.ERROR_MRM_NAMED_RESOURCE_NOT_FOUND;
pub const ERROR_MRM_MAP_NOT_FOUND = WIN32_ERROR.ERROR_MRM_MAP_NOT_FOUND;
pub const ERROR_MRM_UNSUPPORTED_PROFILE_TYPE = WIN32_ERROR.ERROR_MRM_UNSUPPORTED_PROFILE_TYPE;
pub const ERROR_MRM_INVALID_QUALIFIER_OPERATOR = WIN32_ERROR.ERROR_MRM_INVALID_QUALIFIER_OPERATOR;
pub const ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE = WIN32_ERROR.ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE;
pub const ERROR_MRM_AUTOMERGE_ENABLED = WIN32_ERROR.ERROR_MRM_AUTOMERGE_ENABLED;
pub const ERROR_MRM_TOO_MANY_RESOURCES = WIN32_ERROR.ERROR_MRM_TOO_MANY_RESOURCES;
pub const ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_MERGE = WIN32_ERROR.ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_MERGE;
pub const ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_LOAD_UNLOAD_PRI_FILE = WIN32_ERROR.ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_LOAD_UNLOAD_PRI_FILE;
pub const ERROR_MRM_NO_CURRENT_VIEW_ON_THREAD = WIN32_ERROR.ERROR_MRM_NO_CURRENT_VIEW_ON_THREAD;
pub const ERROR_DIFFERENT_PROFILE_RESOURCE_MANAGER_EXIST = WIN32_ERROR.ERROR_DIFFERENT_PROFILE_RESOURCE_MANAGER_EXIST;
pub const ERROR_OPERATION_NOT_ALLOWED_FROM_SYSTEM_COMPONENT = WIN32_ERROR.ERROR_OPERATION_NOT_ALLOWED_FROM_SYSTEM_COMPONENT;
pub const ERROR_MRM_DIRECT_REF_TO_NON_DEFAULT_RESOURCE = WIN32_ERROR.ERROR_MRM_DIRECT_REF_TO_NON_DEFAULT_RESOURCE;
pub const ERROR_MRM_GENERATION_COUNT_MISMATCH = WIN32_ERROR.ERROR_MRM_GENERATION_COUNT_MISMATCH;
pub const ERROR_PRI_MERGE_VERSION_MISMATCH = WIN32_ERROR.ERROR_PRI_MERGE_VERSION_MISMATCH;
pub const ERROR_PRI_MERGE_MISSING_SCHEMA = WIN32_ERROR.ERROR_PRI_MERGE_MISSING_SCHEMA;
pub const ERROR_PRI_MERGE_LOAD_FILE_FAILED = WIN32_ERROR.ERROR_PRI_MERGE_LOAD_FILE_FAILED;
pub const ERROR_PRI_MERGE_ADD_FILE_FAILED = WIN32_ERROR.ERROR_PRI_MERGE_ADD_FILE_FAILED;
pub const ERROR_PRI_MERGE_WRITE_FILE_FAILED = WIN32_ERROR.ERROR_PRI_MERGE_WRITE_FILE_FAILED;
pub const ERROR_PRI_MERGE_MULTIPLE_PACKAGE_FAMILIES_NOT_ALLOWED = WIN32_ERROR.ERROR_PRI_MERGE_MULTIPLE_PACKAGE_FAMILIES_NOT_ALLOWED;
pub const ERROR_PRI_MERGE_MULTIPLE_MAIN_PACKAGES_NOT_ALLOWED = WIN32_ERROR.ERROR_PRI_MERGE_MULTIPLE_MAIN_PACKAGES_NOT_ALLOWED;
pub const ERROR_PRI_MERGE_BUNDLE_PACKAGES_NOT_ALLOWED = WIN32_ERROR.ERROR_PRI_MERGE_BUNDLE_PACKAGES_NOT_ALLOWED;
pub const ERROR_PRI_MERGE_MAIN_PACKAGE_REQUIRED = WIN32_ERROR.ERROR_PRI_MERGE_MAIN_PACKAGE_REQUIRED;
pub const ERROR_PRI_MERGE_RESOURCE_PACKAGE_REQUIRED = WIN32_ERROR.ERROR_PRI_MERGE_RESOURCE_PACKAGE_REQUIRED;
pub const ERROR_PRI_MERGE_INVALID_FILE_NAME = WIN32_ERROR.ERROR_PRI_MERGE_INVALID_FILE_NAME;
pub const ERROR_MRM_PACKAGE_NOT_FOUND = WIN32_ERROR.ERROR_MRM_PACKAGE_NOT_FOUND;
pub const ERROR_MRM_MISSING_DEFAULT_LANGUAGE = WIN32_ERROR.ERROR_MRM_MISSING_DEFAULT_LANGUAGE;
pub const ERROR_MCA_INVALID_CAPABILITIES_STRING = WIN32_ERROR.ERROR_MCA_INVALID_CAPABILITIES_STRING;
pub const ERROR_MCA_INVALID_VCP_VERSION = WIN32_ERROR.ERROR_MCA_INVALID_VCP_VERSION;
pub const ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION = WIN32_ERROR.ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION;
pub const ERROR_MCA_MCCS_VERSION_MISMATCH = WIN32_ERROR.ERROR_MCA_MCCS_VERSION_MISMATCH;
pub const ERROR_MCA_UNSUPPORTED_MCCS_VERSION = WIN32_ERROR.ERROR_MCA_UNSUPPORTED_MCCS_VERSION;
pub const ERROR_MCA_INTERNAL_ERROR = WIN32_ERROR.ERROR_MCA_INTERNAL_ERROR;
pub const ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED = WIN32_ERROR.ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED;
pub const ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE = WIN32_ERROR.ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE;
pub const ERROR_AMBIGUOUS_SYSTEM_DEVICE = WIN32_ERROR.ERROR_AMBIGUOUS_SYSTEM_DEVICE;
pub const ERROR_SYSTEM_DEVICE_NOT_FOUND = WIN32_ERROR.ERROR_SYSTEM_DEVICE_NOT_FOUND;
pub const ERROR_HASH_NOT_SUPPORTED = WIN32_ERROR.ERROR_HASH_NOT_SUPPORTED;
pub const ERROR_HASH_NOT_PRESENT = WIN32_ERROR.ERROR_HASH_NOT_PRESENT;
pub const ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED = WIN32_ERROR.ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED;
pub const ERROR_GPIO_CLIENT_INFORMATION_INVALID = WIN32_ERROR.ERROR_GPIO_CLIENT_INFORMATION_INVALID;
pub const ERROR_GPIO_VERSION_NOT_SUPPORTED = WIN32_ERROR.ERROR_GPIO_VERSION_NOT_SUPPORTED;
pub const ERROR_GPIO_INVALID_REGISTRATION_PACKET = WIN32_ERROR.ERROR_GPIO_INVALID_REGISTRATION_PACKET;
pub const ERROR_GPIO_OPERATION_DENIED = WIN32_ERROR.ERROR_GPIO_OPERATION_DENIED;
pub const ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE = WIN32_ERROR.ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE;
pub const ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED = WIN32_ERROR.ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED;
pub const ERROR_CANNOT_SWITCH_RUNLEVEL = WIN32_ERROR.ERROR_CANNOT_SWITCH_RUNLEVEL;
pub const ERROR_INVALID_RUNLEVEL_SETTING = WIN32_ERROR.ERROR_INVALID_RUNLEVEL_SETTING;
pub const ERROR_RUNLEVEL_SWITCH_TIMEOUT = WIN32_ERROR.ERROR_RUNLEVEL_SWITCH_TIMEOUT;
pub const ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT = WIN32_ERROR.ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT;
pub const ERROR_RUNLEVEL_SWITCH_IN_PROGRESS = WIN32_ERROR.ERROR_RUNLEVEL_SWITCH_IN_PROGRESS;
pub const ERROR_SERVICES_FAILED_AUTOSTART = WIN32_ERROR.ERROR_SERVICES_FAILED_AUTOSTART;
pub const ERROR_COM_TASK_STOP_PENDING = WIN32_ERROR.ERROR_COM_TASK_STOP_PENDING;
pub const ERROR_INSTALL_OPEN_PACKAGE_FAILED = WIN32_ERROR.ERROR_INSTALL_OPEN_PACKAGE_FAILED;
pub const ERROR_INSTALL_PACKAGE_NOT_FOUND = WIN32_ERROR.ERROR_INSTALL_PACKAGE_NOT_FOUND;
pub const ERROR_INSTALL_INVALID_PACKAGE = WIN32_ERROR.ERROR_INSTALL_INVALID_PACKAGE;
pub const ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED = WIN32_ERROR.ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED;
pub const ERROR_INSTALL_OUT_OF_DISK_SPACE = WIN32_ERROR.ERROR_INSTALL_OUT_OF_DISK_SPACE;
pub const ERROR_INSTALL_NETWORK_FAILURE = WIN32_ERROR.ERROR_INSTALL_NETWORK_FAILURE;
pub const ERROR_INSTALL_REGISTRATION_FAILURE = WIN32_ERROR.ERROR_INSTALL_REGISTRATION_FAILURE;
pub const ERROR_INSTALL_DEREGISTRATION_FAILURE = WIN32_ERROR.ERROR_INSTALL_DEREGISTRATION_FAILURE;
pub const ERROR_INSTALL_CANCEL = WIN32_ERROR.ERROR_INSTALL_CANCEL;
pub const ERROR_INSTALL_FAILED = WIN32_ERROR.ERROR_INSTALL_FAILED;
pub const ERROR_REMOVE_FAILED = WIN32_ERROR.ERROR_REMOVE_FAILED;
pub const ERROR_PACKAGE_ALREADY_EXISTS = WIN32_ERROR.ERROR_PACKAGE_ALREADY_EXISTS;
pub const ERROR_NEEDS_REMEDIATION = WIN32_ERROR.ERROR_NEEDS_REMEDIATION;
pub const ERROR_INSTALL_PREREQUISITE_FAILED = WIN32_ERROR.ERROR_INSTALL_PREREQUISITE_FAILED;
pub const ERROR_PACKAGE_REPOSITORY_CORRUPTED = WIN32_ERROR.ERROR_PACKAGE_REPOSITORY_CORRUPTED;
pub const ERROR_INSTALL_POLICY_FAILURE = WIN32_ERROR.ERROR_INSTALL_POLICY_FAILURE;
pub const ERROR_PACKAGE_UPDATING = WIN32_ERROR.ERROR_PACKAGE_UPDATING;
pub const ERROR_DEPLOYMENT_BLOCKED_BY_POLICY = WIN32_ERROR.ERROR_DEPLOYMENT_BLOCKED_BY_POLICY;
pub const ERROR_PACKAGES_IN_USE = WIN32_ERROR.ERROR_PACKAGES_IN_USE;
pub const ERROR_RECOVERY_FILE_CORRUPT = WIN32_ERROR.ERROR_RECOVERY_FILE_CORRUPT;
pub const ERROR_INVALID_STAGED_SIGNATURE = WIN32_ERROR.ERROR_INVALID_STAGED_SIGNATURE;
pub const ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED = WIN32_ERROR.ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED;
pub const ERROR_INSTALL_PACKAGE_DOWNGRADE = WIN32_ERROR.ERROR_INSTALL_PACKAGE_DOWNGRADE;
pub const ERROR_SYSTEM_NEEDS_REMEDIATION = WIN32_ERROR.ERROR_SYSTEM_NEEDS_REMEDIATION;
pub const ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN = WIN32_ERROR.ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN;
pub const ERROR_RESILIENCY_FILE_CORRUPT = WIN32_ERROR.ERROR_RESILIENCY_FILE_CORRUPT;
pub const ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING = WIN32_ERROR.ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING;
pub const ERROR_PACKAGE_MOVE_FAILED = WIN32_ERROR.ERROR_PACKAGE_MOVE_FAILED;
pub const ERROR_INSTALL_VOLUME_NOT_EMPTY = WIN32_ERROR.ERROR_INSTALL_VOLUME_NOT_EMPTY;
pub const ERROR_INSTALL_VOLUME_OFFLINE = WIN32_ERROR.ERROR_INSTALL_VOLUME_OFFLINE;
pub const ERROR_INSTALL_VOLUME_CORRUPT = WIN32_ERROR.ERROR_INSTALL_VOLUME_CORRUPT;
pub const ERROR_NEEDS_REGISTRATION = WIN32_ERROR.ERROR_NEEDS_REGISTRATION;
pub const ERROR_INSTALL_WRONG_PROCESSOR_ARCHITECTURE = WIN32_ERROR.ERROR_INSTALL_WRONG_PROCESSOR_ARCHITECTURE;
pub const ERROR_DEV_SIDELOAD_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_DEV_SIDELOAD_LIMIT_EXCEEDED;
pub const ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE = WIN32_ERROR.ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE;
pub const ERROR_PACKAGE_NOT_SUPPORTED_ON_FILESYSTEM = WIN32_ERROR.ERROR_PACKAGE_NOT_SUPPORTED_ON_FILESYSTEM;
pub const ERROR_PACKAGE_MOVE_BLOCKED_BY_STREAMING = WIN32_ERROR.ERROR_PACKAGE_MOVE_BLOCKED_BY_STREAMING;
pub const ERROR_INSTALL_OPTIONAL_PACKAGE_APPLICATIONID_NOT_UNIQUE = WIN32_ERROR.ERROR_INSTALL_OPTIONAL_PACKAGE_APPLICATIONID_NOT_UNIQUE;
pub const ERROR_PACKAGE_STAGING_ONHOLD = WIN32_ERROR.ERROR_PACKAGE_STAGING_ONHOLD;
pub const ERROR_INSTALL_INVALID_RELATED_SET_UPDATE = WIN32_ERROR.ERROR_INSTALL_INVALID_RELATED_SET_UPDATE;
pub const ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY = WIN32_ERROR.ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY;
pub const ERROR_DEPLOYMENT_BLOCKED_BY_USER_LOG_OFF = WIN32_ERROR.ERROR_DEPLOYMENT_BLOCKED_BY_USER_LOG_OFF;
pub const ERROR_PROVISION_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_PROVISIONED = WIN32_ERROR.ERROR_PROVISION_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_PROVISIONED;
pub const ERROR_PACKAGES_REPUTATION_CHECK_FAILED = WIN32_ERROR.ERROR_PACKAGES_REPUTATION_CHECK_FAILED;
pub const ERROR_PACKAGES_REPUTATION_CHECK_TIMEDOUT = WIN32_ERROR.ERROR_PACKAGES_REPUTATION_CHECK_TIMEDOUT;
pub const ERROR_DEPLOYMENT_OPTION_NOT_SUPPORTED = WIN32_ERROR.ERROR_DEPLOYMENT_OPTION_NOT_SUPPORTED;
pub const ERROR_APPINSTALLER_ACTIVATION_BLOCKED = WIN32_ERROR.ERROR_APPINSTALLER_ACTIVATION_BLOCKED;
pub const ERROR_REGISTRATION_FROM_REMOTE_DRIVE_NOT_SUPPORTED = WIN32_ERROR.ERROR_REGISTRATION_FROM_REMOTE_DRIVE_NOT_SUPPORTED;
pub const ERROR_APPX_RAW_DATA_WRITE_FAILED = WIN32_ERROR.ERROR_APPX_RAW_DATA_WRITE_FAILED;
pub const ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_PACKAGE = WIN32_ERROR.ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_PACKAGE;
pub const ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_MACHINE = WIN32_ERROR.ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_MACHINE;
pub const ERROR_DEPLOYMENT_BLOCKED_BY_PROFILE_POLICY = WIN32_ERROR.ERROR_DEPLOYMENT_BLOCKED_BY_PROFILE_POLICY;
pub const ERROR_DEPLOYMENT_FAILED_CONFLICTING_MUTABLE_PACKAGE_DIRECTORY = WIN32_ERROR.ERROR_DEPLOYMENT_FAILED_CONFLICTING_MUTABLE_PACKAGE_DIRECTORY;
pub const ERROR_SINGLETON_RESOURCE_INSTALLED_IN_ACTIVE_USER = WIN32_ERROR.ERROR_SINGLETON_RESOURCE_INSTALLED_IN_ACTIVE_USER;
pub const ERROR_DIFFERENT_VERSION_OF_PACKAGED_SERVICE_INSTALLED = WIN32_ERROR.ERROR_DIFFERENT_VERSION_OF_PACKAGED_SERVICE_INSTALLED;
pub const ERROR_SERVICE_EXISTS_AS_NON_PACKAGED_SERVICE = WIN32_ERROR.ERROR_SERVICE_EXISTS_AS_NON_PACKAGED_SERVICE;
pub const ERROR_PACKAGED_SERVICE_REQUIRES_ADMIN_PRIVILEGES = WIN32_ERROR.ERROR_PACKAGED_SERVICE_REQUIRES_ADMIN_PRIVILEGES;
pub const ERROR_REDIRECTION_TO_DEFAULT_ACCOUNT_NOT_ALLOWED = WIN32_ERROR.ERROR_REDIRECTION_TO_DEFAULT_ACCOUNT_NOT_ALLOWED;
pub const ERROR_PACKAGE_LACKS_CAPABILITY_TO_DEPLOY_ON_HOST = WIN32_ERROR.ERROR_PACKAGE_LACKS_CAPABILITY_TO_DEPLOY_ON_HOST;
pub const ERROR_UNSIGNED_PACKAGE_INVALID_CONTENT = WIN32_ERROR.ERROR_UNSIGNED_PACKAGE_INVALID_CONTENT;
pub const ERROR_UNSIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE = WIN32_ERROR.ERROR_UNSIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE;
pub const ERROR_SIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE = WIN32_ERROR.ERROR_SIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE;
pub const ERROR_PACKAGE_EXTERNAL_LOCATION_NOT_ALLOWED = WIN32_ERROR.ERROR_PACKAGE_EXTERNAL_LOCATION_NOT_ALLOWED;
pub const ERROR_INSTALL_FULLTRUST_HOSTRUNTIME_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY = WIN32_ERROR.ERROR_INSTALL_FULLTRUST_HOSTRUNTIME_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY;
pub const ERROR_PACKAGE_LACKS_CAPABILITY_FOR_MANDATORY_STARTUPTASKS = WIN32_ERROR.ERROR_PACKAGE_LACKS_CAPABILITY_FOR_MANDATORY_STARTUPTASKS;
pub const ERROR_INSTALL_RESOLVE_HOSTRUNTIME_DEPENDENCY_FAILED = WIN32_ERROR.ERROR_INSTALL_RESOLVE_HOSTRUNTIME_DEPENDENCY_FAILED;
pub const ERROR_MACHINE_SCOPE_NOT_ALLOWED = WIN32_ERROR.ERROR_MACHINE_SCOPE_NOT_ALLOWED;
pub const ERROR_CLASSIC_COMPAT_MODE_NOT_ALLOWED = WIN32_ERROR.ERROR_CLASSIC_COMPAT_MODE_NOT_ALLOWED;
pub const ERROR_STAGEFROMUPDATEAGENT_PACKAGE_NOT_APPLICABLE = WIN32_ERROR.ERROR_STAGEFROMUPDATEAGENT_PACKAGE_NOT_APPLICABLE;
pub const ERROR_PACKAGE_NOT_REGISTERED_FOR_USER = WIN32_ERROR.ERROR_PACKAGE_NOT_REGISTERED_FOR_USER;
pub const ERROR_STATE_LOAD_STORE_FAILED = WIN32_ERROR.ERROR_STATE_LOAD_STORE_FAILED;
pub const ERROR_STATE_GET_VERSION_FAILED = WIN32_ERROR.ERROR_STATE_GET_VERSION_FAILED;
pub const ERROR_STATE_SET_VERSION_FAILED = WIN32_ERROR.ERROR_STATE_SET_VERSION_FAILED;
pub const ERROR_STATE_STRUCTURED_RESET_FAILED = WIN32_ERROR.ERROR_STATE_STRUCTURED_RESET_FAILED;
pub const ERROR_STATE_OPEN_CONTAINER_FAILED = WIN32_ERROR.ERROR_STATE_OPEN_CONTAINER_FAILED;
pub const ERROR_STATE_CREATE_CONTAINER_FAILED = WIN32_ERROR.ERROR_STATE_CREATE_CONTAINER_FAILED;
pub const ERROR_STATE_DELETE_CONTAINER_FAILED = WIN32_ERROR.ERROR_STATE_DELETE_CONTAINER_FAILED;
pub const ERROR_STATE_READ_SETTING_FAILED = WIN32_ERROR.ERROR_STATE_READ_SETTING_FAILED;
pub const ERROR_STATE_WRITE_SETTING_FAILED = WIN32_ERROR.ERROR_STATE_WRITE_SETTING_FAILED;
pub const ERROR_STATE_DELETE_SETTING_FAILED = WIN32_ERROR.ERROR_STATE_DELETE_SETTING_FAILED;
pub const ERROR_STATE_QUERY_SETTING_FAILED = WIN32_ERROR.ERROR_STATE_QUERY_SETTING_FAILED;
pub const ERROR_STATE_READ_COMPOSITE_SETTING_FAILED = WIN32_ERROR.ERROR_STATE_READ_COMPOSITE_SETTING_FAILED;
pub const ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED = WIN32_ERROR.ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED;
pub const ERROR_STATE_ENUMERATE_CONTAINER_FAILED = WIN32_ERROR.ERROR_STATE_ENUMERATE_CONTAINER_FAILED;
pub const ERROR_STATE_ENUMERATE_SETTINGS_FAILED = WIN32_ERROR.ERROR_STATE_ENUMERATE_SETTINGS_FAILED;
pub const ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED;
pub const ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED;
pub const ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED;
pub const ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED;
pub const ERROR_API_UNAVAILABLE = WIN32_ERROR.ERROR_API_UNAVAILABLE;
pub const ERROR_NDIS_INTERFACE_CLOSING = WIN32_ERROR.ERROR_NDIS_INTERFACE_CLOSING;
pub const ERROR_NDIS_BAD_VERSION = WIN32_ERROR.ERROR_NDIS_BAD_VERSION;
pub const ERROR_NDIS_BAD_CHARACTERISTICS = WIN32_ERROR.ERROR_NDIS_BAD_CHARACTERISTICS;
pub const ERROR_NDIS_ADAPTER_NOT_FOUND = WIN32_ERROR.ERROR_NDIS_ADAPTER_NOT_FOUND;
pub const ERROR_NDIS_OPEN_FAILED = WIN32_ERROR.ERROR_NDIS_OPEN_FAILED;
pub const ERROR_NDIS_DEVICE_FAILED = WIN32_ERROR.ERROR_NDIS_DEVICE_FAILED;
pub const ERROR_NDIS_MULTICAST_FULL = WIN32_ERROR.ERROR_NDIS_MULTICAST_FULL;
pub const ERROR_NDIS_MULTICAST_EXISTS = WIN32_ERROR.ERROR_NDIS_MULTICAST_EXISTS;
pub const ERROR_NDIS_MULTICAST_NOT_FOUND = WIN32_ERROR.ERROR_NDIS_MULTICAST_NOT_FOUND;
pub const ERROR_NDIS_REQUEST_ABORTED = WIN32_ERROR.ERROR_NDIS_REQUEST_ABORTED;
pub const ERROR_NDIS_RESET_IN_PROGRESS = WIN32_ERROR.ERROR_NDIS_RESET_IN_PROGRESS;
pub const ERROR_NDIS_NOT_SUPPORTED = WIN32_ERROR.ERROR_NDIS_NOT_SUPPORTED;
pub const ERROR_NDIS_INVALID_PACKET = WIN32_ERROR.ERROR_NDIS_INVALID_PACKET;
pub const ERROR_NDIS_ADAPTER_NOT_READY = WIN32_ERROR.ERROR_NDIS_ADAPTER_NOT_READY;
pub const ERROR_NDIS_INVALID_LENGTH = WIN32_ERROR.ERROR_NDIS_INVALID_LENGTH;
pub const ERROR_NDIS_INVALID_DATA = WIN32_ERROR.ERROR_NDIS_INVALID_DATA;
pub const ERROR_NDIS_BUFFER_TOO_SHORT = WIN32_ERROR.ERROR_NDIS_BUFFER_TOO_SHORT;
pub const ERROR_NDIS_INVALID_OID = WIN32_ERROR.ERROR_NDIS_INVALID_OID;
pub const ERROR_NDIS_ADAPTER_REMOVED = WIN32_ERROR.ERROR_NDIS_ADAPTER_REMOVED;
pub const ERROR_NDIS_UNSUPPORTED_MEDIA = WIN32_ERROR.ERROR_NDIS_UNSUPPORTED_MEDIA;
pub const ERROR_NDIS_GROUP_ADDRESS_IN_USE = WIN32_ERROR.ERROR_NDIS_GROUP_ADDRESS_IN_USE;
pub const ERROR_NDIS_FILE_NOT_FOUND = WIN32_ERROR.ERROR_NDIS_FILE_NOT_FOUND;
pub const ERROR_NDIS_ERROR_READING_FILE = WIN32_ERROR.ERROR_NDIS_ERROR_READING_FILE;
pub const ERROR_NDIS_ALREADY_MAPPED = WIN32_ERROR.ERROR_NDIS_ALREADY_MAPPED;
pub const ERROR_NDIS_RESOURCE_CONFLICT = WIN32_ERROR.ERROR_NDIS_RESOURCE_CONFLICT;
pub const ERROR_NDIS_MEDIA_DISCONNECTED = WIN32_ERROR.ERROR_NDIS_MEDIA_DISCONNECTED;
pub const ERROR_NDIS_INVALID_ADDRESS = WIN32_ERROR.ERROR_NDIS_INVALID_ADDRESS;
pub const ERROR_NDIS_INVALID_DEVICE_REQUEST = WIN32_ERROR.ERROR_NDIS_INVALID_DEVICE_REQUEST;
pub const ERROR_NDIS_PAUSED = WIN32_ERROR.ERROR_NDIS_PAUSED;
pub const ERROR_NDIS_INTERFACE_NOT_FOUND = WIN32_ERROR.ERROR_NDIS_INTERFACE_NOT_FOUND;
pub const ERROR_NDIS_UNSUPPORTED_REVISION = WIN32_ERROR.ERROR_NDIS_UNSUPPORTED_REVISION;
pub const ERROR_NDIS_INVALID_PORT = WIN32_ERROR.ERROR_NDIS_INVALID_PORT;
pub const ERROR_NDIS_INVALID_PORT_STATE = WIN32_ERROR.ERROR_NDIS_INVALID_PORT_STATE;
pub const ERROR_NDIS_LOW_POWER_STATE = WIN32_ERROR.ERROR_NDIS_LOW_POWER_STATE;
pub const ERROR_NDIS_REINIT_REQUIRED = WIN32_ERROR.ERROR_NDIS_REINIT_REQUIRED;
pub const ERROR_NDIS_NO_QUEUES = WIN32_ERROR.ERROR_NDIS_NO_QUEUES;
pub const ERROR_NDIS_DOT11_AUTO_CONFIG_ENABLED = WIN32_ERROR.ERROR_NDIS_DOT11_AUTO_CONFIG_ENABLED;
pub const ERROR_NDIS_DOT11_MEDIA_IN_USE = WIN32_ERROR.ERROR_NDIS_DOT11_MEDIA_IN_USE;
pub const ERROR_NDIS_DOT11_POWER_STATE_INVALID = WIN32_ERROR.ERROR_NDIS_DOT11_POWER_STATE_INVALID;
pub const ERROR_NDIS_PM_WOL_PATTERN_LIST_FULL = WIN32_ERROR.ERROR_NDIS_PM_WOL_PATTERN_LIST_FULL;
pub const ERROR_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL = WIN32_ERROR.ERROR_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL;
pub const ERROR_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE = WIN32_ERROR.ERROR_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE;
pub const ERROR_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE = WIN32_ERROR.ERROR_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE;
pub const ERROR_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED = WIN32_ERROR.ERROR_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED;
pub const ERROR_NDIS_DOT11_AP_BAND_NOT_ALLOWED = WIN32_ERROR.ERROR_NDIS_DOT11_AP_BAND_NOT_ALLOWED;
pub const ERROR_NDIS_INDICATION_REQUIRED = WIN32_ERROR.ERROR_NDIS_INDICATION_REQUIRED;
pub const ERROR_NDIS_OFFLOAD_POLICY = WIN32_ERROR.ERROR_NDIS_OFFLOAD_POLICY;
pub const ERROR_NDIS_OFFLOAD_CONNECTION_REJECTED = WIN32_ERROR.ERROR_NDIS_OFFLOAD_CONNECTION_REJECTED;
pub const ERROR_NDIS_OFFLOAD_PATH_REJECTED = WIN32_ERROR.ERROR_NDIS_OFFLOAD_PATH_REJECTED;
pub const ERROR_HV_INVALID_HYPERCALL_CODE = WIN32_ERROR.ERROR_HV_INVALID_HYPERCALL_CODE;
pub const ERROR_HV_INVALID_HYPERCALL_INPUT = WIN32_ERROR.ERROR_HV_INVALID_HYPERCALL_INPUT;
pub const ERROR_HV_INVALID_ALIGNMENT = WIN32_ERROR.ERROR_HV_INVALID_ALIGNMENT;
pub const ERROR_HV_INVALID_PARAMETER = WIN32_ERROR.ERROR_HV_INVALID_PARAMETER;
pub const ERROR_HV_ACCESS_DENIED = WIN32_ERROR.ERROR_HV_ACCESS_DENIED;
pub const ERROR_HV_INVALID_PARTITION_STATE = WIN32_ERROR.ERROR_HV_INVALID_PARTITION_STATE;
pub const ERROR_HV_OPERATION_DENIED = WIN32_ERROR.ERROR_HV_OPERATION_DENIED;
pub const ERROR_HV_UNKNOWN_PROPERTY = WIN32_ERROR.ERROR_HV_UNKNOWN_PROPERTY;
pub const ERROR_HV_PROPERTY_VALUE_OUT_OF_RANGE = WIN32_ERROR.ERROR_HV_PROPERTY_VALUE_OUT_OF_RANGE;
pub const ERROR_HV_INSUFFICIENT_MEMORY = WIN32_ERROR.ERROR_HV_INSUFFICIENT_MEMORY;
pub const ERROR_HV_PARTITION_TOO_DEEP = WIN32_ERROR.ERROR_HV_PARTITION_TOO_DEEP;
pub const ERROR_HV_INVALID_PARTITION_ID = WIN32_ERROR.ERROR_HV_INVALID_PARTITION_ID;
pub const ERROR_HV_INVALID_VP_INDEX = WIN32_ERROR.ERROR_HV_INVALID_VP_INDEX;
pub const ERROR_HV_INVALID_PORT_ID = WIN32_ERROR.ERROR_HV_INVALID_PORT_ID;
pub const ERROR_HV_INVALID_CONNECTION_ID = WIN32_ERROR.ERROR_HV_INVALID_CONNECTION_ID;
pub const ERROR_HV_INSUFFICIENT_BUFFERS = WIN32_ERROR.ERROR_HV_INSUFFICIENT_BUFFERS;
pub const ERROR_HV_NOT_ACKNOWLEDGED = WIN32_ERROR.ERROR_HV_NOT_ACKNOWLEDGED;
pub const ERROR_HV_INVALID_VP_STATE = WIN32_ERROR.ERROR_HV_INVALID_VP_STATE;
pub const ERROR_HV_ACKNOWLEDGED = WIN32_ERROR.ERROR_HV_ACKNOWLEDGED;
pub const ERROR_HV_INVALID_SAVE_RESTORE_STATE = WIN32_ERROR.ERROR_HV_INVALID_SAVE_RESTORE_STATE;
pub const ERROR_HV_INVALID_SYNIC_STATE = WIN32_ERROR.ERROR_HV_INVALID_SYNIC_STATE;
pub const ERROR_HV_OBJECT_IN_USE = WIN32_ERROR.ERROR_HV_OBJECT_IN_USE;
pub const ERROR_HV_INVALID_PROXIMITY_DOMAIN_INFO = WIN32_ERROR.ERROR_HV_INVALID_PROXIMITY_DOMAIN_INFO;
pub const ERROR_HV_NO_DATA = WIN32_ERROR.ERROR_HV_NO_DATA;
pub const ERROR_HV_INACTIVE = WIN32_ERROR.ERROR_HV_INACTIVE;
pub const ERROR_HV_NO_RESOURCES = WIN32_ERROR.ERROR_HV_NO_RESOURCES;
pub const ERROR_HV_FEATURE_UNAVAILABLE = WIN32_ERROR.ERROR_HV_FEATURE_UNAVAILABLE;
pub const ERROR_HV_INSUFFICIENT_BUFFER = WIN32_ERROR.ERROR_HV_INSUFFICIENT_BUFFER;
pub const ERROR_HV_INSUFFICIENT_DEVICE_DOMAINS = WIN32_ERROR.ERROR_HV_INSUFFICIENT_DEVICE_DOMAINS;
pub const ERROR_HV_CPUID_FEATURE_VALIDATION = WIN32_ERROR.ERROR_HV_CPUID_FEATURE_VALIDATION;
pub const ERROR_HV_CPUID_XSAVE_FEATURE_VALIDATION = WIN32_ERROR.ERROR_HV_CPUID_XSAVE_FEATURE_VALIDATION;
pub const ERROR_HV_PROCESSOR_STARTUP_TIMEOUT = WIN32_ERROR.ERROR_HV_PROCESSOR_STARTUP_TIMEOUT;
pub const ERROR_HV_SMX_ENABLED = WIN32_ERROR.ERROR_HV_SMX_ENABLED;
pub const ERROR_HV_INVALID_LP_INDEX = WIN32_ERROR.ERROR_HV_INVALID_LP_INDEX;
pub const ERROR_HV_INVALID_REGISTER_VALUE = WIN32_ERROR.ERROR_HV_INVALID_REGISTER_VALUE;
pub const ERROR_HV_INVALID_VTL_STATE = WIN32_ERROR.ERROR_HV_INVALID_VTL_STATE;
pub const ERROR_HV_NX_NOT_DETECTED = WIN32_ERROR.ERROR_HV_NX_NOT_DETECTED;
pub const ERROR_HV_INVALID_DEVICE_ID = WIN32_ERROR.ERROR_HV_INVALID_DEVICE_ID;
pub const ERROR_HV_INVALID_DEVICE_STATE = WIN32_ERROR.ERROR_HV_INVALID_DEVICE_STATE;
pub const ERROR_HV_PENDING_PAGE_REQUESTS = WIN32_ERROR.ERROR_HV_PENDING_PAGE_REQUESTS;
pub const ERROR_HV_PAGE_REQUEST_INVALID = WIN32_ERROR.ERROR_HV_PAGE_REQUEST_INVALID;
pub const ERROR_HV_INVALID_CPU_GROUP_ID = WIN32_ERROR.ERROR_HV_INVALID_CPU_GROUP_ID;
pub const ERROR_HV_INVALID_CPU_GROUP_STATE = WIN32_ERROR.ERROR_HV_INVALID_CPU_GROUP_STATE;
pub const ERROR_HV_OPERATION_FAILED = WIN32_ERROR.ERROR_HV_OPERATION_FAILED;
pub const ERROR_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE = WIN32_ERROR.ERROR_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE;
pub const ERROR_HV_INSUFFICIENT_ROOT_MEMORY = WIN32_ERROR.ERROR_HV_INSUFFICIENT_ROOT_MEMORY;
pub const ERROR_HV_EVENT_BUFFER_ALREADY_FREED = WIN32_ERROR.ERROR_HV_EVENT_BUFFER_ALREADY_FREED;
pub const ERROR_HV_INSUFFICIENT_CONTIGUOUS_MEMORY = WIN32_ERROR.ERROR_HV_INSUFFICIENT_CONTIGUOUS_MEMORY;
pub const ERROR_HV_DEVICE_NOT_IN_DOMAIN = WIN32_ERROR.ERROR_HV_DEVICE_NOT_IN_DOMAIN;
pub const ERROR_HV_NESTED_VM_EXIT = WIN32_ERROR.ERROR_HV_NESTED_VM_EXIT;
pub const ERROR_HV_MSR_ACCESS_FAILED = WIN32_ERROR.ERROR_HV_MSR_ACCESS_FAILED;
pub const ERROR_HV_NOT_PRESENT = WIN32_ERROR.ERROR_HV_NOT_PRESENT;
pub const ERROR_VID_DUPLICATE_HANDLER = WIN32_ERROR.ERROR_VID_DUPLICATE_HANDLER;
pub const ERROR_VID_TOO_MANY_HANDLERS = WIN32_ERROR.ERROR_VID_TOO_MANY_HANDLERS;
pub const ERROR_VID_QUEUE_FULL = WIN32_ERROR.ERROR_VID_QUEUE_FULL;
pub const ERROR_VID_HANDLER_NOT_PRESENT = WIN32_ERROR.ERROR_VID_HANDLER_NOT_PRESENT;
pub const ERROR_VID_INVALID_OBJECT_NAME = WIN32_ERROR.ERROR_VID_INVALID_OBJECT_NAME;
pub const ERROR_VID_PARTITION_NAME_TOO_LONG = WIN32_ERROR.ERROR_VID_PARTITION_NAME_TOO_LONG;
pub const ERROR_VID_MESSAGE_QUEUE_NAME_TOO_LONG = WIN32_ERROR.ERROR_VID_MESSAGE_QUEUE_NAME_TOO_LONG;
pub const ERROR_VID_PARTITION_ALREADY_EXISTS = WIN32_ERROR.ERROR_VID_PARTITION_ALREADY_EXISTS;
pub const ERROR_VID_PARTITION_DOES_NOT_EXIST = WIN32_ERROR.ERROR_VID_PARTITION_DOES_NOT_EXIST;
pub const ERROR_VID_PARTITION_NAME_NOT_FOUND = WIN32_ERROR.ERROR_VID_PARTITION_NAME_NOT_FOUND;
pub const ERROR_VID_MESSAGE_QUEUE_ALREADY_EXISTS = WIN32_ERROR.ERROR_VID_MESSAGE_QUEUE_ALREADY_EXISTS;
pub const ERROR_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT = WIN32_ERROR.ERROR_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT;
pub const ERROR_VID_MB_STILL_REFERENCED = WIN32_ERROR.ERROR_VID_MB_STILL_REFERENCED;
pub const ERROR_VID_CHILD_GPA_PAGE_SET_CORRUPTED = WIN32_ERROR.ERROR_VID_CHILD_GPA_PAGE_SET_CORRUPTED;
pub const ERROR_VID_INVALID_NUMA_SETTINGS = WIN32_ERROR.ERROR_VID_INVALID_NUMA_SETTINGS;
pub const ERROR_VID_INVALID_NUMA_NODE_INDEX = WIN32_ERROR.ERROR_VID_INVALID_NUMA_NODE_INDEX;
pub const ERROR_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED = WIN32_ERROR.ERROR_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED;
pub const ERROR_VID_INVALID_MEMORY_BLOCK_HANDLE = WIN32_ERROR.ERROR_VID_INVALID_MEMORY_BLOCK_HANDLE;
pub const ERROR_VID_PAGE_RANGE_OVERFLOW = WIN32_ERROR.ERROR_VID_PAGE_RANGE_OVERFLOW;
pub const ERROR_VID_INVALID_MESSAGE_QUEUE_HANDLE = WIN32_ERROR.ERROR_VID_INVALID_MESSAGE_QUEUE_HANDLE;
pub const ERROR_VID_INVALID_GPA_RANGE_HANDLE = WIN32_ERROR.ERROR_VID_INVALID_GPA_RANGE_HANDLE;
pub const ERROR_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE = WIN32_ERROR.ERROR_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE;
pub const ERROR_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED = WIN32_ERROR.ERROR_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED;
pub const ERROR_VID_INVALID_PPM_HANDLE = WIN32_ERROR.ERROR_VID_INVALID_PPM_HANDLE;
pub const ERROR_VID_MBPS_ARE_LOCKED = WIN32_ERROR.ERROR_VID_MBPS_ARE_LOCKED;
pub const ERROR_VID_MESSAGE_QUEUE_CLOSED = WIN32_ERROR.ERROR_VID_MESSAGE_QUEUE_CLOSED;
pub const ERROR_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED = WIN32_ERROR.ERROR_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED;
pub const ERROR_VID_STOP_PENDING = WIN32_ERROR.ERROR_VID_STOP_PENDING;
pub const ERROR_VID_INVALID_PROCESSOR_STATE = WIN32_ERROR.ERROR_VID_INVALID_PROCESSOR_STATE;
pub const ERROR_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT = WIN32_ERROR.ERROR_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT;
pub const ERROR_VID_KM_INTERFACE_ALREADY_INITIALIZED = WIN32_ERROR.ERROR_VID_KM_INTERFACE_ALREADY_INITIALIZED;
pub const ERROR_VID_MB_PROPERTY_ALREADY_SET_RESET = WIN32_ERROR.ERROR_VID_MB_PROPERTY_ALREADY_SET_RESET;
pub const ERROR_VID_MMIO_RANGE_DESTROYED = WIN32_ERROR.ERROR_VID_MMIO_RANGE_DESTROYED;
pub const ERROR_VID_INVALID_CHILD_GPA_PAGE_SET = WIN32_ERROR.ERROR_VID_INVALID_CHILD_GPA_PAGE_SET;
pub const ERROR_VID_RESERVE_PAGE_SET_IS_BEING_USED = WIN32_ERROR.ERROR_VID_RESERVE_PAGE_SET_IS_BEING_USED;
pub const ERROR_VID_RESERVE_PAGE_SET_TOO_SMALL = WIN32_ERROR.ERROR_VID_RESERVE_PAGE_SET_TOO_SMALL;
pub const ERROR_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE = WIN32_ERROR.ERROR_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE;
pub const ERROR_VID_MBP_COUNT_EXCEEDED_LIMIT = WIN32_ERROR.ERROR_VID_MBP_COUNT_EXCEEDED_LIMIT;
pub const ERROR_VID_SAVED_STATE_CORRUPT = WIN32_ERROR.ERROR_VID_SAVED_STATE_CORRUPT;
pub const ERROR_VID_SAVED_STATE_UNRECOGNIZED_ITEM = WIN32_ERROR.ERROR_VID_SAVED_STATE_UNRECOGNIZED_ITEM;
pub const ERROR_VID_SAVED_STATE_INCOMPATIBLE = WIN32_ERROR.ERROR_VID_SAVED_STATE_INCOMPATIBLE;
pub const ERROR_VID_VTL_ACCESS_DENIED = WIN32_ERROR.ERROR_VID_VTL_ACCESS_DENIED;
pub const ERROR_VMCOMPUTE_TERMINATED_DURING_START = WIN32_ERROR.ERROR_VMCOMPUTE_TERMINATED_DURING_START;
pub const ERROR_VMCOMPUTE_IMAGE_MISMATCH = WIN32_ERROR.ERROR_VMCOMPUTE_IMAGE_MISMATCH;
pub const ERROR_VMCOMPUTE_HYPERV_NOT_INSTALLED = WIN32_ERROR.ERROR_VMCOMPUTE_HYPERV_NOT_INSTALLED;
pub const ERROR_VMCOMPUTE_OPERATION_PENDING = WIN32_ERROR.ERROR_VMCOMPUTE_OPERATION_PENDING;
pub const ERROR_VMCOMPUTE_TOO_MANY_NOTIFICATIONS = WIN32_ERROR.ERROR_VMCOMPUTE_TOO_MANY_NOTIFICATIONS;
pub const ERROR_VMCOMPUTE_INVALID_STATE = WIN32_ERROR.ERROR_VMCOMPUTE_INVALID_STATE;
pub const ERROR_VMCOMPUTE_UNEXPECTED_EXIT = WIN32_ERROR.ERROR_VMCOMPUTE_UNEXPECTED_EXIT;
pub const ERROR_VMCOMPUTE_TERMINATED = WIN32_ERROR.ERROR_VMCOMPUTE_TERMINATED;
pub const ERROR_VMCOMPUTE_CONNECT_FAILED = WIN32_ERROR.ERROR_VMCOMPUTE_CONNECT_FAILED;
pub const ERROR_VMCOMPUTE_TIMEOUT = WIN32_ERROR.ERROR_VMCOMPUTE_TIMEOUT;
pub const ERROR_VMCOMPUTE_CONNECTION_CLOSED = WIN32_ERROR.ERROR_VMCOMPUTE_CONNECTION_CLOSED;
pub const ERROR_VMCOMPUTE_UNKNOWN_MESSAGE = WIN32_ERROR.ERROR_VMCOMPUTE_UNKNOWN_MESSAGE;
pub const ERROR_VMCOMPUTE_UNSUPPORTED_PROTOCOL_VERSION = WIN32_ERROR.ERROR_VMCOMPUTE_UNSUPPORTED_PROTOCOL_VERSION;
pub const ERROR_VMCOMPUTE_INVALID_JSON = WIN32_ERROR.ERROR_VMCOMPUTE_INVALID_JSON;
pub const ERROR_VMCOMPUTE_SYSTEM_NOT_FOUND = WIN32_ERROR.ERROR_VMCOMPUTE_SYSTEM_NOT_FOUND;
pub const ERROR_VMCOMPUTE_SYSTEM_ALREADY_EXISTS = WIN32_ERROR.ERROR_VMCOMPUTE_SYSTEM_ALREADY_EXISTS;
pub const ERROR_VMCOMPUTE_SYSTEM_ALREADY_STOPPED = WIN32_ERROR.ERROR_VMCOMPUTE_SYSTEM_ALREADY_STOPPED;
pub const ERROR_VMCOMPUTE_PROTOCOL_ERROR = WIN32_ERROR.ERROR_VMCOMPUTE_PROTOCOL_ERROR;
pub const ERROR_VMCOMPUTE_INVALID_LAYER = WIN32_ERROR.ERROR_VMCOMPUTE_INVALID_LAYER;
pub const ERROR_VMCOMPUTE_WINDOWS_INSIDER_REQUIRED = WIN32_ERROR.ERROR_VMCOMPUTE_WINDOWS_INSIDER_REQUIRED;
pub const ERROR_VNET_VIRTUAL_SWITCH_NAME_NOT_FOUND = WIN32_ERROR.ERROR_VNET_VIRTUAL_SWITCH_NAME_NOT_FOUND;
pub const ERROR_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED = WIN32_ERROR.ERROR_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED;
pub const ERROR_VSMB_SAVED_STATE_FILE_NOT_FOUND = WIN32_ERROR.ERROR_VSMB_SAVED_STATE_FILE_NOT_FOUND;
pub const ERROR_VSMB_SAVED_STATE_CORRUPT = WIN32_ERROR.ERROR_VSMB_SAVED_STATE_CORRUPT;
pub const ERROR_VOLMGR_INCOMPLETE_REGENERATION = WIN32_ERROR.ERROR_VOLMGR_INCOMPLETE_REGENERATION;
pub const ERROR_VOLMGR_INCOMPLETE_DISK_MIGRATION = WIN32_ERROR.ERROR_VOLMGR_INCOMPLETE_DISK_MIGRATION;
pub const ERROR_VOLMGR_DATABASE_FULL = WIN32_ERROR.ERROR_VOLMGR_DATABASE_FULL;
pub const ERROR_VOLMGR_DISK_CONFIGURATION_CORRUPTED = WIN32_ERROR.ERROR_VOLMGR_DISK_CONFIGURATION_CORRUPTED;
pub const ERROR_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC = WIN32_ERROR.ERROR_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC;
pub const ERROR_VOLMGR_PACK_CONFIG_UPDATE_FAILED = WIN32_ERROR.ERROR_VOLMGR_PACK_CONFIG_UPDATE_FAILED;
pub const ERROR_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME = WIN32_ERROR.ERROR_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME;
pub const ERROR_VOLMGR_DISK_DUPLICATE = WIN32_ERROR.ERROR_VOLMGR_DISK_DUPLICATE;
pub const ERROR_VOLMGR_DISK_DYNAMIC = WIN32_ERROR.ERROR_VOLMGR_DISK_DYNAMIC;
pub const ERROR_VOLMGR_DISK_ID_INVALID = WIN32_ERROR.ERROR_VOLMGR_DISK_ID_INVALID;
pub const ERROR_VOLMGR_DISK_INVALID = WIN32_ERROR.ERROR_VOLMGR_DISK_INVALID;
pub const ERROR_VOLMGR_DISK_LAST_VOTER = WIN32_ERROR.ERROR_VOLMGR_DISK_LAST_VOTER;
pub const ERROR_VOLMGR_DISK_LAYOUT_INVALID = WIN32_ERROR.ERROR_VOLMGR_DISK_LAYOUT_INVALID;
pub const ERROR_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS = WIN32_ERROR.ERROR_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS;
pub const ERROR_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED = WIN32_ERROR.ERROR_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED;
pub const ERROR_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL = WIN32_ERROR.ERROR_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL;
pub const ERROR_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS = WIN32_ERROR.ERROR_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS;
pub const ERROR_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS = WIN32_ERROR.ERROR_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS;
pub const ERROR_VOLMGR_DISK_MISSING = WIN32_ERROR.ERROR_VOLMGR_DISK_MISSING;
pub const ERROR_VOLMGR_DISK_NOT_EMPTY = WIN32_ERROR.ERROR_VOLMGR_DISK_NOT_EMPTY;
pub const ERROR_VOLMGR_DISK_NOT_ENOUGH_SPACE = WIN32_ERROR.ERROR_VOLMGR_DISK_NOT_ENOUGH_SPACE;
pub const ERROR_VOLMGR_DISK_REVECTORING_FAILED = WIN32_ERROR.ERROR_VOLMGR_DISK_REVECTORING_FAILED;
pub const ERROR_VOLMGR_DISK_SECTOR_SIZE_INVALID = WIN32_ERROR.ERROR_VOLMGR_DISK_SECTOR_SIZE_INVALID;
pub const ERROR_VOLMGR_DISK_SET_NOT_CONTAINED = WIN32_ERROR.ERROR_VOLMGR_DISK_SET_NOT_CONTAINED;
pub const ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS = WIN32_ERROR.ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS;
pub const ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES = WIN32_ERROR.ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES;
pub const ERROR_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED = WIN32_ERROR.ERROR_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED;
pub const ERROR_VOLMGR_EXTENT_ALREADY_USED = WIN32_ERROR.ERROR_VOLMGR_EXTENT_ALREADY_USED;
pub const ERROR_VOLMGR_EXTENT_NOT_CONTIGUOUS = WIN32_ERROR.ERROR_VOLMGR_EXTENT_NOT_CONTIGUOUS;
pub const ERROR_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION = WIN32_ERROR.ERROR_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION;
pub const ERROR_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED = WIN32_ERROR.ERROR_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED;
pub const ERROR_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION = WIN32_ERROR.ERROR_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION;
pub const ERROR_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH = WIN32_ERROR.ERROR_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH;
pub const ERROR_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED = WIN32_ERROR.ERROR_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED;
pub const ERROR_VOLMGR_INTERLEAVE_LENGTH_INVALID = WIN32_ERROR.ERROR_VOLMGR_INTERLEAVE_LENGTH_INVALID;
pub const ERROR_VOLMGR_MAXIMUM_REGISTERED_USERS = WIN32_ERROR.ERROR_VOLMGR_MAXIMUM_REGISTERED_USERS;
pub const ERROR_VOLMGR_MEMBER_IN_SYNC = WIN32_ERROR.ERROR_VOLMGR_MEMBER_IN_SYNC;
pub const ERROR_VOLMGR_MEMBER_INDEX_DUPLICATE = WIN32_ERROR.ERROR_VOLMGR_MEMBER_INDEX_DUPLICATE;
pub const ERROR_VOLMGR_MEMBER_INDEX_INVALID = WIN32_ERROR.ERROR_VOLMGR_MEMBER_INDEX_INVALID;
pub const ERROR_VOLMGR_MEMBER_MISSING = WIN32_ERROR.ERROR_VOLMGR_MEMBER_MISSING;
pub const ERROR_VOLMGR_MEMBER_NOT_DETACHED = WIN32_ERROR.ERROR_VOLMGR_MEMBER_NOT_DETACHED;
pub const ERROR_VOLMGR_MEMBER_REGENERATING = WIN32_ERROR.ERROR_VOLMGR_MEMBER_REGENERATING;
pub const ERROR_VOLMGR_ALL_DISKS_FAILED = WIN32_ERROR.ERROR_VOLMGR_ALL_DISKS_FAILED;
pub const ERROR_VOLMGR_NO_REGISTERED_USERS = WIN32_ERROR.ERROR_VOLMGR_NO_REGISTERED_USERS;
pub const ERROR_VOLMGR_NO_SUCH_USER = WIN32_ERROR.ERROR_VOLMGR_NO_SUCH_USER;
pub const ERROR_VOLMGR_NOTIFICATION_RESET = WIN32_ERROR.ERROR_VOLMGR_NOTIFICATION_RESET;
pub const ERROR_VOLMGR_NUMBER_OF_MEMBERS_INVALID = WIN32_ERROR.ERROR_VOLMGR_NUMBER_OF_MEMBERS_INVALID;
pub const ERROR_VOLMGR_NUMBER_OF_PLEXES_INVALID = WIN32_ERROR.ERROR_VOLMGR_NUMBER_OF_PLEXES_INVALID;
pub const ERROR_VOLMGR_PACK_DUPLICATE = WIN32_ERROR.ERROR_VOLMGR_PACK_DUPLICATE;
pub const ERROR_VOLMGR_PACK_ID_INVALID = WIN32_ERROR.ERROR_VOLMGR_PACK_ID_INVALID;
pub const ERROR_VOLMGR_PACK_INVALID = WIN32_ERROR.ERROR_VOLMGR_PACK_INVALID;
pub const ERROR_VOLMGR_PACK_NAME_INVALID = WIN32_ERROR.ERROR_VOLMGR_PACK_NAME_INVALID;
pub const ERROR_VOLMGR_PACK_OFFLINE = WIN32_ERROR.ERROR_VOLMGR_PACK_OFFLINE;
pub const ERROR_VOLMGR_PACK_HAS_QUORUM = WIN32_ERROR.ERROR_VOLMGR_PACK_HAS_QUORUM;
pub const ERROR_VOLMGR_PACK_WITHOUT_QUORUM = WIN32_ERROR.ERROR_VOLMGR_PACK_WITHOUT_QUORUM;
pub const ERROR_VOLMGR_PARTITION_STYLE_INVALID = WIN32_ERROR.ERROR_VOLMGR_PARTITION_STYLE_INVALID;
pub const ERROR_VOLMGR_PARTITION_UPDATE_FAILED = WIN32_ERROR.ERROR_VOLMGR_PARTITION_UPDATE_FAILED;
pub const ERROR_VOLMGR_PLEX_IN_SYNC = WIN32_ERROR.ERROR_VOLMGR_PLEX_IN_SYNC;
pub const ERROR_VOLMGR_PLEX_INDEX_DUPLICATE = WIN32_ERROR.ERROR_VOLMGR_PLEX_INDEX_DUPLICATE;
pub const ERROR_VOLMGR_PLEX_INDEX_INVALID = WIN32_ERROR.ERROR_VOLMGR_PLEX_INDEX_INVALID;
pub const ERROR_VOLMGR_PLEX_LAST_ACTIVE = WIN32_ERROR.ERROR_VOLMGR_PLEX_LAST_ACTIVE;
pub const ERROR_VOLMGR_PLEX_MISSING = WIN32_ERROR.ERROR_VOLMGR_PLEX_MISSING;
pub const ERROR_VOLMGR_PLEX_REGENERATING = WIN32_ERROR.ERROR_VOLMGR_PLEX_REGENERATING;
pub const ERROR_VOLMGR_PLEX_TYPE_INVALID = WIN32_ERROR.ERROR_VOLMGR_PLEX_TYPE_INVALID;
pub const ERROR_VOLMGR_PLEX_NOT_RAID5 = WIN32_ERROR.ERROR_VOLMGR_PLEX_NOT_RAID5;
pub const ERROR_VOLMGR_PLEX_NOT_SIMPLE = WIN32_ERROR.ERROR_VOLMGR_PLEX_NOT_SIMPLE;
pub const ERROR_VOLMGR_STRUCTURE_SIZE_INVALID = WIN32_ERROR.ERROR_VOLMGR_STRUCTURE_SIZE_INVALID;
pub const ERROR_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS = WIN32_ERROR.ERROR_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS;
pub const ERROR_VOLMGR_TRANSACTION_IN_PROGRESS = WIN32_ERROR.ERROR_VOLMGR_TRANSACTION_IN_PROGRESS;
pub const ERROR_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE = WIN32_ERROR.ERROR_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE;
pub const ERROR_VOLMGR_VOLUME_CONTAINS_MISSING_DISK = WIN32_ERROR.ERROR_VOLMGR_VOLUME_CONTAINS_MISSING_DISK;
pub const ERROR_VOLMGR_VOLUME_ID_INVALID = WIN32_ERROR.ERROR_VOLMGR_VOLUME_ID_INVALID;
pub const ERROR_VOLMGR_VOLUME_LENGTH_INVALID = WIN32_ERROR.ERROR_VOLMGR_VOLUME_LENGTH_INVALID;
pub const ERROR_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE = WIN32_ERROR.ERROR_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE;
pub const ERROR_VOLMGR_VOLUME_NOT_MIRRORED = WIN32_ERROR.ERROR_VOLMGR_VOLUME_NOT_MIRRORED;
pub const ERROR_VOLMGR_VOLUME_NOT_RETAINED = WIN32_ERROR.ERROR_VOLMGR_VOLUME_NOT_RETAINED;
pub const ERROR_VOLMGR_VOLUME_OFFLINE = WIN32_ERROR.ERROR_VOLMGR_VOLUME_OFFLINE;
pub const ERROR_VOLMGR_VOLUME_RETAINED = WIN32_ERROR.ERROR_VOLMGR_VOLUME_RETAINED;
pub const ERROR_VOLMGR_NUMBER_OF_EXTENTS_INVALID = WIN32_ERROR.ERROR_VOLMGR_NUMBER_OF_EXTENTS_INVALID;
pub const ERROR_VOLMGR_DIFFERENT_SECTOR_SIZE = WIN32_ERROR.ERROR_VOLMGR_DIFFERENT_SECTOR_SIZE;
pub const ERROR_VOLMGR_BAD_BOOT_DISK = WIN32_ERROR.ERROR_VOLMGR_BAD_BOOT_DISK;
pub const ERROR_VOLMGR_PACK_CONFIG_OFFLINE = WIN32_ERROR.ERROR_VOLMGR_PACK_CONFIG_OFFLINE;
pub const ERROR_VOLMGR_PACK_CONFIG_ONLINE = WIN32_ERROR.ERROR_VOLMGR_PACK_CONFIG_ONLINE;
pub const ERROR_VOLMGR_NOT_PRIMARY_PACK = WIN32_ERROR.ERROR_VOLMGR_NOT_PRIMARY_PACK;
pub const ERROR_VOLMGR_PACK_LOG_UPDATE_FAILED = WIN32_ERROR.ERROR_VOLMGR_PACK_LOG_UPDATE_FAILED;
pub const ERROR_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID = WIN32_ERROR.ERROR_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID;
pub const ERROR_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID = WIN32_ERROR.ERROR_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID;
pub const ERROR_VOLMGR_VOLUME_MIRRORED = WIN32_ERROR.ERROR_VOLMGR_VOLUME_MIRRORED;
pub const ERROR_VOLMGR_PLEX_NOT_SIMPLE_SPANNED = WIN32_ERROR.ERROR_VOLMGR_PLEX_NOT_SIMPLE_SPANNED;
pub const ERROR_VOLMGR_NO_VALID_LOG_COPIES = WIN32_ERROR.ERROR_VOLMGR_NO_VALID_LOG_COPIES;
pub const ERROR_VOLMGR_PRIMARY_PACK_PRESENT = WIN32_ERROR.ERROR_VOLMGR_PRIMARY_PACK_PRESENT;
pub const ERROR_VOLMGR_NUMBER_OF_DISKS_INVALID = WIN32_ERROR.ERROR_VOLMGR_NUMBER_OF_DISKS_INVALID;
pub const ERROR_VOLMGR_MIRROR_NOT_SUPPORTED = WIN32_ERROR.ERROR_VOLMGR_MIRROR_NOT_SUPPORTED;
pub const ERROR_VOLMGR_RAID5_NOT_SUPPORTED = WIN32_ERROR.ERROR_VOLMGR_RAID5_NOT_SUPPORTED;
pub const ERROR_BCD_NOT_ALL_ENTRIES_IMPORTED = WIN32_ERROR.ERROR_BCD_NOT_ALL_ENTRIES_IMPORTED;
pub const ERROR_BCD_TOO_MANY_ELEMENTS = WIN32_ERROR.ERROR_BCD_TOO_MANY_ELEMENTS;
pub const ERROR_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED = WIN32_ERROR.ERROR_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED;
pub const ERROR_VHD_DRIVE_FOOTER_MISSING = WIN32_ERROR.ERROR_VHD_DRIVE_FOOTER_MISSING;
pub const ERROR_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH = WIN32_ERROR.ERROR_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH;
pub const ERROR_VHD_DRIVE_FOOTER_CORRUPT = WIN32_ERROR.ERROR_VHD_DRIVE_FOOTER_CORRUPT;
pub const ERROR_VHD_FORMAT_UNKNOWN = WIN32_ERROR.ERROR_VHD_FORMAT_UNKNOWN;
pub const ERROR_VHD_FORMAT_UNSUPPORTED_VERSION = WIN32_ERROR.ERROR_VHD_FORMAT_UNSUPPORTED_VERSION;
pub const ERROR_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH = WIN32_ERROR.ERROR_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH;
pub const ERROR_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION = WIN32_ERROR.ERROR_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION;
pub const ERROR_VHD_SPARSE_HEADER_CORRUPT = WIN32_ERROR.ERROR_VHD_SPARSE_HEADER_CORRUPT;
pub const ERROR_VHD_BLOCK_ALLOCATION_FAILURE = WIN32_ERROR.ERROR_VHD_BLOCK_ALLOCATION_FAILURE;
pub const ERROR_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT = WIN32_ERROR.ERROR_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT;
pub const ERROR_VHD_INVALID_BLOCK_SIZE = WIN32_ERROR.ERROR_VHD_INVALID_BLOCK_SIZE;
pub const ERROR_VHD_BITMAP_MISMATCH = WIN32_ERROR.ERROR_VHD_BITMAP_MISMATCH;
pub const ERROR_VHD_PARENT_VHD_NOT_FOUND = WIN32_ERROR.ERROR_VHD_PARENT_VHD_NOT_FOUND;
pub const ERROR_VHD_CHILD_PARENT_ID_MISMATCH = WIN32_ERROR.ERROR_VHD_CHILD_PARENT_ID_MISMATCH;
pub const ERROR_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH = WIN32_ERROR.ERROR_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH;
pub const ERROR_VHD_METADATA_READ_FAILURE = WIN32_ERROR.ERROR_VHD_METADATA_READ_FAILURE;
pub const ERROR_VHD_METADATA_WRITE_FAILURE = WIN32_ERROR.ERROR_VHD_METADATA_WRITE_FAILURE;
pub const ERROR_VHD_INVALID_SIZE = WIN32_ERROR.ERROR_VHD_INVALID_SIZE;
pub const ERROR_VHD_INVALID_FILE_SIZE = WIN32_ERROR.ERROR_VHD_INVALID_FILE_SIZE;
pub const ERROR_VIRTDISK_PROVIDER_NOT_FOUND = WIN32_ERROR.ERROR_VIRTDISK_PROVIDER_NOT_FOUND;
pub const ERROR_VIRTDISK_NOT_VIRTUAL_DISK = WIN32_ERROR.ERROR_VIRTDISK_NOT_VIRTUAL_DISK;
pub const ERROR_VHD_PARENT_VHD_ACCESS_DENIED = WIN32_ERROR.ERROR_VHD_PARENT_VHD_ACCESS_DENIED;
pub const ERROR_VHD_CHILD_PARENT_SIZE_MISMATCH = WIN32_ERROR.ERROR_VHD_CHILD_PARENT_SIZE_MISMATCH;
pub const ERROR_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED = WIN32_ERROR.ERROR_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED;
pub const ERROR_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT = WIN32_ERROR.ERROR_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT;
pub const ERROR_VIRTUAL_DISK_LIMITATION = WIN32_ERROR.ERROR_VIRTUAL_DISK_LIMITATION;
pub const ERROR_VHD_INVALID_TYPE = WIN32_ERROR.ERROR_VHD_INVALID_TYPE;
pub const ERROR_VHD_INVALID_STATE = WIN32_ERROR.ERROR_VHD_INVALID_STATE;
pub const ERROR_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE = WIN32_ERROR.ERROR_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE;
pub const ERROR_VIRTDISK_DISK_ALREADY_OWNED = WIN32_ERROR.ERROR_VIRTDISK_DISK_ALREADY_OWNED;
pub const ERROR_VIRTDISK_DISK_ONLINE_AND_WRITABLE = WIN32_ERROR.ERROR_VIRTDISK_DISK_ONLINE_AND_WRITABLE;
pub const ERROR_CTLOG_TRACKING_NOT_INITIALIZED = WIN32_ERROR.ERROR_CTLOG_TRACKING_NOT_INITIALIZED;
pub const ERROR_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE = WIN32_ERROR.ERROR_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE;
pub const ERROR_CTLOG_VHD_CHANGED_OFFLINE = WIN32_ERROR.ERROR_CTLOG_VHD_CHANGED_OFFLINE;
pub const ERROR_CTLOG_INVALID_TRACKING_STATE = WIN32_ERROR.ERROR_CTLOG_INVALID_TRACKING_STATE;
pub const ERROR_CTLOG_INCONSISTENT_TRACKING_FILE = WIN32_ERROR.ERROR_CTLOG_INCONSISTENT_TRACKING_FILE;
pub const ERROR_VHD_RESIZE_WOULD_TRUNCATE_DATA = WIN32_ERROR.ERROR_VHD_RESIZE_WOULD_TRUNCATE_DATA;
pub const ERROR_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE = WIN32_ERROR.ERROR_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE;
pub const ERROR_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE = WIN32_ERROR.ERROR_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE;
pub const ERROR_VHD_METADATA_FULL = WIN32_ERROR.ERROR_VHD_METADATA_FULL;
pub const ERROR_VHD_INVALID_CHANGE_TRACKING_ID = WIN32_ERROR.ERROR_VHD_INVALID_CHANGE_TRACKING_ID;
pub const ERROR_VHD_CHANGE_TRACKING_DISABLED = WIN32_ERROR.ERROR_VHD_CHANGE_TRACKING_DISABLED;
pub const ERROR_VHD_MISSING_CHANGE_TRACKING_INFORMATION = WIN32_ERROR.ERROR_VHD_MISSING_CHANGE_TRACKING_INFORMATION;
pub const ERROR_QUERY_STORAGE_ERROR = WIN32_ERROR.ERROR_QUERY_STORAGE_ERROR;

pub const NTSTATUS_FACILITY_CODE = enum(u32) {
    DEBUGGER = 1,
    RPC_RUNTIME = 2,
    RPC_STUBS = 3,
    IO_ERROR_CODE = 4,
    CODCLASS_ERROR_CODE = 6,
    NTWIN32 = 7,
    NTCERT = 8,
    NTSSPI = 9,
    TERMINAL_SERVER = 10,
    USB_ERROR_CODE = 16,
    HID_ERROR_CODE = 17,
    FIREWIRE_ERROR_CODE = 18,
    CLUSTER_ERROR_CODE = 19,
    ACPI_ERROR_CODE = 20,
    SXS_ERROR_CODE = 21,
    TRANSACTION = 25,
    COMMONLOG = 26,
    VIDEO = 27,
    FILTER_MANAGER = 28,
    MONITOR = 29,
    GRAPHICS_KERNEL = 30,
    DRIVER_FRAMEWORK = 32,
    FVE_ERROR_CODE = 33,
    FWP_ERROR_CODE = 34,
    NDIS_ERROR_CODE = 35,
    QUIC_ERROR_CODE = 36,
    TPM = 41,
    RTPM = 42,
    HYPERVISOR = 53,
    IPSEC = 54,
    VIRTUALIZATION = 55,
    VOLMGR = 56,
    BCD_ERROR_CODE = 57,
    WIN32K_NTUSER = 62,
    WIN32K_NTGDI = 63,
    RESUME_KEY_FILTER = 64,
    RDBSS = 65,
    BTH_ATT = 66,
    SECUREBOOT = 67,
    AUDIO_KERNEL = 68,
    VSM = 69,
    NT_IORING = 70,
    VOLSNAP = 80,
    SDBUS = 81,
    SHARED_VHDX = 92,
    SMB = 93,
    XVS = 94,
    INTERIX = 153,
    SPACES = 231,
    SECURITY_CORE = 232,
    SYSTEM_INTEGRITY = 233,
    LICENSING = 234,
    PLATFORM_MANIFEST = 235,
    APP_EXEC = 236,
    MAXIMUM_VALUE = 237,
};
pub const FACILITY_DEBUGGER = NTSTATUS_FACILITY_CODE.DEBUGGER;
pub const FACILITY_RPC_RUNTIME = NTSTATUS_FACILITY_CODE.RPC_RUNTIME;
pub const FACILITY_RPC_STUBS = NTSTATUS_FACILITY_CODE.RPC_STUBS;
pub const FACILITY_IO_ERROR_CODE = NTSTATUS_FACILITY_CODE.IO_ERROR_CODE;
pub const FACILITY_CODCLASS_ERROR_CODE = NTSTATUS_FACILITY_CODE.CODCLASS_ERROR_CODE;
pub const FACILITY_NTWIN32 = NTSTATUS_FACILITY_CODE.NTWIN32;
pub const FACILITY_NTCERT = NTSTATUS_FACILITY_CODE.NTCERT;
pub const FACILITY_NTSSPI = NTSTATUS_FACILITY_CODE.NTSSPI;
pub const FACILITY_TERMINAL_SERVER = NTSTATUS_FACILITY_CODE.TERMINAL_SERVER;
pub const FACILITY_USB_ERROR_CODE = NTSTATUS_FACILITY_CODE.USB_ERROR_CODE;
pub const FACILITY_HID_ERROR_CODE = NTSTATUS_FACILITY_CODE.HID_ERROR_CODE;
pub const FACILITY_FIREWIRE_ERROR_CODE = NTSTATUS_FACILITY_CODE.FIREWIRE_ERROR_CODE;
pub const FACILITY_CLUSTER_ERROR_CODE = NTSTATUS_FACILITY_CODE.CLUSTER_ERROR_CODE;
pub const FACILITY_ACPI_ERROR_CODE = NTSTATUS_FACILITY_CODE.ACPI_ERROR_CODE;
pub const FACILITY_SXS_ERROR_CODE = NTSTATUS_FACILITY_CODE.SXS_ERROR_CODE;
pub const FACILITY_TRANSACTION = NTSTATUS_FACILITY_CODE.TRANSACTION;
pub const FACILITY_COMMONLOG = NTSTATUS_FACILITY_CODE.COMMONLOG;
pub const FACILITY_VIDEO = NTSTATUS_FACILITY_CODE.VIDEO;
pub const FACILITY_FILTER_MANAGER = NTSTATUS_FACILITY_CODE.FILTER_MANAGER;
pub const FACILITY_MONITOR = NTSTATUS_FACILITY_CODE.MONITOR;
pub const FACILITY_GRAPHICS_KERNEL = NTSTATUS_FACILITY_CODE.GRAPHICS_KERNEL;
pub const FACILITY_DRIVER_FRAMEWORK = NTSTATUS_FACILITY_CODE.DRIVER_FRAMEWORK;
pub const FACILITY_FVE_ERROR_CODE = NTSTATUS_FACILITY_CODE.FVE_ERROR_CODE;
pub const FACILITY_FWP_ERROR_CODE = NTSTATUS_FACILITY_CODE.FWP_ERROR_CODE;
pub const FACILITY_NDIS_ERROR_CODE = NTSTATUS_FACILITY_CODE.NDIS_ERROR_CODE;
pub const FACILITY_QUIC_ERROR_CODE = NTSTATUS_FACILITY_CODE.QUIC_ERROR_CODE;
pub const FACILITY_TPM = NTSTATUS_FACILITY_CODE.TPM;
pub const FACILITY_RTPM = NTSTATUS_FACILITY_CODE.RTPM;
pub const FACILITY_HYPERVISOR = NTSTATUS_FACILITY_CODE.HYPERVISOR;
pub const FACILITY_IPSEC = NTSTATUS_FACILITY_CODE.IPSEC;
pub const FACILITY_VIRTUALIZATION = NTSTATUS_FACILITY_CODE.VIRTUALIZATION;
pub const FACILITY_VOLMGR = NTSTATUS_FACILITY_CODE.VOLMGR;
pub const FACILITY_BCD_ERROR_CODE = NTSTATUS_FACILITY_CODE.BCD_ERROR_CODE;
pub const FACILITY_WIN32K_NTUSER = NTSTATUS_FACILITY_CODE.WIN32K_NTUSER;
pub const FACILITY_WIN32K_NTGDI = NTSTATUS_FACILITY_CODE.WIN32K_NTGDI;
pub const FACILITY_RESUME_KEY_FILTER = NTSTATUS_FACILITY_CODE.RESUME_KEY_FILTER;
pub const FACILITY_RDBSS = NTSTATUS_FACILITY_CODE.RDBSS;
pub const FACILITY_BTH_ATT = NTSTATUS_FACILITY_CODE.BTH_ATT;
pub const FACILITY_SECUREBOOT = NTSTATUS_FACILITY_CODE.SECUREBOOT;
pub const FACILITY_AUDIO_KERNEL = NTSTATUS_FACILITY_CODE.AUDIO_KERNEL;
pub const FACILITY_VSM = NTSTATUS_FACILITY_CODE.VSM;
pub const FACILITY_NT_IORING = NTSTATUS_FACILITY_CODE.NT_IORING;
pub const FACILITY_VOLSNAP = NTSTATUS_FACILITY_CODE.VOLSNAP;
pub const FACILITY_SDBUS = NTSTATUS_FACILITY_CODE.SDBUS;
pub const FACILITY_SHARED_VHDX = NTSTATUS_FACILITY_CODE.SHARED_VHDX;
pub const FACILITY_SMB = NTSTATUS_FACILITY_CODE.SMB;
pub const FACILITY_XVS = NTSTATUS_FACILITY_CODE.XVS;
pub const FACILITY_INTERIX = NTSTATUS_FACILITY_CODE.INTERIX;
pub const FACILITY_SPACES = NTSTATUS_FACILITY_CODE.SPACES;
pub const FACILITY_SECURITY_CORE = NTSTATUS_FACILITY_CODE.SECURITY_CORE;
pub const FACILITY_SYSTEM_INTEGRITY = NTSTATUS_FACILITY_CODE.SYSTEM_INTEGRITY;
pub const FACILITY_LICENSING = NTSTATUS_FACILITY_CODE.LICENSING;
pub const FACILITY_PLATFORM_MANIFEST = NTSTATUS_FACILITY_CODE.PLATFORM_MANIFEST;
pub const FACILITY_APP_EXEC = NTSTATUS_FACILITY_CODE.APP_EXEC;
pub const FACILITY_MAXIMUM_VALUE = NTSTATUS_FACILITY_CODE.MAXIMUM_VALUE;

pub const DUPLICATE_HANDLE_OPTIONS = packed struct(u32) {
    CLOSE_SOURCE: u1 = 0,
    SAME_ACCESS: u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const DUPLICATE_CLOSE_SOURCE = DUPLICATE_HANDLE_OPTIONS{ .CLOSE_SOURCE = 1 };
pub const DUPLICATE_SAME_ACCESS = DUPLICATE_HANDLE_OPTIONS{ .SAME_ACCESS = 1 };

pub const HANDLE_FLAGS = packed struct(u32) {
    INHERIT: u1 = 0,
    PROTECT_FROM_CLOSE: u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const HANDLE_FLAG_INHERIT = HANDLE_FLAGS{ .INHERIT = 1 };
pub const HANDLE_FLAG_PROTECT_FROM_CLOSE = HANDLE_FLAGS{ .PROTECT_FROM_CLOSE = 1 };

pub const BOOL = i32;

pub const BOOLEAN = u8;

// TODO: this type has a FreeFunc 'SysFreeString', what can Zig do with this information?
pub const BSTR = *u16;

// TODO: this type has a FreeFunc 'CloseHandle', what can Zig do with this information?
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HANDLE = @import("std").os.windows.HANDLE;

// TODO: this type has a FreeFunc 'FreeLibrary', what can Zig do with this information?
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HINSTANCE = @import("std").os.windows.HINSTANCE;

pub const HRESULT = i32;

pub const HWND = *opaque{};

pub const LPARAM = isize;

pub const LRESULT = isize;

pub const NTSTATUS = i32;

pub const PSID = *opaque{};

pub const PSTR = [*:0]u8;

pub const PWSTR = [*:0]u16;

pub const WPARAM = usize;

// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HRSRC = *opaque{};

pub const CHAR = u8;

pub const SHANDLE_PTR = isize;

pub const HANDLE_PTR = usize;

pub const SYSTEMTIME = extern struct {
    wYear: u16,
    wMonth: u16,
    wDayOfWeek: u16,
    wDay: u16,
    wHour: u16,
    wMinute: u16,
    wSecond: u16,
    wMilliseconds: u16,
};

pub const DECIMAL = extern struct {
    wReserved: u16,
    Anonymous1: extern union {
        Anonymous: extern struct {
            scale: u8,
            sign: u8,
        },
        signscale: u16,
    },
    Hi32: u32,
    Anonymous2: extern union {
        Anonymous: extern struct {
            Lo32: u32,
            Mid32: u32,
        },
        Lo64: u64,
    },
};

pub const FARPROC = *const fn(
) callconv(@import("std").os.windows.WINAPI) isize;

pub const NEARPROC = *const fn(
) callconv(@import("std").os.windows.WINAPI) isize;

pub const PROC = *const fn(
) callconv(@import("std").os.windows.WINAPI) isize;

pub const HSPRITE__ = extern struct {
    unused: i32,
};

pub const HLSURF__ = extern struct {
    unused: i32,
};

pub const HSTR__ = extern struct {
    unused: i32,
};

pub const FILETIME = extern struct {
    dwLowDateTime: u32,
    dwHighDateTime: u32,
};

pub const HUMPD__ = extern struct {
    unused: i32,
};

pub const RECT = extern struct {
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
};

pub const RECTL = extern struct {
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
};

pub const POINT = extern struct {
    x: i32,
    y: i32,
};

pub const POINTL = extern struct {
    x: i32,
    y: i32,
};

pub const SIZE = extern struct {
    cx: i32,
    cy: i32,
};

pub const POINTS = extern struct {
    x: i16,
    y: i16,
};

pub const APP_LOCAL_DEVICE_ID = extern struct {
    value: [32]u8,
};

pub const UNICODE_STRING = extern struct {
    Length: u16,
    MaximumLength: u16,
    Buffer: ?[*]u16,
};

pub const FLOAT128 = extern struct {
    LowPart: i64,
    HighPart: i64,
};

pub const LARGE_INTEGER = extern union {
    Anonymous: extern struct {
        LowPart: u32,
        HighPart: i32,
    },
    u: extern struct {
        LowPart: u32,
        HighPart: i32,
    },
    QuadPart: i64,
};

pub const ULARGE_INTEGER = extern union {
    Anonymous: extern struct {
        LowPart: u32,
        HighPart: u32,
    },
    u: extern struct {
        LowPart: u32,
        HighPart: u32,
    },
    QuadPart: u64,
};

pub const LUID = extern struct {
    LowPart: u32,
    HighPart: i32,
};

pub const PAPCFUNC = *const fn(
    Parameter: usize,
) callconv(@import("std").os.windows.WINAPI) void;


//--------------------------------------------------------------------------------
// Section: Functions (19)
//--------------------------------------------------------------------------------
pub extern "oleaut32" fn SysAllocString(
    psz: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?BSTR;

pub extern "oleaut32" fn SysReAllocString(
    pbstr: ?*?BSTR,
    psz: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "oleaut32" fn SysAllocStringLen(
    strIn: ?[*:0]const u16,
    ui: u32,
) callconv(@import("std").os.windows.WINAPI) ?BSTR;

pub extern "oleaut32" fn SysReAllocStringLen(
    pbstr: ?*?BSTR,
    psz: ?[*:0]const u16,
    len: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "oleaut32" fn SysAddRefString(
    bstrString: ?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "oleaut32" fn SysReleaseString(
    bstrString: ?BSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "oleaut32" fn SysFreeString(
    bstrString: ?BSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "oleaut32" fn SysStringLen(
    pbstr: ?BSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "oleaut32" fn SysStringByteLen(
    bstr: ?BSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "oleaut32" fn SysAllocStringByteLen(
    psz: ?[*:0]const u8,
    len: u32,
) callconv(@import("std").os.windows.WINAPI) ?BSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "kernel32" fn CloseHandle(
    hObject: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "kernel32" fn DuplicateHandle(
    hSourceProcessHandle: ?HANDLE,
    hSourceHandle: ?HANDLE,
    hTargetProcessHandle: ?HANDLE,
    lpTargetHandle: ?*?HANDLE,
    dwDesiredAccess: u32,
    bInheritHandle: BOOL,
    dwOptions: DUPLICATE_HANDLE_OPTIONS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "api-ms-win-core-handle-l1-1-0" fn CompareObjectHandles(
    hFirstObjectHandle: ?HANDLE,
    hSecondObjectHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "kernel32" fn GetHandleInformation(
    hObject: ?HANDLE,
    lpdwFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "kernel32" fn SetHandleInformation(
    hObject: ?HANDLE,
    dwMask: u32,
    dwFlags: HANDLE_FLAGS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "kernel32" fn GetLastError(
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "kernel32" fn SetLastError(
    dwErrCode: WIN32_ERROR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn SetLastErrorEx(
    dwErrCode: WIN32_ERROR,
    dwType: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "ntdll" fn RtlNtStatusToDosError(
    Status: NTSTATUS,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (0)
//--------------------------------------------------------------------------------

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "FARPROC")) { _ = FARPROC; }
    if (@hasDecl(@This(), "NEARPROC")) { _ = NEARPROC; }
    if (@hasDecl(@This(), "PROC")) { _ = PROC; }
    if (@hasDecl(@This(), "PAPCFUNC")) { _ = PAPCFUNC; }

    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
