//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (287)
//--------------------------------------------------------------------------------
pub const IMAPI_SECTOR_SIZE = @as(u32, 2048);
pub const IMAPI2_DEFAULT_COMMAND_TIMEOUT = @as(u32, 10);
pub const DISPID_DDISCMASTER2EVENTS_DEVICEADDED = @as(u32, 256);
pub const DISPID_DDISCMASTER2EVENTS_DEVICEREMOVED = @as(u32, 257);
pub const DISPID_IDISCRECORDER2_EJECTMEDIA = @as(u32, 256);
pub const DISPID_IDISCRECORDER2_CLOSETRAY = @as(u32, 257);
pub const DISPID_IDISCRECORDER2_ACQUIREEXCLUSIVEACCESS = @as(u32, 258);
pub const DISPID_IDISCRECORDER2_RELEASEEXCLUSIVEACCESS = @as(u32, 259);
pub const DISPID_IDISCRECORDER2_DISABLEMCN = @as(u32, 260);
pub const DISPID_IDISCRECORDER2_ENABLEMCN = @as(u32, 261);
pub const DISPID_IDISCRECORDER2_INITIALIZEDISCRECORDER = @as(u32, 262);
pub const DISPID_IDISCRECORDER2_ACTIVEDISCRECORDER = @as(u32, 0);
pub const DISPID_IDISCRECORDER2_VENDORID = @as(u32, 513);
pub const DISPID_IDISCRECORDER2_PRODUCTID = @as(u32, 514);
pub const DISPID_IDISCRECORDER2_PRODUCTREVISION = @as(u32, 515);
pub const DISPID_IDISCRECORDER2_VOLUMENAME = @as(u32, 516);
pub const DISPID_IDISCRECORDER2_VOLUMEPATHNAMES = @as(u32, 517);
pub const DISPID_IDISCRECORDER2_DEVICECANLOADMEDIA = @as(u32, 518);
pub const DISPID_IDISCRECORDER2_LEGACYDEVICENUMBER = @as(u32, 519);
pub const DISPID_IDISCRECORDER2_SUPPORTEDFEATUREPAGES = @as(u32, 520);
pub const DISPID_IDISCRECORDER2_CURRENTFEATUREPAGES = @as(u32, 521);
pub const DISPID_IDISCRECORDER2_SUPPORTEDPROFILES = @as(u32, 522);
pub const DISPID_IDISCRECORDER2_CURRENTPROFILES = @as(u32, 523);
pub const DISPID_IDISCRECORDER2_SUPPORTEDMODEPAGES = @as(u32, 524);
pub const DISPID_IDISCRECORDER2_EXCLUSIVEACCESSOWNER = @as(u32, 525);
pub const DISPID_IWRITEENGINE2_WRITESECTION = @as(u32, 512);
pub const DISPID_IWRITEENGINE2_CANCELWRITE = @as(u32, 513);
pub const DISPID_IWRITEENGINE2_DISCRECORDER = @as(u32, 256);
pub const DISPID_IWRITEENGINE2_USESTREAMINGWRITE12 = @as(u32, 257);
pub const DISPID_IWRITEENGINE2_STARTINGSECTORSPERSECOND = @as(u32, 258);
pub const DISPID_IWRITEENGINE2_ENDINGSECTORSPERSECOND = @as(u32, 259);
pub const DISPID_IWRITEENGINE2_BYTESPERSECTOR = @as(u32, 260);
pub const DISPID_IWRITEENGINE2_WRITEINPROGRESS = @as(u32, 261);
pub const DISPID_IWRITEENGINE2EVENTARGS_STARTLBA = @as(u32, 256);
pub const DISPID_IWRITEENGINE2EVENTARGS_SECTORCOUNT = @as(u32, 257);
pub const DISPID_IWRITEENGINE2EVENTARGS_LASTREADLBA = @as(u32, 258);
pub const DISPID_IWRITEENGINE2EVENTARGS_LASTWRITTENLBA = @as(u32, 259);
pub const DISPID_IWRITEENGINE2EVENTARGS_TOTALDEVICEBUFFER = @as(u32, 260);
pub const DISPID_IWRITEENGINE2EVENTARGS_USEDDEVICEBUFFER = @as(u32, 261);
pub const DISPID_IWRITEENGINE2EVENTARGS_TOTALSYSTEMBUFFER = @as(u32, 262);
pub const DISPID_IWRITEENGINE2EVENTARGS_USEDSYSTEMBUFFER = @as(u32, 263);
pub const DISPID_IWRITEENGINE2EVENTARGS_FREESYSTEMBUFFER = @as(u32, 264);
pub const DISPID_DWRITEENGINE2EVENTS_UPDATE = @as(u32, 256);
pub const DISPID_IDISCFORMAT2_RECORDERSUPPORTED = @as(u32, 2048);
pub const DISPID_IDISCFORMAT2_MEDIASUPPORTED = @as(u32, 2049);
pub const DISPID_IDISCFORMAT2_MEDIAPHYSICALLYBLANK = @as(u32, 1792);
pub const DISPID_IDISCFORMAT2_MEDIAHEURISTICALLYBLANK = @as(u32, 1793);
pub const DISPID_IDISCFORMAT2_SUPPORTEDMEDIATYPES = @as(u32, 1794);
pub const DISPID_IDISCFORMAT2ERASE_RECORDER = @as(u32, 256);
pub const DISPID_IDISCFORMAT2ERASE_FULLERASE = @as(u32, 257);
pub const DISPID_IDISCFORMAT2ERASE_MEDIATYPE = @as(u32, 258);
pub const DISPID_IDISCFORMAT2ERASE_CLIENTNAME = @as(u32, 259);
pub const DISPID_IDISCFORMAT2ERASE_ERASEMEDIA = @as(u32, 513);
pub const DISPID_IDISCFORMAT2ERASEEVENTS_UPDATE = @as(u32, 512);
pub const DISPID_IDISCFORMAT2DATA_RECORDER = @as(u32, 256);
pub const DISPID_IDISCFORMAT2DATA_BUFFERUNDERRUNFREEDISABLED = @as(u32, 257);
pub const DISPID_IDISCFORMAT2DATA_POSTGAPALREADYINIMAGE = @as(u32, 260);
pub const DISPID_IDISCFORMAT2DATA_CURRENTMEDIASTATUS = @as(u32, 262);
pub const DISPID_IDISCFORMAT2DATA_WRITEPROTECTSTATUS = @as(u32, 263);
pub const DISPID_IDISCFORMAT2DATA_TOTALSECTORS = @as(u32, 264);
pub const DISPID_IDISCFORMAT2DATA_FREESECTORS = @as(u32, 265);
pub const DISPID_IDISCFORMAT2DATA_NEXTWRITABLEADDRESS = @as(u32, 266);
pub const DISPID_IDISCFORMAT2DATA_STARTSECTOROFPREVIOUSSESSION = @as(u32, 267);
pub const DISPID_IDISCFORMAT2DATA_LASTSECTOROFPREVIOUSSESSION = @as(u32, 268);
pub const DISPID_IDISCFORMAT2DATA_FORCEMEDIATOBECLOSED = @as(u32, 269);
pub const DISPID_IDISCFORMAT2DATA_DISABLEDVDCOMPATIBILITYMODE = @as(u32, 270);
pub const DISPID_IDISCFORMAT2DATA_CURRENTMEDIATYPE = @as(u32, 271);
pub const DISPID_IDISCFORMAT2DATA_CLIENTNAME = @as(u32, 272);
pub const DISPID_IDISCFORMAT2DATA_REQUESTEDWRITESPEED = @as(u32, 273);
pub const DISPID_IDISCFORMAT2DATA_REQUESTEDROTATIONTYPEISPURECAV = @as(u32, 274);
pub const DISPID_IDISCFORMAT2DATA_CURRENTWRITESPEED = @as(u32, 275);
pub const DISPID_IDISCFORMAT2DATA_CURRENTROTATIONTYPEISPURECAV = @as(u32, 276);
pub const DISPID_IDISCFORMAT2DATA_SUPPORTEDWRITESPEEDS = @as(u32, 277);
pub const DISPID_IDISCFORMAT2DATA_SUPPORTEDWRITESPEEDDESCRIPTORS = @as(u32, 278);
pub const DISPID_IDISCFORMAT2DATA_FORCEOVERWRITE = @as(u32, 279);
pub const DISPID_IDISCFORMAT2DATA_MUTLISESSIONINTERFACES = @as(u32, 280);
pub const DISPID_IDISCFORMAT2DATA_WRITE = @as(u32, 512);
pub const DISPID_IDISCFORMAT2DATA_CANCELWRITE = @as(u32, 513);
pub const DISPID_IDISCFORMAT2DATA_SETWRITESPEED = @as(u32, 514);
pub const DISPID_DDISCFORMAT2DATAEVENTS_UPDATE = @as(u32, 512);
pub const DISPID_IDISCFORMAT2DATAEVENTARGS_ELAPSEDTIME = @as(u32, 768);
pub const DISPID_IDISCFORMAT2DATAEVENTARGS_ESTIMATEDREMAININGTIME = @as(u32, 769);
pub const DISPID_IDISCFORMAT2DATAEVENTARGS_ESTIMATEDTOTALTIME = @as(u32, 770);
pub const DISPID_IDISCFORMAT2DATAEVENTARGS_CURRENTACTION = @as(u32, 771);
pub const DISPID_IDISCFORMAT2TAO_RECORDER = @as(u32, 256);
pub const DISPID_IDISCFORMAT2TAO_BUFFERUNDERRUNFREEDISABLED = @as(u32, 258);
pub const DISPID_IDISCFORMAT2TAO_NUMBEROFEXISTINGTRACKS = @as(u32, 259);
pub const DISPID_IDISCFORMAT2TAO_TOTALSECTORSONMEDIA = @as(u32, 260);
pub const DISPID_IDISCFORMAT2TAO_FREESECTORSONMEDIA = @as(u32, 261);
pub const DISPID_IDISCFORMAT2TAO_USEDSECTORSONMEDIA = @as(u32, 262);
pub const DISPID_IDISCFORMAT2TAO_DONOTFINALIZEMEDIA = @as(u32, 263);
pub const DISPID_IDISCFORMAT2TAO_EXPECTEDTABLEOFCONTENTS = @as(u32, 266);
pub const DISPID_IDISCFORMAT2TAO_CURRENTMEDIATYPE = @as(u32, 267);
pub const DISPID_IDISCFORMAT2TAO_CLIENTNAME = @as(u32, 270);
pub const DISPID_IDISCFORMAT2TAO_REQUESTEDWRITESPEED = @as(u32, 271);
pub const DISPID_IDISCFORMAT2TAO_REQUESTEDROTATIONTYPEISPURECAV = @as(u32, 272);
pub const DISPID_IDISCFORMAT2TAO_CURRENTWRITESPEED = @as(u32, 273);
pub const DISPID_IDISCFORMAT2TAO_CURRENTROTATIONTYPEISPURECAV = @as(u32, 274);
pub const DISPID_IDISCFORMAT2TAO_SUPPORTEDWRITESPEEDS = @as(u32, 275);
pub const DISPID_IDISCFORMAT2TAO_SUPPORTEDWRITESPEEDDESCRIPTORS = @as(u32, 276);
pub const DISPID_IDISCFORMAT2TAO_PREPAREMEDIA = @as(u32, 512);
pub const DISPID_IDISCFORMAT2TAO_ADDAUDIOTRACK = @as(u32, 513);
pub const DISPID_IDISCFORMAT2TAO_CANCELADDTRACK = @as(u32, 514);
pub const DISPID_IDISCFORMAT2TAO_FINISHMEDIA = @as(u32, 515);
pub const DISPID_IDISCFORMAT2TAO_SETWRITESPEED = @as(u32, 516);
pub const DISPID_DDISCFORMAT2TAOEVENTS_UPDATE = @as(u32, 512);
pub const DISPID_IDISCFORMAT2TAOEVENTARGS_CURRENTTRACKNUMBER = @as(u32, 768);
pub const DISPID_IDISCFORMAT2TAOEVENTARGS_CURRENTACTION = @as(u32, 769);
pub const DISPID_IDISCFORMAT2TAOEVENTARGS_ELAPSEDTIME = @as(u32, 770);
pub const DISPID_IDISCFORMAT2TAOEVENTARGS_ESTIMATEDREMAININGTIME = @as(u32, 771);
pub const DISPID_IDISCFORMAT2TAOEVENTARGS_ESTIMATEDTOTALTIME = @as(u32, 772);
pub const DISPID_IDISCFORMAT2RAWCD_RECORDER = @as(u32, 256);
pub const DISPID_IDISCFORMAT2RAWCD_BUFFERUNDERRUNFREEDISABLED = @as(u32, 258);
pub const DISPID_IDISCFORMAT2RAWCD_STARTOFNEXTSESSION = @as(u32, 259);
pub const DISPID_IDISCFORMAT2RAWCD_LASTPOSSIBLESTARTOFLEADOUT = @as(u32, 260);
pub const DISPID_IDISCFORMAT2RAWCD_CURRENTMEDIATYPE = @as(u32, 261);
pub const DISPID_IDISCFORMAT2RAWCD_SUPPORTEDDATASECTORTYPES = @as(u32, 264);
pub const DISPID_IDISCFORMAT2RAWCD_REQUESTEDDATASECTORTYPE = @as(u32, 265);
pub const DISPID_IDISCFORMAT2RAWCD_CLIENTNAME = @as(u32, 266);
pub const DISPID_IDISCFORMAT2RAWCD_REQUESTEDWRITESPEED = @as(u32, 267);
pub const DISPID_IDISCFORMAT2RAWCD_REQUESTEDROTATIONTYPEISPURECAV = @as(u32, 268);
pub const DISPID_IDISCFORMAT2RAWCD_CURRENTWRITESPEED = @as(u32, 269);
pub const DISPID_IDISCFORMAT2RAWCD_CURRENTROTATIONTYPEISPURECAV = @as(u32, 270);
pub const DISPID_IDISCFORMAT2RAWCD_SUPPORTEDWRITESPEEDS = @as(u32, 271);
pub const DISPID_IDISCFORMAT2RAWCD_SUPPORTEDWRITESPEEDDESCRIPTORS = @as(u32, 272);
pub const DISPID_IDISCFORMAT2RAWCD_PREPAREMEDIA = @as(u32, 512);
pub const DISPID_IDISCFORMAT2RAWCD_WRITEMEDIA = @as(u32, 513);
pub const DISPID_IDISCFORMAT2RAWCD_WRITEMEDIAWITHVALIDATION = @as(u32, 514);
pub const DISPID_IDISCFORMAT2RAWCD_CANCELWRITE = @as(u32, 515);
pub const DISPID_IDISCFORMAT2RAWCD_RELEASEMEDIA = @as(u32, 516);
pub const DISPID_IDISCFORMAT2RAWCD_SETWRITESPEED = @as(u32, 517);
pub const DISPID_DDISCFORMAT2RAWCDEVENTS_UPDATE = @as(u32, 512);
pub const DISPID_IDISCFORMAT2RAWCDEVENTARGS_CURRENTTRACKNUMBER = @as(u32, 768);
pub const DISPID_IDISCFORMAT2RAWCDEVENTARGS_CURRENTACTION = @as(u32, 769);
pub const DISPID_IDISCFORMAT2RAWCDEVENTARGS_ELAPSEDTIME = @as(u32, 768);
pub const DISPID_IDISCFORMAT2RAWCDEVENTARGS_ESTIMATEDREMAININGTIME = @as(u32, 769);
pub const DISPID_IDISCFORMAT2RAWCDEVENTARGS_ESTIMATEDTOTALTIME = @as(u32, 770);
pub const IMAPI_SECTORS_PER_SECOND_AT_1X_CD = @as(u32, 75);
pub const IMAPI_SECTORS_PER_SECOND_AT_1X_DVD = @as(u32, 680);
pub const IMAPI_SECTORS_PER_SECOND_AT_1X_BD = @as(u32, 2195);
pub const IMAPI_SECTORS_PER_SECOND_AT_1X_HD_DVD = @as(u32, 4568);
pub const DISPID_IMULTISESSION_SUPPORTEDONCURRENTMEDIA = @as(u32, 256);
pub const DISPID_IMULTISESSION_INUSE = @as(u32, 257);
pub const DISPID_IMULTISESSION_IMPORTRECORDER = @as(u32, 258);
pub const DISPID_IMULTISESSION_FIRSTDATASESSION = @as(u32, 512);
pub const DISPID_IMULTISESSION_STARTSECTOROFPREVIOUSSESSION = @as(u32, 513);
pub const DISPID_IMULTISESSION_LASTSECTOROFPREVIOUSSESSION = @as(u32, 514);
pub const DISPID_IMULTISESSION_NEXTWRITABLEADDRESS = @as(u32, 515);
pub const DISPID_IMULTISESSION_FREESECTORS = @as(u32, 516);
pub const DISPID_IMULTISESSION_WRITEUNITSIZE = @as(u32, 517);
pub const DISPID_IMULTISESSION_LASTWRITTENADDRESS = @as(u32, 518);
pub const DISPID_IMULTISESSION_SECTORSONMEDIA = @as(u32, 519);
pub const DISPID_IRAWCDIMAGECREATOR_CREATERESULTIMAGE = @as(u32, 512);
pub const DISPID_IRAWCDIMAGECREATOR_ADDTRACK = @as(u32, 513);
pub const DISPID_IRAWCDIMAGECREATOR_ADDSPECIALPREGAP = @as(u32, 514);
pub const DISPID_IRAWCDIMAGECREATOR_ADDSUBCODERWGENERATOR = @as(u32, 515);
pub const DISPID_IRAWCDIMAGECREATOR_RESULTINGIMAGETYPE = @as(u32, 256);
pub const DISPID_IRAWCDIMAGECREATOR_STARTOFLEADOUT = @as(u32, 257);
pub const DISPID_IRAWCDIMAGECREATOR_STARTOFLEADOUTLIMIT = @as(u32, 258);
pub const DISPID_IRAWCDIMAGECREATOR_DISABLEGAPLESSAUDIO = @as(u32, 259);
pub const DISPID_IRAWCDIMAGECREATOR_MEDIACATALOGNUMBER = @as(u32, 260);
pub const DISPID_IRAWCDIMAGECREATOR_STARTINGTRACKNUMBER = @as(u32, 261);
pub const DISPID_IRAWCDIMAGECREATOR_TRACKINFO = @as(u32, 262);
pub const DISPID_IRAWCDIMAGECREATOR_NUMBEROFEXISTINGTRACKS = @as(u32, 263);
pub const DISPID_IRAWCDIMAGECREATOR_USEDSECTORSONDISC = @as(u32, 264);
pub const DISPID_IRAWCDIMAGECREATOR_EXPECTEDTABLEOFCONTENTS = @as(u32, 265);
pub const DISPID_IRAWCDTRACKINFO_STARTINGLBA = @as(u32, 256);
pub const DISPID_IRAWCDTRACKINFO_SECTORCOUNT = @as(u32, 257);
pub const DISPID_IRAWCDTRACKINFO_TRACKNUMBER = @as(u32, 258);
pub const DISPID_IRAWCDTRACKINFO_SECTORTYPE = @as(u32, 259);
pub const DISPID_IRAWCDTRACKINFO_ISRC = @as(u32, 260);
pub const DISPID_IRAWCDTRACKINFO_DIGITALAUDIOCOPYSETTING = @as(u32, 261);
pub const DISPID_IRAWCDTRACKINFO_AUDIOHASPREEMPHASIS = @as(u32, 262);
pub const DISPID_IBLOCKRANGE_STARTLBA = @as(u32, 256);
pub const DISPID_IBLOCKRANGE_ENDLBA = @as(u32, 257);
pub const DISPID_IBLOCKRANGELIST_BLOCKRANGES = @as(u32, 256);
pub const IMAPILib2_MajorVersion = @as(u32, 1);
pub const IMAPILib2_MinorVersion = @as(u32, 0);
pub const IMAPI2FS_BOOT_ENTRY_COUNT_MAX = @as(u32, 32);
pub const DISPID_DFILESYSTEMIMAGEEVENTS_UPDATE = @as(u32, 256);
pub const DISPID_DFILESYSTEMIMAGEIMPORTEVENTS_UPDATEIMPORT = @as(u32, 257);
pub const IMAPI2FS_MajorVersion = @as(u32, 1);
pub const IMAPI2FS_MinorVersion = @as(u32, 0);
pub const IMAPI2FS_FullVersion_STR = "1.0";
pub const IMAPI2FS_FullVersion_WSTR = "1.0";
pub const MP_MSGCLASS_SYSTEM = @as(u32, 1);
pub const MP_MSGCLASS_REPLICATION = @as(u32, 2);
pub const MP_MSGCLASS_DELIVERY_REPORT = @as(u32, 3);
pub const MP_MSGCLASS_NONDELIVERY_REPORT = @as(u32, 4);
pub const MP_STATUS_SUCCESS = @as(u32, 0);
pub const MP_STATUS_RETRY = @as(u32, 1);
pub const MP_STATUS_ABORT_DELIVERY = @as(u32, 2);
pub const MP_STATUS_BAD_MAIL = @as(u32, 3);
pub const MP_STATUS_SUBMITTED = @as(u32, 4);
pub const MP_STATUS_CATEGORIZED = @as(u32, 5);
pub const MP_STATUS_ABANDON_DELIVERY = @as(u32, 6);
pub const RP_RECIP_FLAGS_RESERVED = @as(u32, 15);
pub const RP_DSN_NOTIFY_SUCCESS = @as(u32, 16777216);
pub const RP_DSN_NOTIFY_FAILURE = @as(u32, 33554432);
pub const RP_DSN_NOTIFY_DELAY = @as(u32, 67108864);
pub const RP_DSN_NOTIFY_NEVER = @as(u32, 134217728);
pub const RP_DSN_NOTIFY_MASK = @as(u32, 251658240);
pub const RP_HANDLED = @as(u32, 16);
pub const RP_GENERAL_FAILURE = @as(u32, 32);
pub const RP_DSN_HANDLED = @as(u32, 64);
pub const RP_DELIVERED = @as(u32, 272);
pub const RP_DSN_SENT_NDR = @as(u32, 1104);
pub const RP_FAILED = @as(u32, 2096);
pub const RP_UNRESOLVED = @as(u32, 4144);
pub const RP_ENPANDED = @as(u32, 8208);
pub const RP_EXPANDED = @as(u32, 8208);
pub const RP_DSN_SENT_DELAYED = @as(u32, 16384);
pub const RP_DSN_SENT_EXPANDED = @as(u32, 32832);
pub const RP_DSN_SENT_RELAYED = @as(u32, 65600);
pub const RP_DSN_SENT_DELIVERED = @as(u32, 131136);
pub const RP_REMOTE_MTA_NO_DSN = @as(u32, 524288);
pub const RP_ERROR_CONTEXT_STORE = @as(u32, 1048576);
pub const RP_ERROR_CONTEXT_CAT = @as(u32, 2097152);
pub const RP_ERROR_CONTEXT_MTA = @as(u32, 4194304);
pub const RP_VOLATILE_FLAGS_MASK = @as(u32, 4026531840);
pub const RP_DSN_NOTIFY_INVALID = @as(u32, 0);
pub const MPV_INBOUND_CUTOFF_EXCEEDED = @as(u32, 1);
pub const MPV_WRITE_CONTENT = @as(u32, 2);
pub const NMP_PROCESS_POST = @as(u32, 1);
pub const NMP_PROCESS_CONTROL = @as(u32, 2);
pub const NMP_PROCESS_MODERATOR = @as(u32, 4);
pub const GUID_SMTP_SOURCE_TYPE = Guid.initString("fb65c4dc-e468-11d1-aa67-00c04fa345f6");
pub const GUID_SMTPSVC_SOURCE = Guid.initString("1b3c0666-e470-11d1-aa67-00c04fa345f6");
pub const CATID_SMTP_ON_INBOUND_COMMAND = Guid.initString("f6628c8d-0d5e-11d2-aa68-00c04fa35b82");
pub const CATID_SMTP_ON_SERVER_RESPONSE = Guid.initString("f6628c8e-0d5e-11d2-aa68-00c04fa35b82");
pub const CATID_SMTP_ON_SESSION_START = Guid.initString("f6628c8f-0d5e-11d2-aa68-00c04fa35b82");
pub const CATID_SMTP_ON_MESSAGE_START = Guid.initString("f6628c90-0d5e-11d2-aa68-00c04fa35b82");
pub const CATID_SMTP_ON_PER_RECIPIENT = Guid.initString("f6628c91-0d5e-11d2-aa68-00c04fa35b82");
pub const CATID_SMTP_ON_BEFORE_DATA = Guid.initString("f6628c92-0d5e-11d2-aa68-00c04fa35b82");
pub const CATID_SMTP_ON_SESSION_END = Guid.initString("f6628c93-0d5e-11d2-aa68-00c04fa35b82");
pub const CATID_SMTP_STORE_DRIVER = Guid.initString("59175850-e533-11d1-aa67-00c04fa345f6");
pub const CATID_SMTP_TRANSPORT_SUBMISSION = Guid.initString("ff3caa23-00b9-11d2-9dfb-00c04fa322ba");
pub const CATID_SMTP_TRANSPORT_PRECATEGORIZE = Guid.initString("a3acfb0d-83ff-11d2-9e14-00c04fa322ba");
pub const CATID_SMTP_TRANSPORT_CATEGORIZE = Guid.initString("960252a3-0a3a-11d2-9e00-00c04fa322ba");
pub const CATID_SMTP_TRANSPORT_POSTCATEGORIZE = Guid.initString("76719654-05a6-11d2-9dfd-00c04fa322ba");
pub const CATID_SMTP_TRANSPORT_ROUTER = Guid.initString("283430c9-1850-11d2-9e03-00c04fa322ba");
pub const CATID_SMTP_MSGTRACKLOG = Guid.initString("c6df52aa-7db0-11d2-94f4-00c04f79f1d6");
pub const CATID_SMTP_DNSRESOLVERRECORDSINK = Guid.initString("bd0b4366-8e03-11d2-94f6-00c04f79f1d6");
pub const CATID_SMTP_MAXMSGSIZE = Guid.initString("ebf159de-a67e-11d2-94f7-00c04f79f1d6");
pub const CATID_SMTP_LOG = Guid.initString("93d0a538-2c1e-4b68-a7c9-d73a8aa6ee97");
pub const CATID_SMTP_GET_AUX_DOMAIN_INFO_FLAGS = Guid.initString("84ff368a-fab3-43d7-bcdf-692c5b46e6b1");
pub const CLSID_SmtpCat = Guid.initString("b23c35b7-9219-11d2-9e17-00c04fa322ba");
pub const CATID_SMTP_DSN = Guid.initString("22b55731-f5f8-4d23-bd8f-87b52371a73a");
pub const SZ_PROGID_SMTPCAT = "Smtp.Cat";
pub const IMAPI_S_PROPERTIESIGNORED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 262656));
pub const IMAPI_S_BUFFER_TO_SMALL = @import("../zig.zig").typedConst(HRESULT, @as(i32, 262657));
pub const IMAPI_E_NOTOPENED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220981));
pub const IMAPI_E_NOTINITIALIZED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220980));
pub const IMAPI_E_USERABORT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220979));
pub const IMAPI_E_GENERIC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220978));
pub const IMAPI_E_MEDIUM_NOTPRESENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220977));
pub const IMAPI_E_MEDIUM_INVALIDTYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220976));
pub const IMAPI_E_DEVICE_NOPROPERTIES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220975));
pub const IMAPI_E_DEVICE_NOTACCESSIBLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220974));
pub const IMAPI_E_DEVICE_NOTPRESENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220973));
pub const IMAPI_E_DEVICE_INVALIDTYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220972));
pub const IMAPI_E_INITIALIZE_WRITE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220971));
pub const IMAPI_E_INITIALIZE_ENDWRITE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220970));
pub const IMAPI_E_FILESYSTEM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220969));
pub const IMAPI_E_FILEACCESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220968));
pub const IMAPI_E_DISCINFO = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220967));
pub const IMAPI_E_TRACKNOTOPEN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220966));
pub const IMAPI_E_TRACKOPEN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220965));
pub const IMAPI_E_DISCFULL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220964));
pub const IMAPI_E_BADJOLIETNAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220963));
pub const IMAPI_E_INVALIDIMAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220962));
pub const IMAPI_E_NOACTIVEFORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220961));
pub const IMAPI_E_NOACTIVERECORDER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220960));
pub const IMAPI_E_WRONGFORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220959));
pub const IMAPI_E_ALREADYOPEN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220958));
pub const IMAPI_E_WRONGDISC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220957));
pub const IMAPI_E_FILEEXISTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220956));
pub const IMAPI_E_STASHINUSE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220955));
pub const IMAPI_E_DEVICE_STILL_IN_USE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220954));
pub const IMAPI_E_LOSS_OF_STREAMING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220953));
pub const IMAPI_E_COMPRESSEDSTASH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220952));
pub const IMAPI_E_ENCRYPTEDSTASH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220951));
pub const IMAPI_E_NOTENOUGHDISKFORSTASH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220950));
pub const IMAPI_E_REMOVABLESTASH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220949));
pub const IMAPI_E_CANNOT_WRITE_TO_MEDIA = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220948));
pub const IMAPI_E_TRACK_NOT_BIG_ENOUGH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220947));
pub const IMAPI_E_BOOTIMAGE_AND_NONBLANK_DISC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220946));

//--------------------------------------------------------------------------------
// Section: Types (130)
//--------------------------------------------------------------------------------
pub const DISC_RECORDER_STATE_FLAGS = enum(u32) {
    BURNING = 2,
    DOING_NOTHING = 0,
    OPENED = 1,
};
pub const RECORDER_BURNING = DISC_RECORDER_STATE_FLAGS.BURNING;
pub const RECORDER_DOING_NOTHING = DISC_RECORDER_STATE_FLAGS.DOING_NOTHING;
pub const RECORDER_OPENED = DISC_RECORDER_STATE_FLAGS.OPENED;

const CLSID_MsftDiscMaster2_Value = Guid.initString("2735412e-7f64-5b0f-8f00-5d77afbe261e");
pub const CLSID_MsftDiscMaster2 = &CLSID_MsftDiscMaster2_Value;

const CLSID_MsftDiscRecorder2_Value = Guid.initString("2735412d-7f64-5b0f-8f00-5d77afbe261e");
pub const CLSID_MsftDiscRecorder2 = &CLSID_MsftDiscRecorder2_Value;

const CLSID_MsftWriteEngine2_Value = Guid.initString("2735412c-7f64-5b0f-8f00-5d77afbe261e");
pub const CLSID_MsftWriteEngine2 = &CLSID_MsftWriteEngine2_Value;

const CLSID_MsftDiscFormat2Erase_Value = Guid.initString("2735412b-7f64-5b0f-8f00-5d77afbe261e");
pub const CLSID_MsftDiscFormat2Erase = &CLSID_MsftDiscFormat2Erase_Value;

const CLSID_MsftDiscFormat2Data_Value = Guid.initString("2735412a-7f64-5b0f-8f00-5d77afbe261e");
pub const CLSID_MsftDiscFormat2Data = &CLSID_MsftDiscFormat2Data_Value;

const CLSID_MsftDiscFormat2TrackAtOnce_Value = Guid.initString("27354129-7f64-5b0f-8f00-5d77afbe261e");
pub const CLSID_MsftDiscFormat2TrackAtOnce = &CLSID_MsftDiscFormat2TrackAtOnce_Value;

const CLSID_MsftDiscFormat2RawCD_Value = Guid.initString("27354128-7f64-5b0f-8f00-5d77afbe261e");
pub const CLSID_MsftDiscFormat2RawCD = &CLSID_MsftDiscFormat2RawCD_Value;

const CLSID_MsftStreamZero_Value = Guid.initString("27354127-7f64-5b0f-8f00-5d77afbe261e");
pub const CLSID_MsftStreamZero = &CLSID_MsftStreamZero_Value;

const CLSID_MsftStreamPrng001_Value = Guid.initString("27354126-7f64-5b0f-8f00-5d77afbe261e");
pub const CLSID_MsftStreamPrng001 = &CLSID_MsftStreamPrng001_Value;

const CLSID_MsftStreamConcatenate_Value = Guid.initString("27354125-7f64-5b0f-8f00-5d77afbe261e");
pub const CLSID_MsftStreamConcatenate = &CLSID_MsftStreamConcatenate_Value;

const CLSID_MsftStreamInterleave_Value = Guid.initString("27354124-7f64-5b0f-8f00-5d77afbe261e");
pub const CLSID_MsftStreamInterleave = &CLSID_MsftStreamInterleave_Value;

const CLSID_MsftWriteSpeedDescriptor_Value = Guid.initString("27354123-7f64-5b0f-8f00-5d77afbe261e");
pub const CLSID_MsftWriteSpeedDescriptor = &CLSID_MsftWriteSpeedDescriptor_Value;

const CLSID_MsftMultisessionSequential_Value = Guid.initString("27354122-7f64-5b0f-8f00-5d77afbe261e");
pub const CLSID_MsftMultisessionSequential = &CLSID_MsftMultisessionSequential_Value;

const CLSID_MsftMultisessionRandomWrite_Value = Guid.initString("b507ca24-2204-11dd-966a-001aa01bbc58");
pub const CLSID_MsftMultisessionRandomWrite = &CLSID_MsftMultisessionRandomWrite_Value;

const CLSID_MsftRawCDImageCreator_Value = Guid.initString("25983561-9d65-49ce-b335-40630d901227");
pub const CLSID_MsftRawCDImageCreator = &CLSID_MsftRawCDImageCreator_Value;

pub const IMAPI_MEDIA_PHYSICAL_TYPE = enum(i32) {
    UNKNOWN = 0,
    CDROM = 1,
    CDR = 2,
    CDRW = 3,
    DVDROM = 4,
    DVDRAM = 5,
    DVDPLUSR = 6,
    DVDPLUSRW = 7,
    DVDPLUSR_DUALLAYER = 8,
    DVDDASHR = 9,
    DVDDASHRW = 10,
    DVDDASHR_DUALLAYER = 11,
    DISK = 12,
    DVDPLUSRW_DUALLAYER = 13,
    HDDVDROM = 14,
    HDDVDR = 15,
    HDDVDRAM = 16,
    BDROM = 17,
    BDR = 18,
    BDRE = 19,
    pub const MAX = .BDRE;
};
pub const IMAPI_MEDIA_TYPE_UNKNOWN = IMAPI_MEDIA_PHYSICAL_TYPE.UNKNOWN;
pub const IMAPI_MEDIA_TYPE_CDROM = IMAPI_MEDIA_PHYSICAL_TYPE.CDROM;
pub const IMAPI_MEDIA_TYPE_CDR = IMAPI_MEDIA_PHYSICAL_TYPE.CDR;
pub const IMAPI_MEDIA_TYPE_CDRW = IMAPI_MEDIA_PHYSICAL_TYPE.CDRW;
pub const IMAPI_MEDIA_TYPE_DVDROM = IMAPI_MEDIA_PHYSICAL_TYPE.DVDROM;
pub const IMAPI_MEDIA_TYPE_DVDRAM = IMAPI_MEDIA_PHYSICAL_TYPE.DVDRAM;
pub const IMAPI_MEDIA_TYPE_DVDPLUSR = IMAPI_MEDIA_PHYSICAL_TYPE.DVDPLUSR;
pub const IMAPI_MEDIA_TYPE_DVDPLUSRW = IMAPI_MEDIA_PHYSICAL_TYPE.DVDPLUSRW;
pub const IMAPI_MEDIA_TYPE_DVDPLUSR_DUALLAYER = IMAPI_MEDIA_PHYSICAL_TYPE.DVDPLUSR_DUALLAYER;
pub const IMAPI_MEDIA_TYPE_DVDDASHR = IMAPI_MEDIA_PHYSICAL_TYPE.DVDDASHR;
pub const IMAPI_MEDIA_TYPE_DVDDASHRW = IMAPI_MEDIA_PHYSICAL_TYPE.DVDDASHRW;
pub const IMAPI_MEDIA_TYPE_DVDDASHR_DUALLAYER = IMAPI_MEDIA_PHYSICAL_TYPE.DVDDASHR_DUALLAYER;
pub const IMAPI_MEDIA_TYPE_DISK = IMAPI_MEDIA_PHYSICAL_TYPE.DISK;
pub const IMAPI_MEDIA_TYPE_DVDPLUSRW_DUALLAYER = IMAPI_MEDIA_PHYSICAL_TYPE.DVDPLUSRW_DUALLAYER;
pub const IMAPI_MEDIA_TYPE_HDDVDROM = IMAPI_MEDIA_PHYSICAL_TYPE.HDDVDROM;
pub const IMAPI_MEDIA_TYPE_HDDVDR = IMAPI_MEDIA_PHYSICAL_TYPE.HDDVDR;
pub const IMAPI_MEDIA_TYPE_HDDVDRAM = IMAPI_MEDIA_PHYSICAL_TYPE.HDDVDRAM;
pub const IMAPI_MEDIA_TYPE_BDROM = IMAPI_MEDIA_PHYSICAL_TYPE.BDROM;
pub const IMAPI_MEDIA_TYPE_BDR = IMAPI_MEDIA_PHYSICAL_TYPE.BDR;
pub const IMAPI_MEDIA_TYPE_BDRE = IMAPI_MEDIA_PHYSICAL_TYPE.BDRE;
pub const IMAPI_MEDIA_TYPE_MAX = IMAPI_MEDIA_PHYSICAL_TYPE.BDRE;

pub const IMAPI_MEDIA_WRITE_PROTECT_STATE = enum(i32) {
    UNTIL_POWERDOWN = 1,
    BY_CARTRIDGE = 2,
    BY_MEDIA_SPECIFIC_REASON = 4,
    BY_SOFTWARE_WRITE_PROTECT = 8,
    BY_DISC_CONTROL_BLOCK = 16,
    READ_ONLY_MEDIA = 16384,
};
pub const IMAPI_WRITEPROTECTED_UNTIL_POWERDOWN = IMAPI_MEDIA_WRITE_PROTECT_STATE.UNTIL_POWERDOWN;
pub const IMAPI_WRITEPROTECTED_BY_CARTRIDGE = IMAPI_MEDIA_WRITE_PROTECT_STATE.BY_CARTRIDGE;
pub const IMAPI_WRITEPROTECTED_BY_MEDIA_SPECIFIC_REASON = IMAPI_MEDIA_WRITE_PROTECT_STATE.BY_MEDIA_SPECIFIC_REASON;
pub const IMAPI_WRITEPROTECTED_BY_SOFTWARE_WRITE_PROTECT = IMAPI_MEDIA_WRITE_PROTECT_STATE.BY_SOFTWARE_WRITE_PROTECT;
pub const IMAPI_WRITEPROTECTED_BY_DISC_CONTROL_BLOCK = IMAPI_MEDIA_WRITE_PROTECT_STATE.BY_DISC_CONTROL_BLOCK;
pub const IMAPI_WRITEPROTECTED_READ_ONLY_MEDIA = IMAPI_MEDIA_WRITE_PROTECT_STATE.READ_ONLY_MEDIA;

pub const IMAPI_READ_TRACK_ADDRESS_TYPE = enum(i32) {
    LBA = 0,
    TRACK = 1,
    SESSION = 2,
};
pub const IMAPI_READ_TRACK_ADDRESS_TYPE_LBA = IMAPI_READ_TRACK_ADDRESS_TYPE.LBA;
pub const IMAPI_READ_TRACK_ADDRESS_TYPE_TRACK = IMAPI_READ_TRACK_ADDRESS_TYPE.TRACK;
pub const IMAPI_READ_TRACK_ADDRESS_TYPE_SESSION = IMAPI_READ_TRACK_ADDRESS_TYPE.SESSION;

pub const IMAPI_MODE_PAGE_REQUEST_TYPE = enum(i32) {
    CURRENT_VALUES = 0,
    CHANGEABLE_VALUES = 1,
    DEFAULT_VALUES = 2,
    SAVED_VALUES = 3,
};
pub const IMAPI_MODE_PAGE_REQUEST_TYPE_CURRENT_VALUES = IMAPI_MODE_PAGE_REQUEST_TYPE.CURRENT_VALUES;
pub const IMAPI_MODE_PAGE_REQUEST_TYPE_CHANGEABLE_VALUES = IMAPI_MODE_PAGE_REQUEST_TYPE.CHANGEABLE_VALUES;
pub const IMAPI_MODE_PAGE_REQUEST_TYPE_DEFAULT_VALUES = IMAPI_MODE_PAGE_REQUEST_TYPE.DEFAULT_VALUES;
pub const IMAPI_MODE_PAGE_REQUEST_TYPE_SAVED_VALUES = IMAPI_MODE_PAGE_REQUEST_TYPE.SAVED_VALUES;

pub const IMAPI_MODE_PAGE_TYPE = enum(i32) {
    READ_WRITE_ERROR_RECOVERY = 1,
    MRW = 3,
    WRITE_PARAMETERS = 5,
    CACHING = 8,
    INFORMATIONAL_EXCEPTIONS = 28,
    TIMEOUT_AND_PROTECT = 29,
    POWER_CONDITION = 26,
    LEGACY_CAPABILITIES = 42,
};
pub const IMAPI_MODE_PAGE_TYPE_READ_WRITE_ERROR_RECOVERY = IMAPI_MODE_PAGE_TYPE.READ_WRITE_ERROR_RECOVERY;
pub const IMAPI_MODE_PAGE_TYPE_MRW = IMAPI_MODE_PAGE_TYPE.MRW;
pub const IMAPI_MODE_PAGE_TYPE_WRITE_PARAMETERS = IMAPI_MODE_PAGE_TYPE.WRITE_PARAMETERS;
pub const IMAPI_MODE_PAGE_TYPE_CACHING = IMAPI_MODE_PAGE_TYPE.CACHING;
pub const IMAPI_MODE_PAGE_TYPE_INFORMATIONAL_EXCEPTIONS = IMAPI_MODE_PAGE_TYPE.INFORMATIONAL_EXCEPTIONS;
pub const IMAPI_MODE_PAGE_TYPE_TIMEOUT_AND_PROTECT = IMAPI_MODE_PAGE_TYPE.TIMEOUT_AND_PROTECT;
pub const IMAPI_MODE_PAGE_TYPE_POWER_CONDITION = IMAPI_MODE_PAGE_TYPE.POWER_CONDITION;
pub const IMAPI_MODE_PAGE_TYPE_LEGACY_CAPABILITIES = IMAPI_MODE_PAGE_TYPE.LEGACY_CAPABILITIES;

pub const IMAPI_FEATURE_PAGE_TYPE = enum(i32) {
    PROFILE_LIST = 0,
    CORE = 1,
    MORPHING = 2,
    REMOVABLE_MEDIUM = 3,
    WRITE_PROTECT = 4,
    RANDOMLY_READABLE = 16,
    CD_MULTIREAD = 29,
    CD_READ = 30,
    DVD_READ = 31,
    RANDOMLY_WRITABLE = 32,
    INCREMENTAL_STREAMING_WRITABLE = 33,
    SECTOR_ERASABLE = 34,
    FORMATTABLE = 35,
    HARDWARE_DEFECT_MANAGEMENT = 36,
    WRITE_ONCE = 37,
    RESTRICTED_OVERWRITE = 38,
    CDRW_CAV_WRITE = 39,
    MRW = 40,
    ENHANCED_DEFECT_REPORTING = 41,
    DVD_PLUS_RW = 42,
    DVD_PLUS_R = 43,
    RIGID_RESTRICTED_OVERWRITE = 44,
    CD_TRACK_AT_ONCE = 45,
    CD_MASTERING = 46,
    DVD_DASH_WRITE = 47,
    DOUBLE_DENSITY_CD_READ = 48,
    DOUBLE_DENSITY_CD_R_WRITE = 49,
    DOUBLE_DENSITY_CD_RW_WRITE = 50,
    LAYER_JUMP_RECORDING = 51,
    CD_RW_MEDIA_WRITE_SUPPORT = 55,
    BD_PSEUDO_OVERWRITE = 56,
    DVD_PLUS_R_DUAL_LAYER = 59,
    BD_READ = 64,
    BD_WRITE = 65,
    HD_DVD_READ = 80,
    HD_DVD_WRITE = 81,
    POWER_MANAGEMENT = 256,
    SMART = 257,
    EMBEDDED_CHANGER = 258,
    CD_ANALOG_PLAY = 259,
    MICROCODE_UPDATE = 260,
    TIMEOUT = 261,
    DVD_CSS = 262,
    REAL_TIME_STREAMING = 263,
    LOGICAL_UNIT_SERIAL_NUMBER = 264,
    MEDIA_SERIAL_NUMBER = 265,
    DISC_CONTROL_BLOCKS = 266,
    DVD_CPRM = 267,
    FIRMWARE_INFORMATION = 268,
    AACS = 269,
    VCPS = 272,
};
pub const IMAPI_FEATURE_PAGE_TYPE_PROFILE_LIST = IMAPI_FEATURE_PAGE_TYPE.PROFILE_LIST;
pub const IMAPI_FEATURE_PAGE_TYPE_CORE = IMAPI_FEATURE_PAGE_TYPE.CORE;
pub const IMAPI_FEATURE_PAGE_TYPE_MORPHING = IMAPI_FEATURE_PAGE_TYPE.MORPHING;
pub const IMAPI_FEATURE_PAGE_TYPE_REMOVABLE_MEDIUM = IMAPI_FEATURE_PAGE_TYPE.REMOVABLE_MEDIUM;
pub const IMAPI_FEATURE_PAGE_TYPE_WRITE_PROTECT = IMAPI_FEATURE_PAGE_TYPE.WRITE_PROTECT;
pub const IMAPI_FEATURE_PAGE_TYPE_RANDOMLY_READABLE = IMAPI_FEATURE_PAGE_TYPE.RANDOMLY_READABLE;
pub const IMAPI_FEATURE_PAGE_TYPE_CD_MULTIREAD = IMAPI_FEATURE_PAGE_TYPE.CD_MULTIREAD;
pub const IMAPI_FEATURE_PAGE_TYPE_CD_READ = IMAPI_FEATURE_PAGE_TYPE.CD_READ;
pub const IMAPI_FEATURE_PAGE_TYPE_DVD_READ = IMAPI_FEATURE_PAGE_TYPE.DVD_READ;
pub const IMAPI_FEATURE_PAGE_TYPE_RANDOMLY_WRITABLE = IMAPI_FEATURE_PAGE_TYPE.RANDOMLY_WRITABLE;
pub const IMAPI_FEATURE_PAGE_TYPE_INCREMENTAL_STREAMING_WRITABLE = IMAPI_FEATURE_PAGE_TYPE.INCREMENTAL_STREAMING_WRITABLE;
pub const IMAPI_FEATURE_PAGE_TYPE_SECTOR_ERASABLE = IMAPI_FEATURE_PAGE_TYPE.SECTOR_ERASABLE;
pub const IMAPI_FEATURE_PAGE_TYPE_FORMATTABLE = IMAPI_FEATURE_PAGE_TYPE.FORMATTABLE;
pub const IMAPI_FEATURE_PAGE_TYPE_HARDWARE_DEFECT_MANAGEMENT = IMAPI_FEATURE_PAGE_TYPE.HARDWARE_DEFECT_MANAGEMENT;
pub const IMAPI_FEATURE_PAGE_TYPE_WRITE_ONCE = IMAPI_FEATURE_PAGE_TYPE.WRITE_ONCE;
pub const IMAPI_FEATURE_PAGE_TYPE_RESTRICTED_OVERWRITE = IMAPI_FEATURE_PAGE_TYPE.RESTRICTED_OVERWRITE;
pub const IMAPI_FEATURE_PAGE_TYPE_CDRW_CAV_WRITE = IMAPI_FEATURE_PAGE_TYPE.CDRW_CAV_WRITE;
pub const IMAPI_FEATURE_PAGE_TYPE_MRW = IMAPI_FEATURE_PAGE_TYPE.MRW;
pub const IMAPI_FEATURE_PAGE_TYPE_ENHANCED_DEFECT_REPORTING = IMAPI_FEATURE_PAGE_TYPE.ENHANCED_DEFECT_REPORTING;
pub const IMAPI_FEATURE_PAGE_TYPE_DVD_PLUS_RW = IMAPI_FEATURE_PAGE_TYPE.DVD_PLUS_RW;
pub const IMAPI_FEATURE_PAGE_TYPE_DVD_PLUS_R = IMAPI_FEATURE_PAGE_TYPE.DVD_PLUS_R;
pub const IMAPI_FEATURE_PAGE_TYPE_RIGID_RESTRICTED_OVERWRITE = IMAPI_FEATURE_PAGE_TYPE.RIGID_RESTRICTED_OVERWRITE;
pub const IMAPI_FEATURE_PAGE_TYPE_CD_TRACK_AT_ONCE = IMAPI_FEATURE_PAGE_TYPE.CD_TRACK_AT_ONCE;
pub const IMAPI_FEATURE_PAGE_TYPE_CD_MASTERING = IMAPI_FEATURE_PAGE_TYPE.CD_MASTERING;
pub const IMAPI_FEATURE_PAGE_TYPE_DVD_DASH_WRITE = IMAPI_FEATURE_PAGE_TYPE.DVD_DASH_WRITE;
pub const IMAPI_FEATURE_PAGE_TYPE_DOUBLE_DENSITY_CD_READ = IMAPI_FEATURE_PAGE_TYPE.DOUBLE_DENSITY_CD_READ;
pub const IMAPI_FEATURE_PAGE_TYPE_DOUBLE_DENSITY_CD_R_WRITE = IMAPI_FEATURE_PAGE_TYPE.DOUBLE_DENSITY_CD_R_WRITE;
pub const IMAPI_FEATURE_PAGE_TYPE_DOUBLE_DENSITY_CD_RW_WRITE = IMAPI_FEATURE_PAGE_TYPE.DOUBLE_DENSITY_CD_RW_WRITE;
pub const IMAPI_FEATURE_PAGE_TYPE_LAYER_JUMP_RECORDING = IMAPI_FEATURE_PAGE_TYPE.LAYER_JUMP_RECORDING;
pub const IMAPI_FEATURE_PAGE_TYPE_CD_RW_MEDIA_WRITE_SUPPORT = IMAPI_FEATURE_PAGE_TYPE.CD_RW_MEDIA_WRITE_SUPPORT;
pub const IMAPI_FEATURE_PAGE_TYPE_BD_PSEUDO_OVERWRITE = IMAPI_FEATURE_PAGE_TYPE.BD_PSEUDO_OVERWRITE;
pub const IMAPI_FEATURE_PAGE_TYPE_DVD_PLUS_R_DUAL_LAYER = IMAPI_FEATURE_PAGE_TYPE.DVD_PLUS_R_DUAL_LAYER;
pub const IMAPI_FEATURE_PAGE_TYPE_BD_READ = IMAPI_FEATURE_PAGE_TYPE.BD_READ;
pub const IMAPI_FEATURE_PAGE_TYPE_BD_WRITE = IMAPI_FEATURE_PAGE_TYPE.BD_WRITE;
pub const IMAPI_FEATURE_PAGE_TYPE_HD_DVD_READ = IMAPI_FEATURE_PAGE_TYPE.HD_DVD_READ;
pub const IMAPI_FEATURE_PAGE_TYPE_HD_DVD_WRITE = IMAPI_FEATURE_PAGE_TYPE.HD_DVD_WRITE;
pub const IMAPI_FEATURE_PAGE_TYPE_POWER_MANAGEMENT = IMAPI_FEATURE_PAGE_TYPE.POWER_MANAGEMENT;
pub const IMAPI_FEATURE_PAGE_TYPE_SMART = IMAPI_FEATURE_PAGE_TYPE.SMART;
pub const IMAPI_FEATURE_PAGE_TYPE_EMBEDDED_CHANGER = IMAPI_FEATURE_PAGE_TYPE.EMBEDDED_CHANGER;
pub const IMAPI_FEATURE_PAGE_TYPE_CD_ANALOG_PLAY = IMAPI_FEATURE_PAGE_TYPE.CD_ANALOG_PLAY;
pub const IMAPI_FEATURE_PAGE_TYPE_MICROCODE_UPDATE = IMAPI_FEATURE_PAGE_TYPE.MICROCODE_UPDATE;
pub const IMAPI_FEATURE_PAGE_TYPE_TIMEOUT = IMAPI_FEATURE_PAGE_TYPE.TIMEOUT;
pub const IMAPI_FEATURE_PAGE_TYPE_DVD_CSS = IMAPI_FEATURE_PAGE_TYPE.DVD_CSS;
pub const IMAPI_FEATURE_PAGE_TYPE_REAL_TIME_STREAMING = IMAPI_FEATURE_PAGE_TYPE.REAL_TIME_STREAMING;
pub const IMAPI_FEATURE_PAGE_TYPE_LOGICAL_UNIT_SERIAL_NUMBER = IMAPI_FEATURE_PAGE_TYPE.LOGICAL_UNIT_SERIAL_NUMBER;
pub const IMAPI_FEATURE_PAGE_TYPE_MEDIA_SERIAL_NUMBER = IMAPI_FEATURE_PAGE_TYPE.MEDIA_SERIAL_NUMBER;
pub const IMAPI_FEATURE_PAGE_TYPE_DISC_CONTROL_BLOCKS = IMAPI_FEATURE_PAGE_TYPE.DISC_CONTROL_BLOCKS;
pub const IMAPI_FEATURE_PAGE_TYPE_DVD_CPRM = IMAPI_FEATURE_PAGE_TYPE.DVD_CPRM;
pub const IMAPI_FEATURE_PAGE_TYPE_FIRMWARE_INFORMATION = IMAPI_FEATURE_PAGE_TYPE.FIRMWARE_INFORMATION;
pub const IMAPI_FEATURE_PAGE_TYPE_AACS = IMAPI_FEATURE_PAGE_TYPE.AACS;
pub const IMAPI_FEATURE_PAGE_TYPE_VCPS = IMAPI_FEATURE_PAGE_TYPE.VCPS;

pub const IMAPI_PROFILE_TYPE = enum(i32) {
    INVALID = 0,
    NON_REMOVABLE_DISK = 1,
    REMOVABLE_DISK = 2,
    MO_ERASABLE = 3,
    MO_WRITE_ONCE = 4,
    AS_MO = 5,
    CDROM = 8,
    CD_RECORDABLE = 9,
    CD_REWRITABLE = 10,
    DVDROM = 16,
    DVD_DASH_RECORDABLE = 17,
    DVD_RAM = 18,
    DVD_DASH_REWRITABLE = 19,
    DVD_DASH_RW_SEQUENTIAL = 20,
    DVD_DASH_R_DUAL_SEQUENTIAL = 21,
    DVD_DASH_R_DUAL_LAYER_JUMP = 22,
    DVD_PLUS_RW = 26,
    DVD_PLUS_R = 27,
    DDCDROM = 32,
    DDCD_RECORDABLE = 33,
    DDCD_REWRITABLE = 34,
    DVD_PLUS_RW_DUAL = 42,
    DVD_PLUS_R_DUAL = 43,
    BD_ROM = 64,
    BD_R_SEQUENTIAL = 65,
    BD_R_RANDOM_RECORDING = 66,
    BD_REWRITABLE = 67,
    HD_DVD_ROM = 80,
    HD_DVD_RECORDABLE = 81,
    HD_DVD_RAM = 82,
    NON_STANDARD = 65535,
};
pub const IMAPI_PROFILE_TYPE_INVALID = IMAPI_PROFILE_TYPE.INVALID;
pub const IMAPI_PROFILE_TYPE_NON_REMOVABLE_DISK = IMAPI_PROFILE_TYPE.NON_REMOVABLE_DISK;
pub const IMAPI_PROFILE_TYPE_REMOVABLE_DISK = IMAPI_PROFILE_TYPE.REMOVABLE_DISK;
pub const IMAPI_PROFILE_TYPE_MO_ERASABLE = IMAPI_PROFILE_TYPE.MO_ERASABLE;
pub const IMAPI_PROFILE_TYPE_MO_WRITE_ONCE = IMAPI_PROFILE_TYPE.MO_WRITE_ONCE;
pub const IMAPI_PROFILE_TYPE_AS_MO = IMAPI_PROFILE_TYPE.AS_MO;
pub const IMAPI_PROFILE_TYPE_CDROM = IMAPI_PROFILE_TYPE.CDROM;
pub const IMAPI_PROFILE_TYPE_CD_RECORDABLE = IMAPI_PROFILE_TYPE.CD_RECORDABLE;
pub const IMAPI_PROFILE_TYPE_CD_REWRITABLE = IMAPI_PROFILE_TYPE.CD_REWRITABLE;
pub const IMAPI_PROFILE_TYPE_DVDROM = IMAPI_PROFILE_TYPE.DVDROM;
pub const IMAPI_PROFILE_TYPE_DVD_DASH_RECORDABLE = IMAPI_PROFILE_TYPE.DVD_DASH_RECORDABLE;
pub const IMAPI_PROFILE_TYPE_DVD_RAM = IMAPI_PROFILE_TYPE.DVD_RAM;
pub const IMAPI_PROFILE_TYPE_DVD_DASH_REWRITABLE = IMAPI_PROFILE_TYPE.DVD_DASH_REWRITABLE;
pub const IMAPI_PROFILE_TYPE_DVD_DASH_RW_SEQUENTIAL = IMAPI_PROFILE_TYPE.DVD_DASH_RW_SEQUENTIAL;
pub const IMAPI_PROFILE_TYPE_DVD_DASH_R_DUAL_SEQUENTIAL = IMAPI_PROFILE_TYPE.DVD_DASH_R_DUAL_SEQUENTIAL;
pub const IMAPI_PROFILE_TYPE_DVD_DASH_R_DUAL_LAYER_JUMP = IMAPI_PROFILE_TYPE.DVD_DASH_R_DUAL_LAYER_JUMP;
pub const IMAPI_PROFILE_TYPE_DVD_PLUS_RW = IMAPI_PROFILE_TYPE.DVD_PLUS_RW;
pub const IMAPI_PROFILE_TYPE_DVD_PLUS_R = IMAPI_PROFILE_TYPE.DVD_PLUS_R;
pub const IMAPI_PROFILE_TYPE_DDCDROM = IMAPI_PROFILE_TYPE.DDCDROM;
pub const IMAPI_PROFILE_TYPE_DDCD_RECORDABLE = IMAPI_PROFILE_TYPE.DDCD_RECORDABLE;
pub const IMAPI_PROFILE_TYPE_DDCD_REWRITABLE = IMAPI_PROFILE_TYPE.DDCD_REWRITABLE;
pub const IMAPI_PROFILE_TYPE_DVD_PLUS_RW_DUAL = IMAPI_PROFILE_TYPE.DVD_PLUS_RW_DUAL;
pub const IMAPI_PROFILE_TYPE_DVD_PLUS_R_DUAL = IMAPI_PROFILE_TYPE.DVD_PLUS_R_DUAL;
pub const IMAPI_PROFILE_TYPE_BD_ROM = IMAPI_PROFILE_TYPE.BD_ROM;
pub const IMAPI_PROFILE_TYPE_BD_R_SEQUENTIAL = IMAPI_PROFILE_TYPE.BD_R_SEQUENTIAL;
pub const IMAPI_PROFILE_TYPE_BD_R_RANDOM_RECORDING = IMAPI_PROFILE_TYPE.BD_R_RANDOM_RECORDING;
pub const IMAPI_PROFILE_TYPE_BD_REWRITABLE = IMAPI_PROFILE_TYPE.BD_REWRITABLE;
pub const IMAPI_PROFILE_TYPE_HD_DVD_ROM = IMAPI_PROFILE_TYPE.HD_DVD_ROM;
pub const IMAPI_PROFILE_TYPE_HD_DVD_RECORDABLE = IMAPI_PROFILE_TYPE.HD_DVD_RECORDABLE;
pub const IMAPI_PROFILE_TYPE_HD_DVD_RAM = IMAPI_PROFILE_TYPE.HD_DVD_RAM;
pub const IMAPI_PROFILE_TYPE_NON_STANDARD = IMAPI_PROFILE_TYPE.NON_STANDARD;

pub const IMAPI_FORMAT2_DATA_WRITE_ACTION = enum(i32) {
    VALIDATING_MEDIA = 0,
    FORMATTING_MEDIA = 1,
    INITIALIZING_HARDWARE = 2,
    CALIBRATING_POWER = 3,
    WRITING_DATA = 4,
    FINALIZATION = 5,
    COMPLETED = 6,
    VERIFYING = 7,
};
pub const IMAPI_FORMAT2_DATA_WRITE_ACTION_VALIDATING_MEDIA = IMAPI_FORMAT2_DATA_WRITE_ACTION.VALIDATING_MEDIA;
pub const IMAPI_FORMAT2_DATA_WRITE_ACTION_FORMATTING_MEDIA = IMAPI_FORMAT2_DATA_WRITE_ACTION.FORMATTING_MEDIA;
pub const IMAPI_FORMAT2_DATA_WRITE_ACTION_INITIALIZING_HARDWARE = IMAPI_FORMAT2_DATA_WRITE_ACTION.INITIALIZING_HARDWARE;
pub const IMAPI_FORMAT2_DATA_WRITE_ACTION_CALIBRATING_POWER = IMAPI_FORMAT2_DATA_WRITE_ACTION.CALIBRATING_POWER;
pub const IMAPI_FORMAT2_DATA_WRITE_ACTION_WRITING_DATA = IMAPI_FORMAT2_DATA_WRITE_ACTION.WRITING_DATA;
pub const IMAPI_FORMAT2_DATA_WRITE_ACTION_FINALIZATION = IMAPI_FORMAT2_DATA_WRITE_ACTION.FINALIZATION;
pub const IMAPI_FORMAT2_DATA_WRITE_ACTION_COMPLETED = IMAPI_FORMAT2_DATA_WRITE_ACTION.COMPLETED;
pub const IMAPI_FORMAT2_DATA_WRITE_ACTION_VERIFYING = IMAPI_FORMAT2_DATA_WRITE_ACTION.VERIFYING;

pub const IMAPI_FORMAT2_DATA_MEDIA_STATE = enum(i32) {
    UNKNOWN = 0,
    INFORMATIONAL_MASK = 15,
    UNSUPPORTED_MASK = 64512,
    OVERWRITE_ONLY = 1,
    BLANK = 2,
    APPENDABLE = 4,
    FINAL_SESSION = 8,
    DAMAGED = 1024,
    ERASE_REQUIRED = 2048,
    NON_EMPTY_SESSION = 4096,
    WRITE_PROTECTED = 8192,
    FINALIZED = 16384,
    UNSUPPORTED_MEDIA = 32768,
    pub const RANDOMLY_WRITABLE = .OVERWRITE_ONLY;
};
pub const IMAPI_FORMAT2_DATA_MEDIA_STATE_UNKNOWN = IMAPI_FORMAT2_DATA_MEDIA_STATE.UNKNOWN;
pub const IMAPI_FORMAT2_DATA_MEDIA_STATE_INFORMATIONAL_MASK = IMAPI_FORMAT2_DATA_MEDIA_STATE.INFORMATIONAL_MASK;
pub const IMAPI_FORMAT2_DATA_MEDIA_STATE_UNSUPPORTED_MASK = IMAPI_FORMAT2_DATA_MEDIA_STATE.UNSUPPORTED_MASK;
pub const IMAPI_FORMAT2_DATA_MEDIA_STATE_OVERWRITE_ONLY = IMAPI_FORMAT2_DATA_MEDIA_STATE.OVERWRITE_ONLY;
pub const IMAPI_FORMAT2_DATA_MEDIA_STATE_RANDOMLY_WRITABLE = IMAPI_FORMAT2_DATA_MEDIA_STATE.OVERWRITE_ONLY;
pub const IMAPI_FORMAT2_DATA_MEDIA_STATE_BLANK = IMAPI_FORMAT2_DATA_MEDIA_STATE.BLANK;
pub const IMAPI_FORMAT2_DATA_MEDIA_STATE_APPENDABLE = IMAPI_FORMAT2_DATA_MEDIA_STATE.APPENDABLE;
pub const IMAPI_FORMAT2_DATA_MEDIA_STATE_FINAL_SESSION = IMAPI_FORMAT2_DATA_MEDIA_STATE.FINAL_SESSION;
pub const IMAPI_FORMAT2_DATA_MEDIA_STATE_DAMAGED = IMAPI_FORMAT2_DATA_MEDIA_STATE.DAMAGED;
pub const IMAPI_FORMAT2_DATA_MEDIA_STATE_ERASE_REQUIRED = IMAPI_FORMAT2_DATA_MEDIA_STATE.ERASE_REQUIRED;
pub const IMAPI_FORMAT2_DATA_MEDIA_STATE_NON_EMPTY_SESSION = IMAPI_FORMAT2_DATA_MEDIA_STATE.NON_EMPTY_SESSION;
pub const IMAPI_FORMAT2_DATA_MEDIA_STATE_WRITE_PROTECTED = IMAPI_FORMAT2_DATA_MEDIA_STATE.WRITE_PROTECTED;
pub const IMAPI_FORMAT2_DATA_MEDIA_STATE_FINALIZED = IMAPI_FORMAT2_DATA_MEDIA_STATE.FINALIZED;
pub const IMAPI_FORMAT2_DATA_MEDIA_STATE_UNSUPPORTED_MEDIA = IMAPI_FORMAT2_DATA_MEDIA_STATE.UNSUPPORTED_MEDIA;

pub const IMAPI_FORMAT2_TAO_WRITE_ACTION = enum(i32) {
    UNKNOWN = 0,
    PREPARING = 1,
    WRITING = 2,
    FINISHING = 3,
    VERIFYING = 4,
};
pub const IMAPI_FORMAT2_TAO_WRITE_ACTION_UNKNOWN = IMAPI_FORMAT2_TAO_WRITE_ACTION.UNKNOWN;
pub const IMAPI_FORMAT2_TAO_WRITE_ACTION_PREPARING = IMAPI_FORMAT2_TAO_WRITE_ACTION.PREPARING;
pub const IMAPI_FORMAT2_TAO_WRITE_ACTION_WRITING = IMAPI_FORMAT2_TAO_WRITE_ACTION.WRITING;
pub const IMAPI_FORMAT2_TAO_WRITE_ACTION_FINISHING = IMAPI_FORMAT2_TAO_WRITE_ACTION.FINISHING;
pub const IMAPI_FORMAT2_TAO_WRITE_ACTION_VERIFYING = IMAPI_FORMAT2_TAO_WRITE_ACTION.VERIFYING;

pub const IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE = enum(i32) {
    PQ_ONLY = 1,
    IS_COOKED = 2,
    IS_RAW = 3,
};
pub const IMAPI_FORMAT2_RAW_CD_SUBCODE_PQ_ONLY = IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE.PQ_ONLY;
pub const IMAPI_FORMAT2_RAW_CD_SUBCODE_IS_COOKED = IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE.IS_COOKED;
pub const IMAPI_FORMAT2_RAW_CD_SUBCODE_IS_RAW = IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE.IS_RAW;

pub const IMAPI_FORMAT2_RAW_CD_WRITE_ACTION = enum(i32) {
    UNKNOWN = 0,
    PREPARING = 1,
    WRITING = 2,
    FINISHING = 3,
};
pub const IMAPI_FORMAT2_RAW_CD_WRITE_ACTION_UNKNOWN = IMAPI_FORMAT2_RAW_CD_WRITE_ACTION.UNKNOWN;
pub const IMAPI_FORMAT2_RAW_CD_WRITE_ACTION_PREPARING = IMAPI_FORMAT2_RAW_CD_WRITE_ACTION.PREPARING;
pub const IMAPI_FORMAT2_RAW_CD_WRITE_ACTION_WRITING = IMAPI_FORMAT2_RAW_CD_WRITE_ACTION.WRITING;
pub const IMAPI_FORMAT2_RAW_CD_WRITE_ACTION_FINISHING = IMAPI_FORMAT2_RAW_CD_WRITE_ACTION.FINISHING;

pub const IMAPI_CD_SECTOR_TYPE = enum(i32) {
    AUDIO = 0,
    MODE_ZERO = 1,
    MODE1 = 2,
    MODE2FORM0 = 3,
    MODE2FORM1 = 4,
    MODE2FORM2 = 5,
    MODE1RAW = 6,
    MODE2FORM0RAW = 7,
    MODE2FORM1RAW = 8,
    MODE2FORM2RAW = 9,
};
pub const IMAPI_CD_SECTOR_AUDIO = IMAPI_CD_SECTOR_TYPE.AUDIO;
pub const IMAPI_CD_SECTOR_MODE_ZERO = IMAPI_CD_SECTOR_TYPE.MODE_ZERO;
pub const IMAPI_CD_SECTOR_MODE1 = IMAPI_CD_SECTOR_TYPE.MODE1;
pub const IMAPI_CD_SECTOR_MODE2FORM0 = IMAPI_CD_SECTOR_TYPE.MODE2FORM0;
pub const IMAPI_CD_SECTOR_MODE2FORM1 = IMAPI_CD_SECTOR_TYPE.MODE2FORM1;
pub const IMAPI_CD_SECTOR_MODE2FORM2 = IMAPI_CD_SECTOR_TYPE.MODE2FORM2;
pub const IMAPI_CD_SECTOR_MODE1RAW = IMAPI_CD_SECTOR_TYPE.MODE1RAW;
pub const IMAPI_CD_SECTOR_MODE2FORM0RAW = IMAPI_CD_SECTOR_TYPE.MODE2FORM0RAW;
pub const IMAPI_CD_SECTOR_MODE2FORM1RAW = IMAPI_CD_SECTOR_TYPE.MODE2FORM1RAW;
pub const IMAPI_CD_SECTOR_MODE2FORM2RAW = IMAPI_CD_SECTOR_TYPE.MODE2FORM2RAW;

pub const IMAPI_CD_TRACK_DIGITAL_COPY_SETTING = enum(i32) {
    PERMITTED = 0,
    PROHIBITED = 1,
    SCMS = 2,
};
pub const IMAPI_CD_TRACK_DIGITAL_COPY_PERMITTED = IMAPI_CD_TRACK_DIGITAL_COPY_SETTING.PERMITTED;
pub const IMAPI_CD_TRACK_DIGITAL_COPY_PROHIBITED = IMAPI_CD_TRACK_DIGITAL_COPY_SETTING.PROHIBITED;
pub const IMAPI_CD_TRACK_DIGITAL_COPY_SCMS = IMAPI_CD_TRACK_DIGITAL_COPY_SETTING.SCMS;

pub const IMAPI_BURN_VERIFICATION_LEVEL = enum(i32) {
    NONE = 0,
    QUICK = 1,
    FULL = 2,
};
pub const IMAPI_BURN_VERIFICATION_NONE = IMAPI_BURN_VERIFICATION_LEVEL.NONE;
pub const IMAPI_BURN_VERIFICATION_QUICK = IMAPI_BURN_VERIFICATION_LEVEL.QUICK;
pub const IMAPI_BURN_VERIFICATION_FULL = IMAPI_BURN_VERIFICATION_LEVEL.FULL;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDiscMaster2_Value = Guid.initString("27354130-7f64-5b0f-8f00-5d77afbe261e");
pub const IID_IDiscMaster2 = &IID_IDiscMaster2_Value;
pub const IDiscMaster2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const IDiscMaster2,
            ppunk: ?*?*IEnumVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: *const fn(
            self: *const IDiscMaster2,
            index: i32,
            value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IDiscMaster2,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsSupportedEnvironment: *const fn(
            self: *const IDiscMaster2,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get__NewEnum(self: *const IDiscMaster2, ppunk: ?*?*IEnumVARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, ppunk);
    }
    pub fn get_Item(self: *const IDiscMaster2, index: i32, value: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Item(self, index, value);
    }
    pub fn get_Count(self: *const IDiscMaster2, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, value);
    }
    pub fn get_IsSupportedEnvironment(self: *const IDiscMaster2, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsSupportedEnvironment(self, value);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_DDiscMaster2Events_Value = Guid.initString("27354131-7f64-5b0f-8f00-5d77afbe261e");
pub const IID_DDiscMaster2Events = &IID_DDiscMaster2Events_Value;
pub const DDiscMaster2Events = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        NotifyDeviceAdded: *const fn(
            self: *const DDiscMaster2Events,
            object: ?*IDispatch,
            uniqueId: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyDeviceRemoved: *const fn(
            self: *const DDiscMaster2Events,
            object: ?*IDispatch,
            uniqueId: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn NotifyDeviceAdded(self: *const DDiscMaster2Events, object: ?*IDispatch, uniqueId: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.NotifyDeviceAdded(self, object, uniqueId);
    }
    pub fn NotifyDeviceRemoved(self: *const DDiscMaster2Events, object: ?*IDispatch, uniqueId: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.NotifyDeviceRemoved(self, object, uniqueId);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDiscRecorder2Ex_Value = Guid.initString("27354132-7f64-5b0f-8f00-5d77afbe261e");
pub const IID_IDiscRecorder2Ex = &IID_IDiscRecorder2Ex_Value;
pub const IDiscRecorder2Ex = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SendCommandNoData: *const fn(
            self: *const IDiscRecorder2Ex,
            Cdb: [*:0]u8,
            CdbSize: u32,
            SenseBuffer: *[18]u8,
            Timeout: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendCommandSendDataToDevice: *const fn(
            self: *const IDiscRecorder2Ex,
            Cdb: [*:0]u8,
            CdbSize: u32,
            SenseBuffer: *[18]u8,
            Timeout: u32,
            Buffer: [*:0]u8,
            BufferSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendCommandGetDataFromDevice: *const fn(
            self: *const IDiscRecorder2Ex,
            Cdb: [*:0]u8,
            CdbSize: u32,
            SenseBuffer: *[18]u8,
            Timeout: u32,
            Buffer: [*:0]u8,
            BufferSize: u32,
            BufferFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadDvdStructure: *const fn(
            self: *const IDiscRecorder2Ex,
            format: u32,
            address: u32,
            layer: u32,
            agid: u32,
            data: [*]?*u8,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendDvdStructure: *const fn(
            self: *const IDiscRecorder2Ex,
            format: u32,
            data: [*:0]u8,
            count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAdapterDescriptor: *const fn(
            self: *const IDiscRecorder2Ex,
            data: [*]?*u8,
            byteSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceDescriptor: *const fn(
            self: *const IDiscRecorder2Ex,
            data: [*]?*u8,
            byteSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDiscInformation: *const fn(
            self: *const IDiscRecorder2Ex,
            discInformation: [*]?*u8,
            byteSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTrackInformation: *const fn(
            self: *const IDiscRecorder2Ex,
            address: u32,
            addressType: IMAPI_READ_TRACK_ADDRESS_TYPE,
            trackInformation: [*]?*u8,
            byteSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFeaturePage: *const fn(
            self: *const IDiscRecorder2Ex,
            requestedFeature: IMAPI_FEATURE_PAGE_TYPE,
            currentFeatureOnly: BOOLEAN,
            featureData: [*]?*u8,
            byteSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetModePage: *const fn(
            self: *const IDiscRecorder2Ex,
            requestedModePage: IMAPI_MODE_PAGE_TYPE,
            requestType: IMAPI_MODE_PAGE_REQUEST_TYPE,
            modePageData: [*]?*u8,
            byteSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetModePage: *const fn(
            self: *const IDiscRecorder2Ex,
            requestType: IMAPI_MODE_PAGE_REQUEST_TYPE,
            data: [*:0]u8,
            byteSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedFeaturePages: *const fn(
            self: *const IDiscRecorder2Ex,
            currentFeatureOnly: BOOLEAN,
            featureData: [*]?*IMAPI_FEATURE_PAGE_TYPE,
            byteSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedProfiles: *const fn(
            self: *const IDiscRecorder2Ex,
            currentOnly: BOOLEAN,
            profileTypes: [*]?*IMAPI_PROFILE_TYPE,
            validProfiles: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedModePages: *const fn(
            self: *const IDiscRecorder2Ex,
            requestType: IMAPI_MODE_PAGE_REQUEST_TYPE,
            modePageTypes: [*]?*IMAPI_MODE_PAGE_TYPE,
            validPages: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetByteAlignmentMask: *const fn(
            self: *const IDiscRecorder2Ex,
            value: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaximumNonPageAlignedTransferSize: *const fn(
            self: *const IDiscRecorder2Ex,
            value: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaximumPageAlignedTransferSize: *const fn(
            self: *const IDiscRecorder2Ex,
            value: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SendCommandNoData(self: *const IDiscRecorder2Ex, Cdb: [*:0]u8, CdbSize: u32, SenseBuffer: *[18]u8, Timeout: u32) callconv(.Inline) HRESULT {
        return self.vtable.SendCommandNoData(self, Cdb, CdbSize, SenseBuffer, Timeout);
    }
    pub fn SendCommandSendDataToDevice(self: *const IDiscRecorder2Ex, Cdb: [*:0]u8, CdbSize: u32, SenseBuffer: *[18]u8, Timeout: u32, Buffer: [*:0]u8, BufferSize: u32) callconv(.Inline) HRESULT {
        return self.vtable.SendCommandSendDataToDevice(self, Cdb, CdbSize, SenseBuffer, Timeout, Buffer, BufferSize);
    }
    pub fn SendCommandGetDataFromDevice(self: *const IDiscRecorder2Ex, Cdb: [*:0]u8, CdbSize: u32, SenseBuffer: *[18]u8, Timeout: u32, Buffer: [*:0]u8, BufferSize: u32, BufferFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.SendCommandGetDataFromDevice(self, Cdb, CdbSize, SenseBuffer, Timeout, Buffer, BufferSize, BufferFetched);
    }
    pub fn ReadDvdStructure(self: *const IDiscRecorder2Ex, format: u32, address: u32, layer: u32, agid: u32, data: [*]?*u8, count: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.ReadDvdStructure(self, format, address, layer, agid, data, count);
    }
    pub fn SendDvdStructure(self: *const IDiscRecorder2Ex, format: u32, data: [*:0]u8, count: u32) callconv(.Inline) HRESULT {
        return self.vtable.SendDvdStructure(self, format, data, count);
    }
    pub fn GetAdapterDescriptor(self: *const IDiscRecorder2Ex, data: [*]?*u8, byteSize: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetAdapterDescriptor(self, data, byteSize);
    }
    pub fn GetDeviceDescriptor(self: *const IDiscRecorder2Ex, data: [*]?*u8, byteSize: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetDeviceDescriptor(self, data, byteSize);
    }
    pub fn GetDiscInformation(self: *const IDiscRecorder2Ex, discInformation: [*]?*u8, byteSize: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetDiscInformation(self, discInformation, byteSize);
    }
    pub fn GetTrackInformation(self: *const IDiscRecorder2Ex, address: u32, addressType: IMAPI_READ_TRACK_ADDRESS_TYPE, trackInformation: [*]?*u8, byteSize: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetTrackInformation(self, address, addressType, trackInformation, byteSize);
    }
    pub fn GetFeaturePage(self: *const IDiscRecorder2Ex, requestedFeature: IMAPI_FEATURE_PAGE_TYPE, currentFeatureOnly: BOOLEAN, featureData: [*]?*u8, byteSize: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetFeaturePage(self, requestedFeature, currentFeatureOnly, featureData, byteSize);
    }
    pub fn GetModePage(self: *const IDiscRecorder2Ex, requestedModePage: IMAPI_MODE_PAGE_TYPE, requestType: IMAPI_MODE_PAGE_REQUEST_TYPE, modePageData: [*]?*u8, byteSize: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetModePage(self, requestedModePage, requestType, modePageData, byteSize);
    }
    pub fn SetModePage(self: *const IDiscRecorder2Ex, requestType: IMAPI_MODE_PAGE_REQUEST_TYPE, data: [*:0]u8, byteSize: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetModePage(self, requestType, data, byteSize);
    }
    pub fn GetSupportedFeaturePages(self: *const IDiscRecorder2Ex, currentFeatureOnly: BOOLEAN, featureData: [*]?*IMAPI_FEATURE_PAGE_TYPE, byteSize: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetSupportedFeaturePages(self, currentFeatureOnly, featureData, byteSize);
    }
    pub fn GetSupportedProfiles(self: *const IDiscRecorder2Ex, currentOnly: BOOLEAN, profileTypes: [*]?*IMAPI_PROFILE_TYPE, validProfiles: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetSupportedProfiles(self, currentOnly, profileTypes, validProfiles);
    }
    pub fn GetSupportedModePages(self: *const IDiscRecorder2Ex, requestType: IMAPI_MODE_PAGE_REQUEST_TYPE, modePageTypes: [*]?*IMAPI_MODE_PAGE_TYPE, validPages: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetSupportedModePages(self, requestType, modePageTypes, validPages);
    }
    pub fn GetByteAlignmentMask(self: *const IDiscRecorder2Ex, value: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetByteAlignmentMask(self, value);
    }
    pub fn GetMaximumNonPageAlignedTransferSize(self: *const IDiscRecorder2Ex, value: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetMaximumNonPageAlignedTransferSize(self, value);
    }
    pub fn GetMaximumPageAlignedTransferSize(self: *const IDiscRecorder2Ex, value: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetMaximumPageAlignedTransferSize(self, value);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDiscRecorder2_Value = Guid.initString("27354133-7f64-5b0f-8f00-5d77afbe261e");
pub const IID_IDiscRecorder2 = &IID_IDiscRecorder2_Value;
pub const IDiscRecorder2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        EjectMedia: *const fn(
            self: *const IDiscRecorder2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloseTray: *const fn(
            self: *const IDiscRecorder2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AcquireExclusiveAccess: *const fn(
            self: *const IDiscRecorder2,
            force: i16,
            __MIDL__IDiscRecorder20000: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseExclusiveAccess: *const fn(
            self: *const IDiscRecorder2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisableMcn: *const fn(
            self: *const IDiscRecorder2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableMcn: *const fn(
            self: *const IDiscRecorder2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDiscRecorder: *const fn(
            self: *const IDiscRecorder2,
            recorderUniqueId: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ActiveDiscRecorder: *const fn(
            self: *const IDiscRecorder2,
            value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_VendorId: *const fn(
            self: *const IDiscRecorder2,
            value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProductId: *const fn(
            self: *const IDiscRecorder2,
            value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProductRevision: *const fn(
            self: *const IDiscRecorder2,
            value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_VolumeName: *const fn(
            self: *const IDiscRecorder2,
            value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_VolumePathNames: *const fn(
            self: *const IDiscRecorder2,
            value: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DeviceCanLoadMedia: *const fn(
            self: *const IDiscRecorder2,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LegacyDeviceNumber: *const fn(
            self: *const IDiscRecorder2,
            legacyDeviceNumber: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SupportedFeaturePages: *const fn(
            self: *const IDiscRecorder2,
            value: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentFeaturePages: *const fn(
            self: *const IDiscRecorder2,
            value: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SupportedProfiles: *const fn(
            self: *const IDiscRecorder2,
            value: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentProfiles: *const fn(
            self: *const IDiscRecorder2,
            value: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SupportedModePages: *const fn(
            self: *const IDiscRecorder2,
            value: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExclusiveAccessOwner: *const fn(
            self: *const IDiscRecorder2,
            value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn EjectMedia(self: *const IDiscRecorder2) callconv(.Inline) HRESULT {
        return self.vtable.EjectMedia(self);
    }
    pub fn CloseTray(self: *const IDiscRecorder2) callconv(.Inline) HRESULT {
        return self.vtable.CloseTray(self);
    }
    pub fn AcquireExclusiveAccess(self: *const IDiscRecorder2, force: i16, __MIDL__IDiscRecorder20000: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.AcquireExclusiveAccess(self, force, __MIDL__IDiscRecorder20000);
    }
    pub fn ReleaseExclusiveAccess(self: *const IDiscRecorder2) callconv(.Inline) HRESULT {
        return self.vtable.ReleaseExclusiveAccess(self);
    }
    pub fn DisableMcn(self: *const IDiscRecorder2) callconv(.Inline) HRESULT {
        return self.vtable.DisableMcn(self);
    }
    pub fn EnableMcn(self: *const IDiscRecorder2) callconv(.Inline) HRESULT {
        return self.vtable.EnableMcn(self);
    }
    pub fn InitializeDiscRecorder(self: *const IDiscRecorder2, recorderUniqueId: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeDiscRecorder(self, recorderUniqueId);
    }
    pub fn get_ActiveDiscRecorder(self: *const IDiscRecorder2, value: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ActiveDiscRecorder(self, value);
    }
    pub fn get_VendorId(self: *const IDiscRecorder2, value: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_VendorId(self, value);
    }
    pub fn get_ProductId(self: *const IDiscRecorder2, value: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ProductId(self, value);
    }
    pub fn get_ProductRevision(self: *const IDiscRecorder2, value: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ProductRevision(self, value);
    }
    pub fn get_VolumeName(self: *const IDiscRecorder2, value: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_VolumeName(self, value);
    }
    pub fn get_VolumePathNames(self: *const IDiscRecorder2, value: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.get_VolumePathNames(self, value);
    }
    pub fn get_DeviceCanLoadMedia(self: *const IDiscRecorder2, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_DeviceCanLoadMedia(self, value);
    }
    pub fn get_LegacyDeviceNumber(self: *const IDiscRecorder2, legacyDeviceNumber: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_LegacyDeviceNumber(self, legacyDeviceNumber);
    }
    pub fn get_SupportedFeaturePages(self: *const IDiscRecorder2, value: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.get_SupportedFeaturePages(self, value);
    }
    pub fn get_CurrentFeaturePages(self: *const IDiscRecorder2, value: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.get_CurrentFeaturePages(self, value);
    }
    pub fn get_SupportedProfiles(self: *const IDiscRecorder2, value: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.get_SupportedProfiles(self, value);
    }
    pub fn get_CurrentProfiles(self: *const IDiscRecorder2, value: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.get_CurrentProfiles(self, value);
    }
    pub fn get_SupportedModePages(self: *const IDiscRecorder2, value: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.get_SupportedModePages(self, value);
    }
    pub fn get_ExclusiveAccessOwner(self: *const IDiscRecorder2, value: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ExclusiveAccessOwner(self, value);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWriteEngine2_Value = Guid.initString("27354135-7f64-5b0f-8f00-5d77afbe261e");
pub const IID_IWriteEngine2 = &IID_IWriteEngine2_Value;
pub const IWriteEngine2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        WriteSection: *const fn(
            self: *const IWriteEngine2,
            data: ?*IStream,
            startingBlockAddress: i32,
            numberOfBlocks: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelWrite: *const fn(
            self: *const IWriteEngine2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Recorder: *const fn(
            self: *const IWriteEngine2,
            value: ?*IDiscRecorder2Ex,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Recorder: *const fn(
            self: *const IWriteEngine2,
            value: ?*?*IDiscRecorder2Ex,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UseStreamingWrite12: *const fn(
            self: *const IWriteEngine2,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UseStreamingWrite12: *const fn(
            self: *const IWriteEngine2,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StartingSectorsPerSecond: *const fn(
            self: *const IWriteEngine2,
            value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartingSectorsPerSecond: *const fn(
            self: *const IWriteEngine2,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EndingSectorsPerSecond: *const fn(
            self: *const IWriteEngine2,
            value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EndingSectorsPerSecond: *const fn(
            self: *const IWriteEngine2,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BytesPerSector: *const fn(
            self: *const IWriteEngine2,
            value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BytesPerSector: *const fn(
            self: *const IWriteEngine2,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WriteInProgress: *const fn(
            self: *const IWriteEngine2,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn WriteSection(self: *const IWriteEngine2, data: ?*IStream, startingBlockAddress: i32, numberOfBlocks: i32) callconv(.Inline) HRESULT {
        return self.vtable.WriteSection(self, data, startingBlockAddress, numberOfBlocks);
    }
    pub fn CancelWrite(self: *const IWriteEngine2) callconv(.Inline) HRESULT {
        return self.vtable.CancelWrite(self);
    }
    pub fn put_Recorder(self: *const IWriteEngine2, value: ?*IDiscRecorder2Ex) callconv(.Inline) HRESULT {
        return self.vtable.put_Recorder(self, value);
    }
    pub fn get_Recorder(self: *const IWriteEngine2, value: ?*?*IDiscRecorder2Ex) callconv(.Inline) HRESULT {
        return self.vtable.get_Recorder(self, value);
    }
    pub fn put_UseStreamingWrite12(self: *const IWriteEngine2, value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_UseStreamingWrite12(self, value);
    }
    pub fn get_UseStreamingWrite12(self: *const IWriteEngine2, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_UseStreamingWrite12(self, value);
    }
    pub fn put_StartingSectorsPerSecond(self: *const IWriteEngine2, value: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_StartingSectorsPerSecond(self, value);
    }
    pub fn get_StartingSectorsPerSecond(self: *const IWriteEngine2, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_StartingSectorsPerSecond(self, value);
    }
    pub fn put_EndingSectorsPerSecond(self: *const IWriteEngine2, value: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_EndingSectorsPerSecond(self, value);
    }
    pub fn get_EndingSectorsPerSecond(self: *const IWriteEngine2, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_EndingSectorsPerSecond(self, value);
    }
    pub fn put_BytesPerSector(self: *const IWriteEngine2, value: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_BytesPerSector(self, value);
    }
    pub fn get_BytesPerSector(self: *const IWriteEngine2, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_BytesPerSector(self, value);
    }
    pub fn get_WriteInProgress(self: *const IWriteEngine2, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_WriteInProgress(self, value);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWriteEngine2EventArgs_Value = Guid.initString("27354136-7f64-5b0f-8f00-5d77afbe261e");
pub const IID_IWriteEngine2EventArgs = &IID_IWriteEngine2EventArgs_Value;
pub const IWriteEngine2EventArgs = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartLba: *const fn(
            self: *const IWriteEngine2EventArgs,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SectorCount: *const fn(
            self: *const IWriteEngine2EventArgs,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastReadLba: *const fn(
            self: *const IWriteEngine2EventArgs,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastWrittenLba: *const fn(
            self: *const IWriteEngine2EventArgs,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TotalSystemBuffer: *const fn(
            self: *const IWriteEngine2EventArgs,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UsedSystemBuffer: *const fn(
            self: *const IWriteEngine2EventArgs,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FreeSystemBuffer: *const fn(
            self: *const IWriteEngine2EventArgs,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_StartLba(self: *const IWriteEngine2EventArgs, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_StartLba(self, value);
    }
    pub fn get_SectorCount(self: *const IWriteEngine2EventArgs, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_SectorCount(self, value);
    }
    pub fn get_LastReadLba(self: *const IWriteEngine2EventArgs, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_LastReadLba(self, value);
    }
    pub fn get_LastWrittenLba(self: *const IWriteEngine2EventArgs, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_LastWrittenLba(self, value);
    }
    pub fn get_TotalSystemBuffer(self: *const IWriteEngine2EventArgs, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_TotalSystemBuffer(self, value);
    }
    pub fn get_UsedSystemBuffer(self: *const IWriteEngine2EventArgs, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_UsedSystemBuffer(self, value);
    }
    pub fn get_FreeSystemBuffer(self: *const IWriteEngine2EventArgs, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_FreeSystemBuffer(self, value);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_DWriteEngine2Events_Value = Guid.initString("27354137-7f64-5b0f-8f00-5d77afbe261e");
pub const IID_DWriteEngine2Events = &IID_DWriteEngine2Events_Value;
pub const DWriteEngine2Events = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Update: *const fn(
            self: *const DWriteEngine2Events,
            object: ?*IDispatch,
            progress: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Update(self: *const DWriteEngine2Events, object: ?*IDispatch, progress: ?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.Update(self, object, progress);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDiscFormat2_Value = Guid.initString("27354152-8f64-5b0f-8f00-5d77afbe261e");
pub const IID_IDiscFormat2 = &IID_IDiscFormat2_Value;
pub const IDiscFormat2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        IsRecorderSupported: *const fn(
            self: *const IDiscFormat2,
            recorder: ?*IDiscRecorder2,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsCurrentMediaSupported: *const fn(
            self: *const IDiscFormat2,
            recorder: ?*IDiscRecorder2,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MediaPhysicallyBlank: *const fn(
            self: *const IDiscFormat2,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MediaHeuristicallyBlank: *const fn(
            self: *const IDiscFormat2,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SupportedMediaTypes: *const fn(
            self: *const IDiscFormat2,
            value: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn IsRecorderSupported(self: *const IDiscFormat2, recorder: ?*IDiscRecorder2, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.IsRecorderSupported(self, recorder, value);
    }
    pub fn IsCurrentMediaSupported(self: *const IDiscFormat2, recorder: ?*IDiscRecorder2, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.IsCurrentMediaSupported(self, recorder, value);
    }
    pub fn get_MediaPhysicallyBlank(self: *const IDiscFormat2, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_MediaPhysicallyBlank(self, value);
    }
    pub fn get_MediaHeuristicallyBlank(self: *const IDiscFormat2, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_MediaHeuristicallyBlank(self, value);
    }
    pub fn get_SupportedMediaTypes(self: *const IDiscFormat2, value: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.get_SupportedMediaTypes(self, value);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDiscFormat2Erase_Value = Guid.initString("27354156-8f64-5b0f-8f00-5d77afbe261e");
pub const IID_IDiscFormat2Erase = &IID_IDiscFormat2Erase_Value;
pub const IDiscFormat2Erase = extern union {
    pub const VTable = extern struct {
        base: IDiscFormat2.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Recorder: *const fn(
            self: *const IDiscFormat2Erase,
            value: ?*IDiscRecorder2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Recorder: *const fn(
            self: *const IDiscFormat2Erase,
            value: ?*?*IDiscRecorder2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FullErase: *const fn(
            self: *const IDiscFormat2Erase,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FullErase: *const fn(
            self: *const IDiscFormat2Erase,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentPhysicalMediaType: *const fn(
            self: *const IDiscFormat2Erase,
            value: ?*IMAPI_MEDIA_PHYSICAL_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ClientName: *const fn(
            self: *const IDiscFormat2Erase,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClientName: *const fn(
            self: *const IDiscFormat2Erase,
            value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EraseMedia: *const fn(
            self: *const IDiscFormat2Erase,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDiscFormat2: IDiscFormat2,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_Recorder(self: *const IDiscFormat2Erase, value: ?*IDiscRecorder2) callconv(.Inline) HRESULT {
        return self.vtable.put_Recorder(self, value);
    }
    pub fn get_Recorder(self: *const IDiscFormat2Erase, value: ?*?*IDiscRecorder2) callconv(.Inline) HRESULT {
        return self.vtable.get_Recorder(self, value);
    }
    pub fn put_FullErase(self: *const IDiscFormat2Erase, value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_FullErase(self, value);
    }
    pub fn get_FullErase(self: *const IDiscFormat2Erase, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_FullErase(self, value);
    }
    pub fn get_CurrentPhysicalMediaType(self: *const IDiscFormat2Erase, value: ?*IMAPI_MEDIA_PHYSICAL_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.get_CurrentPhysicalMediaType(self, value);
    }
    pub fn put_ClientName(self: *const IDiscFormat2Erase, value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ClientName(self, value);
    }
    pub fn get_ClientName(self: *const IDiscFormat2Erase, value: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ClientName(self, value);
    }
    pub fn EraseMedia(self: *const IDiscFormat2Erase) callconv(.Inline) HRESULT {
        return self.vtable.EraseMedia(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_DDiscFormat2EraseEvents_Value = Guid.initString("2735413a-7f64-5b0f-8f00-5d77afbe261e");
pub const IID_DDiscFormat2EraseEvents = &IID_DDiscFormat2EraseEvents_Value;
pub const DDiscFormat2EraseEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Update: *const fn(
            self: *const DDiscFormat2EraseEvents,
            object: ?*IDispatch,
            elapsedSeconds: i32,
            estimatedTotalSeconds: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Update(self: *const DDiscFormat2EraseEvents, object: ?*IDispatch, elapsedSeconds: i32, estimatedTotalSeconds: i32) callconv(.Inline) HRESULT {
        return self.vtable.Update(self, object, elapsedSeconds, estimatedTotalSeconds);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDiscFormat2Data_Value = Guid.initString("27354153-9f64-5b0f-8f00-5d77afbe261e");
pub const IID_IDiscFormat2Data = &IID_IDiscFormat2Data_Value;
pub const IDiscFormat2Data = extern union {
    pub const VTable = extern struct {
        base: IDiscFormat2.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Recorder: *const fn(
            self: *const IDiscFormat2Data,
            value: ?*IDiscRecorder2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Recorder: *const fn(
            self: *const IDiscFormat2Data,
            value: ?*?*IDiscRecorder2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BufferUnderrunFreeDisabled: *const fn(
            self: *const IDiscFormat2Data,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BufferUnderrunFreeDisabled: *const fn(
            self: *const IDiscFormat2Data,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PostgapAlreadyInImage: *const fn(
            self: *const IDiscFormat2Data,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PostgapAlreadyInImage: *const fn(
            self: *const IDiscFormat2Data,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentMediaStatus: *const fn(
            self: *const IDiscFormat2Data,
            value: ?*IMAPI_FORMAT2_DATA_MEDIA_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WriteProtectStatus: *const fn(
            self: *const IDiscFormat2Data,
            value: ?*IMAPI_MEDIA_WRITE_PROTECT_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TotalSectorsOnMedia: *const fn(
            self: *const IDiscFormat2Data,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FreeSectorsOnMedia: *const fn(
            self: *const IDiscFormat2Data,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NextWritableAddress: *const fn(
            self: *const IDiscFormat2Data,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartAddressOfPreviousSession: *const fn(
            self: *const IDiscFormat2Data,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastWrittenAddressOfPreviousSession: *const fn(
            self: *const IDiscFormat2Data,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ForceMediaToBeClosed: *const fn(
            self: *const IDiscFormat2Data,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ForceMediaToBeClosed: *const fn(
            self: *const IDiscFormat2Data,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisableConsumerDvdCompatibilityMode: *const fn(
            self: *const IDiscFormat2Data,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisableConsumerDvdCompatibilityMode: *const fn(
            self: *const IDiscFormat2Data,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentPhysicalMediaType: *const fn(
            self: *const IDiscFormat2Data,
            value: ?*IMAPI_MEDIA_PHYSICAL_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ClientName: *const fn(
            self: *const IDiscFormat2Data,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClientName: *const fn(
            self: *const IDiscFormat2Data,
            value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestedWriteSpeed: *const fn(
            self: *const IDiscFormat2Data,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestedRotationTypeIsPureCAV: *const fn(
            self: *const IDiscFormat2Data,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentWriteSpeed: *const fn(
            self: *const IDiscFormat2Data,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentRotationTypeIsPureCAV: *const fn(
            self: *const IDiscFormat2Data,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SupportedWriteSpeeds: *const fn(
            self: *const IDiscFormat2Data,
            supportedSpeeds: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SupportedWriteSpeedDescriptors: *const fn(
            self: *const IDiscFormat2Data,
            supportedSpeedDescriptors: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ForceOverwrite: *const fn(
            self: *const IDiscFormat2Data,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ForceOverwrite: *const fn(
            self: *const IDiscFormat2Data,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MultisessionInterfaces: *const fn(
            self: *const IDiscFormat2Data,
            value: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Write: *const fn(
            self: *const IDiscFormat2Data,
            data: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelWrite: *const fn(
            self: *const IDiscFormat2Data,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWriteSpeed: *const fn(
            self: *const IDiscFormat2Data,
            RequestedSectorsPerSecond: i32,
            RotationTypeIsPureCAV: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDiscFormat2: IDiscFormat2,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_Recorder(self: *const IDiscFormat2Data, value: ?*IDiscRecorder2) callconv(.Inline) HRESULT {
        return self.vtable.put_Recorder(self, value);
    }
    pub fn get_Recorder(self: *const IDiscFormat2Data, value: ?*?*IDiscRecorder2) callconv(.Inline) HRESULT {
        return self.vtable.get_Recorder(self, value);
    }
    pub fn put_BufferUnderrunFreeDisabled(self: *const IDiscFormat2Data, value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_BufferUnderrunFreeDisabled(self, value);
    }
    pub fn get_BufferUnderrunFreeDisabled(self: *const IDiscFormat2Data, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_BufferUnderrunFreeDisabled(self, value);
    }
    pub fn put_PostgapAlreadyInImage(self: *const IDiscFormat2Data, value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_PostgapAlreadyInImage(self, value);
    }
    pub fn get_PostgapAlreadyInImage(self: *const IDiscFormat2Data, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_PostgapAlreadyInImage(self, value);
    }
    pub fn get_CurrentMediaStatus(self: *const IDiscFormat2Data, value: ?*IMAPI_FORMAT2_DATA_MEDIA_STATE) callconv(.Inline) HRESULT {
        return self.vtable.get_CurrentMediaStatus(self, value);
    }
    pub fn get_WriteProtectStatus(self: *const IDiscFormat2Data, value: ?*IMAPI_MEDIA_WRITE_PROTECT_STATE) callconv(.Inline) HRESULT {
        return self.vtable.get_WriteProtectStatus(self, value);
    }
    pub fn get_TotalSectorsOnMedia(self: *const IDiscFormat2Data, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_TotalSectorsOnMedia(self, value);
    }
    pub fn get_FreeSectorsOnMedia(self: *const IDiscFormat2Data, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_FreeSectorsOnMedia(self, value);
    }
    pub fn get_NextWritableAddress(self: *const IDiscFormat2Data, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_NextWritableAddress(self, value);
    }
    pub fn get_StartAddressOfPreviousSession(self: *const IDiscFormat2Data, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_StartAddressOfPreviousSession(self, value);
    }
    pub fn get_LastWrittenAddressOfPreviousSession(self: *const IDiscFormat2Data, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_LastWrittenAddressOfPreviousSession(self, value);
    }
    pub fn put_ForceMediaToBeClosed(self: *const IDiscFormat2Data, value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_ForceMediaToBeClosed(self, value);
    }
    pub fn get_ForceMediaToBeClosed(self: *const IDiscFormat2Data, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_ForceMediaToBeClosed(self, value);
    }
    pub fn put_DisableConsumerDvdCompatibilityMode(self: *const IDiscFormat2Data, value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_DisableConsumerDvdCompatibilityMode(self, value);
    }
    pub fn get_DisableConsumerDvdCompatibilityMode(self: *const IDiscFormat2Data, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_DisableConsumerDvdCompatibilityMode(self, value);
    }
    pub fn get_CurrentPhysicalMediaType(self: *const IDiscFormat2Data, value: ?*IMAPI_MEDIA_PHYSICAL_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.get_CurrentPhysicalMediaType(self, value);
    }
    pub fn put_ClientName(self: *const IDiscFormat2Data, value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ClientName(self, value);
    }
    pub fn get_ClientName(self: *const IDiscFormat2Data, value: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ClientName(self, value);
    }
    pub fn get_RequestedWriteSpeed(self: *const IDiscFormat2Data, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_RequestedWriteSpeed(self, value);
    }
    pub fn get_RequestedRotationTypeIsPureCAV(self: *const IDiscFormat2Data, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_RequestedRotationTypeIsPureCAV(self, value);
    }
    pub fn get_CurrentWriteSpeed(self: *const IDiscFormat2Data, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_CurrentWriteSpeed(self, value);
    }
    pub fn get_CurrentRotationTypeIsPureCAV(self: *const IDiscFormat2Data, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_CurrentRotationTypeIsPureCAV(self, value);
    }
    pub fn get_SupportedWriteSpeeds(self: *const IDiscFormat2Data, supportedSpeeds: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.get_SupportedWriteSpeeds(self, supportedSpeeds);
    }
    pub fn get_SupportedWriteSpeedDescriptors(self: *const IDiscFormat2Data, supportedSpeedDescriptors: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.get_SupportedWriteSpeedDescriptors(self, supportedSpeedDescriptors);
    }
    pub fn put_ForceOverwrite(self: *const IDiscFormat2Data, value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_ForceOverwrite(self, value);
    }
    pub fn get_ForceOverwrite(self: *const IDiscFormat2Data, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_ForceOverwrite(self, value);
    }
    pub fn get_MultisessionInterfaces(self: *const IDiscFormat2Data, value: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.get_MultisessionInterfaces(self, value);
    }
    pub fn Write(self: *const IDiscFormat2Data, data: ?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.Write(self, data);
    }
    pub fn CancelWrite(self: *const IDiscFormat2Data) callconv(.Inline) HRESULT {
        return self.vtable.CancelWrite(self);
    }
    pub fn SetWriteSpeed(self: *const IDiscFormat2Data, RequestedSectorsPerSecond: i32, RotationTypeIsPureCAV: i16) callconv(.Inline) HRESULT {
        return self.vtable.SetWriteSpeed(self, RequestedSectorsPerSecond, RotationTypeIsPureCAV);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_DDiscFormat2DataEvents_Value = Guid.initString("2735413c-7f64-5b0f-8f00-5d77afbe261e");
pub const IID_DDiscFormat2DataEvents = &IID_DDiscFormat2DataEvents_Value;
pub const DDiscFormat2DataEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Update: *const fn(
            self: *const DDiscFormat2DataEvents,
            object: ?*IDispatch,
            progress: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Update(self: *const DDiscFormat2DataEvents, object: ?*IDispatch, progress: ?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.Update(self, object, progress);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDiscFormat2DataEventArgs_Value = Guid.initString("2735413d-7f64-5b0f-8f00-5d77afbe261e");
pub const IID_IDiscFormat2DataEventArgs = &IID_IDiscFormat2DataEventArgs_Value;
pub const IDiscFormat2DataEventArgs = extern union {
    pub const VTable = extern struct {
        base: IWriteEngine2EventArgs.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ElapsedTime: *const fn(
            self: *const IDiscFormat2DataEventArgs,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemainingTime: *const fn(
            self: *const IDiscFormat2DataEventArgs,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TotalTime: *const fn(
            self: *const IDiscFormat2DataEventArgs,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentAction: *const fn(
            self: *const IDiscFormat2DataEventArgs,
            value: ?*IMAPI_FORMAT2_DATA_WRITE_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IWriteEngine2EventArgs: IWriteEngine2EventArgs,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ElapsedTime(self: *const IDiscFormat2DataEventArgs, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ElapsedTime(self, value);
    }
    pub fn get_RemainingTime(self: *const IDiscFormat2DataEventArgs, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_RemainingTime(self, value);
    }
    pub fn get_TotalTime(self: *const IDiscFormat2DataEventArgs, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_TotalTime(self, value);
    }
    pub fn get_CurrentAction(self: *const IDiscFormat2DataEventArgs, value: ?*IMAPI_FORMAT2_DATA_WRITE_ACTION) callconv(.Inline) HRESULT {
        return self.vtable.get_CurrentAction(self, value);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDiscFormat2TrackAtOnce_Value = Guid.initString("27354154-8f64-5b0f-8f00-5d77afbe261e");
pub const IID_IDiscFormat2TrackAtOnce = &IID_IDiscFormat2TrackAtOnce_Value;
pub const IDiscFormat2TrackAtOnce = extern union {
    pub const VTable = extern struct {
        base: IDiscFormat2.VTable,
        PrepareMedia: *const fn(
            self: *const IDiscFormat2TrackAtOnce,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAudioTrack: *const fn(
            self: *const IDiscFormat2TrackAtOnce,
            data: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelAddTrack: *const fn(
            self: *const IDiscFormat2TrackAtOnce,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseMedia: *const fn(
            self: *const IDiscFormat2TrackAtOnce,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWriteSpeed: *const fn(
            self: *const IDiscFormat2TrackAtOnce,
            RequestedSectorsPerSecond: i32,
            RotationTypeIsPureCAV: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Recorder: *const fn(
            self: *const IDiscFormat2TrackAtOnce,
            value: ?*IDiscRecorder2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Recorder: *const fn(
            self: *const IDiscFormat2TrackAtOnce,
            value: ?*?*IDiscRecorder2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BufferUnderrunFreeDisabled: *const fn(
            self: *const IDiscFormat2TrackAtOnce,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BufferUnderrunFreeDisabled: *const fn(
            self: *const IDiscFormat2TrackAtOnce,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NumberOfExistingTracks: *const fn(
            self: *const IDiscFormat2TrackAtOnce,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TotalSectorsOnMedia: *const fn(
            self: *const IDiscFormat2TrackAtOnce,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FreeSectorsOnMedia: *const fn(
            self: *const IDiscFormat2TrackAtOnce,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UsedSectorsOnMedia: *const fn(
            self: *const IDiscFormat2TrackAtOnce,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DoNotFinalizeMedia: *const fn(
            self: *const IDiscFormat2TrackAtOnce,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DoNotFinalizeMedia: *const fn(
            self: *const IDiscFormat2TrackAtOnce,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExpectedTableOfContents: *const fn(
            self: *const IDiscFormat2TrackAtOnce,
            value: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentPhysicalMediaType: *const fn(
            self: *const IDiscFormat2TrackAtOnce,
            value: ?*IMAPI_MEDIA_PHYSICAL_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ClientName: *const fn(
            self: *const IDiscFormat2TrackAtOnce,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClientName: *const fn(
            self: *const IDiscFormat2TrackAtOnce,
            value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestedWriteSpeed: *const fn(
            self: *const IDiscFormat2TrackAtOnce,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestedRotationTypeIsPureCAV: *const fn(
            self: *const IDiscFormat2TrackAtOnce,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentWriteSpeed: *const fn(
            self: *const IDiscFormat2TrackAtOnce,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentRotationTypeIsPureCAV: *const fn(
            self: *const IDiscFormat2TrackAtOnce,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SupportedWriteSpeeds: *const fn(
            self: *const IDiscFormat2TrackAtOnce,
            supportedSpeeds: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SupportedWriteSpeedDescriptors: *const fn(
            self: *const IDiscFormat2TrackAtOnce,
            supportedSpeedDescriptors: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDiscFormat2: IDiscFormat2,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn PrepareMedia(self: *const IDiscFormat2TrackAtOnce) callconv(.Inline) HRESULT {
        return self.vtable.PrepareMedia(self);
    }
    pub fn AddAudioTrack(self: *const IDiscFormat2TrackAtOnce, data: ?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.AddAudioTrack(self, data);
    }
    pub fn CancelAddTrack(self: *const IDiscFormat2TrackAtOnce) callconv(.Inline) HRESULT {
        return self.vtable.CancelAddTrack(self);
    }
    pub fn ReleaseMedia(self: *const IDiscFormat2TrackAtOnce) callconv(.Inline) HRESULT {
        return self.vtable.ReleaseMedia(self);
    }
    pub fn SetWriteSpeed(self: *const IDiscFormat2TrackAtOnce, RequestedSectorsPerSecond: i32, RotationTypeIsPureCAV: i16) callconv(.Inline) HRESULT {
        return self.vtable.SetWriteSpeed(self, RequestedSectorsPerSecond, RotationTypeIsPureCAV);
    }
    pub fn put_Recorder(self: *const IDiscFormat2TrackAtOnce, value: ?*IDiscRecorder2) callconv(.Inline) HRESULT {
        return self.vtable.put_Recorder(self, value);
    }
    pub fn get_Recorder(self: *const IDiscFormat2TrackAtOnce, value: ?*?*IDiscRecorder2) callconv(.Inline) HRESULT {
        return self.vtable.get_Recorder(self, value);
    }
    pub fn put_BufferUnderrunFreeDisabled(self: *const IDiscFormat2TrackAtOnce, value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_BufferUnderrunFreeDisabled(self, value);
    }
    pub fn get_BufferUnderrunFreeDisabled(self: *const IDiscFormat2TrackAtOnce, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_BufferUnderrunFreeDisabled(self, value);
    }
    pub fn get_NumberOfExistingTracks(self: *const IDiscFormat2TrackAtOnce, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_NumberOfExistingTracks(self, value);
    }
    pub fn get_TotalSectorsOnMedia(self: *const IDiscFormat2TrackAtOnce, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_TotalSectorsOnMedia(self, value);
    }
    pub fn get_FreeSectorsOnMedia(self: *const IDiscFormat2TrackAtOnce, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_FreeSectorsOnMedia(self, value);
    }
    pub fn get_UsedSectorsOnMedia(self: *const IDiscFormat2TrackAtOnce, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_UsedSectorsOnMedia(self, value);
    }
    pub fn put_DoNotFinalizeMedia(self: *const IDiscFormat2TrackAtOnce, value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_DoNotFinalizeMedia(self, value);
    }
    pub fn get_DoNotFinalizeMedia(self: *const IDiscFormat2TrackAtOnce, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_DoNotFinalizeMedia(self, value);
    }
    pub fn get_ExpectedTableOfContents(self: *const IDiscFormat2TrackAtOnce, value: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.get_ExpectedTableOfContents(self, value);
    }
    pub fn get_CurrentPhysicalMediaType(self: *const IDiscFormat2TrackAtOnce, value: ?*IMAPI_MEDIA_PHYSICAL_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.get_CurrentPhysicalMediaType(self, value);
    }
    pub fn put_ClientName(self: *const IDiscFormat2TrackAtOnce, value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ClientName(self, value);
    }
    pub fn get_ClientName(self: *const IDiscFormat2TrackAtOnce, value: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ClientName(self, value);
    }
    pub fn get_RequestedWriteSpeed(self: *const IDiscFormat2TrackAtOnce, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_RequestedWriteSpeed(self, value);
    }
    pub fn get_RequestedRotationTypeIsPureCAV(self: *const IDiscFormat2TrackAtOnce, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_RequestedRotationTypeIsPureCAV(self, value);
    }
    pub fn get_CurrentWriteSpeed(self: *const IDiscFormat2TrackAtOnce, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_CurrentWriteSpeed(self, value);
    }
    pub fn get_CurrentRotationTypeIsPureCAV(self: *const IDiscFormat2TrackAtOnce, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_CurrentRotationTypeIsPureCAV(self, value);
    }
    pub fn get_SupportedWriteSpeeds(self: *const IDiscFormat2TrackAtOnce, supportedSpeeds: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.get_SupportedWriteSpeeds(self, supportedSpeeds);
    }
    pub fn get_SupportedWriteSpeedDescriptors(self: *const IDiscFormat2TrackAtOnce, supportedSpeedDescriptors: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.get_SupportedWriteSpeedDescriptors(self, supportedSpeedDescriptors);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_DDiscFormat2TrackAtOnceEvents_Value = Guid.initString("2735413f-7f64-5b0f-8f00-5d77afbe261e");
pub const IID_DDiscFormat2TrackAtOnceEvents = &IID_DDiscFormat2TrackAtOnceEvents_Value;
pub const DDiscFormat2TrackAtOnceEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Update: *const fn(
            self: *const DDiscFormat2TrackAtOnceEvents,
            object: ?*IDispatch,
            progress: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Update(self: *const DDiscFormat2TrackAtOnceEvents, object: ?*IDispatch, progress: ?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.Update(self, object, progress);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDiscFormat2TrackAtOnceEventArgs_Value = Guid.initString("27354140-7f64-5b0f-8f00-5d77afbe261e");
pub const IID_IDiscFormat2TrackAtOnceEventArgs = &IID_IDiscFormat2TrackAtOnceEventArgs_Value;
pub const IDiscFormat2TrackAtOnceEventArgs = extern union {
    pub const VTable = extern struct {
        base: IWriteEngine2EventArgs.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentTrackNumber: *const fn(
            self: *const IDiscFormat2TrackAtOnceEventArgs,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentAction: *const fn(
            self: *const IDiscFormat2TrackAtOnceEventArgs,
            value: ?*IMAPI_FORMAT2_TAO_WRITE_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ElapsedTime: *const fn(
            self: *const IDiscFormat2TrackAtOnceEventArgs,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemainingTime: *const fn(
            self: *const IDiscFormat2TrackAtOnceEventArgs,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IWriteEngine2EventArgs: IWriteEngine2EventArgs,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_CurrentTrackNumber(self: *const IDiscFormat2TrackAtOnceEventArgs, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_CurrentTrackNumber(self, value);
    }
    pub fn get_CurrentAction(self: *const IDiscFormat2TrackAtOnceEventArgs, value: ?*IMAPI_FORMAT2_TAO_WRITE_ACTION) callconv(.Inline) HRESULT {
        return self.vtable.get_CurrentAction(self, value);
    }
    pub fn get_ElapsedTime(self: *const IDiscFormat2TrackAtOnceEventArgs, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ElapsedTime(self, value);
    }
    pub fn get_RemainingTime(self: *const IDiscFormat2TrackAtOnceEventArgs, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_RemainingTime(self, value);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDiscFormat2RawCD_Value = Guid.initString("27354155-8f64-5b0f-8f00-5d77afbe261e");
pub const IID_IDiscFormat2RawCD = &IID_IDiscFormat2RawCD_Value;
pub const IDiscFormat2RawCD = extern union {
    pub const VTable = extern struct {
        base: IDiscFormat2.VTable,
        PrepareMedia: *const fn(
            self: *const IDiscFormat2RawCD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteMedia: *const fn(
            self: *const IDiscFormat2RawCD,
            data: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteMedia2: *const fn(
            self: *const IDiscFormat2RawCD,
            data: ?*IStream,
            streamLeadInSectors: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelWrite: *const fn(
            self: *const IDiscFormat2RawCD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseMedia: *const fn(
            self: *const IDiscFormat2RawCD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWriteSpeed: *const fn(
            self: *const IDiscFormat2RawCD,
            RequestedSectorsPerSecond: i32,
            RotationTypeIsPureCAV: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Recorder: *const fn(
            self: *const IDiscFormat2RawCD,
            value: ?*IDiscRecorder2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Recorder: *const fn(
            self: *const IDiscFormat2RawCD,
            value: ?*?*IDiscRecorder2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BufferUnderrunFreeDisabled: *const fn(
            self: *const IDiscFormat2RawCD,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BufferUnderrunFreeDisabled: *const fn(
            self: *const IDiscFormat2RawCD,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartOfNextSession: *const fn(
            self: *const IDiscFormat2RawCD,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastPossibleStartOfLeadout: *const fn(
            self: *const IDiscFormat2RawCD,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentPhysicalMediaType: *const fn(
            self: *const IDiscFormat2RawCD,
            value: ?*IMAPI_MEDIA_PHYSICAL_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SupportedSectorTypes: *const fn(
            self: *const IDiscFormat2RawCD,
            value: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RequestedSectorType: *const fn(
            self: *const IDiscFormat2RawCD,
            value: IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestedSectorType: *const fn(
            self: *const IDiscFormat2RawCD,
            value: ?*IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ClientName: *const fn(
            self: *const IDiscFormat2RawCD,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClientName: *const fn(
            self: *const IDiscFormat2RawCD,
            value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestedWriteSpeed: *const fn(
            self: *const IDiscFormat2RawCD,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestedRotationTypeIsPureCAV: *const fn(
            self: *const IDiscFormat2RawCD,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentWriteSpeed: *const fn(
            self: *const IDiscFormat2RawCD,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentRotationTypeIsPureCAV: *const fn(
            self: *const IDiscFormat2RawCD,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SupportedWriteSpeeds: *const fn(
            self: *const IDiscFormat2RawCD,
            supportedSpeeds: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SupportedWriteSpeedDescriptors: *const fn(
            self: *const IDiscFormat2RawCD,
            supportedSpeedDescriptors: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDiscFormat2: IDiscFormat2,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn PrepareMedia(self: *const IDiscFormat2RawCD) callconv(.Inline) HRESULT {
        return self.vtable.PrepareMedia(self);
    }
    pub fn WriteMedia(self: *const IDiscFormat2RawCD, data: ?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.WriteMedia(self, data);
    }
    pub fn WriteMedia2(self: *const IDiscFormat2RawCD, data: ?*IStream, streamLeadInSectors: i32) callconv(.Inline) HRESULT {
        return self.vtable.WriteMedia2(self, data, streamLeadInSectors);
    }
    pub fn CancelWrite(self: *const IDiscFormat2RawCD) callconv(.Inline) HRESULT {
        return self.vtable.CancelWrite(self);
    }
    pub fn ReleaseMedia(self: *const IDiscFormat2RawCD) callconv(.Inline) HRESULT {
        return self.vtable.ReleaseMedia(self);
    }
    pub fn SetWriteSpeed(self: *const IDiscFormat2RawCD, RequestedSectorsPerSecond: i32, RotationTypeIsPureCAV: i16) callconv(.Inline) HRESULT {
        return self.vtable.SetWriteSpeed(self, RequestedSectorsPerSecond, RotationTypeIsPureCAV);
    }
    pub fn put_Recorder(self: *const IDiscFormat2RawCD, value: ?*IDiscRecorder2) callconv(.Inline) HRESULT {
        return self.vtable.put_Recorder(self, value);
    }
    pub fn get_Recorder(self: *const IDiscFormat2RawCD, value: ?*?*IDiscRecorder2) callconv(.Inline) HRESULT {
        return self.vtable.get_Recorder(self, value);
    }
    pub fn put_BufferUnderrunFreeDisabled(self: *const IDiscFormat2RawCD, value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_BufferUnderrunFreeDisabled(self, value);
    }
    pub fn get_BufferUnderrunFreeDisabled(self: *const IDiscFormat2RawCD, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_BufferUnderrunFreeDisabled(self, value);
    }
    pub fn get_StartOfNextSession(self: *const IDiscFormat2RawCD, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_StartOfNextSession(self, value);
    }
    pub fn get_LastPossibleStartOfLeadout(self: *const IDiscFormat2RawCD, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_LastPossibleStartOfLeadout(self, value);
    }
    pub fn get_CurrentPhysicalMediaType(self: *const IDiscFormat2RawCD, value: ?*IMAPI_MEDIA_PHYSICAL_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.get_CurrentPhysicalMediaType(self, value);
    }
    pub fn get_SupportedSectorTypes(self: *const IDiscFormat2RawCD, value: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.get_SupportedSectorTypes(self, value);
    }
    pub fn put_RequestedSectorType(self: *const IDiscFormat2RawCD, value: IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.put_RequestedSectorType(self, value);
    }
    pub fn get_RequestedSectorType(self: *const IDiscFormat2RawCD, value: ?*IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.get_RequestedSectorType(self, value);
    }
    pub fn put_ClientName(self: *const IDiscFormat2RawCD, value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ClientName(self, value);
    }
    pub fn get_ClientName(self: *const IDiscFormat2RawCD, value: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ClientName(self, value);
    }
    pub fn get_RequestedWriteSpeed(self: *const IDiscFormat2RawCD, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_RequestedWriteSpeed(self, value);
    }
    pub fn get_RequestedRotationTypeIsPureCAV(self: *const IDiscFormat2RawCD, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_RequestedRotationTypeIsPureCAV(self, value);
    }
    pub fn get_CurrentWriteSpeed(self: *const IDiscFormat2RawCD, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_CurrentWriteSpeed(self, value);
    }
    pub fn get_CurrentRotationTypeIsPureCAV(self: *const IDiscFormat2RawCD, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_CurrentRotationTypeIsPureCAV(self, value);
    }
    pub fn get_SupportedWriteSpeeds(self: *const IDiscFormat2RawCD, supportedSpeeds: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.get_SupportedWriteSpeeds(self, supportedSpeeds);
    }
    pub fn get_SupportedWriteSpeedDescriptors(self: *const IDiscFormat2RawCD, supportedSpeedDescriptors: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.get_SupportedWriteSpeedDescriptors(self, supportedSpeedDescriptors);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_DDiscFormat2RawCDEvents_Value = Guid.initString("27354142-7f64-5b0f-8f00-5d77afbe261e");
pub const IID_DDiscFormat2RawCDEvents = &IID_DDiscFormat2RawCDEvents_Value;
pub const DDiscFormat2RawCDEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Update: *const fn(
            self: *const DDiscFormat2RawCDEvents,
            object: ?*IDispatch,
            progress: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Update(self: *const DDiscFormat2RawCDEvents, object: ?*IDispatch, progress: ?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.Update(self, object, progress);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDiscFormat2RawCDEventArgs_Value = Guid.initString("27354143-7f64-5b0f-8f00-5d77afbe261e");
pub const IID_IDiscFormat2RawCDEventArgs = &IID_IDiscFormat2RawCDEventArgs_Value;
pub const IDiscFormat2RawCDEventArgs = extern union {
    pub const VTable = extern struct {
        base: IWriteEngine2EventArgs.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentAction: *const fn(
            self: *const IDiscFormat2RawCDEventArgs,
            value: ?*IMAPI_FORMAT2_RAW_CD_WRITE_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ElapsedTime: *const fn(
            self: *const IDiscFormat2RawCDEventArgs,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemainingTime: *const fn(
            self: *const IDiscFormat2RawCDEventArgs,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IWriteEngine2EventArgs: IWriteEngine2EventArgs,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_CurrentAction(self: *const IDiscFormat2RawCDEventArgs, value: ?*IMAPI_FORMAT2_RAW_CD_WRITE_ACTION) callconv(.Inline) HRESULT {
        return self.vtable.get_CurrentAction(self, value);
    }
    pub fn get_ElapsedTime(self: *const IDiscFormat2RawCDEventArgs, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ElapsedTime(self, value);
    }
    pub fn get_RemainingTime(self: *const IDiscFormat2RawCDEventArgs, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_RemainingTime(self, value);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IBurnVerification_Value = Guid.initString("d2ffd834-958b-426d-8470-2a13879c6a91");
pub const IID_IBurnVerification = &IID_IBurnVerification_Value;
pub const IBurnVerification = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BurnVerificationLevel: *const fn(
            self: *const IBurnVerification,
            value: IMAPI_BURN_VERIFICATION_LEVEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BurnVerificationLevel: *const fn(
            self: *const IBurnVerification,
            value: ?*IMAPI_BURN_VERIFICATION_LEVEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn put_BurnVerificationLevel(self: *const IBurnVerification, value: IMAPI_BURN_VERIFICATION_LEVEL) callconv(.Inline) HRESULT {
        return self.vtable.put_BurnVerificationLevel(self, value);
    }
    pub fn get_BurnVerificationLevel(self: *const IBurnVerification, value: ?*IMAPI_BURN_VERIFICATION_LEVEL) callconv(.Inline) HRESULT {
        return self.vtable.get_BurnVerificationLevel(self, value);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWriteSpeedDescriptor_Value = Guid.initString("27354144-7f64-5b0f-8f00-5d77afbe261e");
pub const IID_IWriteSpeedDescriptor = &IID_IWriteSpeedDescriptor_Value;
pub const IWriteSpeedDescriptor = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MediaType: *const fn(
            self: *const IWriteSpeedDescriptor,
            value: ?*IMAPI_MEDIA_PHYSICAL_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RotationTypeIsPureCAV: *const fn(
            self: *const IWriteSpeedDescriptor,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WriteSpeed: *const fn(
            self: *const IWriteSpeedDescriptor,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_MediaType(self: *const IWriteSpeedDescriptor, value: ?*IMAPI_MEDIA_PHYSICAL_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.get_MediaType(self, value);
    }
    pub fn get_RotationTypeIsPureCAV(self: *const IWriteSpeedDescriptor, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_RotationTypeIsPureCAV(self, value);
    }
    pub fn get_WriteSpeed(self: *const IWriteSpeedDescriptor, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_WriteSpeed(self, value);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IMultisession_Value = Guid.initString("27354150-7f64-5b0f-8f00-5d77afbe261e");
pub const IID_IMultisession = &IID_IMultisession_Value;
pub const IMultisession = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsSupportedOnCurrentMediaState: *const fn(
            self: *const IMultisession,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_InUse: *const fn(
            self: *const IMultisession,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InUse: *const fn(
            self: *const IMultisession,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ImportRecorder: *const fn(
            self: *const IMultisession,
            value: ?*?*IDiscRecorder2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_IsSupportedOnCurrentMediaState(self: *const IMultisession, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsSupportedOnCurrentMediaState(self, value);
    }
    pub fn put_InUse(self: *const IMultisession, value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_InUse(self, value);
    }
    pub fn get_InUse(self: *const IMultisession, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_InUse(self, value);
    }
    pub fn get_ImportRecorder(self: *const IMultisession, value: ?*?*IDiscRecorder2) callconv(.Inline) HRESULT {
        return self.vtable.get_ImportRecorder(self, value);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IMultisessionSequential_Value = Guid.initString("27354151-7f64-5b0f-8f00-5d77afbe261e");
pub const IID_IMultisessionSequential = &IID_IMultisessionSequential_Value;
pub const IMultisessionSequential = extern union {
    pub const VTable = extern struct {
        base: IMultisession.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsFirstDataSession: *const fn(
            self: *const IMultisessionSequential,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartAddressOfPreviousSession: *const fn(
            self: *const IMultisessionSequential,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastWrittenAddressOfPreviousSession: *const fn(
            self: *const IMultisessionSequential,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NextWritableAddress: *const fn(
            self: *const IMultisessionSequential,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FreeSectorsOnMedia: *const fn(
            self: *const IMultisessionSequential,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IMultisession: IMultisession,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_IsFirstDataSession(self: *const IMultisessionSequential, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsFirstDataSession(self, value);
    }
    pub fn get_StartAddressOfPreviousSession(self: *const IMultisessionSequential, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_StartAddressOfPreviousSession(self, value);
    }
    pub fn get_LastWrittenAddressOfPreviousSession(self: *const IMultisessionSequential, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_LastWrittenAddressOfPreviousSession(self, value);
    }
    pub fn get_NextWritableAddress(self: *const IMultisessionSequential, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_NextWritableAddress(self, value);
    }
    pub fn get_FreeSectorsOnMedia(self: *const IMultisessionSequential, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_FreeSectorsOnMedia(self, value);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMultisessionSequential2_Value = Guid.initString("b507ca22-2204-11dd-966a-001aa01bbc58");
pub const IID_IMultisessionSequential2 = &IID_IMultisessionSequential2_Value;
pub const IMultisessionSequential2 = extern union {
    pub const VTable = extern struct {
        base: IMultisessionSequential.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WriteUnitSize: *const fn(
            self: *const IMultisessionSequential2,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IMultisessionSequential: IMultisessionSequential,
    IMultisession: IMultisession,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_WriteUnitSize(self: *const IMultisessionSequential2, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_WriteUnitSize(self, value);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMultisessionRandomWrite_Value = Guid.initString("b507ca23-2204-11dd-966a-001aa01bbc58");
pub const IID_IMultisessionRandomWrite = &IID_IMultisessionRandomWrite_Value;
pub const IMultisessionRandomWrite = extern union {
    pub const VTable = extern struct {
        base: IMultisession.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WriteUnitSize: *const fn(
            self: *const IMultisessionRandomWrite,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastWrittenAddress: *const fn(
            self: *const IMultisessionRandomWrite,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TotalSectorsOnMedia: *const fn(
            self: *const IMultisessionRandomWrite,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IMultisession: IMultisession,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_WriteUnitSize(self: *const IMultisessionRandomWrite, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_WriteUnitSize(self, value);
    }
    pub fn get_LastWrittenAddress(self: *const IMultisessionRandomWrite, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_LastWrittenAddress(self, value);
    }
    pub fn get_TotalSectorsOnMedia(self: *const IMultisessionRandomWrite, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_TotalSectorsOnMedia(self, value);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IStreamPseudoRandomBased_Value = Guid.initString("27354145-7f64-5b0f-8f00-5d77afbe261e");
pub const IID_IStreamPseudoRandomBased = &IID_IStreamPseudoRandomBased_Value;
pub const IStreamPseudoRandomBased = extern union {
    pub const VTable = extern struct {
        base: IStream.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Seed: *const fn(
            self: *const IStreamPseudoRandomBased,
            value: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Seed: *const fn(
            self: *const IStreamPseudoRandomBased,
            value: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ExtendedSeed: *const fn(
            self: *const IStreamPseudoRandomBased,
            values: [*]u32,
            eCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ExtendedSeed: *const fn(
            self: *const IStreamPseudoRandomBased,
            values: [*]?*u32,
            eCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IStream: IStream,
    ISequentialStream: ISequentialStream,
    IUnknown: IUnknown,
    pub fn put_Seed(self: *const IStreamPseudoRandomBased, value: u32) callconv(.Inline) HRESULT {
        return self.vtable.put_Seed(self, value);
    }
    pub fn get_Seed(self: *const IStreamPseudoRandomBased, value: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_Seed(self, value);
    }
    pub fn put_ExtendedSeed(self: *const IStreamPseudoRandomBased, values: [*]u32, eCount: u32) callconv(.Inline) HRESULT {
        return self.vtable.put_ExtendedSeed(self, values, eCount);
    }
    pub fn get_ExtendedSeed(self: *const IStreamPseudoRandomBased, values: [*]?*u32, eCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_ExtendedSeed(self, values, eCount);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IStreamConcatenate_Value = Guid.initString("27354146-7f64-5b0f-8f00-5d77afbe261e");
pub const IID_IStreamConcatenate = &IID_IStreamConcatenate_Value;
pub const IStreamConcatenate = extern union {
    pub const VTable = extern struct {
        base: IStream.VTable,
        Initialize: *const fn(
            self: *const IStreamConcatenate,
            stream1: ?*IStream,
            stream2: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize2: *const fn(
            self: *const IStreamConcatenate,
            streams: [*]?*IStream,
            streamCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: *const fn(
            self: *const IStreamConcatenate,
            stream: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append2: *const fn(
            self: *const IStreamConcatenate,
            streams: [*]?*IStream,
            streamCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IStream: IStream,
    ISequentialStream: ISequentialStream,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IStreamConcatenate, stream1: ?*IStream, stream2: ?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, stream1, stream2);
    }
    pub fn Initialize2(self: *const IStreamConcatenate, streams: [*]?*IStream, streamCount: u32) callconv(.Inline) HRESULT {
        return self.vtable.Initialize2(self, streams, streamCount);
    }
    pub fn Append(self: *const IStreamConcatenate, stream: ?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.Append(self, stream);
    }
    pub fn Append2(self: *const IStreamConcatenate, streams: [*]?*IStream, streamCount: u32) callconv(.Inline) HRESULT {
        return self.vtable.Append2(self, streams, streamCount);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IStreamInterleave_Value = Guid.initString("27354147-7f64-5b0f-8f00-5d77afbe261e");
pub const IID_IStreamInterleave = &IID_IStreamInterleave_Value;
pub const IStreamInterleave = extern union {
    pub const VTable = extern struct {
        base: IStream.VTable,
        Initialize: *const fn(
            self: *const IStreamInterleave,
            streams: [*]?*IStream,
            interleaveSizes: [*]u32,
            streamCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IStream: IStream,
    ISequentialStream: ISequentialStream,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IStreamInterleave, streams: [*]?*IStream, interleaveSizes: [*]u32, streamCount: u32) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, streams, interleaveSizes, streamCount);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRawCDImageCreator_Value = Guid.initString("25983550-9d65-49ce-b335-40630d901227");
pub const IID_IRawCDImageCreator = &IID_IRawCDImageCreator_Value;
pub const IRawCDImageCreator = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        CreateResultImage: *const fn(
            self: *const IRawCDImageCreator,
            resultStream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddTrack: *const fn(
            self: *const IRawCDImageCreator,
            dataType: IMAPI_CD_SECTOR_TYPE,
            data: ?*IStream,
            trackIndex: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddSpecialPregap: *const fn(
            self: *const IRawCDImageCreator,
            data: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddSubcodeRWGenerator: *const fn(
            self: *const IRawCDImageCreator,
            subcode: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ResultingImageType: *const fn(
            self: *const IRawCDImageCreator,
            value: IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResultingImageType: *const fn(
            self: *const IRawCDImageCreator,
            value: ?*IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartOfLeadout: *const fn(
            self: *const IRawCDImageCreator,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StartOfLeadoutLimit: *const fn(
            self: *const IRawCDImageCreator,
            value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartOfLeadoutLimit: *const fn(
            self: *const IRawCDImageCreator,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisableGaplessAudio: *const fn(
            self: *const IRawCDImageCreator,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisableGaplessAudio: *const fn(
            self: *const IRawCDImageCreator,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MediaCatalogNumber: *const fn(
            self: *const IRawCDImageCreator,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MediaCatalogNumber: *const fn(
            self: *const IRawCDImageCreator,
            value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StartingTrackNumber: *const fn(
            self: *const IRawCDImageCreator,
            value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartingTrackNumber: *const fn(
            self: *const IRawCDImageCreator,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_TrackInfo: *const fn(
            self: *const IRawCDImageCreator,
            trackIndex: i32,
            value: ?*?*IRawCDImageTrackInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NumberOfExistingTracks: *const fn(
            self: *const IRawCDImageCreator,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastUsedUserSectorInImage: *const fn(
            self: *const IRawCDImageCreator,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExpectedTableOfContents: *const fn(
            self: *const IRawCDImageCreator,
            value: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn CreateResultImage(self: *const IRawCDImageCreator, resultStream: ?*?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.CreateResultImage(self, resultStream);
    }
    pub fn AddTrack(self: *const IRawCDImageCreator, dataType: IMAPI_CD_SECTOR_TYPE, data: ?*IStream, trackIndex: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.AddTrack(self, dataType, data, trackIndex);
    }
    pub fn AddSpecialPregap(self: *const IRawCDImageCreator, data: ?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.AddSpecialPregap(self, data);
    }
    pub fn AddSubcodeRWGenerator(self: *const IRawCDImageCreator, subcode: ?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.AddSubcodeRWGenerator(self, subcode);
    }
    pub fn put_ResultingImageType(self: *const IRawCDImageCreator, value: IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.put_ResultingImageType(self, value);
    }
    pub fn get_ResultingImageType(self: *const IRawCDImageCreator, value: ?*IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.get_ResultingImageType(self, value);
    }
    pub fn get_StartOfLeadout(self: *const IRawCDImageCreator, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_StartOfLeadout(self, value);
    }
    pub fn put_StartOfLeadoutLimit(self: *const IRawCDImageCreator, value: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_StartOfLeadoutLimit(self, value);
    }
    pub fn get_StartOfLeadoutLimit(self: *const IRawCDImageCreator, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_StartOfLeadoutLimit(self, value);
    }
    pub fn put_DisableGaplessAudio(self: *const IRawCDImageCreator, value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_DisableGaplessAudio(self, value);
    }
    pub fn get_DisableGaplessAudio(self: *const IRawCDImageCreator, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_DisableGaplessAudio(self, value);
    }
    pub fn put_MediaCatalogNumber(self: *const IRawCDImageCreator, value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_MediaCatalogNumber(self, value);
    }
    pub fn get_MediaCatalogNumber(self: *const IRawCDImageCreator, value: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_MediaCatalogNumber(self, value);
    }
    pub fn put_StartingTrackNumber(self: *const IRawCDImageCreator, value: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_StartingTrackNumber(self, value);
    }
    pub fn get_StartingTrackNumber(self: *const IRawCDImageCreator, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_StartingTrackNumber(self, value);
    }
    pub fn get_TrackInfo(self: *const IRawCDImageCreator, trackIndex: i32, value: ?*?*IRawCDImageTrackInfo) callconv(.Inline) HRESULT {
        return self.vtable.get_TrackInfo(self, trackIndex, value);
    }
    pub fn get_NumberOfExistingTracks(self: *const IRawCDImageCreator, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_NumberOfExistingTracks(self, value);
    }
    pub fn get_LastUsedUserSectorInImage(self: *const IRawCDImageCreator, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_LastUsedUserSectorInImage(self, value);
    }
    pub fn get_ExpectedTableOfContents(self: *const IRawCDImageCreator, value: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.get_ExpectedTableOfContents(self, value);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRawCDImageTrackInfo_Value = Guid.initString("25983551-9d65-49ce-b335-40630d901227");
pub const IID_IRawCDImageTrackInfo = &IID_IRawCDImageTrackInfo_Value;
pub const IRawCDImageTrackInfo = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartingLba: *const fn(
            self: *const IRawCDImageTrackInfo,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SectorCount: *const fn(
            self: *const IRawCDImageTrackInfo,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TrackNumber: *const fn(
            self: *const IRawCDImageTrackInfo,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SectorType: *const fn(
            self: *const IRawCDImageTrackInfo,
            value: ?*IMAPI_CD_SECTOR_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ISRC: *const fn(
            self: *const IRawCDImageTrackInfo,
            value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ISRC: *const fn(
            self: *const IRawCDImageTrackInfo,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DigitalAudioCopySetting: *const fn(
            self: *const IRawCDImageTrackInfo,
            value: ?*IMAPI_CD_TRACK_DIGITAL_COPY_SETTING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DigitalAudioCopySetting: *const fn(
            self: *const IRawCDImageTrackInfo,
            value: IMAPI_CD_TRACK_DIGITAL_COPY_SETTING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AudioHasPreemphasis: *const fn(
            self: *const IRawCDImageTrackInfo,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AudioHasPreemphasis: *const fn(
            self: *const IRawCDImageTrackInfo,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TrackIndexes: *const fn(
            self: *const IRawCDImageTrackInfo,
            value: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddTrackIndex: *const fn(
            self: *const IRawCDImageTrackInfo,
            lbaOffset: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearTrackIndex: *const fn(
            self: *const IRawCDImageTrackInfo,
            lbaOffset: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_StartingLba(self: *const IRawCDImageTrackInfo, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_StartingLba(self, value);
    }
    pub fn get_SectorCount(self: *const IRawCDImageTrackInfo, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_SectorCount(self, value);
    }
    pub fn get_TrackNumber(self: *const IRawCDImageTrackInfo, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_TrackNumber(self, value);
    }
    pub fn get_SectorType(self: *const IRawCDImageTrackInfo, value: ?*IMAPI_CD_SECTOR_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.get_SectorType(self, value);
    }
    pub fn get_ISRC(self: *const IRawCDImageTrackInfo, value: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ISRC(self, value);
    }
    pub fn put_ISRC(self: *const IRawCDImageTrackInfo, value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ISRC(self, value);
    }
    pub fn get_DigitalAudioCopySetting(self: *const IRawCDImageTrackInfo, value: ?*IMAPI_CD_TRACK_DIGITAL_COPY_SETTING) callconv(.Inline) HRESULT {
        return self.vtable.get_DigitalAudioCopySetting(self, value);
    }
    pub fn put_DigitalAudioCopySetting(self: *const IRawCDImageTrackInfo, value: IMAPI_CD_TRACK_DIGITAL_COPY_SETTING) callconv(.Inline) HRESULT {
        return self.vtable.put_DigitalAudioCopySetting(self, value);
    }
    pub fn get_AudioHasPreemphasis(self: *const IRawCDImageTrackInfo, value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_AudioHasPreemphasis(self, value);
    }
    pub fn put_AudioHasPreemphasis(self: *const IRawCDImageTrackInfo, value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_AudioHasPreemphasis(self, value);
    }
    pub fn get_TrackIndexes(self: *const IRawCDImageTrackInfo, value: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.get_TrackIndexes(self, value);
    }
    pub fn AddTrackIndex(self: *const IRawCDImageTrackInfo, lbaOffset: i32) callconv(.Inline) HRESULT {
        return self.vtable.AddTrackIndex(self, lbaOffset);
    }
    pub fn ClearTrackIndex(self: *const IRawCDImageTrackInfo, lbaOffset: i32) callconv(.Inline) HRESULT {
        return self.vtable.ClearTrackIndex(self, lbaOffset);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IBlockRange_Value = Guid.initString("b507ca25-2204-11dd-966a-001aa01bbc58");
pub const IID_IBlockRange = &IID_IBlockRange_Value;
pub const IBlockRange = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartLba: *const fn(
            self: *const IBlockRange,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EndLba: *const fn(
            self: *const IBlockRange,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_StartLba(self: *const IBlockRange, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_StartLba(self, value);
    }
    pub fn get_EndLba(self: *const IBlockRange, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_EndLba(self, value);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IBlockRangeList_Value = Guid.initString("b507ca26-2204-11dd-966a-001aa01bbc58");
pub const IID_IBlockRangeList = &IID_IBlockRangeList_Value;
pub const IBlockRangeList = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BlockRanges: *const fn(
            self: *const IBlockRangeList,
            value: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_BlockRanges(self: *const IBlockRangeList, value: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.get_BlockRanges(self, value);
    }
};

const CLSID_BootOptions_Value = Guid.initString("2c941fce-975b-59be-a960-9a2a262853a5");
pub const CLSID_BootOptions = &CLSID_BootOptions_Value;

const CLSID_FsiStream_Value = Guid.initString("2c941fcd-975b-59be-a960-9a2a262853a5");
pub const CLSID_FsiStream = &CLSID_FsiStream_Value;

const CLSID_FileSystemImageResult_Value = Guid.initString("2c941fcc-975b-59be-a960-9a2a262853a5");
pub const CLSID_FileSystemImageResult = &CLSID_FileSystemImageResult_Value;

const CLSID_ProgressItem_Value = Guid.initString("2c941fcb-975b-59be-a960-9a2a262853a5");
pub const CLSID_ProgressItem = &CLSID_ProgressItem_Value;

const CLSID_EnumProgressItems_Value = Guid.initString("2c941fca-975b-59be-a960-9a2a262853a5");
pub const CLSID_EnumProgressItems = &CLSID_EnumProgressItems_Value;

const CLSID_ProgressItems_Value = Guid.initString("2c941fc9-975b-59be-a960-9a2a262853a5");
pub const CLSID_ProgressItems = &CLSID_ProgressItems_Value;

const CLSID_FsiDirectoryItem_Value = Guid.initString("2c941fc8-975b-59be-a960-9a2a262853a5");
pub const CLSID_FsiDirectoryItem = &CLSID_FsiDirectoryItem_Value;

const CLSID_FsiFileItem_Value = Guid.initString("2c941fc7-975b-59be-a960-9a2a262853a5");
pub const CLSID_FsiFileItem = &CLSID_FsiFileItem_Value;

const CLSID_EnumFsiItems_Value = Guid.initString("2c941fc6-975b-59be-a960-9a2a262853a5");
pub const CLSID_EnumFsiItems = &CLSID_EnumFsiItems_Value;

const CLSID_FsiNamedStreams_Value = Guid.initString("c6b6f8ed-6d19-44b4-b539-b159b793a32d");
pub const CLSID_FsiNamedStreams = &CLSID_FsiNamedStreams_Value;

const CLSID_MsftFileSystemImage_Value = Guid.initString("2c941fc5-975b-59be-a960-9a2a262853a5");
pub const CLSID_MsftFileSystemImage = &CLSID_MsftFileSystemImage_Value;

const CLSID_MsftIsoImageManager_Value = Guid.initString("ceee3b62-8f56-4056-869b-ef16917e3efc");
pub const CLSID_MsftIsoImageManager = &CLSID_MsftIsoImageManager_Value;

const CLSID_BlockRange_Value = Guid.initString("b507ca27-2204-11dd-966a-001aa01bbc58");
pub const CLSID_BlockRange = &CLSID_BlockRange_Value;

const CLSID_BlockRangeList_Value = Guid.initString("b507ca28-2204-11dd-966a-001aa01bbc58");
pub const CLSID_BlockRangeList = &CLSID_BlockRangeList_Value;

pub const FsiItemType = enum(i32) {
    NotFound = 0,
    Directory = 1,
    File = 2,
};
pub const FsiItemNotFound = FsiItemType.NotFound;
pub const FsiItemDirectory = FsiItemType.Directory;
pub const FsiItemFile = FsiItemType.File;

pub const FsiFileSystems = enum(i32) {
    None = 0,
    ISO9660 = 1,
    Joliet = 2,
    UDF = 4,
    Unknown = 1073741824,
};
pub const FsiFileSystemNone = FsiFileSystems.None;
pub const FsiFileSystemISO9660 = FsiFileSystems.ISO9660;
pub const FsiFileSystemJoliet = FsiFileSystems.Joliet;
pub const FsiFileSystemUDF = FsiFileSystems.UDF;
pub const FsiFileSystemUnknown = FsiFileSystems.Unknown;

pub const EmulationType = enum(i32) {
    None = 0,
    @"12MFloppy" = 1,
    @"144MFloppy" = 2,
    @"288MFloppy" = 3,
    HardDisk = 4,
};
pub const EmulationNone = EmulationType.None;
pub const Emulation12MFloppy = EmulationType.@"12MFloppy";
pub const Emulation144MFloppy = EmulationType.@"144MFloppy";
pub const Emulation288MFloppy = EmulationType.@"288MFloppy";
pub const EmulationHardDisk = EmulationType.HardDisk;

pub const PlatformId = enum(i32) {
    X86 = 0,
    PowerPC = 1,
    Mac = 2,
    EFI = 239,
};
pub const PlatformX86 = PlatformId.X86;
pub const PlatformPowerPC = PlatformId.PowerPC;
pub const PlatformMac = PlatformId.Mac;
pub const PlatformEFI = PlatformId.EFI;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IBootOptions_Value = Guid.initString("2c941fd4-975b-59be-a960-9a2a262853a5");
pub const IID_IBootOptions = &IID_IBootOptions_Value;
pub const IBootOptions = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BootImage: *const fn(
            self: *const IBootOptions,
            pVal: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Manufacturer: *const fn(
            self: *const IBootOptions,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Manufacturer: *const fn(
            self: *const IBootOptions,
            newVal: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PlatformId: *const fn(
            self: *const IBootOptions,
            pVal: ?*PlatformId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PlatformId: *const fn(
            self: *const IBootOptions,
            newVal: PlatformId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Emulation: *const fn(
            self: *const IBootOptions,
            pVal: ?*EmulationType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Emulation: *const fn(
            self: *const IBootOptions,
            newVal: EmulationType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ImageSize: *const fn(
            self: *const IBootOptions,
            pVal: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AssignBootImage: *const fn(
            self: *const IBootOptions,
            newVal: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_BootImage(self: *const IBootOptions, pVal: ?*?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.get_BootImage(self, pVal);
    }
    pub fn get_Manufacturer(self: *const IBootOptions, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Manufacturer(self, pVal);
    }
    pub fn put_Manufacturer(self: *const IBootOptions, newVal: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Manufacturer(self, newVal);
    }
    pub fn get_PlatformId(self: *const IBootOptions, pVal: ?*PlatformId) callconv(.Inline) HRESULT {
        return self.vtable.get_PlatformId(self, pVal);
    }
    pub fn put_PlatformId(self: *const IBootOptions, newVal: PlatformId) callconv(.Inline) HRESULT {
        return self.vtable.put_PlatformId(self, newVal);
    }
    pub fn get_Emulation(self: *const IBootOptions, pVal: ?*EmulationType) callconv(.Inline) HRESULT {
        return self.vtable.get_Emulation(self, pVal);
    }
    pub fn put_Emulation(self: *const IBootOptions, newVal: EmulationType) callconv(.Inline) HRESULT {
        return self.vtable.put_Emulation(self, newVal);
    }
    pub fn get_ImageSize(self: *const IBootOptions, pVal: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_ImageSize(self, pVal);
    }
    pub fn AssignBootImage(self: *const IBootOptions, newVal: ?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.AssignBootImage(self, newVal);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IProgressItem_Value = Guid.initString("2c941fd5-975b-59be-a960-9a2a262853a5");
pub const IID_IProgressItem = &IID_IProgressItem_Value;
pub const IProgressItem = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn(
            self: *const IProgressItem,
            desc: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FirstBlock: *const fn(
            self: *const IProgressItem,
            block: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastBlock: *const fn(
            self: *const IProgressItem,
            block: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BlockCount: *const fn(
            self: *const IProgressItem,
            blocks: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Description(self: *const IProgressItem, desc: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Description(self, desc);
    }
    pub fn get_FirstBlock(self: *const IProgressItem, block: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_FirstBlock(self, block);
    }
    pub fn get_LastBlock(self: *const IProgressItem, block: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_LastBlock(self, block);
    }
    pub fn get_BlockCount(self: *const IProgressItem, blocks: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_BlockCount(self, blocks);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumProgressItems_Value = Guid.initString("2c941fd6-975b-59be-a960-9a2a262853a5");
pub const IID_IEnumProgressItems = &IID_IEnumProgressItems_Value;
pub const IEnumProgressItems = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumProgressItems,
            celt: u32,
            rgelt: [*]?*IProgressItem,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumProgressItems,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumProgressItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumProgressItems,
            ppEnum: ?*?*IEnumProgressItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumProgressItems, celt: u32, rgelt: [*]?*IProgressItem, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, celt, rgelt, pceltFetched);
    }
    pub fn Skip(self: *const IEnumProgressItems, celt: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumProgressItems) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumProgressItems, ppEnum: ?*?*IEnumProgressItems) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppEnum);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IProgressItems_Value = Guid.initString("2c941fd7-975b-59be-a960-9a2a262853a5");
pub const IID_IProgressItems = &IID_IProgressItems_Value;
pub const IProgressItems = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const IProgressItems,
            NewEnum: ?*?*IEnumVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: *const fn(
            self: *const IProgressItems,
            Index: i32,
            item: ?*?*IProgressItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IProgressItems,
            Count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProgressItemFromBlock: *const fn(
            self: *const IProgressItems,
            block: u32,
            item: ?*?*IProgressItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProgressItemFromDescription: *const fn(
            self: *const IProgressItems,
            description: ?BSTR,
            item: ?*?*IProgressItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnumProgressItems: *const fn(
            self: *const IProgressItems,
            NewEnum: ?*?*IEnumProgressItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get__NewEnum(self: *const IProgressItems, NewEnum: ?*?*IEnumVARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, NewEnum);
    }
    pub fn get_Item(self: *const IProgressItems, Index: i32, item: ?*?*IProgressItem) callconv(.Inline) HRESULT {
        return self.vtable.get_Item(self, Index, item);
    }
    pub fn get_Count(self: *const IProgressItems, Count: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, Count);
    }
    pub fn ProgressItemFromBlock(self: *const IProgressItems, block: u32, item: ?*?*IProgressItem) callconv(.Inline) HRESULT {
        return self.vtable.ProgressItemFromBlock(self, block, item);
    }
    pub fn ProgressItemFromDescription(self: *const IProgressItems, description: ?BSTR, item: ?*?*IProgressItem) callconv(.Inline) HRESULT {
        return self.vtable.ProgressItemFromDescription(self, description, item);
    }
    pub fn get_EnumProgressItems(self: *const IProgressItems, NewEnum: ?*?*IEnumProgressItems) callconv(.Inline) HRESULT {
        return self.vtable.get_EnumProgressItems(self, NewEnum);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFileSystemImageResult_Value = Guid.initString("2c941fd8-975b-59be-a960-9a2a262853a5");
pub const IID_IFileSystemImageResult = &IID_IFileSystemImageResult_Value;
pub const IFileSystemImageResult = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ImageStream: *const fn(
            self: *const IFileSystemImageResult,
            pVal: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProgressItems: *const fn(
            self: *const IFileSystemImageResult,
            pVal: ?*?*IProgressItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TotalBlocks: *const fn(
            self: *const IFileSystemImageResult,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BlockSize: *const fn(
            self: *const IFileSystemImageResult,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DiscId: *const fn(
            self: *const IFileSystemImageResult,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ImageStream(self: *const IFileSystemImageResult, pVal: ?*?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.get_ImageStream(self, pVal);
    }
    pub fn get_ProgressItems(self: *const IFileSystemImageResult, pVal: ?*?*IProgressItems) callconv(.Inline) HRESULT {
        return self.vtable.get_ProgressItems(self, pVal);
    }
    pub fn get_TotalBlocks(self: *const IFileSystemImageResult, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_TotalBlocks(self, pVal);
    }
    pub fn get_BlockSize(self: *const IFileSystemImageResult, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_BlockSize(self, pVal);
    }
    pub fn get_DiscId(self: *const IFileSystemImageResult, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_DiscId(self, pVal);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IFileSystemImageResult2_Value = Guid.initString("b507ca29-2204-11dd-966a-001aa01bbc58");
pub const IID_IFileSystemImageResult2 = &IID_IFileSystemImageResult2_Value;
pub const IFileSystemImageResult2 = extern union {
    pub const VTable = extern struct {
        base: IFileSystemImageResult.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ModifiedBlocks: *const fn(
            self: *const IFileSystemImageResult2,
            pVal: ?*?*IBlockRangeList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IFileSystemImageResult: IFileSystemImageResult,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ModifiedBlocks(self: *const IFileSystemImageResult2, pVal: ?*?*IBlockRangeList) callconv(.Inline) HRESULT {
        return self.vtable.get_ModifiedBlocks(self, pVal);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFsiItem_Value = Guid.initString("2c941fd9-975b-59be-a960-9a2a262853a5");
pub const IID_IFsiItem = &IID_IFsiItem_Value;
pub const IFsiItem = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn(
            self: *const IFsiItem,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FullPath: *const fn(
            self: *const IFsiItem,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CreationTime: *const fn(
            self: *const IFsiItem,
            pVal: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CreationTime: *const fn(
            self: *const IFsiItem,
            newVal: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastAccessedTime: *const fn(
            self: *const IFsiItem,
            pVal: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LastAccessedTime: *const fn(
            self: *const IFsiItem,
            newVal: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastModifiedTime: *const fn(
            self: *const IFsiItem,
            pVal: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LastModifiedTime: *const fn(
            self: *const IFsiItem,
            newVal: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsHidden: *const fn(
            self: *const IFsiItem,
            pVal: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IsHidden: *const fn(
            self: *const IFsiItem,
            newVal: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FileSystemName: *const fn(
            self: *const IFsiItem,
            fileSystem: FsiFileSystems,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FileSystemPath: *const fn(
            self: *const IFsiItem,
            fileSystem: FsiFileSystems,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Name(self: *const IFsiItem, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Name(self, pVal);
    }
    pub fn get_FullPath(self: *const IFsiItem, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_FullPath(self, pVal);
    }
    pub fn get_CreationTime(self: *const IFsiItem, pVal: ?*f64) callconv(.Inline) HRESULT {
        return self.vtable.get_CreationTime(self, pVal);
    }
    pub fn put_CreationTime(self: *const IFsiItem, newVal: f64) callconv(.Inline) HRESULT {
        return self.vtable.put_CreationTime(self, newVal);
    }
    pub fn get_LastAccessedTime(self: *const IFsiItem, pVal: ?*f64) callconv(.Inline) HRESULT {
        return self.vtable.get_LastAccessedTime(self, pVal);
    }
    pub fn put_LastAccessedTime(self: *const IFsiItem, newVal: f64) callconv(.Inline) HRESULT {
        return self.vtable.put_LastAccessedTime(self, newVal);
    }
    pub fn get_LastModifiedTime(self: *const IFsiItem, pVal: ?*f64) callconv(.Inline) HRESULT {
        return self.vtable.get_LastModifiedTime(self, pVal);
    }
    pub fn put_LastModifiedTime(self: *const IFsiItem, newVal: f64) callconv(.Inline) HRESULT {
        return self.vtable.put_LastModifiedTime(self, newVal);
    }
    pub fn get_IsHidden(self: *const IFsiItem, pVal: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsHidden(self, pVal);
    }
    pub fn put_IsHidden(self: *const IFsiItem, newVal: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_IsHidden(self, newVal);
    }
    pub fn FileSystemName(self: *const IFsiItem, fileSystem: FsiFileSystems, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.FileSystemName(self, fileSystem, pVal);
    }
    pub fn FileSystemPath(self: *const IFsiItem, fileSystem: FsiFileSystems, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.FileSystemPath(self, fileSystem, pVal);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumFsiItems_Value = Guid.initString("2c941fda-975b-59be-a960-9a2a262853a5");
pub const IID_IEnumFsiItems = &IID_IEnumFsiItems_Value;
pub const IEnumFsiItems = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumFsiItems,
            celt: u32,
            rgelt: [*]?*IFsiItem,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumFsiItems,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumFsiItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumFsiItems,
            ppEnum: ?*?*IEnumFsiItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumFsiItems, celt: u32, rgelt: [*]?*IFsiItem, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, celt, rgelt, pceltFetched);
    }
    pub fn Skip(self: *const IEnumFsiItems, celt: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumFsiItems) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumFsiItems, ppEnum: ?*?*IEnumFsiItems) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppEnum);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFsiFileItem_Value = Guid.initString("2c941fdb-975b-59be-a960-9a2a262853a5");
pub const IID_IFsiFileItem = &IID_IFsiFileItem_Value;
pub const IFsiFileItem = extern union {
    pub const VTable = extern struct {
        base: IFsiItem.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataSize: *const fn(
            self: *const IFsiFileItem,
            pVal: ?*i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataSize32BitLow: *const fn(
            self: *const IFsiFileItem,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataSize32BitHigh: *const fn(
            self: *const IFsiFileItem,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Data: *const fn(
            self: *const IFsiFileItem,
            pVal: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Data: *const fn(
            self: *const IFsiFileItem,
            newVal: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IFsiItem: IFsiItem,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_DataSize(self: *const IFsiFileItem, pVal: ?*i64) callconv(.Inline) HRESULT {
        return self.vtable.get_DataSize(self, pVal);
    }
    pub fn get_DataSize32BitLow(self: *const IFsiFileItem, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_DataSize32BitLow(self, pVal);
    }
    pub fn get_DataSize32BitHigh(self: *const IFsiFileItem, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_DataSize32BitHigh(self, pVal);
    }
    pub fn get_Data(self: *const IFsiFileItem, pVal: ?*?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.get_Data(self, pVal);
    }
    pub fn put_Data(self: *const IFsiFileItem, newVal: ?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.put_Data(self, newVal);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFsiFileItem2_Value = Guid.initString("199d0c19-11e1-40eb-8ec2-c8c822a07792");
pub const IID_IFsiFileItem2 = &IID_IFsiFileItem2_Value;
pub const IFsiFileItem2 = extern union {
    pub const VTable = extern struct {
        base: IFsiFileItem.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FsiNamedStreams: *const fn(
            self: *const IFsiFileItem2,
            streams: ?*?*IFsiNamedStreams,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsNamedStream: *const fn(
            self: *const IFsiFileItem2,
            pVal: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddStream: *const fn(
            self: *const IFsiFileItem2,
            name: ?BSTR,
            streamData: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveStream: *const fn(
            self: *const IFsiFileItem2,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsRealTime: *const fn(
            self: *const IFsiFileItem2,
            pVal: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IsRealTime: *const fn(
            self: *const IFsiFileItem2,
            newVal: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IFsiFileItem: IFsiFileItem,
    IFsiItem: IFsiItem,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_FsiNamedStreams(self: *const IFsiFileItem2, streams: ?*?*IFsiNamedStreams) callconv(.Inline) HRESULT {
        return self.vtable.get_FsiNamedStreams(self, streams);
    }
    pub fn get_IsNamedStream(self: *const IFsiFileItem2, pVal: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsNamedStream(self, pVal);
    }
    pub fn AddStream(self: *const IFsiFileItem2, name: ?BSTR, streamData: ?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.AddStream(self, name, streamData);
    }
    pub fn RemoveStream(self: *const IFsiFileItem2, name: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.RemoveStream(self, name);
    }
    pub fn get_IsRealTime(self: *const IFsiFileItem2, pVal: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsRealTime(self, pVal);
    }
    pub fn put_IsRealTime(self: *const IFsiFileItem2, newVal: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_IsRealTime(self, newVal);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFsiNamedStreams_Value = Guid.initString("ed79ba56-5294-4250-8d46-f9aecee23459");
pub const IID_IFsiNamedStreams = &IID_IFsiNamedStreams_Value;
pub const IFsiNamedStreams = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const IFsiNamedStreams,
            NewEnum: ?*?*IEnumVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: *const fn(
            self: *const IFsiNamedStreams,
            index: i32,
            item: ?*?*IFsiFileItem2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IFsiNamedStreams,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnumNamedStreams: *const fn(
            self: *const IFsiNamedStreams,
            NewEnum: ?*?*IEnumFsiItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get__NewEnum(self: *const IFsiNamedStreams, NewEnum: ?*?*IEnumVARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, NewEnum);
    }
    pub fn get_Item(self: *const IFsiNamedStreams, index: i32, item: ?*?*IFsiFileItem2) callconv(.Inline) HRESULT {
        return self.vtable.get_Item(self, index, item);
    }
    pub fn get_Count(self: *const IFsiNamedStreams, count: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, count);
    }
    pub fn get_EnumNamedStreams(self: *const IFsiNamedStreams, NewEnum: ?*?*IEnumFsiItems) callconv(.Inline) HRESULT {
        return self.vtable.get_EnumNamedStreams(self, NewEnum);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFsiDirectoryItem_Value = Guid.initString("2c941fdc-975b-59be-a960-9a2a262853a5");
pub const IID_IFsiDirectoryItem = &IID_IFsiDirectoryItem_Value;
pub const IFsiDirectoryItem = extern union {
    pub const VTable = extern struct {
        base: IFsiItem.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const IFsiDirectoryItem,
            NewEnum: ?*?*IEnumVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: *const fn(
            self: *const IFsiDirectoryItem,
            path: ?BSTR,
            item: ?*?*IFsiItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IFsiDirectoryItem,
            Count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnumFsiItems: *const fn(
            self: *const IFsiDirectoryItem,
            NewEnum: ?*?*IEnumFsiItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDirectory: *const fn(
            self: *const IFsiDirectoryItem,
            path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFile: *const fn(
            self: *const IFsiDirectoryItem,
            path: ?BSTR,
            fileData: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddTree: *const fn(
            self: *const IFsiDirectoryItem,
            sourceDirectory: ?BSTR,
            includeBaseDirectory: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const IFsiDirectoryItem,
            item: ?*IFsiItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const IFsiDirectoryItem,
            path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveTree: *const fn(
            self: *const IFsiDirectoryItem,
            path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IFsiItem: IFsiItem,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get__NewEnum(self: *const IFsiDirectoryItem, NewEnum: ?*?*IEnumVARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, NewEnum);
    }
    pub fn get_Item(self: *const IFsiDirectoryItem, path: ?BSTR, item: ?*?*IFsiItem) callconv(.Inline) HRESULT {
        return self.vtable.get_Item(self, path, item);
    }
    pub fn get_Count(self: *const IFsiDirectoryItem, Count: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, Count);
    }
    pub fn get_EnumFsiItems(self: *const IFsiDirectoryItem, NewEnum: ?*?*IEnumFsiItems) callconv(.Inline) HRESULT {
        return self.vtable.get_EnumFsiItems(self, NewEnum);
    }
    pub fn AddDirectory(self: *const IFsiDirectoryItem, path: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.AddDirectory(self, path);
    }
    pub fn AddFile(self: *const IFsiDirectoryItem, path: ?BSTR, fileData: ?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.AddFile(self, path, fileData);
    }
    pub fn AddTree(self: *const IFsiDirectoryItem, sourceDirectory: ?BSTR, includeBaseDirectory: i16) callconv(.Inline) HRESULT {
        return self.vtable.AddTree(self, sourceDirectory, includeBaseDirectory);
    }
    pub fn Add(self: *const IFsiDirectoryItem, item: ?*IFsiItem) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, item);
    }
    pub fn Remove(self: *const IFsiDirectoryItem, path: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, path);
    }
    pub fn RemoveTree(self: *const IFsiDirectoryItem, path: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.RemoveTree(self, path);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFsiDirectoryItem2_Value = Guid.initString("f7fb4b9b-6d96-4d7b-9115-201b144811ef");
pub const IID_IFsiDirectoryItem2 = &IID_IFsiDirectoryItem2_Value;
pub const IFsiDirectoryItem2 = extern union {
    pub const VTable = extern struct {
        base: IFsiDirectoryItem.VTable,
        AddTreeWithNamedStreams: *const fn(
            self: *const IFsiDirectoryItem2,
            sourceDirectory: ?BSTR,
            includeBaseDirectory: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IFsiDirectoryItem: IFsiDirectoryItem,
    IFsiItem: IFsiItem,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn AddTreeWithNamedStreams(self: *const IFsiDirectoryItem2, sourceDirectory: ?BSTR, includeBaseDirectory: i16) callconv(.Inline) HRESULT {
        return self.vtable.AddTreeWithNamedStreams(self, sourceDirectory, includeBaseDirectory);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFileSystemImage_Value = Guid.initString("2c941fe1-975b-59be-a960-9a2a262853a5");
pub const IID_IFileSystemImage = &IID_IFileSystemImage_Value;
pub const IFileSystemImage = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Root: *const fn(
            self: *const IFileSystemImage,
            pVal: ?*?*IFsiDirectoryItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SessionStartBlock: *const fn(
            self: *const IFileSystemImage,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SessionStartBlock: *const fn(
            self: *const IFileSystemImage,
            newVal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FreeMediaBlocks: *const fn(
            self: *const IFileSystemImage,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FreeMediaBlocks: *const fn(
            self: *const IFileSystemImage,
            newVal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaxMediaBlocksFromDevice: *const fn(
            self: *const IFileSystemImage,
            discRecorder: ?*IDiscRecorder2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UsedBlocks: *const fn(
            self: *const IFileSystemImage,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_VolumeName: *const fn(
            self: *const IFileSystemImage,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_VolumeName: *const fn(
            self: *const IFileSystemImage,
            newVal: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ImportedVolumeName: *const fn(
            self: *const IFileSystemImage,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BootImageOptions: *const fn(
            self: *const IFileSystemImage,
            pVal: ?*?*IBootOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BootImageOptions: *const fn(
            self: *const IFileSystemImage,
            newVal: ?*IBootOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FileCount: *const fn(
            self: *const IFileSystemImage,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DirectoryCount: *const fn(
            self: *const IFileSystemImage,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WorkingDirectory: *const fn(
            self: *const IFileSystemImage,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_WorkingDirectory: *const fn(
            self: *const IFileSystemImage,
            newVal: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ChangePoint: *const fn(
            self: *const IFileSystemImage,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StrictFileSystemCompliance: *const fn(
            self: *const IFileSystemImage,
            pVal: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StrictFileSystemCompliance: *const fn(
            self: *const IFileSystemImage,
            newVal: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UseRestrictedCharacterSet: *const fn(
            self: *const IFileSystemImage,
            pVal: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UseRestrictedCharacterSet: *const fn(
            self: *const IFileSystemImage,
            newVal: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FileSystemsToCreate: *const fn(
            self: *const IFileSystemImage,
            pVal: ?*FsiFileSystems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FileSystemsToCreate: *const fn(
            self: *const IFileSystemImage,
            newVal: FsiFileSystems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FileSystemsSupported: *const fn(
            self: *const IFileSystemImage,
            pVal: ?*FsiFileSystems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UDFRevision: *const fn(
            self: *const IFileSystemImage,
            newVal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UDFRevision: *const fn(
            self: *const IFileSystemImage,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UDFRevisionsSupported: *const fn(
            self: *const IFileSystemImage,
            pVal: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ChooseImageDefaults: *const fn(
            self: *const IFileSystemImage,
            discRecorder: ?*IDiscRecorder2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ChooseImageDefaultsForMediaType: *const fn(
            self: *const IFileSystemImage,
            value: IMAPI_MEDIA_PHYSICAL_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ISO9660InterchangeLevel: *const fn(
            self: *const IFileSystemImage,
            newVal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ISO9660InterchangeLevel: *const fn(
            self: *const IFileSystemImage,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ISO9660InterchangeLevelsSupported: *const fn(
            self: *const IFileSystemImage,
            pVal: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateResultImage: *const fn(
            self: *const IFileSystemImage,
            resultStream: ?*?*IFileSystemImageResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Exists: *const fn(
            self: *const IFileSystemImage,
            fullPath: ?BSTR,
            itemType: ?*FsiItemType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CalculateDiscIdentifier: *const fn(
            self: *const IFileSystemImage,
            discIdentifier: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IdentifyFileSystemsOnDisc: *const fn(
            self: *const IFileSystemImage,
            discRecorder: ?*IDiscRecorder2,
            fileSystems: ?*FsiFileSystems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultFileSystemForImport: *const fn(
            self: *const IFileSystemImage,
            fileSystems: FsiFileSystems,
            importDefault: ?*FsiFileSystems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportFileSystem: *const fn(
            self: *const IFileSystemImage,
            importedFileSystem: ?*FsiFileSystems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportSpecificFileSystem: *const fn(
            self: *const IFileSystemImage,
            fileSystemToUse: FsiFileSystems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RollbackToChangePoint: *const fn(
            self: *const IFileSystemImage,
            changePoint: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LockInChangePoint: *const fn(
            self: *const IFileSystemImage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDirectoryItem: *const fn(
            self: *const IFileSystemImage,
            name: ?BSTR,
            newItem: ?*?*IFsiDirectoryItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFileItem: *const fn(
            self: *const IFileSystemImage,
            name: ?BSTR,
            newItem: ?*?*IFsiFileItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_VolumeNameUDF: *const fn(
            self: *const IFileSystemImage,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_VolumeNameJoliet: *const fn(
            self: *const IFileSystemImage,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_VolumeNameISO9660: *const fn(
            self: *const IFileSystemImage,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StageFiles: *const fn(
            self: *const IFileSystemImage,
            pVal: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StageFiles: *const fn(
            self: *const IFileSystemImage,
            newVal: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MultisessionInterfaces: *const fn(
            self: *const IFileSystemImage,
            pVal: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MultisessionInterfaces: *const fn(
            self: *const IFileSystemImage,
            newVal: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Root(self: *const IFileSystemImage, pVal: ?*?*IFsiDirectoryItem) callconv(.Inline) HRESULT {
        return self.vtable.get_Root(self, pVal);
    }
    pub fn get_SessionStartBlock(self: *const IFileSystemImage, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_SessionStartBlock(self, pVal);
    }
    pub fn put_SessionStartBlock(self: *const IFileSystemImage, newVal: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_SessionStartBlock(self, newVal);
    }
    pub fn get_FreeMediaBlocks(self: *const IFileSystemImage, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_FreeMediaBlocks(self, pVal);
    }
    pub fn put_FreeMediaBlocks(self: *const IFileSystemImage, newVal: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_FreeMediaBlocks(self, newVal);
    }
    pub fn SetMaxMediaBlocksFromDevice(self: *const IFileSystemImage, discRecorder: ?*IDiscRecorder2) callconv(.Inline) HRESULT {
        return self.vtable.SetMaxMediaBlocksFromDevice(self, discRecorder);
    }
    pub fn get_UsedBlocks(self: *const IFileSystemImage, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_UsedBlocks(self, pVal);
    }
    pub fn get_VolumeName(self: *const IFileSystemImage, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_VolumeName(self, pVal);
    }
    pub fn put_VolumeName(self: *const IFileSystemImage, newVal: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_VolumeName(self, newVal);
    }
    pub fn get_ImportedVolumeName(self: *const IFileSystemImage, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ImportedVolumeName(self, pVal);
    }
    pub fn get_BootImageOptions(self: *const IFileSystemImage, pVal: ?*?*IBootOptions) callconv(.Inline) HRESULT {
        return self.vtable.get_BootImageOptions(self, pVal);
    }
    pub fn put_BootImageOptions(self: *const IFileSystemImage, newVal: ?*IBootOptions) callconv(.Inline) HRESULT {
        return self.vtable.put_BootImageOptions(self, newVal);
    }
    pub fn get_FileCount(self: *const IFileSystemImage, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_FileCount(self, pVal);
    }
    pub fn get_DirectoryCount(self: *const IFileSystemImage, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_DirectoryCount(self, pVal);
    }
    pub fn get_WorkingDirectory(self: *const IFileSystemImage, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_WorkingDirectory(self, pVal);
    }
    pub fn put_WorkingDirectory(self: *const IFileSystemImage, newVal: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_WorkingDirectory(self, newVal);
    }
    pub fn get_ChangePoint(self: *const IFileSystemImage, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ChangePoint(self, pVal);
    }
    pub fn get_StrictFileSystemCompliance(self: *const IFileSystemImage, pVal: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_StrictFileSystemCompliance(self, pVal);
    }
    pub fn put_StrictFileSystemCompliance(self: *const IFileSystemImage, newVal: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_StrictFileSystemCompliance(self, newVal);
    }
    pub fn get_UseRestrictedCharacterSet(self: *const IFileSystemImage, pVal: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_UseRestrictedCharacterSet(self, pVal);
    }
    pub fn put_UseRestrictedCharacterSet(self: *const IFileSystemImage, newVal: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_UseRestrictedCharacterSet(self, newVal);
    }
    pub fn get_FileSystemsToCreate(self: *const IFileSystemImage, pVal: ?*FsiFileSystems) callconv(.Inline) HRESULT {
        return self.vtable.get_FileSystemsToCreate(self, pVal);
    }
    pub fn put_FileSystemsToCreate(self: *const IFileSystemImage, newVal: FsiFileSystems) callconv(.Inline) HRESULT {
        return self.vtable.put_FileSystemsToCreate(self, newVal);
    }
    pub fn get_FileSystemsSupported(self: *const IFileSystemImage, pVal: ?*FsiFileSystems) callconv(.Inline) HRESULT {
        return self.vtable.get_FileSystemsSupported(self, pVal);
    }
    pub fn put_UDFRevision(self: *const IFileSystemImage, newVal: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_UDFRevision(self, newVal);
    }
    pub fn get_UDFRevision(self: *const IFileSystemImage, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_UDFRevision(self, pVal);
    }
    pub fn get_UDFRevisionsSupported(self: *const IFileSystemImage, pVal: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.get_UDFRevisionsSupported(self, pVal);
    }
    pub fn ChooseImageDefaults(self: *const IFileSystemImage, discRecorder: ?*IDiscRecorder2) callconv(.Inline) HRESULT {
        return self.vtable.ChooseImageDefaults(self, discRecorder);
    }
    pub fn ChooseImageDefaultsForMediaType(self: *const IFileSystemImage, value: IMAPI_MEDIA_PHYSICAL_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.ChooseImageDefaultsForMediaType(self, value);
    }
    pub fn put_ISO9660InterchangeLevel(self: *const IFileSystemImage, newVal: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_ISO9660InterchangeLevel(self, newVal);
    }
    pub fn get_ISO9660InterchangeLevel(self: *const IFileSystemImage, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ISO9660InterchangeLevel(self, pVal);
    }
    pub fn get_ISO9660InterchangeLevelsSupported(self: *const IFileSystemImage, pVal: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.get_ISO9660InterchangeLevelsSupported(self, pVal);
    }
    pub fn CreateResultImage(self: *const IFileSystemImage, resultStream: ?*?*IFileSystemImageResult) callconv(.Inline) HRESULT {
        return self.vtable.CreateResultImage(self, resultStream);
    }
    pub fn Exists(self: *const IFileSystemImage, fullPath: ?BSTR, itemType: ?*FsiItemType) callconv(.Inline) HRESULT {
        return self.vtable.Exists(self, fullPath, itemType);
    }
    pub fn CalculateDiscIdentifier(self: *const IFileSystemImage, discIdentifier: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.CalculateDiscIdentifier(self, discIdentifier);
    }
    pub fn IdentifyFileSystemsOnDisc(self: *const IFileSystemImage, discRecorder: ?*IDiscRecorder2, fileSystems: ?*FsiFileSystems) callconv(.Inline) HRESULT {
        return self.vtable.IdentifyFileSystemsOnDisc(self, discRecorder, fileSystems);
    }
    pub fn GetDefaultFileSystemForImport(self: *const IFileSystemImage, fileSystems: FsiFileSystems, importDefault: ?*FsiFileSystems) callconv(.Inline) HRESULT {
        return self.vtable.GetDefaultFileSystemForImport(self, fileSystems, importDefault);
    }
    pub fn ImportFileSystem(self: *const IFileSystemImage, importedFileSystem: ?*FsiFileSystems) callconv(.Inline) HRESULT {
        return self.vtable.ImportFileSystem(self, importedFileSystem);
    }
    pub fn ImportSpecificFileSystem(self: *const IFileSystemImage, fileSystemToUse: FsiFileSystems) callconv(.Inline) HRESULT {
        return self.vtable.ImportSpecificFileSystem(self, fileSystemToUse);
    }
    pub fn RollbackToChangePoint(self: *const IFileSystemImage, changePoint: i32) callconv(.Inline) HRESULT {
        return self.vtable.RollbackToChangePoint(self, changePoint);
    }
    pub fn LockInChangePoint(self: *const IFileSystemImage) callconv(.Inline) HRESULT {
        return self.vtable.LockInChangePoint(self);
    }
    pub fn CreateDirectoryItem(self: *const IFileSystemImage, name: ?BSTR, newItem: ?*?*IFsiDirectoryItem) callconv(.Inline) HRESULT {
        return self.vtable.CreateDirectoryItem(self, name, newItem);
    }
    pub fn CreateFileItem(self: *const IFileSystemImage, name: ?BSTR, newItem: ?*?*IFsiFileItem) callconv(.Inline) HRESULT {
        return self.vtable.CreateFileItem(self, name, newItem);
    }
    pub fn get_VolumeNameUDF(self: *const IFileSystemImage, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_VolumeNameUDF(self, pVal);
    }
    pub fn get_VolumeNameJoliet(self: *const IFileSystemImage, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_VolumeNameJoliet(self, pVal);
    }
    pub fn get_VolumeNameISO9660(self: *const IFileSystemImage, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_VolumeNameISO9660(self, pVal);
    }
    pub fn get_StageFiles(self: *const IFileSystemImage, pVal: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_StageFiles(self, pVal);
    }
    pub fn put_StageFiles(self: *const IFileSystemImage, newVal: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_StageFiles(self, newVal);
    }
    pub fn get_MultisessionInterfaces(self: *const IFileSystemImage, pVal: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.get_MultisessionInterfaces(self, pVal);
    }
    pub fn put_MultisessionInterfaces(self: *const IFileSystemImage, newVal: ?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.put_MultisessionInterfaces(self, newVal);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFileSystemImage2_Value = Guid.initString("d7644b2c-1537-4767-b62f-f1387b02ddfd");
pub const IID_IFileSystemImage2 = &IID_IFileSystemImage2_Value;
pub const IFileSystemImage2 = extern union {
    pub const VTable = extern struct {
        base: IFileSystemImage.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BootImageOptionsArray: *const fn(
            self: *const IFileSystemImage2,
            pVal: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BootImageOptionsArray: *const fn(
            self: *const IFileSystemImage2,
            newVal: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IFileSystemImage: IFileSystemImage,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_BootImageOptionsArray(self: *const IFileSystemImage2, pVal: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.get_BootImageOptionsArray(self, pVal);
    }
    pub fn put_BootImageOptionsArray(self: *const IFileSystemImage2, newVal: ?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.put_BootImageOptionsArray(self, newVal);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFileSystemImage3_Value = Guid.initString("7cff842c-7e97-4807-8304-910dd8f7c051");
pub const IID_IFileSystemImage3 = &IID_IFileSystemImage3_Value;
pub const IFileSystemImage3 = extern union {
    pub const VTable = extern struct {
        base: IFileSystemImage2.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CreateRedundantUdfMetadataFiles: *const fn(
            self: *const IFileSystemImage3,
            pVal: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CreateRedundantUdfMetadataFiles: *const fn(
            self: *const IFileSystemImage3,
            newVal: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProbeSpecificFileSystem: *const fn(
            self: *const IFileSystemImage3,
            fileSystemToProbe: FsiFileSystems,
            isAppendable: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IFileSystemImage2: IFileSystemImage2,
    IFileSystemImage: IFileSystemImage,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_CreateRedundantUdfMetadataFiles(self: *const IFileSystemImage3, pVal: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_CreateRedundantUdfMetadataFiles(self, pVal);
    }
    pub fn put_CreateRedundantUdfMetadataFiles(self: *const IFileSystemImage3, newVal: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_CreateRedundantUdfMetadataFiles(self, newVal);
    }
    pub fn ProbeSpecificFileSystem(self: *const IFileSystemImage3, fileSystemToProbe: FsiFileSystems, isAppendable: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.ProbeSpecificFileSystem(self, fileSystemToProbe, isAppendable);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_DFileSystemImageEvents_Value = Guid.initString("2c941fdf-975b-59be-a960-9a2a262853a5");
pub const IID_DFileSystemImageEvents = &IID_DFileSystemImageEvents_Value;
pub const DFileSystemImageEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Update: *const fn(
            self: *const DFileSystemImageEvents,
            object: ?*IDispatch,
            currentFile: ?BSTR,
            copiedSectors: i32,
            totalSectors: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Update(self: *const DFileSystemImageEvents, object: ?*IDispatch, currentFile: ?BSTR, copiedSectors: i32, totalSectors: i32) callconv(.Inline) HRESULT {
        return self.vtable.Update(self, object, currentFile, copiedSectors, totalSectors);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_DFileSystemImageImportEvents_Value = Guid.initString("d25c30f9-4087-4366-9e24-e55be286424b");
pub const IID_DFileSystemImageImportEvents = &IID_DFileSystemImageImportEvents_Value;
pub const DFileSystemImageImportEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        UpdateImport: *const fn(
            self: *const DFileSystemImageImportEvents,
            object: ?*IDispatch,
            fileSystem: FsiFileSystems,
            currentItem: ?BSTR,
            importedDirectoryItems: i32,
            totalDirectoryItems: i32,
            importedFileItems: i32,
            totalFileItems: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn UpdateImport(self: *const DFileSystemImageImportEvents, object: ?*IDispatch, fileSystem: FsiFileSystems, currentItem: ?BSTR, importedDirectoryItems: i32, totalDirectoryItems: i32, importedFileItems: i32, totalFileItems: i32) callconv(.Inline) HRESULT {
        return self.vtable.UpdateImport(self, object, fileSystem, currentItem, importedDirectoryItems, totalDirectoryItems, importedFileItems, totalFileItems);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IIsoImageManager_Value = Guid.initString("6ca38be5-fbbb-4800-95a1-a438865eb0d4");
pub const IID_IIsoImageManager = &IID_IIsoImageManager_Value;
pub const IIsoImageManager = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn(
            self: *const IIsoImageManager,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Stream: *const fn(
            self: *const IIsoImageManager,
            data: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPath: *const fn(
            self: *const IIsoImageManager,
            Val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStream: *const fn(
            self: *const IIsoImageManager,
            data: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Validate: *const fn(
            self: *const IIsoImageManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Path(self: *const IIsoImageManager, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Path(self, pVal);
    }
    pub fn get_Stream(self: *const IIsoImageManager, data: ?*?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.get_Stream(self, data);
    }
    pub fn SetPath(self: *const IIsoImageManager, Val: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.SetPath(self, Val);
    }
    pub fn SetStream(self: *const IIsoImageManager, data: ?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.SetStream(self, data);
    }
    pub fn Validate(self: *const IIsoImageManager) callconv(.Inline) HRESULT {
        return self.vtable.Validate(self);
    }
};

const CLSID_MSDiscRecorderObj_Value = Guid.initString("520cca61-51a5-11d3-9144-00104ba11c5e");
pub const CLSID_MSDiscRecorderObj = &CLSID_MSDiscRecorderObj_Value;

const CLSID_MSDiscMasterObj_Value = Guid.initString("520cca63-51a5-11d3-9144-00104ba11c5e");
pub const CLSID_MSDiscMasterObj = &CLSID_MSDiscMasterObj_Value;

const CLSID_MSEnumDiscRecordersObj_Value = Guid.initString("8a03567a-63cb-4ba8-baf6-52119816d1ef");
pub const CLSID_MSEnumDiscRecordersObj = &CLSID_MSEnumDiscRecordersObj_Value;

pub const MEDIA_TYPES = enum(i32) {
    CDDA_CDROM = 1,
    CD_ROM_XA = 2,
    CD_I = 3,
    CD_EXTRA = 4,
    CD_OTHER = 5,
    SPECIAL = 6,
};
pub const MEDIA_CDDA_CDROM = MEDIA_TYPES.CDDA_CDROM;
pub const MEDIA_CD_ROM_XA = MEDIA_TYPES.CD_ROM_XA;
pub const MEDIA_CD_I = MEDIA_TYPES.CD_I;
pub const MEDIA_CD_EXTRA = MEDIA_TYPES.CD_EXTRA;
pub const MEDIA_CD_OTHER = MEDIA_TYPES.CD_OTHER;
pub const MEDIA_SPECIAL = MEDIA_TYPES.SPECIAL;

pub const MEDIA_FLAGS = enum(i32) {
    BLANK = 1,
    RW = 2,
    WRITABLE = 4,
    FORMAT_UNUSABLE_BY_IMAPI = 8,
};
pub const MEDIA_BLANK = MEDIA_FLAGS.BLANK;
pub const MEDIA_RW = MEDIA_FLAGS.RW;
pub const MEDIA_WRITABLE = MEDIA_FLAGS.WRITABLE;
pub const MEDIA_FORMAT_UNUSABLE_BY_IMAPI = MEDIA_FLAGS.FORMAT_UNUSABLE_BY_IMAPI;

pub const RECORDER_TYPES = enum(i32) {
    R = 1,
    W = 2,
};
pub const RECORDER_CDR = RECORDER_TYPES.R;
pub const RECORDER_CDRW = RECORDER_TYPES.W;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IDiscRecorder_Value = Guid.initString("85ac9776-ca88-4cf2-894e-09598c078a41");
pub const IID_IDiscRecorder = &IID_IDiscRecorder_Value;
pub const IDiscRecorder = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Init: *const fn(
            self: *const IDiscRecorder,
            pbyUniqueID: [*:0]u8,
            nulIDSize: u32,
            nulDriveNumber: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRecorderGUID: *const fn(
            self: *const IDiscRecorder,
            pbyUniqueID: ?[*:0]u8,
            ulBufferSize: u32,
            pulReturnSizeRequired: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRecorderType: *const fn(
            self: *const IDiscRecorder,
            fTypeCode: ?*RECORDER_TYPES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayNames: *const fn(
            self: *const IDiscRecorder,
            pbstrVendorID: ?*?BSTR,
            pbstrProductID: ?*?BSTR,
            pbstrRevision: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBasePnPID: *const fn(
            self: *const IDiscRecorder,
            pbstrBasePnPID: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPath: *const fn(
            self: *const IDiscRecorder,
            pbstrPath: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRecorderProperties: *const fn(
            self: *const IDiscRecorder,
            ppPropStg: ?*?*IPropertyStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRecorderProperties: *const fn(
            self: *const IDiscRecorder,
            pPropStg: ?*IPropertyStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRecorderState: *const fn(
            self: *const IDiscRecorder,
            pulDevStateFlags: ?*DISC_RECORDER_STATE_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenExclusive: *const fn(
            self: *const IDiscRecorder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryMediaType: *const fn(
            self: *const IDiscRecorder,
            fMediaType: ?*MEDIA_TYPES,
            fMediaFlags: ?*MEDIA_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryMediaInfo: *const fn(
            self: *const IDiscRecorder,
            pbSessions: ?*u8,
            pbLastTrack: ?*u8,
            ulStartAddress: ?*u32,
            ulNextWritable: ?*u32,
            ulFreeBlocks: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Eject: *const fn(
            self: *const IDiscRecorder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Erase: *const fn(
            self: *const IDiscRecorder,
            bFullErase: u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn(
            self: *const IDiscRecorder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Init(self: *const IDiscRecorder, pbyUniqueID: [*:0]u8, nulIDSize: u32, nulDriveNumber: u32) callconv(.Inline) HRESULT {
        return self.vtable.Init(self, pbyUniqueID, nulIDSize, nulDriveNumber);
    }
    pub fn GetRecorderGUID(self: *const IDiscRecorder, pbyUniqueID: ?[*:0]u8, ulBufferSize: u32, pulReturnSizeRequired: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetRecorderGUID(self, pbyUniqueID, ulBufferSize, pulReturnSizeRequired);
    }
    pub fn GetRecorderType(self: *const IDiscRecorder, fTypeCode: ?*RECORDER_TYPES) callconv(.Inline) HRESULT {
        return self.vtable.GetRecorderType(self, fTypeCode);
    }
    pub fn GetDisplayNames(self: *const IDiscRecorder, pbstrVendorID: ?*?BSTR, pbstrProductID: ?*?BSTR, pbstrRevision: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetDisplayNames(self, pbstrVendorID, pbstrProductID, pbstrRevision);
    }
    pub fn GetBasePnPID(self: *const IDiscRecorder, pbstrBasePnPID: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetBasePnPID(self, pbstrBasePnPID);
    }
    pub fn GetPath(self: *const IDiscRecorder, pbstrPath: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetPath(self, pbstrPath);
    }
    pub fn GetRecorderProperties(self: *const IDiscRecorder, ppPropStg: ?*?*IPropertyStorage) callconv(.Inline) HRESULT {
        return self.vtable.GetRecorderProperties(self, ppPropStg);
    }
    pub fn SetRecorderProperties(self: *const IDiscRecorder, pPropStg: ?*IPropertyStorage) callconv(.Inline) HRESULT {
        return self.vtable.SetRecorderProperties(self, pPropStg);
    }
    pub fn GetRecorderState(self: *const IDiscRecorder, pulDevStateFlags: ?*DISC_RECORDER_STATE_FLAGS) callconv(.Inline) HRESULT {
        return self.vtable.GetRecorderState(self, pulDevStateFlags);
    }
    pub fn OpenExclusive(self: *const IDiscRecorder) callconv(.Inline) HRESULT {
        return self.vtable.OpenExclusive(self);
    }
    pub fn QueryMediaType(self: *const IDiscRecorder, fMediaType: ?*MEDIA_TYPES, fMediaFlags: ?*MEDIA_FLAGS) callconv(.Inline) HRESULT {
        return self.vtable.QueryMediaType(self, fMediaType, fMediaFlags);
    }
    pub fn QueryMediaInfo(self: *const IDiscRecorder, pbSessions: ?*u8, pbLastTrack: ?*u8, ulStartAddress: ?*u32, ulNextWritable: ?*u32, ulFreeBlocks: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.QueryMediaInfo(self, pbSessions, pbLastTrack, ulStartAddress, ulNextWritable, ulFreeBlocks);
    }
    pub fn Eject(self: *const IDiscRecorder) callconv(.Inline) HRESULT {
        return self.vtable.Eject(self);
    }
    pub fn Erase(self: *const IDiscRecorder, bFullErase: u8) callconv(.Inline) HRESULT {
        return self.vtable.Erase(self, bFullErase);
    }
    pub fn Close(self: *const IDiscRecorder) callconv(.Inline) HRESULT {
        return self.vtable.Close(self);
    }
};

const IID_IEnumDiscRecorders_Value = Guid.initString("9b1921e1-54ac-11d3-9144-00104ba11c5e");
pub const IID_IEnumDiscRecorders = &IID_IEnumDiscRecorders_Value;
pub const IEnumDiscRecorders = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumDiscRecorders,
            cRecorders: u32,
            ppRecorder: [*]?*IDiscRecorder,
            pcFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumDiscRecorders,
            cRecorders: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumDiscRecorders,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumDiscRecorders,
            ppEnum: ?*?*IEnumDiscRecorders,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumDiscRecorders, cRecorders: u32, ppRecorder: [*]?*IDiscRecorder, pcFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, cRecorders, ppRecorder, pcFetched);
    }
    pub fn Skip(self: *const IEnumDiscRecorders, cRecorders: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, cRecorders);
    }
    pub fn Reset(self: *const IEnumDiscRecorders) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumDiscRecorders, ppEnum: ?*?*IEnumDiscRecorders) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppEnum);
    }
};

const IID_IEnumDiscMasterFormats_Value = Guid.initString("ddf445e1-54ba-11d3-9144-00104ba11c5e");
pub const IID_IEnumDiscMasterFormats = &IID_IEnumDiscMasterFormats_Value;
pub const IEnumDiscMasterFormats = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumDiscMasterFormats,
            cFormats: u32,
            lpiidFormatID: [*]Guid,
            pcFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumDiscMasterFormats,
            cFormats: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumDiscMasterFormats,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumDiscMasterFormats,
            ppEnum: ?*?*IEnumDiscMasterFormats,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumDiscMasterFormats, cFormats: u32, lpiidFormatID: [*]Guid, pcFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, cFormats, lpiidFormatID, pcFetched);
    }
    pub fn Skip(self: *const IEnumDiscMasterFormats, cFormats: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, cFormats);
    }
    pub fn Reset(self: *const IEnumDiscMasterFormats) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumDiscMasterFormats, ppEnum: ?*?*IEnumDiscMasterFormats) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppEnum);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IRedbookDiscMaster_Value = Guid.initString("e3bc42cd-4e5c-11d3-9144-00104ba11c5e");
pub const IID_IRedbookDiscMaster = &IID_IRedbookDiscMaster_Value;
pub const IRedbookDiscMaster = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTotalAudioTracks: *const fn(
            self: *const IRedbookDiscMaster,
            pnTracks: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTotalAudioBlocks: *const fn(
            self: *const IRedbookDiscMaster,
            pnBlocks: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUsedAudioBlocks: *const fn(
            self: *const IRedbookDiscMaster,
            pnBlocks: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAvailableAudioTrackBlocks: *const fn(
            self: *const IRedbookDiscMaster,
            pnBlocks: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAudioBlockSize: *const fn(
            self: *const IRedbookDiscMaster,
            pnBlockBytes: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateAudioTrack: *const fn(
            self: *const IRedbookDiscMaster,
            nBlocks: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAudioTrackBlocks: *const fn(
            self: *const IRedbookDiscMaster,
            pby: [*:0]u8,
            cb: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloseAudioTrack: *const fn(
            self: *const IRedbookDiscMaster,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetTotalAudioTracks(self: *const IRedbookDiscMaster, pnTracks: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetTotalAudioTracks(self, pnTracks);
    }
    pub fn GetTotalAudioBlocks(self: *const IRedbookDiscMaster, pnBlocks: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetTotalAudioBlocks(self, pnBlocks);
    }
    pub fn GetUsedAudioBlocks(self: *const IRedbookDiscMaster, pnBlocks: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetUsedAudioBlocks(self, pnBlocks);
    }
    pub fn GetAvailableAudioTrackBlocks(self: *const IRedbookDiscMaster, pnBlocks: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetAvailableAudioTrackBlocks(self, pnBlocks);
    }
    pub fn GetAudioBlockSize(self: *const IRedbookDiscMaster, pnBlockBytes: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetAudioBlockSize(self, pnBlockBytes);
    }
    pub fn CreateAudioTrack(self: *const IRedbookDiscMaster, nBlocks: i32) callconv(.Inline) HRESULT {
        return self.vtable.CreateAudioTrack(self, nBlocks);
    }
    pub fn AddAudioTrackBlocks(self: *const IRedbookDiscMaster, pby: [*:0]u8, cb: i32) callconv(.Inline) HRESULT {
        return self.vtable.AddAudioTrackBlocks(self, pby, cb);
    }
    pub fn CloseAudioTrack(self: *const IRedbookDiscMaster) callconv(.Inline) HRESULT {
        return self.vtable.CloseAudioTrack(self);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IJolietDiscMaster_Value = Guid.initString("e3bc42ce-4e5c-11d3-9144-00104ba11c5e");
pub const IID_IJolietDiscMaster = &IID_IJolietDiscMaster_Value;
pub const IJolietDiscMaster = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTotalDataBlocks: *const fn(
            self: *const IJolietDiscMaster,
            pnBlocks: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUsedDataBlocks: *const fn(
            self: *const IJolietDiscMaster,
            pnBlocks: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDataBlockSize: *const fn(
            self: *const IJolietDiscMaster,
            pnBlockBytes: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddData: *const fn(
            self: *const IJolietDiscMaster,
            pStorage: ?*IStorage,
            lFileOverwrite: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetJolietProperties: *const fn(
            self: *const IJolietDiscMaster,
            ppPropStg: ?*?*IPropertyStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetJolietProperties: *const fn(
            self: *const IJolietDiscMaster,
            pPropStg: ?*IPropertyStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetTotalDataBlocks(self: *const IJolietDiscMaster, pnBlocks: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetTotalDataBlocks(self, pnBlocks);
    }
    pub fn GetUsedDataBlocks(self: *const IJolietDiscMaster, pnBlocks: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetUsedDataBlocks(self, pnBlocks);
    }
    pub fn GetDataBlockSize(self: *const IJolietDiscMaster, pnBlockBytes: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetDataBlockSize(self, pnBlockBytes);
    }
    pub fn AddData(self: *const IJolietDiscMaster, pStorage: ?*IStorage, lFileOverwrite: i32) callconv(.Inline) HRESULT {
        return self.vtable.AddData(self, pStorage, lFileOverwrite);
    }
    pub fn GetJolietProperties(self: *const IJolietDiscMaster, ppPropStg: ?*?*IPropertyStorage) callconv(.Inline) HRESULT {
        return self.vtable.GetJolietProperties(self, ppPropStg);
    }
    pub fn SetJolietProperties(self: *const IJolietDiscMaster, pPropStg: ?*IPropertyStorage) callconv(.Inline) HRESULT {
        return self.vtable.SetJolietProperties(self, pPropStg);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IDiscMasterProgressEvents_Value = Guid.initString("ec9e51c1-4e5d-11d3-9144-00104ba11c5e");
pub const IID_IDiscMasterProgressEvents = &IID_IDiscMasterProgressEvents_Value;
pub const IDiscMasterProgressEvents = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryCancel: *const fn(
            self: *const IDiscMasterProgressEvents,
            pbCancel: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyPnPActivity: *const fn(
            self: *const IDiscMasterProgressEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyAddProgress: *const fn(
            self: *const IDiscMasterProgressEvents,
            nCompletedSteps: i32,
            nTotalSteps: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyBlockProgress: *const fn(
            self: *const IDiscMasterProgressEvents,
            nCompleted: i32,
            nTotal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyTrackProgress: *const fn(
            self: *const IDiscMasterProgressEvents,
            nCurrentTrack: i32,
            nTotalTracks: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyPreparingBurn: *const fn(
            self: *const IDiscMasterProgressEvents,
            nEstimatedSeconds: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyClosingDisc: *const fn(
            self: *const IDiscMasterProgressEvents,
            nEstimatedSeconds: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyBurnComplete: *const fn(
            self: *const IDiscMasterProgressEvents,
            status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyEraseComplete: *const fn(
            self: *const IDiscMasterProgressEvents,
            status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn QueryCancel(self: *const IDiscMasterProgressEvents, pbCancel: ?*u8) callconv(.Inline) HRESULT {
        return self.vtable.QueryCancel(self, pbCancel);
    }
    pub fn NotifyPnPActivity(self: *const IDiscMasterProgressEvents) callconv(.Inline) HRESULT {
        return self.vtable.NotifyPnPActivity(self);
    }
    pub fn NotifyAddProgress(self: *const IDiscMasterProgressEvents, nCompletedSteps: i32, nTotalSteps: i32) callconv(.Inline) HRESULT {
        return self.vtable.NotifyAddProgress(self, nCompletedSteps, nTotalSteps);
    }
    pub fn NotifyBlockProgress(self: *const IDiscMasterProgressEvents, nCompleted: i32, nTotal: i32) callconv(.Inline) HRESULT {
        return self.vtable.NotifyBlockProgress(self, nCompleted, nTotal);
    }
    pub fn NotifyTrackProgress(self: *const IDiscMasterProgressEvents, nCurrentTrack: i32, nTotalTracks: i32) callconv(.Inline) HRESULT {
        return self.vtable.NotifyTrackProgress(self, nCurrentTrack, nTotalTracks);
    }
    pub fn NotifyPreparingBurn(self: *const IDiscMasterProgressEvents, nEstimatedSeconds: i32) callconv(.Inline) HRESULT {
        return self.vtable.NotifyPreparingBurn(self, nEstimatedSeconds);
    }
    pub fn NotifyClosingDisc(self: *const IDiscMasterProgressEvents, nEstimatedSeconds: i32) callconv(.Inline) HRESULT {
        return self.vtable.NotifyClosingDisc(self, nEstimatedSeconds);
    }
    pub fn NotifyBurnComplete(self: *const IDiscMasterProgressEvents, status: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.NotifyBurnComplete(self, status);
    }
    pub fn NotifyEraseComplete(self: *const IDiscMasterProgressEvents, status: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.NotifyEraseComplete(self, status);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IDiscMaster_Value = Guid.initString("520cca62-51a5-11d3-9144-00104ba11c5e");
pub const IID_IDiscMaster = &IID_IDiscMaster_Value;
pub const IDiscMaster = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Open: *const fn(
            self: *const IDiscMaster,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumDiscMasterFormats: *const fn(
            self: *const IDiscMaster,
            ppEnum: ?*?*IEnumDiscMasterFormats,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetActiveDiscMasterFormat: *const fn(
            self: *const IDiscMaster,
            lpiid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActiveDiscMasterFormat: *const fn(
            self: *const IDiscMaster,
            riid: ?*const Guid,
            ppUnk: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumDiscRecorders: *const fn(
            self: *const IDiscMaster,
            ppEnum: ?*?*IEnumDiscRecorders,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetActiveDiscRecorder: *const fn(
            self: *const IDiscMaster,
            ppRecorder: ?*?*IDiscRecorder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActiveDiscRecorder: *const fn(
            self: *const IDiscMaster,
            pRecorder: ?*IDiscRecorder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearFormatContent: *const fn(
            self: *const IDiscMaster,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProgressAdvise: *const fn(
            self: *const IDiscMaster,
            pEvents: ?*IDiscMasterProgressEvents,
            pvCookie: ?*usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProgressUnadvise: *const fn(
            self: *const IDiscMaster,
            vCookie: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RecordDisc: *const fn(
            self: *const IDiscMaster,
            bSimulate: u8,
            bEjectAfterBurn: u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn(
            self: *const IDiscMaster,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Open(self: *const IDiscMaster) callconv(.Inline) HRESULT {
        return self.vtable.Open(self);
    }
    pub fn EnumDiscMasterFormats(self: *const IDiscMaster, ppEnum: ?*?*IEnumDiscMasterFormats) callconv(.Inline) HRESULT {
        return self.vtable.EnumDiscMasterFormats(self, ppEnum);
    }
    pub fn GetActiveDiscMasterFormat(self: *const IDiscMaster, lpiid: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetActiveDiscMasterFormat(self, lpiid);
    }
    pub fn SetActiveDiscMasterFormat(self: *const IDiscMaster, riid: ?*const Guid, ppUnk: ?*?*anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.SetActiveDiscMasterFormat(self, riid, ppUnk);
    }
    pub fn EnumDiscRecorders(self: *const IDiscMaster, ppEnum: ?*?*IEnumDiscRecorders) callconv(.Inline) HRESULT {
        return self.vtable.EnumDiscRecorders(self, ppEnum);
    }
    pub fn GetActiveDiscRecorder(self: *const IDiscMaster, ppRecorder: ?*?*IDiscRecorder) callconv(.Inline) HRESULT {
        return self.vtable.GetActiveDiscRecorder(self, ppRecorder);
    }
    pub fn SetActiveDiscRecorder(self: *const IDiscMaster, pRecorder: ?*IDiscRecorder) callconv(.Inline) HRESULT {
        return self.vtable.SetActiveDiscRecorder(self, pRecorder);
    }
    pub fn ClearFormatContent(self: *const IDiscMaster) callconv(.Inline) HRESULT {
        return self.vtable.ClearFormatContent(self);
    }
    pub fn ProgressAdvise(self: *const IDiscMaster, pEvents: ?*IDiscMasterProgressEvents, pvCookie: ?*usize) callconv(.Inline) HRESULT {
        return self.vtable.ProgressAdvise(self, pEvents, pvCookie);
    }
    pub fn ProgressUnadvise(self: *const IDiscMaster, vCookie: usize) callconv(.Inline) HRESULT {
        return self.vtable.ProgressUnadvise(self, vCookie);
    }
    pub fn RecordDisc(self: *const IDiscMaster, bSimulate: u8, bEjectAfterBurn: u8) callconv(.Inline) HRESULT {
        return self.vtable.RecordDisc(self, bSimulate, bEjectAfterBurn);
    }
    pub fn Close(self: *const IDiscMaster) callconv(.Inline) HRESULT {
        return self.vtable.Close(self);
    }
};

pub const _MSGSESS = extern struct {
    placeholder: usize, // TODO: why is this type empty?
};

pub const MSGCALLRELEASE = *const fn(
    ulCallerData: u32,
    lpMessage: ?*IMessage,
) callconv(@import("std").os.windows.WINAPI) void;

pub const SPropAttrArray = extern struct {
    cValues: u32,
    aPropAttr: [1]u32,
};

const CLSID_tagIMMPID_MP_STRUCT_Value = Guid.initString("13384cf0-b3c4-11d1-aa92-00aa006bc80b");
pub const CLSID_tagIMMPID_MP_STRUCT = &CLSID_tagIMMPID_MP_STRUCT_Value;

pub const IMMPID_MP_ENUM = enum(i32) {
    BEFORE__ = 4095,
    RECIPIENT_LIST = 4096,
    CONTENT_FILE_NAME = 4097,
    SENDER_ADDRESS_SMTP = 4098,
    SENDER_ADDRESS_X500 = 4099,
    SENDER_ADDRESS_X400 = 4100,
    SENDER_ADDRESS_LEGACY_EX_DN = 4101,
    DOMAIN_LIST = 4102,
    PICKUP_FILE_NAME = 4103,
    AUTHENTICATED_USER_NAME = 4104,
    CONNECTION_IP_ADDRESS = 4105,
    HELO_DOMAIN = 4106,
    EIGHTBIT_MIME_OPTION = 4107,
    CHUNKING_OPTION = 4108,
    BINARYMIME_OPTION = 4109,
    REMOTE_AUTHENTICATION_TYPE = 4110,
    ERROR_CODE = 4111,
    DSN_ENVID_VALUE = 4112,
    DSN_RET_VALUE = 4113,
    REMOTE_SERVER_DSN_CAPABLE = 4114,
    ARRIVAL_TIME = 4115,
    MESSAGE_STATUS = 4116,
    EXPIRE_DELAY = 4117,
    EXPIRE_NDR = 4118,
    LOCAL_EXPIRE_DELAY = 4119,
    LOCAL_EXPIRE_NDR = 4120,
    ARRIVAL_FILETIME = 4121,
    HR_CAT_STATUS = 4122,
    MSG_GUID = 4123,
    SUPERSEDES_MSG_GUID = 4124,
    SCANNED_FOR_CRLF_DOT_CRLF = 4125,
    FOUND_EMBEDDED_CRLF_DOT_CRLF = 4126,
    MSG_SIZE_HINT = 4127,
    RFC822_MSG_ID = 4128,
    RFC822_MSG_SUBJECT = 4129,
    RFC822_FROM_ADDRESS = 4130,
    RFC822_TO_ADDRESS = 4131,
    RFC822_CC_ADDRESS = 4132,
    RFC822_BCC_ADDRESS = 4133,
    CONNECTION_SERVER_IP_ADDRESS = 4134,
    SERVER_NAME = 4135,
    SERVER_VERSION = 4136,
    NUM_RECIPIENTS = 4137,
    X_PRIORITY = 4138,
    FROM_ADDRESS = 4139,
    SENDER_ADDRESS = 4140,
    DEFERRED_DELIVERY_FILETIME = 4141,
    SENDER_ADDRESS_OTHER = 4142,
    ORIGINAL_ARRIVAL_TIME = 4143,
    MSGCLASS = 4144,
    CONTENT_TYPE = 4145,
    ENCRYPTION_TYPE = 4146,
    CONNECTION_SERVER_PORT = 4147,
    CLIENT_AUTH_USER = 4148,
    CLIENT_AUTH_TYPE = 4149,
    CRC_GLOBAL = 4150,
    CRC_RECIPS = 4151,
    INBOUND_MAIL_FROM_AUTH = 4152,
    AFTER__ = 4153,
};
pub const IMMPID_MP_BEFORE__ = IMMPID_MP_ENUM.BEFORE__;
pub const IMMPID_MP_RECIPIENT_LIST = IMMPID_MP_ENUM.RECIPIENT_LIST;
pub const IMMPID_MP_CONTENT_FILE_NAME = IMMPID_MP_ENUM.CONTENT_FILE_NAME;
pub const IMMPID_MP_SENDER_ADDRESS_SMTP = IMMPID_MP_ENUM.SENDER_ADDRESS_SMTP;
pub const IMMPID_MP_SENDER_ADDRESS_X500 = IMMPID_MP_ENUM.SENDER_ADDRESS_X500;
pub const IMMPID_MP_SENDER_ADDRESS_X400 = IMMPID_MP_ENUM.SENDER_ADDRESS_X400;
pub const IMMPID_MP_SENDER_ADDRESS_LEGACY_EX_DN = IMMPID_MP_ENUM.SENDER_ADDRESS_LEGACY_EX_DN;
pub const IMMPID_MP_DOMAIN_LIST = IMMPID_MP_ENUM.DOMAIN_LIST;
pub const IMMPID_MP_PICKUP_FILE_NAME = IMMPID_MP_ENUM.PICKUP_FILE_NAME;
pub const IMMPID_MP_AUTHENTICATED_USER_NAME = IMMPID_MP_ENUM.AUTHENTICATED_USER_NAME;
pub const IMMPID_MP_CONNECTION_IP_ADDRESS = IMMPID_MP_ENUM.CONNECTION_IP_ADDRESS;
pub const IMMPID_MP_HELO_DOMAIN = IMMPID_MP_ENUM.HELO_DOMAIN;
pub const IMMPID_MP_EIGHTBIT_MIME_OPTION = IMMPID_MP_ENUM.EIGHTBIT_MIME_OPTION;
pub const IMMPID_MP_CHUNKING_OPTION = IMMPID_MP_ENUM.CHUNKING_OPTION;
pub const IMMPID_MP_BINARYMIME_OPTION = IMMPID_MP_ENUM.BINARYMIME_OPTION;
pub const IMMPID_MP_REMOTE_AUTHENTICATION_TYPE = IMMPID_MP_ENUM.REMOTE_AUTHENTICATION_TYPE;
pub const IMMPID_MP_ERROR_CODE = IMMPID_MP_ENUM.ERROR_CODE;
pub const IMMPID_MP_DSN_ENVID_VALUE = IMMPID_MP_ENUM.DSN_ENVID_VALUE;
pub const IMMPID_MP_DSN_RET_VALUE = IMMPID_MP_ENUM.DSN_RET_VALUE;
pub const IMMPID_MP_REMOTE_SERVER_DSN_CAPABLE = IMMPID_MP_ENUM.REMOTE_SERVER_DSN_CAPABLE;
pub const IMMPID_MP_ARRIVAL_TIME = IMMPID_MP_ENUM.ARRIVAL_TIME;
pub const IMMPID_MP_MESSAGE_STATUS = IMMPID_MP_ENUM.MESSAGE_STATUS;
pub const IMMPID_MP_EXPIRE_DELAY = IMMPID_MP_ENUM.EXPIRE_DELAY;
pub const IMMPID_MP_EXPIRE_NDR = IMMPID_MP_ENUM.EXPIRE_NDR;
pub const IMMPID_MP_LOCAL_EXPIRE_DELAY = IMMPID_MP_ENUM.LOCAL_EXPIRE_DELAY;
pub const IMMPID_MP_LOCAL_EXPIRE_NDR = IMMPID_MP_ENUM.LOCAL_EXPIRE_NDR;
pub const IMMPID_MP_ARRIVAL_FILETIME = IMMPID_MP_ENUM.ARRIVAL_FILETIME;
pub const IMMPID_MP_HR_CAT_STATUS = IMMPID_MP_ENUM.HR_CAT_STATUS;
pub const IMMPID_MP_MSG_GUID = IMMPID_MP_ENUM.MSG_GUID;
pub const IMMPID_MP_SUPERSEDES_MSG_GUID = IMMPID_MP_ENUM.SUPERSEDES_MSG_GUID;
pub const IMMPID_MP_SCANNED_FOR_CRLF_DOT_CRLF = IMMPID_MP_ENUM.SCANNED_FOR_CRLF_DOT_CRLF;
pub const IMMPID_MP_FOUND_EMBEDDED_CRLF_DOT_CRLF = IMMPID_MP_ENUM.FOUND_EMBEDDED_CRLF_DOT_CRLF;
pub const IMMPID_MP_MSG_SIZE_HINT = IMMPID_MP_ENUM.MSG_SIZE_HINT;
pub const IMMPID_MP_RFC822_MSG_ID = IMMPID_MP_ENUM.RFC822_MSG_ID;
pub const IMMPID_MP_RFC822_MSG_SUBJECT = IMMPID_MP_ENUM.RFC822_MSG_SUBJECT;
pub const IMMPID_MP_RFC822_FROM_ADDRESS = IMMPID_MP_ENUM.RFC822_FROM_ADDRESS;
pub const IMMPID_MP_RFC822_TO_ADDRESS = IMMPID_MP_ENUM.RFC822_TO_ADDRESS;
pub const IMMPID_MP_RFC822_CC_ADDRESS = IMMPID_MP_ENUM.RFC822_CC_ADDRESS;
pub const IMMPID_MP_RFC822_BCC_ADDRESS = IMMPID_MP_ENUM.RFC822_BCC_ADDRESS;
pub const IMMPID_MP_CONNECTION_SERVER_IP_ADDRESS = IMMPID_MP_ENUM.CONNECTION_SERVER_IP_ADDRESS;
pub const IMMPID_MP_SERVER_NAME = IMMPID_MP_ENUM.SERVER_NAME;
pub const IMMPID_MP_SERVER_VERSION = IMMPID_MP_ENUM.SERVER_VERSION;
pub const IMMPID_MP_NUM_RECIPIENTS = IMMPID_MP_ENUM.NUM_RECIPIENTS;
pub const IMMPID_MP_X_PRIORITY = IMMPID_MP_ENUM.X_PRIORITY;
pub const IMMPID_MP_FROM_ADDRESS = IMMPID_MP_ENUM.FROM_ADDRESS;
pub const IMMPID_MP_SENDER_ADDRESS = IMMPID_MP_ENUM.SENDER_ADDRESS;
pub const IMMPID_MP_DEFERRED_DELIVERY_FILETIME = IMMPID_MP_ENUM.DEFERRED_DELIVERY_FILETIME;
pub const IMMPID_MP_SENDER_ADDRESS_OTHER = IMMPID_MP_ENUM.SENDER_ADDRESS_OTHER;
pub const IMMPID_MP_ORIGINAL_ARRIVAL_TIME = IMMPID_MP_ENUM.ORIGINAL_ARRIVAL_TIME;
pub const IMMPID_MP_MSGCLASS = IMMPID_MP_ENUM.MSGCLASS;
pub const IMMPID_MP_CONTENT_TYPE = IMMPID_MP_ENUM.CONTENT_TYPE;
pub const IMMPID_MP_ENCRYPTION_TYPE = IMMPID_MP_ENUM.ENCRYPTION_TYPE;
pub const IMMPID_MP_CONNECTION_SERVER_PORT = IMMPID_MP_ENUM.CONNECTION_SERVER_PORT;
pub const IMMPID_MP_CLIENT_AUTH_USER = IMMPID_MP_ENUM.CLIENT_AUTH_USER;
pub const IMMPID_MP_CLIENT_AUTH_TYPE = IMMPID_MP_ENUM.CLIENT_AUTH_TYPE;
pub const IMMPID_MP_CRC_GLOBAL = IMMPID_MP_ENUM.CRC_GLOBAL;
pub const IMMPID_MP_CRC_RECIPS = IMMPID_MP_ENUM.CRC_RECIPS;
pub const IMMPID_MP_INBOUND_MAIL_FROM_AUTH = IMMPID_MP_ENUM.INBOUND_MAIL_FROM_AUTH;
pub const IMMPID_MP_AFTER__ = IMMPID_MP_ENUM.AFTER__;

const CLSID_tagIMMPID_RP_STRUCT_Value = Guid.initString("79e82048-d320-11d1-9ff4-00c04fa37348");
pub const CLSID_tagIMMPID_RP_STRUCT = &CLSID_tagIMMPID_RP_STRUCT_Value;

pub const IMMPID_RP_ENUM = enum(i32) {
    BEFORE__ = 8191,
    DSN_NOTIFY_SUCCESS = 8192,
    DSN_NOTIFY_INVALID = 8193,
    ADDRESS_TYPE = 8194,
    ADDRESS = 8195,
    ADDRESS_TYPE_SMTP = 8196,
    ERROR_CODE = 8197,
    ERROR_STRING = 8198,
    DSN_NOTIFY_VALUE = 8199,
    DSN_ORCPT_VALUE = 8200,
    ADDRESS_SMTP = 8201,
    ADDRESS_X400 = 8202,
    ADDRESS_X500 = 8203,
    LEGACY_EX_DN = 8204,
    RECIPIENT_FLAGS = 8205,
    SMTP_STATUS_STRING = 8206,
    DSN_PRE_CAT_ADDRESS = 8207,
    MDB_GUID = 8208,
    USER_GUID = 8209,
    DOMAIN = 8210,
    ADDRESS_OTHER = 8211,
    DISPLAY_NAME = 8212,
    AFTER__ = 8213,
};
pub const IMMPID_RP_BEFORE__ = IMMPID_RP_ENUM.BEFORE__;
pub const IMMPID_RP_DSN_NOTIFY_SUCCESS = IMMPID_RP_ENUM.DSN_NOTIFY_SUCCESS;
pub const IMMPID_RP_DSN_NOTIFY_INVALID = IMMPID_RP_ENUM.DSN_NOTIFY_INVALID;
pub const IMMPID_RP_ADDRESS_TYPE = IMMPID_RP_ENUM.ADDRESS_TYPE;
pub const IMMPID_RP_ADDRESS = IMMPID_RP_ENUM.ADDRESS;
pub const IMMPID_RP_ADDRESS_TYPE_SMTP = IMMPID_RP_ENUM.ADDRESS_TYPE_SMTP;
pub const IMMPID_RP_ERROR_CODE = IMMPID_RP_ENUM.ERROR_CODE;
pub const IMMPID_RP_ERROR_STRING = IMMPID_RP_ENUM.ERROR_STRING;
pub const IMMPID_RP_DSN_NOTIFY_VALUE = IMMPID_RP_ENUM.DSN_NOTIFY_VALUE;
pub const IMMPID_RP_DSN_ORCPT_VALUE = IMMPID_RP_ENUM.DSN_ORCPT_VALUE;
pub const IMMPID_RP_ADDRESS_SMTP = IMMPID_RP_ENUM.ADDRESS_SMTP;
pub const IMMPID_RP_ADDRESS_X400 = IMMPID_RP_ENUM.ADDRESS_X400;
pub const IMMPID_RP_ADDRESS_X500 = IMMPID_RP_ENUM.ADDRESS_X500;
pub const IMMPID_RP_LEGACY_EX_DN = IMMPID_RP_ENUM.LEGACY_EX_DN;
pub const IMMPID_RP_RECIPIENT_FLAGS = IMMPID_RP_ENUM.RECIPIENT_FLAGS;
pub const IMMPID_RP_SMTP_STATUS_STRING = IMMPID_RP_ENUM.SMTP_STATUS_STRING;
pub const IMMPID_RP_DSN_PRE_CAT_ADDRESS = IMMPID_RP_ENUM.DSN_PRE_CAT_ADDRESS;
pub const IMMPID_RP_MDB_GUID = IMMPID_RP_ENUM.MDB_GUID;
pub const IMMPID_RP_USER_GUID = IMMPID_RP_ENUM.USER_GUID;
pub const IMMPID_RP_DOMAIN = IMMPID_RP_ENUM.DOMAIN;
pub const IMMPID_RP_ADDRESS_OTHER = IMMPID_RP_ENUM.ADDRESS_OTHER;
pub const IMMPID_RP_DISPLAY_NAME = IMMPID_RP_ENUM.DISPLAY_NAME;
pub const IMMPID_RP_AFTER__ = IMMPID_RP_ENUM.AFTER__;

const CLSID_tagIMMPID_MPV_STRUCT_Value = Guid.initString("cbe69706-c9bd-11d1-9ff2-00c04fa37348");
pub const CLSID_tagIMMPID_MPV_STRUCT = &CLSID_tagIMMPID_MPV_STRUCT_Value;

pub const IMMPID_MPV_ENUM = enum(i32) {
    BEFORE__ = 12287,
    STORE_DRIVER_HANDLE = 12288,
    MESSAGE_CREATION_FLAGS = 12289,
    MESSAGE_OPEN_HANDLES = 12290,
    TOTAL_OPEN_HANDLES = 12291,
    TOTAL_OPEN_PROPERTY_STREAM_HANDLES = 12292,
    TOTAL_OPEN_CONTENT_HANDLES = 12293,
    AFTER__ = 12294,
};
pub const IMMPID_MPV_BEFORE__ = IMMPID_MPV_ENUM.BEFORE__;
pub const IMMPID_MPV_STORE_DRIVER_HANDLE = IMMPID_MPV_ENUM.STORE_DRIVER_HANDLE;
pub const IMMPID_MPV_MESSAGE_CREATION_FLAGS = IMMPID_MPV_ENUM.MESSAGE_CREATION_FLAGS;
pub const IMMPID_MPV_MESSAGE_OPEN_HANDLES = IMMPID_MPV_ENUM.MESSAGE_OPEN_HANDLES;
pub const IMMPID_MPV_TOTAL_OPEN_HANDLES = IMMPID_MPV_ENUM.TOTAL_OPEN_HANDLES;
pub const IMMPID_MPV_TOTAL_OPEN_PROPERTY_STREAM_HANDLES = IMMPID_MPV_ENUM.TOTAL_OPEN_PROPERTY_STREAM_HANDLES;
pub const IMMPID_MPV_TOTAL_OPEN_CONTENT_HANDLES = IMMPID_MPV_ENUM.TOTAL_OPEN_CONTENT_HANDLES;
pub const IMMPID_MPV_AFTER__ = IMMPID_MPV_ENUM.AFTER__;

pub const IMMP_MPV_STORE_DRIVER_HANDLE = extern struct {
    guidSignature: Guid,
};

const CLSID_tagIMMPID_RPV_STRUCT_Value = Guid.initString("79e82049-d320-11d1-9ff4-00c04fa37348");
pub const CLSID_tagIMMPID_RPV_STRUCT = &CLSID_tagIMMPID_RPV_STRUCT_Value;

pub const IMMPID_RPV_ENUM = enum(i32) {
    BEFORE__ = 16383,
    DONT_DELIVER = 16384,
    NO_NAME_COLLISIONS = 16385,
    AFTER__ = 16386,
};
pub const IMMPID_RPV_BEFORE__ = IMMPID_RPV_ENUM.BEFORE__;
pub const IMMPID_RPV_DONT_DELIVER = IMMPID_RPV_ENUM.DONT_DELIVER;
pub const IMMPID_RPV_NO_NAME_COLLISIONS = IMMPID_RPV_ENUM.NO_NAME_COLLISIONS;
pub const IMMPID_RPV_AFTER__ = IMMPID_RPV_ENUM.AFTER__;

const CLSID_tagIMMPID_NMP_STRUCT_Value = Guid.initString("7433a9aa-20e2-11d2-94d6-00c04fa379f1");
pub const CLSID_tagIMMPID_NMP_STRUCT = &CLSID_tagIMMPID_NMP_STRUCT_Value;

pub const IMMPID_NMP_ENUM = enum(i32) {
    BEFORE__ = 24575,
    SECONDARY_GROUPS = 24576,
    SECONDARY_ARTNUM = 24577,
    PRIMARY_GROUP = 24578,
    PRIMARY_ARTID = 24579,
    POST_TOKEN = 24580,
    NEWSGROUP_LIST = 24581,
    HEADERS = 24582,
    NNTP_PROCESSING = 24583,
    NNTP_APPROVED_HEADER = 24584,
    AFTER__ = 24585,
};
pub const IMMPID_NMP_BEFORE__ = IMMPID_NMP_ENUM.BEFORE__;
pub const IMMPID_NMP_SECONDARY_GROUPS = IMMPID_NMP_ENUM.SECONDARY_GROUPS;
pub const IMMPID_NMP_SECONDARY_ARTNUM = IMMPID_NMP_ENUM.SECONDARY_ARTNUM;
pub const IMMPID_NMP_PRIMARY_GROUP = IMMPID_NMP_ENUM.PRIMARY_GROUP;
pub const IMMPID_NMP_PRIMARY_ARTID = IMMPID_NMP_ENUM.PRIMARY_ARTID;
pub const IMMPID_NMP_POST_TOKEN = IMMPID_NMP_ENUM.POST_TOKEN;
pub const IMMPID_NMP_NEWSGROUP_LIST = IMMPID_NMP_ENUM.NEWSGROUP_LIST;
pub const IMMPID_NMP_HEADERS = IMMPID_NMP_ENUM.HEADERS;
pub const IMMPID_NMP_NNTP_PROCESSING = IMMPID_NMP_ENUM.NNTP_PROCESSING;
pub const IMMPID_NMP_NNTP_APPROVED_HEADER = IMMPID_NMP_ENUM.NNTP_APPROVED_HEADER;
pub const IMMPID_NMP_AFTER__ = IMMPID_NMP_ENUM.AFTER__;

const CLSID_tagIMMPID_CPV_STRUCT_Value = Guid.initString("a2a76b2a-e52d-11d1-aa64-00c04fa35b82");
pub const CLSID_tagIMMPID_CPV_STRUCT = &CLSID_tagIMMPID_CPV_STRUCT_Value;

pub const IMMPID_CPV_ENUM = enum(i32) {
    V_BEFORE__ = 32767,
    _START = 32768,
    V_AFTER__ = 32769,
};
pub const IMMPID_CPV_BEFORE__ = IMMPID_CPV_ENUM.V_BEFORE__;
pub const IMMPID_CP_START = IMMPID_CPV_ENUM._START;
pub const IMMPID_CPV_AFTER__ = IMMPID_CPV_ENUM.V_AFTER__;

pub const tagIMMPID_GUIDLIST_ITEM = extern struct {
    pguid: ?*const Guid,
    dwStart: u32,
    dwLast: u32,
};


//--------------------------------------------------------------------------------
// Section: Functions (6)
//--------------------------------------------------------------------------------
pub extern "mapi32" fn OpenIMsgSession(
    lpMalloc: ?*IMalloc,
    ulFlags: u32,
    lppMsgSess: ?*?*_MSGSESS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "mapi32" fn CloseIMsgSession(
    lpMsgSess: ?*_MSGSESS,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "mapi32" fn OpenIMsgOnIStg(
    lpMsgSess: ?*_MSGSESS,
    lpAllocateBuffer: ?LPALLOCATEBUFFER,
    lpAllocateMore: ?LPALLOCATEMORE,
    lpFreeBuffer: ?LPFREEBUFFER,
    lpMalloc: ?*IMalloc,
    lpMapiSup: ?*anyopaque,
    lpStg: ?*IStorage,
    lpfMsgCallRelease: ?*?MSGCALLRELEASE,
    ulCallerData: u32,
    ulFlags: u32,
    lppMsg: ?*?*IMessage,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "mapi32" fn GetAttribIMsgOnIStg(
    lpObject: ?*anyopaque,
    lpPropTagArray: ?*SPropTagArray,
    lppPropAttrArray: ?*?*SPropAttrArray,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mapi32" fn SetAttribIMsgOnIStg(
    lpObject: ?*anyopaque,
    lpPropTags: ?*SPropTagArray,
    lpPropAttrs: ?*SPropAttrArray,
    lppPropProblems: ?*?*SPropProblemArray,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mapi32" fn MapStorageSCode(
    StgSCode: i32,
) callconv(@import("std").os.windows.WINAPI) i32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (19)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOLEAN = @import("../foundation.zig").BOOLEAN;
const BSTR = @import("../foundation.zig").BSTR;
const HRESULT = @import("../foundation.zig").HRESULT;
const IDispatch = @import("../system/com.zig").IDispatch;
const IEnumVARIANT = @import("../system/ole.zig").IEnumVARIANT;
const IMalloc = @import("../system/com.zig").IMalloc;
const IMessage = @import("../system/address_book.zig").IMessage;
const IPropertyStorage = @import("../system/com/structured_storage.zig").IPropertyStorage;
const ISequentialStream = @import("../system/com.zig").ISequentialStream;
const IStorage = @import("../system/com/structured_storage.zig").IStorage;
const IStream = @import("../system/com.zig").IStream;
const IUnknown = @import("../system/com.zig").IUnknown;
const LPALLOCATEBUFFER = @import("../system/address_book.zig").LPALLOCATEBUFFER;
const LPALLOCATEMORE = @import("../system/address_book.zig").LPALLOCATEMORE;
const LPFREEBUFFER = @import("../system/address_book.zig").LPFREEBUFFER;
const SAFEARRAY = @import("../system/com.zig").SAFEARRAY;
const SPropProblemArray = @import("../system/address_book.zig").SPropProblemArray;
const SPropTagArray = @import("../system/address_book.zig").SPropTagArray;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "MSGCALLRELEASE")) { _ = MSGCALLRELEASE; }

    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
