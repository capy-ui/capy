//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (2)
//--------------------------------------------------------------------------------
pub const CONDITION_TYPE = enum(i32) {
    AND_CONDITION = 0,
    OR_CONDITION = 1,
    NOT_CONDITION = 2,
    LEAF_CONDITION = 3,
};
pub const CT_AND_CONDITION = CONDITION_TYPE.AND_CONDITION;
pub const CT_OR_CONDITION = CONDITION_TYPE.OR_CONDITION;
pub const CT_NOT_CONDITION = CONDITION_TYPE.NOT_CONDITION;
pub const CT_LEAF_CONDITION = CONDITION_TYPE.LEAF_CONDITION;

pub const CONDITION_OPERATION = enum(i32) {
    IMPLICIT = 0,
    EQUAL = 1,
    NOTEQUAL = 2,
    LESSTHAN = 3,
    GREATERTHAN = 4,
    LESSTHANOREQUAL = 5,
    GREATERTHANOREQUAL = 6,
    VALUE_STARTSWITH = 7,
    VALUE_ENDSWITH = 8,
    VALUE_CONTAINS = 9,
    VALUE_NOTCONTAINS = 10,
    DOSWILDCARDS = 11,
    WORD_EQUAL = 12,
    WORD_STARTSWITH = 13,
    APPLICATION_SPECIFIC = 14,
};
pub const COP_IMPLICIT = CONDITION_OPERATION.IMPLICIT;
pub const COP_EQUAL = CONDITION_OPERATION.EQUAL;
pub const COP_NOTEQUAL = CONDITION_OPERATION.NOTEQUAL;
pub const COP_LESSTHAN = CONDITION_OPERATION.LESSTHAN;
pub const COP_GREATERTHAN = CONDITION_OPERATION.GREATERTHAN;
pub const COP_LESSTHANOREQUAL = CONDITION_OPERATION.LESSTHANOREQUAL;
pub const COP_GREATERTHANOREQUAL = CONDITION_OPERATION.GREATERTHANOREQUAL;
pub const COP_VALUE_STARTSWITH = CONDITION_OPERATION.VALUE_STARTSWITH;
pub const COP_VALUE_ENDSWITH = CONDITION_OPERATION.VALUE_ENDSWITH;
pub const COP_VALUE_CONTAINS = CONDITION_OPERATION.VALUE_CONTAINS;
pub const COP_VALUE_NOTCONTAINS = CONDITION_OPERATION.VALUE_NOTCONTAINS;
pub const COP_DOSWILDCARDS = CONDITION_OPERATION.DOSWILDCARDS;
pub const COP_WORD_EQUAL = CONDITION_OPERATION.WORD_EQUAL;
pub const COP_WORD_STARTSWITH = CONDITION_OPERATION.WORD_STARTSWITH;
pub const COP_APPLICATION_SPECIFIC = CONDITION_OPERATION.APPLICATION_SPECIFIC;


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (0)
//--------------------------------------------------------------------------------

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
