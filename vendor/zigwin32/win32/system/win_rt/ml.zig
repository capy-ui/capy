//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (5)
//--------------------------------------------------------------------------------
const IID_ILearningModelOperatorProviderNative_Value = Guid.initString("1adaa23a-eb67-41f3-aad8-5d984e9bacd4");
pub const IID_ILearningModelOperatorProviderNative = &IID_ILearningModelOperatorProviderNative_Value;
pub const ILearningModelOperatorProviderNative = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetRegistry: *const fn(
            self: *const ILearningModelOperatorProviderNative,
            ppOperatorRegistry: ?*?*IMLOperatorRegistry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetRegistry(self: *const ILearningModelOperatorProviderNative, ppOperatorRegistry: ?*?*IMLOperatorRegistry) callconv(.Inline) HRESULT {
        return self.vtable.GetRegistry(self, ppOperatorRegistry);
    }
};

const IID_ITensorNative_Value = Guid.initString("52f547ef-5b03-49b5-82d6-565f1ee0dd49");
pub const IID_ITensorNative = &IID_ITensorNative_Value;
pub const ITensorNative = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetBuffer: *const fn(
            self: *const ITensorNative,
            value: [*]?*u8,
            capacity: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetD3D12Resource: *const fn(
            self: *const ITensorNative,
            result: ?*?*ID3D12Resource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetBuffer(self: *const ITensorNative, value: [*]?*u8, capacity: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetBuffer(self, value, capacity);
    }
    pub fn GetD3D12Resource(self: *const ITensorNative, result: ?*?*ID3D12Resource) callconv(.Inline) HRESULT {
        return self.vtable.GetD3D12Resource(self, result);
    }
};

const IID_ITensorStaticsNative_Value = Guid.initString("39d055a4-66f6-4ebc-95d9-7a29ebe7690a");
pub const IID_ITensorStaticsNative = &IID_ITensorStaticsNative_Value;
pub const ITensorStaticsNative = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateFromD3D12Resource: *const fn(
            self: *const ITensorStaticsNative,
            value: ?*ID3D12Resource,
            shape: ?*i64,
            shapeCount: i32,
            result: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateFromD3D12Resource(self: *const ITensorStaticsNative, value: ?*ID3D12Resource, shape: ?*i64, shapeCount: i32, result: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.CreateFromD3D12Resource(self, value, shape, shapeCount, result);
    }
};

const IID_ILearningModelDeviceFactoryNative_Value = Guid.initString("1e9b31a1-662e-4ae0-af67-f63bb337e634");
pub const IID_ILearningModelDeviceFactoryNative = &IID_ILearningModelDeviceFactoryNative_Value;
pub const ILearningModelDeviceFactoryNative = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateFromD3D12CommandQueue: *const fn(
            self: *const ILearningModelDeviceFactoryNative,
            value: ?*ID3D12CommandQueue,
            result: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateFromD3D12CommandQueue(self: *const ILearningModelDeviceFactoryNative, value: ?*ID3D12CommandQueue, result: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.CreateFromD3D12CommandQueue(self, value, result);
    }
};

const IID_ILearningModelSessionOptionsNative_Value = Guid.initString("c71e953f-37b4-4564-8658-d8396866db0d");
pub const IID_ILearningModelSessionOptionsNative = &IID_ILearningModelSessionOptionsNative_Value;
pub const ILearningModelSessionOptionsNative = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetIntraOpNumThreadsOverride: *const fn(
            self: *const ILearningModelSessionOptionsNative,
            intraOpNumThreads: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetIntraOpNumThreadsOverride(self: *const ILearningModelSessionOptionsNative, intraOpNumThreads: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetIntraOpNumThreadsOverride(self, intraOpNumThreads);
    }
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (6)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const HRESULT = @import("../../foundation.zig").HRESULT;
const ID3D12CommandQueue = @import("../../graphics/direct3d12.zig").ID3D12CommandQueue;
const ID3D12Resource = @import("../../graphics/direct3d12.zig").ID3D12Resource;
const IMLOperatorRegistry = @import("../../ai/machine_learning/win_ml.zig").IMLOperatorRegistry;
const IUnknown = @import("../../system/com.zig").IUnknown;

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
