//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (4)
//--------------------------------------------------------------------------------
const IID_IHolographicCameraInterop_Value = Guid.initString("7cc1f9c5-6d02-41fa-9500-e1809eb48eec");
pub const IID_IHolographicCameraInterop = &IID_IHolographicCameraInterop_Value;
pub const IHolographicCameraInterop = extern union {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        CreateDirect3D12BackBufferResource: *const fn(
            self: *const IHolographicCameraInterop,
            pDevice: ?*ID3D12Device,
            pTexture2DDesc: ?*D3D12_RESOURCE_DESC,
            ppCreatedTexture2DResource: ?*?*ID3D12Resource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDirect3D12HardwareProtectedBackBufferResource: *const fn(
            self: *const IHolographicCameraInterop,
            pDevice: ?*ID3D12Device,
            pTexture2DDesc: ?*D3D12_RESOURCE_DESC,
            pProtectedResourceSession: ?*ID3D12ProtectedResourceSession,
            ppCreatedTexture2DResource: ?*?*ID3D12Resource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AcquireDirect3D12BufferResource: *const fn(
            self: *const IHolographicCameraInterop,
            pResourceToAcquire: ?*ID3D12Resource,
            pCommandQueue: ?*ID3D12CommandQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AcquireDirect3D12BufferResourceWithTimeout: *const fn(
            self: *const IHolographicCameraInterop,
            pResourceToAcquire: ?*ID3D12Resource,
            pCommandQueue: ?*ID3D12CommandQueue,
            duration: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnacquireDirect3D12BufferResource: *const fn(
            self: *const IHolographicCameraInterop,
            pResourceToUnacquire: ?*ID3D12Resource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IInspectable: IInspectable,
    IUnknown: IUnknown,
    pub fn CreateDirect3D12BackBufferResource(self: *const IHolographicCameraInterop, pDevice: ?*ID3D12Device, pTexture2DDesc: ?*D3D12_RESOURCE_DESC, ppCreatedTexture2DResource: ?*?*ID3D12Resource) callconv(.Inline) HRESULT {
        return self.vtable.CreateDirect3D12BackBufferResource(self, pDevice, pTexture2DDesc, ppCreatedTexture2DResource);
    }
    pub fn CreateDirect3D12HardwareProtectedBackBufferResource(self: *const IHolographicCameraInterop, pDevice: ?*ID3D12Device, pTexture2DDesc: ?*D3D12_RESOURCE_DESC, pProtectedResourceSession: ?*ID3D12ProtectedResourceSession, ppCreatedTexture2DResource: ?*?*ID3D12Resource) callconv(.Inline) HRESULT {
        return self.vtable.CreateDirect3D12HardwareProtectedBackBufferResource(self, pDevice, pTexture2DDesc, pProtectedResourceSession, ppCreatedTexture2DResource);
    }
    pub fn AcquireDirect3D12BufferResource(self: *const IHolographicCameraInterop, pResourceToAcquire: ?*ID3D12Resource, pCommandQueue: ?*ID3D12CommandQueue) callconv(.Inline) HRESULT {
        return self.vtable.AcquireDirect3D12BufferResource(self, pResourceToAcquire, pCommandQueue);
    }
    pub fn AcquireDirect3D12BufferResourceWithTimeout(self: *const IHolographicCameraInterop, pResourceToAcquire: ?*ID3D12Resource, pCommandQueue: ?*ID3D12CommandQueue, duration: u64) callconv(.Inline) HRESULT {
        return self.vtable.AcquireDirect3D12BufferResourceWithTimeout(self, pResourceToAcquire, pCommandQueue, duration);
    }
    pub fn UnacquireDirect3D12BufferResource(self: *const IHolographicCameraInterop, pResourceToUnacquire: ?*ID3D12Resource) callconv(.Inline) HRESULT {
        return self.vtable.UnacquireDirect3D12BufferResource(self, pResourceToUnacquire);
    }
};

const IID_IHolographicCameraRenderingParametersInterop_Value = Guid.initString("f75b68d6-d1fd-4707-aafd-fa6f4c0e3bf4");
pub const IID_IHolographicCameraRenderingParametersInterop = &IID_IHolographicCameraRenderingParametersInterop_Value;
pub const IHolographicCameraRenderingParametersInterop = extern union {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        CommitDirect3D12Resource: *const fn(
            self: *const IHolographicCameraRenderingParametersInterop,
            pColorResourceToCommit: ?*ID3D12Resource,
            pColorResourceFence: ?*ID3D12Fence,
            colorResourceFenceSignalValue: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitDirect3D12ResourceWithDepthData: *const fn(
            self: *const IHolographicCameraRenderingParametersInterop,
            pColorResourceToCommit: ?*ID3D12Resource,
            pColorResourceFence: ?*ID3D12Fence,
            colorResourceFenceSignalValue: u64,
            pDepthResourceToCommit: ?*ID3D12Resource,
            pDepthResourceFence: ?*ID3D12Fence,
            depthResourceFenceSignalValue: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IInspectable: IInspectable,
    IUnknown: IUnknown,
    pub fn CommitDirect3D12Resource(self: *const IHolographicCameraRenderingParametersInterop, pColorResourceToCommit: ?*ID3D12Resource, pColorResourceFence: ?*ID3D12Fence, colorResourceFenceSignalValue: u64) callconv(.Inline) HRESULT {
        return self.vtable.CommitDirect3D12Resource(self, pColorResourceToCommit, pColorResourceFence, colorResourceFenceSignalValue);
    }
    pub fn CommitDirect3D12ResourceWithDepthData(self: *const IHolographicCameraRenderingParametersInterop, pColorResourceToCommit: ?*ID3D12Resource, pColorResourceFence: ?*ID3D12Fence, colorResourceFenceSignalValue: u64, pDepthResourceToCommit: ?*ID3D12Resource, pDepthResourceFence: ?*ID3D12Fence, depthResourceFenceSignalValue: u64) callconv(.Inline) HRESULT {
        return self.vtable.CommitDirect3D12ResourceWithDepthData(self, pColorResourceToCommit, pColorResourceFence, colorResourceFenceSignalValue, pDepthResourceToCommit, pDepthResourceFence, depthResourceFenceSignalValue);
    }
};

const IID_IHolographicQuadLayerInterop_Value = Guid.initString("cfa688f0-639e-4a47-83d7-6b7f5ebf7fed");
pub const IID_IHolographicQuadLayerInterop = &IID_IHolographicQuadLayerInterop_Value;
pub const IHolographicQuadLayerInterop = extern union {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        CreateDirect3D12ContentBufferResource: *const fn(
            self: *const IHolographicQuadLayerInterop,
            pDevice: ?*ID3D12Device,
            pTexture2DDesc: ?*D3D12_RESOURCE_DESC,
            ppTexture2DResource: ?*?*ID3D12Resource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDirect3D12HardwareProtectedContentBufferResource: *const fn(
            self: *const IHolographicQuadLayerInterop,
            pDevice: ?*ID3D12Device,
            pTexture2DDesc: ?*D3D12_RESOURCE_DESC,
            pProtectedResourceSession: ?*ID3D12ProtectedResourceSession,
            ppCreatedTexture2DResource: ?*?*ID3D12Resource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AcquireDirect3D12BufferResource: *const fn(
            self: *const IHolographicQuadLayerInterop,
            pResourceToAcquire: ?*ID3D12Resource,
            pCommandQueue: ?*ID3D12CommandQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AcquireDirect3D12BufferResourceWithTimeout: *const fn(
            self: *const IHolographicQuadLayerInterop,
            pResourceToAcquire: ?*ID3D12Resource,
            pCommandQueue: ?*ID3D12CommandQueue,
            duration: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnacquireDirect3D12BufferResource: *const fn(
            self: *const IHolographicQuadLayerInterop,
            pResourceToUnacquire: ?*ID3D12Resource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IInspectable: IInspectable,
    IUnknown: IUnknown,
    pub fn CreateDirect3D12ContentBufferResource(self: *const IHolographicQuadLayerInterop, pDevice: ?*ID3D12Device, pTexture2DDesc: ?*D3D12_RESOURCE_DESC, ppTexture2DResource: ?*?*ID3D12Resource) callconv(.Inline) HRESULT {
        return self.vtable.CreateDirect3D12ContentBufferResource(self, pDevice, pTexture2DDesc, ppTexture2DResource);
    }
    pub fn CreateDirect3D12HardwareProtectedContentBufferResource(self: *const IHolographicQuadLayerInterop, pDevice: ?*ID3D12Device, pTexture2DDesc: ?*D3D12_RESOURCE_DESC, pProtectedResourceSession: ?*ID3D12ProtectedResourceSession, ppCreatedTexture2DResource: ?*?*ID3D12Resource) callconv(.Inline) HRESULT {
        return self.vtable.CreateDirect3D12HardwareProtectedContentBufferResource(self, pDevice, pTexture2DDesc, pProtectedResourceSession, ppCreatedTexture2DResource);
    }
    pub fn AcquireDirect3D12BufferResource(self: *const IHolographicQuadLayerInterop, pResourceToAcquire: ?*ID3D12Resource, pCommandQueue: ?*ID3D12CommandQueue) callconv(.Inline) HRESULT {
        return self.vtable.AcquireDirect3D12BufferResource(self, pResourceToAcquire, pCommandQueue);
    }
    pub fn AcquireDirect3D12BufferResourceWithTimeout(self: *const IHolographicQuadLayerInterop, pResourceToAcquire: ?*ID3D12Resource, pCommandQueue: ?*ID3D12CommandQueue, duration: u64) callconv(.Inline) HRESULT {
        return self.vtable.AcquireDirect3D12BufferResourceWithTimeout(self, pResourceToAcquire, pCommandQueue, duration);
    }
    pub fn UnacquireDirect3D12BufferResource(self: *const IHolographicQuadLayerInterop, pResourceToUnacquire: ?*ID3D12Resource) callconv(.Inline) HRESULT {
        return self.vtable.UnacquireDirect3D12BufferResource(self, pResourceToUnacquire);
    }
};

const IID_IHolographicQuadLayerUpdateParametersInterop_Value = Guid.initString("e5f549cd-c909-444f-8809-7cc18a9c8920");
pub const IID_IHolographicQuadLayerUpdateParametersInterop = &IID_IHolographicQuadLayerUpdateParametersInterop_Value;
pub const IHolographicQuadLayerUpdateParametersInterop = extern union {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        CommitDirect3D12Resource: *const fn(
            self: *const IHolographicQuadLayerUpdateParametersInterop,
            pColorResourceToCommit: ?*ID3D12Resource,
            pColorResourceFence: ?*ID3D12Fence,
            colorResourceFenceSignalValue: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IInspectable: IInspectable,
    IUnknown: IUnknown,
    pub fn CommitDirect3D12Resource(self: *const IHolographicQuadLayerUpdateParametersInterop, pColorResourceToCommit: ?*ID3D12Resource, pColorResourceFence: ?*ID3D12Fence, colorResourceFenceSignalValue: u64) callconv(.Inline) HRESULT {
        return self.vtable.CommitDirect3D12Resource(self, pColorResourceToCommit, pColorResourceFence, colorResourceFenceSignalValue);
    }
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (10)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const D3D12_RESOURCE_DESC = @import("../../graphics/direct3d12.zig").D3D12_RESOURCE_DESC;
const HRESULT = @import("../../foundation.zig").HRESULT;
const ID3D12CommandQueue = @import("../../graphics/direct3d12.zig").ID3D12CommandQueue;
const ID3D12Device = @import("../../graphics/direct3d12.zig").ID3D12Device;
const ID3D12Fence = @import("../../graphics/direct3d12.zig").ID3D12Fence;
const ID3D12ProtectedResourceSession = @import("../../graphics/direct3d12.zig").ID3D12ProtectedResourceSession;
const ID3D12Resource = @import("../../graphics/direct3d12.zig").ID3D12Resource;
const IInspectable = @import("../../system/win_rt.zig").IInspectable;
const IUnknown = @import("../../system/com.zig").IUnknown;

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
