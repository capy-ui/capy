//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (14)
//--------------------------------------------------------------------------------
pub const CALLFRAMEINFO = extern struct {
    iMethod: u32,
    fHasInValues: BOOL,
    fHasInOutValues: BOOL,
    fHasOutValues: BOOL,
    fDerivesFromIDispatch: BOOL,
    cInInterfacesMax: i32,
    cInOutInterfacesMax: i32,
    cOutInterfacesMax: i32,
    cTopLevelInInterfaces: i32,
    iid: Guid,
    cMethod: u32,
    cParams: u32,
};

pub const CALLFRAMEPARAMINFO = extern struct {
    fIn: BOOLEAN,
    fOut: BOOLEAN,
    stackOffset: u32,
    cbParam: u32,
};

pub const CALLFRAME_COPY = enum(i32) {
    NESTED = 1,
    INDEPENDENT = 2,
};
pub const CALLFRAME_COPY_NESTED = CALLFRAME_COPY.NESTED;
pub const CALLFRAME_COPY_INDEPENDENT = CALLFRAME_COPY.INDEPENDENT;

pub const CALLFRAME_FREE = enum(i32) {
    NONE = 0,
    IN = 1,
    INOUT = 2,
    OUT = 4,
    TOP_INOUT = 8,
    TOP_OUT = 16,
    ALL = 31,
};
pub const CALLFRAME_FREE_NONE = CALLFRAME_FREE.NONE;
pub const CALLFRAME_FREE_IN = CALLFRAME_FREE.IN;
pub const CALLFRAME_FREE_INOUT = CALLFRAME_FREE.INOUT;
pub const CALLFRAME_FREE_OUT = CALLFRAME_FREE.OUT;
pub const CALLFRAME_FREE_TOP_INOUT = CALLFRAME_FREE.TOP_INOUT;
pub const CALLFRAME_FREE_TOP_OUT = CALLFRAME_FREE.TOP_OUT;
pub const CALLFRAME_FREE_ALL = CALLFRAME_FREE.ALL;

pub const CALLFRAME_NULL = enum(i32) {
    NONE = 0,
    INOUT = 2,
    OUT = 4,
    ALL = 6,
};
pub const CALLFRAME_NULL_NONE = CALLFRAME_NULL.NONE;
pub const CALLFRAME_NULL_INOUT = CALLFRAME_NULL.INOUT;
pub const CALLFRAME_NULL_OUT = CALLFRAME_NULL.OUT;
pub const CALLFRAME_NULL_ALL = CALLFRAME_NULL.ALL;

pub const CALLFRAME_WALK = enum(i32) {
    IN = 1,
    INOUT = 2,
    OUT = 4,
};
pub const CALLFRAME_WALK_IN = CALLFRAME_WALK.IN;
pub const CALLFRAME_WALK_INOUT = CALLFRAME_WALK.INOUT;
pub const CALLFRAME_WALK_OUT = CALLFRAME_WALK.OUT;

pub const CALLFRAME_MARSHALCONTEXT = extern struct {
    fIn: BOOLEAN,
    dwDestContext: u32,
    pvDestContext: ?*anyopaque,
    punkReserved: ?*IUnknown,
    guidTransferSyntax: Guid,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ICallFrame_Value = Guid.initString("d573b4b0-894e-11d2-b8b6-00c04fb9618a");
pub const IID_ICallFrame = &IID_ICallFrame_Value;
pub const ICallFrame = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInfo: *const fn(
            self: *const ICallFrame,
            pInfo: ?*CALLFRAMEINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIIDAndMethod: *const fn(
            self: *const ICallFrame,
            pIID: ?*Guid,
            piMethod: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNames: *const fn(
            self: *const ICallFrame,
            pwszInterface: ?*?PWSTR,
            pwszMethod: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStackLocation: *const fn(
            self: *const ICallFrame,
        ) callconv(@import("std").os.windows.WINAPI) ?*anyopaque,
        SetStackLocation: *const fn(
            self: *const ICallFrame,
            pvStack: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetReturnValue: *const fn(
            self: *const ICallFrame,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetReturnValue: *const fn(
            self: *const ICallFrame,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParamInfo: *const fn(
            self: *const ICallFrame,
            iparam: u32,
            pInfo: ?*CALLFRAMEPARAMINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetParam: *const fn(
            self: *const ICallFrame,
            iparam: u32,
            pvar: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParam: *const fn(
            self: *const ICallFrame,
            iparam: u32,
            pvar: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Copy: *const fn(
            self: *const ICallFrame,
            copyControl: CALLFRAME_COPY,
            pWalker: ?*ICallFrameWalker,
            ppFrame: ?*?*ICallFrame,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Free: *const fn(
            self: *const ICallFrame,
            pframeArgsDest: ?*ICallFrame,
            pWalkerDestFree: ?*ICallFrameWalker,
            pWalkerCopy: ?*ICallFrameWalker,
            freeFlags: u32,
            pWalkerFree: ?*ICallFrameWalker,
            nullFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FreeParam: *const fn(
            self: *const ICallFrame,
            iparam: u32,
            freeFlags: u32,
            pWalkerFree: ?*ICallFrameWalker,
            nullFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WalkFrame: *const fn(
            self: *const ICallFrame,
            walkWhat: u32,
            pWalker: ?*ICallFrameWalker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMarshalSizeMax: *const fn(
            self: *const ICallFrame,
            pmshlContext: ?*CALLFRAME_MARSHALCONTEXT,
            mshlflags: MSHLFLAGS,
            pcbBufferNeeded: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Marshal: *const fn(
            self: *const ICallFrame,
            pmshlContext: ?*CALLFRAME_MARSHALCONTEXT,
            mshlflags: MSHLFLAGS,
            pBuffer: [*]u8,
            cbBuffer: u32,
            pcbBufferUsed: ?*u32,
            pdataRep: ?*u32,
            prpcFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unmarshal: *const fn(
            self: *const ICallFrame,
            pBuffer: [*]u8,
            cbBuffer: u32,
            dataRep: u32,
            pcontext: ?*CALLFRAME_MARSHALCONTEXT,
            pcbUnmarshalled: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseMarshalData: *const fn(
            self: *const ICallFrame,
            pBuffer: [*]u8,
            cbBuffer: u32,
            ibFirstRelease: u32,
            dataRep: u32,
            pcontext: ?*CALLFRAME_MARSHALCONTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Invoke: *const fn(
            self: *const ICallFrame,
            pvReceiver: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetInfo(self: *const ICallFrame, pInfo: ?*CALLFRAMEINFO) callconv(.Inline) HRESULT {
        return self.vtable.GetInfo(self, pInfo);
    }
    pub fn GetIIDAndMethod(self: *const ICallFrame, pIID: ?*Guid, piMethod: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetIIDAndMethod(self, pIID, piMethod);
    }
    pub fn GetNames(self: *const ICallFrame, pwszInterface: ?*?PWSTR, pwszMethod: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetNames(self, pwszInterface, pwszMethod);
    }
    pub fn GetStackLocation(self: *const ICallFrame) callconv(.Inline) ?*anyopaque {
        return self.vtable.GetStackLocation(self);
    }
    pub fn SetStackLocation(self: *const ICallFrame, pvStack: ?*anyopaque) callconv(.Inline) void {
        return self.vtable.SetStackLocation(self, pvStack);
    }
    pub fn SetReturnValue(self: *const ICallFrame, hr: HRESULT) callconv(.Inline) void {
        return self.vtable.SetReturnValue(self, hr);
    }
    pub fn GetReturnValue(self: *const ICallFrame) callconv(.Inline) HRESULT {
        return self.vtable.GetReturnValue(self);
    }
    pub fn GetParamInfo(self: *const ICallFrame, iparam: u32, pInfo: ?*CALLFRAMEPARAMINFO) callconv(.Inline) HRESULT {
        return self.vtable.GetParamInfo(self, iparam, pInfo);
    }
    pub fn SetParam(self: *const ICallFrame, iparam: u32, pvar: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.SetParam(self, iparam, pvar);
    }
    pub fn GetParam(self: *const ICallFrame, iparam: u32, pvar: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetParam(self, iparam, pvar);
    }
    pub fn Copy(self: *const ICallFrame, copyControl: CALLFRAME_COPY, pWalker: ?*ICallFrameWalker, ppFrame: ?*?*ICallFrame) callconv(.Inline) HRESULT {
        return self.vtable.Copy(self, copyControl, pWalker, ppFrame);
    }
    pub fn Free(self: *const ICallFrame, pframeArgsDest: ?*ICallFrame, pWalkerDestFree: ?*ICallFrameWalker, pWalkerCopy: ?*ICallFrameWalker, freeFlags: u32, pWalkerFree: ?*ICallFrameWalker, nullFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.Free(self, pframeArgsDest, pWalkerDestFree, pWalkerCopy, freeFlags, pWalkerFree, nullFlags);
    }
    pub fn FreeParam(self: *const ICallFrame, iparam: u32, freeFlags: u32, pWalkerFree: ?*ICallFrameWalker, nullFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.FreeParam(self, iparam, freeFlags, pWalkerFree, nullFlags);
    }
    pub fn WalkFrame(self: *const ICallFrame, walkWhat: u32, pWalker: ?*ICallFrameWalker) callconv(.Inline) HRESULT {
        return self.vtable.WalkFrame(self, walkWhat, pWalker);
    }
    pub fn GetMarshalSizeMax(self: *const ICallFrame, pmshlContext: ?*CALLFRAME_MARSHALCONTEXT, mshlflags: MSHLFLAGS, pcbBufferNeeded: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetMarshalSizeMax(self, pmshlContext, mshlflags, pcbBufferNeeded);
    }
    pub fn Marshal(self: *const ICallFrame, pmshlContext: ?*CALLFRAME_MARSHALCONTEXT, mshlflags: MSHLFLAGS, pBuffer: [*]u8, cbBuffer: u32, pcbBufferUsed: ?*u32, pdataRep: ?*u32, prpcFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Marshal(self, pmshlContext, mshlflags, pBuffer, cbBuffer, pcbBufferUsed, pdataRep, prpcFlags);
    }
    pub fn Unmarshal(self: *const ICallFrame, pBuffer: [*]u8, cbBuffer: u32, dataRep: u32, pcontext: ?*CALLFRAME_MARSHALCONTEXT, pcbUnmarshalled: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Unmarshal(self, pBuffer, cbBuffer, dataRep, pcontext, pcbUnmarshalled);
    }
    pub fn ReleaseMarshalData(self: *const ICallFrame, pBuffer: [*]u8, cbBuffer: u32, ibFirstRelease: u32, dataRep: u32, pcontext: ?*CALLFRAME_MARSHALCONTEXT) callconv(.Inline) HRESULT {
        return self.vtable.ReleaseMarshalData(self, pBuffer, cbBuffer, ibFirstRelease, dataRep, pcontext);
    }
    pub fn Invoke(self: *const ICallFrame, pvReceiver: ?*anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.Invoke(self, pvReceiver);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ICallIndirect_Value = Guid.initString("d573b4b1-894e-11d2-b8b6-00c04fb9618a");
pub const IID_ICallIndirect = &IID_ICallIndirect_Value;
pub const ICallIndirect = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CallIndirect: *const fn(
            self: *const ICallIndirect,
            phrReturn: ?*HRESULT,
            iMethod: u32,
            pvArgs: ?*anyopaque,
            cbArgs: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMethodInfo: *const fn(
            self: *const ICallIndirect,
            iMethod: u32,
            pInfo: ?*CALLFRAMEINFO,
            pwszMethod: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStackSize: *const fn(
            self: *const ICallIndirect,
            iMethod: u32,
            cbArgs: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIID: *const fn(
            self: *const ICallIndirect,
            piid: ?*Guid,
            pfDerivesFromIDispatch: ?*BOOL,
            pcMethod: ?*u32,
            pwszInterface: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CallIndirect(self: *const ICallIndirect, phrReturn: ?*HRESULT, iMethod: u32, pvArgs: ?*anyopaque, cbArgs: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.CallIndirect(self, phrReturn, iMethod, pvArgs, cbArgs);
    }
    pub fn GetMethodInfo(self: *const ICallIndirect, iMethod: u32, pInfo: ?*CALLFRAMEINFO, pwszMethod: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetMethodInfo(self, iMethod, pInfo, pwszMethod);
    }
    pub fn GetStackSize(self: *const ICallIndirect, iMethod: u32, cbArgs: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetStackSize(self, iMethod, cbArgs);
    }
    pub fn GetIID(self: *const ICallIndirect, piid: ?*Guid, pfDerivesFromIDispatch: ?*BOOL, pcMethod: ?*u32, pwszInterface: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetIID(self, piid, pfDerivesFromIDispatch, pcMethod, pwszInterface);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ICallInterceptor_Value = Guid.initString("60c7ca75-896d-11d2-b8b6-00c04fb9618a");
pub const IID_ICallInterceptor = &IID_ICallInterceptor_Value;
pub const ICallInterceptor = extern union {
    pub const VTable = extern struct {
        base: ICallIndirect.VTable,
        RegisterSink: *const fn(
            self: *const ICallInterceptor,
            psink: ?*ICallFrameEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRegisteredSink: *const fn(
            self: *const ICallInterceptor,
            ppsink: ?*?*ICallFrameEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICallIndirect: ICallIndirect,
    IUnknown: IUnknown,
    pub fn RegisterSink(self: *const ICallInterceptor, psink: ?*ICallFrameEvents) callconv(.Inline) HRESULT {
        return self.vtable.RegisterSink(self, psink);
    }
    pub fn GetRegisteredSink(self: *const ICallInterceptor, ppsink: ?*?*ICallFrameEvents) callconv(.Inline) HRESULT {
        return self.vtable.GetRegisteredSink(self, ppsink);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ICallFrameEvents_Value = Guid.initString("fd5e0843-fc91-11d0-97d7-00c04fb9618a");
pub const IID_ICallFrameEvents = &IID_ICallFrameEvents_Value;
pub const ICallFrameEvents = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnCall: *const fn(
            self: *const ICallFrameEvents,
            pFrame: ?*ICallFrame,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnCall(self: *const ICallFrameEvents, pFrame: ?*ICallFrame) callconv(.Inline) HRESULT {
        return self.vtable.OnCall(self, pFrame);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ICallUnmarshal_Value = Guid.initString("5333b003-2e42-11d2-b89d-00c04fb9618a");
pub const IID_ICallUnmarshal = &IID_ICallUnmarshal_Value;
pub const ICallUnmarshal = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Unmarshal: *const fn(
            self: *const ICallUnmarshal,
            iMethod: u32,
            pBuffer: [*]u8,
            cbBuffer: u32,
            fForceBufferCopy: BOOL,
            dataRep: u32,
            pcontext: ?*CALLFRAME_MARSHALCONTEXT,
            pcbUnmarshalled: ?*u32,
            ppFrame: ?*?*ICallFrame,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseMarshalData: *const fn(
            self: *const ICallUnmarshal,
            iMethod: u32,
            pBuffer: [*]u8,
            cbBuffer: u32,
            ibFirstRelease: u32,
            dataRep: u32,
            pcontext: ?*CALLFRAME_MARSHALCONTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Unmarshal(self: *const ICallUnmarshal, iMethod: u32, pBuffer: [*]u8, cbBuffer: u32, fForceBufferCopy: BOOL, dataRep: u32, pcontext: ?*CALLFRAME_MARSHALCONTEXT, pcbUnmarshalled: ?*u32, ppFrame: ?*?*ICallFrame) callconv(.Inline) HRESULT {
        return self.vtable.Unmarshal(self, iMethod, pBuffer, cbBuffer, fForceBufferCopy, dataRep, pcontext, pcbUnmarshalled, ppFrame);
    }
    pub fn ReleaseMarshalData(self: *const ICallUnmarshal, iMethod: u32, pBuffer: [*]u8, cbBuffer: u32, ibFirstRelease: u32, dataRep: u32, pcontext: ?*CALLFRAME_MARSHALCONTEXT) callconv(.Inline) HRESULT {
        return self.vtable.ReleaseMarshalData(self, iMethod, pBuffer, cbBuffer, ibFirstRelease, dataRep, pcontext);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ICallFrameWalker_Value = Guid.initString("08b23919-392d-11d2-b8a4-00c04fb9618a");
pub const IID_ICallFrameWalker = &IID_ICallFrameWalker_Value;
pub const ICallFrameWalker = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnWalkInterface: *const fn(
            self: *const ICallFrameWalker,
            iid: ?*const Guid,
            ppvInterface: ?*?*anyopaque,
            fIn: BOOL,
            fOut: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnWalkInterface(self: *const ICallFrameWalker, iid: ?*const Guid, ppvInterface: ?*?*anyopaque, fIn: BOOL, fOut: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.OnWalkInterface(self, iid, ppvInterface, fIn, fOut);
    }
};

const IID_IInterfaceRelated_Value = Guid.initString("d1fb5a79-7706-11d1-adba-00c04fc2adc0");
pub const IID_IInterfaceRelated = &IID_IInterfaceRelated_Value;
pub const IInterfaceRelated = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetIID: *const fn(
            self: *const IInterfaceRelated,
            iid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIID: *const fn(
            self: *const IInterfaceRelated,
            piid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetIID(self: *const IInterfaceRelated, iid: ?*const Guid) callconv(.Inline) HRESULT {
        return self.vtable.SetIID(self, iid);
    }
    pub fn GetIID(self: *const IInterfaceRelated, piid: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetIID(self, piid);
    }
};


//--------------------------------------------------------------------------------
// Section: Functions (2)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn CoGetInterceptor(
    iidIntercepted: ?*const Guid,
    punkOuter: ?*IUnknown,
    iid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "ole32" fn CoGetInterceptorFromTypeInfo(
    iidIntercepted: ?*const Guid,
    punkOuter: ?*IUnknown,
    typeInfo: ?*ITypeInfo,
    iid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (9)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const BOOL = @import("../../foundation.zig").BOOL;
const BOOLEAN = @import("../../foundation.zig").BOOLEAN;
const HRESULT = @import("../../foundation.zig").HRESULT;
const ITypeInfo = @import("../../system/com.zig").ITypeInfo;
const IUnknown = @import("../../system/com.zig").IUnknown;
const MSHLFLAGS = @import("../../system/com.zig").MSHLFLAGS;
const PWSTR = @import("../../foundation.zig").PWSTR;
const VARIANT = @import("../../system/com.zig").VARIANT;

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
