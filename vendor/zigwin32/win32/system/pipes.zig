//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (4)
//--------------------------------------------------------------------------------
pub const PIPE_UNLIMITED_INSTANCES = @as(u32, 255);
pub const NMPWAIT_WAIT_FOREVER = @as(u32, 4294967295);
pub const NMPWAIT_NOWAIT = @as(u32, 1);
pub const NMPWAIT_USE_DEFAULT_WAIT = @as(u32, 0);

//--------------------------------------------------------------------------------
// Section: Types (1)
//--------------------------------------------------------------------------------
pub const NAMED_PIPE_MODE = packed struct(u32) {
    NOWAIT: u1 = 0,
    READMODE_MESSAGE: u1 = 0,
    TYPE_MESSAGE: u1 = 0,
    REJECT_REMOTE_CLIENTS: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
    // SERVER_END (bit index 0) conflicts with NOWAIT
};
pub const PIPE_WAIT = NAMED_PIPE_MODE{ };
pub const PIPE_NOWAIT = NAMED_PIPE_MODE{ .NOWAIT = 1 };
pub const PIPE_READMODE_BYTE = NAMED_PIPE_MODE{ };
pub const PIPE_READMODE_MESSAGE = NAMED_PIPE_MODE{ .READMODE_MESSAGE = 1 };
pub const PIPE_CLIENT_END = NAMED_PIPE_MODE{ };
pub const PIPE_SERVER_END = NAMED_PIPE_MODE{ .NOWAIT = 1 };
pub const PIPE_TYPE_BYTE = NAMED_PIPE_MODE{ };
pub const PIPE_TYPE_MESSAGE = NAMED_PIPE_MODE{ .TYPE_MESSAGE = 1 };
pub const PIPE_ACCEPT_REMOTE_CLIENTS = NAMED_PIPE_MODE{ };
pub const PIPE_REJECT_REMOTE_CLIENTS = NAMED_PIPE_MODE{ .REJECT_REMOTE_CLIENTS = 1 };


//--------------------------------------------------------------------------------
// Section: Functions (22)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "kernel32" fn CreatePipe(
    hReadPipe: ?*?HANDLE,
    hWritePipe: ?*?HANDLE,
    lpPipeAttributes: ?*SECURITY_ATTRIBUTES,
    nSize: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "kernel32" fn ConnectNamedPipe(
    hNamedPipe: ?HANDLE,
    lpOverlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "kernel32" fn DisconnectNamedPipe(
    hNamedPipe: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "kernel32" fn SetNamedPipeHandleState(
    hNamedPipe: ?HANDLE,
    lpMode: ?*NAMED_PIPE_MODE,
    lpMaxCollectionCount: ?*u32,
    lpCollectDataTimeout: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "kernel32" fn PeekNamedPipe(
    hNamedPipe: ?HANDLE,
    // TODO: what to do with BytesParamIndex 2?
    lpBuffer: ?*anyopaque,
    nBufferSize: u32,
    lpBytesRead: ?*u32,
    lpTotalBytesAvail: ?*u32,
    lpBytesLeftThisMessage: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "kernel32" fn TransactNamedPipe(
    hNamedPipe: ?HANDLE,
    // TODO: what to do with BytesParamIndex 2?
    lpInBuffer: ?*anyopaque,
    nInBufferSize: u32,
    // TODO: what to do with BytesParamIndex 4?
    lpOutBuffer: ?*anyopaque,
    nOutBufferSize: u32,
    lpBytesRead: ?*u32,
    lpOverlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "kernel32" fn CreateNamedPipeW(
    lpName: ?[*:0]const u16,
    dwOpenMode: FILE_FLAGS_AND_ATTRIBUTES,
    dwPipeMode: NAMED_PIPE_MODE,
    nMaxInstances: u32,
    nOutBufferSize: u32,
    nInBufferSize: u32,
    nDefaultTimeOut: u32,
    lpSecurityAttributes: ?*SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "kernel32" fn WaitNamedPipeW(
    lpNamedPipeName: ?[*:0]const u16,
    nTimeOut: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "kernel32" fn GetNamedPipeClientComputerNameW(
    Pipe: ?HANDLE,
    // TODO: what to do with BytesParamIndex 2?
    ClientComputerName: ?PWSTR,
    ClientComputerNameLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn ImpersonateNamedPipeClient(
    hNamedPipe: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "kernel32" fn GetNamedPipeInfo(
    hNamedPipe: ?HANDLE,
    lpFlags: ?*NAMED_PIPE_MODE,
    lpOutBufferSize: ?*u32,
    lpInBufferSize: ?*u32,
    lpMaxInstances: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "kernel32" fn GetNamedPipeHandleStateW(
    hNamedPipe: ?HANDLE,
    lpState: ?*NAMED_PIPE_MODE,
    lpCurInstances: ?*u32,
    lpMaxCollectionCount: ?*u32,
    lpCollectDataTimeout: ?*u32,
    lpUserName: ?[*:0]u16,
    nMaxUserNameSize: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "kernel32" fn CallNamedPipeW(
    lpNamedPipeName: ?[*:0]const u16,
    // TODO: what to do with BytesParamIndex 2?
    lpInBuffer: ?*anyopaque,
    nInBufferSize: u32,
    // TODO: what to do with BytesParamIndex 4?
    lpOutBuffer: ?*anyopaque,
    nOutBufferSize: u32,
    lpBytesRead: ?*u32,
    nTimeOut: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "kernel32" fn CreateNamedPipeA(
    lpName: ?[*:0]const u8,
    dwOpenMode: FILE_FLAGS_AND_ATTRIBUTES,
    dwPipeMode: NAMED_PIPE_MODE,
    nMaxInstances: u32,
    nOutBufferSize: u32,
    nInBufferSize: u32,
    nDefaultTimeOut: u32,
    lpSecurityAttributes: ?*SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "kernel32" fn GetNamedPipeHandleStateA(
    hNamedPipe: ?HANDLE,
    lpState: ?*NAMED_PIPE_MODE,
    lpCurInstances: ?*u32,
    lpMaxCollectionCount: ?*u32,
    lpCollectDataTimeout: ?*u32,
    lpUserName: ?[*:0]u8,
    nMaxUserNameSize: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "kernel32" fn CallNamedPipeA(
    lpNamedPipeName: ?[*:0]const u8,
    // TODO: what to do with BytesParamIndex 2?
    lpInBuffer: ?*anyopaque,
    nInBufferSize: u32,
    // TODO: what to do with BytesParamIndex 4?
    lpOutBuffer: ?*anyopaque,
    nOutBufferSize: u32,
    lpBytesRead: ?*u32,
    nTimeOut: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "kernel32" fn WaitNamedPipeA(
    lpNamedPipeName: ?[*:0]const u8,
    nTimeOut: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "kernel32" fn GetNamedPipeClientComputerNameA(
    Pipe: ?HANDLE,
    // TODO: what to do with BytesParamIndex 2?
    ClientComputerName: ?PSTR,
    ClientComputerNameLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "kernel32" fn GetNamedPipeClientProcessId(
    Pipe: ?HANDLE,
    ClientProcessId: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "kernel32" fn GetNamedPipeClientSessionId(
    Pipe: ?HANDLE,
    ClientSessionId: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "kernel32" fn GetNamedPipeServerProcessId(
    Pipe: ?HANDLE,
    ServerProcessId: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "kernel32" fn GetNamedPipeServerSessionId(
    Pipe: ?HANDLE,
    ServerSessionId: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (5)
//--------------------------------------------------------------------------------
pub const CreateNamedPipe = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().CreateNamedPipeA,
    .wide => @This().CreateNamedPipeW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CreateNamedPipe' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const WaitNamedPipe = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().WaitNamedPipeA,
    .wide => @This().WaitNamedPipeW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'WaitNamedPipe' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetNamedPipeClientComputerName = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetNamedPipeClientComputerNameA,
    .wide => @This().GetNamedPipeClientComputerNameW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetNamedPipeClientComputerName' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetNamedPipeHandleState = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetNamedPipeHandleStateA,
    .wide => @This().GetNamedPipeHandleStateW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetNamedPipeHandleState' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CallNamedPipe = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().CallNamedPipeA,
    .wide => @This().CallNamedPipeW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CallNamedPipe' requires that UNICODE be set to true or false in the root module",
    ),
};
//--------------------------------------------------------------------------------
// Section: Imports (7)
//--------------------------------------------------------------------------------
const BOOL = @import("../foundation.zig").BOOL;
const FILE_FLAGS_AND_ATTRIBUTES = @import("../storage/file_system.zig").FILE_FLAGS_AND_ATTRIBUTES;
const HANDLE = @import("../foundation.zig").HANDLE;
const OVERLAPPED = @import("../system/io.zig").OVERLAPPED;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;
const SECURITY_ATTRIBUTES = @import("../security.zig").SECURITY_ATTRIBUTES;

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
