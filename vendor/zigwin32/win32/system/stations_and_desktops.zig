//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (11)
//--------------------------------------------------------------------------------
pub const BROADCAST_SYSTEM_MESSAGE_FLAGS = packed struct(u32) {
    QUERY: u1 = 0,
    IGNORECURRENTTASK: u1 = 0,
    FLUSHDISK: u1 = 0,
    NOHANG: u1 = 0,
    POSTMESSAGE: u1 = 0,
    FORCEIFHUNG: u1 = 0,
    NOTIMEOUTIFNOTHUNG: u1 = 0,
    ALLOWSFW: u1 = 0,
    SENDNOTIFYMESSAGE: u1 = 0,
    RETURNHDESK: u1 = 0,
    LUID: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const BSF_ALLOWSFW = BROADCAST_SYSTEM_MESSAGE_FLAGS{ .ALLOWSFW = 1 };
pub const BSF_FLUSHDISK = BROADCAST_SYSTEM_MESSAGE_FLAGS{ .FLUSHDISK = 1 };
pub const BSF_FORCEIFHUNG = BROADCAST_SYSTEM_MESSAGE_FLAGS{ .FORCEIFHUNG = 1 };
pub const BSF_IGNORECURRENTTASK = BROADCAST_SYSTEM_MESSAGE_FLAGS{ .IGNORECURRENTTASK = 1 };
pub const BSF_NOHANG = BROADCAST_SYSTEM_MESSAGE_FLAGS{ .NOHANG = 1 };
pub const BSF_NOTIMEOUTIFNOTHUNG = BROADCAST_SYSTEM_MESSAGE_FLAGS{ .NOTIMEOUTIFNOTHUNG = 1 };
pub const BSF_POSTMESSAGE = BROADCAST_SYSTEM_MESSAGE_FLAGS{ .POSTMESSAGE = 1 };
pub const BSF_QUERY = BROADCAST_SYSTEM_MESSAGE_FLAGS{ .QUERY = 1 };
pub const BSF_SENDNOTIFYMESSAGE = BROADCAST_SYSTEM_MESSAGE_FLAGS{ .SENDNOTIFYMESSAGE = 1 };
pub const BSF_LUID = BROADCAST_SYSTEM_MESSAGE_FLAGS{ .LUID = 1 };
pub const BSF_RETURNHDESK = BROADCAST_SYSTEM_MESSAGE_FLAGS{ .RETURNHDESK = 1 };

pub const BROADCAST_SYSTEM_MESSAGE_INFO = packed struct(u32) {
    _0: u1 = 0,
    _1: u1 = 0,
    _2: u1 = 0,
    PPLICATIONS: u1 = 0,
    LLDESKTOPS: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const BSM_ALLCOMPONENTS = BROADCAST_SYSTEM_MESSAGE_INFO{ };
pub const BSM_ALLDESKTOPS = BROADCAST_SYSTEM_MESSAGE_INFO{ .LLDESKTOPS = 1 };
pub const BSM_APPLICATIONS = BROADCAST_SYSTEM_MESSAGE_INFO{ .PPLICATIONS = 1 };

pub const USER_OBJECT_INFORMATION_INDEX = enum(u32) {
    FLAGS = 1,
    HEAPSIZE = 5,
    IO = 6,
    NAME = 2,
    TYPE = 3,
    USER_SID = 4,
};
pub const UOI_FLAGS = USER_OBJECT_INFORMATION_INDEX.FLAGS;
pub const UOI_HEAPSIZE = USER_OBJECT_INFORMATION_INDEX.HEAPSIZE;
pub const UOI_IO = USER_OBJECT_INFORMATION_INDEX.IO;
pub const UOI_NAME = USER_OBJECT_INFORMATION_INDEX.NAME;
pub const UOI_TYPE = USER_OBJECT_INFORMATION_INDEX.TYPE;
pub const UOI_USER_SID = USER_OBJECT_INFORMATION_INDEX.USER_SID;

pub const WINSTAENUMPROCA = *const fn(
    param0: ?PSTR,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const WINSTAENUMPROCW = *const fn(
    param0: ?PWSTR,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const DESKTOPENUMPROCA = *const fn(
    param0: ?PSTR,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const DESKTOPENUMPROCW = *const fn(
    param0: ?PWSTR,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type has a FreeFunc 'CloseWindowStation', what can Zig do with this information?
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HWINSTA = *opaque{};

// TODO: this type has a FreeFunc 'CloseDesktop', what can Zig do with this information?
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HDESK = *opaque{};

pub const USEROBJECTFLAGS = extern struct {
    fInherit: BOOL,
    fReserved: BOOL,
    dwFlags: u32,
};

pub const BSMINFO = extern struct {
    cbSize: u32,
    hdesk: ?HDESK,
    hwnd: ?HWND,
    luid: LUID,
};


//--------------------------------------------------------------------------------
// Section: Functions (31)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CreateDesktopA(
    lpszDesktop: ?[*:0]const u8,
    lpszDevice: ?[*:0]const u8,
    pDevmode: ?*DEVMODEA,
    dwFlags: u32,
    dwDesiredAccess: u32,
    lpsa: ?*SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) ?HDESK;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CreateDesktopW(
    lpszDesktop: ?[*:0]const u16,
    lpszDevice: ?[*:0]const u16,
    pDevmode: ?*DEVMODEW,
    dwFlags: u32,
    dwDesiredAccess: u32,
    lpsa: ?*SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) ?HDESK;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "user32" fn CreateDesktopExA(
    lpszDesktop: ?[*:0]const u8,
    lpszDevice: ?[*:0]const u8,
    pDevmode: ?*DEVMODEA,
    dwFlags: u32,
    dwDesiredAccess: u32,
    lpsa: ?*SECURITY_ATTRIBUTES,
    ulHeapSize: u32,
    pvoid: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) ?HDESK;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "user32" fn CreateDesktopExW(
    lpszDesktop: ?[*:0]const u16,
    lpszDevice: ?[*:0]const u16,
    pDevmode: ?*DEVMODEW,
    dwFlags: u32,
    dwDesiredAccess: u32,
    lpsa: ?*SECURITY_ATTRIBUTES,
    ulHeapSize: u32,
    pvoid: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) ?HDESK;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn OpenDesktopA(
    lpszDesktop: ?[*:0]const u8,
    dwFlags: u32,
    fInherit: BOOL,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) ?HDESK;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn OpenDesktopW(
    lpszDesktop: ?[*:0]const u16,
    dwFlags: u32,
    fInherit: BOOL,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) ?HDESK;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn OpenInputDesktop(
    dwFlags: u32,
    fInherit: BOOL,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) ?HDESK;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn EnumDesktopsA(
    hwinsta: ?HWINSTA,
    lpEnumFunc: ?DESKTOPENUMPROCA,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn EnumDesktopsW(
    hwinsta: ?HWINSTA,
    lpEnumFunc: ?DESKTOPENUMPROCW,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn EnumDesktopWindows(
    hDesktop: ?HDESK,
    lpfn: ?WNDENUMPROC,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SwitchDesktop(
    hDesktop: ?HDESK,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetThreadDesktop(
    hDesktop: ?HDESK,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CloseDesktop(
    hDesktop: ?HDESK,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetThreadDesktop(
    dwThreadId: u32,
) callconv(@import("std").os.windows.WINAPI) ?HDESK;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CreateWindowStationA(
    lpwinsta: ?[*:0]const u8,
    dwFlags: u32,
    dwDesiredAccess: u32,
    lpsa: ?*SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) ?HWINSTA;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CreateWindowStationW(
    lpwinsta: ?[*:0]const u16,
    dwFlags: u32,
    dwDesiredAccess: u32,
    lpsa: ?*SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) ?HWINSTA;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn OpenWindowStationA(
    lpszWinSta: ?[*:0]const u8,
    fInherit: BOOL,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) ?HWINSTA;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn OpenWindowStationW(
    lpszWinSta: ?[*:0]const u16,
    fInherit: BOOL,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) ?HWINSTA;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn EnumWindowStationsA(
    lpEnumFunc: ?WINSTAENUMPROCA,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn EnumWindowStationsW(
    lpEnumFunc: ?WINSTAENUMPROCW,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CloseWindowStation(
    hWinSta: ?HWINSTA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetProcessWindowStation(
    hWinSta: ?HWINSTA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetProcessWindowStation(
) callconv(@import("std").os.windows.WINAPI) ?HWINSTA;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetUserObjectInformationA(
    hObj: ?HANDLE,
    nIndex: USER_OBJECT_INFORMATION_INDEX,
    // TODO: what to do with BytesParamIndex 3?
    pvInfo: ?*anyopaque,
    nLength: u32,
    lpnLengthNeeded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetUserObjectInformationW(
    hObj: ?HANDLE,
    nIndex: USER_OBJECT_INFORMATION_INDEX,
    // TODO: what to do with BytesParamIndex 3?
    pvInfo: ?*anyopaque,
    nLength: u32,
    lpnLengthNeeded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetUserObjectInformationA(
    hObj: ?HANDLE,
    nIndex: i32,
    // TODO: what to do with BytesParamIndex 3?
    pvInfo: ?*anyopaque,
    nLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetUserObjectInformationW(
    hObj: ?HANDLE,
    nIndex: i32,
    // TODO: what to do with BytesParamIndex 3?
    pvInfo: ?*anyopaque,
    nLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn BroadcastSystemMessageExA(
    flags: BROADCAST_SYSTEM_MESSAGE_FLAGS,
    lpInfo: ?*BROADCAST_SYSTEM_MESSAGE_INFO,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    pbsmInfo: ?*BSMINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn BroadcastSystemMessageExW(
    flags: BROADCAST_SYSTEM_MESSAGE_FLAGS,
    lpInfo: ?*BROADCAST_SYSTEM_MESSAGE_INFO,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    pbsmInfo: ?*BSMINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "user32" fn BroadcastSystemMessageA(
    flags: u32,
    lpInfo: ?*u32,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn BroadcastSystemMessageW(
    flags: BROADCAST_SYSTEM_MESSAGE_FLAGS,
    lpInfo: ?*BROADCAST_SYSTEM_MESSAGE_INFO,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (13)
//--------------------------------------------------------------------------------
pub const WINSTAENUMPROC = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().WINSTAENUMPROCA,
    .wide => @This().WINSTAENUMPROCW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'WINSTAENUMPROC' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const DESKTOPENUMPROC = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().DESKTOPENUMPROCA,
    .wide => @This().DESKTOPENUMPROCW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'DESKTOPENUMPROC' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CreateDesktop = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().CreateDesktopA,
    .wide => @This().CreateDesktopW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CreateDesktop' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CreateDesktopEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().CreateDesktopExA,
    .wide => @This().CreateDesktopExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CreateDesktopEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const OpenDesktop = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().OpenDesktopA,
    .wide => @This().OpenDesktopW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'OpenDesktop' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const EnumDesktops = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().EnumDesktopsA,
    .wide => @This().EnumDesktopsW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'EnumDesktops' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CreateWindowStation = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().CreateWindowStationA,
    .wide => @This().CreateWindowStationW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CreateWindowStation' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const OpenWindowStation = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().OpenWindowStationA,
    .wide => @This().OpenWindowStationW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'OpenWindowStation' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const EnumWindowStations = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().EnumWindowStationsA,
    .wide => @This().EnumWindowStationsW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'EnumWindowStations' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetUserObjectInformation = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetUserObjectInformationA,
    .wide => @This().GetUserObjectInformationW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetUserObjectInformation' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SetUserObjectInformation = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SetUserObjectInformationA,
    .wide => @This().SetUserObjectInformationW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SetUserObjectInformation' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const BroadcastSystemMessageEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().BroadcastSystemMessageExA,
    .wide => @This().BroadcastSystemMessageExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'BroadcastSystemMessageEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const BroadcastSystemMessage = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().BroadcastSystemMessageA,
    .wide => @This().BroadcastSystemMessageW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'BroadcastSystemMessage' requires that UNICODE be set to true or false in the root module",
    ),
};
//--------------------------------------------------------------------------------
// Section: Imports (12)
//--------------------------------------------------------------------------------
const BOOL = @import("../foundation.zig").BOOL;
const DEVMODEA = @import("../graphics/gdi.zig").DEVMODEA;
const DEVMODEW = @import("../graphics/gdi.zig").DEVMODEW;
const HANDLE = @import("../foundation.zig").HANDLE;
const HWND = @import("../foundation.zig").HWND;
const LPARAM = @import("../foundation.zig").LPARAM;
const LUID = @import("../foundation.zig").LUID;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;
const SECURITY_ATTRIBUTES = @import("../security.zig").SECURITY_ATTRIBUTES;
const WNDENUMPROC = @import("../ui/windows_and_messaging.zig").WNDENUMPROC;
const WPARAM = @import("../foundation.zig").WPARAM;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "WINSTAENUMPROCA")) { _ = WINSTAENUMPROCA; }
    if (@hasDecl(@This(), "WINSTAENUMPROCW")) { _ = WINSTAENUMPROCW; }
    if (@hasDecl(@This(), "DESKTOPENUMPROCA")) { _ = DESKTOPENUMPROCA; }
    if (@hasDecl(@This(), "DESKTOPENUMPROCW")) { _ = DESKTOPENUMPROCW; }

    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
