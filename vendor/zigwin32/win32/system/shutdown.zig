//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (13)
//--------------------------------------------------------------------------------
pub const MAX_REASON_NAME_LEN = @as(u32, 64);
pub const MAX_REASON_DESC_LEN = @as(u32, 256);
pub const MAX_REASON_BUGID_LEN = @as(u32, 32);
pub const MAX_REASON_COMMENT_LEN = @as(u32, 512);
pub const SHUTDOWN_TYPE_LEN = @as(u32, 32);
pub const POLICY_SHOWREASONUI_NEVER = @as(u32, 0);
pub const POLICY_SHOWREASONUI_ALWAYS = @as(u32, 1);
pub const POLICY_SHOWREASONUI_WORKSTATIONONLY = @as(u32, 2);
pub const POLICY_SHOWREASONUI_SERVERONLY = @as(u32, 3);
pub const SNAPSHOT_POLICY_NEVER = @as(u32, 0);
pub const SNAPSHOT_POLICY_ALWAYS = @as(u32, 1);
pub const SNAPSHOT_POLICY_UNPLANNED = @as(u32, 2);
pub const MAX_NUM_REASONS = @as(u32, 256);

//--------------------------------------------------------------------------------
// Section: Types (3)
//--------------------------------------------------------------------------------
pub const SHUTDOWN_REASON = packed struct(u32) {
    MINOR_MAINTENANCE: u1 = 0,
    MINOR_INSTALLATION: u1 = 0,
    MINOR_RECONFIG: u1 = 0,
    MINOR_PROCESSOR: u1 = 0,
    MINOR_SERVICEPACK: u1 = 0,
    MINOR_TERMSRV: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    MAJOR_HARDWARE: u1 = 0,
    MAJOR_OPERATINGSYSTEM: u1 = 0,
    MAJOR_APPLICATION: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    FLAG_COMMENT_REQUIRED: u1 = 0,
    FLAG_DIRTY_PROBLEM_ID_REQUIRED: u1 = 0,
    FLAG_CLEAN_UI: u1 = 0,
    FLAG_DIRTY_UI: u1 = 0,
    FLAG_MOBILE_UI_RESERVED: u1 = 0,
    _29: u1 = 0,
    FLAG_USER_DEFINED: u1 = 0,
    FLAG_PLANNED: u1 = 0,
};
pub const SHTDN_REASON_NONE = SHUTDOWN_REASON{ };
pub const SHTDN_REASON_FLAG_COMMENT_REQUIRED = SHUTDOWN_REASON{ .FLAG_COMMENT_REQUIRED = 1 };
pub const SHTDN_REASON_FLAG_DIRTY_PROBLEM_ID_REQUIRED = SHUTDOWN_REASON{ .FLAG_DIRTY_PROBLEM_ID_REQUIRED = 1 };
pub const SHTDN_REASON_FLAG_CLEAN_UI = SHUTDOWN_REASON{ .FLAG_CLEAN_UI = 1 };
pub const SHTDN_REASON_FLAG_DIRTY_UI = SHUTDOWN_REASON{ .FLAG_DIRTY_UI = 1 };
pub const SHTDN_REASON_FLAG_MOBILE_UI_RESERVED = SHUTDOWN_REASON{ .FLAG_MOBILE_UI_RESERVED = 1 };
pub const SHTDN_REASON_FLAG_USER_DEFINED = SHUTDOWN_REASON{ .FLAG_USER_DEFINED = 1 };
pub const SHTDN_REASON_FLAG_PLANNED = SHUTDOWN_REASON{ .FLAG_PLANNED = 1 };
pub const SHTDN_REASON_MAJOR_OTHER = SHUTDOWN_REASON{ };
pub const SHTDN_REASON_MAJOR_NONE = SHUTDOWN_REASON{ };
pub const SHTDN_REASON_MAJOR_HARDWARE = SHUTDOWN_REASON{ .MAJOR_HARDWARE = 1 };
pub const SHTDN_REASON_MAJOR_OPERATINGSYSTEM = SHUTDOWN_REASON{ .MAJOR_OPERATINGSYSTEM = 1 };
pub const SHTDN_REASON_MAJOR_SOFTWARE = SHUTDOWN_REASON{
    .MAJOR_HARDWARE = 1,
    .MAJOR_OPERATINGSYSTEM = 1,
};
pub const SHTDN_REASON_MAJOR_APPLICATION = SHUTDOWN_REASON{ .MAJOR_APPLICATION = 1 };
pub const SHTDN_REASON_MAJOR_SYSTEM = SHUTDOWN_REASON{
    .MAJOR_HARDWARE = 1,
    .MAJOR_APPLICATION = 1,
};
pub const SHTDN_REASON_MAJOR_POWER = SHUTDOWN_REASON{
    .MAJOR_OPERATINGSYSTEM = 1,
    .MAJOR_APPLICATION = 1,
};
pub const SHTDN_REASON_MAJOR_LEGACY_API = SHUTDOWN_REASON{
    .MAJOR_HARDWARE = 1,
    .MAJOR_OPERATINGSYSTEM = 1,
    .MAJOR_APPLICATION = 1,
};
pub const SHTDN_REASON_MINOR_OTHER = SHUTDOWN_REASON{ };
pub const SHTDN_REASON_MINOR_NONE = SHUTDOWN_REASON{
    .MINOR_MAINTENANCE = 1,
    .MINOR_INSTALLATION = 1,
    .MINOR_RECONFIG = 1,
    .MINOR_PROCESSOR = 1,
    .MINOR_SERVICEPACK = 1,
    .MINOR_TERMSRV = 1,
    ._6 = 1,
    ._7 = 1,
};
pub const SHTDN_REASON_MINOR_MAINTENANCE = SHUTDOWN_REASON{ .MINOR_MAINTENANCE = 1 };
pub const SHTDN_REASON_MINOR_INSTALLATION = SHUTDOWN_REASON{ .MINOR_INSTALLATION = 1 };
pub const SHTDN_REASON_MINOR_UPGRADE = SHUTDOWN_REASON{
    .MINOR_MAINTENANCE = 1,
    .MINOR_INSTALLATION = 1,
};
pub const SHTDN_REASON_MINOR_RECONFIG = SHUTDOWN_REASON{ .MINOR_RECONFIG = 1 };
pub const SHTDN_REASON_MINOR_HUNG = SHUTDOWN_REASON{
    .MINOR_MAINTENANCE = 1,
    .MINOR_RECONFIG = 1,
};
pub const SHTDN_REASON_MINOR_UNSTABLE = SHUTDOWN_REASON{
    .MINOR_INSTALLATION = 1,
    .MINOR_RECONFIG = 1,
};
pub const SHTDN_REASON_MINOR_DISK = SHUTDOWN_REASON{
    .MINOR_MAINTENANCE = 1,
    .MINOR_INSTALLATION = 1,
    .MINOR_RECONFIG = 1,
};
pub const SHTDN_REASON_MINOR_PROCESSOR = SHUTDOWN_REASON{ .MINOR_PROCESSOR = 1 };
pub const SHTDN_REASON_MINOR_NETWORKCARD = SHUTDOWN_REASON{
    .MINOR_MAINTENANCE = 1,
    .MINOR_PROCESSOR = 1,
};
pub const SHTDN_REASON_MINOR_POWER_SUPPLY = SHUTDOWN_REASON{
    .MINOR_INSTALLATION = 1,
    .MINOR_PROCESSOR = 1,
};
pub const SHTDN_REASON_MINOR_CORDUNPLUGGED = SHUTDOWN_REASON{
    .MINOR_MAINTENANCE = 1,
    .MINOR_INSTALLATION = 1,
    .MINOR_PROCESSOR = 1,
};
pub const SHTDN_REASON_MINOR_ENVIRONMENT = SHUTDOWN_REASON{
    .MINOR_RECONFIG = 1,
    .MINOR_PROCESSOR = 1,
};
pub const SHTDN_REASON_MINOR_HARDWARE_DRIVER = SHUTDOWN_REASON{
    .MINOR_MAINTENANCE = 1,
    .MINOR_RECONFIG = 1,
    .MINOR_PROCESSOR = 1,
};
pub const SHTDN_REASON_MINOR_OTHERDRIVER = SHUTDOWN_REASON{
    .MINOR_INSTALLATION = 1,
    .MINOR_RECONFIG = 1,
    .MINOR_PROCESSOR = 1,
};
pub const SHTDN_REASON_MINOR_BLUESCREEN = SHUTDOWN_REASON{
    .MINOR_MAINTENANCE = 1,
    .MINOR_INSTALLATION = 1,
    .MINOR_RECONFIG = 1,
    .MINOR_PROCESSOR = 1,
};
pub const SHTDN_REASON_MINOR_SERVICEPACK = SHUTDOWN_REASON{ .MINOR_SERVICEPACK = 1 };
pub const SHTDN_REASON_MINOR_HOTFIX = SHUTDOWN_REASON{
    .MINOR_MAINTENANCE = 1,
    .MINOR_SERVICEPACK = 1,
};
pub const SHTDN_REASON_MINOR_SECURITYFIX = SHUTDOWN_REASON{
    .MINOR_INSTALLATION = 1,
    .MINOR_SERVICEPACK = 1,
};
pub const SHTDN_REASON_MINOR_SECURITY = SHUTDOWN_REASON{
    .MINOR_MAINTENANCE = 1,
    .MINOR_INSTALLATION = 1,
    .MINOR_SERVICEPACK = 1,
};
pub const SHTDN_REASON_MINOR_NETWORK_CONNECTIVITY = SHUTDOWN_REASON{
    .MINOR_RECONFIG = 1,
    .MINOR_SERVICEPACK = 1,
};
pub const SHTDN_REASON_MINOR_WMI = SHUTDOWN_REASON{
    .MINOR_MAINTENANCE = 1,
    .MINOR_RECONFIG = 1,
    .MINOR_SERVICEPACK = 1,
};
pub const SHTDN_REASON_MINOR_SERVICEPACK_UNINSTALL = SHUTDOWN_REASON{
    .MINOR_INSTALLATION = 1,
    .MINOR_RECONFIG = 1,
    .MINOR_SERVICEPACK = 1,
};
pub const SHTDN_REASON_MINOR_HOTFIX_UNINSTALL = SHUTDOWN_REASON{
    .MINOR_MAINTENANCE = 1,
    .MINOR_INSTALLATION = 1,
    .MINOR_RECONFIG = 1,
    .MINOR_SERVICEPACK = 1,
};
pub const SHTDN_REASON_MINOR_SECURITYFIX_UNINSTALL = SHUTDOWN_REASON{
    .MINOR_PROCESSOR = 1,
    .MINOR_SERVICEPACK = 1,
};
pub const SHTDN_REASON_MINOR_MMC = SHUTDOWN_REASON{
    .MINOR_MAINTENANCE = 1,
    .MINOR_PROCESSOR = 1,
    .MINOR_SERVICEPACK = 1,
};
pub const SHTDN_REASON_MINOR_SYSTEMRESTORE = SHUTDOWN_REASON{
    .MINOR_INSTALLATION = 1,
    .MINOR_PROCESSOR = 1,
    .MINOR_SERVICEPACK = 1,
};
pub const SHTDN_REASON_MINOR_TERMSRV = SHUTDOWN_REASON{ .MINOR_TERMSRV = 1 };
pub const SHTDN_REASON_MINOR_DC_PROMOTION = SHUTDOWN_REASON{
    .MINOR_MAINTENANCE = 1,
    .MINOR_TERMSRV = 1,
};
pub const SHTDN_REASON_MINOR_DC_DEMOTION = SHUTDOWN_REASON{
    .MINOR_INSTALLATION = 1,
    .MINOR_TERMSRV = 1,
};
pub const SHTDN_REASON_UNKNOWN = SHUTDOWN_REASON{
    .MINOR_MAINTENANCE = 1,
    .MINOR_INSTALLATION = 1,
    .MINOR_RECONFIG = 1,
    .MINOR_PROCESSOR = 1,
    .MINOR_SERVICEPACK = 1,
    .MINOR_TERMSRV = 1,
    ._6 = 1,
    ._7 = 1,
};
pub const SHTDN_REASON_LEGACY_API = SHUTDOWN_REASON{
    .MAJOR_HARDWARE = 1,
    .MAJOR_OPERATINGSYSTEM = 1,
    .MAJOR_APPLICATION = 1,
    .FLAG_PLANNED = 1,
};
pub const SHTDN_REASON_VALID_BIT_MASK = SHUTDOWN_REASON{
    .MINOR_MAINTENANCE = 1,
    .MINOR_INSTALLATION = 1,
    .MINOR_RECONFIG = 1,
    .MINOR_PROCESSOR = 1,
    .MINOR_SERVICEPACK = 1,
    .MINOR_TERMSRV = 1,
    ._6 = 1,
    ._7 = 1,
    ._8 = 1,
    ._9 = 1,
    ._10 = 1,
    ._11 = 1,
    ._12 = 1,
    ._13 = 1,
    ._14 = 1,
    ._15 = 1,
    .MAJOR_HARDWARE = 1,
    .MAJOR_OPERATINGSYSTEM = 1,
    .MAJOR_APPLICATION = 1,
    ._19 = 1,
    ._20 = 1,
    ._21 = 1,
    ._22 = 1,
    ._23 = 1,
    .FLAG_USER_DEFINED = 1,
    .FLAG_PLANNED = 1,
};

pub const SHUTDOWN_FLAGS = packed struct(u32) {
    FORCE_OTHERS: u1 = 0,
    FORCE_SELF: u1 = 0,
    RESTART: u1 = 0,
    POWEROFF: u1 = 0,
    NOREBOOT: u1 = 0,
    GRACE_OVERRIDE: u1 = 0,
    INSTALL_UPDATES: u1 = 0,
    RESTARTAPPS: u1 = 0,
    SKIP_SVC_PRESHUTDOWN: u1 = 0,
    HYBRID: u1 = 0,
    RESTART_BOOTOPTIONS: u1 = 0,
    SOFT_REBOOT: u1 = 0,
    MOBILE_UI: u1 = 0,
    ARSO: u1 = 0,
    CHECK_SAFE_FOR_SERVER: u1 = 0,
    VAIL_CONTAINER: u1 = 0,
    SYSTEM_INITIATED: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const SHUTDOWN_FORCE_OTHERS = SHUTDOWN_FLAGS{ .FORCE_OTHERS = 1 };
pub const SHUTDOWN_FORCE_SELF = SHUTDOWN_FLAGS{ .FORCE_SELF = 1 };
pub const SHUTDOWN_RESTART = SHUTDOWN_FLAGS{ .RESTART = 1 };
pub const SHUTDOWN_POWEROFF = SHUTDOWN_FLAGS{ .POWEROFF = 1 };
pub const SHUTDOWN_NOREBOOT = SHUTDOWN_FLAGS{ .NOREBOOT = 1 };
pub const SHUTDOWN_GRACE_OVERRIDE = SHUTDOWN_FLAGS{ .GRACE_OVERRIDE = 1 };
pub const SHUTDOWN_INSTALL_UPDATES = SHUTDOWN_FLAGS{ .INSTALL_UPDATES = 1 };
pub const SHUTDOWN_RESTARTAPPS = SHUTDOWN_FLAGS{ .RESTARTAPPS = 1 };
pub const SHUTDOWN_SKIP_SVC_PRESHUTDOWN = SHUTDOWN_FLAGS{ .SKIP_SVC_PRESHUTDOWN = 1 };
pub const SHUTDOWN_HYBRID = SHUTDOWN_FLAGS{ .HYBRID = 1 };
pub const SHUTDOWN_RESTART_BOOTOPTIONS = SHUTDOWN_FLAGS{ .RESTART_BOOTOPTIONS = 1 };
pub const SHUTDOWN_SOFT_REBOOT = SHUTDOWN_FLAGS{ .SOFT_REBOOT = 1 };
pub const SHUTDOWN_MOBILE_UI = SHUTDOWN_FLAGS{ .MOBILE_UI = 1 };
pub const SHUTDOWN_ARSO = SHUTDOWN_FLAGS{ .ARSO = 1 };
pub const SHUTDOWN_CHECK_SAFE_FOR_SERVER = SHUTDOWN_FLAGS{ .CHECK_SAFE_FOR_SERVER = 1 };
pub const SHUTDOWN_VAIL_CONTAINER = SHUTDOWN_FLAGS{ .VAIL_CONTAINER = 1 };
pub const SHUTDOWN_SYSTEM_INITIATED = SHUTDOWN_FLAGS{ .SYSTEM_INITIATED = 1 };

pub const EXIT_WINDOWS_FLAGS = enum(u32) {
    HYBRID_SHUTDOWN = 4194304,
    LOGOFF = 0,
    POWEROFF = 8,
    REBOOT = 2,
    RESTARTAPPS = 64,
    SHUTDOWN = 1,
};
pub const EWX_HYBRID_SHUTDOWN = EXIT_WINDOWS_FLAGS.HYBRID_SHUTDOWN;
pub const EWX_LOGOFF = EXIT_WINDOWS_FLAGS.LOGOFF;
pub const EWX_POWEROFF = EXIT_WINDOWS_FLAGS.POWEROFF;
pub const EWX_REBOOT = EXIT_WINDOWS_FLAGS.REBOOT;
pub const EWX_RESTARTAPPS = EXIT_WINDOWS_FLAGS.RESTARTAPPS;
pub const EWX_SHUTDOWN = EXIT_WINDOWS_FLAGS.SHUTDOWN;


//--------------------------------------------------------------------------------
// Section: Functions (14)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn InitiateSystemShutdownA(
    lpMachineName: ?PSTR,
    lpMessage: ?PSTR,
    dwTimeout: u32,
    bForceAppsClosed: BOOL,
    bRebootAfterShutdown: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn InitiateSystemShutdownW(
    lpMachineName: ?PWSTR,
    lpMessage: ?PWSTR,
    dwTimeout: u32,
    bForceAppsClosed: BOOL,
    bRebootAfterShutdown: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn AbortSystemShutdownA(
    lpMachineName: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn AbortSystemShutdownW(
    lpMachineName: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn InitiateSystemShutdownExA(
    lpMachineName: ?PSTR,
    lpMessage: ?PSTR,
    dwTimeout: u32,
    bForceAppsClosed: BOOL,
    bRebootAfterShutdown: BOOL,
    dwReason: SHUTDOWN_REASON,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn InitiateSystemShutdownExW(
    lpMachineName: ?PWSTR,
    lpMessage: ?PWSTR,
    dwTimeout: u32,
    bForceAppsClosed: BOOL,
    bRebootAfterShutdown: BOOL,
    dwReason: SHUTDOWN_REASON,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn InitiateShutdownA(
    lpMachineName: ?PSTR,
    lpMessage: ?PSTR,
    dwGracePeriod: u32,
    dwShutdownFlags: SHUTDOWN_FLAGS,
    dwReason: SHUTDOWN_REASON,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn InitiateShutdownW(
    lpMachineName: ?PWSTR,
    lpMessage: ?PWSTR,
    dwGracePeriod: u32,
    dwShutdownFlags: SHUTDOWN_FLAGS,
    dwReason: SHUTDOWN_REASON,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "advapi32" fn CheckForHiberboot(
    pHiberboot: ?*BOOLEAN,
    bClearFlag: BOOLEAN,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn ExitWindowsEx(
    uFlags: EXIT_WINDOWS_FLAGS,
    dwReason: SHUTDOWN_REASON,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn LockWorkStation(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "user32" fn ShutdownBlockReasonCreate(
    hWnd: ?HWND,
    pwszReason: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "user32" fn ShutdownBlockReasonQuery(
    hWnd: ?HWND,
    pwszBuff: ?[*:0]u16,
    pcchBuff: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "user32" fn ShutdownBlockReasonDestroy(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (4)
//--------------------------------------------------------------------------------
pub const InitiateSystemShutdown = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().InitiateSystemShutdownA,
    .wide => @This().InitiateSystemShutdownW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'InitiateSystemShutdown' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const AbortSystemShutdown = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().AbortSystemShutdownA,
    .wide => @This().AbortSystemShutdownW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'AbortSystemShutdown' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const InitiateSystemShutdownEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().InitiateSystemShutdownExA,
    .wide => @This().InitiateSystemShutdownExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'InitiateSystemShutdownEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const InitiateShutdown = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().InitiateShutdownA,
    .wide => @This().InitiateShutdownW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'InitiateShutdown' requires that UNICODE be set to true or false in the root module",
    ),
};
//--------------------------------------------------------------------------------
// Section: Imports (5)
//--------------------------------------------------------------------------------
const BOOL = @import("../foundation.zig").BOOL;
const BOOLEAN = @import("../foundation.zig").BOOLEAN;
const HWND = @import("../foundation.zig").HWND;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
