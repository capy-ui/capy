//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (215)
//--------------------------------------------------------------------------------
pub const PRLT = @as(u32, 0);
pub const PRLE = @as(u32, 1);
pub const PRGT = @as(u32, 2);
pub const PRGE = @as(u32, 3);
pub const PREQ = @as(u32, 4);
pub const PRNE = @as(u32, 5);
pub const QUERY_SORTASCEND = @as(u32, 0);
pub const QUERY_SORTDESCEND = @as(u32, 1);
pub const MQ_MOVE_ACCESS = @as(u32, 4);
pub const MQ_ACTION_RECEIVE = @as(u32, 0);
pub const MQ_ACTION_PEEK_CURRENT = @as(u32, 2147483648);
pub const MQ_ACTION_PEEK_NEXT = @as(u32, 2147483649);
pub const MQ_LOOKUP_PEEK_CURRENT = @as(u32, 1073741840);
pub const MQ_LOOKUP_PEEK_NEXT = @as(u32, 1073741841);
pub const MQ_LOOKUP_PEEK_PREV = @as(u32, 1073741842);
pub const MQ_LOOKUP_PEEK_FIRST = @as(u32, 1073741844);
pub const MQ_LOOKUP_PEEK_LAST = @as(u32, 1073741848);
pub const MQ_LOOKUP_RECEIVE_CURRENT = @as(u32, 1073741856);
pub const MQ_LOOKUP_RECEIVE_NEXT = @as(u32, 1073741857);
pub const MQ_LOOKUP_RECEIVE_PREV = @as(u32, 1073741858);
pub const MQ_LOOKUP_RECEIVE_FIRST = @as(u32, 1073741860);
pub const MQ_LOOKUP_RECEIVE_LAST = @as(u32, 1073741864);
pub const MQ_LOOKUP_RECEIVE_ALLOW_PEEK = @as(u32, 1073742112);
pub const PROPID_M_BASE = @as(u32, 0);
pub const PROPID_M_CLASS = @as(u32, 1);
pub const PROPID_M_MSGID = @as(u32, 2);
pub const PROPID_M_CORRELATIONID = @as(u32, 3);
pub const PROPID_M_PRIORITY = @as(u32, 4);
pub const PROPID_M_DELIVERY = @as(u32, 5);
pub const PROPID_M_ACKNOWLEDGE = @as(u32, 6);
pub const PROPID_M_JOURNAL = @as(u32, 7);
pub const PROPID_M_APPSPECIFIC = @as(u32, 8);
pub const PROPID_M_BODY = @as(u32, 9);
pub const PROPID_M_BODY_SIZE = @as(u32, 10);
pub const PROPID_M_LABEL = @as(u32, 11);
pub const PROPID_M_LABEL_LEN = @as(u32, 12);
pub const PROPID_M_TIME_TO_REACH_QUEUE = @as(u32, 13);
pub const PROPID_M_TIME_TO_BE_RECEIVED = @as(u32, 14);
pub const PROPID_M_RESP_QUEUE = @as(u32, 15);
pub const PROPID_M_RESP_QUEUE_LEN = @as(u32, 16);
pub const PROPID_M_ADMIN_QUEUE = @as(u32, 17);
pub const PROPID_M_ADMIN_QUEUE_LEN = @as(u32, 18);
pub const PROPID_M_VERSION = @as(u32, 19);
pub const PROPID_M_SENDERID = @as(u32, 20);
pub const PROPID_M_SENDERID_LEN = @as(u32, 21);
pub const PROPID_M_SENDERID_TYPE = @as(u32, 22);
pub const PROPID_M_PRIV_LEVEL = @as(u32, 23);
pub const PROPID_M_AUTH_LEVEL = @as(u32, 24);
pub const PROPID_M_AUTHENTICATED = @as(u32, 25);
pub const PROPID_M_HASH_ALG = @as(u32, 26);
pub const PROPID_M_ENCRYPTION_ALG = @as(u32, 27);
pub const PROPID_M_SENDER_CERT = @as(u32, 28);
pub const PROPID_M_SENDER_CERT_LEN = @as(u32, 29);
pub const PROPID_M_SRC_MACHINE_ID = @as(u32, 30);
pub const PROPID_M_SENTTIME = @as(u32, 31);
pub const PROPID_M_ARRIVEDTIME = @as(u32, 32);
pub const PROPID_M_DEST_QUEUE = @as(u32, 33);
pub const PROPID_M_DEST_QUEUE_LEN = @as(u32, 34);
pub const PROPID_M_EXTENSION = @as(u32, 35);
pub const PROPID_M_EXTENSION_LEN = @as(u32, 36);
pub const PROPID_M_SECURITY_CONTEXT = @as(u32, 37);
pub const PROPID_M_CONNECTOR_TYPE = @as(u32, 38);
pub const PROPID_M_XACT_STATUS_QUEUE = @as(u32, 39);
pub const PROPID_M_XACT_STATUS_QUEUE_LEN = @as(u32, 40);
pub const PROPID_M_TRACE = @as(u32, 41);
pub const PROPID_M_BODY_TYPE = @as(u32, 42);
pub const PROPID_M_DEST_SYMM_KEY = @as(u32, 43);
pub const PROPID_M_DEST_SYMM_KEY_LEN = @as(u32, 44);
pub const PROPID_M_SIGNATURE = @as(u32, 45);
pub const PROPID_M_SIGNATURE_LEN = @as(u32, 46);
pub const PROPID_M_PROV_TYPE = @as(u32, 47);
pub const PROPID_M_PROV_NAME = @as(u32, 48);
pub const PROPID_M_PROV_NAME_LEN = @as(u32, 49);
pub const PROPID_M_FIRST_IN_XACT = @as(u32, 50);
pub const PROPID_M_LAST_IN_XACT = @as(u32, 51);
pub const PROPID_M_XACTID = @as(u32, 52);
pub const PROPID_M_AUTHENTICATED_EX = @as(u32, 53);
pub const PROPID_M_RESP_FORMAT_NAME = @as(u32, 54);
pub const PROPID_M_RESP_FORMAT_NAME_LEN = @as(u32, 55);
pub const PROPID_M_DEST_FORMAT_NAME = @as(u32, 58);
pub const PROPID_M_DEST_FORMAT_NAME_LEN = @as(u32, 59);
pub const PROPID_M_LOOKUPID = @as(u32, 60);
pub const PROPID_M_SOAP_ENVELOPE = @as(u32, 61);
pub const PROPID_M_SOAP_ENVELOPE_LEN = @as(u32, 62);
pub const PROPID_M_COMPOUND_MESSAGE = @as(u32, 63);
pub const PROPID_M_COMPOUND_MESSAGE_SIZE = @as(u32, 64);
pub const PROPID_M_SOAP_HEADER = @as(u32, 65);
pub const PROPID_M_SOAP_BODY = @as(u32, 66);
pub const PROPID_M_DEADLETTER_QUEUE = @as(u32, 67);
pub const PROPID_M_DEADLETTER_QUEUE_LEN = @as(u32, 68);
pub const PROPID_M_ABORT_COUNT = @as(u32, 69);
pub const PROPID_M_MOVE_COUNT = @as(u32, 70);
pub const PROPID_M_LAST_MOVE_TIME = @as(u32, 75);
pub const PROPID_M_MSGID_SIZE = @as(u32, 20);
pub const PROPID_M_CORRELATIONID_SIZE = @as(u32, 20);
pub const PROPID_M_XACTID_SIZE = @as(u32, 20);
pub const MQMSG_PRIV_LEVEL_BODY_AES = @as(u32, 5);
pub const MQMSG_AUTHENTICATED_QM_MESSAGE = @as(u32, 11);
pub const MQMSG_NOT_FIRST_IN_XACT = @as(u32, 0);
pub const MQMSG_FIRST_IN_XACT = @as(u32, 1);
pub const MQMSG_NOT_LAST_IN_XACT = @as(u32, 0);
pub const MQMSG_LAST_IN_XACT = @as(u32, 1);
pub const PROPID_Q_BASE = @as(u32, 100);
pub const PROPID_Q_INSTANCE = @as(u32, 101);
pub const PROPID_Q_TYPE = @as(u32, 102);
pub const PROPID_Q_PATHNAME = @as(u32, 103);
pub const PROPID_Q_JOURNAL = @as(u32, 104);
pub const PROPID_Q_QUOTA = @as(u32, 105);
pub const PROPID_Q_BASEPRIORITY = @as(u32, 106);
pub const PROPID_Q_JOURNAL_QUOTA = @as(u32, 107);
pub const PROPID_Q_LABEL = @as(u32, 108);
pub const PROPID_Q_CREATE_TIME = @as(u32, 109);
pub const PROPID_Q_MODIFY_TIME = @as(u32, 110);
pub const PROPID_Q_AUTHENTICATE = @as(u32, 111);
pub const PROPID_Q_PRIV_LEVEL = @as(u32, 112);
pub const PROPID_Q_TRANSACTION = @as(u32, 113);
pub const PROPID_Q_PATHNAME_DNS = @as(u32, 124);
pub const PROPID_Q_MULTICAST_ADDRESS = @as(u32, 125);
pub const PROPID_Q_ADS_PATH = @as(u32, 126);
pub const PROPID_QM_BASE = @as(u32, 200);
pub const PROPID_QM_SITE_ID = @as(u32, 201);
pub const PROPID_QM_MACHINE_ID = @as(u32, 202);
pub const PROPID_QM_PATHNAME = @as(u32, 203);
pub const PROPID_QM_CONNECTION = @as(u32, 204);
pub const PROPID_QM_ENCRYPTION_PK = @as(u32, 205);
pub const PROPID_QM_ENCRYPTION_PK_BASE = @as(u32, 231);
pub const PROPID_QM_ENCRYPTION_PK_ENHANCED = @as(u32, 232);
pub const PROPID_QM_PATHNAME_DNS = @as(u32, 233);
pub const PROPID_QM_ENCRYPTION_PK_AES = @as(u32, 244);
pub const PROPID_PC_BASE = @as(u32, 5800);
pub const PROPID_PC_VERSION = @as(u32, 5801);
pub const PROPID_PC_DS_ENABLED = @as(u32, 5802);
pub const PROPID_MGMT_MSMQ_BASE = @as(u32, 0);
pub const PROPID_MGMT_MSMQ_ACTIVEQUEUES = @as(u32, 1);
pub const PROPID_MGMT_MSMQ_PRIVATEQ = @as(u32, 2);
pub const PROPID_MGMT_MSMQ_DSSERVER = @as(u32, 3);
pub const PROPID_MGMT_MSMQ_CONNECTED = @as(u32, 4);
pub const PROPID_MGMT_MSMQ_TYPE = @as(u32, 5);
pub const PROPID_MGMT_MSMQ_BYTES_IN_ALL_QUEUES = @as(u32, 6);
pub const MSMQ_CONNECTED = "CONNECTED";
pub const MSMQ_DISCONNECTED = "DISCONNECTED";
pub const PROPID_MGMT_QUEUE_BASE = @as(u32, 0);
pub const PROPID_MGMT_QUEUE_PATHNAME = @as(u32, 1);
pub const PROPID_MGMT_QUEUE_FORMATNAME = @as(u32, 2);
pub const PROPID_MGMT_QUEUE_TYPE = @as(u32, 3);
pub const PROPID_MGMT_QUEUE_LOCATION = @as(u32, 4);
pub const PROPID_MGMT_QUEUE_XACT = @as(u32, 5);
pub const PROPID_MGMT_QUEUE_FOREIGN = @as(u32, 6);
pub const PROPID_MGMT_QUEUE_MESSAGE_COUNT = @as(u32, 7);
pub const PROPID_MGMT_QUEUE_BYTES_IN_QUEUE = @as(u32, 8);
pub const PROPID_MGMT_QUEUE_JOURNAL_MESSAGE_COUNT = @as(u32, 9);
pub const PROPID_MGMT_QUEUE_BYTES_IN_JOURNAL = @as(u32, 10);
pub const PROPID_MGMT_QUEUE_STATE = @as(u32, 11);
pub const PROPID_MGMT_QUEUE_NEXTHOPS = @as(u32, 12);
pub const PROPID_MGMT_QUEUE_EOD_LAST_ACK = @as(u32, 13);
pub const PROPID_MGMT_QUEUE_EOD_LAST_ACK_TIME = @as(u32, 14);
pub const PROPID_MGMT_QUEUE_EOD_LAST_ACK_COUNT = @as(u32, 15);
pub const PROPID_MGMT_QUEUE_EOD_FIRST_NON_ACK = @as(u32, 16);
pub const PROPID_MGMT_QUEUE_EOD_LAST_NON_ACK = @as(u32, 17);
pub const PROPID_MGMT_QUEUE_EOD_NEXT_SEQ = @as(u32, 18);
pub const PROPID_MGMT_QUEUE_EOD_NO_READ_COUNT = @as(u32, 19);
pub const PROPID_MGMT_QUEUE_EOD_NO_ACK_COUNT = @as(u32, 20);
pub const PROPID_MGMT_QUEUE_EOD_RESEND_TIME = @as(u32, 21);
pub const PROPID_MGMT_QUEUE_EOD_RESEND_INTERVAL = @as(u32, 22);
pub const PROPID_MGMT_QUEUE_EOD_RESEND_COUNT = @as(u32, 23);
pub const PROPID_MGMT_QUEUE_EOD_SOURCE_INFO = @as(u32, 24);
pub const PROPID_MGMT_QUEUE_CONNECTION_HISTORY = @as(u32, 25);
pub const PROPID_MGMT_QUEUE_SUBQUEUE_COUNT = @as(u32, 26);
pub const PROPID_MGMT_QUEUE_SUBQUEUE_NAMES = @as(u32, 27);
pub const PROPID_MGMT_QUEUE_USED_QUOTA = @as(u32, 8);
pub const PROPID_MGMT_QUEUE_JOURNAL_USED_QUOTA = @as(u32, 10);
pub const MGMT_QUEUE_TYPE_PUBLIC = "PUBLIC";
pub const MGMT_QUEUE_TYPE_PRIVATE = "PRIVATE";
pub const MGMT_QUEUE_TYPE_MACHINE = "MACHINE";
pub const MGMT_QUEUE_TYPE_CONNECTOR = "CONNECTOR";
pub const MGMT_QUEUE_TYPE_MULTICAST = "MULTICAST";
pub const MGMT_QUEUE_STATE_LOCAL = "LOCAL CONNECTION";
pub const MGMT_QUEUE_STATE_NONACTIVE = "INACTIVE";
pub const MGMT_QUEUE_STATE_WAITING = "WAITING";
pub const MGMT_QUEUE_STATE_NEED_VALIDATE = "NEED VALIDATION";
pub const MGMT_QUEUE_STATE_ONHOLD = "ONHOLD";
pub const MGMT_QUEUE_STATE_CONNECTED = "CONNECTED";
pub const MGMT_QUEUE_STATE_DISCONNECTING = "DISCONNECTING";
pub const MGMT_QUEUE_STATE_DISCONNECTED = "DISCONNECTED";
pub const MGMT_QUEUE_STATE_LOCKED = "LOCKED";
pub const MGMT_QUEUE_LOCAL_LOCATION = "LOCAL";
pub const MGMT_QUEUE_REMOTE_LOCATION = "REMOTE";
pub const MGMT_QUEUE_UNKNOWN_TYPE = "UNKNOWN";
pub const MGMT_QUEUE_CORRECT_TYPE = "YES";
pub const MGMT_QUEUE_INCORRECT_TYPE = "NO";
pub const MGMT_QUEUE_TRANSACTIONAL_TYPE = "YES";
pub const MGMT_QUEUE_NOT_TRANSACTIONAL_TYPE = "NO";
pub const MGMT_QUEUE_FOREIGN_TYPE = "YES";
pub const MGMT_QUEUE_NOT_FOREIGN_TYPE = "NO";
pub const MO_MACHINE_TOKEN = "MACHINE";
pub const MO_QUEUE_TOKEN = "QUEUE";
pub const MACHINE_ACTION_CONNECT = "CONNECT";
pub const MACHINE_ACTION_DISCONNECT = "DISCONNECT";
pub const MACHINE_ACTION_TIDY = "TIDY";
pub const QUEUE_ACTION_PAUSE = "PAUSE";
pub const QUEUE_ACTION_RESUME = "RESUME";
pub const QUEUE_ACTION_EOD_RESEND = "EOD_RESEND";
pub const LONG_LIVED = @as(u32, 4294967294);
pub const MQSEC_DELETE_MESSAGE = @as(u32, 1);
pub const MQSEC_PEEK_MESSAGE = @as(u32, 2);
pub const MQSEC_WRITE_MESSAGE = @as(u32, 4);
pub const MQSEC_DELETE_JOURNAL_MESSAGE = @as(u32, 8);
pub const MQSEC_SET_QUEUE_PROPERTIES = @as(u32, 16);
pub const MQSEC_GET_QUEUE_PROPERTIES = @as(u32, 32);
pub const MQSEC_QUEUE_GENERIC_EXECUTE = @as(u32, 0);
pub const MQ_OK = @import("../zig.zig").typedConst(HRESULT, @as(i32, 0));
pub const MQ_ERROR_RESOLVE_ADDRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072824167));
pub const MQ_ERROR_TOO_MANY_PROPERTIES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072824166));
pub const MQ_ERROR_MESSAGE_NOT_AUTHENTICATED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072824165));
pub const MQ_ERROR_MESSAGE_LOCKED_UNDER_TRANSACTION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072824164));

//--------------------------------------------------------------------------------
// Section: Types (89)
//--------------------------------------------------------------------------------
const CLSID_MSMQQuery_Value = Guid.initString("d7d6e073-dccd-11d0-aa4b-0060970debae");
pub const CLSID_MSMQQuery = &CLSID_MSMQQuery_Value;

const CLSID_MSMQMessage_Value = Guid.initString("d7d6e075-dccd-11d0-aa4b-0060970debae");
pub const CLSID_MSMQMessage = &CLSID_MSMQMessage_Value;

const CLSID_MSMQQueue_Value = Guid.initString("d7d6e079-dccd-11d0-aa4b-0060970debae");
pub const CLSID_MSMQQueue = &CLSID_MSMQQueue_Value;

const CLSID_MSMQEvent_Value = Guid.initString("d7d6e07a-dccd-11d0-aa4b-0060970debae");
pub const CLSID_MSMQEvent = &CLSID_MSMQEvent_Value;

const CLSID_MSMQQueueInfo_Value = Guid.initString("d7d6e07c-dccd-11d0-aa4b-0060970debae");
pub const CLSID_MSMQQueueInfo = &CLSID_MSMQQueueInfo_Value;

const CLSID_MSMQQueueInfos_Value = Guid.initString("d7d6e07e-dccd-11d0-aa4b-0060970debae");
pub const CLSID_MSMQQueueInfos = &CLSID_MSMQQueueInfos_Value;

const CLSID_MSMQTransaction_Value = Guid.initString("d7d6e080-dccd-11d0-aa4b-0060970debae");
pub const CLSID_MSMQTransaction = &CLSID_MSMQTransaction_Value;

const CLSID_MSMQCoordinatedTransactionDispenser_Value = Guid.initString("d7d6e082-dccd-11d0-aa4b-0060970debae");
pub const CLSID_MSMQCoordinatedTransactionDispenser = &CLSID_MSMQCoordinatedTransactionDispenser_Value;

const CLSID_MSMQTransactionDispenser_Value = Guid.initString("d7d6e084-dccd-11d0-aa4b-0060970debae");
pub const CLSID_MSMQTransactionDispenser = &CLSID_MSMQTransactionDispenser_Value;

const CLSID_MSMQApplication_Value = Guid.initString("d7d6e086-dccd-11d0-aa4b-0060970debae");
pub const CLSID_MSMQApplication = &CLSID_MSMQApplication_Value;

const CLSID_MSMQDestination_Value = Guid.initString("eba96b18-2168-11d3-898c-00e02c074f6b");
pub const CLSID_MSMQDestination = &CLSID_MSMQDestination_Value;

const CLSID_MSMQCollection_Value = Guid.initString("f72b9031-2f0c-43e8-924e-e6052cdc493f");
pub const CLSID_MSMQCollection = &CLSID_MSMQCollection_Value;

const CLSID_MSMQManagement_Value = Guid.initString("39ce96fe-f4c5-4484-a143-4c2d5d324229");
pub const CLSID_MSMQManagement = &CLSID_MSMQManagement_Value;

const CLSID_MSMQOutgoingQueueManagement_Value = Guid.initString("0188401c-247a-4fed-99c6-bf14119d7055");
pub const CLSID_MSMQOutgoingQueueManagement = &CLSID_MSMQOutgoingQueueManagement_Value;

const CLSID_MSMQQueueManagement_Value = Guid.initString("33b6d07e-f27d-42fa-b2d7-bf82e11e9374");
pub const CLSID_MSMQQueueManagement = &CLSID_MSMQQueueManagement_Value;

pub const MQCALG = enum(i32) {
    MD2 = 32769,
    MD4 = 32770,
    MD5 = 32771,
    SHA = 32772,
    MAC = 32773,
    RSA_SIGN = 9216,
    DSS_SIGN = 8704,
    RSA_KEYX = 41984,
    DES = 26113,
    RC2 = 26114,
    RC4 = 26625,
    SEAL = 26626,
    pub const SHA1 = .SHA;
};
pub const MQMSG_CALG_MD2 = MQCALG.MD2;
pub const MQMSG_CALG_MD4 = MQCALG.MD4;
pub const MQMSG_CALG_MD5 = MQCALG.MD5;
pub const MQMSG_CALG_SHA = MQCALG.SHA;
pub const MQMSG_CALG_SHA1 = MQCALG.SHA;
pub const MQMSG_CALG_MAC = MQCALG.MAC;
pub const MQMSG_CALG_RSA_SIGN = MQCALG.RSA_SIGN;
pub const MQMSG_CALG_DSS_SIGN = MQCALG.DSS_SIGN;
pub const MQMSG_CALG_RSA_KEYX = MQCALG.RSA_KEYX;
pub const MQMSG_CALG_DES = MQCALG.DES;
pub const MQMSG_CALG_RC2 = MQCALG.RC2;
pub const MQMSG_CALG_RC4 = MQCALG.RC4;
pub const MQMSG_CALG_SEAL = MQCALG.SEAL;

pub const MQTRANSACTION = enum(i32) {
    NO_TRANSACTION = 0,
    MTS_TRANSACTION = 1,
    XA_TRANSACTION = 2,
    SINGLE_MESSAGE = 3,
};
pub const MQ_NO_TRANSACTION = MQTRANSACTION.NO_TRANSACTION;
pub const MQ_MTS_TRANSACTION = MQTRANSACTION.MTS_TRANSACTION;
pub const MQ_XA_TRANSACTION = MQTRANSACTION.XA_TRANSACTION;
pub const MQ_SINGLE_MESSAGE = MQTRANSACTION.SINGLE_MESSAGE;

pub const RELOPS = enum(i32) {
    NOP = 0,
    EQ = 1,
    NEQ = 2,
    LT = 3,
    GT = 4,
    LE = 5,
    GE = 6,
};
pub const REL_NOP = RELOPS.NOP;
pub const REL_EQ = RELOPS.EQ;
pub const REL_NEQ = RELOPS.NEQ;
pub const REL_LT = RELOPS.LT;
pub const REL_GT = RELOPS.GT;
pub const REL_LE = RELOPS.LE;
pub const REL_GE = RELOPS.GE;

pub const MQCERT_REGISTER = enum(i32) {
    ALWAYS = 1,
    IF_NOT_EXIST = 2,
};
pub const MQCERT_REGISTER_ALWAYS = MQCERT_REGISTER.ALWAYS;
pub const MQCERT_REGISTER_IF_NOT_EXIST = MQCERT_REGISTER.IF_NOT_EXIST;

pub const MQMSGCURSOR = enum(i32) {
    FIRST = 0,
    CURRENT = 1,
    NEXT = 2,
};
pub const MQMSG_FIRST = MQMSGCURSOR.FIRST;
pub const MQMSG_CURRENT = MQMSGCURSOR.CURRENT;
pub const MQMSG_NEXT = MQMSGCURSOR.NEXT;

pub const MQMSGCLASS = enum(i32) {
    NORMAL = 0,
    REPORT = 1,
    ACK_REACH_QUEUE = 2,
    ACK_RECEIVE = 16384,
    NACK_BAD_DST_Q = 32768,
    NACK_PURGED = 32769,
    NACK_REACH_QUEUE_TIMEOUT = 32770,
    NACK_Q_EXCEED_QUOTA = 32771,
    NACK_ACCESS_DENIED = 32772,
    NACK_HOP_COUNT_EXCEEDED = 32773,
    NACK_BAD_SIGNATURE = 32774,
    NACK_BAD_ENCRYPTION = 32775,
    NACK_COULD_NOT_ENCRYPT = 32776,
    NACK_NOT_TRANSACTIONAL_Q = 32777,
    NACK_NOT_TRANSACTIONAL_MSG = 32778,
    NACK_UNSUPPORTED_CRYPTO_PROVIDER = 32779,
    NACK_SOURCE_COMPUTER_GUID_CHANGED = 32780,
    NACK_Q_DELETED = 49152,
    NACK_Q_PURGED = 49153,
    NACK_RECEIVE_TIMEOUT = 49154,
    NACK_RECEIVE_TIMEOUT_AT_SENDER = 49155,
};
pub const MQMSG_CLASS_NORMAL = MQMSGCLASS.NORMAL;
pub const MQMSG_CLASS_REPORT = MQMSGCLASS.REPORT;
pub const MQMSG_CLASS_ACK_REACH_QUEUE = MQMSGCLASS.ACK_REACH_QUEUE;
pub const MQMSG_CLASS_ACK_RECEIVE = MQMSGCLASS.ACK_RECEIVE;
pub const MQMSG_CLASS_NACK_BAD_DST_Q = MQMSGCLASS.NACK_BAD_DST_Q;
pub const MQMSG_CLASS_NACK_PURGED = MQMSGCLASS.NACK_PURGED;
pub const MQMSG_CLASS_NACK_REACH_QUEUE_TIMEOUT = MQMSGCLASS.NACK_REACH_QUEUE_TIMEOUT;
pub const MQMSG_CLASS_NACK_Q_EXCEED_QUOTA = MQMSGCLASS.NACK_Q_EXCEED_QUOTA;
pub const MQMSG_CLASS_NACK_ACCESS_DENIED = MQMSGCLASS.NACK_ACCESS_DENIED;
pub const MQMSG_CLASS_NACK_HOP_COUNT_EXCEEDED = MQMSGCLASS.NACK_HOP_COUNT_EXCEEDED;
pub const MQMSG_CLASS_NACK_BAD_SIGNATURE = MQMSGCLASS.NACK_BAD_SIGNATURE;
pub const MQMSG_CLASS_NACK_BAD_ENCRYPTION = MQMSGCLASS.NACK_BAD_ENCRYPTION;
pub const MQMSG_CLASS_NACK_COULD_NOT_ENCRYPT = MQMSGCLASS.NACK_COULD_NOT_ENCRYPT;
pub const MQMSG_CLASS_NACK_NOT_TRANSACTIONAL_Q = MQMSGCLASS.NACK_NOT_TRANSACTIONAL_Q;
pub const MQMSG_CLASS_NACK_NOT_TRANSACTIONAL_MSG = MQMSGCLASS.NACK_NOT_TRANSACTIONAL_MSG;
pub const MQMSG_CLASS_NACK_UNSUPPORTED_CRYPTO_PROVIDER = MQMSGCLASS.NACK_UNSUPPORTED_CRYPTO_PROVIDER;
pub const MQMSG_CLASS_NACK_SOURCE_COMPUTER_GUID_CHANGED = MQMSGCLASS.NACK_SOURCE_COMPUTER_GUID_CHANGED;
pub const MQMSG_CLASS_NACK_Q_DELETED = MQMSGCLASS.NACK_Q_DELETED;
pub const MQMSG_CLASS_NACK_Q_PURGED = MQMSGCLASS.NACK_Q_PURGED;
pub const MQMSG_CLASS_NACK_RECEIVE_TIMEOUT = MQMSGCLASS.NACK_RECEIVE_TIMEOUT;
pub const MQMSG_CLASS_NACK_RECEIVE_TIMEOUT_AT_SENDER = MQMSGCLASS.NACK_RECEIVE_TIMEOUT_AT_SENDER;

pub const MQMSGDELIVERY = enum(i32) {
    EXPRESS = 0,
    RECOVERABLE = 1,
};
pub const MQMSG_DELIVERY_EXPRESS = MQMSGDELIVERY.EXPRESS;
pub const MQMSG_DELIVERY_RECOVERABLE = MQMSGDELIVERY.RECOVERABLE;

pub const MQMSGACKNOWLEDGEMENT = enum(i32) {
    NONE = 0,
    POS_ARRIVAL = 1,
    POS_RECEIVE = 2,
    NEG_ARRIVAL = 4,
    NEG_RECEIVE = 8,
    FULL_REACH_QUEUE = 5,
    NACK_RECEIVE = 12,
    FULL_RECEIVE = 14,
    pub const NACK_REACH_QUEUE = .NEG_ARRIVAL;
};
pub const MQMSG_ACKNOWLEDGMENT_NONE = MQMSGACKNOWLEDGEMENT.NONE;
pub const MQMSG_ACKNOWLEDGMENT_POS_ARRIVAL = MQMSGACKNOWLEDGEMENT.POS_ARRIVAL;
pub const MQMSG_ACKNOWLEDGMENT_POS_RECEIVE = MQMSGACKNOWLEDGEMENT.POS_RECEIVE;
pub const MQMSG_ACKNOWLEDGMENT_NEG_ARRIVAL = MQMSGACKNOWLEDGEMENT.NEG_ARRIVAL;
pub const MQMSG_ACKNOWLEDGMENT_NEG_RECEIVE = MQMSGACKNOWLEDGEMENT.NEG_RECEIVE;
pub const MQMSG_ACKNOWLEDGMENT_NACK_REACH_QUEUE = MQMSGACKNOWLEDGEMENT.NEG_ARRIVAL;
pub const MQMSG_ACKNOWLEDGMENT_FULL_REACH_QUEUE = MQMSGACKNOWLEDGEMENT.FULL_REACH_QUEUE;
pub const MQMSG_ACKNOWLEDGMENT_NACK_RECEIVE = MQMSGACKNOWLEDGEMENT.NACK_RECEIVE;
pub const MQMSG_ACKNOWLEDGMENT_FULL_RECEIVE = MQMSGACKNOWLEDGEMENT.FULL_RECEIVE;

pub const MQMSGJOURNAL = enum(i32) {
    JOURNAL_NONE = 0,
    DEADLETTER = 1,
    JOURNAL = 2,
};
pub const MQMSG_JOURNAL_NONE = MQMSGJOURNAL.JOURNAL_NONE;
pub const MQMSG_DEADLETTER = MQMSGJOURNAL.DEADLETTER;
pub const MQMSG_JOURNAL = MQMSGJOURNAL.JOURNAL;

pub const MQMSGTRACE = enum(i32) {
    TRACE_NONE = 0,
    SEND_ROUTE_TO_REPORT_QUEUE = 1,
};
pub const MQMSG_TRACE_NONE = MQMSGTRACE.TRACE_NONE;
pub const MQMSG_SEND_ROUTE_TO_REPORT_QUEUE = MQMSGTRACE.SEND_ROUTE_TO_REPORT_QUEUE;

pub const MQMSGSENDERIDTYPE = enum(i32) {
    NONE = 0,
    SID = 1,
};
pub const MQMSG_SENDERID_TYPE_NONE = MQMSGSENDERIDTYPE.NONE;
pub const MQMSG_SENDERID_TYPE_SID = MQMSGSENDERIDTYPE.SID;

pub const MQMSGPRIVLEVEL = enum(i32) {
    NONE = 0,
    BODY_BASE = 1,
    BODY_ENHANCED = 3,
};
pub const MQMSG_PRIV_LEVEL_NONE = MQMSGPRIVLEVEL.NONE;
pub const MQMSG_PRIV_LEVEL_BODY_BASE = MQMSGPRIVLEVEL.BODY_BASE;
pub const MQMSG_PRIV_LEVEL_BODY_ENHANCED = MQMSGPRIVLEVEL.BODY_ENHANCED;

pub const MQMSGAUTHLEVEL = enum(i32) {
    NONE = 0,
    ALWAYS = 1,
    MSMQ10 = 2,
    MSMQ20 = 4,
    SIG30 = 8,
    pub const SIG10 = .MSMQ10;
    pub const SIG20 = .MSMQ20;
};
pub const MQMSG_AUTH_LEVEL_NONE = MQMSGAUTHLEVEL.NONE;
pub const MQMSG_AUTH_LEVEL_ALWAYS = MQMSGAUTHLEVEL.ALWAYS;
pub const MQMSG_AUTH_LEVEL_MSMQ10 = MQMSGAUTHLEVEL.MSMQ10;
pub const MQMSG_AUTH_LEVEL_SIG10 = MQMSGAUTHLEVEL.MSMQ10;
pub const MQMSG_AUTH_LEVEL_MSMQ20 = MQMSGAUTHLEVEL.MSMQ20;
pub const MQMSG_AUTH_LEVEL_SIG20 = MQMSGAUTHLEVEL.MSMQ20;
pub const MQMSG_AUTH_LEVEL_SIG30 = MQMSGAUTHLEVEL.SIG30;

pub const MQMSGIDSIZE = enum(i32) {
    MSGID_SIZE = 20,
    pub const CORRELATIONID_SIZE = .MSGID_SIZE;
    pub const XACTID_SIZE = .MSGID_SIZE;
};
pub const MQMSG_MSGID_SIZE = MQMSGIDSIZE.MSGID_SIZE;
pub const MQMSG_CORRELATIONID_SIZE = MQMSGIDSIZE.MSGID_SIZE;
pub const MQMSG_XACTID_SIZE = MQMSGIDSIZE.MSGID_SIZE;

pub const MQMSGMAX = enum(i32) {
    N = 249,
};
pub const MQ_MAX_MSG_LABEL_LEN = MQMSGMAX.N;

pub const MQMSGAUTHENTICATION = enum(i32) {
    ION_NOT_REQUESTED = 0,
    ION_REQUESTED = 1,
    ION_REQUESTED_EX = 3,
    ED_SIG30 = 5,
    ED_SIGXML = 9,
    pub const ED_SIG10 = .ION_REQUESTED;
    pub const ED_SIG20 = .ION_REQUESTED_EX;
};
pub const MQMSG_AUTHENTICATION_NOT_REQUESTED = MQMSGAUTHENTICATION.ION_NOT_REQUESTED;
pub const MQMSG_AUTHENTICATION_REQUESTED = MQMSGAUTHENTICATION.ION_REQUESTED;
pub const MQMSG_AUTHENTICATED_SIG10 = MQMSGAUTHENTICATION.ION_REQUESTED;
pub const MQMSG_AUTHENTICATION_REQUESTED_EX = MQMSGAUTHENTICATION.ION_REQUESTED_EX;
pub const MQMSG_AUTHENTICATED_SIG20 = MQMSGAUTHENTICATION.ION_REQUESTED_EX;
pub const MQMSG_AUTHENTICATED_SIG30 = MQMSGAUTHENTICATION.ED_SIG30;
pub const MQMSG_AUTHENTICATED_SIGXML = MQMSGAUTHENTICATION.ED_SIGXML;

pub const MQSHARE = enum(i32) {
    NONE = 0,
    RECEIVE_SHARE = 1,
};
pub const MQ_DENY_NONE = MQSHARE.NONE;
pub const MQ_DENY_RECEIVE_SHARE = MQSHARE.RECEIVE_SHARE;

pub const MQACCESS = enum(i32) {
    RECEIVE_ACCESS = 1,
    SEND_ACCESS = 2,
    PEEK_ACCESS = 32,
    ADMIN_ACCESS = 128,
};
pub const MQ_RECEIVE_ACCESS = MQACCESS.RECEIVE_ACCESS;
pub const MQ_SEND_ACCESS = MQACCESS.SEND_ACCESS;
pub const MQ_PEEK_ACCESS = MQACCESS.PEEK_ACCESS;
pub const MQ_ADMIN_ACCESS = MQACCESS.ADMIN_ACCESS;

pub const MQJOURNAL = enum(i32) {
    _NONE = 0,
    L = 1,
};
pub const MQ_JOURNAL_NONE = MQJOURNAL._NONE;
pub const MQ_JOURNAL = MQJOURNAL.L;

pub const MQTRANSACTIONAL = enum(i32) {
    _NONE = 0,
    L = 1,
};
pub const MQ_TRANSACTIONAL_NONE = MQTRANSACTIONAL._NONE;
pub const MQ_TRANSACTIONAL = MQTRANSACTIONAL.L;

pub const MQAUTHENTICATE = enum(i32) {
    _NONE = 0,
    E = 1,
};
pub const MQ_AUTHENTICATE_NONE = MQAUTHENTICATE._NONE;
pub const MQ_AUTHENTICATE = MQAUTHENTICATE.E;

pub const MQPRIVLEVEL = enum(i32) {
    NONE = 0,
    OPTIONAL = 1,
    BODY = 2,
};
pub const MQ_PRIV_LEVEL_NONE = MQPRIVLEVEL.NONE;
pub const MQ_PRIV_LEVEL_OPTIONAL = MQPRIVLEVEL.OPTIONAL;
pub const MQ_PRIV_LEVEL_BODY = MQPRIVLEVEL.BODY;

pub const MQPRIORITY = enum(i32) {
    IN_PRIORITY = 0,
    AX_PRIORITY = 7,
};
pub const MQ_MIN_PRIORITY = MQPRIORITY.IN_PRIORITY;
pub const MQ_MAX_PRIORITY = MQPRIORITY.AX_PRIORITY;

pub const MQMAX = enum(i32) {
    NAME_LEN = 124,
    pub const LABEL_LEN = .NAME_LEN;
};
pub const MQ_MAX_Q_NAME_LEN = MQMAX.NAME_LEN;
pub const MQ_MAX_Q_LABEL_LEN = MQMAX.NAME_LEN;

pub const QUEUE_TYPE = enum(i32) {
    PUBLIC = 0,
    PRIVATE = 1,
    MACHINE = 2,
    CONNECTOR = 3,
    MULTICAST = 4,
};
pub const MQ_TYPE_PUBLIC = QUEUE_TYPE.PUBLIC;
pub const MQ_TYPE_PRIVATE = QUEUE_TYPE.PRIVATE;
pub const MQ_TYPE_MACHINE = QUEUE_TYPE.MACHINE;
pub const MQ_TYPE_CONNECTOR = QUEUE_TYPE.CONNECTOR;
pub const MQ_TYPE_MULTICAST = QUEUE_TYPE.MULTICAST;

pub const FOREIGN_STATUS = enum(i32) {
    FOREIGN = 0,
    NOT_FOREIGN = 1,
    UNKNOWN = 2,
};
pub const MQ_STATUS_FOREIGN = FOREIGN_STATUS.FOREIGN;
pub const MQ_STATUS_NOT_FOREIGN = FOREIGN_STATUS.NOT_FOREIGN;
pub const MQ_STATUS_UNKNOWN = FOREIGN_STATUS.UNKNOWN;

pub const XACT_STATUS = enum(i32) {
    XACT = 0,
    NOT_XACT = 1,
    UNKNOWN = 2,
};
pub const MQ_XACT_STATUS_XACT = XACT_STATUS.XACT;
pub const MQ_XACT_STATUS_NOT_XACT = XACT_STATUS.NOT_XACT;
pub const MQ_XACT_STATUS_UNKNOWN = XACT_STATUS.UNKNOWN;

pub const QUEUE_STATE = enum(i32) {
    LOCAL_CONNECTION = 0,
    DISCONNECTED = 1,
    WAITING = 2,
    NEEDVALIDATE = 3,
    ONHOLD = 4,
    NONACTIVE = 5,
    CONNECTED = 6,
    DISCONNECTING = 7,
    LOCKED = 8,
};
pub const MQ_QUEUE_STATE_LOCAL_CONNECTION = QUEUE_STATE.LOCAL_CONNECTION;
pub const MQ_QUEUE_STATE_DISCONNECTED = QUEUE_STATE.DISCONNECTED;
pub const MQ_QUEUE_STATE_WAITING = QUEUE_STATE.WAITING;
pub const MQ_QUEUE_STATE_NEEDVALIDATE = QUEUE_STATE.NEEDVALIDATE;
pub const MQ_QUEUE_STATE_ONHOLD = QUEUE_STATE.ONHOLD;
pub const MQ_QUEUE_STATE_NONACTIVE = QUEUE_STATE.NONACTIVE;
pub const MQ_QUEUE_STATE_CONNECTED = QUEUE_STATE.CONNECTED;
pub const MQ_QUEUE_STATE_DISCONNECTING = QUEUE_STATE.DISCONNECTING;
pub const MQ_QUEUE_STATE_LOCKED = QUEUE_STATE.LOCKED;

pub const MQDEFAULT = enum(i32) {
    M_PRIORITY = 3,
    M_DELIVERY = 0,
    M_SENDERID_TYPE = 1,
    Q_QUOTA = -1,
    pub const M_ACKNOWLEDGE = .M_DELIVERY;
    pub const M_JOURNAL = .M_DELIVERY;
    pub const M_APPSPECIFIC = .M_DELIVERY;
    pub const M_PRIV_LEVEL = .M_DELIVERY;
    pub const M_AUTH_LEVEL = .M_DELIVERY;
    pub const Q_JOURNAL = .M_DELIVERY;
    pub const Q_BASEPRIORITY = .M_DELIVERY;
    pub const Q_JOURNAL_QUOTA = .Q_QUOTA;
    pub const Q_TRANSACTION = .M_DELIVERY;
    pub const Q_AUTHENTICATE = .M_DELIVERY;
    pub const Q_PRIV_LEVEL = .M_SENDERID_TYPE;
    pub const M_LOOKUPID = .M_DELIVERY;
};
pub const DEFAULT_M_PRIORITY = MQDEFAULT.M_PRIORITY;
pub const DEFAULT_M_DELIVERY = MQDEFAULT.M_DELIVERY;
pub const DEFAULT_M_ACKNOWLEDGE = MQDEFAULT.M_DELIVERY;
pub const DEFAULT_M_JOURNAL = MQDEFAULT.M_DELIVERY;
pub const DEFAULT_M_APPSPECIFIC = MQDEFAULT.M_DELIVERY;
pub const DEFAULT_M_PRIV_LEVEL = MQDEFAULT.M_DELIVERY;
pub const DEFAULT_M_AUTH_LEVEL = MQDEFAULT.M_DELIVERY;
pub const DEFAULT_M_SENDERID_TYPE = MQDEFAULT.M_SENDERID_TYPE;
pub const DEFAULT_Q_JOURNAL = MQDEFAULT.M_DELIVERY;
pub const DEFAULT_Q_BASEPRIORITY = MQDEFAULT.M_DELIVERY;
pub const DEFAULT_Q_QUOTA = MQDEFAULT.Q_QUOTA;
pub const DEFAULT_Q_JOURNAL_QUOTA = MQDEFAULT.Q_QUOTA;
pub const DEFAULT_Q_TRANSACTION = MQDEFAULT.M_DELIVERY;
pub const DEFAULT_Q_AUTHENTICATE = MQDEFAULT.M_DELIVERY;
pub const DEFAULT_Q_PRIV_LEVEL = MQDEFAULT.M_SENDERID_TYPE;
pub const DEFAULT_M_LOOKUPID = MQDEFAULT.M_DELIVERY;

pub const MQERROR = enum(i32) {
    ERROR = -1072824319,
    ERROR_PROPERTY = -1072824318,
    ERROR_QUEUE_NOT_FOUND = -1072824317,
    ERROR_QUEUE_NOT_ACTIVE = -1072824316,
    ERROR_QUEUE_EXISTS = -1072824315,
    ERROR_INVALID_PARAMETER = -1072824314,
    ERROR_INVALID_HANDLE = -1072824313,
    ERROR_OPERATION_CANCELLED = -1072824312,
    ERROR_SHARING_VIOLATION = -1072824311,
    ERROR_SERVICE_NOT_AVAILABLE = -1072824309,
    ERROR_MACHINE_NOT_FOUND = -1072824307,
    ERROR_ILLEGAL_SORT = -1072824304,
    ERROR_ILLEGAL_USER = -1072824303,
    ERROR_NO_DS = -1072824301,
    ERROR_ILLEGAL_QUEUE_PATHNAME = -1072824300,
    ERROR_ILLEGAL_PROPERTY_VALUE = -1072824296,
    ERROR_ILLEGAL_PROPERTY_VT = -1072824295,
    ERROR_BUFFER_OVERFLOW = -1072824294,
    ERROR_IO_TIMEOUT = -1072824293,
    ERROR_ILLEGAL_CURSOR_ACTION = -1072824292,
    ERROR_MESSAGE_ALREADY_RECEIVED = -1072824291,
    ERROR_ILLEGAL_FORMATNAME = -1072824290,
    ERROR_FORMATNAME_BUFFER_TOO_SMALL = -1072824289,
    ERROR_UNSUPPORTED_FORMATNAME_OPERATION = -1072824288,
    ERROR_ILLEGAL_SECURITY_DESCRIPTOR = -1072824287,
    ERROR_SENDERID_BUFFER_TOO_SMALL = -1072824286,
    ERROR_SECURITY_DESCRIPTOR_TOO_SMALL = -1072824285,
    ERROR_CANNOT_IMPERSONATE_CLIENT = -1072824284,
    ERROR_ACCESS_DENIED = -1072824283,
    ERROR_PRIVILEGE_NOT_HELD = -1072824282,
    ERROR_INSUFFICIENT_RESOURCES = -1072824281,
    ERROR_USER_BUFFER_TOO_SMALL = -1072824280,
    ERROR_MESSAGE_STORAGE_FAILED = -1072824278,
    ERROR_SENDER_CERT_BUFFER_TOO_SMALL = -1072824277,
    ERROR_INVALID_CERTIFICATE = -1072824276,
    ERROR_CORRUPTED_INTERNAL_CERTIFICATE = -1072824275,
    ERROR_INTERNAL_USER_CERT_EXIST = -1072824274,
    ERROR_NO_INTERNAL_USER_CERT = -1072824273,
    ERROR_CORRUPTED_SECURITY_DATA = -1072824272,
    ERROR_CORRUPTED_PERSONAL_CERT_STORE = -1072824271,
    ERROR_COMPUTER_DOES_NOT_SUPPORT_ENCRYPTION = -1072824269,
    ERROR_BAD_SECURITY_CONTEXT = -1072824267,
    ERROR_COULD_NOT_GET_USER_SID = -1072824266,
    ERROR_COULD_NOT_GET_ACCOUNT_INFO = -1072824265,
    ERROR_ILLEGAL_MQCOLUMNS = -1072824264,
    ERROR_ILLEGAL_PROPID = -1072824263,
    ERROR_ILLEGAL_RELATION = -1072824262,
    ERROR_ILLEGAL_PROPERTY_SIZE = -1072824261,
    ERROR_ILLEGAL_RESTRICTION_PROPID = -1072824260,
    ERROR_ILLEGAL_MQQUEUEPROPS = -1072824259,
    ERROR_PROPERTY_NOTALLOWED = -1072824258,
    ERROR_INSUFFICIENT_PROPERTIES = -1072824257,
    ERROR_MACHINE_EXISTS = -1072824256,
    ERROR_ILLEGAL_MQQMPROPS = -1072824255,
    ERROR_DS_IS_FULL = -1072824254,
    ERROR_DS_ERROR = -1072824253,
    ERROR_INVALID_OWNER = -1072824252,
    ERROR_UNSUPPORTED_ACCESS_MODE = -1072824251,
    ERROR_RESULT_BUFFER_TOO_SMALL = -1072824250,
    ERROR_DELETE_CN_IN_USE = -1072824248,
    ERROR_NO_RESPONSE_FROM_OBJECT_SERVER = -1072824247,
    ERROR_OBJECT_SERVER_NOT_AVAILABLE = -1072824246,
    ERROR_QUEUE_NOT_AVAILABLE = -1072824245,
    ERROR_DTC_CONNECT = -1072824244,
    ERROR_TRANSACTION_IMPORT = -1072824242,
    ERROR_TRANSACTION_USAGE = -1072824240,
    ERROR_TRANSACTION_SEQUENCE = -1072824239,
    ERROR_MISSING_CONNECTOR_TYPE = -1072824235,
    ERROR_STALE_HANDLE = -1072824234,
    ERROR_TRANSACTION_ENLIST = -1072824232,
    ERROR_QUEUE_DELETED = -1072824230,
    ERROR_ILLEGAL_CONTEXT = -1072824229,
    ERROR_ILLEGAL_SORT_PROPID = -1072824228,
    ERROR_LABEL_TOO_LONG = -1072824227,
    ERROR_LABEL_BUFFER_TOO_SMALL = -1072824226,
    ERROR_MQIS_SERVER_EMPTY = -1072824225,
    ERROR_MQIS_READONLY_MODE = -1072824224,
    ERROR_SYMM_KEY_BUFFER_TOO_SMALL = -1072824223,
    ERROR_SIGNATURE_BUFFER_TOO_SMALL = -1072824222,
    ERROR_PROV_NAME_BUFFER_TOO_SMALL = -1072824221,
    ERROR_ILLEGAL_OPERATION = -1072824220,
    ERROR_WRITE_NOT_ALLOWED = -1072824219,
    ERROR_WKS_CANT_SERVE_CLIENT = -1072824218,
    ERROR_DEPEND_WKS_LICENSE_OVERFLOW = -1072824217,
    CORRUPTED_QUEUE_WAS_DELETED = -1072824216,
    ERROR_REMOTE_MACHINE_NOT_AVAILABLE = -1072824215,
    ERROR_UNSUPPORTED_OPERATION = -1072824214,
    ERROR_ENCRYPTION_PROVIDER_NOT_SUPPORTED = -1072824213,
    ERROR_CANNOT_SET_CRYPTO_SEC_DESCR = -1072824212,
    ERROR_CERTIFICATE_NOT_PROVIDED = -1072824211,
    ERROR_Q_DNS_PROPERTY_NOT_SUPPORTED = -1072824210,
    ERROR_CANT_CREATE_CERT_STORE = -1072824209,
    ERROR_CANT_OPEN_CERT_STORE = -1072824208,
    ERROR_ILLEGAL_ENTERPRISE_OPERATION = -1072824207,
    ERROR_CANNOT_GRANT_ADD_GUID = -1072824206,
    ERROR_CANNOT_LOAD_MSMQOCM = -1072824205,
    ERROR_NO_ENTRY_POINT_MSMQOCM = -1072824204,
    ERROR_NO_MSMQ_SERVERS_ON_DC = -1072824203,
    ERROR_CANNOT_JOIN_DOMAIN = -1072824202,
    ERROR_CANNOT_CREATE_ON_GC = -1072824201,
    ERROR_GUID_NOT_MATCHING = -1072824200,
    ERROR_PUBLIC_KEY_NOT_FOUND = -1072824199,
    ERROR_PUBLIC_KEY_DOES_NOT_EXIST = -1072824198,
    ERROR_ILLEGAL_MQPRIVATEPROPS = -1072824197,
    ERROR_NO_GC_IN_DOMAIN = -1072824196,
    ERROR_NO_MSMQ_SERVERS_ON_GC = -1072824195,
    ERROR_CANNOT_GET_DN = -1072824194,
    ERROR_CANNOT_HASH_DATA_EX = -1072824193,
    ERROR_CANNOT_SIGN_DATA_EX = -1072824192,
    ERROR_CANNOT_CREATE_HASH_EX = -1072824191,
    ERROR_FAIL_VERIFY_SIGNATURE_EX = -1072824190,
    ERROR_CANNOT_DELETE_PSC_OBJECTS = -1072824189,
    ERROR_NO_MQUSER_OU = -1072824188,
    ERROR_CANNOT_LOAD_MQAD = -1072824187,
    ERROR_CANNOT_LOAD_MQDSSRV = -1072824186,
    ERROR_PROPERTIES_CONFLICT = -1072824185,
    ERROR_MESSAGE_NOT_FOUND = -1072824184,
    ERROR_CANT_RESOLVE_SITES = -1072824183,
    ERROR_NOT_SUPPORTED_BY_DEPENDENT_CLIENTS = -1072824182,
    ERROR_OPERATION_NOT_SUPPORTED_BY_REMOTE_COMPUTER = -1072824181,
    ERROR_NOT_A_CORRECT_OBJECT_CLASS = -1072824180,
    ERROR_MULTI_SORT_KEYS = -1072824179,
    ERROR_GC_NEEDED = -1072824178,
    ERROR_DS_BIND_ROOT_FOREST = -1072824177,
    ERROR_DS_LOCAL_USER = -1072824176,
    ERROR_Q_ADS_PROPERTY_NOT_SUPPORTED = -1072824175,
    ERROR_BAD_XML_FORMAT = -1072824174,
    ERROR_UNSUPPORTED_CLASS = -1072824173,
    ERROR_UNINITIALIZED_OBJECT = -1072824172,
    ERROR_CANNOT_CREATE_PSC_OBJECTS = -1072824171,
    ERROR_CANNOT_UPDATE_PSC_OBJECTS = -1072824170,
    pub const ERROR_CANNOT_CREATE_CERT_STORE = .ERROR_CANT_CREATE_CERT_STORE;
    pub const ERROR_CANNOT_OPEN_CERT_STORE = .ERROR_CANT_OPEN_CERT_STORE;
};
pub const MQ_ERROR = MQERROR.ERROR;
pub const MQ_ERROR_PROPERTY = MQERROR.ERROR_PROPERTY;
pub const MQ_ERROR_QUEUE_NOT_FOUND = MQERROR.ERROR_QUEUE_NOT_FOUND;
pub const MQ_ERROR_QUEUE_NOT_ACTIVE = MQERROR.ERROR_QUEUE_NOT_ACTIVE;
pub const MQ_ERROR_QUEUE_EXISTS = MQERROR.ERROR_QUEUE_EXISTS;
pub const MQ_ERROR_INVALID_PARAMETER = MQERROR.ERROR_INVALID_PARAMETER;
pub const MQ_ERROR_INVALID_HANDLE = MQERROR.ERROR_INVALID_HANDLE;
pub const MQ_ERROR_OPERATION_CANCELLED = MQERROR.ERROR_OPERATION_CANCELLED;
pub const MQ_ERROR_SHARING_VIOLATION = MQERROR.ERROR_SHARING_VIOLATION;
pub const MQ_ERROR_SERVICE_NOT_AVAILABLE = MQERROR.ERROR_SERVICE_NOT_AVAILABLE;
pub const MQ_ERROR_MACHINE_NOT_FOUND = MQERROR.ERROR_MACHINE_NOT_FOUND;
pub const MQ_ERROR_ILLEGAL_SORT = MQERROR.ERROR_ILLEGAL_SORT;
pub const MQ_ERROR_ILLEGAL_USER = MQERROR.ERROR_ILLEGAL_USER;
pub const MQ_ERROR_NO_DS = MQERROR.ERROR_NO_DS;
pub const MQ_ERROR_ILLEGAL_QUEUE_PATHNAME = MQERROR.ERROR_ILLEGAL_QUEUE_PATHNAME;
pub const MQ_ERROR_ILLEGAL_PROPERTY_VALUE = MQERROR.ERROR_ILLEGAL_PROPERTY_VALUE;
pub const MQ_ERROR_ILLEGAL_PROPERTY_VT = MQERROR.ERROR_ILLEGAL_PROPERTY_VT;
pub const MQ_ERROR_BUFFER_OVERFLOW = MQERROR.ERROR_BUFFER_OVERFLOW;
pub const MQ_ERROR_IO_TIMEOUT = MQERROR.ERROR_IO_TIMEOUT;
pub const MQ_ERROR_ILLEGAL_CURSOR_ACTION = MQERROR.ERROR_ILLEGAL_CURSOR_ACTION;
pub const MQ_ERROR_MESSAGE_ALREADY_RECEIVED = MQERROR.ERROR_MESSAGE_ALREADY_RECEIVED;
pub const MQ_ERROR_ILLEGAL_FORMATNAME = MQERROR.ERROR_ILLEGAL_FORMATNAME;
pub const MQ_ERROR_FORMATNAME_BUFFER_TOO_SMALL = MQERROR.ERROR_FORMATNAME_BUFFER_TOO_SMALL;
pub const MQ_ERROR_UNSUPPORTED_FORMATNAME_OPERATION = MQERROR.ERROR_UNSUPPORTED_FORMATNAME_OPERATION;
pub const MQ_ERROR_ILLEGAL_SECURITY_DESCRIPTOR = MQERROR.ERROR_ILLEGAL_SECURITY_DESCRIPTOR;
pub const MQ_ERROR_SENDERID_BUFFER_TOO_SMALL = MQERROR.ERROR_SENDERID_BUFFER_TOO_SMALL;
pub const MQ_ERROR_SECURITY_DESCRIPTOR_TOO_SMALL = MQERROR.ERROR_SECURITY_DESCRIPTOR_TOO_SMALL;
pub const MQ_ERROR_CANNOT_IMPERSONATE_CLIENT = MQERROR.ERROR_CANNOT_IMPERSONATE_CLIENT;
pub const MQ_ERROR_ACCESS_DENIED = MQERROR.ERROR_ACCESS_DENIED;
pub const MQ_ERROR_PRIVILEGE_NOT_HELD = MQERROR.ERROR_PRIVILEGE_NOT_HELD;
pub const MQ_ERROR_INSUFFICIENT_RESOURCES = MQERROR.ERROR_INSUFFICIENT_RESOURCES;
pub const MQ_ERROR_USER_BUFFER_TOO_SMALL = MQERROR.ERROR_USER_BUFFER_TOO_SMALL;
pub const MQ_ERROR_MESSAGE_STORAGE_FAILED = MQERROR.ERROR_MESSAGE_STORAGE_FAILED;
pub const MQ_ERROR_SENDER_CERT_BUFFER_TOO_SMALL = MQERROR.ERROR_SENDER_CERT_BUFFER_TOO_SMALL;
pub const MQ_ERROR_INVALID_CERTIFICATE = MQERROR.ERROR_INVALID_CERTIFICATE;
pub const MQ_ERROR_CORRUPTED_INTERNAL_CERTIFICATE = MQERROR.ERROR_CORRUPTED_INTERNAL_CERTIFICATE;
pub const MQ_ERROR_INTERNAL_USER_CERT_EXIST = MQERROR.ERROR_INTERNAL_USER_CERT_EXIST;
pub const MQ_ERROR_NO_INTERNAL_USER_CERT = MQERROR.ERROR_NO_INTERNAL_USER_CERT;
pub const MQ_ERROR_CORRUPTED_SECURITY_DATA = MQERROR.ERROR_CORRUPTED_SECURITY_DATA;
pub const MQ_ERROR_CORRUPTED_PERSONAL_CERT_STORE = MQERROR.ERROR_CORRUPTED_PERSONAL_CERT_STORE;
pub const MQ_ERROR_COMPUTER_DOES_NOT_SUPPORT_ENCRYPTION = MQERROR.ERROR_COMPUTER_DOES_NOT_SUPPORT_ENCRYPTION;
pub const MQ_ERROR_BAD_SECURITY_CONTEXT = MQERROR.ERROR_BAD_SECURITY_CONTEXT;
pub const MQ_ERROR_COULD_NOT_GET_USER_SID = MQERROR.ERROR_COULD_NOT_GET_USER_SID;
pub const MQ_ERROR_COULD_NOT_GET_ACCOUNT_INFO = MQERROR.ERROR_COULD_NOT_GET_ACCOUNT_INFO;
pub const MQ_ERROR_ILLEGAL_MQCOLUMNS = MQERROR.ERROR_ILLEGAL_MQCOLUMNS;
pub const MQ_ERROR_ILLEGAL_PROPID = MQERROR.ERROR_ILLEGAL_PROPID;
pub const MQ_ERROR_ILLEGAL_RELATION = MQERROR.ERROR_ILLEGAL_RELATION;
pub const MQ_ERROR_ILLEGAL_PROPERTY_SIZE = MQERROR.ERROR_ILLEGAL_PROPERTY_SIZE;
pub const MQ_ERROR_ILLEGAL_RESTRICTION_PROPID = MQERROR.ERROR_ILLEGAL_RESTRICTION_PROPID;
pub const MQ_ERROR_ILLEGAL_MQQUEUEPROPS = MQERROR.ERROR_ILLEGAL_MQQUEUEPROPS;
pub const MQ_ERROR_PROPERTY_NOTALLOWED = MQERROR.ERROR_PROPERTY_NOTALLOWED;
pub const MQ_ERROR_INSUFFICIENT_PROPERTIES = MQERROR.ERROR_INSUFFICIENT_PROPERTIES;
pub const MQ_ERROR_MACHINE_EXISTS = MQERROR.ERROR_MACHINE_EXISTS;
pub const MQ_ERROR_ILLEGAL_MQQMPROPS = MQERROR.ERROR_ILLEGAL_MQQMPROPS;
pub const MQ_ERROR_DS_IS_FULL = MQERROR.ERROR_DS_IS_FULL;
pub const MQ_ERROR_DS_ERROR = MQERROR.ERROR_DS_ERROR;
pub const MQ_ERROR_INVALID_OWNER = MQERROR.ERROR_INVALID_OWNER;
pub const MQ_ERROR_UNSUPPORTED_ACCESS_MODE = MQERROR.ERROR_UNSUPPORTED_ACCESS_MODE;
pub const MQ_ERROR_RESULT_BUFFER_TOO_SMALL = MQERROR.ERROR_RESULT_BUFFER_TOO_SMALL;
pub const MQ_ERROR_DELETE_CN_IN_USE = MQERROR.ERROR_DELETE_CN_IN_USE;
pub const MQ_ERROR_NO_RESPONSE_FROM_OBJECT_SERVER = MQERROR.ERROR_NO_RESPONSE_FROM_OBJECT_SERVER;
pub const MQ_ERROR_OBJECT_SERVER_NOT_AVAILABLE = MQERROR.ERROR_OBJECT_SERVER_NOT_AVAILABLE;
pub const MQ_ERROR_QUEUE_NOT_AVAILABLE = MQERROR.ERROR_QUEUE_NOT_AVAILABLE;
pub const MQ_ERROR_DTC_CONNECT = MQERROR.ERROR_DTC_CONNECT;
pub const MQ_ERROR_TRANSACTION_IMPORT = MQERROR.ERROR_TRANSACTION_IMPORT;
pub const MQ_ERROR_TRANSACTION_USAGE = MQERROR.ERROR_TRANSACTION_USAGE;
pub const MQ_ERROR_TRANSACTION_SEQUENCE = MQERROR.ERROR_TRANSACTION_SEQUENCE;
pub const MQ_ERROR_MISSING_CONNECTOR_TYPE = MQERROR.ERROR_MISSING_CONNECTOR_TYPE;
pub const MQ_ERROR_STALE_HANDLE = MQERROR.ERROR_STALE_HANDLE;
pub const MQ_ERROR_TRANSACTION_ENLIST = MQERROR.ERROR_TRANSACTION_ENLIST;
pub const MQ_ERROR_QUEUE_DELETED = MQERROR.ERROR_QUEUE_DELETED;
pub const MQ_ERROR_ILLEGAL_CONTEXT = MQERROR.ERROR_ILLEGAL_CONTEXT;
pub const MQ_ERROR_ILLEGAL_SORT_PROPID = MQERROR.ERROR_ILLEGAL_SORT_PROPID;
pub const MQ_ERROR_LABEL_TOO_LONG = MQERROR.ERROR_LABEL_TOO_LONG;
pub const MQ_ERROR_LABEL_BUFFER_TOO_SMALL = MQERROR.ERROR_LABEL_BUFFER_TOO_SMALL;
pub const MQ_ERROR_MQIS_SERVER_EMPTY = MQERROR.ERROR_MQIS_SERVER_EMPTY;
pub const MQ_ERROR_MQIS_READONLY_MODE = MQERROR.ERROR_MQIS_READONLY_MODE;
pub const MQ_ERROR_SYMM_KEY_BUFFER_TOO_SMALL = MQERROR.ERROR_SYMM_KEY_BUFFER_TOO_SMALL;
pub const MQ_ERROR_SIGNATURE_BUFFER_TOO_SMALL = MQERROR.ERROR_SIGNATURE_BUFFER_TOO_SMALL;
pub const MQ_ERROR_PROV_NAME_BUFFER_TOO_SMALL = MQERROR.ERROR_PROV_NAME_BUFFER_TOO_SMALL;
pub const MQ_ERROR_ILLEGAL_OPERATION = MQERROR.ERROR_ILLEGAL_OPERATION;
pub const MQ_ERROR_WRITE_NOT_ALLOWED = MQERROR.ERROR_WRITE_NOT_ALLOWED;
pub const MQ_ERROR_WKS_CANT_SERVE_CLIENT = MQERROR.ERROR_WKS_CANT_SERVE_CLIENT;
pub const MQ_ERROR_DEPEND_WKS_LICENSE_OVERFLOW = MQERROR.ERROR_DEPEND_WKS_LICENSE_OVERFLOW;
pub const MQ_CORRUPTED_QUEUE_WAS_DELETED = MQERROR.CORRUPTED_QUEUE_WAS_DELETED;
pub const MQ_ERROR_REMOTE_MACHINE_NOT_AVAILABLE = MQERROR.ERROR_REMOTE_MACHINE_NOT_AVAILABLE;
pub const MQ_ERROR_UNSUPPORTED_OPERATION = MQERROR.ERROR_UNSUPPORTED_OPERATION;
pub const MQ_ERROR_ENCRYPTION_PROVIDER_NOT_SUPPORTED = MQERROR.ERROR_ENCRYPTION_PROVIDER_NOT_SUPPORTED;
pub const MQ_ERROR_CANNOT_SET_CRYPTO_SEC_DESCR = MQERROR.ERROR_CANNOT_SET_CRYPTO_SEC_DESCR;
pub const MQ_ERROR_CERTIFICATE_NOT_PROVIDED = MQERROR.ERROR_CERTIFICATE_NOT_PROVIDED;
pub const MQ_ERROR_Q_DNS_PROPERTY_NOT_SUPPORTED = MQERROR.ERROR_Q_DNS_PROPERTY_NOT_SUPPORTED;
pub const MQ_ERROR_CANT_CREATE_CERT_STORE = MQERROR.ERROR_CANT_CREATE_CERT_STORE;
pub const MQ_ERROR_CANNOT_CREATE_CERT_STORE = MQERROR.ERROR_CANT_CREATE_CERT_STORE;
pub const MQ_ERROR_CANT_OPEN_CERT_STORE = MQERROR.ERROR_CANT_OPEN_CERT_STORE;
pub const MQ_ERROR_CANNOT_OPEN_CERT_STORE = MQERROR.ERROR_CANT_OPEN_CERT_STORE;
pub const MQ_ERROR_ILLEGAL_ENTERPRISE_OPERATION = MQERROR.ERROR_ILLEGAL_ENTERPRISE_OPERATION;
pub const MQ_ERROR_CANNOT_GRANT_ADD_GUID = MQERROR.ERROR_CANNOT_GRANT_ADD_GUID;
pub const MQ_ERROR_CANNOT_LOAD_MSMQOCM = MQERROR.ERROR_CANNOT_LOAD_MSMQOCM;
pub const MQ_ERROR_NO_ENTRY_POINT_MSMQOCM = MQERROR.ERROR_NO_ENTRY_POINT_MSMQOCM;
pub const MQ_ERROR_NO_MSMQ_SERVERS_ON_DC = MQERROR.ERROR_NO_MSMQ_SERVERS_ON_DC;
pub const MQ_ERROR_CANNOT_JOIN_DOMAIN = MQERROR.ERROR_CANNOT_JOIN_DOMAIN;
pub const MQ_ERROR_CANNOT_CREATE_ON_GC = MQERROR.ERROR_CANNOT_CREATE_ON_GC;
pub const MQ_ERROR_GUID_NOT_MATCHING = MQERROR.ERROR_GUID_NOT_MATCHING;
pub const MQ_ERROR_PUBLIC_KEY_NOT_FOUND = MQERROR.ERROR_PUBLIC_KEY_NOT_FOUND;
pub const MQ_ERROR_PUBLIC_KEY_DOES_NOT_EXIST = MQERROR.ERROR_PUBLIC_KEY_DOES_NOT_EXIST;
pub const MQ_ERROR_ILLEGAL_MQPRIVATEPROPS = MQERROR.ERROR_ILLEGAL_MQPRIVATEPROPS;
pub const MQ_ERROR_NO_GC_IN_DOMAIN = MQERROR.ERROR_NO_GC_IN_DOMAIN;
pub const MQ_ERROR_NO_MSMQ_SERVERS_ON_GC = MQERROR.ERROR_NO_MSMQ_SERVERS_ON_GC;
pub const MQ_ERROR_CANNOT_GET_DN = MQERROR.ERROR_CANNOT_GET_DN;
pub const MQ_ERROR_CANNOT_HASH_DATA_EX = MQERROR.ERROR_CANNOT_HASH_DATA_EX;
pub const MQ_ERROR_CANNOT_SIGN_DATA_EX = MQERROR.ERROR_CANNOT_SIGN_DATA_EX;
pub const MQ_ERROR_CANNOT_CREATE_HASH_EX = MQERROR.ERROR_CANNOT_CREATE_HASH_EX;
pub const MQ_ERROR_FAIL_VERIFY_SIGNATURE_EX = MQERROR.ERROR_FAIL_VERIFY_SIGNATURE_EX;
pub const MQ_ERROR_CANNOT_DELETE_PSC_OBJECTS = MQERROR.ERROR_CANNOT_DELETE_PSC_OBJECTS;
pub const MQ_ERROR_NO_MQUSER_OU = MQERROR.ERROR_NO_MQUSER_OU;
pub const MQ_ERROR_CANNOT_LOAD_MQAD = MQERROR.ERROR_CANNOT_LOAD_MQAD;
pub const MQ_ERROR_CANNOT_LOAD_MQDSSRV = MQERROR.ERROR_CANNOT_LOAD_MQDSSRV;
pub const MQ_ERROR_PROPERTIES_CONFLICT = MQERROR.ERROR_PROPERTIES_CONFLICT;
pub const MQ_ERROR_MESSAGE_NOT_FOUND = MQERROR.ERROR_MESSAGE_NOT_FOUND;
pub const MQ_ERROR_CANT_RESOLVE_SITES = MQERROR.ERROR_CANT_RESOLVE_SITES;
pub const MQ_ERROR_NOT_SUPPORTED_BY_DEPENDENT_CLIENTS = MQERROR.ERROR_NOT_SUPPORTED_BY_DEPENDENT_CLIENTS;
pub const MQ_ERROR_OPERATION_NOT_SUPPORTED_BY_REMOTE_COMPUTER = MQERROR.ERROR_OPERATION_NOT_SUPPORTED_BY_REMOTE_COMPUTER;
pub const MQ_ERROR_NOT_A_CORRECT_OBJECT_CLASS = MQERROR.ERROR_NOT_A_CORRECT_OBJECT_CLASS;
pub const MQ_ERROR_MULTI_SORT_KEYS = MQERROR.ERROR_MULTI_SORT_KEYS;
pub const MQ_ERROR_GC_NEEDED = MQERROR.ERROR_GC_NEEDED;
pub const MQ_ERROR_DS_BIND_ROOT_FOREST = MQERROR.ERROR_DS_BIND_ROOT_FOREST;
pub const MQ_ERROR_DS_LOCAL_USER = MQERROR.ERROR_DS_LOCAL_USER;
pub const MQ_ERROR_Q_ADS_PROPERTY_NOT_SUPPORTED = MQERROR.ERROR_Q_ADS_PROPERTY_NOT_SUPPORTED;
pub const MQ_ERROR_BAD_XML_FORMAT = MQERROR.ERROR_BAD_XML_FORMAT;
pub const MQ_ERROR_UNSUPPORTED_CLASS = MQERROR.ERROR_UNSUPPORTED_CLASS;
pub const MQ_ERROR_UNINITIALIZED_OBJECT = MQERROR.ERROR_UNINITIALIZED_OBJECT;
pub const MQ_ERROR_CANNOT_CREATE_PSC_OBJECTS = MQERROR.ERROR_CANNOT_CREATE_PSC_OBJECTS;
pub const MQ_ERROR_CANNOT_UPDATE_PSC_OBJECTS = MQERROR.ERROR_CANNOT_UPDATE_PSC_OBJECTS;

pub const MQWARNING = enum(i32) {
    PROPERTY = 1074659329,
    ILLEGAL_PROPERTY = 1074659330,
    PROPERTY_IGNORED = 1074659331,
    UNSUPPORTED_PROPERTY = 1074659332,
    DUPLICATE_PROPERTY = 1074659333,
    OPERATION_PENDING = 1074659334,
    FORMATNAME_BUFFER_TOO_SMALL = 1074659337,
    INTERNAL_USER_CERT_EXIST = 1074659338,
    OWNER_IGNORED = 1074659339,
};
pub const MQ_INFORMATION_PROPERTY = MQWARNING.PROPERTY;
pub const MQ_INFORMATION_ILLEGAL_PROPERTY = MQWARNING.ILLEGAL_PROPERTY;
pub const MQ_INFORMATION_PROPERTY_IGNORED = MQWARNING.PROPERTY_IGNORED;
pub const MQ_INFORMATION_UNSUPPORTED_PROPERTY = MQWARNING.UNSUPPORTED_PROPERTY;
pub const MQ_INFORMATION_DUPLICATE_PROPERTY = MQWARNING.DUPLICATE_PROPERTY;
pub const MQ_INFORMATION_OPERATION_PENDING = MQWARNING.OPERATION_PENDING;
pub const MQ_INFORMATION_FORMATNAME_BUFFER_TOO_SMALL = MQWARNING.FORMATNAME_BUFFER_TOO_SMALL;
pub const MQ_INFORMATION_INTERNAL_USER_CERT_EXIST = MQWARNING.INTERNAL_USER_CERT_EXIST;
pub const MQ_INFORMATION_OWNER_IGNORED = MQWARNING.OWNER_IGNORED;

const IID_IMSMQQuery_Value = Guid.initString("d7d6e072-dccd-11d0-aa4b-0060970debae");
pub const IID_IMSMQQuery = &IID_IMSMQQuery_Value;
pub const IMSMQQuery = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        LookupQueue: *const fn(
            self: *const IMSMQQuery,
            QueueGuid: ?*VARIANT,
            ServiceTypeGuid: ?*VARIANT,
            Label: ?*VARIANT,
            CreateTime: ?*VARIANT,
            ModifyTime: ?*VARIANT,
            RelServiceType: ?*VARIANT,
            RelLabel: ?*VARIANT,
            RelCreateTime: ?*VARIANT,
            RelModifyTime: ?*VARIANT,
            ppqinfos: ?*?*IMSMQQueueInfos,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn LookupQueue(self: *const IMSMQQuery, QueueGuid: ?*VARIANT, ServiceTypeGuid: ?*VARIANT, Label: ?*VARIANT, CreateTime: ?*VARIANT, ModifyTime: ?*VARIANT, RelServiceType: ?*VARIANT, RelLabel: ?*VARIANT, RelCreateTime: ?*VARIANT, RelModifyTime: ?*VARIANT, ppqinfos: ?*?*IMSMQQueueInfos) callconv(.Inline) HRESULT {
        return self.vtable.LookupQueue(self, QueueGuid, ServiceTypeGuid, Label, CreateTime, ModifyTime, RelServiceType, RelLabel, RelCreateTime, RelModifyTime, ppqinfos);
    }
};

const IID_IMSMQQueueInfo_Value = Guid.initString("d7d6e07b-dccd-11d0-aa4b-0060970debae");
pub const IID_IMSMQQueueInfo = &IID_IMSMQQueueInfo_Value;
pub const IMSMQQueueInfo = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QueueGuid: *const fn(
            self: *const IMSMQQueueInfo,
            pbstrGuidQueue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServiceTypeGuid: *const fn(
            self: *const IMSMQQueueInfo,
            pbstrGuidServiceType: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ServiceTypeGuid: *const fn(
            self: *const IMSMQQueueInfo,
            bstrGuidServiceType: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Label: *const fn(
            self: *const IMSMQQueueInfo,
            pbstrLabel: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Label: *const fn(
            self: *const IMSMQQueueInfo,
            bstrLabel: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PathName: *const fn(
            self: *const IMSMQQueueInfo,
            pbstrPathName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PathName: *const fn(
            self: *const IMSMQQueueInfo,
            bstrPathName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FormatName: *const fn(
            self: *const IMSMQQueueInfo,
            pbstrFormatName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FormatName: *const fn(
            self: *const IMSMQQueueInfo,
            bstrFormatName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsTransactional: *const fn(
            self: *const IMSMQQueueInfo,
            pisTransactional: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivLevel: *const fn(
            self: *const IMSMQQueueInfo,
            plPrivLevel: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrivLevel: *const fn(
            self: *const IMSMQQueueInfo,
            lPrivLevel: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Journal: *const fn(
            self: *const IMSMQQueueInfo,
            plJournal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Journal: *const fn(
            self: *const IMSMQQueueInfo,
            lJournal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Quota: *const fn(
            self: *const IMSMQQueueInfo,
            plQuota: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Quota: *const fn(
            self: *const IMSMQQueueInfo,
            lQuota: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BasePriority: *const fn(
            self: *const IMSMQQueueInfo,
            plBasePriority: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BasePriority: *const fn(
            self: *const IMSMQQueueInfo,
            lBasePriority: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CreateTime: *const fn(
            self: *const IMSMQQueueInfo,
            pvarCreateTime: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ModifyTime: *const fn(
            self: *const IMSMQQueueInfo,
            pvarModifyTime: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Authenticate: *const fn(
            self: *const IMSMQQueueInfo,
            plAuthenticate: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Authenticate: *const fn(
            self: *const IMSMQQueueInfo,
            lAuthenticate: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_JournalQuota: *const fn(
            self: *const IMSMQQueueInfo,
            plJournalQuota: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_JournalQuota: *const fn(
            self: *const IMSMQQueueInfo,
            lJournalQuota: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsWorldReadable: *const fn(
            self: *const IMSMQQueueInfo,
            pisWorldReadable: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: *const fn(
            self: *const IMSMQQueueInfo,
            IsTransactional: ?*VARIANT,
            IsWorldReadable: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn(
            self: *const IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Open: *const fn(
            self: *const IMSMQQueueInfo,
            Access: i32,
            ShareMode: i32,
            ppq: ?*?*IMSMQQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn(
            self: *const IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Update: *const fn(
            self: *const IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_QueueGuid(self: *const IMSMQQueueInfo, pbstrGuidQueue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_QueueGuid(self, pbstrGuidQueue);
    }
    pub fn get_ServiceTypeGuid(self: *const IMSMQQueueInfo, pbstrGuidServiceType: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ServiceTypeGuid(self, pbstrGuidServiceType);
    }
    pub fn put_ServiceTypeGuid(self: *const IMSMQQueueInfo, bstrGuidServiceType: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ServiceTypeGuid(self, bstrGuidServiceType);
    }
    pub fn get_Label(self: *const IMSMQQueueInfo, pbstrLabel: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Label(self, pbstrLabel);
    }
    pub fn put_Label(self: *const IMSMQQueueInfo, bstrLabel: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Label(self, bstrLabel);
    }
    pub fn get_PathName(self: *const IMSMQQueueInfo, pbstrPathName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_PathName(self, pbstrPathName);
    }
    pub fn put_PathName(self: *const IMSMQQueueInfo, bstrPathName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_PathName(self, bstrPathName);
    }
    pub fn get_FormatName(self: *const IMSMQQueueInfo, pbstrFormatName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_FormatName(self, pbstrFormatName);
    }
    pub fn put_FormatName(self: *const IMSMQQueueInfo, bstrFormatName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_FormatName(self, bstrFormatName);
    }
    pub fn get_IsTransactional(self: *const IMSMQQueueInfo, pisTransactional: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsTransactional(self, pisTransactional);
    }
    pub fn get_PrivLevel(self: *const IMSMQQueueInfo, plPrivLevel: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_PrivLevel(self, plPrivLevel);
    }
    pub fn put_PrivLevel(self: *const IMSMQQueueInfo, lPrivLevel: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_PrivLevel(self, lPrivLevel);
    }
    pub fn get_Journal(self: *const IMSMQQueueInfo, plJournal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Journal(self, plJournal);
    }
    pub fn put_Journal(self: *const IMSMQQueueInfo, lJournal: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Journal(self, lJournal);
    }
    pub fn get_Quota(self: *const IMSMQQueueInfo, plQuota: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Quota(self, plQuota);
    }
    pub fn put_Quota(self: *const IMSMQQueueInfo, lQuota: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Quota(self, lQuota);
    }
    pub fn get_BasePriority(self: *const IMSMQQueueInfo, plBasePriority: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_BasePriority(self, plBasePriority);
    }
    pub fn put_BasePriority(self: *const IMSMQQueueInfo, lBasePriority: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_BasePriority(self, lBasePriority);
    }
    pub fn get_CreateTime(self: *const IMSMQQueueInfo, pvarCreateTime: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_CreateTime(self, pvarCreateTime);
    }
    pub fn get_ModifyTime(self: *const IMSMQQueueInfo, pvarModifyTime: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_ModifyTime(self, pvarModifyTime);
    }
    pub fn get_Authenticate(self: *const IMSMQQueueInfo, plAuthenticate: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Authenticate(self, plAuthenticate);
    }
    pub fn put_Authenticate(self: *const IMSMQQueueInfo, lAuthenticate: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Authenticate(self, lAuthenticate);
    }
    pub fn get_JournalQuota(self: *const IMSMQQueueInfo, plJournalQuota: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_JournalQuota(self, plJournalQuota);
    }
    pub fn put_JournalQuota(self: *const IMSMQQueueInfo, lJournalQuota: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_JournalQuota(self, lJournalQuota);
    }
    pub fn get_IsWorldReadable(self: *const IMSMQQueueInfo, pisWorldReadable: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsWorldReadable(self, pisWorldReadable);
    }
    pub fn Create(self: *const IMSMQQueueInfo, IsTransactional: ?*VARIANT, IsWorldReadable: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.Create(self, IsTransactional, IsWorldReadable);
    }
    pub fn Delete(self: *const IMSMQQueueInfo) callconv(.Inline) HRESULT {
        return self.vtable.Delete(self);
    }
    pub fn Open(self: *const IMSMQQueueInfo, Access: i32, ShareMode: i32, ppq: ?*?*IMSMQQueue) callconv(.Inline) HRESULT {
        return self.vtable.Open(self, Access, ShareMode, ppq);
    }
    pub fn Refresh(self: *const IMSMQQueueInfo) callconv(.Inline) HRESULT {
        return self.vtable.Refresh(self);
    }
    pub fn Update(self: *const IMSMQQueueInfo) callconv(.Inline) HRESULT {
        return self.vtable.Update(self);
    }
};

const IID_IMSMQQueueInfo2_Value = Guid.initString("fd174a80-89cf-11d2-b0f2-00e02c074f6b");
pub const IID_IMSMQQueueInfo2 = &IID_IMSMQQueueInfo2_Value;
pub const IMSMQQueueInfo2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QueueGuid: *const fn(
            self: *const IMSMQQueueInfo2,
            pbstrGuidQueue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServiceTypeGuid: *const fn(
            self: *const IMSMQQueueInfo2,
            pbstrGuidServiceType: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ServiceTypeGuid: *const fn(
            self: *const IMSMQQueueInfo2,
            bstrGuidServiceType: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Label: *const fn(
            self: *const IMSMQQueueInfo2,
            pbstrLabel: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Label: *const fn(
            self: *const IMSMQQueueInfo2,
            bstrLabel: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PathName: *const fn(
            self: *const IMSMQQueueInfo2,
            pbstrPathName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PathName: *const fn(
            self: *const IMSMQQueueInfo2,
            bstrPathName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FormatName: *const fn(
            self: *const IMSMQQueueInfo2,
            pbstrFormatName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FormatName: *const fn(
            self: *const IMSMQQueueInfo2,
            bstrFormatName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsTransactional: *const fn(
            self: *const IMSMQQueueInfo2,
            pisTransactional: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivLevel: *const fn(
            self: *const IMSMQQueueInfo2,
            plPrivLevel: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrivLevel: *const fn(
            self: *const IMSMQQueueInfo2,
            lPrivLevel: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Journal: *const fn(
            self: *const IMSMQQueueInfo2,
            plJournal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Journal: *const fn(
            self: *const IMSMQQueueInfo2,
            lJournal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Quota: *const fn(
            self: *const IMSMQQueueInfo2,
            plQuota: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Quota: *const fn(
            self: *const IMSMQQueueInfo2,
            lQuota: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BasePriority: *const fn(
            self: *const IMSMQQueueInfo2,
            plBasePriority: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BasePriority: *const fn(
            self: *const IMSMQQueueInfo2,
            lBasePriority: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CreateTime: *const fn(
            self: *const IMSMQQueueInfo2,
            pvarCreateTime: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ModifyTime: *const fn(
            self: *const IMSMQQueueInfo2,
            pvarModifyTime: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Authenticate: *const fn(
            self: *const IMSMQQueueInfo2,
            plAuthenticate: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Authenticate: *const fn(
            self: *const IMSMQQueueInfo2,
            lAuthenticate: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_JournalQuota: *const fn(
            self: *const IMSMQQueueInfo2,
            plJournalQuota: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_JournalQuota: *const fn(
            self: *const IMSMQQueueInfo2,
            lJournalQuota: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsWorldReadable: *const fn(
            self: *const IMSMQQueueInfo2,
            pisWorldReadable: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: *const fn(
            self: *const IMSMQQueueInfo2,
            IsTransactional: ?*VARIANT,
            IsWorldReadable: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn(
            self: *const IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Open: *const fn(
            self: *const IMSMQQueueInfo2,
            Access: i32,
            ShareMode: i32,
            ppq: ?*?*IMSMQQueue2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn(
            self: *const IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Update: *const fn(
            self: *const IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PathNameDNS: *const fn(
            self: *const IMSMQQueueInfo2,
            pbstrPathNameDNS: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn(
            self: *const IMSMQQueueInfo2,
            ppcolProperties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Security: *const fn(
            self: *const IMSMQQueueInfo2,
            pvarSecurity: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Security: *const fn(
            self: *const IMSMQQueueInfo2,
            varSecurity: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_QueueGuid(self: *const IMSMQQueueInfo2, pbstrGuidQueue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_QueueGuid(self, pbstrGuidQueue);
    }
    pub fn get_ServiceTypeGuid(self: *const IMSMQQueueInfo2, pbstrGuidServiceType: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ServiceTypeGuid(self, pbstrGuidServiceType);
    }
    pub fn put_ServiceTypeGuid(self: *const IMSMQQueueInfo2, bstrGuidServiceType: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ServiceTypeGuid(self, bstrGuidServiceType);
    }
    pub fn get_Label(self: *const IMSMQQueueInfo2, pbstrLabel: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Label(self, pbstrLabel);
    }
    pub fn put_Label(self: *const IMSMQQueueInfo2, bstrLabel: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Label(self, bstrLabel);
    }
    pub fn get_PathName(self: *const IMSMQQueueInfo2, pbstrPathName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_PathName(self, pbstrPathName);
    }
    pub fn put_PathName(self: *const IMSMQQueueInfo2, bstrPathName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_PathName(self, bstrPathName);
    }
    pub fn get_FormatName(self: *const IMSMQQueueInfo2, pbstrFormatName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_FormatName(self, pbstrFormatName);
    }
    pub fn put_FormatName(self: *const IMSMQQueueInfo2, bstrFormatName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_FormatName(self, bstrFormatName);
    }
    pub fn get_IsTransactional(self: *const IMSMQQueueInfo2, pisTransactional: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsTransactional(self, pisTransactional);
    }
    pub fn get_PrivLevel(self: *const IMSMQQueueInfo2, plPrivLevel: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_PrivLevel(self, plPrivLevel);
    }
    pub fn put_PrivLevel(self: *const IMSMQQueueInfo2, lPrivLevel: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_PrivLevel(self, lPrivLevel);
    }
    pub fn get_Journal(self: *const IMSMQQueueInfo2, plJournal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Journal(self, plJournal);
    }
    pub fn put_Journal(self: *const IMSMQQueueInfo2, lJournal: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Journal(self, lJournal);
    }
    pub fn get_Quota(self: *const IMSMQQueueInfo2, plQuota: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Quota(self, plQuota);
    }
    pub fn put_Quota(self: *const IMSMQQueueInfo2, lQuota: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Quota(self, lQuota);
    }
    pub fn get_BasePriority(self: *const IMSMQQueueInfo2, plBasePriority: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_BasePriority(self, plBasePriority);
    }
    pub fn put_BasePriority(self: *const IMSMQQueueInfo2, lBasePriority: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_BasePriority(self, lBasePriority);
    }
    pub fn get_CreateTime(self: *const IMSMQQueueInfo2, pvarCreateTime: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_CreateTime(self, pvarCreateTime);
    }
    pub fn get_ModifyTime(self: *const IMSMQQueueInfo2, pvarModifyTime: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_ModifyTime(self, pvarModifyTime);
    }
    pub fn get_Authenticate(self: *const IMSMQQueueInfo2, plAuthenticate: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Authenticate(self, plAuthenticate);
    }
    pub fn put_Authenticate(self: *const IMSMQQueueInfo2, lAuthenticate: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Authenticate(self, lAuthenticate);
    }
    pub fn get_JournalQuota(self: *const IMSMQQueueInfo2, plJournalQuota: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_JournalQuota(self, plJournalQuota);
    }
    pub fn put_JournalQuota(self: *const IMSMQQueueInfo2, lJournalQuota: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_JournalQuota(self, lJournalQuota);
    }
    pub fn get_IsWorldReadable(self: *const IMSMQQueueInfo2, pisWorldReadable: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsWorldReadable(self, pisWorldReadable);
    }
    pub fn Create(self: *const IMSMQQueueInfo2, IsTransactional: ?*VARIANT, IsWorldReadable: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.Create(self, IsTransactional, IsWorldReadable);
    }
    pub fn Delete(self: *const IMSMQQueueInfo2) callconv(.Inline) HRESULT {
        return self.vtable.Delete(self);
    }
    pub fn Open(self: *const IMSMQQueueInfo2, Access: i32, ShareMode: i32, ppq: ?*?*IMSMQQueue2) callconv(.Inline) HRESULT {
        return self.vtable.Open(self, Access, ShareMode, ppq);
    }
    pub fn Refresh(self: *const IMSMQQueueInfo2) callconv(.Inline) HRESULT {
        return self.vtable.Refresh(self);
    }
    pub fn Update(self: *const IMSMQQueueInfo2) callconv(.Inline) HRESULT {
        return self.vtable.Update(self);
    }
    pub fn get_PathNameDNS(self: *const IMSMQQueueInfo2, pbstrPathNameDNS: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_PathNameDNS(self, pbstrPathNameDNS);
    }
    pub fn get_Properties(self: *const IMSMQQueueInfo2, ppcolProperties: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Properties(self, ppcolProperties);
    }
    pub fn get_Security(self: *const IMSMQQueueInfo2, pvarSecurity: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Security(self, pvarSecurity);
    }
    pub fn put_Security(self: *const IMSMQQueueInfo2, varSecurity: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_Security(self, varSecurity);
    }
};

const IID_IMSMQQueueInfo3_Value = Guid.initString("eba96b1d-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQQueueInfo3 = &IID_IMSMQQueueInfo3_Value;
pub const IMSMQQueueInfo3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QueueGuid: *const fn(
            self: *const IMSMQQueueInfo3,
            pbstrGuidQueue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServiceTypeGuid: *const fn(
            self: *const IMSMQQueueInfo3,
            pbstrGuidServiceType: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ServiceTypeGuid: *const fn(
            self: *const IMSMQQueueInfo3,
            bstrGuidServiceType: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Label: *const fn(
            self: *const IMSMQQueueInfo3,
            pbstrLabel: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Label: *const fn(
            self: *const IMSMQQueueInfo3,
            bstrLabel: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PathName: *const fn(
            self: *const IMSMQQueueInfo3,
            pbstrPathName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PathName: *const fn(
            self: *const IMSMQQueueInfo3,
            bstrPathName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FormatName: *const fn(
            self: *const IMSMQQueueInfo3,
            pbstrFormatName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FormatName: *const fn(
            self: *const IMSMQQueueInfo3,
            bstrFormatName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsTransactional: *const fn(
            self: *const IMSMQQueueInfo3,
            pisTransactional: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivLevel: *const fn(
            self: *const IMSMQQueueInfo3,
            plPrivLevel: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrivLevel: *const fn(
            self: *const IMSMQQueueInfo3,
            lPrivLevel: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Journal: *const fn(
            self: *const IMSMQQueueInfo3,
            plJournal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Journal: *const fn(
            self: *const IMSMQQueueInfo3,
            lJournal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Quota: *const fn(
            self: *const IMSMQQueueInfo3,
            plQuota: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Quota: *const fn(
            self: *const IMSMQQueueInfo3,
            lQuota: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BasePriority: *const fn(
            self: *const IMSMQQueueInfo3,
            plBasePriority: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BasePriority: *const fn(
            self: *const IMSMQQueueInfo3,
            lBasePriority: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CreateTime: *const fn(
            self: *const IMSMQQueueInfo3,
            pvarCreateTime: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ModifyTime: *const fn(
            self: *const IMSMQQueueInfo3,
            pvarModifyTime: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Authenticate: *const fn(
            self: *const IMSMQQueueInfo3,
            plAuthenticate: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Authenticate: *const fn(
            self: *const IMSMQQueueInfo3,
            lAuthenticate: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_JournalQuota: *const fn(
            self: *const IMSMQQueueInfo3,
            plJournalQuota: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_JournalQuota: *const fn(
            self: *const IMSMQQueueInfo3,
            lJournalQuota: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsWorldReadable: *const fn(
            self: *const IMSMQQueueInfo3,
            pisWorldReadable: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: *const fn(
            self: *const IMSMQQueueInfo3,
            IsTransactional: ?*VARIANT,
            IsWorldReadable: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn(
            self: *const IMSMQQueueInfo3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Open: *const fn(
            self: *const IMSMQQueueInfo3,
            Access: i32,
            ShareMode: i32,
            ppq: ?*?*IMSMQQueue3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn(
            self: *const IMSMQQueueInfo3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Update: *const fn(
            self: *const IMSMQQueueInfo3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PathNameDNS: *const fn(
            self: *const IMSMQQueueInfo3,
            pbstrPathNameDNS: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn(
            self: *const IMSMQQueueInfo3,
            ppcolProperties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Security: *const fn(
            self: *const IMSMQQueueInfo3,
            pvarSecurity: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Security: *const fn(
            self: *const IMSMQQueueInfo3,
            varSecurity: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsTransactional2: *const fn(
            self: *const IMSMQQueueInfo3,
            pisTransactional: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsWorldReadable2: *const fn(
            self: *const IMSMQQueueInfo3,
            pisWorldReadable: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MulticastAddress: *const fn(
            self: *const IMSMQQueueInfo3,
            pbstrMulticastAddress: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MulticastAddress: *const fn(
            self: *const IMSMQQueueInfo3,
            bstrMulticastAddress: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ADsPath: *const fn(
            self: *const IMSMQQueueInfo3,
            pbstrADsPath: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_QueueGuid(self: *const IMSMQQueueInfo3, pbstrGuidQueue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_QueueGuid(self, pbstrGuidQueue);
    }
    pub fn get_ServiceTypeGuid(self: *const IMSMQQueueInfo3, pbstrGuidServiceType: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ServiceTypeGuid(self, pbstrGuidServiceType);
    }
    pub fn put_ServiceTypeGuid(self: *const IMSMQQueueInfo3, bstrGuidServiceType: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ServiceTypeGuid(self, bstrGuidServiceType);
    }
    pub fn get_Label(self: *const IMSMQQueueInfo3, pbstrLabel: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Label(self, pbstrLabel);
    }
    pub fn put_Label(self: *const IMSMQQueueInfo3, bstrLabel: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Label(self, bstrLabel);
    }
    pub fn get_PathName(self: *const IMSMQQueueInfo3, pbstrPathName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_PathName(self, pbstrPathName);
    }
    pub fn put_PathName(self: *const IMSMQQueueInfo3, bstrPathName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_PathName(self, bstrPathName);
    }
    pub fn get_FormatName(self: *const IMSMQQueueInfo3, pbstrFormatName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_FormatName(self, pbstrFormatName);
    }
    pub fn put_FormatName(self: *const IMSMQQueueInfo3, bstrFormatName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_FormatName(self, bstrFormatName);
    }
    pub fn get_IsTransactional(self: *const IMSMQQueueInfo3, pisTransactional: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsTransactional(self, pisTransactional);
    }
    pub fn get_PrivLevel(self: *const IMSMQQueueInfo3, plPrivLevel: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_PrivLevel(self, plPrivLevel);
    }
    pub fn put_PrivLevel(self: *const IMSMQQueueInfo3, lPrivLevel: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_PrivLevel(self, lPrivLevel);
    }
    pub fn get_Journal(self: *const IMSMQQueueInfo3, plJournal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Journal(self, plJournal);
    }
    pub fn put_Journal(self: *const IMSMQQueueInfo3, lJournal: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Journal(self, lJournal);
    }
    pub fn get_Quota(self: *const IMSMQQueueInfo3, plQuota: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Quota(self, plQuota);
    }
    pub fn put_Quota(self: *const IMSMQQueueInfo3, lQuota: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Quota(self, lQuota);
    }
    pub fn get_BasePriority(self: *const IMSMQQueueInfo3, plBasePriority: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_BasePriority(self, plBasePriority);
    }
    pub fn put_BasePriority(self: *const IMSMQQueueInfo3, lBasePriority: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_BasePriority(self, lBasePriority);
    }
    pub fn get_CreateTime(self: *const IMSMQQueueInfo3, pvarCreateTime: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_CreateTime(self, pvarCreateTime);
    }
    pub fn get_ModifyTime(self: *const IMSMQQueueInfo3, pvarModifyTime: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_ModifyTime(self, pvarModifyTime);
    }
    pub fn get_Authenticate(self: *const IMSMQQueueInfo3, plAuthenticate: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Authenticate(self, plAuthenticate);
    }
    pub fn put_Authenticate(self: *const IMSMQQueueInfo3, lAuthenticate: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Authenticate(self, lAuthenticate);
    }
    pub fn get_JournalQuota(self: *const IMSMQQueueInfo3, plJournalQuota: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_JournalQuota(self, plJournalQuota);
    }
    pub fn put_JournalQuota(self: *const IMSMQQueueInfo3, lJournalQuota: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_JournalQuota(self, lJournalQuota);
    }
    pub fn get_IsWorldReadable(self: *const IMSMQQueueInfo3, pisWorldReadable: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsWorldReadable(self, pisWorldReadable);
    }
    pub fn Create(self: *const IMSMQQueueInfo3, IsTransactional: ?*VARIANT, IsWorldReadable: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.Create(self, IsTransactional, IsWorldReadable);
    }
    pub fn Delete(self: *const IMSMQQueueInfo3) callconv(.Inline) HRESULT {
        return self.vtable.Delete(self);
    }
    pub fn Open(self: *const IMSMQQueueInfo3, Access: i32, ShareMode: i32, ppq: ?*?*IMSMQQueue3) callconv(.Inline) HRESULT {
        return self.vtable.Open(self, Access, ShareMode, ppq);
    }
    pub fn Refresh(self: *const IMSMQQueueInfo3) callconv(.Inline) HRESULT {
        return self.vtable.Refresh(self);
    }
    pub fn Update(self: *const IMSMQQueueInfo3) callconv(.Inline) HRESULT {
        return self.vtable.Update(self);
    }
    pub fn get_PathNameDNS(self: *const IMSMQQueueInfo3, pbstrPathNameDNS: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_PathNameDNS(self, pbstrPathNameDNS);
    }
    pub fn get_Properties(self: *const IMSMQQueueInfo3, ppcolProperties: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Properties(self, ppcolProperties);
    }
    pub fn get_Security(self: *const IMSMQQueueInfo3, pvarSecurity: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Security(self, pvarSecurity);
    }
    pub fn put_Security(self: *const IMSMQQueueInfo3, varSecurity: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_Security(self, varSecurity);
    }
    pub fn get_IsTransactional2(self: *const IMSMQQueueInfo3, pisTransactional: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsTransactional2(self, pisTransactional);
    }
    pub fn get_IsWorldReadable2(self: *const IMSMQQueueInfo3, pisWorldReadable: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsWorldReadable2(self, pisWorldReadable);
    }
    pub fn get_MulticastAddress(self: *const IMSMQQueueInfo3, pbstrMulticastAddress: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_MulticastAddress(self, pbstrMulticastAddress);
    }
    pub fn put_MulticastAddress(self: *const IMSMQQueueInfo3, bstrMulticastAddress: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_MulticastAddress(self, bstrMulticastAddress);
    }
    pub fn get_ADsPath(self: *const IMSMQQueueInfo3, pbstrADsPath: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ADsPath(self, pbstrADsPath);
    }
};

const IID_IMSMQQueueInfo4_Value = Guid.initString("eba96b21-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQQueueInfo4 = &IID_IMSMQQueueInfo4_Value;
pub const IMSMQQueueInfo4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QueueGuid: *const fn(
            self: *const IMSMQQueueInfo4,
            pbstrGuidQueue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServiceTypeGuid: *const fn(
            self: *const IMSMQQueueInfo4,
            pbstrGuidServiceType: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ServiceTypeGuid: *const fn(
            self: *const IMSMQQueueInfo4,
            bstrGuidServiceType: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Label: *const fn(
            self: *const IMSMQQueueInfo4,
            pbstrLabel: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Label: *const fn(
            self: *const IMSMQQueueInfo4,
            bstrLabel: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PathName: *const fn(
            self: *const IMSMQQueueInfo4,
            pbstrPathName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PathName: *const fn(
            self: *const IMSMQQueueInfo4,
            bstrPathName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FormatName: *const fn(
            self: *const IMSMQQueueInfo4,
            pbstrFormatName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FormatName: *const fn(
            self: *const IMSMQQueueInfo4,
            bstrFormatName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsTransactional: *const fn(
            self: *const IMSMQQueueInfo4,
            pisTransactional: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivLevel: *const fn(
            self: *const IMSMQQueueInfo4,
            plPrivLevel: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrivLevel: *const fn(
            self: *const IMSMQQueueInfo4,
            lPrivLevel: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Journal: *const fn(
            self: *const IMSMQQueueInfo4,
            plJournal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Journal: *const fn(
            self: *const IMSMQQueueInfo4,
            lJournal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Quota: *const fn(
            self: *const IMSMQQueueInfo4,
            plQuota: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Quota: *const fn(
            self: *const IMSMQQueueInfo4,
            lQuota: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BasePriority: *const fn(
            self: *const IMSMQQueueInfo4,
            plBasePriority: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BasePriority: *const fn(
            self: *const IMSMQQueueInfo4,
            lBasePriority: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CreateTime: *const fn(
            self: *const IMSMQQueueInfo4,
            pvarCreateTime: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ModifyTime: *const fn(
            self: *const IMSMQQueueInfo4,
            pvarModifyTime: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Authenticate: *const fn(
            self: *const IMSMQQueueInfo4,
            plAuthenticate: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Authenticate: *const fn(
            self: *const IMSMQQueueInfo4,
            lAuthenticate: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_JournalQuota: *const fn(
            self: *const IMSMQQueueInfo4,
            plJournalQuota: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_JournalQuota: *const fn(
            self: *const IMSMQQueueInfo4,
            lJournalQuota: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsWorldReadable: *const fn(
            self: *const IMSMQQueueInfo4,
            pisWorldReadable: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: *const fn(
            self: *const IMSMQQueueInfo4,
            IsTransactional: ?*VARIANT,
            IsWorldReadable: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn(
            self: *const IMSMQQueueInfo4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Open: *const fn(
            self: *const IMSMQQueueInfo4,
            Access: i32,
            ShareMode: i32,
            ppq: ?*?*IMSMQQueue4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn(
            self: *const IMSMQQueueInfo4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Update: *const fn(
            self: *const IMSMQQueueInfo4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PathNameDNS: *const fn(
            self: *const IMSMQQueueInfo4,
            pbstrPathNameDNS: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn(
            self: *const IMSMQQueueInfo4,
            ppcolProperties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Security: *const fn(
            self: *const IMSMQQueueInfo4,
            pvarSecurity: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Security: *const fn(
            self: *const IMSMQQueueInfo4,
            varSecurity: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsTransactional2: *const fn(
            self: *const IMSMQQueueInfo4,
            pisTransactional: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsWorldReadable2: *const fn(
            self: *const IMSMQQueueInfo4,
            pisWorldReadable: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MulticastAddress: *const fn(
            self: *const IMSMQQueueInfo4,
            pbstrMulticastAddress: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MulticastAddress: *const fn(
            self: *const IMSMQQueueInfo4,
            bstrMulticastAddress: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ADsPath: *const fn(
            self: *const IMSMQQueueInfo4,
            pbstrADsPath: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_QueueGuid(self: *const IMSMQQueueInfo4, pbstrGuidQueue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_QueueGuid(self, pbstrGuidQueue);
    }
    pub fn get_ServiceTypeGuid(self: *const IMSMQQueueInfo4, pbstrGuidServiceType: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ServiceTypeGuid(self, pbstrGuidServiceType);
    }
    pub fn put_ServiceTypeGuid(self: *const IMSMQQueueInfo4, bstrGuidServiceType: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ServiceTypeGuid(self, bstrGuidServiceType);
    }
    pub fn get_Label(self: *const IMSMQQueueInfo4, pbstrLabel: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Label(self, pbstrLabel);
    }
    pub fn put_Label(self: *const IMSMQQueueInfo4, bstrLabel: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Label(self, bstrLabel);
    }
    pub fn get_PathName(self: *const IMSMQQueueInfo4, pbstrPathName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_PathName(self, pbstrPathName);
    }
    pub fn put_PathName(self: *const IMSMQQueueInfo4, bstrPathName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_PathName(self, bstrPathName);
    }
    pub fn get_FormatName(self: *const IMSMQQueueInfo4, pbstrFormatName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_FormatName(self, pbstrFormatName);
    }
    pub fn put_FormatName(self: *const IMSMQQueueInfo4, bstrFormatName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_FormatName(self, bstrFormatName);
    }
    pub fn get_IsTransactional(self: *const IMSMQQueueInfo4, pisTransactional: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsTransactional(self, pisTransactional);
    }
    pub fn get_PrivLevel(self: *const IMSMQQueueInfo4, plPrivLevel: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_PrivLevel(self, plPrivLevel);
    }
    pub fn put_PrivLevel(self: *const IMSMQQueueInfo4, lPrivLevel: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_PrivLevel(self, lPrivLevel);
    }
    pub fn get_Journal(self: *const IMSMQQueueInfo4, plJournal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Journal(self, plJournal);
    }
    pub fn put_Journal(self: *const IMSMQQueueInfo4, lJournal: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Journal(self, lJournal);
    }
    pub fn get_Quota(self: *const IMSMQQueueInfo4, plQuota: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Quota(self, plQuota);
    }
    pub fn put_Quota(self: *const IMSMQQueueInfo4, lQuota: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Quota(self, lQuota);
    }
    pub fn get_BasePriority(self: *const IMSMQQueueInfo4, plBasePriority: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_BasePriority(self, plBasePriority);
    }
    pub fn put_BasePriority(self: *const IMSMQQueueInfo4, lBasePriority: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_BasePriority(self, lBasePriority);
    }
    pub fn get_CreateTime(self: *const IMSMQQueueInfo4, pvarCreateTime: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_CreateTime(self, pvarCreateTime);
    }
    pub fn get_ModifyTime(self: *const IMSMQQueueInfo4, pvarModifyTime: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_ModifyTime(self, pvarModifyTime);
    }
    pub fn get_Authenticate(self: *const IMSMQQueueInfo4, plAuthenticate: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Authenticate(self, plAuthenticate);
    }
    pub fn put_Authenticate(self: *const IMSMQQueueInfo4, lAuthenticate: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Authenticate(self, lAuthenticate);
    }
    pub fn get_JournalQuota(self: *const IMSMQQueueInfo4, plJournalQuota: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_JournalQuota(self, plJournalQuota);
    }
    pub fn put_JournalQuota(self: *const IMSMQQueueInfo4, lJournalQuota: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_JournalQuota(self, lJournalQuota);
    }
    pub fn get_IsWorldReadable(self: *const IMSMQQueueInfo4, pisWorldReadable: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsWorldReadable(self, pisWorldReadable);
    }
    pub fn Create(self: *const IMSMQQueueInfo4, IsTransactional: ?*VARIANT, IsWorldReadable: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.Create(self, IsTransactional, IsWorldReadable);
    }
    pub fn Delete(self: *const IMSMQQueueInfo4) callconv(.Inline) HRESULT {
        return self.vtable.Delete(self);
    }
    pub fn Open(self: *const IMSMQQueueInfo4, Access: i32, ShareMode: i32, ppq: ?*?*IMSMQQueue4) callconv(.Inline) HRESULT {
        return self.vtable.Open(self, Access, ShareMode, ppq);
    }
    pub fn Refresh(self: *const IMSMQQueueInfo4) callconv(.Inline) HRESULT {
        return self.vtable.Refresh(self);
    }
    pub fn Update(self: *const IMSMQQueueInfo4) callconv(.Inline) HRESULT {
        return self.vtable.Update(self);
    }
    pub fn get_PathNameDNS(self: *const IMSMQQueueInfo4, pbstrPathNameDNS: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_PathNameDNS(self, pbstrPathNameDNS);
    }
    pub fn get_Properties(self: *const IMSMQQueueInfo4, ppcolProperties: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Properties(self, ppcolProperties);
    }
    pub fn get_Security(self: *const IMSMQQueueInfo4, pvarSecurity: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Security(self, pvarSecurity);
    }
    pub fn put_Security(self: *const IMSMQQueueInfo4, varSecurity: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_Security(self, varSecurity);
    }
    pub fn get_IsTransactional2(self: *const IMSMQQueueInfo4, pisTransactional: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsTransactional2(self, pisTransactional);
    }
    pub fn get_IsWorldReadable2(self: *const IMSMQQueueInfo4, pisWorldReadable: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsWorldReadable2(self, pisWorldReadable);
    }
    pub fn get_MulticastAddress(self: *const IMSMQQueueInfo4, pbstrMulticastAddress: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_MulticastAddress(self, pbstrMulticastAddress);
    }
    pub fn put_MulticastAddress(self: *const IMSMQQueueInfo4, bstrMulticastAddress: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_MulticastAddress(self, bstrMulticastAddress);
    }
    pub fn get_ADsPath(self: *const IMSMQQueueInfo4, pbstrADsPath: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ADsPath(self, pbstrADsPath);
    }
};

const IID_IMSMQQueue_Value = Guid.initString("d7d6e076-dccd-11d0-aa4b-0060970debae");
pub const IID_IMSMQQueue = &IID_IMSMQQueue_Value;
pub const IMSMQQueue = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Access: *const fn(
            self: *const IMSMQQueue,
            plAccess: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShareMode: *const fn(
            self: *const IMSMQQueue,
            plShareMode: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QueueInfo: *const fn(
            self: *const IMSMQQueue,
            ppqinfo: ?*?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Handle: *const fn(
            self: *const IMSMQQueue,
            plHandle: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsOpen: *const fn(
            self: *const IMSMQQueue,
            pisOpen: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn(
            self: *const IMSMQQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Receive: *const fn(
            self: *const IMSMQQueue,
            Transaction: ?*VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Peek: *const fn(
            self: *const IMSMQQueue,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableNotification: *const fn(
            self: *const IMSMQQueue,
            Event: ?*IMSMQEvent,
            Cursor: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IMSMQQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveCurrent: *const fn(
            self: *const IMSMQQueue,
            Transaction: ?*VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekNext: *const fn(
            self: *const IMSMQQueue,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekCurrent: *const fn(
            self: *const IMSMQQueue,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Access(self: *const IMSMQQueue, plAccess: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Access(self, plAccess);
    }
    pub fn get_ShareMode(self: *const IMSMQQueue, plShareMode: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ShareMode(self, plShareMode);
    }
    pub fn get_QueueInfo(self: *const IMSMQQueue, ppqinfo: ?*?*IMSMQQueueInfo) callconv(.Inline) HRESULT {
        return self.vtable.get_QueueInfo(self, ppqinfo);
    }
    pub fn get_Handle(self: *const IMSMQQueue, plHandle: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Handle(self, plHandle);
    }
    pub fn get_IsOpen(self: *const IMSMQQueue, pisOpen: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsOpen(self, pisOpen);
    }
    pub fn Close(self: *const IMSMQQueue) callconv(.Inline) HRESULT {
        return self.vtable.Close(self);
    }
    pub fn Receive(self: *const IMSMQQueue, Transaction: ?*VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, ppmsg: ?*?*IMSMQMessage) callconv(.Inline) HRESULT {
        return self.vtable.Receive(self, Transaction, WantDestinationQueue, WantBody, ReceiveTimeout, ppmsg);
    }
    pub fn Peek(self: *const IMSMQQueue, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, ppmsg: ?*?*IMSMQMessage) callconv(.Inline) HRESULT {
        return self.vtable.Peek(self, WantDestinationQueue, WantBody, ReceiveTimeout, ppmsg);
    }
    pub fn EnableNotification(self: *const IMSMQQueue, Event: ?*IMSMQEvent, Cursor: ?*VARIANT, ReceiveTimeout: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.EnableNotification(self, Event, Cursor, ReceiveTimeout);
    }
    pub fn Reset(self: *const IMSMQQueue) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn ReceiveCurrent(self: *const IMSMQQueue, Transaction: ?*VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, ppmsg: ?*?*IMSMQMessage) callconv(.Inline) HRESULT {
        return self.vtable.ReceiveCurrent(self, Transaction, WantDestinationQueue, WantBody, ReceiveTimeout, ppmsg);
    }
    pub fn PeekNext(self: *const IMSMQQueue, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, ppmsg: ?*?*IMSMQMessage) callconv(.Inline) HRESULT {
        return self.vtable.PeekNext(self, WantDestinationQueue, WantBody, ReceiveTimeout, ppmsg);
    }
    pub fn PeekCurrent(self: *const IMSMQQueue, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, ppmsg: ?*?*IMSMQMessage) callconv(.Inline) HRESULT {
        return self.vtable.PeekCurrent(self, WantDestinationQueue, WantBody, ReceiveTimeout, ppmsg);
    }
};

const IID_IMSMQQueue2_Value = Guid.initString("ef0574e0-06d8-11d3-b100-00e02c074f6b");
pub const IID_IMSMQQueue2 = &IID_IMSMQQueue2_Value;
pub const IMSMQQueue2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Access: *const fn(
            self: *const IMSMQQueue2,
            plAccess: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShareMode: *const fn(
            self: *const IMSMQQueue2,
            plShareMode: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QueueInfo: *const fn(
            self: *const IMSMQQueue2,
            ppqinfo: ?*?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Handle: *const fn(
            self: *const IMSMQQueue2,
            plHandle: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsOpen: *const fn(
            self: *const IMSMQQueue2,
            pisOpen: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn(
            self: *const IMSMQQueue2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Receive_v1: *const fn(
            self: *const IMSMQQueue2,
            Transaction: ?*VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Peek_v1: *const fn(
            self: *const IMSMQQueue2,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableNotification: *const fn(
            self: *const IMSMQQueue2,
            Event: ?*IMSMQEvent2,
            Cursor: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IMSMQQueue2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveCurrent_v1: *const fn(
            self: *const IMSMQQueue2,
            Transaction: ?*VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekNext_v1: *const fn(
            self: *const IMSMQQueue2,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekCurrent_v1: *const fn(
            self: *const IMSMQQueue2,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Receive: *const fn(
            self: *const IMSMQQueue2,
            Transaction: ?*VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Peek: *const fn(
            self: *const IMSMQQueue2,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveCurrent: *const fn(
            self: *const IMSMQQueue2,
            Transaction: ?*VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekNext: *const fn(
            self: *const IMSMQQueue2,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekCurrent: *const fn(
            self: *const IMSMQQueue2,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn(
            self: *const IMSMQQueue2,
            ppcolProperties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Access(self: *const IMSMQQueue2, plAccess: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Access(self, plAccess);
    }
    pub fn get_ShareMode(self: *const IMSMQQueue2, plShareMode: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ShareMode(self, plShareMode);
    }
    pub fn get_QueueInfo(self: *const IMSMQQueue2, ppqinfo: ?*?*IMSMQQueueInfo2) callconv(.Inline) HRESULT {
        return self.vtable.get_QueueInfo(self, ppqinfo);
    }
    pub fn get_Handle(self: *const IMSMQQueue2, plHandle: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Handle(self, plHandle);
    }
    pub fn get_IsOpen(self: *const IMSMQQueue2, pisOpen: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsOpen(self, pisOpen);
    }
    pub fn Close(self: *const IMSMQQueue2) callconv(.Inline) HRESULT {
        return self.vtable.Close(self);
    }
    pub fn Receive_v1(self: *const IMSMQQueue2, Transaction: ?*VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, ppmsg: ?*?*IMSMQMessage) callconv(.Inline) HRESULT {
        return self.vtable.Receive_v1(self, Transaction, WantDestinationQueue, WantBody, ReceiveTimeout, ppmsg);
    }
    pub fn Peek_v1(self: *const IMSMQQueue2, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, ppmsg: ?*?*IMSMQMessage) callconv(.Inline) HRESULT {
        return self.vtable.Peek_v1(self, WantDestinationQueue, WantBody, ReceiveTimeout, ppmsg);
    }
    pub fn EnableNotification(self: *const IMSMQQueue2, Event: ?*IMSMQEvent2, Cursor: ?*VARIANT, ReceiveTimeout: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.EnableNotification(self, Event, Cursor, ReceiveTimeout);
    }
    pub fn Reset(self: *const IMSMQQueue2) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn ReceiveCurrent_v1(self: *const IMSMQQueue2, Transaction: ?*VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, ppmsg: ?*?*IMSMQMessage) callconv(.Inline) HRESULT {
        return self.vtable.ReceiveCurrent_v1(self, Transaction, WantDestinationQueue, WantBody, ReceiveTimeout, ppmsg);
    }
    pub fn PeekNext_v1(self: *const IMSMQQueue2, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, ppmsg: ?*?*IMSMQMessage) callconv(.Inline) HRESULT {
        return self.vtable.PeekNext_v1(self, WantDestinationQueue, WantBody, ReceiveTimeout, ppmsg);
    }
    pub fn PeekCurrent_v1(self: *const IMSMQQueue2, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, ppmsg: ?*?*IMSMQMessage) callconv(.Inline) HRESULT {
        return self.vtable.PeekCurrent_v1(self, WantDestinationQueue, WantBody, ReceiveTimeout, ppmsg);
    }
    pub fn Receive(self: *const IMSMQQueue2, Transaction: ?*VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage2) callconv(.Inline) HRESULT {
        return self.vtable.Receive(self, Transaction, WantDestinationQueue, WantBody, ReceiveTimeout, WantConnectorType, ppmsg);
    }
    pub fn Peek(self: *const IMSMQQueue2, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage2) callconv(.Inline) HRESULT {
        return self.vtable.Peek(self, WantDestinationQueue, WantBody, ReceiveTimeout, WantConnectorType, ppmsg);
    }
    pub fn ReceiveCurrent(self: *const IMSMQQueue2, Transaction: ?*VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage2) callconv(.Inline) HRESULT {
        return self.vtable.ReceiveCurrent(self, Transaction, WantDestinationQueue, WantBody, ReceiveTimeout, WantConnectorType, ppmsg);
    }
    pub fn PeekNext(self: *const IMSMQQueue2, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage2) callconv(.Inline) HRESULT {
        return self.vtable.PeekNext(self, WantDestinationQueue, WantBody, ReceiveTimeout, WantConnectorType, ppmsg);
    }
    pub fn PeekCurrent(self: *const IMSMQQueue2, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage2) callconv(.Inline) HRESULT {
        return self.vtable.PeekCurrent(self, WantDestinationQueue, WantBody, ReceiveTimeout, WantConnectorType, ppmsg);
    }
    pub fn get_Properties(self: *const IMSMQQueue2, ppcolProperties: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Properties(self, ppcolProperties);
    }
};

const IID_IMSMQQueue3_Value = Guid.initString("eba96b1b-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQQueue3 = &IID_IMSMQQueue3_Value;
pub const IMSMQQueue3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Access: *const fn(
            self: *const IMSMQQueue3,
            plAccess: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShareMode: *const fn(
            self: *const IMSMQQueue3,
            plShareMode: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QueueInfo: *const fn(
            self: *const IMSMQQueue3,
            ppqinfo: ?*?*IMSMQQueueInfo3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Handle: *const fn(
            self: *const IMSMQQueue3,
            plHandle: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsOpen: *const fn(
            self: *const IMSMQQueue3,
            pisOpen: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn(
            self: *const IMSMQQueue3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Receive_v1: *const fn(
            self: *const IMSMQQueue3,
            Transaction: ?*VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Peek_v1: *const fn(
            self: *const IMSMQQueue3,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableNotification: *const fn(
            self: *const IMSMQQueue3,
            Event: ?*IMSMQEvent3,
            Cursor: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IMSMQQueue3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveCurrent_v1: *const fn(
            self: *const IMSMQQueue3,
            Transaction: ?*VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekNext_v1: *const fn(
            self: *const IMSMQQueue3,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekCurrent_v1: *const fn(
            self: *const IMSMQQueue3,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Receive: *const fn(
            self: *const IMSMQQueue3,
            Transaction: ?*VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Peek: *const fn(
            self: *const IMSMQQueue3,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveCurrent: *const fn(
            self: *const IMSMQQueue3,
            Transaction: ?*VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekNext: *const fn(
            self: *const IMSMQQueue3,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekCurrent: *const fn(
            self: *const IMSMQQueue3,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn(
            self: *const IMSMQQueue3,
            ppcolProperties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Handle2: *const fn(
            self: *const IMSMQQueue3,
            pvarHandle: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveByLookupId: *const fn(
            self: *const IMSMQQueue3,
            LookupId: VARIANT,
            Transaction: ?*VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveNextByLookupId: *const fn(
            self: *const IMSMQQueue3,
            LookupId: VARIANT,
            Transaction: ?*VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceivePreviousByLookupId: *const fn(
            self: *const IMSMQQueue3,
            LookupId: VARIANT,
            Transaction: ?*VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveFirstByLookupId: *const fn(
            self: *const IMSMQQueue3,
            Transaction: ?*VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveLastByLookupId: *const fn(
            self: *const IMSMQQueue3,
            Transaction: ?*VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekByLookupId: *const fn(
            self: *const IMSMQQueue3,
            LookupId: VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekNextByLookupId: *const fn(
            self: *const IMSMQQueue3,
            LookupId: VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekPreviousByLookupId: *const fn(
            self: *const IMSMQQueue3,
            LookupId: VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekFirstByLookupId: *const fn(
            self: *const IMSMQQueue3,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekLastByLookupId: *const fn(
            self: *const IMSMQQueue3,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Purge: *const fn(
            self: *const IMSMQQueue3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsOpen2: *const fn(
            self: *const IMSMQQueue3,
            pisOpen: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Access(self: *const IMSMQQueue3, plAccess: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Access(self, plAccess);
    }
    pub fn get_ShareMode(self: *const IMSMQQueue3, plShareMode: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ShareMode(self, plShareMode);
    }
    pub fn get_QueueInfo(self: *const IMSMQQueue3, ppqinfo: ?*?*IMSMQQueueInfo3) callconv(.Inline) HRESULT {
        return self.vtable.get_QueueInfo(self, ppqinfo);
    }
    pub fn get_Handle(self: *const IMSMQQueue3, plHandle: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Handle(self, plHandle);
    }
    pub fn get_IsOpen(self: *const IMSMQQueue3, pisOpen: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsOpen(self, pisOpen);
    }
    pub fn Close(self: *const IMSMQQueue3) callconv(.Inline) HRESULT {
        return self.vtable.Close(self);
    }
    pub fn Receive_v1(self: *const IMSMQQueue3, Transaction: ?*VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, ppmsg: ?*?*IMSMQMessage) callconv(.Inline) HRESULT {
        return self.vtable.Receive_v1(self, Transaction, WantDestinationQueue, WantBody, ReceiveTimeout, ppmsg);
    }
    pub fn Peek_v1(self: *const IMSMQQueue3, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, ppmsg: ?*?*IMSMQMessage) callconv(.Inline) HRESULT {
        return self.vtable.Peek_v1(self, WantDestinationQueue, WantBody, ReceiveTimeout, ppmsg);
    }
    pub fn EnableNotification(self: *const IMSMQQueue3, Event: ?*IMSMQEvent3, Cursor: ?*VARIANT, ReceiveTimeout: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.EnableNotification(self, Event, Cursor, ReceiveTimeout);
    }
    pub fn Reset(self: *const IMSMQQueue3) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn ReceiveCurrent_v1(self: *const IMSMQQueue3, Transaction: ?*VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, ppmsg: ?*?*IMSMQMessage) callconv(.Inline) HRESULT {
        return self.vtable.ReceiveCurrent_v1(self, Transaction, WantDestinationQueue, WantBody, ReceiveTimeout, ppmsg);
    }
    pub fn PeekNext_v1(self: *const IMSMQQueue3, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, ppmsg: ?*?*IMSMQMessage) callconv(.Inline) HRESULT {
        return self.vtable.PeekNext_v1(self, WantDestinationQueue, WantBody, ReceiveTimeout, ppmsg);
    }
    pub fn PeekCurrent_v1(self: *const IMSMQQueue3, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, ppmsg: ?*?*IMSMQMessage) callconv(.Inline) HRESULT {
        return self.vtable.PeekCurrent_v1(self, WantDestinationQueue, WantBody, ReceiveTimeout, ppmsg);
    }
    pub fn Receive(self: *const IMSMQQueue3, Transaction: ?*VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage3) callconv(.Inline) HRESULT {
        return self.vtable.Receive(self, Transaction, WantDestinationQueue, WantBody, ReceiveTimeout, WantConnectorType, ppmsg);
    }
    pub fn Peek(self: *const IMSMQQueue3, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage3) callconv(.Inline) HRESULT {
        return self.vtable.Peek(self, WantDestinationQueue, WantBody, ReceiveTimeout, WantConnectorType, ppmsg);
    }
    pub fn ReceiveCurrent(self: *const IMSMQQueue3, Transaction: ?*VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage3) callconv(.Inline) HRESULT {
        return self.vtable.ReceiveCurrent(self, Transaction, WantDestinationQueue, WantBody, ReceiveTimeout, WantConnectorType, ppmsg);
    }
    pub fn PeekNext(self: *const IMSMQQueue3, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage3) callconv(.Inline) HRESULT {
        return self.vtable.PeekNext(self, WantDestinationQueue, WantBody, ReceiveTimeout, WantConnectorType, ppmsg);
    }
    pub fn PeekCurrent(self: *const IMSMQQueue3, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage3) callconv(.Inline) HRESULT {
        return self.vtable.PeekCurrent(self, WantDestinationQueue, WantBody, ReceiveTimeout, WantConnectorType, ppmsg);
    }
    pub fn get_Properties(self: *const IMSMQQueue3, ppcolProperties: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Properties(self, ppcolProperties);
    }
    pub fn get_Handle2(self: *const IMSMQQueue3, pvarHandle: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Handle2(self, pvarHandle);
    }
    pub fn ReceiveByLookupId(self: *const IMSMQQueue3, LookupId: VARIANT, Transaction: ?*VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage3) callconv(.Inline) HRESULT {
        return self.vtable.ReceiveByLookupId(self, LookupId, Transaction, WantDestinationQueue, WantBody, WantConnectorType, ppmsg);
    }
    pub fn ReceiveNextByLookupId(self: *const IMSMQQueue3, LookupId: VARIANT, Transaction: ?*VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage3) callconv(.Inline) HRESULT {
        return self.vtable.ReceiveNextByLookupId(self, LookupId, Transaction, WantDestinationQueue, WantBody, WantConnectorType, ppmsg);
    }
    pub fn ReceivePreviousByLookupId(self: *const IMSMQQueue3, LookupId: VARIANT, Transaction: ?*VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage3) callconv(.Inline) HRESULT {
        return self.vtable.ReceivePreviousByLookupId(self, LookupId, Transaction, WantDestinationQueue, WantBody, WantConnectorType, ppmsg);
    }
    pub fn ReceiveFirstByLookupId(self: *const IMSMQQueue3, Transaction: ?*VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage3) callconv(.Inline) HRESULT {
        return self.vtable.ReceiveFirstByLookupId(self, Transaction, WantDestinationQueue, WantBody, WantConnectorType, ppmsg);
    }
    pub fn ReceiveLastByLookupId(self: *const IMSMQQueue3, Transaction: ?*VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage3) callconv(.Inline) HRESULT {
        return self.vtable.ReceiveLastByLookupId(self, Transaction, WantDestinationQueue, WantBody, WantConnectorType, ppmsg);
    }
    pub fn PeekByLookupId(self: *const IMSMQQueue3, LookupId: VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage3) callconv(.Inline) HRESULT {
        return self.vtable.PeekByLookupId(self, LookupId, WantDestinationQueue, WantBody, WantConnectorType, ppmsg);
    }
    pub fn PeekNextByLookupId(self: *const IMSMQQueue3, LookupId: VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage3) callconv(.Inline) HRESULT {
        return self.vtable.PeekNextByLookupId(self, LookupId, WantDestinationQueue, WantBody, WantConnectorType, ppmsg);
    }
    pub fn PeekPreviousByLookupId(self: *const IMSMQQueue3, LookupId: VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage3) callconv(.Inline) HRESULT {
        return self.vtable.PeekPreviousByLookupId(self, LookupId, WantDestinationQueue, WantBody, WantConnectorType, ppmsg);
    }
    pub fn PeekFirstByLookupId(self: *const IMSMQQueue3, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage3) callconv(.Inline) HRESULT {
        return self.vtable.PeekFirstByLookupId(self, WantDestinationQueue, WantBody, WantConnectorType, ppmsg);
    }
    pub fn PeekLastByLookupId(self: *const IMSMQQueue3, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage3) callconv(.Inline) HRESULT {
        return self.vtable.PeekLastByLookupId(self, WantDestinationQueue, WantBody, WantConnectorType, ppmsg);
    }
    pub fn Purge(self: *const IMSMQQueue3) callconv(.Inline) HRESULT {
        return self.vtable.Purge(self);
    }
    pub fn get_IsOpen2(self: *const IMSMQQueue3, pisOpen: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsOpen2(self, pisOpen);
    }
};

const IID_IMSMQQueue4_Value = Guid.initString("eba96b20-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQQueue4 = &IID_IMSMQQueue4_Value;
pub const IMSMQQueue4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Access: *const fn(
            self: *const IMSMQQueue4,
            plAccess: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShareMode: *const fn(
            self: *const IMSMQQueue4,
            plShareMode: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QueueInfo: *const fn(
            self: *const IMSMQQueue4,
            ppqinfo: ?*?*IMSMQQueueInfo4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Handle: *const fn(
            self: *const IMSMQQueue4,
            plHandle: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsOpen: *const fn(
            self: *const IMSMQQueue4,
            pisOpen: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn(
            self: *const IMSMQQueue4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Receive_v1: *const fn(
            self: *const IMSMQQueue4,
            Transaction: ?*VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Peek_v1: *const fn(
            self: *const IMSMQQueue4,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableNotification: *const fn(
            self: *const IMSMQQueue4,
            Event: ?*IMSMQEvent3,
            Cursor: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IMSMQQueue4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveCurrent_v1: *const fn(
            self: *const IMSMQQueue4,
            Transaction: ?*VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekNext_v1: *const fn(
            self: *const IMSMQQueue4,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekCurrent_v1: *const fn(
            self: *const IMSMQQueue4,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Receive: *const fn(
            self: *const IMSMQQueue4,
            Transaction: ?*VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Peek: *const fn(
            self: *const IMSMQQueue4,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveCurrent: *const fn(
            self: *const IMSMQQueue4,
            Transaction: ?*VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekNext: *const fn(
            self: *const IMSMQQueue4,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekCurrent: *const fn(
            self: *const IMSMQQueue4,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            ReceiveTimeout: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn(
            self: *const IMSMQQueue4,
            ppcolProperties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Handle2: *const fn(
            self: *const IMSMQQueue4,
            pvarHandle: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveByLookupId: *const fn(
            self: *const IMSMQQueue4,
            LookupId: VARIANT,
            Transaction: ?*VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveNextByLookupId: *const fn(
            self: *const IMSMQQueue4,
            LookupId: VARIANT,
            Transaction: ?*VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceivePreviousByLookupId: *const fn(
            self: *const IMSMQQueue4,
            LookupId: VARIANT,
            Transaction: ?*VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveFirstByLookupId: *const fn(
            self: *const IMSMQQueue4,
            Transaction: ?*VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveLastByLookupId: *const fn(
            self: *const IMSMQQueue4,
            Transaction: ?*VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekByLookupId: *const fn(
            self: *const IMSMQQueue4,
            LookupId: VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekNextByLookupId: *const fn(
            self: *const IMSMQQueue4,
            LookupId: VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekPreviousByLookupId: *const fn(
            self: *const IMSMQQueue4,
            LookupId: VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekFirstByLookupId: *const fn(
            self: *const IMSMQQueue4,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekLastByLookupId: *const fn(
            self: *const IMSMQQueue4,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Purge: *const fn(
            self: *const IMSMQQueue4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsOpen2: *const fn(
            self: *const IMSMQQueue4,
            pisOpen: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveByLookupIdAllowPeek: *const fn(
            self: *const IMSMQQueue4,
            LookupId: VARIANT,
            Transaction: ?*VARIANT,
            WantDestinationQueue: ?*VARIANT,
            WantBody: ?*VARIANT,
            WantConnectorType: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Access(self: *const IMSMQQueue4, plAccess: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Access(self, plAccess);
    }
    pub fn get_ShareMode(self: *const IMSMQQueue4, plShareMode: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ShareMode(self, plShareMode);
    }
    pub fn get_QueueInfo(self: *const IMSMQQueue4, ppqinfo: ?*?*IMSMQQueueInfo4) callconv(.Inline) HRESULT {
        return self.vtable.get_QueueInfo(self, ppqinfo);
    }
    pub fn get_Handle(self: *const IMSMQQueue4, plHandle: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Handle(self, plHandle);
    }
    pub fn get_IsOpen(self: *const IMSMQQueue4, pisOpen: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsOpen(self, pisOpen);
    }
    pub fn Close(self: *const IMSMQQueue4) callconv(.Inline) HRESULT {
        return self.vtable.Close(self);
    }
    pub fn Receive_v1(self: *const IMSMQQueue4, Transaction: ?*VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, ppmsg: ?*?*IMSMQMessage) callconv(.Inline) HRESULT {
        return self.vtable.Receive_v1(self, Transaction, WantDestinationQueue, WantBody, ReceiveTimeout, ppmsg);
    }
    pub fn Peek_v1(self: *const IMSMQQueue4, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, ppmsg: ?*?*IMSMQMessage) callconv(.Inline) HRESULT {
        return self.vtable.Peek_v1(self, WantDestinationQueue, WantBody, ReceiveTimeout, ppmsg);
    }
    pub fn EnableNotification(self: *const IMSMQQueue4, Event: ?*IMSMQEvent3, Cursor: ?*VARIANT, ReceiveTimeout: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.EnableNotification(self, Event, Cursor, ReceiveTimeout);
    }
    pub fn Reset(self: *const IMSMQQueue4) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn ReceiveCurrent_v1(self: *const IMSMQQueue4, Transaction: ?*VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, ppmsg: ?*?*IMSMQMessage) callconv(.Inline) HRESULT {
        return self.vtable.ReceiveCurrent_v1(self, Transaction, WantDestinationQueue, WantBody, ReceiveTimeout, ppmsg);
    }
    pub fn PeekNext_v1(self: *const IMSMQQueue4, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, ppmsg: ?*?*IMSMQMessage) callconv(.Inline) HRESULT {
        return self.vtable.PeekNext_v1(self, WantDestinationQueue, WantBody, ReceiveTimeout, ppmsg);
    }
    pub fn PeekCurrent_v1(self: *const IMSMQQueue4, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, ppmsg: ?*?*IMSMQMessage) callconv(.Inline) HRESULT {
        return self.vtable.PeekCurrent_v1(self, WantDestinationQueue, WantBody, ReceiveTimeout, ppmsg);
    }
    pub fn Receive(self: *const IMSMQQueue4, Transaction: ?*VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage4) callconv(.Inline) HRESULT {
        return self.vtable.Receive(self, Transaction, WantDestinationQueue, WantBody, ReceiveTimeout, WantConnectorType, ppmsg);
    }
    pub fn Peek(self: *const IMSMQQueue4, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage4) callconv(.Inline) HRESULT {
        return self.vtable.Peek(self, WantDestinationQueue, WantBody, ReceiveTimeout, WantConnectorType, ppmsg);
    }
    pub fn ReceiveCurrent(self: *const IMSMQQueue4, Transaction: ?*VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage4) callconv(.Inline) HRESULT {
        return self.vtable.ReceiveCurrent(self, Transaction, WantDestinationQueue, WantBody, ReceiveTimeout, WantConnectorType, ppmsg);
    }
    pub fn PeekNext(self: *const IMSMQQueue4, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage4) callconv(.Inline) HRESULT {
        return self.vtable.PeekNext(self, WantDestinationQueue, WantBody, ReceiveTimeout, WantConnectorType, ppmsg);
    }
    pub fn PeekCurrent(self: *const IMSMQQueue4, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, ReceiveTimeout: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage4) callconv(.Inline) HRESULT {
        return self.vtable.PeekCurrent(self, WantDestinationQueue, WantBody, ReceiveTimeout, WantConnectorType, ppmsg);
    }
    pub fn get_Properties(self: *const IMSMQQueue4, ppcolProperties: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Properties(self, ppcolProperties);
    }
    pub fn get_Handle2(self: *const IMSMQQueue4, pvarHandle: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Handle2(self, pvarHandle);
    }
    pub fn ReceiveByLookupId(self: *const IMSMQQueue4, LookupId: VARIANT, Transaction: ?*VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage4) callconv(.Inline) HRESULT {
        return self.vtable.ReceiveByLookupId(self, LookupId, Transaction, WantDestinationQueue, WantBody, WantConnectorType, ppmsg);
    }
    pub fn ReceiveNextByLookupId(self: *const IMSMQQueue4, LookupId: VARIANT, Transaction: ?*VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage4) callconv(.Inline) HRESULT {
        return self.vtable.ReceiveNextByLookupId(self, LookupId, Transaction, WantDestinationQueue, WantBody, WantConnectorType, ppmsg);
    }
    pub fn ReceivePreviousByLookupId(self: *const IMSMQQueue4, LookupId: VARIANT, Transaction: ?*VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage4) callconv(.Inline) HRESULT {
        return self.vtable.ReceivePreviousByLookupId(self, LookupId, Transaction, WantDestinationQueue, WantBody, WantConnectorType, ppmsg);
    }
    pub fn ReceiveFirstByLookupId(self: *const IMSMQQueue4, Transaction: ?*VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage4) callconv(.Inline) HRESULT {
        return self.vtable.ReceiveFirstByLookupId(self, Transaction, WantDestinationQueue, WantBody, WantConnectorType, ppmsg);
    }
    pub fn ReceiveLastByLookupId(self: *const IMSMQQueue4, Transaction: ?*VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage4) callconv(.Inline) HRESULT {
        return self.vtable.ReceiveLastByLookupId(self, Transaction, WantDestinationQueue, WantBody, WantConnectorType, ppmsg);
    }
    pub fn PeekByLookupId(self: *const IMSMQQueue4, LookupId: VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage4) callconv(.Inline) HRESULT {
        return self.vtable.PeekByLookupId(self, LookupId, WantDestinationQueue, WantBody, WantConnectorType, ppmsg);
    }
    pub fn PeekNextByLookupId(self: *const IMSMQQueue4, LookupId: VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage4) callconv(.Inline) HRESULT {
        return self.vtable.PeekNextByLookupId(self, LookupId, WantDestinationQueue, WantBody, WantConnectorType, ppmsg);
    }
    pub fn PeekPreviousByLookupId(self: *const IMSMQQueue4, LookupId: VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage4) callconv(.Inline) HRESULT {
        return self.vtable.PeekPreviousByLookupId(self, LookupId, WantDestinationQueue, WantBody, WantConnectorType, ppmsg);
    }
    pub fn PeekFirstByLookupId(self: *const IMSMQQueue4, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage4) callconv(.Inline) HRESULT {
        return self.vtable.PeekFirstByLookupId(self, WantDestinationQueue, WantBody, WantConnectorType, ppmsg);
    }
    pub fn PeekLastByLookupId(self: *const IMSMQQueue4, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage4) callconv(.Inline) HRESULT {
        return self.vtable.PeekLastByLookupId(self, WantDestinationQueue, WantBody, WantConnectorType, ppmsg);
    }
    pub fn Purge(self: *const IMSMQQueue4) callconv(.Inline) HRESULT {
        return self.vtable.Purge(self);
    }
    pub fn get_IsOpen2(self: *const IMSMQQueue4, pisOpen: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsOpen2(self, pisOpen);
    }
    pub fn ReceiveByLookupIdAllowPeek(self: *const IMSMQQueue4, LookupId: VARIANT, Transaction: ?*VARIANT, WantDestinationQueue: ?*VARIANT, WantBody: ?*VARIANT, WantConnectorType: ?*VARIANT, ppmsg: ?*?*IMSMQMessage4) callconv(.Inline) HRESULT {
        return self.vtable.ReceiveByLookupIdAllowPeek(self, LookupId, Transaction, WantDestinationQueue, WantBody, WantConnectorType, ppmsg);
    }
};

const IID_IMSMQMessage_Value = Guid.initString("d7d6e074-dccd-11d0-aa4b-0060970debae");
pub const IID_IMSMQMessage = &IID_IMSMQMessage_Value;
pub const IMSMQMessage = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Class: *const fn(
            self: *const IMSMQMessage,
            plClass: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivLevel: *const fn(
            self: *const IMSMQMessage,
            plPrivLevel: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrivLevel: *const fn(
            self: *const IMSMQMessage,
            lPrivLevel: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthLevel: *const fn(
            self: *const IMSMQMessage,
            plAuthLevel: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuthLevel: *const fn(
            self: *const IMSMQMessage,
            lAuthLevel: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsAuthenticated: *const fn(
            self: *const IMSMQMessage,
            pisAuthenticated: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Delivery: *const fn(
            self: *const IMSMQMessage,
            plDelivery: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Delivery: *const fn(
            self: *const IMSMQMessage,
            lDelivery: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Trace: *const fn(
            self: *const IMSMQMessage,
            plTrace: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Trace: *const fn(
            self: *const IMSMQMessage,
            lTrace: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Priority: *const fn(
            self: *const IMSMQMessage,
            plPriority: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Priority: *const fn(
            self: *const IMSMQMessage,
            lPriority: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Journal: *const fn(
            self: *const IMSMQMessage,
            plJournal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Journal: *const fn(
            self: *const IMSMQMessage,
            lJournal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResponseQueueInfo: *const fn(
            self: *const IMSMQMessage,
            ppqinfoResponse: ?*?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_ResponseQueueInfo: *const fn(
            self: *const IMSMQMessage,
            pqinfoResponse: ?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AppSpecific: *const fn(
            self: *const IMSMQMessage,
            plAppSpecific: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AppSpecific: *const fn(
            self: *const IMSMQMessage,
            lAppSpecific: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SourceMachineGuid: *const fn(
            self: *const IMSMQMessage,
            pbstrGuidSrcMachine: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BodyLength: *const fn(
            self: *const IMSMQMessage,
            pcbBody: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Body: *const fn(
            self: *const IMSMQMessage,
            pvarBody: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Body: *const fn(
            self: *const IMSMQMessage,
            varBody: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AdminQueueInfo: *const fn(
            self: *const IMSMQMessage,
            ppqinfoAdmin: ?*?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_AdminQueueInfo: *const fn(
            self: *const IMSMQMessage,
            pqinfoAdmin: ?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn(
            self: *const IMSMQMessage,
            pvarMsgId: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CorrelationId: *const fn(
            self: *const IMSMQMessage,
            pvarMsgId: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CorrelationId: *const fn(
            self: *const IMSMQMessage,
            varMsgId: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Ack: *const fn(
            self: *const IMSMQMessage,
            plAck: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Ack: *const fn(
            self: *const IMSMQMessage,
            lAck: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Label: *const fn(
            self: *const IMSMQMessage,
            pbstrLabel: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Label: *const fn(
            self: *const IMSMQMessage,
            bstrLabel: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxTimeToReachQueue: *const fn(
            self: *const IMSMQMessage,
            plMaxTimeToReachQueue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxTimeToReachQueue: *const fn(
            self: *const IMSMQMessage,
            lMaxTimeToReachQueue: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxTimeToReceive: *const fn(
            self: *const IMSMQMessage,
            plMaxTimeToReceive: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxTimeToReceive: *const fn(
            self: *const IMSMQMessage,
            lMaxTimeToReceive: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HashAlgorithm: *const fn(
            self: *const IMSMQMessage,
            plHashAlg: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HashAlgorithm: *const fn(
            self: *const IMSMQMessage,
            lHashAlg: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncryptAlgorithm: *const fn(
            self: *const IMSMQMessage,
            plEncryptAlg: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EncryptAlgorithm: *const fn(
            self: *const IMSMQMessage,
            lEncryptAlg: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SentTime: *const fn(
            self: *const IMSMQMessage,
            pvarSentTime: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ArrivedTime: *const fn(
            self: *const IMSMQMessage,
            plArrivedTime: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DestinationQueueInfo: *const fn(
            self: *const IMSMQMessage,
            ppqinfoDest: ?*?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderCertificate: *const fn(
            self: *const IMSMQMessage,
            pvarSenderCert: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SenderCertificate: *const fn(
            self: *const IMSMQMessage,
            varSenderCert: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderId: *const fn(
            self: *const IMSMQMessage,
            pvarSenderId: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderIdType: *const fn(
            self: *const IMSMQMessage,
            plSenderIdType: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SenderIdType: *const fn(
            self: *const IMSMQMessage,
            lSenderIdType: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Send: *const fn(
            self: *const IMSMQMessage,
            DestinationQueue: ?*IMSMQQueue,
            Transaction: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AttachCurrentSecurityContext: *const fn(
            self: *const IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Class(self: *const IMSMQMessage, plClass: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Class(self, plClass);
    }
    pub fn get_PrivLevel(self: *const IMSMQMessage, plPrivLevel: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_PrivLevel(self, plPrivLevel);
    }
    pub fn put_PrivLevel(self: *const IMSMQMessage, lPrivLevel: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_PrivLevel(self, lPrivLevel);
    }
    pub fn get_AuthLevel(self: *const IMSMQMessage, plAuthLevel: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_AuthLevel(self, plAuthLevel);
    }
    pub fn put_AuthLevel(self: *const IMSMQMessage, lAuthLevel: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_AuthLevel(self, lAuthLevel);
    }
    pub fn get_IsAuthenticated(self: *const IMSMQMessage, pisAuthenticated: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsAuthenticated(self, pisAuthenticated);
    }
    pub fn get_Delivery(self: *const IMSMQMessage, plDelivery: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Delivery(self, plDelivery);
    }
    pub fn put_Delivery(self: *const IMSMQMessage, lDelivery: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Delivery(self, lDelivery);
    }
    pub fn get_Trace(self: *const IMSMQMessage, plTrace: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Trace(self, plTrace);
    }
    pub fn put_Trace(self: *const IMSMQMessage, lTrace: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Trace(self, lTrace);
    }
    pub fn get_Priority(self: *const IMSMQMessage, plPriority: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Priority(self, plPriority);
    }
    pub fn put_Priority(self: *const IMSMQMessage, lPriority: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Priority(self, lPriority);
    }
    pub fn get_Journal(self: *const IMSMQMessage, plJournal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Journal(self, plJournal);
    }
    pub fn put_Journal(self: *const IMSMQMessage, lJournal: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Journal(self, lJournal);
    }
    pub fn get_ResponseQueueInfo(self: *const IMSMQMessage, ppqinfoResponse: ?*?*IMSMQQueueInfo) callconv(.Inline) HRESULT {
        return self.vtable.get_ResponseQueueInfo(self, ppqinfoResponse);
    }
    pub fn putref_ResponseQueueInfo(self: *const IMSMQMessage, pqinfoResponse: ?*IMSMQQueueInfo) callconv(.Inline) HRESULT {
        return self.vtable.putref_ResponseQueueInfo(self, pqinfoResponse);
    }
    pub fn get_AppSpecific(self: *const IMSMQMessage, plAppSpecific: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_AppSpecific(self, plAppSpecific);
    }
    pub fn put_AppSpecific(self: *const IMSMQMessage, lAppSpecific: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_AppSpecific(self, lAppSpecific);
    }
    pub fn get_SourceMachineGuid(self: *const IMSMQMessage, pbstrGuidSrcMachine: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_SourceMachineGuid(self, pbstrGuidSrcMachine);
    }
    pub fn get_BodyLength(self: *const IMSMQMessage, pcbBody: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_BodyLength(self, pcbBody);
    }
    pub fn get_Body(self: *const IMSMQMessage, pvarBody: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Body(self, pvarBody);
    }
    pub fn put_Body(self: *const IMSMQMessage, varBody: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_Body(self, varBody);
    }
    pub fn get_AdminQueueInfo(self: *const IMSMQMessage, ppqinfoAdmin: ?*?*IMSMQQueueInfo) callconv(.Inline) HRESULT {
        return self.vtable.get_AdminQueueInfo(self, ppqinfoAdmin);
    }
    pub fn putref_AdminQueueInfo(self: *const IMSMQMessage, pqinfoAdmin: ?*IMSMQQueueInfo) callconv(.Inline) HRESULT {
        return self.vtable.putref_AdminQueueInfo(self, pqinfoAdmin);
    }
    pub fn get_Id(self: *const IMSMQMessage, pvarMsgId: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Id(self, pvarMsgId);
    }
    pub fn get_CorrelationId(self: *const IMSMQMessage, pvarMsgId: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_CorrelationId(self, pvarMsgId);
    }
    pub fn put_CorrelationId(self: *const IMSMQMessage, varMsgId: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_CorrelationId(self, varMsgId);
    }
    pub fn get_Ack(self: *const IMSMQMessage, plAck: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Ack(self, plAck);
    }
    pub fn put_Ack(self: *const IMSMQMessage, lAck: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Ack(self, lAck);
    }
    pub fn get_Label(self: *const IMSMQMessage, pbstrLabel: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Label(self, pbstrLabel);
    }
    pub fn put_Label(self: *const IMSMQMessage, bstrLabel: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Label(self, bstrLabel);
    }
    pub fn get_MaxTimeToReachQueue(self: *const IMSMQMessage, plMaxTimeToReachQueue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_MaxTimeToReachQueue(self, plMaxTimeToReachQueue);
    }
    pub fn put_MaxTimeToReachQueue(self: *const IMSMQMessage, lMaxTimeToReachQueue: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_MaxTimeToReachQueue(self, lMaxTimeToReachQueue);
    }
    pub fn get_MaxTimeToReceive(self: *const IMSMQMessage, plMaxTimeToReceive: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_MaxTimeToReceive(self, plMaxTimeToReceive);
    }
    pub fn put_MaxTimeToReceive(self: *const IMSMQMessage, lMaxTimeToReceive: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_MaxTimeToReceive(self, lMaxTimeToReceive);
    }
    pub fn get_HashAlgorithm(self: *const IMSMQMessage, plHashAlg: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_HashAlgorithm(self, plHashAlg);
    }
    pub fn put_HashAlgorithm(self: *const IMSMQMessage, lHashAlg: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_HashAlgorithm(self, lHashAlg);
    }
    pub fn get_EncryptAlgorithm(self: *const IMSMQMessage, plEncryptAlg: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_EncryptAlgorithm(self, plEncryptAlg);
    }
    pub fn put_EncryptAlgorithm(self: *const IMSMQMessage, lEncryptAlg: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_EncryptAlgorithm(self, lEncryptAlg);
    }
    pub fn get_SentTime(self: *const IMSMQMessage, pvarSentTime: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_SentTime(self, pvarSentTime);
    }
    pub fn get_ArrivedTime(self: *const IMSMQMessage, plArrivedTime: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_ArrivedTime(self, plArrivedTime);
    }
    pub fn get_DestinationQueueInfo(self: *const IMSMQMessage, ppqinfoDest: ?*?*IMSMQQueueInfo) callconv(.Inline) HRESULT {
        return self.vtable.get_DestinationQueueInfo(self, ppqinfoDest);
    }
    pub fn get_SenderCertificate(self: *const IMSMQMessage, pvarSenderCert: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_SenderCertificate(self, pvarSenderCert);
    }
    pub fn put_SenderCertificate(self: *const IMSMQMessage, varSenderCert: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_SenderCertificate(self, varSenderCert);
    }
    pub fn get_SenderId(self: *const IMSMQMessage, pvarSenderId: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_SenderId(self, pvarSenderId);
    }
    pub fn get_SenderIdType(self: *const IMSMQMessage, plSenderIdType: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_SenderIdType(self, plSenderIdType);
    }
    pub fn put_SenderIdType(self: *const IMSMQMessage, lSenderIdType: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_SenderIdType(self, lSenderIdType);
    }
    pub fn Send(self: *const IMSMQMessage, DestinationQueue: ?*IMSMQQueue, Transaction: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.Send(self, DestinationQueue, Transaction);
    }
    pub fn AttachCurrentSecurityContext(self: *const IMSMQMessage) callconv(.Inline) HRESULT {
        return self.vtable.AttachCurrentSecurityContext(self);
    }
};

const IID_IMSMQQueueInfos_Value = Guid.initString("d7d6e07d-dccd-11d0-aa4b-0060970debae");
pub const IID_IMSMQQueueInfos = &IID_IMSMQQueueInfos_Value;
pub const IMSMQQueueInfos = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Reset: *const fn(
            self: *const IMSMQQueueInfos,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: *const fn(
            self: *const IMSMQQueueInfos,
            ppqinfoNext: ?*?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Reset(self: *const IMSMQQueueInfos) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Next(self: *const IMSMQQueueInfos, ppqinfoNext: ?*?*IMSMQQueueInfo) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, ppqinfoNext);
    }
};

const IID_IMSMQQueueInfos2_Value = Guid.initString("eba96b0f-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQQueueInfos2 = &IID_IMSMQQueueInfos2_Value;
pub const IMSMQQueueInfos2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Reset: *const fn(
            self: *const IMSMQQueueInfos2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: *const fn(
            self: *const IMSMQQueueInfos2,
            ppqinfoNext: ?*?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn(
            self: *const IMSMQQueueInfos2,
            ppcolProperties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Reset(self: *const IMSMQQueueInfos2) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Next(self: *const IMSMQQueueInfos2, ppqinfoNext: ?*?*IMSMQQueueInfo2) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, ppqinfoNext);
    }
    pub fn get_Properties(self: *const IMSMQQueueInfos2, ppcolProperties: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Properties(self, ppcolProperties);
    }
};

const IID_IMSMQQueueInfos3_Value = Guid.initString("eba96b1e-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQQueueInfos3 = &IID_IMSMQQueueInfos3_Value;
pub const IMSMQQueueInfos3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Reset: *const fn(
            self: *const IMSMQQueueInfos3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: *const fn(
            self: *const IMSMQQueueInfos3,
            ppqinfoNext: ?*?*IMSMQQueueInfo3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn(
            self: *const IMSMQQueueInfos3,
            ppcolProperties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Reset(self: *const IMSMQQueueInfos3) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Next(self: *const IMSMQQueueInfos3, ppqinfoNext: ?*?*IMSMQQueueInfo3) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, ppqinfoNext);
    }
    pub fn get_Properties(self: *const IMSMQQueueInfos3, ppcolProperties: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Properties(self, ppcolProperties);
    }
};

const IID_IMSMQQueueInfos4_Value = Guid.initString("eba96b22-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQQueueInfos4 = &IID_IMSMQQueueInfos4_Value;
pub const IMSMQQueueInfos4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Reset: *const fn(
            self: *const IMSMQQueueInfos4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: *const fn(
            self: *const IMSMQQueueInfos4,
            ppqinfoNext: ?*?*IMSMQQueueInfo4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn(
            self: *const IMSMQQueueInfos4,
            ppcolProperties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Reset(self: *const IMSMQQueueInfos4) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Next(self: *const IMSMQQueueInfos4, ppqinfoNext: ?*?*IMSMQQueueInfo4) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, ppqinfoNext);
    }
    pub fn get_Properties(self: *const IMSMQQueueInfos4, ppcolProperties: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Properties(self, ppcolProperties);
    }
};

const IID_IMSMQEvent_Value = Guid.initString("d7d6e077-dccd-11d0-aa4b-0060970debae");
pub const IID_IMSMQEvent = &IID_IMSMQEvent_Value;
pub const IMSMQEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IMSMQEvent2_Value = Guid.initString("eba96b12-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQEvent2 = &IID_IMSMQEvent2_Value;
pub const IMSMQEvent2 = extern union {
    pub const VTable = extern struct {
        base: IMSMQEvent.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn(
            self: *const IMSMQEvent2,
            ppcolProperties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IMSMQEvent: IMSMQEvent,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Properties(self: *const IMSMQEvent2, ppcolProperties: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Properties(self, ppcolProperties);
    }
};

const IID_IMSMQEvent3_Value = Guid.initString("eba96b1c-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQEvent3 = &IID_IMSMQEvent3_Value;
pub const IMSMQEvent3 = extern union {
    pub const VTable = extern struct {
        base: IMSMQEvent2.VTable,
    };
    vtable: *const VTable,
    IMSMQEvent2: IMSMQEvent2,
    IMSMQEvent: IMSMQEvent,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IMSMQTransaction_Value = Guid.initString("d7d6e07f-dccd-11d0-aa4b-0060970debae");
pub const IID_IMSMQTransaction = &IID_IMSMQTransaction_Value;
pub const IMSMQTransaction = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Transaction: *const fn(
            self: *const IMSMQTransaction,
            plTransaction: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: *const fn(
            self: *const IMSMQTransaction,
            fRetaining: ?*VARIANT,
            grfTC: ?*VARIANT,
            grfRM: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Abort: *const fn(
            self: *const IMSMQTransaction,
            fRetaining: ?*VARIANT,
            fAsync: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Transaction(self: *const IMSMQTransaction, plTransaction: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Transaction(self, plTransaction);
    }
    pub fn Commit(self: *const IMSMQTransaction, fRetaining: ?*VARIANT, grfTC: ?*VARIANT, grfRM: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.Commit(self, fRetaining, grfTC, grfRM);
    }
    pub fn Abort(self: *const IMSMQTransaction, fRetaining: ?*VARIANT, fAsync: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.Abort(self, fRetaining, fAsync);
    }
};

const IID_IMSMQCoordinatedTransactionDispenser_Value = Guid.initString("d7d6e081-dccd-11d0-aa4b-0060970debae");
pub const IID_IMSMQCoordinatedTransactionDispenser = &IID_IMSMQCoordinatedTransactionDispenser_Value;
pub const IMSMQCoordinatedTransactionDispenser = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        BeginTransaction: *const fn(
            self: *const IMSMQCoordinatedTransactionDispenser,
            ptransaction: ?*?*IMSMQTransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn BeginTransaction(self: *const IMSMQCoordinatedTransactionDispenser, ptransaction: ?*?*IMSMQTransaction) callconv(.Inline) HRESULT {
        return self.vtable.BeginTransaction(self, ptransaction);
    }
};

const IID_IMSMQTransactionDispenser_Value = Guid.initString("d7d6e083-dccd-11d0-aa4b-0060970debae");
pub const IID_IMSMQTransactionDispenser = &IID_IMSMQTransactionDispenser_Value;
pub const IMSMQTransactionDispenser = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        BeginTransaction: *const fn(
            self: *const IMSMQTransactionDispenser,
            ptransaction: ?*?*IMSMQTransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn BeginTransaction(self: *const IMSMQTransactionDispenser, ptransaction: ?*?*IMSMQTransaction) callconv(.Inline) HRESULT {
        return self.vtable.BeginTransaction(self, ptransaction);
    }
};

const IID_IMSMQQuery2_Value = Guid.initString("eba96b0e-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQQuery2 = &IID_IMSMQQuery2_Value;
pub const IMSMQQuery2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        LookupQueue: *const fn(
            self: *const IMSMQQuery2,
            QueueGuid: ?*VARIANT,
            ServiceTypeGuid: ?*VARIANT,
            Label: ?*VARIANT,
            CreateTime: ?*VARIANT,
            ModifyTime: ?*VARIANT,
            RelServiceType: ?*VARIANT,
            RelLabel: ?*VARIANT,
            RelCreateTime: ?*VARIANT,
            RelModifyTime: ?*VARIANT,
            ppqinfos: ?*?*IMSMQQueueInfos2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn(
            self: *const IMSMQQuery2,
            ppcolProperties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn LookupQueue(self: *const IMSMQQuery2, QueueGuid: ?*VARIANT, ServiceTypeGuid: ?*VARIANT, Label: ?*VARIANT, CreateTime: ?*VARIANT, ModifyTime: ?*VARIANT, RelServiceType: ?*VARIANT, RelLabel: ?*VARIANT, RelCreateTime: ?*VARIANT, RelModifyTime: ?*VARIANT, ppqinfos: ?*?*IMSMQQueueInfos2) callconv(.Inline) HRESULT {
        return self.vtable.LookupQueue(self, QueueGuid, ServiceTypeGuid, Label, CreateTime, ModifyTime, RelServiceType, RelLabel, RelCreateTime, RelModifyTime, ppqinfos);
    }
    pub fn get_Properties(self: *const IMSMQQuery2, ppcolProperties: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Properties(self, ppcolProperties);
    }
};

const IID_IMSMQQuery3_Value = Guid.initString("eba96b19-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQQuery3 = &IID_IMSMQQuery3_Value;
pub const IMSMQQuery3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        LookupQueue_v2: *const fn(
            self: *const IMSMQQuery3,
            QueueGuid: ?*VARIANT,
            ServiceTypeGuid: ?*VARIANT,
            Label: ?*VARIANT,
            CreateTime: ?*VARIANT,
            ModifyTime: ?*VARIANT,
            RelServiceType: ?*VARIANT,
            RelLabel: ?*VARIANT,
            RelCreateTime: ?*VARIANT,
            RelModifyTime: ?*VARIANT,
            ppqinfos: ?*?*IMSMQQueueInfos3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn(
            self: *const IMSMQQuery3,
            ppcolProperties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LookupQueue: *const fn(
            self: *const IMSMQQuery3,
            QueueGuid: ?*VARIANT,
            ServiceTypeGuid: ?*VARIANT,
            Label: ?*VARIANT,
            CreateTime: ?*VARIANT,
            ModifyTime: ?*VARIANT,
            RelServiceType: ?*VARIANT,
            RelLabel: ?*VARIANT,
            RelCreateTime: ?*VARIANT,
            RelModifyTime: ?*VARIANT,
            MulticastAddress: ?*VARIANT,
            RelMulticastAddress: ?*VARIANT,
            ppqinfos: ?*?*IMSMQQueueInfos3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn LookupQueue_v2(self: *const IMSMQQuery3, QueueGuid: ?*VARIANT, ServiceTypeGuid: ?*VARIANT, Label: ?*VARIANT, CreateTime: ?*VARIANT, ModifyTime: ?*VARIANT, RelServiceType: ?*VARIANT, RelLabel: ?*VARIANT, RelCreateTime: ?*VARIANT, RelModifyTime: ?*VARIANT, ppqinfos: ?*?*IMSMQQueueInfos3) callconv(.Inline) HRESULT {
        return self.vtable.LookupQueue_v2(self, QueueGuid, ServiceTypeGuid, Label, CreateTime, ModifyTime, RelServiceType, RelLabel, RelCreateTime, RelModifyTime, ppqinfos);
    }
    pub fn get_Properties(self: *const IMSMQQuery3, ppcolProperties: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Properties(self, ppcolProperties);
    }
    pub fn LookupQueue(self: *const IMSMQQuery3, QueueGuid: ?*VARIANT, ServiceTypeGuid: ?*VARIANT, Label: ?*VARIANT, CreateTime: ?*VARIANT, ModifyTime: ?*VARIANT, RelServiceType: ?*VARIANT, RelLabel: ?*VARIANT, RelCreateTime: ?*VARIANT, RelModifyTime: ?*VARIANT, MulticastAddress: ?*VARIANT, RelMulticastAddress: ?*VARIANT, ppqinfos: ?*?*IMSMQQueueInfos3) callconv(.Inline) HRESULT {
        return self.vtable.LookupQueue(self, QueueGuid, ServiceTypeGuid, Label, CreateTime, ModifyTime, RelServiceType, RelLabel, RelCreateTime, RelModifyTime, MulticastAddress, RelMulticastAddress, ppqinfos);
    }
};

const IID_IMSMQQuery4_Value = Guid.initString("eba96b24-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQQuery4 = &IID_IMSMQQuery4_Value;
pub const IMSMQQuery4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        LookupQueue_v2: *const fn(
            self: *const IMSMQQuery4,
            QueueGuid: ?*VARIANT,
            ServiceTypeGuid: ?*VARIANT,
            Label: ?*VARIANT,
            CreateTime: ?*VARIANT,
            ModifyTime: ?*VARIANT,
            RelServiceType: ?*VARIANT,
            RelLabel: ?*VARIANT,
            RelCreateTime: ?*VARIANT,
            RelModifyTime: ?*VARIANT,
            ppqinfos: ?*?*IMSMQQueueInfos4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn(
            self: *const IMSMQQuery4,
            ppcolProperties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LookupQueue: *const fn(
            self: *const IMSMQQuery4,
            QueueGuid: ?*VARIANT,
            ServiceTypeGuid: ?*VARIANT,
            Label: ?*VARIANT,
            CreateTime: ?*VARIANT,
            ModifyTime: ?*VARIANT,
            RelServiceType: ?*VARIANT,
            RelLabel: ?*VARIANT,
            RelCreateTime: ?*VARIANT,
            RelModifyTime: ?*VARIANT,
            MulticastAddress: ?*VARIANT,
            RelMulticastAddress: ?*VARIANT,
            ppqinfos: ?*?*IMSMQQueueInfos4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn LookupQueue_v2(self: *const IMSMQQuery4, QueueGuid: ?*VARIANT, ServiceTypeGuid: ?*VARIANT, Label: ?*VARIANT, CreateTime: ?*VARIANT, ModifyTime: ?*VARIANT, RelServiceType: ?*VARIANT, RelLabel: ?*VARIANT, RelCreateTime: ?*VARIANT, RelModifyTime: ?*VARIANT, ppqinfos: ?*?*IMSMQQueueInfos4) callconv(.Inline) HRESULT {
        return self.vtable.LookupQueue_v2(self, QueueGuid, ServiceTypeGuid, Label, CreateTime, ModifyTime, RelServiceType, RelLabel, RelCreateTime, RelModifyTime, ppqinfos);
    }
    pub fn get_Properties(self: *const IMSMQQuery4, ppcolProperties: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Properties(self, ppcolProperties);
    }
    pub fn LookupQueue(self: *const IMSMQQuery4, QueueGuid: ?*VARIANT, ServiceTypeGuid: ?*VARIANT, Label: ?*VARIANT, CreateTime: ?*VARIANT, ModifyTime: ?*VARIANT, RelServiceType: ?*VARIANT, RelLabel: ?*VARIANT, RelCreateTime: ?*VARIANT, RelModifyTime: ?*VARIANT, MulticastAddress: ?*VARIANT, RelMulticastAddress: ?*VARIANT, ppqinfos: ?*?*IMSMQQueueInfos4) callconv(.Inline) HRESULT {
        return self.vtable.LookupQueue(self, QueueGuid, ServiceTypeGuid, Label, CreateTime, ModifyTime, RelServiceType, RelLabel, RelCreateTime, RelModifyTime, MulticastAddress, RelMulticastAddress, ppqinfos);
    }
};

const IID_IMSMQMessage2_Value = Guid.initString("d9933be0-a567-11d2-b0f3-00e02c074f6b");
pub const IID_IMSMQMessage2 = &IID_IMSMQMessage2_Value;
pub const IMSMQMessage2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Class: *const fn(
            self: *const IMSMQMessage2,
            plClass: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivLevel: *const fn(
            self: *const IMSMQMessage2,
            plPrivLevel: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrivLevel: *const fn(
            self: *const IMSMQMessage2,
            lPrivLevel: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthLevel: *const fn(
            self: *const IMSMQMessage2,
            plAuthLevel: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuthLevel: *const fn(
            self: *const IMSMQMessage2,
            lAuthLevel: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsAuthenticated: *const fn(
            self: *const IMSMQMessage2,
            pisAuthenticated: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Delivery: *const fn(
            self: *const IMSMQMessage2,
            plDelivery: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Delivery: *const fn(
            self: *const IMSMQMessage2,
            lDelivery: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Trace: *const fn(
            self: *const IMSMQMessage2,
            plTrace: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Trace: *const fn(
            self: *const IMSMQMessage2,
            lTrace: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Priority: *const fn(
            self: *const IMSMQMessage2,
            plPriority: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Priority: *const fn(
            self: *const IMSMQMessage2,
            lPriority: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Journal: *const fn(
            self: *const IMSMQMessage2,
            plJournal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Journal: *const fn(
            self: *const IMSMQMessage2,
            lJournal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResponseQueueInfo_v1: *const fn(
            self: *const IMSMQMessage2,
            ppqinfoResponse: ?*?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_ResponseQueueInfo_v1: *const fn(
            self: *const IMSMQMessage2,
            pqinfoResponse: ?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AppSpecific: *const fn(
            self: *const IMSMQMessage2,
            plAppSpecific: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AppSpecific: *const fn(
            self: *const IMSMQMessage2,
            lAppSpecific: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SourceMachineGuid: *const fn(
            self: *const IMSMQMessage2,
            pbstrGuidSrcMachine: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BodyLength: *const fn(
            self: *const IMSMQMessage2,
            pcbBody: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Body: *const fn(
            self: *const IMSMQMessage2,
            pvarBody: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Body: *const fn(
            self: *const IMSMQMessage2,
            varBody: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AdminQueueInfo_v1: *const fn(
            self: *const IMSMQMessage2,
            ppqinfoAdmin: ?*?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_AdminQueueInfo_v1: *const fn(
            self: *const IMSMQMessage2,
            pqinfoAdmin: ?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn(
            self: *const IMSMQMessage2,
            pvarMsgId: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CorrelationId: *const fn(
            self: *const IMSMQMessage2,
            pvarMsgId: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CorrelationId: *const fn(
            self: *const IMSMQMessage2,
            varMsgId: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Ack: *const fn(
            self: *const IMSMQMessage2,
            plAck: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Ack: *const fn(
            self: *const IMSMQMessage2,
            lAck: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Label: *const fn(
            self: *const IMSMQMessage2,
            pbstrLabel: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Label: *const fn(
            self: *const IMSMQMessage2,
            bstrLabel: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxTimeToReachQueue: *const fn(
            self: *const IMSMQMessage2,
            plMaxTimeToReachQueue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxTimeToReachQueue: *const fn(
            self: *const IMSMQMessage2,
            lMaxTimeToReachQueue: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxTimeToReceive: *const fn(
            self: *const IMSMQMessage2,
            plMaxTimeToReceive: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxTimeToReceive: *const fn(
            self: *const IMSMQMessage2,
            lMaxTimeToReceive: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HashAlgorithm: *const fn(
            self: *const IMSMQMessage2,
            plHashAlg: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HashAlgorithm: *const fn(
            self: *const IMSMQMessage2,
            lHashAlg: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncryptAlgorithm: *const fn(
            self: *const IMSMQMessage2,
            plEncryptAlg: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EncryptAlgorithm: *const fn(
            self: *const IMSMQMessage2,
            lEncryptAlg: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SentTime: *const fn(
            self: *const IMSMQMessage2,
            pvarSentTime: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ArrivedTime: *const fn(
            self: *const IMSMQMessage2,
            plArrivedTime: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DestinationQueueInfo: *const fn(
            self: *const IMSMQMessage2,
            ppqinfoDest: ?*?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderCertificate: *const fn(
            self: *const IMSMQMessage2,
            pvarSenderCert: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SenderCertificate: *const fn(
            self: *const IMSMQMessage2,
            varSenderCert: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderId: *const fn(
            self: *const IMSMQMessage2,
            pvarSenderId: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderIdType: *const fn(
            self: *const IMSMQMessage2,
            plSenderIdType: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SenderIdType: *const fn(
            self: *const IMSMQMessage2,
            lSenderIdType: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Send: *const fn(
            self: *const IMSMQMessage2,
            DestinationQueue: ?*IMSMQQueue2,
            Transaction: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AttachCurrentSecurityContext: *const fn(
            self: *const IMSMQMessage2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderVersion: *const fn(
            self: *const IMSMQMessage2,
            plSenderVersion: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Extension: *const fn(
            self: *const IMSMQMessage2,
            pvarExtension: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Extension: *const fn(
            self: *const IMSMQMessage2,
            varExtension: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ConnectorTypeGuid: *const fn(
            self: *const IMSMQMessage2,
            pbstrGuidConnectorType: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ConnectorTypeGuid: *const fn(
            self: *const IMSMQMessage2,
            bstrGuidConnectorType: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransactionStatusQueueInfo: *const fn(
            self: *const IMSMQMessage2,
            ppqinfoXactStatus: ?*?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DestinationSymmetricKey: *const fn(
            self: *const IMSMQMessage2,
            pvarDestSymmKey: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DestinationSymmetricKey: *const fn(
            self: *const IMSMQMessage2,
            varDestSymmKey: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Signature: *const fn(
            self: *const IMSMQMessage2,
            pvarSignature: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Signature: *const fn(
            self: *const IMSMQMessage2,
            varSignature: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthenticationProviderType: *const fn(
            self: *const IMSMQMessage2,
            plAuthProvType: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuthenticationProviderType: *const fn(
            self: *const IMSMQMessage2,
            lAuthProvType: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthenticationProviderName: *const fn(
            self: *const IMSMQMessage2,
            pbstrAuthProvName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuthenticationProviderName: *const fn(
            self: *const IMSMQMessage2,
            bstrAuthProvName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SenderId: *const fn(
            self: *const IMSMQMessage2,
            varSenderId: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MsgClass: *const fn(
            self: *const IMSMQMessage2,
            plMsgClass: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MsgClass: *const fn(
            self: *const IMSMQMessage2,
            lMsgClass: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn(
            self: *const IMSMQMessage2,
            ppcolProperties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransactionId: *const fn(
            self: *const IMSMQMessage2,
            pvarXactId: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsFirstInTransaction: *const fn(
            self: *const IMSMQMessage2,
            pisFirstInXact: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsLastInTransaction: *const fn(
            self: *const IMSMQMessage2,
            pisLastInXact: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResponseQueueInfo: *const fn(
            self: *const IMSMQMessage2,
            ppqinfoResponse: ?*?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_ResponseQueueInfo: *const fn(
            self: *const IMSMQMessage2,
            pqinfoResponse: ?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AdminQueueInfo: *const fn(
            self: *const IMSMQMessage2,
            ppqinfoAdmin: ?*?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_AdminQueueInfo: *const fn(
            self: *const IMSMQMessage2,
            pqinfoAdmin: ?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReceivedAuthenticationLevel: *const fn(
            self: *const IMSMQMessage2,
            psReceivedAuthenticationLevel: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Class(self: *const IMSMQMessage2, plClass: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Class(self, plClass);
    }
    pub fn get_PrivLevel(self: *const IMSMQMessage2, plPrivLevel: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_PrivLevel(self, plPrivLevel);
    }
    pub fn put_PrivLevel(self: *const IMSMQMessage2, lPrivLevel: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_PrivLevel(self, lPrivLevel);
    }
    pub fn get_AuthLevel(self: *const IMSMQMessage2, plAuthLevel: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_AuthLevel(self, plAuthLevel);
    }
    pub fn put_AuthLevel(self: *const IMSMQMessage2, lAuthLevel: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_AuthLevel(self, lAuthLevel);
    }
    pub fn get_IsAuthenticated(self: *const IMSMQMessage2, pisAuthenticated: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsAuthenticated(self, pisAuthenticated);
    }
    pub fn get_Delivery(self: *const IMSMQMessage2, plDelivery: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Delivery(self, plDelivery);
    }
    pub fn put_Delivery(self: *const IMSMQMessage2, lDelivery: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Delivery(self, lDelivery);
    }
    pub fn get_Trace(self: *const IMSMQMessage2, plTrace: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Trace(self, plTrace);
    }
    pub fn put_Trace(self: *const IMSMQMessage2, lTrace: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Trace(self, lTrace);
    }
    pub fn get_Priority(self: *const IMSMQMessage2, plPriority: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Priority(self, plPriority);
    }
    pub fn put_Priority(self: *const IMSMQMessage2, lPriority: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Priority(self, lPriority);
    }
    pub fn get_Journal(self: *const IMSMQMessage2, plJournal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Journal(self, plJournal);
    }
    pub fn put_Journal(self: *const IMSMQMessage2, lJournal: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Journal(self, lJournal);
    }
    pub fn get_ResponseQueueInfo_v1(self: *const IMSMQMessage2, ppqinfoResponse: ?*?*IMSMQQueueInfo) callconv(.Inline) HRESULT {
        return self.vtable.get_ResponseQueueInfo_v1(self, ppqinfoResponse);
    }
    pub fn putref_ResponseQueueInfo_v1(self: *const IMSMQMessage2, pqinfoResponse: ?*IMSMQQueueInfo) callconv(.Inline) HRESULT {
        return self.vtable.putref_ResponseQueueInfo_v1(self, pqinfoResponse);
    }
    pub fn get_AppSpecific(self: *const IMSMQMessage2, plAppSpecific: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_AppSpecific(self, plAppSpecific);
    }
    pub fn put_AppSpecific(self: *const IMSMQMessage2, lAppSpecific: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_AppSpecific(self, lAppSpecific);
    }
    pub fn get_SourceMachineGuid(self: *const IMSMQMessage2, pbstrGuidSrcMachine: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_SourceMachineGuid(self, pbstrGuidSrcMachine);
    }
    pub fn get_BodyLength(self: *const IMSMQMessage2, pcbBody: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_BodyLength(self, pcbBody);
    }
    pub fn get_Body(self: *const IMSMQMessage2, pvarBody: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Body(self, pvarBody);
    }
    pub fn put_Body(self: *const IMSMQMessage2, varBody: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_Body(self, varBody);
    }
    pub fn get_AdminQueueInfo_v1(self: *const IMSMQMessage2, ppqinfoAdmin: ?*?*IMSMQQueueInfo) callconv(.Inline) HRESULT {
        return self.vtable.get_AdminQueueInfo_v1(self, ppqinfoAdmin);
    }
    pub fn putref_AdminQueueInfo_v1(self: *const IMSMQMessage2, pqinfoAdmin: ?*IMSMQQueueInfo) callconv(.Inline) HRESULT {
        return self.vtable.putref_AdminQueueInfo_v1(self, pqinfoAdmin);
    }
    pub fn get_Id(self: *const IMSMQMessage2, pvarMsgId: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Id(self, pvarMsgId);
    }
    pub fn get_CorrelationId(self: *const IMSMQMessage2, pvarMsgId: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_CorrelationId(self, pvarMsgId);
    }
    pub fn put_CorrelationId(self: *const IMSMQMessage2, varMsgId: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_CorrelationId(self, varMsgId);
    }
    pub fn get_Ack(self: *const IMSMQMessage2, plAck: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Ack(self, plAck);
    }
    pub fn put_Ack(self: *const IMSMQMessage2, lAck: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Ack(self, lAck);
    }
    pub fn get_Label(self: *const IMSMQMessage2, pbstrLabel: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Label(self, pbstrLabel);
    }
    pub fn put_Label(self: *const IMSMQMessage2, bstrLabel: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Label(self, bstrLabel);
    }
    pub fn get_MaxTimeToReachQueue(self: *const IMSMQMessage2, plMaxTimeToReachQueue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_MaxTimeToReachQueue(self, plMaxTimeToReachQueue);
    }
    pub fn put_MaxTimeToReachQueue(self: *const IMSMQMessage2, lMaxTimeToReachQueue: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_MaxTimeToReachQueue(self, lMaxTimeToReachQueue);
    }
    pub fn get_MaxTimeToReceive(self: *const IMSMQMessage2, plMaxTimeToReceive: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_MaxTimeToReceive(self, plMaxTimeToReceive);
    }
    pub fn put_MaxTimeToReceive(self: *const IMSMQMessage2, lMaxTimeToReceive: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_MaxTimeToReceive(self, lMaxTimeToReceive);
    }
    pub fn get_HashAlgorithm(self: *const IMSMQMessage2, plHashAlg: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_HashAlgorithm(self, plHashAlg);
    }
    pub fn put_HashAlgorithm(self: *const IMSMQMessage2, lHashAlg: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_HashAlgorithm(self, lHashAlg);
    }
    pub fn get_EncryptAlgorithm(self: *const IMSMQMessage2, plEncryptAlg: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_EncryptAlgorithm(self, plEncryptAlg);
    }
    pub fn put_EncryptAlgorithm(self: *const IMSMQMessage2, lEncryptAlg: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_EncryptAlgorithm(self, lEncryptAlg);
    }
    pub fn get_SentTime(self: *const IMSMQMessage2, pvarSentTime: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_SentTime(self, pvarSentTime);
    }
    pub fn get_ArrivedTime(self: *const IMSMQMessage2, plArrivedTime: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_ArrivedTime(self, plArrivedTime);
    }
    pub fn get_DestinationQueueInfo(self: *const IMSMQMessage2, ppqinfoDest: ?*?*IMSMQQueueInfo2) callconv(.Inline) HRESULT {
        return self.vtable.get_DestinationQueueInfo(self, ppqinfoDest);
    }
    pub fn get_SenderCertificate(self: *const IMSMQMessage2, pvarSenderCert: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_SenderCertificate(self, pvarSenderCert);
    }
    pub fn put_SenderCertificate(self: *const IMSMQMessage2, varSenderCert: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_SenderCertificate(self, varSenderCert);
    }
    pub fn get_SenderId(self: *const IMSMQMessage2, pvarSenderId: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_SenderId(self, pvarSenderId);
    }
    pub fn get_SenderIdType(self: *const IMSMQMessage2, plSenderIdType: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_SenderIdType(self, plSenderIdType);
    }
    pub fn put_SenderIdType(self: *const IMSMQMessage2, lSenderIdType: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_SenderIdType(self, lSenderIdType);
    }
    pub fn Send(self: *const IMSMQMessage2, DestinationQueue: ?*IMSMQQueue2, Transaction: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.Send(self, DestinationQueue, Transaction);
    }
    pub fn AttachCurrentSecurityContext(self: *const IMSMQMessage2) callconv(.Inline) HRESULT {
        return self.vtable.AttachCurrentSecurityContext(self);
    }
    pub fn get_SenderVersion(self: *const IMSMQMessage2, plSenderVersion: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_SenderVersion(self, plSenderVersion);
    }
    pub fn get_Extension(self: *const IMSMQMessage2, pvarExtension: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Extension(self, pvarExtension);
    }
    pub fn put_Extension(self: *const IMSMQMessage2, varExtension: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_Extension(self, varExtension);
    }
    pub fn get_ConnectorTypeGuid(self: *const IMSMQMessage2, pbstrGuidConnectorType: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ConnectorTypeGuid(self, pbstrGuidConnectorType);
    }
    pub fn put_ConnectorTypeGuid(self: *const IMSMQMessage2, bstrGuidConnectorType: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ConnectorTypeGuid(self, bstrGuidConnectorType);
    }
    pub fn get_TransactionStatusQueueInfo(self: *const IMSMQMessage2, ppqinfoXactStatus: ?*?*IMSMQQueueInfo2) callconv(.Inline) HRESULT {
        return self.vtable.get_TransactionStatusQueueInfo(self, ppqinfoXactStatus);
    }
    pub fn get_DestinationSymmetricKey(self: *const IMSMQMessage2, pvarDestSymmKey: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_DestinationSymmetricKey(self, pvarDestSymmKey);
    }
    pub fn put_DestinationSymmetricKey(self: *const IMSMQMessage2, varDestSymmKey: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_DestinationSymmetricKey(self, varDestSymmKey);
    }
    pub fn get_Signature(self: *const IMSMQMessage2, pvarSignature: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Signature(self, pvarSignature);
    }
    pub fn put_Signature(self: *const IMSMQMessage2, varSignature: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_Signature(self, varSignature);
    }
    pub fn get_AuthenticationProviderType(self: *const IMSMQMessage2, plAuthProvType: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_AuthenticationProviderType(self, plAuthProvType);
    }
    pub fn put_AuthenticationProviderType(self: *const IMSMQMessage2, lAuthProvType: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_AuthenticationProviderType(self, lAuthProvType);
    }
    pub fn get_AuthenticationProviderName(self: *const IMSMQMessage2, pbstrAuthProvName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_AuthenticationProviderName(self, pbstrAuthProvName);
    }
    pub fn put_AuthenticationProviderName(self: *const IMSMQMessage2, bstrAuthProvName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_AuthenticationProviderName(self, bstrAuthProvName);
    }
    pub fn put_SenderId(self: *const IMSMQMessage2, varSenderId: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_SenderId(self, varSenderId);
    }
    pub fn get_MsgClass(self: *const IMSMQMessage2, plMsgClass: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_MsgClass(self, plMsgClass);
    }
    pub fn put_MsgClass(self: *const IMSMQMessage2, lMsgClass: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_MsgClass(self, lMsgClass);
    }
    pub fn get_Properties(self: *const IMSMQMessage2, ppcolProperties: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Properties(self, ppcolProperties);
    }
    pub fn get_TransactionId(self: *const IMSMQMessage2, pvarXactId: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_TransactionId(self, pvarXactId);
    }
    pub fn get_IsFirstInTransaction(self: *const IMSMQMessage2, pisFirstInXact: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsFirstInTransaction(self, pisFirstInXact);
    }
    pub fn get_IsLastInTransaction(self: *const IMSMQMessage2, pisLastInXact: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsLastInTransaction(self, pisLastInXact);
    }
    pub fn get_ResponseQueueInfo(self: *const IMSMQMessage2, ppqinfoResponse: ?*?*IMSMQQueueInfo2) callconv(.Inline) HRESULT {
        return self.vtable.get_ResponseQueueInfo(self, ppqinfoResponse);
    }
    pub fn putref_ResponseQueueInfo(self: *const IMSMQMessage2, pqinfoResponse: ?*IMSMQQueueInfo2) callconv(.Inline) HRESULT {
        return self.vtable.putref_ResponseQueueInfo(self, pqinfoResponse);
    }
    pub fn get_AdminQueueInfo(self: *const IMSMQMessage2, ppqinfoAdmin: ?*?*IMSMQQueueInfo2) callconv(.Inline) HRESULT {
        return self.vtable.get_AdminQueueInfo(self, ppqinfoAdmin);
    }
    pub fn putref_AdminQueueInfo(self: *const IMSMQMessage2, pqinfoAdmin: ?*IMSMQQueueInfo2) callconv(.Inline) HRESULT {
        return self.vtable.putref_AdminQueueInfo(self, pqinfoAdmin);
    }
    pub fn get_ReceivedAuthenticationLevel(self: *const IMSMQMessage2, psReceivedAuthenticationLevel: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_ReceivedAuthenticationLevel(self, psReceivedAuthenticationLevel);
    }
};

const IID_IMSMQMessage3_Value = Guid.initString("eba96b1a-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQMessage3 = &IID_IMSMQMessage3_Value;
pub const IMSMQMessage3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Class: *const fn(
            self: *const IMSMQMessage3,
            plClass: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivLevel: *const fn(
            self: *const IMSMQMessage3,
            plPrivLevel: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrivLevel: *const fn(
            self: *const IMSMQMessage3,
            lPrivLevel: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthLevel: *const fn(
            self: *const IMSMQMessage3,
            plAuthLevel: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuthLevel: *const fn(
            self: *const IMSMQMessage3,
            lAuthLevel: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsAuthenticated: *const fn(
            self: *const IMSMQMessage3,
            pisAuthenticated: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Delivery: *const fn(
            self: *const IMSMQMessage3,
            plDelivery: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Delivery: *const fn(
            self: *const IMSMQMessage3,
            lDelivery: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Trace: *const fn(
            self: *const IMSMQMessage3,
            plTrace: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Trace: *const fn(
            self: *const IMSMQMessage3,
            lTrace: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Priority: *const fn(
            self: *const IMSMQMessage3,
            plPriority: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Priority: *const fn(
            self: *const IMSMQMessage3,
            lPriority: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Journal: *const fn(
            self: *const IMSMQMessage3,
            plJournal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Journal: *const fn(
            self: *const IMSMQMessage3,
            lJournal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResponseQueueInfo_v1: *const fn(
            self: *const IMSMQMessage3,
            ppqinfoResponse: ?*?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_ResponseQueueInfo_v1: *const fn(
            self: *const IMSMQMessage3,
            pqinfoResponse: ?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AppSpecific: *const fn(
            self: *const IMSMQMessage3,
            plAppSpecific: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AppSpecific: *const fn(
            self: *const IMSMQMessage3,
            lAppSpecific: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SourceMachineGuid: *const fn(
            self: *const IMSMQMessage3,
            pbstrGuidSrcMachine: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BodyLength: *const fn(
            self: *const IMSMQMessage3,
            pcbBody: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Body: *const fn(
            self: *const IMSMQMessage3,
            pvarBody: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Body: *const fn(
            self: *const IMSMQMessage3,
            varBody: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AdminQueueInfo_v1: *const fn(
            self: *const IMSMQMessage3,
            ppqinfoAdmin: ?*?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_AdminQueueInfo_v1: *const fn(
            self: *const IMSMQMessage3,
            pqinfoAdmin: ?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn(
            self: *const IMSMQMessage3,
            pvarMsgId: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CorrelationId: *const fn(
            self: *const IMSMQMessage3,
            pvarMsgId: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CorrelationId: *const fn(
            self: *const IMSMQMessage3,
            varMsgId: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Ack: *const fn(
            self: *const IMSMQMessage3,
            plAck: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Ack: *const fn(
            self: *const IMSMQMessage3,
            lAck: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Label: *const fn(
            self: *const IMSMQMessage3,
            pbstrLabel: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Label: *const fn(
            self: *const IMSMQMessage3,
            bstrLabel: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxTimeToReachQueue: *const fn(
            self: *const IMSMQMessage3,
            plMaxTimeToReachQueue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxTimeToReachQueue: *const fn(
            self: *const IMSMQMessage3,
            lMaxTimeToReachQueue: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxTimeToReceive: *const fn(
            self: *const IMSMQMessage3,
            plMaxTimeToReceive: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxTimeToReceive: *const fn(
            self: *const IMSMQMessage3,
            lMaxTimeToReceive: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HashAlgorithm: *const fn(
            self: *const IMSMQMessage3,
            plHashAlg: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HashAlgorithm: *const fn(
            self: *const IMSMQMessage3,
            lHashAlg: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncryptAlgorithm: *const fn(
            self: *const IMSMQMessage3,
            plEncryptAlg: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EncryptAlgorithm: *const fn(
            self: *const IMSMQMessage3,
            lEncryptAlg: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SentTime: *const fn(
            self: *const IMSMQMessage3,
            pvarSentTime: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ArrivedTime: *const fn(
            self: *const IMSMQMessage3,
            plArrivedTime: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DestinationQueueInfo: *const fn(
            self: *const IMSMQMessage3,
            ppqinfoDest: ?*?*IMSMQQueueInfo3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderCertificate: *const fn(
            self: *const IMSMQMessage3,
            pvarSenderCert: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SenderCertificate: *const fn(
            self: *const IMSMQMessage3,
            varSenderCert: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderId: *const fn(
            self: *const IMSMQMessage3,
            pvarSenderId: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderIdType: *const fn(
            self: *const IMSMQMessage3,
            plSenderIdType: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SenderIdType: *const fn(
            self: *const IMSMQMessage3,
            lSenderIdType: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Send: *const fn(
            self: *const IMSMQMessage3,
            DestinationQueue: ?*IDispatch,
            Transaction: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AttachCurrentSecurityContext: *const fn(
            self: *const IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderVersion: *const fn(
            self: *const IMSMQMessage3,
            plSenderVersion: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Extension: *const fn(
            self: *const IMSMQMessage3,
            pvarExtension: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Extension: *const fn(
            self: *const IMSMQMessage3,
            varExtension: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ConnectorTypeGuid: *const fn(
            self: *const IMSMQMessage3,
            pbstrGuidConnectorType: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ConnectorTypeGuid: *const fn(
            self: *const IMSMQMessage3,
            bstrGuidConnectorType: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransactionStatusQueueInfo: *const fn(
            self: *const IMSMQMessage3,
            ppqinfoXactStatus: ?*?*IMSMQQueueInfo3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DestinationSymmetricKey: *const fn(
            self: *const IMSMQMessage3,
            pvarDestSymmKey: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DestinationSymmetricKey: *const fn(
            self: *const IMSMQMessage3,
            varDestSymmKey: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Signature: *const fn(
            self: *const IMSMQMessage3,
            pvarSignature: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Signature: *const fn(
            self: *const IMSMQMessage3,
            varSignature: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthenticationProviderType: *const fn(
            self: *const IMSMQMessage3,
            plAuthProvType: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuthenticationProviderType: *const fn(
            self: *const IMSMQMessage3,
            lAuthProvType: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthenticationProviderName: *const fn(
            self: *const IMSMQMessage3,
            pbstrAuthProvName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuthenticationProviderName: *const fn(
            self: *const IMSMQMessage3,
            bstrAuthProvName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SenderId: *const fn(
            self: *const IMSMQMessage3,
            varSenderId: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MsgClass: *const fn(
            self: *const IMSMQMessage3,
            plMsgClass: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MsgClass: *const fn(
            self: *const IMSMQMessage3,
            lMsgClass: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn(
            self: *const IMSMQMessage3,
            ppcolProperties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransactionId: *const fn(
            self: *const IMSMQMessage3,
            pvarXactId: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsFirstInTransaction: *const fn(
            self: *const IMSMQMessage3,
            pisFirstInXact: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsLastInTransaction: *const fn(
            self: *const IMSMQMessage3,
            pisLastInXact: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResponseQueueInfo_v2: *const fn(
            self: *const IMSMQMessage3,
            ppqinfoResponse: ?*?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_ResponseQueueInfo_v2: *const fn(
            self: *const IMSMQMessage3,
            pqinfoResponse: ?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AdminQueueInfo_v2: *const fn(
            self: *const IMSMQMessage3,
            ppqinfoAdmin: ?*?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_AdminQueueInfo_v2: *const fn(
            self: *const IMSMQMessage3,
            pqinfoAdmin: ?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReceivedAuthenticationLevel: *const fn(
            self: *const IMSMQMessage3,
            psReceivedAuthenticationLevel: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResponseQueueInfo: *const fn(
            self: *const IMSMQMessage3,
            ppqinfoResponse: ?*?*IMSMQQueueInfo3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_ResponseQueueInfo: *const fn(
            self: *const IMSMQMessage3,
            pqinfoResponse: ?*IMSMQQueueInfo3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AdminQueueInfo: *const fn(
            self: *const IMSMQMessage3,
            ppqinfoAdmin: ?*?*IMSMQQueueInfo3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_AdminQueueInfo: *const fn(
            self: *const IMSMQMessage3,
            pqinfoAdmin: ?*IMSMQQueueInfo3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResponseDestination: *const fn(
            self: *const IMSMQMessage3,
            ppdestResponse: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_ResponseDestination: *const fn(
            self: *const IMSMQMessage3,
            pdestResponse: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Destination: *const fn(
            self: *const IMSMQMessage3,
            ppdestDestination: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LookupId: *const fn(
            self: *const IMSMQMessage3,
            pvarLookupId: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsAuthenticated2: *const fn(
            self: *const IMSMQMessage3,
            pisAuthenticated: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsFirstInTransaction2: *const fn(
            self: *const IMSMQMessage3,
            pisFirstInXact: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsLastInTransaction2: *const fn(
            self: *const IMSMQMessage3,
            pisLastInXact: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AttachCurrentSecurityContext2: *const fn(
            self: *const IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SoapEnvelope: *const fn(
            self: *const IMSMQMessage3,
            pbstrSoapEnvelope: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CompoundMessage: *const fn(
            self: *const IMSMQMessage3,
            pvarCompoundMessage: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SoapHeader: *const fn(
            self: *const IMSMQMessage3,
            bstrSoapHeader: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SoapBody: *const fn(
            self: *const IMSMQMessage3,
            bstrSoapBody: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Class(self: *const IMSMQMessage3, plClass: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Class(self, plClass);
    }
    pub fn get_PrivLevel(self: *const IMSMQMessage3, plPrivLevel: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_PrivLevel(self, plPrivLevel);
    }
    pub fn put_PrivLevel(self: *const IMSMQMessage3, lPrivLevel: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_PrivLevel(self, lPrivLevel);
    }
    pub fn get_AuthLevel(self: *const IMSMQMessage3, plAuthLevel: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_AuthLevel(self, plAuthLevel);
    }
    pub fn put_AuthLevel(self: *const IMSMQMessage3, lAuthLevel: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_AuthLevel(self, lAuthLevel);
    }
    pub fn get_IsAuthenticated(self: *const IMSMQMessage3, pisAuthenticated: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsAuthenticated(self, pisAuthenticated);
    }
    pub fn get_Delivery(self: *const IMSMQMessage3, plDelivery: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Delivery(self, plDelivery);
    }
    pub fn put_Delivery(self: *const IMSMQMessage3, lDelivery: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Delivery(self, lDelivery);
    }
    pub fn get_Trace(self: *const IMSMQMessage3, plTrace: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Trace(self, plTrace);
    }
    pub fn put_Trace(self: *const IMSMQMessage3, lTrace: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Trace(self, lTrace);
    }
    pub fn get_Priority(self: *const IMSMQMessage3, plPriority: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Priority(self, plPriority);
    }
    pub fn put_Priority(self: *const IMSMQMessage3, lPriority: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Priority(self, lPriority);
    }
    pub fn get_Journal(self: *const IMSMQMessage3, plJournal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Journal(self, plJournal);
    }
    pub fn put_Journal(self: *const IMSMQMessage3, lJournal: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Journal(self, lJournal);
    }
    pub fn get_ResponseQueueInfo_v1(self: *const IMSMQMessage3, ppqinfoResponse: ?*?*IMSMQQueueInfo) callconv(.Inline) HRESULT {
        return self.vtable.get_ResponseQueueInfo_v1(self, ppqinfoResponse);
    }
    pub fn putref_ResponseQueueInfo_v1(self: *const IMSMQMessage3, pqinfoResponse: ?*IMSMQQueueInfo) callconv(.Inline) HRESULT {
        return self.vtable.putref_ResponseQueueInfo_v1(self, pqinfoResponse);
    }
    pub fn get_AppSpecific(self: *const IMSMQMessage3, plAppSpecific: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_AppSpecific(self, plAppSpecific);
    }
    pub fn put_AppSpecific(self: *const IMSMQMessage3, lAppSpecific: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_AppSpecific(self, lAppSpecific);
    }
    pub fn get_SourceMachineGuid(self: *const IMSMQMessage3, pbstrGuidSrcMachine: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_SourceMachineGuid(self, pbstrGuidSrcMachine);
    }
    pub fn get_BodyLength(self: *const IMSMQMessage3, pcbBody: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_BodyLength(self, pcbBody);
    }
    pub fn get_Body(self: *const IMSMQMessage3, pvarBody: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Body(self, pvarBody);
    }
    pub fn put_Body(self: *const IMSMQMessage3, varBody: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_Body(self, varBody);
    }
    pub fn get_AdminQueueInfo_v1(self: *const IMSMQMessage3, ppqinfoAdmin: ?*?*IMSMQQueueInfo) callconv(.Inline) HRESULT {
        return self.vtable.get_AdminQueueInfo_v1(self, ppqinfoAdmin);
    }
    pub fn putref_AdminQueueInfo_v1(self: *const IMSMQMessage3, pqinfoAdmin: ?*IMSMQQueueInfo) callconv(.Inline) HRESULT {
        return self.vtable.putref_AdminQueueInfo_v1(self, pqinfoAdmin);
    }
    pub fn get_Id(self: *const IMSMQMessage3, pvarMsgId: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Id(self, pvarMsgId);
    }
    pub fn get_CorrelationId(self: *const IMSMQMessage3, pvarMsgId: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_CorrelationId(self, pvarMsgId);
    }
    pub fn put_CorrelationId(self: *const IMSMQMessage3, varMsgId: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_CorrelationId(self, varMsgId);
    }
    pub fn get_Ack(self: *const IMSMQMessage3, plAck: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Ack(self, plAck);
    }
    pub fn put_Ack(self: *const IMSMQMessage3, lAck: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Ack(self, lAck);
    }
    pub fn get_Label(self: *const IMSMQMessage3, pbstrLabel: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Label(self, pbstrLabel);
    }
    pub fn put_Label(self: *const IMSMQMessage3, bstrLabel: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Label(self, bstrLabel);
    }
    pub fn get_MaxTimeToReachQueue(self: *const IMSMQMessage3, plMaxTimeToReachQueue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_MaxTimeToReachQueue(self, plMaxTimeToReachQueue);
    }
    pub fn put_MaxTimeToReachQueue(self: *const IMSMQMessage3, lMaxTimeToReachQueue: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_MaxTimeToReachQueue(self, lMaxTimeToReachQueue);
    }
    pub fn get_MaxTimeToReceive(self: *const IMSMQMessage3, plMaxTimeToReceive: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_MaxTimeToReceive(self, plMaxTimeToReceive);
    }
    pub fn put_MaxTimeToReceive(self: *const IMSMQMessage3, lMaxTimeToReceive: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_MaxTimeToReceive(self, lMaxTimeToReceive);
    }
    pub fn get_HashAlgorithm(self: *const IMSMQMessage3, plHashAlg: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_HashAlgorithm(self, plHashAlg);
    }
    pub fn put_HashAlgorithm(self: *const IMSMQMessage3, lHashAlg: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_HashAlgorithm(self, lHashAlg);
    }
    pub fn get_EncryptAlgorithm(self: *const IMSMQMessage3, plEncryptAlg: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_EncryptAlgorithm(self, plEncryptAlg);
    }
    pub fn put_EncryptAlgorithm(self: *const IMSMQMessage3, lEncryptAlg: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_EncryptAlgorithm(self, lEncryptAlg);
    }
    pub fn get_SentTime(self: *const IMSMQMessage3, pvarSentTime: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_SentTime(self, pvarSentTime);
    }
    pub fn get_ArrivedTime(self: *const IMSMQMessage3, plArrivedTime: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_ArrivedTime(self, plArrivedTime);
    }
    pub fn get_DestinationQueueInfo(self: *const IMSMQMessage3, ppqinfoDest: ?*?*IMSMQQueueInfo3) callconv(.Inline) HRESULT {
        return self.vtable.get_DestinationQueueInfo(self, ppqinfoDest);
    }
    pub fn get_SenderCertificate(self: *const IMSMQMessage3, pvarSenderCert: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_SenderCertificate(self, pvarSenderCert);
    }
    pub fn put_SenderCertificate(self: *const IMSMQMessage3, varSenderCert: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_SenderCertificate(self, varSenderCert);
    }
    pub fn get_SenderId(self: *const IMSMQMessage3, pvarSenderId: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_SenderId(self, pvarSenderId);
    }
    pub fn get_SenderIdType(self: *const IMSMQMessage3, plSenderIdType: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_SenderIdType(self, plSenderIdType);
    }
    pub fn put_SenderIdType(self: *const IMSMQMessage3, lSenderIdType: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_SenderIdType(self, lSenderIdType);
    }
    pub fn Send(self: *const IMSMQMessage3, DestinationQueue: ?*IDispatch, Transaction: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.Send(self, DestinationQueue, Transaction);
    }
    pub fn AttachCurrentSecurityContext(self: *const IMSMQMessage3) callconv(.Inline) HRESULT {
        return self.vtable.AttachCurrentSecurityContext(self);
    }
    pub fn get_SenderVersion(self: *const IMSMQMessage3, plSenderVersion: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_SenderVersion(self, plSenderVersion);
    }
    pub fn get_Extension(self: *const IMSMQMessage3, pvarExtension: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Extension(self, pvarExtension);
    }
    pub fn put_Extension(self: *const IMSMQMessage3, varExtension: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_Extension(self, varExtension);
    }
    pub fn get_ConnectorTypeGuid(self: *const IMSMQMessage3, pbstrGuidConnectorType: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ConnectorTypeGuid(self, pbstrGuidConnectorType);
    }
    pub fn put_ConnectorTypeGuid(self: *const IMSMQMessage3, bstrGuidConnectorType: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ConnectorTypeGuid(self, bstrGuidConnectorType);
    }
    pub fn get_TransactionStatusQueueInfo(self: *const IMSMQMessage3, ppqinfoXactStatus: ?*?*IMSMQQueueInfo3) callconv(.Inline) HRESULT {
        return self.vtable.get_TransactionStatusQueueInfo(self, ppqinfoXactStatus);
    }
    pub fn get_DestinationSymmetricKey(self: *const IMSMQMessage3, pvarDestSymmKey: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_DestinationSymmetricKey(self, pvarDestSymmKey);
    }
    pub fn put_DestinationSymmetricKey(self: *const IMSMQMessage3, varDestSymmKey: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_DestinationSymmetricKey(self, varDestSymmKey);
    }
    pub fn get_Signature(self: *const IMSMQMessage3, pvarSignature: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Signature(self, pvarSignature);
    }
    pub fn put_Signature(self: *const IMSMQMessage3, varSignature: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_Signature(self, varSignature);
    }
    pub fn get_AuthenticationProviderType(self: *const IMSMQMessage3, plAuthProvType: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_AuthenticationProviderType(self, plAuthProvType);
    }
    pub fn put_AuthenticationProviderType(self: *const IMSMQMessage3, lAuthProvType: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_AuthenticationProviderType(self, lAuthProvType);
    }
    pub fn get_AuthenticationProviderName(self: *const IMSMQMessage3, pbstrAuthProvName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_AuthenticationProviderName(self, pbstrAuthProvName);
    }
    pub fn put_AuthenticationProviderName(self: *const IMSMQMessage3, bstrAuthProvName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_AuthenticationProviderName(self, bstrAuthProvName);
    }
    pub fn put_SenderId(self: *const IMSMQMessage3, varSenderId: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_SenderId(self, varSenderId);
    }
    pub fn get_MsgClass(self: *const IMSMQMessage3, plMsgClass: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_MsgClass(self, plMsgClass);
    }
    pub fn put_MsgClass(self: *const IMSMQMessage3, lMsgClass: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_MsgClass(self, lMsgClass);
    }
    pub fn get_Properties(self: *const IMSMQMessage3, ppcolProperties: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Properties(self, ppcolProperties);
    }
    pub fn get_TransactionId(self: *const IMSMQMessage3, pvarXactId: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_TransactionId(self, pvarXactId);
    }
    pub fn get_IsFirstInTransaction(self: *const IMSMQMessage3, pisFirstInXact: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsFirstInTransaction(self, pisFirstInXact);
    }
    pub fn get_IsLastInTransaction(self: *const IMSMQMessage3, pisLastInXact: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsLastInTransaction(self, pisLastInXact);
    }
    pub fn get_ResponseQueueInfo_v2(self: *const IMSMQMessage3, ppqinfoResponse: ?*?*IMSMQQueueInfo2) callconv(.Inline) HRESULT {
        return self.vtable.get_ResponseQueueInfo_v2(self, ppqinfoResponse);
    }
    pub fn putref_ResponseQueueInfo_v2(self: *const IMSMQMessage3, pqinfoResponse: ?*IMSMQQueueInfo2) callconv(.Inline) HRESULT {
        return self.vtable.putref_ResponseQueueInfo_v2(self, pqinfoResponse);
    }
    pub fn get_AdminQueueInfo_v2(self: *const IMSMQMessage3, ppqinfoAdmin: ?*?*IMSMQQueueInfo2) callconv(.Inline) HRESULT {
        return self.vtable.get_AdminQueueInfo_v2(self, ppqinfoAdmin);
    }
    pub fn putref_AdminQueueInfo_v2(self: *const IMSMQMessage3, pqinfoAdmin: ?*IMSMQQueueInfo2) callconv(.Inline) HRESULT {
        return self.vtable.putref_AdminQueueInfo_v2(self, pqinfoAdmin);
    }
    pub fn get_ReceivedAuthenticationLevel(self: *const IMSMQMessage3, psReceivedAuthenticationLevel: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_ReceivedAuthenticationLevel(self, psReceivedAuthenticationLevel);
    }
    pub fn get_ResponseQueueInfo(self: *const IMSMQMessage3, ppqinfoResponse: ?*?*IMSMQQueueInfo3) callconv(.Inline) HRESULT {
        return self.vtable.get_ResponseQueueInfo(self, ppqinfoResponse);
    }
    pub fn putref_ResponseQueueInfo(self: *const IMSMQMessage3, pqinfoResponse: ?*IMSMQQueueInfo3) callconv(.Inline) HRESULT {
        return self.vtable.putref_ResponseQueueInfo(self, pqinfoResponse);
    }
    pub fn get_AdminQueueInfo(self: *const IMSMQMessage3, ppqinfoAdmin: ?*?*IMSMQQueueInfo3) callconv(.Inline) HRESULT {
        return self.vtable.get_AdminQueueInfo(self, ppqinfoAdmin);
    }
    pub fn putref_AdminQueueInfo(self: *const IMSMQMessage3, pqinfoAdmin: ?*IMSMQQueueInfo3) callconv(.Inline) HRESULT {
        return self.vtable.putref_AdminQueueInfo(self, pqinfoAdmin);
    }
    pub fn get_ResponseDestination(self: *const IMSMQMessage3, ppdestResponse: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_ResponseDestination(self, ppdestResponse);
    }
    pub fn putref_ResponseDestination(self: *const IMSMQMessage3, pdestResponse: ?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.putref_ResponseDestination(self, pdestResponse);
    }
    pub fn get_Destination(self: *const IMSMQMessage3, ppdestDestination: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Destination(self, ppdestDestination);
    }
    pub fn get_LookupId(self: *const IMSMQMessage3, pvarLookupId: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_LookupId(self, pvarLookupId);
    }
    pub fn get_IsAuthenticated2(self: *const IMSMQMessage3, pisAuthenticated: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsAuthenticated2(self, pisAuthenticated);
    }
    pub fn get_IsFirstInTransaction2(self: *const IMSMQMessage3, pisFirstInXact: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsFirstInTransaction2(self, pisFirstInXact);
    }
    pub fn get_IsLastInTransaction2(self: *const IMSMQMessage3, pisLastInXact: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsLastInTransaction2(self, pisLastInXact);
    }
    pub fn AttachCurrentSecurityContext2(self: *const IMSMQMessage3) callconv(.Inline) HRESULT {
        return self.vtable.AttachCurrentSecurityContext2(self);
    }
    pub fn get_SoapEnvelope(self: *const IMSMQMessage3, pbstrSoapEnvelope: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_SoapEnvelope(self, pbstrSoapEnvelope);
    }
    pub fn get_CompoundMessage(self: *const IMSMQMessage3, pvarCompoundMessage: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_CompoundMessage(self, pvarCompoundMessage);
    }
    pub fn put_SoapHeader(self: *const IMSMQMessage3, bstrSoapHeader: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_SoapHeader(self, bstrSoapHeader);
    }
    pub fn put_SoapBody(self: *const IMSMQMessage3, bstrSoapBody: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_SoapBody(self, bstrSoapBody);
    }
};

const IID_IMSMQMessage4_Value = Guid.initString("eba96b23-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQMessage4 = &IID_IMSMQMessage4_Value;
pub const IMSMQMessage4 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Class: *const fn(
            self: *const IMSMQMessage4,
            plClass: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivLevel: *const fn(
            self: *const IMSMQMessage4,
            plPrivLevel: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrivLevel: *const fn(
            self: *const IMSMQMessage4,
            lPrivLevel: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthLevel: *const fn(
            self: *const IMSMQMessage4,
            plAuthLevel: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuthLevel: *const fn(
            self: *const IMSMQMessage4,
            lAuthLevel: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsAuthenticated: *const fn(
            self: *const IMSMQMessage4,
            pisAuthenticated: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Delivery: *const fn(
            self: *const IMSMQMessage4,
            plDelivery: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Delivery: *const fn(
            self: *const IMSMQMessage4,
            lDelivery: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Trace: *const fn(
            self: *const IMSMQMessage4,
            plTrace: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Trace: *const fn(
            self: *const IMSMQMessage4,
            lTrace: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Priority: *const fn(
            self: *const IMSMQMessage4,
            plPriority: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Priority: *const fn(
            self: *const IMSMQMessage4,
            lPriority: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Journal: *const fn(
            self: *const IMSMQMessage4,
            plJournal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Journal: *const fn(
            self: *const IMSMQMessage4,
            lJournal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResponseQueueInfo_v1: *const fn(
            self: *const IMSMQMessage4,
            ppqinfoResponse: ?*?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_ResponseQueueInfo_v1: *const fn(
            self: *const IMSMQMessage4,
            pqinfoResponse: ?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AppSpecific: *const fn(
            self: *const IMSMQMessage4,
            plAppSpecific: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AppSpecific: *const fn(
            self: *const IMSMQMessage4,
            lAppSpecific: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SourceMachineGuid: *const fn(
            self: *const IMSMQMessage4,
            pbstrGuidSrcMachine: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BodyLength: *const fn(
            self: *const IMSMQMessage4,
            pcbBody: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Body: *const fn(
            self: *const IMSMQMessage4,
            pvarBody: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Body: *const fn(
            self: *const IMSMQMessage4,
            varBody: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AdminQueueInfo_v1: *const fn(
            self: *const IMSMQMessage4,
            ppqinfoAdmin: ?*?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_AdminQueueInfo_v1: *const fn(
            self: *const IMSMQMessage4,
            pqinfoAdmin: ?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn(
            self: *const IMSMQMessage4,
            pvarMsgId: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CorrelationId: *const fn(
            self: *const IMSMQMessage4,
            pvarMsgId: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CorrelationId: *const fn(
            self: *const IMSMQMessage4,
            varMsgId: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Ack: *const fn(
            self: *const IMSMQMessage4,
            plAck: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Ack: *const fn(
            self: *const IMSMQMessage4,
            lAck: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Label: *const fn(
            self: *const IMSMQMessage4,
            pbstrLabel: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Label: *const fn(
            self: *const IMSMQMessage4,
            bstrLabel: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxTimeToReachQueue: *const fn(
            self: *const IMSMQMessage4,
            plMaxTimeToReachQueue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxTimeToReachQueue: *const fn(
            self: *const IMSMQMessage4,
            lMaxTimeToReachQueue: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxTimeToReceive: *const fn(
            self: *const IMSMQMessage4,
            plMaxTimeToReceive: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxTimeToReceive: *const fn(
            self: *const IMSMQMessage4,
            lMaxTimeToReceive: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HashAlgorithm: *const fn(
            self: *const IMSMQMessage4,
            plHashAlg: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HashAlgorithm: *const fn(
            self: *const IMSMQMessage4,
            lHashAlg: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncryptAlgorithm: *const fn(
            self: *const IMSMQMessage4,
            plEncryptAlg: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EncryptAlgorithm: *const fn(
            self: *const IMSMQMessage4,
            lEncryptAlg: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SentTime: *const fn(
            self: *const IMSMQMessage4,
            pvarSentTime: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ArrivedTime: *const fn(
            self: *const IMSMQMessage4,
            plArrivedTime: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DestinationQueueInfo: *const fn(
            self: *const IMSMQMessage4,
            ppqinfoDest: ?*?*IMSMQQueueInfo4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderCertificate: *const fn(
            self: *const IMSMQMessage4,
            pvarSenderCert: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SenderCertificate: *const fn(
            self: *const IMSMQMessage4,
            varSenderCert: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderId: *const fn(
            self: *const IMSMQMessage4,
            pvarSenderId: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderIdType: *const fn(
            self: *const IMSMQMessage4,
            plSenderIdType: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SenderIdType: *const fn(
            self: *const IMSMQMessage4,
            lSenderIdType: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Send: *const fn(
            self: *const IMSMQMessage4,
            DestinationQueue: ?*IDispatch,
            Transaction: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AttachCurrentSecurityContext: *const fn(
            self: *const IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderVersion: *const fn(
            self: *const IMSMQMessage4,
            plSenderVersion: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Extension: *const fn(
            self: *const IMSMQMessage4,
            pvarExtension: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Extension: *const fn(
            self: *const IMSMQMessage4,
            varExtension: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ConnectorTypeGuid: *const fn(
            self: *const IMSMQMessage4,
            pbstrGuidConnectorType: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ConnectorTypeGuid: *const fn(
            self: *const IMSMQMessage4,
            bstrGuidConnectorType: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransactionStatusQueueInfo: *const fn(
            self: *const IMSMQMessage4,
            ppqinfoXactStatus: ?*?*IMSMQQueueInfo4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DestinationSymmetricKey: *const fn(
            self: *const IMSMQMessage4,
            pvarDestSymmKey: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DestinationSymmetricKey: *const fn(
            self: *const IMSMQMessage4,
            varDestSymmKey: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Signature: *const fn(
            self: *const IMSMQMessage4,
            pvarSignature: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Signature: *const fn(
            self: *const IMSMQMessage4,
            varSignature: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthenticationProviderType: *const fn(
            self: *const IMSMQMessage4,
            plAuthProvType: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuthenticationProviderType: *const fn(
            self: *const IMSMQMessage4,
            lAuthProvType: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthenticationProviderName: *const fn(
            self: *const IMSMQMessage4,
            pbstrAuthProvName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuthenticationProviderName: *const fn(
            self: *const IMSMQMessage4,
            bstrAuthProvName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SenderId: *const fn(
            self: *const IMSMQMessage4,
            varSenderId: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MsgClass: *const fn(
            self: *const IMSMQMessage4,
            plMsgClass: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MsgClass: *const fn(
            self: *const IMSMQMessage4,
            lMsgClass: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn(
            self: *const IMSMQMessage4,
            ppcolProperties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransactionId: *const fn(
            self: *const IMSMQMessage4,
            pvarXactId: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsFirstInTransaction: *const fn(
            self: *const IMSMQMessage4,
            pisFirstInXact: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsLastInTransaction: *const fn(
            self: *const IMSMQMessage4,
            pisLastInXact: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResponseQueueInfo_v2: *const fn(
            self: *const IMSMQMessage4,
            ppqinfoResponse: ?*?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_ResponseQueueInfo_v2: *const fn(
            self: *const IMSMQMessage4,
            pqinfoResponse: ?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AdminQueueInfo_v2: *const fn(
            self: *const IMSMQMessage4,
            ppqinfoAdmin: ?*?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_AdminQueueInfo_v2: *const fn(
            self: *const IMSMQMessage4,
            pqinfoAdmin: ?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReceivedAuthenticationLevel: *const fn(
            self: *const IMSMQMessage4,
            psReceivedAuthenticationLevel: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResponseQueueInfo: *const fn(
            self: *const IMSMQMessage4,
            ppqinfoResponse: ?*?*IMSMQQueueInfo4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_ResponseQueueInfo: *const fn(
            self: *const IMSMQMessage4,
            pqinfoResponse: ?*IMSMQQueueInfo4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AdminQueueInfo: *const fn(
            self: *const IMSMQMessage4,
            ppqinfoAdmin: ?*?*IMSMQQueueInfo4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_AdminQueueInfo: *const fn(
            self: *const IMSMQMessage4,
            pqinfoAdmin: ?*IMSMQQueueInfo4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResponseDestination: *const fn(
            self: *const IMSMQMessage4,
            ppdestResponse: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_ResponseDestination: *const fn(
            self: *const IMSMQMessage4,
            pdestResponse: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Destination: *const fn(
            self: *const IMSMQMessage4,
            ppdestDestination: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LookupId: *const fn(
            self: *const IMSMQMessage4,
            pvarLookupId: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsAuthenticated2: *const fn(
            self: *const IMSMQMessage4,
            pisAuthenticated: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsFirstInTransaction2: *const fn(
            self: *const IMSMQMessage4,
            pisFirstInXact: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsLastInTransaction2: *const fn(
            self: *const IMSMQMessage4,
            pisLastInXact: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AttachCurrentSecurityContext2: *const fn(
            self: *const IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SoapEnvelope: *const fn(
            self: *const IMSMQMessage4,
            pbstrSoapEnvelope: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CompoundMessage: *const fn(
            self: *const IMSMQMessage4,
            pvarCompoundMessage: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SoapHeader: *const fn(
            self: *const IMSMQMessage4,
            bstrSoapHeader: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SoapBody: *const fn(
            self: *const IMSMQMessage4,
            bstrSoapBody: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Class(self: *const IMSMQMessage4, plClass: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Class(self, plClass);
    }
    pub fn get_PrivLevel(self: *const IMSMQMessage4, plPrivLevel: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_PrivLevel(self, plPrivLevel);
    }
    pub fn put_PrivLevel(self: *const IMSMQMessage4, lPrivLevel: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_PrivLevel(self, lPrivLevel);
    }
    pub fn get_AuthLevel(self: *const IMSMQMessage4, plAuthLevel: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_AuthLevel(self, plAuthLevel);
    }
    pub fn put_AuthLevel(self: *const IMSMQMessage4, lAuthLevel: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_AuthLevel(self, lAuthLevel);
    }
    pub fn get_IsAuthenticated(self: *const IMSMQMessage4, pisAuthenticated: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsAuthenticated(self, pisAuthenticated);
    }
    pub fn get_Delivery(self: *const IMSMQMessage4, plDelivery: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Delivery(self, plDelivery);
    }
    pub fn put_Delivery(self: *const IMSMQMessage4, lDelivery: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Delivery(self, lDelivery);
    }
    pub fn get_Trace(self: *const IMSMQMessage4, plTrace: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Trace(self, plTrace);
    }
    pub fn put_Trace(self: *const IMSMQMessage4, lTrace: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Trace(self, lTrace);
    }
    pub fn get_Priority(self: *const IMSMQMessage4, plPriority: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Priority(self, plPriority);
    }
    pub fn put_Priority(self: *const IMSMQMessage4, lPriority: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Priority(self, lPriority);
    }
    pub fn get_Journal(self: *const IMSMQMessage4, plJournal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Journal(self, plJournal);
    }
    pub fn put_Journal(self: *const IMSMQMessage4, lJournal: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Journal(self, lJournal);
    }
    pub fn get_ResponseQueueInfo_v1(self: *const IMSMQMessage4, ppqinfoResponse: ?*?*IMSMQQueueInfo) callconv(.Inline) HRESULT {
        return self.vtable.get_ResponseQueueInfo_v1(self, ppqinfoResponse);
    }
    pub fn putref_ResponseQueueInfo_v1(self: *const IMSMQMessage4, pqinfoResponse: ?*IMSMQQueueInfo) callconv(.Inline) HRESULT {
        return self.vtable.putref_ResponseQueueInfo_v1(self, pqinfoResponse);
    }
    pub fn get_AppSpecific(self: *const IMSMQMessage4, plAppSpecific: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_AppSpecific(self, plAppSpecific);
    }
    pub fn put_AppSpecific(self: *const IMSMQMessage4, lAppSpecific: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_AppSpecific(self, lAppSpecific);
    }
    pub fn get_SourceMachineGuid(self: *const IMSMQMessage4, pbstrGuidSrcMachine: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_SourceMachineGuid(self, pbstrGuidSrcMachine);
    }
    pub fn get_BodyLength(self: *const IMSMQMessage4, pcbBody: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_BodyLength(self, pcbBody);
    }
    pub fn get_Body(self: *const IMSMQMessage4, pvarBody: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Body(self, pvarBody);
    }
    pub fn put_Body(self: *const IMSMQMessage4, varBody: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_Body(self, varBody);
    }
    pub fn get_AdminQueueInfo_v1(self: *const IMSMQMessage4, ppqinfoAdmin: ?*?*IMSMQQueueInfo) callconv(.Inline) HRESULT {
        return self.vtable.get_AdminQueueInfo_v1(self, ppqinfoAdmin);
    }
    pub fn putref_AdminQueueInfo_v1(self: *const IMSMQMessage4, pqinfoAdmin: ?*IMSMQQueueInfo) callconv(.Inline) HRESULT {
        return self.vtable.putref_AdminQueueInfo_v1(self, pqinfoAdmin);
    }
    pub fn get_Id(self: *const IMSMQMessage4, pvarMsgId: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Id(self, pvarMsgId);
    }
    pub fn get_CorrelationId(self: *const IMSMQMessage4, pvarMsgId: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_CorrelationId(self, pvarMsgId);
    }
    pub fn put_CorrelationId(self: *const IMSMQMessage4, varMsgId: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_CorrelationId(self, varMsgId);
    }
    pub fn get_Ack(self: *const IMSMQMessage4, plAck: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Ack(self, plAck);
    }
    pub fn put_Ack(self: *const IMSMQMessage4, lAck: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Ack(self, lAck);
    }
    pub fn get_Label(self: *const IMSMQMessage4, pbstrLabel: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Label(self, pbstrLabel);
    }
    pub fn put_Label(self: *const IMSMQMessage4, bstrLabel: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Label(self, bstrLabel);
    }
    pub fn get_MaxTimeToReachQueue(self: *const IMSMQMessage4, plMaxTimeToReachQueue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_MaxTimeToReachQueue(self, plMaxTimeToReachQueue);
    }
    pub fn put_MaxTimeToReachQueue(self: *const IMSMQMessage4, lMaxTimeToReachQueue: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_MaxTimeToReachQueue(self, lMaxTimeToReachQueue);
    }
    pub fn get_MaxTimeToReceive(self: *const IMSMQMessage4, plMaxTimeToReceive: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_MaxTimeToReceive(self, plMaxTimeToReceive);
    }
    pub fn put_MaxTimeToReceive(self: *const IMSMQMessage4, lMaxTimeToReceive: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_MaxTimeToReceive(self, lMaxTimeToReceive);
    }
    pub fn get_HashAlgorithm(self: *const IMSMQMessage4, plHashAlg: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_HashAlgorithm(self, plHashAlg);
    }
    pub fn put_HashAlgorithm(self: *const IMSMQMessage4, lHashAlg: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_HashAlgorithm(self, lHashAlg);
    }
    pub fn get_EncryptAlgorithm(self: *const IMSMQMessage4, plEncryptAlg: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_EncryptAlgorithm(self, plEncryptAlg);
    }
    pub fn put_EncryptAlgorithm(self: *const IMSMQMessage4, lEncryptAlg: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_EncryptAlgorithm(self, lEncryptAlg);
    }
    pub fn get_SentTime(self: *const IMSMQMessage4, pvarSentTime: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_SentTime(self, pvarSentTime);
    }
    pub fn get_ArrivedTime(self: *const IMSMQMessage4, plArrivedTime: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_ArrivedTime(self, plArrivedTime);
    }
    pub fn get_DestinationQueueInfo(self: *const IMSMQMessage4, ppqinfoDest: ?*?*IMSMQQueueInfo4) callconv(.Inline) HRESULT {
        return self.vtable.get_DestinationQueueInfo(self, ppqinfoDest);
    }
    pub fn get_SenderCertificate(self: *const IMSMQMessage4, pvarSenderCert: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_SenderCertificate(self, pvarSenderCert);
    }
    pub fn put_SenderCertificate(self: *const IMSMQMessage4, varSenderCert: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_SenderCertificate(self, varSenderCert);
    }
    pub fn get_SenderId(self: *const IMSMQMessage4, pvarSenderId: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_SenderId(self, pvarSenderId);
    }
    pub fn get_SenderIdType(self: *const IMSMQMessage4, plSenderIdType: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_SenderIdType(self, plSenderIdType);
    }
    pub fn put_SenderIdType(self: *const IMSMQMessage4, lSenderIdType: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_SenderIdType(self, lSenderIdType);
    }
    pub fn Send(self: *const IMSMQMessage4, DestinationQueue: ?*IDispatch, Transaction: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.Send(self, DestinationQueue, Transaction);
    }
    pub fn AttachCurrentSecurityContext(self: *const IMSMQMessage4) callconv(.Inline) HRESULT {
        return self.vtable.AttachCurrentSecurityContext(self);
    }
    pub fn get_SenderVersion(self: *const IMSMQMessage4, plSenderVersion: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_SenderVersion(self, plSenderVersion);
    }
    pub fn get_Extension(self: *const IMSMQMessage4, pvarExtension: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Extension(self, pvarExtension);
    }
    pub fn put_Extension(self: *const IMSMQMessage4, varExtension: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_Extension(self, varExtension);
    }
    pub fn get_ConnectorTypeGuid(self: *const IMSMQMessage4, pbstrGuidConnectorType: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ConnectorTypeGuid(self, pbstrGuidConnectorType);
    }
    pub fn put_ConnectorTypeGuid(self: *const IMSMQMessage4, bstrGuidConnectorType: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ConnectorTypeGuid(self, bstrGuidConnectorType);
    }
    pub fn get_TransactionStatusQueueInfo(self: *const IMSMQMessage4, ppqinfoXactStatus: ?*?*IMSMQQueueInfo4) callconv(.Inline) HRESULT {
        return self.vtable.get_TransactionStatusQueueInfo(self, ppqinfoXactStatus);
    }
    pub fn get_DestinationSymmetricKey(self: *const IMSMQMessage4, pvarDestSymmKey: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_DestinationSymmetricKey(self, pvarDestSymmKey);
    }
    pub fn put_DestinationSymmetricKey(self: *const IMSMQMessage4, varDestSymmKey: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_DestinationSymmetricKey(self, varDestSymmKey);
    }
    pub fn get_Signature(self: *const IMSMQMessage4, pvarSignature: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Signature(self, pvarSignature);
    }
    pub fn put_Signature(self: *const IMSMQMessage4, varSignature: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_Signature(self, varSignature);
    }
    pub fn get_AuthenticationProviderType(self: *const IMSMQMessage4, plAuthProvType: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_AuthenticationProviderType(self, plAuthProvType);
    }
    pub fn put_AuthenticationProviderType(self: *const IMSMQMessage4, lAuthProvType: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_AuthenticationProviderType(self, lAuthProvType);
    }
    pub fn get_AuthenticationProviderName(self: *const IMSMQMessage4, pbstrAuthProvName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_AuthenticationProviderName(self, pbstrAuthProvName);
    }
    pub fn put_AuthenticationProviderName(self: *const IMSMQMessage4, bstrAuthProvName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_AuthenticationProviderName(self, bstrAuthProvName);
    }
    pub fn put_SenderId(self: *const IMSMQMessage4, varSenderId: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_SenderId(self, varSenderId);
    }
    pub fn get_MsgClass(self: *const IMSMQMessage4, plMsgClass: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_MsgClass(self, plMsgClass);
    }
    pub fn put_MsgClass(self: *const IMSMQMessage4, lMsgClass: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_MsgClass(self, lMsgClass);
    }
    pub fn get_Properties(self: *const IMSMQMessage4, ppcolProperties: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Properties(self, ppcolProperties);
    }
    pub fn get_TransactionId(self: *const IMSMQMessage4, pvarXactId: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_TransactionId(self, pvarXactId);
    }
    pub fn get_IsFirstInTransaction(self: *const IMSMQMessage4, pisFirstInXact: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsFirstInTransaction(self, pisFirstInXact);
    }
    pub fn get_IsLastInTransaction(self: *const IMSMQMessage4, pisLastInXact: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsLastInTransaction(self, pisLastInXact);
    }
    pub fn get_ResponseQueueInfo_v2(self: *const IMSMQMessage4, ppqinfoResponse: ?*?*IMSMQQueueInfo2) callconv(.Inline) HRESULT {
        return self.vtable.get_ResponseQueueInfo_v2(self, ppqinfoResponse);
    }
    pub fn putref_ResponseQueueInfo_v2(self: *const IMSMQMessage4, pqinfoResponse: ?*IMSMQQueueInfo2) callconv(.Inline) HRESULT {
        return self.vtable.putref_ResponseQueueInfo_v2(self, pqinfoResponse);
    }
    pub fn get_AdminQueueInfo_v2(self: *const IMSMQMessage4, ppqinfoAdmin: ?*?*IMSMQQueueInfo2) callconv(.Inline) HRESULT {
        return self.vtable.get_AdminQueueInfo_v2(self, ppqinfoAdmin);
    }
    pub fn putref_AdminQueueInfo_v2(self: *const IMSMQMessage4, pqinfoAdmin: ?*IMSMQQueueInfo2) callconv(.Inline) HRESULT {
        return self.vtable.putref_AdminQueueInfo_v2(self, pqinfoAdmin);
    }
    pub fn get_ReceivedAuthenticationLevel(self: *const IMSMQMessage4, psReceivedAuthenticationLevel: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_ReceivedAuthenticationLevel(self, psReceivedAuthenticationLevel);
    }
    pub fn get_ResponseQueueInfo(self: *const IMSMQMessage4, ppqinfoResponse: ?*?*IMSMQQueueInfo4) callconv(.Inline) HRESULT {
        return self.vtable.get_ResponseQueueInfo(self, ppqinfoResponse);
    }
    pub fn putref_ResponseQueueInfo(self: *const IMSMQMessage4, pqinfoResponse: ?*IMSMQQueueInfo4) callconv(.Inline) HRESULT {
        return self.vtable.putref_ResponseQueueInfo(self, pqinfoResponse);
    }
    pub fn get_AdminQueueInfo(self: *const IMSMQMessage4, ppqinfoAdmin: ?*?*IMSMQQueueInfo4) callconv(.Inline) HRESULT {
        return self.vtable.get_AdminQueueInfo(self, ppqinfoAdmin);
    }
    pub fn putref_AdminQueueInfo(self: *const IMSMQMessage4, pqinfoAdmin: ?*IMSMQQueueInfo4) callconv(.Inline) HRESULT {
        return self.vtable.putref_AdminQueueInfo(self, pqinfoAdmin);
    }
    pub fn get_ResponseDestination(self: *const IMSMQMessage4, ppdestResponse: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_ResponseDestination(self, ppdestResponse);
    }
    pub fn putref_ResponseDestination(self: *const IMSMQMessage4, pdestResponse: ?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.putref_ResponseDestination(self, pdestResponse);
    }
    pub fn get_Destination(self: *const IMSMQMessage4, ppdestDestination: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Destination(self, ppdestDestination);
    }
    pub fn get_LookupId(self: *const IMSMQMessage4, pvarLookupId: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_LookupId(self, pvarLookupId);
    }
    pub fn get_IsAuthenticated2(self: *const IMSMQMessage4, pisAuthenticated: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsAuthenticated2(self, pisAuthenticated);
    }
    pub fn get_IsFirstInTransaction2(self: *const IMSMQMessage4, pisFirstInXact: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsFirstInTransaction2(self, pisFirstInXact);
    }
    pub fn get_IsLastInTransaction2(self: *const IMSMQMessage4, pisLastInXact: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsLastInTransaction2(self, pisLastInXact);
    }
    pub fn AttachCurrentSecurityContext2(self: *const IMSMQMessage4) callconv(.Inline) HRESULT {
        return self.vtable.AttachCurrentSecurityContext2(self);
    }
    pub fn get_SoapEnvelope(self: *const IMSMQMessage4, pbstrSoapEnvelope: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_SoapEnvelope(self, pbstrSoapEnvelope);
    }
    pub fn get_CompoundMessage(self: *const IMSMQMessage4, pvarCompoundMessage: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_CompoundMessage(self, pvarCompoundMessage);
    }
    pub fn put_SoapHeader(self: *const IMSMQMessage4, bstrSoapHeader: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_SoapHeader(self, bstrSoapHeader);
    }
    pub fn put_SoapBody(self: *const IMSMQMessage4, bstrSoapBody: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_SoapBody(self, bstrSoapBody);
    }
};

const IID_IMSMQPrivateEvent_Value = Guid.initString("d7ab3341-c9d3-11d1-bb47-0080c7c5a2c0");
pub const IID_IMSMQPrivateEvent = &IID_IMSMQPrivateEvent_Value;
pub const IMSMQPrivateEvent = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Hwnd: *const fn(
            self: *const IMSMQPrivateEvent,
            phwnd: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FireArrivedEvent: *const fn(
            self: *const IMSMQPrivateEvent,
            pq: ?*IMSMQQueue,
            msgcursor: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FireArrivedErrorEvent: *const fn(
            self: *const IMSMQPrivateEvent,
            pq: ?*IMSMQQueue,
            hrStatus: HRESULT,
            msgcursor: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Hwnd(self: *const IMSMQPrivateEvent, phwnd: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Hwnd(self, phwnd);
    }
    pub fn FireArrivedEvent(self: *const IMSMQPrivateEvent, pq: ?*IMSMQQueue, msgcursor: i32) callconv(.Inline) HRESULT {
        return self.vtable.FireArrivedEvent(self, pq, msgcursor);
    }
    pub fn FireArrivedErrorEvent(self: *const IMSMQPrivateEvent, pq: ?*IMSMQQueue, hrStatus: HRESULT, msgcursor: i32) callconv(.Inline) HRESULT {
        return self.vtable.FireArrivedErrorEvent(self, pq, hrStatus, msgcursor);
    }
};

const IID__DMSMQEventEvents_Value = Guid.initString("d7d6e078-dccd-11d0-aa4b-0060970debae");
pub const IID__DMSMQEventEvents = &IID__DMSMQEventEvents_Value;
pub const _DMSMQEventEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IMSMQTransaction2_Value = Guid.initString("2ce0c5b0-6e67-11d2-b0e6-00e02c074f6b");
pub const IID_IMSMQTransaction2 = &IID_IMSMQTransaction2_Value;
pub const IMSMQTransaction2 = extern union {
    pub const VTable = extern struct {
        base: IMSMQTransaction.VTable,
        InitNew: *const fn(
            self: *const IMSMQTransaction2,
            varTransaction: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn(
            self: *const IMSMQTransaction2,
            ppcolProperties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IMSMQTransaction: IMSMQTransaction,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitNew(self: *const IMSMQTransaction2, varTransaction: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.InitNew(self, varTransaction);
    }
    pub fn get_Properties(self: *const IMSMQTransaction2, ppcolProperties: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Properties(self, ppcolProperties);
    }
};

const IID_IMSMQTransaction3_Value = Guid.initString("eba96b13-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQTransaction3 = &IID_IMSMQTransaction3_Value;
pub const IMSMQTransaction3 = extern union {
    pub const VTable = extern struct {
        base: IMSMQTransaction2.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ITransaction: *const fn(
            self: *const IMSMQTransaction3,
            pvarITransaction: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IMSMQTransaction2: IMSMQTransaction2,
    IMSMQTransaction: IMSMQTransaction,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ITransaction(self: *const IMSMQTransaction3, pvarITransaction: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_ITransaction(self, pvarITransaction);
    }
};

const IID_IMSMQCoordinatedTransactionDispenser2_Value = Guid.initString("eba96b10-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQCoordinatedTransactionDispenser2 = &IID_IMSMQCoordinatedTransactionDispenser2_Value;
pub const IMSMQCoordinatedTransactionDispenser2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        BeginTransaction: *const fn(
            self: *const IMSMQCoordinatedTransactionDispenser2,
            ptransaction: ?*?*IMSMQTransaction2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn(
            self: *const IMSMQCoordinatedTransactionDispenser2,
            ppcolProperties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn BeginTransaction(self: *const IMSMQCoordinatedTransactionDispenser2, ptransaction: ?*?*IMSMQTransaction2) callconv(.Inline) HRESULT {
        return self.vtable.BeginTransaction(self, ptransaction);
    }
    pub fn get_Properties(self: *const IMSMQCoordinatedTransactionDispenser2, ppcolProperties: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Properties(self, ppcolProperties);
    }
};

const IID_IMSMQCoordinatedTransactionDispenser3_Value = Guid.initString("eba96b14-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQCoordinatedTransactionDispenser3 = &IID_IMSMQCoordinatedTransactionDispenser3_Value;
pub const IMSMQCoordinatedTransactionDispenser3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        BeginTransaction: *const fn(
            self: *const IMSMQCoordinatedTransactionDispenser3,
            ptransaction: ?*?*IMSMQTransaction3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn(
            self: *const IMSMQCoordinatedTransactionDispenser3,
            ppcolProperties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn BeginTransaction(self: *const IMSMQCoordinatedTransactionDispenser3, ptransaction: ?*?*IMSMQTransaction3) callconv(.Inline) HRESULT {
        return self.vtable.BeginTransaction(self, ptransaction);
    }
    pub fn get_Properties(self: *const IMSMQCoordinatedTransactionDispenser3, ppcolProperties: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Properties(self, ppcolProperties);
    }
};

const IID_IMSMQTransactionDispenser2_Value = Guid.initString("eba96b11-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQTransactionDispenser2 = &IID_IMSMQTransactionDispenser2_Value;
pub const IMSMQTransactionDispenser2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        BeginTransaction: *const fn(
            self: *const IMSMQTransactionDispenser2,
            ptransaction: ?*?*IMSMQTransaction2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn(
            self: *const IMSMQTransactionDispenser2,
            ppcolProperties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn BeginTransaction(self: *const IMSMQTransactionDispenser2, ptransaction: ?*?*IMSMQTransaction2) callconv(.Inline) HRESULT {
        return self.vtable.BeginTransaction(self, ptransaction);
    }
    pub fn get_Properties(self: *const IMSMQTransactionDispenser2, ppcolProperties: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Properties(self, ppcolProperties);
    }
};

const IID_IMSMQTransactionDispenser3_Value = Guid.initString("eba96b15-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQTransactionDispenser3 = &IID_IMSMQTransactionDispenser3_Value;
pub const IMSMQTransactionDispenser3 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        BeginTransaction: *const fn(
            self: *const IMSMQTransactionDispenser3,
            ptransaction: ?*?*IMSMQTransaction3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn(
            self: *const IMSMQTransactionDispenser3,
            ppcolProperties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn BeginTransaction(self: *const IMSMQTransactionDispenser3, ptransaction: ?*?*IMSMQTransaction3) callconv(.Inline) HRESULT {
        return self.vtable.BeginTransaction(self, ptransaction);
    }
    pub fn get_Properties(self: *const IMSMQTransactionDispenser3, ppcolProperties: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Properties(self, ppcolProperties);
    }
};

const IID_IMSMQApplication_Value = Guid.initString("d7d6e085-dccd-11d0-aa4b-0060970debae");
pub const IID_IMSMQApplication = &IID_IMSMQApplication_Value;
pub const IMSMQApplication = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        MachineIdOfMachineName: *const fn(
            self: *const IMSMQApplication,
            MachineName: ?BSTR,
            pbstrGuid: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn MachineIdOfMachineName(self: *const IMSMQApplication, MachineName: ?BSTR, pbstrGuid: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.MachineIdOfMachineName(self, MachineName, pbstrGuid);
    }
};

const IID_IMSMQApplication2_Value = Guid.initString("12a30900-7300-11d2-b0e6-00e02c074f6b");
pub const IID_IMSMQApplication2 = &IID_IMSMQApplication2_Value;
pub const IMSMQApplication2 = extern union {
    pub const VTable = extern struct {
        base: IMSMQApplication.VTable,
        RegisterCertificate: *const fn(
            self: *const IMSMQApplication2,
            Flags: ?*VARIANT,
            ExternalCertificate: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MachineNameOfMachineId: *const fn(
            self: *const IMSMQApplication2,
            bstrGuid: ?BSTR,
            pbstrMachineName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MSMQVersionMajor: *const fn(
            self: *const IMSMQApplication2,
            psMSMQVersionMajor: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MSMQVersionMinor: *const fn(
            self: *const IMSMQApplication2,
            psMSMQVersionMinor: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MSMQVersionBuild: *const fn(
            self: *const IMSMQApplication2,
            psMSMQVersionBuild: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsDsEnabled: *const fn(
            self: *const IMSMQApplication2,
            pfIsDsEnabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn(
            self: *const IMSMQApplication2,
            ppcolProperties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IMSMQApplication: IMSMQApplication,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn RegisterCertificate(self: *const IMSMQApplication2, Flags: ?*VARIANT, ExternalCertificate: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.RegisterCertificate(self, Flags, ExternalCertificate);
    }
    pub fn MachineNameOfMachineId(self: *const IMSMQApplication2, bstrGuid: ?BSTR, pbstrMachineName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.MachineNameOfMachineId(self, bstrGuid, pbstrMachineName);
    }
    pub fn get_MSMQVersionMajor(self: *const IMSMQApplication2, psMSMQVersionMajor: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_MSMQVersionMajor(self, psMSMQVersionMajor);
    }
    pub fn get_MSMQVersionMinor(self: *const IMSMQApplication2, psMSMQVersionMinor: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_MSMQVersionMinor(self, psMSMQVersionMinor);
    }
    pub fn get_MSMQVersionBuild(self: *const IMSMQApplication2, psMSMQVersionBuild: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_MSMQVersionBuild(self, psMSMQVersionBuild);
    }
    pub fn get_IsDsEnabled(self: *const IMSMQApplication2, pfIsDsEnabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsDsEnabled(self, pfIsDsEnabled);
    }
    pub fn get_Properties(self: *const IMSMQApplication2, ppcolProperties: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Properties(self, ppcolProperties);
    }
};

const IID_IMSMQApplication3_Value = Guid.initString("eba96b1f-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQApplication3 = &IID_IMSMQApplication3_Value;
pub const IMSMQApplication3 = extern union {
    pub const VTable = extern struct {
        base: IMSMQApplication2.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ActiveQueues: *const fn(
            self: *const IMSMQApplication3,
            pvActiveQueues: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivateQueues: *const fn(
            self: *const IMSMQApplication3,
            pvPrivateQueues: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DirectoryServiceServer: *const fn(
            self: *const IMSMQApplication3,
            pbstrDirectoryServiceServer: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsConnected: *const fn(
            self: *const IMSMQApplication3,
            pfIsConnected: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BytesInAllQueues: *const fn(
            self: *const IMSMQApplication3,
            pvBytesInAllQueues: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Machine: *const fn(
            self: *const IMSMQApplication3,
            bstrMachine: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Machine: *const fn(
            self: *const IMSMQApplication3,
            pbstrMachine: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Connect: *const fn(
            self: *const IMSMQApplication3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: *const fn(
            self: *const IMSMQApplication3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Tidy: *const fn(
            self: *const IMSMQApplication3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IMSMQApplication2: IMSMQApplication2,
    IMSMQApplication: IMSMQApplication,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ActiveQueues(self: *const IMSMQApplication3, pvActiveQueues: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_ActiveQueues(self, pvActiveQueues);
    }
    pub fn get_PrivateQueues(self: *const IMSMQApplication3, pvPrivateQueues: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_PrivateQueues(self, pvPrivateQueues);
    }
    pub fn get_DirectoryServiceServer(self: *const IMSMQApplication3, pbstrDirectoryServiceServer: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_DirectoryServiceServer(self, pbstrDirectoryServiceServer);
    }
    pub fn get_IsConnected(self: *const IMSMQApplication3, pfIsConnected: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsConnected(self, pfIsConnected);
    }
    pub fn get_BytesInAllQueues(self: *const IMSMQApplication3, pvBytesInAllQueues: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_BytesInAllQueues(self, pvBytesInAllQueues);
    }
    pub fn put_Machine(self: *const IMSMQApplication3, bstrMachine: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Machine(self, bstrMachine);
    }
    pub fn get_Machine(self: *const IMSMQApplication3, pbstrMachine: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Machine(self, pbstrMachine);
    }
    pub fn Connect(self: *const IMSMQApplication3) callconv(.Inline) HRESULT {
        return self.vtable.Connect(self);
    }
    pub fn Disconnect(self: *const IMSMQApplication3) callconv(.Inline) HRESULT {
        return self.vtable.Disconnect(self);
    }
    pub fn Tidy(self: *const IMSMQApplication3) callconv(.Inline) HRESULT {
        return self.vtable.Tidy(self);
    }
};

const IID_IMSMQDestination_Value = Guid.initString("eba96b16-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQDestination = &IID_IMSMQDestination_Value;
pub const IMSMQDestination = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Open: *const fn(
            self: *const IMSMQDestination,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn(
            self: *const IMSMQDestination,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsOpen: *const fn(
            self: *const IMSMQDestination,
            pfIsOpen: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IADs: *const fn(
            self: *const IMSMQDestination,
            ppIADs: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_IADs: *const fn(
            self: *const IMSMQDestination,
            pIADs: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ADsPath: *const fn(
            self: *const IMSMQDestination,
            pbstrADsPath: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ADsPath: *const fn(
            self: *const IMSMQDestination,
            bstrADsPath: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PathName: *const fn(
            self: *const IMSMQDestination,
            pbstrPathName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PathName: *const fn(
            self: *const IMSMQDestination,
            bstrPathName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FormatName: *const fn(
            self: *const IMSMQDestination,
            pbstrFormatName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FormatName: *const fn(
            self: *const IMSMQDestination,
            bstrFormatName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Destinations: *const fn(
            self: *const IMSMQDestination,
            ppDestinations: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Destinations: *const fn(
            self: *const IMSMQDestination,
            pDestinations: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn(
            self: *const IMSMQDestination,
            ppcolProperties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Open(self: *const IMSMQDestination) callconv(.Inline) HRESULT {
        return self.vtable.Open(self);
    }
    pub fn Close(self: *const IMSMQDestination) callconv(.Inline) HRESULT {
        return self.vtable.Close(self);
    }
    pub fn get_IsOpen(self: *const IMSMQDestination, pfIsOpen: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsOpen(self, pfIsOpen);
    }
    pub fn get_IADs(self: *const IMSMQDestination, ppIADs: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_IADs(self, ppIADs);
    }
    pub fn putref_IADs(self: *const IMSMQDestination, pIADs: ?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.putref_IADs(self, pIADs);
    }
    pub fn get_ADsPath(self: *const IMSMQDestination, pbstrADsPath: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ADsPath(self, pbstrADsPath);
    }
    pub fn put_ADsPath(self: *const IMSMQDestination, bstrADsPath: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ADsPath(self, bstrADsPath);
    }
    pub fn get_PathName(self: *const IMSMQDestination, pbstrPathName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_PathName(self, pbstrPathName);
    }
    pub fn put_PathName(self: *const IMSMQDestination, bstrPathName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_PathName(self, bstrPathName);
    }
    pub fn get_FormatName(self: *const IMSMQDestination, pbstrFormatName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_FormatName(self, pbstrFormatName);
    }
    pub fn put_FormatName(self: *const IMSMQDestination, bstrFormatName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_FormatName(self, bstrFormatName);
    }
    pub fn get_Destinations(self: *const IMSMQDestination, ppDestinations: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Destinations(self, ppDestinations);
    }
    pub fn putref_Destinations(self: *const IMSMQDestination, pDestinations: ?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.putref_Destinations(self, pDestinations);
    }
    pub fn get_Properties(self: *const IMSMQDestination, ppcolProperties: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Properties(self, ppcolProperties);
    }
};

const IID_IMSMQPrivateDestination_Value = Guid.initString("eba96b17-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQPrivateDestination = &IID_IMSMQPrivateDestination_Value;
pub const IMSMQPrivateDestination = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Handle: *const fn(
            self: *const IMSMQPrivateDestination,
            pvarHandle: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Handle: *const fn(
            self: *const IMSMQPrivateDestination,
            varHandle: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Handle(self: *const IMSMQPrivateDestination, pvarHandle: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Handle(self, pvarHandle);
    }
    pub fn put_Handle(self: *const IMSMQPrivateDestination, varHandle: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_Handle(self, varHandle);
    }
};

const IID_IMSMQCollection_Value = Guid.initString("0188ac2f-ecb3-4173-9779-635ca2039c72");
pub const IID_IMSMQCollection = &IID_IMSMQCollection_Value;
pub const IMSMQCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Item: *const fn(
            self: *const IMSMQCollection,
            Index: ?*VARIANT,
            pvarRet: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IMSMQCollection,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _NewEnum: *const fn(
            self: *const IMSMQCollection,
            ppunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Item(self: *const IMSMQCollection, Index: ?*VARIANT, pvarRet: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.Item(self, Index, pvarRet);
    }
    pub fn get_Count(self: *const IMSMQCollection, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pCount);
    }
    pub fn _NewEnum(self: *const IMSMQCollection, ppunk: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable._NewEnum(self, ppunk);
    }
};

const IID_IMSMQManagement_Value = Guid.initString("be5f0241-e489-4957-8cc4-a452fcf3e23e");
pub const IID_IMSMQManagement = &IID_IMSMQManagement_Value;
pub const IMSMQManagement = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Init: *const fn(
            self: *const IMSMQManagement,
            Machine: ?*VARIANT,
            Pathname: ?*VARIANT,
            FormatName: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FormatName: *const fn(
            self: *const IMSMQManagement,
            pbstrFormatName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Machine: *const fn(
            self: *const IMSMQManagement,
            pbstrMachine: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MessageCount: *const fn(
            self: *const IMSMQManagement,
            plMessageCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ForeignStatus: *const fn(
            self: *const IMSMQManagement,
            plForeignStatus: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QueueType: *const fn(
            self: *const IMSMQManagement,
            plQueueType: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsLocal: *const fn(
            self: *const IMSMQManagement,
            pfIsLocal: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransactionalStatus: *const fn(
            self: *const IMSMQManagement,
            plTransactionalStatus: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BytesInQueue: *const fn(
            self: *const IMSMQManagement,
            pvBytesInQueue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Init(self: *const IMSMQManagement, Machine: ?*VARIANT, Pathname: ?*VARIANT, FormatName: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.Init(self, Machine, Pathname, FormatName);
    }
    pub fn get_FormatName(self: *const IMSMQManagement, pbstrFormatName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_FormatName(self, pbstrFormatName);
    }
    pub fn get_Machine(self: *const IMSMQManagement, pbstrMachine: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Machine(self, pbstrMachine);
    }
    pub fn get_MessageCount(self: *const IMSMQManagement, plMessageCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_MessageCount(self, plMessageCount);
    }
    pub fn get_ForeignStatus(self: *const IMSMQManagement, plForeignStatus: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ForeignStatus(self, plForeignStatus);
    }
    pub fn get_QueueType(self: *const IMSMQManagement, plQueueType: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_QueueType(self, plQueueType);
    }
    pub fn get_IsLocal(self: *const IMSMQManagement, pfIsLocal: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsLocal(self, pfIsLocal);
    }
    pub fn get_TransactionalStatus(self: *const IMSMQManagement, plTransactionalStatus: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_TransactionalStatus(self, plTransactionalStatus);
    }
    pub fn get_BytesInQueue(self: *const IMSMQManagement, pvBytesInQueue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_BytesInQueue(self, pvBytesInQueue);
    }
};

const IID_IMSMQOutgoingQueueManagement_Value = Guid.initString("64c478fb-f9b0-4695-8a7f-439ac94326d3");
pub const IID_IMSMQOutgoingQueueManagement = &IID_IMSMQOutgoingQueueManagement_Value;
pub const IMSMQOutgoingQueueManagement = extern union {
    pub const VTable = extern struct {
        base: IMSMQManagement.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn(
            self: *const IMSMQOutgoingQueueManagement,
            plState: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NextHops: *const fn(
            self: *const IMSMQOutgoingQueueManagement,
            pvNextHops: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EodGetSendInfo: *const fn(
            self: *const IMSMQOutgoingQueueManagement,
            ppCollection: ?*?*IMSMQCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: *const fn(
            self: *const IMSMQOutgoingQueueManagement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Pause: *const fn(
            self: *const IMSMQOutgoingQueueManagement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EodResend: *const fn(
            self: *const IMSMQOutgoingQueueManagement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IMSMQManagement: IMSMQManagement,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_State(self: *const IMSMQOutgoingQueueManagement, plState: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_State(self, plState);
    }
    pub fn get_NextHops(self: *const IMSMQOutgoingQueueManagement, pvNextHops: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_NextHops(self, pvNextHops);
    }
    pub fn EodGetSendInfo(self: *const IMSMQOutgoingQueueManagement, ppCollection: ?*?*IMSMQCollection) callconv(.Inline) HRESULT {
        return self.vtable.EodGetSendInfo(self, ppCollection);
    }
    pub fn Resume(self: *const IMSMQOutgoingQueueManagement) callconv(.Inline) HRESULT {
        return self.vtable.Resume(self);
    }
    pub fn Pause(self: *const IMSMQOutgoingQueueManagement) callconv(.Inline) HRESULT {
        return self.vtable.Pause(self);
    }
    pub fn EodResend(self: *const IMSMQOutgoingQueueManagement) callconv(.Inline) HRESULT {
        return self.vtable.EodResend(self);
    }
};

const IID_IMSMQQueueManagement_Value = Guid.initString("7fbe7759-5760-444d-b8a5-5e7ab9a84cce");
pub const IID_IMSMQQueueManagement = &IID_IMSMQQueueManagement_Value;
pub const IMSMQQueueManagement = extern union {
    pub const VTable = extern struct {
        base: IMSMQManagement.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_JournalMessageCount: *const fn(
            self: *const IMSMQQueueManagement,
            plJournalMessageCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BytesInJournal: *const fn(
            self: *const IMSMQQueueManagement,
            pvBytesInJournal: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EodGetReceiveInfo: *const fn(
            self: *const IMSMQQueueManagement,
            pvCollection: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IMSMQManagement: IMSMQManagement,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_JournalMessageCount(self: *const IMSMQQueueManagement, plJournalMessageCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_JournalMessageCount(self, plJournalMessageCount);
    }
    pub fn get_BytesInJournal(self: *const IMSMQQueueManagement, pvBytesInJournal: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_BytesInJournal(self, pvBytesInJournal);
    }
    pub fn EodGetReceiveInfo(self: *const IMSMQQueueManagement, pvCollection: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.EodGetReceiveInfo(self, pvCollection);
    }
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (6)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BSTR = @import("../foundation.zig").BSTR;
const HRESULT = @import("../foundation.zig").HRESULT;
const IDispatch = @import("../system/com.zig").IDispatch;
const IUnknown = @import("../system/com.zig").IUnknown;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
