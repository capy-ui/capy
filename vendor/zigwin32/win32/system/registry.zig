//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (913)
//--------------------------------------------------------------------------------
pub const HKEY_CLASSES_ROOT = @import("../zig.zig").typedConst(HKEY, @as(i32, -2147483648));
pub const HKEY_CURRENT_USER = @import("../zig.zig").typedConst(HKEY, @as(i32, -2147483647));
pub const HKEY_LOCAL_MACHINE = @import("../zig.zig").typedConst(HKEY, @as(i32, -2147483646));
pub const HKEY_USERS = @import("../zig.zig").typedConst(HKEY, @as(i32, -2147483645));
pub const HKEY_PERFORMANCE_DATA = @import("../zig.zig").typedConst(HKEY, @as(i32, -2147483644));
pub const HKEY_PERFORMANCE_TEXT = @import("../zig.zig").typedConst(HKEY, @as(i32, -2147483568));
pub const HKEY_PERFORMANCE_NLSTEXT = @import("../zig.zig").typedConst(HKEY, @as(i32, -2147483552));
pub const HKEY_CURRENT_CONFIG = @import("../zig.zig").typedConst(HKEY, @as(i32, -2147483643));
pub const HKEY_DYN_DATA = @import("../zig.zig").typedConst(HKEY, @as(i32, -2147483642));
pub const HKEY_CURRENT_USER_LOCAL_SETTINGS = @import("../zig.zig").typedConst(HKEY, @as(i32, -2147483641));
pub const RRF_SUBKEY_WOW6464KEY = @as(u32, 65536);
pub const RRF_SUBKEY_WOW6432KEY = @as(u32, 131072);
pub const RRF_WOW64_MASK = @as(u32, 196608);
pub const RRF_NOEXPAND = @as(u32, 268435456);
pub const RRF_ZEROONFAILURE = @as(u32, 536870912);
pub const REG_PROCESS_APPKEY = @as(u32, 1);
pub const REG_USE_CURRENT_SECURITY_CONTEXT = @as(u32, 2);
pub const PROVIDER_KEEPS_VALUE_LENGTH = @as(u32, 1);
pub const REG_MUI_STRING_TRUNCATE = @as(u32, 1);
pub const REG_SECURE_CONNECTION = @as(u32, 1);
pub const REGSTR_KEY_CLASS = "Class";
pub const REGSTR_KEY_CONFIG = "Config";
pub const REGSTR_KEY_ENUM = "Enum";
pub const REGSTR_KEY_ROOTENUM = "Root";
pub const REGSTR_KEY_BIOSENUM = "BIOS";
pub const REGSTR_KEY_ACPIENUM = "ACPI";
pub const REGSTR_KEY_PCMCIAENUM = "PCMCIA";
pub const REGSTR_KEY_PCIENUM = "PCI";
pub const REGSTR_KEY_VPOWERDENUM = "VPOWERD";
pub const REGSTR_KEY_ISAENUM = "ISAPnP";
pub const REGSTR_KEY_EISAENUM = "EISA";
pub const REGSTR_KEY_LOGCONFIG = "LogConfig";
pub const REGSTR_KEY_SYSTEMBOARD = "*PNP0C01";
pub const REGSTR_KEY_APM = "*PNP0C05";
pub const REGSTR_KEY_INIUPDATE = "IniUpdate";
pub const REG_KEY_INSTDEV = "Installed";
pub const REGSTR_KEY_DOSOPTCDROM = "CD-ROM";
pub const REGSTR_KEY_DOSOPTMOUSE = "MOUSE";
pub const REGSTR_KEY_KNOWNDOCKINGSTATES = "Hardware Profiles";
pub const REGSTR_KEY_DEVICEPARAMETERS = "Device Parameters";
pub const REGSTR_KEY_DRIVERPARAMETERS = "Driver Parameters";
pub const REGSTR_DEFAULT_INSTANCE = "0000";
pub const REGSTR_PATH_SETUP = "Software\\Microsoft\\Windows\\CurrentVersion";
pub const REGSTR_PATH_DRIVERSIGN = "Software\\Microsoft\\Driver Signing";
pub const REGSTR_PATH_NONDRIVERSIGN = "Software\\Microsoft\\Non-Driver Signing";
pub const REGSTR_PATH_DRIVERSIGN_POLICY = "Software\\Policies\\Microsoft\\Windows NT\\Driver Signing";
pub const REGSTR_PATH_NONDRIVERSIGN_POLICY = "Software\\Policies\\Microsoft\\Windows NT\\Non-Driver Signing";
pub const REGSTR_PATH_PIFCONVERT = "Software\\Microsoft\\Windows\\CurrentVersion\\PIFConvert";
pub const REGSTR_PATH_MSDOSOPTS = "Software\\Microsoft\\Windows\\CurrentVersion\\MS-DOSOptions";
pub const REGSTR_PATH_NOSUGGMSDOS = "Software\\Microsoft\\Windows\\CurrentVersion\\NoMSDOSWarn";
pub const REGSTR_PATH_NEWDOSBOX = "Software\\Microsoft\\Windows\\CurrentVersion\\MS-DOSSpecialConfig";
pub const REGSTR_PATH_RUNONCE = "Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce";
pub const REGSTR_PATH_RUNONCEEX = "Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx";
pub const REGSTR_PATH_RUN = "Software\\Microsoft\\Windows\\CurrentVersion\\Run";
pub const REGSTR_PATH_RUNSERVICESONCE = "Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce";
pub const REGSTR_PATH_RUNSERVICES = "Software\\Microsoft\\Windows\\CurrentVersion\\RunServices";
pub const REGSTR_PATH_EXPLORER = "Software\\Microsoft\\Windows\\CurrentVersion\\Explorer";
pub const REGSTR_PATH_PROPERTYSYSTEM = "Software\\Microsoft\\Windows\\CurrentVersion\\PropertySystem";
pub const REGSTR_PATH_DETECT = "Software\\Microsoft\\Windows\\CurrentVersion\\Detect";
pub const REGSTR_PATH_APPPATHS = "Software\\Microsoft\\Windows\\CurrentVersion\\App Paths";
pub const REGSTR_PATH_UNINSTALL = "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall";
pub const REGSTR_PATH_REALMODENET = "Software\\Microsoft\\Windows\\CurrentVersion\\Network\\Real Mode Net";
pub const REGSTR_PATH_NETEQUIV = "Software\\Microsoft\\Windows\\CurrentVersion\\Network\\Equivalent";
pub const REGSTR_PATH_CVNETWORK = "Software\\Microsoft\\Windows\\CurrentVersion\\Network";
pub const REGSTR_PATH_WMI_SECURITY = "System\\CurrentControlSet\\Control\\Wmi\\Security";
pub const REGSTR_PATH_RELIABILITY = "Software\\Microsoft\\Windows\\CurrentVersion\\Reliability";
pub const REGSTR_PATH_RELIABILITY_POLICY = "Software\\Policies\\Microsoft\\Windows NT\\Reliability";
pub const REGSTR_PATH_RELIABILITY_POLICY_SHUTDOWNREASONUI = "ShutdownReasonUI";
pub const REGSTR_PATH_RELIABILITY_POLICY_SNAPSHOT = "Snapshot";
pub const REGSTR_PATH_RELIABILITY_POLICY_REPORTSNAPSHOT = "ReportSnapshot";
pub const REGSTR_PATH_REINSTALL = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Reinstall";
pub const REGSTR_PATH_NT_CURRENTVERSION = "Software\\Microsoft\\Windows NT\\CurrentVersion";
pub const REGSTR_PATH_VOLUMECACHE = "Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches";
pub const REGSTR_VAL_DISPLAY = "display";
pub const REGSTR_PATH_IDCONFIGDB = "System\\CurrentControlSet\\Control\\IDConfigDB";
pub const REGSTR_PATH_CRITICALDEVICEDATABASE = "System\\CurrentControlSet\\Control\\CriticalDeviceDatabase";
pub const REGSTR_PATH_CLASS = "System\\CurrentControlSet\\Services\\Class";
pub const REGSTR_PATH_DISPLAYSETTINGS = "Display\\Settings";
pub const REGSTR_PATH_FONTS = "Display\\Fonts";
pub const REGSTR_PATH_ENUM = "Enum";
pub const REGSTR_PATH_ROOT = "Enum\\Root";
pub const REGSTR_PATH_CURRENTCONTROLSET = "System\\CurrentControlSet";
pub const REGSTR_PATH_SYSTEMENUM = "System\\CurrentControlSet\\Enum";
pub const REGSTR_PATH_HWPROFILES = "System\\CurrentControlSet\\Hardware Profiles";
pub const REGSTR_PATH_HWPROFILESCURRENT = "System\\CurrentControlSet\\Hardware Profiles\\Current";
pub const REGSTR_PATH_CLASS_NT = "System\\CurrentControlSet\\Control\\Class";
pub const REGSTR_PATH_PER_HW_ID_STORAGE = "Software\\Microsoft\\Windows NT\\CurrentVersion\\PerHwIdStorage";
pub const REGSTR_PATH_DEVICE_CLASSES = "System\\CurrentControlSet\\Control\\DeviceClasses";
pub const REGSTR_PATH_CODEVICEINSTALLERS = "System\\CurrentControlSet\\Control\\CoDeviceInstallers";
pub const REGSTR_PATH_BUSINFORMATION = "System\\CurrentControlSet\\Control\\PnP\\BusInformation";
pub const REGSTR_PATH_SERVICES = "System\\CurrentControlSet\\Services";
pub const REGSTR_PATH_VXD = "System\\CurrentControlSet\\Services\\VxD";
pub const REGSTR_PATH_IOS = "System\\CurrentControlSet\\Services\\VxD\\IOS";
pub const REGSTR_PATH_VMM = "System\\CurrentControlSet\\Services\\VxD\\VMM";
pub const REGSTR_PATH_VPOWERD = "System\\CurrentControlSet\\Services\\VxD\\VPOWERD";
pub const REGSTR_PATH_VNETSUP = "System\\CurrentControlSet\\Services\\VxD\\VNETSUP";
pub const REGSTR_PATH_NWREDIR = "System\\CurrentControlSet\\Services\\VxD\\NWREDIR";
pub const REGSTR_PATH_NCPSERVER = "System\\CurrentControlSet\\Services\\NcpServer\\Parameters";
pub const REGSTR_PATH_VCOMM = "System\\CurrentControlSet\\Services\\VxD\\VCOMM";
pub const REGSTR_PATH_IOARB = "System\\CurrentControlSet\\Services\\Arbitrators\\IOArb";
pub const REGSTR_PATH_ADDRARB = "System\\CurrentControlSet\\Services\\Arbitrators\\AddrArb";
pub const REGSTR_PATH_DMAARB = "System\\CurrentControlSet\\Services\\Arbitrators\\DMAArb";
pub const REGSTR_PATH_IRQARB = "System\\CurrentControlSet\\Services\\Arbitrators\\IRQArb";
pub const REGSTR_PATH_CODEPAGE = "System\\CurrentControlSet\\Control\\Nls\\Codepage";
pub const REGSTR_PATH_FILESYSTEM = "System\\CurrentControlSet\\Control\\FileSystem";
pub const REGSTR_PATH_FILESYSTEM_NOVOLTRACK = "System\\CurrentControlSet\\Control\\FileSystem\\NoVolTrack";
pub const REGSTR_PATH_CDFS = "System\\CurrentControlSet\\Control\\FileSystem\\CDFS";
pub const REGSTR_PATH_WINBOOT = "System\\CurrentControlSet\\Control\\WinBoot";
pub const REGSTR_PATH_INSTALLEDFILES = "System\\CurrentControlSet\\Control\\InstalledFiles";
pub const REGSTR_PATH_VMM32FILES = "System\\CurrentControlSet\\Control\\VMM32Files";
pub const REGSTR_MAX_VALUE_LENGTH = @as(u32, 256);
pub const REGSTR_KEY_DEVICE_PROPERTIES = "Properties";
pub const REGSTR_VAL_SERVICE = "Service";
pub const REGSTR_VAL_CLASSGUID = "ClassGUID";
pub const REGSTR_VAL_DISABLECOUNT = "DisableCount";
pub const REGSTR_VAL_DOCKSTATE = "DockState";
pub const REGSTR_VAL_DEVICE_INSTANCE = "DeviceInstance";
pub const REGSTR_VAL_SYMBOLIC_LINK = "SymbolicLink";
pub const REGSTR_VAL_DEFAULT = "Default";
pub const REGSTR_VAL_LOWERFILTERS = "LowerFilters";
pub const REGSTR_VAL_UPPERFILTERS = "UpperFilters";
pub const REGSTR_VAL_LOCATION_INFORMATION = "LocationInformation";
pub const REGSTR_VAL_UI_NUMBER = "UINumber";
pub const REGSTR_VAL_UI_NUMBER_DESC_FORMAT = "UINumberDescFormat";
pub const REGSTR_VAL_CAPABILITIES = "Capabilities";
pub const REGSTR_VAL_ADDRESS = "Address";
pub const REGSTR_VAL_DEVICE_TYPE = "DeviceType";
pub const REGSTR_VAL_DEVICE_CHARACTERISTICS = "DeviceCharacteristics";
pub const REGSTR_VAL_DEVICE_SECURITY_DESCRIPTOR = "Security";
pub const REGSTR_VAL_DEVICE_EXCLUSIVE = "Exclusive";
pub const REGSTR_VAL_RESOURCE_PICKER_TAGS = "ResourcePickerTags";
pub const REGSTR_VAL_RESOURCE_PICKER_EXCEPTIONS = "ResourcePickerExceptions";
pub const REGSTR_VAL_CUSTOM_PROPERTY_CACHE_DATE = "CustomPropertyCacheDate";
pub const REGSTR_VAL_CUSTOM_PROPERTY_HW_ID_KEY = "CustomPropertyHwIdKey";
pub const REGSTR_VAL_LAST_UPDATE_TIME = "LastUpdateTime";
pub const REGSTR_VAL_CONTAINERID = "ContainerID";
pub const REGSTR_VAL_EJECT_PRIORITY = "EjectPriority";
pub const REGSTR_KEY_CONTROL = "Control";
pub const REGSTR_VAL_ACTIVESERVICE = "ActiveService";
pub const REGSTR_VAL_LINKED = "Linked";
pub const REGSTR_VAL_PHYSICALDEVICEOBJECT = "PhysicalDeviceObject";
pub const REGSTR_VAL_REMOVAL_POLICY = "RemovalPolicy";
pub const REGSTR_KEY_FILTERS = "Filters";
pub const REGSTR_VAL_LOWER_FILTER_DEFAULT_LEVEL = "LowerFilterDefaultLevel";
pub const REGSTR_VAL_UPPER_FILTER_DEFAULT_LEVEL = "UpperFilterDefaultLevel";
pub const REGSTR_KEY_LOWER_FILTER_LEVEL_DEFAULT = "*Lower";
pub const REGSTR_KEY_UPPER_FILTER_LEVEL_DEFAULT = "*Upper";
pub const REGSTR_VAL_LOWER_FILTER_LEVELS = "LowerFilterLevels";
pub const REGSTR_VAL_UPPER_FILTER_LEVELS = "UpperFilterLevels";
pub const REGSTR_VAL_CURRENT_VERSION = "CurrentVersion";
pub const REGSTR_VAL_CURRENT_BUILD = "CurrentBuildNumber";
pub const REGSTR_VAL_CURRENT_CSDVERSION = "CSDVersion";
pub const REGSTR_VAL_CURRENT_TYPE = "CurrentType";
pub const REGSTR_VAL_BITSPERPIXEL = "BitsPerPixel";
pub const REGSTR_VAL_RESOLUTION = "Resolution";
pub const REGSTR_VAL_DPILOGICALX = "DPILogicalX";
pub const REGSTR_VAL_DPILOGICALY = "DPILogicalY";
pub const REGSTR_VAL_DPIPHYSICALX = "DPIPhysicalX";
pub const REGSTR_VAL_DPIPHYSICALY = "DPIPhysicalY";
pub const REGSTR_VAL_REFRESHRATE = "RefreshRate";
pub const REGSTR_VAL_DISPLAYFLAGS = "DisplayFlags";
pub const REGSTR_PATH_CONTROLPANEL = "Control Panel";
pub const REGSTR_PATH_CONTROLSFOLDER = "Software\\Microsoft\\Windows\\CurrentVersion\\Controls Folder";
pub const REGSTR_VAL_DOSCP = "OEMCP";
pub const REGSTR_VAL_WINCP = "ACP";
pub const REGSTR_VAL_DONTUSEMEM = "DontAllocLastMem";
pub const REGSTR_VAL_SYSTEMROOT = "SystemRoot";
pub const REGSTR_VAL_BOOTCOUNT = "BootCount";
pub const REGSTR_VAL_REALNETSTART = "RealNetStart";
pub const REGSTR_VAL_MEDIA = "MediaPath";
pub const REGSTR_VAL_CONFIG = "ConfigPath";
pub const REGSTR_VAL_DEVICEPATH = "DevicePath";
pub const REGSTR_VAL_SRCPATH = "SourcePath";
pub const REGSTR_VAL_DRIVERCACHEPATH = "DriverCachePath";
pub const REGSTR_VAL_OLDWINDIR = "OldWinDir";
pub const REGSTR_VAL_SETUPFLAGS = "SetupFlags";
pub const REGSTR_VAL_REGOWNER = "RegisteredOwner";
pub const REGSTR_VAL_REGORGANIZATION = "RegisteredOrganization";
pub const REGSTR_VAL_LICENSINGINFO = "LicensingInfo";
pub const REGSTR_VAL_OLDMSDOSVER = "OldMSDOSVer";
pub const REGSTR_VAL_FIRSTINSTALLDATETIME = "FirstInstallDateTime";
pub const REGSTR_VAL_INSTALLTYPE = "InstallType";
pub const IT_COMPACT = @as(u32, 0);
pub const IT_TYPICAL = @as(u32, 1);
pub const IT_PORTABLE = @as(u32, 2);
pub const IT_CUSTOM = @as(u32, 3);
pub const REGSTR_VAL_WRAPPER = "Wrapper";
pub const REGSTR_KEY_RUNHISTORY = "RunHistory";
pub const REGSTR_VAL_LASTALIVEINTERVAL = "TimeStampInterval";
pub const REGSTR_VAL_DIRTYSHUTDOWN = "DirtyShutdown";
pub const REGSTR_VAL_DIRTYSHUTDOWNTIME = "DirtyShutdownTime";
pub const REGSTR_VAL_BT = "6005BT";
pub const REGSTR_VAL_LASTCOMPUTERNAME = "LastComputerName";
pub const REGSTR_VAL_LASTALIVEBT = "LastAliveBT";
pub const REGSTR_VAL_LASTALIVESTAMP = "LastAliveStamp";
pub const REGSTR_VAL_LASTALIVESTAMPFORCED = "LastAliveStampForced";
pub const REGSTR_VAL_LASTALIVESTAMPINTERVAL = "LastAliveStampInterval";
pub const REGSTR_VAL_LASTALIVESTAMPPOLICYINTERVAL = "LastAliveStampPolicyInterval";
pub const REGSTR_VAL_LASTALIVEUPTIME = "LastAliveUptime";
pub const REGSTR_VAL_LASTALIVEPMPOLICY = "LastAlivePMPolicy";
pub const REGSTR_VAL_REASONCODE = "ReasonCode";
pub const REGSTR_VAL_COMMENT = "Comment";
pub const REGSTR_VAL_SHUTDOWNREASON = "ShutdownReason";
pub const REGSTR_VAL_SHUTDOWNREASON_CODE = "ShutdownReasonCode";
pub const REGSTR_VAL_SHUTDOWNREASON_COMMENT = "ShutdownReasonComment";
pub const REGSTR_VAL_SHUTDOWNREASON_PROCESS = "ShutdownReasonProcess";
pub const REGSTR_VAL_SHUTDOWNREASON_USERNAME = "ShutdownReasonUserName";
pub const REGSTR_VAL_SHOWREASONUI = "ShutdownReasonUI";
pub const REGSTR_VAL_SHUTDOWN_IGNORE_PREDEFINED = "ShutdownIgnorePredefinedReasons";
pub const REGSTR_VAL_SHUTDOWN_STATE_SNAPSHOT = "ShutdownStateSnapshot";
pub const REGSTR_KEY_SETUP = "\\Setup";
pub const REGSTR_VAL_BOOTDIR = "BootDir";
pub const REGSTR_VAL_WINBOOTDIR = "WinbootDir";
pub const REGSTR_VAL_WINDIR = "WinDir";
pub const REGSTR_VAL_APPINSTPATH = "AppInstallPath";
pub const REGSTR_KEY_EBDFILESLOCAL = "EBDFilesLocale";
pub const REGSTR_KEY_EBDFILESKEYBOARD = "EBDFilesKeyboard";
pub const REGSTR_KEY_EBDAUTOEXECBATLOCAL = "EBDAutoexecBatLocale";
pub const REGSTR_KEY_EBDAUTOEXECBATKEYBOARD = "EBDAutoexecBatKeyboard";
pub const REGSTR_KEY_EBDCONFIGSYSLOCAL = "EBDConfigSysLocale";
pub const REGSTR_KEY_EBDCONFIGSYSKEYBOARD = "EBDConfigSysKeyboard";
pub const REGSTR_VAL_POLICY = "Policy";
pub const REGSTR_VAL_BEHAVIOR_ON_FAILED_VERIFY = "BehaviorOnFailedVerify";
pub const DRIVERSIGN_NONE = @as(u32, 0);
pub const DRIVERSIGN_WARNING = @as(u32, 1);
pub const DRIVERSIGN_BLOCKING = @as(u32, 2);
pub const REGSTR_VAL_MSDOSMODE = "MSDOSMode";
pub const REGSTR_VAL_MSDOSMODEDISCARD = "Discard";
pub const REGSTR_VAL_DOSOPTGLOBALFLAGS = "GlobalFlags";
pub const DOSOPTGF_DEFCLEAN = @as(i32, 1);
pub const REGSTR_VAL_DOSOPTFLAGS = "Flags";
pub const REGSTR_VAL_OPTORDER = "Order";
pub const REGSTR_VAL_CONFIGSYS = "Config.Sys";
pub const REGSTR_VAL_AUTOEXEC = "Autoexec.Bat";
pub const REGSTR_VAL_STDDOSOPTION = "StdOption";
pub const REGSTR_VAL_DOSOPTTIP = "TipText";
pub const DOSOPTF_DEFAULT = @as(i32, 1);
pub const DOSOPTF_SUPPORTED = @as(i32, 2);
pub const DOSOPTF_ALWAYSUSE = @as(i32, 4);
pub const DOSOPTF_USESPMODE = @as(i32, 8);
pub const DOSOPTF_PROVIDESUMB = @as(i32, 16);
pub const DOSOPTF_NEEDSETUP = @as(i32, 32);
pub const DOSOPTF_INDOSSTART = @as(i32, 64);
pub const DOSOPTF_MULTIPLE = @as(i32, 128);
pub const SUF_FIRSTTIME = @as(i32, 1);
pub const SUF_EXPRESS = @as(i32, 2);
pub const SUF_BATCHINF = @as(i32, 4);
pub const SUF_CLEAN = @as(i32, 8);
pub const SUF_INSETUP = @as(i32, 16);
pub const SUF_NETSETUP = @as(i32, 32);
pub const SUF_NETHDBOOT = @as(i32, 64);
pub const SUF_NETRPLBOOT = @as(i32, 128);
pub const SUF_SBSCOPYOK = @as(i32, 256);
pub const REGSTR_VAL_DOSPAGER = "DOSPager";
pub const REGSTR_VAL_VXDGROUPS = "VXDGroups";
pub const REGSTR_VAL_VPOWERDFLAGS = "Flags";
pub const VPDF_DISABLEPWRMGMT = @as(u32, 1);
pub const VPDF_FORCEAPM10MODE = @as(u32, 2);
pub const VPDF_SKIPINTELSLCHECK = @as(u32, 4);
pub const VPDF_DISABLEPWRSTATUSPOLL = @as(u32, 8);
pub const VPDF_DISABLERINGRESUME = @as(u32, 16);
pub const VPDF_SHOWMULTIBATT = @as(u32, 32);
pub const BIF_SHOWSIMILARDRIVERS = @as(u32, 1);
pub const BIF_RAWDEVICENEEDSDRIVER = @as(u32, 2);
pub const REGSTR_VAL_WORKGROUP = "Workgroup";
pub const REGSTR_VAL_DIRECTHOST = "DirectHost";
pub const REGSTR_VAL_FILESHARING = "FileSharing";
pub const REGSTR_VAL_PRINTSHARING = "PrintSharing";
pub const REGSTR_VAL_FIRSTNETDRIVE = "FirstNetworkDrive";
pub const REGSTR_VAL_MAXCONNECTIONS = "MaxConnections";
pub const REGSTR_VAL_APISUPPORT = "APISupport";
pub const REGSTR_VAL_MAXRETRY = "MaxRetry";
pub const REGSTR_VAL_MINRETRY = "MinRetry";
pub const REGSTR_VAL_SUPPORTLFN = "SupportLFN";
pub const REGSTR_VAL_SUPPORTBURST = "SupportBurst";
pub const REGSTR_VAL_SUPPORTTUNNELLING = "SupportTunnelling";
pub const REGSTR_VAL_FULLTRACE = "FullTrace";
pub const REGSTR_VAL_READCACHING = "ReadCaching";
pub const REGSTR_VAL_SHOWDOTS = "ShowDots";
pub const REGSTR_VAL_GAPTIME = "GapTime";
pub const REGSTR_VAL_SEARCHMODE = "SearchMode";
pub const REGSTR_VAL_SHELLVERSION = "ShellVersion";
pub const REGSTR_VAL_MAXLIP = "MaxLIP";
pub const REGSTR_VAL_PRESERVECASE = "PreserveCase";
pub const REGSTR_VAL_OPTIMIZESFN = "OptimizeSFN";
pub const REGSTR_VAL_NCP_BROWSEMASTER = "BrowseMaster";
pub const REGSTR_VAL_NCP_USEPEERBROWSING = "Use_PeerBrowsing";
pub const REGSTR_VAL_NCP_USESAP = "Use_Sap";
pub const REGSTR_VAL_PCCARD_POWER = "EnablePowerManagement";
pub const REGSTR_VAL_WIN31FILESYSTEM = "Win31FileSystem";
pub const REGSTR_VAL_PRESERVELONGNAMES = "PreserveLongNames";
pub const REGSTR_VAL_DRIVEWRITEBEHIND = "DriveWriteBehind";
pub const REGSTR_VAL_ASYNCFILECOMMIT = "AsyncFileCommit";
pub const REGSTR_VAL_PATHCACHECOUNT = "PathCache";
pub const REGSTR_VAL_NAMECACHECOUNT = "NameCache";
pub const REGSTR_VAL_CONTIGFILEALLOC = "ContigFileAllocSize";
pub const REGSTR_VAL_FREESPACERATIO = "FreeSpaceRatio";
pub const REGSTR_VAL_VOLIDLETIMEOUT = "VolumeIdleTimeout";
pub const REGSTR_VAL_BUFFIDLETIMEOUT = "BufferIdleTimeout";
pub const REGSTR_VAL_BUFFAGETIMEOUT = "BufferAgeTimeout";
pub const REGSTR_VAL_NAMENUMERICTAIL = "NameNumericTail";
pub const REGSTR_VAL_READAHEADTHRESHOLD = "ReadAheadThreshold";
pub const REGSTR_VAL_DOUBLEBUFFER = "DoubleBuffer";
pub const REGSTR_VAL_SOFTCOMPATMODE = "SoftCompatMode";
pub const REGSTR_VAL_DRIVESPINDOWN = "DriveSpinDown";
pub const REGSTR_VAL_FORCEPMIO = "ForcePMIO";
pub const REGSTR_VAL_FORCERMIO = "ForceRMIO";
pub const REGSTR_VAL_LASTBOOTPMDRVS = "LastBootPMDrvs";
pub const REGSTR_VAL_ACSPINDOWNPREVIOUS = "ACSpinDownPrevious";
pub const REGSTR_VAL_BATSPINDOWNPREVIOUS = "BatSpinDownPrevious";
pub const REGSTR_VAL_VIRTUALHDIRQ = "VirtualHDIRQ";
pub const REGSTR_VAL_SRVNAMECACHECOUNT = "ServerNameCacheMax";
pub const REGSTR_VAL_SRVNAMECACHE = "ServerNameCache";
pub const REGSTR_VAL_SRVNAMECACHENETPROV = "ServerNameCacheNumNets";
pub const REGSTR_VAL_AUTOMOUNT = "AutoMountDrives";
pub const REGSTR_VAL_COMPRESSIONMETHOD = "CompressionAlgorithm";
pub const REGSTR_VAL_COMPRESSIONTHRESHOLD = "CompressionThreshold";
pub const REGSTR_VAL_ACDRIVESPINDOWN = "ACDriveSpinDown";
pub const REGSTR_VAL_BATDRIVESPINDOWN = "BatDriveSpinDown";
pub const REGSTR_VAL_CDCACHESIZE = "CacheSize";
pub const REGSTR_VAL_CDPREFETCH = "Prefetch";
pub const REGSTR_VAL_CDPREFETCHTAIL = "PrefetchTail";
pub const REGSTR_VAL_CDRAWCACHE = "RawCache";
pub const REGSTR_VAL_CDEXTERRORS = "ExtendedErrors";
pub const REGSTR_VAL_CDSVDSENSE = "SVDSense";
pub const REGSTR_VAL_CDSHOWVERSIONS = "ShowVersions";
pub const REGSTR_VAL_CDCOMPATNAMES = "MSCDEXCompatNames";
pub const REGSTR_VAL_CDNOREADAHEAD = "NoReadAhead";
pub const REGSTR_VAL_SCSI = "SCSI\\";
pub const REGSTR_VAL_ESDI = "ESDI\\";
pub const REGSTR_VAL_FLOP = "FLOP\\";
pub const REGSTR_VAL_DISK = "GenDisk";
pub const REGSTR_VAL_CDROM = "GenCD";
pub const REGSTR_VAL_TAPE = "TAPE";
pub const REGSTR_VAL_SCANNER = "SCANNER";
pub const REGSTR_VAL_FLOPPY = "FLOPPY";
pub const REGSTR_VAL_SCSITID = "SCSITargetID";
pub const REGSTR_VAL_SCSILUN = "SCSILUN";
pub const REGSTR_VAL_REVLEVEL = "RevisionLevel";
pub const REGSTR_VAL_PRODUCTID = "ProductId";
pub const REGSTR_VAL_PRODUCTTYPE = "ProductType";
pub const REGSTR_VAL_DEVTYPE = "DeviceType";
pub const REGSTR_VAL_REMOVABLE = "Removable";
pub const REGSTR_VAL_CURDRVLET = "CurrentDriveLetterAssignment";
pub const REGSTR_VAL_USRDRVLET = "UserDriveLetterAssignment";
pub const REGSTR_VAL_SYNCDATAXFER = "SyncDataXfer";
pub const REGSTR_VAL_AUTOINSNOTE = "AutoInsertNotification";
pub const REGSTR_VAL_DISCONNECT = "Disconnect";
pub const REGSTR_VAL_INT13 = "Int13";
pub const REGSTR_VAL_PMODE_INT13 = "PModeInt13";
pub const REGSTR_VAL_USERSETTINGS = "AdapterSettings";
pub const REGSTR_VAL_NOIDE = "NoIDE";
pub const REGSTR_VAL_DISKCLASSNAME = "DiskDrive";
pub const REGSTR_VAL_CDROMCLASSNAME = "CDROM";
pub const REGSTR_VAL_FORCELOAD = "ForceLoadPD";
pub const REGSTR_VAL_FORCEFIFO = "ForceFIFO";
pub const REGSTR_VAL_FORCECL = "ForceChangeLine";
pub const REGSTR_VAL_NOUSECLASS = "NoUseClass";
pub const REGSTR_VAL_NOINSTALLCLASS = "NoInstallClass";
pub const REGSTR_VAL_NODISPLAYCLASS = "NoDisplayClass";
pub const REGSTR_VAL_SILENTINSTALL = "SilentInstall";
pub const REGSTR_VAL_FSFILTERCLASS = "FSFilterClass";
pub const REGSTR_KEY_PCMCIA_CLASS = "PCMCIA";
pub const REGSTR_KEY_SCSI_CLASS = "SCSIAdapter";
pub const REGSTR_KEY_PORTS_CLASS = "ports";
pub const REGSTR_KEY_MEDIA_CLASS = "MEDIA";
pub const REGSTR_KEY_DISPLAY_CLASS = "Display";
pub const REGSTR_KEY_KEYBOARD_CLASS = "Keyboard";
pub const REGSTR_KEY_MOUSE_CLASS = "Mouse";
pub const REGSTR_KEY_MONITOR_CLASS = "Monitor";
pub const REGSTR_KEY_MODEM_CLASS = "Modem";
pub const REGSTR_VAL_PCMCIA_OPT = "Options";
pub const PCMCIA_OPT_HAVE_SOCKET = @as(i32, 1);
pub const PCMCIA_OPT_AUTOMEM = @as(i32, 4);
pub const PCMCIA_OPT_NO_SOUND = @as(i32, 8);
pub const PCMCIA_OPT_NO_AUDIO = @as(i32, 16);
pub const PCMCIA_OPT_NO_APMREMOVE = @as(i32, 32);
pub const REGSTR_VAL_PCMCIA_MEM = "Memory";
pub const PCMCIA_DEF_MEMBEGIN = @as(u32, 786432);
pub const PCMCIA_DEF_MEMEND = @as(u32, 16777215);
pub const PCMCIA_DEF_MEMLEN = @as(u32, 4096);
pub const REGSTR_VAL_PCMCIA_ALLOC = "AllocMemWin";
pub const REGSTR_VAL_PCMCIA_ATAD = "ATADelay";
pub const REGSTR_VAL_PCMCIA_SIZ = "MinRegionSize";
pub const PCMCIA_DEF_MIN_REGION = @as(u32, 65536);
pub const REGSTR_VAL_P1284MDL = "Model";
pub const REGSTR_VAL_P1284MFG = "Manufacturer";
pub const REGSTR_VAL_ISAPNP = "ISAPNP";
pub const REGSTR_VAL_ISAPNP_RDP_OVERRIDE = "RDPOverRide";
pub const REGSTR_VAL_PCI = "PCI";
pub const REGSTR_PCI_OPTIONS = "Options";
pub const REGSTR_PCI_DUAL_IDE = "PCIDualIDE";
pub const PCI_OPTIONS_USE_BIOS = @as(i32, 1);
pub const PCI_OPTIONS_USE_IRQ_STEERING = @as(i32, 2);
pub const AGP_FLAG_NO_1X_RATE = @as(i32, 1);
pub const AGP_FLAG_NO_2X_RATE = @as(i32, 2);
pub const AGP_FLAG_NO_4X_RATE = @as(i32, 4);
pub const AGP_FLAG_NO_8X_RATE = @as(i32, 8);
pub const AGP_FLAG_REVERSE_INITIALIZATION = @as(i32, 128);
pub const AGP_FLAG_NO_SBA_ENABLE = @as(i32, 256);
pub const AGP_FLAG_NO_FW_ENABLE = @as(i32, 512);
pub const AGP_FLAG_SPECIAL_TARGET = @as(i32, 1048575);
pub const AGP_FLAG_SPECIAL_RESERVE = @as(i32, 1015808);
pub const REGSTR_KEY_CRASHES = "Crashes";
pub const REGSTR_KEY_DANGERS = "Dangers";
pub const REGSTR_KEY_DETMODVARS = "DetModVars";
pub const REGSTR_KEY_NDISINFO = "NDISInfo";
pub const REGSTR_VAL_PROTINIPATH = "ProtIniPath";
pub const REGSTR_VAL_RESOURCES = "Resources";
pub const REGSTR_VAL_CRASHFUNCS = "CrashFuncs";
pub const REGSTR_VAL_CLASS = "Class";
pub const REGSTR_VAL_CLASSDESC = "ClassDesc";
pub const REGSTR_VAL_DEVDESC = "DeviceDesc";
pub const REGSTR_VAL_BOOTCONFIG = "BootConfig";
pub const REGSTR_VAL_DETFUNC = "DetFunc";
pub const REGSTR_VAL_DETFLAGS = "DetFlags";
pub const REGSTR_VAL_COMPATIBLEIDS = "CompatibleIDs";
pub const REGSTR_VAL_DETCONFIG = "DetConfig";
pub const REGSTR_VAL_VERIFYKEY = "VerifyKey";
pub const REGSTR_VAL_COMINFO = "ComInfo";
pub const REGSTR_VAL_INFNAME = "InfName";
pub const REGSTR_VAL_CARDSPECIFIC = "CardSpecific";
pub const REGSTR_VAL_NETOSTYPE = "NetOSType";
pub const REGSTR_DATA_NETOS_NDIS = "NDIS";
pub const REGSTR_DATA_NETOS_ODI = "ODI";
pub const REGSTR_DATA_NETOS_IPX = "IPX";
pub const REGSTR_VAL_MFG = "Mfg";
pub const REGSTR_VAL_SCAN_ONLY_FIRST = "ScanOnlyFirstDrive";
pub const REGSTR_VAL_SHARE_IRQ = "ForceIRQSharing";
pub const REGSTR_VAL_NONSTANDARD_ATAPI = "NonStandardATAPI";
pub const REGSTR_VAL_IDE_FORCE_SERIALIZE = "ForceSerialization";
pub const REGSTR_VAL_MAX_HCID_LEN = @as(u32, 1024);
pub const REGSTR_VAL_HWREV = "HWRevision";
pub const REGSTR_VAL_ENABLEINTS = "EnableInts";
pub const REGDF_NOTDETIO = @as(u32, 1);
pub const REGDF_NOTDETMEM = @as(u32, 2);
pub const REGDF_NOTDETIRQ = @as(u32, 4);
pub const REGDF_NOTDETDMA = @as(u32, 8);
pub const REGDF_NEEDFULLCONFIG = @as(u32, 16);
pub const REGDF_GENFORCEDCONFIG = @as(u32, 32);
pub const REGDF_NODETCONFIG = @as(u32, 32768);
pub const REGDF_CONFLICTIO = @as(u32, 65536);
pub const REGDF_CONFLICTMEM = @as(u32, 131072);
pub const REGDF_CONFLICTIRQ = @as(u32, 262144);
pub const REGDF_CONFLICTDMA = @as(u32, 524288);
pub const REGDF_MAPIRQ2TO9 = @as(u32, 1048576);
pub const REGDF_NOTVERIFIED = @as(u32, 2147483648);
pub const REGSTR_VAL_APMBIOSVER = "APMBiosVer";
pub const REGSTR_VAL_APMFLAGS = "APMFlags";
pub const REGSTR_VAL_SLSUPPORT = "SLSupport";
pub const REGSTR_VAL_MACHINETYPE = "MachineType";
pub const REGSTR_VAL_SETUPMACHINETYPE = "SetupMachineType";
pub const REGSTR_MACHTYPE_UNKNOWN = "Unknown";
pub const REGSTR_MACHTYPE_IBMPC = "IBM PC";
pub const REGSTR_MACHTYPE_IBMPCJR = "IBM PCjr";
pub const REGSTR_MACHTYPE_IBMPCCONV = "IBM PC Convertible";
pub const REGSTR_MACHTYPE_IBMPCXT = "IBM PC/XT";
pub const REGSTR_MACHTYPE_IBMPCXT_286 = "IBM PC/XT 286";
pub const REGSTR_MACHTYPE_IBMPCAT = "IBM PC/AT";
pub const REGSTR_MACHTYPE_IBMPS2_25 = "IBM PS/2-25";
pub const REGSTR_MACHTYPE_IBMPS2_30_286 = "IBM PS/2-30 286";
pub const REGSTR_MACHTYPE_IBMPS2_30 = "IBM PS/2-30";
pub const REGSTR_MACHTYPE_IBMPS2_50 = "IBM PS/2-50";
pub const REGSTR_MACHTYPE_IBMPS2_50Z = "IBM PS/2-50Z";
pub const REGSTR_MACHTYPE_IBMPS2_55SX = "IBM PS/2-55SX";
pub const REGSTR_MACHTYPE_IBMPS2_60 = "IBM PS/2-60";
pub const REGSTR_MACHTYPE_IBMPS2_65SX = "IBM PS/2-65SX";
pub const REGSTR_MACHTYPE_IBMPS2_70 = "IBM PS/2-70";
pub const REGSTR_MACHTYPE_IBMPS2_P70 = "IBM PS/2-P70";
pub const REGSTR_MACHTYPE_IBMPS2_70_80 = "IBM PS/2-70/80";
pub const REGSTR_MACHTYPE_IBMPS2_80 = "IBM PS/2-80";
pub const REGSTR_MACHTYPE_IBMPS2_90 = "IBM PS/2-90";
pub const REGSTR_MACHTYPE_IBMPS1 = "IBM PS/1";
pub const REGSTR_MACHTYPE_PHOENIX_PCAT = "Phoenix PC/AT Compatible";
pub const REGSTR_MACHTYPE_HP_VECTRA = "HP Vectra";
pub const REGSTR_MACHTYPE_ATT_PC = "AT&T PC";
pub const REGSTR_MACHTYPE_ZENITH_PC = "Zenith PC";
pub const REGSTR_VAL_APMMENUSUSPEND = "APMMenuSuspend";
pub const APMMENUSUSPEND_DISABLED = @as(u32, 0);
pub const APMMENUSUSPEND_ENABLED = @as(u32, 1);
pub const APMMENUSUSPEND_UNDOCKED = @as(u32, 2);
pub const APMMENUSUSPEND_NOCHANGE = @as(u32, 128);
pub const REGSTR_VAL_APMACTIMEOUT = "APMACTimeout";
pub const REGSTR_VAL_APMBATTIMEOUT = "APMBatTimeout";
pub const APMTIMEOUT_DISABLED = @as(u32, 0);
pub const REGSTR_VAL_APMSHUTDOWNPOWER = "APMShutDownPower";
pub const REGSTR_VAL_BUSTYPE = "BusType";
pub const REGSTR_VAL_CPU = "CPU";
pub const REGSTR_VAL_NDP = "NDP";
pub const REGSTR_VAL_PNPBIOSVER = "PnPBIOSVer";
pub const REGSTR_VAL_PNPSTRUCOFFSET = "PnPStrucOffset";
pub const REGSTR_VAL_PCIBIOSVER = "PCIBIOSVer";
pub const REGSTR_VAL_HWMECHANISM = "HWMechanism";
pub const REGSTR_VAL_LASTPCIBUSNUM = "LastPCIBusNum";
pub const REGSTR_VAL_CONVMEM = "ConvMem";
pub const REGSTR_VAL_EXTMEM = "ExtMem";
pub const REGSTR_VAL_COMPUTERNAME = "ComputerName";
pub const REGSTR_VAL_BIOSNAME = "BIOSName";
pub const REGSTR_VAL_BIOSVERSION = "BIOSVersion";
pub const REGSTR_VAL_BIOSDATE = "BIOSDate";
pub const REGSTR_VAL_MODEL = "Model";
pub const REGSTR_VAL_SUBMODEL = "Submodel";
pub const REGSTR_VAL_REVISION = "Revision";
pub const REGSTR_VAL_FIFODEPTH = "FIFODepth";
pub const REGSTR_VAL_RDINTTHRESHOLD = "RDIntThreshold";
pub const REGSTR_VAL_WRINTTHRESHOLD = "WRIntThreshold";
pub const REGSTR_VAL_PRIORITY = "Priority";
pub const REGSTR_VAL_DRIVER = "Driver";
pub const REGSTR_VAL_FUNCDESC = "FunctionDesc";
pub const REGSTR_VAL_FORCEDCONFIG = "ForcedConfig";
pub const REGSTR_VAL_CONFIGFLAGS = "ConfigFlags";
pub const REGSTR_VAL_CSCONFIGFLAGS = "CSConfigFlags";
pub const CONFIGFLAG_DISABLED = @as(u32, 1);
pub const CONFIGFLAG_REMOVED = @as(u32, 2);
pub const CONFIGFLAG_MANUAL_INSTALL = @as(u32, 4);
pub const CONFIGFLAG_IGNORE_BOOT_LC = @as(u32, 8);
pub const CONFIGFLAG_NET_BOOT = @as(u32, 16);
pub const CONFIGFLAG_REINSTALL = @as(u32, 32);
pub const CONFIGFLAG_FAILEDINSTALL = @as(u32, 64);
pub const CONFIGFLAG_CANTSTOPACHILD = @as(u32, 128);
pub const CONFIGFLAG_OKREMOVEROM = @as(u32, 256);
pub const CONFIGFLAG_NOREMOVEEXIT = @as(u32, 512);
pub const CONFIGFLAG_FINISH_INSTALL = @as(u32, 1024);
pub const CONFIGFLAG_NEEDS_FORCED_CONFIG = @as(u32, 2048);
pub const CONFIGFLAG_NETBOOT_CARD = @as(u32, 4096);
pub const CONFIGFLAG_PARTIAL_LOG_CONF = @as(u32, 8192);
pub const CONFIGFLAG_SUPPRESS_SURPRISE = @as(u32, 16384);
pub const CONFIGFLAG_VERIFY_HARDWARE = @as(u32, 32768);
pub const CONFIGFLAG_FINISHINSTALL_UI = @as(u32, 65536);
pub const CONFIGFLAG_FINISHINSTALL_ACTION = @as(u32, 131072);
pub const CONFIGFLAG_BOOT_DEVICE = @as(u32, 262144);
pub const CONFIGFLAG_NEEDS_CLASS_CONFIG = @as(u32, 524288);
pub const CSCONFIGFLAG_BITS = @as(u32, 7);
pub const CSCONFIGFLAG_DISABLED = @as(u32, 1);
pub const CSCONFIGFLAG_DO_NOT_CREATE = @as(u32, 2);
pub const CSCONFIGFLAG_DO_NOT_START = @as(u32, 4);
pub const DMSTATEFLAG_APPLYTOALL = @as(u32, 1);
pub const REGSTR_VAL_ROOT_DEVNODE = "HTREE\\ROOT\\0";
pub const REGSTR_VAL_RESERVED_DEVNODE = "HTREE\\RESERVED\\0";
pub const REGSTR_PATH_MULTI_FUNCTION = "MF";
pub const REGSTR_VAL_RESOURCE_MAP = "ResourceMap";
pub const REGSTR_PATH_CHILD_PREFIX = "Child";
pub const NUM_RESOURCE_MAP = @as(u32, 256);
pub const REGSTR_VAL_MF_FLAGS = "MFFlags";
pub const MF_FLAGS_EVEN_IF_NO_RESOURCE = @as(u32, 1);
pub const MF_FLAGS_NO_CREATE_IF_NO_RESOURCE = @as(u32, 2);
pub const MF_FLAGS_FILL_IN_UNKNOWN_RESOURCE = @as(u32, 4);
pub const MF_FLAGS_CREATE_BUT_NO_SHOW_DISABLED = @as(u32, 8);
pub const REGSTR_VAL_EISA_RANGES = "EISARanges";
pub const REGSTR_VAL_EISA_FUNCTIONS = "EISAFunctions";
pub const REGSTR_VAL_EISA_FUNCTIONS_MASK = "EISAFunctionsMask";
pub const REGSTR_VAL_EISA_FLAGS = "EISAFlags";
pub const REGSTR_VAL_EISA_SIMULATE_INT15 = "EISASimulateInt15";
pub const EISAFLAG_NO_IO_MERGE = @as(u32, 1);
pub const EISAFLAG_SLOT_IO_FIRST = @as(u32, 2);
pub const EISA_NO_MAX_FUNCTION = @as(u32, 255);
pub const NUM_EISA_RANGES = @as(u32, 4);
pub const REGSTR_VAL_DRVDESC = "DriverDesc";
pub const REGSTR_VAL_DEVLOADER = "DevLoader";
pub const REGSTR_VAL_STATICVXD = "StaticVxD";
pub const REGSTR_VAL_PROPERTIES = "Properties";
pub const REGSTR_VAL_MANUFACTURER = "Manufacturer";
pub const REGSTR_VAL_EXISTS = "Exists";
pub const REGSTR_VAL_CMENUMFLAGS = "CMEnumFlags";
pub const REGSTR_VAL_CMDRIVFLAGS = "CMDrivFlags";
pub const REGSTR_VAL_ENUMERATOR = "Enumerator";
pub const REGSTR_VAL_DEVICEDRIVER = "DeviceDriver";
pub const REGSTR_VAL_PORTNAME = "PortName";
pub const REGSTR_VAL_INFPATH = "InfPath";
pub const REGSTR_VAL_INFSECTION = "InfSection";
pub const REGSTR_VAL_INFSECTIONEXT = "InfSectionExt";
pub const REGSTR_VAL_POLLING = "Polling";
pub const REGSTR_VAL_DONTLOADIFCONFLICT = "DontLoadIfConflict";
pub const REGSTR_VAL_PORTSUBCLASS = "PortSubClass";
pub const REGSTR_VAL_NETCLEAN = "NetClean";
pub const REGSTR_VAL_IDE_NO_SERIALIZE = "IDENoSerialize";
pub const REGSTR_VAL_NOCMOSORFDPT = "NoCMOSorFDPT";
pub const REGSTR_VAL_COMVERIFYBASE = "COMVerifyBase";
pub const REGSTR_VAL_MATCHINGDEVID = "MatchingDeviceId";
pub const REGSTR_VAL_DRIVERDATE = "DriverDate";
pub const REGSTR_VAL_DRIVERDATEDATA = "DriverDateData";
pub const REGSTR_VAL_DRIVERVERSION = "DriverVersion";
pub const REGSTR_VAL_LOCATION_INFORMATION_OVERRIDE = "LocationInformationOverride";
pub const REGSTR_KEY_OVERRIDE = "Override";
pub const REGSTR_VAL_CONFIGMG = "CONFIGMG";
pub const REGSTR_VAL_SYSDM = "SysDM";
pub const REGSTR_VAL_SYSDMFUNC = "SysDMFunc";
pub const REGSTR_VAL_PRIVATE = "Private";
pub const REGSTR_VAL_PRIVATEFUNC = "PrivateFunc";
pub const REGSTR_VAL_DETECT = "Detect";
pub const REGSTR_VAL_DETECTFUNC = "DetectFunc";
pub const REGSTR_VAL_ASKFORCONFIG = "AskForConfig";
pub const REGSTR_VAL_ASKFORCONFIGFUNC = "AskForConfigFunc";
pub const REGSTR_VAL_WAITFORUNDOCK = "WaitForUndock";
pub const REGSTR_VAL_WAITFORUNDOCKFUNC = "WaitForUndockFunc";
pub const REGSTR_VAL_REMOVEROMOKAY = "RemoveRomOkay";
pub const REGSTR_VAL_REMOVEROMOKAYFUNC = "RemoveRomOkayFunc";
pub const REGSTR_VAL_CURCONFIG = "CurrentConfig";
pub const REGSTR_VAL_FRIENDLYNAME = "FriendlyName";
pub const REGSTR_VAL_CURRENTCONFIG = "CurrentConfig";
pub const REGSTR_VAL_MAP = "Map";
pub const REGSTR_VAL_ID = "CurrentID";
pub const REGSTR_VAL_DOCKED = "CurrentDockedState";
pub const REGSTR_VAL_CHECKSUM = "CurrentChecksum";
pub const REGSTR_VAL_HWDETECT = "HardwareDetect";
pub const REGSTR_VAL_INHIBITRESULTS = "InhibitResults";
pub const REGSTR_VAL_PROFILEFLAGS = "ProfileFlags";
pub const REGSTR_KEY_PCMCIA = "PCMCIA\\";
pub const REGSTR_KEY_PCUNKNOWN = "UNKNOWN_MANUFACTURER";
pub const REGSTR_VAL_PCSSDRIVER = "Driver";
pub const REGSTR_KEY_PCMTD = "MTD-";
pub const REGSTR_VAL_PCMTDRIVER = "MTD";
pub const REGSTR_VAL_HARDWAREID = "HardwareID";
pub const REGSTR_VAL_INSTALLER = "Installer";
pub const REGSTR_VAL_INSTALLER_32 = "Installer32";
pub const REGSTR_VAL_INSICON = "Icon";
pub const REGSTR_VAL_ENUMPROPPAGES = "EnumPropPages";
pub const REGSTR_VAL_ENUMPROPPAGES_32 = "EnumPropPages32";
pub const REGSTR_VAL_BASICPROPERTIES = "BasicProperties";
pub const REGSTR_VAL_BASICPROPERTIES_32 = "BasicProperties32";
pub const REGSTR_VAL_COINSTALLERS_32 = "CoInstallers32";
pub const REGSTR_VAL_PRIVATEPROBLEM = "PrivateProblem";
pub const REGSTR_KEY_CURRENT = "Current";
pub const REGSTR_KEY_DEFAULT = "Default";
pub const REGSTR_KEY_MODES = "Modes";
pub const REGSTR_VAL_MODE = "Mode";
pub const REGSTR_VAL_BPP = "BPP";
pub const REGSTR_VAL_HRES = "HRes";
pub const REGSTR_VAL_VRES = "VRes";
pub const REGSTR_VAL_FONTSIZE = "FontSize";
pub const REGSTR_VAL_DRV = "drv";
pub const REGSTR_VAL_GRB = "grb";
pub const REGSTR_VAL_VDD = "vdd";
pub const REGSTR_VAL_VER = "Ver";
pub const REGSTR_VAL_MAXRES = "MaxResolution";
pub const REGSTR_VAL_DPMS = "DPMS";
pub const REGSTR_VAL_RESUMERESET = "ResumeReset";
pub const REGSTR_KEY_SYSTEM = "System";
pub const REGSTR_KEY_USER = "User";
pub const REGSTR_VAL_DPI = "dpi";
pub const REGSTR_VAL_PCICOPTIONS = "PCICOptions";
pub const PCIC_DEFAULT_IRQMASK = @as(u32, 20152);
pub const PCIC_DEFAULT_NUMSOCKETS = @as(u32, 0);
pub const REGSTR_VAL_PCICIRQMAP = "PCICIRQMap";
pub const REGSTR_PATH_APPEARANCE = "Control Panel\\Appearance";
pub const REGSTR_PATH_LOOKSCHEMES = "Control Panel\\Appearance\\Schemes";
pub const REGSTR_VAL_CUSTOMCOLORS = "CustomColors";
pub const REGSTR_PATH_SCREENSAVE = "Control Panel\\Desktop";
pub const REGSTR_VALUE_USESCRPASSWORD = "ScreenSaveUsePassword";
pub const REGSTR_VALUE_SCRPASSWORD = "ScreenSave_Data";
pub const REGSTR_VALUE_LOWPOWERTIMEOUT = "ScreenSaveLowPowerTimeout";
pub const REGSTR_VALUE_POWEROFFTIMEOUT = "ScreenSavePowerOffTimeout";
pub const REGSTR_VALUE_LOWPOWERACTIVE = "ScreenSaveLowPowerActive";
pub const REGSTR_VALUE_POWEROFFACTIVE = "ScreenSavePowerOffActive";
pub const REGSTR_PATH_WINDOWSAPPLETS = "Software\\Microsoft\\Windows\\CurrentVersion\\Applets";
pub const REGSTR_PATH_SYSTRAY = "Software\\Microsoft\\Windows\\CurrentVersion\\Applets\\SysTray";
pub const REGSTR_VAL_SYSTRAYSVCS = "Services";
pub const REGSTR_VAL_SYSTRAYBATFLAGS = "PowerFlags";
pub const REGSTR_VAL_SYSTRAYPCCARDFLAGS = "PCMCIAFlags";
pub const REGSTR_PATH_NETWORK_USERSETTINGS = "Network";
pub const REGSTR_KEY_NETWORK_PERSISTENT = "\\Persistent";
pub const REGSTR_KEY_NETWORK_RECENT = "\\Recent";
pub const REGSTR_VAL_REMOTE_PATH = "RemotePath";
pub const REGSTR_VAL_USER_NAME = "UserName";
pub const REGSTR_VAL_PROVIDER_NAME = "ProviderName";
pub const REGSTR_VAL_CONNECTION_TYPE = "ConnectionType";
pub const REGSTR_VAL_UPGRADE = "Upgrade";
pub const REGSTR_KEY_LOGON = "\\Logon";
pub const REGSTR_VAL_MUSTBEVALIDATED = "MustBeValidated";
pub const REGSTR_VAL_RUNLOGINSCRIPT = "ProcessLoginScript";
pub const REGSTR_KEY_NETWORKPROVIDER = "\\NetworkProvider";
pub const REGSTR_VAL_AUTHENT_AGENT = "AuthenticatingAgent";
pub const REGSTR_VAL_PREFREDIR = "PreferredRedir";
pub const REGSTR_VAL_AUTOSTART = "AutoStart";
pub const REGSTR_VAL_AUTOLOGON = "AutoLogon";
pub const REGSTR_VAL_NETCARD = "Netcard";
pub const REGSTR_VAL_TRANSPORT = "Transport";
pub const REGSTR_VAL_DYNAMIC = "Dynamic";
pub const REGSTR_VAL_TRANSITION = "Transition";
pub const REGSTR_VAL_STATICDRIVE = "StaticDrive";
pub const REGSTR_VAL_LOADHI = "LoadHi";
pub const REGSTR_VAL_LOADRMDRIVERS = "LoadRMDrivers";
pub const REGSTR_VAL_SETUPN = "SetupN";
pub const REGSTR_VAL_SETUPNPATH = "SetupNPath";
pub const REGSTR_VAL_WRKGRP_FORCEMAPPING = "WrkgrpForceMapping";
pub const REGSTR_VAL_WRKGRP_REQUIRED = "WrkgrpRequired";
pub const REGSTR_PATH_CURRENT_CONTROL_SET = "System\\CurrentControlSet\\Control";
pub const REGSTR_VAL_CURRENT_USER = "Current User";
pub const REGSTR_PATH_PWDPROVIDER = "System\\CurrentControlSet\\Control\\PwdProvider";
pub const REGSTR_VAL_PWDPROVIDER_PATH = "ProviderPath";
pub const REGSTR_VAL_PWDPROVIDER_DESC = "Description";
pub const REGSTR_VAL_PWDPROVIDER_CHANGEPWD = "ChangePassword";
pub const REGSTR_VAL_PWDPROVIDER_CHANGEPWDHWND = "ChangePasswordHwnd";
pub const REGSTR_VAL_PWDPROVIDER_GETPWDSTATUS = "GetPasswordStatus";
pub const REGSTR_VAL_PWDPROVIDER_ISNP = "NetworkProvider";
pub const REGSTR_VAL_PWDPROVIDER_CHANGEORDER = "ChangeOrder";
pub const REGSTR_PATH_POLICIES = "Software\\Microsoft\\Windows\\CurrentVersion\\Policies";
pub const REGSTR_PATH_UPDATE = "System\\CurrentControlSet\\Control\\Update";
pub const REGSTR_VALUE_ENABLE = "Enable";
pub const REGSTR_VALUE_VERBOSE = "Verbose";
pub const REGSTR_VALUE_NETPATH = "NetworkPath";
pub const REGSTR_VALUE_DEFAULTLOC = "UseDefaultNetLocation";
pub const REGSTR_KEY_NETWORK = "Network";
pub const REGSTR_KEY_PRINTERS = "Printers";
pub const REGSTR_KEY_WINOLDAPP = "WinOldApp";
pub const REGSTR_KEY_EXPLORER = "Explorer";
pub const REGSTR_VAL_NOFILESHARING = "NoFileSharing";
pub const REGSTR_VAL_NOPRINTSHARING = "NoPrintSharing";
pub const REGSTR_VAL_NOFILESHARINGCTRL = "NoFileSharingControl";
pub const REGSTR_VAL_NOPRINTSHARINGCTRL = "NoPrintSharingControl";
pub const REGSTR_VAL_HIDESHAREPWDS = "HideSharePwds";
pub const REGSTR_VAL_DISABLEPWDCACHING = "DisablePwdCaching";
pub const REGSTR_VAL_ALPHANUMPWDS = "AlphanumPwds";
pub const REGSTR_VAL_NETSETUP_DISABLE = "NoNetSetup";
pub const REGSTR_VAL_NETSETUP_NOCONFIGPAGE = "NoNetSetupConfigPage";
pub const REGSTR_VAL_NETSETUP_NOIDPAGE = "NoNetSetupIDPage";
pub const REGSTR_VAL_NETSETUP_NOSECURITYPAGE = "NoNetSetupSecurityPage";
pub const REGSTR_VAL_SYSTEMCPL_NOVIRTMEMPAGE = "NoVirtMemPage";
pub const REGSTR_VAL_SYSTEMCPL_NODEVMGRPAGE = "NoDevMgrPage";
pub const REGSTR_VAL_SYSTEMCPL_NOCONFIGPAGE = "NoConfigPage";
pub const REGSTR_VAL_SYSTEMCPL_NOFILESYSPAGE = "NoFileSysPage";
pub const REGSTR_VAL_DISPCPL_NODISPCPL = "NoDispCPL";
pub const REGSTR_VAL_DISPCPL_NOBACKGROUNDPAGE = "NoDispBackgroundPage";
pub const REGSTR_VAL_DISPCPL_NOSCRSAVPAGE = "NoDispScrSavPage";
pub const REGSTR_VAL_DISPCPL_NOAPPEARANCEPAGE = "NoDispAppearancePage";
pub const REGSTR_VAL_DISPCPL_NOSETTINGSPAGE = "NoDispSettingsPage";
pub const REGSTR_VAL_SECCPL_NOSECCPL = "NoSecCPL";
pub const REGSTR_VAL_SECCPL_NOPWDPAGE = "NoPwdPage";
pub const REGSTR_VAL_SECCPL_NOADMINPAGE = "NoAdminPage";
pub const REGSTR_VAL_SECCPL_NOPROFILEPAGE = "NoProfilePage";
pub const REGSTR_VAL_PRINTERS_HIDETABS = "NoPrinterTabs";
pub const REGSTR_VAL_PRINTERS_NODELETE = "NoDeletePrinter";
pub const REGSTR_VAL_PRINTERS_NOADD = "NoAddPrinter";
pub const REGSTR_VAL_WINOLDAPP_DISABLED = "Disabled";
pub const REGSTR_VAL_WINOLDAPP_NOREALMODE = "NoRealMode";
pub const REGSTR_VAL_NOENTIRENETWORK = "NoEntireNetwork";
pub const REGSTR_VAL_NOWORKGROUPCONTENTS = "NoWorkgroupContents";
pub const REGSTR_VAL_UNDOCK_WITHOUT_LOGON = "UndockWithoutLogon";
pub const REGSTR_VAL_MINPWDLEN = "MinPwdLen";
pub const REGSTR_VAL_PWDEXPIRATION = "PwdExpiration";
pub const REGSTR_VAL_WIN31PROVIDER = "Win31Provider";
pub const REGSTR_VAL_DISABLEREGTOOLS = "DisableRegistryTools";
pub const REGSTR_PATH_WINLOGON = "Software\\Microsoft\\Windows\\CurrentVersion\\Winlogon";
pub const REGSTR_VAL_LEGALNOTICECAPTION = "LegalNoticeCaption";
pub const REGSTR_VAL_LEGALNOTICETEXT = "LegalNoticeText";
pub const REGSTR_VAL_DRIVE_SPINDOWN = "NoDispSpinDown";
pub const REGSTR_VAL_SHUTDOWN_FLAGS = "ShutdownFlags";
pub const REGSTR_VAL_RESTRICTRUN = "RestrictRun";
pub const REGSTR_KEY_POL_USERS = "Users";
pub const REGSTR_KEY_POL_COMPUTERS = "Computers";
pub const REGSTR_KEY_POL_USERGROUPS = "UserGroups";
pub const REGSTR_KEY_POL_DEFAULT = ".default";
pub const REGSTR_KEY_POL_USERGROUPDATA = "GroupData\\UserGroups\\Priority";
pub const REGSTR_PATH_TIMEZONE = "System\\CurrentControlSet\\Control\\TimeZoneInformation";
pub const REGSTR_VAL_TZBIAS = "Bias";
pub const REGSTR_VAL_TZDLTBIAS = "DaylightBias";
pub const REGSTR_VAL_TZSTDBIAS = "StandardBias";
pub const REGSTR_VAL_TZACTBIAS = "ActiveTimeBias";
pub const REGSTR_VAL_TZDLTFLAG = "DaylightFlag";
pub const REGSTR_VAL_TZSTDSTART = "StandardStart";
pub const REGSTR_VAL_TZDLTSTART = "DaylightStart";
pub const REGSTR_VAL_TZDLTNAME = "DaylightName";
pub const REGSTR_VAL_TZSTDNAME = "StandardName";
pub const REGSTR_VAL_TZNOCHANGESTART = "NoChangeStart";
pub const REGSTR_VAL_TZNOCHANGEEND = "NoChangeEnd";
pub const REGSTR_VAL_TZNOAUTOTIME = "DisableAutoDaylightTimeSet";
pub const REGSTR_PATH_FLOATINGPOINTPROCESSOR = "HARDWARE\\DESCRIPTION\\System\\FloatingPointProcessor";
pub const REGSTR_PATH_FLOATINGPOINTPROCESSOR0 = "HARDWARE\\DESCRIPTION\\System\\FloatingPointProcessor\\0";
pub const REGSTR_PATH_COMPUTRNAME = "System\\CurrentControlSet\\Control\\ComputerName\\ComputerName";
pub const REGSTR_VAL_COMPUTRNAME = "ComputerName";
pub const REGSTR_PATH_SHUTDOWN = "System\\CurrentControlSet\\Control\\Shutdown";
pub const REGSTR_VAL_FORCEREBOOT = "ForceReboot";
pub const REGSTR_VAL_SETUPPROGRAMRAN = "SetupProgramRan";
pub const REGSTR_VAL_DOES_POLLING = "PollingSupportNeeded";
pub const REGSTR_PATH_KNOWNDLLS = "System\\CurrentControlSet\\Control\\SessionManager\\KnownDLLs";
pub const REGSTR_PATH_KNOWN16DLLS = "System\\CurrentControlSet\\Control\\SessionManager\\Known16DLLs";
pub const REGSTR_PATH_CHECKVERDLLS = "System\\CurrentControlSet\\Control\\SessionManager\\CheckVerDLLs";
pub const REGSTR_PATH_WARNVERDLLS = "System\\CurrentControlSet\\Control\\SessionManager\\WarnVerDLLs";
pub const REGSTR_PATH_HACKINIFILE = "System\\CurrentControlSet\\Control\\SessionManager\\HackIniFiles";
pub const REGSTR_PATH_CHECKBADAPPS = "System\\CurrentControlSet\\Control\\SessionManager\\CheckBadApps";
pub const REGSTR_PATH_APPPATCH = "System\\CurrentControlSet\\Control\\SessionManager\\AppPatches";
pub const REGSTR_PATH_CHECKBADAPPS400 = "System\\CurrentControlSet\\Control\\SessionManager\\CheckBadApps400";
pub const REGSTR_PATH_KNOWNVXDS = "System\\CurrentControlSet\\Control\\SessionManager\\KnownVxDs";
pub const REGSTR_VAL_UNINSTALLER_DISPLAYNAME = "DisplayName";
pub const REGSTR_VAL_UNINSTALLER_COMMANDLINE = "UninstallString";
pub const REGSTR_VAL_REINSTALL_DISPLAYNAME = "DisplayName";
pub const REGSTR_VAL_REINSTALL_STRING = "ReinstallString";
pub const REGSTR_VAL_REINSTALL_DEVICEINSTANCEIDS = "DeviceInstanceIds";
pub const REGSTR_PATH_DESKTOP = "Control Panel\\Desktop";
pub const REGSTR_PATH_MOUSE = "Control Panel\\Mouse";
pub const REGSTR_PATH_KEYBOARD = "Control Panel\\Keyboard";
pub const REGSTR_PATH_COLORS = "Control Panel\\Colors";
pub const REGSTR_PATH_SOUND = "Control Panel\\Sound";
pub const REGSTR_PATH_METRICS = "Control Panel\\Desktop\\WindowMetrics";
pub const REGSTR_PATH_ICONS = "Control Panel\\Icons";
pub const REGSTR_PATH_CURSORS = "Control Panel\\Cursors";
pub const REGSTR_PATH_CHECKDISK = "Software\\Microsoft\\Windows\\CurrentVersion\\Applets\\Check Drive";
pub const REGSTR_PATH_CHECKDISKSET = "Settings";
pub const REGSTR_PATH_CHECKDISKUDRVS = "NoUnknownDDErrDrvs";
pub const REGSTR_PATH_FAULT = "Software\\Microsoft\\Windows\\CurrentVersion\\Fault";
pub const REGSTR_VAL_FAULT_LOGFILE = "LogFile";
pub const REGSTR_PATH_AEDEBUG = "Software\\Microsoft\\Windows NT\\CurrentVersion\\AeDebug";
pub const REGSTR_VAL_AEDEBUG_DEBUGGER = "Debugger";
pub const REGSTR_VAL_AEDEBUG_AUTO = "Auto";
pub const REGSTR_PATH_GRPCONV = "Software\\Microsoft\\Windows\\CurrentVersion\\GrpConv";
pub const REGSTR_VAL_REGITEMDELETEMESSAGE = "Removal Message";
pub const REGSTR_PATH_LASTCHECK = "Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\LastCheck";
pub const REGSTR_PATH_LASTOPTIMIZE = "Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\LastOptimize";
pub const REGSTR_PATH_LASTBACKUP = "Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\LastBackup";
pub const REGSTR_PATH_CHKLASTCHECK = "Software\\Microsoft\\Windows\\CurrentVersion\\Applets\\Check Drive\\LastCheck";
pub const REGSTR_PATH_CHKLASTSURFAN = "Software\\Microsoft\\Windows\\CurrentVersion\\Applets\\Check Drive\\LastSurfaceAnalysis";
pub const DTRESULTOK = @as(u32, 0);
pub const DTRESULTFIX = @as(u32, 1);
pub const DTRESULTPROB = @as(u32, 2);
pub const DTRESULTPART = @as(u32, 3);
pub const REGSTR_KEY_SHARES = "Software\\Microsoft\\Windows\\CurrentVersion\\Network\\LanMan";
pub const REGSTR_VAL_SHARES_FLAGS = "Flags";
pub const REGSTR_VAL_SHARES_TYPE = "Type";
pub const REGSTR_VAL_SHARES_PATH = "Path";
pub const REGSTR_VAL_SHARES_REMARK = "Remark";
pub const REGSTR_VAL_SHARES_RW_PASS = "Parm1";
pub const REGSTR_VAL_SHARES_RO_PASS = "Parm2";
pub const REGSTR_PATH_PRINT = "System\\CurrentControlSet\\Control\\Print";
pub const REGSTR_PATH_PRINTERS = "System\\CurrentControlSet\\Control\\Print\\Printers";
pub const REGSTR_PATH_PROVIDERS = "System\\CurrentControlSet\\Control\\Print\\Providers";
pub const REGSTR_PATH_MONITORS = "System\\CurrentControlSet\\Control\\Print\\Monitors";
pub const REGSTR_PATH_ENVIRONMENTS = "System\\CurrentControlSet\\Control\\Print\\Environments";
pub const REGSTR_VAL_START_ON_BOOT = "StartOnBoot";
pub const REGSTR_VAL_PRINTERS_MASK = "PrintersMask";
pub const REGSTR_VAL_DOS_SPOOL_MASK = "DOSSpoolMask";
pub const REGSTR_KEY_CURRENT_ENV = "\\Windows 4.0";
pub const REGSTR_KEY_DRIVERS = "\\Drivers";
pub const REGSTR_KEY_PRINT_PROC = "\\Print Processors";
pub const REGSTR_PATH_EVENTLABELS = "AppEvents\\EventLabels";
pub const REGSTR_PATH_SCHEMES = "AppEvents\\Schemes";
pub const REGSTR_PATH_MULTIMEDIA_AUDIO = "Software\\Microsoft\\Multimedia\\Audio";
pub const REGSTR_KEY_JOYCURR = "CurrentJoystickSettings";
pub const REGSTR_KEY_JOYSETTINGS = "JoystickSettings";
pub const REGSTR_VAL_JOYUSERVALUES = "JoystickUserValues";
pub const REGSTR_VAL_JOYCALLOUT = "JoystickCallout";
pub const REGSTR_VAL_JOYNCONFIG = "Joystick%dConfiguration";
pub const REGSTR_VAL_JOYNOEMNAME = "Joystick%dOEMName";
pub const REGSTR_VAL_JOYNOEMCALLOUT = "Joystick%dOEMCallout";
pub const REGSTR_VAL_JOYOEMCALLOUT = "OEMCallout";
pub const REGSTR_VAL_JOYOEMNAME = "OEMName";
pub const REGSTR_VAL_JOYOEMDATA = "OEMData";
pub const REGSTR_VAL_JOYOEMXYLABEL = "OEMXYLabel";
pub const REGSTR_VAL_JOYOEMZLABEL = "OEMZLabel";
pub const REGSTR_VAL_JOYOEMRLABEL = "OEMRLabel";
pub const REGSTR_VAL_JOYOEMPOVLABEL = "OEMPOVLabel";
pub const REGSTR_VAL_JOYOEMULABEL = "OEMULabel";
pub const REGSTR_VAL_JOYOEMVLABEL = "OEMVLabel";
pub const REGSTR_VAL_JOYOEMTESTMOVEDESC = "OEMTestMoveDesc";
pub const REGSTR_VAL_JOYOEMTESTBUTTONDESC = "OEMTestButtonDesc";
pub const REGSTR_VAL_JOYOEMTESTMOVECAP = "OEMTestMoveCap";
pub const REGSTR_VAL_JOYOEMTESTBUTTONCAP = "OEMTestButtonCap";
pub const REGSTR_VAL_JOYOEMTESTWINCAP = "OEMTestWinCap";
pub const REGSTR_VAL_JOYOEMCALCAP = "OEMCalCap";
pub const REGSTR_VAL_JOYOEMCALWINCAP = "OEMCalWinCap";
pub const REGSTR_VAL_JOYOEMCAL1 = "OEMCal1";
pub const REGSTR_VAL_JOYOEMCAL2 = "OEMCal2";
pub const REGSTR_VAL_JOYOEMCAL3 = "OEMCal3";
pub const REGSTR_VAL_JOYOEMCAL4 = "OEMCal4";
pub const REGSTR_VAL_JOYOEMCAL5 = "OEMCal5";
pub const REGSTR_VAL_JOYOEMCAL6 = "OEMCal6";
pub const REGSTR_VAL_JOYOEMCAL7 = "OEMCal7";
pub const REGSTR_VAL_JOYOEMCAL8 = "OEMCal8";
pub const REGSTR_VAL_JOYOEMCAL9 = "OEMCal9";
pub const REGSTR_VAL_JOYOEMCAL10 = "OEMCal10";
pub const REGSTR_VAL_JOYOEMCAL11 = "OEMCal11";
pub const REGSTR_VAL_JOYOEMCAL12 = "OEMCal12";
pub const REGSTR_VAL_AUDIO_BITMAP = "bitmap";
pub const REGSTR_VAL_AUDIO_ICON = "icon";
pub const REGSTR_PATH_DEVICEINSTALLER = "Software\\Microsoft\\Windows\\CurrentVersion\\Device Installer";
pub const REGSTR_PATH_DIFX = "Software\\Microsoft\\Windows\\CurrentVersion\\DIFX";
pub const REGSTR_VAL_SEARCHOPTIONS = "SearchOptions";
pub const REGSTR_PATH_BIOSINFO = "System\\CurrentControlSet\\Control\\BiosInfo";
pub const REGSTR_PATH_PCIIR = "System\\CurrentControlSet\\Control\\Pnp\\PciIrqRouting";
pub const REGSTR_VAL_OPTIONS = "Options";
pub const REGSTR_VAL_STAT = "Status";
pub const REGSTR_VAL_TABLE_STAT = "TableStatus";
pub const REGSTR_VAL_MINIPORT_STAT = "MiniportStatus";
pub const PIR_OPTION_ENABLED = @as(u32, 1);
pub const PIR_OPTION_REGISTRY = @as(u32, 2);
pub const PIR_OPTION_MSSPEC = @as(u32, 4);
pub const PIR_OPTION_REALMODE = @as(u32, 8);
pub const PIR_OPTION_DEFAULT = @as(u32, 15);
pub const PIR_STATUS_ERROR = @as(u32, 0);
pub const PIR_STATUS_ENABLED = @as(u32, 1);
pub const PIR_STATUS_DISABLED = @as(u32, 2);
pub const PIR_STATUS_MAX = @as(u32, 3);
pub const PIR_STATUS_TABLE_REGISTRY = @as(u32, 0);
pub const PIR_STATUS_TABLE_MSSPEC = @as(u32, 1);
pub const PIR_STATUS_TABLE_REALMODE = @as(u32, 2);
pub const PIR_STATUS_TABLE_NONE = @as(u32, 3);
pub const PIR_STATUS_TABLE_ERROR = @as(u32, 4);
pub const PIR_STATUS_TABLE_BAD = @as(u32, 5);
pub const PIR_STATUS_TABLE_SUCCESS = @as(u32, 6);
pub const PIR_STATUS_TABLE_MAX = @as(u32, 7);
pub const PIR_STATUS_MINIPORT_NORMAL = @as(u32, 0);
pub const PIR_STATUS_MINIPORT_COMPATIBLE = @as(u32, 1);
pub const PIR_STATUS_MINIPORT_OVERRIDE = @as(u32, 2);
pub const PIR_STATUS_MINIPORT_NONE = @as(u32, 3);
pub const PIR_STATUS_MINIPORT_ERROR = @as(u32, 4);
pub const PIR_STATUS_MINIPORT_NOKEY = @as(u32, 5);
pub const PIR_STATUS_MINIPORT_SUCCESS = @as(u32, 6);
pub const PIR_STATUS_MINIPORT_INVALID = @as(u32, 7);
pub const PIR_STATUS_MINIPORT_MAX = @as(u32, 8);
pub const REGSTR_PATH_LASTGOOD = "System\\LastKnownGoodRecovery\\LastGood";
pub const REGSTR_PATH_LASTGOODTMP = "System\\LastKnownGoodRecovery\\LastGood.Tmp";
pub const LASTGOOD_OPERATION = @as(u32, 255);
pub const LASTGOOD_OPERATION_NOPOSTPROC = @as(u32, 0);
pub const LASTGOOD_OPERATION_DELETE = @as(u32, 1);

//--------------------------------------------------------------------------------
// Section: Types (17)
//--------------------------------------------------------------------------------
pub const REG_VALUE_TYPE = enum(u32) {
    NONE = 0,
    SZ = 1,
    EXPAND_SZ = 2,
    BINARY = 3,
    DWORD = 4,
    DWORD_BIG_ENDIAN = 5,
    LINK = 6,
    MULTI_SZ = 7,
    RESOURCE_LIST = 8,
    FULL_RESOURCE_DESCRIPTOR = 9,
    RESOURCE_REQUIREMENTS_LIST = 10,
    QWORD = 11,
    pub const DWORD_LITTLE_ENDIAN = .DWORD;
    pub const QWORD_LITTLE_ENDIAN = .QWORD;
};
pub const REG_NONE = REG_VALUE_TYPE.NONE;
pub const REG_SZ = REG_VALUE_TYPE.SZ;
pub const REG_EXPAND_SZ = REG_VALUE_TYPE.EXPAND_SZ;
pub const REG_BINARY = REG_VALUE_TYPE.BINARY;
pub const REG_DWORD = REG_VALUE_TYPE.DWORD;
pub const REG_DWORD_LITTLE_ENDIAN = REG_VALUE_TYPE.DWORD;
pub const REG_DWORD_BIG_ENDIAN = REG_VALUE_TYPE.DWORD_BIG_ENDIAN;
pub const REG_LINK = REG_VALUE_TYPE.LINK;
pub const REG_MULTI_SZ = REG_VALUE_TYPE.MULTI_SZ;
pub const REG_RESOURCE_LIST = REG_VALUE_TYPE.RESOURCE_LIST;
pub const REG_FULL_RESOURCE_DESCRIPTOR = REG_VALUE_TYPE.FULL_RESOURCE_DESCRIPTOR;
pub const REG_RESOURCE_REQUIREMENTS_LIST = REG_VALUE_TYPE.RESOURCE_REQUIREMENTS_LIST;
pub const REG_QWORD = REG_VALUE_TYPE.QWORD;
pub const REG_QWORD_LITTLE_ENDIAN = REG_VALUE_TYPE.QWORD;

pub const REG_SAM_FLAGS = packed struct(u32) {
    QUERY_VALUE: u1 = 0,
    SET_VALUE: u1 = 0,
    CREATE_SUB_KEY: u1 = 0,
    ENUMERATE_SUB_KEYS: u1 = 0,
    NOTIFY: u1 = 0,
    CREATE_LINK: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    WOW64_64KEY: u1 = 0,
    WOW64_32KEY: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const KEY_QUERY_VALUE = REG_SAM_FLAGS{ .QUERY_VALUE = 1 };
pub const KEY_SET_VALUE = REG_SAM_FLAGS{ .SET_VALUE = 1 };
pub const KEY_CREATE_SUB_KEY = REG_SAM_FLAGS{ .CREATE_SUB_KEY = 1 };
pub const KEY_ENUMERATE_SUB_KEYS = REG_SAM_FLAGS{ .ENUMERATE_SUB_KEYS = 1 };
pub const KEY_NOTIFY = REG_SAM_FLAGS{ .NOTIFY = 1 };
pub const KEY_CREATE_LINK = REG_SAM_FLAGS{ .CREATE_LINK = 1 };
pub const KEY_WOW64_32KEY = REG_SAM_FLAGS{ .WOW64_32KEY = 1 };
pub const KEY_WOW64_64KEY = REG_SAM_FLAGS{ .WOW64_64KEY = 1 };
pub const KEY_WOW64_RES = REG_SAM_FLAGS{
    .WOW64_64KEY = 1,
    .WOW64_32KEY = 1,
};
pub const KEY_READ = REG_SAM_FLAGS{
    .QUERY_VALUE = 1,
    .ENUMERATE_SUB_KEYS = 1,
    .NOTIFY = 1,
    ._17 = 1,
};
pub const KEY_WRITE = REG_SAM_FLAGS{
    .SET_VALUE = 1,
    .CREATE_SUB_KEY = 1,
    ._17 = 1,
};
pub const KEY_EXECUTE = REG_SAM_FLAGS{
    .QUERY_VALUE = 1,
    .ENUMERATE_SUB_KEYS = 1,
    .NOTIFY = 1,
    ._17 = 1,
};
pub const KEY_ALL_ACCESS = REG_SAM_FLAGS{
    .QUERY_VALUE = 1,
    .SET_VALUE = 1,
    .CREATE_SUB_KEY = 1,
    .ENUMERATE_SUB_KEYS = 1,
    .NOTIFY = 1,
    .CREATE_LINK = 1,
    ._16 = 1,
    ._17 = 1,
    ._18 = 1,
    ._19 = 1,
};

pub const REG_OPEN_CREATE_OPTIONS = packed struct(u32) {
    VOLATILE: u1 = 0,
    CREATE_LINK: u1 = 0,
    BACKUP_RESTORE: u1 = 0,
    OPEN_LINK: u1 = 0,
    DONT_VIRTUALIZE: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
// TODO: enum 'REG_OPEN_CREATE_OPTIONS' has known issues with its value aliases

pub const REG_CREATE_KEY_DISPOSITION = enum(u32) {
    CREATED_NEW_KEY = 1,
    OPENED_EXISTING_KEY = 2,
};
pub const REG_CREATED_NEW_KEY = REG_CREATE_KEY_DISPOSITION.CREATED_NEW_KEY;
pub const REG_OPENED_EXISTING_KEY = REG_CREATE_KEY_DISPOSITION.OPENED_EXISTING_KEY;

pub const REG_SAVE_FORMAT = enum(u32) {
    STANDARD_FORMAT = 1,
    LATEST_FORMAT = 2,
    NO_COMPRESSION = 4,
};
pub const REG_STANDARD_FORMAT = REG_SAVE_FORMAT.STANDARD_FORMAT;
pub const REG_LATEST_FORMAT = REG_SAVE_FORMAT.LATEST_FORMAT;
pub const REG_NO_COMPRESSION = REG_SAVE_FORMAT.NO_COMPRESSION;

pub const REG_RESTORE_KEY_FLAGS = enum(i32) {
    FORCE_RESTORE = 8,
    WHOLE_HIVE_VOLATILE = 1,
};
pub const REG_FORCE_RESTORE = REG_RESTORE_KEY_FLAGS.FORCE_RESTORE;
pub const REG_WHOLE_HIVE_VOLATILE = REG_RESTORE_KEY_FLAGS.WHOLE_HIVE_VOLATILE;

pub const REG_NOTIFY_FILTER = packed struct(u32) {
    CHANGE_NAME: u1 = 0,
    CHANGE_ATTRIBUTES: u1 = 0,
    CHANGE_LAST_SET: u1 = 0,
    CHANGE_SECURITY: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    THREAD_AGNOSTIC: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const REG_NOTIFY_CHANGE_NAME = REG_NOTIFY_FILTER{ .CHANGE_NAME = 1 };
pub const REG_NOTIFY_CHANGE_ATTRIBUTES = REG_NOTIFY_FILTER{ .CHANGE_ATTRIBUTES = 1 };
pub const REG_NOTIFY_CHANGE_LAST_SET = REG_NOTIFY_FILTER{ .CHANGE_LAST_SET = 1 };
pub const REG_NOTIFY_CHANGE_SECURITY = REG_NOTIFY_FILTER{ .CHANGE_SECURITY = 1 };
pub const REG_NOTIFY_THREAD_AGNOSTIC = REG_NOTIFY_FILTER{ .THREAD_AGNOSTIC = 1 };

pub const RRF_RT = packed struct(u32) {
    REG_NONE: u1 = 0,
    REG_SZ: u1 = 0,
    REG_EXPAND_SZ: u1 = 0,
    REG_BINARY: u1 = 0,
    REG_DWORD: u1 = 0,
    REG_MULTI_SZ: u1 = 0,
    REG_QWORD: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const RRF_RT_ANY = RRF_RT{
    .REG_NONE = 1,
    .REG_SZ = 1,
    .REG_EXPAND_SZ = 1,
    .REG_BINARY = 1,
    .REG_DWORD = 1,
    .REG_MULTI_SZ = 1,
    .REG_QWORD = 1,
    ._7 = 1,
    ._8 = 1,
    ._9 = 1,
    ._10 = 1,
    ._11 = 1,
    ._12 = 1,
    ._13 = 1,
    ._14 = 1,
    ._15 = 1,
};
pub const RRF_RT_DWORD = RRF_RT{
    .REG_BINARY = 1,
    .REG_DWORD = 1,
};
pub const RRF_RT_QWORD = RRF_RT{
    .REG_BINARY = 1,
    .REG_QWORD = 1,
};
pub const RRF_RT_REG_BINARY = RRF_RT{ .REG_BINARY = 1 };
pub const RRF_RT_REG_DWORD = RRF_RT{ .REG_DWORD = 1 };
pub const RRF_RT_REG_EXPAND_SZ = RRF_RT{ .REG_EXPAND_SZ = 1 };
pub const RRF_RT_REG_MULTI_SZ = RRF_RT{ .REG_MULTI_SZ = 1 };
pub const RRF_RT_REG_NONE = RRF_RT{ .REG_NONE = 1 };
pub const RRF_RT_REG_QWORD = RRF_RT{ .REG_QWORD = 1 };
pub const RRF_RT_REG_SZ = RRF_RT{ .REG_SZ = 1 };

// TODO: this type has a FreeFunc 'RegCloseKey', what can Zig do with this information?
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HKEY = *opaque{};

pub const val_context = extern struct {
    valuelen: i32,
    value_context: ?*anyopaque,
    val_buff_ptr: ?*anyopaque,
};

pub const pvalueA = extern struct {
    pv_valuename: ?PSTR,
    pv_valuelen: i32,
    pv_value_context: ?*anyopaque,
    pv_type: u32,
};

pub const pvalueW = extern struct {
    pv_valuename: ?PWSTR,
    pv_valuelen: i32,
    pv_value_context: ?*anyopaque,
    pv_type: u32,
};

pub const PQUERYHANDLER = *const fn(
    keycontext: ?*anyopaque,
    val_list: ?*val_context,
    num_vals: u32,
    outputbuffer: ?*anyopaque,
    total_outlen: ?*u32,
    input_blen: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const provider_info = extern struct {
    pi_R0_1val: ?PQUERYHANDLER,
    pi_R0_allvals: ?PQUERYHANDLER,
    pi_R3_1val: ?PQUERYHANDLER,
    pi_R3_allvals: ?PQUERYHANDLER,
    pi_flags: u32,
    pi_key_context: ?*anyopaque,
};

pub const VALENTA = extern struct {
    ve_valuename: ?PSTR,
    ve_valuelen: u32,
    ve_valueptr: usize,
    ve_type: REG_VALUE_TYPE,
};

pub const VALENTW = extern struct {
    ve_valuename: ?PWSTR,
    ve_valuelen: u32,
    ve_valueptr: usize,
    ve_type: REG_VALUE_TYPE,
};

pub const DSKTLSYSTEMTIME = extern struct {
    wYear: u16,
    wMonth: u16,
    wDayOfWeek: u16,
    wDay: u16,
    wHour: u16,
    wMinute: u16,
    wSecond: u16,
    wMilliseconds: u16,
    wResult: u16,
};


//--------------------------------------------------------------------------------
// Section: Functions (83)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegCloseKey(
    hKey: ?HKEY,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegOverridePredefKey(
    hKey: ?HKEY,
    hNewHKey: ?HKEY,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegOpenUserClassesRoot(
    hToken: ?HANDLE,
    dwOptions: u32,
    samDesired: u32,
    phkResult: ?*?HKEY,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegOpenCurrentUser(
    samDesired: u32,
    phkResult: ?*?HKEY,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegDisablePredefinedCache(
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegDisablePredefinedCacheEx(
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegConnectRegistryA(
    lpMachineName: ?[*:0]const u8,
    hKey: ?HKEY,
    phkResult: ?*?HKEY,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegConnectRegistryW(
    lpMachineName: ?[*:0]const u16,
    hKey: ?HKEY,
    phkResult: ?*?HKEY,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

pub extern "advapi32" fn RegConnectRegistryExA(
    lpMachineName: ?[*:0]const u8,
    hKey: ?HKEY,
    Flags: u32,
    phkResult: ?*?HKEY,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "advapi32" fn RegConnectRegistryExW(
    lpMachineName: ?[*:0]const u16,
    hKey: ?HKEY,
    Flags: u32,
    phkResult: ?*?HKEY,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegCreateKeyA(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u8,
    phkResult: ?*?HKEY,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegCreateKeyW(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u16,
    phkResult: ?*?HKEY,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegCreateKeyExA(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u8,
    Reserved: u32,
    lpClass: ?PSTR,
    dwOptions: REG_OPEN_CREATE_OPTIONS,
    samDesired: REG_SAM_FLAGS,
    lpSecurityAttributes: ?*const SECURITY_ATTRIBUTES,
    phkResult: ?*?HKEY,
    lpdwDisposition: ?*REG_CREATE_KEY_DISPOSITION,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegCreateKeyExW(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u16,
    Reserved: u32,
    lpClass: ?PWSTR,
    dwOptions: REG_OPEN_CREATE_OPTIONS,
    samDesired: REG_SAM_FLAGS,
    lpSecurityAttributes: ?*const SECURITY_ATTRIBUTES,
    phkResult: ?*?HKEY,
    lpdwDisposition: ?*REG_CREATE_KEY_DISPOSITION,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegCreateKeyTransactedA(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u8,
    Reserved: u32,
    lpClass: ?PSTR,
    dwOptions: REG_OPEN_CREATE_OPTIONS,
    samDesired: REG_SAM_FLAGS,
    lpSecurityAttributes: ?*const SECURITY_ATTRIBUTES,
    phkResult: ?*?HKEY,
    lpdwDisposition: ?*REG_CREATE_KEY_DISPOSITION,
    hTransaction: ?HANDLE,
    pExtendedParemeter: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegCreateKeyTransactedW(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u16,
    Reserved: u32,
    lpClass: ?PWSTR,
    dwOptions: REG_OPEN_CREATE_OPTIONS,
    samDesired: REG_SAM_FLAGS,
    lpSecurityAttributes: ?*const SECURITY_ATTRIBUTES,
    phkResult: ?*?HKEY,
    lpdwDisposition: ?*REG_CREATE_KEY_DISPOSITION,
    hTransaction: ?HANDLE,
    pExtendedParemeter: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegDeleteKeyA(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegDeleteKeyW(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegDeleteKeyExA(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u8,
    samDesired: u32,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegDeleteKeyExW(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u16,
    samDesired: u32,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegDeleteKeyTransactedA(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u8,
    samDesired: u32,
    Reserved: u32,
    hTransaction: ?HANDLE,
    pExtendedParameter: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegDeleteKeyTransactedW(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u16,
    samDesired: u32,
    Reserved: u32,
    hTransaction: ?HANDLE,
    pExtendedParameter: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegDisableReflectionKey(
    hBase: ?HKEY,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegEnableReflectionKey(
    hBase: ?HKEY,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegQueryReflectionKey(
    hBase: ?HKEY,
    bIsReflectionDisabled: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegDeleteValueA(
    hKey: ?HKEY,
    lpValueName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegDeleteValueW(
    hKey: ?HKEY,
    lpValueName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegEnumKeyA(
    hKey: ?HKEY,
    dwIndex: u32,
    lpName: ?[*:0]u8,
    cchName: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegEnumKeyW(
    hKey: ?HKEY,
    dwIndex: u32,
    lpName: ?[*:0]u16,
    cchName: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegEnumKeyExA(
    hKey: ?HKEY,
    dwIndex: u32,
    lpName: ?[*:0]u8,
    lpcchName: ?*u32,
    lpReserved: ?*u32,
    lpClass: ?[*:0]u8,
    lpcchClass: ?*u32,
    lpftLastWriteTime: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegEnumKeyExW(
    hKey: ?HKEY,
    dwIndex: u32,
    lpName: ?[*:0]u16,
    lpcchName: ?*u32,
    lpReserved: ?*u32,
    lpClass: ?[*:0]u16,
    lpcchClass: ?*u32,
    lpftLastWriteTime: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegEnumValueA(
    hKey: ?HKEY,
    dwIndex: u32,
    lpValueName: ?[*:0]u8,
    lpcchValueName: ?*u32,
    lpReserved: ?*u32,
    lpType: ?*u32,
    // TODO: what to do with BytesParamIndex 7?
    lpData: ?*u8,
    lpcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegEnumValueW(
    hKey: ?HKEY,
    dwIndex: u32,
    lpValueName: ?[*:0]u16,
    lpcchValueName: ?*u32,
    lpReserved: ?*u32,
    lpType: ?*u32,
    // TODO: what to do with BytesParamIndex 7?
    lpData: ?*u8,
    lpcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegFlushKey(
    hKey: ?HKEY,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn RegGetKeySecurity(
    hKey: ?HKEY,
    SecurityInformation: u32,
    // TODO: what to do with BytesParamIndex 3?
    pSecurityDescriptor: ?PSECURITY_DESCRIPTOR,
    lpcbSecurityDescriptor: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegLoadKeyA(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u8,
    lpFile: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegLoadKeyW(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u16,
    lpFile: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegNotifyChangeKeyValue(
    hKey: ?HKEY,
    bWatchSubtree: BOOL,
    dwNotifyFilter: REG_NOTIFY_FILTER,
    hEvent: ?HANDLE,
    fAsynchronous: BOOL,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegOpenKeyA(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u8,
    phkResult: ?*?HKEY,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegOpenKeyW(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u16,
    phkResult: ?*?HKEY,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegOpenKeyExA(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u8,
    ulOptions: u32,
    samDesired: REG_SAM_FLAGS,
    phkResult: ?*?HKEY,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegOpenKeyExW(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u16,
    ulOptions: u32,
    samDesired: REG_SAM_FLAGS,
    phkResult: ?*?HKEY,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegOpenKeyTransactedA(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u8,
    ulOptions: u32,
    samDesired: REG_SAM_FLAGS,
    phkResult: ?*?HKEY,
    hTransaction: ?HANDLE,
    pExtendedParemeter: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegOpenKeyTransactedW(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u16,
    ulOptions: u32,
    samDesired: REG_SAM_FLAGS,
    phkResult: ?*?HKEY,
    hTransaction: ?HANDLE,
    pExtendedParemeter: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegQueryInfoKeyA(
    hKey: ?HKEY,
    lpClass: ?[*:0]u8,
    lpcchClass: ?*u32,
    lpReserved: ?*u32,
    lpcSubKeys: ?*u32,
    lpcbMaxSubKeyLen: ?*u32,
    lpcbMaxClassLen: ?*u32,
    lpcValues: ?*u32,
    lpcbMaxValueNameLen: ?*u32,
    lpcbMaxValueLen: ?*u32,
    lpcbSecurityDescriptor: ?*u32,
    lpftLastWriteTime: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegQueryInfoKeyW(
    hKey: ?HKEY,
    lpClass: ?[*:0]u16,
    lpcchClass: ?*u32,
    lpReserved: ?*u32,
    lpcSubKeys: ?*u32,
    lpcbMaxSubKeyLen: ?*u32,
    lpcbMaxClassLen: ?*u32,
    lpcValues: ?*u32,
    lpcbMaxValueNameLen: ?*u32,
    lpcbMaxValueLen: ?*u32,
    lpcbSecurityDescriptor: ?*u32,
    lpftLastWriteTime: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegQueryValueA(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u8,
    // TODO: what to do with BytesParamIndex 3?
    lpData: ?PSTR,
    lpcbData: ?*i32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegQueryValueW(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u16,
    // TODO: what to do with BytesParamIndex 3?
    lpData: ?PWSTR,
    lpcbData: ?*i32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegQueryMultipleValuesA(
    hKey: ?HKEY,
    val_list: [*]VALENTA,
    num_vals: u32,
    // TODO: what to do with BytesParamIndex 4?
    lpValueBuf: ?PSTR,
    ldwTotsize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegQueryMultipleValuesW(
    hKey: ?HKEY,
    val_list: [*]VALENTW,
    num_vals: u32,
    // TODO: what to do with BytesParamIndex 4?
    lpValueBuf: ?PWSTR,
    ldwTotsize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegQueryValueExA(
    hKey: ?HKEY,
    lpValueName: ?[*:0]const u8,
    lpReserved: ?*u32,
    lpType: ?*REG_VALUE_TYPE,
    // TODO: what to do with BytesParamIndex 5?
    lpData: ?*u8,
    lpcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegQueryValueExW(
    hKey: ?HKEY,
    lpValueName: ?[*:0]const u16,
    lpReserved: ?*u32,
    lpType: ?*REG_VALUE_TYPE,
    // TODO: what to do with BytesParamIndex 5?
    lpData: ?*u8,
    lpcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegReplaceKeyA(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u8,
    lpNewFile: ?[*:0]const u8,
    lpOldFile: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegReplaceKeyW(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u16,
    lpNewFile: ?[*:0]const u16,
    lpOldFile: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegRestoreKeyA(
    hKey: ?HKEY,
    lpFile: ?[*:0]const u8,
    dwFlags: REG_RESTORE_KEY_FLAGS,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegRestoreKeyW(
    hKey: ?HKEY,
    lpFile: ?[*:0]const u16,
    dwFlags: REG_RESTORE_KEY_FLAGS,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

pub extern "advapi32" fn RegRenameKey(
    hKey: ?HKEY,
    lpSubKeyName: ?[*:0]const u16,
    lpNewKeyName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegSaveKeyA(
    hKey: ?HKEY,
    lpFile: ?[*:0]const u8,
    lpSecurityAttributes: ?*const SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegSaveKeyW(
    hKey: ?HKEY,
    lpFile: ?[*:0]const u16,
    lpSecurityAttributes: ?*const SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn RegSetKeySecurity(
    hKey: ?HKEY,
    SecurityInformation: u32,
    pSecurityDescriptor: ?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegSetValueA(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u8,
    dwType: REG_VALUE_TYPE,
    // TODO: what to do with BytesParamIndex 4?
    lpData: ?[*:0]const u8,
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegSetValueW(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u16,
    dwType: REG_VALUE_TYPE,
    // TODO: what to do with BytesParamIndex 4?
    lpData: ?[*:0]const u16,
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegSetValueExA(
    hKey: ?HKEY,
    lpValueName: ?[*:0]const u8,
    Reserved: u32,
    dwType: REG_VALUE_TYPE,
    // TODO: what to do with BytesParamIndex 5?
    lpData: ?*const u8,
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegSetValueExW(
    hKey: ?HKEY,
    lpValueName: ?[*:0]const u16,
    Reserved: u32,
    dwType: REG_VALUE_TYPE,
    // TODO: what to do with BytesParamIndex 5?
    lpData: ?*const u8,
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegUnLoadKeyA(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "advapi32" fn RegUnLoadKeyW(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegDeleteKeyValueA(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u8,
    lpValueName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegDeleteKeyValueW(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u16,
    lpValueName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegSetKeyValueA(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u8,
    lpValueName: ?[*:0]const u8,
    dwType: u32,
    // TODO: what to do with BytesParamIndex 5?
    lpData: ?*const anyopaque,
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegSetKeyValueW(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u16,
    lpValueName: ?[*:0]const u16,
    dwType: u32,
    // TODO: what to do with BytesParamIndex 5?
    lpData: ?*const anyopaque,
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegDeleteTreeA(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegDeleteTreeW(
    hKey: ?HKEY,
    lpSubKey: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegCopyTreeA(
    hKeySrc: ?HKEY,
    lpSubKey: ?[*:0]const u8,
    hKeyDest: ?HKEY,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegGetValueA(
    hkey: ?HKEY,
    lpSubKey: ?[*:0]const u8,
    lpValue: ?[*:0]const u8,
    dwFlags: RRF_RT,
    pdwType: ?*u32,
    // TODO: what to do with BytesParamIndex 6?
    pvData: ?*anyopaque,
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegGetValueW(
    hkey: ?HKEY,
    lpSubKey: ?[*:0]const u16,
    lpValue: ?[*:0]const u16,
    dwFlags: RRF_RT,
    pdwType: ?*u32,
    // TODO: what to do with BytesParamIndex 6?
    pvData: ?*anyopaque,
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegCopyTreeW(
    hKeySrc: ?HKEY,
    lpSubKey: ?[*:0]const u16,
    hKeyDest: ?HKEY,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegLoadMUIStringA(
    hKey: ?HKEY,
    pszValue: ?[*:0]const u8,
    // TODO: what to do with BytesParamIndex 3?
    pszOutBuf: ?PSTR,
    cbOutBuf: u32,
    pcbData: ?*u32,
    Flags: u32,
    pszDirectory: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegLoadMUIStringW(
    hKey: ?HKEY,
    pszValue: ?[*:0]const u16,
    // TODO: what to do with BytesParamIndex 3?
    pszOutBuf: ?PWSTR,
    cbOutBuf: u32,
    pcbData: ?*u32,
    Flags: u32,
    pszDirectory: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegLoadAppKeyA(
    lpFile: ?[*:0]const u8,
    phkResult: ?*?HKEY,
    samDesired: u32,
    dwOptions: u32,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn RegLoadAppKeyW(
    lpFile: ?[*:0]const u16,
    phkResult: ?*?HKEY,
    samDesired: u32,
    dwOptions: u32,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn RegSaveKeyExA(
    hKey: ?HKEY,
    lpFile: ?[*:0]const u8,
    lpSecurityAttributes: ?*const SECURITY_ATTRIBUTES,
    Flags: REG_SAVE_FORMAT,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn RegSaveKeyExW(
    hKey: ?HKEY,
    lpFile: ?[*:0]const u16,
    lpSecurityAttributes: ?*const SECURITY_ATTRIBUTES,
    Flags: REG_SAVE_FORMAT,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

pub extern "api-ms-win-core-state-helpers-l1-1-0" fn GetRegistryValueWithFallbackW(
    hkeyPrimary: ?HKEY,
    pwszPrimarySubKey: ?[*:0]const u16,
    hkeyFallback: ?HKEY,
    pwszFallbackSubKey: ?[*:0]const u16,
    pwszValue: ?[*:0]const u16,
    dwFlags: u32,
    pdwType: ?*u32,
    pvData: ?*anyopaque,
    cbDataIn: u32,
    pcbDataOut: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (36)
//--------------------------------------------------------------------------------
pub const pvalue = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().pvalueA,
    .wide => @This().pvalueW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'pvalue' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const VALENT = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().VALENTA,
    .wide => @This().VALENTW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'VALENT' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegConnectRegistry = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegConnectRegistryA,
    .wide => @This().RegConnectRegistryW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegConnectRegistry' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegConnectRegistryEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegConnectRegistryExA,
    .wide => @This().RegConnectRegistryExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegConnectRegistryEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegCreateKey = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegCreateKeyA,
    .wide => @This().RegCreateKeyW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegCreateKey' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegCreateKeyEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegCreateKeyExA,
    .wide => @This().RegCreateKeyExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegCreateKeyEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegCreateKeyTransacted = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegCreateKeyTransactedA,
    .wide => @This().RegCreateKeyTransactedW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegCreateKeyTransacted' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegDeleteKey = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegDeleteKeyA,
    .wide => @This().RegDeleteKeyW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegDeleteKey' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegDeleteKeyEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegDeleteKeyExA,
    .wide => @This().RegDeleteKeyExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegDeleteKeyEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegDeleteKeyTransacted = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegDeleteKeyTransactedA,
    .wide => @This().RegDeleteKeyTransactedW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegDeleteKeyTransacted' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegDeleteValue = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegDeleteValueA,
    .wide => @This().RegDeleteValueW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegDeleteValue' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegEnumKey = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegEnumKeyA,
    .wide => @This().RegEnumKeyW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegEnumKey' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegEnumKeyEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegEnumKeyExA,
    .wide => @This().RegEnumKeyExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegEnumKeyEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegEnumValue = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegEnumValueA,
    .wide => @This().RegEnumValueW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegEnumValue' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegLoadKey = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegLoadKeyA,
    .wide => @This().RegLoadKeyW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegLoadKey' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegOpenKey = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegOpenKeyA,
    .wide => @This().RegOpenKeyW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegOpenKey' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegOpenKeyEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegOpenKeyExA,
    .wide => @This().RegOpenKeyExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegOpenKeyEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegOpenKeyTransacted = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegOpenKeyTransactedA,
    .wide => @This().RegOpenKeyTransactedW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegOpenKeyTransacted' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegQueryInfoKey = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegQueryInfoKeyA,
    .wide => @This().RegQueryInfoKeyW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegQueryInfoKey' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegQueryValue = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegQueryValueA,
    .wide => @This().RegQueryValueW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegQueryValue' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegQueryMultipleValues = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegQueryMultipleValuesA,
    .wide => @This().RegQueryMultipleValuesW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegQueryMultipleValues' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegQueryValueEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegQueryValueExA,
    .wide => @This().RegQueryValueExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegQueryValueEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegReplaceKey = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegReplaceKeyA,
    .wide => @This().RegReplaceKeyW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegReplaceKey' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegRestoreKey = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegRestoreKeyA,
    .wide => @This().RegRestoreKeyW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegRestoreKey' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegSaveKey = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegSaveKeyA,
    .wide => @This().RegSaveKeyW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegSaveKey' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegSetValue = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegSetValueA,
    .wide => @This().RegSetValueW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegSetValue' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegSetValueEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegSetValueExA,
    .wide => @This().RegSetValueExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegSetValueEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegUnLoadKey = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegUnLoadKeyA,
    .wide => @This().RegUnLoadKeyW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegUnLoadKey' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegDeleteKeyValue = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegDeleteKeyValueA,
    .wide => @This().RegDeleteKeyValueW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegDeleteKeyValue' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegSetKeyValue = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegSetKeyValueA,
    .wide => @This().RegSetKeyValueW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegSetKeyValue' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegDeleteTree = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegDeleteTreeA,
    .wide => @This().RegDeleteTreeW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegDeleteTree' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegCopyTree = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegCopyTreeA,
    .wide => @This().RegCopyTreeW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegCopyTree' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegGetValue = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegGetValueA,
    .wide => @This().RegGetValueW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegGetValue' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegLoadMUIString = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegLoadMUIStringA,
    .wide => @This().RegLoadMUIStringW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegLoadMUIString' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegLoadAppKey = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegLoadAppKeyA,
    .wide => @This().RegLoadAppKeyW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegLoadAppKey' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegSaveKeyEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegSaveKeyExA,
    .wide => @This().RegSaveKeyExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegSaveKeyEx' requires that UNICODE be set to true or false in the root module",
    ),
};
//--------------------------------------------------------------------------------
// Section: Imports (8)
//--------------------------------------------------------------------------------
const BOOL = @import("../foundation.zig").BOOL;
const FILETIME = @import("../foundation.zig").FILETIME;
const HANDLE = @import("../foundation.zig").HANDLE;
const PSECURITY_DESCRIPTOR = @import("../security.zig").PSECURITY_DESCRIPTOR;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;
const SECURITY_ATTRIBUTES = @import("../security.zig").SECURITY_ATTRIBUTES;
const WIN32_ERROR = @import("../foundation.zig").WIN32_ERROR;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PQUERYHANDLER")) { _ = PQUERYHANDLER; }

    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
