//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (5)
//--------------------------------------------------------------------------------
pub const RTL_CORRELATION_VECTOR_STRING_LENGTH = @as(u32, 129);
pub const RTL_CORRELATION_VECTOR_V1_PREFIX_LENGTH = @as(u32, 16);
pub const RTL_CORRELATION_VECTOR_V1_LENGTH = @as(u32, 64);
pub const RTL_CORRELATION_VECTOR_V2_PREFIX_LENGTH = @as(u32, 22);
pub const RTL_CORRELATION_VECTOR_V2_LENGTH = @as(u32, 128);

//--------------------------------------------------------------------------------
// Section: Types (1)
//--------------------------------------------------------------------------------
pub const CORRELATION_VECTOR = extern struct {
    Version: CHAR,
    Vector: [129]CHAR,
};


//--------------------------------------------------------------------------------
// Section: Functions (4)
//--------------------------------------------------------------------------------
pub extern "ntdll" fn RtlInitializeCorrelationVector(
    CorrelationVector: ?*CORRELATION_VECTOR,
    Version: i32,
    Guid: ?*const Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ntdll" fn RtlIncrementCorrelationVector(
    CorrelationVector: ?*CORRELATION_VECTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ntdll" fn RtlExtendCorrelationVector(
    CorrelationVector: ?*CORRELATION_VECTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ntdll" fn RtlValidateCorrelationVector(
    Vector: ?*CORRELATION_VECTOR,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (2)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const CHAR = @import("../foundation.zig").CHAR;

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
