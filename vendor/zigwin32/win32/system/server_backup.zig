//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (3)
//--------------------------------------------------------------------------------
pub const WSB_MAX_OB_STATUS_VALUE_TYPE_PAIR = @as(u32, 5);
pub const WSB_MAX_OB_STATUS_ENTRY = @as(u32, 5);
pub const WSBAPP_ASYNC_IN_PROGRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, 7995396));

//--------------------------------------------------------------------------------
// Section: Types (8)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWsbApplicationBackupSupport_Value = Guid.initString("1eff3510-4a27-46ad-b9e0-08332f0f4f6d");
pub const IID_IWsbApplicationBackupSupport = &IID_IWsbApplicationBackupSupport_Value;
pub const IWsbApplicationBackupSupport = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CheckConsistency: *const fn(
            self: *const IWsbApplicationBackupSupport,
            wszWriterMetadata: ?PWSTR,
            wszComponentName: ?PWSTR,
            wszComponentLogicalPath: ?PWSTR,
            cVolumes: u32,
            rgwszSourceVolumePath: [*]?PWSTR,
            rgwszSnapshotVolumePath: [*]?PWSTR,
            ppAsync: ?*?*IWsbApplicationAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CheckConsistency(self: *const IWsbApplicationBackupSupport, wszWriterMetadata: ?PWSTR, wszComponentName: ?PWSTR, wszComponentLogicalPath: ?PWSTR, cVolumes: u32, rgwszSourceVolumePath: [*]?PWSTR, rgwszSnapshotVolumePath: [*]?PWSTR, ppAsync: ?*?*IWsbApplicationAsync) callconv(.Inline) HRESULT {
        return self.vtable.CheckConsistency(self, wszWriterMetadata, wszComponentName, wszComponentLogicalPath, cVolumes, rgwszSourceVolumePath, rgwszSnapshotVolumePath, ppAsync);
    }
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWsbApplicationRestoreSupport_Value = Guid.initString("8d3bdb38-4ee8-4718-85f9-c7dbc4ab77aa");
pub const IID_IWsbApplicationRestoreSupport = &IID_IWsbApplicationRestoreSupport_Value;
pub const IWsbApplicationRestoreSupport = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PreRestore: *const fn(
            self: *const IWsbApplicationRestoreSupport,
            wszWriterMetadata: ?PWSTR,
            wszComponentName: ?PWSTR,
            wszComponentLogicalPath: ?PWSTR,
            bNoRollForward: BOOLEAN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostRestore: *const fn(
            self: *const IWsbApplicationRestoreSupport,
            wszWriterMetadata: ?PWSTR,
            wszComponentName: ?PWSTR,
            wszComponentLogicalPath: ?PWSTR,
            bNoRollForward: BOOLEAN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OrderComponents: *const fn(
            self: *const IWsbApplicationRestoreSupport,
            cComponents: u32,
            rgComponentName: [*]?PWSTR,
            rgComponentLogicalPaths: [*]?PWSTR,
            prgComponentName: [*]?*?PWSTR,
            prgComponentLogicalPath: [*]?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsRollForwardSupported: *const fn(
            self: *const IWsbApplicationRestoreSupport,
            pbRollForwardSupported: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn PreRestore(self: *const IWsbApplicationRestoreSupport, wszWriterMetadata: ?PWSTR, wszComponentName: ?PWSTR, wszComponentLogicalPath: ?PWSTR, bNoRollForward: BOOLEAN) callconv(.Inline) HRESULT {
        return self.vtable.PreRestore(self, wszWriterMetadata, wszComponentName, wszComponentLogicalPath, bNoRollForward);
    }
    pub fn PostRestore(self: *const IWsbApplicationRestoreSupport, wszWriterMetadata: ?PWSTR, wszComponentName: ?PWSTR, wszComponentLogicalPath: ?PWSTR, bNoRollForward: BOOLEAN) callconv(.Inline) HRESULT {
        return self.vtable.PostRestore(self, wszWriterMetadata, wszComponentName, wszComponentLogicalPath, bNoRollForward);
    }
    pub fn OrderComponents(self: *const IWsbApplicationRestoreSupport, cComponents: u32, rgComponentName: [*]?PWSTR, rgComponentLogicalPaths: [*]?PWSTR, prgComponentName: [*]?*?PWSTR, prgComponentLogicalPath: [*]?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.OrderComponents(self, cComponents, rgComponentName, rgComponentLogicalPaths, prgComponentName, prgComponentLogicalPath);
    }
    pub fn IsRollForwardSupported(self: *const IWsbApplicationRestoreSupport, pbRollForwardSupported: ?*u8) callconv(.Inline) HRESULT {
        return self.vtable.IsRollForwardSupported(self, pbRollForwardSupported);
    }
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWsbApplicationAsync_Value = Guid.initString("0843f6f7-895c-44a6-b0c2-05a5022aa3a1");
pub const IID_IWsbApplicationAsync = &IID_IWsbApplicationAsync_Value;
pub const IWsbApplicationAsync = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryStatus: *const fn(
            self: *const IWsbApplicationAsync,
            phrResult: ?*HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Abort: *const fn(
            self: *const IWsbApplicationAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn QueryStatus(self: *const IWsbApplicationAsync, phrResult: ?*HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.QueryStatus(self, phrResult);
    }
    pub fn Abort(self: *const IWsbApplicationAsync) callconv(.Inline) HRESULT {
        return self.vtable.Abort(self);
    }
};

pub const WSB_OB_STATUS_ENTRY_PAIR_TYPE = enum(i32) {
    UNDEFINED = 0,
    STRING = 1,
    NUMBER = 2,
    DATETIME = 3,
    TIME = 4,
    SIZE = 5,
    MAX = 6,
};
pub const WSB_OB_ET_UNDEFINED = WSB_OB_STATUS_ENTRY_PAIR_TYPE.UNDEFINED;
pub const WSB_OB_ET_STRING = WSB_OB_STATUS_ENTRY_PAIR_TYPE.STRING;
pub const WSB_OB_ET_NUMBER = WSB_OB_STATUS_ENTRY_PAIR_TYPE.NUMBER;
pub const WSB_OB_ET_DATETIME = WSB_OB_STATUS_ENTRY_PAIR_TYPE.DATETIME;
pub const WSB_OB_ET_TIME = WSB_OB_STATUS_ENTRY_PAIR_TYPE.TIME;
pub const WSB_OB_ET_SIZE = WSB_OB_STATUS_ENTRY_PAIR_TYPE.SIZE;
pub const WSB_OB_ET_MAX = WSB_OB_STATUS_ENTRY_PAIR_TYPE.MAX;

pub const WSB_OB_STATUS_ENTRY_VALUE_TYPE_PAIR = extern struct {
    m_wszObStatusEntryPairValue: ?PWSTR,
    m_ObStatusEntryPairType: WSB_OB_STATUS_ENTRY_PAIR_TYPE,
};

pub const WSB_OB_STATUS_ENTRY = extern struct {
    m_dwIcon: u32,
    m_dwStatusEntryName: u32,
    m_dwStatusEntryValue: u32,
    m_cValueTypePair: u32,
    m_rgValueTypePair: ?*WSB_OB_STATUS_ENTRY_VALUE_TYPE_PAIR,
};

pub const WSB_OB_STATUS_INFO = extern struct {
    m_guidSnapinId: Guid,
    m_cStatusEntry: u32,
    m_rgStatusEntry: ?*WSB_OB_STATUS_ENTRY,
};

pub const WSB_OB_REGISTRATION_INFO = extern struct {
    m_wszResourceDLL: ?PWSTR,
    m_guidSnapinId: Guid,
    m_dwProviderName: u32,
    m_dwProviderIcon: u32,
    m_bSupportsRemoting: BOOLEAN,
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (5)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOLEAN = @import("../foundation.zig").BOOLEAN;
const HRESULT = @import("../foundation.zig").HRESULT;
const IUnknown = @import("../system/com.zig").IUnknown;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
