//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (43)
//--------------------------------------------------------------------------------
pub const TASK_SUNDAY = @as(u32, 1);
pub const TASK_MONDAY = @as(u32, 2);
pub const TASK_TUESDAY = @as(u32, 4);
pub const TASK_WEDNESDAY = @as(u32, 8);
pub const TASK_THURSDAY = @as(u32, 16);
pub const TASK_FRIDAY = @as(u32, 32);
pub const TASK_SATURDAY = @as(u32, 64);
pub const TASK_FIRST_WEEK = @as(u32, 1);
pub const TASK_SECOND_WEEK = @as(u32, 2);
pub const TASK_THIRD_WEEK = @as(u32, 3);
pub const TASK_FOURTH_WEEK = @as(u32, 4);
pub const TASK_LAST_WEEK = @as(u32, 5);
pub const TASK_JANUARY = @as(u32, 1);
pub const TASK_FEBRUARY = @as(u32, 2);
pub const TASK_MARCH = @as(u32, 4);
pub const TASK_APRIL = @as(u32, 8);
pub const TASK_MAY = @as(u32, 16);
pub const TASK_JUNE = @as(u32, 32);
pub const TASK_JULY = @as(u32, 64);
pub const TASK_AUGUST = @as(u32, 128);
pub const TASK_SEPTEMBER = @as(u32, 256);
pub const TASK_OCTOBER = @as(u32, 512);
pub const TASK_NOVEMBER = @as(u32, 1024);
pub const TASK_DECEMBER = @as(u32, 2048);
pub const TASK_FLAG_INTERACTIVE = @as(u32, 1);
pub const TASK_FLAG_DELETE_WHEN_DONE = @as(u32, 2);
pub const TASK_FLAG_DISABLED = @as(u32, 4);
pub const TASK_FLAG_START_ONLY_IF_IDLE = @as(u32, 16);
pub const TASK_FLAG_KILL_ON_IDLE_END = @as(u32, 32);
pub const TASK_FLAG_DONT_START_IF_ON_BATTERIES = @as(u32, 64);
pub const TASK_FLAG_KILL_IF_GOING_ON_BATTERIES = @as(u32, 128);
pub const TASK_FLAG_RUN_ONLY_IF_DOCKED = @as(u32, 256);
pub const TASK_FLAG_HIDDEN = @as(u32, 512);
pub const TASK_FLAG_RUN_IF_CONNECTED_TO_INTERNET = @as(u32, 1024);
pub const TASK_FLAG_RESTART_ON_IDLE_RESUME = @as(u32, 2048);
pub const TASK_FLAG_SYSTEM_REQUIRED = @as(u32, 4096);
pub const TASK_FLAG_RUN_ONLY_IF_LOGGED_ON = @as(u32, 8192);
pub const TASK_TRIGGER_FLAG_HAS_END_DATE = @as(u32, 1);
pub const TASK_TRIGGER_FLAG_KILL_AT_DURATION_END = @as(u32, 2);
pub const TASK_TRIGGER_FLAG_DISABLED = @as(u32, 4);
pub const TASK_MAX_RUN_TIMES = @as(u32, 1440);
pub const CLSID_CTask = Guid.initString("148bd520-a2ab-11ce-b11f-00aa00530503");
pub const CLSID_CTaskScheduler = Guid.initString("148bd52a-a2ab-11ce-b11f-00aa00530503");

//--------------------------------------------------------------------------------
// Section: Types (72)
//--------------------------------------------------------------------------------
pub const TASK_TRIGGER_TYPE = enum(i32) {
    TIME_TRIGGER_ONCE = 0,
    TIME_TRIGGER_DAILY = 1,
    TIME_TRIGGER_WEEKLY = 2,
    TIME_TRIGGER_MONTHLYDATE = 3,
    TIME_TRIGGER_MONTHLYDOW = 4,
    EVENT_TRIGGER_ON_IDLE = 5,
    EVENT_TRIGGER_AT_SYSTEMSTART = 6,
    EVENT_TRIGGER_AT_LOGON = 7,
};
pub const TASK_TIME_TRIGGER_ONCE = TASK_TRIGGER_TYPE.TIME_TRIGGER_ONCE;
pub const TASK_TIME_TRIGGER_DAILY = TASK_TRIGGER_TYPE.TIME_TRIGGER_DAILY;
pub const TASK_TIME_TRIGGER_WEEKLY = TASK_TRIGGER_TYPE.TIME_TRIGGER_WEEKLY;
pub const TASK_TIME_TRIGGER_MONTHLYDATE = TASK_TRIGGER_TYPE.TIME_TRIGGER_MONTHLYDATE;
pub const TASK_TIME_TRIGGER_MONTHLYDOW = TASK_TRIGGER_TYPE.TIME_TRIGGER_MONTHLYDOW;
pub const TASK_EVENT_TRIGGER_ON_IDLE = TASK_TRIGGER_TYPE.EVENT_TRIGGER_ON_IDLE;
pub const TASK_EVENT_TRIGGER_AT_SYSTEMSTART = TASK_TRIGGER_TYPE.EVENT_TRIGGER_AT_SYSTEMSTART;
pub const TASK_EVENT_TRIGGER_AT_LOGON = TASK_TRIGGER_TYPE.EVENT_TRIGGER_AT_LOGON;

pub const DAILY = extern struct {
    DaysInterval: u16,
};

pub const WEEKLY = extern struct {
    WeeksInterval: u16,
    rgfDaysOfTheWeek: u16,
};

pub const MONTHLYDATE = extern struct {
    rgfDays: u32,
    rgfMonths: u16,
};

pub const MONTHLYDOW = extern struct {
    wWhichWeek: u16,
    rgfDaysOfTheWeek: u16,
    rgfMonths: u16,
};

pub const TRIGGER_TYPE_UNION = extern union {
    Daily: DAILY,
    Weekly: WEEKLY,
    MonthlyDate: MONTHLYDATE,
    MonthlyDOW: MONTHLYDOW,
};

pub const TASK_TRIGGER = extern struct {
    cbTriggerSize: u16,
    Reserved1: u16,
    wBeginYear: u16,
    wBeginMonth: u16,
    wBeginDay: u16,
    wEndYear: u16,
    wEndMonth: u16,
    wEndDay: u16,
    wStartHour: u16,
    wStartMinute: u16,
    MinutesDuration: u32,
    MinutesInterval: u32,
    rgFlags: u32,
    TriggerType: TASK_TRIGGER_TYPE,
    Type: TRIGGER_TYPE_UNION,
    Reserved2: u16,
    wRandomMinutesInterval: u16,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ITaskTrigger_Value = Guid.initString("148bd52b-a2ab-11ce-b11f-00aa00530503");
pub const IID_ITaskTrigger = &IID_ITaskTrigger_Value;
pub const ITaskTrigger = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetTrigger: *const fn(
            self: *const ITaskTrigger,
            pTrigger: ?*const TASK_TRIGGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTrigger: *const fn(
            self: *const ITaskTrigger,
            pTrigger: ?*TASK_TRIGGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTriggerString: *const fn(
            self: *const ITaskTrigger,
            ppwszTrigger: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetTrigger(self: *const ITaskTrigger, pTrigger: ?*const TASK_TRIGGER) callconv(.Inline) HRESULT {
        return self.vtable.SetTrigger(self, pTrigger);
    }
    pub fn GetTrigger(self: *const ITaskTrigger, pTrigger: ?*TASK_TRIGGER) callconv(.Inline) HRESULT {
        return self.vtable.GetTrigger(self, pTrigger);
    }
    pub fn GetTriggerString(self: *const ITaskTrigger, ppwszTrigger: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetTriggerString(self, ppwszTrigger);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IScheduledWorkItem_Value = Guid.initString("a6b952f0-a4b1-11d0-997d-00aa006887ec");
pub const IID_IScheduledWorkItem = &IID_IScheduledWorkItem_Value;
pub const IScheduledWorkItem = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateTrigger: *const fn(
            self: *const IScheduledWorkItem,
            piNewTrigger: ?*u16,
            ppTrigger: ?*?*ITaskTrigger,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteTrigger: *const fn(
            self: *const IScheduledWorkItem,
            iTrigger: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTriggerCount: *const fn(
            self: *const IScheduledWorkItem,
            pwCount: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTrigger: *const fn(
            self: *const IScheduledWorkItem,
            iTrigger: u16,
            ppTrigger: ?*?*ITaskTrigger,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTriggerString: *const fn(
            self: *const IScheduledWorkItem,
            iTrigger: u16,
            ppwszTrigger: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRunTimes: *const fn(
            self: *const IScheduledWorkItem,
            pstBegin: ?*const SYSTEMTIME,
            pstEnd: ?*const SYSTEMTIME,
            pCount: ?*u16,
            rgstTaskTimes: ?*?*SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextRunTime: *const fn(
            self: *const IScheduledWorkItem,
            pstNextRun: ?*SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIdleWait: *const fn(
            self: *const IScheduledWorkItem,
            wIdleMinutes: u16,
            wDeadlineMinutes: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIdleWait: *const fn(
            self: *const IScheduledWorkItem,
            pwIdleMinutes: ?*u16,
            pwDeadlineMinutes: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Run: *const fn(
            self: *const IScheduledWorkItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Terminate: *const fn(
            self: *const IScheduledWorkItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EditWorkItem: *const fn(
            self: *const IScheduledWorkItem,
            hParent: ?HWND,
            dwReserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMostRecentRunTime: *const fn(
            self: *const IScheduledWorkItem,
            pstLastRun: ?*SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: *const fn(
            self: *const IScheduledWorkItem,
            phrStatus: ?*HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExitCode: *const fn(
            self: *const IScheduledWorkItem,
            pdwExitCode: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetComment: *const fn(
            self: *const IScheduledWorkItem,
            pwszComment: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComment: *const fn(
            self: *const IScheduledWorkItem,
            ppwszComment: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCreator: *const fn(
            self: *const IScheduledWorkItem,
            pwszCreator: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCreator: *const fn(
            self: *const IScheduledWorkItem,
            ppwszCreator: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWorkItemData: *const fn(
            self: *const IScheduledWorkItem,
            cbData: u16,
            rgbData: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWorkItemData: *const fn(
            self: *const IScheduledWorkItem,
            pcbData: ?*u16,
            prgbData: ?*?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetErrorRetryCount: *const fn(
            self: *const IScheduledWorkItem,
            wRetryCount: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetErrorRetryCount: *const fn(
            self: *const IScheduledWorkItem,
            pwRetryCount: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetErrorRetryInterval: *const fn(
            self: *const IScheduledWorkItem,
            wRetryInterval: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetErrorRetryInterval: *const fn(
            self: *const IScheduledWorkItem,
            pwRetryInterval: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFlags: *const fn(
            self: *const IScheduledWorkItem,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: *const fn(
            self: *const IScheduledWorkItem,
            pdwFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAccountInformation: *const fn(
            self: *const IScheduledWorkItem,
            pwszAccountName: ?[*:0]const u16,
            pwszPassword: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAccountInformation: *const fn(
            self: *const IScheduledWorkItem,
            ppwszAccountName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateTrigger(self: *const IScheduledWorkItem, piNewTrigger: ?*u16, ppTrigger: ?*?*ITaskTrigger) callconv(.Inline) HRESULT {
        return self.vtable.CreateTrigger(self, piNewTrigger, ppTrigger);
    }
    pub fn DeleteTrigger(self: *const IScheduledWorkItem, iTrigger: u16) callconv(.Inline) HRESULT {
        return self.vtable.DeleteTrigger(self, iTrigger);
    }
    pub fn GetTriggerCount(self: *const IScheduledWorkItem, pwCount: ?*u16) callconv(.Inline) HRESULT {
        return self.vtable.GetTriggerCount(self, pwCount);
    }
    pub fn GetTrigger(self: *const IScheduledWorkItem, iTrigger: u16, ppTrigger: ?*?*ITaskTrigger) callconv(.Inline) HRESULT {
        return self.vtable.GetTrigger(self, iTrigger, ppTrigger);
    }
    pub fn GetTriggerString(self: *const IScheduledWorkItem, iTrigger: u16, ppwszTrigger: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetTriggerString(self, iTrigger, ppwszTrigger);
    }
    pub fn GetRunTimes(self: *const IScheduledWorkItem, pstBegin: ?*const SYSTEMTIME, pstEnd: ?*const SYSTEMTIME, pCount: ?*u16, rgstTaskTimes: ?*?*SYSTEMTIME) callconv(.Inline) HRESULT {
        return self.vtable.GetRunTimes(self, pstBegin, pstEnd, pCount, rgstTaskTimes);
    }
    pub fn GetNextRunTime(self: *const IScheduledWorkItem, pstNextRun: ?*SYSTEMTIME) callconv(.Inline) HRESULT {
        return self.vtable.GetNextRunTime(self, pstNextRun);
    }
    pub fn SetIdleWait(self: *const IScheduledWorkItem, wIdleMinutes: u16, wDeadlineMinutes: u16) callconv(.Inline) HRESULT {
        return self.vtable.SetIdleWait(self, wIdleMinutes, wDeadlineMinutes);
    }
    pub fn GetIdleWait(self: *const IScheduledWorkItem, pwIdleMinutes: ?*u16, pwDeadlineMinutes: ?*u16) callconv(.Inline) HRESULT {
        return self.vtable.GetIdleWait(self, pwIdleMinutes, pwDeadlineMinutes);
    }
    pub fn Run(self: *const IScheduledWorkItem) callconv(.Inline) HRESULT {
        return self.vtable.Run(self);
    }
    pub fn Terminate(self: *const IScheduledWorkItem) callconv(.Inline) HRESULT {
        return self.vtable.Terminate(self);
    }
    pub fn EditWorkItem(self: *const IScheduledWorkItem, hParent: ?HWND, dwReserved: u32) callconv(.Inline) HRESULT {
        return self.vtable.EditWorkItem(self, hParent, dwReserved);
    }
    pub fn GetMostRecentRunTime(self: *const IScheduledWorkItem, pstLastRun: ?*SYSTEMTIME) callconv(.Inline) HRESULT {
        return self.vtable.GetMostRecentRunTime(self, pstLastRun);
    }
    pub fn GetStatus(self: *const IScheduledWorkItem, phrStatus: ?*HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.GetStatus(self, phrStatus);
    }
    pub fn GetExitCode(self: *const IScheduledWorkItem, pdwExitCode: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetExitCode(self, pdwExitCode);
    }
    pub fn SetComment(self: *const IScheduledWorkItem, pwszComment: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetComment(self, pwszComment);
    }
    pub fn GetComment(self: *const IScheduledWorkItem, ppwszComment: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetComment(self, ppwszComment);
    }
    pub fn SetCreator(self: *const IScheduledWorkItem, pwszCreator: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetCreator(self, pwszCreator);
    }
    pub fn GetCreator(self: *const IScheduledWorkItem, ppwszCreator: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetCreator(self, ppwszCreator);
    }
    pub fn SetWorkItemData(self: *const IScheduledWorkItem, cbData: u16, rgbData: ?*u8) callconv(.Inline) HRESULT {
        return self.vtable.SetWorkItemData(self, cbData, rgbData);
    }
    pub fn GetWorkItemData(self: *const IScheduledWorkItem, pcbData: ?*u16, prgbData: ?*?*u8) callconv(.Inline) HRESULT {
        return self.vtable.GetWorkItemData(self, pcbData, prgbData);
    }
    pub fn SetErrorRetryCount(self: *const IScheduledWorkItem, wRetryCount: u16) callconv(.Inline) HRESULT {
        return self.vtable.SetErrorRetryCount(self, wRetryCount);
    }
    pub fn GetErrorRetryCount(self: *const IScheduledWorkItem, pwRetryCount: ?*u16) callconv(.Inline) HRESULT {
        return self.vtable.GetErrorRetryCount(self, pwRetryCount);
    }
    pub fn SetErrorRetryInterval(self: *const IScheduledWorkItem, wRetryInterval: u16) callconv(.Inline) HRESULT {
        return self.vtable.SetErrorRetryInterval(self, wRetryInterval);
    }
    pub fn GetErrorRetryInterval(self: *const IScheduledWorkItem, pwRetryInterval: ?*u16) callconv(.Inline) HRESULT {
        return self.vtable.GetErrorRetryInterval(self, pwRetryInterval);
    }
    pub fn SetFlags(self: *const IScheduledWorkItem, dwFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetFlags(self, dwFlags);
    }
    pub fn GetFlags(self: *const IScheduledWorkItem, pdwFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetFlags(self, pdwFlags);
    }
    pub fn SetAccountInformation(self: *const IScheduledWorkItem, pwszAccountName: ?[*:0]const u16, pwszPassword: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetAccountInformation(self, pwszAccountName, pwszPassword);
    }
    pub fn GetAccountInformation(self: *const IScheduledWorkItem, ppwszAccountName: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetAccountInformation(self, ppwszAccountName);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ITask_Value = Guid.initString("148bd524-a2ab-11ce-b11f-00aa00530503");
pub const IID_ITask = &IID_ITask_Value;
pub const ITask = extern union {
    pub const VTable = extern struct {
        base: IScheduledWorkItem.VTable,
        SetApplicationName: *const fn(
            self: *const ITask,
            pwszApplicationName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationName: *const fn(
            self: *const ITask,
            ppwszApplicationName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetParameters: *const fn(
            self: *const ITask,
            pwszParameters: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParameters: *const fn(
            self: *const ITask,
            ppwszParameters: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWorkingDirectory: *const fn(
            self: *const ITask,
            pwszWorkingDirectory: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWorkingDirectory: *const fn(
            self: *const ITask,
            ppwszWorkingDirectory: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPriority: *const fn(
            self: *const ITask,
            dwPriority: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPriority: *const fn(
            self: *const ITask,
            pdwPriority: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTaskFlags: *const fn(
            self: *const ITask,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTaskFlags: *const fn(
            self: *const ITask,
            pdwFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaxRunTime: *const fn(
            self: *const ITask,
            dwMaxRunTimeMS: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxRunTime: *const fn(
            self: *const ITask,
            pdwMaxRunTimeMS: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IScheduledWorkItem: IScheduledWorkItem,
    IUnknown: IUnknown,
    pub fn SetApplicationName(self: *const ITask, pwszApplicationName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetApplicationName(self, pwszApplicationName);
    }
    pub fn GetApplicationName(self: *const ITask, ppwszApplicationName: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetApplicationName(self, ppwszApplicationName);
    }
    pub fn SetParameters(self: *const ITask, pwszParameters: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetParameters(self, pwszParameters);
    }
    pub fn GetParameters(self: *const ITask, ppwszParameters: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetParameters(self, ppwszParameters);
    }
    pub fn SetWorkingDirectory(self: *const ITask, pwszWorkingDirectory: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetWorkingDirectory(self, pwszWorkingDirectory);
    }
    pub fn GetWorkingDirectory(self: *const ITask, ppwszWorkingDirectory: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetWorkingDirectory(self, ppwszWorkingDirectory);
    }
    pub fn SetPriority(self: *const ITask, dwPriority: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetPriority(self, dwPriority);
    }
    pub fn GetPriority(self: *const ITask, pdwPriority: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetPriority(self, pdwPriority);
    }
    pub fn SetTaskFlags(self: *const ITask, dwFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetTaskFlags(self, dwFlags);
    }
    pub fn GetTaskFlags(self: *const ITask, pdwFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetTaskFlags(self, pdwFlags);
    }
    pub fn SetMaxRunTime(self: *const ITask, dwMaxRunTimeMS: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetMaxRunTime(self, dwMaxRunTimeMS);
    }
    pub fn GetMaxRunTime(self: *const ITask, pdwMaxRunTimeMS: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetMaxRunTime(self, pdwMaxRunTimeMS);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IEnumWorkItems_Value = Guid.initString("148bd528-a2ab-11ce-b11f-00aa00530503");
pub const IID_IEnumWorkItems = &IID_IEnumWorkItems_Value;
pub const IEnumWorkItems = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumWorkItems,
            celt: u32,
            rgpwszNames: ?*?*?PWSTR,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumWorkItems,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumWorkItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumWorkItems,
            ppEnumWorkItems: ?*?*IEnumWorkItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumWorkItems, celt: u32, rgpwszNames: ?*?*?PWSTR, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, celt, rgpwszNames, pceltFetched);
    }
    pub fn Skip(self: *const IEnumWorkItems, celt: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumWorkItems) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumWorkItems, ppEnumWorkItems: ?*?*IEnumWorkItems) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppEnumWorkItems);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ITaskScheduler_Value = Guid.initString("148bd527-a2ab-11ce-b11f-00aa00530503");
pub const IID_ITaskScheduler = &IID_ITaskScheduler_Value;
pub const ITaskScheduler = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetTargetComputer: *const fn(
            self: *const ITaskScheduler,
            pwszComputer: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTargetComputer: *const fn(
            self: *const ITaskScheduler,
            ppwszComputer: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enum: *const fn(
            self: *const ITaskScheduler,
            ppEnumWorkItems: ?*?*IEnumWorkItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Activate: *const fn(
            self: *const ITaskScheduler,
            pwszName: ?[*:0]const u16,
            riid: ?*const Guid,
            ppUnk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn(
            self: *const ITaskScheduler,
            pwszName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NewWorkItem: *const fn(
            self: *const ITaskScheduler,
            pwszTaskName: ?[*:0]const u16,
            rclsid: ?*const Guid,
            riid: ?*const Guid,
            ppUnk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddWorkItem: *const fn(
            self: *const ITaskScheduler,
            pwszTaskName: ?[*:0]const u16,
            pWorkItem: ?*IScheduledWorkItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsOfType: *const fn(
            self: *const ITaskScheduler,
            pwszName: ?[*:0]const u16,
            riid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetTargetComputer(self: *const ITaskScheduler, pwszComputer: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetTargetComputer(self, pwszComputer);
    }
    pub fn GetTargetComputer(self: *const ITaskScheduler, ppwszComputer: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetTargetComputer(self, ppwszComputer);
    }
    pub fn Enum(self: *const ITaskScheduler, ppEnumWorkItems: ?*?*IEnumWorkItems) callconv(.Inline) HRESULT {
        return self.vtable.Enum(self, ppEnumWorkItems);
    }
    pub fn Activate(self: *const ITaskScheduler, pwszName: ?[*:0]const u16, riid: ?*const Guid, ppUnk: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.Activate(self, pwszName, riid, ppUnk);
    }
    pub fn Delete(self: *const ITaskScheduler, pwszName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.Delete(self, pwszName);
    }
    pub fn NewWorkItem(self: *const ITaskScheduler, pwszTaskName: ?[*:0]const u16, rclsid: ?*const Guid, riid: ?*const Guid, ppUnk: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.NewWorkItem(self, pwszTaskName, rclsid, riid, ppUnk);
    }
    pub fn AddWorkItem(self: *const ITaskScheduler, pwszTaskName: ?[*:0]const u16, pWorkItem: ?*IScheduledWorkItem) callconv(.Inline) HRESULT {
        return self.vtable.AddWorkItem(self, pwszTaskName, pWorkItem);
    }
    pub fn IsOfType(self: *const ITaskScheduler, pwszName: ?[*:0]const u16, riid: ?*const Guid) callconv(.Inline) HRESULT {
        return self.vtable.IsOfType(self, pwszName, riid);
    }
};

pub const TASKPAGE = enum(i32) {
    TASK = 0,
    SCHEDULE = 1,
    SETTINGS = 2,
};
pub const TASKPAGE_TASK = TASKPAGE.TASK;
pub const TASKPAGE_SCHEDULE = TASKPAGE.SCHEDULE;
pub const TASKPAGE_SETTINGS = TASKPAGE.SETTINGS;

// TODO: this type is limited to platform 'windows5.0'
const IID_IProvideTaskPage_Value = Guid.initString("4086658a-cbbb-11cf-b604-00c04fd8d565");
pub const IID_IProvideTaskPage = &IID_IProvideTaskPage_Value;
pub const IProvideTaskPage = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPage: *const fn(
            self: *const IProvideTaskPage,
            tpType: TASKPAGE,
            fPersistChanges: BOOL,
            phPage: ?*?HPROPSHEETPAGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetPage(self: *const IProvideTaskPage, tpType: TASKPAGE, fPersistChanges: BOOL, phPage: ?*?HPROPSHEETPAGE) callconv(.Inline) HRESULT {
        return self.vtable.GetPage(self, tpType, fPersistChanges, phPage);
    }
};

const CLSID_TaskScheduler_Value = Guid.initString("0f87369f-a4e5-4cfc-bd3e-73e6154572dd");
pub const CLSID_TaskScheduler = &CLSID_TaskScheduler_Value;

const CLSID_TaskHandlerPS_Value = Guid.initString("f2a69db7-da2c-4352-9066-86fee6dacac9");
pub const CLSID_TaskHandlerPS = &CLSID_TaskHandlerPS_Value;

const CLSID_TaskHandlerStatusPS_Value = Guid.initString("9f15266d-d7ba-48f0-93c1-e6895f6fe5ac");
pub const CLSID_TaskHandlerStatusPS = &CLSID_TaskHandlerStatusPS_Value;

pub const TASK_RUN_FLAGS = enum(i32) {
    NO_FLAGS = 0,
    AS_SELF = 1,
    IGNORE_CONSTRAINTS = 2,
    USE_SESSION_ID = 4,
    USER_SID = 8,
};
pub const TASK_RUN_NO_FLAGS = TASK_RUN_FLAGS.NO_FLAGS;
pub const TASK_RUN_AS_SELF = TASK_RUN_FLAGS.AS_SELF;
pub const TASK_RUN_IGNORE_CONSTRAINTS = TASK_RUN_FLAGS.IGNORE_CONSTRAINTS;
pub const TASK_RUN_USE_SESSION_ID = TASK_RUN_FLAGS.USE_SESSION_ID;
pub const TASK_RUN_USER_SID = TASK_RUN_FLAGS.USER_SID;

pub const TASK_ENUM_FLAGS = enum(i32) {
    N = 1,
};
pub const TASK_ENUM_HIDDEN = TASK_ENUM_FLAGS.N;

pub const TASK_LOGON_TYPE = enum(i32) {
    NONE = 0,
    PASSWORD = 1,
    S4U = 2,
    INTERACTIVE_TOKEN = 3,
    GROUP = 4,
    SERVICE_ACCOUNT = 5,
    INTERACTIVE_TOKEN_OR_PASSWORD = 6,
};
pub const TASK_LOGON_NONE = TASK_LOGON_TYPE.NONE;
pub const TASK_LOGON_PASSWORD = TASK_LOGON_TYPE.PASSWORD;
pub const TASK_LOGON_S4U = TASK_LOGON_TYPE.S4U;
pub const TASK_LOGON_INTERACTIVE_TOKEN = TASK_LOGON_TYPE.INTERACTIVE_TOKEN;
pub const TASK_LOGON_GROUP = TASK_LOGON_TYPE.GROUP;
pub const TASK_LOGON_SERVICE_ACCOUNT = TASK_LOGON_TYPE.SERVICE_ACCOUNT;
pub const TASK_LOGON_INTERACTIVE_TOKEN_OR_PASSWORD = TASK_LOGON_TYPE.INTERACTIVE_TOKEN_OR_PASSWORD;

pub const TASK_RUNLEVEL_TYPE = enum(i32) {
    LUA = 0,
    HIGHEST = 1,
};
pub const TASK_RUNLEVEL_LUA = TASK_RUNLEVEL_TYPE.LUA;
pub const TASK_RUNLEVEL_HIGHEST = TASK_RUNLEVEL_TYPE.HIGHEST;

pub const TASK_PROCESSTOKENSID_TYPE = enum(i32) {
    NONE = 0,
    UNRESTRICTED = 1,
    DEFAULT = 2,
};
pub const TASK_PROCESSTOKENSID_NONE = TASK_PROCESSTOKENSID_TYPE.NONE;
pub const TASK_PROCESSTOKENSID_UNRESTRICTED = TASK_PROCESSTOKENSID_TYPE.UNRESTRICTED;
pub const TASK_PROCESSTOKENSID_DEFAULT = TASK_PROCESSTOKENSID_TYPE.DEFAULT;

pub const TASK_STATE = enum(i32) {
    UNKNOWN = 0,
    DISABLED = 1,
    QUEUED = 2,
    READY = 3,
    RUNNING = 4,
};
pub const TASK_STATE_UNKNOWN = TASK_STATE.UNKNOWN;
pub const TASK_STATE_DISABLED = TASK_STATE.DISABLED;
pub const TASK_STATE_QUEUED = TASK_STATE.QUEUED;
pub const TASK_STATE_READY = TASK_STATE.READY;
pub const TASK_STATE_RUNNING = TASK_STATE.RUNNING;

pub const TASK_CREATION = enum(i32) {
    VALIDATE_ONLY = 1,
    CREATE = 2,
    UPDATE = 4,
    CREATE_OR_UPDATE = 6,
    DISABLE = 8,
    DONT_ADD_PRINCIPAL_ACE = 16,
    IGNORE_REGISTRATION_TRIGGERS = 32,
};
pub const TASK_VALIDATE_ONLY = TASK_CREATION.VALIDATE_ONLY;
pub const TASK_CREATE = TASK_CREATION.CREATE;
pub const TASK_UPDATE = TASK_CREATION.UPDATE;
pub const TASK_CREATE_OR_UPDATE = TASK_CREATION.CREATE_OR_UPDATE;
pub const TASK_DISABLE = TASK_CREATION.DISABLE;
pub const TASK_DONT_ADD_PRINCIPAL_ACE = TASK_CREATION.DONT_ADD_PRINCIPAL_ACE;
pub const TASK_IGNORE_REGISTRATION_TRIGGERS = TASK_CREATION.IGNORE_REGISTRATION_TRIGGERS;

pub const TASK_TRIGGER_TYPE2 = enum(i32) {
    EVENT = 0,
    TIME = 1,
    DAILY = 2,
    WEEKLY = 3,
    MONTHLY = 4,
    MONTHLYDOW = 5,
    IDLE = 6,
    REGISTRATION = 7,
    BOOT = 8,
    LOGON = 9,
    SESSION_STATE_CHANGE = 11,
    CUSTOM_TRIGGER_01 = 12,
};
pub const TASK_TRIGGER_EVENT = TASK_TRIGGER_TYPE2.EVENT;
pub const TASK_TRIGGER_TIME = TASK_TRIGGER_TYPE2.TIME;
pub const TASK_TRIGGER_DAILY = TASK_TRIGGER_TYPE2.DAILY;
pub const TASK_TRIGGER_WEEKLY = TASK_TRIGGER_TYPE2.WEEKLY;
pub const TASK_TRIGGER_MONTHLY = TASK_TRIGGER_TYPE2.MONTHLY;
pub const TASK_TRIGGER_MONTHLYDOW = TASK_TRIGGER_TYPE2.MONTHLYDOW;
pub const TASK_TRIGGER_IDLE = TASK_TRIGGER_TYPE2.IDLE;
pub const TASK_TRIGGER_REGISTRATION = TASK_TRIGGER_TYPE2.REGISTRATION;
pub const TASK_TRIGGER_BOOT = TASK_TRIGGER_TYPE2.BOOT;
pub const TASK_TRIGGER_LOGON = TASK_TRIGGER_TYPE2.LOGON;
pub const TASK_TRIGGER_SESSION_STATE_CHANGE = TASK_TRIGGER_TYPE2.SESSION_STATE_CHANGE;
pub const TASK_TRIGGER_CUSTOM_TRIGGER_01 = TASK_TRIGGER_TYPE2.CUSTOM_TRIGGER_01;

pub const TASK_SESSION_STATE_CHANGE_TYPE = enum(i32) {
    CONSOLE_CONNECT = 1,
    CONSOLE_DISCONNECT = 2,
    REMOTE_CONNECT = 3,
    REMOTE_DISCONNECT = 4,
    SESSION_LOCK = 7,
    SESSION_UNLOCK = 8,
};
pub const TASK_CONSOLE_CONNECT = TASK_SESSION_STATE_CHANGE_TYPE.CONSOLE_CONNECT;
pub const TASK_CONSOLE_DISCONNECT = TASK_SESSION_STATE_CHANGE_TYPE.CONSOLE_DISCONNECT;
pub const TASK_REMOTE_CONNECT = TASK_SESSION_STATE_CHANGE_TYPE.REMOTE_CONNECT;
pub const TASK_REMOTE_DISCONNECT = TASK_SESSION_STATE_CHANGE_TYPE.REMOTE_DISCONNECT;
pub const TASK_SESSION_LOCK = TASK_SESSION_STATE_CHANGE_TYPE.SESSION_LOCK;
pub const TASK_SESSION_UNLOCK = TASK_SESSION_STATE_CHANGE_TYPE.SESSION_UNLOCK;

pub const TASK_ACTION_TYPE = enum(i32) {
    EXEC = 0,
    COM_HANDLER = 5,
    SEND_EMAIL = 6,
    SHOW_MESSAGE = 7,
};
pub const TASK_ACTION_EXEC = TASK_ACTION_TYPE.EXEC;
pub const TASK_ACTION_COM_HANDLER = TASK_ACTION_TYPE.COM_HANDLER;
pub const TASK_ACTION_SEND_EMAIL = TASK_ACTION_TYPE.SEND_EMAIL;
pub const TASK_ACTION_SHOW_MESSAGE = TASK_ACTION_TYPE.SHOW_MESSAGE;

pub const TASK_INSTANCES_POLICY = enum(i32) {
    PARALLEL = 0,
    QUEUE = 1,
    IGNORE_NEW = 2,
    STOP_EXISTING = 3,
};
pub const TASK_INSTANCES_PARALLEL = TASK_INSTANCES_POLICY.PARALLEL;
pub const TASK_INSTANCES_QUEUE = TASK_INSTANCES_POLICY.QUEUE;
pub const TASK_INSTANCES_IGNORE_NEW = TASK_INSTANCES_POLICY.IGNORE_NEW;
pub const TASK_INSTANCES_STOP_EXISTING = TASK_INSTANCES_POLICY.STOP_EXISTING;

pub const TASK_COMPATIBILITY = enum(i32) {
    AT = 0,
    V1 = 1,
    V2 = 2,
    V2_1 = 3,
    V2_2 = 4,
    V2_3 = 5,
    V2_4 = 6,
};
pub const TASK_COMPATIBILITY_AT = TASK_COMPATIBILITY.AT;
pub const TASK_COMPATIBILITY_V1 = TASK_COMPATIBILITY.V1;
pub const TASK_COMPATIBILITY_V2 = TASK_COMPATIBILITY.V2;
pub const TASK_COMPATIBILITY_V2_1 = TASK_COMPATIBILITY.V2_1;
pub const TASK_COMPATIBILITY_V2_2 = TASK_COMPATIBILITY.V2_2;
pub const TASK_COMPATIBILITY_V2_3 = TASK_COMPATIBILITY.V2_3;
pub const TASK_COMPATIBILITY_V2_4 = TASK_COMPATIBILITY.V2_4;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITaskFolderCollection_Value = Guid.initString("79184a66-8664-423f-97f1-637356a5d812");
pub const IID_ITaskFolderCollection = &IID_ITaskFolderCollection_Value;
pub const ITaskFolderCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const ITaskFolderCollection,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: *const fn(
            self: *const ITaskFolderCollection,
            index: VARIANT,
            ppFolder: ?*?*ITaskFolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const ITaskFolderCollection,
            ppEnum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Count(self: *const ITaskFolderCollection, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pCount);
    }
    pub fn get_Item(self: *const ITaskFolderCollection, index: VARIANT, ppFolder: ?*?*ITaskFolder) callconv(.Inline) HRESULT {
        return self.vtable.get_Item(self, index, ppFolder);
    }
    pub fn get__NewEnum(self: *const ITaskFolderCollection, ppEnum: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, ppEnum);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITaskService_Value = Guid.initString("2faba4c7-4da9-4013-9697-20cc3fd40f85");
pub const IID_ITaskService = &IID_ITaskService_Value;
pub const ITaskService = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetFolder: *const fn(
            self: *const ITaskService,
            path: ?BSTR,
            ppFolder: ?*?*ITaskFolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRunningTasks: *const fn(
            self: *const ITaskService,
            flags: i32,
            ppRunningTasks: ?*?*IRunningTaskCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NewTask: *const fn(
            self: *const ITaskService,
            flags: u32,
            ppDefinition: ?*?*ITaskDefinition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Connect: *const fn(
            self: *const ITaskService,
            serverName: VARIANT,
            user: VARIANT,
            domain: VARIANT,
            password: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Connected: *const fn(
            self: *const ITaskService,
            pConnected: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TargetServer: *const fn(
            self: *const ITaskService,
            pServer: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ConnectedUser: *const fn(
            self: *const ITaskService,
            pUser: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ConnectedDomain: *const fn(
            self: *const ITaskService,
            pDomain: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HighestVersion: *const fn(
            self: *const ITaskService,
            pVersion: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GetFolder(self: *const ITaskService, path: ?BSTR, ppFolder: ?*?*ITaskFolder) callconv(.Inline) HRESULT {
        return self.vtable.GetFolder(self, path, ppFolder);
    }
    pub fn GetRunningTasks(self: *const ITaskService, flags: i32, ppRunningTasks: ?*?*IRunningTaskCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetRunningTasks(self, flags, ppRunningTasks);
    }
    pub fn NewTask(self: *const ITaskService, flags: u32, ppDefinition: ?*?*ITaskDefinition) callconv(.Inline) HRESULT {
        return self.vtable.NewTask(self, flags, ppDefinition);
    }
    pub fn Connect(self: *const ITaskService, serverName: VARIANT, user: VARIANT, domain: VARIANT, password: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.Connect(self, serverName, user, domain, password);
    }
    pub fn get_Connected(self: *const ITaskService, pConnected: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Connected(self, pConnected);
    }
    pub fn get_TargetServer(self: *const ITaskService, pServer: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_TargetServer(self, pServer);
    }
    pub fn get_ConnectedUser(self: *const ITaskService, pUser: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ConnectedUser(self, pUser);
    }
    pub fn get_ConnectedDomain(self: *const ITaskService, pDomain: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ConnectedDomain(self, pDomain);
    }
    pub fn get_HighestVersion(self: *const ITaskService, pVersion: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_HighestVersion(self, pVersion);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITaskHandler_Value = Guid.initString("839d7762-5121-4009-9234-4f0d19394f04");
pub const IID_ITaskHandler = &IID_ITaskHandler_Value;
pub const ITaskHandler = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Start: *const fn(
            self: *const ITaskHandler,
            pHandlerServices: ?*IUnknown,
            data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn(
            self: *const ITaskHandler,
            pRetCode: ?*HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Pause: *const fn(
            self: *const ITaskHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: *const fn(
            self: *const ITaskHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Start(self: *const ITaskHandler, pHandlerServices: ?*IUnknown, data: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Start(self, pHandlerServices, data);
    }
    pub fn Stop(self: *const ITaskHandler, pRetCode: ?*HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.Stop(self, pRetCode);
    }
    pub fn Pause(self: *const ITaskHandler) callconv(.Inline) HRESULT {
        return self.vtable.Pause(self);
    }
    pub fn Resume(self: *const ITaskHandler) callconv(.Inline) HRESULT {
        return self.vtable.Resume(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITaskHandlerStatus_Value = Guid.initString("eaec7a8f-27a0-4ddc-8675-14726a01a38a");
pub const IID_ITaskHandlerStatus = &IID_ITaskHandlerStatus_Value;
pub const ITaskHandlerStatus = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        UpdateStatus: *const fn(
            self: *const ITaskHandlerStatus,
            percentComplete: i16,
            statusMessage: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TaskCompleted: *const fn(
            self: *const ITaskHandlerStatus,
            taskErrCode: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn UpdateStatus(self: *const ITaskHandlerStatus, percentComplete: i16, statusMessage: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.UpdateStatus(self, percentComplete, statusMessage);
    }
    pub fn TaskCompleted(self: *const ITaskHandlerStatus, taskErrCode: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.TaskCompleted(self, taskErrCode);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITaskVariables_Value = Guid.initString("3e4c9351-d966-4b8b-bb87-ceba68bb0107");
pub const IID_ITaskVariables = &IID_ITaskVariables_Value;
pub const ITaskVariables = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInput: *const fn(
            self: *const ITaskVariables,
            pInput: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOutput: *const fn(
            self: *const ITaskVariables,
            input: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContext: *const fn(
            self: *const ITaskVariables,
            pContext: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetInput(self: *const ITaskVariables, pInput: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetInput(self, pInput);
    }
    pub fn SetOutput(self: *const ITaskVariables, input: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.SetOutput(self, input);
    }
    pub fn GetContext(self: *const ITaskVariables, pContext: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetContext(self, pContext);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITaskNamedValuePair_Value = Guid.initString("39038068-2b46-4afd-8662-7bb6f868d221");
pub const IID_ITaskNamedValuePair = &IID_ITaskNamedValuePair_Value;
pub const ITaskNamedValuePair = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn(
            self: *const ITaskNamedValuePair,
            pName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn(
            self: *const ITaskNamedValuePair,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn(
            self: *const ITaskNamedValuePair,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Value: *const fn(
            self: *const ITaskNamedValuePair,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Name(self: *const ITaskNamedValuePair, pName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Name(self, pName);
    }
    pub fn put_Name(self: *const ITaskNamedValuePair, name: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Name(self, name);
    }
    pub fn get_Value(self: *const ITaskNamedValuePair, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Value(self, pValue);
    }
    pub fn put_Value(self: *const ITaskNamedValuePair, value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Value(self, value);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITaskNamedValueCollection_Value = Guid.initString("b4ef826b-63c3-46e4-a504-ef69e4f7ea4d");
pub const IID_ITaskNamedValueCollection = &IID_ITaskNamedValueCollection_Value;
pub const ITaskNamedValueCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const ITaskNamedValueCollection,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: *const fn(
            self: *const ITaskNamedValueCollection,
            index: i32,
            ppPair: ?*?*ITaskNamedValuePair,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const ITaskNamedValueCollection,
            ppEnum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: *const fn(
            self: *const ITaskNamedValueCollection,
            name: ?BSTR,
            value: ?BSTR,
            ppPair: ?*?*ITaskNamedValuePair,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const ITaskNamedValueCollection,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn(
            self: *const ITaskNamedValueCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Count(self: *const ITaskNamedValueCollection, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pCount);
    }
    pub fn get_Item(self: *const ITaskNamedValueCollection, index: i32, ppPair: ?*?*ITaskNamedValuePair) callconv(.Inline) HRESULT {
        return self.vtable.get_Item(self, index, ppPair);
    }
    pub fn get__NewEnum(self: *const ITaskNamedValueCollection, ppEnum: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, ppEnum);
    }
    pub fn Create(self: *const ITaskNamedValueCollection, name: ?BSTR, value: ?BSTR, ppPair: ?*?*ITaskNamedValuePair) callconv(.Inline) HRESULT {
        return self.vtable.Create(self, name, value, ppPair);
    }
    pub fn Remove(self: *const ITaskNamedValueCollection, index: i32) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, index);
    }
    pub fn Clear(self: *const ITaskNamedValueCollection) callconv(.Inline) HRESULT {
        return self.vtable.Clear(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRunningTask_Value = Guid.initString("653758fb-7b9a-4f1e-a471-beeb8e9b834e");
pub const IID_IRunningTask = &IID_IRunningTask_Value;
pub const IRunningTask = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn(
            self: *const IRunningTask,
            pName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InstanceGuid: *const fn(
            self: *const IRunningTask,
            pGuid: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn(
            self: *const IRunningTask,
            pPath: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn(
            self: *const IRunningTask,
            pState: ?*TASK_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentAction: *const fn(
            self: *const IRunningTask,
            pName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn(
            self: *const IRunningTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn(
            self: *const IRunningTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnginePID: *const fn(
            self: *const IRunningTask,
            pPID: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Name(self: *const IRunningTask, pName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Name(self, pName);
    }
    pub fn get_InstanceGuid(self: *const IRunningTask, pGuid: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_InstanceGuid(self, pGuid);
    }
    pub fn get_Path(self: *const IRunningTask, pPath: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Path(self, pPath);
    }
    pub fn get_State(self: *const IRunningTask, pState: ?*TASK_STATE) callconv(.Inline) HRESULT {
        return self.vtable.get_State(self, pState);
    }
    pub fn get_CurrentAction(self: *const IRunningTask, pName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_CurrentAction(self, pName);
    }
    pub fn Stop(self: *const IRunningTask) callconv(.Inline) HRESULT {
        return self.vtable.Stop(self);
    }
    pub fn Refresh(self: *const IRunningTask) callconv(.Inline) HRESULT {
        return self.vtable.Refresh(self);
    }
    pub fn get_EnginePID(self: *const IRunningTask, pPID: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_EnginePID(self, pPID);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRunningTaskCollection_Value = Guid.initString("6a67614b-6828-4fec-aa54-6d52e8f1f2db");
pub const IID_IRunningTaskCollection = &IID_IRunningTaskCollection_Value;
pub const IRunningTaskCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IRunningTaskCollection,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: *const fn(
            self: *const IRunningTaskCollection,
            index: VARIANT,
            ppRunningTask: ?*?*IRunningTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const IRunningTaskCollection,
            ppEnum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Count(self: *const IRunningTaskCollection, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pCount);
    }
    pub fn get_Item(self: *const IRunningTaskCollection, index: VARIANT, ppRunningTask: ?*?*IRunningTask) callconv(.Inline) HRESULT {
        return self.vtable.get_Item(self, index, ppRunningTask);
    }
    pub fn get__NewEnum(self: *const IRunningTaskCollection, ppEnum: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, ppEnum);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRegisteredTask_Value = Guid.initString("9c86f320-dee3-4dd1-b972-a303f26b061e");
pub const IID_IRegisteredTask = &IID_IRegisteredTask_Value;
pub const IRegisteredTask = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn(
            self: *const IRegisteredTask,
            pName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn(
            self: *const IRegisteredTask,
            pPath: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn(
            self: *const IRegisteredTask,
            pState: ?*TASK_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn(
            self: *const IRegisteredTask,
            pEnabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn(
            self: *const IRegisteredTask,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Run: *const fn(
            self: *const IRegisteredTask,
            params: VARIANT,
            ppRunningTask: ?*?*IRunningTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunEx: *const fn(
            self: *const IRegisteredTask,
            params: VARIANT,
            flags: i32,
            sessionID: i32,
            user: ?BSTR,
            ppRunningTask: ?*?*IRunningTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInstances: *const fn(
            self: *const IRegisteredTask,
            flags: i32,
            ppRunningTasks: ?*?*IRunningTaskCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastRunTime: *const fn(
            self: *const IRegisteredTask,
            pLastRunTime: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastTaskResult: *const fn(
            self: *const IRegisteredTask,
            pLastTaskResult: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NumberOfMissedRuns: *const fn(
            self: *const IRegisteredTask,
            pNumberOfMissedRuns: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NextRunTime: *const fn(
            self: *const IRegisteredTask,
            pNextRunTime: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Definition: *const fn(
            self: *const IRegisteredTask,
            ppDefinition: ?*?*ITaskDefinition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Xml: *const fn(
            self: *const IRegisteredTask,
            pXml: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSecurityDescriptor: *const fn(
            self: *const IRegisteredTask,
            securityInformation: i32,
            pSddl: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSecurityDescriptor: *const fn(
            self: *const IRegisteredTask,
            sddl: ?BSTR,
            flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn(
            self: *const IRegisteredTask,
            flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRunTimes: *const fn(
            self: *const IRegisteredTask,
            pstStart: ?*const SYSTEMTIME,
            pstEnd: ?*const SYSTEMTIME,
            pCount: ?*u32,
            pRunTimes: ?*?*SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Name(self: *const IRegisteredTask, pName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Name(self, pName);
    }
    pub fn get_Path(self: *const IRegisteredTask, pPath: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Path(self, pPath);
    }
    pub fn get_State(self: *const IRegisteredTask, pState: ?*TASK_STATE) callconv(.Inline) HRESULT {
        return self.vtable.get_State(self, pState);
    }
    pub fn get_Enabled(self: *const IRegisteredTask, pEnabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Enabled(self, pEnabled);
    }
    pub fn put_Enabled(self: *const IRegisteredTask, enabled: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_Enabled(self, enabled);
    }
    pub fn Run(self: *const IRegisteredTask, params: VARIANT, ppRunningTask: ?*?*IRunningTask) callconv(.Inline) HRESULT {
        return self.vtable.Run(self, params, ppRunningTask);
    }
    pub fn RunEx(self: *const IRegisteredTask, params: VARIANT, flags: i32, sessionID: i32, user: ?BSTR, ppRunningTask: ?*?*IRunningTask) callconv(.Inline) HRESULT {
        return self.vtable.RunEx(self, params, flags, sessionID, user, ppRunningTask);
    }
    pub fn GetInstances(self: *const IRegisteredTask, flags: i32, ppRunningTasks: ?*?*IRunningTaskCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetInstances(self, flags, ppRunningTasks);
    }
    pub fn get_LastRunTime(self: *const IRegisteredTask, pLastRunTime: ?*f64) callconv(.Inline) HRESULT {
        return self.vtable.get_LastRunTime(self, pLastRunTime);
    }
    pub fn get_LastTaskResult(self: *const IRegisteredTask, pLastTaskResult: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_LastTaskResult(self, pLastTaskResult);
    }
    pub fn get_NumberOfMissedRuns(self: *const IRegisteredTask, pNumberOfMissedRuns: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_NumberOfMissedRuns(self, pNumberOfMissedRuns);
    }
    pub fn get_NextRunTime(self: *const IRegisteredTask, pNextRunTime: ?*f64) callconv(.Inline) HRESULT {
        return self.vtable.get_NextRunTime(self, pNextRunTime);
    }
    pub fn get_Definition(self: *const IRegisteredTask, ppDefinition: ?*?*ITaskDefinition) callconv(.Inline) HRESULT {
        return self.vtable.get_Definition(self, ppDefinition);
    }
    pub fn get_Xml(self: *const IRegisteredTask, pXml: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Xml(self, pXml);
    }
    pub fn GetSecurityDescriptor(self: *const IRegisteredTask, securityInformation: i32, pSddl: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetSecurityDescriptor(self, securityInformation, pSddl);
    }
    pub fn SetSecurityDescriptor(self: *const IRegisteredTask, sddl: ?BSTR, flags: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetSecurityDescriptor(self, sddl, flags);
    }
    pub fn Stop(self: *const IRegisteredTask, flags: i32) callconv(.Inline) HRESULT {
        return self.vtable.Stop(self, flags);
    }
    pub fn GetRunTimes(self: *const IRegisteredTask, pstStart: ?*const SYSTEMTIME, pstEnd: ?*const SYSTEMTIME, pCount: ?*u32, pRunTimes: ?*?*SYSTEMTIME) callconv(.Inline) HRESULT {
        return self.vtable.GetRunTimes(self, pstStart, pstEnd, pCount, pRunTimes);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITrigger_Value = Guid.initString("09941815-ea89-4b5b-89e0-2a773801fac3");
pub const IID_ITrigger = &IID_ITrigger_Value;
pub const ITrigger = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn(
            self: *const ITrigger,
            pType: ?*TASK_TRIGGER_TYPE2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn(
            self: *const ITrigger,
            pId: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Id: *const fn(
            self: *const ITrigger,
            id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Repetition: *const fn(
            self: *const ITrigger,
            ppRepeat: ?*?*IRepetitionPattern,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Repetition: *const fn(
            self: *const ITrigger,
            pRepeat: ?*IRepetitionPattern,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExecutionTimeLimit: *const fn(
            self: *const ITrigger,
            pTimeLimit: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ExecutionTimeLimit: *const fn(
            self: *const ITrigger,
            timelimit: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartBoundary: *const fn(
            self: *const ITrigger,
            pStart: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StartBoundary: *const fn(
            self: *const ITrigger,
            start: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EndBoundary: *const fn(
            self: *const ITrigger,
            pEnd: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EndBoundary: *const fn(
            self: *const ITrigger,
            end: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn(
            self: *const ITrigger,
            pEnabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn(
            self: *const ITrigger,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Type(self: *const ITrigger, pType: ?*TASK_TRIGGER_TYPE2) callconv(.Inline) HRESULT {
        return self.vtable.get_Type(self, pType);
    }
    pub fn get_Id(self: *const ITrigger, pId: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Id(self, pId);
    }
    pub fn put_Id(self: *const ITrigger, id: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Id(self, id);
    }
    pub fn get_Repetition(self: *const ITrigger, ppRepeat: ?*?*IRepetitionPattern) callconv(.Inline) HRESULT {
        return self.vtable.get_Repetition(self, ppRepeat);
    }
    pub fn put_Repetition(self: *const ITrigger, pRepeat: ?*IRepetitionPattern) callconv(.Inline) HRESULT {
        return self.vtable.put_Repetition(self, pRepeat);
    }
    pub fn get_ExecutionTimeLimit(self: *const ITrigger, pTimeLimit: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ExecutionTimeLimit(self, pTimeLimit);
    }
    pub fn put_ExecutionTimeLimit(self: *const ITrigger, timelimit: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ExecutionTimeLimit(self, timelimit);
    }
    pub fn get_StartBoundary(self: *const ITrigger, pStart: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_StartBoundary(self, pStart);
    }
    pub fn put_StartBoundary(self: *const ITrigger, start: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_StartBoundary(self, start);
    }
    pub fn get_EndBoundary(self: *const ITrigger, pEnd: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_EndBoundary(self, pEnd);
    }
    pub fn put_EndBoundary(self: *const ITrigger, end: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_EndBoundary(self, end);
    }
    pub fn get_Enabled(self: *const ITrigger, pEnabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Enabled(self, pEnabled);
    }
    pub fn put_Enabled(self: *const ITrigger, enabled: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_Enabled(self, enabled);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IIdleTrigger_Value = Guid.initString("d537d2b0-9fb3-4d34-9739-1ff5ce7b1ef3");
pub const IID_IIdleTrigger = &IID_IIdleTrigger_Value;
pub const IIdleTrigger = extern union {
    pub const VTable = extern struct {
        base: ITrigger.VTable,
    };
    vtable: *const VTable,
    ITrigger: ITrigger,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ILogonTrigger_Value = Guid.initString("72dade38-fae4-4b3e-baf4-5d009af02b1c");
pub const IID_ILogonTrigger = &IID_ILogonTrigger_Value;
pub const ILogonTrigger = extern union {
    pub const VTable = extern struct {
        base: ITrigger.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Delay: *const fn(
            self: *const ILogonTrigger,
            pDelay: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Delay: *const fn(
            self: *const ILogonTrigger,
            delay: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserId: *const fn(
            self: *const ILogonTrigger,
            pUser: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UserId: *const fn(
            self: *const ILogonTrigger,
            user: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ITrigger: ITrigger,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Delay(self: *const ILogonTrigger, pDelay: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Delay(self, pDelay);
    }
    pub fn put_Delay(self: *const ILogonTrigger, delay: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Delay(self, delay);
    }
    pub fn get_UserId(self: *const ILogonTrigger, pUser: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_UserId(self, pUser);
    }
    pub fn put_UserId(self: *const ILogonTrigger, user: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_UserId(self, user);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISessionStateChangeTrigger_Value = Guid.initString("754da71b-4385-4475-9dd9-598294fa3641");
pub const IID_ISessionStateChangeTrigger = &IID_ISessionStateChangeTrigger_Value;
pub const ISessionStateChangeTrigger = extern union {
    pub const VTable = extern struct {
        base: ITrigger.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Delay: *const fn(
            self: *const ISessionStateChangeTrigger,
            pDelay: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Delay: *const fn(
            self: *const ISessionStateChangeTrigger,
            delay: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserId: *const fn(
            self: *const ISessionStateChangeTrigger,
            pUser: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UserId: *const fn(
            self: *const ISessionStateChangeTrigger,
            user: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StateChange: *const fn(
            self: *const ISessionStateChangeTrigger,
            pType: ?*TASK_SESSION_STATE_CHANGE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StateChange: *const fn(
            self: *const ISessionStateChangeTrigger,
            type: TASK_SESSION_STATE_CHANGE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ITrigger: ITrigger,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Delay(self: *const ISessionStateChangeTrigger, pDelay: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Delay(self, pDelay);
    }
    pub fn put_Delay(self: *const ISessionStateChangeTrigger, delay: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Delay(self, delay);
    }
    pub fn get_UserId(self: *const ISessionStateChangeTrigger, pUser: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_UserId(self, pUser);
    }
    pub fn put_UserId(self: *const ISessionStateChangeTrigger, user: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_UserId(self, user);
    }
    pub fn get_StateChange(self: *const ISessionStateChangeTrigger, pType: ?*TASK_SESSION_STATE_CHANGE_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.get_StateChange(self, pType);
    }
    pub fn put_StateChange(self: *const ISessionStateChangeTrigger, @"type": TASK_SESSION_STATE_CHANGE_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.put_StateChange(self, @"type");
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEventTrigger_Value = Guid.initString("d45b0167-9653-4eef-b94f-0732ca7af251");
pub const IID_IEventTrigger = &IID_IEventTrigger_Value;
pub const IEventTrigger = extern union {
    pub const VTable = extern struct {
        base: ITrigger.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Subscription: *const fn(
            self: *const IEventTrigger,
            pQuery: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Subscription: *const fn(
            self: *const IEventTrigger,
            query: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Delay: *const fn(
            self: *const IEventTrigger,
            pDelay: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Delay: *const fn(
            self: *const IEventTrigger,
            delay: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ValueQueries: *const fn(
            self: *const IEventTrigger,
            ppNamedXPaths: ?*?*ITaskNamedValueCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ValueQueries: *const fn(
            self: *const IEventTrigger,
            pNamedXPaths: ?*ITaskNamedValueCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ITrigger: ITrigger,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Subscription(self: *const IEventTrigger, pQuery: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Subscription(self, pQuery);
    }
    pub fn put_Subscription(self: *const IEventTrigger, query: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Subscription(self, query);
    }
    pub fn get_Delay(self: *const IEventTrigger, pDelay: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Delay(self, pDelay);
    }
    pub fn put_Delay(self: *const IEventTrigger, delay: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Delay(self, delay);
    }
    pub fn get_ValueQueries(self: *const IEventTrigger, ppNamedXPaths: ?*?*ITaskNamedValueCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_ValueQueries(self, ppNamedXPaths);
    }
    pub fn put_ValueQueries(self: *const IEventTrigger, pNamedXPaths: ?*ITaskNamedValueCollection) callconv(.Inline) HRESULT {
        return self.vtable.put_ValueQueries(self, pNamedXPaths);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITimeTrigger_Value = Guid.initString("b45747e0-eba7-4276-9f29-85c5bb300006");
pub const IID_ITimeTrigger = &IID_ITimeTrigger_Value;
pub const ITimeTrigger = extern union {
    pub const VTable = extern struct {
        base: ITrigger.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RandomDelay: *const fn(
            self: *const ITimeTrigger,
            pRandomDelay: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RandomDelay: *const fn(
            self: *const ITimeTrigger,
            randomDelay: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ITrigger: ITrigger,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_RandomDelay(self: *const ITimeTrigger, pRandomDelay: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RandomDelay(self, pRandomDelay);
    }
    pub fn put_RandomDelay(self: *const ITimeTrigger, randomDelay: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_RandomDelay(self, randomDelay);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDailyTrigger_Value = Guid.initString("126c5cd8-b288-41d5-8dbf-e491446adc5c");
pub const IID_IDailyTrigger = &IID_IDailyTrigger_Value;
pub const IDailyTrigger = extern union {
    pub const VTable = extern struct {
        base: ITrigger.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DaysInterval: *const fn(
            self: *const IDailyTrigger,
            pDays: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DaysInterval: *const fn(
            self: *const IDailyTrigger,
            days: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RandomDelay: *const fn(
            self: *const IDailyTrigger,
            pRandomDelay: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RandomDelay: *const fn(
            self: *const IDailyTrigger,
            randomDelay: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ITrigger: ITrigger,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_DaysInterval(self: *const IDailyTrigger, pDays: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_DaysInterval(self, pDays);
    }
    pub fn put_DaysInterval(self: *const IDailyTrigger, days: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_DaysInterval(self, days);
    }
    pub fn get_RandomDelay(self: *const IDailyTrigger, pRandomDelay: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RandomDelay(self, pRandomDelay);
    }
    pub fn put_RandomDelay(self: *const IDailyTrigger, randomDelay: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_RandomDelay(self, randomDelay);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWeeklyTrigger_Value = Guid.initString("5038fc98-82ff-436d-8728-a512a57c9dc1");
pub const IID_IWeeklyTrigger = &IID_IWeeklyTrigger_Value;
pub const IWeeklyTrigger = extern union {
    pub const VTable = extern struct {
        base: ITrigger.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DaysOfWeek: *const fn(
            self: *const IWeeklyTrigger,
            pDays: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DaysOfWeek: *const fn(
            self: *const IWeeklyTrigger,
            days: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WeeksInterval: *const fn(
            self: *const IWeeklyTrigger,
            pWeeks: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_WeeksInterval: *const fn(
            self: *const IWeeklyTrigger,
            weeks: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RandomDelay: *const fn(
            self: *const IWeeklyTrigger,
            pRandomDelay: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RandomDelay: *const fn(
            self: *const IWeeklyTrigger,
            randomDelay: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ITrigger: ITrigger,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_DaysOfWeek(self: *const IWeeklyTrigger, pDays: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_DaysOfWeek(self, pDays);
    }
    pub fn put_DaysOfWeek(self: *const IWeeklyTrigger, days: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_DaysOfWeek(self, days);
    }
    pub fn get_WeeksInterval(self: *const IWeeklyTrigger, pWeeks: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_WeeksInterval(self, pWeeks);
    }
    pub fn put_WeeksInterval(self: *const IWeeklyTrigger, weeks: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_WeeksInterval(self, weeks);
    }
    pub fn get_RandomDelay(self: *const IWeeklyTrigger, pRandomDelay: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RandomDelay(self, pRandomDelay);
    }
    pub fn put_RandomDelay(self: *const IWeeklyTrigger, randomDelay: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_RandomDelay(self, randomDelay);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IMonthlyTrigger_Value = Guid.initString("97c45ef1-6b02-4a1a-9c0e-1ebfba1500ac");
pub const IID_IMonthlyTrigger = &IID_IMonthlyTrigger_Value;
pub const IMonthlyTrigger = extern union {
    pub const VTable = extern struct {
        base: ITrigger.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DaysOfMonth: *const fn(
            self: *const IMonthlyTrigger,
            pDays: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DaysOfMonth: *const fn(
            self: *const IMonthlyTrigger,
            days: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MonthsOfYear: *const fn(
            self: *const IMonthlyTrigger,
            pMonths: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MonthsOfYear: *const fn(
            self: *const IMonthlyTrigger,
            months: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RunOnLastDayOfMonth: *const fn(
            self: *const IMonthlyTrigger,
            pLastDay: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RunOnLastDayOfMonth: *const fn(
            self: *const IMonthlyTrigger,
            lastDay: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RandomDelay: *const fn(
            self: *const IMonthlyTrigger,
            pRandomDelay: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RandomDelay: *const fn(
            self: *const IMonthlyTrigger,
            randomDelay: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ITrigger: ITrigger,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_DaysOfMonth(self: *const IMonthlyTrigger, pDays: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_DaysOfMonth(self, pDays);
    }
    pub fn put_DaysOfMonth(self: *const IMonthlyTrigger, days: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_DaysOfMonth(self, days);
    }
    pub fn get_MonthsOfYear(self: *const IMonthlyTrigger, pMonths: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_MonthsOfYear(self, pMonths);
    }
    pub fn put_MonthsOfYear(self: *const IMonthlyTrigger, months: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_MonthsOfYear(self, months);
    }
    pub fn get_RunOnLastDayOfMonth(self: *const IMonthlyTrigger, pLastDay: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_RunOnLastDayOfMonth(self, pLastDay);
    }
    pub fn put_RunOnLastDayOfMonth(self: *const IMonthlyTrigger, lastDay: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_RunOnLastDayOfMonth(self, lastDay);
    }
    pub fn get_RandomDelay(self: *const IMonthlyTrigger, pRandomDelay: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RandomDelay(self, pRandomDelay);
    }
    pub fn put_RandomDelay(self: *const IMonthlyTrigger, randomDelay: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_RandomDelay(self, randomDelay);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IMonthlyDOWTrigger_Value = Guid.initString("77d025a3-90fa-43aa-b52e-cda5499b946a");
pub const IID_IMonthlyDOWTrigger = &IID_IMonthlyDOWTrigger_Value;
pub const IMonthlyDOWTrigger = extern union {
    pub const VTable = extern struct {
        base: ITrigger.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DaysOfWeek: *const fn(
            self: *const IMonthlyDOWTrigger,
            pDays: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DaysOfWeek: *const fn(
            self: *const IMonthlyDOWTrigger,
            days: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WeeksOfMonth: *const fn(
            self: *const IMonthlyDOWTrigger,
            pWeeks: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_WeeksOfMonth: *const fn(
            self: *const IMonthlyDOWTrigger,
            weeks: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MonthsOfYear: *const fn(
            self: *const IMonthlyDOWTrigger,
            pMonths: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MonthsOfYear: *const fn(
            self: *const IMonthlyDOWTrigger,
            months: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RunOnLastWeekOfMonth: *const fn(
            self: *const IMonthlyDOWTrigger,
            pLastWeek: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RunOnLastWeekOfMonth: *const fn(
            self: *const IMonthlyDOWTrigger,
            lastWeek: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RandomDelay: *const fn(
            self: *const IMonthlyDOWTrigger,
            pRandomDelay: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RandomDelay: *const fn(
            self: *const IMonthlyDOWTrigger,
            randomDelay: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ITrigger: ITrigger,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_DaysOfWeek(self: *const IMonthlyDOWTrigger, pDays: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_DaysOfWeek(self, pDays);
    }
    pub fn put_DaysOfWeek(self: *const IMonthlyDOWTrigger, days: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_DaysOfWeek(self, days);
    }
    pub fn get_WeeksOfMonth(self: *const IMonthlyDOWTrigger, pWeeks: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_WeeksOfMonth(self, pWeeks);
    }
    pub fn put_WeeksOfMonth(self: *const IMonthlyDOWTrigger, weeks: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_WeeksOfMonth(self, weeks);
    }
    pub fn get_MonthsOfYear(self: *const IMonthlyDOWTrigger, pMonths: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_MonthsOfYear(self, pMonths);
    }
    pub fn put_MonthsOfYear(self: *const IMonthlyDOWTrigger, months: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_MonthsOfYear(self, months);
    }
    pub fn get_RunOnLastWeekOfMonth(self: *const IMonthlyDOWTrigger, pLastWeek: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_RunOnLastWeekOfMonth(self, pLastWeek);
    }
    pub fn put_RunOnLastWeekOfMonth(self: *const IMonthlyDOWTrigger, lastWeek: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_RunOnLastWeekOfMonth(self, lastWeek);
    }
    pub fn get_RandomDelay(self: *const IMonthlyDOWTrigger, pRandomDelay: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RandomDelay(self, pRandomDelay);
    }
    pub fn put_RandomDelay(self: *const IMonthlyDOWTrigger, randomDelay: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_RandomDelay(self, randomDelay);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IBootTrigger_Value = Guid.initString("2a9c35da-d357-41f4-bbc1-207ac1b1f3cb");
pub const IID_IBootTrigger = &IID_IBootTrigger_Value;
pub const IBootTrigger = extern union {
    pub const VTable = extern struct {
        base: ITrigger.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Delay: *const fn(
            self: *const IBootTrigger,
            pDelay: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Delay: *const fn(
            self: *const IBootTrigger,
            delay: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ITrigger: ITrigger,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Delay(self: *const IBootTrigger, pDelay: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Delay(self, pDelay);
    }
    pub fn put_Delay(self: *const IBootTrigger, delay: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Delay(self, delay);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRegistrationTrigger_Value = Guid.initString("4c8fec3a-c218-4e0c-b23d-629024db91a2");
pub const IID_IRegistrationTrigger = &IID_IRegistrationTrigger_Value;
pub const IRegistrationTrigger = extern union {
    pub const VTable = extern struct {
        base: ITrigger.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Delay: *const fn(
            self: *const IRegistrationTrigger,
            pDelay: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Delay: *const fn(
            self: *const IRegistrationTrigger,
            delay: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ITrigger: ITrigger,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Delay(self: *const IRegistrationTrigger, pDelay: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Delay(self, pDelay);
    }
    pub fn put_Delay(self: *const IRegistrationTrigger, delay: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Delay(self, delay);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAction_Value = Guid.initString("bae54997-48b1-4cbe-9965-d6be263ebea4");
pub const IID_IAction = &IID_IAction_Value;
pub const IAction = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn(
            self: *const IAction,
            pId: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Id: *const fn(
            self: *const IAction,
            Id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn(
            self: *const IAction,
            pType: ?*TASK_ACTION_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Id(self: *const IAction, pId: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Id(self, pId);
    }
    pub fn put_Id(self: *const IAction, Id: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Id(self, Id);
    }
    pub fn get_Type(self: *const IAction, pType: ?*TASK_ACTION_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.get_Type(self, pType);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IExecAction_Value = Guid.initString("4c3d624d-fd6b-49a3-b9b7-09cb3cd3f047");
pub const IID_IExecAction = &IID_IExecAction_Value;
pub const IExecAction = extern union {
    pub const VTable = extern struct {
        base: IAction.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn(
            self: *const IExecAction,
            pPath: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Path: *const fn(
            self: *const IExecAction,
            path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Arguments: *const fn(
            self: *const IExecAction,
            pArgument: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Arguments: *const fn(
            self: *const IExecAction,
            argument: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WorkingDirectory: *const fn(
            self: *const IExecAction,
            pWorkingDirectory: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_WorkingDirectory: *const fn(
            self: *const IExecAction,
            workingDirectory: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IAction: IAction,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Path(self: *const IExecAction, pPath: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Path(self, pPath);
    }
    pub fn put_Path(self: *const IExecAction, path: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Path(self, path);
    }
    pub fn get_Arguments(self: *const IExecAction, pArgument: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Arguments(self, pArgument);
    }
    pub fn put_Arguments(self: *const IExecAction, argument: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Arguments(self, argument);
    }
    pub fn get_WorkingDirectory(self: *const IExecAction, pWorkingDirectory: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_WorkingDirectory(self, pWorkingDirectory);
    }
    pub fn put_WorkingDirectory(self: *const IExecAction, workingDirectory: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_WorkingDirectory(self, workingDirectory);
    }
};

const IID_IExecAction2_Value = Guid.initString("f2a82542-bda5-4e6b-9143-e2bf4f8987b6");
pub const IID_IExecAction2 = &IID_IExecAction2_Value;
pub const IExecAction2 = extern union {
    pub const VTable = extern struct {
        base: IExecAction.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HideAppWindow: *const fn(
            self: *const IExecAction2,
            pHideAppWindow: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HideAppWindow: *const fn(
            self: *const IExecAction2,
            hideAppWindow: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IExecAction: IExecAction,
    IAction: IAction,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_HideAppWindow(self: *const IExecAction2, pHideAppWindow: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_HideAppWindow(self, pHideAppWindow);
    }
    pub fn put_HideAppWindow(self: *const IExecAction2, hideAppWindow: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_HideAppWindow(self, hideAppWindow);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IShowMessageAction_Value = Guid.initString("505e9e68-af89-46b8-a30f-56162a83d537");
pub const IID_IShowMessageAction = &IID_IShowMessageAction_Value;
pub const IShowMessageAction = extern union {
    pub const VTable = extern struct {
        base: IAction.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Title: *const fn(
            self: *const IShowMessageAction,
            pTitle: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Title: *const fn(
            self: *const IShowMessageAction,
            title: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MessageBody: *const fn(
            self: *const IShowMessageAction,
            pMessageBody: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MessageBody: *const fn(
            self: *const IShowMessageAction,
            messageBody: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IAction: IAction,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Title(self: *const IShowMessageAction, pTitle: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Title(self, pTitle);
    }
    pub fn put_Title(self: *const IShowMessageAction, title: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Title(self, title);
    }
    pub fn get_MessageBody(self: *const IShowMessageAction, pMessageBody: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_MessageBody(self, pMessageBody);
    }
    pub fn put_MessageBody(self: *const IShowMessageAction, messageBody: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_MessageBody(self, messageBody);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IComHandlerAction_Value = Guid.initString("6d2fd252-75c5-4f66-90ba-2a7d8cc3039f");
pub const IID_IComHandlerAction = &IID_IComHandlerAction_Value;
pub const IComHandlerAction = extern union {
    pub const VTable = extern struct {
        base: IAction.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClassId: *const fn(
            self: *const IComHandlerAction,
            pClsid: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ClassId: *const fn(
            self: *const IComHandlerAction,
            clsid: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Data: *const fn(
            self: *const IComHandlerAction,
            pData: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Data: *const fn(
            self: *const IComHandlerAction,
            data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IAction: IAction,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ClassId(self: *const IComHandlerAction, pClsid: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ClassId(self, pClsid);
    }
    pub fn put_ClassId(self: *const IComHandlerAction, clsid: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ClassId(self, clsid);
    }
    pub fn get_Data(self: *const IComHandlerAction, pData: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Data(self, pData);
    }
    pub fn put_Data(self: *const IComHandlerAction, data: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Data(self, data);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEmailAction_Value = Guid.initString("10f62c64-7e16-4314-a0c2-0c3683f99d40");
pub const IID_IEmailAction = &IID_IEmailAction_Value;
pub const IEmailAction = extern union {
    pub const VTable = extern struct {
        base: IAction.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Server: *const fn(
            self: *const IEmailAction,
            pServer: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Server: *const fn(
            self: *const IEmailAction,
            server: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Subject: *const fn(
            self: *const IEmailAction,
            pSubject: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Subject: *const fn(
            self: *const IEmailAction,
            subject: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_To: *const fn(
            self: *const IEmailAction,
            pTo: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_To: *const fn(
            self: *const IEmailAction,
            to: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Cc: *const fn(
            self: *const IEmailAction,
            pCc: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Cc: *const fn(
            self: *const IEmailAction,
            cc: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Bcc: *const fn(
            self: *const IEmailAction,
            pBcc: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Bcc: *const fn(
            self: *const IEmailAction,
            bcc: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReplyTo: *const fn(
            self: *const IEmailAction,
            pReplyTo: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReplyTo: *const fn(
            self: *const IEmailAction,
            replyTo: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_From: *const fn(
            self: *const IEmailAction,
            pFrom: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_From: *const fn(
            self: *const IEmailAction,
            from: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HeaderFields: *const fn(
            self: *const IEmailAction,
            ppHeaderFields: ?*?*ITaskNamedValueCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HeaderFields: *const fn(
            self: *const IEmailAction,
            pHeaderFields: ?*ITaskNamedValueCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Body: *const fn(
            self: *const IEmailAction,
            pBody: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Body: *const fn(
            self: *const IEmailAction,
            body: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Attachments: *const fn(
            self: *const IEmailAction,
            pAttachements: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Attachments: *const fn(
            self: *const IEmailAction,
            pAttachements: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IAction: IAction,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Server(self: *const IEmailAction, pServer: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Server(self, pServer);
    }
    pub fn put_Server(self: *const IEmailAction, server: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Server(self, server);
    }
    pub fn get_Subject(self: *const IEmailAction, pSubject: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Subject(self, pSubject);
    }
    pub fn put_Subject(self: *const IEmailAction, subject: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Subject(self, subject);
    }
    pub fn get_To(self: *const IEmailAction, pTo: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_To(self, pTo);
    }
    pub fn put_To(self: *const IEmailAction, to: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_To(self, to);
    }
    pub fn get_Cc(self: *const IEmailAction, pCc: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Cc(self, pCc);
    }
    pub fn put_Cc(self: *const IEmailAction, cc: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Cc(self, cc);
    }
    pub fn get_Bcc(self: *const IEmailAction, pBcc: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Bcc(self, pBcc);
    }
    pub fn put_Bcc(self: *const IEmailAction, bcc: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Bcc(self, bcc);
    }
    pub fn get_ReplyTo(self: *const IEmailAction, pReplyTo: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ReplyTo(self, pReplyTo);
    }
    pub fn put_ReplyTo(self: *const IEmailAction, replyTo: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ReplyTo(self, replyTo);
    }
    pub fn get_From(self: *const IEmailAction, pFrom: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_From(self, pFrom);
    }
    pub fn put_From(self: *const IEmailAction, from: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_From(self, from);
    }
    pub fn get_HeaderFields(self: *const IEmailAction, ppHeaderFields: ?*?*ITaskNamedValueCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_HeaderFields(self, ppHeaderFields);
    }
    pub fn put_HeaderFields(self: *const IEmailAction, pHeaderFields: ?*ITaskNamedValueCollection) callconv(.Inline) HRESULT {
        return self.vtable.put_HeaderFields(self, pHeaderFields);
    }
    pub fn get_Body(self: *const IEmailAction, pBody: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Body(self, pBody);
    }
    pub fn put_Body(self: *const IEmailAction, body: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Body(self, body);
    }
    pub fn get_Attachments(self: *const IEmailAction, pAttachements: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.get_Attachments(self, pAttachements);
    }
    pub fn put_Attachments(self: *const IEmailAction, pAttachements: ?*SAFEARRAY) callconv(.Inline) HRESULT {
        return self.vtable.put_Attachments(self, pAttachements);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITriggerCollection_Value = Guid.initString("85df5081-1b24-4f32-878a-d9d14df4cb77");
pub const IID_ITriggerCollection = &IID_ITriggerCollection_Value;
pub const ITriggerCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const ITriggerCollection,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: *const fn(
            self: *const ITriggerCollection,
            index: i32,
            ppTrigger: ?*?*ITrigger,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const ITriggerCollection,
            ppEnum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: *const fn(
            self: *const ITriggerCollection,
            type: TASK_TRIGGER_TYPE2,
            ppTrigger: ?*?*ITrigger,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const ITriggerCollection,
            index: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn(
            self: *const ITriggerCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Count(self: *const ITriggerCollection, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pCount);
    }
    pub fn get_Item(self: *const ITriggerCollection, index: i32, ppTrigger: ?*?*ITrigger) callconv(.Inline) HRESULT {
        return self.vtable.get_Item(self, index, ppTrigger);
    }
    pub fn get__NewEnum(self: *const ITriggerCollection, ppEnum: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, ppEnum);
    }
    pub fn Create(self: *const ITriggerCollection, @"type": TASK_TRIGGER_TYPE2, ppTrigger: ?*?*ITrigger) callconv(.Inline) HRESULT {
        return self.vtable.Create(self, @"type", ppTrigger);
    }
    pub fn Remove(self: *const ITriggerCollection, index: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, index);
    }
    pub fn Clear(self: *const ITriggerCollection) callconv(.Inline) HRESULT {
        return self.vtable.Clear(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IActionCollection_Value = Guid.initString("02820e19-7b98-4ed2-b2e8-fdccceff619b");
pub const IID_IActionCollection = &IID_IActionCollection_Value;
pub const IActionCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IActionCollection,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: *const fn(
            self: *const IActionCollection,
            index: i32,
            ppAction: ?*?*IAction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const IActionCollection,
            ppEnum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_XmlText: *const fn(
            self: *const IActionCollection,
            pText: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_XmlText: *const fn(
            self: *const IActionCollection,
            text: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: *const fn(
            self: *const IActionCollection,
            type: TASK_ACTION_TYPE,
            ppAction: ?*?*IAction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const IActionCollection,
            index: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn(
            self: *const IActionCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Context: *const fn(
            self: *const IActionCollection,
            pContext: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Context: *const fn(
            self: *const IActionCollection,
            context: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Count(self: *const IActionCollection, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pCount);
    }
    pub fn get_Item(self: *const IActionCollection, index: i32, ppAction: ?*?*IAction) callconv(.Inline) HRESULT {
        return self.vtable.get_Item(self, index, ppAction);
    }
    pub fn get__NewEnum(self: *const IActionCollection, ppEnum: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, ppEnum);
    }
    pub fn get_XmlText(self: *const IActionCollection, pText: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_XmlText(self, pText);
    }
    pub fn put_XmlText(self: *const IActionCollection, text: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_XmlText(self, text);
    }
    pub fn Create(self: *const IActionCollection, @"type": TASK_ACTION_TYPE, ppAction: ?*?*IAction) callconv(.Inline) HRESULT {
        return self.vtable.Create(self, @"type", ppAction);
    }
    pub fn Remove(self: *const IActionCollection, index: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, index);
    }
    pub fn Clear(self: *const IActionCollection) callconv(.Inline) HRESULT {
        return self.vtable.Clear(self);
    }
    pub fn get_Context(self: *const IActionCollection, pContext: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Context(self, pContext);
    }
    pub fn put_Context(self: *const IActionCollection, context: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Context(self, context);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPrincipal_Value = Guid.initString("d98d51e5-c9b4-496a-a9c1-18980261cf0f");
pub const IID_IPrincipal = &IID_IPrincipal_Value;
pub const IPrincipal = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn(
            self: *const IPrincipal,
            pId: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Id: *const fn(
            self: *const IPrincipal,
            Id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayName: *const fn(
            self: *const IPrincipal,
            pName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisplayName: *const fn(
            self: *const IPrincipal,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserId: *const fn(
            self: *const IPrincipal,
            pUser: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UserId: *const fn(
            self: *const IPrincipal,
            user: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogonType: *const fn(
            self: *const IPrincipal,
            pLogon: ?*TASK_LOGON_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogonType: *const fn(
            self: *const IPrincipal,
            logon: TASK_LOGON_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GroupId: *const fn(
            self: *const IPrincipal,
            pGroup: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GroupId: *const fn(
            self: *const IPrincipal,
            group: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RunLevel: *const fn(
            self: *const IPrincipal,
            pRunLevel: ?*TASK_RUNLEVEL_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RunLevel: *const fn(
            self: *const IPrincipal,
            runLevel: TASK_RUNLEVEL_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Id(self: *const IPrincipal, pId: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Id(self, pId);
    }
    pub fn put_Id(self: *const IPrincipal, Id: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Id(self, Id);
    }
    pub fn get_DisplayName(self: *const IPrincipal, pName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_DisplayName(self, pName);
    }
    pub fn put_DisplayName(self: *const IPrincipal, name: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_DisplayName(self, name);
    }
    pub fn get_UserId(self: *const IPrincipal, pUser: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_UserId(self, pUser);
    }
    pub fn put_UserId(self: *const IPrincipal, user: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_UserId(self, user);
    }
    pub fn get_LogonType(self: *const IPrincipal, pLogon: ?*TASK_LOGON_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.get_LogonType(self, pLogon);
    }
    pub fn put_LogonType(self: *const IPrincipal, logon: TASK_LOGON_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.put_LogonType(self, logon);
    }
    pub fn get_GroupId(self: *const IPrincipal, pGroup: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_GroupId(self, pGroup);
    }
    pub fn put_GroupId(self: *const IPrincipal, group: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_GroupId(self, group);
    }
    pub fn get_RunLevel(self: *const IPrincipal, pRunLevel: ?*TASK_RUNLEVEL_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.get_RunLevel(self, pRunLevel);
    }
    pub fn put_RunLevel(self: *const IPrincipal, runLevel: TASK_RUNLEVEL_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.put_RunLevel(self, runLevel);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IPrincipal2_Value = Guid.initString("248919ae-e345-4a6d-8aeb-e0d3165c904e");
pub const IID_IPrincipal2 = &IID_IPrincipal2_Value;
pub const IPrincipal2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProcessTokenSidType: *const fn(
            self: *const IPrincipal2,
            pProcessTokenSidType: ?*TASK_PROCESSTOKENSID_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProcessTokenSidType: *const fn(
            self: *const IPrincipal2,
            processTokenSidType: TASK_PROCESSTOKENSID_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequiredPrivilegeCount: *const fn(
            self: *const IPrincipal2,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RequiredPrivilege: *const fn(
            self: *const IPrincipal2,
            index: i32,
            pPrivilege: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRequiredPrivilege: *const fn(
            self: *const IPrincipal2,
            privilege: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ProcessTokenSidType(self: *const IPrincipal2, pProcessTokenSidType: ?*TASK_PROCESSTOKENSID_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.get_ProcessTokenSidType(self, pProcessTokenSidType);
    }
    pub fn put_ProcessTokenSidType(self: *const IPrincipal2, processTokenSidType: TASK_PROCESSTOKENSID_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.put_ProcessTokenSidType(self, processTokenSidType);
    }
    pub fn get_RequiredPrivilegeCount(self: *const IPrincipal2, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_RequiredPrivilegeCount(self, pCount);
    }
    pub fn get_RequiredPrivilege(self: *const IPrincipal2, index: i32, pPrivilege: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RequiredPrivilege(self, index, pPrivilege);
    }
    pub fn AddRequiredPrivilege(self: *const IPrincipal2, privilege: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.AddRequiredPrivilege(self, privilege);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRegistrationInfo_Value = Guid.initString("416d8b73-cb41-4ea1-805c-9be9a5ac4a74");
pub const IID_IRegistrationInfo = &IID_IRegistrationInfo_Value;
pub const IRegistrationInfo = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn(
            self: *const IRegistrationInfo,
            pDescription: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn(
            self: *const IRegistrationInfo,
            description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Author: *const fn(
            self: *const IRegistrationInfo,
            pAuthor: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Author: *const fn(
            self: *const IRegistrationInfo,
            author: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Version: *const fn(
            self: *const IRegistrationInfo,
            pVersion: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Version: *const fn(
            self: *const IRegistrationInfo,
            version: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Date: *const fn(
            self: *const IRegistrationInfo,
            pDate: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Date: *const fn(
            self: *const IRegistrationInfo,
            date: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Documentation: *const fn(
            self: *const IRegistrationInfo,
            pDocumentation: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Documentation: *const fn(
            self: *const IRegistrationInfo,
            documentation: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_XmlText: *const fn(
            self: *const IRegistrationInfo,
            pText: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_XmlText: *const fn(
            self: *const IRegistrationInfo,
            text: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_URI: *const fn(
            self: *const IRegistrationInfo,
            pUri: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_URI: *const fn(
            self: *const IRegistrationInfo,
            uri: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SecurityDescriptor: *const fn(
            self: *const IRegistrationInfo,
            pSddl: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SecurityDescriptor: *const fn(
            self: *const IRegistrationInfo,
            sddl: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Source: *const fn(
            self: *const IRegistrationInfo,
            pSource: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Source: *const fn(
            self: *const IRegistrationInfo,
            source: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Description(self: *const IRegistrationInfo, pDescription: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Description(self, pDescription);
    }
    pub fn put_Description(self: *const IRegistrationInfo, description: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Description(self, description);
    }
    pub fn get_Author(self: *const IRegistrationInfo, pAuthor: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Author(self, pAuthor);
    }
    pub fn put_Author(self: *const IRegistrationInfo, author: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Author(self, author);
    }
    pub fn get_Version(self: *const IRegistrationInfo, pVersion: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Version(self, pVersion);
    }
    pub fn put_Version(self: *const IRegistrationInfo, version: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Version(self, version);
    }
    pub fn get_Date(self: *const IRegistrationInfo, pDate: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Date(self, pDate);
    }
    pub fn put_Date(self: *const IRegistrationInfo, date: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Date(self, date);
    }
    pub fn get_Documentation(self: *const IRegistrationInfo, pDocumentation: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Documentation(self, pDocumentation);
    }
    pub fn put_Documentation(self: *const IRegistrationInfo, documentation: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Documentation(self, documentation);
    }
    pub fn get_XmlText(self: *const IRegistrationInfo, pText: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_XmlText(self, pText);
    }
    pub fn put_XmlText(self: *const IRegistrationInfo, text: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_XmlText(self, text);
    }
    pub fn get_URI(self: *const IRegistrationInfo, pUri: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_URI(self, pUri);
    }
    pub fn put_URI(self: *const IRegistrationInfo, uri: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_URI(self, uri);
    }
    pub fn get_SecurityDescriptor(self: *const IRegistrationInfo, pSddl: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_SecurityDescriptor(self, pSddl);
    }
    pub fn put_SecurityDescriptor(self: *const IRegistrationInfo, sddl: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_SecurityDescriptor(self, sddl);
    }
    pub fn get_Source(self: *const IRegistrationInfo, pSource: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Source(self, pSource);
    }
    pub fn put_Source(self: *const IRegistrationInfo, source: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Source(self, source);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITaskDefinition_Value = Guid.initString("f5bc8fc5-536d-4f77-b852-fbc1356fdeb6");
pub const IID_ITaskDefinition = &IID_ITaskDefinition_Value;
pub const ITaskDefinition = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RegistrationInfo: *const fn(
            self: *const ITaskDefinition,
            ppRegistrationInfo: ?*?*IRegistrationInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RegistrationInfo: *const fn(
            self: *const ITaskDefinition,
            pRegistrationInfo: ?*IRegistrationInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Triggers: *const fn(
            self: *const ITaskDefinition,
            ppTriggers: ?*?*ITriggerCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Triggers: *const fn(
            self: *const ITaskDefinition,
            pTriggers: ?*ITriggerCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Settings: *const fn(
            self: *const ITaskDefinition,
            ppSettings: ?*?*ITaskSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Settings: *const fn(
            self: *const ITaskDefinition,
            pSettings: ?*ITaskSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Data: *const fn(
            self: *const ITaskDefinition,
            pData: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Data: *const fn(
            self: *const ITaskDefinition,
            data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Principal: *const fn(
            self: *const ITaskDefinition,
            ppPrincipal: ?*?*IPrincipal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Principal: *const fn(
            self: *const ITaskDefinition,
            pPrincipal: ?*IPrincipal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Actions: *const fn(
            self: *const ITaskDefinition,
            ppActions: ?*?*IActionCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Actions: *const fn(
            self: *const ITaskDefinition,
            pActions: ?*IActionCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_XmlText: *const fn(
            self: *const ITaskDefinition,
            pXml: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_XmlText: *const fn(
            self: *const ITaskDefinition,
            xml: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_RegistrationInfo(self: *const ITaskDefinition, ppRegistrationInfo: ?*?*IRegistrationInfo) callconv(.Inline) HRESULT {
        return self.vtable.get_RegistrationInfo(self, ppRegistrationInfo);
    }
    pub fn put_RegistrationInfo(self: *const ITaskDefinition, pRegistrationInfo: ?*IRegistrationInfo) callconv(.Inline) HRESULT {
        return self.vtable.put_RegistrationInfo(self, pRegistrationInfo);
    }
    pub fn get_Triggers(self: *const ITaskDefinition, ppTriggers: ?*?*ITriggerCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_Triggers(self, ppTriggers);
    }
    pub fn put_Triggers(self: *const ITaskDefinition, pTriggers: ?*ITriggerCollection) callconv(.Inline) HRESULT {
        return self.vtable.put_Triggers(self, pTriggers);
    }
    pub fn get_Settings(self: *const ITaskDefinition, ppSettings: ?*?*ITaskSettings) callconv(.Inline) HRESULT {
        return self.vtable.get_Settings(self, ppSettings);
    }
    pub fn put_Settings(self: *const ITaskDefinition, pSettings: ?*ITaskSettings) callconv(.Inline) HRESULT {
        return self.vtable.put_Settings(self, pSettings);
    }
    pub fn get_Data(self: *const ITaskDefinition, pData: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Data(self, pData);
    }
    pub fn put_Data(self: *const ITaskDefinition, data: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Data(self, data);
    }
    pub fn get_Principal(self: *const ITaskDefinition, ppPrincipal: ?*?*IPrincipal) callconv(.Inline) HRESULT {
        return self.vtable.get_Principal(self, ppPrincipal);
    }
    pub fn put_Principal(self: *const ITaskDefinition, pPrincipal: ?*IPrincipal) callconv(.Inline) HRESULT {
        return self.vtable.put_Principal(self, pPrincipal);
    }
    pub fn get_Actions(self: *const ITaskDefinition, ppActions: ?*?*IActionCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_Actions(self, ppActions);
    }
    pub fn put_Actions(self: *const ITaskDefinition, pActions: ?*IActionCollection) callconv(.Inline) HRESULT {
        return self.vtable.put_Actions(self, pActions);
    }
    pub fn get_XmlText(self: *const ITaskDefinition, pXml: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_XmlText(self, pXml);
    }
    pub fn put_XmlText(self: *const ITaskDefinition, xml: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_XmlText(self, xml);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITaskSettings_Value = Guid.initString("8fd4711d-2d02-4c8c-87e3-eff699de127e");
pub const IID_ITaskSettings = &IID_ITaskSettings_Value;
pub const ITaskSettings = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowDemandStart: *const fn(
            self: *const ITaskSettings,
            pAllowDemandStart: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowDemandStart: *const fn(
            self: *const ITaskSettings,
            allowDemandStart: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RestartInterval: *const fn(
            self: *const ITaskSettings,
            pRestartInterval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RestartInterval: *const fn(
            self: *const ITaskSettings,
            restartInterval: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RestartCount: *const fn(
            self: *const ITaskSettings,
            pRestartCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RestartCount: *const fn(
            self: *const ITaskSettings,
            restartCount: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MultipleInstances: *const fn(
            self: *const ITaskSettings,
            pPolicy: ?*TASK_INSTANCES_POLICY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MultipleInstances: *const fn(
            self: *const ITaskSettings,
            policy: TASK_INSTANCES_POLICY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StopIfGoingOnBatteries: *const fn(
            self: *const ITaskSettings,
            pStopIfOnBatteries: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StopIfGoingOnBatteries: *const fn(
            self: *const ITaskSettings,
            stopIfOnBatteries: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisallowStartIfOnBatteries: *const fn(
            self: *const ITaskSettings,
            pDisallowStart: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisallowStartIfOnBatteries: *const fn(
            self: *const ITaskSettings,
            disallowStart: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowHardTerminate: *const fn(
            self: *const ITaskSettings,
            pAllowHardTerminate: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowHardTerminate: *const fn(
            self: *const ITaskSettings,
            allowHardTerminate: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartWhenAvailable: *const fn(
            self: *const ITaskSettings,
            pStartWhenAvailable: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StartWhenAvailable: *const fn(
            self: *const ITaskSettings,
            startWhenAvailable: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_XmlText: *const fn(
            self: *const ITaskSettings,
            pText: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_XmlText: *const fn(
            self: *const ITaskSettings,
            text: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RunOnlyIfNetworkAvailable: *const fn(
            self: *const ITaskSettings,
            pRunOnlyIfNetworkAvailable: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RunOnlyIfNetworkAvailable: *const fn(
            self: *const ITaskSettings,
            runOnlyIfNetworkAvailable: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExecutionTimeLimit: *const fn(
            self: *const ITaskSettings,
            pExecutionTimeLimit: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ExecutionTimeLimit: *const fn(
            self: *const ITaskSettings,
            executionTimeLimit: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn(
            self: *const ITaskSettings,
            pEnabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn(
            self: *const ITaskSettings,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DeleteExpiredTaskAfter: *const fn(
            self: *const ITaskSettings,
            pExpirationDelay: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DeleteExpiredTaskAfter: *const fn(
            self: *const ITaskSettings,
            expirationDelay: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Priority: *const fn(
            self: *const ITaskSettings,
            pPriority: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Priority: *const fn(
            self: *const ITaskSettings,
            priority: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Compatibility: *const fn(
            self: *const ITaskSettings,
            pCompatLevel: ?*TASK_COMPATIBILITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Compatibility: *const fn(
            self: *const ITaskSettings,
            compatLevel: TASK_COMPATIBILITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Hidden: *const fn(
            self: *const ITaskSettings,
            pHidden: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Hidden: *const fn(
            self: *const ITaskSettings,
            hidden: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IdleSettings: *const fn(
            self: *const ITaskSettings,
            ppIdleSettings: ?*?*IIdleSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IdleSettings: *const fn(
            self: *const ITaskSettings,
            pIdleSettings: ?*IIdleSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RunOnlyIfIdle: *const fn(
            self: *const ITaskSettings,
            pRunOnlyIfIdle: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RunOnlyIfIdle: *const fn(
            self: *const ITaskSettings,
            runOnlyIfIdle: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WakeToRun: *const fn(
            self: *const ITaskSettings,
            pWake: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_WakeToRun: *const fn(
            self: *const ITaskSettings,
            wake: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NetworkSettings: *const fn(
            self: *const ITaskSettings,
            ppNetworkSettings: ?*?*INetworkSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NetworkSettings: *const fn(
            self: *const ITaskSettings,
            pNetworkSettings: ?*INetworkSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_AllowDemandStart(self: *const ITaskSettings, pAllowDemandStart: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_AllowDemandStart(self, pAllowDemandStart);
    }
    pub fn put_AllowDemandStart(self: *const ITaskSettings, allowDemandStart: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_AllowDemandStart(self, allowDemandStart);
    }
    pub fn get_RestartInterval(self: *const ITaskSettings, pRestartInterval: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RestartInterval(self, pRestartInterval);
    }
    pub fn put_RestartInterval(self: *const ITaskSettings, restartInterval: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_RestartInterval(self, restartInterval);
    }
    pub fn get_RestartCount(self: *const ITaskSettings, pRestartCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_RestartCount(self, pRestartCount);
    }
    pub fn put_RestartCount(self: *const ITaskSettings, restartCount: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_RestartCount(self, restartCount);
    }
    pub fn get_MultipleInstances(self: *const ITaskSettings, pPolicy: ?*TASK_INSTANCES_POLICY) callconv(.Inline) HRESULT {
        return self.vtable.get_MultipleInstances(self, pPolicy);
    }
    pub fn put_MultipleInstances(self: *const ITaskSettings, policy: TASK_INSTANCES_POLICY) callconv(.Inline) HRESULT {
        return self.vtable.put_MultipleInstances(self, policy);
    }
    pub fn get_StopIfGoingOnBatteries(self: *const ITaskSettings, pStopIfOnBatteries: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_StopIfGoingOnBatteries(self, pStopIfOnBatteries);
    }
    pub fn put_StopIfGoingOnBatteries(self: *const ITaskSettings, stopIfOnBatteries: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_StopIfGoingOnBatteries(self, stopIfOnBatteries);
    }
    pub fn get_DisallowStartIfOnBatteries(self: *const ITaskSettings, pDisallowStart: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_DisallowStartIfOnBatteries(self, pDisallowStart);
    }
    pub fn put_DisallowStartIfOnBatteries(self: *const ITaskSettings, disallowStart: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_DisallowStartIfOnBatteries(self, disallowStart);
    }
    pub fn get_AllowHardTerminate(self: *const ITaskSettings, pAllowHardTerminate: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_AllowHardTerminate(self, pAllowHardTerminate);
    }
    pub fn put_AllowHardTerminate(self: *const ITaskSettings, allowHardTerminate: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_AllowHardTerminate(self, allowHardTerminate);
    }
    pub fn get_StartWhenAvailable(self: *const ITaskSettings, pStartWhenAvailable: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_StartWhenAvailable(self, pStartWhenAvailable);
    }
    pub fn put_StartWhenAvailable(self: *const ITaskSettings, startWhenAvailable: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_StartWhenAvailable(self, startWhenAvailable);
    }
    pub fn get_XmlText(self: *const ITaskSettings, pText: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_XmlText(self, pText);
    }
    pub fn put_XmlText(self: *const ITaskSettings, text: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_XmlText(self, text);
    }
    pub fn get_RunOnlyIfNetworkAvailable(self: *const ITaskSettings, pRunOnlyIfNetworkAvailable: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_RunOnlyIfNetworkAvailable(self, pRunOnlyIfNetworkAvailable);
    }
    pub fn put_RunOnlyIfNetworkAvailable(self: *const ITaskSettings, runOnlyIfNetworkAvailable: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_RunOnlyIfNetworkAvailable(self, runOnlyIfNetworkAvailable);
    }
    pub fn get_ExecutionTimeLimit(self: *const ITaskSettings, pExecutionTimeLimit: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ExecutionTimeLimit(self, pExecutionTimeLimit);
    }
    pub fn put_ExecutionTimeLimit(self: *const ITaskSettings, executionTimeLimit: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ExecutionTimeLimit(self, executionTimeLimit);
    }
    pub fn get_Enabled(self: *const ITaskSettings, pEnabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Enabled(self, pEnabled);
    }
    pub fn put_Enabled(self: *const ITaskSettings, enabled: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_Enabled(self, enabled);
    }
    pub fn get_DeleteExpiredTaskAfter(self: *const ITaskSettings, pExpirationDelay: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_DeleteExpiredTaskAfter(self, pExpirationDelay);
    }
    pub fn put_DeleteExpiredTaskAfter(self: *const ITaskSettings, expirationDelay: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_DeleteExpiredTaskAfter(self, expirationDelay);
    }
    pub fn get_Priority(self: *const ITaskSettings, pPriority: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Priority(self, pPriority);
    }
    pub fn put_Priority(self: *const ITaskSettings, priority: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Priority(self, priority);
    }
    pub fn get_Compatibility(self: *const ITaskSettings, pCompatLevel: ?*TASK_COMPATIBILITY) callconv(.Inline) HRESULT {
        return self.vtable.get_Compatibility(self, pCompatLevel);
    }
    pub fn put_Compatibility(self: *const ITaskSettings, compatLevel: TASK_COMPATIBILITY) callconv(.Inline) HRESULT {
        return self.vtable.put_Compatibility(self, compatLevel);
    }
    pub fn get_Hidden(self: *const ITaskSettings, pHidden: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Hidden(self, pHidden);
    }
    pub fn put_Hidden(self: *const ITaskSettings, hidden: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_Hidden(self, hidden);
    }
    pub fn get_IdleSettings(self: *const ITaskSettings, ppIdleSettings: ?*?*IIdleSettings) callconv(.Inline) HRESULT {
        return self.vtable.get_IdleSettings(self, ppIdleSettings);
    }
    pub fn put_IdleSettings(self: *const ITaskSettings, pIdleSettings: ?*IIdleSettings) callconv(.Inline) HRESULT {
        return self.vtable.put_IdleSettings(self, pIdleSettings);
    }
    pub fn get_RunOnlyIfIdle(self: *const ITaskSettings, pRunOnlyIfIdle: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_RunOnlyIfIdle(self, pRunOnlyIfIdle);
    }
    pub fn put_RunOnlyIfIdle(self: *const ITaskSettings, runOnlyIfIdle: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_RunOnlyIfIdle(self, runOnlyIfIdle);
    }
    pub fn get_WakeToRun(self: *const ITaskSettings, pWake: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_WakeToRun(self, pWake);
    }
    pub fn put_WakeToRun(self: *const ITaskSettings, wake: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_WakeToRun(self, wake);
    }
    pub fn get_NetworkSettings(self: *const ITaskSettings, ppNetworkSettings: ?*?*INetworkSettings) callconv(.Inline) HRESULT {
        return self.vtable.get_NetworkSettings(self, ppNetworkSettings);
    }
    pub fn put_NetworkSettings(self: *const ITaskSettings, pNetworkSettings: ?*INetworkSettings) callconv(.Inline) HRESULT {
        return self.vtable.put_NetworkSettings(self, pNetworkSettings);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ITaskSettings2_Value = Guid.initString("2c05c3f0-6eed-4c05-a15f-ed7d7a98a369");
pub const IID_ITaskSettings2 = &IID_ITaskSettings2_Value;
pub const ITaskSettings2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisallowStartOnRemoteAppSession: *const fn(
            self: *const ITaskSettings2,
            pDisallowStart: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisallowStartOnRemoteAppSession: *const fn(
            self: *const ITaskSettings2,
            disallowStart: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UseUnifiedSchedulingEngine: *const fn(
            self: *const ITaskSettings2,
            pUseUnifiedEngine: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UseUnifiedSchedulingEngine: *const fn(
            self: *const ITaskSettings2,
            useUnifiedEngine: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_DisallowStartOnRemoteAppSession(self: *const ITaskSettings2, pDisallowStart: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_DisallowStartOnRemoteAppSession(self, pDisallowStart);
    }
    pub fn put_DisallowStartOnRemoteAppSession(self: *const ITaskSettings2, disallowStart: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_DisallowStartOnRemoteAppSession(self, disallowStart);
    }
    pub fn get_UseUnifiedSchedulingEngine(self: *const ITaskSettings2, pUseUnifiedEngine: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_UseUnifiedSchedulingEngine(self, pUseUnifiedEngine);
    }
    pub fn put_UseUnifiedSchedulingEngine(self: *const ITaskSettings2, useUnifiedEngine: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_UseUnifiedSchedulingEngine(self, useUnifiedEngine);
    }
};

const IID_ITaskSettings3_Value = Guid.initString("0ad9d0d7-0c7f-4ebb-9a5f-d1c648dca528");
pub const IID_ITaskSettings3 = &IID_ITaskSettings3_Value;
pub const ITaskSettings3 = extern union {
    pub const VTable = extern struct {
        base: ITaskSettings.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisallowStartOnRemoteAppSession: *const fn(
            self: *const ITaskSettings3,
            pDisallowStart: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisallowStartOnRemoteAppSession: *const fn(
            self: *const ITaskSettings3,
            disallowStart: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UseUnifiedSchedulingEngine: *const fn(
            self: *const ITaskSettings3,
            pUseUnifiedEngine: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UseUnifiedSchedulingEngine: *const fn(
            self: *const ITaskSettings3,
            useUnifiedEngine: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaintenanceSettings: *const fn(
            self: *const ITaskSettings3,
            ppMaintenanceSettings: ?*?*IMaintenanceSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaintenanceSettings: *const fn(
            self: *const ITaskSettings3,
            pMaintenanceSettings: ?*IMaintenanceSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMaintenanceSettings: *const fn(
            self: *const ITaskSettings3,
            ppMaintenanceSettings: ?*?*IMaintenanceSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Volatile: *const fn(
            self: *const ITaskSettings3,
            pVolatile: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Volatile: *const fn(
            self: *const ITaskSettings3,
            Volatile: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ITaskSettings: ITaskSettings,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_DisallowStartOnRemoteAppSession(self: *const ITaskSettings3, pDisallowStart: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_DisallowStartOnRemoteAppSession(self, pDisallowStart);
    }
    pub fn put_DisallowStartOnRemoteAppSession(self: *const ITaskSettings3, disallowStart: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_DisallowStartOnRemoteAppSession(self, disallowStart);
    }
    pub fn get_UseUnifiedSchedulingEngine(self: *const ITaskSettings3, pUseUnifiedEngine: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_UseUnifiedSchedulingEngine(self, pUseUnifiedEngine);
    }
    pub fn put_UseUnifiedSchedulingEngine(self: *const ITaskSettings3, useUnifiedEngine: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_UseUnifiedSchedulingEngine(self, useUnifiedEngine);
    }
    pub fn get_MaintenanceSettings(self: *const ITaskSettings3, ppMaintenanceSettings: ?*?*IMaintenanceSettings) callconv(.Inline) HRESULT {
        return self.vtable.get_MaintenanceSettings(self, ppMaintenanceSettings);
    }
    pub fn put_MaintenanceSettings(self: *const ITaskSettings3, pMaintenanceSettings: ?*IMaintenanceSettings) callconv(.Inline) HRESULT {
        return self.vtable.put_MaintenanceSettings(self, pMaintenanceSettings);
    }
    pub fn CreateMaintenanceSettings(self: *const ITaskSettings3, ppMaintenanceSettings: ?*?*IMaintenanceSettings) callconv(.Inline) HRESULT {
        return self.vtable.CreateMaintenanceSettings(self, ppMaintenanceSettings);
    }
    pub fn get_Volatile(self: *const ITaskSettings3, pVolatile: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Volatile(self, pVolatile);
    }
    pub fn put_Volatile(self: *const ITaskSettings3, Volatile: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_Volatile(self, Volatile);
    }
};

const IID_IMaintenanceSettings_Value = Guid.initString("a6024fa8-9652-4adb-a6bf-5cfcd877a7ba");
pub const IID_IMaintenanceSettings = &IID_IMaintenanceSettings_Value;
pub const IMaintenanceSettings = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Period: *const fn(
            self: *const IMaintenanceSettings,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Period: *const fn(
            self: *const IMaintenanceSettings,
            target: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Deadline: *const fn(
            self: *const IMaintenanceSettings,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Deadline: *const fn(
            self: *const IMaintenanceSettings,
            target: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Exclusive: *const fn(
            self: *const IMaintenanceSettings,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Exclusive: *const fn(
            self: *const IMaintenanceSettings,
            target: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_Period(self: *const IMaintenanceSettings, value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Period(self, value);
    }
    pub fn get_Period(self: *const IMaintenanceSettings, target: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Period(self, target);
    }
    pub fn put_Deadline(self: *const IMaintenanceSettings, value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Deadline(self, value);
    }
    pub fn get_Deadline(self: *const IMaintenanceSettings, target: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Deadline(self, target);
    }
    pub fn put_Exclusive(self: *const IMaintenanceSettings, value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_Exclusive(self, value);
    }
    pub fn get_Exclusive(self: *const IMaintenanceSettings, target: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Exclusive(self, target);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRegisteredTaskCollection_Value = Guid.initString("86627eb4-42a7-41e4-a4d9-ac33a72f2d52");
pub const IID_IRegisteredTaskCollection = &IID_IRegisteredTaskCollection_Value;
pub const IRegisteredTaskCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IRegisteredTaskCollection,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: *const fn(
            self: *const IRegisteredTaskCollection,
            index: VARIANT,
            ppRegisteredTask: ?*?*IRegisteredTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const IRegisteredTaskCollection,
            ppEnum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Count(self: *const IRegisteredTaskCollection, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pCount);
    }
    pub fn get_Item(self: *const IRegisteredTaskCollection, index: VARIANT, ppRegisteredTask: ?*?*IRegisteredTask) callconv(.Inline) HRESULT {
        return self.vtable.get_Item(self, index, ppRegisteredTask);
    }
    pub fn get__NewEnum(self: *const IRegisteredTaskCollection, ppEnum: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, ppEnum);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITaskFolder_Value = Guid.initString("8cfac062-a080-4c15-9a88-aa7c2af80dfc");
pub const IID_ITaskFolder = &IID_ITaskFolder_Value;
pub const ITaskFolder = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn(
            self: *const ITaskFolder,
            pName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn(
            self: *const ITaskFolder,
            pPath: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolder: *const fn(
            self: *const ITaskFolder,
            path: ?BSTR,
            ppFolder: ?*?*ITaskFolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolders: *const fn(
            self: *const ITaskFolder,
            flags: i32,
            ppFolders: ?*?*ITaskFolderCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFolder: *const fn(
            self: *const ITaskFolder,
            subFolderName: ?BSTR,
            sddl: VARIANT,
            ppFolder: ?*?*ITaskFolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteFolder: *const fn(
            self: *const ITaskFolder,
            subFolderName: ?BSTR,
            flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTask: *const fn(
            self: *const ITaskFolder,
            path: ?BSTR,
            ppTask: ?*?*IRegisteredTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTasks: *const fn(
            self: *const ITaskFolder,
            flags: i32,
            ppTasks: ?*?*IRegisteredTaskCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteTask: *const fn(
            self: *const ITaskFolder,
            name: ?BSTR,
            flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterTask: *const fn(
            self: *const ITaskFolder,
            path: ?BSTR,
            xmlText: ?BSTR,
            flags: i32,
            userId: VARIANT,
            password: VARIANT,
            logonType: TASK_LOGON_TYPE,
            sddl: VARIANT,
            ppTask: ?*?*IRegisteredTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterTaskDefinition: *const fn(
            self: *const ITaskFolder,
            path: ?BSTR,
            pDefinition: ?*ITaskDefinition,
            flags: i32,
            userId: VARIANT,
            password: VARIANT,
            logonType: TASK_LOGON_TYPE,
            sddl: VARIANT,
            ppTask: ?*?*IRegisteredTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSecurityDescriptor: *const fn(
            self: *const ITaskFolder,
            securityInformation: i32,
            pSddl: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSecurityDescriptor: *const fn(
            self: *const ITaskFolder,
            sddl: ?BSTR,
            flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Name(self: *const ITaskFolder, pName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Name(self, pName);
    }
    pub fn get_Path(self: *const ITaskFolder, pPath: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Path(self, pPath);
    }
    pub fn GetFolder(self: *const ITaskFolder, path: ?BSTR, ppFolder: ?*?*ITaskFolder) callconv(.Inline) HRESULT {
        return self.vtable.GetFolder(self, path, ppFolder);
    }
    pub fn GetFolders(self: *const ITaskFolder, flags: i32, ppFolders: ?*?*ITaskFolderCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetFolders(self, flags, ppFolders);
    }
    pub fn CreateFolder(self: *const ITaskFolder, subFolderName: ?BSTR, sddl: VARIANT, ppFolder: ?*?*ITaskFolder) callconv(.Inline) HRESULT {
        return self.vtable.CreateFolder(self, subFolderName, sddl, ppFolder);
    }
    pub fn DeleteFolder(self: *const ITaskFolder, subFolderName: ?BSTR, flags: i32) callconv(.Inline) HRESULT {
        return self.vtable.DeleteFolder(self, subFolderName, flags);
    }
    pub fn GetTask(self: *const ITaskFolder, path: ?BSTR, ppTask: ?*?*IRegisteredTask) callconv(.Inline) HRESULT {
        return self.vtable.GetTask(self, path, ppTask);
    }
    pub fn GetTasks(self: *const ITaskFolder, flags: i32, ppTasks: ?*?*IRegisteredTaskCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetTasks(self, flags, ppTasks);
    }
    pub fn DeleteTask(self: *const ITaskFolder, name: ?BSTR, flags: i32) callconv(.Inline) HRESULT {
        return self.vtable.DeleteTask(self, name, flags);
    }
    pub fn RegisterTask(self: *const ITaskFolder, path: ?BSTR, xmlText: ?BSTR, flags: i32, userId: VARIANT, password: VARIANT, logonType: TASK_LOGON_TYPE, sddl: VARIANT, ppTask: ?*?*IRegisteredTask) callconv(.Inline) HRESULT {
        return self.vtable.RegisterTask(self, path, xmlText, flags, userId, password, logonType, sddl, ppTask);
    }
    pub fn RegisterTaskDefinition(self: *const ITaskFolder, path: ?BSTR, pDefinition: ?*ITaskDefinition, flags: i32, userId: VARIANT, password: VARIANT, logonType: TASK_LOGON_TYPE, sddl: VARIANT, ppTask: ?*?*IRegisteredTask) callconv(.Inline) HRESULT {
        return self.vtable.RegisterTaskDefinition(self, path, pDefinition, flags, userId, password, logonType, sddl, ppTask);
    }
    pub fn GetSecurityDescriptor(self: *const ITaskFolder, securityInformation: i32, pSddl: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetSecurityDescriptor(self, securityInformation, pSddl);
    }
    pub fn SetSecurityDescriptor(self: *const ITaskFolder, sddl: ?BSTR, flags: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetSecurityDescriptor(self, sddl, flags);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IIdleSettings_Value = Guid.initString("84594461-0053-4342-a8fd-088fabf11f32");
pub const IID_IIdleSettings = &IID_IIdleSettings_Value;
pub const IIdleSettings = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IdleDuration: *const fn(
            self: *const IIdleSettings,
            pDelay: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IdleDuration: *const fn(
            self: *const IIdleSettings,
            delay: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WaitTimeout: *const fn(
            self: *const IIdleSettings,
            pTimeout: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_WaitTimeout: *const fn(
            self: *const IIdleSettings,
            timeout: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StopOnIdleEnd: *const fn(
            self: *const IIdleSettings,
            pStop: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StopOnIdleEnd: *const fn(
            self: *const IIdleSettings,
            stop: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RestartOnIdle: *const fn(
            self: *const IIdleSettings,
            pRestart: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RestartOnIdle: *const fn(
            self: *const IIdleSettings,
            restart: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_IdleDuration(self: *const IIdleSettings, pDelay: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_IdleDuration(self, pDelay);
    }
    pub fn put_IdleDuration(self: *const IIdleSettings, delay: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_IdleDuration(self, delay);
    }
    pub fn get_WaitTimeout(self: *const IIdleSettings, pTimeout: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_WaitTimeout(self, pTimeout);
    }
    pub fn put_WaitTimeout(self: *const IIdleSettings, timeout: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_WaitTimeout(self, timeout);
    }
    pub fn get_StopOnIdleEnd(self: *const IIdleSettings, pStop: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_StopOnIdleEnd(self, pStop);
    }
    pub fn put_StopOnIdleEnd(self: *const IIdleSettings, stop: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_StopOnIdleEnd(self, stop);
    }
    pub fn get_RestartOnIdle(self: *const IIdleSettings, pRestart: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_RestartOnIdle(self, pRestart);
    }
    pub fn put_RestartOnIdle(self: *const IIdleSettings, restart: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_RestartOnIdle(self, restart);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetworkSettings_Value = Guid.initString("9f7dea84-c30b-4245-80b6-00e9f646f1b4");
pub const IID_INetworkSettings = &IID_INetworkSettings_Value;
pub const INetworkSettings = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn(
            self: *const INetworkSettings,
            pName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn(
            self: *const INetworkSettings,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn(
            self: *const INetworkSettings,
            pId: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Id: *const fn(
            self: *const INetworkSettings,
            id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Name(self: *const INetworkSettings, pName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Name(self, pName);
    }
    pub fn put_Name(self: *const INetworkSettings, name: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Name(self, name);
    }
    pub fn get_Id(self: *const INetworkSettings, pId: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Id(self, pId);
    }
    pub fn put_Id(self: *const INetworkSettings, id: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Id(self, id);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRepetitionPattern_Value = Guid.initString("7fb9acf1-26be-400e-85b5-294b9c75dfd6");
pub const IID_IRepetitionPattern = &IID_IRepetitionPattern_Value;
pub const IRepetitionPattern = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Interval: *const fn(
            self: *const IRepetitionPattern,
            pInterval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Interval: *const fn(
            self: *const IRepetitionPattern,
            interval: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Duration: *const fn(
            self: *const IRepetitionPattern,
            pDuration: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Duration: *const fn(
            self: *const IRepetitionPattern,
            duration: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StopAtDurationEnd: *const fn(
            self: *const IRepetitionPattern,
            pStop: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StopAtDurationEnd: *const fn(
            self: *const IRepetitionPattern,
            stop: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Interval(self: *const IRepetitionPattern, pInterval: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Interval(self, pInterval);
    }
    pub fn put_Interval(self: *const IRepetitionPattern, interval: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Interval(self, interval);
    }
    pub fn get_Duration(self: *const IRepetitionPattern, pDuration: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Duration(self, pDuration);
    }
    pub fn put_Duration(self: *const IRepetitionPattern, duration: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Duration(self, duration);
    }
    pub fn get_StopAtDurationEnd(self: *const IRepetitionPattern, pStop: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_StopAtDurationEnd(self, pStop);
    }
    pub fn put_StopAtDurationEnd(self: *const IRepetitionPattern, stop: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_StopAtDurationEnd(self, stop);
    }
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (12)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const HPROPSHEETPAGE = @import("../ui/controls.zig").HPROPSHEETPAGE;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IDispatch = @import("../system/com.zig").IDispatch;
const IUnknown = @import("../system/com.zig").IUnknown;
const PWSTR = @import("../foundation.zig").PWSTR;
const SAFEARRAY = @import("../system/com.zig").SAFEARRAY;
const SYSTEMTIME = @import("../foundation.zig").SYSTEMTIME;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
