//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (4)
//--------------------------------------------------------------------------------
pub const MAX_ERROR_MESSAGE_CHARS = @as(u32, 512);
pub const CastingSourceInfo_Property_PreferredSourceUriScheme = "PreferredSourceUriScheme";
pub const CastingSourceInfo_Property_CastingTypes = "CastingTypes";
pub const CastingSourceInfo_Property_ProtectedMedia = "ProtectedMedia";

//--------------------------------------------------------------------------------
// Section: Types (63)
//--------------------------------------------------------------------------------
pub const EventRegistrationToken = extern struct {
    value: i64,
};

pub const HSTRING_HEADER = extern struct {
    flags: u32,
    length: u32,
    padding1: u32,
    padding2: u32,
    data: isize,
};

// TODO: this type has a FreeFunc 'WindowsDeleteString', what can Zig do with this information?
pub const HSTRING = *opaque{};

// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HSTRING_BUFFER = *opaque{};

// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const ROPARAMIIDHANDLE = isize;

// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const APARTMENT_SHUTDOWN_REGISTRATION_COOKIE = isize;

pub const ACTIVATIONTYPE = enum(i32) {
    UNCATEGORIZED = 0,
    FROM_MONIKER = 1,
    FROM_DATA = 2,
    FROM_STORAGE = 4,
    FROM_STREAM = 8,
    FROM_FILE = 16,
};
pub const ACTIVATIONTYPE_UNCATEGORIZED = ACTIVATIONTYPE.UNCATEGORIZED;
pub const ACTIVATIONTYPE_FROM_MONIKER = ACTIVATIONTYPE.FROM_MONIKER;
pub const ACTIVATIONTYPE_FROM_DATA = ACTIVATIONTYPE.FROM_DATA;
pub const ACTIVATIONTYPE_FROM_STORAGE = ACTIVATIONTYPE.FROM_STORAGE;
pub const ACTIVATIONTYPE_FROM_STREAM = ACTIVATIONTYPE.FROM_STREAM;
pub const ACTIVATIONTYPE_FROM_FILE = ACTIVATIONTYPE.FROM_FILE;

// TODO: this type is limited to platform 'windows8.1'
const IID_IAgileReference_Value = Guid.initString("c03f6a43-65a4-9818-987e-e0b810d2a6f2");
pub const IID_IAgileReference = &IID_IAgileReference_Value;
pub const IAgileReference = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Resolve: *const fn(
            self: *const IAgileReference,
            riid: ?*const Guid,
            ppvObjectReference: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Resolve(self: *const IAgileReference, riid: ?*const Guid, ppvObjectReference: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.Resolve(self, riid, ppvObjectReference);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IApartmentShutdown_Value = Guid.initString("a2f05a09-27a2-42b5-bc0e-ac163ef49d9b");
pub const IID_IApartmentShutdown = &IID_IApartmentShutdown_Value;
pub const IApartmentShutdown = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnUninitialize: *const fn(
            self: *const IApartmentShutdown,
            ui64ApartmentIdentifier: u64,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnUninitialize(self: *const IApartmentShutdown, ui64ApartmentIdentifier: u64) callconv(.Inline) void {
        return self.vtable.OnUninitialize(self, ui64ApartmentIdentifier);
    }
};

pub const ServerInformation = extern struct {
    dwServerPid: u32,
    dwServerTid: u32,
    ui64ServerAddress: u64,
};

pub const AgileReferenceOptions = enum(i32) {
    FAULT = 0,
    LAYEDMARSHAL = 1,
};
pub const AGILEREFERENCE_DEFAULT = AgileReferenceOptions.FAULT;
pub const AGILEREFERENCE_DELAYEDMARSHAL = AgileReferenceOptions.LAYEDMARSHAL;

// TODO: this type is limited to platform 'windows10.0.15063'
const IID_ISpatialInteractionManagerInterop_Value = Guid.initString("5c4ee536-6a98-4b86-a170-587013d6fd4b");
pub const IID_ISpatialInteractionManagerInterop = &IID_ISpatialInteractionManagerInterop_Value;
pub const ISpatialInteractionManagerInterop = extern union {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        GetForWindow: *const fn(
            self: *const ISpatialInteractionManagerInterop,
            window: ?HWND,
            riid: ?*const Guid,
            spatialInteractionManager: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IInspectable: IInspectable,
    IUnknown: IUnknown,
    pub fn GetForWindow(self: *const ISpatialInteractionManagerInterop, window: ?HWND, riid: ?*const Guid, spatialInteractionManager: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetForWindow(self, window, riid, spatialInteractionManager);
    }
};

// TODO: this type is limited to platform 'windows10.0.15063'
const IID_IHolographicSpaceInterop_Value = Guid.initString("5c4ee536-6a98-4b86-a170-587013d6fd4b");
pub const IID_IHolographicSpaceInterop = &IID_IHolographicSpaceInterop_Value;
pub const IHolographicSpaceInterop = extern union {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        CreateForWindow: *const fn(
            self: *const IHolographicSpaceInterop,
            window: ?HWND,
            riid: ?*const Guid,
            holographicSpace: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IInspectable: IInspectable,
    IUnknown: IUnknown,
    pub fn CreateForWindow(self: *const IHolographicSpaceInterop, window: ?HWND, riid: ?*const Guid, holographicSpace: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.CreateForWindow(self, window, riid, holographicSpace);
    }
};

pub const TrustLevel = enum(i32) {
    BaseTrust = 0,
    PartialTrust = 1,
    FullTrust = 2,
};
pub const BaseTrust = TrustLevel.BaseTrust;
pub const PartialTrust = TrustLevel.PartialTrust;
pub const FullTrust = TrustLevel.FullTrust;

// TODO: this type is limited to platform 'windows8.0'
const IID_IInspectable_Value = Guid.initString("af86e2e0-b12d-4c6a-9c5a-d7aa65101e90");
pub const IID_IInspectable = &IID_IInspectable_Value;
pub const IInspectable = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIids: *const fn(
            self: *const IInspectable,
            iidCount: ?*u32,
            iids: [*]?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRuntimeClassName: *const fn(
            self: *const IInspectable,
            className: ?*?HSTRING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTrustLevel: *const fn(
            self: *const IInspectable,
            trustLevel: ?*TrustLevel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetIids(self: *const IInspectable, iidCount: ?*u32, iids: [*]?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetIids(self, iidCount, iids);
    }
    pub fn GetRuntimeClassName(self: *const IInspectable, className: ?*?HSTRING) callconv(.Inline) HRESULT {
        return self.vtable.GetRuntimeClassName(self, className);
    }
    pub fn GetTrustLevel(self: *const IInspectable, trustLevel: ?*TrustLevel) callconv(.Inline) HRESULT {
        return self.vtable.GetTrustLevel(self, trustLevel);
    }
};

pub const PINSPECT_HSTRING_CALLBACK = *const fn(
    context: ?*anyopaque,
    readAddress: usize,
    length: u32,
    buffer: [*:0]u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PINSPECT_HSTRING_CALLBACK2 = *const fn(
    context: ?*anyopaque,
    readAddress: u64,
    length: u32,
    buffer: [*:0]u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const DISPATCHERQUEUE_THREAD_APARTMENTTYPE = enum(i32) {
    NONE = 0,
    ASTA = 1,
    STA = 2,
};
pub const DQTAT_COM_NONE = DISPATCHERQUEUE_THREAD_APARTMENTTYPE.NONE;
pub const DQTAT_COM_ASTA = DISPATCHERQUEUE_THREAD_APARTMENTTYPE.ASTA;
pub const DQTAT_COM_STA = DISPATCHERQUEUE_THREAD_APARTMENTTYPE.STA;

pub const DISPATCHERQUEUE_THREAD_TYPE = enum(i32) {
    DEDICATED = 1,
    CURRENT = 2,
};
pub const DQTYPE_THREAD_DEDICATED = DISPATCHERQUEUE_THREAD_TYPE.DEDICATED;
pub const DQTYPE_THREAD_CURRENT = DISPATCHERQUEUE_THREAD_TYPE.CURRENT;

pub const DispatcherQueueOptions = extern struct {
    dwSize: u32,
    threadType: DISPATCHERQUEUE_THREAD_TYPE,
    apartmentType: DISPATCHERQUEUE_THREAD_APARTMENTTYPE,
};

const IID_IAccountsSettingsPaneInterop_Value = Guid.initString("d3ee12ad-3865-4362-9746-b75a682df0e6");
pub const IID_IAccountsSettingsPaneInterop = &IID_IAccountsSettingsPaneInterop_Value;
pub const IAccountsSettingsPaneInterop = extern union {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        GetForWindow: *const fn(
            self: *const IAccountsSettingsPaneInterop,
            appWindow: ?HWND,
            riid: ?*const Guid,
            accountsSettingsPane: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowManageAccountsForWindowAsync: *const fn(
            self: *const IAccountsSettingsPaneInterop,
            appWindow: ?HWND,
            riid: ?*const Guid,
            asyncAction: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowAddAccountForWindowAsync: *const fn(
            self: *const IAccountsSettingsPaneInterop,
            appWindow: ?HWND,
            riid: ?*const Guid,
            asyncAction: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IInspectable: IInspectable,
    IUnknown: IUnknown,
    pub fn GetForWindow(self: *const IAccountsSettingsPaneInterop, appWindow: ?HWND, riid: ?*const Guid, accountsSettingsPane: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetForWindow(self, appWindow, riid, accountsSettingsPane);
    }
    pub fn ShowManageAccountsForWindowAsync(self: *const IAccountsSettingsPaneInterop, appWindow: ?HWND, riid: ?*const Guid, asyncAction: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.ShowManageAccountsForWindowAsync(self, appWindow, riid, asyncAction);
    }
    pub fn ShowAddAccountForWindowAsync(self: *const IAccountsSettingsPaneInterop, appWindow: ?HWND, riid: ?*const Guid, asyncAction: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.ShowAddAccountForWindowAsync(self, appWindow, riid, asyncAction);
    }
};

const IID_IAppServiceConnectionExtendedExecution_Value = Guid.initString("65219584-f9cb-4ae3-81f9-a28a6ca450d9");
pub const IID_IAppServiceConnectionExtendedExecution = &IID_IAppServiceConnectionExtendedExecution_Value;
pub const IAppServiceConnectionExtendedExecution = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OpenForExtendedExecutionAsync: *const fn(
            self: *const IAppServiceConnectionExtendedExecution,
            riid: ?*const Guid,
            operation: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OpenForExtendedExecutionAsync(self: *const IAppServiceConnectionExtendedExecution, riid: ?*const Guid, operation: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.OpenForExtendedExecutionAsync(self, riid, operation);
    }
};

const IID_ICorrelationVectorSource_Value = Guid.initString("152b8a3b-b9b9-4685-b56e-974847bc7545");
pub const IID_ICorrelationVectorSource = &IID_ICorrelationVectorSource_Value;
pub const ICorrelationVectorSource = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CorrelationVector: *const fn(
            self: *const ICorrelationVectorSource,
            cv: ?*?HSTRING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn get_CorrelationVector(self: *const ICorrelationVectorSource, cv: ?*?HSTRING) callconv(.Inline) HRESULT {
        return self.vtable.get_CorrelationVector(self, cv);
    }
};

pub const CASTING_CONNECTION_ERROR_STATUS = enum(i32) {
    SUCCEEDED = 0,
    DEVICE_DID_NOT_RESPOND = 1,
    DEVICE_ERROR = 2,
    DEVICE_LOCKED = 3,
    PROTECTED_PLAYBACK_FAILED = 4,
    INVALID_CASTING_SOURCE = 5,
    UNKNOWN = 6,
};
pub const CASTING_CONNECTION_ERROR_STATUS_SUCCEEDED = CASTING_CONNECTION_ERROR_STATUS.SUCCEEDED;
pub const CASTING_CONNECTION_ERROR_STATUS_DEVICE_DID_NOT_RESPOND = CASTING_CONNECTION_ERROR_STATUS.DEVICE_DID_NOT_RESPOND;
pub const CASTING_CONNECTION_ERROR_STATUS_DEVICE_ERROR = CASTING_CONNECTION_ERROR_STATUS.DEVICE_ERROR;
pub const CASTING_CONNECTION_ERROR_STATUS_DEVICE_LOCKED = CASTING_CONNECTION_ERROR_STATUS.DEVICE_LOCKED;
pub const CASTING_CONNECTION_ERROR_STATUS_PROTECTED_PLAYBACK_FAILED = CASTING_CONNECTION_ERROR_STATUS.PROTECTED_PLAYBACK_FAILED;
pub const CASTING_CONNECTION_ERROR_STATUS_INVALID_CASTING_SOURCE = CASTING_CONNECTION_ERROR_STATUS.INVALID_CASTING_SOURCE;
pub const CASTING_CONNECTION_ERROR_STATUS_UNKNOWN = CASTING_CONNECTION_ERROR_STATUS.UNKNOWN;

pub const CASTING_CONNECTION_STATE = enum(i32) {
    DISCONNECTED = 0,
    CONNECTED = 1,
    RENDERING = 2,
    DISCONNECTING = 3,
    CONNECTING = 4,
};
pub const CASTING_CONNECTION_STATE_DISCONNECTED = CASTING_CONNECTION_STATE.DISCONNECTED;
pub const CASTING_CONNECTION_STATE_CONNECTED = CASTING_CONNECTION_STATE.CONNECTED;
pub const CASTING_CONNECTION_STATE_RENDERING = CASTING_CONNECTION_STATE.RENDERING;
pub const CASTING_CONNECTION_STATE_DISCONNECTING = CASTING_CONNECTION_STATE.DISCONNECTING;
pub const CASTING_CONNECTION_STATE_CONNECTING = CASTING_CONNECTION_STATE.CONNECTING;

const IID_ICastingEventHandler_Value = Guid.initString("c79a6cb7-bebd-47a6-a2ad-4d45ad79c7bc");
pub const IID_ICastingEventHandler = &IID_ICastingEventHandler_Value;
pub const ICastingEventHandler = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnStateChanged: *const fn(
            self: *const ICastingEventHandler,
            newState: CASTING_CONNECTION_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnError: *const fn(
            self: *const ICastingEventHandler,
            errorStatus: CASTING_CONNECTION_ERROR_STATUS,
            errorMessage: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnStateChanged(self: *const ICastingEventHandler, newState: CASTING_CONNECTION_STATE) callconv(.Inline) HRESULT {
        return self.vtable.OnStateChanged(self, newState);
    }
    pub fn OnError(self: *const ICastingEventHandler, errorStatus: CASTING_CONNECTION_ERROR_STATUS, errorMessage: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.OnError(self, errorStatus, errorMessage);
    }
};

const IID_ICastingController_Value = Guid.initString("f0a56423-a664-4fbd-8b43-409a45e8d9a1");
pub const IID_ICastingController = &IID_ICastingController_Value;
pub const ICastingController = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn(
            self: *const ICastingController,
            castingEngine: ?*IUnknown,
            castingSource: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Connect: *const fn(
            self: *const ICastingController,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: *const fn(
            self: *const ICastingController,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Advise: *const fn(
            self: *const ICastingController,
            eventHandler: ?*ICastingEventHandler,
            cookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnAdvise: *const fn(
            self: *const ICastingController,
            cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const ICastingController, castingEngine: ?*IUnknown, castingSource: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, castingEngine, castingSource);
    }
    pub fn Connect(self: *const ICastingController) callconv(.Inline) HRESULT {
        return self.vtable.Connect(self);
    }
    pub fn Disconnect(self: *const ICastingController) callconv(.Inline) HRESULT {
        return self.vtable.Disconnect(self);
    }
    pub fn Advise(self: *const ICastingController, eventHandler: ?*ICastingEventHandler, cookie: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Advise(self, eventHandler, cookie);
    }
    pub fn UnAdvise(self: *const ICastingController, cookie: u32) callconv(.Inline) HRESULT {
        return self.vtable.UnAdvise(self, cookie);
    }
};

const IID_ICastingSourceInfo_Value = Guid.initString("45101ab7-7c3a-4bce-9500-12c09024b298");
pub const IID_ICastingSourceInfo = &IID_ICastingSourceInfo_Value;
pub const ICastingSourceInfo = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetController: *const fn(
            self: *const ICastingSourceInfo,
            controller: ?*?*ICastingController,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperties: *const fn(
            self: *const ICastingSourceInfo,
            props: ?*?*INamedPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetController(self: *const ICastingSourceInfo, controller: ?*?*ICastingController) callconv(.Inline) HRESULT {
        return self.vtable.GetController(self, controller);
    }
    pub fn GetProperties(self: *const ICastingSourceInfo, props: ?*?*INamedPropertyStore) callconv(.Inline) HRESULT {
        return self.vtable.GetProperties(self, props);
    }
};

const IID_IDragDropManagerInterop_Value = Guid.initString("5ad8cba7-4c01-4dac-9074-827894292d63");
pub const IID_IDragDropManagerInterop = &IID_IDragDropManagerInterop_Value;
pub const IDragDropManagerInterop = extern union {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        GetForWindow: *const fn(
            self: *const IDragDropManagerInterop,
            hwnd: ?HWND,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IInspectable: IInspectable,
    IUnknown: IUnknown,
    pub fn GetForWindow(self: *const IDragDropManagerInterop, hwnd: ?HWND, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetForWindow(self, hwnd, riid, ppv);
    }
};

// TODO: this type is limited to platform 'windows10.0.14393'
const IID_IInputPaneInterop_Value = Guid.initString("75cf2c57-9195-4931-8332-f0b409e916af");
pub const IID_IInputPaneInterop = &IID_IInputPaneInterop_Value;
pub const IInputPaneInterop = extern union {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        GetForWindow: *const fn(
            self: *const IInputPaneInterop,
            appWindow: ?HWND,
            riid: ?*const Guid,
            inputPane: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IInspectable: IInspectable,
    IUnknown: IUnknown,
    pub fn GetForWindow(self: *const IInputPaneInterop, appWindow: ?HWND, riid: ?*const Guid, inputPane: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetForWindow(self, appWindow, riid, inputPane);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IPlayToManagerInterop_Value = Guid.initString("24394699-1f2c-4eb3-8cd7-0ec1da42a540");
pub const IID_IPlayToManagerInterop = &IID_IPlayToManagerInterop_Value;
pub const IPlayToManagerInterop = extern union {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        GetForWindow: *const fn(
            self: *const IPlayToManagerInterop,
            appWindow: ?HWND,
            riid: ?*const Guid,
            playToManager: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowPlayToUIForWindow: *const fn(
            self: *const IPlayToManagerInterop,
            appWindow: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IInspectable: IInspectable,
    IUnknown: IUnknown,
    pub fn GetForWindow(self: *const IPlayToManagerInterop, appWindow: ?HWND, riid: ?*const Guid, playToManager: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetForWindow(self, appWindow, riid, playToManager);
    }
    pub fn ShowPlayToUIForWindow(self: *const IPlayToManagerInterop, appWindow: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.ShowPlayToUIForWindow(self, appWindow);
    }
};

const IID_ICorrelationVectorInformation_Value = Guid.initString("83c78b3c-d88b-4950-aa6e-22b8d22aabd3");
pub const IID_ICorrelationVectorInformation = &IID_ICorrelationVectorInformation_Value;
pub const ICorrelationVectorInformation = extern union {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastCorrelationVectorForThread: *const fn(
            self: *const ICorrelationVectorInformation,
            cv: ?*?HSTRING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NextCorrelationVectorForThread: *const fn(
            self: *const ICorrelationVectorInformation,
            cv: ?*?HSTRING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NextCorrelationVectorForThread: *const fn(
            self: *const ICorrelationVectorInformation,
            cv: ?HSTRING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IInspectable: IInspectable,
    IUnknown: IUnknown,
    pub fn get_LastCorrelationVectorForThread(self: *const ICorrelationVectorInformation, cv: ?*?HSTRING) callconv(.Inline) HRESULT {
        return self.vtable.get_LastCorrelationVectorForThread(self, cv);
    }
    pub fn get_NextCorrelationVectorForThread(self: *const ICorrelationVectorInformation, cv: ?*?HSTRING) callconv(.Inline) HRESULT {
        return self.vtable.get_NextCorrelationVectorForThread(self, cv);
    }
    pub fn put_NextCorrelationVectorForThread(self: *const ICorrelationVectorInformation, cv: ?HSTRING) callconv(.Inline) HRESULT {
        return self.vtable.put_NextCorrelationVectorForThread(self, cv);
    }
};

const IID_IUIViewSettingsInterop_Value = Guid.initString("3694dbf9-8f68-44be-8ff5-195c98ede8a6");
pub const IID_IUIViewSettingsInterop = &IID_IUIViewSettingsInterop_Value;
pub const IUIViewSettingsInterop = extern union {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        GetForWindow: *const fn(
            self: *const IUIViewSettingsInterop,
            hwnd: ?HWND,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IInspectable: IInspectable,
    IUnknown: IUnknown,
    pub fn GetForWindow(self: *const IUIViewSettingsInterop, hwnd: ?HWND, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetForWindow(self, hwnd, riid, ppv);
    }
};

const IID_IUserActivityInterop_Value = Guid.initString("1ade314d-0e0a-40d9-824c-9a088a50059f");
pub const IID_IUserActivityInterop = &IID_IUserActivityInterop_Value;
pub const IUserActivityInterop = extern union {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        CreateSessionForWindow: *const fn(
            self: *const IUserActivityInterop,
            window: ?HWND,
            iid: ?*const Guid,
            value: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IInspectable: IInspectable,
    IUnknown: IUnknown,
    pub fn CreateSessionForWindow(self: *const IUserActivityInterop, window: ?HWND, iid: ?*const Guid, value: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.CreateSessionForWindow(self, window, iid, value);
    }
};

const IID_IUserActivitySourceHostInterop_Value = Guid.initString("c15df8bc-8844-487a-b85b-7578e0f61419");
pub const IID_IUserActivitySourceHostInterop = &IID_IUserActivitySourceHostInterop_Value;
pub const IUserActivitySourceHostInterop = extern union {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        SetActivitySourceHost: *const fn(
            self: *const IUserActivitySourceHostInterop,
            activitySourceHost: ?HSTRING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IInspectable: IInspectable,
    IUnknown: IUnknown,
    pub fn SetActivitySourceHost(self: *const IUserActivitySourceHostInterop, activitySourceHost: ?HSTRING) callconv(.Inline) HRESULT {
        return self.vtable.SetActivitySourceHost(self, activitySourceHost);
    }
};

const IID_IUserActivityRequestManagerInterop_Value = Guid.initString("dd69f876-9699-4715-9095-e37ea30dfa1b");
pub const IID_IUserActivityRequestManagerInterop = &IID_IUserActivityRequestManagerInterop_Value;
pub const IUserActivityRequestManagerInterop = extern union {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        GetForWindow: *const fn(
            self: *const IUserActivityRequestManagerInterop,
            window: ?HWND,
            iid: ?*const Guid,
            value: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IInspectable: IInspectable,
    IUnknown: IUnknown,
    pub fn GetForWindow(self: *const IUserActivityRequestManagerInterop, window: ?HWND, iid: ?*const Guid, value: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetForWindow(self, window, iid, value);
    }
};

const IID_IUserConsentVerifierInterop_Value = Guid.initString("39e050c3-4e74-441a-8dc0-b81104df949c");
pub const IID_IUserConsentVerifierInterop = &IID_IUserConsentVerifierInterop_Value;
pub const IUserConsentVerifierInterop = extern union {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        RequestVerificationForWindowAsync: *const fn(
            self: *const IUserConsentVerifierInterop,
            appWindow: ?HWND,
            message: ?HSTRING,
            riid: ?*const Guid,
            asyncOperation: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IInspectable: IInspectable,
    IUnknown: IUnknown,
    pub fn RequestVerificationForWindowAsync(self: *const IUserConsentVerifierInterop, appWindow: ?HWND, message: ?HSTRING, riid: ?*const Guid, asyncOperation: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.RequestVerificationForWindowAsync(self, appWindow, message, riid, asyncOperation);
    }
};

const IID_IWebAuthenticationCoreManagerInterop_Value = Guid.initString("f4b8e804-811e-4436-b69c-44cb67b72084");
pub const IID_IWebAuthenticationCoreManagerInterop = &IID_IWebAuthenticationCoreManagerInterop_Value;
pub const IWebAuthenticationCoreManagerInterop = extern union {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        RequestTokenForWindowAsync: *const fn(
            self: *const IWebAuthenticationCoreManagerInterop,
            appWindow: ?HWND,
            request: ?*IInspectable,
            riid: ?*const Guid,
            asyncInfo: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestTokenWithWebAccountForWindowAsync: *const fn(
            self: *const IWebAuthenticationCoreManagerInterop,
            appWindow: ?HWND,
            request: ?*IInspectable,
            webAccount: ?*IInspectable,
            riid: ?*const Guid,
            asyncInfo: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IInspectable: IInspectable,
    IUnknown: IUnknown,
    pub fn RequestTokenForWindowAsync(self: *const IWebAuthenticationCoreManagerInterop, appWindow: ?HWND, request: ?*IInspectable, riid: ?*const Guid, asyncInfo: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.RequestTokenForWindowAsync(self, appWindow, request, riid, asyncInfo);
    }
    pub fn RequestTokenWithWebAccountForWindowAsync(self: *const IWebAuthenticationCoreManagerInterop, appWindow: ?HWND, request: ?*IInspectable, webAccount: ?*IInspectable, riid: ?*const Guid, asyncInfo: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.RequestTokenWithWebAccountForWindowAsync(self, appWindow, request, webAccount, riid, asyncInfo);
    }
};

// TODO: this type is limited to platform 'windows8.0'
// This COM type is Agile, not sure what that means
const IID_IRestrictedErrorInfo_Value = Guid.initString("82ba7092-4c88-427d-a7bc-16dd93feb67e");
pub const IID_IRestrictedErrorInfo = &IID_IRestrictedErrorInfo_Value;
pub const IRestrictedErrorInfo = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetErrorDetails: *const fn(
            self: *const IRestrictedErrorInfo,
            description: ?*?BSTR,
            @"error": ?*HRESULT,
            restrictedDescription: ?*?BSTR,
            capabilitySid: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReference: *const fn(
            self: *const IRestrictedErrorInfo,
            reference: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetErrorDetails(self: *const IRestrictedErrorInfo, description: ?*?BSTR, @"error": ?*HRESULT, restrictedDescription: ?*?BSTR, capabilitySid: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetErrorDetails(self, description, @"error", restrictedDescription, capabilitySid);
    }
    pub fn GetReference(self: *const IRestrictedErrorInfo, reference: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetReference(self, reference);
    }
};

// TODO: this type is limited to platform 'windows8.1'
const IID_ILanguageExceptionErrorInfo_Value = Guid.initString("04a2dbf3-df83-116c-0946-0812abf6e07d");
pub const IID_ILanguageExceptionErrorInfo = &IID_ILanguageExceptionErrorInfo_Value;
pub const ILanguageExceptionErrorInfo = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetLanguageException: *const fn(
            self: *const ILanguageExceptionErrorInfo,
            languageException: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetLanguageException(self: *const ILanguageExceptionErrorInfo, languageException: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.GetLanguageException(self, languageException);
    }
};

// TODO: this type is limited to platform 'windows10.0.15063'
const IID_ILanguageExceptionTransform_Value = Guid.initString("feb5a271-a6cd-45ce-880a-696706badc65");
pub const IID_ILanguageExceptionTransform = &IID_ILanguageExceptionTransform_Value;
pub const ILanguageExceptionTransform = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTransformedRestrictedErrorInfo: *const fn(
            self: *const ILanguageExceptionTransform,
            restrictedErrorInfo: ?*?*IRestrictedErrorInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetTransformedRestrictedErrorInfo(self: *const ILanguageExceptionTransform, restrictedErrorInfo: ?*?*IRestrictedErrorInfo) callconv(.Inline) HRESULT {
        return self.vtable.GetTransformedRestrictedErrorInfo(self, restrictedErrorInfo);
    }
};

// TODO: this type is limited to platform 'windows10.0.15063'
const IID_ILanguageExceptionStackBackTrace_Value = Guid.initString("cbe53fb5-f967-4258-8d34-42f5e25833de");
pub const IID_ILanguageExceptionStackBackTrace = &IID_ILanguageExceptionStackBackTrace_Value;
pub const ILanguageExceptionStackBackTrace = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetStackBackTrace: *const fn(
            self: *const ILanguageExceptionStackBackTrace,
            maxFramesToCapture: u32,
            stackBackTrace: ?*usize,
            framesCaptured: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetStackBackTrace(self: *const ILanguageExceptionStackBackTrace, maxFramesToCapture: u32, stackBackTrace: ?*usize, framesCaptured: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetStackBackTrace(self, maxFramesToCapture, stackBackTrace, framesCaptured);
    }
};

// TODO: this type is limited to platform 'windows10.0.15063'
const IID_ILanguageExceptionErrorInfo2_Value = Guid.initString("5746e5c4-5b97-424c-b620-2822915734dd");
pub const IID_ILanguageExceptionErrorInfo2 = &IID_ILanguageExceptionErrorInfo2_Value;
pub const ILanguageExceptionErrorInfo2 = extern union {
    pub const VTable = extern struct {
        base: ILanguageExceptionErrorInfo.VTable,
        GetPreviousLanguageExceptionErrorInfo: *const fn(
            self: *const ILanguageExceptionErrorInfo2,
            previousLanguageExceptionErrorInfo: ?*?*ILanguageExceptionErrorInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CapturePropagationContext: *const fn(
            self: *const ILanguageExceptionErrorInfo2,
            languageException: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropagationContextHead: *const fn(
            self: *const ILanguageExceptionErrorInfo2,
            propagatedLanguageExceptionErrorInfoHead: ?*?*ILanguageExceptionErrorInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ILanguageExceptionErrorInfo: ILanguageExceptionErrorInfo,
    IUnknown: IUnknown,
    pub fn GetPreviousLanguageExceptionErrorInfo(self: *const ILanguageExceptionErrorInfo2, previousLanguageExceptionErrorInfo: ?*?*ILanguageExceptionErrorInfo2) callconv(.Inline) HRESULT {
        return self.vtable.GetPreviousLanguageExceptionErrorInfo(self, previousLanguageExceptionErrorInfo);
    }
    pub fn CapturePropagationContext(self: *const ILanguageExceptionErrorInfo2, languageException: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.CapturePropagationContext(self, languageException);
    }
    pub fn GetPropagationContextHead(self: *const ILanguageExceptionErrorInfo2, propagatedLanguageExceptionErrorInfoHead: ?*?*ILanguageExceptionErrorInfo2) callconv(.Inline) HRESULT {
        return self.vtable.GetPropagationContextHead(self, propagatedLanguageExceptionErrorInfoHead);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IActivationFactory_Value = Guid.initString("00000035-0000-0000-c000-000000000046");
pub const IID_IActivationFactory = &IID_IActivationFactory_Value;
pub const IActivationFactory = extern union {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        ActivateInstance: *const fn(
            self: *const IActivationFactory,
            instance: ?*?*IInspectable,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IInspectable: IInspectable,
    IUnknown: IUnknown,
    pub fn ActivateInstance(self: *const IActivationFactory, instance: ?*?*IInspectable) callconv(.Inline) HRESULT {
        return self.vtable.ActivateInstance(self, instance);
    }
};

pub const RO_INIT_TYPE = enum(i32) {
    SINGLETHREADED = 0,
    MULTITHREADED = 1,
};
pub const RO_INIT_SINGLETHREADED = RO_INIT_TYPE.SINGLETHREADED;
pub const RO_INIT_MULTITHREADED = RO_INIT_TYPE.MULTITHREADED;

pub const _RO_REGISTRATION_COOKIE = extern struct {
    placeholder: usize, // TODO: why is this type empty?
};

const IID_IBufferByteAccess_Value = Guid.initString("905a0fef-bc53-11df-8c49-001e4fc686da");
pub const IID_IBufferByteAccess = &IID_IBufferByteAccess_Value;
pub const IBufferByteAccess = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Buffer: *const fn(
            self: *const IBufferByteAccess,
            value: ?*?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Buffer(self: *const IBufferByteAccess, value: ?*?*u8) callconv(.Inline) HRESULT {
        return self.vtable.Buffer(self, value);
    }
};

pub const RO_ERROR_REPORTING_FLAGS = packed struct(u32) {
    SUPPRESSEXCEPTIONS: u1 = 0,
    FORCEEXCEPTIONS: u1 = 0,
    USESETERRORINFO: u1 = 0,
    SUPPRESSSETERRORINFO: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const RO_ERROR_REPORTING_NONE = RO_ERROR_REPORTING_FLAGS{ };
pub const RO_ERROR_REPORTING_SUPPRESSEXCEPTIONS = RO_ERROR_REPORTING_FLAGS{ .SUPPRESSEXCEPTIONS = 1 };
pub const RO_ERROR_REPORTING_FORCEEXCEPTIONS = RO_ERROR_REPORTING_FLAGS{ .FORCEEXCEPTIONS = 1 };
pub const RO_ERROR_REPORTING_USESETERRORINFO = RO_ERROR_REPORTING_FLAGS{ .USESETERRORINFO = 1 };
pub const RO_ERROR_REPORTING_SUPPRESSSETERRORINFO = RO_ERROR_REPORTING_FLAGS{ .SUPPRESSSETERRORINFO = 1 };

pub const PINSPECT_MEMORY_CALLBACK = *const fn(
    context: ?*anyopaque,
    readAddress: usize,
    length: u32,
    buffer: [*:0]u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const IRoSimpleMetaDataBuilder = extern union {
    pub const VTable = extern struct {
        SetWinRtInterface: *const fn(
            self: *const IRoSimpleMetaDataBuilder,
            iid: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDelegate: *const fn(
            self: *const IRoSimpleMetaDataBuilder,
            iid: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInterfaceGroupSimpleDefault: *const fn(
            self: *const IRoSimpleMetaDataBuilder,
            name: ?[*:0]const u16,
            defaultInterfaceName: ?[*:0]const u16,
            defaultInterfaceIID: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInterfaceGroupParameterizedDefault: *const fn(
            self: *const IRoSimpleMetaDataBuilder,
            name: ?[*:0]const u16,
            elementCount: u32,
            defaultInterfaceNameElements: [*]?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRuntimeClassSimpleDefault: *const fn(
            self: *const IRoSimpleMetaDataBuilder,
            name: ?[*:0]const u16,
            defaultInterfaceName: ?[*:0]const u16,
            defaultInterfaceIID: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRuntimeClassParameterizedDefault: *const fn(
            self: *const IRoSimpleMetaDataBuilder,
            name: ?[*:0]const u16,
            elementCount: u32,
            defaultInterfaceNameElements: [*]const ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStruct: *const fn(
            self: *const IRoSimpleMetaDataBuilder,
            name: ?[*:0]const u16,
            numFields: u32,
            fieldTypeNames: [*]const ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnum: *const fn(
            self: *const IRoSimpleMetaDataBuilder,
            name: ?[*:0]const u16,
            baseType: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetParameterizedInterface: *const fn(
            self: *const IRoSimpleMetaDataBuilder,
            piid: Guid,
            numArgs: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetParameterizedDelegate: *const fn(
            self: *const IRoSimpleMetaDataBuilder,
            piid: Guid,
            numArgs: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn SetWinRtInterface(self: *const IRoSimpleMetaDataBuilder, iid: Guid) callconv(.Inline) HRESULT {
        return self.vtable.SetWinRtInterface(self, iid);
    }
    pub fn SetDelegate(self: *const IRoSimpleMetaDataBuilder, iid: Guid) callconv(.Inline) HRESULT {
        return self.vtable.SetDelegate(self, iid);
    }
    pub fn SetInterfaceGroupSimpleDefault(self: *const IRoSimpleMetaDataBuilder, name: ?[*:0]const u16, defaultInterfaceName: ?[*:0]const u16, defaultInterfaceIID: ?*const Guid) callconv(.Inline) HRESULT {
        return self.vtable.SetInterfaceGroupSimpleDefault(self, name, defaultInterfaceName, defaultInterfaceIID);
    }
    pub fn SetInterfaceGroupParameterizedDefault(self: *const IRoSimpleMetaDataBuilder, name: ?[*:0]const u16, elementCount: u32, defaultInterfaceNameElements: [*]?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.SetInterfaceGroupParameterizedDefault(self, name, elementCount, defaultInterfaceNameElements);
    }
    pub fn SetRuntimeClassSimpleDefault(self: *const IRoSimpleMetaDataBuilder, name: ?[*:0]const u16, defaultInterfaceName: ?[*:0]const u16, defaultInterfaceIID: ?*const Guid) callconv(.Inline) HRESULT {
        return self.vtable.SetRuntimeClassSimpleDefault(self, name, defaultInterfaceName, defaultInterfaceIID);
    }
    pub fn SetRuntimeClassParameterizedDefault(self: *const IRoSimpleMetaDataBuilder, name: ?[*:0]const u16, elementCount: u32, defaultInterfaceNameElements: [*]const ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetRuntimeClassParameterizedDefault(self, name, elementCount, defaultInterfaceNameElements);
    }
    pub fn SetStruct(self: *const IRoSimpleMetaDataBuilder, name: ?[*:0]const u16, numFields: u32, fieldTypeNames: [*]const ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetStruct(self, name, numFields, fieldTypeNames);
    }
    pub fn SetEnum(self: *const IRoSimpleMetaDataBuilder, name: ?[*:0]const u16, baseType: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetEnum(self, name, baseType);
    }
    pub fn SetParameterizedInterface(self: *const IRoSimpleMetaDataBuilder, piid: Guid, numArgs: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetParameterizedInterface(self, piid, numArgs);
    }
    pub fn SetParameterizedDelegate(self: *const IRoSimpleMetaDataBuilder, piid: Guid, numArgs: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetParameterizedDelegate(self, piid, numArgs);
    }
};

pub const IRoMetaDataLocator = extern union {
    pub const VTable = extern struct {
        Locate: *const fn(
            self: *const IRoMetaDataLocator,
            nameElement: ?[*:0]const u16,
            metaDataDestination: ?*IRoSimpleMetaDataBuilder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn Locate(self: *const IRoMetaDataLocator, nameElement: ?[*:0]const u16, metaDataDestination: ?*IRoSimpleMetaDataBuilder) callconv(.Inline) HRESULT {
        return self.vtable.Locate(self, nameElement, metaDataDestination);
    }
};

pub const BSOS_OPTIONS = enum(i32) {
    DEFAULT = 0,
    PREFERDESTINATIONSTREAM = 1,
};
pub const BSOS_DEFAULT = BSOS_OPTIONS.DEFAULT;
pub const BSOS_PREFERDESTINATIONSTREAM = BSOS_OPTIONS.PREFERDESTINATIONSTREAM;

const IID_IMemoryBufferByteAccess_Value = Guid.initString("5b0d3235-4dba-4d44-865e-8f1d0e4fd04d");
pub const IID_IMemoryBufferByteAccess = &IID_IMemoryBufferByteAccess_Value;
pub const IMemoryBufferByteAccess = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetBuffer: *const fn(
            self: *const IMemoryBufferByteAccess,
            value: ?*?*u8,
            capacity: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetBuffer(self: *const IMemoryBufferByteAccess, value: ?*?*u8, capacity: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetBuffer(self, value, capacity);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IWeakReference_Value = Guid.initString("00000037-0000-0000-c000-000000000046");
pub const IID_IWeakReference = &IID_IWeakReference_Value;
pub const IWeakReference = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Resolve: *const fn(
            self: *const IWeakReference,
            riid: ?*const Guid,
            objectReference: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Resolve(self: *const IWeakReference, riid: ?*const Guid, objectReference: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.Resolve(self, riid, objectReference);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IWeakReferenceSource_Value = Guid.initString("00000038-0000-0000-c000-000000000046");
pub const IID_IWeakReferenceSource = &IID_IWeakReferenceSource_Value;
pub const IWeakReferenceSource = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetWeakReference: *const fn(
            self: *const IWeakReferenceSource,
            weakReference: ?*?*IWeakReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetWeakReference(self: *const IWeakReferenceSource, weakReference: ?*?*IWeakReference) callconv(.Inline) HRESULT {
        return self.vtable.GetWeakReference(self, weakReference);
    }
};

const IID_ISystemMediaTransportControlsInterop_Value = Guid.initString("ddb0472d-c911-4a1f-86d9-dc3d71a95f5a");
pub const IID_ISystemMediaTransportControlsInterop = &IID_ISystemMediaTransportControlsInterop_Value;
pub const ISystemMediaTransportControlsInterop = extern union {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        GetForWindow: *const fn(
            self: *const ISystemMediaTransportControlsInterop,
            appWindow: ?HWND,
            riid: ?*const Guid,
            mediaTransportControl: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IInspectable: IInspectable,
    IUnknown: IUnknown,
    pub fn GetForWindow(self: *const ISystemMediaTransportControlsInterop, appWindow: ?HWND, riid: ?*const Guid, mediaTransportControl: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetForWindow(self, appWindow, riid, mediaTransportControl);
    }
};

const IID_IShareWindowCommandEventArgsInterop_Value = Guid.initString("6571a721-643d-43d4-aca4-6b6f5f30f1ad");
pub const IID_IShareWindowCommandEventArgsInterop = &IID_IShareWindowCommandEventArgsInterop_Value;
pub const IShareWindowCommandEventArgsInterop = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetWindow: *const fn(
            self: *const IShareWindowCommandEventArgsInterop,
            value: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetWindow(self: *const IShareWindowCommandEventArgsInterop, value: ?*?HWND) callconv(.Inline) HRESULT {
        return self.vtable.GetWindow(self, value);
    }
};

const IID_IShareWindowCommandSourceInterop_Value = Guid.initString("461a191f-8424-43a6-a0fa-3451a22f56ab");
pub const IID_IShareWindowCommandSourceInterop = &IID_IShareWindowCommandSourceInterop_Value;
pub const IShareWindowCommandSourceInterop = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetForWindow: *const fn(
            self: *const IShareWindowCommandSourceInterop,
            appWindow: ?HWND,
            riid: ?*const Guid,
            shareWindowCommandSource: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetForWindow(self: *const IShareWindowCommandSourceInterop, appWindow: ?HWND, riid: ?*const Guid, shareWindowCommandSource: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetForWindow(self, appWindow, riid, shareWindowCommandSource);
    }
};

const IID_IMessageDispatcher_Value = Guid.initString("f5f84c8f-cfd0-4cd6-b66b-c5d26ff1689d");
pub const IID_IMessageDispatcher = &IID_IMessageDispatcher_Value;
pub const IMessageDispatcher = extern union {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        PumpMessages: *const fn(
            self: *const IMessageDispatcher,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IInspectable: IInspectable,
    IUnknown: IUnknown,
    pub fn PumpMessages(self: *const IMessageDispatcher) callconv(.Inline) HRESULT {
        return self.vtable.PumpMessages(self);
    }
};

const IID_ICoreWindowInterop_Value = Guid.initString("45d64a29-a63e-4cb6-b498-5781d298cb4f");
pub const IID_ICoreWindowInterop = &IID_ICoreWindowInterop_Value;
pub const ICoreWindowInterop = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WindowHandle: *const fn(
            self: *const ICoreWindowInterop,
            hwnd: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MessageHandled: *const fn(
            self: *const ICoreWindowInterop,
            value: u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn get_WindowHandle(self: *const ICoreWindowInterop, hwnd: ?*?HWND) callconv(.Inline) HRESULT {
        return self.vtable.get_WindowHandle(self, hwnd);
    }
    pub fn put_MessageHandled(self: *const ICoreWindowInterop, value: u8) callconv(.Inline) HRESULT {
        return self.vtable.put_MessageHandled(self, value);
    }
};

const IID_ICoreInputInterop_Value = Guid.initString("40bfe3e3-b75a-4479-ac96-475365749bb8");
pub const IID_ICoreInputInterop = &IID_ICoreInputInterop_Value;
pub const ICoreInputInterop = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetInputSource: *const fn(
            self: *const ICoreInputInterop,
            value: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MessageHandled: *const fn(
            self: *const ICoreInputInterop,
            value: u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetInputSource(self: *const ICoreInputInterop, value: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.SetInputSource(self, value);
    }
    pub fn put_MessageHandled(self: *const ICoreInputInterop, value: u8) callconv(.Inline) HRESULT {
        return self.vtable.put_MessageHandled(self, value);
    }
};

const IID_ICoreWindowComponentInterop_Value = Guid.initString("0576ab31-a310-4c40-ba31-fd37e0298dfa");
pub const IID_ICoreWindowComponentInterop = &IID_ICoreWindowComponentInterop_Value;
pub const ICoreWindowComponentInterop = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ConfigureComponentInput: *const fn(
            self: *const ICoreWindowComponentInterop,
            hostViewInstanceId: u32,
            hwndHost: ?HWND,
            inputSourceVisual: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewInstanceId: *const fn(
            self: *const ICoreWindowComponentInterop,
            componentViewInstanceId: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn ConfigureComponentInput(self: *const ICoreWindowComponentInterop, hostViewInstanceId: u32, hwndHost: ?HWND, inputSourceVisual: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.ConfigureComponentInput(self, hostViewInstanceId, hwndHost, inputSourceVisual);
    }
    pub fn GetViewInstanceId(self: *const ICoreWindowComponentInterop, componentViewInstanceId: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetViewInstanceId(self, componentViewInstanceId);
    }
};

const IID_ICoreWindowAdapterInterop_Value = Guid.initString("7a5b6fd1-cd73-4b6c-9cf4-2e869eaf470a");
pub const IID_ICoreWindowAdapterInterop = &IID_ICoreWindowAdapterInterop_Value;
pub const ICoreWindowAdapterInterop = extern union {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AppActivationClientAdapter: *const fn(
            self: *const ICoreWindowAdapterInterop,
            value: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ApplicationViewClientAdapter: *const fn(
            self: *const ICoreWindowAdapterInterop,
            value: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CoreApplicationViewClientAdapter: *const fn(
            self: *const ICoreWindowAdapterInterop,
            value: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HoloViewClientAdapter: *const fn(
            self: *const ICoreWindowAdapterInterop,
            value: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PositionerClientAdapter: *const fn(
            self: *const ICoreWindowAdapterInterop,
            value: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SystemNavigationClientAdapter: *const fn(
            self: *const ICoreWindowAdapterInterop,
            value: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TitleBarClientAdapter: *const fn(
            self: *const ICoreWindowAdapterInterop,
            value: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWindowClientAdapter: *const fn(
            self: *const ICoreWindowAdapterInterop,
            value: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IInspectable: IInspectable,
    IUnknown: IUnknown,
    pub fn get_AppActivationClientAdapter(self: *const ICoreWindowAdapterInterop, value: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get_AppActivationClientAdapter(self, value);
    }
    pub fn get_ApplicationViewClientAdapter(self: *const ICoreWindowAdapterInterop, value: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get_ApplicationViewClientAdapter(self, value);
    }
    pub fn get_CoreApplicationViewClientAdapter(self: *const ICoreWindowAdapterInterop, value: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get_CoreApplicationViewClientAdapter(self, value);
    }
    pub fn get_HoloViewClientAdapter(self: *const ICoreWindowAdapterInterop, value: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get_HoloViewClientAdapter(self, value);
    }
    pub fn get_PositionerClientAdapter(self: *const ICoreWindowAdapterInterop, value: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get_PositionerClientAdapter(self, value);
    }
    pub fn get_SystemNavigationClientAdapter(self: *const ICoreWindowAdapterInterop, value: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get_SystemNavigationClientAdapter(self, value);
    }
    pub fn get_TitleBarClientAdapter(self: *const ICoreWindowAdapterInterop, value: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get_TitleBarClientAdapter(self, value);
    }
    pub fn SetWindowClientAdapter(self: *const ICoreWindowAdapterInterop, value: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.SetWindowClientAdapter(self, value);
    }
};


//--------------------------------------------------------------------------------
// Section: Functions (70)
//--------------------------------------------------------------------------------
pub extern "ole32" fn CoDecodeProxy(
    dwClientPid: u32,
    ui64ProxyAddress: u64,
    pServerInformation: ?*ServerInformation,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.1'
pub extern "ole32" fn RoGetAgileReference(
    options: AgileReferenceOptions,
    riid: ?*const Guid,
    pUnk: ?*IUnknown,
    ppAgileReference: **IAgileReference,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn HSTRING_UserSize(
    param0: ?*u32,
    param1: u32,
    param2: ?*?HSTRING,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn HSTRING_UserMarshal(
    param0: ?*u32,
    param1: ?*u8,
    param2: ?*?HSTRING,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn HSTRING_UserUnmarshal(
    param0: ?*u32,
    param1: [*:0]u8,
    param2: ?*?HSTRING,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn HSTRING_UserFree(
    param0: ?*u32,
    param1: ?*?HSTRING,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn HSTRING_UserSize64(
    param0: ?*u32,
    param1: u32,
    param2: ?*?HSTRING,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn HSTRING_UserMarshal64(
    param0: ?*u32,
    param1: ?*u8,
    param2: ?*?HSTRING,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn HSTRING_UserUnmarshal64(
    param0: ?*u32,
    param1: [*:0]u8,
    param2: ?*?HSTRING,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn HSTRING_UserFree64(
    param0: ?*u32,
    param1: ?*?HSTRING,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsCreateString(
    sourceString: ?[*:0]const u16,
    length: u32,
    string: ?*?HSTRING,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsCreateStringReference(
    sourceString: ?[*:0]const u16,
    length: u32,
    hstringHeader: ?*HSTRING_HEADER,
    string: ?*?HSTRING,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsDeleteString(
    string: ?HSTRING,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsDuplicateString(
    string: ?HSTRING,
    newString: ?*?HSTRING,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsGetStringLen(
    string: ?HSTRING,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsGetStringRawBuffer(
    string: ?HSTRING,
    length: ?*u32,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsIsStringEmpty(
    string: ?HSTRING,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsStringHasEmbeddedNull(
    string: ?HSTRING,
    hasEmbedNull: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsCompareStringOrdinal(
    string1: ?HSTRING,
    string2: ?HSTRING,
    result: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsSubstring(
    string: ?HSTRING,
    startIndex: u32,
    newString: ?*?HSTRING,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsSubstringWithSpecifiedLength(
    string: ?HSTRING,
    startIndex: u32,
    length: u32,
    newString: ?*?HSTRING,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsConcatString(
    string1: ?HSTRING,
    string2: ?HSTRING,
    newString: ?*?HSTRING,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsReplaceString(
    string: ?HSTRING,
    stringReplaced: ?HSTRING,
    stringReplaceWith: ?HSTRING,
    newString: ?*?HSTRING,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsTrimStringStart(
    string: ?HSTRING,
    trimString: ?HSTRING,
    newString: ?*?HSTRING,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsTrimStringEnd(
    string: ?HSTRING,
    trimString: ?HSTRING,
    newString: ?*?HSTRING,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsPreallocateStringBuffer(
    length: u32,
    charBuffer: ?*?*u16,
    bufferHandle: ?*?HSTRING_BUFFER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsPromoteStringBuffer(
    bufferHandle: ?HSTRING_BUFFER,
    string: ?*?HSTRING,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsDeleteStringBuffer(
    bufferHandle: ?HSTRING_BUFFER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsInspectString(
    targetHString: usize,
    machine: u16,
    callback: ?PINSPECT_HSTRING_CALLBACK,
    context: ?*anyopaque,
    length: ?*u32,
    targetStringAddress: ?*usize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-string-l1-1-1" fn WindowsInspectString2(
    targetHString: u64,
    machine: u16,
    callback: ?PINSPECT_HSTRING_CALLBACK2,
    context: ?*anyopaque,
    length: ?*u32,
    targetStringAddress: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "coremessaging" fn CreateDispatcherQueueController(
    options: DispatcherQueueOptions,
    dispatcherQueueController: ?**struct{comment: []const u8 = "MissingClrType DispatcherQueueController.Windows.System"},
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-l1-1-0" fn RoInitialize(
    initType: RO_INIT_TYPE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-l1-1-0" fn RoUninitialize(
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-l1-1-0" fn RoActivateInstance(
    activatableClassId: ?HSTRING,
    instance: **IInspectable,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-l1-1-0" fn RoRegisterActivationFactories(
    activatableClassIds: [*]?HSTRING,
    activationFactoryCallbacks: [*]isize,
    count: u32,
    cookie: ?*isize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-l1-1-0" fn RoRevokeActivationFactories(
    cookie: isize,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-l1-1-0" fn RoGetActivationFactory(
    activatableClassId: ?HSTRING,
    iid: ?*const Guid,
    factory: **anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-l1-1-0" fn RoRegisterForApartmentShutdown(
    callbackObject: ?*IApartmentShutdown,
    apartmentIdentifier: ?*u64,
    regCookie: ?*APARTMENT_SHUTDOWN_REGISTRATION_COOKIE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-l1-1-0" fn RoUnregisterForApartmentShutdown(
    regCookie: APARTMENT_SHUTDOWN_REGISTRATION_COOKIE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-l1-1-0" fn RoGetApartmentIdentifier(
    apartmentIdentifier: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-robuffer-l1-1-0" fn RoGetBufferMarshaler(
    bufferMarshaler: ?*?*IMarshal,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-error-l1-1-0" fn RoGetErrorReportingFlags(
    pflags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-error-l1-1-0" fn RoSetErrorReportingFlags(
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-error-l1-1-0" fn RoResolveRestrictedErrorInfoReference(
    reference: ?[*:0]const u16,
    ppRestrictedErrorInfo: ?*?*IRestrictedErrorInfo,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-error-l1-1-0" fn SetRestrictedErrorInfo(
    pRestrictedErrorInfo: ?*IRestrictedErrorInfo,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-error-l1-1-0" fn GetRestrictedErrorInfo(
    ppRestrictedErrorInfo: ?*?*IRestrictedErrorInfo,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-error-l1-1-0" fn RoOriginateErrorW(
    @"error": HRESULT,
    cchMax: u32,
    message: ?*[512]u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-error-l1-1-0" fn RoOriginateError(
    @"error": HRESULT,
    message: ?HSTRING,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-error-l1-1-0" fn RoTransformErrorW(
    oldError: HRESULT,
    newError: HRESULT,
    cchMax: u32,
    message: ?*[512]u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-error-l1-1-0" fn RoTransformError(
    oldError: HRESULT,
    newError: HRESULT,
    message: ?HSTRING,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-error-l1-1-0" fn RoCaptureErrorContext(
    hr: HRESULT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-error-l1-1-0" fn RoFailFastWithErrorContext(
    hrError: HRESULT,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows8.1'
pub extern "api-ms-win-core-winrt-error-l1-1-1" fn RoOriginateLanguageException(
    @"error": HRESULT,
    message: ?HSTRING,
    languageException: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.1'
pub extern "api-ms-win-core-winrt-error-l1-1-1" fn RoClearError(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "api-ms-win-core-winrt-error-l1-1-1" fn RoReportUnhandledError(
    pRestrictedErrorInfo: ?*IRestrictedErrorInfo,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.1'
pub extern "api-ms-win-core-winrt-error-l1-1-1" fn RoInspectThreadErrorInfo(
    targetTebAddress: usize,
    machine: u16,
    readMemoryCallback: ?PINSPECT_MEMORY_CALLBACK,
    context: ?*anyopaque,
    targetErrorInfoAddress: ?*usize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.1'
pub extern "api-ms-win-core-winrt-error-l1-1-1" fn RoInspectCapturedStackBackTrace(
    targetErrorInfoAddress: usize,
    machine: u16,
    readMemoryCallback: ?PINSPECT_MEMORY_CALLBACK,
    context: ?*anyopaque,
    frameCount: ?*u32,
    targetBackTraceAddress: ?*usize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-error-l1-1-1" fn RoGetMatchingRestrictedErrorInfo(
    hrIn: HRESULT,
    ppRestrictedErrorInfo: **IRestrictedErrorInfo,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-error-l1-1-1" fn RoReportFailedDelegate(
    punkDelegate: ?*IUnknown,
    pRestrictedErrorInfo: ?*IRestrictedErrorInfo,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-error-l1-1-1" fn IsErrorPropagationEnabled(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "rometadata" fn MetaDataGetDispenser(
    rclsid: ?*const Guid,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-roparameterizediid-l1-1-0" fn RoGetParameterizedTypeInstanceIID(
    nameElementCount: u32,
    nameElements: [*]?PWSTR,
    metaDataLocator: ?*IRoMetaDataLocator,
    iid: ?*Guid,
    pExtra: ?*ROPARAMIIDHANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-roparameterizediid-l1-1-0" fn RoFreeParameterizedTypeExtra(
    extra: ROPARAMIIDHANDLE,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-roparameterizediid-l1-1-0" fn RoParameterizedTypeExtraGetTypeSignature(
    extra: ROPARAMIIDHANDLE,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-winrt-registration-l1-1-0" fn RoGetServerActivatableClasses(
    serverName: ?HSTRING,
    activatableClassIds: ?*?*?HSTRING,
    count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-shcore-stream-winrt-l1-1-0" fn CreateRandomAccessStreamOnFile(
    filePath: ?[*:0]const u16,
    accessMode: u32,
    riid: ?*const Guid,
    ppv: **anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-shcore-stream-winrt-l1-1-0" fn CreateRandomAccessStreamOverStream(
    stream: ?*IStream,
    options: BSOS_OPTIONS,
    riid: ?*const Guid,
    ppv: **anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-shcore-stream-winrt-l1-1-0" fn CreateStreamOverRandomAccessStream(
    randomAccessStream: ?*IUnknown,
    riid: ?*const Guid,
    ppv: **anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "windows.ui" fn CreateControlInput(
    riid: ?*const Guid,
    ppv: **anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "windows.ui" fn CreateControlInputEx(
    pCoreWindow: ?*IUnknown,
    riid: ?*const Guid,
    ppv: **anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (11)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IMarshal = @import("../system/com/marshal.zig").IMarshal;
const INamedPropertyStore = @import("../ui/shell/properties_system.zig").INamedPropertyStore;
const IStream = @import("../system/com.zig").IStream;
const IUnknown = @import("../system/com.zig").IUnknown;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PINSPECT_HSTRING_CALLBACK")) { _ = PINSPECT_HSTRING_CALLBACK; }
    if (@hasDecl(@This(), "PINSPECT_HSTRING_CALLBACK2")) { _ = PINSPECT_HSTRING_CALLBACK2; }
    if (@hasDecl(@This(), "PINSPECT_MEMORY_CALLBACK")) { _ = PINSPECT_MEMORY_CALLBACK; }

    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
//--------------------------------------------------------------------------------
// Section: SubModules (15)
//--------------------------------------------------------------------------------
pub const all_joyn = @import("win_rt/all_joyn.zig");
pub const composition = @import("win_rt/composition.zig");
pub const core_input_view = @import("win_rt/core_input_view.zig");
pub const direct3d11 = @import("win_rt/direct3d11.zig");
pub const display = @import("win_rt/display.zig");
pub const graphics = @import("win_rt/graphics.zig");
pub const holographic = @import("win_rt/holographic.zig");
pub const isolation = @import("win_rt/isolation.zig");
pub const media = @import("win_rt/media.zig");
pub const ml = @import("win_rt/ml.zig");
pub const pdf = @import("win_rt/pdf.zig");
pub const printing = @import("win_rt/printing.zig");
pub const shell = @import("win_rt/shell.zig");
pub const storage = @import("win_rt/storage.zig");
pub const xaml = @import("win_rt/xaml.zig");
