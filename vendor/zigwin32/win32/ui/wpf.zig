//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (7)
//--------------------------------------------------------------------------------
pub const MILBITMAPEFFECT_SDK_VERSION = @as(u32, 16777216);
pub const CLSID_MILBitmapEffectGroup = Guid.initString("ac9c1a9a-7e18-4f64-ac7e-47cf7f051e95");
pub const CLSID_MILBitmapEffectBlur = Guid.initString("a924df87-225d-4373-8f5b-b90ec85ae3de");
pub const CLSID_MILBitmapEffectDropShadow = Guid.initString("459a3fbe-d8ac-4692-874b-7a265715aa16");
pub const CLSID_MILBitmapEffectOuterGlow = Guid.initString("e2161bdd-7eb6-4725-9c0b-8a2a1b4f0667");
pub const CLSID_MILBitmapEffectBevel = Guid.initString("fd361dbe-6c9b-4de0-8290-f6400c2737ed");
pub const CLSID_MILBitmapEffectEmboss = Guid.initString("cd299846-824f-47ec-a007-12aa767f2816");

//--------------------------------------------------------------------------------
// Section: Types (23)
//--------------------------------------------------------------------------------
pub const MilRectD = extern struct {
    left: f64,
    top: f64,
    right: f64,
    bottom: f64,
};

pub const MilPoint2D = extern struct {
    X: f64,
    Y: f64,
};

pub const MILMatrixF = extern struct {
    _11: f64,
    _12: f64,
    _13: f64,
    _14: f64,
    _21: f64,
    _22: f64,
    _23: f64,
    _24: f64,
    _31: f64,
    _32: f64,
    _33: f64,
    _34: f64,
    _41: f64,
    _42: f64,
    _43: f64,
    _44: f64,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectConnectorInfo_Value = Guid.initString("f66d2e4b-b46b-42fc-859e-3da0ecdb3c43");
pub const IID_IMILBitmapEffectConnectorInfo = &IID_IMILBitmapEffectConnectorInfo_Value;
pub const IMILBitmapEffectConnectorInfo = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIndex: *const fn(
            self: *const IMILBitmapEffectConnectorInfo,
            puiIndex: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptimalFormat: *const fn(
            self: *const IMILBitmapEffectConnectorInfo,
            pFormat: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumberFormats: *const fn(
            self: *const IMILBitmapEffectConnectorInfo,
            pulNumberFormats: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormat: *const fn(
            self: *const IMILBitmapEffectConnectorInfo,
            ulIndex: u32,
            pFormat: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetIndex(self: *const IMILBitmapEffectConnectorInfo, puiIndex: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetIndex(self, puiIndex);
    }
    pub fn GetOptimalFormat(self: *const IMILBitmapEffectConnectorInfo, pFormat: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetOptimalFormat(self, pFormat);
    }
    pub fn GetNumberFormats(self: *const IMILBitmapEffectConnectorInfo, pulNumberFormats: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetNumberFormats(self, pulNumberFormats);
    }
    pub fn GetFormat(self: *const IMILBitmapEffectConnectorInfo, ulIndex: u32, pFormat: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetFormat(self, ulIndex, pFormat);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectConnectionsInfo_Value = Guid.initString("476b538a-c765-4237-ba4a-d6a880ff0cfc");
pub const IID_IMILBitmapEffectConnectionsInfo = &IID_IMILBitmapEffectConnectionsInfo_Value;
pub const IMILBitmapEffectConnectionsInfo = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNumberInputs: *const fn(
            self: *const IMILBitmapEffectConnectionsInfo,
            puiNumInputs: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumberOutputs: *const fn(
            self: *const IMILBitmapEffectConnectionsInfo,
            puiNumOutputs: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInputConnectorInfo: *const fn(
            self: *const IMILBitmapEffectConnectionsInfo,
            uiIndex: u32,
            ppConnectorInfo: ?*?*IMILBitmapEffectConnectorInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputConnectorInfo: *const fn(
            self: *const IMILBitmapEffectConnectionsInfo,
            uiIndex: u32,
            ppConnectorInfo: ?*?*IMILBitmapEffectConnectorInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetNumberInputs(self: *const IMILBitmapEffectConnectionsInfo, puiNumInputs: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetNumberInputs(self, puiNumInputs);
    }
    pub fn GetNumberOutputs(self: *const IMILBitmapEffectConnectionsInfo, puiNumOutputs: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetNumberOutputs(self, puiNumOutputs);
    }
    pub fn GetInputConnectorInfo(self: *const IMILBitmapEffectConnectionsInfo, uiIndex: u32, ppConnectorInfo: ?*?*IMILBitmapEffectConnectorInfo) callconv(.Inline) HRESULT {
        return self.vtable.GetInputConnectorInfo(self, uiIndex, ppConnectorInfo);
    }
    pub fn GetOutputConnectorInfo(self: *const IMILBitmapEffectConnectionsInfo, uiIndex: u32, ppConnectorInfo: ?*?*IMILBitmapEffectConnectorInfo) callconv(.Inline) HRESULT {
        return self.vtable.GetOutputConnectorInfo(self, uiIndex, ppConnectorInfo);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectConnections_Value = Guid.initString("c2b5d861-9b1a-4374-89b0-dec4874d6a81");
pub const IID_IMILBitmapEffectConnections = &IID_IMILBitmapEffectConnections_Value;
pub const IMILBitmapEffectConnections = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInputConnector: *const fn(
            self: *const IMILBitmapEffectConnections,
            uiIndex: u32,
            ppConnector: ?*?*IMILBitmapEffectInputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputConnector: *const fn(
            self: *const IMILBitmapEffectConnections,
            uiIndex: u32,
            ppConnector: ?*?*IMILBitmapEffectOutputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetInputConnector(self: *const IMILBitmapEffectConnections, uiIndex: u32, ppConnector: ?*?*IMILBitmapEffectInputConnector) callconv(.Inline) HRESULT {
        return self.vtable.GetInputConnector(self, uiIndex, ppConnector);
    }
    pub fn GetOutputConnector(self: *const IMILBitmapEffectConnections, uiIndex: u32, ppConnector: ?*?*IMILBitmapEffectOutputConnector) callconv(.Inline) HRESULT {
        return self.vtable.GetOutputConnector(self, uiIndex, ppConnector);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffect_Value = Guid.initString("8a6ff321-c944-4a1b-9944-9954af301258");
pub const IID_IMILBitmapEffect = &IID_IMILBitmapEffect_Value;
pub const IMILBitmapEffect = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOutput: *const fn(
            self: *const IMILBitmapEffect,
            uiIndex: u32,
            pContext: ?*IMILBitmapEffectRenderContext,
            ppBitmapSource: ?*?*IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParentEffect: *const fn(
            self: *const IMILBitmapEffect,
            ppParentEffect: ?*?*IMILBitmapEffectGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInputSource: *const fn(
            self: *const IMILBitmapEffect,
            uiIndex: u32,
            pBitmapSource: ?*IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetOutput(self: *const IMILBitmapEffect, uiIndex: u32, pContext: ?*IMILBitmapEffectRenderContext, ppBitmapSource: ?*?*IWICBitmapSource) callconv(.Inline) HRESULT {
        return self.vtable.GetOutput(self, uiIndex, pContext, ppBitmapSource);
    }
    pub fn GetParentEffect(self: *const IMILBitmapEffect, ppParentEffect: ?*?*IMILBitmapEffectGroup) callconv(.Inline) HRESULT {
        return self.vtable.GetParentEffect(self, ppParentEffect);
    }
    pub fn SetInputSource(self: *const IMILBitmapEffect, uiIndex: u32, pBitmapSource: ?*IWICBitmapSource) callconv(.Inline) HRESULT {
        return self.vtable.SetInputSource(self, uiIndex, pBitmapSource);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectImpl_Value = Guid.initString("cc2468f2-9936-47be-b4af-06b5df5dbcbb");
pub const IID_IMILBitmapEffectImpl = &IID_IMILBitmapEffectImpl_Value;
pub const IMILBitmapEffectImpl = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsInPlaceModificationAllowed: *const fn(
            self: *const IMILBitmapEffectImpl,
            pOutputConnector: ?*IMILBitmapEffectOutputConnector,
            pfModifyInPlace: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetParentEffect: *const fn(
            self: *const IMILBitmapEffectImpl,
            pParentEffect: ?*IMILBitmapEffectGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInputSource: *const fn(
            self: *const IMILBitmapEffectImpl,
            uiIndex: u32,
            ppBitmapSource: ?*?*IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInputSourceBounds: *const fn(
            self: *const IMILBitmapEffectImpl,
            uiIndex: u32,
            pRect: ?*MilRectD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInputBitmapSource: *const fn(
            self: *const IMILBitmapEffectImpl,
            uiIndex: u32,
            pRenderContext: ?*IMILBitmapEffectRenderContext,
            pfModifyInPlace: ?*i16,
            ppBitmapSource: ?*?*IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputBitmapSource: *const fn(
            self: *const IMILBitmapEffectImpl,
            uiIndex: u32,
            pRenderContext: ?*IMILBitmapEffectRenderContext,
            pfModifyInPlace: ?*i16,
            ppBitmapSource: ?*?*IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: *const fn(
            self: *const IMILBitmapEffectImpl,
            pInner: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn IsInPlaceModificationAllowed(self: *const IMILBitmapEffectImpl, pOutputConnector: ?*IMILBitmapEffectOutputConnector, pfModifyInPlace: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.IsInPlaceModificationAllowed(self, pOutputConnector, pfModifyInPlace);
    }
    pub fn SetParentEffect(self: *const IMILBitmapEffectImpl, pParentEffect: ?*IMILBitmapEffectGroup) callconv(.Inline) HRESULT {
        return self.vtable.SetParentEffect(self, pParentEffect);
    }
    pub fn GetInputSource(self: *const IMILBitmapEffectImpl, uiIndex: u32, ppBitmapSource: ?*?*IWICBitmapSource) callconv(.Inline) HRESULT {
        return self.vtable.GetInputSource(self, uiIndex, ppBitmapSource);
    }
    pub fn GetInputSourceBounds(self: *const IMILBitmapEffectImpl, uiIndex: u32, pRect: ?*MilRectD) callconv(.Inline) HRESULT {
        return self.vtable.GetInputSourceBounds(self, uiIndex, pRect);
    }
    pub fn GetInputBitmapSource(self: *const IMILBitmapEffectImpl, uiIndex: u32, pRenderContext: ?*IMILBitmapEffectRenderContext, pfModifyInPlace: ?*i16, ppBitmapSource: ?*?*IWICBitmapSource) callconv(.Inline) HRESULT {
        return self.vtable.GetInputBitmapSource(self, uiIndex, pRenderContext, pfModifyInPlace, ppBitmapSource);
    }
    pub fn GetOutputBitmapSource(self: *const IMILBitmapEffectImpl, uiIndex: u32, pRenderContext: ?*IMILBitmapEffectRenderContext, pfModifyInPlace: ?*i16, ppBitmapSource: ?*?*IWICBitmapSource) callconv(.Inline) HRESULT {
        return self.vtable.GetOutputBitmapSource(self, uiIndex, pRenderContext, pfModifyInPlace, ppBitmapSource);
    }
    pub fn Initialize(self: *const IMILBitmapEffectImpl, pInner: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, pInner);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectGroup_Value = Guid.initString("2f952360-698a-4ac6-81a1-bcfdf08eb8e8");
pub const IID_IMILBitmapEffectGroup = &IID_IMILBitmapEffectGroup_Value;
pub const IMILBitmapEffectGroup = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInteriorInputConnector: *const fn(
            self: *const IMILBitmapEffectGroup,
            uiIndex: u32,
            ppConnector: ?*?*IMILBitmapEffectOutputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInteriorOutputConnector: *const fn(
            self: *const IMILBitmapEffectGroup,
            uiIndex: u32,
            ppConnector: ?*?*IMILBitmapEffectInputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const IMILBitmapEffectGroup,
            pEffect: ?*IMILBitmapEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetInteriorInputConnector(self: *const IMILBitmapEffectGroup, uiIndex: u32, ppConnector: ?*?*IMILBitmapEffectOutputConnector) callconv(.Inline) HRESULT {
        return self.vtable.GetInteriorInputConnector(self, uiIndex, ppConnector);
    }
    pub fn GetInteriorOutputConnector(self: *const IMILBitmapEffectGroup, uiIndex: u32, ppConnector: ?*?*IMILBitmapEffectInputConnector) callconv(.Inline) HRESULT {
        return self.vtable.GetInteriorOutputConnector(self, uiIndex, ppConnector);
    }
    pub fn Add(self: *const IMILBitmapEffectGroup, pEffect: ?*IMILBitmapEffect) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, pEffect);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectGroupImpl_Value = Guid.initString("78fed518-1cfc-4807-8b85-6b6e51398f62");
pub const IID_IMILBitmapEffectGroupImpl = &IID_IMILBitmapEffectGroupImpl_Value;
pub const IMILBitmapEffectGroupImpl = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Preprocess: *const fn(
            self: *const IMILBitmapEffectGroupImpl,
            pContext: ?*IMILBitmapEffectRenderContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumberChildren: *const fn(
            self: *const IMILBitmapEffectGroupImpl,
            puiNumberChildren: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChildren: *const fn(
            self: *const IMILBitmapEffectGroupImpl,
            pChildren: ?*?*IMILBitmapEffects,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Preprocess(self: *const IMILBitmapEffectGroupImpl, pContext: ?*IMILBitmapEffectRenderContext) callconv(.Inline) HRESULT {
        return self.vtable.Preprocess(self, pContext);
    }
    pub fn GetNumberChildren(self: *const IMILBitmapEffectGroupImpl, puiNumberChildren: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetNumberChildren(self, puiNumberChildren);
    }
    pub fn GetChildren(self: *const IMILBitmapEffectGroupImpl, pChildren: ?*?*IMILBitmapEffects) callconv(.Inline) HRESULT {
        return self.vtable.GetChildren(self, pChildren);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectRenderContext_Value = Guid.initString("12a2ec7e-2d33-44b2-b334-1abb7846e390");
pub const IID_IMILBitmapEffectRenderContext = &IID_IMILBitmapEffectRenderContext_Value;
pub const IMILBitmapEffectRenderContext = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetOutputPixelFormat: *const fn(
            self: *const IMILBitmapEffectRenderContext,
            format: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputPixelFormat: *const fn(
            self: *const IMILBitmapEffectRenderContext,
            pFormat: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUseSoftwareRenderer: *const fn(
            self: *const IMILBitmapEffectRenderContext,
            fSoftware: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInitialTransform: *const fn(
            self: *const IMILBitmapEffectRenderContext,
            pMatrix: ?*MILMatrixF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFinalTransform: *const fn(
            self: *const IMILBitmapEffectRenderContext,
            pMatrix: ?*MILMatrixF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOutputDPI: *const fn(
            self: *const IMILBitmapEffectRenderContext,
            dblDpiX: f64,
            dblDpiY: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputDPI: *const fn(
            self: *const IMILBitmapEffectRenderContext,
            pdblDpiX: ?*f64,
            pdblDpiY: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRegionOfInterest: *const fn(
            self: *const IMILBitmapEffectRenderContext,
            pRect: ?*MilRectD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetOutputPixelFormat(self: *const IMILBitmapEffectRenderContext, format: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.SetOutputPixelFormat(self, format);
    }
    pub fn GetOutputPixelFormat(self: *const IMILBitmapEffectRenderContext, pFormat: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetOutputPixelFormat(self, pFormat);
    }
    pub fn SetUseSoftwareRenderer(self: *const IMILBitmapEffectRenderContext, fSoftware: i16) callconv(.Inline) HRESULT {
        return self.vtable.SetUseSoftwareRenderer(self, fSoftware);
    }
    pub fn SetInitialTransform(self: *const IMILBitmapEffectRenderContext, pMatrix: ?*MILMatrixF) callconv(.Inline) HRESULT {
        return self.vtable.SetInitialTransform(self, pMatrix);
    }
    pub fn GetFinalTransform(self: *const IMILBitmapEffectRenderContext, pMatrix: ?*MILMatrixF) callconv(.Inline) HRESULT {
        return self.vtable.GetFinalTransform(self, pMatrix);
    }
    pub fn SetOutputDPI(self: *const IMILBitmapEffectRenderContext, dblDpiX: f64, dblDpiY: f64) callconv(.Inline) HRESULT {
        return self.vtable.SetOutputDPI(self, dblDpiX, dblDpiY);
    }
    pub fn GetOutputDPI(self: *const IMILBitmapEffectRenderContext, pdblDpiX: ?*f64, pdblDpiY: ?*f64) callconv(.Inline) HRESULT {
        return self.vtable.GetOutputDPI(self, pdblDpiX, pdblDpiY);
    }
    pub fn SetRegionOfInterest(self: *const IMILBitmapEffectRenderContext, pRect: ?*MilRectD) callconv(.Inline) HRESULT {
        return self.vtable.SetRegionOfInterest(self, pRect);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectRenderContextImpl_Value = Guid.initString("4d25accb-797d-4fd2-b128-dffeff84fcc3");
pub const IID_IMILBitmapEffectRenderContextImpl = &IID_IMILBitmapEffectRenderContextImpl_Value;
pub const IMILBitmapEffectRenderContextImpl = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetUseSoftwareRenderer: *const fn(
            self: *const IMILBitmapEffectRenderContextImpl,
            pfSoftware: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransform: *const fn(
            self: *const IMILBitmapEffectRenderContextImpl,
            pMatrix: ?*MILMatrixF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateTransform: *const fn(
            self: *const IMILBitmapEffectRenderContextImpl,
            pMatrix: ?*MILMatrixF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputBounds: *const fn(
            self: *const IMILBitmapEffectRenderContextImpl,
            pRect: ?*MilRectD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateOutputBounds: *const fn(
            self: *const IMILBitmapEffectRenderContextImpl,
            pRect: ?*MilRectD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetUseSoftwareRenderer(self: *const IMILBitmapEffectRenderContextImpl, pfSoftware: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.GetUseSoftwareRenderer(self, pfSoftware);
    }
    pub fn GetTransform(self: *const IMILBitmapEffectRenderContextImpl, pMatrix: ?*MILMatrixF) callconv(.Inline) HRESULT {
        return self.vtable.GetTransform(self, pMatrix);
    }
    pub fn UpdateTransform(self: *const IMILBitmapEffectRenderContextImpl, pMatrix: ?*MILMatrixF) callconv(.Inline) HRESULT {
        return self.vtable.UpdateTransform(self, pMatrix);
    }
    pub fn GetOutputBounds(self: *const IMILBitmapEffectRenderContextImpl, pRect: ?*MilRectD) callconv(.Inline) HRESULT {
        return self.vtable.GetOutputBounds(self, pRect);
    }
    pub fn UpdateOutputBounds(self: *const IMILBitmapEffectRenderContextImpl, pRect: ?*MilRectD) callconv(.Inline) HRESULT {
        return self.vtable.UpdateOutputBounds(self, pRect);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectFactory_Value = Guid.initString("33a9df34-a403-4ec7-b07e-bc0682370845");
pub const IID_IMILBitmapEffectFactory = &IID_IMILBitmapEffectFactory_Value;
pub const IMILBitmapEffectFactory = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateEffect: *const fn(
            self: *const IMILBitmapEffectFactory,
            pguidEffect: ?*const Guid,
            ppEffect: ?*?*IMILBitmapEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateContext: *const fn(
            self: *const IMILBitmapEffectFactory,
            ppContext: ?*?*IMILBitmapEffectRenderContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEffectOuter: *const fn(
            self: *const IMILBitmapEffectFactory,
            ppEffect: ?*?*IMILBitmapEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateEffect(self: *const IMILBitmapEffectFactory, pguidEffect: ?*const Guid, ppEffect: ?*?*IMILBitmapEffect) callconv(.Inline) HRESULT {
        return self.vtable.CreateEffect(self, pguidEffect, ppEffect);
    }
    pub fn CreateContext(self: *const IMILBitmapEffectFactory, ppContext: ?*?*IMILBitmapEffectRenderContext) callconv(.Inline) HRESULT {
        return self.vtable.CreateContext(self, ppContext);
    }
    pub fn CreateEffectOuter(self: *const IMILBitmapEffectFactory, ppEffect: ?*?*IMILBitmapEffect) callconv(.Inline) HRESULT {
        return self.vtable.CreateEffectOuter(self, ppEffect);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectPrimitive_Value = Guid.initString("67e31025-3091-4dfc-98d6-dd494551461d");
pub const IID_IMILBitmapEffectPrimitive = &IID_IMILBitmapEffectPrimitive_Value;
pub const IMILBitmapEffectPrimitive = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOutput: *const fn(
            self: *const IMILBitmapEffectPrimitive,
            uiIndex: u32,
            pContext: ?*IMILBitmapEffectRenderContext,
            pfModifyInPlace: ?*i16,
            ppBitmapSource: ?*?*IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TransformPoint: *const fn(
            self: *const IMILBitmapEffectPrimitive,
            uiIndex: u32,
            p: ?*MilPoint2D,
            fForwardTransform: i16,
            pContext: ?*IMILBitmapEffectRenderContext,
            pfPointTransformed: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TransformRect: *const fn(
            self: *const IMILBitmapEffectPrimitive,
            uiIndex: u32,
            p: ?*MilRectD,
            fForwardTransform: i16,
            pContext: ?*IMILBitmapEffectRenderContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasAffineTransform: *const fn(
            self: *const IMILBitmapEffectPrimitive,
            uiIndex: u32,
            pfAffine: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasInverseTransform: *const fn(
            self: *const IMILBitmapEffectPrimitive,
            uiIndex: u32,
            pfHasInverse: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAffineMatrix: *const fn(
            self: *const IMILBitmapEffectPrimitive,
            uiIndex: u32,
            pMatrix: ?*MilMatrix3x2D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetOutput(self: *const IMILBitmapEffectPrimitive, uiIndex: u32, pContext: ?*IMILBitmapEffectRenderContext, pfModifyInPlace: ?*i16, ppBitmapSource: ?*?*IWICBitmapSource) callconv(.Inline) HRESULT {
        return self.vtable.GetOutput(self, uiIndex, pContext, pfModifyInPlace, ppBitmapSource);
    }
    pub fn TransformPoint(self: *const IMILBitmapEffectPrimitive, uiIndex: u32, p: ?*MilPoint2D, fForwardTransform: i16, pContext: ?*IMILBitmapEffectRenderContext, pfPointTransformed: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.TransformPoint(self, uiIndex, p, fForwardTransform, pContext, pfPointTransformed);
    }
    pub fn TransformRect(self: *const IMILBitmapEffectPrimitive, uiIndex: u32, p: ?*MilRectD, fForwardTransform: i16, pContext: ?*IMILBitmapEffectRenderContext) callconv(.Inline) HRESULT {
        return self.vtable.TransformRect(self, uiIndex, p, fForwardTransform, pContext);
    }
    pub fn HasAffineTransform(self: *const IMILBitmapEffectPrimitive, uiIndex: u32, pfAffine: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.HasAffineTransform(self, uiIndex, pfAffine);
    }
    pub fn HasInverseTransform(self: *const IMILBitmapEffectPrimitive, uiIndex: u32, pfHasInverse: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.HasInverseTransform(self, uiIndex, pfHasInverse);
    }
    pub fn GetAffineMatrix(self: *const IMILBitmapEffectPrimitive, uiIndex: u32, pMatrix: ?*MilMatrix3x2D) callconv(.Inline) HRESULT {
        return self.vtable.GetAffineMatrix(self, uiIndex, pMatrix);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectPrimitiveImpl_Value = Guid.initString("ce41e00b-efa6-44e7-b007-dd042e3ae126");
pub const IID_IMILBitmapEffectPrimitiveImpl = &IID_IMILBitmapEffectPrimitiveImpl_Value;
pub const IMILBitmapEffectPrimitiveImpl = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsDirty: *const fn(
            self: *const IMILBitmapEffectPrimitiveImpl,
            uiOutputIndex: u32,
            pfDirty: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsVolatile: *const fn(
            self: *const IMILBitmapEffectPrimitiveImpl,
            uiOutputIndex: u32,
            pfVolatile: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn IsDirty(self: *const IMILBitmapEffectPrimitiveImpl, uiOutputIndex: u32, pfDirty: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.IsDirty(self, uiOutputIndex, pfDirty);
    }
    pub fn IsVolatile(self: *const IMILBitmapEffectPrimitiveImpl, uiOutputIndex: u32, pfVolatile: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.IsVolatile(self, uiOutputIndex, pfVolatile);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffects_Value = Guid.initString("51ac3dce-67c5-448b-9180-ad3eabddd5dd");
pub const IID_IMILBitmapEffects = &IID_IMILBitmapEffects_Value;
pub const IMILBitmapEffects = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        _NewEnum: *const fn(
            self: *const IMILBitmapEffects,
            ppiuReturn: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parent: *const fn(
            self: *const IMILBitmapEffects,
            ppEffect: ?*?*IMILBitmapEffectGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn(
            self: *const IMILBitmapEffects,
            uindex: u32,
            ppEffect: ?*?*IMILBitmapEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IMILBitmapEffects,
            puiCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn _NewEnum(self: *const IMILBitmapEffects, ppiuReturn: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable._NewEnum(self, ppiuReturn);
    }
    pub fn get_Parent(self: *const IMILBitmapEffects, ppEffect: ?*?*IMILBitmapEffectGroup) callconv(.Inline) HRESULT {
        return self.vtable.get_Parent(self, ppEffect);
    }
    pub fn Item(self: *const IMILBitmapEffects, uindex: u32, ppEffect: ?*?*IMILBitmapEffect) callconv(.Inline) HRESULT {
        return self.vtable.Item(self, uindex, ppEffect);
    }
    pub fn get_Count(self: *const IMILBitmapEffects, puiCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, puiCount);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectConnector_Value = Guid.initString("f59567b3-76c1-4d47-ba1e-79f955e350ef");
pub const IID_IMILBitmapEffectConnector = &IID_IMILBitmapEffectConnector_Value;
pub const IMILBitmapEffectConnector = extern union {
    pub const VTable = extern struct {
        base: IMILBitmapEffectConnectorInfo.VTable,
        IsConnected: *const fn(
            self: *const IMILBitmapEffectConnector,
            pfConnected: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBitmapEffect: *const fn(
            self: *const IMILBitmapEffectConnector,
            ppEffect: ?*?*IMILBitmapEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IMILBitmapEffectConnectorInfo: IMILBitmapEffectConnectorInfo,
    IUnknown: IUnknown,
    pub fn IsConnected(self: *const IMILBitmapEffectConnector, pfConnected: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.IsConnected(self, pfConnected);
    }
    pub fn GetBitmapEffect(self: *const IMILBitmapEffectConnector, ppEffect: ?*?*IMILBitmapEffect) callconv(.Inline) HRESULT {
        return self.vtable.GetBitmapEffect(self, ppEffect);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectInputConnector_Value = Guid.initString("a9b4ecaa-7a3c-45e7-8573-f4b81b60dd6c");
pub const IID_IMILBitmapEffectInputConnector = &IID_IMILBitmapEffectInputConnector_Value;
pub const IMILBitmapEffectInputConnector = extern union {
    pub const VTable = extern struct {
        base: IMILBitmapEffectConnector.VTable,
        ConnectTo: *const fn(
            self: *const IMILBitmapEffectInputConnector,
            pConnector: ?*IMILBitmapEffectOutputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnection: *const fn(
            self: *const IMILBitmapEffectInputConnector,
            ppConnector: ?*?*IMILBitmapEffectOutputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IMILBitmapEffectConnector: IMILBitmapEffectConnector,
    IMILBitmapEffectConnectorInfo: IMILBitmapEffectConnectorInfo,
    IUnknown: IUnknown,
    pub fn ConnectTo(self: *const IMILBitmapEffectInputConnector, pConnector: ?*IMILBitmapEffectOutputConnector) callconv(.Inline) HRESULT {
        return self.vtable.ConnectTo(self, pConnector);
    }
    pub fn GetConnection(self: *const IMILBitmapEffectInputConnector, ppConnector: ?*?*IMILBitmapEffectOutputConnector) callconv(.Inline) HRESULT {
        return self.vtable.GetConnection(self, ppConnector);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectOutputConnector_Value = Guid.initString("92957aad-841b-4866-82ec-8752468b07fd");
pub const IID_IMILBitmapEffectOutputConnector = &IID_IMILBitmapEffectOutputConnector_Value;
pub const IMILBitmapEffectOutputConnector = extern union {
    pub const VTable = extern struct {
        base: IMILBitmapEffectConnector.VTable,
        GetNumberConnections: *const fn(
            self: *const IMILBitmapEffectOutputConnector,
            puiNumberConnections: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnection: *const fn(
            self: *const IMILBitmapEffectOutputConnector,
            uiIndex: u32,
            ppConnection: ?*?*IMILBitmapEffectInputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IMILBitmapEffectConnector: IMILBitmapEffectConnector,
    IMILBitmapEffectConnectorInfo: IMILBitmapEffectConnectorInfo,
    IUnknown: IUnknown,
    pub fn GetNumberConnections(self: *const IMILBitmapEffectOutputConnector, puiNumberConnections: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetNumberConnections(self, puiNumberConnections);
    }
    pub fn GetConnection(self: *const IMILBitmapEffectOutputConnector, uiIndex: u32, ppConnection: ?*?*IMILBitmapEffectInputConnector) callconv(.Inline) HRESULT {
        return self.vtable.GetConnection(self, uiIndex, ppConnection);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectOutputConnectorImpl_Value = Guid.initString("21fae777-8b39-4bfa-9f2d-f3941ed36913");
pub const IID_IMILBitmapEffectOutputConnectorImpl = &IID_IMILBitmapEffectOutputConnectorImpl_Value;
pub const IMILBitmapEffectOutputConnectorImpl = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddBackLink: *const fn(
            self: *const IMILBitmapEffectOutputConnectorImpl,
            pConnection: ?*IMILBitmapEffectInputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveBackLink: *const fn(
            self: *const IMILBitmapEffectOutputConnectorImpl,
            pConnection: ?*IMILBitmapEffectInputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn AddBackLink(self: *const IMILBitmapEffectOutputConnectorImpl, pConnection: ?*IMILBitmapEffectInputConnector) callconv(.Inline) HRESULT {
        return self.vtable.AddBackLink(self, pConnection);
    }
    pub fn RemoveBackLink(self: *const IMILBitmapEffectOutputConnectorImpl, pConnection: ?*IMILBitmapEffectInputConnector) callconv(.Inline) HRESULT {
        return self.vtable.RemoveBackLink(self, pConnection);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectInteriorInputConnector_Value = Guid.initString("20287e9e-86a2-4e15-953d-eb1438a5b842");
pub const IID_IMILBitmapEffectInteriorInputConnector = &IID_IMILBitmapEffectInteriorInputConnector_Value;
pub const IMILBitmapEffectInteriorInputConnector = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInputConnector: *const fn(
            self: *const IMILBitmapEffectInteriorInputConnector,
            pInputConnector: ?*?*IMILBitmapEffectInputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetInputConnector(self: *const IMILBitmapEffectInteriorInputConnector, pInputConnector: ?*?*IMILBitmapEffectInputConnector) callconv(.Inline) HRESULT {
        return self.vtable.GetInputConnector(self, pInputConnector);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectInteriorOutputConnector_Value = Guid.initString("00bbb6dc-acc9-4bfc-b344-8bee383dfefa");
pub const IID_IMILBitmapEffectInteriorOutputConnector = &IID_IMILBitmapEffectInteriorOutputConnector_Value;
pub const IMILBitmapEffectInteriorOutputConnector = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOutputConnector: *const fn(
            self: *const IMILBitmapEffectInteriorOutputConnector,
            pOutputConnector: ?*?*IMILBitmapEffectOutputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetOutputConnector(self: *const IMILBitmapEffectInteriorOutputConnector, pOutputConnector: ?*?*IMILBitmapEffectOutputConnector) callconv(.Inline) HRESULT {
        return self.vtable.GetOutputConnector(self, pOutputConnector);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectEvents_Value = Guid.initString("2e880dd8-f8ce-457b-8199-d60bb3d7ef98");
pub const IID_IMILBitmapEffectEvents = &IID_IMILBitmapEffectEvents_Value;
pub const IMILBitmapEffectEvents = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PropertyChange: *const fn(
            self: *const IMILBitmapEffectEvents,
            pEffect: ?*IMILBitmapEffect,
            bstrPropertyName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DirtyRegion: *const fn(
            self: *const IMILBitmapEffectEvents,
            pEffect: ?*IMILBitmapEffect,
            pRect: ?*MilRectD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn PropertyChange(self: *const IMILBitmapEffectEvents, pEffect: ?*IMILBitmapEffect, bstrPropertyName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.PropertyChange(self, pEffect, bstrPropertyName);
    }
    pub fn DirtyRegion(self: *const IMILBitmapEffectEvents, pEffect: ?*IMILBitmapEffect, pRect: ?*MilRectD) callconv(.Inline) HRESULT {
        return self.vtable.DirtyRegion(self, pEffect, pRect);
    }
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (6)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BSTR = @import("../foundation.zig").BSTR;
const HRESULT = @import("../foundation.zig").HRESULT;
const IUnknown = @import("../system/com.zig").IUnknown;
const IWICBitmapSource = @import("../graphics/imaging.zig").IWICBitmapSource;
const MilMatrix3x2D = @import("../graphics/dwm.zig").MilMatrix3x2D;

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
