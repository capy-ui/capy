//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (1)
//--------------------------------------------------------------------------------
pub const E_UNKNOWNTYPE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2144665560));

//--------------------------------------------------------------------------------
// Section: Types (21)
//--------------------------------------------------------------------------------
pub const VisualMutationType = enum(i32) {
    Add = 0,
    Remove = 1,
};
pub const Add = VisualMutationType.Add;
pub const Remove = VisualMutationType.Remove;

pub const BaseValueSource = enum(i32) {
    BaseValueSourceUnknown = 0,
    BaseValueSourceDefault = 1,
    BaseValueSourceBuiltInStyle = 2,
    BaseValueSourceStyle = 3,
    BaseValueSourceLocal = 4,
    Inherited = 5,
    DefaultStyleTrigger = 6,
    TemplateTrigger = 7,
    StyleTrigger = 8,
    ImplicitStyleReference = 9,
    ParentTemplate = 10,
    ParentTemplateTrigger = 11,
    Animation = 12,
    Coercion = 13,
    BaseValueSourceVisualState = 14,
};
pub const BaseValueSourceUnknown = BaseValueSource.BaseValueSourceUnknown;
pub const BaseValueSourceDefault = BaseValueSource.BaseValueSourceDefault;
pub const BaseValueSourceBuiltInStyle = BaseValueSource.BaseValueSourceBuiltInStyle;
pub const BaseValueSourceStyle = BaseValueSource.BaseValueSourceStyle;
pub const BaseValueSourceLocal = BaseValueSource.BaseValueSourceLocal;
pub const Inherited = BaseValueSource.Inherited;
pub const DefaultStyleTrigger = BaseValueSource.DefaultStyleTrigger;
pub const TemplateTrigger = BaseValueSource.TemplateTrigger;
pub const StyleTrigger = BaseValueSource.StyleTrigger;
pub const ImplicitStyleReference = BaseValueSource.ImplicitStyleReference;
pub const ParentTemplate = BaseValueSource.ParentTemplate;
pub const ParentTemplateTrigger = BaseValueSource.ParentTemplateTrigger;
pub const Animation = BaseValueSource.Animation;
pub const Coercion = BaseValueSource.Coercion;
pub const BaseValueSourceVisualState = BaseValueSource.BaseValueSourceVisualState;

pub const SourceInfo = extern struct {
    FileName: ?BSTR,
    LineNumber: u32,
    ColumnNumber: u32,
    CharPosition: u32,
    Hash: ?BSTR,
};

pub const ParentChildRelation = extern struct {
    Parent: u64,
    Child: u64,
    ChildIndex: u32,
};

pub const VisualElement = extern struct {
    Handle: u64,
    SrcInfo: SourceInfo,
    Type: ?BSTR,
    Name: ?BSTR,
    NumChildren: u32,
};

pub const PropertyChainSource = extern struct {
    Handle: u64,
    TargetType: ?BSTR,
    Name: ?BSTR,
    Source: BaseValueSource,
    SrcInfo: SourceInfo,
};

pub const MetadataBit = enum(i32) {
    None = 0,
    ValueHandle = 1,
    PropertyReadOnly = 2,
    ValueCollection = 4,
    ValueCollectionReadOnly = 8,
    ValueBindingExpression = 16,
    ValueNull = 32,
    ValueHandleAndEvaluatedValue = 64,
};
// NOTE: not creating aliases because this enum is 'Scoped'

pub const PropertyChainValue = extern struct {
    Index: u32,
    Type: ?BSTR,
    DeclaringType: ?BSTR,
    ValueType: ?BSTR,
    ItemType: ?BSTR,
    Value: ?BSTR,
    Overridden: BOOL,
    MetadataBits: i64,
    PropertyName: ?BSTR,
    PropertyChainIndex: u32,
};

pub const EnumType = extern struct {
    Name: ?BSTR,
    ValueInts: ?*SAFEARRAY,
    ValueStrings: ?*SAFEARRAY,
};

pub const CollectionElementValue = extern struct {
    Index: u32,
    ValueType: ?BSTR,
    Value: ?BSTR,
    MetadataBits: i64,
};

pub const RenderTargetBitmapOptions = enum(i32) {
    t = 0,
    AndChildren = 1,
};
pub const RenderTarget = RenderTargetBitmapOptions.t;
pub const RenderTargetAndChildren = RenderTargetBitmapOptions.AndChildren;

pub const BitmapDescription = extern struct {
    Width: u32,
    Height: u32,
    Format: DXGI_FORMAT,
    AlphaMode: DXGI_ALPHA_MODE,
};

pub const ResourceType = enum(i32) {
    Static = 0,
    Theme = 1,
};
pub const ResourceTypeStatic = ResourceType.Static;
pub const ResourceTypeTheme = ResourceType.Theme;

pub const VisualElementState = enum(i32) {
    Resolved = 0,
    ResourceNotFound = 1,
    InvalidResource = 2,
};
pub const ErrorResolved = VisualElementState.Resolved;
pub const ErrorResourceNotFound = VisualElementState.ResourceNotFound;
pub const ErrorInvalidResource = VisualElementState.InvalidResource;

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IVisualTreeServiceCallback_Value = Guid.initString("aa7a8931-80e4-4fec-8f3b-553f87b4966e");
pub const IID_IVisualTreeServiceCallback = &IID_IVisualTreeServiceCallback_Value;
pub const IVisualTreeServiceCallback = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnVisualTreeChange: *const fn(
            self: *const IVisualTreeServiceCallback,
            relation: ParentChildRelation,
            element: VisualElement,
            mutationType: VisualMutationType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnVisualTreeChange(self: *const IVisualTreeServiceCallback, relation: ParentChildRelation, element: VisualElement, mutationType: VisualMutationType) callconv(.Inline) HRESULT {
        return self.vtable.OnVisualTreeChange(self, relation, element, mutationType);
    }
};

// TODO: this type is limited to platform 'windows10.0.14393'
const IID_IVisualTreeServiceCallback2_Value = Guid.initString("bad9eb88-ae77-4397-b948-5fa2db0a19ea");
pub const IID_IVisualTreeServiceCallback2 = &IID_IVisualTreeServiceCallback2_Value;
pub const IVisualTreeServiceCallback2 = extern union {
    pub const VTable = extern struct {
        base: IVisualTreeServiceCallback.VTable,
        OnElementStateChanged: *const fn(
            self: *const IVisualTreeServiceCallback2,
            element: u64,
            elementState: VisualElementState,
            context: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IVisualTreeServiceCallback: IVisualTreeServiceCallback,
    IUnknown: IUnknown,
    pub fn OnElementStateChanged(self: *const IVisualTreeServiceCallback2, element: u64, elementState: VisualElementState, context: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.OnElementStateChanged(self, element, elementState, context);
    }
};

const IID_IVisualTreeService_Value = Guid.initString("a593b11a-d17f-48bb-8f66-83910731c8a5");
pub const IID_IVisualTreeService = &IID_IVisualTreeService_Value;
pub const IVisualTreeService = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AdviseVisualTreeChange: *const fn(
            self: *const IVisualTreeService,
            pCallback: ?*IVisualTreeServiceCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnadviseVisualTreeChange: *const fn(
            self: *const IVisualTreeService,
            pCallback: ?*IVisualTreeServiceCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnums: *const fn(
            self: *const IVisualTreeService,
            pCount: ?*u32,
            ppEnums: [*]?*EnumType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInstance: *const fn(
            self: *const IVisualTreeService,
            typeName: ?BSTR,
            value: ?BSTR,
            pInstanceHandle: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyValuesChain: *const fn(
            self: *const IVisualTreeService,
            instanceHandle: u64,
            pSourceCount: ?*u32,
            ppPropertySources: [*]?*PropertyChainSource,
            pPropertyCount: ?*u32,
            ppPropertyValues: [*]?*PropertyChainValue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn(
            self: *const IVisualTreeService,
            instanceHandle: u64,
            value: u64,
            propertyIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearProperty: *const fn(
            self: *const IVisualTreeService,
            instanceHandle: u64,
            propertyIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCollectionCount: *const fn(
            self: *const IVisualTreeService,
            instanceHandle: u64,
            pCollectionSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCollectionElements: *const fn(
            self: *const IVisualTreeService,
            instanceHandle: u64,
            startIndex: u32,
            pElementCount: ?*u32,
            ppElementValues: [*]?*CollectionElementValue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddChild: *const fn(
            self: *const IVisualTreeService,
            parent: u64,
            child: u64,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveChild: *const fn(
            self: *const IVisualTreeService,
            parent: u64,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearChildren: *const fn(
            self: *const IVisualTreeService,
            parent: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn AdviseVisualTreeChange(self: *const IVisualTreeService, pCallback: ?*IVisualTreeServiceCallback) callconv(.Inline) HRESULT {
        return self.vtable.AdviseVisualTreeChange(self, pCallback);
    }
    pub fn UnadviseVisualTreeChange(self: *const IVisualTreeService, pCallback: ?*IVisualTreeServiceCallback) callconv(.Inline) HRESULT {
        return self.vtable.UnadviseVisualTreeChange(self, pCallback);
    }
    pub fn GetEnums(self: *const IVisualTreeService, pCount: ?*u32, ppEnums: [*]?*EnumType) callconv(.Inline) HRESULT {
        return self.vtable.GetEnums(self, pCount, ppEnums);
    }
    pub fn CreateInstance(self: *const IVisualTreeService, typeName: ?BSTR, value: ?BSTR, pInstanceHandle: ?*u64) callconv(.Inline) HRESULT {
        return self.vtable.CreateInstance(self, typeName, value, pInstanceHandle);
    }
    pub fn GetPropertyValuesChain(self: *const IVisualTreeService, instanceHandle: u64, pSourceCount: ?*u32, ppPropertySources: [*]?*PropertyChainSource, pPropertyCount: ?*u32, ppPropertyValues: [*]?*PropertyChainValue) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyValuesChain(self, instanceHandle, pSourceCount, ppPropertySources, pPropertyCount, ppPropertyValues);
    }
    pub fn SetProperty(self: *const IVisualTreeService, instanceHandle: u64, value: u64, propertyIndex: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetProperty(self, instanceHandle, value, propertyIndex);
    }
    pub fn ClearProperty(self: *const IVisualTreeService, instanceHandle: u64, propertyIndex: u32) callconv(.Inline) HRESULT {
        return self.vtable.ClearProperty(self, instanceHandle, propertyIndex);
    }
    pub fn GetCollectionCount(self: *const IVisualTreeService, instanceHandle: u64, pCollectionSize: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCollectionCount(self, instanceHandle, pCollectionSize);
    }
    pub fn GetCollectionElements(self: *const IVisualTreeService, instanceHandle: u64, startIndex: u32, pElementCount: ?*u32, ppElementValues: [*]?*CollectionElementValue) callconv(.Inline) HRESULT {
        return self.vtable.GetCollectionElements(self, instanceHandle, startIndex, pElementCount, ppElementValues);
    }
    pub fn AddChild(self: *const IVisualTreeService, parent: u64, child: u64, index: u32) callconv(.Inline) HRESULT {
        return self.vtable.AddChild(self, parent, child, index);
    }
    pub fn RemoveChild(self: *const IVisualTreeService, parent: u64, index: u32) callconv(.Inline) HRESULT {
        return self.vtable.RemoveChild(self, parent, index);
    }
    pub fn ClearChildren(self: *const IVisualTreeService, parent: u64) callconv(.Inline) HRESULT {
        return self.vtable.ClearChildren(self, parent);
    }
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IXamlDiagnostics_Value = Guid.initString("18c9e2b6-3f43-4116-9f2b-ff935d7770d2");
pub const IID_IXamlDiagnostics = &IID_IXamlDiagnostics_Value;
pub const IXamlDiagnostics = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDispatcher: *const fn(
            self: *const IXamlDiagnostics,
            ppDispatcher: ?*?*IInspectable,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUiLayer: *const fn(
            self: *const IXamlDiagnostics,
            ppLayer: ?*?*IInspectable,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplication: *const fn(
            self: *const IXamlDiagnostics,
            ppApplication: ?*?*IInspectable,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIInspectableFromHandle: *const fn(
            self: *const IXamlDiagnostics,
            instanceHandle: u64,
            ppInstance: ?*?*IInspectable,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHandleFromIInspectable: *const fn(
            self: *const IXamlDiagnostics,
            pInstance: ?*IInspectable,
            pHandle: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HitTest: *const fn(
            self: *const IXamlDiagnostics,
            rect: RECT,
            pCount: ?*u32,
            ppInstanceHandles: [*]?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterInstance: *const fn(
            self: *const IXamlDiagnostics,
            pInstance: ?*IInspectable,
            pInstanceHandle: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInitializationData: *const fn(
            self: *const IXamlDiagnostics,
            pInitializationData: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetDispatcher(self: *const IXamlDiagnostics, ppDispatcher: ?*?*IInspectable) callconv(.Inline) HRESULT {
        return self.vtable.GetDispatcher(self, ppDispatcher);
    }
    pub fn GetUiLayer(self: *const IXamlDiagnostics, ppLayer: ?*?*IInspectable) callconv(.Inline) HRESULT {
        return self.vtable.GetUiLayer(self, ppLayer);
    }
    pub fn GetApplication(self: *const IXamlDiagnostics, ppApplication: ?*?*IInspectable) callconv(.Inline) HRESULT {
        return self.vtable.GetApplication(self, ppApplication);
    }
    pub fn GetIInspectableFromHandle(self: *const IXamlDiagnostics, instanceHandle: u64, ppInstance: ?*?*IInspectable) callconv(.Inline) HRESULT {
        return self.vtable.GetIInspectableFromHandle(self, instanceHandle, ppInstance);
    }
    pub fn GetHandleFromIInspectable(self: *const IXamlDiagnostics, pInstance: ?*IInspectable, pHandle: ?*u64) callconv(.Inline) HRESULT {
        return self.vtable.GetHandleFromIInspectable(self, pInstance, pHandle);
    }
    pub fn HitTest(self: *const IXamlDiagnostics, rect: RECT, pCount: ?*u32, ppInstanceHandles: [*]?*u64) callconv(.Inline) HRESULT {
        return self.vtable.HitTest(self, rect, pCount, ppInstanceHandles);
    }
    pub fn RegisterInstance(self: *const IXamlDiagnostics, pInstance: ?*IInspectable, pInstanceHandle: ?*u64) callconv(.Inline) HRESULT {
        return self.vtable.RegisterInstance(self, pInstance, pInstanceHandle);
    }
    pub fn GetInitializationData(self: *const IXamlDiagnostics, pInitializationData: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetInitializationData(self, pInitializationData);
    }
};

// TODO: this type is limited to platform 'windows10.0.14393'
const IID_IBitmapData_Value = Guid.initString("d1a34ef2-cad8-4635-a3d2-fcda8d3f3caf");
pub const IID_IBitmapData = &IID_IBitmapData_Value;
pub const IBitmapData = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CopyBytesTo: *const fn(
            self: *const IBitmapData,
            sourceOffsetInBytes: u32,
            maxBytesToCopy: u32,
            pvBytes: [*:0]u8,
            numberOfBytesCopied: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStride: *const fn(
            self: *const IBitmapData,
            pStride: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBitmapDescription: *const fn(
            self: *const IBitmapData,
            pBitmapDescription: ?*BitmapDescription,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSourceBitmapDescription: *const fn(
            self: *const IBitmapData,
            pBitmapDescription: ?*BitmapDescription,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CopyBytesTo(self: *const IBitmapData, sourceOffsetInBytes: u32, maxBytesToCopy: u32, pvBytes: [*:0]u8, numberOfBytesCopied: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.CopyBytesTo(self, sourceOffsetInBytes, maxBytesToCopy, pvBytes, numberOfBytesCopied);
    }
    pub fn GetStride(self: *const IBitmapData, pStride: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetStride(self, pStride);
    }
    pub fn GetBitmapDescription(self: *const IBitmapData, pBitmapDescription: ?*BitmapDescription) callconv(.Inline) HRESULT {
        return self.vtable.GetBitmapDescription(self, pBitmapDescription);
    }
    pub fn GetSourceBitmapDescription(self: *const IBitmapData, pBitmapDescription: ?*BitmapDescription) callconv(.Inline) HRESULT {
        return self.vtable.GetSourceBitmapDescription(self, pBitmapDescription);
    }
};

// TODO: this type is limited to platform 'windows10.0.14393'
const IID_IVisualTreeService2_Value = Guid.initString("130f5136-ec43-4f61-89c7-9801a36d2e95");
pub const IID_IVisualTreeService2 = &IID_IVisualTreeService2_Value;
pub const IVisualTreeService2 = extern union {
    pub const VTable = extern struct {
        base: IVisualTreeService.VTable,
        GetPropertyIndex: *const fn(
            self: *const IVisualTreeService2,
            object: u64,
            propertyName: ?[*:0]const u16,
            pPropertyIndex: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn(
            self: *const IVisualTreeService2,
            object: u64,
            propertyIndex: u32,
            pValue: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReplaceResource: *const fn(
            self: *const IVisualTreeService2,
            resourceDictionary: u64,
            key: u64,
            newValue: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RenderTargetBitmap: *const fn(
            self: *const IVisualTreeService2,
            handle: u64,
            options: RenderTargetBitmapOptions,
            maxPixelWidth: u32,
            maxPixelHeight: u32,
            ppBitmapData: ?*?*IBitmapData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IVisualTreeService: IVisualTreeService,
    IUnknown: IUnknown,
    pub fn GetPropertyIndex(self: *const IVisualTreeService2, object: u64, propertyName: ?[*:0]const u16, pPropertyIndex: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyIndex(self, object, propertyName, pPropertyIndex);
    }
    pub fn GetProperty(self: *const IVisualTreeService2, object: u64, propertyIndex: u32, pValue: ?*u64) callconv(.Inline) HRESULT {
        return self.vtable.GetProperty(self, object, propertyIndex, pValue);
    }
    pub fn ReplaceResource(self: *const IVisualTreeService2, resourceDictionary: u64, key: u64, newValue: u64) callconv(.Inline) HRESULT {
        return self.vtable.ReplaceResource(self, resourceDictionary, key, newValue);
    }
    pub fn RenderTargetBitmap(self: *const IVisualTreeService2, handle: u64, options: RenderTargetBitmapOptions, maxPixelWidth: u32, maxPixelHeight: u32, ppBitmapData: ?*?*IBitmapData) callconv(.Inline) HRESULT {
        return self.vtable.RenderTargetBitmap(self, handle, options, maxPixelWidth, maxPixelHeight, ppBitmapData);
    }
};

// TODO: this type is limited to platform 'windows10.0.15063'
const IID_IVisualTreeService3_Value = Guid.initString("0e79c6e0-85a0-4be8-b41a-655cf1fd19bd");
pub const IID_IVisualTreeService3 = &IID_IVisualTreeService3_Value;
pub const IVisualTreeService3 = extern union {
    pub const VTable = extern struct {
        base: IVisualTreeService2.VTable,
        ResolveResource: *const fn(
            self: *const IVisualTreeService3,
            resourceContext: u64,
            resourceName: ?[*:0]const u16,
            resourceType: ResourceType,
            propertyIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDictionaryItem: *const fn(
            self: *const IVisualTreeService3,
            dictionaryHandle: u64,
            resourceName: ?[*:0]const u16,
            resourceIsImplicitStyle: BOOL,
            resourceHandle: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDictionaryItem: *const fn(
            self: *const IVisualTreeService3,
            dictionaryHandle: u64,
            resourceKey: u64,
            resourceHandle: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveDictionaryItem: *const fn(
            self: *const IVisualTreeService3,
            dictionaryHandle: u64,
            resourceKey: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IVisualTreeService2: IVisualTreeService2,
    IVisualTreeService: IVisualTreeService,
    IUnknown: IUnknown,
    pub fn ResolveResource(self: *const IVisualTreeService3, resourceContext: u64, resourceName: ?[*:0]const u16, resourceType: ResourceType, propertyIndex: u32) callconv(.Inline) HRESULT {
        return self.vtable.ResolveResource(self, resourceContext, resourceName, resourceType, propertyIndex);
    }
    pub fn GetDictionaryItem(self: *const IVisualTreeService3, dictionaryHandle: u64, resourceName: ?[*:0]const u16, resourceIsImplicitStyle: BOOL, resourceHandle: ?*u64) callconv(.Inline) HRESULT {
        return self.vtable.GetDictionaryItem(self, dictionaryHandle, resourceName, resourceIsImplicitStyle, resourceHandle);
    }
    pub fn AddDictionaryItem(self: *const IVisualTreeService3, dictionaryHandle: u64, resourceKey: u64, resourceHandle: u64) callconv(.Inline) HRESULT {
        return self.vtable.AddDictionaryItem(self, dictionaryHandle, resourceKey, resourceHandle);
    }
    pub fn RemoveDictionaryItem(self: *const IVisualTreeService3, dictionaryHandle: u64, resourceKey: u64) callconv(.Inline) HRESULT {
        return self.vtable.RemoveDictionaryItem(self, dictionaryHandle, resourceKey);
    }
};


//--------------------------------------------------------------------------------
// Section: Functions (2)
//--------------------------------------------------------------------------------
pub extern "windows.ui.xaml" fn InitializeXamlDiagnostic(
    endPointName: ?[*:0]const u16,
    pid: u32,
    wszDllXamlDiagnostics: ?[*:0]const u16,
    wszTAPDllName: ?[*:0]const u16,
    tapClsid: Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.15063'
pub extern "windows.ui.xaml" fn InitializeXamlDiagnosticsEx(
    endPointName: ?[*:0]const u16,
    pid: u32,
    wszDllXamlDiagnostics: ?[*:0]const u16,
    wszTAPDllName: ?[*:0]const u16,
    tapClsid: Guid,
    wszInitializationData: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (11)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const BOOL = @import("../../foundation.zig").BOOL;
const BSTR = @import("../../foundation.zig").BSTR;
const DXGI_ALPHA_MODE = @import("../../graphics/dxgi/common.zig").DXGI_ALPHA_MODE;
const DXGI_FORMAT = @import("../../graphics/dxgi/common.zig").DXGI_FORMAT;
const HRESULT = @import("../../foundation.zig").HRESULT;
const IInspectable = @import("../../system/win_rt.zig").IInspectable;
const IUnknown = @import("../../system/com.zig").IUnknown;
const PWSTR = @import("../../foundation.zig").PWSTR;
const RECT = @import("../../foundation.zig").RECT;
const SAFEARRAY = @import("../../system/com.zig").SAFEARRAY;

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
