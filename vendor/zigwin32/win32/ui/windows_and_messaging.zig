//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (1403)
//--------------------------------------------------------------------------------
pub const WM_DEVICECHANGE = @as(u32, 537);
pub const BSM_VXDS = @as(u32, 1);
pub const BSM_NETDRIVER = @as(u32, 2);
pub const BSM_INSTALLABLEDRIVERS = @as(u32, 4);
pub const WM_CONTEXTMENU = @as(u32, 123);
pub const WM_UNICHAR = @as(u32, 265);
pub const WM_PRINTCLIENT = @as(u32, 792);
pub const WM_NOTIFY = @as(u32, 78);
pub const RT_CURSOR = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 1));
pub const RT_BITMAP = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 2));
pub const RT_ICON = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 3));
pub const RT_MENU = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 4));
pub const RT_DIALOG = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 5));
pub const RT_FONTDIR = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 7));
pub const RT_FONT = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 8));
pub const RT_ACCELERATOR = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 9));
pub const RT_MESSAGETABLE = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 11));
pub const DIFFERENCE = @as(u32, 11);
pub const RT_VERSION = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 16));
pub const RT_DLGINCLUDE = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 17));
pub const RT_PLUGPLAY = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 19));
pub const RT_VXD = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 20));
pub const RT_ANICURSOR = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 21));
pub const RT_ANIICON = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 22));
pub const RT_HTML = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 23));
pub const RT_MANIFEST = @as(u32, 24);
pub const CREATEPROCESS_MANIFEST_RESOURCE_ID = @as(u32, 1);
pub const ISOLATIONAWARE_MANIFEST_RESOURCE_ID = @as(u32, 2);
pub const ISOLATIONAWARE_NOSTATICIMPORT_MANIFEST_RESOURCE_ID = @as(u32, 3);
pub const ISOLATIONPOLICY_MANIFEST_RESOURCE_ID = @as(u32, 4);
pub const ISOLATIONPOLICY_BROWSER_MANIFEST_RESOURCE_ID = @as(u32, 5);
pub const MINIMUM_RESERVED_MANIFEST_RESOURCE_ID = @as(u32, 1);
pub const MAXIMUM_RESERVED_MANIFEST_RESOURCE_ID = @as(u32, 16);
pub const SB_LINEUP = @as(u32, 0);
pub const SB_LINELEFT = @as(u32, 0);
pub const SB_LINEDOWN = @as(u32, 1);
pub const SB_LINERIGHT = @as(u32, 1);
pub const SB_PAGEUP = @as(u32, 2);
pub const SB_PAGELEFT = @as(u32, 2);
pub const SB_PAGEDOWN = @as(u32, 3);
pub const SB_PAGERIGHT = @as(u32, 3);
pub const SB_THUMBPOSITION = @as(u32, 4);
pub const SB_THUMBTRACK = @as(u32, 5);
pub const SB_TOP = @as(u32, 6);
pub const SB_LEFT = @as(u32, 6);
pub const SB_BOTTOM = @as(u32, 7);
pub const SB_RIGHT = @as(u32, 7);
pub const SB_ENDSCROLL = @as(u32, 8);
pub const HIDE_WINDOW = @as(u32, 0);
pub const SHOW_OPENWINDOW = @as(u32, 1);
pub const SHOW_ICONWINDOW = @as(u32, 2);
pub const SHOW_FULLSCREEN = @as(u32, 3);
pub const SHOW_OPENNOACTIVATE = @as(u32, 4);
pub const KF_EXTENDED = @as(u32, 256);
pub const KF_DLGMODE = @as(u32, 2048);
pub const KF_MENUMODE = @as(u32, 4096);
pub const KF_ALTDOWN = @as(u32, 8192);
pub const KF_REPEAT = @as(u32, 16384);
pub const KF_UP = @as(u32, 32768);
pub const WH_MIN = @as(i32, -1);
pub const WH_HARDWARE = @as(u32, 8);
pub const WH_MAX = @as(u32, 14);
pub const WH_MINHOOK = @as(i32, -1);
pub const WH_MAXHOOK = @as(u32, 14);
pub const HC_ACTION = @as(u32, 0);
pub const HC_GETNEXT = @as(u32, 1);
pub const HC_SKIP = @as(u32, 2);
pub const HC_NOREMOVE = @as(u32, 3);
pub const HC_NOREM = @as(u32, 3);
pub const HC_SYSMODALON = @as(u32, 4);
pub const HC_SYSMODALOFF = @as(u32, 5);
pub const HCBT_MOVESIZE = @as(u32, 0);
pub const HCBT_MINMAX = @as(u32, 1);
pub const HCBT_QS = @as(u32, 2);
pub const HCBT_CREATEWND = @as(u32, 3);
pub const HCBT_DESTROYWND = @as(u32, 4);
pub const HCBT_ACTIVATE = @as(u32, 5);
pub const HCBT_CLICKSKIPPED = @as(u32, 6);
pub const HCBT_KEYSKIPPED = @as(u32, 7);
pub const HCBT_SYSCOMMAND = @as(u32, 8);
pub const HCBT_SETFOCUS = @as(u32, 9);
pub const WTS_CONSOLE_CONNECT = @as(u32, 1);
pub const WTS_CONSOLE_DISCONNECT = @as(u32, 2);
pub const WTS_REMOTE_CONNECT = @as(u32, 3);
pub const WTS_REMOTE_DISCONNECT = @as(u32, 4);
pub const WTS_SESSION_LOGON = @as(u32, 5);
pub const WTS_SESSION_LOGOFF = @as(u32, 6);
pub const WTS_SESSION_LOCK = @as(u32, 7);
pub const WTS_SESSION_UNLOCK = @as(u32, 8);
pub const WTS_SESSION_REMOTE_CONTROL = @as(u32, 9);
pub const WTS_SESSION_CREATE = @as(u32, 10);
pub const WTS_SESSION_TERMINATE = @as(u32, 11);
pub const MSGF_DIALOGBOX = @as(u32, 0);
pub const MSGF_MESSAGEBOX = @as(u32, 1);
pub const MSGF_MENU = @as(u32, 2);
pub const MSGF_SCROLLBAR = @as(u32, 5);
pub const MSGF_NEXTWINDOW = @as(u32, 6);
pub const MSGF_MAX = @as(u32, 8);
pub const MSGF_USER = @as(u32, 4096);
pub const HSHELL_WINDOWCREATED = @as(u32, 1);
pub const HSHELL_WINDOWDESTROYED = @as(u32, 2);
pub const HSHELL_ACTIVATESHELLWINDOW = @as(u32, 3);
pub const HSHELL_WINDOWACTIVATED = @as(u32, 4);
pub const HSHELL_GETMINRECT = @as(u32, 5);
pub const HSHELL_REDRAW = @as(u32, 6);
pub const HSHELL_TASKMAN = @as(u32, 7);
pub const HSHELL_LANGUAGE = @as(u32, 8);
pub const HSHELL_SYSMENU = @as(u32, 9);
pub const HSHELL_ENDTASK = @as(u32, 10);
pub const HSHELL_ACCESSIBILITYSTATE = @as(u32, 11);
pub const HSHELL_APPCOMMAND = @as(u32, 12);
pub const HSHELL_WINDOWREPLACED = @as(u32, 13);
pub const HSHELL_WINDOWREPLACING = @as(u32, 14);
pub const HSHELL_MONITORCHANGED = @as(u32, 16);
pub const HSHELL_HIGHBIT = @as(u32, 32768);
pub const FAPPCOMMAND_MOUSE = @as(u32, 32768);
pub const FAPPCOMMAND_KEY = @as(u32, 0);
pub const FAPPCOMMAND_OEM = @as(u32, 4096);
pub const FAPPCOMMAND_MASK = @as(u32, 61440);
pub const LLMHF_INJECTED = @as(u32, 1);
pub const LLMHF_LOWER_IL_INJECTED = @as(u32, 2);
pub const HKL_PREV = @as(u32, 0);
pub const HKL_NEXT = @as(u32, 1);
pub const INPUTLANGCHANGE_SYSCHARSET = @as(u32, 1);
pub const INPUTLANGCHANGE_FORWARD = @as(u32, 2);
pub const INPUTLANGCHANGE_BACKWARD = @as(u32, 4);
pub const KL_NAMELENGTH = @as(u32, 9);
pub const DESKTOP_READOBJECTS = @as(i32, 1);
pub const DESKTOP_CREATEWINDOW = @as(i32, 2);
pub const DESKTOP_CREATEMENU = @as(i32, 4);
pub const DESKTOP_HOOKCONTROL = @as(i32, 8);
pub const DESKTOP_JOURNALRECORD = @as(i32, 16);
pub const DESKTOP_JOURNALPLAYBACK = @as(i32, 32);
pub const DESKTOP_ENUMERATE = @as(i32, 64);
pub const DESKTOP_WRITEOBJECTS = @as(i32, 128);
pub const DESKTOP_SWITCHDESKTOP = @as(i32, 256);
pub const DF_ALLOWOTHERACCOUNTHOOK = @as(i32, 1);
pub const WINSTA_ENUMDESKTOPS = @as(i32, 1);
pub const WINSTA_READATTRIBUTES = @as(i32, 2);
pub const WINSTA_ACCESSCLIPBOARD = @as(i32, 4);
pub const WINSTA_CREATEDESKTOP = @as(i32, 8);
pub const WINSTA_WRITEATTRIBUTES = @as(i32, 16);
pub const WINSTA_ACCESSGLOBALATOMS = @as(i32, 32);
pub const WINSTA_EXITWINDOWS = @as(i32, 64);
pub const WINSTA_ENUMERATE = @as(i32, 256);
pub const WINSTA_READSCREEN = @as(i32, 512);
pub const CWF_CREATE_ONLY = @as(u32, 1);
pub const WSF_VISIBLE = @as(i32, 1);
pub const UOI_TIMERPROC_EXCEPTION_SUPPRESSION = @as(u32, 7);
pub const WM_NULL = @as(u32, 0);
pub const WM_CREATE = @as(u32, 1);
pub const WM_DESTROY = @as(u32, 2);
pub const WM_MOVE = @as(u32, 3);
pub const WM_SIZE = @as(u32, 5);
pub const WM_ACTIVATE = @as(u32, 6);
pub const WA_INACTIVE = @as(u32, 0);
pub const WA_ACTIVE = @as(u32, 1);
pub const WA_CLICKACTIVE = @as(u32, 2);
pub const WM_SETFOCUS = @as(u32, 7);
pub const WM_KILLFOCUS = @as(u32, 8);
pub const WM_ENABLE = @as(u32, 10);
pub const WM_SETREDRAW = @as(u32, 11);
pub const WM_SETTEXT = @as(u32, 12);
pub const WM_GETTEXT = @as(u32, 13);
pub const WM_GETTEXTLENGTH = @as(u32, 14);
pub const WM_PAINT = @as(u32, 15);
pub const WM_CLOSE = @as(u32, 16);
pub const WM_QUERYENDSESSION = @as(u32, 17);
pub const WM_QUERYOPEN = @as(u32, 19);
pub const WM_ENDSESSION = @as(u32, 22);
pub const WM_QUIT = @as(u32, 18);
pub const WM_ERASEBKGND = @as(u32, 20);
pub const WM_SYSCOLORCHANGE = @as(u32, 21);
pub const WM_SHOWWINDOW = @as(u32, 24);
pub const WM_WININICHANGE = @as(u32, 26);
pub const WM_SETTINGCHANGE = @as(u32, 26);
pub const WM_DEVMODECHANGE = @as(u32, 27);
pub const WM_ACTIVATEAPP = @as(u32, 28);
pub const WM_FONTCHANGE = @as(u32, 29);
pub const WM_TIMECHANGE = @as(u32, 30);
pub const WM_CANCELMODE = @as(u32, 31);
pub const WM_SETCURSOR = @as(u32, 32);
pub const WM_MOUSEACTIVATE = @as(u32, 33);
pub const WM_CHILDACTIVATE = @as(u32, 34);
pub const WM_QUEUESYNC = @as(u32, 35);
pub const WM_GETMINMAXINFO = @as(u32, 36);
pub const WM_PAINTICON = @as(u32, 38);
pub const WM_ICONERASEBKGND = @as(u32, 39);
pub const WM_NEXTDLGCTL = @as(u32, 40);
pub const WM_SPOOLERSTATUS = @as(u32, 42);
pub const WM_DRAWITEM = @as(u32, 43);
pub const WM_MEASUREITEM = @as(u32, 44);
pub const WM_DELETEITEM = @as(u32, 45);
pub const WM_VKEYTOITEM = @as(u32, 46);
pub const WM_CHARTOITEM = @as(u32, 47);
pub const WM_SETFONT = @as(u32, 48);
pub const WM_GETFONT = @as(u32, 49);
pub const WM_SETHOTKEY = @as(u32, 50);
pub const WM_GETHOTKEY = @as(u32, 51);
pub const WM_QUERYDRAGICON = @as(u32, 55);
pub const WM_COMPAREITEM = @as(u32, 57);
pub const WM_GETOBJECT = @as(u32, 61);
pub const WM_COMPACTING = @as(u32, 65);
pub const WM_COMMNOTIFY = @as(u32, 68);
pub const WM_WINDOWPOSCHANGING = @as(u32, 70);
pub const WM_WINDOWPOSCHANGED = @as(u32, 71);
pub const WM_POWER = @as(u32, 72);
pub const PWR_OK = @as(u32, 1);
pub const PWR_FAIL = @as(i32, -1);
pub const PWR_SUSPENDREQUEST = @as(u32, 1);
pub const PWR_SUSPENDRESUME = @as(u32, 2);
pub const PWR_CRITICALRESUME = @as(u32, 3);
pub const WM_COPYDATA = @as(u32, 74);
pub const WM_CANCELJOURNAL = @as(u32, 75);
pub const WM_INPUTLANGCHANGEREQUEST = @as(u32, 80);
pub const WM_INPUTLANGCHANGE = @as(u32, 81);
pub const WM_TCARD = @as(u32, 82);
pub const WM_HELP = @as(u32, 83);
pub const WM_USERCHANGED = @as(u32, 84);
pub const WM_NOTIFYFORMAT = @as(u32, 85);
pub const NFR_ANSI = @as(u32, 1);
pub const NFR_UNICODE = @as(u32, 2);
pub const NF_QUERY = @as(u32, 3);
pub const NF_REQUERY = @as(u32, 4);
pub const WM_STYLECHANGING = @as(u32, 124);
pub const WM_STYLECHANGED = @as(u32, 125);
pub const WM_DISPLAYCHANGE = @as(u32, 126);
pub const WM_GETICON = @as(u32, 127);
pub const WM_SETICON = @as(u32, 128);
pub const WM_NCCREATE = @as(u32, 129);
pub const WM_NCDESTROY = @as(u32, 130);
pub const WM_NCCALCSIZE = @as(u32, 131);
pub const WM_NCHITTEST = @as(u32, 132);
pub const WM_NCPAINT = @as(u32, 133);
pub const WM_NCACTIVATE = @as(u32, 134);
pub const WM_GETDLGCODE = @as(u32, 135);
pub const WM_SYNCPAINT = @as(u32, 136);
pub const WM_NCMOUSEMOVE = @as(u32, 160);
pub const WM_NCLBUTTONDOWN = @as(u32, 161);
pub const WM_NCLBUTTONUP = @as(u32, 162);
pub const WM_NCLBUTTONDBLCLK = @as(u32, 163);
pub const WM_NCRBUTTONDOWN = @as(u32, 164);
pub const WM_NCRBUTTONUP = @as(u32, 165);
pub const WM_NCRBUTTONDBLCLK = @as(u32, 166);
pub const WM_NCMBUTTONDOWN = @as(u32, 167);
pub const WM_NCMBUTTONUP = @as(u32, 168);
pub const WM_NCMBUTTONDBLCLK = @as(u32, 169);
pub const WM_NCXBUTTONDOWN = @as(u32, 171);
pub const WM_NCXBUTTONUP = @as(u32, 172);
pub const WM_NCXBUTTONDBLCLK = @as(u32, 173);
pub const WM_INPUT_DEVICE_CHANGE = @as(u32, 254);
pub const WM_INPUT = @as(u32, 255);
pub const WM_KEYFIRST = @as(u32, 256);
pub const WM_KEYDOWN = @as(u32, 256);
pub const WM_KEYUP = @as(u32, 257);
pub const WM_CHAR = @as(u32, 258);
pub const WM_DEADCHAR = @as(u32, 259);
pub const WM_SYSKEYDOWN = @as(u32, 260);
pub const WM_SYSKEYUP = @as(u32, 261);
pub const WM_SYSCHAR = @as(u32, 262);
pub const WM_SYSDEADCHAR = @as(u32, 263);
pub const WM_KEYLAST = @as(u32, 265);
pub const UNICODE_NOCHAR = @as(u32, 65535);
pub const WM_IME_STARTCOMPOSITION = @as(u32, 269);
pub const WM_IME_ENDCOMPOSITION = @as(u32, 270);
pub const WM_IME_COMPOSITION = @as(u32, 271);
pub const WM_IME_KEYLAST = @as(u32, 271);
pub const WM_INITDIALOG = @as(u32, 272);
pub const WM_COMMAND = @as(u32, 273);
pub const WM_SYSCOMMAND = @as(u32, 274);
pub const WM_TIMER = @as(u32, 275);
pub const WM_HSCROLL = @as(u32, 276);
pub const WM_VSCROLL = @as(u32, 277);
pub const WM_INITMENU = @as(u32, 278);
pub const WM_INITMENUPOPUP = @as(u32, 279);
pub const WM_GESTURE = @as(u32, 281);
pub const WM_GESTURENOTIFY = @as(u32, 282);
pub const WM_MENUSELECT = @as(u32, 287);
pub const WM_MENUCHAR = @as(u32, 288);
pub const WM_ENTERIDLE = @as(u32, 289);
pub const WM_MENURBUTTONUP = @as(u32, 290);
pub const WM_MENUDRAG = @as(u32, 291);
pub const WM_MENUGETOBJECT = @as(u32, 292);
pub const WM_UNINITMENUPOPUP = @as(u32, 293);
pub const WM_MENUCOMMAND = @as(u32, 294);
pub const WM_CHANGEUISTATE = @as(u32, 295);
pub const WM_UPDATEUISTATE = @as(u32, 296);
pub const WM_QUERYUISTATE = @as(u32, 297);
pub const UIS_SET = @as(u32, 1);
pub const UIS_CLEAR = @as(u32, 2);
pub const UIS_INITIALIZE = @as(u32, 3);
pub const UISF_HIDEFOCUS = @as(u32, 1);
pub const UISF_HIDEACCEL = @as(u32, 2);
pub const UISF_ACTIVE = @as(u32, 4);
pub const WM_CTLCOLORMSGBOX = @as(u32, 306);
pub const WM_CTLCOLOREDIT = @as(u32, 307);
pub const WM_CTLCOLORLISTBOX = @as(u32, 308);
pub const WM_CTLCOLORBTN = @as(u32, 309);
pub const WM_CTLCOLORDLG = @as(u32, 310);
pub const WM_CTLCOLORSCROLLBAR = @as(u32, 311);
pub const WM_CTLCOLORSTATIC = @as(u32, 312);
pub const MN_GETHMENU = @as(u32, 481);
pub const WM_MOUSEFIRST = @as(u32, 512);
pub const WM_MOUSEMOVE = @as(u32, 512);
pub const WM_LBUTTONDOWN = @as(u32, 513);
pub const WM_LBUTTONUP = @as(u32, 514);
pub const WM_LBUTTONDBLCLK = @as(u32, 515);
pub const WM_RBUTTONDOWN = @as(u32, 516);
pub const WM_RBUTTONUP = @as(u32, 517);
pub const WM_RBUTTONDBLCLK = @as(u32, 518);
pub const WM_MBUTTONDOWN = @as(u32, 519);
pub const WM_MBUTTONUP = @as(u32, 520);
pub const WM_MBUTTONDBLCLK = @as(u32, 521);
pub const WM_MOUSEWHEEL = @as(u32, 522);
pub const WM_XBUTTONDOWN = @as(u32, 523);
pub const WM_XBUTTONUP = @as(u32, 524);
pub const WM_XBUTTONDBLCLK = @as(u32, 525);
pub const WM_MOUSEHWHEEL = @as(u32, 526);
pub const WM_MOUSELAST = @as(u32, 526);
pub const WHEEL_DELTA = @as(u32, 120);
pub const WM_PARENTNOTIFY = @as(u32, 528);
pub const WM_ENTERMENULOOP = @as(u32, 529);
pub const WM_EXITMENULOOP = @as(u32, 530);
pub const WM_NEXTMENU = @as(u32, 531);
pub const WM_SIZING = @as(u32, 532);
pub const WM_CAPTURECHANGED = @as(u32, 533);
pub const WM_MOVING = @as(u32, 534);
pub const WM_POWERBROADCAST = @as(u32, 536);
pub const PBT_APMQUERYSUSPEND = @as(u32, 0);
pub const PBT_APMQUERYSTANDBY = @as(u32, 1);
pub const PBT_APMQUERYSUSPENDFAILED = @as(u32, 2);
pub const PBT_APMQUERYSTANDBYFAILED = @as(u32, 3);
pub const PBT_APMSUSPEND = @as(u32, 4);
pub const PBT_APMSTANDBY = @as(u32, 5);
pub const PBT_APMRESUMECRITICAL = @as(u32, 6);
pub const PBT_APMRESUMESUSPEND = @as(u32, 7);
pub const PBT_APMRESUMESTANDBY = @as(u32, 8);
pub const PBTF_APMRESUMEFROMFAILURE = @as(u32, 1);
pub const PBT_APMBATTERYLOW = @as(u32, 9);
pub const PBT_APMPOWERSTATUSCHANGE = @as(u32, 10);
pub const PBT_APMOEMEVENT = @as(u32, 11);
pub const PBT_APMRESUMEAUTOMATIC = @as(u32, 18);
pub const PBT_POWERSETTINGCHANGE = @as(u32, 32787);
pub const WM_MDICREATE = @as(u32, 544);
pub const WM_MDIDESTROY = @as(u32, 545);
pub const WM_MDIACTIVATE = @as(u32, 546);
pub const WM_MDIRESTORE = @as(u32, 547);
pub const WM_MDINEXT = @as(u32, 548);
pub const WM_MDIMAXIMIZE = @as(u32, 549);
pub const WM_MDITILE = @as(u32, 550);
pub const WM_MDICASCADE = @as(u32, 551);
pub const WM_MDIICONARRANGE = @as(u32, 552);
pub const WM_MDIGETACTIVE = @as(u32, 553);
pub const WM_MDISETMENU = @as(u32, 560);
pub const WM_ENTERSIZEMOVE = @as(u32, 561);
pub const WM_EXITSIZEMOVE = @as(u32, 562);
pub const WM_DROPFILES = @as(u32, 563);
pub const WM_MDIREFRESHMENU = @as(u32, 564);
pub const WM_POINTERDEVICECHANGE = @as(u32, 568);
pub const WM_POINTERDEVICEINRANGE = @as(u32, 569);
pub const WM_POINTERDEVICEOUTOFRANGE = @as(u32, 570);
pub const WM_TOUCH = @as(u32, 576);
pub const WM_NCPOINTERUPDATE = @as(u32, 577);
pub const WM_NCPOINTERDOWN = @as(u32, 578);
pub const WM_NCPOINTERUP = @as(u32, 579);
pub const WM_POINTERUPDATE = @as(u32, 581);
pub const WM_POINTERDOWN = @as(u32, 582);
pub const WM_POINTERUP = @as(u32, 583);
pub const WM_POINTERENTER = @as(u32, 585);
pub const WM_POINTERLEAVE = @as(u32, 586);
pub const WM_POINTERACTIVATE = @as(u32, 587);
pub const WM_POINTERCAPTURECHANGED = @as(u32, 588);
pub const WM_TOUCHHITTESTING = @as(u32, 589);
pub const WM_POINTERWHEEL = @as(u32, 590);
pub const WM_POINTERHWHEEL = @as(u32, 591);
pub const DM_POINTERHITTEST = @as(u32, 592);
pub const WM_POINTERROUTEDTO = @as(u32, 593);
pub const WM_POINTERROUTEDAWAY = @as(u32, 594);
pub const WM_POINTERROUTEDRELEASED = @as(u32, 595);
pub const WM_IME_SETCONTEXT = @as(u32, 641);
pub const WM_IME_NOTIFY = @as(u32, 642);
pub const WM_IME_CONTROL = @as(u32, 643);
pub const WM_IME_COMPOSITIONFULL = @as(u32, 644);
pub const WM_IME_SELECT = @as(u32, 645);
pub const WM_IME_CHAR = @as(u32, 646);
pub const WM_IME_REQUEST = @as(u32, 648);
pub const WM_IME_KEYDOWN = @as(u32, 656);
pub const WM_IME_KEYUP = @as(u32, 657);
pub const WM_NCMOUSEHOVER = @as(u32, 672);
pub const WM_NCMOUSELEAVE = @as(u32, 674);
pub const WM_WTSSESSION_CHANGE = @as(u32, 689);
pub const WM_TABLET_FIRST = @as(u32, 704);
pub const WM_TABLET_LAST = @as(u32, 735);
pub const WM_DPICHANGED = @as(u32, 736);
pub const WM_DPICHANGED_BEFOREPARENT = @as(u32, 738);
pub const WM_DPICHANGED_AFTERPARENT = @as(u32, 739);
pub const WM_GETDPISCALEDSIZE = @as(u32, 740);
pub const WM_CUT = @as(u32, 768);
pub const WM_COPY = @as(u32, 769);
pub const WM_PASTE = @as(u32, 770);
pub const WM_CLEAR = @as(u32, 771);
pub const WM_UNDO = @as(u32, 772);
pub const WM_RENDERFORMAT = @as(u32, 773);
pub const WM_RENDERALLFORMATS = @as(u32, 774);
pub const WM_DESTROYCLIPBOARD = @as(u32, 775);
pub const WM_DRAWCLIPBOARD = @as(u32, 776);
pub const WM_PAINTCLIPBOARD = @as(u32, 777);
pub const WM_VSCROLLCLIPBOARD = @as(u32, 778);
pub const WM_SIZECLIPBOARD = @as(u32, 779);
pub const WM_ASKCBFORMATNAME = @as(u32, 780);
pub const WM_CHANGECBCHAIN = @as(u32, 781);
pub const WM_HSCROLLCLIPBOARD = @as(u32, 782);
pub const WM_QUERYNEWPALETTE = @as(u32, 783);
pub const WM_PALETTEISCHANGING = @as(u32, 784);
pub const WM_PALETTECHANGED = @as(u32, 785);
pub const WM_HOTKEY = @as(u32, 786);
pub const WM_PRINT = @as(u32, 791);
pub const WM_APPCOMMAND = @as(u32, 793);
pub const WM_THEMECHANGED = @as(u32, 794);
pub const WM_CLIPBOARDUPDATE = @as(u32, 797);
pub const WM_DWMCOMPOSITIONCHANGED = @as(u32, 798);
pub const WM_DWMNCRENDERINGCHANGED = @as(u32, 799);
pub const WM_DWMCOLORIZATIONCOLORCHANGED = @as(u32, 800);
pub const WM_DWMWINDOWMAXIMIZEDCHANGE = @as(u32, 801);
pub const WM_DWMSENDICONICTHUMBNAIL = @as(u32, 803);
pub const WM_DWMSENDICONICLIVEPREVIEWBITMAP = @as(u32, 806);
pub const WM_GETTITLEBARINFOEX = @as(u32, 831);
pub const WM_HANDHELDFIRST = @as(u32, 856);
pub const WM_HANDHELDLAST = @as(u32, 863);
pub const WM_AFXFIRST = @as(u32, 864);
pub const WM_AFXLAST = @as(u32, 895);
pub const WM_PENWINFIRST = @as(u32, 896);
pub const WM_PENWINLAST = @as(u32, 911);
pub const WM_APP = @as(u32, 32768);
pub const WM_USER = @as(u32, 1024);
pub const WMSZ_LEFT = @as(u32, 1);
pub const WMSZ_RIGHT = @as(u32, 2);
pub const WMSZ_TOP = @as(u32, 3);
pub const WMSZ_TOPLEFT = @as(u32, 4);
pub const WMSZ_TOPRIGHT = @as(u32, 5);
pub const WMSZ_BOTTOM = @as(u32, 6);
pub const WMSZ_BOTTOMLEFT = @as(u32, 7);
pub const WMSZ_BOTTOMRIGHT = @as(u32, 8);
pub const HTERROR = @as(i32, -2);
pub const HTTRANSPARENT = @as(i32, -1);
pub const HTNOWHERE = @as(u32, 0);
pub const HTCLIENT = @as(u32, 1);
pub const HTCAPTION = @as(u32, 2);
pub const HTSYSMENU = @as(u32, 3);
pub const HTGROWBOX = @as(u32, 4);
pub const HTSIZE = @as(u32, 4);
pub const HTMENU = @as(u32, 5);
pub const HTHSCROLL = @as(u32, 6);
pub const HTVSCROLL = @as(u32, 7);
pub const HTMINBUTTON = @as(u32, 8);
pub const HTMAXBUTTON = @as(u32, 9);
pub const HTLEFT = @as(u32, 10);
pub const HTRIGHT = @as(u32, 11);
pub const HTTOP = @as(u32, 12);
pub const HTTOPLEFT = @as(u32, 13);
pub const HTTOPRIGHT = @as(u32, 14);
pub const HTBOTTOM = @as(u32, 15);
pub const HTBOTTOMLEFT = @as(u32, 16);
pub const HTBOTTOMRIGHT = @as(u32, 17);
pub const HTBORDER = @as(u32, 18);
pub const HTREDUCE = @as(u32, 8);
pub const HTZOOM = @as(u32, 9);
pub const HTSIZEFIRST = @as(u32, 10);
pub const HTSIZELAST = @as(u32, 17);
pub const HTOBJECT = @as(u32, 19);
pub const HTCLOSE = @as(u32, 20);
pub const HTHELP = @as(u32, 21);
pub const MA_ACTIVATE = @as(u32, 1);
pub const MA_ACTIVATEANDEAT = @as(u32, 2);
pub const MA_NOACTIVATE = @as(u32, 3);
pub const MA_NOACTIVATEANDEAT = @as(u32, 4);
pub const ICON_SMALL = @as(u32, 0);
pub const ICON_BIG = @as(u32, 1);
pub const ICON_SMALL2 = @as(u32, 2);
pub const SIZE_RESTORED = @as(u32, 0);
pub const SIZE_MINIMIZED = @as(u32, 1);
pub const SIZE_MAXIMIZED = @as(u32, 2);
pub const SIZE_MAXSHOW = @as(u32, 3);
pub const SIZE_MAXHIDE = @as(u32, 4);
pub const SIZENORMAL = @as(u32, 0);
pub const SIZEICONIC = @as(u32, 1);
pub const SIZEFULLSCREEN = @as(u32, 2);
pub const SIZEZOOMSHOW = @as(u32, 3);
pub const SIZEZOOMHIDE = @as(u32, 4);
pub const WVR_ALIGNTOP = @as(u32, 16);
pub const WVR_ALIGNLEFT = @as(u32, 32);
pub const WVR_ALIGNBOTTOM = @as(u32, 64);
pub const WVR_ALIGNRIGHT = @as(u32, 128);
pub const WVR_HREDRAW = @as(u32, 256);
pub const WVR_VREDRAW = @as(u32, 512);
pub const WVR_VALIDRECTS = @as(u32, 1024);
pub const MK_LBUTTON = @as(u32, 1);
pub const MK_RBUTTON = @as(u32, 2);
pub const MK_SHIFT = @as(u32, 4);
pub const MK_CONTROL = @as(u32, 8);
pub const MK_MBUTTON = @as(u32, 16);
pub const MK_XBUTTON1 = @as(u32, 32);
pub const MK_XBUTTON2 = @as(u32, 64);
pub const PRF_CHECKVISIBLE = @as(i32, 1);
pub const PRF_NONCLIENT = @as(i32, 2);
pub const PRF_CLIENT = @as(i32, 4);
pub const PRF_ERASEBKGND = @as(i32, 8);
pub const PRF_CHILDREN = @as(i32, 16);
pub const PRF_OWNED = @as(i32, 32);
pub const IDANI_OPEN = @as(u32, 1);
pub const IDANI_CAPTION = @as(u32, 3);
pub const FVIRTKEY = @as(u32, 1);
pub const FNOINVERT = @as(u32, 2);
pub const FSHIFT = @as(u32, 4);
pub const FCONTROL = @as(u32, 8);
pub const FALT = @as(u32, 16);
pub const ODA_DRAWENTIRE = @as(u32, 1);
pub const ODA_SELECT = @as(u32, 2);
pub const ODA_FOCUS = @as(u32, 4);
pub const ODS_SELECTED = @as(u32, 1);
pub const ODS_GRAYED = @as(u32, 2);
pub const ODS_DISABLED = @as(u32, 4);
pub const ODS_CHECKED = @as(u32, 8);
pub const ODS_FOCUS = @as(u32, 16);
pub const ODS_DEFAULT = @as(u32, 32);
pub const ODS_COMBOBOXEDIT = @as(u32, 4096);
pub const ODS_HOTLIGHT = @as(u32, 64);
pub const ODS_INACTIVE = @as(u32, 128);
pub const ODS_NOACCEL = @as(u32, 256);
pub const ODS_NOFOCUSRECT = @as(u32, 512);
pub const IDHOT_SNAPWINDOW = @as(i32, -1);
pub const IDHOT_SNAPDESKTOP = @as(i32, -2);
pub const ENDSESSION_CLOSEAPP = @as(u32, 1);
pub const ENDSESSION_CRITICAL = @as(u32, 1073741824);
pub const ENDSESSION_LOGOFF = @as(u32, 2147483648);
pub const EWX_FORCE = @as(u32, 4);
pub const EWX_FORCEIFHUNG = @as(u32, 16);
pub const EWX_QUICKRESOLVE = @as(u32, 32);
pub const EWX_BOOTOPTIONS = @as(u32, 16777216);
pub const EWX_ARSO = @as(u32, 67108864);
pub const EWX_CHECK_SAFE_FOR_SERVER = @as(u32, 134217728);
pub const EWX_SYSTEM_INITIATED = @as(u32, 268435456);
pub const BROADCAST_QUERY_DENY = @as(u32, 1112363332);
pub const DEVICE_NOTIFY_ALL_INTERFACE_CLASSES = @as(u32, 4);
pub const HWND_MESSAGE = @import("../zig.zig").typedConst(HWND, @as(i32, -3));
pub const ISMEX_NOSEND = @as(u32, 0);
pub const ISMEX_SEND = @as(u32, 1);
pub const ISMEX_NOTIFY = @as(u32, 2);
pub const ISMEX_CALLBACK = @as(u32, 4);
pub const ISMEX_REPLIED = @as(u32, 8);
// skipped 'HWND_DESKTOP'
pub const PW_RENDERFULLCONTENT = @as(u32, 2);
// skipped 'HWND_TOP'
pub const HWND_BOTTOM = @import("../zig.zig").typedConst(HWND, @as(i32, 1));
pub const HWND_TOPMOST = @import("../zig.zig").typedConst(HWND, @as(i32, -1));
pub const HWND_NOTOPMOST = @import("../zig.zig").typedConst(HWND, @as(i32, -2));
pub const DLGWINDOWEXTRA = @as(u32, 30);
pub const POINTER_MOD_SHIFT = @as(u32, 4);
pub const POINTER_MOD_CTRL = @as(u32, 8);
pub const TOUCH_FLAG_NONE = @as(u32, 0);
pub const TOUCH_MASK_NONE = @as(u32, 0);
pub const TOUCH_MASK_CONTACTAREA = @as(u32, 1);
pub const TOUCH_MASK_ORIENTATION = @as(u32, 2);
pub const TOUCH_MASK_PRESSURE = @as(u32, 4);
pub const PEN_FLAG_NONE = @as(u32, 0);
pub const PEN_FLAG_BARREL = @as(u32, 1);
pub const PEN_FLAG_INVERTED = @as(u32, 2);
pub const PEN_FLAG_ERASER = @as(u32, 4);
pub const PEN_MASK_NONE = @as(u32, 0);
pub const PEN_MASK_PRESSURE = @as(u32, 1);
pub const PEN_MASK_ROTATION = @as(u32, 2);
pub const PEN_MASK_TILT_X = @as(u32, 4);
pub const PEN_MASK_TILT_Y = @as(u32, 8);
pub const POINTER_MESSAGE_FLAG_NEW = @as(u32, 1);
pub const POINTER_MESSAGE_FLAG_INRANGE = @as(u32, 2);
pub const POINTER_MESSAGE_FLAG_INCONTACT = @as(u32, 4);
pub const POINTER_MESSAGE_FLAG_FIRSTBUTTON = @as(u32, 16);
pub const POINTER_MESSAGE_FLAG_SECONDBUTTON = @as(u32, 32);
pub const POINTER_MESSAGE_FLAG_THIRDBUTTON = @as(u32, 64);
pub const POINTER_MESSAGE_FLAG_FOURTHBUTTON = @as(u32, 128);
pub const POINTER_MESSAGE_FLAG_FIFTHBUTTON = @as(u32, 256);
pub const POINTER_MESSAGE_FLAG_PRIMARY = @as(u32, 8192);
pub const POINTER_MESSAGE_FLAG_CONFIDENCE = @as(u32, 16384);
pub const POINTER_MESSAGE_FLAG_CANCELED = @as(u32, 32768);
pub const PA_ACTIVATE = @as(u32, 1);
pub const PA_NOACTIVATE = @as(u32, 3);
pub const MAX_TOUCH_COUNT = @as(u32, 256);
pub const TOUCH_HIT_TESTING_DEFAULT = @as(u32, 0);
pub const TOUCH_HIT_TESTING_CLIENT = @as(u32, 1);
pub const TOUCH_HIT_TESTING_NONE = @as(u32, 2);
pub const TOUCH_HIT_TESTING_PROXIMITY_CLOSEST = @as(u32, 0);
pub const TOUCH_HIT_TESTING_PROXIMITY_FARTHEST = @as(u32, 4095);
pub const GWFS_INCLUDE_ANCESTORS = @as(u32, 1);
pub const MAPVK_VK_TO_VSC = @as(u32, 0);
pub const MAPVK_VSC_TO_VK = @as(u32, 1);
pub const MAPVK_VK_TO_CHAR = @as(u32, 2);
pub const MAPVK_VSC_TO_VK_EX = @as(u32, 3);
pub const MAPVK_VK_TO_VSC_EX = @as(u32, 4);
pub const QS_TOUCH = @as(u32, 2048);
pub const QS_POINTER = @as(u32, 4096);
pub const USER_TIMER_MAXIMUM = @as(u32, 2147483647);
pub const USER_TIMER_MINIMUM = @as(u32, 10);
pub const TIMERV_DEFAULT_COALESCING = @as(u32, 0);
pub const TIMERV_NO_COALESCING = @as(u32, 4294967295);
pub const TIMERV_COALESCING_MIN = @as(u32, 1);
pub const TIMERV_COALESCING_MAX = @as(u32, 2147483637);
pub const SM_RESERVED1 = @as(u32, 24);
pub const SM_RESERVED2 = @as(u32, 25);
pub const SM_RESERVED3 = @as(u32, 26);
pub const SM_RESERVED4 = @as(u32, 27);
pub const SM_CMETRICS = @as(u32, 76);
pub const SM_CARETBLINKINGENABLED = @as(u32, 8194);
pub const PMB_ACTIVE = @as(u32, 1);
pub const MNC_IGNORE = @as(u32, 0);
pub const MNC_CLOSE = @as(u32, 1);
pub const MNC_EXECUTE = @as(u32, 2);
pub const MNC_SELECT = @as(u32, 3);
pub const MND_CONTINUE = @as(u32, 0);
pub const MND_ENDMENU = @as(u32, 1);
pub const MNGO_NOINTERFACE = @as(u32, 0);
pub const MNGO_NOERROR = @as(u32, 1);
pub const DOF_EXECUTABLE = @as(u32, 32769);
pub const DOF_DOCUMENT = @as(u32, 32770);
pub const DOF_DIRECTORY = @as(u32, 32771);
pub const DOF_MULTIPLE = @as(u32, 32772);
pub const DOF_PROGMAN = @as(u32, 1);
pub const DOF_SHELLDATA = @as(u32, 2);
pub const DO_DROPFILE = @as(i32, 1162627398);
pub const DO_PRINTFILE = @as(i32, 1414419024);
pub const ASFW_ANY = @as(u32, 4294967295);
pub const DCX_EXCLUDEUPDATE = @as(i32, 256);
pub const HELPINFO_WINDOW = @as(u32, 1);
pub const HELPINFO_MENUITEM = @as(u32, 2);
pub const CTLCOLOR_MSGBOX = @as(u32, 0);
pub const CTLCOLOR_EDIT = @as(u32, 1);
pub const CTLCOLOR_LISTBOX = @as(u32, 2);
pub const CTLCOLOR_BTN = @as(u32, 3);
pub const CTLCOLOR_DLG = @as(u32, 4);
pub const CTLCOLOR_SCROLLBAR = @as(u32, 5);
pub const CTLCOLOR_STATIC = @as(u32, 6);
pub const CTLCOLOR_MAX = @as(u32, 7);
pub const GW_MAX = @as(u32, 5);
pub const SC_SIZE = @as(u32, 61440);
pub const SC_MOVE = @as(u32, 61456);
pub const SC_MINIMIZE = @as(u32, 61472);
pub const SC_MAXIMIZE = @as(u32, 61488);
pub const SC_NEXTWINDOW = @as(u32, 61504);
pub const SC_PREVWINDOW = @as(u32, 61520);
pub const SC_CLOSE = @as(u32, 61536);
pub const SC_VSCROLL = @as(u32, 61552);
pub const SC_HSCROLL = @as(u32, 61568);
pub const SC_MOUSEMENU = @as(u32, 61584);
pub const SC_KEYMENU = @as(u32, 61696);
pub const SC_ARRANGE = @as(u32, 61712);
pub const SC_RESTORE = @as(u32, 61728);
pub const SC_TASKLIST = @as(u32, 61744);
pub const SC_HOTKEY = @as(u32, 61776);
pub const SC_DEFAULT = @as(u32, 61792);
pub const SC_MONITORPOWER = @as(u32, 61808);
pub const SC_CONTEXTHELP = @as(u32, 61824);
pub const SC_SEPARATOR = @as(u32, 61455);
pub const SCF_ISSECURE = @as(u32, 1);
pub const SC_ICON = @as(u32, 61472);
pub const SC_ZOOM = @as(u32, 61488);
pub const IDC_ARROW = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 32512));
pub const IDC_IBEAM = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 32513));
pub const IDC_WAIT = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 32514));
pub const IDC_CROSS = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 32515));
pub const IDC_UPARROW = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 32516));
pub const IDC_SIZE = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 32640));
pub const IDC_ICON = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 32641));
pub const IDC_SIZENWSE = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 32642));
pub const IDC_SIZENESW = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 32643));
pub const IDC_SIZEWE = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 32644));
pub const IDC_SIZENS = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 32645));
pub const IDC_SIZEALL = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 32646));
pub const IDC_NO = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 32648));
pub const IDC_HAND = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 32649));
pub const IDC_APPSTARTING = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 32650));
pub const IDC_HELP = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 32651));
pub const IDC_PIN = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 32671));
pub const IDC_PERSON = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(i32, 32672));
pub const CURSOR_CREATION_SCALING_NONE = @as(u32, 1);
pub const CURSOR_CREATION_SCALING_DEFAULT = @as(u32, 2);
pub const IMAGE_ENHMETAFILE = @as(u32, 3);
pub const LR_COLOR = @as(u32, 2);
pub const RES_ICON = @as(u32, 1);
pub const RES_CURSOR = @as(u32, 2);
pub const OBM_CLOSE = @as(u32, 32754);
pub const OBM_UPARROW = @as(u32, 32753);
pub const OBM_DNARROW = @as(u32, 32752);
pub const OBM_RGARROW = @as(u32, 32751);
pub const OBM_LFARROW = @as(u32, 32750);
pub const OBM_REDUCE = @as(u32, 32749);
pub const OBM_ZOOM = @as(u32, 32748);
pub const OBM_RESTORE = @as(u32, 32747);
pub const OBM_REDUCED = @as(u32, 32746);
pub const OBM_ZOOMD = @as(u32, 32745);
pub const OBM_RESTORED = @as(u32, 32744);
pub const OBM_UPARROWD = @as(u32, 32743);
pub const OBM_DNARROWD = @as(u32, 32742);
pub const OBM_RGARROWD = @as(u32, 32741);
pub const OBM_LFARROWD = @as(u32, 32740);
pub const OBM_MNARROW = @as(u32, 32739);
pub const OBM_COMBO = @as(u32, 32738);
pub const OBM_UPARROWI = @as(u32, 32737);
pub const OBM_DNARROWI = @as(u32, 32736);
pub const OBM_RGARROWI = @as(u32, 32735);
pub const OBM_LFARROWI = @as(u32, 32734);
pub const OBM_OLD_CLOSE = @as(u32, 32767);
pub const OBM_SIZE = @as(u32, 32766);
pub const OBM_OLD_UPARROW = @as(u32, 32765);
pub const OBM_OLD_DNARROW = @as(u32, 32764);
pub const OBM_OLD_RGARROW = @as(u32, 32763);
pub const OBM_OLD_LFARROW = @as(u32, 32762);
pub const OBM_BTSIZE = @as(u32, 32761);
pub const OBM_CHECK = @as(u32, 32760);
pub const OBM_CHECKBOXES = @as(u32, 32759);
pub const OBM_BTNCORNERS = @as(u32, 32758);
pub const OBM_OLD_REDUCE = @as(u32, 32757);
pub const OBM_OLD_ZOOM = @as(u32, 32756);
pub const OBM_OLD_RESTORE = @as(u32, 32755);
pub const OCR_SIZE = @as(u32, 32640);
pub const OCR_ICON = @as(u32, 32641);
pub const OCR_ICOCUR = @as(u32, 32647);
pub const OIC_SAMPLE = @as(u32, 32512);
pub const OIC_HAND = @as(u32, 32513);
pub const OIC_QUES = @as(u32, 32514);
pub const OIC_BANG = @as(u32, 32515);
pub const OIC_NOTE = @as(u32, 32516);
pub const OIC_WINLOGO = @as(u32, 32517);
pub const OIC_WARNING = @as(u32, 32515);
pub const OIC_ERROR = @as(u32, 32513);
pub const OIC_INFORMATION = @as(u32, 32516);
pub const OIC_SHIELD = @as(u32, 32518);
pub const ORD_LANGDRIVER = @as(u32, 1);
pub const IDI_APPLICATION = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(u32, 32512));
pub const IDI_HAND = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(u32, 32513));
pub const IDI_QUESTION = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(u32, 32514));
pub const IDI_EXCLAMATION = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(u32, 32515));
pub const IDI_ASTERISK = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(u32, 32516));
pub const IDI_WINLOGO = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(u32, 32517));
pub const IDI_SHIELD = @import("../zig.zig").typedConst([*:0]align(1) const u16, @as(u32, 32518));
pub const IDI_WARNING = @as(u32, 32515);
pub const IDI_ERROR = @as(u32, 32513);
pub const IDI_INFORMATION = @as(u32, 32516);
pub const ES_LEFT = @as(i32, 0);
pub const ES_CENTER = @as(i32, 1);
pub const ES_RIGHT = @as(i32, 2);
pub const ES_MULTILINE = @as(i32, 4);
pub const ES_UPPERCASE = @as(i32, 8);
pub const ES_LOWERCASE = @as(i32, 16);
pub const ES_PASSWORD = @as(i32, 32);
pub const ES_AUTOVSCROLL = @as(i32, 64);
pub const ES_AUTOHSCROLL = @as(i32, 128);
pub const ES_NOHIDESEL = @as(i32, 256);
pub const ES_OEMCONVERT = @as(i32, 1024);
pub const ES_READONLY = @as(i32, 2048);
pub const ES_WANTRETURN = @as(i32, 4096);
pub const ES_NUMBER = @as(i32, 8192);
pub const EN_SETFOCUS = @as(u32, 256);
pub const EN_KILLFOCUS = @as(u32, 512);
pub const EN_CHANGE = @as(u32, 768);
pub const EN_UPDATE = @as(u32, 1024);
pub const EN_ERRSPACE = @as(u32, 1280);
pub const EN_MAXTEXT = @as(u32, 1281);
pub const EN_HSCROLL = @as(u32, 1537);
pub const EN_VSCROLL = @as(u32, 1538);
pub const EN_ALIGN_LTR_EC = @as(u32, 1792);
pub const EN_ALIGN_RTL_EC = @as(u32, 1793);
pub const EN_BEFORE_PASTE = @as(u32, 2048);
pub const EN_AFTER_PASTE = @as(u32, 2049);
pub const EC_LEFTMARGIN = @as(u32, 1);
pub const EC_RIGHTMARGIN = @as(u32, 2);
pub const EC_USEFONTINFO = @as(u32, 65535);
pub const EMSIS_COMPOSITIONSTRING = @as(u32, 1);
pub const EIMES_GETCOMPSTRATONCE = @as(u32, 1);
pub const EIMES_CANCELCOMPSTRINFOCUS = @as(u32, 2);
pub const EIMES_COMPLETECOMPSTRKILLFOCUS = @as(u32, 4);
pub const BS_PUSHBUTTON = @as(i32, 0);
pub const BS_DEFPUSHBUTTON = @as(i32, 1);
pub const BS_CHECKBOX = @as(i32, 2);
pub const BS_AUTOCHECKBOX = @as(i32, 3);
pub const BS_RADIOBUTTON = @as(i32, 4);
pub const BS_3STATE = @as(i32, 5);
pub const BS_AUTO3STATE = @as(i32, 6);
pub const BS_GROUPBOX = @as(i32, 7);
pub const BS_USERBUTTON = @as(i32, 8);
pub const BS_AUTORADIOBUTTON = @as(i32, 9);
pub const BS_PUSHBOX = @as(i32, 10);
pub const BS_OWNERDRAW = @as(i32, 11);
pub const BS_TYPEMASK = @as(i32, 15);
pub const BS_LEFTTEXT = @as(i32, 32);
pub const BS_TEXT = @as(i32, 0);
pub const BS_ICON = @as(i32, 64);
pub const BS_BITMAP = @as(i32, 128);
pub const BS_LEFT = @as(i32, 256);
pub const BS_RIGHT = @as(i32, 512);
pub const BS_CENTER = @as(i32, 768);
pub const BS_TOP = @as(i32, 1024);
pub const BS_BOTTOM = @as(i32, 2048);
pub const BS_VCENTER = @as(i32, 3072);
pub const BS_PUSHLIKE = @as(i32, 4096);
pub const BS_MULTILINE = @as(i32, 8192);
pub const BS_NOTIFY = @as(i32, 16384);
pub const BS_FLAT = @as(i32, 32768);
pub const BS_RIGHTBUTTON = @as(i32, 32);
pub const BN_CLICKED = @as(u32, 0);
pub const BN_PAINT = @as(u32, 1);
pub const BN_HILITE = @as(u32, 2);
pub const BN_UNHILITE = @as(u32, 3);
pub const BN_DISABLE = @as(u32, 4);
pub const BN_DOUBLECLICKED = @as(u32, 5);
pub const BN_PUSHED = @as(u32, 2);
pub const BN_UNPUSHED = @as(u32, 3);
pub const BN_DBLCLK = @as(u32, 5);
pub const BN_SETFOCUS = @as(u32, 6);
pub const BN_KILLFOCUS = @as(u32, 7);
pub const BM_GETCHECK = @as(u32, 240);
pub const BM_SETCHECK = @as(u32, 241);
pub const BM_GETSTATE = @as(u32, 242);
pub const BM_SETSTATE = @as(u32, 243);
pub const BM_SETSTYLE = @as(u32, 244);
pub const BM_CLICK = @as(u32, 245);
pub const BM_GETIMAGE = @as(u32, 246);
pub const BM_SETIMAGE = @as(u32, 247);
pub const BM_SETDONTCLICK = @as(u32, 248);
pub const BST_PUSHED = @as(u32, 4);
pub const BST_FOCUS = @as(u32, 8);
pub const SS_LEFT = @as(i32, 0);
pub const SS_CENTER = @as(i32, 1);
pub const SS_RIGHT = @as(i32, 2);
pub const SS_ICON = @as(i32, 3);
pub const SS_BLACKRECT = @as(i32, 4);
pub const SS_GRAYRECT = @as(i32, 5);
pub const SS_WHITERECT = @as(i32, 6);
pub const SS_BLACKFRAME = @as(i32, 7);
pub const SS_GRAYFRAME = @as(i32, 8);
pub const SS_WHITEFRAME = @as(i32, 9);
pub const SS_USERITEM = @as(i32, 10);
pub const SS_SIMPLE = @as(i32, 11);
pub const SS_LEFTNOWORDWRAP = @as(i32, 12);
pub const SS_OWNERDRAW = @as(i32, 13);
pub const SS_BITMAP = @as(i32, 14);
pub const SS_ENHMETAFILE = @as(i32, 15);
pub const SS_ETCHEDHORZ = @as(i32, 16);
pub const SS_ETCHEDVERT = @as(i32, 17);
pub const SS_ETCHEDFRAME = @as(i32, 18);
pub const SS_TYPEMASK = @as(i32, 31);
pub const SS_REALSIZECONTROL = @as(i32, 64);
pub const SS_NOPREFIX = @as(i32, 128);
pub const SS_NOTIFY = @as(i32, 256);
pub const SS_CENTERIMAGE = @as(i32, 512);
pub const SS_RIGHTJUST = @as(i32, 1024);
pub const SS_REALSIZEIMAGE = @as(i32, 2048);
pub const SS_SUNKEN = @as(i32, 4096);
pub const SS_EDITCONTROL = @as(i32, 8192);
pub const SS_ENDELLIPSIS = @as(i32, 16384);
pub const SS_PATHELLIPSIS = @as(i32, 32768);
pub const SS_WORDELLIPSIS = @as(i32, 49152);
pub const SS_ELLIPSISMASK = @as(i32, 49152);
pub const STM_SETICON = @as(u32, 368);
pub const STM_GETICON = @as(u32, 369);
pub const STM_SETIMAGE = @as(u32, 370);
pub const STM_GETIMAGE = @as(u32, 371);
pub const STN_CLICKED = @as(u32, 0);
pub const STN_DBLCLK = @as(u32, 1);
pub const STN_ENABLE = @as(u32, 2);
pub const STN_DISABLE = @as(u32, 3);
pub const STM_MSGMAX = @as(u32, 372);
pub const DWL_MSGRESULT = @as(u32, 0);
pub const DWL_DLGPROC = @as(u32, 4);
pub const DWL_USER = @as(u32, 8);
pub const DWLP_MSGRESULT = @as(u32, 0);
pub const DS_ABSALIGN = @as(i32, 1);
pub const DS_SYSMODAL = @as(i32, 2);
pub const DS_LOCALEDIT = @as(i32, 32);
pub const DS_SETFONT = @as(i32, 64);
pub const DS_MODALFRAME = @as(i32, 128);
pub const DS_NOIDLEMSG = @as(i32, 256);
pub const DS_SETFOREGROUND = @as(i32, 512);
pub const DS_3DLOOK = @as(i32, 4);
pub const DS_FIXEDSYS = @as(i32, 8);
pub const DS_NOFAILCREATE = @as(i32, 16);
pub const DS_CONTROL = @as(i32, 1024);
pub const DS_CENTER = @as(i32, 2048);
pub const DS_CENTERMOUSE = @as(i32, 4096);
pub const DS_CONTEXTHELP = @as(i32, 8192);
pub const DS_USEPIXELS = @as(i32, 32768);
pub const DM_GETDEFID = @as(u32, 1024);
pub const DM_SETDEFID = @as(u32, 1025);
pub const DM_REPOSITION = @as(u32, 1026);
pub const DC_HASDEFID = @as(u32, 21323);
pub const DLGC_WANTARROWS = @as(u32, 1);
pub const DLGC_WANTTAB = @as(u32, 2);
pub const DLGC_WANTALLKEYS = @as(u32, 4);
pub const DLGC_WANTMESSAGE = @as(u32, 4);
pub const DLGC_HASSETSEL = @as(u32, 8);
pub const DLGC_DEFPUSHBUTTON = @as(u32, 16);
pub const DLGC_UNDEFPUSHBUTTON = @as(u32, 32);
pub const DLGC_RADIOBUTTON = @as(u32, 64);
pub const DLGC_WANTCHARS = @as(u32, 128);
pub const DLGC_STATIC = @as(u32, 256);
pub const DLGC_BUTTON = @as(u32, 8192);
pub const LB_CTLCODE = @as(i32, 0);
pub const LB_OKAY = @as(u32, 0);
pub const LB_ERR = @as(i32, -1);
pub const LB_ERRSPACE = @as(i32, -2);
pub const LBN_ERRSPACE = @as(i32, -2);
pub const LBN_SELCHANGE = @as(u32, 1);
pub const LBN_DBLCLK = @as(u32, 2);
pub const LBN_SELCANCEL = @as(u32, 3);
pub const LBN_SETFOCUS = @as(u32, 4);
pub const LBN_KILLFOCUS = @as(u32, 5);
pub const LB_ADDSTRING = @as(u32, 384);
pub const LB_INSERTSTRING = @as(u32, 385);
pub const LB_DELETESTRING = @as(u32, 386);
pub const LB_SELITEMRANGEEX = @as(u32, 387);
pub const LB_RESETCONTENT = @as(u32, 388);
pub const LB_SETSEL = @as(u32, 389);
pub const LB_SETCURSEL = @as(u32, 390);
pub const LB_GETSEL = @as(u32, 391);
pub const LB_GETCURSEL = @as(u32, 392);
pub const LB_GETTEXT = @as(u32, 393);
pub const LB_GETTEXTLEN = @as(u32, 394);
pub const LB_GETCOUNT = @as(u32, 395);
pub const LB_SELECTSTRING = @as(u32, 396);
pub const LB_DIR = @as(u32, 397);
pub const LB_GETTOPINDEX = @as(u32, 398);
pub const LB_FINDSTRING = @as(u32, 399);
pub const LB_GETSELCOUNT = @as(u32, 400);
pub const LB_GETSELITEMS = @as(u32, 401);
pub const LB_SETTABSTOPS = @as(u32, 402);
pub const LB_GETHORIZONTALEXTENT = @as(u32, 403);
pub const LB_SETHORIZONTALEXTENT = @as(u32, 404);
pub const LB_SETCOLUMNWIDTH = @as(u32, 405);
pub const LB_ADDFILE = @as(u32, 406);
pub const LB_SETTOPINDEX = @as(u32, 407);
pub const LB_GETITEMRECT = @as(u32, 408);
pub const LB_GETITEMDATA = @as(u32, 409);
pub const LB_SETITEMDATA = @as(u32, 410);
pub const LB_SELITEMRANGE = @as(u32, 411);
pub const LB_SETANCHORINDEX = @as(u32, 412);
pub const LB_GETANCHORINDEX = @as(u32, 413);
pub const LB_SETCARETINDEX = @as(u32, 414);
pub const LB_GETCARETINDEX = @as(u32, 415);
pub const LB_SETITEMHEIGHT = @as(u32, 416);
pub const LB_GETITEMHEIGHT = @as(u32, 417);
pub const LB_FINDSTRINGEXACT = @as(u32, 418);
pub const LB_SETLOCALE = @as(u32, 421);
pub const LB_GETLOCALE = @as(u32, 422);
pub const LB_SETCOUNT = @as(u32, 423);
pub const LB_INITSTORAGE = @as(u32, 424);
pub const LB_ITEMFROMPOINT = @as(u32, 425);
pub const LB_MULTIPLEADDSTRING = @as(u32, 433);
pub const LB_GETLISTBOXINFO = @as(u32, 434);
pub const LB_MSGMAX = @as(u32, 435);
pub const LBS_NOTIFY = @as(i32, 1);
pub const LBS_SORT = @as(i32, 2);
pub const LBS_NOREDRAW = @as(i32, 4);
pub const LBS_MULTIPLESEL = @as(i32, 8);
pub const LBS_OWNERDRAWFIXED = @as(i32, 16);
pub const LBS_OWNERDRAWVARIABLE = @as(i32, 32);
pub const LBS_HASSTRINGS = @as(i32, 64);
pub const LBS_USETABSTOPS = @as(i32, 128);
pub const LBS_NOINTEGRALHEIGHT = @as(i32, 256);
pub const LBS_MULTICOLUMN = @as(i32, 512);
pub const LBS_WANTKEYBOARDINPUT = @as(i32, 1024);
pub const LBS_EXTENDEDSEL = @as(i32, 2048);
pub const LBS_DISABLENOSCROLL = @as(i32, 4096);
pub const LBS_NODATA = @as(i32, 8192);
pub const LBS_NOSEL = @as(i32, 16384);
pub const LBS_COMBOBOX = @as(i32, 32768);
pub const CB_OKAY = @as(u32, 0);
pub const CB_ERR = @as(i32, -1);
pub const CB_ERRSPACE = @as(i32, -2);
pub const CBN_ERRSPACE = @as(i32, -1);
pub const CBN_SELCHANGE = @as(u32, 1);
pub const CBN_DBLCLK = @as(u32, 2);
pub const CBN_SETFOCUS = @as(u32, 3);
pub const CBN_KILLFOCUS = @as(u32, 4);
pub const CBN_EDITCHANGE = @as(u32, 5);
pub const CBN_EDITUPDATE = @as(u32, 6);
pub const CBN_DROPDOWN = @as(u32, 7);
pub const CBN_CLOSEUP = @as(u32, 8);
pub const CBN_SELENDOK = @as(u32, 9);
pub const CBN_SELENDCANCEL = @as(u32, 10);
pub const CBS_SIMPLE = @as(i32, 1);
pub const CBS_DROPDOWN = @as(i32, 2);
pub const CBS_DROPDOWNLIST = @as(i32, 3);
pub const CBS_OWNERDRAWFIXED = @as(i32, 16);
pub const CBS_OWNERDRAWVARIABLE = @as(i32, 32);
pub const CBS_AUTOHSCROLL = @as(i32, 64);
pub const CBS_OEMCONVERT = @as(i32, 128);
pub const CBS_SORT = @as(i32, 256);
pub const CBS_HASSTRINGS = @as(i32, 512);
pub const CBS_NOINTEGRALHEIGHT = @as(i32, 1024);
pub const CBS_DISABLENOSCROLL = @as(i32, 2048);
pub const CBS_UPPERCASE = @as(i32, 8192);
pub const CBS_LOWERCASE = @as(i32, 16384);
pub const CB_GETEDITSEL = @as(u32, 320);
pub const CB_LIMITTEXT = @as(u32, 321);
pub const CB_SETEDITSEL = @as(u32, 322);
pub const CB_ADDSTRING = @as(u32, 323);
pub const CB_DELETESTRING = @as(u32, 324);
pub const CB_DIR = @as(u32, 325);
pub const CB_GETCOUNT = @as(u32, 326);
pub const CB_GETCURSEL = @as(u32, 327);
pub const CB_GETLBTEXT = @as(u32, 328);
pub const CB_GETLBTEXTLEN = @as(u32, 329);
pub const CB_INSERTSTRING = @as(u32, 330);
pub const CB_RESETCONTENT = @as(u32, 331);
pub const CB_FINDSTRING = @as(u32, 332);
pub const CB_SELECTSTRING = @as(u32, 333);
pub const CB_SETCURSEL = @as(u32, 334);
pub const CB_SHOWDROPDOWN = @as(u32, 335);
pub const CB_GETITEMDATA = @as(u32, 336);
pub const CB_SETITEMDATA = @as(u32, 337);
pub const CB_GETDROPPEDCONTROLRECT = @as(u32, 338);
pub const CB_SETITEMHEIGHT = @as(u32, 339);
pub const CB_GETITEMHEIGHT = @as(u32, 340);
pub const CB_SETEXTENDEDUI = @as(u32, 341);
pub const CB_GETEXTENDEDUI = @as(u32, 342);
pub const CB_GETDROPPEDSTATE = @as(u32, 343);
pub const CB_FINDSTRINGEXACT = @as(u32, 344);
pub const CB_SETLOCALE = @as(u32, 345);
pub const CB_GETLOCALE = @as(u32, 346);
pub const CB_GETTOPINDEX = @as(u32, 347);
pub const CB_SETTOPINDEX = @as(u32, 348);
pub const CB_GETHORIZONTALEXTENT = @as(u32, 349);
pub const CB_SETHORIZONTALEXTENT = @as(u32, 350);
pub const CB_GETDROPPEDWIDTH = @as(u32, 351);
pub const CB_SETDROPPEDWIDTH = @as(u32, 352);
pub const CB_INITSTORAGE = @as(u32, 353);
pub const CB_MULTIPLEADDSTRING = @as(u32, 355);
pub const CB_GETCOMBOBOXINFO = @as(u32, 356);
pub const CB_MSGMAX = @as(u32, 357);
pub const SBS_HORZ = @as(i32, 0);
pub const SBS_VERT = @as(i32, 1);
pub const SBS_TOPALIGN = @as(i32, 2);
pub const SBS_LEFTALIGN = @as(i32, 2);
pub const SBS_BOTTOMALIGN = @as(i32, 4);
pub const SBS_RIGHTALIGN = @as(i32, 4);
pub const SBS_SIZEBOXTOPLEFTALIGN = @as(i32, 2);
pub const SBS_SIZEBOXBOTTOMRIGHTALIGN = @as(i32, 4);
pub const SBS_SIZEBOX = @as(i32, 8);
pub const SBS_SIZEGRIP = @as(i32, 16);
pub const SBM_SETPOS = @as(u32, 224);
pub const SBM_GETPOS = @as(u32, 225);
pub const SBM_SETRANGE = @as(u32, 226);
pub const SBM_SETRANGEREDRAW = @as(u32, 230);
pub const SBM_GETRANGE = @as(u32, 227);
pub const SBM_ENABLE_ARROWS = @as(u32, 228);
pub const SBM_SETSCROLLINFO = @as(u32, 233);
pub const SBM_GETSCROLLINFO = @as(u32, 234);
pub const SBM_GETSCROLLBARINFO = @as(u32, 235);
pub const MDIS_ALLCHILDSTYLES = @as(u32, 1);
pub const HELP_CONTEXT = @as(i32, 1);
pub const HELP_QUIT = @as(i32, 2);
pub const HELP_INDEX = @as(i32, 3);
pub const HELP_CONTENTS = @as(i32, 3);
pub const HELP_HELPONHELP = @as(i32, 4);
pub const HELP_SETINDEX = @as(i32, 5);
pub const HELP_SETCONTENTS = @as(i32, 5);
pub const HELP_CONTEXTPOPUP = @as(i32, 8);
pub const HELP_FORCEFILE = @as(i32, 9);
pub const HELP_KEY = @as(i32, 257);
pub const HELP_COMMAND = @as(i32, 258);
pub const HELP_PARTIALKEY = @as(i32, 261);
pub const HELP_MULTIKEY = @as(i32, 513);
pub const HELP_SETWINPOS = @as(i32, 515);
pub const HELP_CONTEXTMENU = @as(u32, 10);
pub const HELP_FINDER = @as(u32, 11);
pub const HELP_WM_HELP = @as(u32, 12);
pub const HELP_SETPOPUP_POS = @as(u32, 13);
pub const HELP_TCARD = @as(u32, 32768);
pub const HELP_TCARD_DATA = @as(u32, 16);
pub const HELP_TCARD_OTHER_CALLER = @as(u32, 17);
pub const IDH_NO_HELP = @as(u32, 28440);
pub const IDH_MISSING_CONTEXT = @as(u32, 28441);
pub const IDH_GENERIC_HELP_BUTTON = @as(u32, 28442);
pub const IDH_OK = @as(u32, 28443);
pub const IDH_CANCEL = @as(u32, 28444);
pub const IDH_HELP = @as(u32, 28445);
pub const MAX_TOUCH_PREDICTION_FILTER_TAPS = @as(u32, 3);
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_LATENCY = @as(u32, 8);
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_SAMPLETIME = @as(u32, 8);
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_USE_HW_TIMESTAMP = @as(u32, 1);
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_DELTA = @as(f32, 1e-3);
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MIN = @as(f32, 9e-1);
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MAX = @as(f32, 9.99e-1);
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_LEARNING_RATE = @as(f32, 1e-3);
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_EXPO_SMOOTH_ALPHA = @as(f32, 9.9e-1);
pub const MAX_LOGICALDPIOVERRIDE = @as(u32, 2);
pub const MIN_LOGICALDPIOVERRIDE = @as(i32, -2);
pub const FE_FONTSMOOTHINGSTANDARD = @as(u32, 1);
pub const FE_FONTSMOOTHINGCLEARTYPE = @as(u32, 2);
pub const FE_FONTSMOOTHINGORIENTATIONBGR = @as(u32, 0);
pub const FE_FONTSMOOTHINGORIENTATIONRGB = @as(u32, 1);
pub const CONTACTVISUALIZATION_OFF = @as(u32, 0);
pub const CONTACTVISUALIZATION_ON = @as(u32, 1);
pub const CONTACTVISUALIZATION_PRESENTATIONMODE = @as(u32, 2);
pub const GESTUREVISUALIZATION_OFF = @as(u32, 0);
pub const GESTUREVISUALIZATION_ON = @as(u32, 31);
pub const GESTUREVISUALIZATION_TAP = @as(u32, 1);
pub const GESTUREVISUALIZATION_DOUBLETAP = @as(u32, 2);
pub const GESTUREVISUALIZATION_PRESSANDTAP = @as(u32, 4);
pub const GESTUREVISUALIZATION_PRESSANDHOLD = @as(u32, 8);
pub const GESTUREVISUALIZATION_RIGHTTAP = @as(u32, 16);
pub const MOUSEWHEEL_ROUTING_FOCUS = @as(u32, 0);
pub const MOUSEWHEEL_ROUTING_HYBRID = @as(u32, 1);
pub const MOUSEWHEEL_ROUTING_MOUSE_POS = @as(u32, 2);
pub const PENVISUALIZATION_ON = @as(u32, 35);
pub const PENVISUALIZATION_OFF = @as(u32, 0);
pub const PENVISUALIZATION_TAP = @as(u32, 1);
pub const PENVISUALIZATION_DOUBLETAP = @as(u32, 2);
pub const PENVISUALIZATION_CURSOR = @as(u32, 32);
pub const PENARBITRATIONTYPE_NONE = @as(u32, 0);
pub const PENARBITRATIONTYPE_WIN8 = @as(u32, 1);
pub const PENARBITRATIONTYPE_FIS = @as(u32, 2);
pub const PENARBITRATIONTYPE_SPT = @as(u32, 3);
pub const PENARBITRATIONTYPE_MAX = @as(u32, 4);
pub const METRICS_USEDEFAULT = @as(i32, -1);
pub const ARW_STARTMASK = @as(i32, 3);
pub const ARW_STARTRIGHT = @as(i32, 1);
pub const ARW_STARTTOP = @as(i32, 2);
pub const ARW_LEFT = @as(i32, 0);
pub const ARW_RIGHT = @as(i32, 0);
pub const ARW_UP = @as(i32, 4);
pub const ARW_DOWN = @as(i32, 4);
pub const ARW_HIDE = @as(i32, 8);
pub const HCF_LOGONDESKTOP = @as(u32, 256);
pub const HCF_DEFAULTDESKTOP = @as(u32, 512);
pub const EDS_RAWMODE = @as(u32, 2);
pub const EDS_ROTATEDMODE = @as(u32, 4);
pub const EDD_GET_DEVICE_INTERFACE_NAME = @as(u32, 1);
pub const FKF_FILTERKEYSON = @as(u32, 1);
pub const FKF_AVAILABLE = @as(u32, 2);
pub const FKF_HOTKEYACTIVE = @as(u32, 4);
pub const FKF_CONFIRMHOTKEY = @as(u32, 8);
pub const FKF_HOTKEYSOUND = @as(u32, 16);
pub const FKF_INDICATOR = @as(u32, 32);
pub const FKF_CLICKON = @as(u32, 64);
pub const MKF_MOUSEKEYSON = @as(u32, 1);
pub const MKF_AVAILABLE = @as(u32, 2);
pub const MKF_HOTKEYACTIVE = @as(u32, 4);
pub const MKF_CONFIRMHOTKEY = @as(u32, 8);
pub const MKF_HOTKEYSOUND = @as(u32, 16);
pub const MKF_INDICATOR = @as(u32, 32);
pub const MKF_MODIFIERS = @as(u32, 64);
pub const MKF_REPLACENUMBERS = @as(u32, 128);
pub const MKF_LEFTBUTTONSEL = @as(u32, 268435456);
pub const MKF_RIGHTBUTTONSEL = @as(u32, 536870912);
pub const MKF_LEFTBUTTONDOWN = @as(u32, 16777216);
pub const MKF_RIGHTBUTTONDOWN = @as(u32, 33554432);
pub const MKF_MOUSEMODE = @as(u32, 2147483648);
pub const TKF_TOGGLEKEYSON = @as(u32, 1);
pub const TKF_AVAILABLE = @as(u32, 2);
pub const TKF_HOTKEYACTIVE = @as(u32, 4);
pub const TKF_CONFIRMHOTKEY = @as(u32, 8);
pub const TKF_HOTKEYSOUND = @as(u32, 16);
pub const TKF_INDICATOR = @as(u32, 32);
pub const MONITORINFOF_PRIMARY = @as(u32, 1);
pub const WINEVENT_OUTOFCONTEXT = @as(u32, 0);
pub const WINEVENT_SKIPOWNTHREAD = @as(u32, 1);
pub const WINEVENT_SKIPOWNPROCESS = @as(u32, 2);
pub const WINEVENT_INCONTEXT = @as(u32, 4);
pub const CHILDID_SELF = @as(u32, 0);
pub const INDEXID_OBJECT = @as(u32, 0);
pub const INDEXID_CONTAINER = @as(u32, 0);
pub const EVENT_MIN = @as(u32, 1);
pub const EVENT_MAX = @as(u32, 2147483647);
pub const EVENT_SYSTEM_SOUND = @as(u32, 1);
pub const EVENT_SYSTEM_ALERT = @as(u32, 2);
pub const EVENT_SYSTEM_FOREGROUND = @as(u32, 3);
pub const EVENT_SYSTEM_MENUSTART = @as(u32, 4);
pub const EVENT_SYSTEM_MENUEND = @as(u32, 5);
pub const EVENT_SYSTEM_MENUPOPUPSTART = @as(u32, 6);
pub const EVENT_SYSTEM_MENUPOPUPEND = @as(u32, 7);
pub const EVENT_SYSTEM_CAPTURESTART = @as(u32, 8);
pub const EVENT_SYSTEM_CAPTUREEND = @as(u32, 9);
pub const EVENT_SYSTEM_MOVESIZESTART = @as(u32, 10);
pub const EVENT_SYSTEM_MOVESIZEEND = @as(u32, 11);
pub const EVENT_SYSTEM_CONTEXTHELPSTART = @as(u32, 12);
pub const EVENT_SYSTEM_CONTEXTHELPEND = @as(u32, 13);
pub const EVENT_SYSTEM_DRAGDROPSTART = @as(u32, 14);
pub const EVENT_SYSTEM_DRAGDROPEND = @as(u32, 15);
pub const EVENT_SYSTEM_DIALOGSTART = @as(u32, 16);
pub const EVENT_SYSTEM_DIALOGEND = @as(u32, 17);
pub const EVENT_SYSTEM_SCROLLINGSTART = @as(u32, 18);
pub const EVENT_SYSTEM_SCROLLINGEND = @as(u32, 19);
pub const EVENT_SYSTEM_SWITCHSTART = @as(u32, 20);
pub const EVENT_SYSTEM_SWITCHEND = @as(u32, 21);
pub const EVENT_SYSTEM_MINIMIZESTART = @as(u32, 22);
pub const EVENT_SYSTEM_MINIMIZEEND = @as(u32, 23);
pub const EVENT_SYSTEM_DESKTOPSWITCH = @as(u32, 32);
pub const EVENT_SYSTEM_SWITCHER_APPGRABBED = @as(u32, 36);
pub const EVENT_SYSTEM_SWITCHER_APPOVERTARGET = @as(u32, 37);
pub const EVENT_SYSTEM_SWITCHER_APPDROPPED = @as(u32, 38);
pub const EVENT_SYSTEM_SWITCHER_CANCELLED = @as(u32, 39);
pub const EVENT_SYSTEM_IME_KEY_NOTIFICATION = @as(u32, 41);
pub const EVENT_SYSTEM_END = @as(u32, 255);
pub const EVENT_OEM_DEFINED_START = @as(u32, 257);
pub const EVENT_OEM_DEFINED_END = @as(u32, 511);
pub const EVENT_UIA_EVENTID_START = @as(u32, 19968);
pub const EVENT_UIA_EVENTID_END = @as(u32, 20223);
pub const EVENT_UIA_PROPID_START = @as(u32, 29952);
pub const EVENT_UIA_PROPID_END = @as(u32, 30207);
pub const EVENT_CONSOLE_CARET = @as(u32, 16385);
pub const EVENT_CONSOLE_UPDATE_REGION = @as(u32, 16386);
pub const EVENT_CONSOLE_UPDATE_SIMPLE = @as(u32, 16387);
pub const EVENT_CONSOLE_UPDATE_SCROLL = @as(u32, 16388);
pub const EVENT_CONSOLE_LAYOUT = @as(u32, 16389);
pub const EVENT_CONSOLE_START_APPLICATION = @as(u32, 16390);
pub const EVENT_CONSOLE_END_APPLICATION = @as(u32, 16391);
pub const CONSOLE_APPLICATION_16BIT = @as(u32, 0);
pub const CONSOLE_CARET_SELECTION = @as(u32, 1);
pub const CONSOLE_CARET_VISIBLE = @as(u32, 2);
pub const EVENT_CONSOLE_END = @as(u32, 16639);
pub const EVENT_OBJECT_CREATE = @as(u32, 32768);
pub const EVENT_OBJECT_DESTROY = @as(u32, 32769);
pub const EVENT_OBJECT_SHOW = @as(u32, 32770);
pub const EVENT_OBJECT_HIDE = @as(u32, 32771);
pub const EVENT_OBJECT_REORDER = @as(u32, 32772);
pub const EVENT_OBJECT_FOCUS = @as(u32, 32773);
pub const EVENT_OBJECT_SELECTION = @as(u32, 32774);
pub const EVENT_OBJECT_SELECTIONADD = @as(u32, 32775);
pub const EVENT_OBJECT_SELECTIONREMOVE = @as(u32, 32776);
pub const EVENT_OBJECT_SELECTIONWITHIN = @as(u32, 32777);
pub const EVENT_OBJECT_STATECHANGE = @as(u32, 32778);
pub const EVENT_OBJECT_LOCATIONCHANGE = @as(u32, 32779);
pub const EVENT_OBJECT_NAMECHANGE = @as(u32, 32780);
pub const EVENT_OBJECT_DESCRIPTIONCHANGE = @as(u32, 32781);
pub const EVENT_OBJECT_VALUECHANGE = @as(u32, 32782);
pub const EVENT_OBJECT_PARENTCHANGE = @as(u32, 32783);
pub const EVENT_OBJECT_HELPCHANGE = @as(u32, 32784);
pub const EVENT_OBJECT_DEFACTIONCHANGE = @as(u32, 32785);
pub const EVENT_OBJECT_ACCELERATORCHANGE = @as(u32, 32786);
pub const EVENT_OBJECT_INVOKED = @as(u32, 32787);
pub const EVENT_OBJECT_TEXTSELECTIONCHANGED = @as(u32, 32788);
pub const EVENT_OBJECT_CONTENTSCROLLED = @as(u32, 32789);
pub const EVENT_SYSTEM_ARRANGMENTPREVIEW = @as(u32, 32790);
pub const EVENT_OBJECT_CLOAKED = @as(u32, 32791);
pub const EVENT_OBJECT_UNCLOAKED = @as(u32, 32792);
pub const EVENT_OBJECT_LIVEREGIONCHANGED = @as(u32, 32793);
pub const EVENT_OBJECT_HOSTEDOBJECTSINVALIDATED = @as(u32, 32800);
pub const EVENT_OBJECT_DRAGSTART = @as(u32, 32801);
pub const EVENT_OBJECT_DRAGCANCEL = @as(u32, 32802);
pub const EVENT_OBJECT_DRAGCOMPLETE = @as(u32, 32803);
pub const EVENT_OBJECT_DRAGENTER = @as(u32, 32804);
pub const EVENT_OBJECT_DRAGLEAVE = @as(u32, 32805);
pub const EVENT_OBJECT_DRAGDROPPED = @as(u32, 32806);
pub const EVENT_OBJECT_IME_SHOW = @as(u32, 32807);
pub const EVENT_OBJECT_IME_HIDE = @as(u32, 32808);
pub const EVENT_OBJECT_IME_CHANGE = @as(u32, 32809);
pub const EVENT_OBJECT_TEXTEDIT_CONVERSIONTARGETCHANGED = @as(u32, 32816);
pub const EVENT_OBJECT_END = @as(u32, 33023);
pub const EVENT_AIA_START = @as(u32, 40960);
pub const EVENT_AIA_END = @as(u32, 45055);
pub const SOUND_SYSTEM_STARTUP = @as(u32, 1);
pub const SOUND_SYSTEM_SHUTDOWN = @as(u32, 2);
pub const SOUND_SYSTEM_BEEP = @as(u32, 3);
pub const SOUND_SYSTEM_ERROR = @as(u32, 4);
pub const SOUND_SYSTEM_QUESTION = @as(u32, 5);
pub const SOUND_SYSTEM_WARNING = @as(u32, 6);
pub const SOUND_SYSTEM_INFORMATION = @as(u32, 7);
pub const SOUND_SYSTEM_MAXIMIZE = @as(u32, 8);
pub const SOUND_SYSTEM_MINIMIZE = @as(u32, 9);
pub const SOUND_SYSTEM_RESTOREUP = @as(u32, 10);
pub const SOUND_SYSTEM_RESTOREDOWN = @as(u32, 11);
pub const SOUND_SYSTEM_APPSTART = @as(u32, 12);
pub const SOUND_SYSTEM_FAULT = @as(u32, 13);
pub const SOUND_SYSTEM_APPEND = @as(u32, 14);
pub const SOUND_SYSTEM_MENUCOMMAND = @as(u32, 15);
pub const SOUND_SYSTEM_MENUPOPUP = @as(u32, 16);
pub const CSOUND_SYSTEM = @as(u32, 16);
pub const CALERT_SYSTEM = @as(u32, 6);
pub const GUI_16BITTASK = @as(u32, 0);
pub const USER_DEFAULT_SCREEN_DPI = @as(u32, 96);
pub const STATE_SYSTEM_SELECTED = @as(u32, 2);
pub const STATE_SYSTEM_FOCUSED = @as(u32, 4);
pub const STATE_SYSTEM_CHECKED = @as(u32, 16);
pub const STATE_SYSTEM_MIXED = @as(u32, 32);
pub const STATE_SYSTEM_INDETERMINATE = @as(u32, 32);
pub const STATE_SYSTEM_READONLY = @as(u32, 64);
pub const STATE_SYSTEM_HOTTRACKED = @as(u32, 128);
pub const STATE_SYSTEM_DEFAULT = @as(u32, 256);
pub const STATE_SYSTEM_EXPANDED = @as(u32, 512);
pub const STATE_SYSTEM_COLLAPSED = @as(u32, 1024);
pub const STATE_SYSTEM_BUSY = @as(u32, 2048);
pub const STATE_SYSTEM_FLOATING = @as(u32, 4096);
pub const STATE_SYSTEM_MARQUEED = @as(u32, 8192);
pub const STATE_SYSTEM_ANIMATED = @as(u32, 16384);
pub const STATE_SYSTEM_SIZEABLE = @as(u32, 131072);
pub const STATE_SYSTEM_MOVEABLE = @as(u32, 262144);
pub const STATE_SYSTEM_SELFVOICING = @as(u32, 524288);
pub const STATE_SYSTEM_SELECTABLE = @as(u32, 2097152);
pub const STATE_SYSTEM_LINKED = @as(u32, 4194304);
pub const STATE_SYSTEM_TRAVERSED = @as(u32, 8388608);
pub const STATE_SYSTEM_MULTISELECTABLE = @as(u32, 16777216);
pub const STATE_SYSTEM_EXTSELECTABLE = @as(u32, 33554432);
pub const STATE_SYSTEM_ALERT_LOW = @as(u32, 67108864);
pub const STATE_SYSTEM_ALERT_MEDIUM = @as(u32, 134217728);
pub const STATE_SYSTEM_ALERT_HIGH = @as(u32, 268435456);
pub const STATE_SYSTEM_PROTECTED = @as(u32, 536870912);
pub const STATE_SYSTEM_VALID = @as(u32, 1073741823);
pub const CCHILDREN_TITLEBAR = @as(u32, 5);
pub const CCHILDREN_SCROLLBAR = @as(u32, 5);
pub const RIM_INPUT = @as(u32, 0);
pub const RIM_INPUTSINK = @as(u32, 1);
pub const RIM_TYPEMAX = @as(u32, 2);
pub const RI_MOUSE_LEFT_BUTTON_DOWN = @as(u32, 1);
pub const RI_MOUSE_LEFT_BUTTON_UP = @as(u32, 2);
pub const RI_MOUSE_RIGHT_BUTTON_DOWN = @as(u32, 4);
pub const RI_MOUSE_RIGHT_BUTTON_UP = @as(u32, 8);
pub const RI_MOUSE_MIDDLE_BUTTON_DOWN = @as(u32, 16);
pub const RI_MOUSE_MIDDLE_BUTTON_UP = @as(u32, 32);
pub const RI_MOUSE_BUTTON_1_DOWN = @as(u32, 1);
pub const RI_MOUSE_BUTTON_1_UP = @as(u32, 2);
pub const RI_MOUSE_BUTTON_2_DOWN = @as(u32, 4);
pub const RI_MOUSE_BUTTON_2_UP = @as(u32, 8);
pub const RI_MOUSE_BUTTON_3_DOWN = @as(u32, 16);
pub const RI_MOUSE_BUTTON_3_UP = @as(u32, 32);
pub const RI_MOUSE_BUTTON_4_DOWN = @as(u32, 64);
pub const RI_MOUSE_BUTTON_4_UP = @as(u32, 128);
pub const RI_MOUSE_BUTTON_5_DOWN = @as(u32, 256);
pub const RI_MOUSE_BUTTON_5_UP = @as(u32, 512);
pub const RI_MOUSE_WHEEL = @as(u32, 1024);
pub const RI_MOUSE_HWHEEL = @as(u32, 2048);
pub const RI_KEY_MAKE = @as(u32, 0);
pub const RI_KEY_BREAK = @as(u32, 1);
pub const RI_KEY_E0 = @as(u32, 2);
pub const RI_KEY_E1 = @as(u32, 4);
pub const RI_KEY_TERMSRV_SET_LED = @as(u32, 8);
pub const RI_KEY_TERMSRV_SHADOW = @as(u32, 16);
pub const RIDEV_EXMODEMASK = @as(u32, 240);
pub const GIDC_ARRIVAL = @as(u32, 1);
pub const GIDC_REMOVAL = @as(u32, 2);
pub const POINTER_DEVICE_PRODUCT_STRING_MAX = @as(u32, 520);
pub const PDC_ARRIVAL = @as(u32, 1);
pub const PDC_REMOVAL = @as(u32, 2);
pub const PDC_ORIENTATION_0 = @as(u32, 4);
pub const PDC_ORIENTATION_90 = @as(u32, 8);
pub const PDC_ORIENTATION_180 = @as(u32, 16);
pub const PDC_ORIENTATION_270 = @as(u32, 32);
pub const PDC_MODE_DEFAULT = @as(u32, 64);
pub const PDC_MODE_CENTERED = @as(u32, 128);
pub const PDC_MAPPING_CHANGE = @as(u32, 256);
pub const PDC_RESOLUTION = @as(u32, 512);
pub const PDC_ORIGIN = @as(u32, 1024);
pub const PDC_MODE_ASPECTRATIOPRESERVED = @as(u32, 2048);
pub const GF_BEGIN = @as(u32, 1);
pub const GF_INERTIA = @as(u32, 2);
pub const GF_END = @as(u32, 4);
pub const GESTURECONFIGMAXCOUNT = @as(u32, 256);
pub const GCF_INCLUDE_ANCESTORS = @as(u32, 1);
pub const NID_INTEGRATED_TOUCH = @as(u32, 1);
pub const NID_EXTERNAL_TOUCH = @as(u32, 2);
pub const NID_INTEGRATED_PEN = @as(u32, 4);
pub const NID_EXTERNAL_PEN = @as(u32, 8);
pub const NID_MULTI_INPUT = @as(u32, 64);
pub const NID_READY = @as(u32, 128);
pub const MAX_STR_BLOCKREASON = @as(u32, 256);
pub const STRSAFE_USE_SECURE_CRT = @as(u32, 0);
pub const STRSAFE_MAX_CCH = @as(u32, 2147483647);
pub const STRSAFE_IGNORE_NULLS = @as(u32, 256);
pub const STRSAFE_FILL_BEHIND_NULL = @as(u32, 512);
pub const STRSAFE_FILL_ON_FAILURE = @as(u32, 1024);
pub const STRSAFE_NULL_ON_FAILURE = @as(u32, 2048);
pub const STRSAFE_NO_TRUNCATION = @as(u32, 4096);
pub const STRSAFE_E_INSUFFICIENT_BUFFER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147024774));
pub const STRSAFE_E_INVALID_PARAMETER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147024809));
pub const STRSAFE_E_END_OF_FILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147024858));
pub const __WARNING_CYCLOMATIC_COMPLEXITY = @as(u32, 28734);
pub const __WARNING_USING_UNINIT_VAR = @as(u32, 6001);
pub const __WARNING_RETURN_UNINIT_VAR = @as(u32, 6101);
pub const __WARNING_DEREF_NULL_PTR = @as(u32, 6011);
pub const __WARNING_MISSING_ZERO_TERMINATION2 = @as(u32, 6054);
pub const __WARNING_INVALID_PARAM_VALUE_1 = @as(u32, 6387);
pub const __WARNING_INCORRECT_ANNOTATION = @as(u32, 26007);
pub const __WARNING_POTENTIAL_BUFFER_OVERFLOW_HIGH_PRIORITY = @as(u32, 26015);
pub const __WARNING_PRECONDITION_NULLTERMINATION_VIOLATION = @as(u32, 26035);
pub const __WARNING_POSTCONDITION_NULLTERMINATION_VIOLATION = @as(u32, 26036);
pub const __WARNING_HIGH_PRIORITY_OVERFLOW_POSTCONDITION = @as(u32, 26045);
pub const __WARNING_RANGE_POSTCONDITION_VIOLATION = @as(u32, 26061);
pub const __WARNING_POTENTIAL_RANGE_POSTCONDITION_VIOLATION = @as(u32, 26071);
pub const __WARNING_INVALID_PARAM_VALUE_3 = @as(u32, 28183);
pub const __WARNING_RETURNING_BAD_RESULT = @as(u32, 28196);
pub const __WARNING_BANNED_API_USAGE = @as(u32, 28719);
pub const __WARNING_POST_EXPECTED = @as(u32, 28210);
pub const HBMMENU_CALLBACK = @import("../zig.zig").typedConst(HBITMAP, @as(i32, -1));
pub const HBMMENU_SYSTEM = @import("../zig.zig").typedConst(HBITMAP, @as(i32, 1));
pub const HBMMENU_MBAR_RESTORE = @import("../zig.zig").typedConst(HBITMAP, @as(i32, 2));
pub const HBMMENU_MBAR_MINIMIZE = @import("../zig.zig").typedConst(HBITMAP, @as(i32, 3));
pub const HBMMENU_MBAR_CLOSE = @import("../zig.zig").typedConst(HBITMAP, @as(i32, 5));
pub const HBMMENU_MBAR_CLOSE_D = @import("../zig.zig").typedConst(HBITMAP, @as(i32, 6));
pub const HBMMENU_MBAR_MINIMIZE_D = @import("../zig.zig").typedConst(HBITMAP, @as(i32, 7));
pub const HBMMENU_POPUP_CLOSE = @import("../zig.zig").typedConst(HBITMAP, @as(i32, 8));
pub const HBMMENU_POPUP_RESTORE = @import("../zig.zig").typedConst(HBITMAP, @as(i32, 9));
pub const HBMMENU_POPUP_MAXIMIZE = @import("../zig.zig").typedConst(HBITMAP, @as(i32, 10));
pub const HBMMENU_POPUP_MINIMIZE = @import("../zig.zig").typedConst(HBITMAP, @as(i32, 11));
pub const CW_USEDEFAULT = @as(i32, -2147483648);
pub const LBS_STANDARD = @as(i32, 10485763);

//--------------------------------------------------------------------------------
// Section: Types (154)
//--------------------------------------------------------------------------------
pub const WNDCLASS_STYLES = packed struct(u32) {
    VREDRAW: u1 = 0,
    HREDRAW: u1 = 0,
    _2: u1 = 0,
    DBLCLKS: u1 = 0,
    _4: u1 = 0,
    OWNDC: u1 = 0,
    CLASSDC: u1 = 0,
    PARENTDC: u1 = 0,
    _8: u1 = 0,
    NOCLOSE: u1 = 0,
    _10: u1 = 0,
    SAVEBITS: u1 = 0,
    BYTEALIGNCLIENT: u1 = 0,
    BYTEALIGNWINDOW: u1 = 0,
    GLOBALCLASS: u1 = 0,
    _15: u1 = 0,
    IME: u1 = 0,
    DROPSHADOW: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const CS_VREDRAW = WNDCLASS_STYLES{ .VREDRAW = 1 };
pub const CS_HREDRAW = WNDCLASS_STYLES{ .HREDRAW = 1 };
pub const CS_DBLCLKS = WNDCLASS_STYLES{ .DBLCLKS = 1 };
pub const CS_OWNDC = WNDCLASS_STYLES{ .OWNDC = 1 };
pub const CS_CLASSDC = WNDCLASS_STYLES{ .CLASSDC = 1 };
pub const CS_PARENTDC = WNDCLASS_STYLES{ .PARENTDC = 1 };
pub const CS_NOCLOSE = WNDCLASS_STYLES{ .NOCLOSE = 1 };
pub const CS_SAVEBITS = WNDCLASS_STYLES{ .SAVEBITS = 1 };
pub const CS_BYTEALIGNCLIENT = WNDCLASS_STYLES{ .BYTEALIGNCLIENT = 1 };
pub const CS_BYTEALIGNWINDOW = WNDCLASS_STYLES{ .BYTEALIGNWINDOW = 1 };
pub const CS_GLOBALCLASS = WNDCLASS_STYLES{ .GLOBALCLASS = 1 };
pub const CS_IME = WNDCLASS_STYLES{ .IME = 1 };
pub const CS_DROPSHADOW = WNDCLASS_STYLES{ .DROPSHADOW = 1 };

pub const CWP_FLAGS = packed struct(u32) {
    SKIPINVISIBLE: u1 = 0,
    SKIPDISABLED: u1 = 0,
    SKIPTRANSPARENT: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const CWP_ALL = CWP_FLAGS{ };
pub const CWP_SKIPINVISIBLE = CWP_FLAGS{ .SKIPINVISIBLE = 1 };
pub const CWP_SKIPDISABLED = CWP_FLAGS{ .SKIPDISABLED = 1 };
pub const CWP_SKIPTRANSPARENT = CWP_FLAGS{ .SKIPTRANSPARENT = 1 };

pub const MESSAGEBOX_STYLE = packed struct(u32) {
    OKCANCEL: u1 = 0,
    ABORTRETRYIGNORE: u1 = 0,
    YESNO: u1 = 0,
    _3: u1 = 0,
    ICONHAND: u1 = 0,
    ICONQUESTION: u1 = 0,
    ICONASTERISK: u1 = 0,
    USERICON: u1 = 0,
    DEFBUTTON2: u1 = 0,
    DEFBUTTON3: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    SYSTEMMODAL: u1 = 0,
    TASKMODAL: u1 = 0,
    HELP: u1 = 0,
    NOFOCUS: u1 = 0,
    SETFOREGROUND: u1 = 0,
    DEFAULT_DESKTOP_ONLY: u1 = 0,
    TOPMOST: u1 = 0,
    RIGHT: u1 = 0,
    RTLREADING: u1 = 0,
    SERVICE_NOTIFICATION: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
    // ICONERROR (bit index 4) conflicts with ICONHAND
    // ICONINFORMATION (bit index 6) conflicts with ICONASTERISK
    // ICONSTOP (bit index 4) conflicts with ICONHAND
    // SERVICE_NOTIFICATION_NT3X (bit index 18) conflicts with TOPMOST
};
pub const MB_ABORTRETRYIGNORE = MESSAGEBOX_STYLE{ .ABORTRETRYIGNORE = 1 };
pub const MB_CANCELTRYCONTINUE = MESSAGEBOX_STYLE{
    .ABORTRETRYIGNORE = 1,
    .YESNO = 1,
};
pub const MB_HELP = MESSAGEBOX_STYLE{ .HELP = 1 };
pub const MB_OK = MESSAGEBOX_STYLE{ };
pub const MB_OKCANCEL = MESSAGEBOX_STYLE{ .OKCANCEL = 1 };
pub const MB_RETRYCANCEL = MESSAGEBOX_STYLE{
    .OKCANCEL = 1,
    .YESNO = 1,
};
pub const MB_YESNO = MESSAGEBOX_STYLE{ .YESNO = 1 };
pub const MB_YESNOCANCEL = MESSAGEBOX_STYLE{
    .OKCANCEL = 1,
    .ABORTRETRYIGNORE = 1,
};
pub const MB_ICONHAND = MESSAGEBOX_STYLE{ .ICONHAND = 1 };
pub const MB_ICONQUESTION = MESSAGEBOX_STYLE{ .ICONQUESTION = 1 };
pub const MB_ICONEXCLAMATION = MESSAGEBOX_STYLE{
    .ICONHAND = 1,
    .ICONQUESTION = 1,
};
pub const MB_ICONASTERISK = MESSAGEBOX_STYLE{ .ICONASTERISK = 1 };
pub const MB_USERICON = MESSAGEBOX_STYLE{ .USERICON = 1 };
pub const MB_ICONWARNING = MESSAGEBOX_STYLE{
    .ICONHAND = 1,
    .ICONQUESTION = 1,
};
pub const MB_ICONERROR = MESSAGEBOX_STYLE{ .ICONHAND = 1 };
pub const MB_ICONINFORMATION = MESSAGEBOX_STYLE{ .ICONASTERISK = 1 };
pub const MB_ICONSTOP = MESSAGEBOX_STYLE{ .ICONHAND = 1 };
pub const MB_DEFBUTTON1 = MESSAGEBOX_STYLE{ };
pub const MB_DEFBUTTON2 = MESSAGEBOX_STYLE{ .DEFBUTTON2 = 1 };
pub const MB_DEFBUTTON3 = MESSAGEBOX_STYLE{ .DEFBUTTON3 = 1 };
pub const MB_DEFBUTTON4 = MESSAGEBOX_STYLE{
    .DEFBUTTON2 = 1,
    .DEFBUTTON3 = 1,
};
pub const MB_APPLMODAL = MESSAGEBOX_STYLE{ };
pub const MB_SYSTEMMODAL = MESSAGEBOX_STYLE{ .SYSTEMMODAL = 1 };
pub const MB_TASKMODAL = MESSAGEBOX_STYLE{ .TASKMODAL = 1 };
pub const MB_NOFOCUS = MESSAGEBOX_STYLE{ .NOFOCUS = 1 };
pub const MB_SETFOREGROUND = MESSAGEBOX_STYLE{ .SETFOREGROUND = 1 };
pub const MB_DEFAULT_DESKTOP_ONLY = MESSAGEBOX_STYLE{ .DEFAULT_DESKTOP_ONLY = 1 };
pub const MB_TOPMOST = MESSAGEBOX_STYLE{ .TOPMOST = 1 };
pub const MB_RIGHT = MESSAGEBOX_STYLE{ .RIGHT = 1 };
pub const MB_RTLREADING = MESSAGEBOX_STYLE{ .RTLREADING = 1 };
pub const MB_SERVICE_NOTIFICATION = MESSAGEBOX_STYLE{ .SERVICE_NOTIFICATION = 1 };
pub const MB_SERVICE_NOTIFICATION_NT3X = MESSAGEBOX_STYLE{ .TOPMOST = 1 };
pub const MB_TYPEMASK = MESSAGEBOX_STYLE{
    .OKCANCEL = 1,
    .ABORTRETRYIGNORE = 1,
    .YESNO = 1,
    ._3 = 1,
};
pub const MB_ICONMASK = MESSAGEBOX_STYLE{
    .ICONHAND = 1,
    .ICONQUESTION = 1,
    .ICONASTERISK = 1,
    .USERICON = 1,
};
pub const MB_DEFMASK = MESSAGEBOX_STYLE{
    .DEFBUTTON2 = 1,
    .DEFBUTTON3 = 1,
    ._10 = 1,
    ._11 = 1,
};
pub const MB_MODEMASK = MESSAGEBOX_STYLE{
    .SYSTEMMODAL = 1,
    .TASKMODAL = 1,
};
pub const MB_MISCMASK = MESSAGEBOX_STYLE{
    .HELP = 1,
    .NOFOCUS = 1,
};

pub const MENU_ITEM_FLAGS = packed struct(u32) {
    GRAYED: u1 = 0,
    DISABLED: u1 = 0,
    BITMAP: u1 = 0,
    CHECKED: u1 = 0,
    POPUP: u1 = 0,
    MENUBARBREAK: u1 = 0,
    MENUBREAK: u1 = 0,
    CHANGE: u1 = 0,
    OWNERDRAW: u1 = 0,
    DELETE: u1 = 0,
    BYPOSITION: u1 = 0,
    SEPARATOR: u1 = 0,
    REMOVE: u1 = 0,
    SYSMENU: u1 = 0,
    HELP: u1 = 0,
    MOUSESELECT: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
    // APPEND (bit index 8) conflicts with OWNERDRAW
    // USECHECKBITMAPS (bit index 9) conflicts with DELETE
    // HILITE (bit index 7) conflicts with CHANGE
    // DEFAULT (bit index 12) conflicts with REMOVE
    // RIGHTJUSTIFY (bit index 14) conflicts with HELP
    // END (bit index 7) conflicts with CHANGE
};
pub const MF_BYCOMMAND = MENU_ITEM_FLAGS{ };
pub const MF_BYPOSITION = MENU_ITEM_FLAGS{ .BYPOSITION = 1 };
pub const MF_BITMAP = MENU_ITEM_FLAGS{ .BITMAP = 1 };
pub const MF_CHECKED = MENU_ITEM_FLAGS{ .CHECKED = 1 };
pub const MF_DISABLED = MENU_ITEM_FLAGS{ .DISABLED = 1 };
pub const MF_ENABLED = MENU_ITEM_FLAGS{ };
pub const MF_GRAYED = MENU_ITEM_FLAGS{ .GRAYED = 1 };
pub const MF_MENUBARBREAK = MENU_ITEM_FLAGS{ .MENUBARBREAK = 1 };
pub const MF_MENUBREAK = MENU_ITEM_FLAGS{ .MENUBREAK = 1 };
pub const MF_OWNERDRAW = MENU_ITEM_FLAGS{ .OWNERDRAW = 1 };
pub const MF_POPUP = MENU_ITEM_FLAGS{ .POPUP = 1 };
pub const MF_SEPARATOR = MENU_ITEM_FLAGS{ .SEPARATOR = 1 };
pub const MF_STRING = MENU_ITEM_FLAGS{ };
pub const MF_UNCHECKED = MENU_ITEM_FLAGS{ };
pub const MF_INSERT = MENU_ITEM_FLAGS{ };
pub const MF_CHANGE = MENU_ITEM_FLAGS{ .CHANGE = 1 };
pub const MF_APPEND = MENU_ITEM_FLAGS{ .OWNERDRAW = 1 };
pub const MF_DELETE = MENU_ITEM_FLAGS{ .DELETE = 1 };
pub const MF_REMOVE = MENU_ITEM_FLAGS{ .REMOVE = 1 };
pub const MF_USECHECKBITMAPS = MENU_ITEM_FLAGS{ .DELETE = 1 };
pub const MF_UNHILITE = MENU_ITEM_FLAGS{ };
pub const MF_HILITE = MENU_ITEM_FLAGS{ .CHANGE = 1 };
pub const MF_DEFAULT = MENU_ITEM_FLAGS{ .REMOVE = 1 };
pub const MF_SYSMENU = MENU_ITEM_FLAGS{ .SYSMENU = 1 };
pub const MF_HELP = MENU_ITEM_FLAGS{ .HELP = 1 };
pub const MF_RIGHTJUSTIFY = MENU_ITEM_FLAGS{ .HELP = 1 };
pub const MF_MOUSESELECT = MENU_ITEM_FLAGS{ .MOUSESELECT = 1 };
pub const MF_END = MENU_ITEM_FLAGS{ .CHANGE = 1 };

pub const SHOW_WINDOW_CMD = packed struct(u32) {
    SHOWNORMAL: u1 = 0,
    SHOWMINIMIZED: u1 = 0,
    SHOWNOACTIVATE: u1 = 0,
    SHOWNA: u1 = 0,
    SMOOTHSCROLL: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
    // NORMAL (bit index 0) conflicts with SHOWNORMAL
    // PARENTCLOSING (bit index 0) conflicts with SHOWNORMAL
    // OTHERZOOM (bit index 1) conflicts with SHOWMINIMIZED
    // OTHERUNZOOM (bit index 2) conflicts with SHOWNOACTIVATE
    // SCROLLCHILDREN (bit index 0) conflicts with SHOWNORMAL
    // INVALIDATE (bit index 1) conflicts with SHOWMINIMIZED
    // ERASE (bit index 2) conflicts with SHOWNOACTIVATE
};
pub const SW_FORCEMINIMIZE = SHOW_WINDOW_CMD{
    .SHOWNORMAL = 1,
    .SHOWMINIMIZED = 1,
    .SHOWNA = 1,
};
pub const SW_HIDE = SHOW_WINDOW_CMD{ };
pub const SW_MAXIMIZE = SHOW_WINDOW_CMD{
    .SHOWNORMAL = 1,
    .SHOWMINIMIZED = 1,
};
pub const SW_MINIMIZE = SHOW_WINDOW_CMD{
    .SHOWMINIMIZED = 1,
    .SHOWNOACTIVATE = 1,
};
pub const SW_RESTORE = SHOW_WINDOW_CMD{
    .SHOWNORMAL = 1,
    .SHOWNA = 1,
};
pub const SW_SHOW = SHOW_WINDOW_CMD{
    .SHOWNORMAL = 1,
    .SHOWNOACTIVATE = 1,
};
pub const SW_SHOWDEFAULT = SHOW_WINDOW_CMD{
    .SHOWMINIMIZED = 1,
    .SHOWNA = 1,
};
pub const SW_SHOWMAXIMIZED = SHOW_WINDOW_CMD{
    .SHOWNORMAL = 1,
    .SHOWMINIMIZED = 1,
};
pub const SW_SHOWMINIMIZED = SHOW_WINDOW_CMD{ .SHOWMINIMIZED = 1 };
pub const SW_SHOWMINNOACTIVE = SHOW_WINDOW_CMD{
    .SHOWNORMAL = 1,
    .SHOWMINIMIZED = 1,
    .SHOWNOACTIVATE = 1,
};
pub const SW_SHOWNA = SHOW_WINDOW_CMD{ .SHOWNA = 1 };
pub const SW_SHOWNOACTIVATE = SHOW_WINDOW_CMD{ .SHOWNOACTIVATE = 1 };
pub const SW_SHOWNORMAL = SHOW_WINDOW_CMD{ .SHOWNORMAL = 1 };
pub const SW_NORMAL = SHOW_WINDOW_CMD{ .SHOWNORMAL = 1 };
pub const SW_MAX = SHOW_WINDOW_CMD{
    .SHOWNORMAL = 1,
    .SHOWMINIMIZED = 1,
    .SHOWNA = 1,
};
pub const SW_PARENTCLOSING = SHOW_WINDOW_CMD{ .SHOWNORMAL = 1 };
pub const SW_OTHERZOOM = SHOW_WINDOW_CMD{ .SHOWMINIMIZED = 1 };
pub const SW_PARENTOPENING = SHOW_WINDOW_CMD{
    .SHOWNORMAL = 1,
    .SHOWMINIMIZED = 1,
};
pub const SW_OTHERUNZOOM = SHOW_WINDOW_CMD{ .SHOWNOACTIVATE = 1 };
pub const SW_SCROLLCHILDREN = SHOW_WINDOW_CMD{ .SHOWNORMAL = 1 };
pub const SW_INVALIDATE = SHOW_WINDOW_CMD{ .SHOWMINIMIZED = 1 };
pub const SW_ERASE = SHOW_WINDOW_CMD{ .SHOWNOACTIVATE = 1 };
pub const SW_SMOOTHSCROLL = SHOW_WINDOW_CMD{ .SMOOTHSCROLL = 1 };

pub const SYSTEM_PARAMETERS_INFO_ACTION = packed struct(u32) {
    GETBEEP: u1 = 0,
    SETBEEP: u1 = 0,
    SETMOUSE: u1 = 0,
    _3: u1 = 0,
    GETSCREENSAVEACTIVE: u1 = 0,
    SETDOUBLECLICKTIME: u1 = 0,
    GETSOUNDSENTRY: u1 = 0,
    GETPENDOCKTHRESHOLD: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    GETACTIVEWINDOWTRACKING: u1 = 0,
    GETFOREGROUNDLOCKTIMEOUT: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const SPI_GETBEEP = SYSTEM_PARAMETERS_INFO_ACTION{ .GETBEEP = 1 };
pub const SPI_SETBEEP = SYSTEM_PARAMETERS_INFO_ACTION{ .SETBEEP = 1 };
pub const SPI_GETMOUSE = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
};
pub const SPI_SETMOUSE = SYSTEM_PARAMETERS_INFO_ACTION{ .SETMOUSE = 1 };
pub const SPI_GETBORDER = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
};
pub const SPI_SETBORDER = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
};
pub const SPI_GETKEYBOARDSPEED = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    ._3 = 1,
};
pub const SPI_SETKEYBOARDSPEED = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    ._3 = 1,
};
pub const SPI_LANGDRIVER = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    ._3 = 1,
};
pub const SPI_ICONHORIZONTALSPACING = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
};
pub const SPI_GETSCREENSAVETIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
};
pub const SPI_SETSCREENSAVETIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
};
pub const SPI_GETSCREENSAVEACTIVE = SYSTEM_PARAMETERS_INFO_ACTION{ .GETSCREENSAVEACTIVE = 1 };
pub const SPI_SETSCREENSAVEACTIVE = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .GETSCREENSAVEACTIVE = 1,
};
pub const SPI_GETGRIDGRANULARITY = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .GETSCREENSAVEACTIVE = 1,
};
pub const SPI_SETGRIDGRANULARITY = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .GETSCREENSAVEACTIVE = 1,
};
pub const SPI_SETDESKWALLPAPER = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    .GETSCREENSAVEACTIVE = 1,
};
pub const SPI_SETDESKPATTERN = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    .GETSCREENSAVEACTIVE = 1,
};
pub const SPI_GETKEYBOARDDELAY = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    .GETSCREENSAVEACTIVE = 1,
};
pub const SPI_SETKEYBOARDDELAY = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    .GETSCREENSAVEACTIVE = 1,
};
pub const SPI_ICONVERTICALSPACING = SYSTEM_PARAMETERS_INFO_ACTION{
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
};
pub const SPI_GETICONTITLEWRAP = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
};
pub const SPI_SETICONTITLEWRAP = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
};
pub const SPI_GETMENUDROPALIGNMENT = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
};
pub const SPI_SETMENUDROPALIGNMENT = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
};
pub const SPI_SETDOUBLECLKWIDTH = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
};
pub const SPI_SETDOUBLECLKHEIGHT = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
};
pub const SPI_GETICONTITLELOGFONT = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
};
pub const SPI_SETDOUBLECLICKTIME = SYSTEM_PARAMETERS_INFO_ACTION{ .SETDOUBLECLICKTIME = 1 };
pub const SPI_SETMOUSEBUTTONSWAP = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_SETICONTITLELOGFONT = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_GETFASTTASKSWITCH = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_SETFASTTASKSWITCH = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_SETDRAGFULLWINDOWS = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_GETDRAGFULLWINDOWS = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_GETNONCLIENTMETRICS = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    ._3 = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_SETNONCLIENTMETRICS = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    ._3 = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_GETMINIMIZEDMETRICS = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    ._3 = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_SETMINIMIZEDMETRICS = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    ._3 = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_GETICONMETRICS = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_SETICONMETRICS = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_SETWORKAREA = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_GETWORKAREA = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_SETPENWINDOWS = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_GETHIGHCONTRAST = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETHIGHCONTRAST = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETKEYBOARDPREF = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETKEYBOARDPREF = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETSCREENREADER = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETSCREENREADER = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETANIMATION = SYSTEM_PARAMETERS_INFO_ACTION{
    ._3 = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETANIMATION = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    ._3 = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETFONTSMOOTHING = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    ._3 = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETFONTSMOOTHING = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    ._3 = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETDRAGWIDTH = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETDRAGHEIGHT = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETHANDHELD = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETLOWPOWERTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETPOWEROFFTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETSCREENSAVEACTIVE = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETLOWPOWERTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETPOWEROFFTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETLOWPOWERACTIVE = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETPOWEROFFACTIVE = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETLOWPOWERACTIVE = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETPOWEROFFACTIVE = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETCURSORS = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETICONS = SYSTEM_PARAMETERS_INFO_ACTION{
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETDEFAULTINPUTLANG = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETDEFAULTINPUTLANG = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETLANGTOGGLE = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETWINDOWSEXTENSION = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETMOUSETRAILS = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETMOUSETRAILS = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETSCREENSAVERRUNNING = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SCREENSAVERRUNNING = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETFILTERKEYS = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_SETFILTERKEYS = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_GETTOGGLEKEYS = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_SETTOGGLEKEYS = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_GETMOUSEKEYS = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_SETMOUSEKEYS = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_GETSHOWSOUNDS = SYSTEM_PARAMETERS_INFO_ACTION{
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_SETSHOWSOUNDS = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_GETSTICKYKEYS = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_SETSTICKYKEYS = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_GETACCESSTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_SETACCESSTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_GETSERIALKEYS = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_SETSERIALKEYS = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
};
pub const SPI_GETSOUNDSENTRY = SYSTEM_PARAMETERS_INFO_ACTION{ .GETSOUNDSENTRY = 1 };
pub const SPI_SETSOUNDSENTRY = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETSNAPTODEFBUTTON = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETSNAPTODEFBUTTON = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETMOUSEHOVERWIDTH = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETMOUSEHOVERWIDTH = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETMOUSEHOVERHEIGHT = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETMOUSEHOVERHEIGHT = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETMOUSEHOVERTIME = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETMOUSEHOVERTIME = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETWHEELSCROLLLINES = SYSTEM_PARAMETERS_INFO_ACTION{
    ._3 = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETWHEELSCROLLLINES = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    ._3 = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETMENUSHOWDELAY = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    ._3 = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETMENUSHOWDELAY = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    ._3 = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETWHEELSCROLLCHARS = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    ._3 = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETWHEELSCROLLCHARS = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETSHOWIMEUI = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETSHOWIMEUI = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETMOUSESPEED = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETMOUSESPEED = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETSCREENSAVERRUNNING = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETDESKWALLPAPER = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETAUDIODESCRIPTION = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETAUDIODESCRIPTION = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETSCREENSAVESECURE = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETSCREENSAVESECURE = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETHUNGAPPTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION{
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETHUNGAPPTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETWAITTOKILLTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETWAITTOKILLTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETWAITTOKILLSERVICETIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETWAITTOKILLSERVICETIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETMOUSEDOCKTHRESHOLD = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_SETMOUSEDOCKTHRESHOLD = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETSOUNDSENTRY = 1,
};
pub const SPI_GETPENDOCKTHRESHOLD = SYSTEM_PARAMETERS_INFO_ACTION{ .GETPENDOCKTHRESHOLD = 1 };
pub const SPI_SETPENDOCKTHRESHOLD = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .GETPENDOCKTHRESHOLD = 1,
};
pub const SPI_GETWINARRANGING = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .GETPENDOCKTHRESHOLD = 1,
};
pub const SPI_SETWINARRANGING = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .GETPENDOCKTHRESHOLD = 1,
};
pub const SPI_GETMOUSEDRAGOUTTHRESHOLD = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    .GETPENDOCKTHRESHOLD = 1,
};
pub const SPI_SETMOUSEDRAGOUTTHRESHOLD = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    .GETPENDOCKTHRESHOLD = 1,
};
pub const SPI_GETPENDRAGOUTTHRESHOLD = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    .GETPENDOCKTHRESHOLD = 1,
};
pub const SPI_SETPENDRAGOUTTHRESHOLD = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    .GETPENDOCKTHRESHOLD = 1,
};
pub const SPI_GETMOUSESIDEMOVETHRESHOLD = SYSTEM_PARAMETERS_INFO_ACTION{
    ._3 = 1,
    .GETPENDOCKTHRESHOLD = 1,
};
pub const SPI_SETMOUSESIDEMOVETHRESHOLD = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    ._3 = 1,
    .GETPENDOCKTHRESHOLD = 1,
};
pub const SPI_GETPENSIDEMOVETHRESHOLD = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    ._3 = 1,
    .GETPENDOCKTHRESHOLD = 1,
};
pub const SPI_SETPENSIDEMOVETHRESHOLD = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    ._3 = 1,
    .GETPENDOCKTHRESHOLD = 1,
};
pub const SPI_GETDRAGFROMMAXIMIZE = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    ._3 = 1,
    .GETPENDOCKTHRESHOLD = 1,
};
pub const SPI_SETDRAGFROMMAXIMIZE = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETPENDOCKTHRESHOLD = 1,
};
pub const SPI_GETSNAPSIZING = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETPENDOCKTHRESHOLD = 1,
};
pub const SPI_SETSNAPSIZING = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETPENDOCKTHRESHOLD = 1,
};
pub const SPI_GETDOCKMOVING = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETSCREENSAVEACTIVE = 1,
    .GETPENDOCKTHRESHOLD = 1,
};
pub const SPI_SETDOCKMOVING = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETPENDOCKTHRESHOLD = 1,
};
pub const SPI_GETTOUCHPREDICTIONPARAMETERS = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETPENDOCKTHRESHOLD = 1,
};
pub const SPI_SETTOUCHPREDICTIONPARAMETERS = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETPENDOCKTHRESHOLD = 1,
};
pub const SPI_GETLOGICALDPIOVERRIDE = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETPENDOCKTHRESHOLD = 1,
};
pub const SPI_SETLOGICALDPIOVERRIDE = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETPENDOCKTHRESHOLD = 1,
};
pub const SPI_GETMENURECT = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETPENDOCKTHRESHOLD = 1,
};
pub const SPI_SETMENURECT = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETPENDOCKTHRESHOLD = 1,
};
pub const SPI_GETACTIVEWINDOWTRACKING = SYSTEM_PARAMETERS_INFO_ACTION{ .GETACTIVEWINDOWTRACKING = 1 };
pub const SPI_SETACTIVEWINDOWTRACKING = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETMENUANIMATION = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETMENUANIMATION = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETCOMBOBOXANIMATION = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETCOMBOBOXANIMATION = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETLISTBOXSMOOTHSCROLLING = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETLISTBOXSMOOTHSCROLLING = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETGRADIENTCAPTIONS = SYSTEM_PARAMETERS_INFO_ACTION{
    ._3 = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETGRADIENTCAPTIONS = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    ._3 = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETKEYBOARDCUES = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    ._3 = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETKEYBOARDCUES = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    ._3 = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETMENUUNDERLINES = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    ._3 = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETMENUUNDERLINES = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    ._3 = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETACTIVEWNDTRKZORDER = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    ._3 = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETACTIVEWNDTRKZORDER = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETHOTTRACKING = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETHOTTRACKING = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETMENUFADE = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETMENUFADE = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETSELECTIONFADE = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETSELECTIONFADE = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETTOOLTIPANIMATION = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETTOOLTIPANIMATION = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETTOOLTIPFADE = SYSTEM_PARAMETERS_INFO_ACTION{
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETTOOLTIPFADE = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETCURSORSHADOW = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETCURSORSHADOW = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETMOUSESONAR = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETMOUSESONAR = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETMOUSECLICKLOCK = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETMOUSECLICKLOCK = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETMOUSEVANISH = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETDOUBLECLICKTIME = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETMOUSEVANISH = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETFLATMENU = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETFLATMENU = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETDROPSHADOW = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETDROPSHADOW = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETBLOCKSENDINPUTRESETS = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETBLOCKSENDINPUTRESETS = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETUIEFFECTS = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETUIEFFECTS = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETDISABLEOVERLAPPEDCONTENT = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETSOUNDSENTRY = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETDISABLEOVERLAPPEDCONTENT = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .GETSOUNDSENTRY = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETCLIENTAREAANIMATION = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .GETSOUNDSENTRY = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETCLIENTAREAANIMATION = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .GETSOUNDSENTRY = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETCLEARTYPE = SYSTEM_PARAMETERS_INFO_ACTION{
    ._3 = 1,
    .GETSOUNDSENTRY = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETCLEARTYPE = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    ._3 = 1,
    .GETSOUNDSENTRY = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETSPEECHRECOGNITION = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    ._3 = 1,
    .GETSOUNDSENTRY = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETSPEECHRECOGNITION = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    ._3 = 1,
    .GETSOUNDSENTRY = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETCARETBROWSING = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSOUNDSENTRY = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETCARETBROWSING = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSOUNDSENTRY = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETTHREADLOCALINPUTSETTINGS = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSOUNDSENTRY = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETTHREADLOCALINPUTSETTINGS = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSOUNDSENTRY = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETSYSTEMLANGUAGEBAR = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETSCREENSAVEACTIVE = 1,
    .GETSOUNDSENTRY = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_SETSYSTEMLANGUAGEBAR = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETSOUNDSENTRY = 1,
    .GETACTIVEWINDOWTRACKING = 1,
};
pub const SPI_GETFOREGROUNDLOCKTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION{ .GETFOREGROUNDLOCKTIMEOUT = 1 };
pub const SPI_SETFOREGROUNDLOCKTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_GETACTIVEWNDTRKTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_SETACTIVEWNDTRKTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_GETFOREGROUNDFLASHCOUNT = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_SETFOREGROUNDFLASHCOUNT = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_GETCARETWIDTH = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_SETCARETWIDTH = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_GETMOUSECLICKLOCKTIME = SYSTEM_PARAMETERS_INFO_ACTION{
    ._3 = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_SETMOUSECLICKLOCKTIME = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    ._3 = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_GETFONTSMOOTHINGTYPE = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    ._3 = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_SETFONTSMOOTHINGTYPE = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    ._3 = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_GETFONTSMOOTHINGCONTRAST = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    ._3 = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_SETFONTSMOOTHINGCONTRAST = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_GETFOCUSBORDERWIDTH = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_SETFOCUSBORDERWIDTH = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_GETFOCUSBORDERHEIGHT = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETSCREENSAVEACTIVE = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_SETFOCUSBORDERHEIGHT = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_GETFONTSMOOTHINGORIENTATION = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_SETFONTSMOOTHINGORIENTATION = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_GETMINIMUMHITRADIUS = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_SETMINIMUMHITRADIUS = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_GETMESSAGEDURATION = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_SETMESSAGEDURATION = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_GETCONTACTVISUALIZATION = SYSTEM_PARAMETERS_INFO_ACTION{
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_SETCONTACTVISUALIZATION = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_GETGESTUREVISUALIZATION = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_SETGESTUREVISUALIZATION = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_GETMOUSEWHEELROUTING = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_SETMOUSEWHEELROUTING = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_GETPENVISUALIZATION = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_SETPENVISUALIZATION = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETMOUSE = 1,
    ._3 = 1,
    .GETSCREENSAVEACTIVE = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_GETPENARBITRATIONTYPE = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETDOUBLECLICKTIME = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_SETPENARBITRATIONTYPE = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_GETCARETTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETBEEP = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_SETCARETTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETBEEP = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_GETHANDEDNESS = SYSTEM_PARAMETERS_INFO_ACTION{
    .SETMOUSE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};
pub const SPI_SETHANDEDNESS = SYSTEM_PARAMETERS_INFO_ACTION{
    .GETBEEP = 1,
    .SETMOUSE = 1,
    .SETDOUBLECLICKTIME = 1,
    .GETFOREGROUNDLOCKTIMEOUT = 1,
};

pub const TRACK_POPUP_MENU_FLAGS = packed struct(u32) {
    RECURSE: u1 = 0,
    RIGHTBUTTON: u1 = 0,
    CENTERALIGN: u1 = 0,
    RIGHTALIGN: u1 = 0,
    VCENTERALIGN: u1 = 0,
    BOTTOMALIGN: u1 = 0,
    VERTICAL: u1 = 0,
    NONOTIFY: u1 = 0,
    RETURNCMD: u1 = 0,
    _9: u1 = 0,
    HORPOSANIMATION: u1 = 0,
    HORNEGANIMATION: u1 = 0,
    VERPOSANIMATION: u1 = 0,
    VERNEGANIMATION: u1 = 0,
    NOANIMATION: u1 = 0,
    LAYOUTRTL: u1 = 0,
    WORKAREA: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const TPM_LEFTBUTTON = TRACK_POPUP_MENU_FLAGS{ };
pub const TPM_RIGHTBUTTON = TRACK_POPUP_MENU_FLAGS{ .RIGHTBUTTON = 1 };
pub const TPM_LEFTALIGN = TRACK_POPUP_MENU_FLAGS{ };
pub const TPM_CENTERALIGN = TRACK_POPUP_MENU_FLAGS{ .CENTERALIGN = 1 };
pub const TPM_RIGHTALIGN = TRACK_POPUP_MENU_FLAGS{ .RIGHTALIGN = 1 };
pub const TPM_TOPALIGN = TRACK_POPUP_MENU_FLAGS{ };
pub const TPM_VCENTERALIGN = TRACK_POPUP_MENU_FLAGS{ .VCENTERALIGN = 1 };
pub const TPM_BOTTOMALIGN = TRACK_POPUP_MENU_FLAGS{ .BOTTOMALIGN = 1 };
pub const TPM_HORIZONTAL = TRACK_POPUP_MENU_FLAGS{ };
pub const TPM_VERTICAL = TRACK_POPUP_MENU_FLAGS{ .VERTICAL = 1 };
pub const TPM_NONOTIFY = TRACK_POPUP_MENU_FLAGS{ .NONOTIFY = 1 };
pub const TPM_RETURNCMD = TRACK_POPUP_MENU_FLAGS{ .RETURNCMD = 1 };
pub const TPM_RECURSE = TRACK_POPUP_MENU_FLAGS{ .RECURSE = 1 };
pub const TPM_HORPOSANIMATION = TRACK_POPUP_MENU_FLAGS{ .HORPOSANIMATION = 1 };
pub const TPM_HORNEGANIMATION = TRACK_POPUP_MENU_FLAGS{ .HORNEGANIMATION = 1 };
pub const TPM_VERPOSANIMATION = TRACK_POPUP_MENU_FLAGS{ .VERPOSANIMATION = 1 };
pub const TPM_VERNEGANIMATION = TRACK_POPUP_MENU_FLAGS{ .VERNEGANIMATION = 1 };
pub const TPM_NOANIMATION = TRACK_POPUP_MENU_FLAGS{ .NOANIMATION = 1 };
pub const TPM_LAYOUTRTL = TRACK_POPUP_MENU_FLAGS{ .LAYOUTRTL = 1 };
pub const TPM_WORKAREA = TRACK_POPUP_MENU_FLAGS{ .WORKAREA = 1 };

pub const WINDOW_EX_STYLE = packed struct(u32) {
    DLGMODALFRAME: u1 = 0,
    _1: u1 = 0,
    NOPARENTNOTIFY: u1 = 0,
    TOPMOST: u1 = 0,
    ACCEPTFILES: u1 = 0,
    TRANSPARENT: u1 = 0,
    MDICHILD: u1 = 0,
    TOOLWINDOW: u1 = 0,
    WINDOWEDGE: u1 = 0,
    CLIENTEDGE: u1 = 0,
    CONTEXTHELP: u1 = 0,
    _11: u1 = 0,
    RIGHT: u1 = 0,
    RTLREADING: u1 = 0,
    LEFTSCROLLBAR: u1 = 0,
    _15: u1 = 0,
    CONTROLPARENT: u1 = 0,
    STATICEDGE: u1 = 0,
    APPWINDOW: u1 = 0,
    LAYERED: u1 = 0,
    NOINHERITLAYOUT: u1 = 0,
    NOREDIRECTIONBITMAP: u1 = 0,
    LAYOUTRTL: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    COMPOSITED: u1 = 0,
    _26: u1 = 0,
    NOACTIVATE: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const WS_EX_DLGMODALFRAME = WINDOW_EX_STYLE{ .DLGMODALFRAME = 1 };
pub const WS_EX_NOPARENTNOTIFY = WINDOW_EX_STYLE{ .NOPARENTNOTIFY = 1 };
pub const WS_EX_TOPMOST = WINDOW_EX_STYLE{ .TOPMOST = 1 };
pub const WS_EX_ACCEPTFILES = WINDOW_EX_STYLE{ .ACCEPTFILES = 1 };
pub const WS_EX_TRANSPARENT = WINDOW_EX_STYLE{ .TRANSPARENT = 1 };
pub const WS_EX_MDICHILD = WINDOW_EX_STYLE{ .MDICHILD = 1 };
pub const WS_EX_TOOLWINDOW = WINDOW_EX_STYLE{ .TOOLWINDOW = 1 };
pub const WS_EX_WINDOWEDGE = WINDOW_EX_STYLE{ .WINDOWEDGE = 1 };
pub const WS_EX_CLIENTEDGE = WINDOW_EX_STYLE{ .CLIENTEDGE = 1 };
pub const WS_EX_CONTEXTHELP = WINDOW_EX_STYLE{ .CONTEXTHELP = 1 };
pub const WS_EX_RIGHT = WINDOW_EX_STYLE{ .RIGHT = 1 };
pub const WS_EX_LEFT = WINDOW_EX_STYLE{ };
pub const WS_EX_RTLREADING = WINDOW_EX_STYLE{ .RTLREADING = 1 };
pub const WS_EX_LTRREADING = WINDOW_EX_STYLE{ };
pub const WS_EX_LEFTSCROLLBAR = WINDOW_EX_STYLE{ .LEFTSCROLLBAR = 1 };
pub const WS_EX_RIGHTSCROLLBAR = WINDOW_EX_STYLE{ };
pub const WS_EX_CONTROLPARENT = WINDOW_EX_STYLE{ .CONTROLPARENT = 1 };
pub const WS_EX_STATICEDGE = WINDOW_EX_STYLE{ .STATICEDGE = 1 };
pub const WS_EX_APPWINDOW = WINDOW_EX_STYLE{ .APPWINDOW = 1 };
pub const WS_EX_OVERLAPPEDWINDOW = WINDOW_EX_STYLE{
    .WINDOWEDGE = 1,
    .CLIENTEDGE = 1,
};
pub const WS_EX_PALETTEWINDOW = WINDOW_EX_STYLE{
    .TOPMOST = 1,
    .TOOLWINDOW = 1,
    .WINDOWEDGE = 1,
};
pub const WS_EX_LAYERED = WINDOW_EX_STYLE{ .LAYERED = 1 };
pub const WS_EX_NOINHERITLAYOUT = WINDOW_EX_STYLE{ .NOINHERITLAYOUT = 1 };
pub const WS_EX_NOREDIRECTIONBITMAP = WINDOW_EX_STYLE{ .NOREDIRECTIONBITMAP = 1 };
pub const WS_EX_LAYOUTRTL = WINDOW_EX_STYLE{ .LAYOUTRTL = 1 };
pub const WS_EX_COMPOSITED = WINDOW_EX_STYLE{ .COMPOSITED = 1 };
pub const WS_EX_NOACTIVATE = WINDOW_EX_STYLE{ .NOACTIVATE = 1 };

pub const WINDOW_STYLE = packed struct(u32) {
    ACTIVECAPTION: u1 = 0,
    _1: u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    TABSTOP: u1 = 0,
    GROUP: u1 = 0,
    THICKFRAME: u1 = 0,
    SYSMENU: u1 = 0,
    HSCROLL: u1 = 0,
    VSCROLL: u1 = 0,
    DLGFRAME: u1 = 0,
    BORDER: u1 = 0,
    MAXIMIZE: u1 = 0,
    CLIPCHILDREN: u1 = 0,
    CLIPSIBLINGS: u1 = 0,
    DISABLED: u1 = 0,
    VISIBLE: u1 = 0,
    MINIMIZE: u1 = 0,
    CHILD: u1 = 0,
    POPUP: u1 = 0,
    // MINIMIZEBOX (bit index 17) conflicts with GROUP
    // MAXIMIZEBOX (bit index 16) conflicts with TABSTOP
    // ICONIC (bit index 29) conflicts with MINIMIZE
    // SIZEBOX (bit index 18) conflicts with THICKFRAME
    // CHILDWINDOW (bit index 30) conflicts with CHILD
};
pub const WS_OVERLAPPED = WINDOW_STYLE{ };
pub const WS_POPUP = WINDOW_STYLE{ .POPUP = 1 };
pub const WS_CHILD = WINDOW_STYLE{ .CHILD = 1 };
pub const WS_MINIMIZE = WINDOW_STYLE{ .MINIMIZE = 1 };
pub const WS_VISIBLE = WINDOW_STYLE{ .VISIBLE = 1 };
pub const WS_DISABLED = WINDOW_STYLE{ .DISABLED = 1 };
pub const WS_CLIPSIBLINGS = WINDOW_STYLE{ .CLIPSIBLINGS = 1 };
pub const WS_CLIPCHILDREN = WINDOW_STYLE{ .CLIPCHILDREN = 1 };
pub const WS_MAXIMIZE = WINDOW_STYLE{ .MAXIMIZE = 1 };
pub const WS_CAPTION = WINDOW_STYLE{
    .DLGFRAME = 1,
    .BORDER = 1,
};
pub const WS_BORDER = WINDOW_STYLE{ .BORDER = 1 };
pub const WS_DLGFRAME = WINDOW_STYLE{ .DLGFRAME = 1 };
pub const WS_VSCROLL = WINDOW_STYLE{ .VSCROLL = 1 };
pub const WS_HSCROLL = WINDOW_STYLE{ .HSCROLL = 1 };
pub const WS_SYSMENU = WINDOW_STYLE{ .SYSMENU = 1 };
pub const WS_THICKFRAME = WINDOW_STYLE{ .THICKFRAME = 1 };
pub const WS_GROUP = WINDOW_STYLE{ .GROUP = 1 };
pub const WS_TABSTOP = WINDOW_STYLE{ .TABSTOP = 1 };
pub const WS_MINIMIZEBOX = WINDOW_STYLE{ .GROUP = 1 };
pub const WS_MAXIMIZEBOX = WINDOW_STYLE{ .TABSTOP = 1 };
pub const WS_TILED = WINDOW_STYLE{ };
pub const WS_ICONIC = WINDOW_STYLE{ .MINIMIZE = 1 };
pub const WS_SIZEBOX = WINDOW_STYLE{ .THICKFRAME = 1 };
pub const WS_TILEDWINDOW = WINDOW_STYLE{
    .TABSTOP = 1,
    .GROUP = 1,
    .THICKFRAME = 1,
    .SYSMENU = 1,
    .DLGFRAME = 1,
    .BORDER = 1,
};
pub const WS_OVERLAPPEDWINDOW = WINDOW_STYLE{
    .TABSTOP = 1,
    .GROUP = 1,
    .THICKFRAME = 1,
    .SYSMENU = 1,
    .DLGFRAME = 1,
    .BORDER = 1,
};
pub const WS_POPUPWINDOW = WINDOW_STYLE{
    .SYSMENU = 1,
    .BORDER = 1,
    .POPUP = 1,
};
pub const WS_CHILDWINDOW = WINDOW_STYLE{ .CHILD = 1 };
pub const WS_ACTIVECAPTION = WINDOW_STYLE{ .ACTIVECAPTION = 1 };

pub const OBJECT_IDENTIFIER = enum(i32) {
    WINDOW = 0,
    SYSMENU = -1,
    TITLEBAR = -2,
    MENU = -3,
    CLIENT = -4,
    VSCROLL = -5,
    HSCROLL = -6,
    SIZEGRIP = -7,
    CARET = -8,
    CURSOR = -9,
    ALERT = -10,
    SOUND = -11,
    QUERYCLASSNAMEIDX = -12,
    NATIVEOM = -16,
};
pub const OBJID_WINDOW = OBJECT_IDENTIFIER.WINDOW;
pub const OBJID_SYSMENU = OBJECT_IDENTIFIER.SYSMENU;
pub const OBJID_TITLEBAR = OBJECT_IDENTIFIER.TITLEBAR;
pub const OBJID_MENU = OBJECT_IDENTIFIER.MENU;
pub const OBJID_CLIENT = OBJECT_IDENTIFIER.CLIENT;
pub const OBJID_VSCROLL = OBJECT_IDENTIFIER.VSCROLL;
pub const OBJID_HSCROLL = OBJECT_IDENTIFIER.HSCROLL;
pub const OBJID_SIZEGRIP = OBJECT_IDENTIFIER.SIZEGRIP;
pub const OBJID_CARET = OBJECT_IDENTIFIER.CARET;
pub const OBJID_CURSOR = OBJECT_IDENTIFIER.CURSOR;
pub const OBJID_ALERT = OBJECT_IDENTIFIER.ALERT;
pub const OBJID_SOUND = OBJECT_IDENTIFIER.SOUND;
pub const OBJID_QUERYCLASSNAMEIDX = OBJECT_IDENTIFIER.QUERYCLASSNAMEIDX;
pub const OBJID_NATIVEOM = OBJECT_IDENTIFIER.NATIVEOM;

pub const MENU_ITEM_TYPE = packed struct(u32) {
    _0: u1 = 0,
    _1: u1 = 0,
    BITMAP: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    MENUBARBREAK: u1 = 0,
    MENUBREAK: u1 = 0,
    _7: u1 = 0,
    OWNERDRAW: u1 = 0,
    RADIOCHECK: u1 = 0,
    _10: u1 = 0,
    SEPARATOR: u1 = 0,
    _12: u1 = 0,
    RIGHTORDER: u1 = 0,
    RIGHTJUSTIFY: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const MFT_BITMAP = MENU_ITEM_TYPE{ .BITMAP = 1 };
pub const MFT_MENUBARBREAK = MENU_ITEM_TYPE{ .MENUBARBREAK = 1 };
pub const MFT_MENUBREAK = MENU_ITEM_TYPE{ .MENUBREAK = 1 };
pub const MFT_OWNERDRAW = MENU_ITEM_TYPE{ .OWNERDRAW = 1 };
pub const MFT_RADIOCHECK = MENU_ITEM_TYPE{ .RADIOCHECK = 1 };
pub const MFT_RIGHTJUSTIFY = MENU_ITEM_TYPE{ .RIGHTJUSTIFY = 1 };
pub const MFT_RIGHTORDER = MENU_ITEM_TYPE{ .RIGHTORDER = 1 };
pub const MFT_SEPARATOR = MENU_ITEM_TYPE{ .SEPARATOR = 1 };
pub const MFT_STRING = MENU_ITEM_TYPE{ };

pub const MESSAGEBOX_RESULT = enum(i32) {
    OK = 1,
    CANCEL = 2,
    ABORT = 3,
    RETRY = 4,
    IGNORE = 5,
    YES = 6,
    NO = 7,
    CLOSE = 8,
    HELP = 9,
    TRYAGAIN = 10,
    CONTINUE = 11,
    ASYNC = 32001,
    TIMEOUT = 32000,
};
pub const IDOK = MESSAGEBOX_RESULT.OK;
pub const IDCANCEL = MESSAGEBOX_RESULT.CANCEL;
pub const IDABORT = MESSAGEBOX_RESULT.ABORT;
pub const IDRETRY = MESSAGEBOX_RESULT.RETRY;
pub const IDIGNORE = MESSAGEBOX_RESULT.IGNORE;
pub const IDYES = MESSAGEBOX_RESULT.YES;
pub const IDNO = MESSAGEBOX_RESULT.NO;
pub const IDCLOSE = MESSAGEBOX_RESULT.CLOSE;
pub const IDHELP = MESSAGEBOX_RESULT.HELP;
pub const IDTRYAGAIN = MESSAGEBOX_RESULT.TRYAGAIN;
pub const IDCONTINUE = MESSAGEBOX_RESULT.CONTINUE;
pub const IDASYNC = MESSAGEBOX_RESULT.ASYNC;
pub const IDTIMEOUT = MESSAGEBOX_RESULT.TIMEOUT;

pub const MENU_ITEM_STATE = packed struct(u32) {
    _0: u1 = 0,
    _1: u1 = 0,
    _2: u1 = 0,
    CHECKED: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    HILITE: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    DEFAULT: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const MFS_GRAYED = MENU_ITEM_STATE{
    ._0 = 1,
    ._1 = 1,
};
pub const MFS_DISABLED = MENU_ITEM_STATE{
    ._0 = 1,
    ._1 = 1,
};
pub const MFS_CHECKED = MENU_ITEM_STATE{ .CHECKED = 1 };
pub const MFS_HILITE = MENU_ITEM_STATE{ .HILITE = 1 };
pub const MFS_ENABLED = MENU_ITEM_STATE{ };
pub const MFS_UNCHECKED = MENU_ITEM_STATE{ };
pub const MFS_UNHILITE = MENU_ITEM_STATE{ };
pub const MFS_DEFAULT = MENU_ITEM_STATE{ .DEFAULT = 1 };

pub const SCROLLBAR_CONSTANTS = packed struct(u32) {
    VERT: u1 = 0,
    CTL: u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const SB_CTL = SCROLLBAR_CONSTANTS{ .CTL = 1 };
pub const SB_HORZ = SCROLLBAR_CONSTANTS{ };
pub const SB_VERT = SCROLLBAR_CONSTANTS{ .VERT = 1 };
pub const SB_BOTH = SCROLLBAR_CONSTANTS{
    .VERT = 1,
    .CTL = 1,
};

pub const GET_CLASS_LONG_INDEX = enum(i32) {
    W_ATOM = -32,
    L_CBCLSEXTRA = -20,
    L_CBWNDEXTRA = -18,
    L_HBRBACKGROUND = -10,
    L_HCURSOR = -12,
    L_HICON = -14,
    L_HICONSM = -34,
    L_HMODULE = -16,
    L_MENUNAME = -8,
    L_STYLE = -26,
    L_WNDPROC = -24,
    pub const LP_HBRBACKGROUND = .L_HBRBACKGROUND;
    pub const LP_HCURSOR = .L_HCURSOR;
    pub const LP_HICON = .L_HICON;
    pub const LP_HICONSM = .L_HICONSM;
    pub const LP_HMODULE = .L_HMODULE;
    pub const LP_MENUNAME = .L_MENUNAME;
    pub const LP_WNDPROC = .L_WNDPROC;
};
pub const GCW_ATOM = GET_CLASS_LONG_INDEX.W_ATOM;
pub const GCL_CBCLSEXTRA = GET_CLASS_LONG_INDEX.L_CBCLSEXTRA;
pub const GCL_CBWNDEXTRA = GET_CLASS_LONG_INDEX.L_CBWNDEXTRA;
pub const GCL_HBRBACKGROUND = GET_CLASS_LONG_INDEX.L_HBRBACKGROUND;
pub const GCL_HCURSOR = GET_CLASS_LONG_INDEX.L_HCURSOR;
pub const GCL_HICON = GET_CLASS_LONG_INDEX.L_HICON;
pub const GCL_HICONSM = GET_CLASS_LONG_INDEX.L_HICONSM;
pub const GCL_HMODULE = GET_CLASS_LONG_INDEX.L_HMODULE;
pub const GCL_MENUNAME = GET_CLASS_LONG_INDEX.L_MENUNAME;
pub const GCL_STYLE = GET_CLASS_LONG_INDEX.L_STYLE;
pub const GCL_WNDPROC = GET_CLASS_LONG_INDEX.L_WNDPROC;
pub const GCLP_HBRBACKGROUND = GET_CLASS_LONG_INDEX.L_HBRBACKGROUND;
pub const GCLP_HCURSOR = GET_CLASS_LONG_INDEX.L_HCURSOR;
pub const GCLP_HICON = GET_CLASS_LONG_INDEX.L_HICON;
pub const GCLP_HICONSM = GET_CLASS_LONG_INDEX.L_HICONSM;
pub const GCLP_HMODULE = GET_CLASS_LONG_INDEX.L_HMODULE;
pub const GCLP_MENUNAME = GET_CLASS_LONG_INDEX.L_MENUNAME;
pub const GCLP_WNDPROC = GET_CLASS_LONG_INDEX.L_WNDPROC;

pub const UPDATE_LAYERED_WINDOW_FLAGS = enum(u32) {
    ALPHA = 2,
    COLORKEY = 1,
    OPAQUE = 4,
    EX_NORESIZE = 8,
};
pub const ULW_ALPHA = UPDATE_LAYERED_WINDOW_FLAGS.ALPHA;
pub const ULW_COLORKEY = UPDATE_LAYERED_WINDOW_FLAGS.COLORKEY;
pub const ULW_OPAQUE = UPDATE_LAYERED_WINDOW_FLAGS.OPAQUE;
pub const ULW_EX_NORESIZE = UPDATE_LAYERED_WINDOW_FLAGS.EX_NORESIZE;

pub const WINDOW_LONG_PTR_INDEX = enum(i32) {
    _EXSTYLE = -20,
    P_HINSTANCE = -6,
    P_HWNDPARENT = -8,
    P_ID = -12,
    _STYLE = -16,
    P_USERDATA = -21,
    P_WNDPROC = -4,
_,
    pub const _HINSTANCE = .P_HINSTANCE;
    pub const _ID = .P_ID;
    pub const _USERDATA = .P_USERDATA;
    pub const _WNDPROC = .P_WNDPROC;
    pub const _HWNDPARENT = .P_HWNDPARENT;
    pub fn tagName(self: WINDOW_LONG_PTR_INDEX) ?[:0]const u8 {
        return switch (self) {
            ._EXSTYLE => "_EXSTYLE",
            .P_HINSTANCE => "P_HINSTANCE",
            .P_HWNDPARENT => "P_HWNDPARENT",
            .P_ID => "P_ID",
            ._STYLE => "_STYLE",
            .P_USERDATA => "P_USERDATA",
            .P_WNDPROC => "P_WNDPROC",
            else => null,
        };
    }
    pub fn format(
        self: WINDOW_LONG_PTR_INDEX,
        comptime fmt: []const u8,
        options: @import("std").fmt.FormatOptions,
        writer: anytype,
    ) !void {
        _ = fmt;
        _ = options;
        try writer.print("{s}({})", .{self.value.tagName() orelse "?", @intFromEnum(self.value)});
    }
};
pub const GWL_EXSTYLE = WINDOW_LONG_PTR_INDEX._EXSTYLE;
pub const GWLP_HINSTANCE = WINDOW_LONG_PTR_INDEX.P_HINSTANCE;
pub const GWLP_HWNDPARENT = WINDOW_LONG_PTR_INDEX.P_HWNDPARENT;
pub const GWLP_ID = WINDOW_LONG_PTR_INDEX.P_ID;
pub const GWL_STYLE = WINDOW_LONG_PTR_INDEX._STYLE;
pub const GWLP_USERDATA = WINDOW_LONG_PTR_INDEX.P_USERDATA;
pub const GWLP_WNDPROC = WINDOW_LONG_PTR_INDEX.P_WNDPROC;
pub const GWL_HINSTANCE = WINDOW_LONG_PTR_INDEX.P_HINSTANCE;
pub const GWL_ID = WINDOW_LONG_PTR_INDEX.P_ID;
pub const GWL_USERDATA = WINDOW_LONG_PTR_INDEX.P_USERDATA;
pub const GWL_WNDPROC = WINDOW_LONG_PTR_INDEX.P_WNDPROC;
pub const GWL_HWNDPARENT = WINDOW_LONG_PTR_INDEX.P_HWNDPARENT;

pub const ANIMATE_WINDOW_FLAGS = packed struct(u32) {
    HOR_POSITIVE: u1 = 0,
    HOR_NEGATIVE: u1 = 0,
    VER_POSITIVE: u1 = 0,
    VER_NEGATIVE: u1 = 0,
    CENTER: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    HIDE: u1 = 0,
    ACTIVATE: u1 = 0,
    SLIDE: u1 = 0,
    BLEND: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const AW_ACTIVATE = ANIMATE_WINDOW_FLAGS{ .ACTIVATE = 1 };
pub const AW_BLEND = ANIMATE_WINDOW_FLAGS{ .BLEND = 1 };
pub const AW_CENTER = ANIMATE_WINDOW_FLAGS{ .CENTER = 1 };
pub const AW_HIDE = ANIMATE_WINDOW_FLAGS{ .HIDE = 1 };
pub const AW_HOR_POSITIVE = ANIMATE_WINDOW_FLAGS{ .HOR_POSITIVE = 1 };
pub const AW_HOR_NEGATIVE = ANIMATE_WINDOW_FLAGS{ .HOR_NEGATIVE = 1 };
pub const AW_SLIDE = ANIMATE_WINDOW_FLAGS{ .SLIDE = 1 };
pub const AW_VER_POSITIVE = ANIMATE_WINDOW_FLAGS{ .VER_POSITIVE = 1 };
pub const AW_VER_NEGATIVE = ANIMATE_WINDOW_FLAGS{ .VER_NEGATIVE = 1 };

pub const CHANGE_WINDOW_MESSAGE_FILTER_FLAGS = enum(u32) {
    ADD = 1,
    REMOVE = 2,
};
pub const MSGFLT_ADD = CHANGE_WINDOW_MESSAGE_FILTER_FLAGS.ADD;
pub const MSGFLT_REMOVE = CHANGE_WINDOW_MESSAGE_FILTER_FLAGS.REMOVE;

pub const GDI_IMAGE_TYPE = enum(u32) {
    BITMAP = 0,
    CURSOR = 2,
    ICON = 1,
};
pub const IMAGE_BITMAP = GDI_IMAGE_TYPE.BITMAP;
pub const IMAGE_CURSOR = GDI_IMAGE_TYPE.CURSOR;
pub const IMAGE_ICON = GDI_IMAGE_TYPE.ICON;

pub const WINDOWS_HOOK_ID = enum(i32) {
    CALLWNDPROC = 4,
    CALLWNDPROCRET = 12,
    CBT = 5,
    DEBUG = 9,
    FOREGROUNDIDLE = 11,
    GETMESSAGE = 3,
    JOURNALPLAYBACK = 1,
    JOURNALRECORD = 0,
    KEYBOARD = 2,
    KEYBOARD_LL = 13,
    MOUSE = 7,
    MOUSE_LL = 14,
    MSGFILTER = -1,
    SHELL = 10,
    SYSMSGFILTER = 6,
};
pub const WH_CALLWNDPROC = WINDOWS_HOOK_ID.CALLWNDPROC;
pub const WH_CALLWNDPROCRET = WINDOWS_HOOK_ID.CALLWNDPROCRET;
pub const WH_CBT = WINDOWS_HOOK_ID.CBT;
pub const WH_DEBUG = WINDOWS_HOOK_ID.DEBUG;
pub const WH_FOREGROUNDIDLE = WINDOWS_HOOK_ID.FOREGROUNDIDLE;
pub const WH_GETMESSAGE = WINDOWS_HOOK_ID.GETMESSAGE;
pub const WH_JOURNALPLAYBACK = WINDOWS_HOOK_ID.JOURNALPLAYBACK;
pub const WH_JOURNALRECORD = WINDOWS_HOOK_ID.JOURNALRECORD;
pub const WH_KEYBOARD = WINDOWS_HOOK_ID.KEYBOARD;
pub const WH_KEYBOARD_LL = WINDOWS_HOOK_ID.KEYBOARD_LL;
pub const WH_MOUSE = WINDOWS_HOOK_ID.MOUSE;
pub const WH_MOUSE_LL = WINDOWS_HOOK_ID.MOUSE_LL;
pub const WH_MSGFILTER = WINDOWS_HOOK_ID.MSGFILTER;
pub const WH_SHELL = WINDOWS_HOOK_ID.SHELL;
pub const WH_SYSMSGFILTER = WINDOWS_HOOK_ID.SYSMSGFILTER;

pub const IMAGE_FLAGS = packed struct(u32) {
    MONOCHROME: u1 = 0,
    _1: u1 = 0,
    COPYRETURNORG: u1 = 0,
    COPYDELETEORG: u1 = 0,
    LOADFROMFILE: u1 = 0,
    LOADTRANSPARENT: u1 = 0,
    DEFAULTSIZE: u1 = 0,
    VGACOLOR: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    LOADMAP3DCOLORS: u1 = 0,
    CREATEDIBSECTION: u1 = 0,
    COPYFROMRESOURCE: u1 = 0,
    SHARED: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const LR_CREATEDIBSECTION = IMAGE_FLAGS{ .CREATEDIBSECTION = 1 };
pub const LR_DEFAULTCOLOR = IMAGE_FLAGS{ };
pub const LR_DEFAULTSIZE = IMAGE_FLAGS{ .DEFAULTSIZE = 1 };
pub const LR_LOADFROMFILE = IMAGE_FLAGS{ .LOADFROMFILE = 1 };
pub const LR_LOADMAP3DCOLORS = IMAGE_FLAGS{ .LOADMAP3DCOLORS = 1 };
pub const LR_LOADTRANSPARENT = IMAGE_FLAGS{ .LOADTRANSPARENT = 1 };
pub const LR_MONOCHROME = IMAGE_FLAGS{ .MONOCHROME = 1 };
pub const LR_SHARED = IMAGE_FLAGS{ .SHARED = 1 };
pub const LR_VGACOLOR = IMAGE_FLAGS{ .VGACOLOR = 1 };
pub const LR_COPYDELETEORG = IMAGE_FLAGS{ .COPYDELETEORG = 1 };
pub const LR_COPYFROMRESOURCE = IMAGE_FLAGS{ .COPYFROMRESOURCE = 1 };
pub const LR_COPYRETURNORG = IMAGE_FLAGS{ .COPYRETURNORG = 1 };

pub const SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS = packed struct(u32) {
    UPDATEINIFILE: u1 = 0,
    SENDCHANGE: u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
    // SENDWININICHANGE (bit index 1) conflicts with SENDCHANGE
};
pub const SPIF_UPDATEINIFILE = SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS{ .UPDATEINIFILE = 1 };
pub const SPIF_SENDCHANGE = SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS{ .SENDCHANGE = 1 };
pub const SPIF_SENDWININICHANGE = SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS{ .SENDCHANGE = 1 };

pub const SET_WINDOW_POS_FLAGS = packed struct(u32) {
    NOSIZE: u1 = 0,
    NOMOVE: u1 = 0,
    NOZORDER: u1 = 0,
    NOREDRAW: u1 = 0,
    NOACTIVATE: u1 = 0,
    DRAWFRAME: u1 = 0,
    SHOWWINDOW: u1 = 0,
    HIDEWINDOW: u1 = 0,
    NOCOPYBITS: u1 = 0,
    NOOWNERZORDER: u1 = 0,
    NOSENDCHANGING: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    DEFERERASE: u1 = 0,
    ASYNCWINDOWPOS: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
    // FRAMECHANGED (bit index 5) conflicts with DRAWFRAME
    // NOREPOSITION (bit index 9) conflicts with NOOWNERZORDER
};
pub const SWP_ASYNCWINDOWPOS = SET_WINDOW_POS_FLAGS{ .ASYNCWINDOWPOS = 1 };
pub const SWP_DEFERERASE = SET_WINDOW_POS_FLAGS{ .DEFERERASE = 1 };
pub const SWP_DRAWFRAME = SET_WINDOW_POS_FLAGS{ .DRAWFRAME = 1 };
pub const SWP_FRAMECHANGED = SET_WINDOW_POS_FLAGS{ .DRAWFRAME = 1 };
pub const SWP_HIDEWINDOW = SET_WINDOW_POS_FLAGS{ .HIDEWINDOW = 1 };
pub const SWP_NOACTIVATE = SET_WINDOW_POS_FLAGS{ .NOACTIVATE = 1 };
pub const SWP_NOCOPYBITS = SET_WINDOW_POS_FLAGS{ .NOCOPYBITS = 1 };
pub const SWP_NOMOVE = SET_WINDOW_POS_FLAGS{ .NOMOVE = 1 };
pub const SWP_NOOWNERZORDER = SET_WINDOW_POS_FLAGS{ .NOOWNERZORDER = 1 };
pub const SWP_NOREDRAW = SET_WINDOW_POS_FLAGS{ .NOREDRAW = 1 };
pub const SWP_NOREPOSITION = SET_WINDOW_POS_FLAGS{ .NOOWNERZORDER = 1 };
pub const SWP_NOSENDCHANGING = SET_WINDOW_POS_FLAGS{ .NOSENDCHANGING = 1 };
pub const SWP_NOSIZE = SET_WINDOW_POS_FLAGS{ .NOSIZE = 1 };
pub const SWP_NOZORDER = SET_WINDOW_POS_FLAGS{ .NOZORDER = 1 };
pub const SWP_SHOWWINDOW = SET_WINDOW_POS_FLAGS{ .SHOWWINDOW = 1 };

pub const MSG_WAIT_FOR_MULTIPLE_OBJECTS_EX_FLAGS = packed struct(u32) {
    WAITALL: u1 = 0,
    ALERTABLE: u1 = 0,
    INPUTAVAILABLE: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const MWMO_NONE = MSG_WAIT_FOR_MULTIPLE_OBJECTS_EX_FLAGS{ };
pub const MWMO_ALERTABLE = MSG_WAIT_FOR_MULTIPLE_OBJECTS_EX_FLAGS{ .ALERTABLE = 1 };
pub const MWMO_INPUTAVAILABLE = MSG_WAIT_FOR_MULTIPLE_OBJECTS_EX_FLAGS{ .INPUTAVAILABLE = 1 };
pub const MWMO_WAITALL = MSG_WAIT_FOR_MULTIPLE_OBJECTS_EX_FLAGS{ .WAITALL = 1 };

pub const QUEUE_STATUS_FLAGS = packed struct(u32) {
    KEY: u1 = 0,
    MOUSEMOVE: u1 = 0,
    MOUSEBUTTON: u1 = 0,
    POSTMESSAGE: u1 = 0,
    TIMER: u1 = 0,
    PAINT: u1 = 0,
    SENDMESSAGE: u1 = 0,
    HOTKEY: u1 = 0,
    ALLPOSTMESSAGE: u1 = 0,
    _9: u1 = 0,
    RAWINPUT: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const QS_ALLEVENTS = QUEUE_STATUS_FLAGS{
    .KEY = 1,
    .MOUSEMOVE = 1,
    .MOUSEBUTTON = 1,
    .POSTMESSAGE = 1,
    .TIMER = 1,
    .PAINT = 1,
    .HOTKEY = 1,
    .RAWINPUT = 1,
};
pub const QS_ALLINPUT = QUEUE_STATUS_FLAGS{
    .KEY = 1,
    .MOUSEMOVE = 1,
    .MOUSEBUTTON = 1,
    .POSTMESSAGE = 1,
    .TIMER = 1,
    .PAINT = 1,
    .SENDMESSAGE = 1,
    .HOTKEY = 1,
    .RAWINPUT = 1,
};
pub const QS_ALLPOSTMESSAGE = QUEUE_STATUS_FLAGS{ .ALLPOSTMESSAGE = 1 };
pub const QS_HOTKEY = QUEUE_STATUS_FLAGS{ .HOTKEY = 1 };
pub const QS_INPUT = QUEUE_STATUS_FLAGS{
    .KEY = 1,
    .MOUSEMOVE = 1,
    .MOUSEBUTTON = 1,
    .RAWINPUT = 1,
};
pub const QS_KEY = QUEUE_STATUS_FLAGS{ .KEY = 1 };
pub const QS_MOUSE = QUEUE_STATUS_FLAGS{
    .MOUSEMOVE = 1,
    .MOUSEBUTTON = 1,
};
pub const QS_MOUSEBUTTON = QUEUE_STATUS_FLAGS{ .MOUSEBUTTON = 1 };
pub const QS_MOUSEMOVE = QUEUE_STATUS_FLAGS{ .MOUSEMOVE = 1 };
pub const QS_PAINT = QUEUE_STATUS_FLAGS{ .PAINT = 1 };
pub const QS_POSTMESSAGE = QUEUE_STATUS_FLAGS{ .POSTMESSAGE = 1 };
pub const QS_RAWINPUT = QUEUE_STATUS_FLAGS{ .RAWINPUT = 1 };
pub const QS_SENDMESSAGE = QUEUE_STATUS_FLAGS{ .SENDMESSAGE = 1 };
pub const QS_TIMER = QUEUE_STATUS_FLAGS{ .TIMER = 1 };

pub const SYSTEM_CURSOR_ID = enum(u32) {
    APPSTARTING = 32650,
    NORMAL = 32512,
    CROSS = 32515,
    HAND = 32649,
    HELP = 32651,
    IBEAM = 32513,
    NO = 32648,
    SIZEALL = 32646,
    SIZENESW = 32643,
    SIZENS = 32645,
    SIZENWSE = 32642,
    SIZEWE = 32644,
    UP = 32516,
    WAIT = 32514,
};
pub const OCR_APPSTARTING = SYSTEM_CURSOR_ID.APPSTARTING;
pub const OCR_NORMAL = SYSTEM_CURSOR_ID.NORMAL;
pub const OCR_CROSS = SYSTEM_CURSOR_ID.CROSS;
pub const OCR_HAND = SYSTEM_CURSOR_ID.HAND;
pub const OCR_HELP = SYSTEM_CURSOR_ID.HELP;
pub const OCR_IBEAM = SYSTEM_CURSOR_ID.IBEAM;
pub const OCR_NO = SYSTEM_CURSOR_ID.NO;
pub const OCR_SIZEALL = SYSTEM_CURSOR_ID.SIZEALL;
pub const OCR_SIZENESW = SYSTEM_CURSOR_ID.SIZENESW;
pub const OCR_SIZENS = SYSTEM_CURSOR_ID.SIZENS;
pub const OCR_SIZENWSE = SYSTEM_CURSOR_ID.SIZENWSE;
pub const OCR_SIZEWE = SYSTEM_CURSOR_ID.SIZEWE;
pub const OCR_UP = SYSTEM_CURSOR_ID.UP;
pub const OCR_WAIT = SYSTEM_CURSOR_ID.WAIT;

pub const LAYERED_WINDOW_ATTRIBUTES_FLAGS = packed struct(u32) {
    COLORKEY: u1 = 0,
    ALPHA: u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const LWA_ALPHA = LAYERED_WINDOW_ATTRIBUTES_FLAGS{ .ALPHA = 1 };
pub const LWA_COLORKEY = LAYERED_WINDOW_ATTRIBUTES_FLAGS{ .COLORKEY = 1 };

pub const SEND_MESSAGE_TIMEOUT_FLAGS = packed struct(u32) {
    BLOCK: u1 = 0,
    ABORTIFHUNG: u1 = 0,
    _2: u1 = 0,
    NOTIMEOUTIFNOTHUNG: u1 = 0,
    _4: u1 = 0,
    ERRORONEXIT: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const SMTO_ABORTIFHUNG = SEND_MESSAGE_TIMEOUT_FLAGS{ .ABORTIFHUNG = 1 };
pub const SMTO_BLOCK = SEND_MESSAGE_TIMEOUT_FLAGS{ .BLOCK = 1 };
pub const SMTO_NORMAL = SEND_MESSAGE_TIMEOUT_FLAGS{ };
pub const SMTO_NOTIMEOUTIFNOTHUNG = SEND_MESSAGE_TIMEOUT_FLAGS{ .NOTIMEOUTIFNOTHUNG = 1 };
pub const SMTO_ERRORONEXIT = SEND_MESSAGE_TIMEOUT_FLAGS{ .ERRORONEXIT = 1 };

pub const PEEK_MESSAGE_REMOVE_TYPE = packed struct(u32) {
    REMOVE: u1 = 0,
    NOYIELD: u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    QS_PAINT: u1 = 0,
    QS_SENDMESSAGE: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const PM_NOREMOVE = PEEK_MESSAGE_REMOVE_TYPE{ };
pub const PM_REMOVE = PEEK_MESSAGE_REMOVE_TYPE{ .REMOVE = 1 };
pub const PM_NOYIELD = PEEK_MESSAGE_REMOVE_TYPE{ .NOYIELD = 1 };
pub const PM_QS_INPUT = PEEK_MESSAGE_REMOVE_TYPE{
    ._16 = 1,
    ._17 = 1,
    ._18 = 1,
    ._26 = 1,
};
pub const PM_QS_POSTMESSAGE = PEEK_MESSAGE_REMOVE_TYPE{
    ._19 = 1,
    ._20 = 1,
    ._23 = 1,
};
pub const PM_QS_PAINT = PEEK_MESSAGE_REMOVE_TYPE{ .QS_PAINT = 1 };
pub const PM_QS_SENDMESSAGE = PEEK_MESSAGE_REMOVE_TYPE{ .QS_SENDMESSAGE = 1 };

pub const SYS_COLOR_INDEX = enum(u32) {
    @"3DDKSHADOW" = 21,
    @"3DFACE" = 15,
    @"3DHIGHLIGHT" = 20,
    @"3DLIGHT" = 22,
    @"3DSHADOW" = 16,
    ACTIVEBORDER = 10,
    ACTIVECAPTION = 2,
    APPWORKSPACE = 12,
    BACKGROUND = 1,
    BTNTEXT = 18,
    CAPTIONTEXT = 9,
    GRADIENTACTIVECAPTION = 27,
    GRADIENTINACTIVECAPTION = 28,
    GRAYTEXT = 17,
    HIGHLIGHT = 13,
    HIGHLIGHTTEXT = 14,
    HOTLIGHT = 26,
    INACTIVEBORDER = 11,
    INACTIVECAPTION = 3,
    INACTIVECAPTIONTEXT = 19,
    INFOBK = 24,
    INFOTEXT = 23,
    MENU = 4,
    MENUHILIGHT = 29,
    MENUBAR = 30,
    MENUTEXT = 7,
    SCROLLBAR = 0,
    WINDOW = 5,
    WINDOWFRAME = 6,
    WINDOWTEXT = 8,
    pub const @"3DHILIGHT" = .@"3DHIGHLIGHT";
    pub const BTNFACE = .@"3DFACE";
    pub const BTNHIGHLIGHT = .@"3DHIGHLIGHT";
    pub const BTNHILIGHT = .@"3DHIGHLIGHT";
    pub const BTNSHADOW = .@"3DSHADOW";
    pub const DESKTOP = .BACKGROUND;
};
pub const COLOR_3DDKSHADOW = SYS_COLOR_INDEX.@"3DDKSHADOW";
pub const COLOR_3DFACE = SYS_COLOR_INDEX.@"3DFACE";
pub const COLOR_3DHIGHLIGHT = SYS_COLOR_INDEX.@"3DHIGHLIGHT";
pub const COLOR_3DHILIGHT = SYS_COLOR_INDEX.@"3DHIGHLIGHT";
pub const COLOR_3DLIGHT = SYS_COLOR_INDEX.@"3DLIGHT";
pub const COLOR_3DSHADOW = SYS_COLOR_INDEX.@"3DSHADOW";
pub const COLOR_ACTIVEBORDER = SYS_COLOR_INDEX.ACTIVEBORDER;
pub const COLOR_ACTIVECAPTION = SYS_COLOR_INDEX.ACTIVECAPTION;
pub const COLOR_APPWORKSPACE = SYS_COLOR_INDEX.APPWORKSPACE;
pub const COLOR_BACKGROUND = SYS_COLOR_INDEX.BACKGROUND;
pub const COLOR_BTNFACE = SYS_COLOR_INDEX.@"3DFACE";
pub const COLOR_BTNHIGHLIGHT = SYS_COLOR_INDEX.@"3DHIGHLIGHT";
pub const COLOR_BTNHILIGHT = SYS_COLOR_INDEX.@"3DHIGHLIGHT";
pub const COLOR_BTNSHADOW = SYS_COLOR_INDEX.@"3DSHADOW";
pub const COLOR_BTNTEXT = SYS_COLOR_INDEX.BTNTEXT;
pub const COLOR_CAPTIONTEXT = SYS_COLOR_INDEX.CAPTIONTEXT;
pub const COLOR_DESKTOP = SYS_COLOR_INDEX.BACKGROUND;
pub const COLOR_GRADIENTACTIVECAPTION = SYS_COLOR_INDEX.GRADIENTACTIVECAPTION;
pub const COLOR_GRADIENTINACTIVECAPTION = SYS_COLOR_INDEX.GRADIENTINACTIVECAPTION;
pub const COLOR_GRAYTEXT = SYS_COLOR_INDEX.GRAYTEXT;
pub const COLOR_HIGHLIGHT = SYS_COLOR_INDEX.HIGHLIGHT;
pub const COLOR_HIGHLIGHTTEXT = SYS_COLOR_INDEX.HIGHLIGHTTEXT;
pub const COLOR_HOTLIGHT = SYS_COLOR_INDEX.HOTLIGHT;
pub const COLOR_INACTIVEBORDER = SYS_COLOR_INDEX.INACTIVEBORDER;
pub const COLOR_INACTIVECAPTION = SYS_COLOR_INDEX.INACTIVECAPTION;
pub const COLOR_INACTIVECAPTIONTEXT = SYS_COLOR_INDEX.INACTIVECAPTIONTEXT;
pub const COLOR_INFOBK = SYS_COLOR_INDEX.INFOBK;
pub const COLOR_INFOTEXT = SYS_COLOR_INDEX.INFOTEXT;
pub const COLOR_MENU = SYS_COLOR_INDEX.MENU;
pub const COLOR_MENUHILIGHT = SYS_COLOR_INDEX.MENUHILIGHT;
pub const COLOR_MENUBAR = SYS_COLOR_INDEX.MENUBAR;
pub const COLOR_MENUTEXT = SYS_COLOR_INDEX.MENUTEXT;
pub const COLOR_SCROLLBAR = SYS_COLOR_INDEX.SCROLLBAR;
pub const COLOR_WINDOW = SYS_COLOR_INDEX.WINDOW;
pub const COLOR_WINDOWFRAME = SYS_COLOR_INDEX.WINDOWFRAME;
pub const COLOR_WINDOWTEXT = SYS_COLOR_INDEX.WINDOWTEXT;

pub const GET_WINDOW_CMD = enum(u32) {
    CHILD = 5,
    ENABLEDPOPUP = 6,
    HWNDFIRST = 0,
    HWNDLAST = 1,
    HWNDNEXT = 2,
    HWNDPREV = 3,
    OWNER = 4,
};
pub const GW_CHILD = GET_WINDOW_CMD.CHILD;
pub const GW_ENABLEDPOPUP = GET_WINDOW_CMD.ENABLEDPOPUP;
pub const GW_HWNDFIRST = GET_WINDOW_CMD.HWNDFIRST;
pub const GW_HWNDLAST = GET_WINDOW_CMD.HWNDLAST;
pub const GW_HWNDNEXT = GET_WINDOW_CMD.HWNDNEXT;
pub const GW_HWNDPREV = GET_WINDOW_CMD.HWNDPREV;
pub const GW_OWNER = GET_WINDOW_CMD.OWNER;

pub const SYSTEM_METRICS_INDEX = enum(u32) {
    ARRANGE = 56,
    CLEANBOOT = 67,
    CMONITORS = 80,
    CMOUSEBUTTONS = 43,
    CONVERTIBLESLATEMODE = 8195,
    CXBORDER = 5,
    CXCURSOR = 13,
    CXDLGFRAME = 7,
    CXDOUBLECLK = 36,
    CXDRAG = 68,
    CXEDGE = 45,
    CXFOCUSBORDER = 83,
    CXFRAME = 32,
    CXFULLSCREEN = 16,
    CXHSCROLL = 21,
    CXHTHUMB = 10,
    CXICON = 11,
    CXICONSPACING = 38,
    CXMAXIMIZED = 61,
    CXMAXTRACK = 59,
    CXMENUCHECK = 71,
    CXMENUSIZE = 54,
    CXMIN = 28,
    CXMINIMIZED = 57,
    CXMINSPACING = 47,
    CXMINTRACK = 34,
    CXPADDEDBORDER = 92,
    CXSCREEN = 0,
    CXSIZE = 30,
    CXSMICON = 49,
    CXSMSIZE = 52,
    CXVIRTUALSCREEN = 78,
    CXVSCROLL = 2,
    CYBORDER = 6,
    CYCAPTION = 4,
    CYCURSOR = 14,
    CYDLGFRAME = 8,
    CYDOUBLECLK = 37,
    CYDRAG = 69,
    CYEDGE = 46,
    CYFOCUSBORDER = 84,
    CYFRAME = 33,
    CYFULLSCREEN = 17,
    CYHSCROLL = 3,
    CYICON = 12,
    CYICONSPACING = 39,
    CYKANJIWINDOW = 18,
    CYMAXIMIZED = 62,
    CYMAXTRACK = 60,
    CYMENU = 15,
    CYMENUCHECK = 72,
    CYMENUSIZE = 55,
    CYMIN = 29,
    CYMINIMIZED = 58,
    CYMINSPACING = 48,
    CYMINTRACK = 35,
    CYSCREEN = 1,
    CYSIZE = 31,
    CYSMCAPTION = 51,
    CYSMICON = 50,
    CYSMSIZE = 53,
    CYVIRTUALSCREEN = 79,
    CYVSCROLL = 20,
    CYVTHUMB = 9,
    DBCSENABLED = 42,
    DEBUG = 22,
    DIGITIZER = 94,
    IMMENABLED = 82,
    MAXIMUMTOUCHES = 95,
    MEDIACENTER = 87,
    MENUDROPALIGNMENT = 40,
    MIDEASTENABLED = 74,
    MOUSEPRESENT = 19,
    MOUSEHORIZONTALWHEELPRESENT = 91,
    MOUSEWHEELPRESENT = 75,
    NETWORK = 63,
    PENWINDOWS = 41,
    REMOTECONTROL = 8193,
    REMOTESESSION = 4096,
    SAMEDISPLAYFORMAT = 81,
    SECURE = 44,
    SERVERR2 = 89,
    SHOWSOUNDS = 70,
    SHUTTINGDOWN = 8192,
    SLOWMACHINE = 73,
    STARTER = 88,
    SWAPBUTTON = 23,
    SYSTEMDOCKED = 8196,
    TABLETPC = 86,
    XVIRTUALSCREEN = 76,
    YVIRTUALSCREEN = 77,
    pub const CXFIXEDFRAME = .CXDLGFRAME;
    pub const CXSIZEFRAME = .CXFRAME;
    pub const CYFIXEDFRAME = .CYDLGFRAME;
    pub const CYSIZEFRAME = .CYFRAME;
};
pub const SM_ARRANGE = SYSTEM_METRICS_INDEX.ARRANGE;
pub const SM_CLEANBOOT = SYSTEM_METRICS_INDEX.CLEANBOOT;
pub const SM_CMONITORS = SYSTEM_METRICS_INDEX.CMONITORS;
pub const SM_CMOUSEBUTTONS = SYSTEM_METRICS_INDEX.CMOUSEBUTTONS;
pub const SM_CONVERTIBLESLATEMODE = SYSTEM_METRICS_INDEX.CONVERTIBLESLATEMODE;
pub const SM_CXBORDER = SYSTEM_METRICS_INDEX.CXBORDER;
pub const SM_CXCURSOR = SYSTEM_METRICS_INDEX.CXCURSOR;
pub const SM_CXDLGFRAME = SYSTEM_METRICS_INDEX.CXDLGFRAME;
pub const SM_CXDOUBLECLK = SYSTEM_METRICS_INDEX.CXDOUBLECLK;
pub const SM_CXDRAG = SYSTEM_METRICS_INDEX.CXDRAG;
pub const SM_CXEDGE = SYSTEM_METRICS_INDEX.CXEDGE;
pub const SM_CXFIXEDFRAME = SYSTEM_METRICS_INDEX.CXDLGFRAME;
pub const SM_CXFOCUSBORDER = SYSTEM_METRICS_INDEX.CXFOCUSBORDER;
pub const SM_CXFRAME = SYSTEM_METRICS_INDEX.CXFRAME;
pub const SM_CXFULLSCREEN = SYSTEM_METRICS_INDEX.CXFULLSCREEN;
pub const SM_CXHSCROLL = SYSTEM_METRICS_INDEX.CXHSCROLL;
pub const SM_CXHTHUMB = SYSTEM_METRICS_INDEX.CXHTHUMB;
pub const SM_CXICON = SYSTEM_METRICS_INDEX.CXICON;
pub const SM_CXICONSPACING = SYSTEM_METRICS_INDEX.CXICONSPACING;
pub const SM_CXMAXIMIZED = SYSTEM_METRICS_INDEX.CXMAXIMIZED;
pub const SM_CXMAXTRACK = SYSTEM_METRICS_INDEX.CXMAXTRACK;
pub const SM_CXMENUCHECK = SYSTEM_METRICS_INDEX.CXMENUCHECK;
pub const SM_CXMENUSIZE = SYSTEM_METRICS_INDEX.CXMENUSIZE;
pub const SM_CXMIN = SYSTEM_METRICS_INDEX.CXMIN;
pub const SM_CXMINIMIZED = SYSTEM_METRICS_INDEX.CXMINIMIZED;
pub const SM_CXMINSPACING = SYSTEM_METRICS_INDEX.CXMINSPACING;
pub const SM_CXMINTRACK = SYSTEM_METRICS_INDEX.CXMINTRACK;
pub const SM_CXPADDEDBORDER = SYSTEM_METRICS_INDEX.CXPADDEDBORDER;
pub const SM_CXSCREEN = SYSTEM_METRICS_INDEX.CXSCREEN;
pub const SM_CXSIZE = SYSTEM_METRICS_INDEX.CXSIZE;
pub const SM_CXSIZEFRAME = SYSTEM_METRICS_INDEX.CXFRAME;
pub const SM_CXSMICON = SYSTEM_METRICS_INDEX.CXSMICON;
pub const SM_CXSMSIZE = SYSTEM_METRICS_INDEX.CXSMSIZE;
pub const SM_CXVIRTUALSCREEN = SYSTEM_METRICS_INDEX.CXVIRTUALSCREEN;
pub const SM_CXVSCROLL = SYSTEM_METRICS_INDEX.CXVSCROLL;
pub const SM_CYBORDER = SYSTEM_METRICS_INDEX.CYBORDER;
pub const SM_CYCAPTION = SYSTEM_METRICS_INDEX.CYCAPTION;
pub const SM_CYCURSOR = SYSTEM_METRICS_INDEX.CYCURSOR;
pub const SM_CYDLGFRAME = SYSTEM_METRICS_INDEX.CYDLGFRAME;
pub const SM_CYDOUBLECLK = SYSTEM_METRICS_INDEX.CYDOUBLECLK;
pub const SM_CYDRAG = SYSTEM_METRICS_INDEX.CYDRAG;
pub const SM_CYEDGE = SYSTEM_METRICS_INDEX.CYEDGE;
pub const SM_CYFIXEDFRAME = SYSTEM_METRICS_INDEX.CYDLGFRAME;
pub const SM_CYFOCUSBORDER = SYSTEM_METRICS_INDEX.CYFOCUSBORDER;
pub const SM_CYFRAME = SYSTEM_METRICS_INDEX.CYFRAME;
pub const SM_CYFULLSCREEN = SYSTEM_METRICS_INDEX.CYFULLSCREEN;
pub const SM_CYHSCROLL = SYSTEM_METRICS_INDEX.CYHSCROLL;
pub const SM_CYICON = SYSTEM_METRICS_INDEX.CYICON;
pub const SM_CYICONSPACING = SYSTEM_METRICS_INDEX.CYICONSPACING;
pub const SM_CYKANJIWINDOW = SYSTEM_METRICS_INDEX.CYKANJIWINDOW;
pub const SM_CYMAXIMIZED = SYSTEM_METRICS_INDEX.CYMAXIMIZED;
pub const SM_CYMAXTRACK = SYSTEM_METRICS_INDEX.CYMAXTRACK;
pub const SM_CYMENU = SYSTEM_METRICS_INDEX.CYMENU;
pub const SM_CYMENUCHECK = SYSTEM_METRICS_INDEX.CYMENUCHECK;
pub const SM_CYMENUSIZE = SYSTEM_METRICS_INDEX.CYMENUSIZE;
pub const SM_CYMIN = SYSTEM_METRICS_INDEX.CYMIN;
pub const SM_CYMINIMIZED = SYSTEM_METRICS_INDEX.CYMINIMIZED;
pub const SM_CYMINSPACING = SYSTEM_METRICS_INDEX.CYMINSPACING;
pub const SM_CYMINTRACK = SYSTEM_METRICS_INDEX.CYMINTRACK;
pub const SM_CYSCREEN = SYSTEM_METRICS_INDEX.CYSCREEN;
pub const SM_CYSIZE = SYSTEM_METRICS_INDEX.CYSIZE;
pub const SM_CYSIZEFRAME = SYSTEM_METRICS_INDEX.CYFRAME;
pub const SM_CYSMCAPTION = SYSTEM_METRICS_INDEX.CYSMCAPTION;
pub const SM_CYSMICON = SYSTEM_METRICS_INDEX.CYSMICON;
pub const SM_CYSMSIZE = SYSTEM_METRICS_INDEX.CYSMSIZE;
pub const SM_CYVIRTUALSCREEN = SYSTEM_METRICS_INDEX.CYVIRTUALSCREEN;
pub const SM_CYVSCROLL = SYSTEM_METRICS_INDEX.CYVSCROLL;
pub const SM_CYVTHUMB = SYSTEM_METRICS_INDEX.CYVTHUMB;
pub const SM_DBCSENABLED = SYSTEM_METRICS_INDEX.DBCSENABLED;
pub const SM_DEBUG = SYSTEM_METRICS_INDEX.DEBUG;
pub const SM_DIGITIZER = SYSTEM_METRICS_INDEX.DIGITIZER;
pub const SM_IMMENABLED = SYSTEM_METRICS_INDEX.IMMENABLED;
pub const SM_MAXIMUMTOUCHES = SYSTEM_METRICS_INDEX.MAXIMUMTOUCHES;
pub const SM_MEDIACENTER = SYSTEM_METRICS_INDEX.MEDIACENTER;
pub const SM_MENUDROPALIGNMENT = SYSTEM_METRICS_INDEX.MENUDROPALIGNMENT;
pub const SM_MIDEASTENABLED = SYSTEM_METRICS_INDEX.MIDEASTENABLED;
pub const SM_MOUSEPRESENT = SYSTEM_METRICS_INDEX.MOUSEPRESENT;
pub const SM_MOUSEHORIZONTALWHEELPRESENT = SYSTEM_METRICS_INDEX.MOUSEHORIZONTALWHEELPRESENT;
pub const SM_MOUSEWHEELPRESENT = SYSTEM_METRICS_INDEX.MOUSEWHEELPRESENT;
pub const SM_NETWORK = SYSTEM_METRICS_INDEX.NETWORK;
pub const SM_PENWINDOWS = SYSTEM_METRICS_INDEX.PENWINDOWS;
pub const SM_REMOTECONTROL = SYSTEM_METRICS_INDEX.REMOTECONTROL;
pub const SM_REMOTESESSION = SYSTEM_METRICS_INDEX.REMOTESESSION;
pub const SM_SAMEDISPLAYFORMAT = SYSTEM_METRICS_INDEX.SAMEDISPLAYFORMAT;
pub const SM_SECURE = SYSTEM_METRICS_INDEX.SECURE;
pub const SM_SERVERR2 = SYSTEM_METRICS_INDEX.SERVERR2;
pub const SM_SHOWSOUNDS = SYSTEM_METRICS_INDEX.SHOWSOUNDS;
pub const SM_SHUTTINGDOWN = SYSTEM_METRICS_INDEX.SHUTTINGDOWN;
pub const SM_SLOWMACHINE = SYSTEM_METRICS_INDEX.SLOWMACHINE;
pub const SM_STARTER = SYSTEM_METRICS_INDEX.STARTER;
pub const SM_SWAPBUTTON = SYSTEM_METRICS_INDEX.SWAPBUTTON;
pub const SM_SYSTEMDOCKED = SYSTEM_METRICS_INDEX.SYSTEMDOCKED;
pub const SM_TABLETPC = SYSTEM_METRICS_INDEX.TABLETPC;
pub const SM_XVIRTUALSCREEN = SYSTEM_METRICS_INDEX.XVIRTUALSCREEN;
pub const SM_YVIRTUALSCREEN = SYSTEM_METRICS_INDEX.YVIRTUALSCREEN;

pub const GET_ANCESTOR_FLAGS = enum(u32) {
    PARENT = 1,
    ROOT = 2,
    ROOTOWNER = 3,
};
pub const GA_PARENT = GET_ANCESTOR_FLAGS.PARENT;
pub const GA_ROOT = GET_ANCESTOR_FLAGS.ROOT;
pub const GA_ROOTOWNER = GET_ANCESTOR_FLAGS.ROOTOWNER;

pub const TILE_WINDOWS_HOW = enum(u32) {
    HORIZONTAL = 1,
    VERTICAL = 0,
};
pub const MDITILE_HORIZONTAL = TILE_WINDOWS_HOW.HORIZONTAL;
pub const MDITILE_VERTICAL = TILE_WINDOWS_HOW.VERTICAL;

pub const WINDOW_DISPLAY_AFFINITY = enum(u32) {
    NONE = 0,
    MONITOR = 1,
    EXCLUDEFROMCAPTURE = 17,
};
pub const WDA_NONE = WINDOW_DISPLAY_AFFINITY.NONE;
pub const WDA_MONITOR = WINDOW_DISPLAY_AFFINITY.MONITOR;
pub const WDA_EXCLUDEFROMCAPTURE = WINDOW_DISPLAY_AFFINITY.EXCLUDEFROMCAPTURE;

pub const FOREGROUND_WINDOW_LOCK_CODE = enum(u32) {
    LOCK = 1,
    UNLOCK = 2,
};
pub const LSFW_LOCK = FOREGROUND_WINDOW_LOCK_CODE.LOCK;
pub const LSFW_UNLOCK = FOREGROUND_WINDOW_LOCK_CODE.UNLOCK;

pub const CASCADE_WINDOWS_HOW = packed struct(u32) {
    _0: u1 = 0,
    SKIPDISABLED: u1 = 0,
    ZORDER: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const MDITILE_SKIPDISABLED = CASCADE_WINDOWS_HOW{ .SKIPDISABLED = 1 };
pub const MDITILE_ZORDER = CASCADE_WINDOWS_HOW{ .ZORDER = 1 };

pub const WINDOW_MESSAGE_FILTER_ACTION = enum(u32) {
    ALLOW = 1,
    DISALLOW = 2,
    RESET = 0,
};
pub const MSGFLT_ALLOW = WINDOW_MESSAGE_FILTER_ACTION.ALLOW;
pub const MSGFLT_DISALLOW = WINDOW_MESSAGE_FILTER_ACTION.DISALLOW;
pub const MSGFLT_RESET = WINDOW_MESSAGE_FILTER_ACTION.RESET;

pub const GET_MENU_DEFAULT_ITEM_FLAGS = packed struct(u32) {
    USEDISABLED: u1 = 0,
    GOINTOPOPUPS: u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const GMDI_GOINTOPOPUPS = GET_MENU_DEFAULT_ITEM_FLAGS{ .GOINTOPOPUPS = 1 };
pub const GMDI_USEDISABLED = GET_MENU_DEFAULT_ITEM_FLAGS{ .USEDISABLED = 1 };

pub const MSGFLTINFO_STATUS = enum(u32) {
    NONE = 0,
    ALLOWED_HIGHER = 3,
    ALREADYALLOWED_FORWND = 1,
    ALREADYDISALLOWED_FORWND = 2,
};
pub const MSGFLTINFO_NONE = MSGFLTINFO_STATUS.NONE;
pub const MSGFLTINFO_ALLOWED_HIGHER = MSGFLTINFO_STATUS.ALLOWED_HIGHER;
pub const MSGFLTINFO_ALREADYALLOWED_FORWND = MSGFLTINFO_STATUS.ALREADYALLOWED_FORWND;
pub const MSGFLTINFO_ALREADYDISALLOWED_FORWND = MSGFLTINFO_STATUS.ALREADYDISALLOWED_FORWND;

pub const MOUSEHOOKSTRUCTEX_MOUSE_DATA = packed struct(u32) {
    @"1": u1 = 0,
    @"2": u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const XBUTTON1 = MOUSEHOOKSTRUCTEX_MOUSE_DATA{ .@"1" = 1 };
pub const XBUTTON2 = MOUSEHOOKSTRUCTEX_MOUSE_DATA{ .@"2" = 1 };

pub const MENU_ITEM_MASK = packed struct(u32) {
    STATE: u1 = 0,
    ID: u1 = 0,
    SUBMENU: u1 = 0,
    CHECKMARKS: u1 = 0,
    TYPE: u1 = 0,
    DATA: u1 = 0,
    STRING: u1 = 0,
    BITMAP: u1 = 0,
    FTYPE: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const MIIM_BITMAP = MENU_ITEM_MASK{ .BITMAP = 1 };
pub const MIIM_CHECKMARKS = MENU_ITEM_MASK{ .CHECKMARKS = 1 };
pub const MIIM_DATA = MENU_ITEM_MASK{ .DATA = 1 };
pub const MIIM_FTYPE = MENU_ITEM_MASK{ .FTYPE = 1 };
pub const MIIM_ID = MENU_ITEM_MASK{ .ID = 1 };
pub const MIIM_STATE = MENU_ITEM_MASK{ .STATE = 1 };
pub const MIIM_STRING = MENU_ITEM_MASK{ .STRING = 1 };
pub const MIIM_SUBMENU = MENU_ITEM_MASK{ .SUBMENU = 1 };
pub const MIIM_TYPE = MENU_ITEM_MASK{ .TYPE = 1 };

pub const FLASHWINFO_FLAGS = packed struct(u32) {
    CAPTION: u1 = 0,
    TRAY: u1 = 0,
    TIMER: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const FLASHW_ALL = FLASHWINFO_FLAGS{
    .CAPTION = 1,
    .TRAY = 1,
};
pub const FLASHW_CAPTION = FLASHWINFO_FLAGS{ .CAPTION = 1 };
pub const FLASHW_STOP = FLASHWINFO_FLAGS{ };
pub const FLASHW_TIMER = FLASHWINFO_FLAGS{ .TIMER = 1 };
pub const FLASHW_TIMERNOFG = FLASHWINFO_FLAGS{
    .TIMER = 1,
    ._3 = 1,
};
pub const FLASHW_TRAY = FLASHWINFO_FLAGS{ .TRAY = 1 };

pub const CURSORINFO_FLAGS = enum(u32) {
    HOWING = 1,
    UPPRESSED = 2,
};
pub const CURSOR_SHOWING = CURSORINFO_FLAGS.HOWING;
pub const CURSOR_SUPPRESSED = CURSORINFO_FLAGS.UPPRESSED;

pub const MENUINFO_STYLE = packed struct(u32) {
    _0: u1 = 0,
    _1: u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    CHECKORBMP: u1 = 0,
    NOTIFYBYPOS: u1 = 0,
    AUTODISMISS: u1 = 0,
    DRAGDROP: u1 = 0,
    MODELESS: u1 = 0,
    NOCHECK: u1 = 0,
};
pub const MNS_AUTODISMISS = MENUINFO_STYLE{ .AUTODISMISS = 1 };
pub const MNS_CHECKORBMP = MENUINFO_STYLE{ .CHECKORBMP = 1 };
pub const MNS_DRAGDROP = MENUINFO_STYLE{ .DRAGDROP = 1 };
pub const MNS_MODELESS = MENUINFO_STYLE{ .MODELESS = 1 };
pub const MNS_NOCHECK = MENUINFO_STYLE{ .NOCHECK = 1 };
pub const MNS_NOTIFYBYPOS = MENUINFO_STYLE{ .NOTIFYBYPOS = 1 };

pub const WINDOWPLACEMENT_FLAGS = packed struct(u32) {
    SETMINPOSITION: u1 = 0,
    RESTORETOMAXIMIZED: u1 = 0,
    ASYNCWINDOWPLACEMENT: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const WPF_ASYNCWINDOWPLACEMENT = WINDOWPLACEMENT_FLAGS{ .ASYNCWINDOWPLACEMENT = 1 };
pub const WPF_RESTORETOMAXIMIZED = WINDOWPLACEMENT_FLAGS{ .RESTORETOMAXIMIZED = 1 };
pub const WPF_SETMINPOSITION = WINDOWPLACEMENT_FLAGS{ .SETMINPOSITION = 1 };

pub const MENUINFO_MASK = packed struct(u32) {
    MAXHEIGHT: u1 = 0,
    BACKGROUND: u1 = 0,
    HELPID: u1 = 0,
    MENUDATA: u1 = 0,
    STYLE: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    APPLYTOSUBMENUS: u1 = 0,
};
pub const MIM_APPLYTOSUBMENUS = MENUINFO_MASK{ .APPLYTOSUBMENUS = 1 };
pub const MIM_BACKGROUND = MENUINFO_MASK{ .BACKGROUND = 1 };
pub const MIM_HELPID = MENUINFO_MASK{ .HELPID = 1 };
pub const MIM_MAXHEIGHT = MENUINFO_MASK{ .MAXHEIGHT = 1 };
pub const MIM_MENUDATA = MENUINFO_MASK{ .MENUDATA = 1 };
pub const MIM_STYLE = MENUINFO_MASK{ .STYLE = 1 };

pub const MINIMIZEDMETRICS_ARRANGE = enum(i32) {
    BOTTOMLEFT = 0,
    BOTTOMRIGHT = 1,
    TOPLEFT = 2,
    TOPRIGHT = 3,
};
pub const ARW_BOTTOMLEFT = MINIMIZEDMETRICS_ARRANGE.BOTTOMLEFT;
pub const ARW_BOTTOMRIGHT = MINIMIZEDMETRICS_ARRANGE.BOTTOMRIGHT;
pub const ARW_TOPLEFT = MINIMIZEDMETRICS_ARRANGE.TOPLEFT;
pub const ARW_TOPRIGHT = MINIMIZEDMETRICS_ARRANGE.TOPRIGHT;

pub const SCROLLINFO_MASK = packed struct(u32) {
    RANGE: u1 = 0,
    PAGE: u1 = 0,
    POS: u1 = 0,
    DISABLENOSCROLL: u1 = 0,
    TRACKPOS: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const SIF_ALL = SCROLLINFO_MASK{
    .RANGE = 1,
    .PAGE = 1,
    .POS = 1,
    .TRACKPOS = 1,
};
pub const SIF_DISABLENOSCROLL = SCROLLINFO_MASK{ .DISABLENOSCROLL = 1 };
pub const SIF_PAGE = SCROLLINFO_MASK{ .PAGE = 1 };
pub const SIF_POS = SCROLLINFO_MASK{ .POS = 1 };
pub const SIF_RANGE = SCROLLINFO_MASK{ .RANGE = 1 };
pub const SIF_TRACKPOS = SCROLLINFO_MASK{ .TRACKPOS = 1 };

pub const MENUGETOBJECTINFO_FLAGS = enum(u32) {
    BOTTOMGAP = 2,
    TOPGAP = 1,
};
pub const MNGOF_BOTTOMGAP = MENUGETOBJECTINFO_FLAGS.BOTTOMGAP;
pub const MNGOF_TOPGAP = MENUGETOBJECTINFO_FLAGS.TOPGAP;

pub const GUITHREADINFO_FLAGS = packed struct(u32) {
    CARETBLINKING: u1 = 0,
    INMOVESIZE: u1 = 0,
    INMENUMODE: u1 = 0,
    SYSTEMMENUMODE: u1 = 0,
    POPUPMENUMODE: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const GUI_CARETBLINKING = GUITHREADINFO_FLAGS{ .CARETBLINKING = 1 };
pub const GUI_INMENUMODE = GUITHREADINFO_FLAGS{ .INMENUMODE = 1 };
pub const GUI_INMOVESIZE = GUITHREADINFO_FLAGS{ .INMOVESIZE = 1 };
pub const GUI_POPUPMENUMODE = GUITHREADINFO_FLAGS{ .POPUPMENUMODE = 1 };
pub const GUI_SYSTEMMENUMODE = GUITHREADINFO_FLAGS{ .SYSTEMMENUMODE = 1 };

pub const KBDLLHOOKSTRUCT_FLAGS = packed struct(u32) {
    EXTENDED: u1 = 0,
    LOWER_IL_INJECTED: u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    INJECTED: u1 = 0,
    ALTDOWN: u1 = 0,
    _6: u1 = 0,
    UP: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const LLKHF_EXTENDED = KBDLLHOOKSTRUCT_FLAGS{ .EXTENDED = 1 };
pub const LLKHF_ALTDOWN = KBDLLHOOKSTRUCT_FLAGS{ .ALTDOWN = 1 };
pub const LLKHF_UP = KBDLLHOOKSTRUCT_FLAGS{ .UP = 1 };
pub const LLKHF_INJECTED = KBDLLHOOKSTRUCT_FLAGS{ .INJECTED = 1 };
pub const LLKHF_LOWER_IL_INJECTED = KBDLLHOOKSTRUCT_FLAGS{ .LOWER_IL_INJECTED = 1 };

pub const DI_FLAGS = packed struct(u32) {
    MASK: u1 = 0,
    IMAGE: u1 = 0,
    COMPAT: u1 = 0,
    DEFAULTSIZE: u1 = 0,
    NOMIRROR: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const DI_MASK = DI_FLAGS{ .MASK = 1 };
pub const DI_IMAGE = DI_FLAGS{ .IMAGE = 1 };
pub const DI_NORMAL = DI_FLAGS{
    .MASK = 1,
    .IMAGE = 1,
};
pub const DI_COMPAT = DI_FLAGS{ .COMPAT = 1 };
pub const DI_DEFAULTSIZE = DI_FLAGS{ .DEFAULTSIZE = 1 };
pub const DI_NOMIRROR = DI_FLAGS{ .NOMIRROR = 1 };

// TODO: this type has a FreeFunc 'UnhookWindowsHookEx', what can Zig do with this information?
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HHOOK = *opaque{};

// TODO: this type has a FreeFunc 'DestroyIcon', what can Zig do with this information?
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HICON = *opaque{};

// TODO: this type has a FreeFunc 'DestroyMenu', what can Zig do with this information?
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HMENU = *opaque{};

// TODO: this type has a FreeFunc 'DestroyCursor', what can Zig do with this information?
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
//TODO: type 'HCURSOR' is "AlsoUsableFor" 'HICON' which means this type is implicitly
//      convertible to 'HICON' but not the other way around.  I don't know how to do this
//      in Zig so for now I'm just defining it as an alias
pub const HCURSOR = HICON;

// TODO: this type has a FreeFunc 'DestroyAcceleratorTable', what can Zig do with this information?
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HACCEL = *opaque{};

pub const MESSAGE_RESOURCE_ENTRY = extern struct {
    Length: u16,
    Flags: u16,
    Text: [1]u8,
};

pub const MESSAGE_RESOURCE_BLOCK = extern struct {
    LowId: u32,
    HighId: u32,
    OffsetToEntries: u32,
};

pub const MESSAGE_RESOURCE_DATA = extern struct {
    NumberOfBlocks: u32,
    Blocks: [1]MESSAGE_RESOURCE_BLOCK,
};

pub const WNDPROC = *const fn(
    param0: HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const DLGPROC = *const fn(
    param0: HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) isize;

pub const TIMERPROC = *const fn(
    param0: HWND,
    param1: u32,
    param2: usize,
    param3: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const WNDENUMPROC = *const fn(
    param0: HWND,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const HOOKPROC = *const fn(
    code: i32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const SENDASYNCPROC = *const fn(
    param0: HWND,
    param1: u32,
    param2: usize,
    param3: LRESULT,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PROPENUMPROCA = *const fn(
    param0: HWND,
    param1: ?[*:0]const u8,
    param2: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PROPENUMPROCW = *const fn(
    param0: HWND,
    param1: ?[*:0]const u16,
    param2: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PROPENUMPROCEXA = *const fn(
    param0: HWND,
    param1: ?PSTR,
    param2: ?HANDLE,
    param3: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PROPENUMPROCEXW = *const fn(
    param0: HWND,
    param1: ?PWSTR,
    param2: ?HANDLE,
    param3: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const NAMEENUMPROCA = *const fn(
    param0: ?PSTR,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const NAMEENUMPROCW = *const fn(
    param0: ?PWSTR,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CBT_CREATEWNDA = extern struct {
    lpcs: ?*CREATESTRUCTA,
    hwndInsertAfter: ?HWND,
};

pub const CBT_CREATEWNDW = extern struct {
    lpcs: ?*CREATESTRUCTW,
    hwndInsertAfter: ?HWND,
};

pub const CBTACTIVATESTRUCT = extern struct {
    fMouse: BOOL,
    hWndActive: ?HWND,
};

pub const SHELLHOOKINFO = extern struct {
    hwnd: ?HWND,
    rc: RECT,
};

pub const EVENTMSG = extern struct {
    message: u32,
    paramL: u32,
    paramH: u32,
    time: u32,
    hwnd: ?HWND,
};

pub const CWPSTRUCT = extern struct {
    lParam: LPARAM,
    wParam: WPARAM,
    message: u32,
    hwnd: ?HWND,
};

pub const CWPRETSTRUCT = extern struct {
    lResult: LRESULT,
    lParam: LPARAM,
    wParam: WPARAM,
    message: u32,
    hwnd: ?HWND,
};

pub const KBDLLHOOKSTRUCT = extern struct {
    vkCode: u32,
    scanCode: u32,
    flags: KBDLLHOOKSTRUCT_FLAGS,
    time: u32,
    dwExtraInfo: usize,
};

pub const MSLLHOOKSTRUCT = extern struct {
    pt: POINT,
    mouseData: MOUSEHOOKSTRUCTEX_MOUSE_DATA,
    flags: u32,
    time: u32,
    dwExtraInfo: usize,
};

pub const DEBUGHOOKINFO = extern struct {
    idThread: u32,
    idThreadInstaller: u32,
    lParam: LPARAM,
    wParam: WPARAM,
    code: i32,
};

pub const MOUSEHOOKSTRUCT = extern struct {
    pt: POINT,
    hwnd: ?HWND,
    wHitTestCode: u32,
    dwExtraInfo: usize,
};

pub const MOUSEHOOKSTRUCTEX = extern struct {
    __AnonymousBase_winuser_L1166_C46: MOUSEHOOKSTRUCT,
    mouseData: MOUSEHOOKSTRUCTEX_MOUSE_DATA,
};

pub const HARDWAREHOOKSTRUCT = extern struct {
    hwnd: ?HWND,
    message: u32,
    wParam: WPARAM,
    lParam: LPARAM,
};

pub const WNDCLASSEXA = extern struct {
    cbSize: u32,
    style: WNDCLASS_STYLES,
    lpfnWndProc: ?WNDPROC,
    cbClsExtra: i32,
    cbWndExtra: i32,
    hInstance: ?HINSTANCE,
    hIcon: ?HICON,
    hCursor: ?HCURSOR,
    hbrBackground: ?HBRUSH,
    lpszMenuName: ?[*:0]const u8,
    lpszClassName: ?[*:0]const u8,
    hIconSm: ?HICON,
};

pub const WNDCLASSEXW = extern struct {
    cbSize: u32,
    style: WNDCLASS_STYLES,
    lpfnWndProc: ?WNDPROC,
    cbClsExtra: i32,
    cbWndExtra: i32,
    hInstance: ?HINSTANCE,
    hIcon: ?HICON,
    hCursor: ?HCURSOR,
    hbrBackground: ?HBRUSH,
    lpszMenuName: ?[*:0]const u16,
    lpszClassName: ?[*:0]const u16,
    hIconSm: ?HICON,
};

pub const WNDCLASSA = extern struct {
    style: WNDCLASS_STYLES,
    lpfnWndProc: ?WNDPROC,
    cbClsExtra: i32,
    cbWndExtra: i32,
    hInstance: ?HINSTANCE,
    hIcon: ?HICON,
    hCursor: ?HCURSOR,
    hbrBackground: ?HBRUSH,
    lpszMenuName: ?[*:0]const u8,
    lpszClassName: ?[*:0]const u8,
};

pub const WNDCLASSW = extern struct {
    style: WNDCLASS_STYLES,
    lpfnWndProc: ?WNDPROC,
    cbClsExtra: i32,
    cbWndExtra: i32,
    hInstance: ?HINSTANCE,
    hIcon: ?HICON,
    hCursor: ?HCURSOR,
    hbrBackground: ?HBRUSH,
    lpszMenuName: ?[*:0]const u16,
    lpszClassName: ?[*:0]const u16,
};

pub const MSG = extern struct {
    hwnd: ?HWND,
    message: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    time: u32,
    pt: POINT,
};

pub const MINMAXINFO = extern struct {
    ptReserved: POINT,
    ptMaxSize: POINT,
    ptMaxPosition: POINT,
    ptMinTrackSize: POINT,
    ptMaxTrackSize: POINT,
};

pub const MDINEXTMENU = extern struct {
    hmenuIn: ?HMENU,
    hmenuNext: ?HMENU,
    hwndNext: ?HWND,
};

pub const WINDOWPOS = extern struct {
    hwnd: ?HWND,
    hwndInsertAfter: ?HWND,
    x: i32,
    y: i32,
    cx: i32,
    cy: i32,
    flags: SET_WINDOW_POS_FLAGS,
};

pub const NCCALCSIZE_PARAMS = extern struct {
    rgrc: [3]RECT,
    lppos: ?*WINDOWPOS,
};

pub const ACCEL = extern struct {
    fVirt: u8,
    key: u16,
    cmd: u16,
};

pub const CREATESTRUCTA = extern struct {
    lpCreateParams: ?*anyopaque,
    hInstance: ?HINSTANCE,
    hMenu: ?HMENU,
    hwndParent: ?HWND,
    cy: i32,
    cx: i32,
    y: i32,
    x: i32,
    style: i32,
    lpszName: ?[*:0]const u8,
    lpszClass: ?[*:0]const u8,
    dwExStyle: u32,
};

pub const CREATESTRUCTW = extern struct {
    lpCreateParams: ?*anyopaque,
    hInstance: ?HINSTANCE,
    hMenu: ?HMENU,
    hwndParent: ?HWND,
    cy: i32,
    cx: i32,
    y: i32,
    x: i32,
    style: i32,
    lpszName: ?[*:0]const u16,
    lpszClass: ?[*:0]const u16,
    dwExStyle: u32,
};

pub const WINDOWPLACEMENT = extern struct {
    length: u32,
    flags: WINDOWPLACEMENT_FLAGS,
    showCmd: SHOW_WINDOW_CMD,
    ptMinPosition: POINT,
    ptMaxPosition: POINT,
    rcNormalPosition: RECT,
};

pub const STYLESTRUCT = extern struct {
    styleOld: u32,
    styleNew: u32,
};

pub const PREGISTERCLASSNAMEW = *const fn(
    param0: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOLEAN;

pub const UPDATELAYEREDWINDOWINFO = extern struct {
    cbSize: u32,
    hdcDst: ?HDC,
    pptDst: ?*const POINT,
    psize: ?*const SIZE,
    hdcSrc: ?HDC,
    pptSrc: ?*const POINT,
    crKey: u32,
    pblend: ?*const BLENDFUNCTION,
    dwFlags: UPDATE_LAYERED_WINDOW_FLAGS,
    prcDirty: ?*const RECT,
};

pub const FLASHWINFO = extern struct {
    cbSize: u32,
    hwnd: ?HWND,
    dwFlags: FLASHWINFO_FLAGS,
    uCount: u32,
    dwTimeout: u32,
};

pub const DLGTEMPLATE = extern struct {
    style: u32 align(2),
    dwExtendedStyle: u32 align(2),
    cdit: u16 align(2),
    x: i16 align(2),
    y: i16 align(2),
    cx: i16 align(2),
    cy: i16 align(2),
};

pub const DLGITEMTEMPLATE = extern struct {
    style: u32 align(2),
    dwExtendedStyle: u32 align(2),
    x: i16 align(2),
    y: i16 align(2),
    cx: i16 align(2),
    cy: i16 align(2),
    id: u16 align(2),
};

pub const POINTER_INPUT_TYPE = enum(i32) {
    POINTER = 1,
    TOUCH = 2,
    PEN = 3,
    MOUSE = 4,
    TOUCHPAD = 5,
};
pub const PT_POINTER = POINTER_INPUT_TYPE.POINTER;
pub const PT_TOUCH = POINTER_INPUT_TYPE.TOUCH;
pub const PT_PEN = POINTER_INPUT_TYPE.PEN;
pub const PT_MOUSE = POINTER_INPUT_TYPE.MOUSE;
pub const PT_TOUCHPAD = POINTER_INPUT_TYPE.TOUCHPAD;

pub const TPMPARAMS = extern struct {
    cbSize: u32,
    rcExclude: RECT,
};

pub const MENUINFO = extern struct {
    cbSize: u32,
    fMask: MENUINFO_MASK,
    dwStyle: MENUINFO_STYLE,
    cyMax: u32,
    hbrBack: ?HBRUSH,
    dwContextHelpID: u32,
    dwMenuData: usize,
};

pub const MENUGETOBJECTINFO = extern struct {
    dwFlags: MENUGETOBJECTINFO_FLAGS,
    uPos: u32,
    hmenu: ?HMENU,
    riid: ?*anyopaque,
    pvObj: ?*anyopaque,
};

pub const MENUITEMINFOA = extern struct {
    cbSize: u32,
    fMask: MENU_ITEM_MASK,
    fType: MENU_ITEM_TYPE,
    fState: MENU_ITEM_STATE,
    wID: u32,
    hSubMenu: ?HMENU,
    hbmpChecked: ?HBITMAP,
    hbmpUnchecked: ?HBITMAP,
    dwItemData: usize,
    dwTypeData: ?PSTR,
    cch: u32,
    hbmpItem: ?HBITMAP,
};

pub const MENUITEMINFOW = extern struct {
    cbSize: u32,
    fMask: MENU_ITEM_MASK,
    fType: MENU_ITEM_TYPE,
    fState: MENU_ITEM_STATE,
    wID: u32,
    hSubMenu: ?HMENU,
    hbmpChecked: ?HBITMAP,
    hbmpUnchecked: ?HBITMAP,
    dwItemData: usize,
    dwTypeData: ?PWSTR,
    cch: u32,
    hbmpItem: ?HBITMAP,
};

pub const DROPSTRUCT = extern struct {
    hwndSource: ?HWND,
    hwndSink: ?HWND,
    wFmt: u32,
    dwData: usize,
    ptDrop: POINT,
    dwControlData: u32,
};

pub const MSGBOXCALLBACK = *const fn(
    lpHelpInfo: ?*HELPINFO,
) callconv(@import("std").os.windows.WINAPI) void;

pub const MSGBOXPARAMSA = extern struct {
    cbSize: u32,
    hwndOwner: ?HWND,
    hInstance: ?HINSTANCE,
    lpszText: ?[*:0]const u8,
    lpszCaption: ?[*:0]const u8,
    dwStyle: MESSAGEBOX_STYLE,
    lpszIcon: ?[*:0]const u8,
    dwContextHelpId: usize,
    lpfnMsgBoxCallback: ?MSGBOXCALLBACK,
    dwLanguageId: u32,
};

pub const MSGBOXPARAMSW = extern struct {
    cbSize: u32,
    hwndOwner: ?HWND,
    hInstance: ?HINSTANCE,
    lpszText: ?[*:0]const u16,
    lpszCaption: ?[*:0]const u16,
    dwStyle: MESSAGEBOX_STYLE,
    lpszIcon: ?[*:0]const u16,
    dwContextHelpId: usize,
    lpfnMsgBoxCallback: ?MSGBOXCALLBACK,
    dwLanguageId: u32,
};

pub const MENUITEMTEMPLATEHEADER = extern struct {
    versionNumber: u16,
    offset: u16,
};

pub const MENUITEMTEMPLATE = extern struct {
    mtOption: u16,
    mtID: u16,
    mtString: [1]u16,
};

pub const ICONINFO = extern struct {
    fIcon: BOOL,
    xHotspot: u32,
    yHotspot: u32,
    hbmMask: ?HBITMAP,
    hbmColor: ?HBITMAP,
};

pub const CURSORSHAPE = extern struct {
    xHotSpot: i32,
    yHotSpot: i32,
    cx: i32,
    cy: i32,
    cbWidth: i32,
    Planes: u8,
    BitsPixel: u8,
};

pub const ICONINFOEXA = extern struct {
    cbSize: u32,
    fIcon: BOOL,
    xHotspot: u32,
    yHotspot: u32,
    hbmMask: ?HBITMAP,
    hbmColor: ?HBITMAP,
    wResID: u16,
    szModName: [260]CHAR,
    szResName: [260]CHAR,
};

pub const ICONINFOEXW = extern struct {
    cbSize: u32,
    fIcon: BOOL,
    xHotspot: u32,
    yHotspot: u32,
    hbmMask: ?HBITMAP,
    hbmColor: ?HBITMAP,
    wResID: u16,
    szModName: [260]u16,
    szResName: [260]u16,
};

pub const EDIT_CONTROL_FEATURE = enum(i32) {
    ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT = 0,
    PASTE_NOTIFICATIONS = 1,
};
pub const EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT = EDIT_CONTROL_FEATURE.ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT;
pub const EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS = EDIT_CONTROL_FEATURE.PASTE_NOTIFICATIONS;

pub const SCROLLINFO = extern struct {
    cbSize: u32,
    fMask: SCROLLINFO_MASK,
    nMin: i32,
    nMax: i32,
    nPage: u32,
    nPos: i32,
    nTrackPos: i32,
};

pub const MDICREATESTRUCTA = extern struct {
    szClass: ?[*:0]const u8,
    szTitle: ?[*:0]const u8,
    hOwner: ?HANDLE,
    x: i32,
    y: i32,
    cx: i32,
    cy: i32,
    style: WINDOW_STYLE,
    lParam: LPARAM,
};

pub const MDICREATESTRUCTW = extern struct {
    szClass: ?[*:0]const u16,
    szTitle: ?[*:0]const u16,
    hOwner: ?HANDLE,
    x: i32,
    y: i32,
    cx: i32,
    cy: i32,
    style: WINDOW_STYLE,
    lParam: LPARAM,
};

pub const CLIENTCREATESTRUCT = extern struct {
    hWindowMenu: ?HANDLE,
    idFirstChild: u32,
};

pub const TouchPredictionParameters = extern struct {
    cbSize: u32,
    dwLatency: u32,
    dwSampleTime: u32,
    bUseHWTimeStamp: u32,
};

pub const HANDEDNESS = enum(i32) {
    LEFT = 0,
    RIGHT = 1,
};
pub const HANDEDNESS_LEFT = HANDEDNESS.LEFT;
pub const HANDEDNESS_RIGHT = HANDEDNESS.RIGHT;

pub const NONCLIENTMETRICSA = extern struct {
    cbSize: u32,
    iBorderWidth: i32,
    iScrollWidth: i32,
    iScrollHeight: i32,
    iCaptionWidth: i32,
    iCaptionHeight: i32,
    lfCaptionFont: LOGFONTA,
    iSmCaptionWidth: i32,
    iSmCaptionHeight: i32,
    lfSmCaptionFont: LOGFONTA,
    iMenuWidth: i32,
    iMenuHeight: i32,
    lfMenuFont: LOGFONTA,
    lfStatusFont: LOGFONTA,
    lfMessageFont: LOGFONTA,
    iPaddedBorderWidth: i32,
};

pub const NONCLIENTMETRICSW = extern struct {
    cbSize: u32,
    iBorderWidth: i32,
    iScrollWidth: i32,
    iScrollHeight: i32,
    iCaptionWidth: i32,
    iCaptionHeight: i32,
    lfCaptionFont: LOGFONTW,
    iSmCaptionWidth: i32,
    iSmCaptionHeight: i32,
    lfSmCaptionFont: LOGFONTW,
    iMenuWidth: i32,
    iMenuHeight: i32,
    lfMenuFont: LOGFONTW,
    lfStatusFont: LOGFONTW,
    lfMessageFont: LOGFONTW,
    iPaddedBorderWidth: i32,
};

pub const MINIMIZEDMETRICS = extern struct {
    cbSize: u32,
    iWidth: i32,
    iHorzGap: i32,
    iVertGap: i32,
    iArrange: MINIMIZEDMETRICS_ARRANGE,
};

pub const ICONMETRICSA = extern struct {
    cbSize: u32,
    iHorzSpacing: i32,
    iVertSpacing: i32,
    iTitleWrap: i32,
    lfFont: LOGFONTA,
};

pub const ICONMETRICSW = extern struct {
    cbSize: u32,
    iHorzSpacing: i32,
    iVertSpacing: i32,
    iTitleWrap: i32,
    lfFont: LOGFONTW,
};

pub const ANIMATIONINFO = extern struct {
    cbSize: u32,
    iMinAnimate: i32,
};

pub const AUDIODESCRIPTION = extern struct {
    cbSize: u32,
    Enabled: BOOL,
    Locale: u32,
};

pub const GUITHREADINFO = extern struct {
    cbSize: u32,
    flags: GUITHREADINFO_FLAGS,
    hwndActive: ?HWND,
    hwndFocus: ?HWND,
    hwndCapture: ?HWND,
    hwndMenuOwner: ?HWND,
    hwndMoveSize: ?HWND,
    hwndCaret: ?HWND,
    rcCaret: RECT,
};

pub const CURSORINFO = extern struct {
    cbSize: u32,
    flags: CURSORINFO_FLAGS,
    hCursor: ?HCURSOR,
    ptScreenPos: POINT,
};

pub const WINDOWINFO = extern struct {
    cbSize: u32,
    rcWindow: RECT,
    rcClient: RECT,
    dwStyle: u32,
    dwExStyle: u32,
    dwWindowStatus: u32,
    cxWindowBorders: u32,
    cyWindowBorders: u32,
    atomWindowType: u16,
    wCreatorVersion: u16,
};

pub const TITLEBARINFO = extern struct {
    cbSize: u32,
    rcTitleBar: RECT,
    rgstate: [6]u32,
};

pub const TITLEBARINFOEX = extern struct {
    cbSize: u32,
    rcTitleBar: RECT,
    rgstate: [6]u32,
    rgrect: [6]RECT,
};

pub const MENUBARINFO = extern struct {
    cbSize: u32,
    rcBar: RECT,
    hMenu: ?HMENU,
    hwndMenu: ?HWND,
    _bitfield: i32,
};

pub const SCROLLBARINFO = extern struct {
    cbSize: u32,
    rcScrollBar: RECT,
    dxyLineButton: i32,
    xyThumbTop: i32,
    xyThumbBottom: i32,
    reserved: i32,
    rgstate: [6]u32,
};

pub const ALTTABINFO = extern struct {
    cbSize: u32,
    cItems: i32,
    cColumns: i32,
    cRows: i32,
    iColFocus: i32,
    iRowFocus: i32,
    cxItem: i32,
    cyItem: i32,
    ptStart: POINT,
};

pub const CHANGEFILTERSTRUCT = extern struct {
    cbSize: u32,
    ExtStatus: MSGFLTINFO_STATUS,
};

pub const IndexedResourceQualifier = extern struct {
    name: ?PWSTR,
    value: ?PWSTR,
};

pub const MrmPlatformVersion = enum(i32) {
    Default = 0,
    Windows10_0_0_0 = 17432576,
    Windows10_0_0_5 = 17432581,
};
pub const MrmPlatformVersion_Default = MrmPlatformVersion.Default;
pub const MrmPlatformVersion_Windows10_0_0_0 = MrmPlatformVersion.Windows10_0_0_0;
pub const MrmPlatformVersion_Windows10_0_0_5 = MrmPlatformVersion.Windows10_0_0_5;

pub const MrmResourceIndexerHandle = extern struct {
    handle: ?*anyopaque,
};

pub const MrmPackagingMode = enum(i32) {
    StandaloneFile = 0,
    AutoSplit = 1,
    ResourcePack = 2,
};
pub const MrmPackagingModeStandaloneFile = MrmPackagingMode.StandaloneFile;
pub const MrmPackagingModeAutoSplit = MrmPackagingMode.AutoSplit;
pub const MrmPackagingModeResourcePack = MrmPackagingMode.ResourcePack;

pub const MrmPackagingOptions = enum(i32) {
    None = 0,
    OmitSchemaFromResourcePacks = 1,
    SplitLanguageVariants = 2,
};
pub const MrmPackagingOptionsNone = MrmPackagingOptions.None;
pub const MrmPackagingOptionsOmitSchemaFromResourcePacks = MrmPackagingOptions.OmitSchemaFromResourcePacks;
pub const MrmPackagingOptionsSplitLanguageVariants = MrmPackagingOptions.SplitLanguageVariants;

pub const MrmDumpType = enum(i32) {
    Basic = 0,
    Detailed = 1,
    Schema = 2,
};
pub const MrmDumpType_Basic = MrmDumpType.Basic;
pub const MrmDumpType_Detailed = MrmDumpType.Detailed;
pub const MrmDumpType_Schema = MrmDumpType.Schema;

pub const MrmResourceIndexerMessageSeverity = enum(i32) {
    Verbose = 0,
    Info = 1,
    Warning = 2,
    Error = 3,
};
pub const MrmResourceIndexerMessageSeverityVerbose = MrmResourceIndexerMessageSeverity.Verbose;
pub const MrmResourceIndexerMessageSeverityInfo = MrmResourceIndexerMessageSeverity.Info;
pub const MrmResourceIndexerMessageSeverityWarning = MrmResourceIndexerMessageSeverity.Warning;
pub const MrmResourceIndexerMessageSeverityError = MrmResourceIndexerMessageSeverity.Error;

pub const MrmIndexerFlags = enum(i32) {
    None = 0,
    AutoMerge = 1,
    CreateContentChecksum = 2,
};
pub const MrmIndexerFlagsNone = MrmIndexerFlags.None;
pub const MrmIndexerFlagsAutoMerge = MrmIndexerFlags.AutoMerge;
pub const MrmIndexerFlagsCreateContentChecksum = MrmIndexerFlags.CreateContentChecksum;

pub const MrmResourceIndexerMessage = extern struct {
    severity: MrmResourceIndexerMessageSeverity,
    id: u32,
    text: ?[*:0]const u16,
};


//--------------------------------------------------------------------------------
// Section: Functions (414)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn LoadStringA(
    hInstance: ?HINSTANCE,
    uID: u32,
    lpBuffer: ?PSTR,
    cchBufferMax: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn LoadStringW(
    hInstance: ?HINSTANCE,
    uID: u32,
    lpBuffer: ?PWSTR,
    cchBufferMax: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn wvsprintfA(
    param0: ?PSTR,
    param1: ?[*:0]const u8,
    arglist: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn wvsprintfW(
    param0: ?PWSTR,
    param1: ?[*:0]const u16,
    arglist: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn wsprintfA(
    param0: ?PSTR,
    param1: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn wsprintfW(
    param0: ?PWSTR,
    param1: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn IsHungAppWindow(
    hwnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn DisableProcessWindowsGhosting(
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn RegisterWindowMessageA(
    lpString: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn RegisterWindowMessageW(
    lpString: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetMessageA(
    lpMsg: ?*MSG,
    hWnd: ?HWND,
    wMsgFilterMin: u32,
    wMsgFilterMax: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetMessageW(
    lpMsg: ?*MSG,
    hWnd: ?HWND,
    wMsgFilterMin: u32,
    wMsgFilterMax: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn TranslateMessage(
    lpMsg: ?*const MSG,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DispatchMessageA(
    lpMsg: ?*const MSG,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DispatchMessageW(
    lpMsg: ?*const MSG,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "user32" fn SetMessageQueue(
    cMessagesMax: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn PeekMessageA(
    lpMsg: ?*MSG,
    hWnd: ?HWND,
    wMsgFilterMin: u32,
    wMsgFilterMax: u32,
    wRemoveMsg: PEEK_MESSAGE_REMOVE_TYPE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn PeekMessageW(
    lpMsg: ?*MSG,
    hWnd: ?HWND,
    wMsgFilterMin: u32,
    wMsgFilterMax: u32,
    wRemoveMsg: PEEK_MESSAGE_REMOVE_TYPE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetMessagePos(
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetMessageTime(
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetMessageExtraInfo(
) callconv(@import("std").os.windows.WINAPI) LPARAM;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "user32" fn IsWow64Message(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetMessageExtraInfo(
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LPARAM;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SendMessageA(
    hWnd: ?HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SendMessageW(
    hWnd: ?HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SendMessageTimeoutA(
    hWnd: ?HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    fuFlags: SEND_MESSAGE_TIMEOUT_FLAGS,
    uTimeout: u32,
    lpdwResult: ?*usize,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SendMessageTimeoutW(
    hWnd: ?HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    fuFlags: SEND_MESSAGE_TIMEOUT_FLAGS,
    uTimeout: u32,
    lpdwResult: ?*usize,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SendNotifyMessageA(
    hWnd: ?HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SendNotifyMessageW(
    hWnd: ?HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SendMessageCallbackA(
    hWnd: ?HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    lpResultCallBack: ?SENDASYNCPROC,
    dwData: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SendMessageCallbackW(
    hWnd: ?HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    lpResultCallBack: ?SENDASYNCPROC,
    dwData: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn RegisterDeviceNotificationA(
    hRecipient: ?HANDLE,
    NotificationFilter: ?*anyopaque,
    Flags: POWER_SETTING_REGISTER_NOTIFICATION_FLAGS,
) callconv(@import("std").os.windows.WINAPI) ?*anyopaque;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn RegisterDeviceNotificationW(
    hRecipient: ?HANDLE,
    NotificationFilter: ?*anyopaque,
    Flags: POWER_SETTING_REGISTER_NOTIFICATION_FLAGS,
) callconv(@import("std").os.windows.WINAPI) ?*anyopaque;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn PostMessageA(
    hWnd: ?HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn PostMessageW(
    hWnd: ?HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn PostThreadMessageA(
    idThread: u32,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn PostThreadMessageW(
    idThread: u32,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn ReplyMessage(
    lResult: LRESULT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn WaitMessage(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DefWindowProcA(
    hWnd: ?HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DefWindowProcW(
    hWnd: ?HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn PostQuitMessage(
    nExitCode: i32,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CallWindowProcA(
    lpPrevWndFunc: ?WNDPROC,
    hWnd: ?HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CallWindowProcW(
    lpPrevWndFunc: ?WNDPROC,
    hWnd: ?HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn InSendMessage(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn InSendMessageEx(
    lpReserved: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn RegisterClassA(
    lpWndClass: ?*const WNDCLASSA,
) callconv(@import("std").os.windows.WINAPI) u16;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn RegisterClassW(
    lpWndClass: ?*const WNDCLASSW,
) callconv(@import("std").os.windows.WINAPI) u16;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn UnregisterClassA(
    lpClassName: ?[*:0]align(1) const u8,
    hInstance: ?HINSTANCE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn UnregisterClassW(
    lpClassName: ?[*:0]align(1) const u16,
    hInstance: ?HINSTANCE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetClassInfoA(
    hInstance: ?HINSTANCE,
    lpClassName: ?[*:0]const u8,
    lpWndClass: ?*WNDCLASSA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetClassInfoW(
    hInstance: ?HINSTANCE,
    lpClassName: ?[*:0]const u16,
    lpWndClass: ?*WNDCLASSW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn RegisterClassExA(
    param0: ?*const WNDCLASSEXA,
) callconv(@import("std").os.windows.WINAPI) u16;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn RegisterClassExW(
    param0: ?*const WNDCLASSEXW,
) callconv(@import("std").os.windows.WINAPI) u16;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetClassInfoExA(
    hInstance: ?HINSTANCE,
    lpszClass: ?[*:0]const u8,
    lpwcx: ?*WNDCLASSEXA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetClassInfoExW(
    hInstance: ?HINSTANCE,
    lpszClass: ?[*:0]const u16,
    lpwcx: ?*WNDCLASSEXW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CreateWindowExA(
    dwExStyle: WINDOW_EX_STYLE,
    lpClassName: ?[*:0]align(1) const u8,
    lpWindowName: ?[*:0]const u8,
    dwStyle: WINDOW_STYLE,
    X: i32,
    Y: i32,
    nWidth: i32,
    nHeight: i32,
    hWndParent: ?HWND,
    hMenu: ?HMENU,
    hInstance: ?HINSTANCE,
    lpParam: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CreateWindowExW(
    dwExStyle: WINDOW_EX_STYLE,
    lpClassName: ?[*:0]align(1) const u16,
    lpWindowName: ?[*:0]const u16,
    dwStyle: WINDOW_STYLE,
    X: i32,
    Y: i32,
    nWidth: i32,
    nHeight: i32,
    hWndParent: ?HWND,
    hMenu: ?HMENU,
    hInstance: ?HINSTANCE,
    lpParam: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn IsWindow(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn IsMenu(
    hMenu: ?HMENU,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn IsChild(
    hWndParent: ?HWND,
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DestroyWindow(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn ShowWindow(
    hWnd: ?HWND,
    nCmdShow: SHOW_WINDOW_CMD,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn AnimateWindow(
    hWnd: ?HWND,
    dwTime: u32,
    dwFlags: ANIMATE_WINDOW_FLAGS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn UpdateLayeredWindow(
    hWnd: ?HWND,
    hdcDst: ?HDC,
    pptDst: ?*POINT,
    psize: ?*SIZE,
    hdcSrc: ?HDC,
    pptSrc: ?*POINT,
    crKey: u32,
    pblend: ?*BLENDFUNCTION,
    dwFlags: UPDATE_LAYERED_WINDOW_FLAGS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "user32" fn UpdateLayeredWindowIndirect(
    hWnd: ?HWND,
    pULWInfo: ?*const UPDATELAYEREDWINDOWINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn GetLayeredWindowAttributes(
    hwnd: ?HWND,
    pcrKey: ?*u32,
    pbAlpha: ?*u8,
    pdwFlags: ?*LAYERED_WINDOW_ATTRIBUTES_FLAGS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetLayeredWindowAttributes(
    hwnd: ?HWND,
    crKey: u32,
    bAlpha: u8,
    dwFlags: LAYERED_WINDOW_ATTRIBUTES_FLAGS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn ShowWindowAsync(
    hWnd: ?HWND,
    nCmdShow: SHOW_WINDOW_CMD,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn FlashWindow(
    hWnd: ?HWND,
    bInvert: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn FlashWindowEx(
    pfwi: ?*FLASHWINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn ShowOwnedPopups(
    hWnd: ?HWND,
    fShow: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn OpenIcon(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CloseWindow(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn MoveWindow(
    hWnd: ?HWND,
    X: i32,
    Y: i32,
    nWidth: i32,
    nHeight: i32,
    bRepaint: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetWindowPos(
    hWnd: ?HWND,
    hWndInsertAfter: ?HWND,
    X: i32,
    Y: i32,
    cx: i32,
    cy: i32,
    uFlags: SET_WINDOW_POS_FLAGS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetWindowPlacement(
    hWnd: ?HWND,
    lpwndpl: ?*WINDOWPLACEMENT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetWindowPlacement(
    hWnd: ?HWND,
    lpwndpl: ?*const WINDOWPLACEMENT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "user32" fn GetWindowDisplayAffinity(
    hWnd: ?HWND,
    pdwAffinity: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "user32" fn SetWindowDisplayAffinity(
    hWnd: ?HWND,
    dwAffinity: WINDOW_DISPLAY_AFFINITY,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn BeginDeferWindowPos(
    nNumWindows: i32,
) callconv(@import("std").os.windows.WINAPI) isize;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DeferWindowPos(
    hWinPosInfo: isize,
    hWnd: ?HWND,
    hWndInsertAfter: ?HWND,
    x: i32,
    y: i32,
    cx: i32,
    cy: i32,
    uFlags: SET_WINDOW_POS_FLAGS,
) callconv(@import("std").os.windows.WINAPI) isize;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn EndDeferWindowPos(
    hWinPosInfo: isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn IsWindowVisible(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn IsIconic(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn AnyPopup(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn BringWindowToTop(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn IsZoomed(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CreateDialogParamA(
    hInstance: ?HINSTANCE,
    lpTemplateName: ?[*:0]const u8,
    hWndParent: ?HWND,
    lpDialogFunc: ?DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CreateDialogParamW(
    hInstance: ?HINSTANCE,
    lpTemplateName: ?[*:0]const u16,
    hWndParent: ?HWND,
    lpDialogFunc: ?DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CreateDialogIndirectParamA(
    hInstance: ?HINSTANCE,
    lpTemplate: ?*DLGTEMPLATE,
    hWndParent: ?HWND,
    lpDialogFunc: ?DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CreateDialogIndirectParamW(
    hInstance: ?HINSTANCE,
    lpTemplate: ?*DLGTEMPLATE,
    hWndParent: ?HWND,
    lpDialogFunc: ?DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DialogBoxParamA(
    hInstance: ?HINSTANCE,
    lpTemplateName: ?[*:0]const u8,
    hWndParent: ?HWND,
    lpDialogFunc: ?DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) isize;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DialogBoxParamW(
    hInstance: ?HINSTANCE,
    lpTemplateName: ?[*:0]const u16,
    hWndParent: ?HWND,
    lpDialogFunc: ?DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) isize;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DialogBoxIndirectParamA(
    hInstance: ?HINSTANCE,
    hDialogTemplate: ?*DLGTEMPLATE,
    hWndParent: ?HWND,
    lpDialogFunc: ?DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) isize;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DialogBoxIndirectParamW(
    hInstance: ?HINSTANCE,
    hDialogTemplate: ?*DLGTEMPLATE,
    hWndParent: ?HWND,
    lpDialogFunc: ?DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) isize;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn EndDialog(
    hDlg: ?HWND,
    nResult: isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetDlgItem(
    hDlg: ?HWND,
    nIDDlgItem: i32,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetDlgItemInt(
    hDlg: ?HWND,
    nIDDlgItem: i32,
    uValue: u32,
    bSigned: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetDlgItemInt(
    hDlg: ?HWND,
    nIDDlgItem: i32,
    lpTranslated: ?*BOOL,
    bSigned: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetDlgItemTextA(
    hDlg: ?HWND,
    nIDDlgItem: i32,
    lpString: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetDlgItemTextW(
    hDlg: ?HWND,
    nIDDlgItem: i32,
    lpString: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetDlgItemTextA(
    hDlg: ?HWND,
    nIDDlgItem: i32,
    lpString: [*:0]u8,
    cchMax: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetDlgItemTextW(
    hDlg: ?HWND,
    nIDDlgItem: i32,
    lpString: [*:0]u16,
    cchMax: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SendDlgItemMessageA(
    hDlg: ?HWND,
    nIDDlgItem: i32,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SendDlgItemMessageW(
    hDlg: ?HWND,
    nIDDlgItem: i32,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetNextDlgGroupItem(
    hDlg: ?HWND,
    hCtl: ?HWND,
    bPrevious: BOOL,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetNextDlgTabItem(
    hDlg: ?HWND,
    hCtl: ?HWND,
    bPrevious: BOOL,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetDlgCtrlID(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetDialogBaseUnits(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "user32" fn DefDlgProcA(
    hDlg: ?HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DefDlgProcW(
    hDlg: ?HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CallMsgFilterA(
    lpMsg: ?*MSG,
    nCode: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CallMsgFilterW(
    lpMsg: ?*MSG,
    nCode: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CharToOemA(
    pSrc: ?[*:0]const u8,
    pDst: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CharToOemW(
    pSrc: ?[*:0]const u16,
    pDst: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn OemToCharA(
    pSrc: ?[*:0]const u8,
    pDst: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn OemToCharW(
    pSrc: ?[*:0]const u8,
    pDst: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CharToOemBuffA(
    lpszSrc: ?[*:0]const u8,
    lpszDst: [*:0]u8,
    cchDstLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CharToOemBuffW(
    lpszSrc: ?[*:0]const u16,
    lpszDst: [*:0]u8,
    cchDstLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn OemToCharBuffA(
    lpszSrc: ?[*:0]const u8,
    lpszDst: [*:0]u8,
    cchDstLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn OemToCharBuffW(
    lpszSrc: ?[*:0]const u8,
    lpszDst: [*:0]u16,
    cchDstLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CharUpperA(
    lpsz: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CharUpperW(
    lpsz: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CharUpperBuffA(
    lpsz: [*:0]u8,
    cchLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CharUpperBuffW(
    lpsz: [*:0]u16,
    cchLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CharLowerA(
    lpsz: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CharLowerW(
    lpsz: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CharLowerBuffA(
    lpsz: [*:0]u8,
    cchLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CharLowerBuffW(
    lpsz: [*:0]u16,
    cchLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CharNextA(
    lpsz: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CharNextW(
    lpsz: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CharPrevA(
    lpszStart: ?[*:0]const u8,
    lpszCurrent: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CharPrevW(
    lpszStart: ?[*:0]const u16,
    lpszCurrent: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CharNextExA(
    CodePage: u16,
    lpCurrentChar: ?[*:0]const u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CharPrevExA(
    CodePage: u16,
    lpStart: ?[*:0]const u8,
    lpCurrentChar: ?[*:0]const u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn IsCharAlphaA(
    ch: CHAR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn IsCharAlphaW(
    ch: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn IsCharAlphaNumericA(
    ch: CHAR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn IsCharAlphaNumericW(
    ch: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn IsCharUpperA(
    ch: CHAR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn IsCharUpperW(
    ch: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn IsCharLowerA(
    ch: CHAR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetInputState(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetQueueStatus(
    flags: QUEUE_STATUS_FLAGS,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn MsgWaitForMultipleObjects(
    nCount: u32,
    pHandles: ?[*]const ?HANDLE,
    fWaitAll: BOOL,
    dwMilliseconds: u32,
    dwWakeMask: QUEUE_STATUS_FLAGS,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn MsgWaitForMultipleObjectsEx(
    nCount: u32,
    pHandles: ?[*]const ?HANDLE,
    dwMilliseconds: u32,
    dwWakeMask: QUEUE_STATUS_FLAGS,
    dwFlags: MSG_WAIT_FOR_MULTIPLE_OBJECTS_EX_FLAGS,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetTimer(
    hWnd: ?HWND,
    nIDEvent: usize,
    uElapse: u32,
    lpTimerFunc: ?TIMERPROC,
) callconv(@import("std").os.windows.WINAPI) usize;

// TODO: this type is limited to platform 'windows8.0'
pub extern "user32" fn SetCoalescableTimer(
    hWnd: ?HWND,
    nIDEvent: usize,
    uElapse: u32,
    lpTimerFunc: ?TIMERPROC,
    uToleranceDelay: u32,
) callconv(@import("std").os.windows.WINAPI) usize;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn KillTimer(
    hWnd: ?HWND,
    uIDEvent: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn IsWindowUnicode(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn LoadAcceleratorsA(
    hInstance: ?HINSTANCE,
    lpTableName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?HACCEL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn LoadAcceleratorsW(
    hInstance: ?HINSTANCE,
    lpTableName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?HACCEL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CreateAcceleratorTableA(
    paccel: [*]ACCEL,
    cAccel: i32,
) callconv(@import("std").os.windows.WINAPI) ?HACCEL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CreateAcceleratorTableW(
    paccel: [*]ACCEL,
    cAccel: i32,
) callconv(@import("std").os.windows.WINAPI) ?HACCEL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DestroyAcceleratorTable(
    hAccel: ?HACCEL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CopyAcceleratorTableA(
    hAccelSrc: ?HACCEL,
    lpAccelDst: ?[*]ACCEL,
    cAccelEntries: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CopyAcceleratorTableW(
    hAccelSrc: ?HACCEL,
    lpAccelDst: ?[*]ACCEL,
    cAccelEntries: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn TranslateAcceleratorA(
    hWnd: ?HWND,
    hAccTable: ?HACCEL,
    lpMsg: ?*MSG,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn TranslateAcceleratorW(
    hWnd: ?HWND,
    hAccTable: ?HACCEL,
    lpMsg: ?*MSG,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetSystemMetrics(
    nIndex: SYSTEM_METRICS_INDEX,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn LoadMenuA(
    hInstance: ?HINSTANCE,
    lpMenuName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?HMENU;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn LoadMenuW(
    hInstance: ?HINSTANCE,
    lpMenuName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?HMENU;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn LoadMenuIndirectA(
    lpMenuTemplate: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) ?HMENU;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn LoadMenuIndirectW(
    lpMenuTemplate: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) ?HMENU;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetMenu(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) ?HMENU;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetMenu(
    hWnd: ?HWND,
    hMenu: ?HMENU,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "user32" fn ChangeMenuA(
    hMenu: ?HMENU,
    cmd: u32,
    lpszNewItem: ?[*:0]const u8,
    cmdInsert: u32,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "user32" fn ChangeMenuW(
    hMenu: ?HMENU,
    cmd: u32,
    lpszNewItem: ?[*:0]const u16,
    cmdInsert: u32,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn HiliteMenuItem(
    hWnd: ?HWND,
    hMenu: ?HMENU,
    uIDHiliteItem: u32,
    uHilite: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetMenuStringA(
    hMenu: ?HMENU,
    uIDItem: u32,
    lpString: ?[*:0]u8,
    cchMax: i32,
    flags: MENU_ITEM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetMenuStringW(
    hMenu: ?HMENU,
    uIDItem: u32,
    lpString: ?[*:0]u16,
    cchMax: i32,
    flags: MENU_ITEM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetMenuState(
    hMenu: ?HMENU,
    uId: u32,
    uFlags: MENU_ITEM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DrawMenuBar(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetSystemMenu(
    hWnd: ?HWND,
    bRevert: BOOL,
) callconv(@import("std").os.windows.WINAPI) ?HMENU;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CreateMenu(
) callconv(@import("std").os.windows.WINAPI) ?HMENU;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CreatePopupMenu(
) callconv(@import("std").os.windows.WINAPI) ?HMENU;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DestroyMenu(
    hMenu: ?HMENU,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CheckMenuItem(
    hMenu: ?HMENU,
    uIDCheckItem: u32,
    uCheck: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn EnableMenuItem(
    hMenu: ?HMENU,
    uIDEnableItem: u32,
    uEnable: MENU_ITEM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetSubMenu(
    hMenu: ?HMENU,
    nPos: i32,
) callconv(@import("std").os.windows.WINAPI) ?HMENU;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetMenuItemID(
    hMenu: ?HMENU,
    nPos: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetMenuItemCount(
    hMenu: ?HMENU,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn InsertMenuA(
    hMenu: ?HMENU,
    uPosition: u32,
    uFlags: MENU_ITEM_FLAGS,
    uIDNewItem: usize,
    lpNewItem: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn InsertMenuW(
    hMenu: ?HMENU,
    uPosition: u32,
    uFlags: MENU_ITEM_FLAGS,
    uIDNewItem: usize,
    lpNewItem: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn AppendMenuA(
    hMenu: ?HMENU,
    uFlags: MENU_ITEM_FLAGS,
    uIDNewItem: usize,
    lpNewItem: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn AppendMenuW(
    hMenu: ?HMENU,
    uFlags: MENU_ITEM_FLAGS,
    uIDNewItem: usize,
    lpNewItem: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn ModifyMenuA(
    hMnu: ?HMENU,
    uPosition: u32,
    uFlags: MENU_ITEM_FLAGS,
    uIDNewItem: usize,
    lpNewItem: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn ModifyMenuW(
    hMnu: ?HMENU,
    uPosition: u32,
    uFlags: MENU_ITEM_FLAGS,
    uIDNewItem: usize,
    lpNewItem: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn RemoveMenu(
    hMenu: ?HMENU,
    uPosition: u32,
    uFlags: MENU_ITEM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DeleteMenu(
    hMenu: ?HMENU,
    uPosition: u32,
    uFlags: MENU_ITEM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetMenuItemBitmaps(
    hMenu: ?HMENU,
    uPosition: u32,
    uFlags: MENU_ITEM_FLAGS,
    hBitmapUnchecked: ?HBITMAP,
    hBitmapChecked: ?HBITMAP,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetMenuCheckMarkDimensions(
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn TrackPopupMenu(
    hMenu: ?HMENU,
    uFlags: TRACK_POPUP_MENU_FLAGS,
    x: i32,
    y: i32,
    nReserved: i32,
    hWnd: ?HWND,
    prcRect: ?*const RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn TrackPopupMenuEx(
    hMenu: ?HMENU,
    uFlags: u32,
    x: i32,
    y: i32,
    hwnd: ?HWND,
    lptpm: ?*TPMPARAMS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "user32" fn CalculatePopupWindowPosition(
    anchorPoint: ?*const POINT,
    windowSize: ?*const SIZE,
    flags: u32,
    excludeRect: ?*RECT,
    popupWindowPosition: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetMenuInfo(
    param0: ?HMENU,
    param1: ?*MENUINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetMenuInfo(
    param0: ?HMENU,
    param1: ?*MENUINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn EndMenu(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn InsertMenuItemA(
    hmenu: ?HMENU,
    item: u32,
    fByPosition: BOOL,
    lpmi: ?*MENUITEMINFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn InsertMenuItemW(
    hmenu: ?HMENU,
    item: u32,
    fByPosition: BOOL,
    lpmi: ?*MENUITEMINFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetMenuItemInfoA(
    hmenu: ?HMENU,
    item: u32,
    fByPosition: BOOL,
    lpmii: ?*MENUITEMINFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetMenuItemInfoW(
    hmenu: ?HMENU,
    item: u32,
    fByPosition: BOOL,
    lpmii: ?*MENUITEMINFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetMenuItemInfoA(
    hmenu: ?HMENU,
    item: u32,
    fByPositon: BOOL,
    lpmii: ?*MENUITEMINFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetMenuItemInfoW(
    hmenu: ?HMENU,
    item: u32,
    fByPositon: BOOL,
    lpmii: ?*MENUITEMINFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetMenuDefaultItem(
    hMenu: ?HMENU,
    fByPos: u32,
    gmdiFlags: GET_MENU_DEFAULT_ITEM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetMenuDefaultItem(
    hMenu: ?HMENU,
    uItem: u32,
    fByPos: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetMenuItemRect(
    hWnd: ?HWND,
    hMenu: ?HMENU,
    uItem: u32,
    lprcItem: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn MenuItemFromPoint(
    hWnd: ?HWND,
    hMenu: ?HMENU,
    ptScreen: POINT,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "user32" fn DragObject(
    hwndParent: ?HWND,
    hwndFrom: ?HWND,
    fmt: u32,
    data: usize,
    hcur: ?HCURSOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DrawIcon(
    hDC: ?HDC,
    X: i32,
    Y: i32,
    hIcon: ?HICON,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetForegroundWindow(
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SwitchToThisWindow(
    hwnd: ?HWND,
    fUnknown: BOOL,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetForegroundWindow(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn AllowSetForegroundWindow(
    dwProcessId: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn LockSetForegroundWindow(
    uLockCode: FOREGROUND_WINDOW_LOCK_CODE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "user32" fn ScrollWindow(
    hWnd: ?HWND,
    XAmount: i32,
    YAmount: i32,
    lpRect: ?*const RECT,
    lpClipRect: ?*const RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "user32" fn ScrollDC(
    hDC: ?HDC,
    dx: i32,
    dy: i32,
    lprcScroll: ?*const RECT,
    lprcClip: ?*const RECT,
    hrgnUpdate: ?HRGN,
    lprcUpdate: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "user32" fn ScrollWindowEx(
    hWnd: ?HWND,
    dx: i32,
    dy: i32,
    prcScroll: ?*const RECT,
    prcClip: ?*const RECT,
    hrgnUpdate: ?HRGN,
    prcUpdate: ?*RECT,
    flags: SHOW_WINDOW_CMD,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "user32" fn GetScrollPos(
    hWnd: ?HWND,
    nBar: SCROLLBAR_CONSTANTS,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "user32" fn GetScrollRange(
    hWnd: ?HWND,
    nBar: SCROLLBAR_CONSTANTS,
    lpMinPos: ?*i32,
    lpMaxPos: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetPropA(
    hWnd: ?HWND,
    lpString: ?[*:0]const u8,
    hData: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetPropW(
    hWnd: ?HWND,
    lpString: ?[*:0]const u16,
    hData: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetPropA(
    hWnd: ?HWND,
    lpString: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetPropW(
    hWnd: ?HWND,
    lpString: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn RemovePropA(
    hWnd: ?HWND,
    lpString: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn RemovePropW(
    hWnd: ?HWND,
    lpString: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn EnumPropsExA(
    hWnd: ?HWND,
    lpEnumFunc: ?PROPENUMPROCEXA,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn EnumPropsExW(
    hWnd: ?HWND,
    lpEnumFunc: ?PROPENUMPROCEXW,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn EnumPropsA(
    hWnd: ?HWND,
    lpEnumFunc: ?PROPENUMPROCA,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn EnumPropsW(
    hWnd: ?HWND,
    lpEnumFunc: ?PROPENUMPROCW,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetWindowTextA(
    hWnd: ?HWND,
    lpString: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetWindowTextW(
    hWnd: ?HWND,
    lpString: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetWindowTextA(
    hWnd: ?HWND,
    lpString: [*:0]u8,
    nMaxCount: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetWindowTextW(
    hWnd: ?HWND,
    lpString: [*:0]u16,
    nMaxCount: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetWindowTextLengthA(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetWindowTextLengthW(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetClientRect(
    hWnd: ?HWND,
    lpRect: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetWindowRect(
    hWnd: ?HWND,
    lpRect: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn AdjustWindowRect(
    lpRect: ?*RECT,
    dwStyle: WINDOW_STYLE,
    bMenu: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn AdjustWindowRectEx(
    lpRect: ?*RECT,
    dwStyle: WINDOW_STYLE,
    bMenu: BOOL,
    dwExStyle: WINDOW_EX_STYLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn MessageBoxA(
    hWnd: ?HWND,
    lpText: ?[*:0]const u8,
    lpCaption: ?[*:0]const u8,
    uType: MESSAGEBOX_STYLE,
) callconv(@import("std").os.windows.WINAPI) MESSAGEBOX_RESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn MessageBoxW(
    hWnd: ?HWND,
    lpText: ?[*:0]const u16,
    lpCaption: ?[*:0]const u16,
    uType: MESSAGEBOX_STYLE,
) callconv(@import("std").os.windows.WINAPI) MESSAGEBOX_RESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn MessageBoxExA(
    hWnd: ?HWND,
    lpText: ?[*:0]const u8,
    lpCaption: ?[*:0]const u8,
    uType: MESSAGEBOX_STYLE,
    wLanguageId: u16,
) callconv(@import("std").os.windows.WINAPI) MESSAGEBOX_RESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn MessageBoxExW(
    hWnd: ?HWND,
    lpText: ?[*:0]const u16,
    lpCaption: ?[*:0]const u16,
    uType: MESSAGEBOX_STYLE,
    wLanguageId: u16,
) callconv(@import("std").os.windows.WINAPI) MESSAGEBOX_RESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn MessageBoxIndirectA(
    lpmbp: ?*const MSGBOXPARAMSA,
) callconv(@import("std").os.windows.WINAPI) MESSAGEBOX_RESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn MessageBoxIndirectW(
    lpmbp: ?*const MSGBOXPARAMSW,
) callconv(@import("std").os.windows.WINAPI) MESSAGEBOX_RESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn ShowCursor(
    bShow: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetCursorPos(
    X: i32,
    Y: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "user32" fn SetPhysicalCursorPos(
    X: i32,
    Y: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetCursor(
    hCursor: ?HCURSOR,
) callconv(@import("std").os.windows.WINAPI) ?HCURSOR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetCursorPos(
    lpPoint: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "user32" fn GetPhysicalCursorPos(
    lpPoint: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetClipCursor(
    lpRect: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetCursor(
) callconv(@import("std").os.windows.WINAPI) ?HCURSOR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CreateCaret(
    hWnd: ?HWND,
    hBitmap: ?HBITMAP,
    nWidth: i32,
    nHeight: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetCaretBlinkTime(
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetCaretBlinkTime(
    uMSeconds: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DestroyCaret(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn HideCaret(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn ShowCaret(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetCaretPos(
    X: i32,
    Y: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetCaretPos(
    lpPoint: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "user32" fn LogicalToPhysicalPoint(
    hWnd: ?HWND,
    lpPoint: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "user32" fn PhysicalToLogicalPoint(
    hWnd: ?HWND,
    lpPoint: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn WindowFromPoint(
    Point: POINT,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "user32" fn WindowFromPhysicalPoint(
    Point: POINT,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn ChildWindowFromPoint(
    hWndParent: ?HWND,
    Point: POINT,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn ClipCursor(
    lpRect: ?*const RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn ChildWindowFromPointEx(
    hwnd: ?HWND,
    pt: POINT,
    flags: CWP_FLAGS,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetSysColor(
    nIndex: SYS_COLOR_INDEX,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetSysColors(
    cElements: i32,
    lpaElements: [*]const i32,
    lpaRgbValues: [*]const u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "user32" fn GetWindowWord(
    hWnd: ?HWND,
    nIndex: i32,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "user32" fn SetWindowWord(
    hWnd: ?HWND,
    nIndex: i32,
    wNewWord: u16,
) callconv(@import("std").os.windows.WINAPI) u16;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetWindowLongA(
    hWnd: ?HWND,
    nIndex: WINDOW_LONG_PTR_INDEX,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetWindowLongW(
    hWnd: ?HWND,
    nIndex: WINDOW_LONG_PTR_INDEX,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetWindowLongA(
    hWnd: ?HWND,
    nIndex: WINDOW_LONG_PTR_INDEX,
    dwNewLong: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetWindowLongW(
    hWnd: ?HWND,
    nIndex: WINDOW_LONG_PTR_INDEX,
    dwNewLong: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const GetWindowLongPtrA = switch (@import("../zig.zig").arch) {
.X64, .Arm64 => (struct {

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetWindowLongPtrA(
    hWnd: ?HWND,
    nIndex: WINDOW_LONG_PTR_INDEX,
) callconv(@import("std").os.windows.WINAPI) isize;

}).GetWindowLongPtrA,
    else => |a| if (@import("builtin").is_test) void else @compileError("function 'GetWindowLongPtrA' is not supported on architecture " ++ @tagName(a)),
};

pub const GetWindowLongPtrW = switch (@import("../zig.zig").arch) {
.X64, .Arm64 => (struct {

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetWindowLongPtrW(
    hWnd: ?HWND,
    nIndex: WINDOW_LONG_PTR_INDEX,
) callconv(@import("std").os.windows.WINAPI) isize;

}).GetWindowLongPtrW,
    else => |a| if (@import("builtin").is_test) void else @compileError("function 'GetWindowLongPtrW' is not supported on architecture " ++ @tagName(a)),
};

pub const SetWindowLongPtrA = switch (@import("../zig.zig").arch) {
.X64, .Arm64 => (struct {

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetWindowLongPtrA(
    hWnd: ?HWND,
    nIndex: WINDOW_LONG_PTR_INDEX,
    dwNewLong: isize,
) callconv(@import("std").os.windows.WINAPI) isize;

}).SetWindowLongPtrA,
    else => |a| if (@import("builtin").is_test) void else @compileError("function 'SetWindowLongPtrA' is not supported on architecture " ++ @tagName(a)),
};

pub const SetWindowLongPtrW = switch (@import("../zig.zig").arch) {
.X64, .Arm64 => (struct {

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetWindowLongPtrW(
    hWnd: ?HWND,
    nIndex: WINDOW_LONG_PTR_INDEX,
    dwNewLong: isize,
) callconv(@import("std").os.windows.WINAPI) isize;

}).SetWindowLongPtrW,
    else => |a| if (@import("builtin").is_test) void else @compileError("function 'SetWindowLongPtrW' is not supported on architecture " ++ @tagName(a)),
};

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetClassWord(
    hWnd: ?HWND,
    nIndex: i32,
) callconv(@import("std").os.windows.WINAPI) u16;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetClassWord(
    hWnd: ?HWND,
    nIndex: i32,
    wNewWord: u16,
) callconv(@import("std").os.windows.WINAPI) u16;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetClassLongA(
    hWnd: ?HWND,
    nIndex: GET_CLASS_LONG_INDEX,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetClassLongW(
    hWnd: ?HWND,
    nIndex: GET_CLASS_LONG_INDEX,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetClassLongA(
    hWnd: ?HWND,
    nIndex: GET_CLASS_LONG_INDEX,
    dwNewLong: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetClassLongW(
    hWnd: ?HWND,
    nIndex: GET_CLASS_LONG_INDEX,
    dwNewLong: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const GetClassLongPtrA = switch (@import("../zig.zig").arch) {
.X64, .Arm64 => (struct {

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetClassLongPtrA(
    hWnd: ?HWND,
    nIndex: GET_CLASS_LONG_INDEX,
) callconv(@import("std").os.windows.WINAPI) usize;

}).GetClassLongPtrA,
    else => |a| if (@import("builtin").is_test) void else @compileError("function 'GetClassLongPtrA' is not supported on architecture " ++ @tagName(a)),
};

pub const GetClassLongPtrW = switch (@import("../zig.zig").arch) {
.X64, .Arm64 => (struct {

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetClassLongPtrW(
    hWnd: ?HWND,
    nIndex: GET_CLASS_LONG_INDEX,
) callconv(@import("std").os.windows.WINAPI) usize;

}).GetClassLongPtrW,
    else => |a| if (@import("builtin").is_test) void else @compileError("function 'GetClassLongPtrW' is not supported on architecture " ++ @tagName(a)),
};

pub const SetClassLongPtrA = switch (@import("../zig.zig").arch) {
.X64, .Arm64 => (struct {

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetClassLongPtrA(
    hWnd: ?HWND,
    nIndex: GET_CLASS_LONG_INDEX,
    dwNewLong: isize,
) callconv(@import("std").os.windows.WINAPI) usize;

}).SetClassLongPtrA,
    else => |a| if (@import("builtin").is_test) void else @compileError("function 'SetClassLongPtrA' is not supported on architecture " ++ @tagName(a)),
};

pub const SetClassLongPtrW = switch (@import("../zig.zig").arch) {
.X64, .Arm64 => (struct {

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetClassLongPtrW(
    hWnd: ?HWND,
    nIndex: GET_CLASS_LONG_INDEX,
    dwNewLong: isize,
) callconv(@import("std").os.windows.WINAPI) usize;

}).SetClassLongPtrW,
    else => |a| if (@import("builtin").is_test) void else @compileError("function 'SetClassLongPtrW' is not supported on architecture " ++ @tagName(a)),
};

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetProcessDefaultLayout(
    pdwDefaultLayout: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetProcessDefaultLayout(
    dwDefaultLayout: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetDesktopWindow(
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetParent(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetParent(
    hWndChild: ?HWND,
    hWndNewParent: ?HWND,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn EnumChildWindows(
    hWndParent: ?HWND,
    lpEnumFunc: ?WNDENUMPROC,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn FindWindowA(
    lpClassName: ?[*:0]const u8,
    lpWindowName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn FindWindowW(
    lpClassName: ?[*:0]const u16,
    lpWindowName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn FindWindowExA(
    hWndParent: ?HWND,
    hWndChildAfter: ?HWND,
    lpszClass: ?[*:0]const u8,
    lpszWindow: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn FindWindowExW(
    hWndParent: ?HWND,
    hWndChildAfter: ?HWND,
    lpszClass: ?[*:0]const u16,
    lpszWindow: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetShellWindow(
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn RegisterShellHookWindow(
    hwnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DeregisterShellHookWindow(
    hwnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn EnumWindows(
    lpEnumFunc: ?WNDENUMPROC,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn EnumThreadWindows(
    dwThreadId: u32,
    lpfn: ?WNDENUMPROC,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetClassNameA(
    hWnd: ?HWND,
    lpClassName: [*:0]u8,
    nMaxCount: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetClassNameW(
    hWnd: ?HWND,
    lpClassName: [*:0]u16,
    nMaxCount: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetTopWindow(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetWindowThreadProcessId(
    hWnd: ?HWND,
    lpdwProcessId: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn IsGUIThread(
    bConvert: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetLastActivePopup(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetWindow(
    hWnd: ?HWND,
    uCmd: GET_WINDOW_CMD,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

pub extern "user32" fn SetWindowsHookA(
    nFilterType: i32,
    pfnFilterProc: ?HOOKPROC,
) callconv(@import("std").os.windows.WINAPI) ?HHOOK;

pub extern "user32" fn SetWindowsHookW(
    nFilterType: i32,
    pfnFilterProc: ?HOOKPROC,
) callconv(@import("std").os.windows.WINAPI) ?HHOOK;

pub extern "user32" fn UnhookWindowsHook(
    nCode: i32,
    pfnFilterProc: ?HOOKPROC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetWindowsHookExA(
    idHook: WINDOWS_HOOK_ID,
    lpfn: ?HOOKPROC,
    hmod: ?HINSTANCE,
    dwThreadId: u32,
) callconv(@import("std").os.windows.WINAPI) ?HHOOK;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetWindowsHookExW(
    idHook: WINDOWS_HOOK_ID,
    lpfn: ?HOOKPROC,
    hmod: ?HINSTANCE,
    dwThreadId: u32,
) callconv(@import("std").os.windows.WINAPI) ?HHOOK;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn UnhookWindowsHookEx(
    hhk: ?HHOOK,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CallNextHookEx(
    hhk: ?HHOOK,
    nCode: i32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CheckMenuRadioItem(
    hmenu: ?HMENU,
    first: u32,
    last: u32,
    check: u32,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn LoadCursorA(
    hInstance: ?HINSTANCE,
    lpCursorName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?HCURSOR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn LoadCursorW(
    hInstance: ?HINSTANCE,
    lpCursorName: ?[*:0]align(1) const u16,
) callconv(@import("std").os.windows.WINAPI) ?HCURSOR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn LoadCursorFromFileA(
    lpFileName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?HCURSOR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn LoadCursorFromFileW(
    lpFileName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?HCURSOR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CreateCursor(
    hInst: ?HINSTANCE,
    xHotSpot: i32,
    yHotSpot: i32,
    nWidth: i32,
    nHeight: i32,
    pvANDPlane: ?*const anyopaque,
    pvXORPlane: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) ?HCURSOR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DestroyCursor(
    hCursor: ?HCURSOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SetSystemCursor(
    hcur: ?HCURSOR,
    id: SYSTEM_CURSOR_ID,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn LoadIconA(
    hInstance: ?HINSTANCE,
    lpIconName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?HICON;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn LoadIconW(
    hInstance: ?HINSTANCE,
    lpIconName: ?[*:0]align(1) const u16,
) callconv(@import("std").os.windows.WINAPI) ?HICON;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn PrivateExtractIconsA(
    szFileName: *[260]u8,
    nIconIndex: i32,
    cxIcon: i32,
    cyIcon: i32,
    phicon: ?[*]?HICON,
    piconid: ?[*]u32,
    nIcons: u32,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn PrivateExtractIconsW(
    szFileName: *[260]u16,
    nIconIndex: i32,
    cxIcon: i32,
    cyIcon: i32,
    phicon: ?[*]?HICON,
    piconid: ?[*]u32,
    nIcons: u32,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CreateIcon(
    hInstance: ?HINSTANCE,
    nWidth: i32,
    nHeight: i32,
    cPlanes: u8,
    cBitsPixel: u8,
    lpbANDbits: [*:0]const u8,
    lpbXORbits: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?HICON;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DestroyIcon(
    hIcon: ?HICON,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn LookupIconIdFromDirectory(
    presbits: ?*u8,
    fIcon: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn LookupIconIdFromDirectoryEx(
    presbits: ?*u8,
    fIcon: BOOL,
    cxDesired: i32,
    cyDesired: i32,
    Flags: IMAGE_FLAGS,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CreateIconFromResource(
    // TODO: what to do with BytesParamIndex 1?
    presbits: ?*u8,
    dwResSize: u32,
    fIcon: BOOL,
    dwVer: u32,
) callconv(@import("std").os.windows.WINAPI) ?HICON;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CreateIconFromResourceEx(
    // TODO: what to do with BytesParamIndex 1?
    presbits: ?*u8,
    dwResSize: u32,
    fIcon: BOOL,
    dwVer: u32,
    cxDesired: i32,
    cyDesired: i32,
    Flags: IMAGE_FLAGS,
) callconv(@import("std").os.windows.WINAPI) ?HICON;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn LoadImageA(
    hInst: ?HINSTANCE,
    name: ?[*:0]align(1) const u8,
    type: GDI_IMAGE_TYPE,
    cx: i32,
    cy: i32,
    fuLoad: IMAGE_FLAGS,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn LoadImageW(
    hInst: ?HINSTANCE,
    name: ?[*:0]align(1) const u16,
    type: GDI_IMAGE_TYPE,
    cx: i32,
    cy: i32,
    fuLoad: IMAGE_FLAGS,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CopyImage(
    h: ?HANDLE,
    type: GDI_IMAGE_TYPE,
    cx: i32,
    cy: i32,
    flags: IMAGE_FLAGS,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DrawIconEx(
    hdc: ?HDC,
    xLeft: i32,
    yTop: i32,
    hIcon: ?HICON,
    cxWidth: i32,
    cyWidth: i32,
    istepIfAniCur: u32,
    hbrFlickerFreeDraw: ?HBRUSH,
    diFlags: DI_FLAGS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CreateIconIndirect(
    piconinfo: ?*ICONINFO,
) callconv(@import("std").os.windows.WINAPI) ?HICON;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CopyIcon(
    hIcon: ?HICON,
) callconv(@import("std").os.windows.WINAPI) ?HICON;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetIconInfo(
    hIcon: ?HICON,
    piconinfo: ?*ICONINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "user32" fn GetIconInfoExA(
    hicon: ?HICON,
    piconinfo: ?*ICONINFOEXA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "user32" fn GetIconInfoExW(
    hicon: ?HICON,
    piconinfo: ?*ICONINFOEXW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn IsDialogMessageA(
    hDlg: ?HWND,
    lpMsg: ?*MSG,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn IsDialogMessageW(
    hDlg: ?HWND,
    lpMsg: ?*MSG,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn MapDialogRect(
    hDlg: ?HWND,
    lpRect: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "user32" fn GetScrollInfo(
    hwnd: ?HWND,
    nBar: SCROLLBAR_CONSTANTS,
    lpsi: ?*SCROLLINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DefFrameProcA(
    hWnd: ?HWND,
    hWndMDIClient: ?HWND,
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DefFrameProcW(
    hWnd: ?HWND,
    hWndMDIClient: ?HWND,
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DefMDIChildProcA(
    hWnd: ?HWND,
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn DefMDIChildProcW(
    hWnd: ?HWND,
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn TranslateMDISysAccel(
    hWndClient: ?HWND,
    lpMsg: ?*MSG,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn ArrangeIconicWindows(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CreateMDIWindowA(
    lpClassName: ?[*:0]const u8,
    lpWindowName: ?[*:0]const u8,
    dwStyle: WINDOW_STYLE,
    X: i32,
    Y: i32,
    nWidth: i32,
    nHeight: i32,
    hWndParent: ?HWND,
    hInstance: ?HINSTANCE,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CreateMDIWindowW(
    lpClassName: ?[*:0]const u16,
    lpWindowName: ?[*:0]const u16,
    dwStyle: WINDOW_STYLE,
    X: i32,
    Y: i32,
    nWidth: i32,
    nHeight: i32,
    hWndParent: ?HWND,
    hInstance: ?HINSTANCE,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn TileWindows(
    hwndParent: ?HWND,
    wHow: TILE_WINDOWS_HOW,
    lpRect: ?*const RECT,
    cKids: u32,
    lpKids: ?[*]const ?HWND,
) callconv(@import("std").os.windows.WINAPI) u16;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn CascadeWindows(
    hwndParent: ?HWND,
    wHow: CASCADE_WINDOWS_HOW,
    lpRect: ?*const RECT,
    cKids: u32,
    lpKids: ?[*]const ?HWND,
) callconv(@import("std").os.windows.WINAPI) u16;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SystemParametersInfoA(
    uiAction: SYSTEM_PARAMETERS_INFO_ACTION,
    uiParam: u32,
    pvParam: ?*anyopaque,
    fWinIni: SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn SystemParametersInfoW(
    uiAction: SYSTEM_PARAMETERS_INFO_ACTION,
    uiParam: u32,
    pvParam: ?*anyopaque,
    fWinIni: SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "user32" fn SoundSentry(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "user32" fn SetDebugErrorLevel(
    dwLevel: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn InternalGetWindowText(
    hWnd: ?HWND,
    pString: [*:0]u16,
    cchMaxCount: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "user32" fn CancelShutdown(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetGUIThreadInfo(
    idThread: u32,
    pgui: ?*GUITHREADINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "user32" fn SetProcessDPIAware(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "user32" fn IsProcessDPIAware(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "user32" fn InheritWindowMonitor(
    hwnd: ?HWND,
    hwndInherit: ?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetWindowModuleFileNameA(
    hwnd: ?HWND,
    pszFileName: [*:0]u8,
    cchFileNameMax: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetWindowModuleFileNameW(
    hwnd: ?HWND,
    pszFileName: [*:0]u16,
    cchFileNameMax: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetCursorInfo(
    pci: ?*CURSORINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetWindowInfo(
    hwnd: ?HWND,
    pwi: ?*WINDOWINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetTitleBarInfo(
    hwnd: ?HWND,
    pti: ?*TITLEBARINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetMenuBarInfo(
    hwnd: ?HWND,
    idObject: OBJECT_IDENTIFIER,
    idItem: i32,
    pmbi: ?*MENUBARINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "user32" fn GetScrollBarInfo(
    hwnd: ?HWND,
    idObject: OBJECT_IDENTIFIER,
    psbi: ?*SCROLLBARINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetAncestor(
    hwnd: ?HWND,
    gaFlags: GET_ANCESTOR_FLAGS,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn RealChildWindowFromPoint(
    hwndParent: ?HWND,
    ptParentClientCoords: POINT,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

pub extern "user32" fn RealGetWindowClassA(
    hwnd: ?HWND,
    ptszClassName: [*:0]u8,
    cchClassNameMax: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn RealGetWindowClassW(
    hwnd: ?HWND,
    ptszClassName: [*:0]u16,
    cchClassNameMax: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetAltTabInfoA(
    hwnd: ?HWND,
    iItem: i32,
    pati: ?*ALTTABINFO,
    pszItemText: ?[*:0]u8,
    cchItemText: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "user32" fn GetAltTabInfoW(
    hwnd: ?HWND,
    iItem: i32,
    pati: ?*ALTTABINFO,
    pszItemText: ?[*:0]u16,
    cchItemText: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "user32" fn ChangeWindowMessageFilter(
    message: u32,
    dwFlag: CHANGE_WINDOW_MESSAGE_FILTER_FLAGS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "user32" fn ChangeWindowMessageFilterEx(
    hwnd: ?HWND,
    message: u32,
    action: WINDOW_MESSAGE_FILTER_ACTION,
    pChangeFilterStruct: ?*CHANGEFILTERSTRUCT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "mrmsupport" fn CreateResourceIndexer(
    projectRoot: ?[*:0]const u16,
    extensionDllPath: ?[*:0]const u16,
    ppResourceIndexer: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "mrmsupport" fn DestroyResourceIndexer(
    resourceIndexer: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "mrmsupport" fn IndexFilePath(
    resourceIndexer: ?*anyopaque,
    filePath: ?[*:0]const u16,
    ppResourceUri: ?*?PWSTR,
    pQualifierCount: ?*u32,
    ppQualifiers: [*]?*IndexedResourceQualifier,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "mrmsupport" fn DestroyIndexedResults(
    resourceUri: ?PWSTR,
    qualifierCount: u32,
    qualifiers: ?[*]IndexedResourceQualifier,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "mrmsupport" fn MrmCreateResourceIndexer(
    packageFamilyName: ?[*:0]const u16,
    projectRoot: ?[*:0]const u16,
    platformVersion: MrmPlatformVersion,
    defaultQualifiers: ?[*:0]const u16,
    indexer: ?*MrmResourceIndexerHandle,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mrmsupport" fn MrmCreateResourceIndexerFromPreviousSchemaFile(
    projectRoot: ?[*:0]const u16,
    platformVersion: MrmPlatformVersion,
    defaultQualifiers: ?[*:0]const u16,
    schemaFile: ?[*:0]const u16,
    indexer: ?*MrmResourceIndexerHandle,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mrmsupport" fn MrmCreateResourceIndexerFromPreviousPriFile(
    projectRoot: ?[*:0]const u16,
    platformVersion: MrmPlatformVersion,
    defaultQualifiers: ?[*:0]const u16,
    priFile: ?[*:0]const u16,
    indexer: ?*MrmResourceIndexerHandle,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mrmsupport" fn MrmCreateResourceIndexerFromPreviousSchemaData(
    projectRoot: ?[*:0]const u16,
    platformVersion: MrmPlatformVersion,
    defaultQualifiers: ?[*:0]const u16,
    // TODO: what to do with BytesParamIndex 4?
    schemaXmlData: ?*u8,
    schemaXmlSize: u32,
    indexer: ?*MrmResourceIndexerHandle,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mrmsupport" fn MrmCreateResourceIndexerFromPreviousPriData(
    projectRoot: ?[*:0]const u16,
    platformVersion: MrmPlatformVersion,
    defaultQualifiers: ?[*:0]const u16,
    // TODO: what to do with BytesParamIndex 4?
    priData: ?*u8,
    priSize: u32,
    indexer: ?*MrmResourceIndexerHandle,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mrmsupport" fn MrmCreateResourceIndexerWithFlags(
    packageFamilyName: ?[*:0]const u16,
    projectRoot: ?[*:0]const u16,
    platformVersion: MrmPlatformVersion,
    defaultQualifiers: ?[*:0]const u16,
    flags: MrmIndexerFlags,
    indexer: ?*MrmResourceIndexerHandle,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mrmsupport" fn MrmIndexString(
    indexer: MrmResourceIndexerHandle,
    resourceUri: ?[*:0]const u16,
    resourceString: ?[*:0]const u16,
    qualifiers: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mrmsupport" fn MrmIndexEmbeddedData(
    indexer: MrmResourceIndexerHandle,
    resourceUri: ?[*:0]const u16,
    // TODO: what to do with BytesParamIndex 3?
    embeddedData: ?*const u8,
    embeddedDataSize: u32,
    qualifiers: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mrmsupport" fn MrmIndexFile(
    indexer: MrmResourceIndexerHandle,
    resourceUri: ?[*:0]const u16,
    filePath: ?[*:0]const u16,
    qualifiers: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mrmsupport" fn MrmIndexFileAutoQualifiers(
    indexer: MrmResourceIndexerHandle,
    filePath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mrmsupport" fn MrmIndexResourceContainerAutoQualifiers(
    indexer: MrmResourceIndexerHandle,
    containerPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mrmsupport" fn MrmCreateResourceFile(
    indexer: MrmResourceIndexerHandle,
    packagingMode: MrmPackagingMode,
    packagingOptions: MrmPackagingOptions,
    outputDirectory: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mrmsupport" fn MrmCreateResourceFileWithChecksum(
    indexer: MrmResourceIndexerHandle,
    packagingMode: MrmPackagingMode,
    packagingOptions: MrmPackagingOptions,
    checksum: u32,
    outputDirectory: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mrmsupport" fn MrmCreateResourceFileInMemory(
    indexer: MrmResourceIndexerHandle,
    packagingMode: MrmPackagingMode,
    packagingOptions: MrmPackagingOptions,
    outputPriData: ?*?*u8,
    outputPriSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mrmsupport" fn MrmPeekResourceIndexerMessages(
    handle: MrmResourceIndexerHandle,
    messages: [*]?*MrmResourceIndexerMessage,
    numMsgs: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mrmsupport" fn MrmDestroyIndexerAndMessages(
    indexer: MrmResourceIndexerHandle,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mrmsupport" fn MrmFreeMemory(
    data: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mrmsupport" fn MrmDumpPriFile(
    indexFileName: ?[*:0]const u16,
    schemaPriFile: ?[*:0]const u16,
    dumpType: MrmDumpType,
    outputXmlFile: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mrmsupport" fn MrmDumpPriFileInMemory(
    indexFileName: ?[*:0]const u16,
    schemaPriFile: ?[*:0]const u16,
    dumpType: MrmDumpType,
    outputXmlData: ?*?*u8,
    outputXmlSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mrmsupport" fn MrmDumpPriDataInMemory(
    // TODO: what to do with BytesParamIndex 1?
    inputPriData: ?*u8,
    inputPriSize: u32,
    // TODO: what to do with BytesParamIndex 3?
    schemaPriData: ?*u8,
    schemaPriSize: u32,
    dumpType: MrmDumpType,
    outputXmlData: ?*?*u8,
    outputXmlSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mrmsupport" fn MrmCreateConfig(
    platformVersion: MrmPlatformVersion,
    defaultQualifiers: ?[*:0]const u16,
    outputXmlFile: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mrmsupport" fn MrmCreateConfigInMemory(
    platformVersion: MrmPlatformVersion,
    defaultQualifiers: ?[*:0]const u16,
    outputXmlData: ?*?*u8,
    outputXmlSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mrmsupport" fn MrmGetPriFileContentChecksum(
    priFile: ?[*:0]const u16,
    checksum: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (109)
//--------------------------------------------------------------------------------
pub const PROPENUMPROC = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PROPENUMPROCA,
    .wide => @This().PROPENUMPROCW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PROPENUMPROC' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PROPENUMPROCEX = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PROPENUMPROCEXA,
    .wide => @This().PROPENUMPROCEXW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PROPENUMPROCEX' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const NAMEENUMPROC = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().NAMEENUMPROCA,
    .wide => @This().NAMEENUMPROCW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'NAMEENUMPROC' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CBT_CREATEWND = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().CBT_CREATEWNDA,
    .wide => @This().CBT_CREATEWNDW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CBT_CREATEWND' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const WNDCLASSEX = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().WNDCLASSEXA,
    .wide => @This().WNDCLASSEXW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'WNDCLASSEX' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const WNDCLASS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().WNDCLASSA,
    .wide => @This().WNDCLASSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'WNDCLASS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CREATESTRUCT = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().CREATESTRUCTA,
    .wide => @This().CREATESTRUCTW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CREATESTRUCT' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MENUITEMINFO = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MENUITEMINFOA,
    .wide => @This().MENUITEMINFOW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MENUITEMINFO' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MSGBOXPARAMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MSGBOXPARAMSA,
    .wide => @This().MSGBOXPARAMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MSGBOXPARAMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const ICONINFOEX = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().ICONINFOEXA,
    .wide => @This().ICONINFOEXW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'ICONINFOEX' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MDICREATESTRUCT = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MDICREATESTRUCTA,
    .wide => @This().MDICREATESTRUCTW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MDICREATESTRUCT' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const NONCLIENTMETRICS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().NONCLIENTMETRICSA,
    .wide => @This().NONCLIENTMETRICSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'NONCLIENTMETRICS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const ICONMETRICS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().ICONMETRICSA,
    .wide => @This().ICONMETRICSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'ICONMETRICS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const LoadString = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().LoadStringA,
    .wide => @This().LoadStringW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'LoadString' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const wvsprintf = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().wvsprintfA,
    .wide => @This().wvsprintfW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'wvsprintf' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const wsprintf = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().wsprintfA,
    .wide => @This().wsprintfW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'wsprintf' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegisterWindowMessage = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegisterWindowMessageA,
    .wide => @This().RegisterWindowMessageW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegisterWindowMessage' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetMessage = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetMessageA,
    .wide => @This().GetMessageW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetMessage' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const DispatchMessage = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().DispatchMessageA,
    .wide => @This().DispatchMessageW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'DispatchMessage' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PeekMessage = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PeekMessageA,
    .wide => @This().PeekMessageW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PeekMessage' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SendMessage = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SendMessageA,
    .wide => @This().SendMessageW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SendMessage' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SendMessageTimeout = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SendMessageTimeoutA,
    .wide => @This().SendMessageTimeoutW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SendMessageTimeout' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SendNotifyMessage = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SendNotifyMessageA,
    .wide => @This().SendNotifyMessageW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SendNotifyMessage' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SendMessageCallback = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SendMessageCallbackA,
    .wide => @This().SendMessageCallbackW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SendMessageCallback' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegisterDeviceNotification = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegisterDeviceNotificationA,
    .wide => @This().RegisterDeviceNotificationW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegisterDeviceNotification' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PostMessage = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PostMessageA,
    .wide => @This().PostMessageW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PostMessage' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PostThreadMessage = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PostThreadMessageA,
    .wide => @This().PostThreadMessageW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PostThreadMessage' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const DefWindowProc = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().DefWindowProcA,
    .wide => @This().DefWindowProcW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'DefWindowProc' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CallWindowProc = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().CallWindowProcA,
    .wide => @This().CallWindowProcW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CallWindowProc' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegisterClass = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegisterClassA,
    .wide => @This().RegisterClassW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegisterClass' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const UnregisterClass = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().UnregisterClassA,
    .wide => @This().UnregisterClassW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'UnregisterClass' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetClassInfo = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetClassInfoA,
    .wide => @This().GetClassInfoW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetClassInfo' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RegisterClassEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RegisterClassExA,
    .wide => @This().RegisterClassExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RegisterClassEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetClassInfoEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetClassInfoExA,
    .wide => @This().GetClassInfoExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetClassInfoEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CreateWindowEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().CreateWindowExA,
    .wide => @This().CreateWindowExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CreateWindowEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CreateDialogParam = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().CreateDialogParamA,
    .wide => @This().CreateDialogParamW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CreateDialogParam' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CreateDialogIndirectParam = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().CreateDialogIndirectParamA,
    .wide => @This().CreateDialogIndirectParamW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CreateDialogIndirectParam' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const DialogBoxParam = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().DialogBoxParamA,
    .wide => @This().DialogBoxParamW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'DialogBoxParam' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const DialogBoxIndirectParam = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().DialogBoxIndirectParamA,
    .wide => @This().DialogBoxIndirectParamW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'DialogBoxIndirectParam' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SetDlgItemText = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SetDlgItemTextA,
    .wide => @This().SetDlgItemTextW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SetDlgItemText' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetDlgItemText = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetDlgItemTextA,
    .wide => @This().GetDlgItemTextW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetDlgItemText' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SendDlgItemMessage = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SendDlgItemMessageA,
    .wide => @This().SendDlgItemMessageW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SendDlgItemMessage' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const DefDlgProc = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().DefDlgProcA,
    .wide => @This().DefDlgProcW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'DefDlgProc' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CallMsgFilter = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().CallMsgFilterA,
    .wide => @This().CallMsgFilterW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CallMsgFilter' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CharToOem = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().CharToOemA,
    .wide => @This().CharToOemW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CharToOem' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const OemToChar = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().OemToCharA,
    .wide => @This().OemToCharW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'OemToChar' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CharToOemBuff = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().CharToOemBuffA,
    .wide => @This().CharToOemBuffW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CharToOemBuff' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const OemToCharBuff = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().OemToCharBuffA,
    .wide => @This().OemToCharBuffW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'OemToCharBuff' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CharUpper = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().CharUpperA,
    .wide => @This().CharUpperW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CharUpper' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CharUpperBuff = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().CharUpperBuffA,
    .wide => @This().CharUpperBuffW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CharUpperBuff' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CharLower = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().CharLowerA,
    .wide => @This().CharLowerW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CharLower' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CharLowerBuff = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().CharLowerBuffA,
    .wide => @This().CharLowerBuffW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CharLowerBuff' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CharNext = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().CharNextA,
    .wide => @This().CharNextW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CharNext' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CharPrev = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().CharPrevA,
    .wide => @This().CharPrevW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CharPrev' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const IsCharAlpha = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().IsCharAlphaA,
    .wide => @This().IsCharAlphaW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'IsCharAlpha' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const IsCharAlphaNumeric = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().IsCharAlphaNumericA,
    .wide => @This().IsCharAlphaNumericW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'IsCharAlphaNumeric' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const IsCharUpper = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().IsCharUpperA,
    .wide => @This().IsCharUpperW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'IsCharUpper' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const LoadAccelerators = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().LoadAcceleratorsA,
    .wide => @This().LoadAcceleratorsW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'LoadAccelerators' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CreateAcceleratorTable = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().CreateAcceleratorTableA,
    .wide => @This().CreateAcceleratorTableW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CreateAcceleratorTable' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CopyAcceleratorTable = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().CopyAcceleratorTableA,
    .wide => @This().CopyAcceleratorTableW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CopyAcceleratorTable' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const TranslateAccelerator = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().TranslateAcceleratorA,
    .wide => @This().TranslateAcceleratorW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'TranslateAccelerator' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const LoadMenu = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().LoadMenuA,
    .wide => @This().LoadMenuW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'LoadMenu' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const LoadMenuIndirect = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().LoadMenuIndirectA,
    .wide => @This().LoadMenuIndirectW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'LoadMenuIndirect' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const ChangeMenu = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().ChangeMenuA,
    .wide => @This().ChangeMenuW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'ChangeMenu' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetMenuString = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetMenuStringA,
    .wide => @This().GetMenuStringW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetMenuString' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const InsertMenu = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().InsertMenuA,
    .wide => @This().InsertMenuW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'InsertMenu' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const AppendMenu = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().AppendMenuA,
    .wide => @This().AppendMenuW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'AppendMenu' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const ModifyMenu = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().ModifyMenuA,
    .wide => @This().ModifyMenuW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'ModifyMenu' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const InsertMenuItem = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().InsertMenuItemA,
    .wide => @This().InsertMenuItemW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'InsertMenuItem' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetMenuItemInfo = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetMenuItemInfoA,
    .wide => @This().GetMenuItemInfoW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetMenuItemInfo' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SetMenuItemInfo = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SetMenuItemInfoA,
    .wide => @This().SetMenuItemInfoW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SetMenuItemInfo' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SetProp = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SetPropA,
    .wide => @This().SetPropW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SetProp' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetProp = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetPropA,
    .wide => @This().GetPropW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetProp' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RemoveProp = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RemovePropA,
    .wide => @This().RemovePropW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RemoveProp' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const EnumPropsEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().EnumPropsExA,
    .wide => @This().EnumPropsExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'EnumPropsEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const EnumProps = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().EnumPropsA,
    .wide => @This().EnumPropsW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'EnumProps' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SetWindowText = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SetWindowTextA,
    .wide => @This().SetWindowTextW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SetWindowText' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetWindowText = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetWindowTextA,
    .wide => @This().GetWindowTextW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetWindowText' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetWindowTextLength = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetWindowTextLengthA,
    .wide => @This().GetWindowTextLengthW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetWindowTextLength' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MessageBox = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MessageBoxA,
    .wide => @This().MessageBoxW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MessageBox' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MessageBoxEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MessageBoxExA,
    .wide => @This().MessageBoxExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MessageBoxEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MessageBoxIndirect = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MessageBoxIndirectA,
    .wide => @This().MessageBoxIndirectW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MessageBoxIndirect' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetWindowLong = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetWindowLongA,
    .wide => @This().GetWindowLongW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetWindowLong' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SetWindowLong = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SetWindowLongA,
    .wide => @This().SetWindowLongW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SetWindowLong' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetWindowLongPtr = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetWindowLongPtrA,
    .wide => @This().GetWindowLongPtrW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetWindowLongPtr' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SetWindowLongPtr = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SetWindowLongPtrA,
    .wide => @This().SetWindowLongPtrW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SetWindowLongPtr' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetClassLong = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetClassLongA,
    .wide => @This().GetClassLongW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetClassLong' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SetClassLong = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SetClassLongA,
    .wide => @This().SetClassLongW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SetClassLong' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetClassLongPtr = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetClassLongPtrA,
    .wide => @This().GetClassLongPtrW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetClassLongPtr' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SetClassLongPtr = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SetClassLongPtrA,
    .wide => @This().SetClassLongPtrW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SetClassLongPtr' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const FindWindow = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().FindWindowA,
    .wide => @This().FindWindowW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'FindWindow' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const FindWindowEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().FindWindowExA,
    .wide => @This().FindWindowExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'FindWindowEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetClassName = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetClassNameA,
    .wide => @This().GetClassNameW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetClassName' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SetWindowsHook = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SetWindowsHookA,
    .wide => @This().SetWindowsHookW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SetWindowsHook' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SetWindowsHookEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SetWindowsHookExA,
    .wide => @This().SetWindowsHookExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SetWindowsHookEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const LoadCursor = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().LoadCursorA,
    .wide => @This().LoadCursorW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'LoadCursor' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const LoadCursorFromFile = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().LoadCursorFromFileA,
    .wide => @This().LoadCursorFromFileW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'LoadCursorFromFile' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const LoadIcon = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().LoadIconA,
    .wide => @This().LoadIconW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'LoadIcon' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PrivateExtractIcons = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PrivateExtractIconsA,
    .wide => @This().PrivateExtractIconsW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PrivateExtractIcons' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const LoadImage = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().LoadImageA,
    .wide => @This().LoadImageW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'LoadImage' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetIconInfoEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetIconInfoExA,
    .wide => @This().GetIconInfoExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetIconInfoEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const IsDialogMessage = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().IsDialogMessageA,
    .wide => @This().IsDialogMessageW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'IsDialogMessage' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const DefFrameProc = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().DefFrameProcA,
    .wide => @This().DefFrameProcW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'DefFrameProc' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const DefMDIChildProc = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().DefMDIChildProcA,
    .wide => @This().DefMDIChildProcW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'DefMDIChildProc' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CreateMDIWindow = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().CreateMDIWindowA,
    .wide => @This().CreateMDIWindowW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CreateMDIWindow' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SystemParametersInfo = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SystemParametersInfoA,
    .wide => @This().SystemParametersInfoW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SystemParametersInfo' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetWindowModuleFileName = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetWindowModuleFileNameA,
    .wide => @This().GetWindowModuleFileNameW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetWindowModuleFileName' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const RealGetWindowClass = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().RealGetWindowClassA,
    .wide => @This().RealGetWindowClassW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'RealGetWindowClass' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetAltTabInfo = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetAltTabInfoA,
    .wide => @This().GetAltTabInfoW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetAltTabInfo' requires that UNICODE be set to true or false in the root module",
    ),
};
//--------------------------------------------------------------------------------
// Section: Imports (24)
//--------------------------------------------------------------------------------
const BLENDFUNCTION = @import("../graphics/gdi.zig").BLENDFUNCTION;
const BOOL = @import("../foundation.zig").BOOL;
const BOOLEAN = @import("../foundation.zig").BOOLEAN;
const CHAR = @import("../foundation.zig").CHAR;
const HANDLE = @import("../foundation.zig").HANDLE;
const HBITMAP = @import("../graphics/gdi.zig").HBITMAP;
const HBRUSH = @import("../graphics/gdi.zig").HBRUSH;
const HDC = @import("../graphics/gdi.zig").HDC;
const HELPINFO = @import("../ui/shell.zig").HELPINFO;
const HINSTANCE = @import("../foundation.zig").HINSTANCE;
const HRESULT = @import("../foundation.zig").HRESULT;
const HRGN = @import("../graphics/gdi.zig").HRGN;
const HWND = @import("../foundation.zig").HWND;
const LOGFONTA = @import("../graphics/gdi.zig").LOGFONTA;
const LOGFONTW = @import("../graphics/gdi.zig").LOGFONTW;
const LPARAM = @import("../foundation.zig").LPARAM;
const LRESULT = @import("../foundation.zig").LRESULT;
const POINT = @import("../foundation.zig").POINT;
const POWER_SETTING_REGISTER_NOTIFICATION_FLAGS = @import("../system/power.zig").POWER_SETTING_REGISTER_NOTIFICATION_FLAGS;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;
const RECT = @import("../foundation.zig").RECT;
const SIZE = @import("../foundation.zig").SIZE;
const WPARAM = @import("../foundation.zig").WPARAM;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "WNDPROC")) { _ = WNDPROC; }
    if (@hasDecl(@This(), "DLGPROC")) { _ = DLGPROC; }
    if (@hasDecl(@This(), "TIMERPROC")) { _ = TIMERPROC; }
    if (@hasDecl(@This(), "WNDENUMPROC")) { _ = WNDENUMPROC; }
    if (@hasDecl(@This(), "HOOKPROC")) { _ = HOOKPROC; }
    if (@hasDecl(@This(), "SENDASYNCPROC")) { _ = SENDASYNCPROC; }
    if (@hasDecl(@This(), "PROPENUMPROCA")) { _ = PROPENUMPROCA; }
    if (@hasDecl(@This(), "PROPENUMPROCW")) { _ = PROPENUMPROCW; }
    if (@hasDecl(@This(), "PROPENUMPROCEXA")) { _ = PROPENUMPROCEXA; }
    if (@hasDecl(@This(), "PROPENUMPROCEXW")) { _ = PROPENUMPROCEXW; }
    if (@hasDecl(@This(), "NAMEENUMPROCA")) { _ = NAMEENUMPROCA; }
    if (@hasDecl(@This(), "NAMEENUMPROCW")) { _ = NAMEENUMPROCW; }
    if (@hasDecl(@This(), "PREGISTERCLASSNAMEW")) { _ = PREGISTERCLASSNAMEW; }
    if (@hasDecl(@This(), "MSGBOXCALLBACK")) { _ = MSGBOXCALLBACK; }

    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
