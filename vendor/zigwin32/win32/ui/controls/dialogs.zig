//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (96)
//--------------------------------------------------------------------------------
pub const OFN_SHAREFALLTHROUGH = @as(u32, 2);
pub const OFN_SHARENOWARN = @as(u32, 1);
pub const OFN_SHAREWARN = @as(u32, 0);
pub const CDM_FIRST = @as(u32, 1124);
pub const CDM_LAST = @as(u32, 1224);
pub const CDM_GETSPEC = @as(u32, 1124);
pub const CDM_GETFILEPATH = @as(u32, 1125);
pub const CDM_GETFOLDERPATH = @as(u32, 1126);
pub const CDM_GETFOLDERIDLIST = @as(u32, 1127);
pub const CDM_SETCONTROLTEXT = @as(u32, 1128);
pub const CDM_HIDECONTROL = @as(u32, 1129);
pub const CDM_SETDEFEXT = @as(u32, 1130);
pub const FR_RAW = @as(u32, 131072);
pub const FR_SHOWWRAPAROUND = @as(u32, 262144);
pub const FR_NOWRAPAROUND = @as(u32, 524288);
pub const FR_WRAPAROUND = @as(u32, 1048576);
pub const FRM_FIRST = @as(u32, 1124);
pub const FRM_LAST = @as(u32, 1224);
pub const FRM_SETOPERATIONRESULT = @as(u32, 1124);
pub const FRM_SETOPERATIONRESULTTEXT = @as(u32, 1125);
pub const PS_OPENTYPE_FONTTYPE = @as(u32, 65536);
pub const TT_OPENTYPE_FONTTYPE = @as(u32, 131072);
pub const TYPE1_FONTTYPE = @as(u32, 262144);
pub const SYMBOL_FONTTYPE = @as(u32, 524288);
pub const WM_CHOOSEFONT_GETLOGFONT = @as(u32, 1025);
pub const WM_CHOOSEFONT_SETLOGFONT = @as(u32, 1125);
pub const WM_CHOOSEFONT_SETFLAGS = @as(u32, 1126);
pub const LBSELCHSTRINGA = "commdlg_LBSelChangedNotify";
pub const SHAREVISTRINGA = "commdlg_ShareViolation";
pub const FILEOKSTRINGA = "commdlg_FileNameOK";
pub const COLOROKSTRINGA = "commdlg_ColorOK";
pub const SETRGBSTRINGA = "commdlg_SetRGBColor";
pub const HELPMSGSTRINGA = "commdlg_help";
pub const FINDMSGSTRINGA = "commdlg_FindReplace";
pub const LBSELCHSTRINGW = "commdlg_LBSelChangedNotify";
pub const SHAREVISTRINGW = "commdlg_ShareViolation";
pub const FILEOKSTRINGW = "commdlg_FileNameOK";
pub const COLOROKSTRINGW = "commdlg_ColorOK";
pub const SETRGBSTRINGW = "commdlg_SetRGBColor";
pub const HELPMSGSTRINGW = "commdlg_help";
pub const FINDMSGSTRINGW = "commdlg_FindReplace";
pub const LBSELCHSTRING = "commdlg_LBSelChangedNotify";
pub const SHAREVISTRING = "commdlg_ShareViolation";
pub const FILEOKSTRING = "commdlg_FileNameOK";
pub const COLOROKSTRING = "commdlg_ColorOK";
pub const SETRGBSTRING = "commdlg_SetRGBColor";
pub const HELPMSGSTRING = "commdlg_help";
pub const FINDMSGSTRING = "commdlg_FindReplace";
pub const CD_LBSELNOITEMS = @as(i32, -1);
pub const CD_LBSELCHANGE = @as(u32, 0);
pub const CD_LBSELSUB = @as(u32, 1);
pub const CD_LBSELADD = @as(u32, 2);
pub const START_PAGE_GENERAL = @as(u32, 4294967295);
pub const PD_RESULT_CANCEL = @as(u32, 0);
pub const PD_RESULT_PRINT = @as(u32, 1);
pub const PD_RESULT_APPLY = @as(u32, 2);
pub const DN_DEFAULTPRN = @as(u32, 1);
pub const WM_PSD_FULLPAGERECT = @as(u32, 1025);
pub const WM_PSD_MINMARGINRECT = @as(u32, 1026);
pub const WM_PSD_MARGINRECT = @as(u32, 1027);
pub const WM_PSD_GREEKTEXTRECT = @as(u32, 1028);
pub const WM_PSD_ENVSTAMPRECT = @as(u32, 1029);
pub const WM_PSD_YAFULLPAGERECT = @as(u32, 1030);
pub const DLG_COLOR = @as(u32, 10);
pub const COLOR_HUESCROLL = @as(u32, 700);
pub const COLOR_SATSCROLL = @as(u32, 701);
pub const COLOR_LUMSCROLL = @as(u32, 702);
pub const COLOR_HUE = @as(u32, 703);
pub const COLOR_SAT = @as(u32, 704);
pub const COLOR_LUM = @as(u32, 705);
pub const COLOR_RED = @as(u32, 706);
pub const COLOR_GREEN = @as(u32, 707);
pub const COLOR_BLUE = @as(u32, 708);
pub const COLOR_CURRENT = @as(u32, 709);
pub const COLOR_RAINBOW = @as(u32, 710);
pub const COLOR_SAVE = @as(u32, 711);
pub const COLOR_ADD = @as(u32, 712);
pub const COLOR_SOLID = @as(u32, 713);
pub const COLOR_TUNE = @as(u32, 714);
pub const COLOR_SCHEMES = @as(u32, 715);
pub const COLOR_ELEMENT = @as(u32, 716);
pub const COLOR_SAMPLES = @as(u32, 717);
pub const COLOR_PALETTE = @as(u32, 718);
pub const COLOR_MIX = @as(u32, 719);
pub const COLOR_BOX1 = @as(u32, 720);
pub const COLOR_CUSTOM1 = @as(u32, 721);
pub const COLOR_HUEACCEL = @as(u32, 723);
pub const COLOR_SATACCEL = @as(u32, 724);
pub const COLOR_LUMACCEL = @as(u32, 725);
pub const COLOR_REDACCEL = @as(u32, 726);
pub const COLOR_GREENACCEL = @as(u32, 727);
pub const COLOR_BLUEACCEL = @as(u32, 728);
pub const COLOR_SOLID_LEFT = @as(u32, 730);
pub const COLOR_SOLID_RIGHT = @as(u32, 731);
pub const NUM_BASIC_COLORS = @as(u32, 48);
pub const NUM_CUSTOM_COLORS = @as(u32, 16);

//--------------------------------------------------------------------------------
// Section: Types (62)
//--------------------------------------------------------------------------------
pub const COMMON_DLG_ERRORS = enum(u32) {
    CDERR_DIALOGFAILURE = 65535,
    CDERR_GENERALCODES = 0,
    CDERR_STRUCTSIZE = 1,
    CDERR_INITIALIZATION = 2,
    CDERR_NOTEMPLATE = 3,
    CDERR_NOHINSTANCE = 4,
    CDERR_LOADSTRFAILURE = 5,
    CDERR_FINDRESFAILURE = 6,
    CDERR_LOADRESFAILURE = 7,
    CDERR_LOCKRESFAILURE = 8,
    CDERR_MEMALLOCFAILURE = 9,
    CDERR_MEMLOCKFAILURE = 10,
    CDERR_NOHOOK = 11,
    CDERR_REGISTERMSGFAIL = 12,
    PDERR_PRINTERCODES = 4096,
    PDERR_SETUPFAILURE = 4097,
    PDERR_PARSEFAILURE = 4098,
    PDERR_RETDEFFAILURE = 4099,
    PDERR_LOADDRVFAILURE = 4100,
    PDERR_GETDEVMODEFAIL = 4101,
    PDERR_INITFAILURE = 4102,
    PDERR_NODEVICES = 4103,
    PDERR_NODEFAULTPRN = 4104,
    PDERR_DNDMMISMATCH = 4105,
    PDERR_CREATEICFAILURE = 4106,
    PDERR_PRINTERNOTFOUND = 4107,
    PDERR_DEFAULTDIFFERENT = 4108,
    CFERR_CHOOSEFONTCODES = 8192,
    CFERR_NOFONTS = 8193,
    CFERR_MAXLESSTHANMIN = 8194,
    FNERR_FILENAMECODES = 12288,
    FNERR_SUBCLASSFAILURE = 12289,
    FNERR_INVALIDFILENAME = 12290,
    FNERR_BUFFERTOOSMALL = 12291,
    FRERR_FINDREPLACECODES = 16384,
    FRERR_BUFFERLENGTHZERO = 16385,
    CCERR_CHOOSECOLORCODES = 20480,
};
pub const CDERR_DIALOGFAILURE = COMMON_DLG_ERRORS.CDERR_DIALOGFAILURE;
pub const CDERR_GENERALCODES = COMMON_DLG_ERRORS.CDERR_GENERALCODES;
pub const CDERR_STRUCTSIZE = COMMON_DLG_ERRORS.CDERR_STRUCTSIZE;
pub const CDERR_INITIALIZATION = COMMON_DLG_ERRORS.CDERR_INITIALIZATION;
pub const CDERR_NOTEMPLATE = COMMON_DLG_ERRORS.CDERR_NOTEMPLATE;
pub const CDERR_NOHINSTANCE = COMMON_DLG_ERRORS.CDERR_NOHINSTANCE;
pub const CDERR_LOADSTRFAILURE = COMMON_DLG_ERRORS.CDERR_LOADSTRFAILURE;
pub const CDERR_FINDRESFAILURE = COMMON_DLG_ERRORS.CDERR_FINDRESFAILURE;
pub const CDERR_LOADRESFAILURE = COMMON_DLG_ERRORS.CDERR_LOADRESFAILURE;
pub const CDERR_LOCKRESFAILURE = COMMON_DLG_ERRORS.CDERR_LOCKRESFAILURE;
pub const CDERR_MEMALLOCFAILURE = COMMON_DLG_ERRORS.CDERR_MEMALLOCFAILURE;
pub const CDERR_MEMLOCKFAILURE = COMMON_DLG_ERRORS.CDERR_MEMLOCKFAILURE;
pub const CDERR_NOHOOK = COMMON_DLG_ERRORS.CDERR_NOHOOK;
pub const CDERR_REGISTERMSGFAIL = COMMON_DLG_ERRORS.CDERR_REGISTERMSGFAIL;
pub const PDERR_PRINTERCODES = COMMON_DLG_ERRORS.PDERR_PRINTERCODES;
pub const PDERR_SETUPFAILURE = COMMON_DLG_ERRORS.PDERR_SETUPFAILURE;
pub const PDERR_PARSEFAILURE = COMMON_DLG_ERRORS.PDERR_PARSEFAILURE;
pub const PDERR_RETDEFFAILURE = COMMON_DLG_ERRORS.PDERR_RETDEFFAILURE;
pub const PDERR_LOADDRVFAILURE = COMMON_DLG_ERRORS.PDERR_LOADDRVFAILURE;
pub const PDERR_GETDEVMODEFAIL = COMMON_DLG_ERRORS.PDERR_GETDEVMODEFAIL;
pub const PDERR_INITFAILURE = COMMON_DLG_ERRORS.PDERR_INITFAILURE;
pub const PDERR_NODEVICES = COMMON_DLG_ERRORS.PDERR_NODEVICES;
pub const PDERR_NODEFAULTPRN = COMMON_DLG_ERRORS.PDERR_NODEFAULTPRN;
pub const PDERR_DNDMMISMATCH = COMMON_DLG_ERRORS.PDERR_DNDMMISMATCH;
pub const PDERR_CREATEICFAILURE = COMMON_DLG_ERRORS.PDERR_CREATEICFAILURE;
pub const PDERR_PRINTERNOTFOUND = COMMON_DLG_ERRORS.PDERR_PRINTERNOTFOUND;
pub const PDERR_DEFAULTDIFFERENT = COMMON_DLG_ERRORS.PDERR_DEFAULTDIFFERENT;
pub const CFERR_CHOOSEFONTCODES = COMMON_DLG_ERRORS.CFERR_CHOOSEFONTCODES;
pub const CFERR_NOFONTS = COMMON_DLG_ERRORS.CFERR_NOFONTS;
pub const CFERR_MAXLESSTHANMIN = COMMON_DLG_ERRORS.CFERR_MAXLESSTHANMIN;
pub const FNERR_FILENAMECODES = COMMON_DLG_ERRORS.FNERR_FILENAMECODES;
pub const FNERR_SUBCLASSFAILURE = COMMON_DLG_ERRORS.FNERR_SUBCLASSFAILURE;
pub const FNERR_INVALIDFILENAME = COMMON_DLG_ERRORS.FNERR_INVALIDFILENAME;
pub const FNERR_BUFFERTOOSMALL = COMMON_DLG_ERRORS.FNERR_BUFFERTOOSMALL;
pub const FRERR_FINDREPLACECODES = COMMON_DLG_ERRORS.FRERR_FINDREPLACECODES;
pub const FRERR_BUFFERLENGTHZERO = COMMON_DLG_ERRORS.FRERR_BUFFERLENGTHZERO;
pub const CCERR_CHOOSECOLORCODES = COMMON_DLG_ERRORS.CCERR_CHOOSECOLORCODES;

pub const OPEN_FILENAME_FLAGS = packed struct(u32) {
    READONLY: u1 = 0,
    OVERWRITEPROMPT: u1 = 0,
    HIDEREADONLY: u1 = 0,
    NOCHANGEDIR: u1 = 0,
    SHOWHELP: u1 = 0,
    ENABLEHOOK: u1 = 0,
    ENABLETEMPLATE: u1 = 0,
    ENABLETEMPLATEHANDLE: u1 = 0,
    NOVALIDATE: u1 = 0,
    ALLOWMULTISELECT: u1 = 0,
    EXTENSIONDIFFERENT: u1 = 0,
    PATHMUSTEXIST: u1 = 0,
    FILEMUSTEXIST: u1 = 0,
    CREATEPROMPT: u1 = 0,
    SHAREAWARE: u1 = 0,
    NOREADONLYRETURN: u1 = 0,
    NOTESTFILECREATE: u1 = 0,
    NONETWORKBUTTON: u1 = 0,
    NOLONGNAMES: u1 = 0,
    EXPLORER: u1 = 0,
    NODEREFERENCELINKS: u1 = 0,
    LONGNAMES: u1 = 0,
    ENABLEINCLUDENOTIFY: u1 = 0,
    ENABLESIZING: u1 = 0,
    _24: u1 = 0,
    DONTADDTORECENT: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    FORCESHOWHIDDEN: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const OFN_READONLY = OPEN_FILENAME_FLAGS{ .READONLY = 1 };
pub const OFN_OVERWRITEPROMPT = OPEN_FILENAME_FLAGS{ .OVERWRITEPROMPT = 1 };
pub const OFN_HIDEREADONLY = OPEN_FILENAME_FLAGS{ .HIDEREADONLY = 1 };
pub const OFN_NOCHANGEDIR = OPEN_FILENAME_FLAGS{ .NOCHANGEDIR = 1 };
pub const OFN_SHOWHELP = OPEN_FILENAME_FLAGS{ .SHOWHELP = 1 };
pub const OFN_ENABLEHOOK = OPEN_FILENAME_FLAGS{ .ENABLEHOOK = 1 };
pub const OFN_ENABLETEMPLATE = OPEN_FILENAME_FLAGS{ .ENABLETEMPLATE = 1 };
pub const OFN_ENABLETEMPLATEHANDLE = OPEN_FILENAME_FLAGS{ .ENABLETEMPLATEHANDLE = 1 };
pub const OFN_NOVALIDATE = OPEN_FILENAME_FLAGS{ .NOVALIDATE = 1 };
pub const OFN_ALLOWMULTISELECT = OPEN_FILENAME_FLAGS{ .ALLOWMULTISELECT = 1 };
pub const OFN_EXTENSIONDIFFERENT = OPEN_FILENAME_FLAGS{ .EXTENSIONDIFFERENT = 1 };
pub const OFN_PATHMUSTEXIST = OPEN_FILENAME_FLAGS{ .PATHMUSTEXIST = 1 };
pub const OFN_FILEMUSTEXIST = OPEN_FILENAME_FLAGS{ .FILEMUSTEXIST = 1 };
pub const OFN_CREATEPROMPT = OPEN_FILENAME_FLAGS{ .CREATEPROMPT = 1 };
pub const OFN_SHAREAWARE = OPEN_FILENAME_FLAGS{ .SHAREAWARE = 1 };
pub const OFN_NOREADONLYRETURN = OPEN_FILENAME_FLAGS{ .NOREADONLYRETURN = 1 };
pub const OFN_NOTESTFILECREATE = OPEN_FILENAME_FLAGS{ .NOTESTFILECREATE = 1 };
pub const OFN_NONETWORKBUTTON = OPEN_FILENAME_FLAGS{ .NONETWORKBUTTON = 1 };
pub const OFN_NOLONGNAMES = OPEN_FILENAME_FLAGS{ .NOLONGNAMES = 1 };
pub const OFN_EXPLORER = OPEN_FILENAME_FLAGS{ .EXPLORER = 1 };
pub const OFN_NODEREFERENCELINKS = OPEN_FILENAME_FLAGS{ .NODEREFERENCELINKS = 1 };
pub const OFN_LONGNAMES = OPEN_FILENAME_FLAGS{ .LONGNAMES = 1 };
pub const OFN_ENABLEINCLUDENOTIFY = OPEN_FILENAME_FLAGS{ .ENABLEINCLUDENOTIFY = 1 };
pub const OFN_ENABLESIZING = OPEN_FILENAME_FLAGS{ .ENABLESIZING = 1 };
pub const OFN_DONTADDTORECENT = OPEN_FILENAME_FLAGS{ .DONTADDTORECENT = 1 };
pub const OFN_FORCESHOWHIDDEN = OPEN_FILENAME_FLAGS{ .FORCESHOWHIDDEN = 1 };

pub const OPEN_FILENAME_FLAGS_EX = packed struct(u32) {
    PLACESBAR: u1 = 0,
    _1: u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const OFN_EX_NONE = OPEN_FILENAME_FLAGS_EX{ };
pub const OFN_EX_NOPLACESBAR = OPEN_FILENAME_FLAGS_EX{ .PLACESBAR = 1 };

pub const PAGESETUPDLG_FLAGS = packed struct(u32) {
    MINMARGINS: u1 = 0,
    MARGINS: u1 = 0,
    INTHOUSANDTHSOFINCHES: u1 = 0,
    INHUNDREDTHSOFMILLIMETERS: u1 = 0,
    DISABLEMARGINS: u1 = 0,
    DISABLEPRINTER: u1 = 0,
    _6: u1 = 0,
    NOWARNING: u1 = 0,
    DISABLEORIENTATION: u1 = 0,
    DISABLEPAPER: u1 = 0,
    RETURNDEFAULT: u1 = 0,
    SHOWHELP: u1 = 0,
    _12: u1 = 0,
    ENABLEPAGESETUPHOOK: u1 = 0,
    _14: u1 = 0,
    ENABLEPAGESETUPTEMPLATE: u1 = 0,
    _16: u1 = 0,
    ENABLEPAGESETUPTEMPLATEHANDLE: u1 = 0,
    ENABLEPAGEPAINTHOOK: u1 = 0,
    DISABLEPAGEPAINTING: u1 = 0,
    _20: u1 = 0,
    NONETWORKBUTTON: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const PSD_DEFAULTMINMARGINS = PAGESETUPDLG_FLAGS{ };
pub const PSD_DISABLEMARGINS = PAGESETUPDLG_FLAGS{ .DISABLEMARGINS = 1 };
pub const PSD_DISABLEORIENTATION = PAGESETUPDLG_FLAGS{ .DISABLEORIENTATION = 1 };
pub const PSD_DISABLEPAGEPAINTING = PAGESETUPDLG_FLAGS{ .DISABLEPAGEPAINTING = 1 };
pub const PSD_DISABLEPAPER = PAGESETUPDLG_FLAGS{ .DISABLEPAPER = 1 };
pub const PSD_DISABLEPRINTER = PAGESETUPDLG_FLAGS{ .DISABLEPRINTER = 1 };
pub const PSD_ENABLEPAGEPAINTHOOK = PAGESETUPDLG_FLAGS{ .ENABLEPAGEPAINTHOOK = 1 };
pub const PSD_ENABLEPAGESETUPHOOK = PAGESETUPDLG_FLAGS{ .ENABLEPAGESETUPHOOK = 1 };
pub const PSD_ENABLEPAGESETUPTEMPLATE = PAGESETUPDLG_FLAGS{ .ENABLEPAGESETUPTEMPLATE = 1 };
pub const PSD_ENABLEPAGESETUPTEMPLATEHANDLE = PAGESETUPDLG_FLAGS{ .ENABLEPAGESETUPTEMPLATEHANDLE = 1 };
pub const PSD_INHUNDREDTHSOFMILLIMETERS = PAGESETUPDLG_FLAGS{ .INHUNDREDTHSOFMILLIMETERS = 1 };
pub const PSD_INTHOUSANDTHSOFINCHES = PAGESETUPDLG_FLAGS{ .INTHOUSANDTHSOFINCHES = 1 };
pub const PSD_INWININIINTLMEASURE = PAGESETUPDLG_FLAGS{ };
pub const PSD_MARGINS = PAGESETUPDLG_FLAGS{ .MARGINS = 1 };
pub const PSD_MINMARGINS = PAGESETUPDLG_FLAGS{ .MINMARGINS = 1 };
pub const PSD_NONETWORKBUTTON = PAGESETUPDLG_FLAGS{ .NONETWORKBUTTON = 1 };
pub const PSD_NOWARNING = PAGESETUPDLG_FLAGS{ .NOWARNING = 1 };
pub const PSD_RETURNDEFAULT = PAGESETUPDLG_FLAGS{ .RETURNDEFAULT = 1 };
pub const PSD_SHOWHELP = PAGESETUPDLG_FLAGS{ .SHOWHELP = 1 };

pub const CHOOSEFONT_FLAGS = packed struct(u32) {
    SCREENFONTS: u1 = 0,
    PRINTERFONTS: u1 = 0,
    SHOWHELP: u1 = 0,
    ENABLEHOOK: u1 = 0,
    ENABLETEMPLATE: u1 = 0,
    ENABLETEMPLATEHANDLE: u1 = 0,
    INITTOLOGFONTSTRUCT: u1 = 0,
    USESTYLE: u1 = 0,
    EFFECTS: u1 = 0,
    APPLY: u1 = 0,
    ANSIONLY: u1 = 0,
    NOOEMFONTS: u1 = 0,
    NOSIMULATIONS: u1 = 0,
    LIMITSIZE: u1 = 0,
    FIXEDPITCHONLY: u1 = 0,
    WYSIWYG: u1 = 0,
    FORCEFONTEXIST: u1 = 0,
    SCALABLEONLY: u1 = 0,
    TTONLY: u1 = 0,
    NOFACESEL: u1 = 0,
    NOSTYLESEL: u1 = 0,
    NOSIZESEL: u1 = 0,
    SELECTSCRIPT: u1 = 0,
    NOSCRIPTSEL: u1 = 0,
    NOVERTFONTS: u1 = 0,
    INACTIVEFONTS: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
    // NOVECTORFONTS (bit index 11) conflicts with NOOEMFONTS
    // SCRIPTSONLY (bit index 10) conflicts with ANSIONLY
};
pub const CF_APPLY = CHOOSEFONT_FLAGS{ .APPLY = 1 };
pub const CF_ANSIONLY = CHOOSEFONT_FLAGS{ .ANSIONLY = 1 };
pub const CF_BOTH = CHOOSEFONT_FLAGS{
    .SCREENFONTS = 1,
    .PRINTERFONTS = 1,
};
pub const CF_EFFECTS = CHOOSEFONT_FLAGS{ .EFFECTS = 1 };
pub const CF_ENABLEHOOK = CHOOSEFONT_FLAGS{ .ENABLEHOOK = 1 };
pub const CF_ENABLETEMPLATE = CHOOSEFONT_FLAGS{ .ENABLETEMPLATE = 1 };
pub const CF_ENABLETEMPLATEHANDLE = CHOOSEFONT_FLAGS{ .ENABLETEMPLATEHANDLE = 1 };
pub const CF_FIXEDPITCHONLY = CHOOSEFONT_FLAGS{ .FIXEDPITCHONLY = 1 };
pub const CF_FORCEFONTEXIST = CHOOSEFONT_FLAGS{ .FORCEFONTEXIST = 1 };
pub const CF_INACTIVEFONTS = CHOOSEFONT_FLAGS{ .INACTIVEFONTS = 1 };
pub const CF_INITTOLOGFONTSTRUCT = CHOOSEFONT_FLAGS{ .INITTOLOGFONTSTRUCT = 1 };
pub const CF_LIMITSIZE = CHOOSEFONT_FLAGS{ .LIMITSIZE = 1 };
pub const CF_NOOEMFONTS = CHOOSEFONT_FLAGS{ .NOOEMFONTS = 1 };
pub const CF_NOFACESEL = CHOOSEFONT_FLAGS{ .NOFACESEL = 1 };
pub const CF_NOSCRIPTSEL = CHOOSEFONT_FLAGS{ .NOSCRIPTSEL = 1 };
pub const CF_NOSIMULATIONS = CHOOSEFONT_FLAGS{ .NOSIMULATIONS = 1 };
pub const CF_NOSIZESEL = CHOOSEFONT_FLAGS{ .NOSIZESEL = 1 };
pub const CF_NOSTYLESEL = CHOOSEFONT_FLAGS{ .NOSTYLESEL = 1 };
pub const CF_NOVECTORFONTS = CHOOSEFONT_FLAGS{ .NOOEMFONTS = 1 };
pub const CF_NOVERTFONTS = CHOOSEFONT_FLAGS{ .NOVERTFONTS = 1 };
pub const CF_PRINTERFONTS = CHOOSEFONT_FLAGS{ .PRINTERFONTS = 1 };
pub const CF_SCALABLEONLY = CHOOSEFONT_FLAGS{ .SCALABLEONLY = 1 };
pub const CF_SCREENFONTS = CHOOSEFONT_FLAGS{ .SCREENFONTS = 1 };
pub const CF_SCRIPTSONLY = CHOOSEFONT_FLAGS{ .ANSIONLY = 1 };
pub const CF_SELECTSCRIPT = CHOOSEFONT_FLAGS{ .SELECTSCRIPT = 1 };
pub const CF_SHOWHELP = CHOOSEFONT_FLAGS{ .SHOWHELP = 1 };
pub const CF_TTONLY = CHOOSEFONT_FLAGS{ .TTONLY = 1 };
pub const CF_USESTYLE = CHOOSEFONT_FLAGS{ .USESTYLE = 1 };
pub const CF_WYSIWYG = CHOOSEFONT_FLAGS{ .WYSIWYG = 1 };

pub const FINDREPLACE_FLAGS = packed struct(u32) {
    DOWN: u1 = 0,
    WHOLEWORD: u1 = 0,
    MATCHCASE: u1 = 0,
    FINDNEXT: u1 = 0,
    REPLACE: u1 = 0,
    REPLACEALL: u1 = 0,
    DIALOGTERM: u1 = 0,
    SHOWHELP: u1 = 0,
    ENABLEHOOK: u1 = 0,
    ENABLETEMPLATE: u1 = 0,
    NOUPDOWN: u1 = 0,
    NOMATCHCASE: u1 = 0,
    NOWHOLEWORD: u1 = 0,
    ENABLETEMPLATEHANDLE: u1 = 0,
    HIDEUPDOWN: u1 = 0,
    HIDEMATCHCASE: u1 = 0,
    HIDEWHOLEWORD: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const FR_DIALOGTERM = FINDREPLACE_FLAGS{ .DIALOGTERM = 1 };
pub const FR_DOWN = FINDREPLACE_FLAGS{ .DOWN = 1 };
pub const FR_ENABLEHOOK = FINDREPLACE_FLAGS{ .ENABLEHOOK = 1 };
pub const FR_ENABLETEMPLATE = FINDREPLACE_FLAGS{ .ENABLETEMPLATE = 1 };
pub const FR_ENABLETEMPLATEHANDLE = FINDREPLACE_FLAGS{ .ENABLETEMPLATEHANDLE = 1 };
pub const FR_FINDNEXT = FINDREPLACE_FLAGS{ .FINDNEXT = 1 };
pub const FR_HIDEUPDOWN = FINDREPLACE_FLAGS{ .HIDEUPDOWN = 1 };
pub const FR_HIDEMATCHCASE = FINDREPLACE_FLAGS{ .HIDEMATCHCASE = 1 };
pub const FR_HIDEWHOLEWORD = FINDREPLACE_FLAGS{ .HIDEWHOLEWORD = 1 };
pub const FR_MATCHCASE = FINDREPLACE_FLAGS{ .MATCHCASE = 1 };
pub const FR_NOMATCHCASE = FINDREPLACE_FLAGS{ .NOMATCHCASE = 1 };
pub const FR_NOUPDOWN = FINDREPLACE_FLAGS{ .NOUPDOWN = 1 };
pub const FR_NOWHOLEWORD = FINDREPLACE_FLAGS{ .NOWHOLEWORD = 1 };
pub const FR_REPLACE = FINDREPLACE_FLAGS{ .REPLACE = 1 };
pub const FR_REPLACEALL = FINDREPLACE_FLAGS{ .REPLACEALL = 1 };
pub const FR_SHOWHELP = FINDREPLACE_FLAGS{ .SHOWHELP = 1 };
pub const FR_WHOLEWORD = FINDREPLACE_FLAGS{ .WHOLEWORD = 1 };

pub const PRINTDLGEX_FLAGS = packed struct(u32) {
    SELECTION: u1 = 0,
    PAGENUMS: u1 = 0,
    NOSELECTION: u1 = 0,
    NOPAGENUMS: u1 = 0,
    COLLATE: u1 = 0,
    PRINTTOFILE: u1 = 0,
    PRINTSETUP: u1 = 0,
    NOWARNING: u1 = 0,
    RETURNDC: u1 = 0,
    RETURNIC: u1 = 0,
    RETURNDEFAULT: u1 = 0,
    SHOWHELP: u1 = 0,
    ENABLEPRINTHOOK: u1 = 0,
    ENABLESETUPHOOK: u1 = 0,
    ENABLEPRINTTEMPLATE: u1 = 0,
    ENABLESETUPTEMPLATE: u1 = 0,
    ENABLEPRINTTEMPLATEHANDLE: u1 = 0,
    ENABLESETUPTEMPLATEHANDLE: u1 = 0,
    USEDEVMODECOPIES: u1 = 0,
    DISABLEPRINTTOFILE: u1 = 0,
    HIDEPRINTTOFILE: u1 = 0,
    NONETWORKBUTTON: u1 = 0,
    CURRENTPAGE: u1 = 0,
    NOCURRENTPAGE: u1 = 0,
    EXCLUSIONFLAGS: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    USELARGETEMPLATE: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
    // USEDEVMODECOPIESANDCOLLATE (bit index 18) conflicts with USEDEVMODECOPIES
};
pub const PD_ALLPAGES = PRINTDLGEX_FLAGS{ };
pub const PD_COLLATE = PRINTDLGEX_FLAGS{ .COLLATE = 1 };
pub const PD_CURRENTPAGE = PRINTDLGEX_FLAGS{ .CURRENTPAGE = 1 };
pub const PD_DISABLEPRINTTOFILE = PRINTDLGEX_FLAGS{ .DISABLEPRINTTOFILE = 1 };
pub const PD_ENABLEPRINTTEMPLATE = PRINTDLGEX_FLAGS{ .ENABLEPRINTTEMPLATE = 1 };
pub const PD_ENABLEPRINTTEMPLATEHANDLE = PRINTDLGEX_FLAGS{ .ENABLEPRINTTEMPLATEHANDLE = 1 };
pub const PD_EXCLUSIONFLAGS = PRINTDLGEX_FLAGS{ .EXCLUSIONFLAGS = 1 };
pub const PD_HIDEPRINTTOFILE = PRINTDLGEX_FLAGS{ .HIDEPRINTTOFILE = 1 };
pub const PD_NOCURRENTPAGE = PRINTDLGEX_FLAGS{ .NOCURRENTPAGE = 1 };
pub const PD_NOPAGENUMS = PRINTDLGEX_FLAGS{ .NOPAGENUMS = 1 };
pub const PD_NOSELECTION = PRINTDLGEX_FLAGS{ .NOSELECTION = 1 };
pub const PD_NOWARNING = PRINTDLGEX_FLAGS{ .NOWARNING = 1 };
pub const PD_PAGENUMS = PRINTDLGEX_FLAGS{ .PAGENUMS = 1 };
pub const PD_PRINTTOFILE = PRINTDLGEX_FLAGS{ .PRINTTOFILE = 1 };
pub const PD_RETURNDC = PRINTDLGEX_FLAGS{ .RETURNDC = 1 };
pub const PD_RETURNDEFAULT = PRINTDLGEX_FLAGS{ .RETURNDEFAULT = 1 };
pub const PD_RETURNIC = PRINTDLGEX_FLAGS{ .RETURNIC = 1 };
pub const PD_SELECTION = PRINTDLGEX_FLAGS{ .SELECTION = 1 };
pub const PD_USEDEVMODECOPIES = PRINTDLGEX_FLAGS{ .USEDEVMODECOPIES = 1 };
pub const PD_USEDEVMODECOPIESANDCOLLATE = PRINTDLGEX_FLAGS{ .USEDEVMODECOPIES = 1 };
pub const PD_USELARGETEMPLATE = PRINTDLGEX_FLAGS{ .USELARGETEMPLATE = 1 };
pub const PD_ENABLEPRINTHOOK = PRINTDLGEX_FLAGS{ .ENABLEPRINTHOOK = 1 };
pub const PD_ENABLESETUPHOOK = PRINTDLGEX_FLAGS{ .ENABLESETUPHOOK = 1 };
pub const PD_ENABLESETUPTEMPLATE = PRINTDLGEX_FLAGS{ .ENABLESETUPTEMPLATE = 1 };
pub const PD_ENABLESETUPTEMPLATEHANDLE = PRINTDLGEX_FLAGS{ .ENABLESETUPTEMPLATEHANDLE = 1 };
pub const PD_NONETWORKBUTTON = PRINTDLGEX_FLAGS{ .NONETWORKBUTTON = 1 };
pub const PD_PRINTSETUP = PRINTDLGEX_FLAGS{ .PRINTSETUP = 1 };
pub const PD_SHOWHELP = PRINTDLGEX_FLAGS{ .SHOWHELP = 1 };

pub const CHOOSEFONT_FONT_TYPE = packed struct(u16) {
    _0: u1 = 0,
    _1: u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    BOLD_FONTTYPE: u1 = 0,
    ITALIC_FONTTYPE: u1 = 0,
    REGULAR_FONTTYPE: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    SCREEN_FONTTYPE: u1 = 0,
    PRINTER_FONTTYPE: u1 = 0,
    SIMULATED_FONTTYPE: u1 = 0,
};
pub const BOLD_FONTTYPE = CHOOSEFONT_FONT_TYPE{ .BOLD_FONTTYPE = 1 };
pub const ITALIC_FONTTYPE = CHOOSEFONT_FONT_TYPE{ .ITALIC_FONTTYPE = 1 };
pub const PRINTER_FONTTYPE = CHOOSEFONT_FONT_TYPE{ .PRINTER_FONTTYPE = 1 };
pub const REGULAR_FONTTYPE = CHOOSEFONT_FONT_TYPE{ .REGULAR_FONTTYPE = 1 };
pub const SCREEN_FONTTYPE = CHOOSEFONT_FONT_TYPE{ .SCREEN_FONTTYPE = 1 };
pub const SIMULATED_FONTTYPE = CHOOSEFONT_FONT_TYPE{ .SIMULATED_FONTTYPE = 1 };

pub const LPOFNHOOKPROC = *const fn(
    param0: ?HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) usize;





pub const LPCCHOOKPROC = *const fn(
    param0: ?HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) usize;







pub const LPFRHOOKPROC = *const fn(
    param0: ?HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) usize;



pub const LPCFHOOKPROC = *const fn(
    param0: ?HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) usize;



pub const LPPRINTHOOKPROC = *const fn(
    param0: ?HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) usize;

pub const LPSETUPHOOKPROC = *const fn(
    param0: ?HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) usize;



// TODO: this type is limited to platform 'windows5.0'
const IID_IPrintDialogCallback_Value = Guid.initString("5852a2c3-6530-11d1-b6a3-0000f8757bf9");
pub const IID_IPrintDialogCallback = &IID_IPrintDialogCallback_Value;
pub const IPrintDialogCallback = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InitDone: *const fn(
            self: *const IPrintDialogCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectionChange: *const fn(
            self: *const IPrintDialogCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleMessage: *const fn(
            self: *const IPrintDialogCallback,
            hDlg: ?HWND,
            uMsg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
            pResult: ?*LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn InitDone(self: *const IPrintDialogCallback) callconv(.Inline) HRESULT {
        return self.vtable.InitDone(self);
    }
    pub fn SelectionChange(self: *const IPrintDialogCallback) callconv(.Inline) HRESULT {
        return self.vtable.SelectionChange(self);
    }
    pub fn HandleMessage(self: *const IPrintDialogCallback, hDlg: ?HWND, uMsg: u32, wParam: WPARAM, lParam: LPARAM, pResult: ?*LRESULT) callconv(.Inline) HRESULT {
        return self.vtable.HandleMessage(self, hDlg, uMsg, wParam, lParam, pResult);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IPrintDialogServices_Value = Guid.initString("509aaeda-5639-11d1-b6a1-0000f8757bf9");
pub const IID_IPrintDialogServices = &IID_IPrintDialogServices_Value;
pub const IPrintDialogServices = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCurrentDevMode: *const fn(
            self: *const IPrintDialogServices,
            pDevMode: ?*DEVMODEA,
            pcbSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentPrinterName: *const fn(
            self: *const IPrintDialogServices,
            pPrinterName: ?[*:0]u16,
            pcchSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentPortName: *const fn(
            self: *const IPrintDialogServices,
            pPortName: ?[*:0]u16,
            pcchSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetCurrentDevMode(self: *const IPrintDialogServices, pDevMode: ?*DEVMODEA, pcbSize: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCurrentDevMode(self, pDevMode, pcbSize);
    }
    pub fn GetCurrentPrinterName(self: *const IPrintDialogServices, pPrinterName: ?[*:0]u16, pcchSize: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCurrentPrinterName(self, pPrinterName, pcchSize);
    }
    pub fn GetCurrentPortName(self: *const IPrintDialogServices, pPortName: ?[*:0]u16, pcchSize: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCurrentPortName(self, pPortName, pcchSize);
    }
};





pub const LPPAGEPAINTHOOK = *const fn(
    param0: ?HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) usize;

pub const LPPAGESETUPHOOK = *const fn(
    param0: ?HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) usize;

























pub const OPENFILENAME_NT4A = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hInstance: ?HINSTANCE,
        lpstrFilter: ?[*:0]const u8,
        lpstrCustomFilter: ?PSTR,
        nMaxCustFilter: u32,
        nFilterIndex: u32,
        lpstrFile: ?PSTR,
        nMaxFile: u32,
        lpstrFileTitle: ?PSTR,
        nMaxFileTitle: u32,
        lpstrInitialDir: ?[*:0]const u8,
        lpstrTitle: ?[*:0]const u8,
        Flags: u32,
        nFileOffset: u16,
        nFileExtension: u16,
        lpstrDefExt: ?[*:0]const u8,
        lCustData: LPARAM,
        lpfnHook: ?LPOFNHOOKPROC,
        lpTemplateName: ?[*:0]const u8,
    },
    .X86 => extern struct {
        lStructSize: u32 align(1),
        hwndOwner: ?HWND align(1),
        hInstance: ?HINSTANCE align(1),
        lpstrFilter: ?[*:0]const u8 align(1),
        lpstrCustomFilter: ?PSTR align(1),
        nMaxCustFilter: u32 align(1),
        nFilterIndex: u32 align(1),
        lpstrFile: ?PSTR align(1),
        nMaxFile: u32 align(1),
        lpstrFileTitle: ?PSTR align(1),
        nMaxFileTitle: u32 align(1),
        lpstrInitialDir: ?[*:0]const u8 align(1),
        lpstrTitle: ?[*:0]const u8 align(1),
        Flags: u32 align(1),
        nFileOffset: u16 align(1),
        nFileExtension: u16 align(1),
        lpstrDefExt: ?[*:0]const u8 align(1),
        lCustData: LPARAM align(1),
        lpfnHook: ?LPOFNHOOKPROC align(1),
        lpTemplateName: ?[*:0]const u8 align(1),
    },
};
pub const OPENFILENAME_NT4W = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hInstance: ?HINSTANCE,
        lpstrFilter: ?[*:0]const u16,
        lpstrCustomFilter: ?PWSTR,
        nMaxCustFilter: u32,
        nFilterIndex: u32,
        lpstrFile: ?PWSTR,
        nMaxFile: u32,
        lpstrFileTitle: ?PWSTR,
        nMaxFileTitle: u32,
        lpstrInitialDir: ?[*:0]const u16,
        lpstrTitle: ?[*:0]const u16,
        Flags: u32,
        nFileOffset: u16,
        nFileExtension: u16,
        lpstrDefExt: ?[*:0]const u16,
        lCustData: LPARAM,
        lpfnHook: ?LPOFNHOOKPROC,
        lpTemplateName: ?[*:0]const u16,
    },
    .X86 => extern struct {
        lStructSize: u32 align(1),
        hwndOwner: ?HWND align(1),
        hInstance: ?HINSTANCE align(1),
        lpstrFilter: ?[*:0]const u16 align(1),
        lpstrCustomFilter: ?PWSTR align(1),
        nMaxCustFilter: u32 align(1),
        nFilterIndex: u32 align(1),
        lpstrFile: ?PWSTR align(1),
        nMaxFile: u32 align(1),
        lpstrFileTitle: ?PWSTR align(1),
        nMaxFileTitle: u32 align(1),
        lpstrInitialDir: ?[*:0]const u16 align(1),
        lpstrTitle: ?[*:0]const u16 align(1),
        Flags: u32 align(1),
        nFileOffset: u16 align(1),
        nFileExtension: u16 align(1),
        lpstrDefExt: ?[*:0]const u16 align(1),
        lCustData: LPARAM align(1),
        lpfnHook: ?LPOFNHOOKPROC align(1),
        lpTemplateName: ?[*:0]const u16 align(1),
    },
};
pub const OPENFILENAMEA = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hInstance: ?HINSTANCE,
        lpstrFilter: ?[*:0]const u8,
        lpstrCustomFilter: ?PSTR,
        nMaxCustFilter: u32,
        nFilterIndex: u32,
        lpstrFile: ?PSTR,
        nMaxFile: u32,
        lpstrFileTitle: ?PSTR,
        nMaxFileTitle: u32,
        lpstrInitialDir: ?[*:0]const u8,
        lpstrTitle: ?[*:0]const u8,
        Flags: OPEN_FILENAME_FLAGS,
        nFileOffset: u16,
        nFileExtension: u16,
        lpstrDefExt: ?[*:0]const u8,
        lCustData: LPARAM,
        lpfnHook: ?LPOFNHOOKPROC,
        lpTemplateName: ?[*:0]const u8,
        pvReserved: ?*anyopaque,
        dwReserved: u32,
        FlagsEx: OPEN_FILENAME_FLAGS_EX,
    },
    .X86 => extern struct {
        lStructSize: u32 align(1),
        hwndOwner: ?HWND align(1),
        hInstance: ?HINSTANCE align(1),
        lpstrFilter: ?[*:0]const u8 align(1),
        lpstrCustomFilter: ?PSTR align(1),
        nMaxCustFilter: u32 align(1),
        nFilterIndex: u32 align(1),
        lpstrFile: ?PSTR align(1),
        nMaxFile: u32 align(1),
        lpstrFileTitle: ?PSTR align(1),
        nMaxFileTitle: u32 align(1),
        lpstrInitialDir: ?[*:0]const u8 align(1),
        lpstrTitle: ?[*:0]const u8 align(1),
        Flags: OPEN_FILENAME_FLAGS align(1),
        nFileOffset: u16 align(1),
        nFileExtension: u16 align(1),
        lpstrDefExt: ?[*:0]const u8 align(1),
        lCustData: LPARAM align(1),
        lpfnHook: ?LPOFNHOOKPROC align(1),
        lpTemplateName: ?[*:0]const u8 align(1),
        pvReserved: ?*anyopaque align(1),
        dwReserved: u32 align(1),
        FlagsEx: OPEN_FILENAME_FLAGS_EX align(1),
    },
};
pub const OPENFILENAMEW = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hInstance: ?HINSTANCE,
        lpstrFilter: ?[*:0]const u16,
        lpstrCustomFilter: ?PWSTR,
        nMaxCustFilter: u32,
        nFilterIndex: u32,
        lpstrFile: ?PWSTR,
        nMaxFile: u32,
        lpstrFileTitle: ?PWSTR,
        nMaxFileTitle: u32,
        lpstrInitialDir: ?[*:0]const u16,
        lpstrTitle: ?[*:0]const u16,
        Flags: OPEN_FILENAME_FLAGS,
        nFileOffset: u16,
        nFileExtension: u16,
        lpstrDefExt: ?[*:0]const u16,
        lCustData: LPARAM,
        lpfnHook: ?LPOFNHOOKPROC,
        lpTemplateName: ?[*:0]const u16,
        pvReserved: ?*anyopaque,
        dwReserved: u32,
        FlagsEx: OPEN_FILENAME_FLAGS_EX,
    },
    .X86 => extern struct {
        lStructSize: u32 align(1),
        hwndOwner: ?HWND align(1),
        hInstance: ?HINSTANCE align(1),
        lpstrFilter: ?[*:0]const u16 align(1),
        lpstrCustomFilter: ?PWSTR align(1),
        nMaxCustFilter: u32 align(1),
        nFilterIndex: u32 align(1),
        lpstrFile: ?PWSTR align(1),
        nMaxFile: u32 align(1),
        lpstrFileTitle: ?PWSTR align(1),
        nMaxFileTitle: u32 align(1),
        lpstrInitialDir: ?[*:0]const u16 align(1),
        lpstrTitle: ?[*:0]const u16 align(1),
        Flags: OPEN_FILENAME_FLAGS align(1),
        nFileOffset: u16 align(1),
        nFileExtension: u16 align(1),
        lpstrDefExt: ?[*:0]const u16 align(1),
        lCustData: LPARAM align(1),
        lpfnHook: ?LPOFNHOOKPROC align(1),
        lpTemplateName: ?[*:0]const u16 align(1),
        pvReserved: ?*anyopaque align(1),
        dwReserved: u32 align(1),
        FlagsEx: OPEN_FILENAME_FLAGS_EX align(1),
    },
};
pub const OFNOTIFYA = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        hdr: NMHDR,
        lpOFN: ?*OPENFILENAMEA,
        pszFile: ?PSTR,
    },
    .X86 => extern struct {
        hdr: NMHDR align(1),
        lpOFN: ?*OPENFILENAMEA align(1),
        pszFile: ?PSTR align(1),
    },
};
pub const OFNOTIFYW = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        hdr: NMHDR,
        lpOFN: ?*OPENFILENAMEW,
        pszFile: ?PWSTR,
    },
    .X86 => extern struct {
        hdr: NMHDR align(1),
        lpOFN: ?*OPENFILENAMEW align(1),
        pszFile: ?PWSTR align(1),
    },
};
pub const OFNOTIFYEXA = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        hdr: NMHDR,
        lpOFN: ?*OPENFILENAMEA,
        psf: ?*anyopaque,
        pidl: ?*anyopaque,
    },
    .X86 => extern struct {
        hdr: NMHDR align(1),
        lpOFN: ?*OPENFILENAMEA align(1),
        psf: ?*anyopaque align(1),
        pidl: ?*anyopaque align(1),
    },
};
pub const OFNOTIFYEXW = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        hdr: NMHDR,
        lpOFN: ?*OPENFILENAMEW,
        psf: ?*anyopaque,
        pidl: ?*anyopaque,
    },
    .X86 => extern struct {
        hdr: NMHDR align(1),
        lpOFN: ?*OPENFILENAMEW align(1),
        psf: ?*anyopaque align(1),
        pidl: ?*anyopaque align(1),
    },
};
pub const CHOOSECOLORA = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hInstance: ?HWND,
        rgbResult: u32,
        lpCustColors: ?*u32,
        Flags: u32,
        lCustData: LPARAM,
        lpfnHook: ?LPCCHOOKPROC,
        lpTemplateName: ?[*:0]const u8,
    },
    .X86 => extern struct {
        lStructSize: u32 align(1),
        hwndOwner: ?HWND align(1),
        hInstance: ?HWND align(1),
        rgbResult: u32 align(1),
        lpCustColors: ?*u32 align(1),
        Flags: u32 align(1),
        lCustData: LPARAM align(1),
        lpfnHook: ?LPCCHOOKPROC align(1),
        lpTemplateName: ?[*:0]const u8 align(1),
    },
};
pub const CHOOSECOLORW = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hInstance: ?HWND,
        rgbResult: u32,
        lpCustColors: ?*u32,
        Flags: u32,
        lCustData: LPARAM,
        lpfnHook: ?LPCCHOOKPROC,
        lpTemplateName: ?[*:0]const u16,
    },
    .X86 => extern struct {
        lStructSize: u32 align(1),
        hwndOwner: ?HWND align(1),
        hInstance: ?HWND align(1),
        rgbResult: u32 align(1),
        lpCustColors: ?*u32 align(1),
        Flags: u32 align(1),
        lCustData: LPARAM align(1),
        lpfnHook: ?LPCCHOOKPROC align(1),
        lpTemplateName: ?[*:0]const u16 align(1),
    },
};
pub const FINDREPLACEA = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hInstance: ?HINSTANCE,
        Flags: FINDREPLACE_FLAGS,
        lpstrFindWhat: ?PSTR,
        lpstrReplaceWith: ?PSTR,
        wFindWhatLen: u16,
        wReplaceWithLen: u16,
        lCustData: LPARAM,
        lpfnHook: ?LPFRHOOKPROC,
        lpTemplateName: ?[*:0]const u8,
    },
    .X86 => extern struct {
        lStructSize: u32 align(1),
        hwndOwner: ?HWND align(1),
        hInstance: ?HINSTANCE align(1),
        Flags: FINDREPLACE_FLAGS align(1),
        lpstrFindWhat: ?PSTR align(1),
        lpstrReplaceWith: ?PSTR align(1),
        wFindWhatLen: u16 align(1),
        wReplaceWithLen: u16 align(1),
        lCustData: LPARAM align(1),
        lpfnHook: ?LPFRHOOKPROC align(1),
        lpTemplateName: ?[*:0]const u8 align(1),
    },
};
pub const FINDREPLACEW = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hInstance: ?HINSTANCE,
        Flags: FINDREPLACE_FLAGS,
        lpstrFindWhat: ?PWSTR,
        lpstrReplaceWith: ?PWSTR,
        wFindWhatLen: u16,
        wReplaceWithLen: u16,
        lCustData: LPARAM,
        lpfnHook: ?LPFRHOOKPROC,
        lpTemplateName: ?[*:0]const u16,
    },
    .X86 => extern struct {
        lStructSize: u32 align(1),
        hwndOwner: ?HWND align(1),
        hInstance: ?HINSTANCE align(1),
        Flags: FINDREPLACE_FLAGS align(1),
        lpstrFindWhat: ?PWSTR align(1),
        lpstrReplaceWith: ?PWSTR align(1),
        wFindWhatLen: u16 align(1),
        wReplaceWithLen: u16 align(1),
        lCustData: LPARAM align(1),
        lpfnHook: ?LPFRHOOKPROC align(1),
        lpTemplateName: ?[*:0]const u16 align(1),
    },
};
pub const CHOOSEFONTA = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hDC: ?HDC,
        lpLogFont: ?*LOGFONTA,
        iPointSize: i32,
        Flags: CHOOSEFONT_FLAGS,
        rgbColors: u32,
        lCustData: LPARAM,
        lpfnHook: ?LPCFHOOKPROC,
        lpTemplateName: ?[*:0]const u8,
        hInstance: ?HINSTANCE,
        lpszStyle: ?PSTR,
        nFontType: CHOOSEFONT_FONT_TYPE,
        ___MISSING_ALIGNMENT__: u16,
        nSizeMin: i32,
        nSizeMax: i32,
    },
    .X86 => extern struct {
        lStructSize: u32 align(1),
        hwndOwner: ?HWND align(1),
        hDC: ?HDC align(1),
        lpLogFont: ?*LOGFONTA align(1),
        iPointSize: i32 align(1),
        Flags: CHOOSEFONT_FLAGS align(1),
        rgbColors: u32 align(1),
        lCustData: LPARAM align(1),
        lpfnHook: ?LPCFHOOKPROC align(1),
        lpTemplateName: ?[*:0]const u8 align(1),
        hInstance: ?HINSTANCE align(1),
        lpszStyle: ?PSTR align(1),
        nFontType: CHOOSEFONT_FONT_TYPE align(1),
        ___MISSING_ALIGNMENT__: u16 align(1),
        nSizeMin: i32 align(1),
        nSizeMax: i32 align(1),
    },
};
pub const CHOOSEFONTW = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hDC: ?HDC,
        lpLogFont: ?*LOGFONTW,
        iPointSize: i32,
        Flags: CHOOSEFONT_FLAGS,
        rgbColors: u32,
        lCustData: LPARAM,
        lpfnHook: ?LPCFHOOKPROC,
        lpTemplateName: ?[*:0]const u16,
        hInstance: ?HINSTANCE,
        lpszStyle: ?PWSTR,
        nFontType: CHOOSEFONT_FONT_TYPE,
        ___MISSING_ALIGNMENT__: u16,
        nSizeMin: i32,
        nSizeMax: i32,
    },
    .X86 => extern struct {
        lStructSize: u32 align(1),
        hwndOwner: ?HWND align(1),
        hDC: ?HDC align(1),
        lpLogFont: ?*LOGFONTW align(1),
        iPointSize: i32 align(1),
        Flags: CHOOSEFONT_FLAGS align(1),
        rgbColors: u32 align(1),
        lCustData: LPARAM align(1),
        lpfnHook: ?LPCFHOOKPROC align(1),
        lpTemplateName: ?[*:0]const u16 align(1),
        hInstance: ?HINSTANCE align(1),
        lpszStyle: ?PWSTR align(1),
        nFontType: CHOOSEFONT_FONT_TYPE align(1),
        ___MISSING_ALIGNMENT__: u16 align(1),
        nSizeMin: i32 align(1),
        nSizeMax: i32 align(1),
    },
};
pub const PRINTDLGA = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hDevMode: isize,
        hDevNames: isize,
        hDC: ?HDC,
        Flags: PRINTDLGEX_FLAGS,
        nFromPage: u16,
        nToPage: u16,
        nMinPage: u16,
        nMaxPage: u16,
        nCopies: u16,
        hInstance: ?HINSTANCE,
        lCustData: LPARAM,
        lpfnPrintHook: ?LPPRINTHOOKPROC,
        lpfnSetupHook: ?LPSETUPHOOKPROC,
        lpPrintTemplateName: ?[*:0]const u8,
        lpSetupTemplateName: ?[*:0]const u8,
        hPrintTemplate: isize,
        hSetupTemplate: isize,
    },
    .X86 => extern struct {
        lStructSize: u32 align(1),
        hwndOwner: ?HWND align(1),
        hDevMode: isize align(1),
        hDevNames: isize align(1),
        hDC: ?HDC align(1),
        Flags: PRINTDLGEX_FLAGS align(1),
        nFromPage: u16 align(1),
        nToPage: u16 align(1),
        nMinPage: u16 align(1),
        nMaxPage: u16 align(1),
        nCopies: u16 align(1),
        hInstance: ?HINSTANCE align(1),
        lCustData: LPARAM align(1),
        lpfnPrintHook: ?LPPRINTHOOKPROC align(1),
        lpfnSetupHook: ?LPSETUPHOOKPROC align(1),
        lpPrintTemplateName: ?[*:0]const u8 align(1),
        lpSetupTemplateName: ?[*:0]const u8 align(1),
        hPrintTemplate: isize align(1),
        hSetupTemplate: isize align(1),
    },
};
pub const PRINTDLGW = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hDevMode: isize,
        hDevNames: isize,
        hDC: ?HDC,
        Flags: PRINTDLGEX_FLAGS,
        nFromPage: u16,
        nToPage: u16,
        nMinPage: u16,
        nMaxPage: u16,
        nCopies: u16,
        hInstance: ?HINSTANCE,
        lCustData: LPARAM,
        lpfnPrintHook: ?LPPRINTHOOKPROC,
        lpfnSetupHook: ?LPSETUPHOOKPROC,
        lpPrintTemplateName: ?[*:0]const u16,
        lpSetupTemplateName: ?[*:0]const u16,
        hPrintTemplate: isize,
        hSetupTemplate: isize,
    },
    .X86 => extern struct {
        lStructSize: u32 align(1),
        hwndOwner: ?HWND align(1),
        hDevMode: isize align(1),
        hDevNames: isize align(1),
        hDC: ?HDC align(1),
        Flags: PRINTDLGEX_FLAGS align(1),
        nFromPage: u16 align(1),
        nToPage: u16 align(1),
        nMinPage: u16 align(1),
        nMaxPage: u16 align(1),
        nCopies: u16 align(1),
        hInstance: ?HINSTANCE align(1),
        lCustData: LPARAM align(1),
        lpfnPrintHook: ?LPPRINTHOOKPROC align(1),
        lpfnSetupHook: ?LPSETUPHOOKPROC align(1),
        lpPrintTemplateName: ?[*:0]const u16 align(1),
        lpSetupTemplateName: ?[*:0]const u16 align(1),
        hPrintTemplate: isize align(1),
        hSetupTemplate: isize align(1),
    },
};
pub const PRINTPAGERANGE = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        nFromPage: u32,
        nToPage: u32,
    },
    .X86 => extern struct {
        nFromPage: u32 align(1),
        nToPage: u32 align(1),
    },
};
pub const PRINTDLGEXA = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hDevMode: isize,
        hDevNames: isize,
        hDC: ?HDC,
        Flags: PRINTDLGEX_FLAGS,
        Flags2: u32,
        ExclusionFlags: u32,
        nPageRanges: u32,
        nMaxPageRanges: u32,
        lpPageRanges: ?*PRINTPAGERANGE,
        nMinPage: u32,
        nMaxPage: u32,
        nCopies: u32,
        hInstance: ?HINSTANCE,
        lpPrintTemplateName: ?[*:0]const u8,
        lpCallback: ?*IUnknown,
        nPropertyPages: u32,
        lphPropertyPages: ?*?HPROPSHEETPAGE,
        nStartPage: u32,
        dwResultAction: u32,
    },
    .X86 => extern struct {
        lStructSize: u32 align(1),
        hwndOwner: ?HWND align(1),
        hDevMode: isize align(1),
        hDevNames: isize align(1),
        hDC: ?HDC align(1),
        Flags: PRINTDLGEX_FLAGS align(1),
        Flags2: u32 align(1),
        ExclusionFlags: u32 align(1),
        nPageRanges: u32 align(1),
        nMaxPageRanges: u32 align(1),
        lpPageRanges: ?*PRINTPAGERANGE align(1),
        nMinPage: u32 align(1),
        nMaxPage: u32 align(1),
        nCopies: u32 align(1),
        hInstance: ?HINSTANCE align(1),
        lpPrintTemplateName: ?[*:0]const u8 align(1),
        lpCallback: ?*IUnknown align(1),
        nPropertyPages: u32 align(1),
        lphPropertyPages: ?*?HPROPSHEETPAGE align(1),
        nStartPage: u32 align(1),
        dwResultAction: u32 align(1),
    },
};
pub const PRINTDLGEXW = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hDevMode: isize,
        hDevNames: isize,
        hDC: ?HDC,
        Flags: PRINTDLGEX_FLAGS,
        Flags2: u32,
        ExclusionFlags: u32,
        nPageRanges: u32,
        nMaxPageRanges: u32,
        lpPageRanges: ?*PRINTPAGERANGE,
        nMinPage: u32,
        nMaxPage: u32,
        nCopies: u32,
        hInstance: ?HINSTANCE,
        lpPrintTemplateName: ?[*:0]const u16,
        lpCallback: ?*IUnknown,
        nPropertyPages: u32,
        lphPropertyPages: ?*?HPROPSHEETPAGE,
        nStartPage: u32,
        dwResultAction: u32,
    },
    .X86 => extern struct {
        lStructSize: u32 align(1),
        hwndOwner: ?HWND align(1),
        hDevMode: isize align(1),
        hDevNames: isize align(1),
        hDC: ?HDC align(1),
        Flags: PRINTDLGEX_FLAGS align(1),
        Flags2: u32 align(1),
        ExclusionFlags: u32 align(1),
        nPageRanges: u32 align(1),
        nMaxPageRanges: u32 align(1),
        lpPageRanges: ?*PRINTPAGERANGE align(1),
        nMinPage: u32 align(1),
        nMaxPage: u32 align(1),
        nCopies: u32 align(1),
        hInstance: ?HINSTANCE align(1),
        lpPrintTemplateName: ?[*:0]const u16 align(1),
        lpCallback: ?*IUnknown align(1),
        nPropertyPages: u32 align(1),
        lphPropertyPages: ?*?HPROPSHEETPAGE align(1),
        nStartPage: u32 align(1),
        dwResultAction: u32 align(1),
    },
};
pub const DEVNAMES = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        wDriverOffset: u16,
        wDeviceOffset: u16,
        wOutputOffset: u16,
        wDefault: u16,
    },
    .X86 => extern struct {
        wDriverOffset: u16 align(1),
        wDeviceOffset: u16 align(1),
        wOutputOffset: u16 align(1),
        wDefault: u16 align(1),
    },
};
pub const PAGESETUPDLGA = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hDevMode: isize,
        hDevNames: isize,
        Flags: PAGESETUPDLG_FLAGS,
        ptPaperSize: POINT,
        rtMinMargin: RECT,
        rtMargin: RECT,
        hInstance: ?HINSTANCE,
        lCustData: LPARAM,
        lpfnPageSetupHook: ?LPPAGESETUPHOOK,
        lpfnPagePaintHook: ?LPPAGEPAINTHOOK,
        lpPageSetupTemplateName: ?[*:0]const u8,
        hPageSetupTemplate: isize,
    },
    .X86 => extern struct {
        lStructSize: u32 align(1),
        hwndOwner: ?HWND align(1),
        hDevMode: isize align(1),
        hDevNames: isize align(1),
        Flags: PAGESETUPDLG_FLAGS align(1),
        ptPaperSize: POINT align(1),
        rtMinMargin: RECT align(1),
        rtMargin: RECT align(1),
        hInstance: ?HINSTANCE align(1),
        lCustData: LPARAM align(1),
        lpfnPageSetupHook: ?LPPAGESETUPHOOK align(1),
        lpfnPagePaintHook: ?LPPAGEPAINTHOOK align(1),
        lpPageSetupTemplateName: ?[*:0]const u8 align(1),
        hPageSetupTemplate: isize align(1),
    },
};
pub const PAGESETUPDLGW = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hDevMode: isize,
        hDevNames: isize,
        Flags: PAGESETUPDLG_FLAGS,
        ptPaperSize: POINT,
        rtMinMargin: RECT,
        rtMargin: RECT,
        hInstance: ?HINSTANCE,
        lCustData: LPARAM,
        lpfnPageSetupHook: ?LPPAGESETUPHOOK,
        lpfnPagePaintHook: ?LPPAGEPAINTHOOK,
        lpPageSetupTemplateName: ?[*:0]const u16,
        hPageSetupTemplate: isize,
    },
    .X86 => extern struct {
        lStructSize: u32 align(1),
        hwndOwner: ?HWND align(1),
        hDevMode: isize align(1),
        hDevNames: isize align(1),
        Flags: PAGESETUPDLG_FLAGS align(1),
        ptPaperSize: POINT align(1),
        rtMinMargin: RECT align(1),
        rtMargin: RECT align(1),
        hInstance: ?HINSTANCE align(1),
        lCustData: LPARAM align(1),
        lpfnPageSetupHook: ?LPPAGESETUPHOOK align(1),
        lpfnPagePaintHook: ?LPPAGEPAINTHOOK align(1),
        lpPageSetupTemplateName: ?[*:0]const u16 align(1),
        hPageSetupTemplate: isize align(1),
    },
};

//--------------------------------------------------------------------------------
// Section: Functions (21)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "comdlg32" fn GetOpenFileNameA(
    param0: ?*OPENFILENAMEA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "comdlg32" fn GetOpenFileNameW(
    param0: ?*OPENFILENAMEW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "comdlg32" fn GetSaveFileNameA(
    param0: ?*OPENFILENAMEA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "comdlg32" fn GetSaveFileNameW(
    param0: ?*OPENFILENAMEW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "comdlg32" fn GetFileTitleA(
    param0: ?[*:0]const u8,
    Buf: [*:0]u8,
    cchSize: u16,
) callconv(@import("std").os.windows.WINAPI) i16;

// TODO: this type is limited to platform 'windows5.0'
pub extern "comdlg32" fn GetFileTitleW(
    param0: ?[*:0]const u16,
    Buf: [*:0]u16,
    cchSize: u16,
) callconv(@import("std").os.windows.WINAPI) i16;

pub extern "comdlg32" fn ChooseColorA(
    param0: ?*CHOOSECOLORA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "comdlg32" fn ChooseColorW(
    param0: ?*CHOOSECOLORW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "comdlg32" fn FindTextA(
    param0: ?*FINDREPLACEA,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "comdlg32" fn FindTextW(
    param0: ?*FINDREPLACEW,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "comdlg32" fn ReplaceTextA(
    param0: ?*FINDREPLACEA,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "comdlg32" fn ReplaceTextW(
    param0: ?*FINDREPLACEW,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

pub extern "comdlg32" fn ChooseFontA(
    param0: ?*CHOOSEFONTA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "comdlg32" fn ChooseFontW(
    param0: ?*CHOOSEFONTW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "comdlg32" fn PrintDlgA(
    pPD: ?*PRINTDLGA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "comdlg32" fn PrintDlgW(
    pPD: ?*PRINTDLGW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "comdlg32" fn PrintDlgExA(
    pPD: ?*PRINTDLGEXA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "comdlg32" fn PrintDlgExW(
    pPD: ?*PRINTDLGEXW,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "comdlg32" fn CommDlgExtendedError(
) callconv(@import("std").os.windows.WINAPI) COMMON_DLG_ERRORS;

pub extern "comdlg32" fn PageSetupDlgA(
    param0: ?*PAGESETUPDLGA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "comdlg32" fn PageSetupDlgW(
    param0: ?*PAGESETUPDLGW,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (20)
//--------------------------------------------------------------------------------
pub const OPENFILENAME_NT4 = switch (@import("../../zig.zig").unicode_mode) {
    .ansi => @This().OPENFILENAME_NT4A,
    .wide => @This().OPENFILENAME_NT4W,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'OPENFILENAME_NT4' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const OPENFILENAME = switch (@import("../../zig.zig").unicode_mode) {
    .ansi => @This().OPENFILENAMEA,
    .wide => @This().OPENFILENAMEW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'OPENFILENAME' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const OFNOTIFY = switch (@import("../../zig.zig").unicode_mode) {
    .ansi => @This().OFNOTIFYA,
    .wide => @This().OFNOTIFYW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'OFNOTIFY' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const OFNOTIFYEX = switch (@import("../../zig.zig").unicode_mode) {
    .ansi => @This().OFNOTIFYEXA,
    .wide => @This().OFNOTIFYEXW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'OFNOTIFYEX' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CHOOSECOLOR = switch (@import("../../zig.zig").unicode_mode) {
    .ansi => @This().CHOOSECOLORA,
    .wide => @This().CHOOSECOLORW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CHOOSECOLOR' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const FINDREPLACE = switch (@import("../../zig.zig").unicode_mode) {
    .ansi => @This().FINDREPLACEA,
    .wide => @This().FINDREPLACEW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'FINDREPLACE' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CHOOSEFONT = switch (@import("../../zig.zig").unicode_mode) {
    .ansi => @This().CHOOSEFONTA,
    .wide => @This().CHOOSEFONTW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CHOOSEFONT' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PRINTDLG = switch (@import("../../zig.zig").unicode_mode) {
    .ansi => @This().PRINTDLGA,
    .wide => @This().PRINTDLGW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PRINTDLG' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PRINTDLGEX = switch (@import("../../zig.zig").unicode_mode) {
    .ansi => @This().PRINTDLGEXA,
    .wide => @This().PRINTDLGEXW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PRINTDLGEX' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PAGESETUPDLG = switch (@import("../../zig.zig").unicode_mode) {
    .ansi => @This().PAGESETUPDLGA,
    .wide => @This().PAGESETUPDLGW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PAGESETUPDLG' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetOpenFileName = switch (@import("../../zig.zig").unicode_mode) {
    .ansi => @This().GetOpenFileNameA,
    .wide => @This().GetOpenFileNameW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetOpenFileName' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetSaveFileName = switch (@import("../../zig.zig").unicode_mode) {
    .ansi => @This().GetSaveFileNameA,
    .wide => @This().GetSaveFileNameW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetSaveFileName' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetFileTitle = switch (@import("../../zig.zig").unicode_mode) {
    .ansi => @This().GetFileTitleA,
    .wide => @This().GetFileTitleW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetFileTitle' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const ChooseColor = switch (@import("../../zig.zig").unicode_mode) {
    .ansi => @This().ChooseColorA,
    .wide => @This().ChooseColorW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'ChooseColor' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const FindText = switch (@import("../../zig.zig").unicode_mode) {
    .ansi => @This().FindTextA,
    .wide => @This().FindTextW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'FindText' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const ReplaceText = switch (@import("../../zig.zig").unicode_mode) {
    .ansi => @This().ReplaceTextA,
    .wide => @This().ReplaceTextW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'ReplaceText' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const ChooseFont = switch (@import("../../zig.zig").unicode_mode) {
    .ansi => @This().ChooseFontA,
    .wide => @This().ChooseFontW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'ChooseFont' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PrintDlg = switch (@import("../../zig.zig").unicode_mode) {
    .ansi => @This().PrintDlgA,
    .wide => @This().PrintDlgW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PrintDlg' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PrintDlgEx = switch (@import("../../zig.zig").unicode_mode) {
    .ansi => @This().PrintDlgExA,
    .wide => @This().PrintDlgExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PrintDlgEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PageSetupDlg = switch (@import("../../zig.zig").unicode_mode) {
    .ansi => @This().PageSetupDlgA,
    .wide => @This().PageSetupDlgW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PageSetupDlg' requires that UNICODE be set to true or false in the root module",
    ),
};
//--------------------------------------------------------------------------------
// Section: Imports (19)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const BOOL = @import("../../foundation.zig").BOOL;
const DEVMODEA = @import("../../graphics/gdi.zig").DEVMODEA;
const HDC = @import("../../graphics/gdi.zig").HDC;
const HINSTANCE = @import("../../foundation.zig").HINSTANCE;
const HPROPSHEETPAGE = @import("../../ui/controls.zig").HPROPSHEETPAGE;
const HRESULT = @import("../../foundation.zig").HRESULT;
const HWND = @import("../../foundation.zig").HWND;
const IUnknown = @import("../../system/com.zig").IUnknown;
const LOGFONTA = @import("../../graphics/gdi.zig").LOGFONTA;
const LOGFONTW = @import("../../graphics/gdi.zig").LOGFONTW;
const LPARAM = @import("../../foundation.zig").LPARAM;
const LRESULT = @import("../../foundation.zig").LRESULT;
const NMHDR = @import("../../ui/controls.zig").NMHDR;
const POINT = @import("../../foundation.zig").POINT;
const PSTR = @import("../../foundation.zig").PSTR;
const PWSTR = @import("../../foundation.zig").PWSTR;
const RECT = @import("../../foundation.zig").RECT;
const WPARAM = @import("../../foundation.zig").WPARAM;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "LPOFNHOOKPROC")) { _ = LPOFNHOOKPROC; }
    if (@hasDecl(@This(), "LPCCHOOKPROC")) { _ = LPCCHOOKPROC; }
    if (@hasDecl(@This(), "LPFRHOOKPROC")) { _ = LPFRHOOKPROC; }
    if (@hasDecl(@This(), "LPCFHOOKPROC")) { _ = LPCFHOOKPROC; }
    if (@hasDecl(@This(), "LPPRINTHOOKPROC")) { _ = LPPRINTHOOKPROC; }
    if (@hasDecl(@This(), "LPSETUPHOOKPROC")) { _ = LPSETUPHOOKPROC; }
    if (@hasDecl(@This(), "LPPAGEPAINTHOOK")) { _ = LPPAGEPAINTHOOK; }
    if (@hasDecl(@This(), "LPPAGESETUPHOOK")) { _ = LPPAGESETUPHOOK; }

    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
