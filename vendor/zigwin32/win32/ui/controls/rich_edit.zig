//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (462)
//--------------------------------------------------------------------------------
pub const cchTextLimitDefault = @as(u32, 32767);
pub const MSFTEDIT_CLASS = "RICHEDIT50W";
pub const CERICHEDIT_CLASSA = "RichEditCEA";
pub const CERICHEDIT_CLASSW = "RichEditCEW";
pub const RICHEDIT_CLASSA = "RichEdit20A";
pub const RICHEDIT_CLASS10A = "RICHEDIT";
pub const RICHEDIT_CLASSW = "RichEdit20W";
pub const RICHEDIT_CLASS = "RichEdit20W";
pub const EM_CANPASTE = @as(u32, 1074);
pub const EM_DISPLAYBAND = @as(u32, 1075);
pub const EM_EXGETSEL = @as(u32, 1076);
pub const EM_EXLIMITTEXT = @as(u32, 1077);
pub const EM_EXLINEFROMCHAR = @as(u32, 1078);
pub const EM_EXSETSEL = @as(u32, 1079);
pub const EM_FINDTEXT = @as(u32, 1080);
pub const EM_FORMATRANGE = @as(u32, 1081);
pub const EM_GETCHARFORMAT = @as(u32, 1082);
pub const EM_GETEVENTMASK = @as(u32, 1083);
pub const EM_GETOLEINTERFACE = @as(u32, 1084);
pub const EM_GETPARAFORMAT = @as(u32, 1085);
pub const EM_GETSELTEXT = @as(u32, 1086);
pub const EM_HIDESELECTION = @as(u32, 1087);
pub const EM_PASTESPECIAL = @as(u32, 1088);
pub const EM_REQUESTRESIZE = @as(u32, 1089);
pub const EM_SELECTIONTYPE = @as(u32, 1090);
pub const EM_SETBKGNDCOLOR = @as(u32, 1091);
pub const EM_SETCHARFORMAT = @as(u32, 1092);
pub const EM_SETEVENTMASK = @as(u32, 1093);
pub const EM_SETOLECALLBACK = @as(u32, 1094);
pub const EM_SETPARAFORMAT = @as(u32, 1095);
pub const EM_SETTARGETDEVICE = @as(u32, 1096);
pub const EM_STREAMIN = @as(u32, 1097);
pub const EM_STREAMOUT = @as(u32, 1098);
pub const EM_GETTEXTRANGE = @as(u32, 1099);
pub const EM_FINDWORDBREAK = @as(u32, 1100);
pub const EM_SETOPTIONS = @as(u32, 1101);
pub const EM_GETOPTIONS = @as(u32, 1102);
pub const EM_FINDTEXTEX = @as(u32, 1103);
pub const EM_GETWORDBREAKPROCEX = @as(u32, 1104);
pub const EM_SETWORDBREAKPROCEX = @as(u32, 1105);
pub const EM_SETUNDOLIMIT = @as(u32, 1106);
pub const EM_REDO = @as(u32, 1108);
pub const EM_CANREDO = @as(u32, 1109);
pub const EM_GETUNDONAME = @as(u32, 1110);
pub const EM_GETREDONAME = @as(u32, 1111);
pub const EM_STOPGROUPTYPING = @as(u32, 1112);
pub const EM_SETTEXTMODE = @as(u32, 1113);
pub const EM_GETTEXTMODE = @as(u32, 1114);
pub const EM_AUTOURLDETECT = @as(u32, 1115);
pub const AURL_ENABLEURL = @as(u32, 1);
pub const AURL_ENABLEEMAILADDR = @as(u32, 2);
pub const AURL_ENABLETELNO = @as(u32, 4);
pub const AURL_ENABLEEAURLS = @as(u32, 8);
pub const AURL_ENABLEDRIVELETTERS = @as(u32, 16);
pub const AURL_DISABLEMIXEDLGC = @as(u32, 32);
pub const EM_GETAUTOURLDETECT = @as(u32, 1116);
pub const EM_SETPALETTE = @as(u32, 1117);
pub const EM_GETTEXTEX = @as(u32, 1118);
pub const EM_GETTEXTLENGTHEX = @as(u32, 1119);
pub const EM_SHOWSCROLLBAR = @as(u32, 1120);
pub const EM_SETTEXTEX = @as(u32, 1121);
pub const EM_SETPUNCTUATION = @as(u32, 1124);
pub const EM_GETPUNCTUATION = @as(u32, 1125);
pub const EM_SETWORDWRAPMODE = @as(u32, 1126);
pub const EM_GETWORDWRAPMODE = @as(u32, 1127);
pub const EM_SETIMECOLOR = @as(u32, 1128);
pub const EM_GETIMECOLOR = @as(u32, 1129);
pub const EM_SETIMEOPTIONS = @as(u32, 1130);
pub const EM_GETIMEOPTIONS = @as(u32, 1131);
pub const EM_CONVPOSITION = @as(u32, 1132);
pub const EM_SETLANGOPTIONS = @as(u32, 1144);
pub const EM_GETLANGOPTIONS = @as(u32, 1145);
pub const EM_GETIMECOMPMODE = @as(u32, 1146);
pub const EM_FINDTEXTW = @as(u32, 1147);
pub const EM_FINDTEXTEXW = @as(u32, 1148);
pub const EM_RECONVERSION = @as(u32, 1149);
pub const EM_SETIMEMODEBIAS = @as(u32, 1150);
pub const EM_GETIMEMODEBIAS = @as(u32, 1151);
pub const EM_SETBIDIOPTIONS = @as(u32, 1224);
pub const EM_GETBIDIOPTIONS = @as(u32, 1225);
pub const EM_SETTYPOGRAPHYOPTIONS = @as(u32, 1226);
pub const EM_GETTYPOGRAPHYOPTIONS = @as(u32, 1227);
pub const EM_SETEDITSTYLE = @as(u32, 1228);
pub const EM_GETEDITSTYLE = @as(u32, 1229);
pub const SES_EMULATESYSEDIT = @as(u32, 1);
pub const SES_BEEPONMAXTEXT = @as(u32, 2);
pub const SES_EXTENDBACKCOLOR = @as(u32, 4);
pub const SES_MAPCPS = @as(u32, 8);
pub const SES_HYPERLINKTOOLTIPS = @as(u32, 8);
pub const SES_EMULATE10 = @as(u32, 16);
pub const SES_DEFAULTLATINLIGA = @as(u32, 16);
pub const SES_USECRLF = @as(u32, 32);
pub const SES_NOFOCUSLINKNOTIFY = @as(u32, 32);
pub const SES_USEAIMM = @as(u32, 64);
pub const SES_NOIME = @as(u32, 128);
pub const SES_ALLOWBEEPS = @as(u32, 256);
pub const SES_UPPERCASE = @as(u32, 512);
pub const SES_LOWERCASE = @as(u32, 1024);
pub const SES_NOINPUTSEQUENCECHK = @as(u32, 2048);
pub const SES_BIDI = @as(u32, 4096);
pub const SES_SCROLLONKILLFOCUS = @as(u32, 8192);
pub const SES_XLTCRCRLFTOCR = @as(u32, 16384);
pub const SES_DRAFTMODE = @as(u32, 32768);
pub const SES_USECTF = @as(u32, 65536);
pub const SES_HIDEGRIDLINES = @as(u32, 131072);
pub const SES_USEATFONT = @as(u32, 262144);
pub const SES_CUSTOMLOOK = @as(u32, 524288);
pub const SES_LBSCROLLNOTIFY = @as(u32, 1048576);
pub const SES_CTFALLOWEMBED = @as(u32, 2097152);
pub const SES_CTFALLOWSMARTTAG = @as(u32, 4194304);
pub const SES_CTFALLOWPROOFING = @as(u32, 8388608);
pub const SES_LOGICALCARET = @as(u32, 16777216);
pub const SES_WORDDRAGDROP = @as(u32, 33554432);
pub const SES_SMARTDRAGDROP = @as(u32, 67108864);
pub const SES_MULTISELECT = @as(u32, 134217728);
pub const SES_CTFNOLOCK = @as(u32, 268435456);
pub const SES_NOEALINEHEIGHTADJUST = @as(u32, 536870912);
pub const SES_MAX = @as(u32, 536870912);
pub const IMF_AUTOKEYBOARD = @as(u32, 1);
pub const IMF_AUTOFONT = @as(u32, 2);
pub const IMF_IMECANCELCOMPLETE = @as(u32, 4);
pub const IMF_IMEALWAYSSENDNOTIFY = @as(u32, 8);
pub const IMF_AUTOFONTSIZEADJUST = @as(u32, 16);
pub const IMF_UIFONTS = @as(u32, 32);
pub const IMF_NOIMPLICITLANG = @as(u32, 64);
pub const IMF_DUALFONT = @as(u32, 128);
pub const IMF_NOKBDLIDFIXUP = @as(u32, 512);
pub const IMF_NORTFFONTSUBSTITUTE = @as(u32, 1024);
pub const IMF_SPELLCHECKING = @as(u32, 2048);
pub const IMF_TKBPREDICTION = @as(u32, 4096);
pub const IMF_IMEUIINTEGRATION = @as(u32, 8192);
pub const ICM_NOTOPEN = @as(u32, 0);
pub const ICM_LEVEL3 = @as(u32, 1);
pub const ICM_LEVEL2 = @as(u32, 2);
pub const ICM_LEVEL2_5 = @as(u32, 3);
pub const ICM_LEVEL2_SUI = @as(u32, 4);
pub const ICM_CTF = @as(u32, 5);
pub const TO_ADVANCEDTYPOGRAPHY = @as(u32, 1);
pub const TO_SIMPLELINEBREAK = @as(u32, 2);
pub const TO_DISABLECUSTOMTEXTOUT = @as(u32, 4);
pub const TO_ADVANCEDLAYOUT = @as(u32, 8);
pub const EM_OUTLINE = @as(u32, 1244);
pub const EM_GETSCROLLPOS = @as(u32, 1245);
pub const EM_SETSCROLLPOS = @as(u32, 1246);
pub const EM_SETFONTSIZE = @as(u32, 1247);
pub const EM_GETZOOM = @as(u32, 1248);
pub const EM_SETZOOM = @as(u32, 1249);
pub const EM_GETVIEWKIND = @as(u32, 1250);
pub const EM_SETVIEWKIND = @as(u32, 1251);
pub const EM_GETPAGE = @as(u32, 1252);
pub const EM_SETPAGE = @as(u32, 1253);
pub const EM_GETHYPHENATEINFO = @as(u32, 1254);
pub const EM_SETHYPHENATEINFO = @as(u32, 1255);
pub const EM_GETPAGEROTATE = @as(u32, 1259);
pub const EM_SETPAGEROTATE = @as(u32, 1260);
pub const EM_GETCTFMODEBIAS = @as(u32, 1261);
pub const EM_SETCTFMODEBIAS = @as(u32, 1262);
pub const EM_GETCTFOPENSTATUS = @as(u32, 1264);
pub const EM_SETCTFOPENSTATUS = @as(u32, 1265);
pub const EM_GETIMECOMPTEXT = @as(u32, 1266);
pub const EM_ISIME = @as(u32, 1267);
pub const EM_GETIMEPROPERTY = @as(u32, 1268);
pub const EM_GETQUERYRTFOBJ = @as(u32, 1293);
pub const EM_SETQUERYRTFOBJ = @as(u32, 1294);
pub const EPR_0 = @as(u32, 0);
pub const EPR_270 = @as(u32, 1);
pub const EPR_180 = @as(u32, 2);
pub const EPR_90 = @as(u32, 3);
pub const EPR_SE = @as(u32, 5);
pub const CTFMODEBIAS_DEFAULT = @as(u32, 0);
pub const CTFMODEBIAS_FILENAME = @as(u32, 1);
pub const CTFMODEBIAS_NAME = @as(u32, 2);
pub const CTFMODEBIAS_READING = @as(u32, 3);
pub const CTFMODEBIAS_DATETIME = @as(u32, 4);
pub const CTFMODEBIAS_CONVERSATION = @as(u32, 5);
pub const CTFMODEBIAS_NUMERIC = @as(u32, 6);
pub const CTFMODEBIAS_HIRAGANA = @as(u32, 7);
pub const CTFMODEBIAS_KATAKANA = @as(u32, 8);
pub const CTFMODEBIAS_HANGUL = @as(u32, 9);
pub const CTFMODEBIAS_HALFWIDTHKATAKANA = @as(u32, 10);
pub const CTFMODEBIAS_FULLWIDTHALPHANUMERIC = @as(u32, 11);
pub const CTFMODEBIAS_HALFWIDTHALPHANUMERIC = @as(u32, 12);
pub const IMF_SMODE_PLAURALCLAUSE = @as(u32, 1);
pub const IMF_SMODE_NONE = @as(u32, 2);
pub const EMO_EXIT = @as(u32, 0);
pub const EMO_ENTER = @as(u32, 1);
pub const EMO_PROMOTE = @as(u32, 2);
pub const EMO_EXPAND = @as(u32, 3);
pub const EMO_MOVESELECTION = @as(u32, 4);
pub const EMO_GETVIEWMODE = @as(u32, 5);
pub const EMO_EXPANDSELECTION = @as(u32, 0);
pub const EMO_EXPANDDOCUMENT = @as(u32, 1);
pub const VM_NORMAL = @as(u32, 4);
pub const VM_OUTLINE = @as(u32, 2);
pub const VM_PAGE = @as(u32, 9);
pub const EM_INSERTTABLE = @as(u32, 1256);
pub const EM_GETAUTOCORRECTPROC = @as(u32, 1257);
pub const EM_SETAUTOCORRECTPROC = @as(u32, 1258);
pub const EM_CALLAUTOCORRECTPROC = @as(u32, 1279);
pub const ATP_NOCHANGE = @as(u32, 0);
pub const ATP_CHANGE = @as(u32, 1);
pub const ATP_NODELIMITER = @as(u32, 2);
pub const ATP_REPLACEALLTEXT = @as(u32, 4);
pub const EM_GETTABLEPARMS = @as(u32, 1289);
pub const EM_SETEDITSTYLEEX = @as(u32, 1299);
pub const EM_GETEDITSTYLEEX = @as(u32, 1300);
pub const SES_EX_NOTABLE = @as(u32, 4);
pub const SES_EX_NOMATH = @as(u32, 64);
pub const SES_EX_HANDLEFRIENDLYURL = @as(u32, 256);
pub const SES_EX_NOTHEMING = @as(u32, 524288);
pub const SES_EX_NOACETATESELECTION = @as(u32, 1048576);
pub const SES_EX_USESINGLELINE = @as(u32, 2097152);
pub const SES_EX_MULTITOUCH = @as(u32, 134217728);
pub const SES_EX_HIDETEMPFORMAT = @as(u32, 268435456);
pub const SES_EX_USEMOUSEWPARAM = @as(u32, 536870912);
pub const EM_GETSTORYTYPE = @as(u32, 1314);
pub const EM_SETSTORYTYPE = @as(u32, 1315);
pub const EM_GETELLIPSISMODE = @as(u32, 1329);
pub const EM_SETELLIPSISMODE = @as(u32, 1330);
pub const ELLIPSIS_MASK = @as(u32, 3);
pub const ELLIPSIS_NONE = @as(u32, 0);
pub const ELLIPSIS_END = @as(u32, 1);
pub const ELLIPSIS_WORD = @as(u32, 3);
pub const EM_SETTABLEPARMS = @as(u32, 1331);
pub const EM_GETTOUCHOPTIONS = @as(u32, 1334);
pub const EM_SETTOUCHOPTIONS = @as(u32, 1335);
pub const EM_INSERTIMAGE = @as(u32, 1338);
pub const EM_SETUIANAME = @as(u32, 1344);
pub const EM_GETELLIPSISSTATE = @as(u32, 1346);
pub const RTO_SHOWHANDLES = @as(u32, 1);
pub const RTO_DISABLEHANDLES = @as(u32, 2);
pub const RTO_READINGMODE = @as(u32, 3);
pub const EN_MSGFILTER = @as(u32, 1792);
pub const EN_REQUESTRESIZE = @as(u32, 1793);
pub const EN_SELCHANGE = @as(u32, 1794);
pub const EN_DROPFILES = @as(u32, 1795);
pub const EN_PROTECTED = @as(u32, 1796);
pub const EN_CORRECTTEXT = @as(u32, 1797);
pub const EN_STOPNOUNDO = @as(u32, 1798);
pub const EN_IMECHANGE = @as(u32, 1799);
pub const EN_SAVECLIPBOARD = @as(u32, 1800);
pub const EN_OLEOPFAILED = @as(u32, 1801);
pub const EN_OBJECTPOSITIONS = @as(u32, 1802);
pub const EN_LINK = @as(u32, 1803);
pub const EN_DRAGDROPDONE = @as(u32, 1804);
pub const EN_PARAGRAPHEXPANDED = @as(u32, 1805);
pub const EN_PAGECHANGE = @as(u32, 1806);
pub const EN_LOWFIRTF = @as(u32, 1807);
pub const EN_ALIGNLTR = @as(u32, 1808);
pub const EN_ALIGNRTL = @as(u32, 1809);
pub const EN_CLIPFORMAT = @as(u32, 1810);
pub const EN_STARTCOMPOSITION = @as(u32, 1811);
pub const EN_ENDCOMPOSITION = @as(u32, 1812);
pub const ENM_NONE = @as(u32, 0);
pub const ENM_CHANGE = @as(u32, 1);
pub const ENM_UPDATE = @as(u32, 2);
pub const ENM_SCROLL = @as(u32, 4);
pub const ENM_SCROLLEVENTS = @as(u32, 8);
pub const ENM_DRAGDROPDONE = @as(u32, 16);
pub const ENM_PARAGRAPHEXPANDED = @as(u32, 32);
pub const ENM_PAGECHANGE = @as(u32, 64);
pub const ENM_CLIPFORMAT = @as(u32, 128);
pub const ENM_KEYEVENTS = @as(u32, 65536);
pub const ENM_MOUSEEVENTS = @as(u32, 131072);
pub const ENM_REQUESTRESIZE = @as(u32, 262144);
pub const ENM_SELCHANGE = @as(u32, 524288);
pub const ENM_DROPFILES = @as(u32, 1048576);
pub const ENM_PROTECTED = @as(u32, 2097152);
pub const ENM_CORRECTTEXT = @as(u32, 4194304);
pub const ENM_IMECHANGE = @as(u32, 8388608);
pub const ENM_LANGCHANGE = @as(u32, 16777216);
pub const ENM_OBJECTPOSITIONS = @as(u32, 33554432);
pub const ENM_LINK = @as(u32, 67108864);
pub const ENM_LOWFIRTF = @as(u32, 134217728);
pub const ENM_STARTCOMPOSITION = @as(u32, 268435456);
pub const ENM_ENDCOMPOSITION = @as(u32, 536870912);
pub const ENM_GROUPTYPINGCHANGE = @as(u32, 1073741824);
pub const ENM_HIDELINKTOOLTIP = @as(u32, 2147483648);
pub const ES_SAVESEL = @as(u32, 32768);
pub const ES_SUNKEN = @as(u32, 16384);
pub const ES_DISABLENOSCROLL = @as(u32, 8192);
pub const ES_SELECTIONBAR = @as(u32, 16777216);
pub const ES_NOOLEDRAGDROP = @as(u32, 8);
pub const ES_EX_NOCALLOLEINIT = @as(u32, 0);
pub const ES_VERTICAL = @as(u32, 4194304);
pub const ES_NOIME = @as(u32, 524288);
pub const ES_SELFIME = @as(u32, 262144);
pub const ECO_AUTOWORDSELECTION = @as(u32, 1);
pub const ECO_AUTOVSCROLL = @as(u32, 64);
pub const ECO_AUTOHSCROLL = @as(u32, 128);
pub const ECO_NOHIDESEL = @as(u32, 256);
pub const ECO_READONLY = @as(u32, 2048);
pub const ECO_WANTRETURN = @as(u32, 4096);
pub const ECO_SAVESEL = @as(u32, 32768);
pub const ECO_SELECTIONBAR = @as(u32, 16777216);
pub const ECO_VERTICAL = @as(u32, 4194304);
pub const ECOOP_SET = @as(u32, 1);
pub const ECOOP_OR = @as(u32, 2);
pub const ECOOP_AND = @as(u32, 3);
pub const ECOOP_XOR = @as(u32, 4);
pub const WB_MOVEWORDPREV = @as(u32, 4);
pub const WB_MOVEWORDNEXT = @as(u32, 5);
pub const WB_PREVBREAK = @as(u32, 6);
pub const WB_NEXTBREAK = @as(u32, 7);
pub const PC_FOLLOWING = @as(u32, 1);
pub const PC_LEADING = @as(u32, 2);
pub const PC_OVERFLOW = @as(u32, 3);
pub const PC_DELIMITER = @as(u32, 4);
pub const WBF_WORDWRAP = @as(u32, 16);
pub const WBF_WORDBREAK = @as(u32, 32);
pub const WBF_OVERFLOW = @as(u32, 64);
pub const WBF_LEVEL1 = @as(u32, 128);
pub const WBF_LEVEL2 = @as(u32, 256);
pub const WBF_CUSTOM = @as(u32, 512);
pub const IMF_FORCENONE = @as(u32, 1);
pub const IMF_FORCEENABLE = @as(u32, 2);
pub const IMF_FORCEDISABLE = @as(u32, 4);
pub const IMF_CLOSESTATUSWINDOW = @as(u32, 8);
pub const IMF_VERTICAL = @as(u32, 32);
pub const IMF_FORCEACTIVE = @as(u32, 64);
pub const IMF_FORCEINACTIVE = @as(u32, 128);
pub const IMF_FORCEREMEMBER = @as(u32, 256);
pub const IMF_MULTIPLEEDIT = @as(u32, 1024);
pub const yHeightCharPtsMost = @as(u32, 1638);
pub const SCF_SELECTION = @as(u32, 1);
pub const SCF_WORD = @as(u32, 2);
pub const SCF_DEFAULT = @as(u32, 0);
pub const SCF_ALL = @as(u32, 4);
pub const SCF_USEUIRULES = @as(u32, 8);
pub const SCF_ASSOCIATEFONT = @as(u32, 16);
pub const SCF_NOKBUPDATE = @as(u32, 32);
pub const SCF_ASSOCIATEFONT2 = @as(u32, 64);
pub const SCF_SMARTFONT = @as(u32, 128);
pub const SCF_CHARREPFROMLCID = @as(u32, 256);
pub const SPF_DONTSETDEFAULT = @as(u32, 2);
pub const SPF_SETDEFAULT = @as(u32, 4);
pub const SF_TEXT = @as(u32, 1);
pub const SF_RTF = @as(u32, 2);
pub const SF_RTFNOOBJS = @as(u32, 3);
pub const SF_TEXTIZED = @as(u32, 4);
pub const SF_UNICODE = @as(u32, 16);
pub const SF_USECODEPAGE = @as(u32, 32);
pub const SF_NCRFORNONASCII = @as(u32, 64);
pub const SFF_WRITEXTRAPAR = @as(u32, 128);
pub const SFF_SELECTION = @as(u32, 32768);
pub const SFF_PLAINRTF = @as(u32, 16384);
pub const SFF_PERSISTVIEWSCALE = @as(u32, 8192);
pub const SFF_KEEPDOCINFO = @as(u32, 4096);
pub const SFF_PWD = @as(u32, 2048);
pub const SF_RTFVAL = @as(u32, 1792);
pub const MAX_TAB_STOPS = @as(u32, 32);
pub const lDefaultTab = @as(u32, 720);
pub const MAX_TABLE_CELLS = @as(u32, 63);
pub const PFM_SPACEBEFORE = @as(u32, 64);
pub const PFM_SPACEAFTER = @as(u32, 128);
pub const PFM_LINESPACING = @as(u32, 256);
pub const PFM_STYLE = @as(u32, 1024);
pub const PFM_BORDER = @as(u32, 2048);
pub const PFM_SHADING = @as(u32, 4096);
pub const PFM_NUMBERINGSTYLE = @as(u32, 8192);
pub const PFM_NUMBERINGTAB = @as(u32, 16384);
pub const PFM_NUMBERINGSTART = @as(u32, 32768);
pub const PFM_KEEP = @as(u32, 131072);
pub const PFM_KEEPNEXT = @as(u32, 262144);
pub const PFM_PAGEBREAKBEFORE = @as(u32, 524288);
pub const PFM_NOLINENUMBER = @as(u32, 1048576);
pub const PFM_NOWIDOWCONTROL = @as(u32, 2097152);
pub const PFM_DONOTHYPHEN = @as(u32, 4194304);
pub const PFM_SIDEBYSIDE = @as(u32, 8388608);
pub const PFM_COLLAPSED = @as(u32, 16777216);
pub const PFM_OUTLINELEVEL = @as(u32, 33554432);
pub const PFM_BOX = @as(u32, 67108864);
pub const PFM_RESERVED2 = @as(u32, 134217728);
pub const PFM_TABLEROWDELIMITER = @as(u32, 268435456);
pub const PFM_TEXTWRAPPINGBREAK = @as(u32, 536870912);
pub const PFM_TABLE = @as(u32, 1073741824);
pub const PFN_BULLET = @as(u32, 1);
pub const PFN_ARABIC = @as(u32, 2);
pub const PFN_LCLETTER = @as(u32, 3);
pub const PFN_UCLETTER = @as(u32, 4);
pub const PFN_LCROMAN = @as(u32, 5);
pub const PFN_UCROMAN = @as(u32, 6);
pub const PFA_JUSTIFY = @as(u32, 4);
pub const PFA_FULL_INTERWORD = @as(u32, 4);
pub const GCMF_GRIPPER = @as(u32, 1);
pub const GCMF_SPELLING = @as(u32, 2);
pub const GCMF_TOUCHMENU = @as(u32, 16384);
pub const GCMF_MOUSEMENU = @as(u32, 8192);
pub const OLEOP_DOVERB = @as(u32, 1);
pub const CF_RTF = "Rich Text Format";
pub const CF_RTFNOOBJS = "Rich Text Format Without Objects";
pub const CF_RETEXTOBJ = "RichEdit Text and Objects";
pub const ST_DEFAULT = @as(u32, 0);
pub const ST_KEEPUNDO = @as(u32, 1);
pub const ST_SELECTION = @as(u32, 2);
pub const ST_NEWCHARS = @as(u32, 4);
pub const ST_UNICODE = @as(u32, 8);
pub const BOM_DEFPARADIR = @as(u32, 1);
pub const BOM_PLAINTEXT = @as(u32, 2);
pub const BOM_NEUTRALOVERRIDE = @as(u32, 4);
pub const BOM_CONTEXTREADING = @as(u32, 8);
pub const BOM_CONTEXTALIGNMENT = @as(u32, 16);
pub const BOM_LEGACYBIDICLASS = @as(u32, 64);
pub const BOM_UNICODEBIDI = @as(u32, 128);
pub const BOE_RTLDIR = @as(u32, 1);
pub const BOE_PLAINTEXT = @as(u32, 2);
pub const BOE_NEUTRALOVERRIDE = @as(u32, 4);
pub const BOE_CONTEXTREADING = @as(u32, 8);
pub const BOE_CONTEXTALIGNMENT = @as(u32, 16);
pub const BOE_FORCERECALC = @as(u32, 32);
pub const BOE_LEGACYBIDICLASS = @as(u32, 64);
pub const BOE_UNICODEBIDI = @as(u32, 128);
pub const FR_MATCHDIAC = @as(u32, 536870912);
pub const FR_MATCHKASHIDA = @as(u32, 1073741824);
pub const FR_MATCHALEFHAMZA = @as(u32, 2147483648);
pub const RICHEDIT60_CLASS = "RICHEDIT60W";
pub const PFA_FULL_NEWSPAPER = @as(u32, 5);
pub const PFA_FULL_INTERLETTER = @as(u32, 6);
pub const PFA_FULL_SCALED = @as(u32, 7);
pub const PFA_FULL_GLYPHS = @as(u32, 8);
pub const AURL_ENABLEEA = @as(u32, 1);
pub const GCM_TOUCHMENU = @as(u32, 16384);
pub const GCM_MOUSEMENU = @as(u32, 8192);
pub const S_MSG_KEY_IGNORED = @import("../../zig.zig").typedConst(HRESULT, @as(i32, 262657));
pub const TXTBIT_RICHTEXT = @as(u32, 1);
pub const TXTBIT_MULTILINE = @as(u32, 2);
pub const TXTBIT_READONLY = @as(u32, 4);
pub const TXTBIT_SHOWACCELERATOR = @as(u32, 8);
pub const TXTBIT_USEPASSWORD = @as(u32, 16);
pub const TXTBIT_HIDESELECTION = @as(u32, 32);
pub const TXTBIT_SAVESELECTION = @as(u32, 64);
pub const TXTBIT_AUTOWORDSEL = @as(u32, 128);
pub const TXTBIT_VERTICAL = @as(u32, 256);
pub const TXTBIT_SELBARCHANGE = @as(u32, 512);
pub const TXTBIT_WORDWRAP = @as(u32, 1024);
pub const TXTBIT_ALLOWBEEP = @as(u32, 2048);
pub const TXTBIT_DISABLEDRAG = @as(u32, 4096);
pub const TXTBIT_VIEWINSETCHANGE = @as(u32, 8192);
pub const TXTBIT_BACKSTYLECHANGE = @as(u32, 16384);
pub const TXTBIT_MAXLENGTHCHANGE = @as(u32, 32768);
pub const TXTBIT_SCROLLBARCHANGE = @as(u32, 65536);
pub const TXTBIT_CHARFORMATCHANGE = @as(u32, 131072);
pub const TXTBIT_PARAFORMATCHANGE = @as(u32, 262144);
pub const TXTBIT_EXTENTCHANGE = @as(u32, 524288);
pub const TXTBIT_CLIENTRECTCHANGE = @as(u32, 1048576);
pub const TXTBIT_USECURRENTBKG = @as(u32, 2097152);
pub const TXTBIT_NOTHREADREFCOUNT = @as(u32, 4194304);
pub const TXTBIT_SHOWPASSWORD = @as(u32, 8388608);
pub const TXTBIT_D2DDWRITE = @as(u32, 16777216);
pub const TXTBIT_D2DSIMPLETYPOGRAPHY = @as(u32, 33554432);
pub const TXTBIT_D2DPIXELSNAPPED = @as(u32, 67108864);
pub const TXTBIT_D2DSUBPIXELLINES = @as(u32, 134217728);
pub const TXTBIT_FLASHLASTPASSWORDCHAR = @as(u32, 268435456);
pub const TXTBIT_ADVANCEDINPUT = @as(u32, 536870912);
pub const TXES_ISDIALOG = @as(u32, 1);
pub const REO_NULL = @as(i32, 0);
pub const REO_READWRITEMASK = @as(i32, 2047);
pub const RECO_PASTE = @as(i32, 0);
pub const RECO_DROP = @as(i32, 1);
pub const RECO_COPY = @as(i32, 2);
pub const RECO_CUT = @as(i32, 3);
pub const RECO_DRAG = @as(i32, 4);

//--------------------------------------------------------------------------------
// Section: Types (101)
//--------------------------------------------------------------------------------
pub const CFM_MASK = packed struct(u32) {
    BOLD: u1 = 0,
    ITALIC: u1 = 0,
    UNDERLINE: u1 = 0,
    STRIKEOUT: u1 = 0,
    PROTECTED: u1 = 0,
    LINK: u1 = 0,
    SMALLCAPS: u1 = 0,
    ALLCAPS: u1 = 0,
    HIDDEN: u1 = 0,
    OUTLINE: u1 = 0,
    SHADOW: u1 = 0,
    EMBOSS: u1 = 0,
    IMPRINT: u1 = 0,
    DISABLED: u1 = 0,
    REVISED: u1 = 0,
    REVAUTHOR: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    ANIMATION: u1 = 0,
    STYLE: u1 = 0,
    KERNING: u1 = 0,
    SPACING: u1 = 0,
    WEIGHT: u1 = 0,
    UNDERLINETYPE: u1 = 0,
    COOKIE: u1 = 0,
    LCID: u1 = 0,
    BACKCOLOR: u1 = 0,
    CHARSET: u1 = 0,
    OFFSET: u1 = 0,
    FACE: u1 = 0,
    COLOR: u1 = 0,
    SIZE: u1 = 0,
    // FONTBOUND (bit index 20) conflicts with KERNING
    // LINKPROTECTED (bit index 23) conflicts with UNDERLINETYPE
    // EXTENDED (bit index 25) conflicts with LCID
    // MATHNOBUILDUP (bit index 27) conflicts with CHARSET
    // MATH (bit index 28) conflicts with OFFSET
    // MATHORDINARY (bit index 29) conflicts with FACE
};
pub const CFM_SUBSCRIPT = CFM_MASK{
    ._16 = 1,
    ._17 = 1,
};
pub const CFM_SUPERSCRIPT = CFM_MASK{
    ._16 = 1,
    ._17 = 1,
};
pub const CFM_EFFECTS = CFM_MASK{
    .BOLD = 1,
    .ITALIC = 1,
    .UNDERLINE = 1,
    .STRIKEOUT = 1,
    .PROTECTED = 1,
    .LINK = 1,
    .COLOR = 1,
};
pub const CFM_ALL = CFM_MASK{
    .BOLD = 1,
    .ITALIC = 1,
    .UNDERLINE = 1,
    .STRIKEOUT = 1,
    .PROTECTED = 1,
    .LINK = 1,
    .CHARSET = 1,
    .OFFSET = 1,
    .FACE = 1,
    .COLOR = 1,
    .SIZE = 1,
};
pub const CFM_BOLD = CFM_MASK{ .BOLD = 1 };
pub const CFM_CHARSET = CFM_MASK{ .CHARSET = 1 };
pub const CFM_COLOR = CFM_MASK{ .COLOR = 1 };
pub const CFM_FACE = CFM_MASK{ .FACE = 1 };
pub const CFM_ITALIC = CFM_MASK{ .ITALIC = 1 };
pub const CFM_OFFSET = CFM_MASK{ .OFFSET = 1 };
pub const CFM_PROTECTED = CFM_MASK{ .PROTECTED = 1 };
pub const CFM_SIZE = CFM_MASK{ .SIZE = 1 };
pub const CFM_STRIKEOUT = CFM_MASK{ .STRIKEOUT = 1 };
pub const CFM_UNDERLINE = CFM_MASK{ .UNDERLINE = 1 };
pub const CFM_LINK = CFM_MASK{ .LINK = 1 };
pub const CFM_SMALLCAPS = CFM_MASK{ .SMALLCAPS = 1 };
pub const CFM_ALLCAPS = CFM_MASK{ .ALLCAPS = 1 };
pub const CFM_HIDDEN = CFM_MASK{ .HIDDEN = 1 };
pub const CFM_OUTLINE = CFM_MASK{ .OUTLINE = 1 };
pub const CFM_SHADOW = CFM_MASK{ .SHADOW = 1 };
pub const CFM_EMBOSS = CFM_MASK{ .EMBOSS = 1 };
pub const CFM_IMPRINT = CFM_MASK{ .IMPRINT = 1 };
pub const CFM_DISABLED = CFM_MASK{ .DISABLED = 1 };
pub const CFM_REVISED = CFM_MASK{ .REVISED = 1 };
pub const CFM_REVAUTHOR = CFM_MASK{ .REVAUTHOR = 1 };
pub const CFM_ANIMATION = CFM_MASK{ .ANIMATION = 1 };
pub const CFM_STYLE = CFM_MASK{ .STYLE = 1 };
pub const CFM_KERNING = CFM_MASK{ .KERNING = 1 };
pub const CFM_SPACING = CFM_MASK{ .SPACING = 1 };
pub const CFM_WEIGHT = CFM_MASK{ .WEIGHT = 1 };
pub const CFM_UNDERLINETYPE = CFM_MASK{ .UNDERLINETYPE = 1 };
pub const CFM_COOKIE = CFM_MASK{ .COOKIE = 1 };
pub const CFM_LCID = CFM_MASK{ .LCID = 1 };
pub const CFM_BACKCOLOR = CFM_MASK{ .BACKCOLOR = 1 };
pub const CFM_EFFECTS2 = CFM_MASK{
    .BOLD = 1,
    .ITALIC = 1,
    .UNDERLINE = 1,
    .STRIKEOUT = 1,
    .PROTECTED = 1,
    .LINK = 1,
    .SMALLCAPS = 1,
    .ALLCAPS = 1,
    .HIDDEN = 1,
    .OUTLINE = 1,
    .SHADOW = 1,
    .EMBOSS = 1,
    .IMPRINT = 1,
    .DISABLED = 1,
    .REVISED = 1,
    ._16 = 1,
    ._17 = 1,
    .BACKCOLOR = 1,
    .COLOR = 1,
};
pub const CFM_ALL2 = CFM_MASK{
    .BOLD = 1,
    .ITALIC = 1,
    .UNDERLINE = 1,
    .STRIKEOUT = 1,
    .PROTECTED = 1,
    .LINK = 1,
    .SMALLCAPS = 1,
    .ALLCAPS = 1,
    .HIDDEN = 1,
    .OUTLINE = 1,
    .SHADOW = 1,
    .EMBOSS = 1,
    .IMPRINT = 1,
    .DISABLED = 1,
    .REVISED = 1,
    .REVAUTHOR = 1,
    ._16 = 1,
    ._17 = 1,
    .ANIMATION = 1,
    .STYLE = 1,
    .KERNING = 1,
    .SPACING = 1,
    .WEIGHT = 1,
    .UNDERLINETYPE = 1,
    .COOKIE = 1,
    .LCID = 1,
    .BACKCOLOR = 1,
    .CHARSET = 1,
    .OFFSET = 1,
    .FACE = 1,
    .COLOR = 1,
    .SIZE = 1,
};
pub const CFM_FONTBOUND = CFM_MASK{ .KERNING = 1 };
pub const CFM_LINKPROTECTED = CFM_MASK{ .UNDERLINETYPE = 1 };
pub const CFM_EXTENDED = CFM_MASK{ .LCID = 1 };
pub const CFM_MATHNOBUILDUP = CFM_MASK{ .CHARSET = 1 };
pub const CFM_MATH = CFM_MASK{ .OFFSET = 1 };
pub const CFM_MATHORDINARY = CFM_MASK{ .FACE = 1 };
pub const CFM_ALLEFFECTS = CFM_MASK{
    .BOLD = 1,
    .ITALIC = 1,
    .UNDERLINE = 1,
    .STRIKEOUT = 1,
    .PROTECTED = 1,
    .LINK = 1,
    .SMALLCAPS = 1,
    .ALLCAPS = 1,
    .HIDDEN = 1,
    .OUTLINE = 1,
    .SHADOW = 1,
    .EMBOSS = 1,
    .IMPRINT = 1,
    .DISABLED = 1,
    .REVISED = 1,
    ._16 = 1,
    ._17 = 1,
    .KERNING = 1,
    .LCID = 1,
    .BACKCOLOR = 1,
    .CHARSET = 1,
    .OFFSET = 1,
    .FACE = 1,
    .COLOR = 1,
};

pub const CFE_EFFECTS = packed struct(u32) {
    BOLD: u1 = 0,
    ITALIC: u1 = 0,
    UNDERLINE: u1 = 0,
    STRIKEOUT: u1 = 0,
    PROTECTED: u1 = 0,
    LINK: u1 = 0,
    SMALLCAPS: u1 = 0,
    ALLCAPS: u1 = 0,
    HIDDEN: u1 = 0,
    OUTLINE: u1 = 0,
    SHADOW: u1 = 0,
    EMBOSS: u1 = 0,
    IMPRINT: u1 = 0,
    DISABLED: u1 = 0,
    REVISED: u1 = 0,
    _15: u1 = 0,
    SUBSCRIPT: u1 = 0,
    SUPERSCRIPT: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    FONTBOUND: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    LINKPROTECTED: u1 = 0,
    _24: u1 = 0,
    EXTENDED: u1 = 0,
    AUTOBACKCOLOR: u1 = 0,
    MATHNOBUILDUP: u1 = 0,
    MATH: u1 = 0,
    MATHORDINARY: u1 = 0,
    AUTOCOLOR: u1 = 0,
    _31: u1 = 0,
};
// TODO: enum 'CFE_EFFECTS' has known issues with its value aliases

pub const PARAFORMAT_MASK = packed struct(u32) {
    STARTINDENT: u1 = 0,
    RIGHTINDENT: u1 = 0,
    OFFSET: u1 = 0,
    ALIGNMENT: u1 = 0,
    TABSTOPS: u1 = 0,
    NUMBERING: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    RTLPARA: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    OFFSETINDENT: u1 = 0,
};
pub const PFM_ALIGNMENT = PARAFORMAT_MASK{ .ALIGNMENT = 1 };
pub const PFM_NUMBERING = PARAFORMAT_MASK{ .NUMBERING = 1 };
pub const PFM_OFFSET = PARAFORMAT_MASK{ .OFFSET = 1 };
pub const PFM_OFFSETINDENT = PARAFORMAT_MASK{ .OFFSETINDENT = 1 };
pub const PFM_RIGHTINDENT = PARAFORMAT_MASK{ .RIGHTINDENT = 1 };
pub const PFM_RTLPARA = PARAFORMAT_MASK{ .RTLPARA = 1 };
pub const PFM_STARTINDENT = PARAFORMAT_MASK{ .STARTINDENT = 1 };
pub const PFM_TABSTOPS = PARAFORMAT_MASK{ .TABSTOPS = 1 };

pub const RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE = packed struct(u16) {
    SEL_TEXT: u1 = 0,
    SEL_OBJECT: u1 = 0,
    SEL_MULTICHAR: u1 = 0,
    SEL_MULTIOBJECT: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    GCM_RIGHTMOUSEDROP: u1 = 0,
};
pub const SEL_EMPTY = RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE{ };
pub const SEL_TEXT = RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE{ .SEL_TEXT = 1 };
pub const SEL_OBJECT = RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE{ .SEL_OBJECT = 1 };
pub const SEL_MULTICHAR = RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE{ .SEL_MULTICHAR = 1 };
pub const SEL_MULTIOBJECT = RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE{ .SEL_MULTIOBJECT = 1 };
pub const GCM_RIGHTMOUSEDROP = RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE{ .GCM_RIGHTMOUSEDROP = 1 };

pub const RICH_EDIT_GET_OBJECT_FLAGS = packed struct(u32) {
    POLEOBJ: u1 = 0,
    PSTG: u1 = 0,
    POLESITE: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const REO_GETOBJ_POLEOBJ = RICH_EDIT_GET_OBJECT_FLAGS{ .POLEOBJ = 1 };
pub const REO_GETOBJ_PSTG = RICH_EDIT_GET_OBJECT_FLAGS{ .PSTG = 1 };
pub const REO_GETOBJ_POLESITE = RICH_EDIT_GET_OBJECT_FLAGS{ .POLESITE = 1 };
pub const REO_GETOBJ_NO_INTERFACES = RICH_EDIT_GET_OBJECT_FLAGS{ };
pub const REO_GETOBJ_ALL_INTERFACES = RICH_EDIT_GET_OBJECT_FLAGS{
    .POLEOBJ = 1,
    .PSTG = 1,
    .POLESITE = 1,
};

pub const PARAFORMAT_BORDERS = packed struct(u16) {
    LEFT: u1 = 0,
    RIGHT: u1 = 0,
    TOP: u1 = 0,
    BOTTOM: u1 = 0,
    INSIDE: u1 = 0,
    OUTSIDE: u1 = 0,
    AUTOCOLOR: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
};
pub const PARAFORMAT_BORDERS_LEFT = PARAFORMAT_BORDERS{ .LEFT = 1 };
pub const PARAFORMAT_BORDERS_RIGHT = PARAFORMAT_BORDERS{ .RIGHT = 1 };
pub const PARAFORMAT_BORDERS_TOP = PARAFORMAT_BORDERS{ .TOP = 1 };
pub const PARAFORMAT_BORDERS_BOTTOM = PARAFORMAT_BORDERS{ .BOTTOM = 1 };
pub const PARAFORMAT_BORDERS_INSIDE = PARAFORMAT_BORDERS{ .INSIDE = 1 };
pub const PARAFORMAT_BORDERS_OUTSIDE = PARAFORMAT_BORDERS{ .OUTSIDE = 1 };
pub const PARAFORMAT_BORDERS_AUTOCOLOR = PARAFORMAT_BORDERS{ .AUTOCOLOR = 1 };

pub const PARAFORMAT_SHADING_STYLE = enum(u16) {
    NONE = 0,
    DARK_HORIZ = 1,
    DARK_VERT = 2,
    DARK_DOWN_DIAG = 3,
    DARK_UP_DIAG = 4,
    DARK_GRID = 5,
    DARK_TRELLIS = 6,
    LIGHT_HORZ = 7,
    LIGHT_VERT = 8,
    LIGHT_DOWN_DIAG = 9,
    LIGHT_UP_DIAG = 10,
    LIGHT_GRID = 11,
    LIGHT_TRELLIS = 12,
};
pub const PARAFORMAT_SHADING_STYLE_NONE = PARAFORMAT_SHADING_STYLE.NONE;
pub const PARAFORMAT_SHADING_STYLE_DARK_HORIZ = PARAFORMAT_SHADING_STYLE.DARK_HORIZ;
pub const PARAFORMAT_SHADING_STYLE_DARK_VERT = PARAFORMAT_SHADING_STYLE.DARK_VERT;
pub const PARAFORMAT_SHADING_STYLE_DARK_DOWN_DIAG = PARAFORMAT_SHADING_STYLE.DARK_DOWN_DIAG;
pub const PARAFORMAT_SHADING_STYLE_DARK_UP_DIAG = PARAFORMAT_SHADING_STYLE.DARK_UP_DIAG;
pub const PARAFORMAT_SHADING_STYLE_DARK_GRID = PARAFORMAT_SHADING_STYLE.DARK_GRID;
pub const PARAFORMAT_SHADING_STYLE_DARK_TRELLIS = PARAFORMAT_SHADING_STYLE.DARK_TRELLIS;
pub const PARAFORMAT_SHADING_STYLE_LIGHT_HORZ = PARAFORMAT_SHADING_STYLE.LIGHT_HORZ;
pub const PARAFORMAT_SHADING_STYLE_LIGHT_VERT = PARAFORMAT_SHADING_STYLE.LIGHT_VERT;
pub const PARAFORMAT_SHADING_STYLE_LIGHT_DOWN_DIAG = PARAFORMAT_SHADING_STYLE.LIGHT_DOWN_DIAG;
pub const PARAFORMAT_SHADING_STYLE_LIGHT_UP_DIAG = PARAFORMAT_SHADING_STYLE.LIGHT_UP_DIAG;
pub const PARAFORMAT_SHADING_STYLE_LIGHT_GRID = PARAFORMAT_SHADING_STYLE.LIGHT_GRID;
pub const PARAFORMAT_SHADING_STYLE_LIGHT_TRELLIS = PARAFORMAT_SHADING_STYLE.LIGHT_TRELLIS;

pub const GETTEXTEX_FLAGS = enum(u32) {
    DEFAULT = 0,
    NOHIDDENTEXT = 8,
    RAWTEXT = 4,
    SELECTION = 2,
    USECRLF = 1,
};
pub const GT_DEFAULT = GETTEXTEX_FLAGS.DEFAULT;
pub const GT_NOHIDDENTEXT = GETTEXTEX_FLAGS.NOHIDDENTEXT;
pub const GT_RAWTEXT = GETTEXTEX_FLAGS.RAWTEXT;
pub const GT_SELECTION = GETTEXTEX_FLAGS.SELECTION;
pub const GT_USECRLF = GETTEXTEX_FLAGS.USECRLF;

pub const ENDCOMPOSITIONNOTIFY_CODE = enum(u32) {
    ENDCOMPOSITION = 1,
    NEWTEXT = 2,
};
pub const ECN_ENDCOMPOSITION = ENDCOMPOSITIONNOTIFY_CODE.ENDCOMPOSITION;
pub const ECN_NEWTEXT = ENDCOMPOSITIONNOTIFY_CODE.NEWTEXT;

pub const IMECOMPTEXT_FLAGS = enum(u32) {
    R = 1,
};
pub const ICT_RESULTREADSTR = IMECOMPTEXT_FLAGS.R;

pub const GETTEXTLENGTHEX_FLAGS = packed struct(u32) {
    USECRLF: u1 = 0,
    PRECISE: u1 = 0,
    CLOSE: u1 = 0,
    NUMCHARS: u1 = 0,
    NUMBYTES: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const GTL_DEFAULT = GETTEXTLENGTHEX_FLAGS{ };
pub const GTL_USECRLF = GETTEXTLENGTHEX_FLAGS{ .USECRLF = 1 };
pub const GTL_PRECISE = GETTEXTLENGTHEX_FLAGS{ .PRECISE = 1 };
pub const GTL_CLOSE = GETTEXTLENGTHEX_FLAGS{ .CLOSE = 1 };
pub const GTL_NUMCHARS = GETTEXTLENGTHEX_FLAGS{ .NUMCHARS = 1 };
pub const GTL_NUMBYTES = GETTEXTLENGTHEX_FLAGS{ .NUMBYTES = 1 };

pub const REOBJECT_FLAGS = packed struct(u32) {
    RESIZABLE: u1 = 0,
    BELOWBASELINE: u1 = 0,
    INVERTEDSELECT: u1 = 0,
    DYNAMICSIZE: u1 = 0,
    BLANK: u1 = 0,
    DONTNEEDPALETTE: u1 = 0,
    OWNERDRAWSELECT: u1 = 0,
    CANROTATE: u1 = 0,
    ALIGNTORIGHT: u1 = 0,
    WRAPTEXTAROUND: u1 = 0,
    USEASBACKGROUND: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    GETMETAFILE: u1 = 0,
    LINKAVAILABLE: u1 = 0,
    HILITED: u1 = 0,
    INPLACEACTIVE: u1 = 0,
    OPEN: u1 = 0,
    SELECTED: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    STATIC: u1 = 0,
    LINK: u1 = 0,
};
pub const REO_ALIGNTORIGHT = REOBJECT_FLAGS{ .ALIGNTORIGHT = 1 };
pub const REO_BELOWBASELINE = REOBJECT_FLAGS{ .BELOWBASELINE = 1 };
pub const REO_BLANK = REOBJECT_FLAGS{ .BLANK = 1 };
pub const REO_CANROTATE = REOBJECT_FLAGS{ .CANROTATE = 1 };
pub const REO_DONTNEEDPALETTE = REOBJECT_FLAGS{ .DONTNEEDPALETTE = 1 };
pub const REO_DYNAMICSIZE = REOBJECT_FLAGS{ .DYNAMICSIZE = 1 };
pub const REO_GETMETAFILE = REOBJECT_FLAGS{ .GETMETAFILE = 1 };
pub const REO_HILITED = REOBJECT_FLAGS{ .HILITED = 1 };
pub const REO_INPLACEACTIVE = REOBJECT_FLAGS{ .INPLACEACTIVE = 1 };
pub const REO_INVERTEDSELECT = REOBJECT_FLAGS{ .INVERTEDSELECT = 1 };
pub const REO_LINK = REOBJECT_FLAGS{ .LINK = 1 };
pub const REO_LINKAVAILABLE = REOBJECT_FLAGS{ .LINKAVAILABLE = 1 };
pub const REO_OPEN = REOBJECT_FLAGS{ .OPEN = 1 };
pub const REO_OWNERDRAWSELECT = REOBJECT_FLAGS{ .OWNERDRAWSELECT = 1 };
pub const REO_RESIZABLE = REOBJECT_FLAGS{ .RESIZABLE = 1 };
pub const REO_SELECTED = REOBJECT_FLAGS{ .SELECTED = 1 };
pub const REO_STATIC = REOBJECT_FLAGS{ .STATIC = 1 };
pub const REO_USEASBACKGROUND = REOBJECT_FLAGS{ .USEASBACKGROUND = 1 };
pub const REO_WRAPTEXTAROUND = REOBJECT_FLAGS{ .WRAPTEXTAROUND = 1 };

pub const PARAFORMAT_NUMBERING_STYLE = enum(u16) {
    PAREN = 0,
    PARENS = 256,
    PERIOD = 512,
    PLAIN = 768,
    NONUMBER = 1024,
    NEWNUMBER = 32768,
};
pub const PFNS_PAREN = PARAFORMAT_NUMBERING_STYLE.PAREN;
pub const PFNS_PARENS = PARAFORMAT_NUMBERING_STYLE.PARENS;
pub const PFNS_PERIOD = PARAFORMAT_NUMBERING_STYLE.PERIOD;
pub const PFNS_PLAIN = PARAFORMAT_NUMBERING_STYLE.PLAIN;
pub const PFNS_NONUMBER = PARAFORMAT_NUMBERING_STYLE.NONUMBER;
pub const PFNS_NEWNUMBER = PARAFORMAT_NUMBERING_STYLE.NEWNUMBER;

pub const PARAFORMAT_ALIGNMENT = enum(u16) {
    CENTER = 3,
    LEFT = 1,
    RIGHT = 2,
};
pub const PFA_CENTER = PARAFORMAT_ALIGNMENT.CENTER;
pub const PFA_LEFT = PARAFORMAT_ALIGNMENT.LEFT;
pub const PFA_RIGHT = PARAFORMAT_ALIGNMENT.RIGHT;

pub const TEXTMODE = enum(i32) {
    PLAINTEXT = 1,
    RICHTEXT = 2,
    SINGLELEVELUNDO = 4,
    MULTILEVELUNDO = 8,
    SINGLECODEPAGE = 16,
    MULTICODEPAGE = 32,
};
pub const TM_PLAINTEXT = TEXTMODE.PLAINTEXT;
pub const TM_RICHTEXT = TEXTMODE.RICHTEXT;
pub const TM_SINGLELEVELUNDO = TEXTMODE.SINGLELEVELUNDO;
pub const TM_MULTILEVELUNDO = TEXTMODE.MULTILEVELUNDO;
pub const TM_SINGLECODEPAGE = TEXTMODE.SINGLECODEPAGE;
pub const TM_MULTICODEPAGE = TEXTMODE.MULTICODEPAGE;

pub const IMECOMPTEXT = extern struct {
    cb: i32,
    flags: IMECOMPTEXT_FLAGS,
};

pub const TABLEROWPARMS = extern struct {
    cbRow: u8,
    cbCell: u8,
    cCell: u8,
    cRow: u8,
    dxCellMargin: i32,
    dxIndent: i32,
    dyHeight: i32,
    _bitfield: u32,
    cpStartRow: i32,
    bTableLevel: u8,
    iCell: u8,
};

pub const TABLECELLPARMS = extern struct {
    dxWidth: i32,
    _bitfield: u16,
    wShading: u16,
    dxBrdrLeft: i16,
    dyBrdrTop: i16,
    dxBrdrRight: i16,
    dyBrdrBottom: i16,
    crBrdrLeft: u32,
    crBrdrTop: u32,
    crBrdrRight: u32,
    crBrdrBottom: u32,
    crBackPat: u32,
    crForePat: u32,
};

pub const AutoCorrectProc = *const fn(
    langid: u16,
    pszBefore: ?[*:0]const u16,
    pszAfter: ?PWSTR,
    cchAfter: i32,
    pcchReplaced: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const RICHEDIT_IMAGE_PARAMETERS = extern struct {
    xWidth: i32 align(4),
    yHeight: i32 align(4),
    Ascent: i32 align(4),
    Type: TEXT_ALIGN_OPTIONS align(4),
    pwszAlternateText: ?[*:0]const u16 align(4),
    pIStream: ?*IStream align(4),
};

pub const ENDCOMPOSITIONNOTIFY = extern struct {
    nmhdr: NMHDR align(4),
    dwCode: ENDCOMPOSITIONNOTIFY_CODE align(4),
};

pub const EDITWORDBREAKPROCEX = *const fn(
    pchText: ?PSTR,
    cchText: i32,
    bCharSet: u8,
    action: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const CHARFORMATA = extern struct {
    cbSize: u32,
    dwMask: CFM_MASK,
    dwEffects: CFE_EFFECTS,
    yHeight: i32,
    yOffset: i32,
    crTextColor: u32,
    bCharSet: u8,
    bPitchAndFamily: u8,
    szFaceName: [32]CHAR,
};

pub const CHARFORMATW = extern struct {
    cbSize: u32,
    dwMask: CFM_MASK,
    dwEffects: CFE_EFFECTS,
    yHeight: i32,
    yOffset: i32,
    crTextColor: u32,
    bCharSet: u8,
    bPitchAndFamily: u8,
    szFaceName: [32]u16,
};

pub const CHARFORMAT2W = extern struct {
    __AnonymousBase_richedit_L711_C23: CHARFORMATW,
    wWeight: u16,
    sSpacing: i16,
    crBackColor: u32,
    lcid: u32,
    Anonymous: extern union {
        dwReserved: u32,
        dwCookie: u32,
    },
    sStyle: i16,
    wKerning: u16,
    bUnderlineType: u8,
    bAnimation: u8,
    bRevAuthor: u8,
    bUnderlineColor: u8,
};

pub const CHARFORMAT2A = extern struct {
    __AnonymousBase_richedit_L736_C23: CHARFORMATA,
    wWeight: u16,
    sSpacing: i16,
    crBackColor: u32,
    lcid: u32,
    Anonymous: extern union {
        dwReserved: u32,
        dwCookie: u32,
    },
    sStyle: i16,
    wKerning: u16,
    bUnderlineType: u8,
    bAnimation: u8,
    bRevAuthor: u8,
    bUnderlineColor: u8,
};

pub const CHARRANGE = extern struct {
    cpMin: i32,
    cpMax: i32,
};

pub const TEXTRANGEA = extern struct {
    chrg: CHARRANGE align(4),
    lpstrText: ?PSTR align(4),
};

pub const TEXTRANGEW = extern struct {
    chrg: CHARRANGE align(4),
    lpstrText: ?PWSTR align(4),
};

pub const EDITSTREAMCALLBACK = *const fn(
    dwCookie: usize,
    pbBuff: ?*u8,
    cb: i32,
    pcb: ?*i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const EDITSTREAM = extern struct {
    dwCookie: usize align(4),
    dwError: u32 align(4),
    pfnCallback: ?EDITSTREAMCALLBACK align(4),
};

pub const FINDTEXTA = extern struct {
    chrg: CHARRANGE align(4),
    lpstrText: ?[*:0]const u8 align(4),
};

pub const FINDTEXTW = extern struct {
    chrg: CHARRANGE align(4),
    lpstrText: ?[*:0]const u16 align(4),
};

pub const FINDTEXTEXA = extern struct {
    chrg: CHARRANGE align(4),
    lpstrText: ?[*:0]const u8 align(4),
    chrgText: CHARRANGE align(4),
};

pub const FINDTEXTEXW = extern struct {
    chrg: CHARRANGE align(4),
    lpstrText: ?[*:0]const u16 align(4),
    chrgText: CHARRANGE align(4),
};

pub const FORMATRANGE = extern struct {
    hdc: ?HDC align(4),
    hdcTarget: ?HDC align(4),
    rc: RECT align(4),
    rcPage: RECT align(4),
    chrg: CHARRANGE align(4),
};

pub const PARAFORMAT = extern struct {
    cbSize: u32,
    dwMask: PARAFORMAT_MASK,
    wNumbering: u16,
    Anonymous: extern union {
        wReserved: u16,
        wEffects: u16,
    },
    dxStartIndent: i32,
    dxRightIndent: i32,
    dxOffset: i32,
    wAlignment: PARAFORMAT_ALIGNMENT,
    cTabCount: i16,
    rgxTabs: [32]u32,
};

pub const PARAFORMAT2 = extern struct {
    __AnonymousBase_richedit_L1149_C22: PARAFORMAT,
    dySpaceBefore: i32,
    dySpaceAfter: i32,
    dyLineSpacing: i32,
    sStyle: i16,
    bLineSpacingRule: u8,
    bOutlineLevel: u8,
    wShadingWeight: u16,
    wShadingStyle: PARAFORMAT_SHADING_STYLE,
    wNumberingStart: u16,
    wNumberingStyle: PARAFORMAT_NUMBERING_STYLE,
    wNumberingTab: u16,
    wBorderSpace: u16,
    wBorderWidth: u16,
    wBorders: PARAFORMAT_BORDERS,
};

pub const MSGFILTER = extern struct {
    nmhdr: NMHDR align(4),
    msg: u32 align(4),
    wParam: WPARAM align(4),
    lParam: LPARAM align(4),
};

pub const REQRESIZE = extern struct {
    nmhdr: NMHDR align(4),
    rc: RECT align(4),
};

pub const SELCHANGE = extern struct {
    nmhdr: NMHDR align(4),
    chrg: CHARRANGE align(4),
    seltyp: RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE align(4),
};

pub const _grouptypingchange = extern struct {
    nmhdr: NMHDR align(4),
    fGroupTyping: BOOL align(4),
};

pub const CLIPBOARDFORMAT = extern struct {
    nmhdr: NMHDR align(4),
    cf: u16 align(4),
};

pub const GETCONTEXTMENUEX = extern struct {
    chrg: CHARRANGE align(4),
    dwFlags: u32 align(4),
    pt: POINT align(4),
    pvReserved: ?*anyopaque align(4),
};

pub const ENDROPFILES = extern struct {
    nmhdr: NMHDR align(4),
    hDrop: ?HANDLE align(4),
    cp: i32 align(4),
    fProtected: BOOL align(4),
};

pub const ENPROTECTED = extern struct {
    nmhdr: NMHDR align(4),
    msg: u32 align(4),
    wParam: WPARAM align(4),
    lParam: LPARAM align(4),
    chrg: CHARRANGE align(4),
};

pub const ENSAVECLIPBOARD = extern struct {
    nmhdr: NMHDR align(4),
    cObjectCount: i32 align(4),
    cch: i32 align(4),
};

pub const ENOLEOPFAILED = extern struct {
    nmhdr: NMHDR align(4),
    iob: i32 align(4),
    lOper: i32 align(4),
    hr: HRESULT align(4),
};

pub const OBJECTPOSITIONS = extern struct {
    nmhdr: NMHDR align(4),
    cObjectCount: i32 align(4),
    pcpPositions: ?*i32 align(4),
};

pub const ENLINK = extern struct {
    nmhdr: NMHDR align(4),
    msg: u32 align(4),
    wParam: WPARAM align(4),
    lParam: LPARAM align(4),
    chrg: CHARRANGE align(4),
};

pub const ENLOWFIRTF = extern struct {
    nmhdr: NMHDR align(4),
    szControl: ?PSTR align(4),
};

pub const ENCORRECTTEXT = extern struct {
    nmhdr: NMHDR align(4),
    chrg: CHARRANGE align(4),
    seltyp: RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE align(4),
};

pub const PUNCTUATION = extern struct {
    iSize: u32 align(4),
    szPunctuation: ?PSTR align(4),
};

pub const COMPCOLOR = extern struct {
    crText: u32,
    crBackground: u32,
    dwEffects: u32,
};

pub const REPASTESPECIAL = extern struct {
    dwAspect: DVASPECT align(4),
    dwParam: usize align(4),
};

pub const UNDONAMEID = enum(i32) {
    UNKNOWN = 0,
    TYPING = 1,
    DELETE = 2,
    DRAGDROP = 3,
    CUT = 4,
    PASTE = 5,
    AUTOTABLE = 6,
};
pub const UID_UNKNOWN = UNDONAMEID.UNKNOWN;
pub const UID_TYPING = UNDONAMEID.TYPING;
pub const UID_DELETE = UNDONAMEID.DELETE;
pub const UID_DRAGDROP = UNDONAMEID.DRAGDROP;
pub const UID_CUT = UNDONAMEID.CUT;
pub const UID_PASTE = UNDONAMEID.PASTE;
pub const UID_AUTOTABLE = UNDONAMEID.AUTOTABLE;

pub const SETTEXTEX = extern struct {
    flags: u32,
    codepage: u32,
};

pub const GETTEXTEX = extern struct {
    cb: u32 align(4),
    flags: GETTEXTEX_FLAGS align(4),
    codepage: u32 align(4),
    lpDefaultChar: ?[*:0]const u8 align(4),
    lpUsedDefChar: ?*i32 align(4),
};

pub const GETTEXTLENGTHEX = extern struct {
    flags: GETTEXTLENGTHEX_FLAGS,
    codepage: u32,
};

pub const BIDIOPTIONS = extern struct {
    cbSize: u32,
    wMask: u16,
    wEffects: u16,
};

pub const KHYPH = enum(i32) {
    Nil = 0,
    Normal = 1,
    AddBefore = 2,
    ChangeBefore = 3,
    DeleteBefore = 4,
    ChangeAfter = 5,
    DelAndChange = 6,
};
pub const khyphNil = KHYPH.Nil;
pub const khyphNormal = KHYPH.Normal;
pub const khyphAddBefore = KHYPH.AddBefore;
pub const khyphChangeBefore = KHYPH.ChangeBefore;
pub const khyphDeleteBefore = KHYPH.DeleteBefore;
pub const khyphChangeAfter = KHYPH.ChangeAfter;
pub const khyphDelAndChange = KHYPH.DelAndChange;

pub const hyphresult = extern struct {
    khyph: KHYPH,
    ichHyph: i32,
    chHyph: u16,
};

pub const HYPHENATEINFO = extern struct {
    cbSize: i16 align(4),
    dxHyphenateZone: i16 align(4),
    pfnHyphenate: isize align(4),
};

pub const TXTBACKSTYLE = enum(i32) {
    TRANSPARENT = 0,
    OPAQUE = 1,
};
pub const TXTBACK_TRANSPARENT = TXTBACKSTYLE.TRANSPARENT;
pub const TXTBACK_OPAQUE = TXTBACKSTYLE.OPAQUE;

pub const TXTHITRESULT = enum(i32) {
    NOHIT = 0,
    TRANSPARENT = 1,
    CLOSE = 2,
    HIT = 3,
};
pub const TXTHITRESULT_NOHIT = TXTHITRESULT.NOHIT;
pub const TXTHITRESULT_TRANSPARENT = TXTHITRESULT.TRANSPARENT;
pub const TXTHITRESULT_CLOSE = TXTHITRESULT.CLOSE;
pub const TXTHITRESULT_HIT = TXTHITRESULT.HIT;

pub const TXTNATURALSIZE = enum(i32) {
    FITTOCONTENT2 = 0,
    FITTOCONTENT = 1,
    ROUNDTOLINE = 2,
    FITTOCONTENT3 = 3,
    FITTOCONTENTWSP = 4,
    INCLUDELASTLINE = 1073741824,
    EMU = -2147483648,
};
pub const TXTNS_FITTOCONTENT2 = TXTNATURALSIZE.FITTOCONTENT2;
pub const TXTNS_FITTOCONTENT = TXTNATURALSIZE.FITTOCONTENT;
pub const TXTNS_ROUNDTOLINE = TXTNATURALSIZE.ROUNDTOLINE;
pub const TXTNS_FITTOCONTENT3 = TXTNATURALSIZE.FITTOCONTENT3;
pub const TXTNS_FITTOCONTENTWSP = TXTNATURALSIZE.FITTOCONTENTWSP;
pub const TXTNS_INCLUDELASTLINE = TXTNATURALSIZE.INCLUDELASTLINE;
pub const TXTNS_EMU = TXTNATURALSIZE.EMU;

pub const TXTVIEW = enum(i32) {
    ACTIVE = 0,
    INACTIVE = -1,
};
pub const TXTVIEW_ACTIVE = TXTVIEW.ACTIVE;
pub const TXTVIEW_INACTIVE = TXTVIEW.INACTIVE;

pub const CHANGETYPE = enum(i32) {
    GENERIC = 0,
    TEXTCHANGED = 1,
    NEWUNDO = 2,
    NEWREDO = 4,
};
pub const CN_GENERIC = CHANGETYPE.GENERIC;
pub const CN_TEXTCHANGED = CHANGETYPE.TEXTCHANGED;
pub const CN_NEWUNDO = CHANGETYPE.NEWUNDO;
pub const CN_NEWREDO = CHANGETYPE.NEWREDO;

pub const CHANGENOTIFY = extern struct {
    dwChangeType: CHANGETYPE,
    pvCookieData: ?*anyopaque,
};

pub const ITextServices = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        TxSendMessage: *const fn(
            self: *const ITextServices,
            msg: u32,
            wparam: WPARAM,
            lparam: LPARAM,
            plresult: ?*LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxDraw: *const fn(
            self: *const ITextServices,
            dwDrawAspect: DVASPECT,
            lindex: i32,
            pvAspect: ?*anyopaque,
            ptd: ?*DVTARGETDEVICE,
            hdcDraw: ?HDC,
            hicTargetDev: ?HDC,
            lprcBounds: ?*RECTL,
            lprcWBounds: ?*RECTL,
            lprcUpdate: ?*RECT,
            pfnContinue: isize,
            dwContinue: u32,
            lViewId: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxGetHScroll: *const fn(
            self: *const ITextServices,
            plMin: ?*i32,
            plMax: ?*i32,
            plPos: ?*i32,
            plPage: ?*i32,
            pfEnabled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxGetVScroll: *const fn(
            self: *const ITextServices,
            plMin: ?*i32,
            plMax: ?*i32,
            plPos: ?*i32,
            plPage: ?*i32,
            pfEnabled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTxSetCursor: *const fn(
            self: *const ITextServices,
            dwDrawAspect: DVASPECT,
            lindex: i32,
            pvAspect: ?*anyopaque,
            ptd: ?*DVTARGETDEVICE,
            hdcDraw: ?HDC,
            hicTargetDev: ?HDC,
            lprcClient: ?*RECT,
            x: i32,
            y: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxQueryHitPoint: *const fn(
            self: *const ITextServices,
            dwDrawAspect: DVASPECT,
            lindex: i32,
            pvAspect: ?*anyopaque,
            ptd: ?*DVTARGETDEVICE,
            hdcDraw: ?HDC,
            hicTargetDev: ?HDC,
            lprcClient: ?*RECT,
            x: i32,
            y: i32,
            pHitResult: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTxInPlaceActivate: *const fn(
            self: *const ITextServices,
            prcClient: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTxInPlaceDeactivate: *const fn(
            self: *const ITextServices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTxUIActivate: *const fn(
            self: *const ITextServices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTxUIDeactivate: *const fn(
            self: *const ITextServices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxGetText: *const fn(
            self: *const ITextServices,
            pbstrText: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxSetText: *const fn(
            self: *const ITextServices,
            pszText: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxGetCurTargetX: *const fn(
            self: *const ITextServices,
            param0: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxGetBaseLinePos: *const fn(
            self: *const ITextServices,
            param0: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxGetNaturalSize: *const fn(
            self: *const ITextServices,
            dwAspect: u32,
            hdcDraw: ?HDC,
            hicTargetDev: ?HDC,
            ptd: ?*DVTARGETDEVICE,
            dwMode: u32,
            psizelExtent: ?*const SIZE,
            pwidth: ?*i32,
            pheight: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxGetDropTarget: *const fn(
            self: *const ITextServices,
            ppDropTarget: ?*?*IDropTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTxPropertyBitsChange: *const fn(
            self: *const ITextServices,
            dwMask: u32,
            dwBits: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxGetCachedSize: *const fn(
            self: *const ITextServices,
            pdwWidth: ?*u32,
            pdwHeight: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn TxSendMessage(self: *const ITextServices, msg: u32, wparam: WPARAM, lparam: LPARAM, plresult: ?*LRESULT) callconv(.Inline) HRESULT {
        return self.vtable.TxSendMessage(self, msg, wparam, lparam, plresult);
    }
    pub fn TxDraw(self: *const ITextServices, dwDrawAspect: DVASPECT, lindex: i32, pvAspect: ?*anyopaque, ptd: ?*DVTARGETDEVICE, hdcDraw: ?HDC, hicTargetDev: ?HDC, lprcBounds: ?*RECTL, lprcWBounds: ?*RECTL, lprcUpdate: ?*RECT, pfnContinue: isize, dwContinue: u32, lViewId: i32) callconv(.Inline) HRESULT {
        return self.vtable.TxDraw(self, dwDrawAspect, lindex, pvAspect, ptd, hdcDraw, hicTargetDev, lprcBounds, lprcWBounds, lprcUpdate, pfnContinue, dwContinue, lViewId);
    }
    pub fn TxGetHScroll(self: *const ITextServices, plMin: ?*i32, plMax: ?*i32, plPos: ?*i32, plPage: ?*i32, pfEnabled: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.TxGetHScroll(self, plMin, plMax, plPos, plPage, pfEnabled);
    }
    pub fn TxGetVScroll(self: *const ITextServices, plMin: ?*i32, plMax: ?*i32, plPos: ?*i32, plPage: ?*i32, pfEnabled: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.TxGetVScroll(self, plMin, plMax, plPos, plPage, pfEnabled);
    }
    pub fn OnTxSetCursor(self: *const ITextServices, dwDrawAspect: DVASPECT, lindex: i32, pvAspect: ?*anyopaque, ptd: ?*DVTARGETDEVICE, hdcDraw: ?HDC, hicTargetDev: ?HDC, lprcClient: ?*RECT, x: i32, y: i32) callconv(.Inline) HRESULT {
        return self.vtable.OnTxSetCursor(self, dwDrawAspect, lindex, pvAspect, ptd, hdcDraw, hicTargetDev, lprcClient, x, y);
    }
    pub fn TxQueryHitPoint(self: *const ITextServices, dwDrawAspect: DVASPECT, lindex: i32, pvAspect: ?*anyopaque, ptd: ?*DVTARGETDEVICE, hdcDraw: ?HDC, hicTargetDev: ?HDC, lprcClient: ?*RECT, x: i32, y: i32, pHitResult: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.TxQueryHitPoint(self, dwDrawAspect, lindex, pvAspect, ptd, hdcDraw, hicTargetDev, lprcClient, x, y, pHitResult);
    }
    pub fn OnTxInPlaceActivate(self: *const ITextServices, prcClient: ?*RECT) callconv(.Inline) HRESULT {
        return self.vtable.OnTxInPlaceActivate(self, prcClient);
    }
    pub fn OnTxInPlaceDeactivate(self: *const ITextServices) callconv(.Inline) HRESULT {
        return self.vtable.OnTxInPlaceDeactivate(self);
    }
    pub fn OnTxUIActivate(self: *const ITextServices) callconv(.Inline) HRESULT {
        return self.vtable.OnTxUIActivate(self);
    }
    pub fn OnTxUIDeactivate(self: *const ITextServices) callconv(.Inline) HRESULT {
        return self.vtable.OnTxUIDeactivate(self);
    }
    pub fn TxGetText(self: *const ITextServices, pbstrText: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.TxGetText(self, pbstrText);
    }
    pub fn TxSetText(self: *const ITextServices, pszText: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.TxSetText(self, pszText);
    }
    pub fn TxGetCurTargetX(self: *const ITextServices, param0: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.TxGetCurTargetX(self, param0);
    }
    pub fn TxGetBaseLinePos(self: *const ITextServices, param0: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.TxGetBaseLinePos(self, param0);
    }
    pub fn TxGetNaturalSize(self: *const ITextServices, dwAspect: u32, hdcDraw: ?HDC, hicTargetDev: ?HDC, ptd: ?*DVTARGETDEVICE, dwMode: u32, psizelExtent: ?*const SIZE, pwidth: ?*i32, pheight: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.TxGetNaturalSize(self, dwAspect, hdcDraw, hicTargetDev, ptd, dwMode, psizelExtent, pwidth, pheight);
    }
    pub fn TxGetDropTarget(self: *const ITextServices, ppDropTarget: ?*?*IDropTarget) callconv(.Inline) HRESULT {
        return self.vtable.TxGetDropTarget(self, ppDropTarget);
    }
    pub fn OnTxPropertyBitsChange(self: *const ITextServices, dwMask: u32, dwBits: u32) callconv(.Inline) HRESULT {
        return self.vtable.OnTxPropertyBitsChange(self, dwMask, dwBits);
    }
    pub fn TxGetCachedSize(self: *const ITextServices, pdwWidth: ?*u32, pdwHeight: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.TxGetCachedSize(self, pdwWidth, pdwHeight);
    }
};

pub const CARET_FLAGS = enum(i32) {
    NONE = 0,
    CUSTOM = 1,
    RTL = 2,
    ITALIC = 32,
    NULL = 64,
    ROTATE90 = 128,
};
pub const CARET_NONE = CARET_FLAGS.NONE;
pub const CARET_CUSTOM = CARET_FLAGS.CUSTOM;
pub const CARET_RTL = CARET_FLAGS.RTL;
pub const CARET_ITALIC = CARET_FLAGS.ITALIC;
pub const CARET_NULL = CARET_FLAGS.NULL;
pub const CARET_ROTATE90 = CARET_FLAGS.ROTATE90;

pub const CARET_INFO = extern union {
    hbitmap: ?HBITMAP,
    caretFlags: CARET_FLAGS,
};

pub const ITextHost = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        TxGetDC: *const fn(
            self: *const ITextHost,
        ) callconv(@import("std").os.windows.WINAPI) ?HDC,
        TxReleaseDC: *const fn(
            self: *const ITextHost,
            hdc: ?HDC,
        ) callconv(@import("std").os.windows.WINAPI) i32,
        TxShowScrollBar: *const fn(
            self: *const ITextHost,
            fnBar: i32,
            fShow: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        TxEnableScrollBar: *const fn(
            self: *const ITextHost,
            fuSBFlags: SCROLLBAR_CONSTANTS,
            fuArrowflags: ENABLE_SCROLL_BAR_ARROWS,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        TxSetScrollRange: *const fn(
            self: *const ITextHost,
            fnBar: i32,
            nMinPos: i32,
            nMaxPos: i32,
            fRedraw: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        TxSetScrollPos: *const fn(
            self: *const ITextHost,
            fnBar: i32,
            nPos: i32,
            fRedraw: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        TxInvalidateRect: *const fn(
            self: *const ITextHost,
            prc: ?*RECT,
            fMode: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) void,
        TxViewChange: *const fn(
            self: *const ITextHost,
            fUpdate: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) void,
        TxCreateCaret: *const fn(
            self: *const ITextHost,
            hbmp: ?HBITMAP,
            xWidth: i32,
            yHeight: i32,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        TxShowCaret: *const fn(
            self: *const ITextHost,
            fShow: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        TxSetCaretPos: *const fn(
            self: *const ITextHost,
            x: i32,
            y: i32,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        TxSetTimer: *const fn(
            self: *const ITextHost,
            idTimer: u32,
            uTimeout: u32,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        TxKillTimer: *const fn(
            self: *const ITextHost,
            idTimer: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        TxScrollWindowEx: *const fn(
            self: *const ITextHost,
            dx: i32,
            dy: i32,
            lprcScroll: ?*RECT,
            lprcClip: ?*RECT,
            hrgnUpdate: ?HRGN,
            lprcUpdate: ?*RECT,
            fuScroll: SHOW_WINDOW_CMD,
        ) callconv(@import("std").os.windows.WINAPI) void,
        TxSetCapture: *const fn(
            self: *const ITextHost,
            fCapture: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) void,
        TxSetFocus: *const fn(
            self: *const ITextHost,
        ) callconv(@import("std").os.windows.WINAPI) void,
        TxSetCursor: *const fn(
            self: *const ITextHost,
            hcur: ?HCURSOR,
            fText: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) void,
        TxScreenToClient: *const fn(
            self: *const ITextHost,
            lppt: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        TxClientToScreen: *const fn(
            self: *const ITextHost,
            lppt: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        TxActivate: *const fn(
            self: *const ITextHost,
            plOldState: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxDeactivate: *const fn(
            self: *const ITextHost,
            lNewState: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxGetClientRect: *const fn(
            self: *const ITextHost,
            prc: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxGetViewInset: *const fn(
            self: *const ITextHost,
            prc: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxGetCharFormat: *const fn(
            self: *const ITextHost,
            ppCF: ?*const ?*CHARFORMATW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxGetParaFormat: *const fn(
            self: *const ITextHost,
            ppPF: ?*const ?*PARAFORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxGetSysColor: *const fn(
            self: *const ITextHost,
            nIndex: i32,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        TxGetBackStyle: *const fn(
            self: *const ITextHost,
            pstyle: ?*TXTBACKSTYLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxGetMaxLength: *const fn(
            self: *const ITextHost,
            plength: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxGetScrollBars: *const fn(
            self: *const ITextHost,
            pdwScrollBar: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxGetPasswordChar: *const fn(
            self: *const ITextHost,
            pch: ?*i8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxGetAcceleratorPos: *const fn(
            self: *const ITextHost,
            pcp: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxGetExtent: *const fn(
            self: *const ITextHost,
            lpExtent: ?*SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTxCharFormatChange: *const fn(
            self: *const ITextHost,
            pCF: ?*const CHARFORMATW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTxParaFormatChange: *const fn(
            self: *const ITextHost,
            pPF: ?*const PARAFORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxGetPropertyBits: *const fn(
            self: *const ITextHost,
            dwMask: u32,
            pdwBits: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxNotify: *const fn(
            self: *const ITextHost,
            iNotify: u32,
            pv: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxImmGetContext: *const fn(
            self: *const ITextHost,
        ) callconv(@import("std").os.windows.WINAPI) ?HIMC,
        TxImmReleaseContext: *const fn(
            self: *const ITextHost,
            himc: ?HIMC,
        ) callconv(@import("std").os.windows.WINAPI) void,
        TxGetSelectionBarWidth: *const fn(
            self: *const ITextHost,
            lSelBarWidth: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn TxGetDC(self: *const ITextHost) callconv(.Inline) ?HDC {
        return self.vtable.TxGetDC(self);
    }
    pub fn TxReleaseDC(self: *const ITextHost, hdc: ?HDC) callconv(.Inline) i32 {
        return self.vtable.TxReleaseDC(self, hdc);
    }
    pub fn TxShowScrollBar(self: *const ITextHost, fnBar: i32, fShow: BOOL) callconv(.Inline) BOOL {
        return self.vtable.TxShowScrollBar(self, fnBar, fShow);
    }
    pub fn TxEnableScrollBar(self: *const ITextHost, fuSBFlags: SCROLLBAR_CONSTANTS, fuArrowflags: ENABLE_SCROLL_BAR_ARROWS) callconv(.Inline) BOOL {
        return self.vtable.TxEnableScrollBar(self, fuSBFlags, fuArrowflags);
    }
    pub fn TxSetScrollRange(self: *const ITextHost, fnBar: i32, nMinPos: i32, nMaxPos: i32, fRedraw: BOOL) callconv(.Inline) BOOL {
        return self.vtable.TxSetScrollRange(self, fnBar, nMinPos, nMaxPos, fRedraw);
    }
    pub fn TxSetScrollPos(self: *const ITextHost, fnBar: i32, nPos: i32, fRedraw: BOOL) callconv(.Inline) BOOL {
        return self.vtable.TxSetScrollPos(self, fnBar, nPos, fRedraw);
    }
    pub fn TxInvalidateRect(self: *const ITextHost, prc: ?*RECT, fMode: BOOL) callconv(.Inline) void {
        return self.vtable.TxInvalidateRect(self, prc, fMode);
    }
    pub fn TxViewChange(self: *const ITextHost, fUpdate: BOOL) callconv(.Inline) void {
        return self.vtable.TxViewChange(self, fUpdate);
    }
    pub fn TxCreateCaret(self: *const ITextHost, hbmp: ?HBITMAP, xWidth: i32, yHeight: i32) callconv(.Inline) BOOL {
        return self.vtable.TxCreateCaret(self, hbmp, xWidth, yHeight);
    }
    pub fn TxShowCaret(self: *const ITextHost, fShow: BOOL) callconv(.Inline) BOOL {
        return self.vtable.TxShowCaret(self, fShow);
    }
    pub fn TxSetCaretPos(self: *const ITextHost, x: i32, y: i32) callconv(.Inline) BOOL {
        return self.vtable.TxSetCaretPos(self, x, y);
    }
    pub fn TxSetTimer(self: *const ITextHost, idTimer: u32, uTimeout: u32) callconv(.Inline) BOOL {
        return self.vtable.TxSetTimer(self, idTimer, uTimeout);
    }
    pub fn TxKillTimer(self: *const ITextHost, idTimer: u32) callconv(.Inline) void {
        return self.vtable.TxKillTimer(self, idTimer);
    }
    pub fn TxScrollWindowEx(self: *const ITextHost, dx: i32, dy: i32, lprcScroll: ?*RECT, lprcClip: ?*RECT, hrgnUpdate: ?HRGN, lprcUpdate: ?*RECT, fuScroll: SHOW_WINDOW_CMD) callconv(.Inline) void {
        return self.vtable.TxScrollWindowEx(self, dx, dy, lprcScroll, lprcClip, hrgnUpdate, lprcUpdate, fuScroll);
    }
    pub fn TxSetCapture(self: *const ITextHost, fCapture: BOOL) callconv(.Inline) void {
        return self.vtable.TxSetCapture(self, fCapture);
    }
    pub fn TxSetFocus(self: *const ITextHost) callconv(.Inline) void {
        return self.vtable.TxSetFocus(self);
    }
    pub fn TxSetCursor(self: *const ITextHost, hcur: ?HCURSOR, fText: BOOL) callconv(.Inline) void {
        return self.vtable.TxSetCursor(self, hcur, fText);
    }
    pub fn TxScreenToClient(self: *const ITextHost, lppt: ?*POINT) callconv(.Inline) BOOL {
        return self.vtable.TxScreenToClient(self, lppt);
    }
    pub fn TxClientToScreen(self: *const ITextHost, lppt: ?*POINT) callconv(.Inline) BOOL {
        return self.vtable.TxClientToScreen(self, lppt);
    }
    pub fn TxActivate(self: *const ITextHost, plOldState: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.TxActivate(self, plOldState);
    }
    pub fn TxDeactivate(self: *const ITextHost, lNewState: i32) callconv(.Inline) HRESULT {
        return self.vtable.TxDeactivate(self, lNewState);
    }
    pub fn TxGetClientRect(self: *const ITextHost, prc: ?*RECT) callconv(.Inline) HRESULT {
        return self.vtable.TxGetClientRect(self, prc);
    }
    pub fn TxGetViewInset(self: *const ITextHost, prc: ?*RECT) callconv(.Inline) HRESULT {
        return self.vtable.TxGetViewInset(self, prc);
    }
    pub fn TxGetCharFormat(self: *const ITextHost, ppCF: ?*const ?*CHARFORMATW) callconv(.Inline) HRESULT {
        return self.vtable.TxGetCharFormat(self, ppCF);
    }
    pub fn TxGetParaFormat(self: *const ITextHost, ppPF: ?*const ?*PARAFORMAT) callconv(.Inline) HRESULT {
        return self.vtable.TxGetParaFormat(self, ppPF);
    }
    pub fn TxGetSysColor(self: *const ITextHost, nIndex: i32) callconv(.Inline) u32 {
        return self.vtable.TxGetSysColor(self, nIndex);
    }
    pub fn TxGetBackStyle(self: *const ITextHost, pstyle: ?*TXTBACKSTYLE) callconv(.Inline) HRESULT {
        return self.vtable.TxGetBackStyle(self, pstyle);
    }
    pub fn TxGetMaxLength(self: *const ITextHost, plength: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.TxGetMaxLength(self, plength);
    }
    pub fn TxGetScrollBars(self: *const ITextHost, pdwScrollBar: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.TxGetScrollBars(self, pdwScrollBar);
    }
    pub fn TxGetPasswordChar(self: *const ITextHost, pch: ?*i8) callconv(.Inline) HRESULT {
        return self.vtable.TxGetPasswordChar(self, pch);
    }
    pub fn TxGetAcceleratorPos(self: *const ITextHost, pcp: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.TxGetAcceleratorPos(self, pcp);
    }
    pub fn TxGetExtent(self: *const ITextHost, lpExtent: ?*SIZE) callconv(.Inline) HRESULT {
        return self.vtable.TxGetExtent(self, lpExtent);
    }
    pub fn OnTxCharFormatChange(self: *const ITextHost, pCF: ?*const CHARFORMATW) callconv(.Inline) HRESULT {
        return self.vtable.OnTxCharFormatChange(self, pCF);
    }
    pub fn OnTxParaFormatChange(self: *const ITextHost, pPF: ?*const PARAFORMAT) callconv(.Inline) HRESULT {
        return self.vtable.OnTxParaFormatChange(self, pPF);
    }
    pub fn TxGetPropertyBits(self: *const ITextHost, dwMask: u32, pdwBits: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.TxGetPropertyBits(self, dwMask, pdwBits);
    }
    pub fn TxNotify(self: *const ITextHost, iNotify: u32, pv: ?*anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.TxNotify(self, iNotify, pv);
    }
    pub fn TxImmGetContext(self: *const ITextHost) callconv(.Inline) ?HIMC {
        return self.vtable.TxImmGetContext(self);
    }
    pub fn TxImmReleaseContext(self: *const ITextHost, himc: ?HIMC) callconv(.Inline) void {
        return self.vtable.TxImmReleaseContext(self, himc);
    }
    pub fn TxGetSelectionBarWidth(self: *const ITextHost, lSelBarWidth: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.TxGetSelectionBarWidth(self, lSelBarWidth);
    }
};

// TODO: this type is limited to platform 'windows8.0'
pub const IRicheditUiaOverrides = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPropertyOverrideValue: *const fn(
            self: *const IRicheditUiaOverrides,
            propertyId: i32,
            pRetValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetPropertyOverrideValue(self: *const IRicheditUiaOverrides, propertyId: i32, pRetValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyOverrideValue(self, propertyId, pRetValue);
    }
};

pub const PCreateTextServices = *const fn(
    punkOuter: ?*IUnknown,
    pITextHost: ?*ITextHost,
    ppUnk: ?*?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PShutdownTextServices = *const fn(
    pTextServices: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const ITextHost2 = extern union {
    pub const VTable = extern struct {
        base: ITextHost.VTable,
        TxIsDoubleClickPending: *const fn(
            self: *const ITextHost2,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        TxGetWindow: *const fn(
            self: *const ITextHost2,
            phwnd: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxSetForegroundWindow: *const fn(
            self: *const ITextHost2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxGetPalette: *const fn(
            self: *const ITextHost2,
        ) callconv(@import("std").os.windows.WINAPI) ?HPALETTE,
        TxGetEastAsianFlags: *const fn(
            self: *const ITextHost2,
            pFlags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxSetCursor2: *const fn(
            self: *const ITextHost2,
            hcur: ?HCURSOR,
            bText: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) ?HCURSOR,
        TxFreeTextServicesNotification: *const fn(
            self: *const ITextHost2,
        ) callconv(@import("std").os.windows.WINAPI) void,
        TxGetEditStyle: *const fn(
            self: *const ITextHost2,
            dwItem: u32,
            pdwData: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxGetWindowStyles: *const fn(
            self: *const ITextHost2,
            pdwStyle: ?*u32,
            pdwExStyle: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxShowDropCaret: *const fn(
            self: *const ITextHost2,
            fShow: BOOL,
            hdc: ?HDC,
            prc: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxDestroyCaret: *const fn(
            self: *const ITextHost2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxGetHorzExtent: *const fn(
            self: *const ITextHost2,
            plHorzExtent: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ITextHost: ITextHost,
    IUnknown: IUnknown,
    pub fn TxIsDoubleClickPending(self: *const ITextHost2) callconv(.Inline) BOOL {
        return self.vtable.TxIsDoubleClickPending(self);
    }
    pub fn TxGetWindow(self: *const ITextHost2, phwnd: ?*?HWND) callconv(.Inline) HRESULT {
        return self.vtable.TxGetWindow(self, phwnd);
    }
    pub fn TxSetForegroundWindow(self: *const ITextHost2) callconv(.Inline) HRESULT {
        return self.vtable.TxSetForegroundWindow(self);
    }
    pub fn TxGetPalette(self: *const ITextHost2) callconv(.Inline) ?HPALETTE {
        return self.vtable.TxGetPalette(self);
    }
    pub fn TxGetEastAsianFlags(self: *const ITextHost2, pFlags: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.TxGetEastAsianFlags(self, pFlags);
    }
    pub fn TxSetCursor2(self: *const ITextHost2, hcur: ?HCURSOR, bText: BOOL) callconv(.Inline) ?HCURSOR {
        return self.vtable.TxSetCursor2(self, hcur, bText);
    }
    pub fn TxFreeTextServicesNotification(self: *const ITextHost2) callconv(.Inline) void {
        return self.vtable.TxFreeTextServicesNotification(self);
    }
    pub fn TxGetEditStyle(self: *const ITextHost2, dwItem: u32, pdwData: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.TxGetEditStyle(self, dwItem, pdwData);
    }
    pub fn TxGetWindowStyles(self: *const ITextHost2, pdwStyle: ?*u32, pdwExStyle: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.TxGetWindowStyles(self, pdwStyle, pdwExStyle);
    }
    pub fn TxShowDropCaret(self: *const ITextHost2, fShow: BOOL, hdc: ?HDC, prc: ?*RECT) callconv(.Inline) HRESULT {
        return self.vtable.TxShowDropCaret(self, fShow, hdc, prc);
    }
    pub fn TxDestroyCaret(self: *const ITextHost2) callconv(.Inline) HRESULT {
        return self.vtable.TxDestroyCaret(self);
    }
    pub fn TxGetHorzExtent(self: *const ITextHost2, plHorzExtent: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.TxGetHorzExtent(self, plHorzExtent);
    }
};

pub const ITextServices2 = extern union {
    pub const VTable = extern struct {
        base: ITextServices.VTable,
        TxGetNaturalSize2: *const fn(
            self: *const ITextServices2,
            dwAspect: u32,
            hdcDraw: ?HDC,
            hicTargetDev: ?HDC,
            ptd: ?*DVTARGETDEVICE,
            dwMode: u32,
            psizelExtent: ?*const SIZE,
            pwidth: ?*i32,
            pheight: ?*i32,
            pascent: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TxDrawD2D: *const fn(
            self: *const ITextServices2,
            pRenderTarget: ?*ID2D1RenderTarget,
            lprcBounds: ?*RECTL,
            lprcUpdate: ?*RECT,
            lViewId: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ITextServices: ITextServices,
    IUnknown: IUnknown,
    pub fn TxGetNaturalSize2(self: *const ITextServices2, dwAspect: u32, hdcDraw: ?HDC, hicTargetDev: ?HDC, ptd: ?*DVTARGETDEVICE, dwMode: u32, psizelExtent: ?*const SIZE, pwidth: ?*i32, pheight: ?*i32, pascent: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.TxGetNaturalSize2(self, dwAspect, hdcDraw, hicTargetDev, ptd, dwMode, psizelExtent, pwidth, pheight, pascent);
    }
    pub fn TxDrawD2D(self: *const ITextServices2, pRenderTarget: ?*ID2D1RenderTarget, lprcBounds: ?*RECTL, lprcUpdate: ?*RECT, lViewId: i32) callconv(.Inline) HRESULT {
        return self.vtable.TxDrawD2D(self, pRenderTarget, lprcBounds, lprcUpdate, lViewId);
    }
};

pub const REOBJECT = extern struct {
    cbStruct: u32,
    cp: i32,
    clsid: Guid,
    poleobj: ?*IOleObject,
    pstg: ?*IStorage,
    polesite: ?*IOleClientSite,
    sizel: SIZE,
    dvaspect: u32,
    dwFlags: REOBJECT_FLAGS,
    dwUser: u32,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRichEditOle_Value = Guid.initString("00020d00-0000-0000-c000-000000000046");
pub const IID_IRichEditOle = &IID_IRichEditOle_Value;
pub const IRichEditOle = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetClientSite: *const fn(
            self: *const IRichEditOle,
            lplpolesite: ?*?*IOleClientSite,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectCount: *const fn(
            self: *const IRichEditOle,
        ) callconv(@import("std").os.windows.WINAPI) i32,
        GetLinkCount: *const fn(
            self: *const IRichEditOle,
        ) callconv(@import("std").os.windows.WINAPI) i32,
        GetObject: *const fn(
            self: *const IRichEditOle,
            iob: i32,
            lpreobject: ?*REOBJECT,
            dwFlags: RICH_EDIT_GET_OBJECT_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertObject: *const fn(
            self: *const IRichEditOle,
            lpreobject: ?*REOBJECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertObject: *const fn(
            self: *const IRichEditOle,
            iob: i32,
            rclsidNew: ?*const Guid,
            lpstrUserTypeNew: ?[*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ActivateAs: *const fn(
            self: *const IRichEditOle,
            rclsid: ?*const Guid,
            rclsidAs: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHostNames: *const fn(
            self: *const IRichEditOle,
            lpstrContainerApp: ?[*:0]const u8,
            lpstrContainerObj: ?[*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLinkAvailable: *const fn(
            self: *const IRichEditOle,
            iob: i32,
            fAvailable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDvaspect: *const fn(
            self: *const IRichEditOle,
            iob: i32,
            dvaspect: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandsOffStorage: *const fn(
            self: *const IRichEditOle,
            iob: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveCompleted: *const fn(
            self: *const IRichEditOle,
            iob: i32,
            lpstg: ?*IStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InPlaceDeactivate: *const fn(
            self: *const IRichEditOle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ContextSensitiveHelp: *const fn(
            self: *const IRichEditOle,
            fEnterMode: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClipboardData: *const fn(
            self: *const IRichEditOle,
            lpchrg: ?*CHARRANGE,
            reco: u32,
            lplpdataobj: ?*?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportDataObject: *const fn(
            self: *const IRichEditOle,
            lpdataobj: ?*IDataObject,
            cf: u16,
            hMetaPict: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetClientSite(self: *const IRichEditOle, lplpolesite: ?*?*IOleClientSite) callconv(.Inline) HRESULT {
        return self.vtable.GetClientSite(self, lplpolesite);
    }
    pub fn GetObjectCount(self: *const IRichEditOle) callconv(.Inline) i32 {
        return self.vtable.GetObjectCount(self);
    }
    pub fn GetLinkCount(self: *const IRichEditOle) callconv(.Inline) i32 {
        return self.vtable.GetLinkCount(self);
    }
    pub fn GetObject(self: *const IRichEditOle, iob: i32, lpreobject: ?*REOBJECT, dwFlags: RICH_EDIT_GET_OBJECT_FLAGS) callconv(.Inline) HRESULT {
        return self.vtable.GetObject(self, iob, lpreobject, dwFlags);
    }
    pub fn InsertObject(self: *const IRichEditOle, lpreobject: ?*REOBJECT) callconv(.Inline) HRESULT {
        return self.vtable.InsertObject(self, lpreobject);
    }
    pub fn ConvertObject(self: *const IRichEditOle, iob: i32, rclsidNew: ?*const Guid, lpstrUserTypeNew: ?[*:0]const u8) callconv(.Inline) HRESULT {
        return self.vtable.ConvertObject(self, iob, rclsidNew, lpstrUserTypeNew);
    }
    pub fn ActivateAs(self: *const IRichEditOle, rclsid: ?*const Guid, rclsidAs: ?*const Guid) callconv(.Inline) HRESULT {
        return self.vtable.ActivateAs(self, rclsid, rclsidAs);
    }
    pub fn SetHostNames(self: *const IRichEditOle, lpstrContainerApp: ?[*:0]const u8, lpstrContainerObj: ?[*:0]const u8) callconv(.Inline) HRESULT {
        return self.vtable.SetHostNames(self, lpstrContainerApp, lpstrContainerObj);
    }
    pub fn SetLinkAvailable(self: *const IRichEditOle, iob: i32, fAvailable: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetLinkAvailable(self, iob, fAvailable);
    }
    pub fn SetDvaspect(self: *const IRichEditOle, iob: i32, dvaspect: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetDvaspect(self, iob, dvaspect);
    }
    pub fn HandsOffStorage(self: *const IRichEditOle, iob: i32) callconv(.Inline) HRESULT {
        return self.vtable.HandsOffStorage(self, iob);
    }
    pub fn SaveCompleted(self: *const IRichEditOle, iob: i32, lpstg: ?*IStorage) callconv(.Inline) HRESULT {
        return self.vtable.SaveCompleted(self, iob, lpstg);
    }
    pub fn InPlaceDeactivate(self: *const IRichEditOle) callconv(.Inline) HRESULT {
        return self.vtable.InPlaceDeactivate(self);
    }
    pub fn ContextSensitiveHelp(self: *const IRichEditOle, fEnterMode: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.ContextSensitiveHelp(self, fEnterMode);
    }
    pub fn GetClipboardData(self: *const IRichEditOle, lpchrg: ?*CHARRANGE, reco: u32, lplpdataobj: ?*?*IDataObject) callconv(.Inline) HRESULT {
        return self.vtable.GetClipboardData(self, lpchrg, reco, lplpdataobj);
    }
    pub fn ImportDataObject(self: *const IRichEditOle, lpdataobj: ?*IDataObject, cf: u16, hMetaPict: isize) callconv(.Inline) HRESULT {
        return self.vtable.ImportDataObject(self, lpdataobj, cf, hMetaPict);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRichEditOleCallback_Value = Guid.initString("00020d03-0000-0000-c000-000000000046");
pub const IID_IRichEditOleCallback = &IID_IRichEditOleCallback_Value;
pub const IRichEditOleCallback = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNewStorage: *const fn(
            self: *const IRichEditOleCallback,
            lplpstg: ?*?*IStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInPlaceContext: *const fn(
            self: *const IRichEditOleCallback,
            lplpFrame: ?*?*IOleInPlaceFrame,
            lplpDoc: ?*?*IOleInPlaceUIWindow,
            lpFrameInfo: ?*OIFI,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowContainerUI: *const fn(
            self: *const IRichEditOleCallback,
            fShow: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryInsertObject: *const fn(
            self: *const IRichEditOleCallback,
            lpclsid: ?*Guid,
            lpstg: ?*IStorage,
            cp: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteObject: *const fn(
            self: *const IRichEditOleCallback,
            lpoleobj: ?*IOleObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryAcceptData: *const fn(
            self: *const IRichEditOleCallback,
            lpdataobj: ?*IDataObject,
            lpcfFormat: ?*u16,
            reco: u32,
            fReally: BOOL,
            hMetaPict: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ContextSensitiveHelp: *const fn(
            self: *const IRichEditOleCallback,
            fEnterMode: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClipboardData: *const fn(
            self: *const IRichEditOleCallback,
            lpchrg: ?*CHARRANGE,
            reco: u32,
            lplpdataobj: ?*?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDragDropEffect: *const fn(
            self: *const IRichEditOleCallback,
            fDrag: BOOL,
            grfKeyState: u32,
            pdwEffect: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContextMenu: *const fn(
            self: *const IRichEditOleCallback,
            seltype: RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE,
            lpoleobj: ?*IOleObject,
            lpchrg: ?*CHARRANGE,
            lphmenu: ?*?HMENU,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetNewStorage(self: *const IRichEditOleCallback, lplpstg: ?*?*IStorage) callconv(.Inline) HRESULT {
        return self.vtable.GetNewStorage(self, lplpstg);
    }
    pub fn GetInPlaceContext(self: *const IRichEditOleCallback, lplpFrame: ?*?*IOleInPlaceFrame, lplpDoc: ?*?*IOleInPlaceUIWindow, lpFrameInfo: ?*OIFI) callconv(.Inline) HRESULT {
        return self.vtable.GetInPlaceContext(self, lplpFrame, lplpDoc, lpFrameInfo);
    }
    pub fn ShowContainerUI(self: *const IRichEditOleCallback, fShow: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.ShowContainerUI(self, fShow);
    }
    pub fn QueryInsertObject(self: *const IRichEditOleCallback, lpclsid: ?*Guid, lpstg: ?*IStorage, cp: i32) callconv(.Inline) HRESULT {
        return self.vtable.QueryInsertObject(self, lpclsid, lpstg, cp);
    }
    pub fn DeleteObject(self: *const IRichEditOleCallback, lpoleobj: ?*IOleObject) callconv(.Inline) HRESULT {
        return self.vtable.DeleteObject(self, lpoleobj);
    }
    pub fn QueryAcceptData(self: *const IRichEditOleCallback, lpdataobj: ?*IDataObject, lpcfFormat: ?*u16, reco: u32, fReally: BOOL, hMetaPict: isize) callconv(.Inline) HRESULT {
        return self.vtable.QueryAcceptData(self, lpdataobj, lpcfFormat, reco, fReally, hMetaPict);
    }
    pub fn ContextSensitiveHelp(self: *const IRichEditOleCallback, fEnterMode: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.ContextSensitiveHelp(self, fEnterMode);
    }
    pub fn GetClipboardData(self: *const IRichEditOleCallback, lpchrg: ?*CHARRANGE, reco: u32, lplpdataobj: ?*?*IDataObject) callconv(.Inline) HRESULT {
        return self.vtable.GetClipboardData(self, lpchrg, reco, lplpdataobj);
    }
    pub fn GetDragDropEffect(self: *const IRichEditOleCallback, fDrag: BOOL, grfKeyState: u32, pdwEffect: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetDragDropEffect(self, fDrag, grfKeyState, pdwEffect);
    }
    pub fn GetContextMenu(self: *const IRichEditOleCallback, seltype: RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE, lpoleobj: ?*IOleObject, lpchrg: ?*CHARRANGE, lphmenu: ?*?HMENU) callconv(.Inline) HRESULT {
        return self.vtable.GetContextMenu(self, seltype, lpoleobj, lpchrg, lphmenu);
    }
};

pub const tomConstants = enum(i32) {
    False = 0,
    True = -1,
    Undefined = -9999999,
    Toggle = -9999998,
    AutoColor = -9999997,
    Default = -9999996,
    Suspend = -9999995,
    Resume = -9999994,
    ApplyLater = 1,
    TrackParms = 2,
    CacheParms = 3,
    ApplyTmp = 4,
    DisableSmartFont = 8,
    EnableSmartFont = 9,
    UsePoints = 10,
    UseTwips = 11,
    Backward = -1073741823,
    Forward = 1073741823,
    SelectionRow = 5,
    SelectionBlock = 6,
    SelectionInlineShape = 7,
    SelReplace = 16,
    Start = 32,
    ClientCoord = 256,
    AllowOffClient = 512,
    Transform = 1024,
    ObjectArg = 2048,
    AtEnd = 4096,
    HeavyWave = 12,
    LongDash = 13,
    ThickDash = 14,
    ThickDashDot = 15,
    ThickDotted = 17,
    ThickLongDash = 18,
    TabBack = -3,
    TabNext = -2,
    ListNumberedThaiAlpha = 19,
    ListNumberedThaiNum = 20,
    ListNumberedHindiAlpha = 21,
    ListNumberedHindiAlpha1 = 22,
    ListNumberedHindiNum = 23,
    ListParentheses = 65536,
    ListPeriod = 131072,
    ListPlain = 196608,
    ListNoNumber = 262144,
    ListMinus = 524288,
    IgnoreNumberStyle = 16777216,
    ParaStyleHeading3 = -4,
    ParaStyleHeading4 = -5,
    ParaStyleHeading5 = -6,
    ParaStyleHeading6 = -7,
    ParaStyleHeading7 = -8,
    ParaStyleHeading8 = -9,
    ParaStyleHeading9 = -10,
    ProcessId = 1073741825,
    ScratchStory = 127,
    FindStory = 128,
    ReplaceStory = 129,
    OpenExisting = 48,
    OpenAlways = 64,
    TruncateExisting = 80,
    Bold = -2147483647,
    Italic = -2147483646,
    Underline = -2147483644,
    Strikeout = -2147483640,
    Protected = -2147483632,
    Link = -2147483616,
    SmallCaps = -2147483584,
    AllCaps = -2147483520,
    Hidden = -2147483392,
    Outline = -2147483136,
    Shadow = -2147482624,
    Emboss = -2147481600,
    Imprint = -2147479552,
    Disabled = -2147475456,
    Revised = -2147467264,
    SubscriptCF = -2147418112,
    SuperscriptCF = -2147352576,
    FontBound = -2146435072,
    LinkProtected = -2139095040,
    InlineObjectStart = -2130706432,
    ExtendedChar = -2113929216,
    AutoBackColor = -2080374784,
    MathZoneNoBuildUp = -2013265920,
    MathZone = -1879048192,
    MathZoneOrdinary = -1610612736,
    AutoTextColor = -1073741824,
    ParaEffectTable = 16384,
    Charset = -2147483648,
    CharRepFromLcid = 1073741824,
    Gurmukhi = 24,
    Gujarati = 25,
    Oriya = 26,
    Tamil = 27,
    Telugu = 28,
    Kannada = 29,
    Malayalam = 30,
    Sinhala = 31,
    Tibetan = 33,
    Myanmar = 34,
    Georgian = 35,
    Jamo = 36,
    Ethiopic = 37,
    Cherokee = 38,
    Aboriginal = 39,
    Ogham = 40,
    Runic = 41,
    Khmer = 42,
    Mongolian = 43,
    Braille = 44,
    Yi = 45,
    Limbu = 46,
    TaiLe = 47,
    SylotiNagri = 49,
    Kharoshthi = 50,
    Kayahli = 51,
    Usymbol = 52,
    Emoji = 53,
    Glagolitic = 54,
    Lisu = 55,
    Vai = 56,
    NKo = 57,
    Osmanya = 58,
    PhagsPa = 59,
    Gothic = 60,
    Deseret = 61,
    Tifinagh = 62,
    CharRepMax = 63,
    DecDecSize = 254,
    DecSize = 255,
    IncSize = 65,
    IncIncSize = 66,
    GravityBackward = 536870912,
    ConvertRTF = 8192,
    SizeScriptScript = 96,
    MathBreakLeft = 125,
    MathBreakCenter = 126,
    MathArgShadingStart = 593,
    MathArgShadingEnd = 594,
    MathObjShadingStart = 595,
    MathObjShadingEnd = 596,
    MathDocDiffMask = 768,
    MathBrkBinSubMask = 786432,
    SelRange = 597,
    FontPropTeXStyle = 828,
    FontPropAlign = 829,
    FontStretch = 830,
    FontStyle = 831,
    FontWeightThin = 100,
    FontWeightExtraLight = 200,
    FontWeightLight = 300,
    FontWeightNormal = 400,
    FontWeightMedium = 500,
    FontWeightSemiBold = 600,
    FontWeightBold = 700,
    FontWeightExtraBold = 800,
    FontWeightBlack = 900,
    FontWeightExtraBlack = 950,
    ParaPropMathAlign = 1079,
    MathRMargin = 130,
    MathWrapIndent = 131,
    MathWrapRight = 132,
    MathPostSpace = 134,
    MathPreSpace = 133,
    MathInterSpace = 135,
    MathIntraSpace = 136,
    CanCopy = 137,
    CanRedo = 138,
    CanUndo = 139,
    UndoLimit = 140,
    DocAutoLink = 141,
    EllipsisMode = 142,
    EllipsisState = 143,
    RowHeightActual = 2059,
    pub const ApplyNow = .False;
    pub const Move = .False;
    pub const Extend = .ApplyLater;
    pub const NoSelection = .False;
    pub const SelectionIP = .ApplyLater;
    pub const SelectionNormal = .TrackParms;
    pub const SelectionFrame = .CacheParms;
    pub const SelectionColumn = .ApplyTmp;
    pub const SelectionShape = .DisableSmartFont;
    pub const SelStartActive = .ApplyLater;
    pub const SelAtEOL = .TrackParms;
    pub const SelOvertype = .ApplyTmp;
    pub const SelActive = .DisableSmartFont;
    pub const End = .False;
    pub const CollapseEnd = .False;
    pub const CollapseStart = .ApplyLater;
    pub const None = .False;
    pub const Single = .ApplyLater;
    pub const Words = .TrackParms;
    pub const Double = .CacheParms;
    pub const Dotted = .ApplyTmp;
    pub const Dash = .SelectionRow;
    pub const DashDot = .SelectionBlock;
    pub const DashDotDot = .SelectionInlineShape;
    pub const Wave = .DisableSmartFont;
    pub const Thick = .EnableSmartFont;
    pub const Hair = .UsePoints;
    pub const DoubleWave = .UseTwips;
    pub const ThickDashDotDot = .SelReplace;
    pub const LineSpaceSingle = .False;
    pub const LineSpace1pt5 = .ApplyLater;
    pub const LineSpaceDouble = .TrackParms;
    pub const LineSpaceAtLeast = .CacheParms;
    pub const LineSpaceExactly = .ApplyTmp;
    pub const LineSpaceMultiple = .SelectionRow;
    pub const LineSpacePercent = .SelectionBlock;
    pub const AlignLeft = .False;
    pub const AlignCenter = .ApplyLater;
    pub const AlignRight = .TrackParms;
    pub const AlignJustify = .CacheParms;
    pub const AlignDecimal = .CacheParms;
    pub const AlignBar = .ApplyTmp;
    pub const DefaultTab = .SelectionRow;
    pub const AlignInterWord = .CacheParms;
    pub const AlignNewspaper = .ApplyTmp;
    pub const AlignInterLetter = .SelectionRow;
    pub const AlignScaled = .SelectionBlock;
    pub const Spaces = .False;
    pub const Dots = .ApplyLater;
    pub const Dashes = .TrackParms;
    pub const Lines = .CacheParms;
    pub const ThickLines = .ApplyTmp;
    pub const Equals = .SelectionRow;
    pub const TabHere = .True;
    pub const ListNone = .False;
    pub const ListBullet = .ApplyLater;
    pub const ListNumberAsArabic = .TrackParms;
    pub const ListNumberAsLCLetter = .CacheParms;
    pub const ListNumberAsUCLetter = .ApplyTmp;
    pub const ListNumberAsLCRoman = .SelectionRow;
    pub const ListNumberAsUCRoman = .SelectionBlock;
    pub const ListNumberAsSequence = .SelectionInlineShape;
    pub const ListNumberedCircle = .DisableSmartFont;
    pub const ListNumberedBlackCircleWingding = .EnableSmartFont;
    pub const ListNumberedWhiteCircleWingding = .UsePoints;
    pub const ListNumberedArabicWide = .UseTwips;
    pub const ListNumberedChS = .HeavyWave;
    pub const ListNumberedChT = .LongDash;
    pub const ListNumberedJpnChS = .ThickDash;
    pub const ListNumberedJpnKor = .ThickDashDot;
    pub const ListNumberedArabic1 = .SelReplace;
    pub const ListNumberedArabic2 = .ThickDotted;
    pub const ListNumberedHebrew = .ThickLongDash;
    pub const ParaStyleNormal = .True;
    pub const ParaStyleHeading1 = .TabNext;
    pub const ParaStyleHeading2 = .TabBack;
    pub const Character = .ApplyLater;
    pub const Word = .TrackParms;
    pub const Sentence = .CacheParms;
    pub const Paragraph = .ApplyTmp;
    pub const Line = .SelectionRow;
    pub const Story = .SelectionBlock;
    pub const Screen = .SelectionInlineShape;
    pub const Section = .DisableSmartFont;
    pub const TableColumn = .EnableSmartFont;
    pub const Column = .EnableSmartFont;
    pub const Row = .UsePoints;
    pub const Window = .UseTwips;
    pub const Cell = .HeavyWave;
    pub const CharFormat = .LongDash;
    pub const ParaFormat = .ThickDash;
    pub const Table = .ThickDashDot;
    pub const Object = .SelReplace;
    pub const Page = .ThickDotted;
    pub const HardParagraph = .ThickLongDash;
    pub const Cluster = .ListNumberedThaiAlpha;
    pub const InlineObject = .ListNumberedThaiNum;
    pub const InlineObjectArg = .ListNumberedHindiAlpha;
    pub const LeafLine = .ListNumberedHindiAlpha1;
    pub const LayoutColumn = .ListNumberedHindiNum;
    pub const MatchWord = .TrackParms;
    pub const MatchCase = .ApplyTmp;
    pub const MatchPattern = .DisableSmartFont;
    pub const UnknownStory = .False;
    pub const MainTextStory = .ApplyLater;
    pub const FootnotesStory = .TrackParms;
    pub const EndnotesStory = .CacheParms;
    pub const CommentsStory = .ApplyTmp;
    pub const TextFrameStory = .SelectionRow;
    pub const EvenPagesHeaderStory = .SelectionBlock;
    pub const PrimaryHeaderStory = .SelectionInlineShape;
    pub const EvenPagesFooterStory = .DisableSmartFont;
    pub const PrimaryFooterStory = .EnableSmartFont;
    pub const FirstPageHeaderStory = .UsePoints;
    pub const FirstPageFooterStory = .UseTwips;
    pub const StoryInactive = .False;
    pub const StoryActiveDisplay = .ApplyLater;
    pub const StoryActiveUI = .TrackParms;
    pub const StoryActiveDisplayUI = .CacheParms;
    pub const NoAnimation = .False;
    pub const LasVegasLights = .ApplyLater;
    pub const BlinkingBackground = .TrackParms;
    pub const SparkleText = .CacheParms;
    pub const MarchingBlackAnts = .ApplyTmp;
    pub const MarchingRedAnts = .SelectionRow;
    pub const Shimmer = .SelectionBlock;
    pub const WipeDown = .SelectionInlineShape;
    pub const WipeRight = .DisableSmartFont;
    pub const AnimationMax = .DisableSmartFont;
    pub const LowerCase = .False;
    pub const UpperCase = .ApplyLater;
    pub const TitleCase = .TrackParms;
    pub const SentenceCase = .ApplyTmp;
    pub const ToggleCase = .SelectionRow;
    pub const ReadOnly = .ClientCoord;
    pub const ShareDenyRead = .AllowOffClient;
    pub const ShareDenyWrite = .Transform;
    pub const PasteFile = .AtEnd;
    pub const CreateNew = .SelReplace;
    pub const CreateAlways = .Start;
    pub const RTF = .ApplyLater;
    pub const Text = .TrackParms;
    pub const HTML = .CacheParms;
    pub const WordDocument = .ApplyTmp;
    pub const MathZoneDisplay = .ListNoNumber;
    pub const ParaEffectRTL = .ApplyLater;
    pub const ParaEffectKeep = .TrackParms;
    pub const ParaEffectKeepNext = .ApplyTmp;
    pub const ParaEffectPageBreakBefore = .DisableSmartFont;
    pub const ParaEffectNoLineNumber = .SelReplace;
    pub const ParaEffectNoWidowControl = .Start;
    pub const ParaEffectDoNotHyphen = .OpenAlways;
    pub const ParaEffectSideBySide = .FindStory;
    pub const ParaEffectCollapsed = .ClientCoord;
    pub const ParaEffectOutlineLevel = .AllowOffClient;
    pub const ParaEffectBox = .Transform;
    pub const ParaEffectTableRowDelimiter = .AtEnd;
    pub const ModWidthPairs = .ApplyLater;
    pub const ModWidthSpace = .TrackParms;
    pub const AutoSpaceAlpha = .ApplyTmp;
    pub const AutoSpaceNumeric = .DisableSmartFont;
    pub const AutoSpaceParens = .SelReplace;
    pub const EmbeddedFont = .Start;
    pub const Doublestrike = .OpenAlways;
    pub const Overlapping = .FindStory;
    pub const NormalCaret = .False;
    pub const KoreanBlockCaret = .ApplyLater;
    pub const NullCaret = .TrackParms;
    pub const IncludeInset = .ApplyLater;
    pub const UnicodeBiDi = .ApplyLater;
    pub const MathCFCheck = .ApplyTmp;
    pub const Unlink = .DisableSmartFont;
    pub const Unhide = .SelReplace;
    pub const CheckTextLimit = .Start;
    pub const IgnoreCurrentFont = .False;
    pub const MatchCharRep = .ApplyLater;
    pub const MatchFontSignature = .TrackParms;
    pub const MatchAscii = .ApplyTmp;
    pub const GetHeightOnly = .DisableSmartFont;
    pub const MatchMathFont = .SelReplace;
    pub const Ansi = .False;
    pub const EastEurope = .ApplyLater;
    pub const Cyrillic = .TrackParms;
    pub const Greek = .CacheParms;
    pub const Turkish = .ApplyTmp;
    pub const Hebrew = .SelectionRow;
    pub const Arabic = .SelectionBlock;
    pub const Baltic = .SelectionInlineShape;
    pub const Vietnamese = .DisableSmartFont;
    pub const DefaultCharRep = .EnableSmartFont;
    pub const Symbol = .UsePoints;
    pub const Thai = .UseTwips;
    pub const ShiftJIS = .HeavyWave;
    pub const GB2312 = .LongDash;
    pub const Hangul = .ThickDash;
    pub const BIG5 = .ThickDashDot;
    pub const PC437 = .SelReplace;
    pub const OEM = .ThickDotted;
    pub const Mac = .ThickLongDash;
    pub const Armenian = .ListNumberedThaiAlpha;
    pub const Syriac = .ListNumberedThaiNum;
    pub const Thaana = .ListNumberedHindiAlpha;
    pub const Devanagari = .ListNumberedHindiAlpha1;
    pub const Bengali = .ListNumberedHindiNum;
    pub const Lao = .Start;
    pub const NewTaiLue = .OpenExisting;
    pub const RE10Mode = .ApplyLater;
    pub const UseAtFont = .TrackParms;
    pub const TextFlowMask = .HeavyWave;
    pub const TextFlowES = .False;
    pub const TextFlowSW = .ApplyTmp;
    pub const TextFlowWN = .DisableSmartFont;
    pub const TextFlowNE = .HeavyWave;
    pub const NoIME = .ListMinus;
    pub const SelfIME = .ListNoNumber;
    pub const NoUpScroll = .ListParentheses;
    pub const NoVpScroll = .ListNoNumber;
    pub const NoLink = .False;
    pub const ClientLink = .ApplyLater;
    pub const FriendlyLinkName = .TrackParms;
    pub const FriendlyLinkAddress = .CacheParms;
    pub const AutoLinkURL = .ApplyTmp;
    pub const AutoLinkEmail = .SelectionRow;
    pub const AutoLinkPhone = .SelectionBlock;
    pub const AutoLinkPath = .SelectionInlineShape;
    pub const CompressNone = .False;
    pub const CompressPunctuation = .ApplyLater;
    pub const CompressPunctuationAndKana = .TrackParms;
    pub const CompressMax = .TrackParms;
    pub const UnderlinePositionAuto = .False;
    pub const UnderlinePositionBelow = .ApplyLater;
    pub const UnderlinePositionAbove = .TrackParms;
    pub const UnderlinePositionMax = .TrackParms;
    pub const FontAlignmentAuto = .False;
    pub const FontAlignmentTop = .ApplyLater;
    pub const FontAlignmentBaseline = .TrackParms;
    pub const FontAlignmentBottom = .CacheParms;
    pub const FontAlignmentCenter = .ApplyTmp;
    pub const FontAlignmentMax = .ApplyTmp;
    pub const RubyBelow = .FindStory;
    pub const RubyAlignCenter = .False;
    pub const RubyAlign010 = .ApplyLater;
    pub const RubyAlign121 = .TrackParms;
    pub const RubyAlignLeft = .CacheParms;
    pub const RubyAlignRight = .ApplyTmp;
    pub const LimitsDefault = .False;
    pub const LimitsUnderOver = .ApplyLater;
    pub const LimitsSubSup = .TrackParms;
    pub const UpperLimitAsSuperScript = .CacheParms;
    pub const LimitsOpposite = .ApplyTmp;
    pub const ShowLLimPlaceHldr = .DisableSmartFont;
    pub const ShowULimPlaceHldr = .SelReplace;
    pub const DontGrowWithContent = .OpenAlways;
    pub const GrowWithContent = .FindStory;
    pub const SubSupAlign = .ApplyLater;
    pub const LimitAlignMask = .CacheParms;
    pub const LimitAlignCenter = .False;
    pub const LimitAlignLeft = .ApplyLater;
    pub const LimitAlignRight = .TrackParms;
    pub const ShowDegPlaceHldr = .DisableSmartFont;
    pub const AlignDefault = .False;
    pub const AlignMatchAscentDescent = .TrackParms;
    pub const MathVariant = .Start;
    pub const StyleDefault = .False;
    pub const StyleScriptScriptCramped = .ApplyLater;
    pub const StyleScriptScript = .TrackParms;
    pub const StyleScriptCramped = .CacheParms;
    pub const StyleScript = .ApplyTmp;
    pub const StyleTextCramped = .SelectionRow;
    pub const StyleText = .SelectionBlock;
    pub const StyleDisplayCramped = .SelectionInlineShape;
    pub const StyleDisplay = .DisableSmartFont;
    pub const MathRelSize = .OpenAlways;
    pub const GravityUI = .False;
    pub const GravityBack = .ApplyLater;
    pub const GravityFore = .TrackParms;
    pub const GravityIn = .CacheParms;
    pub const GravityOut = .ApplyTmp;
    pub const GravityForward = .CharRepFromLcid;
    pub const AdjustCRLF = .ApplyLater;
    pub const UseCRLF = .TrackParms;
    pub const Textize = .ApplyTmp;
    pub const AllowFinalEOP = .DisableSmartFont;
    pub const FoldMathAlpha = .SelReplace;
    pub const NoHidden = .Start;
    pub const IncludeNumbering = .OpenAlways;
    pub const TranslateTableCell = .FindStory;
    pub const NoMathZoneBrackets = .ClientCoord;
    pub const ConvertMathChar = .AllowOffClient;
    pub const NoUCGreekItalic = .Transform;
    pub const AllowMathBold = .ObjectArg;
    pub const LanguageTag = .AtEnd;
    pub const ApplyRtfDocProps = .ParaEffectTable;
    pub const PhantomShow = .ApplyLater;
    pub const PhantomZeroWidth = .TrackParms;
    pub const PhantomZeroAscent = .ApplyTmp;
    pub const PhantomZeroDescent = .DisableSmartFont;
    pub const PhantomTransparent = .SelReplace;
    pub const PhantomASmash = .SelectionRow;
    pub const PhantomDSmash = .EnableSmartFont;
    pub const PhantomHSmash = .CacheParms;
    pub const PhantomSmash = .LongDash;
    pub const PhantomHorz = .HeavyWave;
    pub const PhantomVert = .TrackParms;
    pub const BoxHideTop = .ApplyLater;
    pub const BoxHideBottom = .TrackParms;
    pub const BoxHideLeft = .ApplyTmp;
    pub const BoxHideRight = .DisableSmartFont;
    pub const BoxStrikeH = .SelReplace;
    pub const BoxStrikeV = .Start;
    pub const BoxStrikeTLBR = .OpenAlways;
    pub const BoxStrikeBLTR = .FindStory;
    pub const BoxAlignCenter = .ApplyLater;
    pub const SpaceMask = .Telugu;
    pub const SpaceDefault = .False;
    pub const SpaceUnary = .ApplyTmp;
    pub const SpaceBinary = .DisableSmartFont;
    pub const SpaceRelational = .HeavyWave;
    pub const SpaceSkip = .SelReplace;
    pub const SpaceOrd = .ListNumberedThaiNum;
    pub const SpaceDifferential = .Gurmukhi;
    pub const SizeText = .Start;
    pub const SizeScript = .OpenAlways;
    pub const NoBreak = .FindStory;
    pub const TransparentForPositioning = .ClientCoord;
    pub const TransparentForSpacing = .AllowOffClient;
    pub const StretchCharBelow = .False;
    pub const StretchCharAbove = .ApplyLater;
    pub const StretchBaseBelow = .TrackParms;
    pub const StretchBaseAbove = .CacheParms;
    pub const MatrixAlignMask = .CacheParms;
    pub const MatrixAlignCenter = .False;
    pub const MatrixAlignTopRow = .ApplyLater;
    pub const MatrixAlignBottomRow = .CacheParms;
    pub const ShowMatPlaceHldr = .DisableSmartFont;
    pub const EqArrayLayoutWidth = .ApplyLater;
    pub const EqArrayAlignMask = .HeavyWave;
    pub const EqArrayAlignCenter = .False;
    pub const EqArrayAlignTopRow = .ApplyTmp;
    pub const EqArrayAlignBottomRow = .HeavyWave;
    pub const MathManualBreakMask = .ScratchStory;
    pub const MathBreakRight = .ScratchStory;
    pub const MathEqAlign = .FindStory;
    pub const FunctionTypeNone = .False;
    pub const FunctionTypeTakesArg = .ApplyLater;
    pub const FunctionTypeTakesLim = .TrackParms;
    pub const FunctionTypeTakesLim2 = .CacheParms;
    pub const FunctionTypeIsLim = .ApplyTmp;
    pub const MathParaAlignDefault = .False;
    pub const MathParaAlignCenterGroup = .ApplyLater;
    pub const MathParaAlignCenter = .TrackParms;
    pub const MathParaAlignLeft = .CacheParms;
    pub const MathParaAlignRight = .ApplyTmp;
    pub const MathDispAlignMask = .CacheParms;
    pub const MathDispAlignCenterGroup = .False;
    pub const MathDispAlignCenter = .ApplyLater;
    pub const MathDispAlignLeft = .TrackParms;
    pub const MathDispAlignRight = .CacheParms;
    pub const MathDispIntUnderOver = .ApplyTmp;
    pub const MathDispFracTeX = .DisableSmartFont;
    pub const MathDispNaryGrow = .SelReplace;
    pub const MathDocEmptyArgMask = .SizeScriptScript;
    pub const MathDocEmptyArgAuto = .False;
    pub const MathDocEmptyArgAlways = .Start;
    pub const MathDocEmptyArgNever = .OpenAlways;
    pub const MathDocSbSpOpUnchanged = .FindStory;
    pub const MathDocDiffDefault = .False;
    pub const MathDocDiffUpright = .ClientCoord;
    pub const MathDocDiffItalic = .AllowOffClient;
    pub const MathDocDiffOpenItalic = .MathDocDiffMask;
    pub const MathDispNarySubSup = .Transform;
    pub const MathDispDef = .ObjectArg;
    pub const MathEnableRtl = .AtEnd;
    pub const MathBrkBinMask = .ListPlain;
    pub const MathBrkBinBefore = .False;
    pub const MathBrkBinAfter = .ListParentheses;
    pub const MathBrkBinDup = .ListPeriod;
    pub const MathBrkBinSubMM = .False;
    pub const MathBrkBinSubPM = .ListNoNumber;
    pub const MathBrkBinSubMP = .ListMinus;
    pub const Hstring = .MathObjShadingEnd;
    pub const FontStyleUpright = .False;
    pub const FontStyleOblique = .ApplyLater;
    pub const FontStyleItalic = .TrackParms;
    pub const FontStretchDefault = .False;
    pub const FontStretchUltraCondensed = .ApplyLater;
    pub const FontStretchExtraCondensed = .TrackParms;
    pub const FontStretchCondensed = .CacheParms;
    pub const FontStretchSemiCondensed = .ApplyTmp;
    pub const FontStretchNormal = .SelectionRow;
    pub const FontStretchSemiExpanded = .SelectionBlock;
    pub const FontStretchExpanded = .SelectionInlineShape;
    pub const FontStretchExtraExpanded = .DisableSmartFont;
    pub const FontStretchUltraExpanded = .EnableSmartFont;
    pub const FontWeightDefault = .False;
    pub const FontWeightRegular = .FontWeightNormal;
    pub const FontWeightHeavy = .FontWeightBlack;
    pub const DocMathBuild = .FindStory;
    pub const MathLMargin = .ReplaceStory;
    pub const EllipsisNone = .False;
    pub const EllipsisEnd = .ApplyLater;
    pub const EllipsisWord = .CacheParms;
    pub const EllipsisPresent = .ApplyLater;
    pub const VTopCell = .ApplyLater;
    pub const VLowCell = .TrackParms;
    pub const HStartCell = .ApplyTmp;
    pub const HContCell = .DisableSmartFont;
    pub const RowUpdate = .ApplyLater;
    pub const RowApplyDefault = .False;
    pub const CellStructureChangeOnly = .ApplyLater;
};
pub const tomFalse = tomConstants.False;
pub const tomTrue = tomConstants.True;
pub const tomUndefined = tomConstants.Undefined;
pub const tomToggle = tomConstants.Toggle;
pub const tomAutoColor = tomConstants.AutoColor;
pub const tomDefault = tomConstants.Default;
pub const tomSuspend = tomConstants.Suspend;
pub const tomResume = tomConstants.Resume;
pub const tomApplyNow = tomConstants.False;
pub const tomApplyLater = tomConstants.ApplyLater;
pub const tomTrackParms = tomConstants.TrackParms;
pub const tomCacheParms = tomConstants.CacheParms;
pub const tomApplyTmp = tomConstants.ApplyTmp;
pub const tomDisableSmartFont = tomConstants.DisableSmartFont;
pub const tomEnableSmartFont = tomConstants.EnableSmartFont;
pub const tomUsePoints = tomConstants.UsePoints;
pub const tomUseTwips = tomConstants.UseTwips;
pub const tomBackward = tomConstants.Backward;
pub const tomForward = tomConstants.Forward;
pub const tomMove = tomConstants.False;
pub const tomExtend = tomConstants.ApplyLater;
pub const tomNoSelection = tomConstants.False;
pub const tomSelectionIP = tomConstants.ApplyLater;
pub const tomSelectionNormal = tomConstants.TrackParms;
pub const tomSelectionFrame = tomConstants.CacheParms;
pub const tomSelectionColumn = tomConstants.ApplyTmp;
pub const tomSelectionRow = tomConstants.SelectionRow;
pub const tomSelectionBlock = tomConstants.SelectionBlock;
pub const tomSelectionInlineShape = tomConstants.SelectionInlineShape;
pub const tomSelectionShape = tomConstants.DisableSmartFont;
pub const tomSelStartActive = tomConstants.ApplyLater;
pub const tomSelAtEOL = tomConstants.TrackParms;
pub const tomSelOvertype = tomConstants.ApplyTmp;
pub const tomSelActive = tomConstants.DisableSmartFont;
pub const tomSelReplace = tomConstants.SelReplace;
pub const tomEnd = tomConstants.False;
pub const tomStart = tomConstants.Start;
pub const tomCollapseEnd = tomConstants.False;
pub const tomCollapseStart = tomConstants.ApplyLater;
pub const tomClientCoord = tomConstants.ClientCoord;
pub const tomAllowOffClient = tomConstants.AllowOffClient;
pub const tomTransform = tomConstants.Transform;
pub const tomObjectArg = tomConstants.ObjectArg;
pub const tomAtEnd = tomConstants.AtEnd;
pub const tomNone = tomConstants.False;
pub const tomSingle = tomConstants.ApplyLater;
pub const tomWords = tomConstants.TrackParms;
pub const tomDouble = tomConstants.CacheParms;
pub const tomDotted = tomConstants.ApplyTmp;
pub const tomDash = tomConstants.SelectionRow;
pub const tomDashDot = tomConstants.SelectionBlock;
pub const tomDashDotDot = tomConstants.SelectionInlineShape;
pub const tomWave = tomConstants.DisableSmartFont;
pub const tomThick = tomConstants.EnableSmartFont;
pub const tomHair = tomConstants.UsePoints;
pub const tomDoubleWave = tomConstants.UseTwips;
pub const tomHeavyWave = tomConstants.HeavyWave;
pub const tomLongDash = tomConstants.LongDash;
pub const tomThickDash = tomConstants.ThickDash;
pub const tomThickDashDot = tomConstants.ThickDashDot;
pub const tomThickDashDotDot = tomConstants.SelReplace;
pub const tomThickDotted = tomConstants.ThickDotted;
pub const tomThickLongDash = tomConstants.ThickLongDash;
pub const tomLineSpaceSingle = tomConstants.False;
pub const tomLineSpace1pt5 = tomConstants.ApplyLater;
pub const tomLineSpaceDouble = tomConstants.TrackParms;
pub const tomLineSpaceAtLeast = tomConstants.CacheParms;
pub const tomLineSpaceExactly = tomConstants.ApplyTmp;
pub const tomLineSpaceMultiple = tomConstants.SelectionRow;
pub const tomLineSpacePercent = tomConstants.SelectionBlock;
pub const tomAlignLeft = tomConstants.False;
pub const tomAlignCenter = tomConstants.ApplyLater;
pub const tomAlignRight = tomConstants.TrackParms;
pub const tomAlignJustify = tomConstants.CacheParms;
pub const tomAlignDecimal = tomConstants.CacheParms;
pub const tomAlignBar = tomConstants.ApplyTmp;
pub const tomDefaultTab = tomConstants.SelectionRow;
pub const tomAlignInterWord = tomConstants.CacheParms;
pub const tomAlignNewspaper = tomConstants.ApplyTmp;
pub const tomAlignInterLetter = tomConstants.SelectionRow;
pub const tomAlignScaled = tomConstants.SelectionBlock;
pub const tomSpaces = tomConstants.False;
pub const tomDots = tomConstants.ApplyLater;
pub const tomDashes = tomConstants.TrackParms;
pub const tomLines = tomConstants.CacheParms;
pub const tomThickLines = tomConstants.ApplyTmp;
pub const tomEquals = tomConstants.SelectionRow;
pub const tomTabBack = tomConstants.TabBack;
pub const tomTabNext = tomConstants.TabNext;
pub const tomTabHere = tomConstants.True;
pub const tomListNone = tomConstants.False;
pub const tomListBullet = tomConstants.ApplyLater;
pub const tomListNumberAsArabic = tomConstants.TrackParms;
pub const tomListNumberAsLCLetter = tomConstants.CacheParms;
pub const tomListNumberAsUCLetter = tomConstants.ApplyTmp;
pub const tomListNumberAsLCRoman = tomConstants.SelectionRow;
pub const tomListNumberAsUCRoman = tomConstants.SelectionBlock;
pub const tomListNumberAsSequence = tomConstants.SelectionInlineShape;
pub const tomListNumberedCircle = tomConstants.DisableSmartFont;
pub const tomListNumberedBlackCircleWingding = tomConstants.EnableSmartFont;
pub const tomListNumberedWhiteCircleWingding = tomConstants.UsePoints;
pub const tomListNumberedArabicWide = tomConstants.UseTwips;
pub const tomListNumberedChS = tomConstants.HeavyWave;
pub const tomListNumberedChT = tomConstants.LongDash;
pub const tomListNumberedJpnChS = tomConstants.ThickDash;
pub const tomListNumberedJpnKor = tomConstants.ThickDashDot;
pub const tomListNumberedArabic1 = tomConstants.SelReplace;
pub const tomListNumberedArabic2 = tomConstants.ThickDotted;
pub const tomListNumberedHebrew = tomConstants.ThickLongDash;
pub const tomListNumberedThaiAlpha = tomConstants.ListNumberedThaiAlpha;
pub const tomListNumberedThaiNum = tomConstants.ListNumberedThaiNum;
pub const tomListNumberedHindiAlpha = tomConstants.ListNumberedHindiAlpha;
pub const tomListNumberedHindiAlpha1 = tomConstants.ListNumberedHindiAlpha1;
pub const tomListNumberedHindiNum = tomConstants.ListNumberedHindiNum;
pub const tomListParentheses = tomConstants.ListParentheses;
pub const tomListPeriod = tomConstants.ListPeriod;
pub const tomListPlain = tomConstants.ListPlain;
pub const tomListNoNumber = tomConstants.ListNoNumber;
pub const tomListMinus = tomConstants.ListMinus;
pub const tomIgnoreNumberStyle = tomConstants.IgnoreNumberStyle;
pub const tomParaStyleNormal = tomConstants.True;
pub const tomParaStyleHeading1 = tomConstants.TabNext;
pub const tomParaStyleHeading2 = tomConstants.TabBack;
pub const tomParaStyleHeading3 = tomConstants.ParaStyleHeading3;
pub const tomParaStyleHeading4 = tomConstants.ParaStyleHeading4;
pub const tomParaStyleHeading5 = tomConstants.ParaStyleHeading5;
pub const tomParaStyleHeading6 = tomConstants.ParaStyleHeading6;
pub const tomParaStyleHeading7 = tomConstants.ParaStyleHeading7;
pub const tomParaStyleHeading8 = tomConstants.ParaStyleHeading8;
pub const tomParaStyleHeading9 = tomConstants.ParaStyleHeading9;
pub const tomCharacter = tomConstants.ApplyLater;
pub const tomWord = tomConstants.TrackParms;
pub const tomSentence = tomConstants.CacheParms;
pub const tomParagraph = tomConstants.ApplyTmp;
pub const tomLine = tomConstants.SelectionRow;
pub const tomStory = tomConstants.SelectionBlock;
pub const tomScreen = tomConstants.SelectionInlineShape;
pub const tomSection = tomConstants.DisableSmartFont;
pub const tomTableColumn = tomConstants.EnableSmartFont;
pub const tomColumn = tomConstants.EnableSmartFont;
pub const tomRow = tomConstants.UsePoints;
pub const tomWindow = tomConstants.UseTwips;
pub const tomCell = tomConstants.HeavyWave;
pub const tomCharFormat = tomConstants.LongDash;
pub const tomParaFormat = tomConstants.ThickDash;
pub const tomTable = tomConstants.ThickDashDot;
pub const tomObject = tomConstants.SelReplace;
pub const tomPage = tomConstants.ThickDotted;
pub const tomHardParagraph = tomConstants.ThickLongDash;
pub const tomCluster = tomConstants.ListNumberedThaiAlpha;
pub const tomInlineObject = tomConstants.ListNumberedThaiNum;
pub const tomInlineObjectArg = tomConstants.ListNumberedHindiAlpha;
pub const tomLeafLine = tomConstants.ListNumberedHindiAlpha1;
pub const tomLayoutColumn = tomConstants.ListNumberedHindiNum;
pub const tomProcessId = tomConstants.ProcessId;
pub const tomMatchWord = tomConstants.TrackParms;
pub const tomMatchCase = tomConstants.ApplyTmp;
pub const tomMatchPattern = tomConstants.DisableSmartFont;
pub const tomUnknownStory = tomConstants.False;
pub const tomMainTextStory = tomConstants.ApplyLater;
pub const tomFootnotesStory = tomConstants.TrackParms;
pub const tomEndnotesStory = tomConstants.CacheParms;
pub const tomCommentsStory = tomConstants.ApplyTmp;
pub const tomTextFrameStory = tomConstants.SelectionRow;
pub const tomEvenPagesHeaderStory = tomConstants.SelectionBlock;
pub const tomPrimaryHeaderStory = tomConstants.SelectionInlineShape;
pub const tomEvenPagesFooterStory = tomConstants.DisableSmartFont;
pub const tomPrimaryFooterStory = tomConstants.EnableSmartFont;
pub const tomFirstPageHeaderStory = tomConstants.UsePoints;
pub const tomFirstPageFooterStory = tomConstants.UseTwips;
pub const tomScratchStory = tomConstants.ScratchStory;
pub const tomFindStory = tomConstants.FindStory;
pub const tomReplaceStory = tomConstants.ReplaceStory;
pub const tomStoryInactive = tomConstants.False;
pub const tomStoryActiveDisplay = tomConstants.ApplyLater;
pub const tomStoryActiveUI = tomConstants.TrackParms;
pub const tomStoryActiveDisplayUI = tomConstants.CacheParms;
pub const tomNoAnimation = tomConstants.False;
pub const tomLasVegasLights = tomConstants.ApplyLater;
pub const tomBlinkingBackground = tomConstants.TrackParms;
pub const tomSparkleText = tomConstants.CacheParms;
pub const tomMarchingBlackAnts = tomConstants.ApplyTmp;
pub const tomMarchingRedAnts = tomConstants.SelectionRow;
pub const tomShimmer = tomConstants.SelectionBlock;
pub const tomWipeDown = tomConstants.SelectionInlineShape;
pub const tomWipeRight = tomConstants.DisableSmartFont;
pub const tomAnimationMax = tomConstants.DisableSmartFont;
pub const tomLowerCase = tomConstants.False;
pub const tomUpperCase = tomConstants.ApplyLater;
pub const tomTitleCase = tomConstants.TrackParms;
pub const tomSentenceCase = tomConstants.ApplyTmp;
pub const tomToggleCase = tomConstants.SelectionRow;
pub const tomReadOnly = tomConstants.ClientCoord;
pub const tomShareDenyRead = tomConstants.AllowOffClient;
pub const tomShareDenyWrite = tomConstants.Transform;
pub const tomPasteFile = tomConstants.AtEnd;
pub const tomCreateNew = tomConstants.SelReplace;
pub const tomCreateAlways = tomConstants.Start;
pub const tomOpenExisting = tomConstants.OpenExisting;
pub const tomOpenAlways = tomConstants.OpenAlways;
pub const tomTruncateExisting = tomConstants.TruncateExisting;
pub const tomRTF = tomConstants.ApplyLater;
pub const tomText = tomConstants.TrackParms;
pub const tomHTML = tomConstants.CacheParms;
pub const tomWordDocument = tomConstants.ApplyTmp;
pub const tomBold = tomConstants.Bold;
pub const tomItalic = tomConstants.Italic;
pub const tomUnderline = tomConstants.Underline;
pub const tomStrikeout = tomConstants.Strikeout;
pub const tomProtected = tomConstants.Protected;
pub const tomLink = tomConstants.Link;
pub const tomSmallCaps = tomConstants.SmallCaps;
pub const tomAllCaps = tomConstants.AllCaps;
pub const tomHidden = tomConstants.Hidden;
pub const tomOutline = tomConstants.Outline;
pub const tomShadow = tomConstants.Shadow;
pub const tomEmboss = tomConstants.Emboss;
pub const tomImprint = tomConstants.Imprint;
pub const tomDisabled = tomConstants.Disabled;
pub const tomRevised = tomConstants.Revised;
pub const tomSubscriptCF = tomConstants.SubscriptCF;
pub const tomSuperscriptCF = tomConstants.SuperscriptCF;
pub const tomFontBound = tomConstants.FontBound;
pub const tomLinkProtected = tomConstants.LinkProtected;
pub const tomInlineObjectStart = tomConstants.InlineObjectStart;
pub const tomExtendedChar = tomConstants.ExtendedChar;
pub const tomAutoBackColor = tomConstants.AutoBackColor;
pub const tomMathZoneNoBuildUp = tomConstants.MathZoneNoBuildUp;
pub const tomMathZone = tomConstants.MathZone;
pub const tomMathZoneOrdinary = tomConstants.MathZoneOrdinary;
pub const tomAutoTextColor = tomConstants.AutoTextColor;
pub const tomMathZoneDisplay = tomConstants.ListNoNumber;
pub const tomParaEffectRTL = tomConstants.ApplyLater;
pub const tomParaEffectKeep = tomConstants.TrackParms;
pub const tomParaEffectKeepNext = tomConstants.ApplyTmp;
pub const tomParaEffectPageBreakBefore = tomConstants.DisableSmartFont;
pub const tomParaEffectNoLineNumber = tomConstants.SelReplace;
pub const tomParaEffectNoWidowControl = tomConstants.Start;
pub const tomParaEffectDoNotHyphen = tomConstants.OpenAlways;
pub const tomParaEffectSideBySide = tomConstants.FindStory;
pub const tomParaEffectCollapsed = tomConstants.ClientCoord;
pub const tomParaEffectOutlineLevel = tomConstants.AllowOffClient;
pub const tomParaEffectBox = tomConstants.Transform;
pub const tomParaEffectTableRowDelimiter = tomConstants.AtEnd;
pub const tomParaEffectTable = tomConstants.ParaEffectTable;
pub const tomModWidthPairs = tomConstants.ApplyLater;
pub const tomModWidthSpace = tomConstants.TrackParms;
pub const tomAutoSpaceAlpha = tomConstants.ApplyTmp;
pub const tomAutoSpaceNumeric = tomConstants.DisableSmartFont;
pub const tomAutoSpaceParens = tomConstants.SelReplace;
pub const tomEmbeddedFont = tomConstants.Start;
pub const tomDoublestrike = tomConstants.OpenAlways;
pub const tomOverlapping = tomConstants.FindStory;
pub const tomNormalCaret = tomConstants.False;
pub const tomKoreanBlockCaret = tomConstants.ApplyLater;
pub const tomNullCaret = tomConstants.TrackParms;
pub const tomIncludeInset = tomConstants.ApplyLater;
pub const tomUnicodeBiDi = tomConstants.ApplyLater;
pub const tomMathCFCheck = tomConstants.ApplyTmp;
pub const tomUnlink = tomConstants.DisableSmartFont;
pub const tomUnhide = tomConstants.SelReplace;
pub const tomCheckTextLimit = tomConstants.Start;
pub const tomIgnoreCurrentFont = tomConstants.False;
pub const tomMatchCharRep = tomConstants.ApplyLater;
pub const tomMatchFontSignature = tomConstants.TrackParms;
pub const tomMatchAscii = tomConstants.ApplyTmp;
pub const tomGetHeightOnly = tomConstants.DisableSmartFont;
pub const tomMatchMathFont = tomConstants.SelReplace;
pub const tomCharset = tomConstants.Charset;
pub const tomCharRepFromLcid = tomConstants.CharRepFromLcid;
pub const tomAnsi = tomConstants.False;
pub const tomEastEurope = tomConstants.ApplyLater;
pub const tomCyrillic = tomConstants.TrackParms;
pub const tomGreek = tomConstants.CacheParms;
pub const tomTurkish = tomConstants.ApplyTmp;
pub const tomHebrew = tomConstants.SelectionRow;
pub const tomArabic = tomConstants.SelectionBlock;
pub const tomBaltic = tomConstants.SelectionInlineShape;
pub const tomVietnamese = tomConstants.DisableSmartFont;
pub const tomDefaultCharRep = tomConstants.EnableSmartFont;
pub const tomSymbol = tomConstants.UsePoints;
pub const tomThai = tomConstants.UseTwips;
pub const tomShiftJIS = tomConstants.HeavyWave;
pub const tomGB2312 = tomConstants.LongDash;
pub const tomHangul = tomConstants.ThickDash;
pub const tomBIG5 = tomConstants.ThickDashDot;
pub const tomPC437 = tomConstants.SelReplace;
pub const tomOEM = tomConstants.ThickDotted;
pub const tomMac = tomConstants.ThickLongDash;
pub const tomArmenian = tomConstants.ListNumberedThaiAlpha;
pub const tomSyriac = tomConstants.ListNumberedThaiNum;
pub const tomThaana = tomConstants.ListNumberedHindiAlpha;
pub const tomDevanagari = tomConstants.ListNumberedHindiAlpha1;
pub const tomBengali = tomConstants.ListNumberedHindiNum;
pub const tomGurmukhi = tomConstants.Gurmukhi;
pub const tomGujarati = tomConstants.Gujarati;
pub const tomOriya = tomConstants.Oriya;
pub const tomTamil = tomConstants.Tamil;
pub const tomTelugu = tomConstants.Telugu;
pub const tomKannada = tomConstants.Kannada;
pub const tomMalayalam = tomConstants.Malayalam;
pub const tomSinhala = tomConstants.Sinhala;
pub const tomLao = tomConstants.Start;
pub const tomTibetan = tomConstants.Tibetan;
pub const tomMyanmar = tomConstants.Myanmar;
pub const tomGeorgian = tomConstants.Georgian;
pub const tomJamo = tomConstants.Jamo;
pub const tomEthiopic = tomConstants.Ethiopic;
pub const tomCherokee = tomConstants.Cherokee;
pub const tomAboriginal = tomConstants.Aboriginal;
pub const tomOgham = tomConstants.Ogham;
pub const tomRunic = tomConstants.Runic;
pub const tomKhmer = tomConstants.Khmer;
pub const tomMongolian = tomConstants.Mongolian;
pub const tomBraille = tomConstants.Braille;
pub const tomYi = tomConstants.Yi;
pub const tomLimbu = tomConstants.Limbu;
pub const tomTaiLe = tomConstants.TaiLe;
pub const tomNewTaiLue = tomConstants.OpenExisting;
pub const tomSylotiNagri = tomConstants.SylotiNagri;
pub const tomKharoshthi = tomConstants.Kharoshthi;
pub const tomKayahli = tomConstants.Kayahli;
pub const tomUsymbol = tomConstants.Usymbol;
pub const tomEmoji = tomConstants.Emoji;
pub const tomGlagolitic = tomConstants.Glagolitic;
pub const tomLisu = tomConstants.Lisu;
pub const tomVai = tomConstants.Vai;
pub const tomNKo = tomConstants.NKo;
pub const tomOsmanya = tomConstants.Osmanya;
pub const tomPhagsPa = tomConstants.PhagsPa;
pub const tomGothic = tomConstants.Gothic;
pub const tomDeseret = tomConstants.Deseret;
pub const tomTifinagh = tomConstants.Tifinagh;
pub const tomCharRepMax = tomConstants.CharRepMax;
pub const tomRE10Mode = tomConstants.ApplyLater;
pub const tomUseAtFont = tomConstants.TrackParms;
pub const tomTextFlowMask = tomConstants.HeavyWave;
pub const tomTextFlowES = tomConstants.False;
pub const tomTextFlowSW = tomConstants.ApplyTmp;
pub const tomTextFlowWN = tomConstants.DisableSmartFont;
pub const tomTextFlowNE = tomConstants.HeavyWave;
pub const tomNoIME = tomConstants.ListMinus;
pub const tomSelfIME = tomConstants.ListNoNumber;
pub const tomNoUpScroll = tomConstants.ListParentheses;
pub const tomNoVpScroll = tomConstants.ListNoNumber;
pub const tomNoLink = tomConstants.False;
pub const tomClientLink = tomConstants.ApplyLater;
pub const tomFriendlyLinkName = tomConstants.TrackParms;
pub const tomFriendlyLinkAddress = tomConstants.CacheParms;
pub const tomAutoLinkURL = tomConstants.ApplyTmp;
pub const tomAutoLinkEmail = tomConstants.SelectionRow;
pub const tomAutoLinkPhone = tomConstants.SelectionBlock;
pub const tomAutoLinkPath = tomConstants.SelectionInlineShape;
pub const tomCompressNone = tomConstants.False;
pub const tomCompressPunctuation = tomConstants.ApplyLater;
pub const tomCompressPunctuationAndKana = tomConstants.TrackParms;
pub const tomCompressMax = tomConstants.TrackParms;
pub const tomUnderlinePositionAuto = tomConstants.False;
pub const tomUnderlinePositionBelow = tomConstants.ApplyLater;
pub const tomUnderlinePositionAbove = tomConstants.TrackParms;
pub const tomUnderlinePositionMax = tomConstants.TrackParms;
pub const tomFontAlignmentAuto = tomConstants.False;
pub const tomFontAlignmentTop = tomConstants.ApplyLater;
pub const tomFontAlignmentBaseline = tomConstants.TrackParms;
pub const tomFontAlignmentBottom = tomConstants.CacheParms;
pub const tomFontAlignmentCenter = tomConstants.ApplyTmp;
pub const tomFontAlignmentMax = tomConstants.ApplyTmp;
pub const tomRubyBelow = tomConstants.FindStory;
pub const tomRubyAlignCenter = tomConstants.False;
pub const tomRubyAlign010 = tomConstants.ApplyLater;
pub const tomRubyAlign121 = tomConstants.TrackParms;
pub const tomRubyAlignLeft = tomConstants.CacheParms;
pub const tomRubyAlignRight = tomConstants.ApplyTmp;
pub const tomLimitsDefault = tomConstants.False;
pub const tomLimitsUnderOver = tomConstants.ApplyLater;
pub const tomLimitsSubSup = tomConstants.TrackParms;
pub const tomUpperLimitAsSuperScript = tomConstants.CacheParms;
pub const tomLimitsOpposite = tomConstants.ApplyTmp;
pub const tomShowLLimPlaceHldr = tomConstants.DisableSmartFont;
pub const tomShowULimPlaceHldr = tomConstants.SelReplace;
pub const tomDontGrowWithContent = tomConstants.OpenAlways;
pub const tomGrowWithContent = tomConstants.FindStory;
pub const tomSubSupAlign = tomConstants.ApplyLater;
pub const tomLimitAlignMask = tomConstants.CacheParms;
pub const tomLimitAlignCenter = tomConstants.False;
pub const tomLimitAlignLeft = tomConstants.ApplyLater;
pub const tomLimitAlignRight = tomConstants.TrackParms;
pub const tomShowDegPlaceHldr = tomConstants.DisableSmartFont;
pub const tomAlignDefault = tomConstants.False;
pub const tomAlignMatchAscentDescent = tomConstants.TrackParms;
pub const tomMathVariant = tomConstants.Start;
pub const tomStyleDefault = tomConstants.False;
pub const tomStyleScriptScriptCramped = tomConstants.ApplyLater;
pub const tomStyleScriptScript = tomConstants.TrackParms;
pub const tomStyleScriptCramped = tomConstants.CacheParms;
pub const tomStyleScript = tomConstants.ApplyTmp;
pub const tomStyleTextCramped = tomConstants.SelectionRow;
pub const tomStyleText = tomConstants.SelectionBlock;
pub const tomStyleDisplayCramped = tomConstants.SelectionInlineShape;
pub const tomStyleDisplay = tomConstants.DisableSmartFont;
pub const tomMathRelSize = tomConstants.OpenAlways;
pub const tomDecDecSize = tomConstants.DecDecSize;
pub const tomDecSize = tomConstants.DecSize;
pub const tomIncSize = tomConstants.IncSize;
pub const tomIncIncSize = tomConstants.IncIncSize;
pub const tomGravityUI = tomConstants.False;
pub const tomGravityBack = tomConstants.ApplyLater;
pub const tomGravityFore = tomConstants.TrackParms;
pub const tomGravityIn = tomConstants.CacheParms;
pub const tomGravityOut = tomConstants.ApplyTmp;
pub const tomGravityBackward = tomConstants.GravityBackward;
pub const tomGravityForward = tomConstants.CharRepFromLcid;
pub const tomAdjustCRLF = tomConstants.ApplyLater;
pub const tomUseCRLF = tomConstants.TrackParms;
pub const tomTextize = tomConstants.ApplyTmp;
pub const tomAllowFinalEOP = tomConstants.DisableSmartFont;
pub const tomFoldMathAlpha = tomConstants.SelReplace;
pub const tomNoHidden = tomConstants.Start;
pub const tomIncludeNumbering = tomConstants.OpenAlways;
pub const tomTranslateTableCell = tomConstants.FindStory;
pub const tomNoMathZoneBrackets = tomConstants.ClientCoord;
pub const tomConvertMathChar = tomConstants.AllowOffClient;
pub const tomNoUCGreekItalic = tomConstants.Transform;
pub const tomAllowMathBold = tomConstants.ObjectArg;
pub const tomLanguageTag = tomConstants.AtEnd;
pub const tomConvertRTF = tomConstants.ConvertRTF;
pub const tomApplyRtfDocProps = tomConstants.ParaEffectTable;
pub const tomPhantomShow = tomConstants.ApplyLater;
pub const tomPhantomZeroWidth = tomConstants.TrackParms;
pub const tomPhantomZeroAscent = tomConstants.ApplyTmp;
pub const tomPhantomZeroDescent = tomConstants.DisableSmartFont;
pub const tomPhantomTransparent = tomConstants.SelReplace;
pub const tomPhantomASmash = tomConstants.SelectionRow;
pub const tomPhantomDSmash = tomConstants.EnableSmartFont;
pub const tomPhantomHSmash = tomConstants.CacheParms;
pub const tomPhantomSmash = tomConstants.LongDash;
pub const tomPhantomHorz = tomConstants.HeavyWave;
pub const tomPhantomVert = tomConstants.TrackParms;
pub const tomBoxHideTop = tomConstants.ApplyLater;
pub const tomBoxHideBottom = tomConstants.TrackParms;
pub const tomBoxHideLeft = tomConstants.ApplyTmp;
pub const tomBoxHideRight = tomConstants.DisableSmartFont;
pub const tomBoxStrikeH = tomConstants.SelReplace;
pub const tomBoxStrikeV = tomConstants.Start;
pub const tomBoxStrikeTLBR = tomConstants.OpenAlways;
pub const tomBoxStrikeBLTR = tomConstants.FindStory;
pub const tomBoxAlignCenter = tomConstants.ApplyLater;
pub const tomSpaceMask = tomConstants.Telugu;
pub const tomSpaceDefault = tomConstants.False;
pub const tomSpaceUnary = tomConstants.ApplyTmp;
pub const tomSpaceBinary = tomConstants.DisableSmartFont;
pub const tomSpaceRelational = tomConstants.HeavyWave;
pub const tomSpaceSkip = tomConstants.SelReplace;
pub const tomSpaceOrd = tomConstants.ListNumberedThaiNum;
pub const tomSpaceDifferential = tomConstants.Gurmukhi;
pub const tomSizeText = tomConstants.Start;
pub const tomSizeScript = tomConstants.OpenAlways;
pub const tomSizeScriptScript = tomConstants.SizeScriptScript;
pub const tomNoBreak = tomConstants.FindStory;
pub const tomTransparentForPositioning = tomConstants.ClientCoord;
pub const tomTransparentForSpacing = tomConstants.AllowOffClient;
pub const tomStretchCharBelow = tomConstants.False;
pub const tomStretchCharAbove = tomConstants.ApplyLater;
pub const tomStretchBaseBelow = tomConstants.TrackParms;
pub const tomStretchBaseAbove = tomConstants.CacheParms;
pub const tomMatrixAlignMask = tomConstants.CacheParms;
pub const tomMatrixAlignCenter = tomConstants.False;
pub const tomMatrixAlignTopRow = tomConstants.ApplyLater;
pub const tomMatrixAlignBottomRow = tomConstants.CacheParms;
pub const tomShowMatPlaceHldr = tomConstants.DisableSmartFont;
pub const tomEqArrayLayoutWidth = tomConstants.ApplyLater;
pub const tomEqArrayAlignMask = tomConstants.HeavyWave;
pub const tomEqArrayAlignCenter = tomConstants.False;
pub const tomEqArrayAlignTopRow = tomConstants.ApplyTmp;
pub const tomEqArrayAlignBottomRow = tomConstants.HeavyWave;
pub const tomMathManualBreakMask = tomConstants.ScratchStory;
pub const tomMathBreakLeft = tomConstants.MathBreakLeft;
pub const tomMathBreakCenter = tomConstants.MathBreakCenter;
pub const tomMathBreakRight = tomConstants.ScratchStory;
pub const tomMathEqAlign = tomConstants.FindStory;
pub const tomMathArgShadingStart = tomConstants.MathArgShadingStart;
pub const tomMathArgShadingEnd = tomConstants.MathArgShadingEnd;
pub const tomMathObjShadingStart = tomConstants.MathObjShadingStart;
pub const tomMathObjShadingEnd = tomConstants.MathObjShadingEnd;
pub const tomFunctionTypeNone = tomConstants.False;
pub const tomFunctionTypeTakesArg = tomConstants.ApplyLater;
pub const tomFunctionTypeTakesLim = tomConstants.TrackParms;
pub const tomFunctionTypeTakesLim2 = tomConstants.CacheParms;
pub const tomFunctionTypeIsLim = tomConstants.ApplyTmp;
pub const tomMathParaAlignDefault = tomConstants.False;
pub const tomMathParaAlignCenterGroup = tomConstants.ApplyLater;
pub const tomMathParaAlignCenter = tomConstants.TrackParms;
pub const tomMathParaAlignLeft = tomConstants.CacheParms;
pub const tomMathParaAlignRight = tomConstants.ApplyTmp;
pub const tomMathDispAlignMask = tomConstants.CacheParms;
pub const tomMathDispAlignCenterGroup = tomConstants.False;
pub const tomMathDispAlignCenter = tomConstants.ApplyLater;
pub const tomMathDispAlignLeft = tomConstants.TrackParms;
pub const tomMathDispAlignRight = tomConstants.CacheParms;
pub const tomMathDispIntUnderOver = tomConstants.ApplyTmp;
pub const tomMathDispFracTeX = tomConstants.DisableSmartFont;
pub const tomMathDispNaryGrow = tomConstants.SelReplace;
pub const tomMathDocEmptyArgMask = tomConstants.SizeScriptScript;
pub const tomMathDocEmptyArgAuto = tomConstants.False;
pub const tomMathDocEmptyArgAlways = tomConstants.Start;
pub const tomMathDocEmptyArgNever = tomConstants.OpenAlways;
pub const tomMathDocSbSpOpUnchanged = tomConstants.FindStory;
pub const tomMathDocDiffMask = tomConstants.MathDocDiffMask;
pub const tomMathDocDiffDefault = tomConstants.False;
pub const tomMathDocDiffUpright = tomConstants.ClientCoord;
pub const tomMathDocDiffItalic = tomConstants.AllowOffClient;
pub const tomMathDocDiffOpenItalic = tomConstants.MathDocDiffMask;
pub const tomMathDispNarySubSup = tomConstants.Transform;
pub const tomMathDispDef = tomConstants.ObjectArg;
pub const tomMathEnableRtl = tomConstants.AtEnd;
pub const tomMathBrkBinMask = tomConstants.ListPlain;
pub const tomMathBrkBinBefore = tomConstants.False;
pub const tomMathBrkBinAfter = tomConstants.ListParentheses;
pub const tomMathBrkBinDup = tomConstants.ListPeriod;
pub const tomMathBrkBinSubMask = tomConstants.MathBrkBinSubMask;
pub const tomMathBrkBinSubMM = tomConstants.False;
pub const tomMathBrkBinSubPM = tomConstants.ListNoNumber;
pub const tomMathBrkBinSubMP = tomConstants.ListMinus;
pub const tomSelRange = tomConstants.SelRange;
pub const tomHstring = tomConstants.MathObjShadingEnd;
pub const tomFontPropTeXStyle = tomConstants.FontPropTeXStyle;
pub const tomFontPropAlign = tomConstants.FontPropAlign;
pub const tomFontStretch = tomConstants.FontStretch;
pub const tomFontStyle = tomConstants.FontStyle;
pub const tomFontStyleUpright = tomConstants.False;
pub const tomFontStyleOblique = tomConstants.ApplyLater;
pub const tomFontStyleItalic = tomConstants.TrackParms;
pub const tomFontStretchDefault = tomConstants.False;
pub const tomFontStretchUltraCondensed = tomConstants.ApplyLater;
pub const tomFontStretchExtraCondensed = tomConstants.TrackParms;
pub const tomFontStretchCondensed = tomConstants.CacheParms;
pub const tomFontStretchSemiCondensed = tomConstants.ApplyTmp;
pub const tomFontStretchNormal = tomConstants.SelectionRow;
pub const tomFontStretchSemiExpanded = tomConstants.SelectionBlock;
pub const tomFontStretchExpanded = tomConstants.SelectionInlineShape;
pub const tomFontStretchExtraExpanded = tomConstants.DisableSmartFont;
pub const tomFontStretchUltraExpanded = tomConstants.EnableSmartFont;
pub const tomFontWeightDefault = tomConstants.False;
pub const tomFontWeightThin = tomConstants.FontWeightThin;
pub const tomFontWeightExtraLight = tomConstants.FontWeightExtraLight;
pub const tomFontWeightLight = tomConstants.FontWeightLight;
pub const tomFontWeightNormal = tomConstants.FontWeightNormal;
pub const tomFontWeightRegular = tomConstants.FontWeightNormal;
pub const tomFontWeightMedium = tomConstants.FontWeightMedium;
pub const tomFontWeightSemiBold = tomConstants.FontWeightSemiBold;
pub const tomFontWeightBold = tomConstants.FontWeightBold;
pub const tomFontWeightExtraBold = tomConstants.FontWeightExtraBold;
pub const tomFontWeightBlack = tomConstants.FontWeightBlack;
pub const tomFontWeightHeavy = tomConstants.FontWeightBlack;
pub const tomFontWeightExtraBlack = tomConstants.FontWeightExtraBlack;
pub const tomParaPropMathAlign = tomConstants.ParaPropMathAlign;
pub const tomDocMathBuild = tomConstants.FindStory;
pub const tomMathLMargin = tomConstants.ReplaceStory;
pub const tomMathRMargin = tomConstants.MathRMargin;
pub const tomMathWrapIndent = tomConstants.MathWrapIndent;
pub const tomMathWrapRight = tomConstants.MathWrapRight;
pub const tomMathPostSpace = tomConstants.MathPostSpace;
pub const tomMathPreSpace = tomConstants.MathPreSpace;
pub const tomMathInterSpace = tomConstants.MathInterSpace;
pub const tomMathIntraSpace = tomConstants.MathIntraSpace;
pub const tomCanCopy = tomConstants.CanCopy;
pub const tomCanRedo = tomConstants.CanRedo;
pub const tomCanUndo = tomConstants.CanUndo;
pub const tomUndoLimit = tomConstants.UndoLimit;
pub const tomDocAutoLink = tomConstants.DocAutoLink;
pub const tomEllipsisMode = tomConstants.EllipsisMode;
pub const tomEllipsisState = tomConstants.EllipsisState;
pub const tomEllipsisNone = tomConstants.False;
pub const tomEllipsisEnd = tomConstants.ApplyLater;
pub const tomEllipsisWord = tomConstants.CacheParms;
pub const tomEllipsisPresent = tomConstants.ApplyLater;
pub const tomVTopCell = tomConstants.ApplyLater;
pub const tomVLowCell = tomConstants.TrackParms;
pub const tomHStartCell = tomConstants.ApplyTmp;
pub const tomHContCell = tomConstants.DisableSmartFont;
pub const tomRowUpdate = tomConstants.ApplyLater;
pub const tomRowApplyDefault = tomConstants.False;
pub const tomCellStructureChangeOnly = tomConstants.ApplyLater;
pub const tomRowHeightActual = tomConstants.RowHeightActual;

pub const OBJECTTYPE = enum(i32) {
    SimpleText = 0,
    Ruby = 1,
    HorzVert = 2,
    Warichu = 3,
    Eq = 9,
    Math = 10,
    Box = 11,
    BoxedFormula = 12,
    Brackets = 13,
    BracketsWithSeps = 14,
    EquationArray = 15,
    Fraction = 16,
    FunctionApply = 17,
    LeftSubSup = 18,
    LowerLimit = 19,
    Matrix = 20,
    Nary = 21,
    OpChar = 22,
    Overbar = 23,
    Phantom = 24,
    Radical = 25,
    SlashedFraction = 26,
    Stack = 27,
    StretchStack = 28,
    Subscript = 29,
    SubSup = 30,
    Superscript = 31,
    Underbar = 32,
    UpperLimit = 33,
    pub const Accent = .Math;
    pub const ObjectMax = .UpperLimit;
};
pub const tomSimpleText = OBJECTTYPE.SimpleText;
pub const tomRuby = OBJECTTYPE.Ruby;
pub const tomHorzVert = OBJECTTYPE.HorzVert;
pub const tomWarichu = OBJECTTYPE.Warichu;
pub const tomEq = OBJECTTYPE.Eq;
pub const tomMath = OBJECTTYPE.Math;
pub const tomAccent = OBJECTTYPE.Math;
pub const tomBox = OBJECTTYPE.Box;
pub const tomBoxedFormula = OBJECTTYPE.BoxedFormula;
pub const tomBrackets = OBJECTTYPE.Brackets;
pub const tomBracketsWithSeps = OBJECTTYPE.BracketsWithSeps;
pub const tomEquationArray = OBJECTTYPE.EquationArray;
pub const tomFraction = OBJECTTYPE.Fraction;
pub const tomFunctionApply = OBJECTTYPE.FunctionApply;
pub const tomLeftSubSup = OBJECTTYPE.LeftSubSup;
pub const tomLowerLimit = OBJECTTYPE.LowerLimit;
pub const tomMatrix = OBJECTTYPE.Matrix;
pub const tomNary = OBJECTTYPE.Nary;
pub const tomOpChar = OBJECTTYPE.OpChar;
pub const tomOverbar = OBJECTTYPE.Overbar;
pub const tomPhantom = OBJECTTYPE.Phantom;
pub const tomRadical = OBJECTTYPE.Radical;
pub const tomSlashedFraction = OBJECTTYPE.SlashedFraction;
pub const tomStack = OBJECTTYPE.Stack;
pub const tomStretchStack = OBJECTTYPE.StretchStack;
pub const tomSubscript = OBJECTTYPE.Subscript;
pub const tomSubSup = OBJECTTYPE.SubSup;
pub const tomSuperscript = OBJECTTYPE.Superscript;
pub const tomUnderbar = OBJECTTYPE.Underbar;
pub const tomUpperLimit = OBJECTTYPE.UpperLimit;
pub const tomObjectMax = OBJECTTYPE.UpperLimit;

pub const MANCODE = enum(i32) {
    BOLD = 16,
    ITAL = 32,
    GREEK = 64,
    ROMN = 0,
    SCRP = 1,
    FRAK = 2,
    OPEN = 3,
    SANS = 4,
    MONO = 5,
    MATH = 6,
    ISOL = 7,
    INIT = 8,
    TAIL = 9,
    STRCH = 10,
    LOOP = 11,
    OPENA = 12,
};
pub const MBOLD = MANCODE.BOLD;
pub const MITAL = MANCODE.ITAL;
pub const MGREEK = MANCODE.GREEK;
pub const MROMN = MANCODE.ROMN;
pub const MSCRP = MANCODE.SCRP;
pub const MFRAK = MANCODE.FRAK;
pub const MOPEN = MANCODE.OPEN;
pub const MSANS = MANCODE.SANS;
pub const MMONO = MANCODE.MONO;
pub const MMATH = MANCODE.MATH;
pub const MISOL = MANCODE.ISOL;
pub const MINIT = MANCODE.INIT;
pub const MTAIL = MANCODE.TAIL;
pub const MSTRCH = MANCODE.STRCH;
pub const MLOOP = MANCODE.LOOP;
pub const MOPENA = MANCODE.OPENA;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITextDocument_Value = Guid.initString("8cc497c0-a1df-11ce-8098-00aa0047be5d");
pub const IID_ITextDocument = &IID_ITextDocument_Value;
pub const ITextDocument = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetName: *const fn(
            self: *const ITextDocument,
            pName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelection: *const fn(
            self: *const ITextDocument,
            ppSel: ?*?*ITextSelection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStoryCount: *const fn(
            self: *const ITextDocument,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStoryRanges: *const fn(
            self: *const ITextDocument,
            ppStories: ?*?*ITextStoryRanges,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSaved: *const fn(
            self: *const ITextDocument,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSaved: *const fn(
            self: *const ITextDocument,
            Value: tomConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultTabStop: *const fn(
            self: *const ITextDocument,
            pValue: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultTabStop: *const fn(
            self: *const ITextDocument,
            Value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        New: *const fn(
            self: *const ITextDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Open: *const fn(
            self: *const ITextDocument,
            pVar: ?*VARIANT,
            Flags: i32,
            CodePage: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn(
            self: *const ITextDocument,
            pVar: ?*VARIANT,
            Flags: i32,
            CodePage: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Freeze: *const fn(
            self: *const ITextDocument,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unfreeze: *const fn(
            self: *const ITextDocument,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginEditCollection: *const fn(
            self: *const ITextDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndEditCollection: *const fn(
            self: *const ITextDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Undo: *const fn(
            self: *const ITextDocument,
            Count: i32,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Redo: *const fn(
            self: *const ITextDocument,
            Count: i32,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Range: *const fn(
            self: *const ITextDocument,
            cpActive: i32,
            cpAnchor: i32,
            ppRange: ?*?*ITextRange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RangeFromPoint: *const fn(
            self: *const ITextDocument,
            x: i32,
            y: i32,
            ppRange: ?*?*ITextRange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GetName(self: *const ITextDocument, pName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetName(self, pName);
    }
    pub fn GetSelection(self: *const ITextDocument, ppSel: ?*?*ITextSelection) callconv(.Inline) HRESULT {
        return self.vtable.GetSelection(self, ppSel);
    }
    pub fn GetStoryCount(self: *const ITextDocument, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetStoryCount(self, pCount);
    }
    pub fn GetStoryRanges(self: *const ITextDocument, ppStories: ?*?*ITextStoryRanges) callconv(.Inline) HRESULT {
        return self.vtable.GetStoryRanges(self, ppStories);
    }
    pub fn GetSaved(self: *const ITextDocument, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetSaved(self, pValue);
    }
    pub fn SetSaved(self: *const ITextDocument, Value: tomConstants) callconv(.Inline) HRESULT {
        return self.vtable.SetSaved(self, Value);
    }
    pub fn GetDefaultTabStop(self: *const ITextDocument, pValue: ?*f32) callconv(.Inline) HRESULT {
        return self.vtable.GetDefaultTabStop(self, pValue);
    }
    pub fn SetDefaultTabStop(self: *const ITextDocument, Value: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetDefaultTabStop(self, Value);
    }
    pub fn New(self: *const ITextDocument) callconv(.Inline) HRESULT {
        return self.vtable.New(self);
    }
    pub fn Open(self: *const ITextDocument, pVar: ?*VARIANT, Flags: i32, CodePage: i32) callconv(.Inline) HRESULT {
        return self.vtable.Open(self, pVar, Flags, CodePage);
    }
    pub fn Save(self: *const ITextDocument, pVar: ?*VARIANT, Flags: i32, CodePage: i32) callconv(.Inline) HRESULT {
        return self.vtable.Save(self, pVar, Flags, CodePage);
    }
    pub fn Freeze(self: *const ITextDocument, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.Freeze(self, pCount);
    }
    pub fn Unfreeze(self: *const ITextDocument, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.Unfreeze(self, pCount);
    }
    pub fn BeginEditCollection(self: *const ITextDocument) callconv(.Inline) HRESULT {
        return self.vtable.BeginEditCollection(self);
    }
    pub fn EndEditCollection(self: *const ITextDocument) callconv(.Inline) HRESULT {
        return self.vtable.EndEditCollection(self);
    }
    pub fn Undo(self: *const ITextDocument, Count: i32, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.Undo(self, Count, pCount);
    }
    pub fn Redo(self: *const ITextDocument, Count: i32, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.Redo(self, Count, pCount);
    }
    pub fn Range(self: *const ITextDocument, cpActive: i32, cpAnchor: i32, ppRange: ?*?*ITextRange) callconv(.Inline) HRESULT {
        return self.vtable.Range(self, cpActive, cpAnchor, ppRange);
    }
    pub fn RangeFromPoint(self: *const ITextDocument, x: i32, y: i32, ppRange: ?*?*ITextRange) callconv(.Inline) HRESULT {
        return self.vtable.RangeFromPoint(self, x, y, ppRange);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITextRange_Value = Guid.initString("8cc497c2-a1df-11ce-8098-00aa0047be5d");
pub const IID_ITextRange = &IID_ITextRange_Value;
pub const ITextRange = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetText: *const fn(
            self: *const ITextRange,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetText: *const fn(
            self: *const ITextRange,
            bstr: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChar: *const fn(
            self: *const ITextRange,
            pChar: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetChar: *const fn(
            self: *const ITextRange,
            Char: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDuplicate: *const fn(
            self: *const ITextRange,
            ppRange: ?*?*ITextRange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormattedText: *const fn(
            self: *const ITextRange,
            ppRange: ?*?*ITextRange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFormattedText: *const fn(
            self: *const ITextRange,
            pRange: ?*ITextRange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStart: *const fn(
            self: *const ITextRange,
            pcpFirst: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStart: *const fn(
            self: *const ITextRange,
            cpFirst: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnd: *const fn(
            self: *const ITextRange,
            pcpLim: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnd: *const fn(
            self: *const ITextRange,
            cpLim: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFont: *const fn(
            self: *const ITextRange,
            ppFont: ?*?*ITextFont,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFont: *const fn(
            self: *const ITextRange,
            pFont: ?*ITextFont,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPara: *const fn(
            self: *const ITextRange,
            ppPara: ?*?*ITextPara,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPara: *const fn(
            self: *const ITextRange,
            pPara: ?*ITextPara,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStoryLength: *const fn(
            self: *const ITextRange,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStoryType: *const fn(
            self: *const ITextRange,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Collapse: *const fn(
            self: *const ITextRange,
            bStart: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Expand: *const fn(
            self: *const ITextRange,
            Unit: i32,
            pDelta: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIndex: *const fn(
            self: *const ITextRange,
            Unit: i32,
            pIndex: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIndex: *const fn(
            self: *const ITextRange,
            Unit: i32,
            Index: i32,
            Extend: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRange: *const fn(
            self: *const ITextRange,
            cpAnchor: i32,
            cpActive: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InRange: *const fn(
            self: *const ITextRange,
            pRange: ?*ITextRange,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InStory: *const fn(
            self: *const ITextRange,
            pRange: ?*ITextRange,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsEqual: *const fn(
            self: *const ITextRange,
            pRange: ?*ITextRange,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Select: *const fn(
            self: *const ITextRange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartOf: *const fn(
            self: *const ITextRange,
            Unit: i32,
            Extend: i32,
            pDelta: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndOf: *const fn(
            self: *const ITextRange,
            Unit: i32,
            Extend: i32,
            pDelta: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Move: *const fn(
            self: *const ITextRange,
            Unit: i32,
            Count: i32,
            pDelta: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveStart: *const fn(
            self: *const ITextRange,
            Unit: i32,
            Count: i32,
            pDelta: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveEnd: *const fn(
            self: *const ITextRange,
            Unit: i32,
            Count: i32,
            pDelta: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveWhile: *const fn(
            self: *const ITextRange,
            Cset: ?*VARIANT,
            Count: i32,
            pDelta: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveStartWhile: *const fn(
            self: *const ITextRange,
            Cset: ?*VARIANT,
            Count: i32,
            pDelta: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveEndWhile: *const fn(
            self: *const ITextRange,
            Cset: ?*VARIANT,
            Count: i32,
            pDelta: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveUntil: *const fn(
            self: *const ITextRange,
            Cset: ?*VARIANT,
            Count: i32,
            pDelta: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveStartUntil: *const fn(
            self: *const ITextRange,
            Cset: ?*VARIANT,
            Count: i32,
            pDelta: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveEndUntil: *const fn(
            self: *const ITextRange,
            Cset: ?*VARIANT,
            Count: i32,
            pDelta: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindText: *const fn(
            self: *const ITextRange,
            bstr: ?BSTR,
            Count: i32,
            Flags: i32,
            pLength: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindTextStart: *const fn(
            self: *const ITextRange,
            bstr: ?BSTR,
            Count: i32,
            Flags: i32,
            pLength: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindTextEnd: *const fn(
            self: *const ITextRange,
            bstr: ?BSTR,
            Count: i32,
            Flags: i32,
            pLength: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn(
            self: *const ITextRange,
            Unit: i32,
            Count: i32,
            pDelta: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cut: *const fn(
            self: *const ITextRange,
            pVar: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Copy: *const fn(
            self: *const ITextRange,
            pVar: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Paste: *const fn(
            self: *const ITextRange,
            pVar: ?*VARIANT,
            Format: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanPaste: *const fn(
            self: *const ITextRange,
            pVar: ?*VARIANT,
            Format: i32,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanEdit: *const fn(
            self: *const ITextRange,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ChangeCase: *const fn(
            self: *const ITextRange,
            Type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPoint: *const fn(
            self: *const ITextRange,
            Type: i32,
            px: ?*i32,
            py: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPoint: *const fn(
            self: *const ITextRange,
            x: i32,
            y: i32,
            Type: i32,
            Extend: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ScrollIntoView: *const fn(
            self: *const ITextRange,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEmbeddedObject: *const fn(
            self: *const ITextRange,
            ppObject: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GetText(self: *const ITextRange, pbstr: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetText(self, pbstr);
    }
    pub fn SetText(self: *const ITextRange, bstr: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.SetText(self, bstr);
    }
    pub fn GetChar(self: *const ITextRange, pChar: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetChar(self, pChar);
    }
    pub fn SetChar(self: *const ITextRange, Char: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetChar(self, Char);
    }
    pub fn GetDuplicate(self: *const ITextRange, ppRange: ?*?*ITextRange) callconv(.Inline) HRESULT {
        return self.vtable.GetDuplicate(self, ppRange);
    }
    pub fn GetFormattedText(self: *const ITextRange, ppRange: ?*?*ITextRange) callconv(.Inline) HRESULT {
        return self.vtable.GetFormattedText(self, ppRange);
    }
    pub fn SetFormattedText(self: *const ITextRange, pRange: ?*ITextRange) callconv(.Inline) HRESULT {
        return self.vtable.SetFormattedText(self, pRange);
    }
    pub fn GetStart(self: *const ITextRange, pcpFirst: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetStart(self, pcpFirst);
    }
    pub fn SetStart(self: *const ITextRange, cpFirst: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetStart(self, cpFirst);
    }
    pub fn GetEnd(self: *const ITextRange, pcpLim: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetEnd(self, pcpLim);
    }
    pub fn SetEnd(self: *const ITextRange, cpLim: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetEnd(self, cpLim);
    }
    pub fn GetFont(self: *const ITextRange, ppFont: ?*?*ITextFont) callconv(.Inline) HRESULT {
        return self.vtable.GetFont(self, ppFont);
    }
    pub fn SetFont(self: *const ITextRange, pFont: ?*ITextFont) callconv(.Inline) HRESULT {
        return self.vtable.SetFont(self, pFont);
    }
    pub fn GetPara(self: *const ITextRange, ppPara: ?*?*ITextPara) callconv(.Inline) HRESULT {
        return self.vtable.GetPara(self, ppPara);
    }
    pub fn SetPara(self: *const ITextRange, pPara: ?*ITextPara) callconv(.Inline) HRESULT {
        return self.vtable.SetPara(self, pPara);
    }
    pub fn GetStoryLength(self: *const ITextRange, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetStoryLength(self, pCount);
    }
    pub fn GetStoryType(self: *const ITextRange, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetStoryType(self, pValue);
    }
    pub fn Collapse(self: *const ITextRange, bStart: i32) callconv(.Inline) HRESULT {
        return self.vtable.Collapse(self, bStart);
    }
    pub fn Expand(self: *const ITextRange, Unit: i32, pDelta: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.Expand(self, Unit, pDelta);
    }
    pub fn GetIndex(self: *const ITextRange, Unit: i32, pIndex: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetIndex(self, Unit, pIndex);
    }
    pub fn SetIndex(self: *const ITextRange, Unit: i32, Index: i32, Extend: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetIndex(self, Unit, Index, Extend);
    }
    pub fn SetRange(self: *const ITextRange, cpAnchor: i32, cpActive: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetRange(self, cpAnchor, cpActive);
    }
    pub fn InRange(self: *const ITextRange, pRange: ?*ITextRange, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.InRange(self, pRange, pValue);
    }
    pub fn InStory(self: *const ITextRange, pRange: ?*ITextRange, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.InStory(self, pRange, pValue);
    }
    pub fn IsEqual(self: *const ITextRange, pRange: ?*ITextRange, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.IsEqual(self, pRange, pValue);
    }
    pub fn Select(self: *const ITextRange) callconv(.Inline) HRESULT {
        return self.vtable.Select(self);
    }
    pub fn StartOf(self: *const ITextRange, Unit: i32, Extend: i32, pDelta: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.StartOf(self, Unit, Extend, pDelta);
    }
    pub fn EndOf(self: *const ITextRange, Unit: i32, Extend: i32, pDelta: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.EndOf(self, Unit, Extend, pDelta);
    }
    pub fn Move(self: *const ITextRange, Unit: i32, Count: i32, pDelta: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.Move(self, Unit, Count, pDelta);
    }
    pub fn MoveStart(self: *const ITextRange, Unit: i32, Count: i32, pDelta: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.MoveStart(self, Unit, Count, pDelta);
    }
    pub fn MoveEnd(self: *const ITextRange, Unit: i32, Count: i32, pDelta: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.MoveEnd(self, Unit, Count, pDelta);
    }
    pub fn MoveWhile(self: *const ITextRange, Cset: ?*VARIANT, Count: i32, pDelta: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.MoveWhile(self, Cset, Count, pDelta);
    }
    pub fn MoveStartWhile(self: *const ITextRange, Cset: ?*VARIANT, Count: i32, pDelta: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.MoveStartWhile(self, Cset, Count, pDelta);
    }
    pub fn MoveEndWhile(self: *const ITextRange, Cset: ?*VARIANT, Count: i32, pDelta: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.MoveEndWhile(self, Cset, Count, pDelta);
    }
    pub fn MoveUntil(self: *const ITextRange, Cset: ?*VARIANT, Count: i32, pDelta: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.MoveUntil(self, Cset, Count, pDelta);
    }
    pub fn MoveStartUntil(self: *const ITextRange, Cset: ?*VARIANT, Count: i32, pDelta: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.MoveStartUntil(self, Cset, Count, pDelta);
    }
    pub fn MoveEndUntil(self: *const ITextRange, Cset: ?*VARIANT, Count: i32, pDelta: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.MoveEndUntil(self, Cset, Count, pDelta);
    }
    pub fn FindText(self: *const ITextRange, bstr: ?BSTR, Count: i32, Flags: i32, pLength: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.FindText(self, bstr, Count, Flags, pLength);
    }
    pub fn FindTextStart(self: *const ITextRange, bstr: ?BSTR, Count: i32, Flags: i32, pLength: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.FindTextStart(self, bstr, Count, Flags, pLength);
    }
    pub fn FindTextEnd(self: *const ITextRange, bstr: ?BSTR, Count: i32, Flags: i32, pLength: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.FindTextEnd(self, bstr, Count, Flags, pLength);
    }
    pub fn Delete(self: *const ITextRange, Unit: i32, Count: i32, pDelta: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.Delete(self, Unit, Count, pDelta);
    }
    pub fn Cut(self: *const ITextRange, pVar: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.Cut(self, pVar);
    }
    pub fn Copy(self: *const ITextRange, pVar: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.Copy(self, pVar);
    }
    pub fn Paste(self: *const ITextRange, pVar: ?*VARIANT, Format: i32) callconv(.Inline) HRESULT {
        return self.vtable.Paste(self, pVar, Format);
    }
    pub fn CanPaste(self: *const ITextRange, pVar: ?*VARIANT, Format: i32, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.CanPaste(self, pVar, Format, pValue);
    }
    pub fn CanEdit(self: *const ITextRange, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.CanEdit(self, pValue);
    }
    pub fn ChangeCase(self: *const ITextRange, Type: i32) callconv(.Inline) HRESULT {
        return self.vtable.ChangeCase(self, Type);
    }
    pub fn GetPoint(self: *const ITextRange, Type: i32, px: ?*i32, py: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetPoint(self, Type, px, py);
    }
    pub fn SetPoint(self: *const ITextRange, x: i32, y: i32, Type: i32, Extend: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetPoint(self, x, y, Type, Extend);
    }
    pub fn ScrollIntoView(self: *const ITextRange, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.ScrollIntoView(self, Value);
    }
    pub fn GetEmbeddedObject(self: *const ITextRange, ppObject: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.GetEmbeddedObject(self, ppObject);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITextSelection_Value = Guid.initString("8cc497c1-a1df-11ce-8098-00aa0047be5d");
pub const IID_ITextSelection = &IID_ITextSelection_Value;
pub const ITextSelection = extern union {
    pub const VTable = extern struct {
        base: ITextRange.VTable,
        GetFlags: *const fn(
            self: *const ITextSelection,
            pFlags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFlags: *const fn(
            self: *const ITextSelection,
            Flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetType: *const fn(
            self: *const ITextSelection,
            pType: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveLeft: *const fn(
            self: *const ITextSelection,
            Unit: i32,
            Count: i32,
            Extend: i32,
            pDelta: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveRight: *const fn(
            self: *const ITextSelection,
            Unit: i32,
            Count: i32,
            Extend: i32,
            pDelta: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveUp: *const fn(
            self: *const ITextSelection,
            Unit: i32,
            Count: i32,
            Extend: i32,
            pDelta: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveDown: *const fn(
            self: *const ITextSelection,
            Unit: i32,
            Count: i32,
            Extend: i32,
            pDelta: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HomeKey: *const fn(
            self: *const ITextSelection,
            Unit: tomConstants,
            Extend: i32,
            pDelta: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndKey: *const fn(
            self: *const ITextSelection,
            Unit: i32,
            Extend: i32,
            pDelta: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TypeText: *const fn(
            self: *const ITextSelection,
            bstr: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ITextRange: ITextRange,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GetFlags(self: *const ITextSelection, pFlags: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetFlags(self, pFlags);
    }
    pub fn SetFlags(self: *const ITextSelection, Flags: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetFlags(self, Flags);
    }
    pub fn GetType(self: *const ITextSelection, pType: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetType(self, pType);
    }
    pub fn MoveLeft(self: *const ITextSelection, Unit: i32, Count: i32, Extend: i32, pDelta: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.MoveLeft(self, Unit, Count, Extend, pDelta);
    }
    pub fn MoveRight(self: *const ITextSelection, Unit: i32, Count: i32, Extend: i32, pDelta: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.MoveRight(self, Unit, Count, Extend, pDelta);
    }
    pub fn MoveUp(self: *const ITextSelection, Unit: i32, Count: i32, Extend: i32, pDelta: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.MoveUp(self, Unit, Count, Extend, pDelta);
    }
    pub fn MoveDown(self: *const ITextSelection, Unit: i32, Count: i32, Extend: i32, pDelta: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.MoveDown(self, Unit, Count, Extend, pDelta);
    }
    pub fn HomeKey(self: *const ITextSelection, Unit: tomConstants, Extend: i32, pDelta: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.HomeKey(self, Unit, Extend, pDelta);
    }
    pub fn EndKey(self: *const ITextSelection, Unit: i32, Extend: i32, pDelta: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.EndKey(self, Unit, Extend, pDelta);
    }
    pub fn TypeText(self: *const ITextSelection, bstr: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.TypeText(self, bstr);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITextFont_Value = Guid.initString("8cc497c3-a1df-11ce-8098-00aa0047be5d");
pub const IID_ITextFont = &IID_ITextFont_Value;
pub const ITextFont = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetDuplicate: *const fn(
            self: *const ITextFont,
            ppFont: ?*?*ITextFont,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDuplicate: *const fn(
            self: *const ITextFont,
            pFont: ?*ITextFont,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanChange: *const fn(
            self: *const ITextFont,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsEqual: *const fn(
            self: *const ITextFont,
            pFont: ?*ITextFont,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const ITextFont,
            Value: tomConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStyle: *const fn(
            self: *const ITextFont,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStyle: *const fn(
            self: *const ITextFont,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllCaps: *const fn(
            self: *const ITextFont,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllCaps: *const fn(
            self: *const ITextFont,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAnimation: *const fn(
            self: *const ITextFont,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAnimation: *const fn(
            self: *const ITextFont,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBackColor: *const fn(
            self: *const ITextFont,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBackColor: *const fn(
            self: *const ITextFont,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBold: *const fn(
            self: *const ITextFont,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBold: *const fn(
            self: *const ITextFont,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEmboss: *const fn(
            self: *const ITextFont,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEmboss: *const fn(
            self: *const ITextFont,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetForeColor: *const fn(
            self: *const ITextFont,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetForeColor: *const fn(
            self: *const ITextFont,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHidden: *const fn(
            self: *const ITextFont,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHidden: *const fn(
            self: *const ITextFont,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEngrave: *const fn(
            self: *const ITextFont,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEngrave: *const fn(
            self: *const ITextFont,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItalic: *const fn(
            self: *const ITextFont,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetItalic: *const fn(
            self: *const ITextFont,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKerning: *const fn(
            self: *const ITextFont,
            pValue: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetKerning: *const fn(
            self: *const ITextFont,
            Value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLanguageID: *const fn(
            self: *const ITextFont,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLanguageID: *const fn(
            self: *const ITextFont,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn(
            self: *const ITextFont,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetName: *const fn(
            self: *const ITextFont,
            bstr: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutline: *const fn(
            self: *const ITextFont,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOutline: *const fn(
            self: *const ITextFont,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPosition: *const fn(
            self: *const ITextFont,
            pValue: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPosition: *const fn(
            self: *const ITextFont,
            Value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProtected: *const fn(
            self: *const ITextFont,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProtected: *const fn(
            self: *const ITextFont,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShadow: *const fn(
            self: *const ITextFont,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetShadow: *const fn(
            self: *const ITextFont,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSize: *const fn(
            self: *const ITextFont,
            pValue: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSize: *const fn(
            self: *const ITextFont,
            Value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSmallCaps: *const fn(
            self: *const ITextFont,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSmallCaps: *const fn(
            self: *const ITextFont,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSpacing: *const fn(
            self: *const ITextFont,
            pValue: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSpacing: *const fn(
            self: *const ITextFont,
            Value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrikeThrough: *const fn(
            self: *const ITextFont,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStrikeThrough: *const fn(
            self: *const ITextFont,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSubscript: *const fn(
            self: *const ITextFont,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSubscript: *const fn(
            self: *const ITextFont,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSuperscript: *const fn(
            self: *const ITextFont,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSuperscript: *const fn(
            self: *const ITextFont,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUnderline: *const fn(
            self: *const ITextFont,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUnderline: *const fn(
            self: *const ITextFont,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWeight: *const fn(
            self: *const ITextFont,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWeight: *const fn(
            self: *const ITextFont,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GetDuplicate(self: *const ITextFont, ppFont: ?*?*ITextFont) callconv(.Inline) HRESULT {
        return self.vtable.GetDuplicate(self, ppFont);
    }
    pub fn SetDuplicate(self: *const ITextFont, pFont: ?*ITextFont) callconv(.Inline) HRESULT {
        return self.vtable.SetDuplicate(self, pFont);
    }
    pub fn CanChange(self: *const ITextFont, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.CanChange(self, pValue);
    }
    pub fn IsEqual(self: *const ITextFont, pFont: ?*ITextFont, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.IsEqual(self, pFont, pValue);
    }
    pub fn Reset(self: *const ITextFont, Value: tomConstants) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self, Value);
    }
    pub fn GetStyle(self: *const ITextFont, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetStyle(self, pValue);
    }
    pub fn SetStyle(self: *const ITextFont, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetStyle(self, Value);
    }
    pub fn GetAllCaps(self: *const ITextFont, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetAllCaps(self, pValue);
    }
    pub fn SetAllCaps(self: *const ITextFont, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetAllCaps(self, Value);
    }
    pub fn GetAnimation(self: *const ITextFont, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetAnimation(self, pValue);
    }
    pub fn SetAnimation(self: *const ITextFont, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetAnimation(self, Value);
    }
    pub fn GetBackColor(self: *const ITextFont, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetBackColor(self, pValue);
    }
    pub fn SetBackColor(self: *const ITextFont, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetBackColor(self, Value);
    }
    pub fn GetBold(self: *const ITextFont, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetBold(self, pValue);
    }
    pub fn SetBold(self: *const ITextFont, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetBold(self, Value);
    }
    pub fn GetEmboss(self: *const ITextFont, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetEmboss(self, pValue);
    }
    pub fn SetEmboss(self: *const ITextFont, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetEmboss(self, Value);
    }
    pub fn GetForeColor(self: *const ITextFont, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetForeColor(self, pValue);
    }
    pub fn SetForeColor(self: *const ITextFont, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetForeColor(self, Value);
    }
    pub fn GetHidden(self: *const ITextFont, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetHidden(self, pValue);
    }
    pub fn SetHidden(self: *const ITextFont, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetHidden(self, Value);
    }
    pub fn GetEngrave(self: *const ITextFont, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetEngrave(self, pValue);
    }
    pub fn SetEngrave(self: *const ITextFont, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetEngrave(self, Value);
    }
    pub fn GetItalic(self: *const ITextFont, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetItalic(self, pValue);
    }
    pub fn SetItalic(self: *const ITextFont, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetItalic(self, Value);
    }
    pub fn GetKerning(self: *const ITextFont, pValue: ?*f32) callconv(.Inline) HRESULT {
        return self.vtable.GetKerning(self, pValue);
    }
    pub fn SetKerning(self: *const ITextFont, Value: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetKerning(self, Value);
    }
    pub fn GetLanguageID(self: *const ITextFont, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetLanguageID(self, pValue);
    }
    pub fn SetLanguageID(self: *const ITextFont, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetLanguageID(self, Value);
    }
    pub fn GetName(self: *const ITextFont, pbstr: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetName(self, pbstr);
    }
    pub fn SetName(self: *const ITextFont, bstr: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.SetName(self, bstr);
    }
    pub fn GetOutline(self: *const ITextFont, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetOutline(self, pValue);
    }
    pub fn SetOutline(self: *const ITextFont, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetOutline(self, Value);
    }
    pub fn GetPosition(self: *const ITextFont, pValue: ?*f32) callconv(.Inline) HRESULT {
        return self.vtable.GetPosition(self, pValue);
    }
    pub fn SetPosition(self: *const ITextFont, Value: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetPosition(self, Value);
    }
    pub fn GetProtected(self: *const ITextFont, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetProtected(self, pValue);
    }
    pub fn SetProtected(self: *const ITextFont, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetProtected(self, Value);
    }
    pub fn GetShadow(self: *const ITextFont, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetShadow(self, pValue);
    }
    pub fn SetShadow(self: *const ITextFont, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetShadow(self, Value);
    }
    pub fn GetSize(self: *const ITextFont, pValue: ?*f32) callconv(.Inline) HRESULT {
        return self.vtable.GetSize(self, pValue);
    }
    pub fn SetSize(self: *const ITextFont, Value: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetSize(self, Value);
    }
    pub fn GetSmallCaps(self: *const ITextFont, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetSmallCaps(self, pValue);
    }
    pub fn SetSmallCaps(self: *const ITextFont, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetSmallCaps(self, Value);
    }
    pub fn GetSpacing(self: *const ITextFont, pValue: ?*f32) callconv(.Inline) HRESULT {
        return self.vtable.GetSpacing(self, pValue);
    }
    pub fn SetSpacing(self: *const ITextFont, Value: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetSpacing(self, Value);
    }
    pub fn GetStrikeThrough(self: *const ITextFont, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetStrikeThrough(self, pValue);
    }
    pub fn SetStrikeThrough(self: *const ITextFont, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetStrikeThrough(self, Value);
    }
    pub fn GetSubscript(self: *const ITextFont, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetSubscript(self, pValue);
    }
    pub fn SetSubscript(self: *const ITextFont, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetSubscript(self, Value);
    }
    pub fn GetSuperscript(self: *const ITextFont, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetSuperscript(self, pValue);
    }
    pub fn SetSuperscript(self: *const ITextFont, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetSuperscript(self, Value);
    }
    pub fn GetUnderline(self: *const ITextFont, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetUnderline(self, pValue);
    }
    pub fn SetUnderline(self: *const ITextFont, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetUnderline(self, Value);
    }
    pub fn GetWeight(self: *const ITextFont, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetWeight(self, pValue);
    }
    pub fn SetWeight(self: *const ITextFont, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetWeight(self, Value);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITextPara_Value = Guid.initString("8cc497c4-a1df-11ce-8098-00aa0047be5d");
pub const IID_ITextPara = &IID_ITextPara_Value;
pub const ITextPara = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetDuplicate: *const fn(
            self: *const ITextPara,
            ppPara: ?*?*ITextPara,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDuplicate: *const fn(
            self: *const ITextPara,
            pPara: ?*ITextPara,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanChange: *const fn(
            self: *const ITextPara,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsEqual: *const fn(
            self: *const ITextPara,
            pPara: ?*ITextPara,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const ITextPara,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStyle: *const fn(
            self: *const ITextPara,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStyle: *const fn(
            self: *const ITextPara,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAlignment: *const fn(
            self: *const ITextPara,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlignment: *const fn(
            self: *const ITextPara,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHyphenation: *const fn(
            self: *const ITextPara,
            pValue: ?*tomConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHyphenation: *const fn(
            self: *const ITextPara,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFirstLineIndent: *const fn(
            self: *const ITextPara,
            pValue: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeepTogether: *const fn(
            self: *const ITextPara,
            pValue: ?*tomConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetKeepTogether: *const fn(
            self: *const ITextPara,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeepWithNext: *const fn(
            self: *const ITextPara,
            pValue: ?*tomConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetKeepWithNext: *const fn(
            self: *const ITextPara,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLeftIndent: *const fn(
            self: *const ITextPara,
            pValue: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLineSpacing: *const fn(
            self: *const ITextPara,
            pValue: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLineSpacingRule: *const fn(
            self: *const ITextPara,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetListAlignment: *const fn(
            self: *const ITextPara,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetListAlignment: *const fn(
            self: *const ITextPara,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetListLevelIndex: *const fn(
            self: *const ITextPara,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetListLevelIndex: *const fn(
            self: *const ITextPara,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetListStart: *const fn(
            self: *const ITextPara,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetListStart: *const fn(
            self: *const ITextPara,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetListTab: *const fn(
            self: *const ITextPara,
            pValue: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetListTab: *const fn(
            self: *const ITextPara,
            Value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetListType: *const fn(
            self: *const ITextPara,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetListType: *const fn(
            self: *const ITextPara,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNoLineNumber: *const fn(
            self: *const ITextPara,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNoLineNumber: *const fn(
            self: *const ITextPara,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPageBreakBefore: *const fn(
            self: *const ITextPara,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPageBreakBefore: *const fn(
            self: *const ITextPara,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRightIndent: *const fn(
            self: *const ITextPara,
            pValue: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRightIndent: *const fn(
            self: *const ITextPara,
            Value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIndents: *const fn(
            self: *const ITextPara,
            First: f32,
            Left: f32,
            Right: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLineSpacing: *const fn(
            self: *const ITextPara,
            Rule: i32,
            Spacing: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSpaceAfter: *const fn(
            self: *const ITextPara,
            pValue: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSpaceAfter: *const fn(
            self: *const ITextPara,
            Value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSpaceBefore: *const fn(
            self: *const ITextPara,
            pValue: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSpaceBefore: *const fn(
            self: *const ITextPara,
            Value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWidowControl: *const fn(
            self: *const ITextPara,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWidowControl: *const fn(
            self: *const ITextPara,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTabCount: *const fn(
            self: *const ITextPara,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddTab: *const fn(
            self: *const ITextPara,
            tbPos: f32,
            tbAlign: i32,
            tbLeader: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearAllTabs: *const fn(
            self: *const ITextPara,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteTab: *const fn(
            self: *const ITextPara,
            tbPos: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTab: *const fn(
            self: *const ITextPara,
            iTab: i32,
            ptbPos: ?*f32,
            ptbAlign: ?*i32,
            ptbLeader: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GetDuplicate(self: *const ITextPara, ppPara: ?*?*ITextPara) callconv(.Inline) HRESULT {
        return self.vtable.GetDuplicate(self, ppPara);
    }
    pub fn SetDuplicate(self: *const ITextPara, pPara: ?*ITextPara) callconv(.Inline) HRESULT {
        return self.vtable.SetDuplicate(self, pPara);
    }
    pub fn CanChange(self: *const ITextPara, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.CanChange(self, pValue);
    }
    pub fn IsEqual(self: *const ITextPara, pPara: ?*ITextPara, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.IsEqual(self, pPara, pValue);
    }
    pub fn Reset(self: *const ITextPara, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self, Value);
    }
    pub fn GetStyle(self: *const ITextPara, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetStyle(self, pValue);
    }
    pub fn SetStyle(self: *const ITextPara, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetStyle(self, Value);
    }
    pub fn GetAlignment(self: *const ITextPara, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetAlignment(self, pValue);
    }
    pub fn SetAlignment(self: *const ITextPara, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetAlignment(self, Value);
    }
    pub fn GetHyphenation(self: *const ITextPara, pValue: ?*tomConstants) callconv(.Inline) HRESULT {
        return self.vtable.GetHyphenation(self, pValue);
    }
    pub fn SetHyphenation(self: *const ITextPara, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetHyphenation(self, Value);
    }
    pub fn GetFirstLineIndent(self: *const ITextPara, pValue: ?*f32) callconv(.Inline) HRESULT {
        return self.vtable.GetFirstLineIndent(self, pValue);
    }
    pub fn GetKeepTogether(self: *const ITextPara, pValue: ?*tomConstants) callconv(.Inline) HRESULT {
        return self.vtable.GetKeepTogether(self, pValue);
    }
    pub fn SetKeepTogether(self: *const ITextPara, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetKeepTogether(self, Value);
    }
    pub fn GetKeepWithNext(self: *const ITextPara, pValue: ?*tomConstants) callconv(.Inline) HRESULT {
        return self.vtable.GetKeepWithNext(self, pValue);
    }
    pub fn SetKeepWithNext(self: *const ITextPara, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetKeepWithNext(self, Value);
    }
    pub fn GetLeftIndent(self: *const ITextPara, pValue: ?*f32) callconv(.Inline) HRESULT {
        return self.vtable.GetLeftIndent(self, pValue);
    }
    pub fn GetLineSpacing(self: *const ITextPara, pValue: ?*f32) callconv(.Inline) HRESULT {
        return self.vtable.GetLineSpacing(self, pValue);
    }
    pub fn GetLineSpacingRule(self: *const ITextPara, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetLineSpacingRule(self, pValue);
    }
    pub fn GetListAlignment(self: *const ITextPara, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetListAlignment(self, pValue);
    }
    pub fn SetListAlignment(self: *const ITextPara, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetListAlignment(self, Value);
    }
    pub fn GetListLevelIndex(self: *const ITextPara, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetListLevelIndex(self, pValue);
    }
    pub fn SetListLevelIndex(self: *const ITextPara, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetListLevelIndex(self, Value);
    }
    pub fn GetListStart(self: *const ITextPara, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetListStart(self, pValue);
    }
    pub fn SetListStart(self: *const ITextPara, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetListStart(self, Value);
    }
    pub fn GetListTab(self: *const ITextPara, pValue: ?*f32) callconv(.Inline) HRESULT {
        return self.vtable.GetListTab(self, pValue);
    }
    pub fn SetListTab(self: *const ITextPara, Value: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetListTab(self, Value);
    }
    pub fn GetListType(self: *const ITextPara, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetListType(self, pValue);
    }
    pub fn SetListType(self: *const ITextPara, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetListType(self, Value);
    }
    pub fn GetNoLineNumber(self: *const ITextPara, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetNoLineNumber(self, pValue);
    }
    pub fn SetNoLineNumber(self: *const ITextPara, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetNoLineNumber(self, Value);
    }
    pub fn GetPageBreakBefore(self: *const ITextPara, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetPageBreakBefore(self, pValue);
    }
    pub fn SetPageBreakBefore(self: *const ITextPara, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetPageBreakBefore(self, Value);
    }
    pub fn GetRightIndent(self: *const ITextPara, pValue: ?*f32) callconv(.Inline) HRESULT {
        return self.vtable.GetRightIndent(self, pValue);
    }
    pub fn SetRightIndent(self: *const ITextPara, Value: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetRightIndent(self, Value);
    }
    pub fn SetIndents(self: *const ITextPara, First: f32, Left: f32, Right: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetIndents(self, First, Left, Right);
    }
    pub fn SetLineSpacing(self: *const ITextPara, Rule: i32, Spacing: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetLineSpacing(self, Rule, Spacing);
    }
    pub fn GetSpaceAfter(self: *const ITextPara, pValue: ?*f32) callconv(.Inline) HRESULT {
        return self.vtable.GetSpaceAfter(self, pValue);
    }
    pub fn SetSpaceAfter(self: *const ITextPara, Value: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetSpaceAfter(self, Value);
    }
    pub fn GetSpaceBefore(self: *const ITextPara, pValue: ?*f32) callconv(.Inline) HRESULT {
        return self.vtable.GetSpaceBefore(self, pValue);
    }
    pub fn SetSpaceBefore(self: *const ITextPara, Value: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetSpaceBefore(self, Value);
    }
    pub fn GetWidowControl(self: *const ITextPara, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetWidowControl(self, pValue);
    }
    pub fn SetWidowControl(self: *const ITextPara, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetWidowControl(self, Value);
    }
    pub fn GetTabCount(self: *const ITextPara, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetTabCount(self, pCount);
    }
    pub fn AddTab(self: *const ITextPara, tbPos: f32, tbAlign: i32, tbLeader: i32) callconv(.Inline) HRESULT {
        return self.vtable.AddTab(self, tbPos, tbAlign, tbLeader);
    }
    pub fn ClearAllTabs(self: *const ITextPara) callconv(.Inline) HRESULT {
        return self.vtable.ClearAllTabs(self);
    }
    pub fn DeleteTab(self: *const ITextPara, tbPos: f32) callconv(.Inline) HRESULT {
        return self.vtable.DeleteTab(self, tbPos);
    }
    pub fn GetTab(self: *const ITextPara, iTab: i32, ptbPos: ?*f32, ptbAlign: ?*i32, ptbLeader: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetTab(self, iTab, ptbPos, ptbAlign, ptbLeader);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITextStoryRanges_Value = Guid.initString("8cc497c5-a1df-11ce-8098-00aa0047be5d");
pub const IID_ITextStoryRanges = &IID_ITextStoryRanges_Value;
pub const ITextStoryRanges = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        _NewEnum: *const fn(
            self: *const ITextStoryRanges,
            ppunkEnum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn(
            self: *const ITextStoryRanges,
            Index: i32,
            ppRange: ?*?*ITextRange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn(
            self: *const ITextStoryRanges,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn _NewEnum(self: *const ITextStoryRanges, ppunkEnum: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable._NewEnum(self, ppunkEnum);
    }
    pub fn Item(self: *const ITextStoryRanges, Index: i32, ppRange: ?*?*ITextRange) callconv(.Inline) HRESULT {
        return self.vtable.Item(self, Index, ppRange);
    }
    pub fn GetCount(self: *const ITextStoryRanges, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCount(self, pCount);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ITextDocument2_Value = Guid.initString("c241f5e0-7206-11d8-a2c7-00a0d1d6c6b3");
pub const IID_ITextDocument2 = &IID_ITextDocument2_Value;
pub const ITextDocument2 = extern union {
    pub const VTable = extern struct {
        base: ITextDocument.VTable,
        GetCaretType: *const fn(
            self: *const ITextDocument2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCaretType: *const fn(
            self: *const ITextDocument2,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplays: *const fn(
            self: *const ITextDocument2,
            ppDisplays: ?*?*ITextDisplays,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDocumentFont: *const fn(
            self: *const ITextDocument2,
            ppFont: ?*?*ITextFont2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDocumentFont: *const fn(
            self: *const ITextDocument2,
            pFont: ?*ITextFont2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDocumentPara: *const fn(
            self: *const ITextDocument2,
            ppPara: ?*?*ITextPara2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDocumentPara: *const fn(
            self: *const ITextDocument2,
            pPara: ?*ITextPara2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEastAsianFlags: *const fn(
            self: *const ITextDocument2,
            pFlags: ?*tomConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGenerator: *const fn(
            self: *const ITextDocument2,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIMEInProgress: *const fn(
            self: *const ITextDocument2,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNotificationMode: *const fn(
            self: *const ITextDocument2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNotificationMode: *const fn(
            self: *const ITextDocument2,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelection2: *const fn(
            self: *const ITextDocument2,
            ppSel: ?*?*ITextSelection2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStoryRanges2: *const fn(
            self: *const ITextDocument2,
            ppStories: ?*?*ITextStoryRanges2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTypographyOptions: *const fn(
            self: *const ITextDocument2,
            pOptions: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVersion: *const fn(
            self: *const ITextDocument2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWindow: *const fn(
            self: *const ITextDocument2,
            pHwnd: ?*i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AttachMsgFilter: *const fn(
            self: *const ITextDocument2,
            pFilter: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckTextLimit: *const fn(
            self: *const ITextDocument2,
            cch: i32,
            pcch: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCallManager: *const fn(
            self: *const ITextDocument2,
            ppVoid: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClientRect: *const fn(
            self: *const ITextDocument2,
            Type: tomConstants,
            pLeft: ?*i32,
            pTop: ?*i32,
            pRight: ?*i32,
            pBottom: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEffectColor: *const fn(
            self: *const ITextDocument2,
            Index: i32,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetImmContext: *const fn(
            self: *const ITextDocument2,
            pContext: ?*i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPreferredFont: *const fn(
            self: *const ITextDocument2,
            cp: i32,
            CharRep: i32,
            Options: i32,
            curCharRep: i32,
            curFontSize: i32,
            pbstr: ?*?BSTR,
            pPitchAndFamily: ?*i32,
            pNewFontSize: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn(
            self: *const ITextDocument2,
            Type: i32,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrings: *const fn(
            self: *const ITextDocument2,
            ppStrs: ?*?*ITextStrings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Notify: *const fn(
            self: *const ITextDocument2,
            Notify: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Range2: *const fn(
            self: *const ITextDocument2,
            cpActive: i32,
            cpAnchor: i32,
            ppRange: ?*?*ITextRange2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RangeFromPoint2: *const fn(
            self: *const ITextDocument2,
            x: i32,
            y: i32,
            Type: i32,
            ppRange: ?*?*ITextRange2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseCallManager: *const fn(
            self: *const ITextDocument2,
            pVoid: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseImmContext: *const fn(
            self: *const ITextDocument2,
            Context: i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEffectColor: *const fn(
            self: *const ITextDocument2,
            Index: i32,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn(
            self: *const ITextDocument2,
            Type: i32,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTypographyOptions: *const fn(
            self: *const ITextDocument2,
            Options: i32,
            Mask: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SysBeep: *const fn(
            self: *const ITextDocument2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Update: *const fn(
            self: *const ITextDocument2,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateWindow: *const fn(
            self: *const ITextDocument2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMathProperties: *const fn(
            self: *const ITextDocument2,
            pOptions: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMathProperties: *const fn(
            self: *const ITextDocument2,
            Options: i32,
            Mask: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetActiveStory: *const fn(
            self: *const ITextDocument2,
            ppStory: ?*?*ITextStory,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActiveStory: *const fn(
            self: *const ITextDocument2,
            pStory: ?*ITextStory,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMainStory: *const fn(
            self: *const ITextDocument2,
            ppStory: ?*?*ITextStory,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNewStory: *const fn(
            self: *const ITextDocument2,
            ppStory: ?*?*ITextStory,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStory: *const fn(
            self: *const ITextDocument2,
            Index: i32,
            ppStory: ?*?*ITextStory,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ITextDocument: ITextDocument,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GetCaretType(self: *const ITextDocument2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCaretType(self, pValue);
    }
    pub fn SetCaretType(self: *const ITextDocument2, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetCaretType(self, Value);
    }
    pub fn GetDisplays(self: *const ITextDocument2, ppDisplays: ?*?*ITextDisplays) callconv(.Inline) HRESULT {
        return self.vtable.GetDisplays(self, ppDisplays);
    }
    pub fn GetDocumentFont(self: *const ITextDocument2, ppFont: ?*?*ITextFont2) callconv(.Inline) HRESULT {
        return self.vtable.GetDocumentFont(self, ppFont);
    }
    pub fn SetDocumentFont(self: *const ITextDocument2, pFont: ?*ITextFont2) callconv(.Inline) HRESULT {
        return self.vtable.SetDocumentFont(self, pFont);
    }
    pub fn GetDocumentPara(self: *const ITextDocument2, ppPara: ?*?*ITextPara2) callconv(.Inline) HRESULT {
        return self.vtable.GetDocumentPara(self, ppPara);
    }
    pub fn SetDocumentPara(self: *const ITextDocument2, pPara: ?*ITextPara2) callconv(.Inline) HRESULT {
        return self.vtable.SetDocumentPara(self, pPara);
    }
    pub fn GetEastAsianFlags(self: *const ITextDocument2, pFlags: ?*tomConstants) callconv(.Inline) HRESULT {
        return self.vtable.GetEastAsianFlags(self, pFlags);
    }
    pub fn GetGenerator(self: *const ITextDocument2, pbstr: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetGenerator(self, pbstr);
    }
    pub fn SetIMEInProgress(self: *const ITextDocument2, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetIMEInProgress(self, Value);
    }
    pub fn GetNotificationMode(self: *const ITextDocument2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetNotificationMode(self, pValue);
    }
    pub fn SetNotificationMode(self: *const ITextDocument2, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetNotificationMode(self, Value);
    }
    pub fn GetSelection2(self: *const ITextDocument2, ppSel: ?*?*ITextSelection2) callconv(.Inline) HRESULT {
        return self.vtable.GetSelection2(self, ppSel);
    }
    pub fn GetStoryRanges2(self: *const ITextDocument2, ppStories: ?*?*ITextStoryRanges2) callconv(.Inline) HRESULT {
        return self.vtable.GetStoryRanges2(self, ppStories);
    }
    pub fn GetTypographyOptions(self: *const ITextDocument2, pOptions: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetTypographyOptions(self, pOptions);
    }
    pub fn GetVersion(self: *const ITextDocument2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetVersion(self, pValue);
    }
    pub fn GetWindow(self: *const ITextDocument2, pHwnd: ?*i64) callconv(.Inline) HRESULT {
        return self.vtable.GetWindow(self, pHwnd);
    }
    pub fn AttachMsgFilter(self: *const ITextDocument2, pFilter: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.AttachMsgFilter(self, pFilter);
    }
    pub fn CheckTextLimit(self: *const ITextDocument2, cch: i32, pcch: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.CheckTextLimit(self, cch, pcch);
    }
    pub fn GetCallManager(self: *const ITextDocument2, ppVoid: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.GetCallManager(self, ppVoid);
    }
    pub fn GetClientRect(self: *const ITextDocument2, Type: tomConstants, pLeft: ?*i32, pTop: ?*i32, pRight: ?*i32, pBottom: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetClientRect(self, Type, pLeft, pTop, pRight, pBottom);
    }
    pub fn GetEffectColor(self: *const ITextDocument2, Index: i32, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetEffectColor(self, Index, pValue);
    }
    pub fn GetImmContext(self: *const ITextDocument2, pContext: ?*i64) callconv(.Inline) HRESULT {
        return self.vtable.GetImmContext(self, pContext);
    }
    pub fn GetPreferredFont(self: *const ITextDocument2, cp: i32, CharRep: i32, Options: i32, curCharRep: i32, curFontSize: i32, pbstr: ?*?BSTR, pPitchAndFamily: ?*i32, pNewFontSize: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetPreferredFont(self, cp, CharRep, Options, curCharRep, curFontSize, pbstr, pPitchAndFamily, pNewFontSize);
    }
    pub fn GetProperty(self: *const ITextDocument2, Type: i32, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetProperty(self, Type, pValue);
    }
    pub fn GetStrings(self: *const ITextDocument2, ppStrs: ?*?*ITextStrings) callconv(.Inline) HRESULT {
        return self.vtable.GetStrings(self, ppStrs);
    }
    pub fn Notify(self: *const ITextDocument2, _param_Notify: i32) callconv(.Inline) HRESULT {
        return self.vtable.Notify(self, _param_Notify);
    }
    pub fn Range2(self: *const ITextDocument2, cpActive: i32, cpAnchor: i32, ppRange: ?*?*ITextRange2) callconv(.Inline) HRESULT {
        return self.vtable.Range2(self, cpActive, cpAnchor, ppRange);
    }
    pub fn RangeFromPoint2(self: *const ITextDocument2, x: i32, y: i32, Type: i32, ppRange: ?*?*ITextRange2) callconv(.Inline) HRESULT {
        return self.vtable.RangeFromPoint2(self, x, y, Type, ppRange);
    }
    pub fn ReleaseCallManager(self: *const ITextDocument2, pVoid: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.ReleaseCallManager(self, pVoid);
    }
    pub fn ReleaseImmContext(self: *const ITextDocument2, Context: i64) callconv(.Inline) HRESULT {
        return self.vtable.ReleaseImmContext(self, Context);
    }
    pub fn SetEffectColor(self: *const ITextDocument2, Index: i32, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetEffectColor(self, Index, Value);
    }
    pub fn SetProperty(self: *const ITextDocument2, Type: i32, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetProperty(self, Type, Value);
    }
    pub fn SetTypographyOptions(self: *const ITextDocument2, Options: i32, Mask: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetTypographyOptions(self, Options, Mask);
    }
    pub fn SysBeep(self: *const ITextDocument2) callconv(.Inline) HRESULT {
        return self.vtable.SysBeep(self);
    }
    pub fn Update(self: *const ITextDocument2, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.Update(self, Value);
    }
    pub fn UpdateWindow(self: *const ITextDocument2) callconv(.Inline) HRESULT {
        return self.vtable.UpdateWindow(self);
    }
    pub fn GetMathProperties(self: *const ITextDocument2, pOptions: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetMathProperties(self, pOptions);
    }
    pub fn SetMathProperties(self: *const ITextDocument2, Options: i32, Mask: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetMathProperties(self, Options, Mask);
    }
    pub fn GetActiveStory(self: *const ITextDocument2, ppStory: ?*?*ITextStory) callconv(.Inline) HRESULT {
        return self.vtable.GetActiveStory(self, ppStory);
    }
    pub fn SetActiveStory(self: *const ITextDocument2, pStory: ?*ITextStory) callconv(.Inline) HRESULT {
        return self.vtable.SetActiveStory(self, pStory);
    }
    pub fn GetMainStory(self: *const ITextDocument2, ppStory: ?*?*ITextStory) callconv(.Inline) HRESULT {
        return self.vtable.GetMainStory(self, ppStory);
    }
    pub fn GetNewStory(self: *const ITextDocument2, ppStory: ?*?*ITextStory) callconv(.Inline) HRESULT {
        return self.vtable.GetNewStory(self, ppStory);
    }
    pub fn GetStory(self: *const ITextDocument2, Index: i32, ppStory: ?*?*ITextStory) callconv(.Inline) HRESULT {
        return self.vtable.GetStory(self, Index, ppStory);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ITextRange2_Value = Guid.initString("c241f5e2-7206-11d8-a2c7-00a0d1d6c6b3");
pub const IID_ITextRange2 = &IID_ITextRange2_Value;
pub const ITextRange2 = extern union {
    pub const VTable = extern struct {
        base: ITextSelection.VTable,
        GetCch: *const fn(
            self: *const ITextRange2,
            pcch: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCells: *const fn(
            self: *const ITextRange2,
            ppCells: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumn: *const fn(
            self: *const ITextRange2,
            ppColumn: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn(
            self: *const ITextRange2,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDuplicate2: *const fn(
            self: *const ITextRange2,
            ppRange: ?*?*ITextRange2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFont2: *const fn(
            self: *const ITextRange2,
            ppFont: ?*?*ITextFont2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFont2: *const fn(
            self: *const ITextRange2,
            pFont: ?*ITextFont2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormattedText2: *const fn(
            self: *const ITextRange2,
            ppRange: ?*?*ITextRange2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFormattedText2: *const fn(
            self: *const ITextRange2,
            pRange: ?*ITextRange2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGravity: *const fn(
            self: *const ITextRange2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGravity: *const fn(
            self: *const ITextRange2,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPara2: *const fn(
            self: *const ITextRange2,
            ppPara: ?*?*ITextPara2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPara2: *const fn(
            self: *const ITextRange2,
            pPara: ?*ITextPara2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRow: *const fn(
            self: *const ITextRange2,
            ppRow: ?*?*ITextRow,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStartPara: *const fn(
            self: *const ITextRange2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTable: *const fn(
            self: *const ITextRange2,
            ppTable: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetURL: *const fn(
            self: *const ITextRange2,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetURL: *const fn(
            self: *const ITextRange2,
            bstr: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddSubrange: *const fn(
            self: *const ITextRange2,
            cp1: i32,
            cp2: i32,
            Activate: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BuildUpMath: *const fn(
            self: *const ITextRange2,
            Flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteSubrange: *const fn(
            self: *const ITextRange2,
            cpFirst: i32,
            cpLim: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Find: *const fn(
            self: *const ITextRange2,
            pRange: ?*ITextRange2,
            Count: i32,
            Flags: i32,
            pDelta: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChar2: *const fn(
            self: *const ITextRange2,
            pChar: ?*i32,
            Offset: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDropCap: *const fn(
            self: *const ITextRange2,
            pcLine: ?*i32,
            pPosition: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInlineObject: *const fn(
            self: *const ITextRange2,
            pType: ?*i32,
            pAlign: ?*i32,
            pChar: ?*i32,
            pChar1: ?*i32,
            pChar2: ?*i32,
            pCount: ?*i32,
            pTeXStyle: ?*i32,
            pcCol: ?*i32,
            pLevel: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn(
            self: *const ITextRange2,
            Type: i32,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRect: *const fn(
            self: *const ITextRange2,
            Type: i32,
            pLeft: ?*i32,
            pTop: ?*i32,
            pRight: ?*i32,
            pBottom: ?*i32,
            pHit: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSubrange: *const fn(
            self: *const ITextRange2,
            iSubrange: i32,
            pcpFirst: ?*i32,
            pcpLim: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetText2: *const fn(
            self: *const ITextRange2,
            Flags: i32,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HexToUnicode: *const fn(
            self: *const ITextRange2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertTable: *const fn(
            self: *const ITextRange2,
            cCol: i32,
            cRow: i32,
            AutoFit: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Linearize: *const fn(
            self: *const ITextRange2,
            Flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActiveSubrange: *const fn(
            self: *const ITextRange2,
            cpAnchor: i32,
            cpActive: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDropCap: *const fn(
            self: *const ITextRange2,
            cLine: i32,
            Position: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn(
            self: *const ITextRange2,
            Type: i32,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetText2: *const fn(
            self: *const ITextRange2,
            Flags: i32,
            bstr: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnicodeToHex: *const fn(
            self: *const ITextRange2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInlineObject: *const fn(
            self: *const ITextRange2,
            Type: i32,
            Align: i32,
            Char: i32,
            Char1: i32,
            Char2: i32,
            Count: i32,
            TeXStyle: i32,
            cCol: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMathFunctionType: *const fn(
            self: *const ITextRange2,
            bstr: ?BSTR,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertImage: *const fn(
            self: *const ITextRange2,
            width: i32,
            height: i32,
            ascent: i32,
            Type: TEXT_ALIGN_OPTIONS,
            bstrAltText: ?BSTR,
            pStream: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ITextSelection: ITextSelection,
    ITextRange: ITextRange,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GetCch(self: *const ITextRange2, pcch: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCch(self, pcch);
    }
    pub fn GetCells(self: *const ITextRange2, ppCells: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.GetCells(self, ppCells);
    }
    pub fn GetColumn(self: *const ITextRange2, ppColumn: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.GetColumn(self, ppColumn);
    }
    pub fn GetCount(self: *const ITextRange2, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCount(self, pCount);
    }
    pub fn GetDuplicate2(self: *const ITextRange2, ppRange: ?*?*ITextRange2) callconv(.Inline) HRESULT {
        return self.vtable.GetDuplicate2(self, ppRange);
    }
    pub fn GetFont2(self: *const ITextRange2, ppFont: ?*?*ITextFont2) callconv(.Inline) HRESULT {
        return self.vtable.GetFont2(self, ppFont);
    }
    pub fn SetFont2(self: *const ITextRange2, pFont: ?*ITextFont2) callconv(.Inline) HRESULT {
        return self.vtable.SetFont2(self, pFont);
    }
    pub fn GetFormattedText2(self: *const ITextRange2, ppRange: ?*?*ITextRange2) callconv(.Inline) HRESULT {
        return self.vtable.GetFormattedText2(self, ppRange);
    }
    pub fn SetFormattedText2(self: *const ITextRange2, pRange: ?*ITextRange2) callconv(.Inline) HRESULT {
        return self.vtable.SetFormattedText2(self, pRange);
    }
    pub fn GetGravity(self: *const ITextRange2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetGravity(self, pValue);
    }
    pub fn SetGravity(self: *const ITextRange2, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetGravity(self, Value);
    }
    pub fn GetPara2(self: *const ITextRange2, ppPara: ?*?*ITextPara2) callconv(.Inline) HRESULT {
        return self.vtable.GetPara2(self, ppPara);
    }
    pub fn SetPara2(self: *const ITextRange2, pPara: ?*ITextPara2) callconv(.Inline) HRESULT {
        return self.vtable.SetPara2(self, pPara);
    }
    pub fn GetRow(self: *const ITextRange2, ppRow: ?*?*ITextRow) callconv(.Inline) HRESULT {
        return self.vtable.GetRow(self, ppRow);
    }
    pub fn GetStartPara(self: *const ITextRange2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetStartPara(self, pValue);
    }
    pub fn GetTable(self: *const ITextRange2, ppTable: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.GetTable(self, ppTable);
    }
    pub fn GetURL(self: *const ITextRange2, pbstr: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetURL(self, pbstr);
    }
    pub fn SetURL(self: *const ITextRange2, bstr: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.SetURL(self, bstr);
    }
    pub fn AddSubrange(self: *const ITextRange2, cp1: i32, cp2: i32, Activate: i32) callconv(.Inline) HRESULT {
        return self.vtable.AddSubrange(self, cp1, cp2, Activate);
    }
    pub fn BuildUpMath(self: *const ITextRange2, Flags: i32) callconv(.Inline) HRESULT {
        return self.vtable.BuildUpMath(self, Flags);
    }
    pub fn DeleteSubrange(self: *const ITextRange2, cpFirst: i32, cpLim: i32) callconv(.Inline) HRESULT {
        return self.vtable.DeleteSubrange(self, cpFirst, cpLim);
    }
    pub fn Find(self: *const ITextRange2, pRange: ?*ITextRange2, Count: i32, Flags: i32, pDelta: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.Find(self, pRange, Count, Flags, pDelta);
    }
    pub fn GetChar2(self: *const ITextRange2, pChar: ?*i32, Offset: i32) callconv(.Inline) HRESULT {
        return self.vtable.GetChar2(self, pChar, Offset);
    }
    pub fn GetDropCap(self: *const ITextRange2, pcLine: ?*i32, pPosition: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetDropCap(self, pcLine, pPosition);
    }
    pub fn GetInlineObject(self: *const ITextRange2, pType: ?*i32, pAlign: ?*i32, pChar: ?*i32, pChar1: ?*i32, pChar2: ?*i32, pCount: ?*i32, pTeXStyle: ?*i32, pcCol: ?*i32, pLevel: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetInlineObject(self, pType, pAlign, pChar, pChar1, pChar2, pCount, pTeXStyle, pcCol, pLevel);
    }
    pub fn GetProperty(self: *const ITextRange2, Type: i32, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetProperty(self, Type, pValue);
    }
    pub fn GetRect(self: *const ITextRange2, Type: i32, pLeft: ?*i32, pTop: ?*i32, pRight: ?*i32, pBottom: ?*i32, pHit: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetRect(self, Type, pLeft, pTop, pRight, pBottom, pHit);
    }
    pub fn GetSubrange(self: *const ITextRange2, iSubrange: i32, pcpFirst: ?*i32, pcpLim: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetSubrange(self, iSubrange, pcpFirst, pcpLim);
    }
    pub fn GetText2(self: *const ITextRange2, Flags: i32, pbstr: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetText2(self, Flags, pbstr);
    }
    pub fn HexToUnicode(self: *const ITextRange2) callconv(.Inline) HRESULT {
        return self.vtable.HexToUnicode(self);
    }
    pub fn InsertTable(self: *const ITextRange2, cCol: i32, cRow: i32, AutoFit: i32) callconv(.Inline) HRESULT {
        return self.vtable.InsertTable(self, cCol, cRow, AutoFit);
    }
    pub fn Linearize(self: *const ITextRange2, Flags: i32) callconv(.Inline) HRESULT {
        return self.vtable.Linearize(self, Flags);
    }
    pub fn SetActiveSubrange(self: *const ITextRange2, cpAnchor: i32, cpActive: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetActiveSubrange(self, cpAnchor, cpActive);
    }
    pub fn SetDropCap(self: *const ITextRange2, cLine: i32, Position: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetDropCap(self, cLine, Position);
    }
    pub fn SetProperty(self: *const ITextRange2, Type: i32, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetProperty(self, Type, Value);
    }
    pub fn SetText2(self: *const ITextRange2, Flags: i32, bstr: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.SetText2(self, Flags, bstr);
    }
    pub fn UnicodeToHex(self: *const ITextRange2) callconv(.Inline) HRESULT {
        return self.vtable.UnicodeToHex(self);
    }
    pub fn SetInlineObject(self: *const ITextRange2, Type: i32, Align: i32, Char: i32, Char1: i32, Char2: i32, Count: i32, TeXStyle: i32, cCol: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetInlineObject(self, Type, Align, Char, Char1, Char2, Count, TeXStyle, cCol);
    }
    pub fn GetMathFunctionType(self: *const ITextRange2, bstr: ?BSTR, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetMathFunctionType(self, bstr, pValue);
    }
    pub fn InsertImage(self: *const ITextRange2, width: i32, height: i32, ascent: i32, Type: TEXT_ALIGN_OPTIONS, bstrAltText: ?BSTR, pStream: ?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.InsertImage(self, width, height, ascent, Type, bstrAltText, pStream);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ITextSelection2_Value = Guid.initString("c241f5e1-7206-11d8-a2c7-00a0d1d6c6b3");
pub const IID_ITextSelection2 = &IID_ITextSelection2_Value;
pub const ITextSelection2 = extern union {
    pub const VTable = extern struct {
        base: ITextRange2.VTable,
    };
    vtable: *const VTable,
    ITextRange2: ITextRange2,
    ITextSelection: ITextSelection,
    ITextRange: ITextRange,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ITextFont2_Value = Guid.initString("c241f5e3-7206-11d8-a2c7-00a0d1d6c6b3");
pub const IID_ITextFont2 = &IID_ITextFont2_Value;
pub const ITextFont2 = extern union {
    pub const VTable = extern struct {
        base: ITextFont.VTable,
        GetCount: *const fn(
            self: *const ITextFont2,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAutoLigatures: *const fn(
            self: *const ITextFont2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAutoLigatures: *const fn(
            self: *const ITextFont2,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAutospaceAlpha: *const fn(
            self: *const ITextFont2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAutospaceAlpha: *const fn(
            self: *const ITextFont2,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAutospaceNumeric: *const fn(
            self: *const ITextFont2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAutospaceNumeric: *const fn(
            self: *const ITextFont2,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAutospaceParens: *const fn(
            self: *const ITextFont2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAutospaceParens: *const fn(
            self: *const ITextFont2,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCharRep: *const fn(
            self: *const ITextFont2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCharRep: *const fn(
            self: *const ITextFont2,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCompressionMode: *const fn(
            self: *const ITextFont2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCompressionMode: *const fn(
            self: *const ITextFont2,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCookie: *const fn(
            self: *const ITextFont2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCookie: *const fn(
            self: *const ITextFont2,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDoubleStrike: *const fn(
            self: *const ITextFont2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDoubleStrike: *const fn(
            self: *const ITextFont2,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDuplicate2: *const fn(
            self: *const ITextFont2,
            ppFont: ?*?*ITextFont2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDuplicate2: *const fn(
            self: *const ITextFont2,
            pFont: ?*ITextFont2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLinkType: *const fn(
            self: *const ITextFont2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMathZone: *const fn(
            self: *const ITextFont2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMathZone: *const fn(
            self: *const ITextFont2,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetModWidthPairs: *const fn(
            self: *const ITextFont2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetModWidthPairs: *const fn(
            self: *const ITextFont2,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetModWidthSpace: *const fn(
            self: *const ITextFont2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetModWidthSpace: *const fn(
            self: *const ITextFont2,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOldNumbers: *const fn(
            self: *const ITextFont2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOldNumbers: *const fn(
            self: *const ITextFont2,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOverlapping: *const fn(
            self: *const ITextFont2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOverlapping: *const fn(
            self: *const ITextFont2,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPositionSubSuper: *const fn(
            self: *const ITextFont2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPositionSubSuper: *const fn(
            self: *const ITextFont2,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetScaling: *const fn(
            self: *const ITextFont2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScaling: *const fn(
            self: *const ITextFont2,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSpaceExtension: *const fn(
            self: *const ITextFont2,
            pValue: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSpaceExtension: *const fn(
            self: *const ITextFont2,
            Value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUnderlinePositionMode: *const fn(
            self: *const ITextFont2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUnderlinePositionMode: *const fn(
            self: *const ITextFont2,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEffects: *const fn(
            self: *const ITextFont2,
            pValue: ?*i32,
            pMask: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEffects2: *const fn(
            self: *const ITextFont2,
            pValue: ?*i32,
            pMask: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn(
            self: *const ITextFont2,
            Type: i32,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyInfo: *const fn(
            self: *const ITextFont2,
            Index: i32,
            pType: ?*i32,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsEqual2: *const fn(
            self: *const ITextFont2,
            pFont: ?*ITextFont2,
            pB: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEffects: *const fn(
            self: *const ITextFont2,
            Value: i32,
            Mask: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEffects2: *const fn(
            self: *const ITextFont2,
            Value: i32,
            Mask: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn(
            self: *const ITextFont2,
            Type: i32,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ITextFont: ITextFont,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GetCount(self: *const ITextFont2, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCount(self, pCount);
    }
    pub fn GetAutoLigatures(self: *const ITextFont2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetAutoLigatures(self, pValue);
    }
    pub fn SetAutoLigatures(self: *const ITextFont2, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetAutoLigatures(self, Value);
    }
    pub fn GetAutospaceAlpha(self: *const ITextFont2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetAutospaceAlpha(self, pValue);
    }
    pub fn SetAutospaceAlpha(self: *const ITextFont2, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetAutospaceAlpha(self, Value);
    }
    pub fn GetAutospaceNumeric(self: *const ITextFont2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetAutospaceNumeric(self, pValue);
    }
    pub fn SetAutospaceNumeric(self: *const ITextFont2, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetAutospaceNumeric(self, Value);
    }
    pub fn GetAutospaceParens(self: *const ITextFont2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetAutospaceParens(self, pValue);
    }
    pub fn SetAutospaceParens(self: *const ITextFont2, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetAutospaceParens(self, Value);
    }
    pub fn GetCharRep(self: *const ITextFont2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCharRep(self, pValue);
    }
    pub fn SetCharRep(self: *const ITextFont2, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetCharRep(self, Value);
    }
    pub fn GetCompressionMode(self: *const ITextFont2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCompressionMode(self, pValue);
    }
    pub fn SetCompressionMode(self: *const ITextFont2, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetCompressionMode(self, Value);
    }
    pub fn GetCookie(self: *const ITextFont2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCookie(self, pValue);
    }
    pub fn SetCookie(self: *const ITextFont2, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetCookie(self, Value);
    }
    pub fn GetDoubleStrike(self: *const ITextFont2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetDoubleStrike(self, pValue);
    }
    pub fn SetDoubleStrike(self: *const ITextFont2, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetDoubleStrike(self, Value);
    }
    pub fn GetDuplicate2(self: *const ITextFont2, ppFont: ?*?*ITextFont2) callconv(.Inline) HRESULT {
        return self.vtable.GetDuplicate2(self, ppFont);
    }
    pub fn SetDuplicate2(self: *const ITextFont2, pFont: ?*ITextFont2) callconv(.Inline) HRESULT {
        return self.vtable.SetDuplicate2(self, pFont);
    }
    pub fn GetLinkType(self: *const ITextFont2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetLinkType(self, pValue);
    }
    pub fn GetMathZone(self: *const ITextFont2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetMathZone(self, pValue);
    }
    pub fn SetMathZone(self: *const ITextFont2, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetMathZone(self, Value);
    }
    pub fn GetModWidthPairs(self: *const ITextFont2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetModWidthPairs(self, pValue);
    }
    pub fn SetModWidthPairs(self: *const ITextFont2, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetModWidthPairs(self, Value);
    }
    pub fn GetModWidthSpace(self: *const ITextFont2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetModWidthSpace(self, pValue);
    }
    pub fn SetModWidthSpace(self: *const ITextFont2, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetModWidthSpace(self, Value);
    }
    pub fn GetOldNumbers(self: *const ITextFont2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetOldNumbers(self, pValue);
    }
    pub fn SetOldNumbers(self: *const ITextFont2, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetOldNumbers(self, Value);
    }
    pub fn GetOverlapping(self: *const ITextFont2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetOverlapping(self, pValue);
    }
    pub fn SetOverlapping(self: *const ITextFont2, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetOverlapping(self, Value);
    }
    pub fn GetPositionSubSuper(self: *const ITextFont2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetPositionSubSuper(self, pValue);
    }
    pub fn SetPositionSubSuper(self: *const ITextFont2, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetPositionSubSuper(self, Value);
    }
    pub fn GetScaling(self: *const ITextFont2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetScaling(self, pValue);
    }
    pub fn SetScaling(self: *const ITextFont2, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetScaling(self, Value);
    }
    pub fn GetSpaceExtension(self: *const ITextFont2, pValue: ?*f32) callconv(.Inline) HRESULT {
        return self.vtable.GetSpaceExtension(self, pValue);
    }
    pub fn SetSpaceExtension(self: *const ITextFont2, Value: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetSpaceExtension(self, Value);
    }
    pub fn GetUnderlinePositionMode(self: *const ITextFont2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetUnderlinePositionMode(self, pValue);
    }
    pub fn SetUnderlinePositionMode(self: *const ITextFont2, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetUnderlinePositionMode(self, Value);
    }
    pub fn GetEffects(self: *const ITextFont2, pValue: ?*i32, pMask: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetEffects(self, pValue, pMask);
    }
    pub fn GetEffects2(self: *const ITextFont2, pValue: ?*i32, pMask: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetEffects2(self, pValue, pMask);
    }
    pub fn GetProperty(self: *const ITextFont2, Type: i32, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetProperty(self, Type, pValue);
    }
    pub fn GetPropertyInfo(self: *const ITextFont2, Index: i32, pType: ?*i32, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyInfo(self, Index, pType, pValue);
    }
    pub fn IsEqual2(self: *const ITextFont2, pFont: ?*ITextFont2, pB: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.IsEqual2(self, pFont, pB);
    }
    pub fn SetEffects(self: *const ITextFont2, Value: i32, Mask: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetEffects(self, Value, Mask);
    }
    pub fn SetEffects2(self: *const ITextFont2, Value: i32, Mask: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetEffects2(self, Value, Mask);
    }
    pub fn SetProperty(self: *const ITextFont2, Type: i32, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetProperty(self, Type, Value);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ITextPara2_Value = Guid.initString("c241f5e4-7206-11d8-a2c7-00a0d1d6c6b3");
pub const IID_ITextPara2 = &IID_ITextPara2_Value;
pub const ITextPara2 = extern union {
    pub const VTable = extern struct {
        base: ITextPara.VTable,
        GetBorders: *const fn(
            self: *const ITextPara2,
            ppBorders: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDuplicate2: *const fn(
            self: *const ITextPara2,
            ppPara: ?*?*ITextPara2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDuplicate2: *const fn(
            self: *const ITextPara2,
            pPara: ?*ITextPara2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontAlignment: *const fn(
            self: *const ITextPara2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFontAlignment: *const fn(
            self: *const ITextPara2,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHangingPunctuation: *const fn(
            self: *const ITextPara2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHangingPunctuation: *const fn(
            self: *const ITextPara2,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSnapToGrid: *const fn(
            self: *const ITextPara2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSnapToGrid: *const fn(
            self: *const ITextPara2,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTrimPunctuationAtStart: *const fn(
            self: *const ITextPara2,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTrimPunctuationAtStart: *const fn(
            self: *const ITextPara2,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEffects: *const fn(
            self: *const ITextPara2,
            pValue: ?*i32,
            pMask: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn(
            self: *const ITextPara2,
            Type: i32,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsEqual2: *const fn(
            self: *const ITextPara2,
            pPara: ?*ITextPara2,
            pB: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEffects: *const fn(
            self: *const ITextPara2,
            Value: i32,
            Mask: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn(
            self: *const ITextPara2,
            Type: i32,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ITextPara: ITextPara,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GetBorders(self: *const ITextPara2, ppBorders: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.GetBorders(self, ppBorders);
    }
    pub fn GetDuplicate2(self: *const ITextPara2, ppPara: ?*?*ITextPara2) callconv(.Inline) HRESULT {
        return self.vtable.GetDuplicate2(self, ppPara);
    }
    pub fn SetDuplicate2(self: *const ITextPara2, pPara: ?*ITextPara2) callconv(.Inline) HRESULT {
        return self.vtable.SetDuplicate2(self, pPara);
    }
    pub fn GetFontAlignment(self: *const ITextPara2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetFontAlignment(self, pValue);
    }
    pub fn SetFontAlignment(self: *const ITextPara2, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetFontAlignment(self, Value);
    }
    pub fn GetHangingPunctuation(self: *const ITextPara2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetHangingPunctuation(self, pValue);
    }
    pub fn SetHangingPunctuation(self: *const ITextPara2, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetHangingPunctuation(self, Value);
    }
    pub fn GetSnapToGrid(self: *const ITextPara2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetSnapToGrid(self, pValue);
    }
    pub fn SetSnapToGrid(self: *const ITextPara2, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetSnapToGrid(self, Value);
    }
    pub fn GetTrimPunctuationAtStart(self: *const ITextPara2, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetTrimPunctuationAtStart(self, pValue);
    }
    pub fn SetTrimPunctuationAtStart(self: *const ITextPara2, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetTrimPunctuationAtStart(self, Value);
    }
    pub fn GetEffects(self: *const ITextPara2, pValue: ?*i32, pMask: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetEffects(self, pValue, pMask);
    }
    pub fn GetProperty(self: *const ITextPara2, Type: i32, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetProperty(self, Type, pValue);
    }
    pub fn IsEqual2(self: *const ITextPara2, pPara: ?*ITextPara2, pB: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.IsEqual2(self, pPara, pB);
    }
    pub fn SetEffects(self: *const ITextPara2, Value: i32, Mask: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetEffects(self, Value, Mask);
    }
    pub fn SetProperty(self: *const ITextPara2, Type: i32, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetProperty(self, Type, Value);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ITextStoryRanges2_Value = Guid.initString("c241f5e5-7206-11d8-a2c7-00a0d1d6c6b3");
pub const IID_ITextStoryRanges2 = &IID_ITextStoryRanges2_Value;
pub const ITextStoryRanges2 = extern union {
    pub const VTable = extern struct {
        base: ITextStoryRanges.VTable,
        Item2: *const fn(
            self: *const ITextStoryRanges2,
            Index: i32,
            ppRange: ?*?*ITextRange2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ITextStoryRanges: ITextStoryRanges,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Item2(self: *const ITextStoryRanges2, Index: i32, ppRange: ?*?*ITextRange2) callconv(.Inline) HRESULT {
        return self.vtable.Item2(self, Index, ppRange);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ITextStory_Value = Guid.initString("c241f5f3-7206-11d8-a2c7-00a0d1d6c6b3");
pub const IID_ITextStory = &IID_ITextStory_Value;
pub const ITextStory = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetActive: *const fn(
            self: *const ITextStory,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActive: *const fn(
            self: *const ITextStory,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplay: *const fn(
            self: *const ITextStory,
            ppDisplay: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIndex: *const fn(
            self: *const ITextStory,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetType: *const fn(
            self: *const ITextStory,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetType: *const fn(
            self: *const ITextStory,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn(
            self: *const ITextStory,
            Type: i32,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRange: *const fn(
            self: *const ITextStory,
            cpActive: i32,
            cpAnchor: i32,
            ppRange: ?*?*ITextRange2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetText: *const fn(
            self: *const ITextStory,
            Flags: i32,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFormattedText: *const fn(
            self: *const ITextStory,
            pUnk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn(
            self: *const ITextStory,
            Type: i32,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetText: *const fn(
            self: *const ITextStory,
            Flags: i32,
            bstr: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetActive(self: *const ITextStory, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetActive(self, pValue);
    }
    pub fn SetActive(self: *const ITextStory, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetActive(self, Value);
    }
    pub fn GetDisplay(self: *const ITextStory, ppDisplay: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.GetDisplay(self, ppDisplay);
    }
    pub fn GetIndex(self: *const ITextStory, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetIndex(self, pValue);
    }
    pub fn GetType(self: *const ITextStory, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetType(self, pValue);
    }
    pub fn SetType(self: *const ITextStory, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetType(self, Value);
    }
    pub fn GetProperty(self: *const ITextStory, Type: i32, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetProperty(self, Type, pValue);
    }
    pub fn GetRange(self: *const ITextStory, cpActive: i32, cpAnchor: i32, ppRange: ?*?*ITextRange2) callconv(.Inline) HRESULT {
        return self.vtable.GetRange(self, cpActive, cpAnchor, ppRange);
    }
    pub fn GetText(self: *const ITextStory, Flags: i32, pbstr: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetText(self, Flags, pbstr);
    }
    pub fn SetFormattedText(self: *const ITextStory, pUnk: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.SetFormattedText(self, pUnk);
    }
    pub fn SetProperty(self: *const ITextStory, Type: i32, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetProperty(self, Type, Value);
    }
    pub fn SetText(self: *const ITextStory, Flags: i32, bstr: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.SetText(self, Flags, bstr);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ITextStrings_Value = Guid.initString("c241f5e7-7206-11d8-a2c7-00a0d1d6c6b3");
pub const IID_ITextStrings = &IID_ITextStrings_Value;
pub const ITextStrings = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Item: *const fn(
            self: *const ITextStrings,
            Index: i32,
            ppRange: ?*?*ITextRange2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn(
            self: *const ITextStrings,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const ITextStrings,
            bstr: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: *const fn(
            self: *const ITextStrings,
            pRange: ?*ITextRange2,
            iString: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cat2: *const fn(
            self: *const ITextStrings,
            iString: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CatTop2: *const fn(
            self: *const ITextStrings,
            bstr: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteRange: *const fn(
            self: *const ITextStrings,
            pRange: ?*ITextRange2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EncodeFunction: *const fn(
            self: *const ITextStrings,
            Type: i32,
            Align: i32,
            Char: i32,
            Char1: i32,
            Char2: i32,
            Count: i32,
            TeXStyle: i32,
            cCol: i32,
            pRange: ?*ITextRange2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCch: *const fn(
            self: *const ITextStrings,
            iString: i32,
            pcch: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertNullStr: *const fn(
            self: *const ITextStrings,
            iString: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveBoundary: *const fn(
            self: *const ITextStrings,
            iString: i32,
            cch: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrefixTop: *const fn(
            self: *const ITextStrings,
            bstr: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const ITextStrings,
            iString: i32,
            cString: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFormattedText: *const fn(
            self: *const ITextStrings,
            pRangeD: ?*ITextRange2,
            pRangeS: ?*ITextRange2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOpCp: *const fn(
            self: *const ITextStrings,
            iString: i32,
            cp: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SuffixTop: *const fn(
            self: *const ITextStrings,
            bstr: ?BSTR,
            pRange: ?*ITextRange2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Swap: *const fn(
            self: *const ITextStrings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Item(self: *const ITextStrings, Index: i32, ppRange: ?*?*ITextRange2) callconv(.Inline) HRESULT {
        return self.vtable.Item(self, Index, ppRange);
    }
    pub fn GetCount(self: *const ITextStrings, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCount(self, pCount);
    }
    pub fn Add(self: *const ITextStrings, bstr: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, bstr);
    }
    pub fn Append(self: *const ITextStrings, pRange: ?*ITextRange2, iString: i32) callconv(.Inline) HRESULT {
        return self.vtable.Append(self, pRange, iString);
    }
    pub fn Cat2(self: *const ITextStrings, iString: i32) callconv(.Inline) HRESULT {
        return self.vtable.Cat2(self, iString);
    }
    pub fn CatTop2(self: *const ITextStrings, bstr: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.CatTop2(self, bstr);
    }
    pub fn DeleteRange(self: *const ITextStrings, pRange: ?*ITextRange2) callconv(.Inline) HRESULT {
        return self.vtable.DeleteRange(self, pRange);
    }
    pub fn EncodeFunction(self: *const ITextStrings, Type: i32, Align: i32, Char: i32, Char1: i32, Char2: i32, Count: i32, TeXStyle: i32, cCol: i32, pRange: ?*ITextRange2) callconv(.Inline) HRESULT {
        return self.vtable.EncodeFunction(self, Type, Align, Char, Char1, Char2, Count, TeXStyle, cCol, pRange);
    }
    pub fn GetCch(self: *const ITextStrings, iString: i32, pcch: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCch(self, iString, pcch);
    }
    pub fn InsertNullStr(self: *const ITextStrings, iString: i32) callconv(.Inline) HRESULT {
        return self.vtable.InsertNullStr(self, iString);
    }
    pub fn MoveBoundary(self: *const ITextStrings, iString: i32, cch: i32) callconv(.Inline) HRESULT {
        return self.vtable.MoveBoundary(self, iString, cch);
    }
    pub fn PrefixTop(self: *const ITextStrings, bstr: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.PrefixTop(self, bstr);
    }
    pub fn Remove(self: *const ITextStrings, iString: i32, cString: i32) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, iString, cString);
    }
    pub fn SetFormattedText(self: *const ITextStrings, pRangeD: ?*ITextRange2, pRangeS: ?*ITextRange2) callconv(.Inline) HRESULT {
        return self.vtable.SetFormattedText(self, pRangeD, pRangeS);
    }
    pub fn SetOpCp(self: *const ITextStrings, iString: i32, cp: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetOpCp(self, iString, cp);
    }
    pub fn SuffixTop(self: *const ITextStrings, bstr: ?BSTR, pRange: ?*ITextRange2) callconv(.Inline) HRESULT {
        return self.vtable.SuffixTop(self, bstr, pRange);
    }
    pub fn Swap(self: *const ITextStrings) callconv(.Inline) HRESULT {
        return self.vtable.Swap(self);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ITextRow_Value = Guid.initString("c241f5ef-7206-11d8-a2c7-00a0d1d6c6b3");
pub const IID_ITextRow = &IID_ITextRow_Value;
pub const ITextRow = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetAlignment: *const fn(
            self: *const ITextRow,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlignment: *const fn(
            self: *const ITextRow,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCellCount: *const fn(
            self: *const ITextRow,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCellCount: *const fn(
            self: *const ITextRow,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCellCountCache: *const fn(
            self: *const ITextRow,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCellCountCache: *const fn(
            self: *const ITextRow,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCellIndex: *const fn(
            self: *const ITextRow,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCellIndex: *const fn(
            self: *const ITextRow,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCellMargin: *const fn(
            self: *const ITextRow,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCellMargin: *const fn(
            self: *const ITextRow,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHeight: *const fn(
            self: *const ITextRow,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHeight: *const fn(
            self: *const ITextRow,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIndent: *const fn(
            self: *const ITextRow,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIndent: *const fn(
            self: *const ITextRow,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeepTogether: *const fn(
            self: *const ITextRow,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetKeepTogether: *const fn(
            self: *const ITextRow,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeepWithNext: *const fn(
            self: *const ITextRow,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetKeepWithNext: *const fn(
            self: *const ITextRow,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNestLevel: *const fn(
            self: *const ITextRow,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRTL: *const fn(
            self: *const ITextRow,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRTL: *const fn(
            self: *const ITextRow,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCellAlignment: *const fn(
            self: *const ITextRow,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCellAlignment: *const fn(
            self: *const ITextRow,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCellColorBack: *const fn(
            self: *const ITextRow,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCellColorBack: *const fn(
            self: *const ITextRow,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCellColorFore: *const fn(
            self: *const ITextRow,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCellColorFore: *const fn(
            self: *const ITextRow,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCellMergeFlags: *const fn(
            self: *const ITextRow,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCellMergeFlags: *const fn(
            self: *const ITextRow,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCellShading: *const fn(
            self: *const ITextRow,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCellShading: *const fn(
            self: *const ITextRow,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCellVerticalText: *const fn(
            self: *const ITextRow,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCellVerticalText: *const fn(
            self: *const ITextRow,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCellWidth: *const fn(
            self: *const ITextRow,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCellWidth: *const fn(
            self: *const ITextRow,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCellBorderColors: *const fn(
            self: *const ITextRow,
            pcrLeft: ?*i32,
            pcrTop: ?*i32,
            pcrRight: ?*i32,
            pcrBottom: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCellBorderWidths: *const fn(
            self: *const ITextRow,
            pduLeft: ?*i32,
            pduTop: ?*i32,
            pduRight: ?*i32,
            pduBottom: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCellBorderColors: *const fn(
            self: *const ITextRow,
            crLeft: i32,
            crTop: i32,
            crRight: i32,
            crBottom: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCellBorderWidths: *const fn(
            self: *const ITextRow,
            duLeft: i32,
            duTop: i32,
            duRight: i32,
            duBottom: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Apply: *const fn(
            self: *const ITextRow,
            cRow: i32,
            Flags: tomConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanChange: *const fn(
            self: *const ITextRow,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn(
            self: *const ITextRow,
            Type: i32,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Insert: *const fn(
            self: *const ITextRow,
            cRow: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsEqual: *const fn(
            self: *const ITextRow,
            pRow: ?*ITextRow,
            pB: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const ITextRow,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn(
            self: *const ITextRow,
            Type: i32,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GetAlignment(self: *const ITextRow, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetAlignment(self, pValue);
    }
    pub fn SetAlignment(self: *const ITextRow, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetAlignment(self, Value);
    }
    pub fn GetCellCount(self: *const ITextRow, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCellCount(self, pValue);
    }
    pub fn SetCellCount(self: *const ITextRow, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetCellCount(self, Value);
    }
    pub fn GetCellCountCache(self: *const ITextRow, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCellCountCache(self, pValue);
    }
    pub fn SetCellCountCache(self: *const ITextRow, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetCellCountCache(self, Value);
    }
    pub fn GetCellIndex(self: *const ITextRow, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCellIndex(self, pValue);
    }
    pub fn SetCellIndex(self: *const ITextRow, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetCellIndex(self, Value);
    }
    pub fn GetCellMargin(self: *const ITextRow, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCellMargin(self, pValue);
    }
    pub fn SetCellMargin(self: *const ITextRow, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetCellMargin(self, Value);
    }
    pub fn GetHeight(self: *const ITextRow, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetHeight(self, pValue);
    }
    pub fn SetHeight(self: *const ITextRow, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetHeight(self, Value);
    }
    pub fn GetIndent(self: *const ITextRow, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetIndent(self, pValue);
    }
    pub fn SetIndent(self: *const ITextRow, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetIndent(self, Value);
    }
    pub fn GetKeepTogether(self: *const ITextRow, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetKeepTogether(self, pValue);
    }
    pub fn SetKeepTogether(self: *const ITextRow, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetKeepTogether(self, Value);
    }
    pub fn GetKeepWithNext(self: *const ITextRow, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetKeepWithNext(self, pValue);
    }
    pub fn SetKeepWithNext(self: *const ITextRow, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetKeepWithNext(self, Value);
    }
    pub fn GetNestLevel(self: *const ITextRow, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetNestLevel(self, pValue);
    }
    pub fn GetRTL(self: *const ITextRow, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetRTL(self, pValue);
    }
    pub fn SetRTL(self: *const ITextRow, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetRTL(self, Value);
    }
    pub fn GetCellAlignment(self: *const ITextRow, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCellAlignment(self, pValue);
    }
    pub fn SetCellAlignment(self: *const ITextRow, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetCellAlignment(self, Value);
    }
    pub fn GetCellColorBack(self: *const ITextRow, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCellColorBack(self, pValue);
    }
    pub fn SetCellColorBack(self: *const ITextRow, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetCellColorBack(self, Value);
    }
    pub fn GetCellColorFore(self: *const ITextRow, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCellColorFore(self, pValue);
    }
    pub fn SetCellColorFore(self: *const ITextRow, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetCellColorFore(self, Value);
    }
    pub fn GetCellMergeFlags(self: *const ITextRow, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCellMergeFlags(self, pValue);
    }
    pub fn SetCellMergeFlags(self: *const ITextRow, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetCellMergeFlags(self, Value);
    }
    pub fn GetCellShading(self: *const ITextRow, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCellShading(self, pValue);
    }
    pub fn SetCellShading(self: *const ITextRow, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetCellShading(self, Value);
    }
    pub fn GetCellVerticalText(self: *const ITextRow, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCellVerticalText(self, pValue);
    }
    pub fn SetCellVerticalText(self: *const ITextRow, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetCellVerticalText(self, Value);
    }
    pub fn GetCellWidth(self: *const ITextRow, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCellWidth(self, pValue);
    }
    pub fn SetCellWidth(self: *const ITextRow, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetCellWidth(self, Value);
    }
    pub fn GetCellBorderColors(self: *const ITextRow, pcrLeft: ?*i32, pcrTop: ?*i32, pcrRight: ?*i32, pcrBottom: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCellBorderColors(self, pcrLeft, pcrTop, pcrRight, pcrBottom);
    }
    pub fn GetCellBorderWidths(self: *const ITextRow, pduLeft: ?*i32, pduTop: ?*i32, pduRight: ?*i32, pduBottom: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCellBorderWidths(self, pduLeft, pduTop, pduRight, pduBottom);
    }
    pub fn SetCellBorderColors(self: *const ITextRow, crLeft: i32, crTop: i32, crRight: i32, crBottom: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetCellBorderColors(self, crLeft, crTop, crRight, crBottom);
    }
    pub fn SetCellBorderWidths(self: *const ITextRow, duLeft: i32, duTop: i32, duRight: i32, duBottom: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetCellBorderWidths(self, duLeft, duTop, duRight, duBottom);
    }
    pub fn Apply(self: *const ITextRow, cRow: i32, Flags: tomConstants) callconv(.Inline) HRESULT {
        return self.vtable.Apply(self, cRow, Flags);
    }
    pub fn CanChange(self: *const ITextRow, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.CanChange(self, pValue);
    }
    pub fn GetProperty(self: *const ITextRow, Type: i32, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetProperty(self, Type, pValue);
    }
    pub fn Insert(self: *const ITextRow, cRow: i32) callconv(.Inline) HRESULT {
        return self.vtable.Insert(self, cRow);
    }
    pub fn IsEqual(self: *const ITextRow, pRow: ?*ITextRow, pB: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.IsEqual(self, pRow, pB);
    }
    pub fn Reset(self: *const ITextRow, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self, Value);
    }
    pub fn SetProperty(self: *const ITextRow, Type: i32, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetProperty(self, Type, Value);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ITextDisplays_Value = Guid.initString("c241f5f2-7206-11d8-a2c7-00a0d1d6c6b3");
pub const IID_ITextDisplays = &IID_ITextDisplays_Value;
pub const ITextDisplays = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_ITextDocument2Old_Value = Guid.initString("01c25500-4268-11d1-883a-3c8b00c10000");
pub const IID_ITextDocument2Old = &IID_ITextDocument2Old_Value;
pub const ITextDocument2Old = extern union {
    pub const VTable = extern struct {
        base: ITextDocument.VTable,
        AttachMsgFilter: *const fn(
            self: *const ITextDocument2Old,
            pFilter: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEffectColor: *const fn(
            self: *const ITextDocument2Old,
            Index: i32,
            cr: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEffectColor: *const fn(
            self: *const ITextDocument2Old,
            Index: i32,
            pcr: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCaretType: *const fn(
            self: *const ITextDocument2Old,
            pCaretType: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCaretType: *const fn(
            self: *const ITextDocument2Old,
            CaretType: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetImmContext: *const fn(
            self: *const ITextDocument2Old,
            pContext: ?*i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseImmContext: *const fn(
            self: *const ITextDocument2Old,
            Context: i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPreferredFont: *const fn(
            self: *const ITextDocument2Old,
            cp: i32,
            CharRep: i32,
            Option: i32,
            CharRepCur: i32,
            curFontSize: i32,
            pbstr: ?*?BSTR,
            pPitchAndFamily: ?*i32,
            pNewFontSize: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNotificationMode: *const fn(
            self: *const ITextDocument2Old,
            pMode: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNotificationMode: *const fn(
            self: *const ITextDocument2Old,
            Mode: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClientRect: *const fn(
            self: *const ITextDocument2Old,
            Type: i32,
            pLeft: ?*i32,
            pTop: ?*i32,
            pRight: ?*i32,
            pBottom: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelection2: *const fn(
            self: *const ITextDocument2Old,
            ppSel: ?*?*ITextSelection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWindow: *const fn(
            self: *const ITextDocument2Old,
            phWnd: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFEFlags: *const fn(
            self: *const ITextDocument2Old,
            pFlags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateWindow: *const fn(
            self: *const ITextDocument2Old,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckTextLimit: *const fn(
            self: *const ITextDocument2Old,
            cch: i32,
            pcch: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IMEInProgress: *const fn(
            self: *const ITextDocument2Old,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SysBeep: *const fn(
            self: *const ITextDocument2Old,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Update: *const fn(
            self: *const ITextDocument2Old,
            Mode: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Notify: *const fn(
            self: *const ITextDocument2Old,
            Notify: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDocumentFont: *const fn(
            self: *const ITextDocument2Old,
            ppITextFont: ?*?*ITextFont,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDocumentPara: *const fn(
            self: *const ITextDocument2Old,
            ppITextPara: ?*?*ITextPara,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCallManager: *const fn(
            self: *const ITextDocument2Old,
            ppVoid: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseCallManager: *const fn(
            self: *const ITextDocument2Old,
            pVoid: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ITextDocument: ITextDocument,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn AttachMsgFilter(self: *const ITextDocument2Old, pFilter: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.AttachMsgFilter(self, pFilter);
    }
    pub fn SetEffectColor(self: *const ITextDocument2Old, Index: i32, cr: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetEffectColor(self, Index, cr);
    }
    pub fn GetEffectColor(self: *const ITextDocument2Old, Index: i32, pcr: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetEffectColor(self, Index, pcr);
    }
    pub fn GetCaretType(self: *const ITextDocument2Old, pCaretType: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCaretType(self, pCaretType);
    }
    pub fn SetCaretType(self: *const ITextDocument2Old, CaretType: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetCaretType(self, CaretType);
    }
    pub fn GetImmContext(self: *const ITextDocument2Old, pContext: ?*i64) callconv(.Inline) HRESULT {
        return self.vtable.GetImmContext(self, pContext);
    }
    pub fn ReleaseImmContext(self: *const ITextDocument2Old, Context: i64) callconv(.Inline) HRESULT {
        return self.vtable.ReleaseImmContext(self, Context);
    }
    pub fn GetPreferredFont(self: *const ITextDocument2Old, cp: i32, CharRep: i32, Option: i32, CharRepCur: i32, curFontSize: i32, pbstr: ?*?BSTR, pPitchAndFamily: ?*i32, pNewFontSize: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetPreferredFont(self, cp, CharRep, Option, CharRepCur, curFontSize, pbstr, pPitchAndFamily, pNewFontSize);
    }
    pub fn GetNotificationMode(self: *const ITextDocument2Old, pMode: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetNotificationMode(self, pMode);
    }
    pub fn SetNotificationMode(self: *const ITextDocument2Old, Mode: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetNotificationMode(self, Mode);
    }
    pub fn GetClientRect(self: *const ITextDocument2Old, Type: i32, pLeft: ?*i32, pTop: ?*i32, pRight: ?*i32, pBottom: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetClientRect(self, Type, pLeft, pTop, pRight, pBottom);
    }
    pub fn GetSelection2(self: *const ITextDocument2Old, ppSel: ?*?*ITextSelection) callconv(.Inline) HRESULT {
        return self.vtable.GetSelection2(self, ppSel);
    }
    pub fn GetWindow(self: *const ITextDocument2Old, phWnd: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetWindow(self, phWnd);
    }
    pub fn GetFEFlags(self: *const ITextDocument2Old, pFlags: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetFEFlags(self, pFlags);
    }
    pub fn UpdateWindow(self: *const ITextDocument2Old) callconv(.Inline) HRESULT {
        return self.vtable.UpdateWindow(self);
    }
    pub fn CheckTextLimit(self: *const ITextDocument2Old, cch: i32, pcch: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.CheckTextLimit(self, cch, pcch);
    }
    pub fn IMEInProgress(self: *const ITextDocument2Old, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.IMEInProgress(self, Value);
    }
    pub fn SysBeep(self: *const ITextDocument2Old) callconv(.Inline) HRESULT {
        return self.vtable.SysBeep(self);
    }
    pub fn Update(self: *const ITextDocument2Old, Mode: i32) callconv(.Inline) HRESULT {
        return self.vtable.Update(self, Mode);
    }
    pub fn Notify(self: *const ITextDocument2Old, _param_Notify: i32) callconv(.Inline) HRESULT {
        return self.vtable.Notify(self, _param_Notify);
    }
    pub fn GetDocumentFont(self: *const ITextDocument2Old, ppITextFont: ?*?*ITextFont) callconv(.Inline) HRESULT {
        return self.vtable.GetDocumentFont(self, ppITextFont);
    }
    pub fn GetDocumentPara(self: *const ITextDocument2Old, ppITextPara: ?*?*ITextPara) callconv(.Inline) HRESULT {
        return self.vtable.GetDocumentPara(self, ppITextPara);
    }
    pub fn GetCallManager(self: *const ITextDocument2Old, ppVoid: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.GetCallManager(self, ppVoid);
    }
    pub fn ReleaseCallManager(self: *const ITextDocument2Old, pVoid: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.ReleaseCallManager(self, pVoid);
    }
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (5)
//--------------------------------------------------------------------------------
pub const CHARFORMAT = switch (@import("../../zig.zig").unicode_mode) {
    .ansi => @This().CHARFORMATA,
    .wide => @This().CHARFORMATW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CHARFORMAT' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CHARFORMAT2 = switch (@import("../../zig.zig").unicode_mode) {
    .ansi => @This().CHARFORMAT2A,
    .wide => @This().CHARFORMAT2W,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CHARFORMAT2' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const TEXTRANGE = switch (@import("../../zig.zig").unicode_mode) {
    .ansi => @This().TEXTRANGEA,
    .wide => @This().TEXTRANGEW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'TEXTRANGE' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const FINDTEXT = switch (@import("../../zig.zig").unicode_mode) {
    .ansi => @This().FINDTEXTA,
    .wide => @This().FINDTEXTW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'FINDTEXT' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const FINDTEXTEX = switch (@import("../../zig.zig").unicode_mode) {
    .ansi => @This().FINDTEXTEXA,
    .wide => @This().FINDTEXTEXW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'FINDTEXTEX' requires that UNICODE be set to true or false in the root module",
    ),
};
//--------------------------------------------------------------------------------
// Section: Imports (43)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const BOOL = @import("../../foundation.zig").BOOL;
const BSTR = @import("../../foundation.zig").BSTR;
const CHAR = @import("../../foundation.zig").CHAR;
const DVASPECT = @import("../../system/com.zig").DVASPECT;
const DVTARGETDEVICE = @import("../../system/com.zig").DVTARGETDEVICE;
const ENABLE_SCROLL_BAR_ARROWS = @import("../../ui/controls.zig").ENABLE_SCROLL_BAR_ARROWS;
const HANDLE = @import("../../foundation.zig").HANDLE;
const HBITMAP = @import("../../graphics/gdi.zig").HBITMAP;
const HCURSOR = @import("../../ui/windows_and_messaging.zig").HCURSOR;
const HDC = @import("../../graphics/gdi.zig").HDC;
const HIMC = @import("../../globalization.zig").HIMC;
const HMENU = @import("../../ui/windows_and_messaging.zig").HMENU;
const HPALETTE = @import("../../graphics/gdi.zig").HPALETTE;
const HRESULT = @import("../../foundation.zig").HRESULT;
const HRGN = @import("../../graphics/gdi.zig").HRGN;
const HWND = @import("../../foundation.zig").HWND;
const ID2D1RenderTarget = @import("../../graphics/direct2d.zig").ID2D1RenderTarget;
const IDataObject = @import("../../system/com.zig").IDataObject;
const IDispatch = @import("../../system/com.zig").IDispatch;
const IDropTarget = @import("../../system/ole.zig").IDropTarget;
const IOleClientSite = @import("../../system/ole.zig").IOleClientSite;
const IOleInPlaceFrame = @import("../../system/ole.zig").IOleInPlaceFrame;
const IOleInPlaceUIWindow = @import("../../system/ole.zig").IOleInPlaceUIWindow;
const IOleObject = @import("../../system/ole.zig").IOleObject;
const IStorage = @import("../../system/com/structured_storage.zig").IStorage;
const IStream = @import("../../system/com.zig").IStream;
const IUnknown = @import("../../system/com.zig").IUnknown;
const LPARAM = @import("../../foundation.zig").LPARAM;
const LRESULT = @import("../../foundation.zig").LRESULT;
const NMHDR = @import("../../ui/controls.zig").NMHDR;
const OIFI = @import("../../system/ole.zig").OIFI;
const POINT = @import("../../foundation.zig").POINT;
const PSTR = @import("../../foundation.zig").PSTR;
const PWSTR = @import("../../foundation.zig").PWSTR;
const RECT = @import("../../foundation.zig").RECT;
const RECTL = @import("../../foundation.zig").RECTL;
const SCROLLBAR_CONSTANTS = @import("../../ui/windows_and_messaging.zig").SCROLLBAR_CONSTANTS;
const SHOW_WINDOW_CMD = @import("../../ui/windows_and_messaging.zig").SHOW_WINDOW_CMD;
const SIZE = @import("../../foundation.zig").SIZE;
const TEXT_ALIGN_OPTIONS = @import("../../graphics/gdi.zig").TEXT_ALIGN_OPTIONS;
const VARIANT = @import("../../system/com.zig").VARIANT;
const WPARAM = @import("../../foundation.zig").WPARAM;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "AutoCorrectProc")) { _ = AutoCorrectProc; }
    if (@hasDecl(@This(), "EDITWORDBREAKPROCEX")) { _ = EDITWORDBREAKPROCEX; }
    if (@hasDecl(@This(), "EDITSTREAMCALLBACK")) { _ = EDITSTREAMCALLBACK; }
    if (@hasDecl(@This(), "PCreateTextServices")) { _ = PCreateTextServices; }
    if (@hasDecl(@This(), "PShutdownTextServices")) { _ = PShutdownTextServices; }

    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
