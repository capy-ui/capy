//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (1689)
//--------------------------------------------------------------------------------
pub const HLINK_E_FIRST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221248));
pub const HLINK_S_FIRST = @import("../zig.zig").typedConst(HRESULT, @as(i32, 262400));
pub const WM_CPL_LAUNCH = @as(u32, 2024);
pub const WM_CPL_LAUNCHED = @as(u32, 2025);
pub const CPL_DYNAMIC_RES = @as(u32, 0);
pub const CPL_INIT = @as(u32, 1);
pub const CPL_GETCOUNT = @as(u32, 2);
pub const CPL_INQUIRE = @as(u32, 3);
pub const CPL_SELECT = @as(u32, 4);
pub const CPL_DBLCLK = @as(u32, 5);
pub const CPL_STOP = @as(u32, 6);
pub const CPL_EXIT = @as(u32, 7);
pub const CPL_NEWINQUIRE = @as(u32, 8);
pub const CPL_STARTWPARMSA = @as(u32, 9);
pub const CPL_STARTWPARMSW = @as(u32, 10);
pub const CPL_STARTWPARMS = @as(u32, 10);
pub const CPL_SETUP = @as(u32, 200);
pub const HLINK_S_DONTHIDE = @as(i32, 262400);
pub const FOLDERID_NetworkFolder = Guid.initString("d20beec4-5ca8-4905-ae3b-bf251ea09b53");
pub const FOLDERID_ComputerFolder = Guid.initString("0ac0837c-bbf8-452a-850d-79d08e667ca7");
pub const FOLDERID_InternetFolder = Guid.initString("4d9f7874-4e0c-4904-967b-40b0d20c3e4b");
pub const FOLDERID_ControlPanelFolder = Guid.initString("82a74aeb-aeb4-465c-a014-d097ee346d63");
pub const FOLDERID_PrintersFolder = Guid.initString("76fc4e2d-d6ad-4519-a663-37bd56068185");
pub const FOLDERID_SyncManagerFolder = Guid.initString("43668bf8-c14e-49b2-97c9-747784d784b7");
pub const FOLDERID_SyncSetupFolder = Guid.initString("0f214138-b1d3-4a90-bba9-27cbc0c5389a");
pub const FOLDERID_ConflictFolder = Guid.initString("4bfefb45-347d-4006-a5be-ac0cb0567192");
pub const FOLDERID_SyncResultsFolder = Guid.initString("289a9a43-be44-4057-a41b-587a76d7e7f9");
pub const FOLDERID_RecycleBinFolder = Guid.initString("b7534046-3ecb-4c18-be4e-64cd4cb7d6ac");
pub const FOLDERID_ConnectionsFolder = Guid.initString("6f0cd92b-2e97-45d1-88ff-b0d186b8dedd");
pub const FOLDERID_Fonts = Guid.initString("fd228cb7-ae11-4ae3-864c-16f3910ab8fe");
pub const FOLDERID_Desktop = Guid.initString("b4bfcc3a-db2c-424c-b029-7fe99a87c641");
pub const FOLDERID_Startup = Guid.initString("b97d20bb-f46a-4c97-ba10-5e3608430854");
pub const FOLDERID_Programs = Guid.initString("a77f5d77-2e2b-44c3-a6a2-aba601054a51");
pub const FOLDERID_StartMenu = Guid.initString("625b53c3-ab48-4ec1-ba1f-a1ef4146fc19");
pub const FOLDERID_Recent = Guid.initString("ae50c081-ebd2-438a-8655-8a092e34987a");
pub const FOLDERID_SendTo = Guid.initString("8983036c-27c0-404b-8f08-102d10dcfd74");
pub const FOLDERID_Documents = Guid.initString("fdd39ad0-238f-46af-adb4-6c85480369c7");
pub const FOLDERID_Favorites = Guid.initString("1777f761-68ad-4d8a-87bd-30b759fa33dd");
pub const FOLDERID_NetHood = Guid.initString("c5abbf53-e17f-4121-8900-86626fc2c973");
pub const FOLDERID_PrintHood = Guid.initString("9274bd8d-cfd1-41c3-b35e-b13f55a758f4");
pub const FOLDERID_Templates = Guid.initString("a63293e8-664e-48db-a079-df759e0509f7");
pub const FOLDERID_CommonStartup = Guid.initString("82a5ea35-d9cd-47c5-9629-e15d2f714e6e");
pub const FOLDERID_CommonPrograms = Guid.initString("0139d44e-6afe-49f2-8690-3dafcae6ffb8");
pub const FOLDERID_CommonStartMenu = Guid.initString("a4115719-d62e-491d-aa7c-e74b8be3b067");
pub const FOLDERID_PublicDesktop = Guid.initString("c4aa340d-f20f-4863-afef-f87ef2e6ba25");
pub const FOLDERID_ProgramData = Guid.initString("62ab5d82-fdc1-4dc3-a9dd-070d1d495d97");
pub const FOLDERID_CommonTemplates = Guid.initString("b94237e7-57ac-4347-9151-b08c6c32d1f7");
pub const FOLDERID_PublicDocuments = Guid.initString("ed4824af-dce4-45a8-81e2-fc7965083634");
pub const FOLDERID_RoamingAppData = Guid.initString("3eb685db-65f9-4cf6-a03a-e3ef65729f3d");
pub const FOLDERID_LocalAppData = Guid.initString("f1b32785-6fba-4fcf-9d55-7b8e7f157091");
pub const FOLDERID_LocalAppDataLow = Guid.initString("a520a1a4-1780-4ff6-bd18-167343c5af16");
pub const FOLDERID_InternetCache = Guid.initString("352481e8-33be-4251-ba85-6007caedcf9d");
pub const FOLDERID_Cookies = Guid.initString("2b0f765d-c0e9-4171-908e-08a611b84ff6");
pub const FOLDERID_History = Guid.initString("d9dc8a3b-b784-432e-a781-5a1130a75963");
pub const FOLDERID_System = Guid.initString("1ac14e77-02e7-4e5d-b744-2eb1ae5198b7");
pub const FOLDERID_SystemX86 = Guid.initString("d65231b0-b2f1-4857-a4ce-a8e7c6ea7d27");
pub const FOLDERID_Windows = Guid.initString("f38bf404-1d43-42f2-9305-67de0b28fc23");
pub const FOLDERID_Profile = Guid.initString("5e6c858f-0e22-4760-9afe-ea3317b67173");
pub const FOLDERID_Pictures = Guid.initString("33e28130-4e1e-4676-835a-98395c3bc3bb");
pub const FOLDERID_ProgramFilesX86 = Guid.initString("7c5a40ef-a0fb-4bfc-874a-c0f2e0b9fa8e");
pub const FOLDERID_ProgramFilesCommonX86 = Guid.initString("de974d24-d9c6-4d3e-bf91-f4455120b917");
pub const FOLDERID_ProgramFilesX64 = Guid.initString("6d809377-6af0-444b-8957-a3773f02200e");
pub const FOLDERID_ProgramFilesCommonX64 = Guid.initString("6365d5a7-0f0d-45e5-87f6-0da56b6a4f7d");
pub const FOLDERID_ProgramFiles = Guid.initString("905e63b6-c1bf-494e-b29c-65b732d3d21a");
pub const FOLDERID_ProgramFilesCommon = Guid.initString("f7f1ed05-9f6d-47a2-aaae-29d317c6f066");
pub const FOLDERID_UserProgramFiles = Guid.initString("5cd7aee2-2219-4a67-b85d-6c9ce15660cb");
pub const FOLDERID_UserProgramFilesCommon = Guid.initString("bcbd3057-ca5c-4622-b42d-bc56db0ae516");
pub const FOLDERID_AdminTools = Guid.initString("724ef170-a42d-4fef-9f26-b60e846fba4f");
pub const FOLDERID_CommonAdminTools = Guid.initString("d0384e7d-bac3-4797-8f14-cba229b392b5");
pub const FOLDERID_Music = Guid.initString("4bd8d571-6d19-48d3-be97-422220080e43");
pub const FOLDERID_Videos = Guid.initString("18989b1d-99b5-455b-841c-ab7c74e4ddfc");
pub const FOLDERID_Ringtones = Guid.initString("c870044b-f49e-4126-a9c3-b52a1ff411e8");
pub const FOLDERID_PublicPictures = Guid.initString("b6ebfb86-6907-413c-9af7-4fc2abf07cc5");
pub const FOLDERID_PublicMusic = Guid.initString("3214fab5-9757-4298-bb61-92a9deaa44ff");
pub const FOLDERID_PublicVideos = Guid.initString("2400183a-6185-49fb-a2d8-4a392a602ba3");
pub const FOLDERID_PublicRingtones = Guid.initString("e555ab60-153b-4d17-9f04-a5fe99fc15ec");
pub const FOLDERID_ResourceDir = Guid.initString("8ad10c31-2adb-4296-a8f7-e4701232c972");
pub const FOLDERID_LocalizedResourcesDir = Guid.initString("2a00375e-224c-49de-b8d1-440df7ef3ddc");
pub const FOLDERID_CommonOEMLinks = Guid.initString("c1bae2d0-10df-4334-bedd-7aa20b227a9d");
pub const FOLDERID_CDBurning = Guid.initString("9e52ab10-f80d-49df-acb8-4330f5687855");
pub const FOLDERID_UserProfiles = Guid.initString("0762d272-c50a-4bb0-a382-697dcd729b80");
pub const FOLDERID_Playlists = Guid.initString("de92c1c7-837f-4f69-a3bb-86e631204a23");
pub const FOLDERID_SamplePlaylists = Guid.initString("15ca69b3-30ee-49c1-ace1-6b5ec372afb5");
pub const FOLDERID_SampleMusic = Guid.initString("b250c668-f57d-4ee1-a63c-290ee7d1aa1f");
pub const FOLDERID_SamplePictures = Guid.initString("c4900540-2379-4c75-844b-64e6faf8716b");
pub const FOLDERID_SampleVideos = Guid.initString("859ead94-2e85-48ad-a71a-0969cb56a6cd");
pub const FOLDERID_PhotoAlbums = Guid.initString("69d2cf90-fc33-4fb7-9a0c-ebb0f0fcb43c");
pub const FOLDERID_Public = Guid.initString("dfdf76a2-c82a-4d63-906a-5644ac457385");
pub const FOLDERID_ChangeRemovePrograms = Guid.initString("df7266ac-9274-4867-8d55-3bd661de872d");
pub const FOLDERID_AppUpdates = Guid.initString("a305ce99-f527-492b-8b1a-7e76fa98d6e4");
pub const FOLDERID_AddNewPrograms = Guid.initString("de61d971-5ebc-4f02-a3a9-6c82895e5c04");
pub const FOLDERID_Downloads = Guid.initString("374de290-123f-4565-9164-39c4925e467b");
pub const FOLDERID_PublicDownloads = Guid.initString("3d644c9b-1fb8-4f30-9b45-f670235f79c0");
pub const FOLDERID_SavedSearches = Guid.initString("7d1d3a04-debb-4115-95cf-2f29da2920da");
pub const FOLDERID_QuickLaunch = Guid.initString("52a4f021-7b75-48a9-9f6b-4b87a210bc8f");
pub const FOLDERID_Contacts = Guid.initString("56784854-c6cb-462b-8169-88e350acb882");
pub const FOLDERID_SidebarParts = Guid.initString("a75d362e-50fc-4fb7-ac2c-a8beaa314493");
pub const FOLDERID_SidebarDefaultParts = Guid.initString("7b396e54-9ec5-4300-be0a-2482ebae1a26");
pub const FOLDERID_PublicGameTasks = Guid.initString("debf2536-e1a8-4c59-b6a2-414586476aea");
pub const FOLDERID_GameTasks = Guid.initString("054fae61-4dd8-4787-80b6-090220c4b700");
pub const FOLDERID_SavedGames = Guid.initString("4c5c32ff-bb9d-43b0-b5b4-2d72e54eaaa4");
pub const FOLDERID_Games = Guid.initString("cac52c1a-b53d-4edc-92d7-6b2e8ac19434");
pub const FOLDERID_SEARCH_MAPI = Guid.initString("98ec0e18-2098-4d44-8644-66979315a281");
pub const FOLDERID_SEARCH_CSC = Guid.initString("ee32e446-31ca-4aba-814f-a5ebd2fd6d5e");
pub const FOLDERID_Links = Guid.initString("bfb9d5e0-c6a9-404c-b2b2-ae6db6af4968");
pub const FOLDERID_UsersFiles = Guid.initString("f3ce0f7c-4901-4acc-8648-d5d44b04ef8f");
pub const FOLDERID_UsersLibraries = Guid.initString("a302545d-deff-464b-abe8-61c8648d939b");
pub const FOLDERID_SearchHome = Guid.initString("190337d1-b8ca-4121-a639-6d472d16972a");
pub const FOLDERID_OriginalImages = Guid.initString("2c36c0aa-5812-4b87-bfd0-4cd0dfb19b39");
pub const FOLDERID_DocumentsLibrary = Guid.initString("7b0db17d-9cd2-4a93-9733-46cc89022e7c");
pub const FOLDERID_MusicLibrary = Guid.initString("2112ab0a-c86a-4ffe-a368-0de96e47012e");
pub const FOLDERID_PicturesLibrary = Guid.initString("a990ae9f-a03b-4e80-94bc-9912d7504104");
pub const FOLDERID_VideosLibrary = Guid.initString("491e922f-5643-4af4-a7eb-4e7a138d8174");
pub const FOLDERID_RecordedTVLibrary = Guid.initString("1a6fdba2-f42d-4358-a798-b74d745926c5");
pub const FOLDERID_HomeGroup = Guid.initString("52528a6b-b9e3-4add-b60d-588c2dba842d");
pub const FOLDERID_HomeGroupCurrentUser = Guid.initString("9b74b6a3-0dfd-4f11-9e78-5f7800f2e772");
pub const FOLDERID_DeviceMetadataStore = Guid.initString("5ce4a5e9-e4eb-479d-b89f-130c02886155");
pub const FOLDERID_Libraries = Guid.initString("1b3ea5dc-b587-4786-b4ef-bd1dc332aeae");
pub const FOLDERID_PublicLibraries = Guid.initString("48daf80b-e6cf-4f4e-b800-0e69d84ee384");
pub const FOLDERID_UserPinned = Guid.initString("9e3995ab-1f9c-4f13-b827-48b24b6c7174");
pub const FOLDERID_ImplicitAppShortcuts = Guid.initString("bcb5256f-79f6-4cee-b725-dc34e402fd46");
pub const FOLDERID_AccountPictures = Guid.initString("008ca0b1-55b4-4c56-b8a8-4de4b299d3be");
pub const FOLDERID_PublicUserTiles = Guid.initString("0482af6c-08f1-4c34-8c90-e17ec98b1e17");
pub const FOLDERID_AppsFolder = Guid.initString("1e87508d-89c2-42f0-8a7e-645a0f50ca58");
pub const FOLDERID_StartMenuAllPrograms = Guid.initString("f26305ef-6948-40b9-b255-81453d09c785");
pub const FOLDERID_CommonStartMenuPlaces = Guid.initString("a440879f-87a0-4f7d-b700-0207b966194a");
pub const FOLDERID_ApplicationShortcuts = Guid.initString("a3918781-e5f2-4890-b3d9-a7e54332328c");
pub const FOLDERID_RoamingTiles = Guid.initString("00bcfc5a-ed94-4e48-96a1-3f6217f21990");
pub const FOLDERID_RoamedTileImages = Guid.initString("aaa8d5a5-f1d6-4259-baa8-78e7ef60835e");
pub const FOLDERID_Screenshots = Guid.initString("b7bede81-df94-4682-a7d8-57a52620b86f");
pub const FOLDERID_CameraRoll = Guid.initString("ab5fb87b-7ce2-4f83-915d-550846c9537b");
pub const FOLDERID_SkyDrive = Guid.initString("a52bba46-e9e1-435f-b3d9-28daa648c0f6");
pub const FOLDERID_OneDrive = Guid.initString("a52bba46-e9e1-435f-b3d9-28daa648c0f6");
pub const FOLDERID_SkyDriveDocuments = Guid.initString("24d89e24-2f19-4534-9dde-6a6671fbb8fe");
pub const FOLDERID_SkyDrivePictures = Guid.initString("339719b5-8c47-4894-94c2-d8f77add44a6");
pub const FOLDERID_SkyDriveMusic = Guid.initString("c3f2459e-80d6-45dc-bfef-1f769f2be730");
pub const FOLDERID_SkyDriveCameraRoll = Guid.initString("767e6811-49cb-4273-87c2-20f355e1085b");
pub const FOLDERID_SearchHistory = Guid.initString("0d4c3db6-03a3-462f-a0e6-08924c41b5d4");
pub const FOLDERID_SearchTemplates = Guid.initString("7e636bfe-dfa9-4d5e-b456-d7b39851d8a9");
pub const FOLDERID_CameraRollLibrary = Guid.initString("2b20df75-1eda-4039-8097-38798227d5b7");
pub const FOLDERID_SavedPictures = Guid.initString("3b193882-d3ad-4eab-965a-69829d1fb59f");
pub const FOLDERID_SavedPicturesLibrary = Guid.initString("e25b5812-be88-4bd9-94b0-29233477b6c3");
pub const FOLDERID_RetailDemo = Guid.initString("12d4c69e-24ad-4923-be19-31321c43a767");
pub const FOLDERID_Device = Guid.initString("1c2ac1dc-4358-4b6c-9733-af21156576f0");
pub const FOLDERID_DevelopmentFiles = Guid.initString("dbe8e08e-3053-4bbc-b183-2a7b2b191e59");
pub const FOLDERID_Objects3D = Guid.initString("31c0dd25-9439-4f12-bf41-7ff4eda38722");
pub const FOLDERID_AppCaptures = Guid.initString("edc0fe71-98d8-4f4a-b920-c8dc133cb165");
pub const FOLDERID_LocalDocuments = Guid.initString("f42ee2d3-909f-4907-8871-4c22fc0bf756");
pub const FOLDERID_LocalPictures = Guid.initString("0ddd015d-b06c-45d5-8c4c-f59713854639");
pub const FOLDERID_LocalVideos = Guid.initString("35286a68-3c57-41a1-bbb1-0eae73d76c95");
pub const FOLDERID_LocalMusic = Guid.initString("a0c69a99-21c8-4671-8703-7934162fcf1d");
pub const FOLDERID_LocalDownloads = Guid.initString("7d83ee9b-2244-4e70-b1f5-5393042af1e4");
pub const FOLDERID_RecordedCalls = Guid.initString("2f8b40c2-83ed-48ee-b383-a1f157ec6f9a");
pub const FOLDERID_AllAppMods = Guid.initString("7ad67899-66af-43ba-9156-6aad42e6c596");
pub const FOLDERID_CurrentAppMods = Guid.initString("3db40b20-2a30-4dbe-917e-771dd21dd099");
pub const FOLDERID_AppDataDesktop = Guid.initString("b2c5e279-7add-439f-b28c-c41fe1bbf672");
pub const FOLDERID_AppDataDocuments = Guid.initString("7be16610-1f7f-44ac-bff0-83e15f2ffca1");
pub const FOLDERID_AppDataFavorites = Guid.initString("7cfbefbc-de1f-45aa-b843-a542ac536cc9");
pub const FOLDERID_AppDataProgramData = Guid.initString("559d40a3-a036-40fa-af61-84cb430a4d34");
pub const FOLDERID_LocalStorage = Guid.initString("b3eb08d3-a1f3-496b-865a-42b536cda0ec");
pub const CLSID_InternetShortcut = Guid.initString("fbf23b40-e3f0-101b-8488-00aa003e56f8");
pub const CLSID_NetworkDomain = Guid.initString("46e06680-4bf0-11d1-83ee-00a0c90dc849");
pub const CLSID_NetworkServer = Guid.initString("c0542a90-4bf0-11d1-83ee-00a0c90dc849");
pub const CLSID_NetworkShare = Guid.initString("54a754c0-4bf0-11d1-83ee-00a0c90dc849");
pub const CLSID_MyComputer = Guid.initString("20d04fe0-3aea-1069-a2d8-08002b30309d");
pub const CLSID_Internet = Guid.initString("871c5380-42a0-1069-a2ea-08002b30309d");
pub const CLSID_RecycleBin = Guid.initString("645ff040-5081-101b-9f08-00aa002f954e");
pub const CLSID_ControlPanel = Guid.initString("21ec2020-3aea-1069-a2dd-08002b30309d");
pub const CLSID_Printers = Guid.initString("2227a280-3aea-1069-a2de-08002b30309d");
pub const CLSID_MyDocuments = Guid.initString("450d8fba-ad25-11d0-98a8-0800361b1103");
pub const STR_MYDOCS_CLSID = "{450D8FBA-AD25-11D0-98A8-0800361B1103}";
pub const CATID_BrowsableShellExt = Guid.initString("00021490-0000-0000-c000-000000000046");
pub const CATID_BrowseInPlace = Guid.initString("00021491-0000-0000-c000-000000000046");
pub const CATID_DeskBand = Guid.initString("00021492-0000-0000-c000-000000000046");
pub const CATID_InfoBand = Guid.initString("00021493-0000-0000-c000-000000000046");
pub const CATID_CommBand = Guid.initString("00021494-0000-0000-c000-000000000046");
pub const FMTID_Intshcut = Guid.initString("000214a0-0000-0000-c000-000000000046");
pub const FMTID_InternetSite = Guid.initString("000214a1-0000-0000-c000-000000000046");
pub const CGID_Explorer = Guid.initString("000214d0-0000-0000-c000-000000000046");
pub const CGID_ShellDocView = Guid.initString("000214d1-0000-0000-c000-000000000046");
pub const CGID_ShellServiceObject = Guid.initString("000214d2-0000-0000-c000-000000000046");
pub const CGID_ExplorerBarDoc = Guid.initString("000214d3-0000-0000-c000-000000000046");
pub const CLSID_FolderShortcut = Guid.initString("0afaced1-e828-11d1-9187-b532f1e9575d");
pub const CLSID_CFSIconOverlayManager = Guid.initString("63b51f81-c868-11d0-999c-00c04fd655e1");
pub const CLSID_ShellThumbnailDiskCache = Guid.initString("1ebdcf80-a200-11d0-a3a4-00c04fd706ec");
pub const SID_DefView = Guid.initString("6d12fe80-7911-11cf-9534-0000c05bae0b");
pub const CGID_DefView = Guid.initString("4af07f10-d231-11d0-b942-00a0c90312e1");
pub const CLSID_MenuBand = Guid.initString("5b4dae26-b807-11d0-9815-00c04fd91972");
pub const VID_LargeIcons = Guid.initString("0057d0e0-3573-11cf-ae69-08002b2e1262");
pub const VID_SmallIcons = Guid.initString("089000c0-3573-11cf-ae69-08002b2e1262");
pub const VID_List = Guid.initString("0e1fa5e0-3573-11cf-ae69-08002b2e1262");
pub const VID_Details = Guid.initString("137e7700-3573-11cf-ae69-08002b2e1262");
pub const VID_Tile = Guid.initString("65f125e5-7be1-4810-ba9d-d271c8432ce3");
pub const VID_Content = Guid.initString("30c2c434-0889-4c8d-985d-a9f71830b0a9");
pub const VID_Thumbnails = Guid.initString("8bebb290-52d0-11d0-b7f4-00c04fd706ec");
pub const VID_ThumbStrip = Guid.initString("8eefa624-d1e9-445b-94b7-74fbce2ea11a");
pub const SID_SInPlaceBrowser = Guid.initString("1d2ae02b-3655-46cc-b63a-285988153bca");
pub const SID_SSearchBoxInfo = Guid.initString("142daa61-516b-4713-b49c-fb985ef82998");
pub const SID_CommandsPropertyBag = Guid.initString("6e043250-4416-485c-b143-e62a760d9fe5");
pub const CLSID_CUrlHistory = Guid.initString("3c374a40-bae4-11cf-bf7d-00aa006946ee");
pub const CLSID_CURLSearchHook = Guid.initString("cfbfae00-17a6-11d0-99cb-00c04fd64497");
pub const CLSID_AutoComplete = Guid.initString("00bb2763-6a77-11d0-a535-00c04fd7d062");
pub const CLSID_ACLHistory = Guid.initString("00bb2764-6a77-11d0-a535-00c04fd7d062");
pub const CLSID_ACListISF = Guid.initString("03c036f1-a186-11d0-824a-00aa005b4383");
pub const CLSID_ACLMRU = Guid.initString("6756a641-de71-11d0-831b-00aa005b4383");
pub const CLSID_ACLMulti = Guid.initString("00bb2765-6a77-11d0-a535-00c04fd7d062");
pub const CLSID_ACLCustomMRU = Guid.initString("6935db93-21e8-4ccc-beb9-9fe3c77a297a");
pub const CLSID_ProgressDialog = Guid.initString("f8383852-fcd3-11d1-a6b9-006097df5bd4");
pub const SID_STopLevelBrowser = Guid.initString("4c96be40-915c-11cf-99d3-00aa004ae837");
pub const CLSID_FileTypes = Guid.initString("b091e540-83e3-11cf-a713-0020afd79762");
pub const CLSID_ActiveDesktop = Guid.initString("75048700-ef1f-11d0-9888-006097deacf9");
pub const CLSID_QueryAssociations = Guid.initString("a07034fd-6caa-4954-ac3f-97a27216f98a");
pub const CLSID_LinkColumnProvider = Guid.initString("24f14f02-7b1c-11d1-838f-0000f80461cf");
pub const CGID_ShortCut = Guid.initString("93a68750-951a-11d1-946f-000000000000");
pub const CLSID_InternetButtons = Guid.initString("1e796980-9cc5-11d1-a83f-00c04fc99d61");
pub const CLSID_MSOButtons = Guid.initString("178f34b8-a282-11d2-86c5-00c04f8eea99");
pub const CLSID_ToolbarExtButtons = Guid.initString("2ce4b5d8-a28f-11d2-86c5-00c04f8eea99");
pub const CLSID_DarwinAppPublisher = Guid.initString("cfccc7a0-a282-11d1-9082-006008059382");
pub const CLSID_DocHostUIHandler = Guid.initString("7057e952-bd1b-11d1-8919-00c04fc2c836");
pub const FMTID_ShellDetails = Guid.initString("28636aa6-953d-11d2-b5d6-00c04fd918d0");
pub const PID_FINDDATA = @as(u32, 0);
pub const PID_NETRESOURCE = @as(u32, 1);
pub const PID_DESCRIPTIONID = @as(u32, 2);
pub const PID_WHICHFOLDER = @as(u32, 3);
pub const PID_NETWORKLOCATION = @as(u32, 4);
pub const PID_COMPUTERNAME = @as(u32, 5);
pub const FMTID_Storage = Guid.initString("b725f130-47ef-101a-a5f1-02608c9eebac");
pub const FMTID_ImageProperties = Guid.initString("14b81da1-0135-4d31-96d9-6cbfc9671a99");
pub const FMTID_CustomImageProperties = Guid.initString("7ecd8b0e-c136-4a9b-9411-4ebd6673ccc3");
pub const FMTID_LibraryProperties = Guid.initString("5d76b67f-9b3d-44bb-b6ae-25da4f638a67");
pub const FMTID_Displaced = Guid.initString("9b174b33-40ff-11d2-a27e-00c04fc30871");
pub const PID_DISPLACED_FROM = @as(u32, 2);
pub const PID_DISPLACED_DATE = @as(u32, 3);
pub const FMTID_Briefcase = Guid.initString("328d8b21-7729-4bfc-954c-902b329d56b0");
pub const PID_SYNC_COPY_IN = @as(u32, 2);
pub const FMTID_Misc = Guid.initString("9b174b34-40ff-11d2-a27e-00c04fc30871");
pub const PID_MISC_STATUS = @as(u32, 2);
pub const PID_MISC_ACCESSCOUNT = @as(u32, 3);
pub const PID_MISC_OWNER = @as(u32, 4);
pub const PID_HTMLINFOTIPFILE = @as(u32, 5);
pub const PID_MISC_PICS = @as(u32, 6);
pub const FMTID_WebView = Guid.initString("f2275480-f782-4291-bd94-f13693513aec");
pub const PID_DISPLAY_PROPERTIES = @as(u32, 0);
pub const PID_INTROTEXT = @as(u32, 1);
pub const FMTID_MUSIC = Guid.initString("56a3372e-ce9c-11d2-9f0e-006097c686f6");
pub const PIDSI_ARTIST = @as(u32, 2);
pub const PIDSI_SONGTITLE = @as(u32, 3);
pub const PIDSI_ALBUM = @as(u32, 4);
pub const PIDSI_YEAR = @as(u32, 5);
pub const PIDSI_COMMENT = @as(u32, 6);
pub const PIDSI_TRACK = @as(u32, 7);
pub const PIDSI_GENRE = @as(u32, 11);
pub const PIDSI_LYRICS = @as(u32, 12);
pub const FMTID_DRM = Guid.initString("aeac19e4-89ae-4508-b9b7-bb867abee2ed");
pub const PIDDRSI_PROTECTED = @as(u32, 2);
pub const PIDDRSI_DESCRIPTION = @as(u32, 3);
pub const PIDDRSI_PLAYCOUNT = @as(u32, 4);
pub const PIDDRSI_PLAYSTARTS = @as(u32, 5);
pub const PIDDRSI_PLAYEXPIRES = @as(u32, 6);
pub const PIDVSI_STREAM_NAME = @as(u32, 2);
pub const PIDVSI_FRAME_WIDTH = @as(u32, 3);
pub const PIDVSI_FRAME_HEIGHT = @as(u32, 4);
pub const PIDVSI_TIMELENGTH = @as(u32, 7);
pub const PIDVSI_FRAME_COUNT = @as(u32, 5);
pub const PIDVSI_FRAME_RATE = @as(u32, 6);
pub const PIDVSI_DATA_RATE = @as(u32, 8);
pub const PIDVSI_SAMPLE_SIZE = @as(u32, 9);
pub const PIDVSI_COMPRESSION = @as(u32, 10);
pub const PIDVSI_STREAM_NUMBER = @as(u32, 11);
pub const PIDASI_FORMAT = @as(u32, 2);
pub const PIDASI_TIMELENGTH = @as(u32, 3);
pub const PIDASI_AVG_DATA_RATE = @as(u32, 4);
pub const PIDASI_SAMPLE_RATE = @as(u32, 5);
pub const PIDASI_SAMPLE_SIZE = @as(u32, 6);
pub const PIDASI_CHANNEL_COUNT = @as(u32, 7);
pub const PIDASI_STREAM_NUMBER = @as(u32, 8);
pub const PIDASI_STREAM_NAME = @as(u32, 9);
pub const PIDASI_COMPRESSION = @as(u32, 10);
pub const PID_CONTROLPANEL_CATEGORY = @as(u32, 2);
pub const FMTID_Volume = Guid.initString("9b174b35-40ff-11d2-a27e-00c04fc30871");
pub const PID_VOLUME_FREE = @as(u32, 2);
pub const PID_VOLUME_CAPACITY = @as(u32, 3);
pub const PID_VOLUME_FILESYSTEM = @as(u32, 4);
pub const PID_SHARE_CSC_STATUS = @as(u32, 2);
pub const PID_LINK_TARGET = @as(u32, 2);
pub const PID_LINK_TARGET_TYPE = @as(u32, 3);
pub const FMTID_Query = Guid.initString("49691c90-7e17-101a-a91c-08002b2ecda9");
pub const PID_QUERY_RANK = @as(u32, 2);
pub const CLSID_HWShellExecute = Guid.initString("ffb8655f-81b9-4fce-b89c-9a6ba76d13e7");
pub const CLSID_DragDropHelper = Guid.initString("4657278a-411b-11d2-839a-00c04fd918d0");
pub const CLSID_CAnchorBrowsePropertyPage = Guid.initString("3050f3bb-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_CImageBrowsePropertyPage = Guid.initString("3050f3b3-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_CDocBrowsePropertyPage = Guid.initString("3050f3b4-98b5-11cf-bb82-00aa00bdce0b");
pub const SID_STopWindow = Guid.initString("49e1b500-4636-11d3-97f7-00c04f45d0b3");
pub const SID_SGetViewFromViewDual = Guid.initString("889a935d-971e-4b12-b90c-24dfc9e1e5e8");
pub const CLSID_FolderItemsMultiLevel = Guid.initString("53c74826-ab99-4d33-aca4-3117f51d3788");
pub const CLSID_NewMenu = Guid.initString("d969a300-e7ff-11d0-a93b-00a0c90f2719");
pub const BHID_SFObject = Guid.initString("3981e224-f559-11d3-8e3a-00c04f6837d5");
pub const BHID_SFUIObject = Guid.initString("3981e225-f559-11d3-8e3a-00c04f6837d5");
pub const BHID_SFViewObject = Guid.initString("3981e226-f559-11d3-8e3a-00c04f6837d5");
pub const BHID_Storage = Guid.initString("3981e227-f559-11d3-8e3a-00c04f6837d5");
pub const BHID_Stream = Guid.initString("1cebb3ab-7c10-499a-a417-92ca16c4cb83");
pub const BHID_RandomAccessStream = Guid.initString("f16fc93b-77ae-4cfe-bda7-a866eea6878d");
pub const BHID_LinkTargetItem = Guid.initString("3981e228-f559-11d3-8e3a-00c04f6837d5");
pub const BHID_StorageEnum = Guid.initString("4621a4e3-f0d6-4773-8a9c-46e77b174840");
pub const BHID_Transfer = Guid.initString("d5e346a1-f753-4932-b403-4574800e2498");
pub const BHID_PropertyStore = Guid.initString("0384e1a4-1523-439c-a4c8-ab911052f586");
pub const BHID_ThumbnailHandler = Guid.initString("7b2e650a-8e20-4f4a-b09e-6597afc72fb0");
pub const BHID_EnumItems = Guid.initString("94f60519-2850-4924-aa5a-d15e84868039");
pub const BHID_DataObject = Guid.initString("b8c0bd9f-ed24-455c-83e6-d5390c4fe8c4");
pub const BHID_AssociationArray = Guid.initString("bea9ef17-82f1-4f60-9284-4f8db75c3be9");
pub const BHID_Filter = Guid.initString("38d08778-f557-4690-9ebf-ba54706ad8f7");
pub const BHID_EnumAssocHandlers = Guid.initString("b8ab0b9c-c2ec-4f7a-918d-314900e6280a");
pub const BHID_StorageItem = Guid.initString("404e2109-77d2-4699-a5a0-4fdf10db9837");
pub const BHID_FilePlaceholder = Guid.initString("8677dceb-aae0-4005-8d3d-547fa852f825");
pub const CATID_FilePlaceholderMergeHandler = Guid.initString("3e9c9a51-d4aa-4870-b47c-7424b491f1cc");
pub const SID_CtxQueryAssociations = Guid.initString("faadfc40-b777-4b69-aa81-77035ef0e6e8");
pub const CLSID_QuickLinks = Guid.initString("0e5cbf21-d15f-11d0-8301-00aa005b4383");
pub const CLSID_ISFBand = Guid.initString("d82be2b0-5764-11d0-a96e-00c04fd705a2");
pub const CLSID_ShellFldSetExt = Guid.initString("6d5313c0-8c62-11d1-b2cd-006097df8c11");
pub const SID_SMenuBandChild = Guid.initString("ed9cc020-08b9-11d1-9823-00c04fd91972");
pub const SID_SMenuBandParent = Guid.initString("8c278eec-3eab-11d1-8cb0-00c04fd918d0");
pub const SID_SMenuPopup = Guid.initString("d1e7afeb-6a2e-11d0-8c78-00c04fd918b4");
pub const SID_SMenuBandBottomSelected = Guid.initString("165ebaf4-6d51-11d2-83ad-00c04fd918d0");
pub const SID_SMenuBandBottom = Guid.initString("743ca664-0deb-11d1-9825-00c04fd91972");
pub const SID_MenuShellFolder = Guid.initString("a6c17eb4-2d65-11d2-838f-00c04fd918d0");
pub const SID_SMenuBandContextMenuModifier = Guid.initString("39545874-7162-465e-b783-2aa1874fef81");
pub const SID_SMenuBandBKContextMenu = Guid.initString("164bbd86-1d0d-4de0-9a3b-d9729647c2b8");
pub const CGID_MENUDESKBAR = Guid.initString("5c9f0a12-959e-11d0-a3a4-00a0c9082636");
pub const SID_SMenuBandTop = Guid.initString("9493a810-ec38-11d0-bc46-00aa006ce2f5");
pub const CLSID_MenuToolbarBase = Guid.initString("40b96610-b522-11d1-b3b4-00aa006efde7");
pub const CLSID_MenuBandSite = Guid.initString("e13ef4e4-d2f2-11d0-9816-00c04fd91972");
pub const SID_SCommDlgBrowser = Guid.initString("80f30233-b7df-11d2-a33b-006097df5bd4");
pub const CPFG_LOGON_USERNAME = Guid.initString("da15bbe8-954d-4fd3-b0f4-1fb5b90b174b");
pub const CPFG_LOGON_PASSWORD = Guid.initString("60624cfa-a477-47b1-8a8e-3a4a19981827");
pub const CPFG_SMARTCARD_USERNAME = Guid.initString("3e1ecf69-568c-4d96-9d59-46444174e2d6");
pub const CPFG_SMARTCARD_PIN = Guid.initString("4fe5263b-9181-46c1-b0a4-9dedd4db7dea");
pub const CPFG_CREDENTIAL_PROVIDER_LOGO = Guid.initString("2d837775-f6cd-464e-a745-482fd0b47493");
pub const CPFG_CREDENTIAL_PROVIDER_LABEL = Guid.initString("286bbff3-bad4-438f-b007-79b7267c3d48");
pub const CPFG_STANDALONE_SUBMIT_BUTTON = Guid.initString("0b7b0ad8-cc36-4d59-802b-82f714fa7022");
pub const CPFG_STYLE_LINK_AS_BUTTON = Guid.initString("088fa508-94a6-4430-a4cb-6fc6e3c0b9e2");
pub const FOLDERTYPEID_Invalid = Guid.initString("57807898-8c4f-4462-bb63-71042380b109");
pub const FOLDERTYPEID_Generic = Guid.initString("5c4f28b5-f869-4e84-8e60-f11db97c5cc7");
pub const FOLDERTYPEID_GenericSearchResults = Guid.initString("7fde1a1e-8b31-49a5-93b8-6be14cfa4943");
pub const FOLDERTYPEID_GenericLibrary = Guid.initString("5f4eab9a-6833-4f61-899d-31cf46979d49");
pub const FOLDERTYPEID_Documents = Guid.initString("7d49d726-3c21-4f05-99aa-fdc2c9474656");
pub const FOLDERTYPEID_Pictures = Guid.initString("b3690e58-e961-423b-b687-386ebfd83239");
pub const FOLDERTYPEID_Music = Guid.initString("94d6ddcc-4a68-4175-a374-bd584a510b78");
pub const FOLDERTYPEID_Videos = Guid.initString("5fa96407-7e77-483c-ac93-691d05850de8");
pub const FOLDERTYPEID_Downloads = Guid.initString("885a186e-a440-4ada-812b-db871b942259");
pub const FOLDERTYPEID_UserFiles = Guid.initString("cd0fc69b-71e2-46e5-9690-5bcd9f57aab3");
pub const FOLDERTYPEID_UsersLibraries = Guid.initString("c4d98f09-6124-4fe0-9942-826416082da9");
pub const FOLDERTYPEID_OtherUsers = Guid.initString("b337fd00-9dd5-4635-a6d4-da33fd102b7a");
pub const FOLDERTYPEID_PublishedItems = Guid.initString("7f2f5b96-ff74-41da-afd8-1c78a5f3aea2");
pub const FOLDERTYPEID_Communications = Guid.initString("91475fe5-586b-4eba-8d75-d17434b8cdf6");
pub const FOLDERTYPEID_Contacts = Guid.initString("de2b70ec-9bf7-4a93-bd3d-243f7881d492");
pub const FOLDERTYPEID_StartMenu = Guid.initString("ef87b4cb-f2ce-4785-8658-4ca6c63e38c6");
pub const FOLDERTYPEID_RecordedTV = Guid.initString("5557a28f-5da6-4f83-8809-c2c98a11a6fa");
pub const FOLDERTYPEID_SavedGames = Guid.initString("d0363307-28cb-4106-9f23-2956e3e5e0e7");
pub const FOLDERTYPEID_OpenSearch = Guid.initString("8faf9629-1980-46ff-8023-9dceab9c3ee3");
pub const FOLDERTYPEID_SearchConnector = Guid.initString("982725ee-6f47-479e-b447-812bfa7d2e8f");
pub const FOLDERTYPEID_AccountPictures = Guid.initString("db2a5d8f-06e6-4007-aba6-af877d526ea6");
pub const FOLDERTYPEID_Games = Guid.initString("b689b0d0-76d3-4cbb-87f7-585d0e0ce070");
pub const FOLDERTYPEID_ControlPanelCategory = Guid.initString("de4f0660-fa10-4b8f-a494-068b20b22307");
pub const FOLDERTYPEID_ControlPanelClassic = Guid.initString("0c3794f3-b545-43aa-a329-c37430c58d2a");
pub const FOLDERTYPEID_Printers = Guid.initString("2c7bbec6-c844-4a0a-91fa-cef6f59cfda1");
pub const FOLDERTYPEID_RecycleBin = Guid.initString("d6d9e004-cd87-442b-9d57-5e0aeb4f6f72");
pub const FOLDERTYPEID_SoftwareExplorer = Guid.initString("d674391b-52d9-4e07-834e-67c98610f39d");
pub const FOLDERTYPEID_CompressedFolder = Guid.initString("80213e82-bcfd-4c4f-8817-bb27601267a9");
pub const FOLDERTYPEID_NetworkExplorer = Guid.initString("25cc242b-9a7c-4f51-80e0-7a2928febe42");
pub const FOLDERTYPEID_Searches = Guid.initString("0b0ba2e3-405f-415e-a6ee-cad625207853");
pub const FOLDERTYPEID_SearchHome = Guid.initString("834d8a44-0974-4ed6-866e-f203d80b3810");
pub const FOLDERTYPEID_StorageProviderGeneric = Guid.initString("4f01ebc5-2385-41f2-a28e-2c5c91fb56e0");
pub const FOLDERTYPEID_StorageProviderDocuments = Guid.initString("dd61bd66-70e8-48dd-9655-65c5e1aac2d1");
pub const FOLDERTYPEID_StorageProviderPictures = Guid.initString("71d642a9-f2b1-42cd-ad92-eb9300c7cc0a");
pub const FOLDERTYPEID_StorageProviderMusic = Guid.initString("672ecd7e-af04-4399-875c-0290845b6247");
pub const FOLDERTYPEID_StorageProviderVideos = Guid.initString("51294da1-d7b1-485b-9e9a-17cffe33e187");
pub const SYNCMGR_OBJECTID_Icon = Guid.initString("6dbc85c3-5d07-4c72-a777-7fec78072c06");
pub const SYNCMGR_OBJECTID_EventStore = Guid.initString("4bef34b9-a786-4075-ba88-0c2b9d89a98f");
pub const SYNCMGR_OBJECTID_ConflictStore = Guid.initString("d78181f4-2389-47e4-a960-60bcc2ed930b");
pub const SYNCMGR_OBJECTID_BrowseContent = Guid.initString("57cbb584-e9b4-47ae-a120-c4df3335dee2");
pub const SYNCMGR_OBJECTID_ShowSchedule = Guid.initString("edc6f3e3-8441-4109-adf3-6c1ca0b7de47");
pub const SYNCMGR_OBJECTID_QueryBeforeActivate = Guid.initString("d882d80b-e7aa-49ed-86b7-e6e1f714cdfe");
pub const SYNCMGR_OBJECTID_QueryBeforeDeactivate = Guid.initString("a0efc282-60e0-460e-9374-ea88513cfc80");
pub const SYNCMGR_OBJECTID_QueryBeforeEnable = Guid.initString("04cbf7f0-5beb-4de1-bc90-908345c480f6");
pub const SYNCMGR_OBJECTID_QueryBeforeDisable = Guid.initString("bb5f64aa-f004-4eb5-8e4d-26751966344c");
pub const SYNCMGR_OBJECTID_QueryBeforeDelete = Guid.initString("f76c3397-afb3-45d7-a59f-5a49e905437e");
pub const SYNCMGR_OBJECTID_EventLinkClick = Guid.initString("2203bdc1-1af1-4082-8c30-28399f41384c");
pub const EP_NavPane = Guid.initString("cb316b22-25f7-42b8-8a09-540d23a43c2f");
pub const EP_Commands = Guid.initString("d9745868-ca5f-4a76-91cd-f5a129fbb076");
pub const EP_Commands_Organize = Guid.initString("72e81700-e3ec-4660-bf24-3c3b7b648806");
pub const EP_Commands_View = Guid.initString("21f7c32d-eeaa-439b-bb51-37b96fd6a943");
pub const EP_DetailsPane = Guid.initString("43abf98b-89b8-472d-b9ce-e69b8229f019");
pub const EP_PreviewPane = Guid.initString("893c63d1-45c8-4d17-be19-223be71be365");
pub const EP_QueryPane = Guid.initString("65bcde4f-4f07-4f27-83a7-1afca4df7ddd");
pub const EP_AdvQueryPane = Guid.initString("b4e9db8b-34ba-4c39-b5cc-16a1bd2c411c");
pub const EP_StatusBar = Guid.initString("65fe56ce-5cfe-4bc4-ad8a-7ae3fe7e8f7c");
pub const EP_Ribbon = Guid.initString("d27524a8-c9f2-4834-a106-df8889fd4f37");
pub const CATID_LocationFactory = Guid.initString("965c4d51-8b76-4e57-80b7-564d2ea4b55e");
pub const CATID_LocationProvider = Guid.initString("1b3ca474-2614-414b-b813-1aceca3e3dd8");
pub const ItemCount_Property_GUID = Guid.initString("abbf5c45-5ccc-47b7-bb4e-87cb87bbd162");
pub const SelectedItemCount_Property_GUID = Guid.initString("8fe316d2-0e52-460a-9c1e-48f273d470a3");
pub const ItemIndex_Property_GUID = Guid.initString("92a053da-2969-4021-bf27-514cfc2e4a69");
pub const CATID_SearchableApplication = Guid.initString("366c292a-d9b3-4dbf-bb70-e62ec3d0bbbf");
pub const IDD_WIZEXTN_FIRST = @as(u32, 20480);
pub const IDD_WIZEXTN_LAST = @as(u32, 20736);
pub const SHPWHF_NORECOMPRESS = @as(u32, 1);
pub const SHPWHF_NONETPLACECREATE = @as(u32, 2);
pub const SHPWHF_NOFILESELECTOR = @as(u32, 4);
pub const SHPWHF_USEMRU = @as(u32, 8);
pub const SHPWHF_ANYLOCATION = @as(u32, 256);
pub const SHPWHF_VALIDATEVIAWEBFOLDERS = @as(u32, 65536);
pub const ACDD_VISIBLE = @as(u32, 1);
pub const PROPSTR_EXTENSIONCOMPLETIONSTATE = "ExtensionCompletionState";
pub const SID_SCommandBarState = Guid.initString("b99eaa5c-3850-4400-bc33-2ce534048bf8");
pub const NSTCDHPOS_ONTOP = @as(i32, -1);
pub const FVSIF_RECT = @as(u32, 1);
pub const FVSIF_PINNED = @as(u32, 2);
pub const FVSIF_NEWFAILED = @as(u32, 134217728);
pub const FVSIF_NEWFILE = @as(u32, 2147483648);
pub const FVSIF_CANVIEWIT = @as(u32, 1073741824);
pub const FCIDM_TOOLBAR = @as(u32, 40960);
pub const FCIDM_STATUS = @as(u32, 40961);
pub const IDC_OFFLINE_HAND = @as(u32, 103);
pub const IDC_PANTOOL_HAND_OPEN = @as(u32, 104);
pub const IDC_PANTOOL_HAND_CLOSED = @as(u32, 105);
pub const PANE_NONE = @as(u32, 4294967295);
pub const PANE_ZONE = @as(u32, 1);
pub const PANE_OFFLINE = @as(u32, 2);
pub const PANE_PRINTER = @as(u32, 3);
pub const PANE_SSL = @as(u32, 4);
pub const PANE_NAVIGATION = @as(u32, 5);
pub const PANE_PROGRESS = @as(u32, 6);
pub const PANE_PRIVACY = @as(u32, 7);
pub const DWFRF_NORMAL = @as(u32, 0);
pub const DWFRF_DELETECONFIGDATA = @as(u32, 1);
pub const DWFAF_HIDDEN = @as(u32, 1);
pub const DWFAF_GROUP1 = @as(u32, 2);
pub const DWFAF_GROUP2 = @as(u32, 4);
pub const DWFAF_AUTOHIDE = @as(u32, 16);
pub const SHIMSTCAPFLAG_LOCKABLE = @as(u32, 1);
pub const SHIMSTCAPFLAG_PURGEABLE = @as(u32, 2);
pub const ISFB_MASK_STATE = @as(u32, 1);
pub const ISFB_MASK_BKCOLOR = @as(u32, 2);
pub const ISFB_MASK_VIEWMODE = @as(u32, 4);
pub const ISFB_MASK_SHELLFOLDER = @as(u32, 8);
pub const ISFB_MASK_IDLIST = @as(u32, 16);
pub const ISFB_MASK_COLORS = @as(u32, 32);
pub const ISFB_STATE_DEFAULT = @as(u32, 0);
pub const ISFB_STATE_DEBOSSED = @as(u32, 1);
pub const ISFB_STATE_ALLOWRENAME = @as(u32, 2);
pub const ISFB_STATE_NOSHOWTEXT = @as(u32, 4);
pub const ISFB_STATE_CHANNELBAR = @as(u32, 16);
pub const ISFB_STATE_QLINKSMODE = @as(u32, 32);
pub const ISFB_STATE_FULLOPEN = @as(u32, 64);
pub const ISFB_STATE_NONAMESORT = @as(u32, 128);
pub const ISFB_STATE_BTNMINSIZE = @as(u32, 256);
pub const ISFBVIEWMODE_SMALLICONS = @as(u32, 1);
pub const ISFBVIEWMODE_LARGEICONS = @as(u32, 2);
pub const ISFBVIEWMODE_LOGOS = @as(u32, 3);
pub const DBC_GS_IDEAL = @as(u32, 0);
pub const DBC_GS_SIZEDOWN = @as(u32, 1);
pub const DBC_HIDE = @as(u32, 0);
pub const DBC_SHOW = @as(u32, 1);
pub const DBC_SHOWOBSCURE = @as(u32, 2);
pub const SSM_CLEAR = @as(u32, 0);
pub const SSM_SET = @as(u32, 1);
pub const SSM_REFRESH = @as(u32, 2);
pub const SSM_UPDATE = @as(u32, 4);
pub const SCHEME_DISPLAY = @as(u32, 1);
pub const SCHEME_EDIT = @as(u32, 2);
pub const SCHEME_LOCAL = @as(u32, 4);
pub const SCHEME_GLOBAL = @as(u32, 8);
pub const SCHEME_REFRESH = @as(u32, 16);
pub const SCHEME_UPDATE = @as(u32, 32);
pub const SCHEME_DONOTUSE = @as(u32, 64);
pub const SCHEME_CREATE = @as(u32, 128);
pub const GADOF_DIRTY = @as(u32, 1);
pub const SHCDF_UPDATEITEM = @as(u32, 1);
pub const PPCF_ADDQUOTES = @as(u32, 1);
pub const PPCF_ADDARGUMENTS = @as(u32, 3);
pub const PPCF_NODIRECTORIES = @as(u32, 16);
pub const PPCF_FORCEQUALIFY = @as(u32, 64);
pub const PPCF_LONGESTPOSSIBLE = @as(u32, 128);
pub const OPENPROPS_NONE = @as(u32, 0);
pub const OPENPROPS_INHIBITPIF = @as(u32, 32768);
pub const GETPROPS_NONE = @as(u32, 0);
pub const SETPROPS_NONE = @as(u32, 0);
pub const CLOSEPROPS_NONE = @as(u32, 0);
pub const CLOSEPROPS_DISCARD = @as(u32, 1);
pub const TBIF_APPEND = @as(u32, 0);
pub const TBIF_PREPEND = @as(u32, 1);
pub const TBIF_REPLACE = @as(u32, 2);
pub const TBIF_DEFAULT = @as(u32, 0);
pub const TBIF_INTERNETBAR = @as(u32, 65536);
pub const TBIF_STANDARDTOOLBAR = @as(u32, 131072);
pub const TBIF_NOTOOLBAR = @as(u32, 196608);
pub const SFVM_REARRANGE = @as(u32, 1);
pub const SFVM_ADDOBJECT = @as(u32, 3);
pub const SFVM_REMOVEOBJECT = @as(u32, 6);
pub const SFVM_UPDATEOBJECT = @as(u32, 7);
pub const SFVM_GETSELECTEDOBJECTS = @as(u32, 9);
pub const SFVM_SETITEMPOS = @as(u32, 14);
pub const SFVM_SETCLIPBOARD = @as(u32, 16);
pub const SFVM_SETPOINTS = @as(u32, 23);
pub const GIL_OPENICON = @as(u32, 1);
pub const GIL_FORSHELL = @as(u32, 2);
pub const GIL_ASYNC = @as(u32, 32);
pub const GIL_DEFAULTICON = @as(u32, 64);
pub const GIL_FORSHORTCUT = @as(u32, 128);
pub const GIL_CHECKSHIELD = @as(u32, 512);
pub const GIL_SIMULATEDOC = @as(u32, 1);
pub const GIL_PERINSTANCE = @as(u32, 2);
pub const GIL_PERCLASS = @as(u32, 4);
pub const GIL_NOTFILENAME = @as(u32, 8);
pub const GIL_DONTCACHE = @as(u32, 16);
pub const GIL_SHIELD = @as(u32, 512);
pub const GIL_FORCENOSHIELD = @as(u32, 1024);
pub const SIOM_OVERLAYINDEX = @as(u32, 1);
pub const SIOM_ICONINDEX = @as(u32, 2);
pub const SIOM_RESERVED_SHARED = @as(u32, 0);
pub const SIOM_RESERVED_LINK = @as(u32, 1);
pub const SIOM_RESERVED_SLOWFILE = @as(u32, 2);
pub const SIOM_RESERVED_DEFAULT = @as(u32, 3);
pub const OI_DEFAULT = @as(u32, 0);
pub const OI_ASYNC = @as(u32, 4294962926);
pub const IDO_SHGIOI_SHARE = @as(u32, 268435455);
pub const IDO_SHGIOI_LINK = @as(u32, 268435454);
pub const IDO_SHGIOI_SLOWFILE = @as(u64, 4294967293);
pub const IDO_SHGIOI_DEFAULT = @as(u64, 4294967292);
pub const NT_CONSOLE_PROPS_SIG = @as(u32, 2684354562);
pub const NT_FE_CONSOLE_PROPS_SIG = @as(u32, 2684354564);
pub const EXP_DARWIN_ID_SIG = @as(u32, 2684354566);
pub const EXP_SPECIAL_FOLDER_SIG = @as(u32, 2684354565);
pub const EXP_SZ_LINK_SIG = @as(u32, 2684354561);
pub const EXP_SZ_ICON_SIG = @as(u32, 2684354567);
pub const EXP_PROPERTYSTORAGE_SIG = @as(u32, 2684354569);
pub const FCIDM_SHVIEWFIRST = @as(u32, 0);
pub const FCIDM_SHVIEWLAST = @as(u32, 32767);
pub const FCIDM_BROWSERFIRST = @as(u32, 40960);
pub const FCIDM_BROWSERLAST = @as(u32, 48896);
pub const FCIDM_GLOBALFIRST = @as(u32, 32768);
pub const FCIDM_GLOBALLAST = @as(u32, 40959);
pub const FCIDM_MENU_FILE = @as(u32, 32768);
pub const FCIDM_MENU_EDIT = @as(u32, 32832);
pub const FCIDM_MENU_VIEW = @as(u32, 32896);
pub const FCIDM_MENU_VIEW_SEP_OPTIONS = @as(u32, 32897);
pub const FCIDM_MENU_TOOLS = @as(u32, 32960);
pub const FCIDM_MENU_TOOLS_SEP_GOTO = @as(u32, 32961);
pub const FCIDM_MENU_HELP = @as(u32, 33024);
pub const FCIDM_MENU_FIND = @as(u32, 33088);
pub const FCIDM_MENU_EXPLORE = @as(u32, 33104);
pub const FCIDM_MENU_FAVORITES = @as(u32, 33136);
pub const OFASI_EDIT = @as(u32, 1);
pub const OFASI_OPENDESKTOP = @as(u32, 2);
pub const CSIDL_DESKTOP = @as(u32, 0);
pub const CSIDL_INTERNET = @as(u32, 1);
pub const CSIDL_PROGRAMS = @as(u32, 2);
pub const CSIDL_CONTROLS = @as(u32, 3);
pub const CSIDL_PRINTERS = @as(u32, 4);
pub const CSIDL_PERSONAL = @as(u32, 5);
pub const CSIDL_FAVORITES = @as(u32, 6);
pub const CSIDL_STARTUP = @as(u32, 7);
pub const CSIDL_RECENT = @as(u32, 8);
pub const CSIDL_SENDTO = @as(u32, 9);
pub const CSIDL_BITBUCKET = @as(u32, 10);
pub const CSIDL_STARTMENU = @as(u32, 11);
pub const CSIDL_MYDOCUMENTS = @as(u32, 5);
pub const CSIDL_MYMUSIC = @as(u32, 13);
pub const CSIDL_MYVIDEO = @as(u32, 14);
pub const CSIDL_DESKTOPDIRECTORY = @as(u32, 16);
pub const CSIDL_DRIVES = @as(u32, 17);
pub const CSIDL_NETWORK = @as(u32, 18);
pub const CSIDL_NETHOOD = @as(u32, 19);
pub const CSIDL_FONTS = @as(u32, 20);
pub const CSIDL_TEMPLATES = @as(u32, 21);
pub const CSIDL_COMMON_STARTMENU = @as(u32, 22);
pub const CSIDL_COMMON_PROGRAMS = @as(u32, 23);
pub const CSIDL_COMMON_STARTUP = @as(u32, 24);
pub const CSIDL_COMMON_DESKTOPDIRECTORY = @as(u32, 25);
pub const CSIDL_APPDATA = @as(u32, 26);
pub const CSIDL_PRINTHOOD = @as(u32, 27);
pub const CSIDL_LOCAL_APPDATA = @as(u32, 28);
pub const CSIDL_ALTSTARTUP = @as(u32, 29);
pub const CSIDL_COMMON_ALTSTARTUP = @as(u32, 30);
pub const CSIDL_COMMON_FAVORITES = @as(u32, 31);
pub const CSIDL_INTERNET_CACHE = @as(u32, 32);
pub const CSIDL_COOKIES = @as(u32, 33);
pub const CSIDL_HISTORY = @as(u32, 34);
pub const CSIDL_COMMON_APPDATA = @as(u32, 35);
pub const CSIDL_WINDOWS = @as(u32, 36);
pub const CSIDL_SYSTEM = @as(u32, 37);
pub const CSIDL_PROGRAM_FILES = @as(u32, 38);
pub const CSIDL_MYPICTURES = @as(u32, 39);
pub const CSIDL_PROFILE = @as(u32, 40);
pub const CSIDL_SYSTEMX86 = @as(u32, 41);
pub const CSIDL_PROGRAM_FILESX86 = @as(u32, 42);
pub const CSIDL_PROGRAM_FILES_COMMON = @as(u32, 43);
pub const CSIDL_PROGRAM_FILES_COMMONX86 = @as(u32, 44);
pub const CSIDL_COMMON_TEMPLATES = @as(u32, 45);
pub const CSIDL_COMMON_DOCUMENTS = @as(u32, 46);
pub const CSIDL_COMMON_ADMINTOOLS = @as(u32, 47);
pub const CSIDL_ADMINTOOLS = @as(u32, 48);
pub const CSIDL_CONNECTIONS = @as(u32, 49);
pub const CSIDL_COMMON_MUSIC = @as(u32, 53);
pub const CSIDL_COMMON_PICTURES = @as(u32, 54);
pub const CSIDL_COMMON_VIDEO = @as(u32, 55);
pub const CSIDL_RESOURCES = @as(u32, 56);
pub const CSIDL_RESOURCES_LOCALIZED = @as(u32, 57);
pub const CSIDL_COMMON_OEM_LINKS = @as(u32, 58);
pub const CSIDL_CDBURN_AREA = @as(u32, 59);
pub const CSIDL_COMPUTERSNEARME = @as(u32, 61);
pub const CSIDL_FLAG_CREATE = @as(u32, 32768);
pub const CSIDL_FLAG_DONT_VERIFY = @as(u32, 16384);
pub const CSIDL_FLAG_DONT_UNEXPAND = @as(u32, 8192);
pub const CSIDL_FLAG_NO_ALIAS = @as(u32, 4096);
pub const CSIDL_FLAG_PER_USER_INIT = @as(u32, 2048);
pub const CSIDL_FLAG_MASK = @as(u32, 65280);
pub const FCS_READ = @as(u32, 1);
pub const FCS_FORCEWRITE = @as(u32, 2);
pub const FCS_FLAG_DRAGDROP = @as(u32, 2);
pub const FCSM_VIEWID = @as(u32, 1);
pub const FCSM_WEBVIEWTEMPLATE = @as(u32, 2);
pub const FCSM_INFOTIP = @as(u32, 4);
pub const FCSM_CLSID = @as(u32, 8);
pub const FCSM_ICONFILE = @as(u32, 16);
pub const FCSM_LOGO = @as(u32, 32);
pub const FCSM_FLAGS = @as(u32, 64);
pub const BIF_RETURNONLYFSDIRS = @as(u32, 1);
pub const BIF_DONTGOBELOWDOMAIN = @as(u32, 2);
pub const BIF_STATUSTEXT = @as(u32, 4);
pub const BIF_RETURNFSANCESTORS = @as(u32, 8);
pub const BIF_EDITBOX = @as(u32, 16);
pub const BIF_VALIDATE = @as(u32, 32);
pub const BIF_NEWDIALOGSTYLE = @as(u32, 64);
pub const BIF_BROWSEINCLUDEURLS = @as(u32, 128);
pub const BIF_UAHINT = @as(u32, 256);
pub const BIF_NONEWFOLDERBUTTON = @as(u32, 512);
pub const BIF_NOTRANSLATETARGETS = @as(u32, 1024);
pub const BIF_BROWSEFORCOMPUTER = @as(u32, 4096);
pub const BIF_BROWSEFORPRINTER = @as(u32, 8192);
pub const BIF_BROWSEINCLUDEFILES = @as(u32, 16384);
pub const BIF_SHAREABLE = @as(u32, 32768);
pub const BIF_BROWSEFILEJUNCTIONS = @as(u32, 65536);
pub const BFFM_INITIALIZED = @as(u32, 1);
pub const BFFM_SELCHANGED = @as(u32, 2);
pub const BFFM_VALIDATEFAILEDA = @as(u32, 3);
pub const BFFM_VALIDATEFAILEDW = @as(u32, 4);
pub const BFFM_IUNKNOWN = @as(u32, 5);
pub const BFFM_SETSTATUSTEXTA = @as(u32, 1124);
pub const BFFM_ENABLEOK = @as(u32, 1125);
pub const BFFM_SETSELECTIONA = @as(u32, 1126);
pub const BFFM_SETSELECTIONW = @as(u32, 1127);
pub const BFFM_SETSTATUSTEXTW = @as(u32, 1128);
pub const BFFM_SETOKTEXT = @as(u32, 1129);
pub const BFFM_SETEXPANDED = @as(u32, 1130);
pub const BFFM_SETSTATUSTEXT = @as(u32, 1128);
pub const BFFM_SETSELECTION = @as(u32, 1127);
pub const BFFM_VALIDATEFAILED = @as(u32, 4);
pub const CMDID_INTSHORTCUTCREATE = @as(i32, 1);
pub const STR_PARSE_WITH_PROPERTIES = "ParseWithProperties";
pub const STR_PARSE_PARTIAL_IDLIST = "ParseOriginalItem";
pub const PROGDLG_NORMAL = @as(u32, 0);
pub const PROGDLG_MODAL = @as(u32, 1);
pub const PROGDLG_AUTOTIME = @as(u32, 2);
pub const PROGDLG_NOTIME = @as(u32, 4);
pub const PROGDLG_NOMINIMIZE = @as(u32, 8);
pub const PROGDLG_NOPROGRESSBAR = @as(u32, 16);
pub const PROGDLG_MARQUEEPROGRESS = @as(u32, 32);
pub const PROGDLG_NOCANCEL = @as(u32, 64);
pub const PDTIMER_RESET = @as(u32, 1);
pub const PDTIMER_PAUSE = @as(u32, 2);
pub const PDTIMER_RESUME = @as(u32, 3);
pub const COMPONENT_TOP = @as(u32, 1073741823);
pub const COMP_TYPE_HTMLDOC = @as(u32, 0);
pub const COMP_TYPE_PICTURE = @as(u32, 1);
pub const COMP_TYPE_WEBSITE = @as(u32, 2);
pub const COMP_TYPE_CONTROL = @as(u32, 3);
pub const COMP_TYPE_CFHTML = @as(u32, 4);
pub const COMP_TYPE_MAX = @as(u32, 4);
pub const IS_NORMAL = @as(u32, 1);
pub const IS_FULLSCREEN = @as(u32, 2);
pub const IS_SPLIT = @as(u32, 4);
pub const AD_APPLY_SAVE = @as(u32, 1);
pub const AD_APPLY_HTMLGEN = @as(u32, 2);
pub const AD_APPLY_REFRESH = @as(u32, 4);
pub const AD_APPLY_FORCE = @as(u32, 8);
pub const AD_APPLY_BUFFERED_REFRESH = @as(u32, 16);
pub const AD_APPLY_DYNAMICREFRESH = @as(u32, 32);
pub const AD_GETWP_BMP = @as(u32, 0);
pub const AD_GETWP_IMAGE = @as(u32, 1);
pub const AD_GETWP_LAST_APPLIED = @as(u32, 2);
pub const WPSTYLE_CENTER = @as(u32, 0);
pub const WPSTYLE_TILE = @as(u32, 1);
pub const WPSTYLE_STRETCH = @as(u32, 2);
pub const WPSTYLE_KEEPASPECT = @as(u32, 3);
pub const WPSTYLE_CROPTOFIT = @as(u32, 4);
pub const WPSTYLE_SPAN = @as(u32, 5);
pub const WPSTYLE_MAX = @as(u32, 6);
pub const COMP_ELEM_TYPE = @as(u32, 1);
pub const COMP_ELEM_CHECKED = @as(u32, 2);
pub const COMP_ELEM_DIRTY = @as(u32, 4);
pub const COMP_ELEM_NOSCROLL = @as(u32, 8);
pub const COMP_ELEM_POS_LEFT = @as(u32, 16);
pub const COMP_ELEM_POS_TOP = @as(u32, 32);
pub const COMP_ELEM_SIZE_WIDTH = @as(u32, 64);
pub const COMP_ELEM_SIZE_HEIGHT = @as(u32, 128);
pub const COMP_ELEM_POS_ZINDEX = @as(u32, 256);
pub const COMP_ELEM_SOURCE = @as(u32, 512);
pub const COMP_ELEM_FRIENDLYNAME = @as(u32, 1024);
pub const COMP_ELEM_SUBSCRIBEDURL = @as(u32, 2048);
pub const COMP_ELEM_ORIGINAL_CSI = @as(u32, 4096);
pub const COMP_ELEM_RESTORED_CSI = @as(u32, 8192);
pub const COMP_ELEM_CURITEMSTATE = @as(u32, 16384);
pub const ADDURL_SILENT = @as(u32, 1);
pub const COMPONENT_DEFAULT_LEFT = @as(u32, 65535);
pub const COMPONENT_DEFAULT_TOP = @as(u32, 65535);
pub const MAX_COLUMN_NAME_LEN = @as(u32, 80);
pub const MAX_COLUMN_DESC_LEN = @as(u32, 128);
pub const CFSTR_SHELLIDLIST = "Shell IDList Array";
pub const CFSTR_SHELLIDLISTOFFSET = "Shell Object Offsets";
pub const CFSTR_NETRESOURCES = "Net Resource";
pub const CFSTR_FILEDESCRIPTORA = "FileGroupDescriptor";
pub const CFSTR_FILEDESCRIPTORW = "FileGroupDescriptorW";
pub const CFSTR_FILECONTENTS = "FileContents";
pub const CFSTR_FILENAMEA = "FileName";
pub const CFSTR_FILENAMEW = "FileNameW";
pub const CFSTR_PRINTERGROUP = "PrinterFriendlyName";
pub const CFSTR_FILENAMEMAPA = "FileNameMap";
pub const CFSTR_FILENAMEMAPW = "FileNameMapW";
pub const CFSTR_SHELLURL = "UniformResourceLocator";
pub const CFSTR_INETURLA = "UniformResourceLocator";
pub const CFSTR_INETURLW = "UniformResourceLocatorW";
pub const CFSTR_PREFERREDDROPEFFECT = "Preferred DropEffect";
pub const CFSTR_PERFORMEDDROPEFFECT = "Performed DropEffect";
pub const CFSTR_PASTESUCCEEDED = "Paste Succeeded";
pub const CFSTR_INDRAGLOOP = "InShellDragLoop";
pub const CFSTR_MOUNTEDVOLUME = "MountedVolume";
pub const CFSTR_PERSISTEDDATAOBJECT = "PersistedDataObject";
pub const CFSTR_TARGETCLSID = "TargetCLSID";
pub const CFSTR_LOGICALPERFORMEDDROPEFFECT = "Logical Performed DropEffect";
pub const CFSTR_AUTOPLAY_SHELLIDLISTS = "Autoplay Enumerated IDList Array";
pub const CFSTR_UNTRUSTEDDRAGDROP = "UntrustedDragDrop";
pub const CFSTR_FILE_ATTRIBUTES_ARRAY = "File Attributes Array";
pub const CFSTR_INVOKECOMMAND_DROPPARAM = "InvokeCommand DropParam";
pub const CFSTR_SHELLDROPHANDLER = "DropHandlerCLSID";
pub const CFSTR_DROPDESCRIPTION = "DropDescription";
pub const CFSTR_ZONEIDENTIFIER = "ZoneIdentifier";
pub const CFSTR_FILEDESCRIPTOR = "FileGroupDescriptorW";
pub const CFSTR_FILENAME = "FileNameW";
pub const CFSTR_FILENAMEMAP = "FileNameMapW";
pub const CFSTR_INETURL = "UniformResourceLocatorW";
pub const DVASPECT_SHORTNAME = @as(u32, 2);
pub const DVASPECT_COPY = @as(u32, 3);
pub const DVASPECT_LINK = @as(u32, 4);
pub const SHCNEE_ORDERCHANGED = @as(i32, 2);
pub const SHCNEE_MSI_CHANGE = @as(i32, 4);
pub const SHCNEE_MSI_UNINSTALL = @as(i32, 5);
pub const NUM_POINTS = @as(u32, 3);
pub const CABINETSTATE_VERSION = @as(u32, 2);
pub const PIFNAMESIZE = @as(u32, 30);
pub const PIFSTARTLOCSIZE = @as(u32, 63);
pub const PIFDEFPATHSIZE = @as(u32, 64);
pub const PIFPARAMSSIZE = @as(u32, 64);
pub const PIFSHPROGSIZE = @as(u32, 64);
pub const PIFSHDATASIZE = @as(u32, 64);
pub const PIFDEFFILESIZE = @as(u32, 80);
pub const PIFMAXFILEPATH = @as(u32, 260);
pub const QCMINFO_PLACE_BEFORE = @as(u32, 0);
pub const QCMINFO_PLACE_AFTER = @as(u32, 1);
pub const SFVSOC_INVALIDATE_ALL = @as(u32, 1);
pub const SFVSOC_NOSCROLL = @as(u32, 2);
pub const SHELLSTATEVERSION_IE4 = @as(u32, 9);
pub const SHELLSTATEVERSION_WIN2K = @as(u32, 10);
pub const SHPPFW_NONE = @as(u32, 0);
pub const SHPPFW_DIRCREATE = @as(u32, 1);
pub const SHPPFW_ASKDIRCREATE = @as(u32, 2);
pub const SHPPFW_IGNOREFILENAME = @as(u32, 4);
pub const SHPPFW_NOWRITECHECK = @as(u32, 8);
pub const SHPPFW_MEDIACHECKONLY = @as(u32, 16);
pub const CMF_NORMAL = @as(u32, 0);
pub const CMF_DEFAULTONLY = @as(u32, 1);
pub const CMF_VERBSONLY = @as(u32, 2);
pub const CMF_EXPLORE = @as(u32, 4);
pub const CMF_NOVERBS = @as(u32, 8);
pub const CMF_CANRENAME = @as(u32, 16);
pub const CMF_NODEFAULT = @as(u32, 32);
pub const CMF_INCLUDESTATIC = @as(u32, 64);
pub const CMF_ITEMMENU = @as(u32, 128);
pub const CMF_EXTENDEDVERBS = @as(u32, 256);
pub const CMF_DISABLEDVERBS = @as(u32, 512);
pub const CMF_ASYNCVERBSTATE = @as(u32, 1024);
pub const CMF_OPTIMIZEFORINVOKE = @as(u32, 2048);
pub const CMF_SYNCCASCADEMENU = @as(u32, 4096);
pub const CMF_DONOTPICKDEFAULT = @as(u32, 8192);
pub const CMF_RESERVED = @as(u32, 4294901760);
pub const GCS_VERBA = @as(u32, 0);
pub const GCS_HELPTEXTA = @as(u32, 1);
pub const GCS_VALIDATEA = @as(u32, 2);
pub const GCS_VERBW = @as(u32, 4);
pub const GCS_HELPTEXTW = @as(u32, 5);
pub const GCS_VALIDATEW = @as(u32, 6);
pub const GCS_VERBICONW = @as(u32, 20);
pub const GCS_UNICODE = @as(u32, 4);
pub const GCS_VERB = @as(u32, 4);
pub const GCS_HELPTEXT = @as(u32, 5);
pub const GCS_VALIDATE = @as(u32, 6);
pub const CMDSTR_NEWFOLDERA = "NewFolder";
pub const CMDSTR_VIEWLISTA = "ViewList";
pub const CMDSTR_VIEWDETAILSA = "ViewDetails";
pub const CMDSTR_NEWFOLDERW = "NewFolder";
pub const CMDSTR_VIEWLISTW = "ViewList";
pub const CMDSTR_VIEWDETAILSW = "ViewDetails";
pub const CMDSTR_NEWFOLDER = "NewFolder";
pub const CMDSTR_VIEWLIST = "ViewList";
pub const CMDSTR_VIEWDETAILS = "ViewDetails";
pub const CMIC_MASK_SHIFT_DOWN = @as(u32, 268435456);
pub const CMIC_MASK_CONTROL_DOWN = @as(u32, 1073741824);
pub const CMIC_MASK_PTINVOKE = @as(u32, 536870912);
pub const IRTIR_TASK_NOT_RUNNING = @as(u32, 0);
pub const IRTIR_TASK_RUNNING = @as(u32, 1);
pub const IRTIR_TASK_SUSPENDED = @as(u32, 2);
pub const IRTIR_TASK_PENDING = @as(u32, 3);
pub const IRTIR_TASK_FINISHED = @as(u32, 4);
pub const ITSAT_DEFAULT_PRIORITY = @as(u32, 268435456);
pub const ITSAT_MAX_PRIORITY = @as(u32, 2147483647);
pub const ITSAT_MIN_PRIORITY = @as(u32, 0);
pub const ITSSFLAG_COMPLETE_ON_DESTROY = @as(u32, 0);
pub const ITSSFLAG_KILL_ON_DESTROY = @as(u32, 1);
pub const ITSSFLAG_FLAGS_MASK = @as(u32, 3);
pub const CSIDL_FLAG_PFTI_TRACKTARGET = @as(u32, 16384);
pub const SHCIDS_ALLFIELDS = @as(i32, -2147483648);
pub const SHCIDS_CANONICALONLY = @as(i32, 268435456);
pub const SHCIDS_BITMASK = @as(i32, -65536);
pub const SHCIDS_COLUMNMASK = @as(i32, 65535);
pub const SFGAO_STORAGE = @as(i32, 8);
pub const SFGAO_CANRENAME = @as(i32, 16);
pub const SFGAO_CANDELETE = @as(i32, 32);
pub const SFGAO_HASPROPSHEET = @as(i32, 64);
pub const SFGAO_DROPTARGET = @as(i32, 256);
pub const SFGAO_CAPABILITYMASK = @as(i32, 375);
pub const SFGAO_PLACEHOLDER = @as(i32, 2048);
pub const SFGAO_SYSTEM = @as(i32, 4096);
pub const SFGAO_ENCRYPTED = @as(i32, 8192);
pub const SFGAO_ISSLOW = @as(i32, 16384);
pub const SFGAO_GHOSTED = @as(i32, 32768);
pub const SFGAO_LINK = @as(i32, 65536);
pub const SFGAO_SHARE = @as(i32, 131072);
pub const SFGAO_READONLY = @as(i32, 262144);
pub const SFGAO_HIDDEN = @as(i32, 524288);
pub const SFGAO_DISPLAYATTRMASK = @as(i32, 1032192);
pub const SFGAO_FILESYSANCESTOR = @as(i32, 268435456);
pub const SFGAO_FOLDER = @as(i32, 536870912);
pub const SFGAO_FILESYSTEM = @as(i32, 1073741824);
pub const SFGAO_HASSUBFOLDER = @as(i32, -2147483648);
pub const SFGAO_CONTENTSMASK = @as(i32, -2147483648);
pub const SFGAO_VALIDATE = @as(i32, 16777216);
pub const SFGAO_REMOVABLE = @as(i32, 33554432);
pub const SFGAO_COMPRESSED = @as(i32, 67108864);
pub const SFGAO_BROWSABLE = @as(i32, 134217728);
pub const SFGAO_NONENUMERATED = @as(i32, 1048576);
pub const SFGAO_NEWCONTENT = @as(i32, 2097152);
pub const SFGAO_CANMONIKER = @as(i32, 4194304);
pub const SFGAO_HASSTORAGE = @as(i32, 4194304);
pub const SFGAO_STREAM = @as(i32, 4194304);
pub const SFGAO_STORAGEANCESTOR = @as(i32, 8388608);
pub const SFGAO_STORAGECAPMASK = @as(i32, 1891958792);
pub const SFGAO_PKEYSFGAOMASK = @as(i32, -2130427904);
pub const CONFLICT_RESOLUTION_CLSID_KEY = "ConflictResolutionCLSID";
pub const STR_BIND_FORCE_FOLDER_SHORTCUT_RESOLVE = "Force Folder Shortcut Resolve";
pub const STR_AVOID_DRIVE_RESTRICTION_POLICY = "Avoid Drive Restriction Policy";
pub const STR_SKIP_BINDING_CLSID = "Skip Binding CLSID";
pub const STR_PARSE_PREFER_FOLDER_BROWSING = "Parse Prefer Folder Browsing";
pub const STR_DONT_PARSE_RELATIVE = "Don't Parse Relative";
pub const STR_PARSE_TRANSLATE_ALIASES = "Parse Translate Aliases";
pub const STR_PARSE_SKIP_NET_CACHE = "Skip Net Resource Cache";
pub const STR_PARSE_SHELL_PROTOCOL_TO_FILE_OBJECTS = "Parse Shell Protocol To File Objects";
pub const STR_TRACK_CLSID = "Track the CLSID";
pub const STR_INTERNAL_NAVIGATE = "Internal Navigation";
pub const STR_PARSE_PROPERTYSTORE = "DelegateNamedProperties";
pub const STR_NO_VALIDATE_FILENAME_CHARS = "NoValidateFilenameChars";
pub const STR_BIND_DELEGATE_CREATE_OBJECT = "Delegate Object Creation";
pub const STR_PARSE_ALLOW_INTERNET_SHELL_FOLDERS = "Allow binding to Internet shell folder handlers and negate STR_PARSE_PREFER_WEB_BROWSING";
pub const STR_PARSE_PREFER_WEB_BROWSING = "Do not bind to Internet shell folder handlers";
pub const STR_PARSE_SHOW_NET_DIAGNOSTICS_UI = "Show network diagnostics UI";
pub const STR_PARSE_DONT_REQUIRE_VALIDATED_URLS = "Do not require validated URLs";
pub const STR_INTERNETFOLDER_PARSE_ONLY_URLMON_BINDABLE = "Validate URL";
pub const BIND_INTERRUPTABLE = @as(u32, 4294967295);
pub const STR_BIND_FOLDERS_READ_ONLY = "Folders As Read Only";
pub const STR_BIND_FOLDER_ENUM_MODE = "Folder Enum Mode";
pub const STR_PARSE_WITH_EXPLICIT_PROGID = "ExplicitProgid";
pub const STR_PARSE_WITH_EXPLICIT_ASSOCAPP = "ExplicitAssociationApp";
pub const STR_PARSE_EXPLICIT_ASSOCIATION_SUCCESSFUL = "ExplicitAssociationSuccessful";
pub const STR_PARSE_AND_CREATE_ITEM = "ParseAndCreateItem";
pub const STR_PROPERTYBAG_PARAM = "SHBindCtxPropertyBag";
pub const STR_ENUM_ITEMS_FLAGS = "SHCONTF";
pub const STR_STORAGEITEM_CREATION_FLAGS = "SHGETSTORAGEITEM";
pub const STR_ITEM_CACHE_CONTEXT = "ItemCacheContext";
pub const CDBOSC_SETFOCUS = @as(u32, 0);
pub const CDBOSC_KILLFOCUS = @as(u32, 1);
pub const CDBOSC_SELCHANGE = @as(u32, 2);
pub const CDBOSC_RENAME = @as(u32, 3);
pub const CDBOSC_STATECHANGE = @as(u32, 4);
pub const CDB2N_CONTEXTMENU_DONE = @as(u32, 1);
pub const CDB2N_CONTEXTMENU_START = @as(u32, 2);
pub const CDB2GVF_SHOWALLFILES = @as(u32, 1);
pub const CDB2GVF_ISFILESAVE = @as(u32, 2);
pub const CDB2GVF_ALLOWPREVIEWPANE = @as(u32, 4);
pub const CDB2GVF_NOSELECTVERB = @as(u32, 8);
pub const CDB2GVF_NOINCLUDEITEM = @as(u32, 16);
pub const CDB2GVF_ISFOLDERPICKER = @as(u32, 32);
pub const CDB2GVF_ADDSHIELD = @as(u32, 64);
pub const SBSP_DEFBROWSER = @as(u32, 0);
pub const SBSP_SAMEBROWSER = @as(u32, 1);
pub const SBSP_NEWBROWSER = @as(u32, 2);
pub const SBSP_DEFMODE = @as(u32, 0);
pub const SBSP_OPENMODE = @as(u32, 16);
pub const SBSP_EXPLOREMODE = @as(u32, 32);
pub const SBSP_HELPMODE = @as(u32, 64);
pub const SBSP_NOTRANSFERHIST = @as(u32, 128);
pub const SBSP_ABSOLUTE = @as(u32, 0);
pub const SBSP_RELATIVE = @as(u32, 4096);
pub const SBSP_PARENT = @as(u32, 8192);
pub const SBSP_NAVIGATEBACK = @as(u32, 16384);
pub const SBSP_NAVIGATEFORWARD = @as(u32, 32768);
pub const SBSP_ALLOW_AUTONAVIGATE = @as(u32, 65536);
pub const SBSP_KEEPSAMETEMPLATE = @as(u32, 131072);
pub const SBSP_KEEPWORDWHEELTEXT = @as(u32, 262144);
pub const SBSP_ACTIVATE_NOFOCUS = @as(u32, 524288);
pub const SBSP_CREATENOHISTORY = @as(u32, 1048576);
pub const SBSP_PLAYNOSOUND = @as(u32, 2097152);
pub const SBSP_CALLERUNTRUSTED = @as(u32, 8388608);
pub const SBSP_TRUSTFIRSTDOWNLOAD = @as(u32, 16777216);
pub const SBSP_UNTRUSTEDFORDOWNLOAD = @as(u32, 33554432);
pub const SBSP_NOAUTOSELECT = @as(u32, 67108864);
pub const SBSP_WRITENOHISTORY = @as(u32, 134217728);
pub const SBSP_TRUSTEDFORACTIVEX = @as(u32, 268435456);
pub const SBSP_FEEDNAVIGATION = @as(u32, 536870912);
pub const SBSP_REDIRECT = @as(u32, 1073741824);
pub const SBSP_INITIATEDBYHLINKFRAME = @as(u32, 2147483648);
pub const FCW_STATUS = @as(u32, 1);
pub const FCW_TOOLBAR = @as(u32, 2);
pub const FCW_TREE = @as(u32, 3);
pub const FCW_INTERNETBAR = @as(u32, 6);
pub const FCW_PROGRESS = @as(u32, 8);
pub const FCT_MERGE = @as(u32, 1);
pub const FCT_CONFIGABLE = @as(u32, 2);
pub const FCT_ADDTOEND = @as(u32, 4);
pub const STR_DONT_RESOLVE_LINK = "Don't Resolve Link";
pub const STR_GET_ASYNC_HANDLER = "GetAsyncHandler";
pub const STR_GPS_HANDLERPROPERTIESONLY = "GPS_HANDLERPROPERTIESONLY";
pub const STR_GPS_FASTPROPERTIESONLY = "GPS_FASTPROPERTIESONLY";
pub const STR_GPS_OPENSLOWITEM = "GPS_OPENSLOWITEM";
pub const STR_GPS_DELAYCREATION = "GPS_DELAYCREATION";
pub const STR_GPS_BESTEFFORT = "GPS_BESTEFFORT";
pub const STR_GPS_NO_OPLOCK = "GPS_NO_OPLOCK";
pub const DI_GETDRAGIMAGE = "ShellGetDragImage";
pub const ARCONTENT_AUTORUNINF = @as(u32, 2);
pub const ARCONTENT_AUDIOCD = @as(u32, 4);
pub const ARCONTENT_DVDMOVIE = @as(u32, 8);
pub const ARCONTENT_BLANKCD = @as(u32, 16);
pub const ARCONTENT_BLANKDVD = @as(u32, 32);
pub const ARCONTENT_UNKNOWNCONTENT = @as(u32, 64);
pub const ARCONTENT_AUTOPLAYPIX = @as(u32, 128);
pub const ARCONTENT_AUTOPLAYMUSIC = @as(u32, 256);
pub const ARCONTENT_AUTOPLAYVIDEO = @as(u32, 512);
pub const ARCONTENT_VCD = @as(u32, 1024);
pub const ARCONTENT_SVCD = @as(u32, 2048);
pub const ARCONTENT_DVDAUDIO = @as(u32, 4096);
pub const ARCONTENT_BLANKBD = @as(u32, 8192);
pub const ARCONTENT_BLURAY = @as(u32, 16384);
pub const ARCONTENT_CAMERASTORAGE = @as(u32, 32768);
pub const ARCONTENT_CUSTOMEVENT = @as(u32, 65536);
pub const ARCONTENT_NONE = @as(u32, 0);
pub const ARCONTENT_MASK = @as(u32, 131070);
pub const ARCONTENT_PHASE_UNKNOWN = @as(u32, 0);
pub const ARCONTENT_PHASE_PRESNIFF = @as(u32, 268435456);
pub const ARCONTENT_PHASE_SNIFFING = @as(u32, 536870912);
pub const ARCONTENT_PHASE_FINAL = @as(u32, 1073741824);
pub const ARCONTENT_PHASE_MASK = @as(u32, 1879048192);
pub const IEI_PRIORITY_MAX = @as(u32, 2147483647);
pub const IEI_PRIORITY_MIN = @as(u32, 0);
pub const IEIT_PRIORITY_NORMAL = @as(u32, 268435456);
pub const IEIFLAG_ASYNC = @as(u32, 1);
pub const IEIFLAG_CACHE = @as(u32, 2);
pub const IEIFLAG_ASPECT = @as(u32, 4);
pub const IEIFLAG_OFFLINE = @as(u32, 8);
pub const IEIFLAG_GLEAM = @as(u32, 16);
pub const IEIFLAG_SCREEN = @as(u32, 32);
pub const IEIFLAG_ORIGSIZE = @as(u32, 64);
pub const IEIFLAG_NOSTAMP = @as(u32, 128);
pub const IEIFLAG_NOBORDER = @as(u32, 256);
pub const IEIFLAG_QUALITY = @as(u32, 512);
pub const IEIFLAG_REFRESH = @as(u32, 1024);
pub const DBIM_MINSIZE = @as(u32, 1);
pub const DBIM_MAXSIZE = @as(u32, 2);
pub const DBIM_INTEGRAL = @as(u32, 4);
pub const DBIM_ACTUAL = @as(u32, 8);
pub const DBIM_TITLE = @as(u32, 16);
pub const DBIM_MODEFLAGS = @as(u32, 32);
pub const DBIM_BKCOLOR = @as(u32, 64);
pub const DBIMF_NORMAL = @as(u32, 0);
pub const DBIMF_FIXED = @as(u32, 1);
pub const DBIMF_FIXEDBMP = @as(u32, 4);
pub const DBIMF_VARIABLEHEIGHT = @as(u32, 8);
pub const DBIMF_UNDELETEABLE = @as(u32, 16);
pub const DBIMF_DEBOSSED = @as(u32, 32);
pub const DBIMF_BKCOLOR = @as(u32, 64);
pub const DBIMF_USECHEVRON = @as(u32, 128);
pub const DBIMF_BREAK = @as(u32, 256);
pub const DBIMF_ADDTOFRONT = @as(u32, 512);
pub const DBIMF_TOPALIGN = @as(u32, 1024);
pub const DBIMF_NOGRIPPER = @as(u32, 2048);
pub const DBIMF_ALWAYSGRIPPER = @as(u32, 4096);
pub const DBIMF_NOMARGINS = @as(u32, 8192);
pub const DBIF_VIEWMODE_NORMAL = @as(u32, 0);
pub const DBIF_VIEWMODE_VERTICAL = @as(u32, 1);
pub const DBIF_VIEWMODE_FLOATING = @as(u32, 2);
pub const DBIF_VIEWMODE_TRANSPARENT = @as(u32, 4);
pub const DBPC_SELECTFIRST = @as(u32, 4294967295);
pub const THBN_CLICKED = @as(u32, 6144);
pub const FOFX_NOSKIPJUNCTIONS = @as(u32, 65536);
pub const FOFX_PREFERHARDLINK = @as(u32, 131072);
pub const FOFX_SHOWELEVATIONPROMPT = @as(u32, 262144);
pub const FOFX_RECYCLEONDELETE = @as(u32, 524288);
pub const FOFX_EARLYFAILURE = @as(u32, 1048576);
pub const FOFX_PRESERVEFILEEXTENSIONS = @as(u32, 2097152);
pub const FOFX_KEEPNEWERFILE = @as(u32, 4194304);
pub const FOFX_NOCOPYHOOKS = @as(u32, 8388608);
pub const FOFX_NOMINIMIZEBOX = @as(u32, 16777216);
pub const FOFX_MOVEACLSACROSSVOLUMES = @as(u32, 33554432);
pub const FOFX_DONTDISPLAYSOURCEPATH = @as(u32, 67108864);
pub const FOFX_DONTDISPLAYDESTPATH = @as(u32, 134217728);
pub const FOFX_REQUIREELEVATION = @as(u32, 268435456);
pub const FOFX_ADDUNDORECORD = @as(u32, 536870912);
pub const FOFX_COPYASDOWNLOAD = @as(u32, 1073741824);
pub const FOFX_DONTDISPLAYLOCATIONS = @as(u32, 2147483648);
pub const BSIM_STATE = @as(u32, 1);
pub const BSIM_STYLE = @as(u32, 2);
pub const BSSF_VISIBLE = @as(u32, 1);
pub const BSSF_NOTITLE = @as(u32, 2);
pub const BSSF_UNDELETEABLE = @as(u32, 4096);
pub const BSIS_AUTOGRIPPER = @as(u32, 0);
pub const BSIS_NOGRIPPER = @as(u32, 1);
pub const BSIS_ALWAYSGRIPPER = @as(u32, 2);
pub const BSIS_LEFTALIGN = @as(u32, 4);
pub const BSIS_SINGLECLICK = @as(u32, 8);
pub const BSIS_NOCONTEXTMENU = @as(u32, 16);
pub const BSIS_NODROPTARGET = @as(u32, 32);
pub const BSIS_NOCAPTION = @as(u32, 64);
pub const BSIS_PREFERNOLINEBREAK = @as(u32, 128);
pub const BSIS_LOCKED = @as(u32, 256);
pub const BSIS_PRESERVEORDERDURINGLAYOUT = @as(u32, 512);
pub const BSIS_FIXEDORDER = @as(u32, 1024);
pub const OF_CAP_CANSWITCHTO = @as(u32, 1);
pub const OF_CAP_CANCLOSE = @as(u32, 2);
pub const SMDM_SHELLFOLDER = @as(u32, 1);
pub const SMDM_HMENU = @as(u32, 2);
pub const SMDM_TOOLBAR = @as(u32, 4);
pub const SMC_INITMENU = @as(u32, 1);
pub const SMC_CREATE = @as(u32, 2);
pub const SMC_EXITMENU = @as(u32, 3);
pub const SMC_GETINFO = @as(u32, 5);
pub const SMC_GETSFINFO = @as(u32, 6);
pub const SMC_GETOBJECT = @as(u32, 7);
pub const SMC_GETSFOBJECT = @as(u32, 8);
pub const SMC_SFEXEC = @as(u32, 9);
pub const SMC_SFSELECTITEM = @as(u32, 10);
pub const SMC_REFRESH = @as(u32, 16);
pub const SMC_DEMOTE = @as(u32, 17);
pub const SMC_PROMOTE = @as(u32, 18);
pub const SMC_DEFAULTICON = @as(u32, 22);
pub const SMC_NEWITEM = @as(u32, 23);
pub const SMC_CHEVRONEXPAND = @as(u32, 25);
pub const SMC_DISPLAYCHEVRONTIP = @as(u32, 42);
pub const SMC_SETSFOBJECT = @as(u32, 45);
pub const SMC_SHCHANGENOTIFY = @as(u32, 46);
pub const SMC_CHEVRONGETTIP = @as(u32, 47);
pub const SMC_SFDDRESTRICTED = @as(u32, 48);
pub const SMC_SFEXEC_MIDDLE = @as(u32, 49);
pub const SMC_GETAUTOEXPANDSTATE = @as(u32, 65);
pub const SMC_AUTOEXPANDCHANGE = @as(u32, 66);
pub const SMC_GETCONTEXTMENUMODIFIER = @as(u32, 67);
pub const SMC_GETBKCONTEXTMENU = @as(u32, 68);
pub const SMC_OPEN = @as(u32, 69);
pub const SMAE_EXPANDED = @as(u32, 1);
pub const SMAE_CONTRACTED = @as(u32, 2);
pub const SMAE_USER = @as(u32, 4);
pub const SMAE_VALID = @as(u32, 7);
pub const SMINIT_DEFAULT = @as(u32, 0);
pub const SMINIT_RESTRICT_DRAGDROP = @as(u32, 2);
pub const SMINIT_TOPLEVEL = @as(u32, 4);
pub const SMINIT_CACHED = @as(u32, 16);
pub const SMINIT_AUTOEXPAND = @as(u32, 256);
pub const SMINIT_AUTOTOOLTIP = @as(u32, 512);
pub const SMINIT_DROPONCONTAINER = @as(u32, 1024);
pub const SMINIT_VERTICAL = @as(u32, 268435456);
pub const SMINIT_HORIZONTAL = @as(u32, 536870912);
pub const SMSET_TOP = @as(u32, 268435456);
pub const SMSET_BOTTOM = @as(u32, 536870912);
pub const SMSET_DONTOWN = @as(u32, 1);
pub const SMINV_REFRESH = @as(u32, 1);
pub const SMINV_ID = @as(u32, 8);
pub const E_PREVIEWHANDLER_DRM_FAIL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2042494975));
pub const E_PREVIEWHANDLER_NOAUTH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2042494974));
pub const E_PREVIEWHANDLER_NOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2042494973));
pub const E_PREVIEWHANDLER_CORRUPT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2042494972));
pub const STR_FILE_SYS_BIND_DATA = "File System Bind Data";
pub const STR_FILE_SYS_BIND_DATA_WIN7_FORMAT = "Win7FileSystemIdList";
pub const HOMEGROUP_SECURITY_GROUP_MULTI = "HUG";
pub const HOMEGROUP_SECURITY_GROUP = "HomeUsers";
pub const PROP_CONTRACT_DELEGATE = "ContractDelegate";
pub const SID_URLExecutionContext = Guid.initString("fb5f8ebc-bbb6-4d10-a461-777291a09030");
pub const STR_TAB_REUSE_IDENTIFIER = "Tab Reuse Identifier";
pub const STR_REFERRER_IDENTIFIER = "Referrer Identifier";
pub const SID_LaunchSourceViewSizePreference = Guid.initString("80605492-67d9-414f-af89-a1cdf1242bc1");
pub const SID_LaunchTargetViewSizePreference = Guid.initString("26db2472-b7b7-406b-9702-730a4e20d3bf");
pub const SID_LaunchSourceAppUserModelId = Guid.initString("2ce78010-74db-48bc-9c6a-10f372495723");
pub const SID_ShellExecuteNamedPropertyStore = Guid.initString("eb84ada2-00ff-4992-8324-ed5ce061cb29");
pub const ISIOI_ICONFILE = @as(u32, 1);
pub const ISIOI_ICONINDEX = @as(u32, 2);
pub const ABM_NEW = @as(u32, 0);
pub const ABM_REMOVE = @as(u32, 1);
pub const ABM_QUERYPOS = @as(u32, 2);
pub const ABM_SETPOS = @as(u32, 3);
pub const ABM_GETSTATE = @as(u32, 4);
pub const ABM_GETTASKBARPOS = @as(u32, 5);
pub const ABM_ACTIVATE = @as(u32, 6);
pub const ABM_GETAUTOHIDEBAR = @as(u32, 7);
pub const ABM_SETAUTOHIDEBAR = @as(u32, 8);
pub const ABM_WINDOWPOSCHANGED = @as(u32, 9);
pub const ABM_SETSTATE = @as(u32, 10);
pub const ABM_GETAUTOHIDEBAREX = @as(u32, 11);
pub const ABM_SETAUTOHIDEBAREX = @as(u32, 12);
pub const ABN_STATECHANGE = @as(u32, 0);
pub const ABN_POSCHANGED = @as(u32, 1);
pub const ABN_FULLSCREENAPP = @as(u32, 2);
pub const ABN_WINDOWARRANGE = @as(u32, 3);
pub const ABS_AUTOHIDE = @as(u32, 1);
pub const ABS_ALWAYSONTOP = @as(u32, 2);
pub const ABE_LEFT = @as(u32, 0);
pub const ABE_TOP = @as(u32, 1);
pub const ABE_RIGHT = @as(u32, 2);
pub const ABE_BOTTOM = @as(u32, 3);
pub const FO_MOVE = @as(u32, 1);
pub const FO_COPY = @as(u32, 2);
pub const FO_DELETE = @as(u32, 3);
pub const FO_RENAME = @as(u32, 4);
pub const FOF_MULTIDESTFILES = @as(u32, 1);
pub const FOF_CONFIRMMOUSE = @as(u32, 2);
pub const FOF_SILENT = @as(u32, 4);
pub const FOF_RENAMEONCOLLISION = @as(u32, 8);
pub const FOF_NOCONFIRMATION = @as(u32, 16);
pub const FOF_WANTMAPPINGHANDLE = @as(u32, 32);
pub const FOF_ALLOWUNDO = @as(u32, 64);
pub const FOF_FILESONLY = @as(u32, 128);
pub const FOF_SIMPLEPROGRESS = @as(u32, 256);
pub const FOF_NOCONFIRMMKDIR = @as(u32, 512);
pub const FOF_NOERRORUI = @as(u32, 1024);
pub const FOF_NOCOPYSECURITYATTRIBS = @as(u32, 2048);
pub const FOF_NORECURSION = @as(u32, 4096);
pub const FOF_NO_CONNECTED_ELEMENTS = @as(u32, 8192);
pub const FOF_WANTNUKEWARNING = @as(u32, 16384);
pub const FOF_NORECURSEREPARSE = @as(u32, 32768);
pub const PO_DELETE = @as(u32, 19);
pub const PO_RENAME = @as(u32, 20);
pub const PO_PORTCHANGE = @as(u32, 32);
pub const PO_REN_PORT = @as(u32, 52);
pub const SE_ERR_FNF = @as(u32, 2);
pub const SE_ERR_PNF = @as(u32, 3);
pub const SE_ERR_ACCESSDENIED = @as(u32, 5);
pub const SE_ERR_OOM = @as(u32, 8);
pub const SE_ERR_DLLNOTFOUND = @as(u32, 32);
pub const SE_ERR_SHARE = @as(u32, 26);
pub const SE_ERR_ASSOCINCOMPLETE = @as(u32, 27);
pub const SE_ERR_DDETIMEOUT = @as(u32, 28);
pub const SE_ERR_DDEFAIL = @as(u32, 29);
pub const SE_ERR_DDEBUSY = @as(u32, 30);
pub const SE_ERR_NOASSOC = @as(u32, 31);
pub const SEE_MASK_DEFAULT = @as(u32, 0);
pub const SEE_MASK_CLASSNAME = @as(u32, 1);
pub const SEE_MASK_CLASSKEY = @as(u32, 3);
pub const SEE_MASK_IDLIST = @as(u32, 4);
pub const SEE_MASK_INVOKEIDLIST = @as(u32, 12);
pub const SEE_MASK_ICON = @as(u32, 16);
pub const SEE_MASK_HOTKEY = @as(u32, 32);
pub const SEE_MASK_NOCLOSEPROCESS = @as(u32, 64);
pub const SEE_MASK_CONNECTNETDRV = @as(u32, 128);
pub const SEE_MASK_NOASYNC = @as(u32, 256);
pub const SEE_MASK_FLAG_DDEWAIT = @as(u32, 256);
pub const SEE_MASK_DOENVSUBST = @as(u32, 512);
pub const SEE_MASK_FLAG_NO_UI = @as(u32, 1024);
pub const SEE_MASK_UNICODE = @as(u32, 16384);
pub const SEE_MASK_NO_CONSOLE = @as(u32, 32768);
pub const SEE_MASK_ASYNCOK = @as(u32, 1048576);
pub const SEE_MASK_HMONITOR = @as(u32, 2097152);
pub const SEE_MASK_NOZONECHECKS = @as(u32, 8388608);
pub const SEE_MASK_NOQUERYCLASSSTORE = @as(u32, 16777216);
pub const SEE_MASK_WAITFORINPUTIDLE = @as(u32, 33554432);
pub const SEE_MASK_FLAG_LOG_USAGE = @as(u32, 67108864);
pub const SEE_MASK_FLAG_HINST_IS_SITE = @as(u32, 134217728);
pub const SHERB_NOCONFIRMATION = @as(u32, 1);
pub const SHERB_NOPROGRESSUI = @as(u32, 2);
pub const SHERB_NOSOUND = @as(u32, 4);
pub const NIN_SELECT = @as(u32, 1024);
pub const NINF_KEY = @as(u32, 1);
pub const NIN_BALLOONSHOW = @as(u32, 1026);
pub const NIN_BALLOONHIDE = @as(u32, 1027);
pub const NIN_BALLOONTIMEOUT = @as(u32, 1028);
pub const NIN_BALLOONUSERCLICK = @as(u32, 1029);
pub const NIN_POPUPOPEN = @as(u32, 1030);
pub const NIN_POPUPCLOSE = @as(u32, 1031);
pub const NOTIFYICON_VERSION = @as(u32, 3);
pub const NOTIFYICON_VERSION_4 = @as(u32, 4);
pub const NIS_HIDDEN = @as(u32, 1);
pub const NIS_SHAREDICON = @as(u32, 2);
pub const NIIF_NONE = @as(u32, 0);
pub const NIIF_INFO = @as(u32, 1);
pub const NIIF_WARNING = @as(u32, 2);
pub const NIIF_ERROR = @as(u32, 3);
pub const NIIF_USER = @as(u32, 4);
pub const NIIF_ICON_MASK = @as(u32, 15);
pub const NIIF_NOSOUND = @as(u32, 16);
pub const NIIF_LARGE_ICON = @as(u32, 32);
pub const NIIF_RESPECT_QUIET_TIME = @as(u32, 128);
pub const SHGSI_ICONLOCATION = @as(u32, 0);
pub const SHGNLI_PIDL = @as(u64, 1);
pub const SHGNLI_PREFIXNAME = @as(u64, 2);
pub const SHGNLI_NOUNIQUE = @as(u64, 4);
pub const SHGNLI_NOLNK = @as(u64, 8);
pub const SHGNLI_NOLOCNAME = @as(u64, 16);
pub const SHGNLI_USEURLEXT = @as(u64, 32);
pub const PRINTACTION_OPEN = @as(u32, 0);
pub const PRINTACTION_PROPERTIES = @as(u32, 1);
pub const PRINTACTION_NETINSTALL = @as(u32, 2);
pub const PRINTACTION_NETINSTALLLINK = @as(u32, 3);
pub const PRINTACTION_TESTPAGE = @as(u32, 4);
pub const PRINTACTION_OPENNETPRN = @as(u32, 5);
pub const PRINTACTION_DOCUMENTDEFAULTS = @as(u32, 6);
pub const PRINTACTION_SERVERPROPERTIES = @as(u32, 7);
pub const PRINT_PROP_FORCE_NAME = @as(u32, 1);
pub const OFFLINE_STATUS_LOCAL = @as(u32, 1);
pub const OFFLINE_STATUS_REMOTE = @as(u32, 2);
pub const OFFLINE_STATUS_INCOMPLETE = @as(u32, 4);
pub const SHIL_LARGE = @as(u32, 0);
pub const SHIL_SMALL = @as(u32, 1);
pub const SHIL_EXTRALARGE = @as(u32, 2);
pub const SHIL_SYSSMALL = @as(u32, 3);
pub const SHIL_JUMBO = @as(u32, 4);
pub const SHIL_LAST = @as(u32, 4);
pub const WC_NETADDRESS = "msctls_netaddress";
pub const NCM_GETADDRESS = @as(u32, 1025);
pub const NCM_SETALLOWTYPE = @as(u32, 1026);
pub const NCM_GETALLOWTYPE = @as(u32, 1027);
pub const NCM_DISPLAYERRORTIP = @as(u32, 1028);
pub const CREDENTIAL_PROVIDER_NO_DEFAULT = @as(u32, 4294967295);
pub const Identity_LocalUserProvider = Guid.initString("a198529b-730f-4089-b646-a12557f5665e");
pub const MAX_SYNCMGR_ID = @as(u32, 64);
pub const MAX_SYNCMGR_PROGRESSTEXT = @as(u32, 260);
pub const MAX_SYNCMGR_NAME = @as(u32, 128);
pub const STIF_DEFAULT = @as(i32, 0);
pub const STIF_SUPPORT_HEX = @as(i32, 1);
pub const SZ_CONTENTTYPE_HTMLA = "text/html";
pub const SZ_CONTENTTYPE_HTMLW = "text/html";
pub const SZ_CONTENTTYPE_CDFA = "application/x-cdf";
pub const SZ_CONTENTTYPE_CDFW = "application/x-cdf";
pub const SZ_CONTENTTYPE_HTML = "text/html";
pub const SZ_CONTENTTYPE_CDF = "application/x-cdf";
pub const GCT_INVALID = @as(u32, 0);
pub const GCT_LFNCHAR = @as(u32, 1);
pub const GCT_SHORTCHAR = @as(u32, 2);
pub const GCT_WILD = @as(u32, 4);
pub const GCT_SEPARATOR = @as(u32, 8);
pub const PMSF_NORMAL = @as(u32, 0);
pub const PMSF_MULTIPLE = @as(u32, 1);
pub const PMSF_DONT_STRIP_SPACES = @as(u32, 65536);
pub const URL_UNESCAPE = @as(u32, 268435456);
pub const URL_ESCAPE_UNSAFE = @as(u32, 536870912);
pub const URL_PLUGGABLE_PROTOCOL = @as(u32, 1073741824);
pub const URL_WININET_COMPATIBILITY = @as(u32, 2147483648);
pub const URL_DONT_ESCAPE_EXTRA_INFO = @as(u32, 33554432);
pub const URL_DONT_UNESCAPE_EXTRA_INFO = @as(u32, 33554432);
pub const URL_BROWSER_MODE = @as(u32, 33554432);
pub const URL_ESCAPE_SPACES_ONLY = @as(u32, 67108864);
pub const URL_DONT_SIMPLIFY = @as(u32, 134217728);
pub const URL_NO_META = @as(u32, 134217728);
pub const URL_UNESCAPE_INPLACE = @as(u32, 1048576);
pub const URL_CONVERT_IF_DOSPATH = @as(u32, 2097152);
pub const URL_UNESCAPE_HIGH_ANSI_ONLY = @as(u32, 4194304);
pub const URL_INTERNAL_PATH = @as(u32, 8388608);
pub const URL_FILE_USE_PATHURL = @as(u32, 65536);
pub const URL_DONT_UNESCAPE = @as(u32, 131072);
pub const URL_ESCAPE_AS_UTF8 = @as(u32, 262144);
pub const URL_UNESCAPE_AS_UTF8 = @as(u32, 262144);
pub const URL_ESCAPE_ASCII_URI_COMPONENT = @as(u32, 524288);
pub const URL_UNESCAPE_URI_COMPONENT = @as(u32, 262144);
pub const URL_ESCAPE_PERCENT = @as(u32, 4096);
pub const URL_ESCAPE_SEGMENT_ONLY = @as(u32, 8192);
pub const URL_PARTFLAG_KEEPSCHEME = @as(u32, 1);
pub const URL_APPLY_DEFAULT = @as(u32, 1);
pub const URL_APPLY_GUESSSCHEME = @as(u32, 2);
pub const URL_APPLY_GUESSFILE = @as(u32, 4);
pub const URL_APPLY_FORCEAPPLY = @as(u32, 8);
pub const SRRF_RT_REG_NONE = @as(u32, 1);
pub const SRRF_RT_REG_SZ = @as(u32, 2);
pub const SRRF_RT_REG_EXPAND_SZ = @as(u32, 4);
pub const SRRF_RT_REG_BINARY = @as(u32, 8);
pub const SRRF_RT_REG_DWORD = @as(u32, 16);
pub const SRRF_RT_REG_MULTI_SZ = @as(u32, 32);
pub const SRRF_RT_REG_QWORD = @as(u32, 64);
pub const SRRF_RT_ANY = @as(u32, 65535);
pub const SRRF_RM_ANY = @as(u32, 0);
pub const SRRF_RM_NORMAL = @as(u32, 65536);
pub const SRRF_RM_SAFE = @as(u32, 131072);
pub const SRRF_RM_SAFENETWORK = @as(u32, 262144);
pub const SRRF_NOEXPAND = @as(u32, 268435456);
pub const SRRF_ZEROONFAILURE = @as(u32, 536870912);
pub const SRRF_NOVIRT = @as(u32, 1073741824);
pub const SHREGSET_HKCU = @as(u32, 1);
pub const SHREGSET_FORCE_HKCU = @as(u32, 2);
pub const SHREGSET_HKLM = @as(u32, 4);
pub const SHREGSET_FORCE_HKLM = @as(u32, 8);
pub const SPMODE_SHELL = @as(u32, 1);
pub const SPMODE_DEBUGOUT = @as(u32, 2);
pub const SPMODE_TEST = @as(u32, 4);
pub const SPMODE_BROWSER = @as(u32, 8);
pub const SPMODE_FLUSH = @as(u32, 16);
pub const SPMODE_EVENT = @as(u32, 32);
pub const SPMODE_MSVM = @as(u32, 64);
pub const SPMODE_FORMATTEXT = @as(u32, 128);
pub const SPMODE_PROFILE = @as(u32, 256);
pub const SPMODE_DEBUGBREAK = @as(u32, 512);
pub const SPMODE_MSGTRACE = @as(u32, 1024);
pub const SPMODE_PERFTAGS = @as(u32, 2048);
pub const SPMODE_MEMWATCH = @as(u32, 4096);
pub const SPMODE_DBMON = @as(u32, 8192);
pub const SPMODE_MULTISTOP = @as(u32, 16384);
pub const SPMODE_EVENTTRACE = @as(u32, 32768);
pub const SHGVSPB_PERUSER = @as(u32, 1);
pub const SHGVSPB_ALLUSERS = @as(u32, 2);
pub const SHGVSPB_PERFOLDER = @as(u32, 4);
pub const SHGVSPB_ALLFOLDERS = @as(u32, 8);
pub const SHGVSPB_INHERIT = @as(u32, 16);
pub const SHGVSPB_ROAM = @as(u32, 32);
pub const SHGVSPB_NOAUTODEFAULTS = @as(u32, 2147483648);
pub const FDTF_SHORTTIME = @as(u32, 1);
pub const FDTF_SHORTDATE = @as(u32, 2);
pub const FDTF_LONGDATE = @as(u32, 4);
pub const FDTF_LONGTIME = @as(u32, 8);
pub const FDTF_RELATIVE = @as(u32, 16);
pub const FDTF_LTRDATE = @as(u32, 256);
pub const FDTF_RTLDATE = @as(u32, 512);
pub const FDTF_NOAUTOREADINGORDER = @as(u32, 1024);
pub const PLATFORM_UNKNOWN = @as(u32, 0);
pub const PLATFORM_IE3 = @as(u32, 1);
pub const PLATFORM_BROWSERONLY = @as(u32, 1);
pub const PLATFORM_INTEGRATED = @as(u32, 2);
pub const ILMM_IE4 = @as(u32, 0);
pub const SHACF_DEFAULT = @as(u32, 0);
pub const SHACF_FILESYSTEM = @as(u32, 1);
pub const SHACF_URLHISTORY = @as(u32, 2);
pub const SHACF_URLMRU = @as(u32, 4);
pub const SHACF_USETAB = @as(u32, 8);
pub const SHACF_FILESYS_ONLY = @as(u32, 16);
pub const SHACF_FILESYS_DIRS = @as(u32, 32);
pub const SHACF_VIRTUAL_NAMESPACE = @as(u32, 64);
pub const SHACF_AUTOSUGGEST_FORCE_ON = @as(u32, 268435456);
pub const SHACF_AUTOSUGGEST_FORCE_OFF = @as(u32, 536870912);
pub const SHACF_AUTOAPPEND_FORCE_ON = @as(u32, 1073741824);
pub const SHACF_AUTOAPPEND_FORCE_OFF = @as(u32, 2147483648);
pub const DLLVER_PLATFORM_WINDOWS = @as(u32, 1);
pub const DLLVER_PLATFORM_NT = @as(u32, 2);
pub const DLLVER_MAJOR_MASK = @as(u64, 18446462598732840960);
pub const DLLVER_MINOR_MASK = @as(u64, 281470681743360);
pub const DLLVER_BUILD_MASK = @as(u64, 4294901760);
pub const DLLVER_QFE_MASK = @as(u64, 65535);
pub const WTS_E_FAILEDEXTRACTION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147175936));
pub const WTS_E_EXTRACTIONTIMEDOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147175935));
pub const WTS_E_SURROGATEUNAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147175934));
pub const WTS_E_FASTEXTRACTIONNOTSUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147175933));
pub const WTS_E_DATAFILEUNAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147175932));
pub const WTS_E_EXTRACTIONPENDING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147175931));
pub const WTS_E_EXTRACTIONBLOCKED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147175930));
pub const WTS_E_NOSTORAGEPROVIDERTHUMBNAILHANDLER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147175929));
pub const SHIMGKEY_QUALITY = "Compression";
pub const SHIMGKEY_RAWFORMAT = "RawDataFormat";
pub const SHIMGDEC_DEFAULT = @as(u32, 0);
pub const SHIMGDEC_THUMBNAIL = @as(u32, 1);
pub const SHIMGDEC_LOADFULL = @as(u32, 2);
pub const E_NOTVALIDFORANIMATEDIMAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221503));
pub const S_SYNCMGR_MISSINGITEMS = @import("../zig.zig").typedConst(HRESULT, @as(i32, 262657));
pub const S_SYNCMGR_RETRYSYNC = @import("../zig.zig").typedConst(HRESULT, @as(i32, 262658));
pub const S_SYNCMGR_CANCELITEM = @import("../zig.zig").typedConst(HRESULT, @as(i32, 262659));
pub const S_SYNCMGR_CANCELALL = @import("../zig.zig").typedConst(HRESULT, @as(i32, 262660));
pub const S_SYNCMGR_ITEMDELETED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 262672));
pub const S_SYNCMGR_ENUMITEMS = @import("../zig.zig").typedConst(HRESULT, @as(i32, 262673));
pub const SYNCMGRPROGRESSITEM_STATUSTEXT = @as(u32, 1);
pub const SYNCMGRPROGRESSITEM_STATUSTYPE = @as(u32, 2);
pub const SYNCMGRPROGRESSITEM_PROGVALUE = @as(u32, 4);
pub const SYNCMGRPROGRESSITEM_MAXVALUE = @as(u32, 8);
pub const SYNCMGRLOGERROR_ERRORFLAGS = @as(u32, 1);
pub const SYNCMGRLOGERROR_ERRORID = @as(u32, 2);
pub const SYNCMGRLOGERROR_ITEMID = @as(u32, 4);
pub const SYNCMGRITEM_ITEMFLAGMASK = @as(u32, 127);
pub const MAX_SYNCMGRITEMNAME = @as(u32, 128);
pub const SYNCMGRHANDLERFLAG_MASK = @as(u32, 15);
pub const MAX_SYNCMGRHANDLERNAME = @as(u32, 32);
pub const SYNCMGRREGISTERFLAGS_MASK = @as(u32, 7);
pub const TLOG_BACK = @as(i32, -1);
pub const TLOG_CURRENT = @as(u32, 0);
pub const TLOG_FORE = @as(u32, 1);
pub const TLMENUF_INCLUDECURRENT = @as(u32, 1);
pub const TLMENUF_BACK = @as(u32, 16);
pub const TLMENUF_FORE = @as(u32, 32);
pub const BSF_REGISTERASDROPTARGET = @as(u32, 1);
pub const BSF_THEATERMODE = @as(u32, 2);
pub const BSF_NOLOCALFILEWARNING = @as(u32, 16);
pub const BSF_UISETBYAUTOMATION = @as(u32, 256);
pub const BSF_RESIZABLE = @as(u32, 512);
pub const BSF_CANMAXIMIZE = @as(u32, 1024);
pub const BSF_TOPBROWSER = @as(u32, 2048);
pub const BSF_NAVNOHISTORY = @as(u32, 4096);
pub const BSF_HTMLNAVCANCELED = @as(u32, 8192);
pub const BSF_DONTSHOWNAVCANCELPAGE = @as(u32, 16384);
pub const BSF_SETNAVIGATABLECODEPAGE = @as(u32, 32768);
pub const BSF_DELEGATEDNAVIGATION = @as(u32, 65536);
pub const BSF_TRUSTEDFORACTIVEX = @as(u32, 131072);
pub const BSF_MERGEDMENUS = @as(u32, 262144);
pub const BSF_FEEDNAVIGATION = @as(u32, 524288);
pub const BSF_FEEDSUBSCRIBED = @as(u32, 1048576);
pub const HLNF_CALLERUNTRUSTED = @as(u32, 2097152);
pub const HLNF_TRUSTEDFORACTIVEX = @as(u32, 4194304);
pub const HLNF_DISABLEWINDOWRESTRICTIONS = @as(u32, 8388608);
pub const HLNF_TRUSTFIRSTDOWNLOAD = @as(u32, 16777216);
pub const HLNF_UNTRUSTEDFORDOWNLOAD = @as(u32, 33554432);
pub const SHHLNF_NOAUTOSELECT = @as(u32, 67108864);
pub const SHHLNF_WRITENOHISTORY = @as(u32, 134217728);
pub const HLNF_EXTERNALNAVIGATE = @as(u32, 268435456);
pub const HLNF_ALLOW_AUTONAVIGATE = @as(u32, 536870912);
pub const HLNF_NEWWINDOWSMANAGED = @as(u32, 2147483648);
pub const INTERNET_MAX_PATH_LENGTH = @as(u32, 2048);
pub const INTERNET_MAX_SCHEME_LENGTH = @as(u32, 32);
pub const VIEW_PRIORITY_RESTRICTED = @as(u32, 112);
pub const VIEW_PRIORITY_CACHEHIT = @as(u32, 80);
pub const VIEW_PRIORITY_STALECACHEHIT = @as(u32, 69);
pub const VIEW_PRIORITY_USEASDEFAULT = @as(u32, 67);
pub const VIEW_PRIORITY_SHELLEXT = @as(u32, 64);
pub const VIEW_PRIORITY_CACHEMISS = @as(u32, 48);
pub const VIEW_PRIORITY_INHERIT = @as(u32, 32);
pub const VIEW_PRIORITY_SHELLEXT_ASBACKUP = @as(u32, 21);
pub const VIEW_PRIORITY_DESPERATE = @as(u32, 16);
pub const VIEW_PRIORITY_NONE = @as(u32, 0);
pub const VOLUME_PREFIX = "\\\\?\\Volume";
pub const PATHCCH_MAX_CCH = @as(u32, 32768);
pub const IDS_DESCRIPTION = @as(u32, 1);
pub const ID_APP = @as(u32, 100);
pub const DLG_SCRNSAVECONFIGURE = @as(u32, 2003);
pub const idsIsPassword = @as(u32, 1000);
pub const idsIniFile = @as(u32, 1001);
pub const idsScreenSaver = @as(u32, 1002);
pub const idsPassword = @as(u32, 1003);
pub const idsDifferentPW = @as(u32, 1004);
pub const idsChangePW = @as(u32, 1005);
pub const idsBadOldPW = @as(u32, 1006);
pub const idsAppName = @as(u32, 1007);
pub const idsNoHelpMemory = @as(u32, 1008);
pub const idsHelpFile = @as(u32, 1009);
pub const idsDefKeyword = @as(u32, 1010);
pub const MAXFILELEN = @as(u32, 13);
pub const TITLEBARNAMELEN = @as(u32, 40);
pub const APPNAMEBUFFERLEN = @as(u32, 40);
pub const BUFFLEN = @as(u32, 255);
pub const SCRM_VERIFYPW = @as(u32, 32768);
pub const E_FLAGS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147217408));
pub const IS_E_EXEC_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147213310));
pub const URL_E_INVALID_SYNTAX = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147217407));
pub const URL_E_UNREGISTERED_PROTOCOL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147217406));
pub const CPLPAGE_MOUSE_BUTTONS = @as(u32, 1);
pub const CPLPAGE_MOUSE_PTRMOTION = @as(u32, 2);
pub const CPLPAGE_MOUSE_WHEEL = @as(u32, 3);
pub const CPLPAGE_KEYBOARD_SPEED = @as(u32, 1);
pub const CPLPAGE_DISPLAY_BACKGROUND = @as(u32, 1);
pub const DISPID_SELECTIONCHANGED = @as(u32, 200);
pub const DISPID_FILELISTENUMDONE = @as(u32, 201);
pub const DISPID_VERBINVOKED = @as(u32, 202);
pub const DISPID_DEFAULTVERBINVOKED = @as(u32, 203);
pub const DISPID_BEGINDRAG = @as(u32, 204);
pub const DISPID_VIEWMODECHANGED = @as(u32, 205);
pub const DISPID_NOITEMSTATE_CHANGED = @as(u32, 206);
pub const DISPID_CONTENTSCHANGED = @as(u32, 207);
pub const DISPID_FOCUSCHANGED = @as(u32, 208);
pub const DISPID_CHECKSTATECHANGED = @as(u32, 209);
pub const DISPID_ORDERCHANGED = @as(u32, 210);
pub const DISPID_VIEWPAINTDONE = @as(u32, 211);
pub const DISPID_COLUMNSCHANGED = @as(u32, 212);
pub const DISPID_CTRLMOUSEWHEEL = @as(u32, 213);
pub const DISPID_SORTDONE = @as(u32, 214);
pub const DISPID_ICONSIZECHANGED = @as(u32, 215);
pub const DISPID_FOLDERCHANGED = @as(u32, 217);
pub const DISPID_FILTERINVOKED = @as(u32, 218);
pub const DISPID_WORDWHEELEDITED = @as(u32, 219);
pub const DISPID_SELECTEDITEMCHANGED = @as(u32, 220);
pub const DISPID_EXPLORERWINDOWREADY = @as(u32, 221);
pub const DISPID_UPDATEIMAGE = @as(u32, 222);
pub const DISPID_INITIALENUMERATIONDONE = @as(u32, 223);
pub const DISPID_ENTERPRISEIDCHANGED = @as(u32, 224);
pub const DISPID_ENTERPRESSED = @as(u32, 200);
pub const DISPID_SEARCHCOMMAND_START = @as(u32, 1);
pub const DISPID_SEARCHCOMMAND_COMPLETE = @as(u32, 2);
pub const DISPID_SEARCHCOMMAND_ABORT = @as(u32, 3);
pub const DISPID_SEARCHCOMMAND_UPDATE = @as(u32, 4);
pub const DISPID_SEARCHCOMMAND_PROGRESSTEXT = @as(u32, 5);
pub const DISPID_SEARCHCOMMAND_ERROR = @as(u32, 6);
pub const DISPID_SEARCHCOMMAND_RESTORE = @as(u32, 7);
pub const DISPID_IADCCTL_DIRTY = @as(u32, 256);
pub const DISPID_IADCCTL_PUBCAT = @as(u32, 257);
pub const DISPID_IADCCTL_SORT = @as(u32, 258);
pub const DISPID_IADCCTL_FORCEX86 = @as(u32, 259);
pub const DISPID_IADCCTL_SHOWPOSTSETUP = @as(u32, 260);
pub const DISPID_IADCCTL_ONDOMAIN = @as(u32, 261);
pub const DISPID_IADCCTL_DEFAULTCAT = @as(u32, 262);
pub const COPYENGINE_S_YES = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2555905));
pub const COPYENGINE_S_NOT_HANDLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2555907));
pub const COPYENGINE_S_USER_RETRY = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2555908));
pub const COPYENGINE_S_USER_IGNORED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2555909));
pub const COPYENGINE_S_MERGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2555910));
pub const COPYENGINE_S_DONT_PROCESS_CHILDREN = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2555912));
pub const COPYENGINE_S_ALREADY_DONE = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2555914));
pub const COPYENGINE_S_PENDING = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2555915));
pub const COPYENGINE_S_KEEP_BOTH = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2555916));
pub const COPYENGINE_S_CLOSE_PROGRAM = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2555917));
pub const COPYENGINE_S_COLLISIONRESOLVED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2555918));
pub const COPYENGINE_S_PROGRESS_PAUSE = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2555919));
pub const COPYENGINE_E_USER_CANCELLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927744));
pub const COPYENGINE_E_CANCELLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927743));
pub const COPYENGINE_E_REQUIRES_ELEVATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927742));
pub const COPYENGINE_E_SAME_FILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927741));
pub const COPYENGINE_E_DIFF_DIR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927740));
pub const COPYENGINE_E_MANY_SRC_1_DEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927739));
pub const COPYENGINE_E_DEST_SUBTREE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927735));
pub const COPYENGINE_E_DEST_SAME_TREE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927734));
pub const COPYENGINE_E_FLD_IS_FILE_DEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927733));
pub const COPYENGINE_E_FILE_IS_FLD_DEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927732));
pub const COPYENGINE_E_FILE_TOO_LARGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927731));
pub const COPYENGINE_E_REMOVABLE_FULL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927730));
pub const COPYENGINE_E_DEST_IS_RO_CD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927729));
pub const COPYENGINE_E_DEST_IS_RW_CD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927728));
pub const COPYENGINE_E_DEST_IS_R_CD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927727));
pub const COPYENGINE_E_DEST_IS_RO_DVD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927726));
pub const COPYENGINE_E_DEST_IS_RW_DVD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927725));
pub const COPYENGINE_E_DEST_IS_R_DVD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927724));
pub const COPYENGINE_E_SRC_IS_RO_CD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927723));
pub const COPYENGINE_E_SRC_IS_RW_CD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927722));
pub const COPYENGINE_E_SRC_IS_R_CD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927721));
pub const COPYENGINE_E_SRC_IS_RO_DVD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927720));
pub const COPYENGINE_E_SRC_IS_RW_DVD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927719));
pub const COPYENGINE_E_SRC_IS_R_DVD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927718));
pub const COPYENGINE_E_INVALID_FILES_SRC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927717));
pub const COPYENGINE_E_INVALID_FILES_DEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927716));
pub const COPYENGINE_E_PATH_TOO_DEEP_SRC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927715));
pub const COPYENGINE_E_PATH_TOO_DEEP_DEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927714));
pub const COPYENGINE_E_ROOT_DIR_SRC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927713));
pub const COPYENGINE_E_ROOT_DIR_DEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927712));
pub const COPYENGINE_E_ACCESS_DENIED_SRC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927711));
pub const COPYENGINE_E_ACCESS_DENIED_DEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927710));
pub const COPYENGINE_E_PATH_NOT_FOUND_SRC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927709));
pub const COPYENGINE_E_PATH_NOT_FOUND_DEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927708));
pub const COPYENGINE_E_NET_DISCONNECT_SRC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927707));
pub const COPYENGINE_E_NET_DISCONNECT_DEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927706));
pub const COPYENGINE_E_SHARING_VIOLATION_SRC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927705));
pub const COPYENGINE_E_SHARING_VIOLATION_DEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927704));
pub const COPYENGINE_E_ALREADY_EXISTS_NORMAL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927703));
pub const COPYENGINE_E_ALREADY_EXISTS_READONLY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927702));
pub const COPYENGINE_E_ALREADY_EXISTS_SYSTEM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927701));
pub const COPYENGINE_E_ALREADY_EXISTS_FOLDER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927700));
pub const COPYENGINE_E_STREAM_LOSS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927699));
pub const COPYENGINE_E_EA_LOSS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927698));
pub const COPYENGINE_E_PROPERTY_LOSS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927697));
pub const COPYENGINE_E_PROPERTIES_LOSS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927696));
pub const COPYENGINE_E_ENCRYPTION_LOSS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927695));
pub const COPYENGINE_E_DISK_FULL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927694));
pub const COPYENGINE_E_DISK_FULL_CLEAN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927693));
pub const COPYENGINE_E_EA_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927692));
pub const COPYENGINE_E_CANT_REACH_SOURCE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927691));
pub const COPYENGINE_E_RECYCLE_UNKNOWN_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927691));
pub const COPYENGINE_E_RECYCLE_FORCE_NUKE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927690));
pub const COPYENGINE_E_RECYCLE_SIZE_TOO_BIG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927689));
pub const COPYENGINE_E_RECYCLE_PATH_TOO_LONG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927688));
pub const COPYENGINE_E_RECYCLE_BIN_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927686));
pub const COPYENGINE_E_NEWFILE_NAME_TOO_LONG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927685));
pub const COPYENGINE_E_NEWFOLDER_NAME_TOO_LONG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927684));
pub const COPYENGINE_E_DIR_NOT_EMPTY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927683));
pub const COPYENGINE_E_FAT_MAX_IN_ROOT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927682));
pub const COPYENGINE_E_ACCESSDENIED_READONLY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927681));
pub const COPYENGINE_E_REDIRECTED_TO_WEBPAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927680));
pub const COPYENGINE_E_SERVER_BAD_FILE_TYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927679));
pub const COPYENGINE_E_INTERNET_ITEM_UNAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927678));
pub const COPYENGINE_E_CANNOT_MOVE_FROM_RECYCLE_BIN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927677));
pub const COPYENGINE_E_CANNOT_MOVE_SHARED_FOLDER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927676));
pub const COPYENGINE_E_INTERNET_ITEM_STORAGE_PROVIDER_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927675));
pub const COPYENGINE_E_INTERNET_ITEM_STORAGE_PROVIDER_PAUSED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927674));
pub const COPYENGINE_E_REQUIRES_EDP_CONSENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927673));
pub const COPYENGINE_E_BLOCKED_BY_EDP_POLICY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927672));
pub const COPYENGINE_E_REQUIRES_EDP_CONSENT_FOR_REMOVABLE_DRIVE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927671));
pub const COPYENGINE_E_BLOCKED_BY_EDP_FOR_REMOVABLE_DRIVE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927670));
pub const COPYENGINE_E_RMS_REQUIRES_EDP_CONSENT_FOR_REMOVABLE_DRIVE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927669));
pub const COPYENGINE_E_RMS_BLOCKED_BY_EDP_FOR_REMOVABLE_DRIVE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927668));
pub const COPYENGINE_E_WARNED_BY_DLP_POLICY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927667));
pub const COPYENGINE_E_BLOCKED_BY_DLP_POLICY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927666));
pub const COPYENGINE_E_SILENT_FAIL_BY_DLP_POLICY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927665));
pub const NETCACHE_E_NEGATIVE_CACHE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927488));
pub const EXECUTE_E_LAUNCH_APPLICATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927487));
pub const SHELL_E_WRONG_BITDEPTH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927486));
pub const LINK_E_DELETE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927485));
pub const STORE_E_NEWER_VERSION_AVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927484));
pub const E_FILE_PLACEHOLDER_NOT_INITIALIZED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927472));
pub const E_FILE_PLACEHOLDER_VERSION_MISMATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927471));
pub const E_FILE_PLACEHOLDER_SERVER_TIMED_OUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927470));
pub const E_FILE_PLACEHOLDER_STORAGEPROVIDER_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927469));
pub const CAMERAROLL_E_NO_DOWNSAMPLING_REQUIRED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927456));
pub const E_ACTIVATIONDENIED_USERCLOSE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927440));
pub const E_ACTIVATIONDENIED_SHELLERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927439));
pub const E_ACTIVATIONDENIED_SHELLRESTART = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927438));
pub const E_ACTIVATIONDENIED_UNEXPECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927437));
pub const E_ACTIVATIONDENIED_SHELLNOTREADY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927436));
pub const LIBRARY_E_NO_SAVE_LOCATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927232));
pub const LIBRARY_E_NO_ACCESSIBLE_LOCATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927231));
pub const E_USERTILE_UNSUPPORTEDFILETYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927216));
pub const E_USERTILE_CHANGEDISABLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927215));
pub const E_USERTILE_LARGEORDYNAMIC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927214));
pub const E_USERTILE_VIDEOFRAMESIZE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927213));
pub const E_USERTILE_FILESIZE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927212));
pub const IMM_ACC_DOCKING_E_INSUFFICIENTHEIGHT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927184));
pub const IMM_ACC_DOCKING_E_DOCKOCCUPIED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927183));
pub const IMSC_E_SHELL_COMPONENT_STARTUP_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927181));
pub const SHC_E_SHELL_COMPONENT_STARTUP_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927180));
pub const E_TILE_NOTIFICATIONS_PLATFORM_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927159));
pub const E_SHELL_EXTENSION_BLOCKED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144926975));
pub const E_IMAGEFEED_CHANGEDISABLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144926960));
pub const GPFIDL_DEFAULT = @as(i32, 0);
pub const GPFIDL_ALTNAME = @as(i32, 1);
pub const GPFIDL_UNCPRINTER = @as(i32, 2);
pub const ISHCUTCMDID_DOWNLOADICON = @as(i32, 0);
pub const ISHCUTCMDID_INTSHORTCUTCREATE = @as(i32, 1);
pub const ISHCUTCMDID_COMMITHISTORY = @as(i32, 2);
pub const ISHCUTCMDID_SETUSERAWURL = @as(i32, 3);
pub const SFBID_PIDLCHANGED = @as(i32, 0);
pub const DBCID_EMPTY = @as(i32, 0);
pub const DBCID_ONDRAG = @as(i32, 1);
pub const DBCID_CLSIDOFBAR = @as(i32, 2);
pub const DBCID_RESIZE = @as(i32, 3);
pub const DBCID_GETBAR = @as(i32, 4);
pub const DBCID_UPDATESIZE = @as(i32, 5);
pub const BMICON_LARGE = @as(i32, 0);
pub const BMICON_SMALL = @as(i32, 1);
pub const ASSOCF_NONE = @as(i32, 0);
pub const ASSOCF_INIT_NOREMAPCLSID = @as(i32, 1);
pub const ASSOCF_INIT_BYEXENAME = @as(i32, 2);
pub const ASSOCF_OPEN_BYEXENAME = @as(i32, 2);
pub const ASSOCF_INIT_DEFAULTTOSTAR = @as(i32, 4);
pub const ASSOCF_INIT_DEFAULTTOFOLDER = @as(i32, 8);
pub const ASSOCF_NOUSERSETTINGS = @as(i32, 16);
pub const ASSOCF_NOTRUNCATE = @as(i32, 32);
pub const ASSOCF_VERIFY = @as(i32, 64);
pub const ASSOCF_REMAPRUNDLL = @as(i32, 128);
pub const ASSOCF_NOFIXUPS = @as(i32, 256);
pub const ASSOCF_IGNOREBASECLASS = @as(i32, 512);
pub const ASSOCF_INIT_IGNOREUNKNOWN = @as(i32, 1024);
pub const ASSOCF_INIT_FIXED_PROGID = @as(i32, 2048);
pub const ASSOCF_IS_PROTOCOL = @as(i32, 4096);
pub const ASSOCF_INIT_FOR_FILE = @as(i32, 8192);
pub const ASSOCF_IS_FULL_URI = @as(i32, 16384);
pub const ASSOCF_PER_MACHINE_ONLY = @as(i32, 32768);
pub const ASSOCF_APP_TO_APP = @as(i32, 65536);
pub const CTF_INSIST = @as(i32, 1);
pub const CTF_THREAD_REF = @as(i32, 2);
pub const CTF_PROCESS_REF = @as(i32, 4);
pub const CTF_COINIT_STA = @as(i32, 8);
pub const CTF_COINIT = @as(i32, 8);
pub const CTF_FREELIBANDEXIT = @as(i32, 16);
pub const CTF_REF_COUNTED = @as(i32, 32);
pub const CTF_WAIT_ALLOWCOM = @as(i32, 64);
pub const CTF_UNUSED = @as(i32, 128);
pub const CTF_INHERITWOW64 = @as(i32, 256);
pub const CTF_WAIT_NO_REENTRANCY = @as(i32, 512);
pub const CTF_KEYBOARD_LOCALE = @as(i32, 1024);
pub const CTF_OLEINITIALIZE = @as(i32, 2048);
pub const CTF_COINIT_MTA = @as(i32, 4096);
pub const CTF_NOADDREFLIB = @as(i32, 8192);

//--------------------------------------------------------------------------------
// Section: Types (966)
//--------------------------------------------------------------------------------
pub const SHGFI_FLAGS = packed struct(i32) {
    SMALLICON: u1 = 0,
    OPENICON: u1 = 0,
    SHELLICONSIZE: u1 = 0,
    PIDL: u1 = 0,
    USEFILEATTRIBUTES: u1 = 0,
    ADDOVERLAYS: u1 = 0,
    OVERLAYINDEX: u1 = 0,
    _7: u1 = 0,
    ICON: u1 = 0,
    DISPLAYNAME: u1 = 0,
    TYPENAME: u1 = 0,
    ATTRIBUTES: u1 = 0,
    ICONLOCATION: u1 = 0,
    EXETYPE: u1 = 0,
    SYSICONINDEX: u1 = 0,
    LINKOVERLAY: u1 = 0,
    SELECTED: u1 = 0,
    ATTR_SPECIFIED: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const SHGFI_ADDOVERLAYS = SHGFI_FLAGS{ .ADDOVERLAYS = 1 };
pub const SHGFI_ATTR_SPECIFIED = SHGFI_FLAGS{ .ATTR_SPECIFIED = 1 };
pub const SHGFI_ATTRIBUTES = SHGFI_FLAGS{ .ATTRIBUTES = 1 };
pub const SHGFI_DISPLAYNAME = SHGFI_FLAGS{ .DISPLAYNAME = 1 };
pub const SHGFI_EXETYPE = SHGFI_FLAGS{ .EXETYPE = 1 };
pub const SHGFI_ICON = SHGFI_FLAGS{ .ICON = 1 };
pub const SHGFI_ICONLOCATION = SHGFI_FLAGS{ .ICONLOCATION = 1 };
pub const SHGFI_LARGEICON = SHGFI_FLAGS{ };
pub const SHGFI_LINKOVERLAY = SHGFI_FLAGS{ .LINKOVERLAY = 1 };
pub const SHGFI_OPENICON = SHGFI_FLAGS{ .OPENICON = 1 };
pub const SHGFI_OVERLAYINDEX = SHGFI_FLAGS{ .OVERLAYINDEX = 1 };
pub const SHGFI_PIDL = SHGFI_FLAGS{ .PIDL = 1 };
pub const SHGFI_SELECTED = SHGFI_FLAGS{ .SELECTED = 1 };
pub const SHGFI_SHELLICONSIZE = SHGFI_FLAGS{ .SHELLICONSIZE = 1 };
pub const SHGFI_SMALLICON = SHGFI_FLAGS{ .SMALLICON = 1 };
pub const SHGFI_SYSICONINDEX = SHGFI_FLAGS{ .SYSICONINDEX = 1 };
pub const SHGFI_TYPENAME = SHGFI_FLAGS{ .TYPENAME = 1 };
pub const SHGFI_USEFILEATTRIBUTES = SHGFI_FLAGS{ .USEFILEATTRIBUTES = 1 };

pub const SHCNE_ID = packed struct(u32) {
    RENAMEITEM: u1 = 0,
    CREATE: u1 = 0,
    DELETE: u1 = 0,
    MKDIR: u1 = 0,
    RMDIR: u1 = 0,
    MEDIAINSERTED: u1 = 0,
    MEDIAREMOVED: u1 = 0,
    DRIVEREMOVED: u1 = 0,
    DRIVEADD: u1 = 0,
    NETSHARE: u1 = 0,
    NETUNSHARE: u1 = 0,
    ATTRIBUTES: u1 = 0,
    UPDATEDIR: u1 = 0,
    UPDATEITEM: u1 = 0,
    SERVERDISCONNECT: u1 = 0,
    UPDATEIMAGE: u1 = 0,
    DRIVEADDGUI: u1 = 0,
    RENAMEFOLDER: u1 = 0,
    FREESPACE: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    EXTENDED_EVENT: u1 = 0,
    ASSOCCHANGED: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    INTERRUPT: u1 = 0,
};
pub const SHCNE_RENAMEITEM = SHCNE_ID{ .RENAMEITEM = 1 };
pub const SHCNE_CREATE = SHCNE_ID{ .CREATE = 1 };
pub const SHCNE_DELETE = SHCNE_ID{ .DELETE = 1 };
pub const SHCNE_MKDIR = SHCNE_ID{ .MKDIR = 1 };
pub const SHCNE_RMDIR = SHCNE_ID{ .RMDIR = 1 };
pub const SHCNE_MEDIAINSERTED = SHCNE_ID{ .MEDIAINSERTED = 1 };
pub const SHCNE_MEDIAREMOVED = SHCNE_ID{ .MEDIAREMOVED = 1 };
pub const SHCNE_DRIVEREMOVED = SHCNE_ID{ .DRIVEREMOVED = 1 };
pub const SHCNE_DRIVEADD = SHCNE_ID{ .DRIVEADD = 1 };
pub const SHCNE_NETSHARE = SHCNE_ID{ .NETSHARE = 1 };
pub const SHCNE_NETUNSHARE = SHCNE_ID{ .NETUNSHARE = 1 };
pub const SHCNE_ATTRIBUTES = SHCNE_ID{ .ATTRIBUTES = 1 };
pub const SHCNE_UPDATEDIR = SHCNE_ID{ .UPDATEDIR = 1 };
pub const SHCNE_UPDATEITEM = SHCNE_ID{ .UPDATEITEM = 1 };
pub const SHCNE_SERVERDISCONNECT = SHCNE_ID{ .SERVERDISCONNECT = 1 };
pub const SHCNE_UPDATEIMAGE = SHCNE_ID{ .UPDATEIMAGE = 1 };
pub const SHCNE_DRIVEADDGUI = SHCNE_ID{ .DRIVEADDGUI = 1 };
pub const SHCNE_RENAMEFOLDER = SHCNE_ID{ .RENAMEFOLDER = 1 };
pub const SHCNE_FREESPACE = SHCNE_ID{ .FREESPACE = 1 };
pub const SHCNE_EXTENDED_EVENT = SHCNE_ID{ .EXTENDED_EVENT = 1 };
pub const SHCNE_ASSOCCHANGED = SHCNE_ID{ .ASSOCCHANGED = 1 };
pub const SHCNE_DISKEVENTS = SHCNE_ID{
    .RENAMEITEM = 1,
    .CREATE = 1,
    .DELETE = 1,
    .MKDIR = 1,
    .RMDIR = 1,
    .ATTRIBUTES = 1,
    .UPDATEDIR = 1,
    .UPDATEITEM = 1,
    .RENAMEFOLDER = 1,
};
pub const SHCNE_GLOBALEVENTS = SHCNE_ID{
    .MEDIAINSERTED = 1,
    .MEDIAREMOVED = 1,
    .DRIVEREMOVED = 1,
    .DRIVEADD = 1,
    .UPDATEIMAGE = 1,
    .DRIVEADDGUI = 1,
    .FREESPACE = 1,
    .EXTENDED_EVENT = 1,
    .ASSOCCHANGED = 1,
};
pub const SHCNE_ALLEVENTS = SHCNE_ID{
    .RENAMEITEM = 1,
    .CREATE = 1,
    .DELETE = 1,
    .MKDIR = 1,
    .RMDIR = 1,
    .MEDIAINSERTED = 1,
    .MEDIAREMOVED = 1,
    .DRIVEREMOVED = 1,
    .DRIVEADD = 1,
    .NETSHARE = 1,
    .NETUNSHARE = 1,
    .ATTRIBUTES = 1,
    .UPDATEDIR = 1,
    .UPDATEITEM = 1,
    .SERVERDISCONNECT = 1,
    .UPDATEIMAGE = 1,
    .DRIVEADDGUI = 1,
    .RENAMEFOLDER = 1,
    .FREESPACE = 1,
    ._19 = 1,
    ._20 = 1,
    ._21 = 1,
    ._22 = 1,
    ._23 = 1,
    ._24 = 1,
    ._25 = 1,
    .EXTENDED_EVENT = 1,
    .ASSOCCHANGED = 1,
    ._28 = 1,
    ._29 = 1,
    ._30 = 1,
};
pub const SHCNE_INTERRUPT = SHCNE_ID{ .INTERRUPT = 1 };

pub const SHCNRF_SOURCE = packed struct(i32) {
    InterruptLevel: u1 = 0,
    ShellLevel: u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    RecursiveInterrupt: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    NewDelivery: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const SHCNRF_InterruptLevel = SHCNRF_SOURCE{ .InterruptLevel = 1 };
pub const SHCNRF_ShellLevel = SHCNRF_SOURCE{ .ShellLevel = 1 };
pub const SHCNRF_RecursiveInterrupt = SHCNRF_SOURCE{ .RecursiveInterrupt = 1 };
pub const SHCNRF_NewDelivery = SHCNRF_SOURCE{ .NewDelivery = 1 };

pub const SHCNF_FLAGS = packed struct(u32) {
    PATHA: u1 = 0,
    PRINTERA: u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    FLUSH: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    NOTIFYRECURSIVE: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const SHCNF_IDLIST = SHCNF_FLAGS{ };
pub const SHCNF_PATHA = SHCNF_FLAGS{ .PATHA = 1 };
pub const SHCNF_PRINTERA = SHCNF_FLAGS{ .PRINTERA = 1 };
pub const SHCNF_DWORD = SHCNF_FLAGS{
    .PATHA = 1,
    .PRINTERA = 1,
};
pub const SHCNF_PATHW = SHCNF_FLAGS{
    .PATHA = 1,
    ._2 = 1,
};
pub const SHCNF_PRINTERW = SHCNF_FLAGS{
    .PRINTERA = 1,
    ._2 = 1,
};
pub const SHCNF_TYPE = SHCNF_FLAGS{
    .PATHA = 1,
    .PRINTERA = 1,
    ._2 = 1,
    ._3 = 1,
    ._4 = 1,
    ._5 = 1,
    ._6 = 1,
    ._7 = 1,
};
pub const SHCNF_FLUSH = SHCNF_FLAGS{ .FLUSH = 1 };
pub const SHCNF_FLUSHNOWAIT = SHCNF_FLAGS{
    .FLUSH = 1,
    ._13 = 1,
};
pub const SHCNF_NOTIFYRECURSIVE = SHCNF_FLAGS{ .NOTIFYRECURSIVE = 1 };
pub const SHCNF_PATH = SHCNF_FLAGS{
    .PATHA = 1,
    ._2 = 1,
};
pub const SHCNF_PRINTER = SHCNF_FLAGS{
    .PRINTERA = 1,
    ._2 = 1,
};

pub const QITIPF_FLAGS = packed struct(i32) {
    TIPF_USENAME: u1 = 0,
    TIPF_LINKNOTARGET: u1 = 0,
    TIPF_LINKUSETARGET: u1 = 0,
    TIPF_USESLOWTIP: u1 = 0,
    TIPF_SINGLELINE: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
    // F_CACHED (bit index 0) conflicts with TIPF_USENAME
    // F_DONTEXPANDFOLDER (bit index 1) conflicts with TIPF_LINKNOTARGET
};
pub const QITIPF_DEFAULT = QITIPF_FLAGS{ };
pub const QITIPF_USENAME = QITIPF_FLAGS{ .TIPF_USENAME = 1 };
pub const QITIPF_LINKNOTARGET = QITIPF_FLAGS{ .TIPF_LINKNOTARGET = 1 };
pub const QITIPF_LINKUSETARGET = QITIPF_FLAGS{ .TIPF_LINKUSETARGET = 1 };
pub const QITIPF_USESLOWTIP = QITIPF_FLAGS{ .TIPF_USESLOWTIP = 1 };
pub const QITIPF_SINGLELINE = QITIPF_FLAGS{ .TIPF_SINGLELINE = 1 };
pub const QIF_CACHED = QITIPF_FLAGS{ .TIPF_USENAME = 1 };
pub const QIF_DONTEXPANDFOLDER = QITIPF_FLAGS{ .TIPF_LINKNOTARGET = 1 };

pub const SHDID_ID = enum(i32) {
    ROOT_REGITEM = 1,
    FS_FILE = 2,
    FS_DIRECTORY = 3,
    FS_OTHER = 4,
    COMPUTER_DRIVE35 = 5,
    COMPUTER_DRIVE525 = 6,
    COMPUTER_REMOVABLE = 7,
    COMPUTER_FIXED = 8,
    COMPUTER_NETDRIVE = 9,
    COMPUTER_CDROM = 10,
    COMPUTER_RAMDISK = 11,
    COMPUTER_OTHER = 12,
    NET_DOMAIN = 13,
    NET_SERVER = 14,
    NET_SHARE = 15,
    NET_RESTOFNET = 16,
    NET_OTHER = 17,
    COMPUTER_IMAGING = 18,
    COMPUTER_AUDIO = 19,
    COMPUTER_SHAREDDOCS = 20,
    MOBILE_DEVICE = 21,
    REMOTE_DESKTOP_DRIVE = 22,
};
pub const SHDID_ROOT_REGITEM = SHDID_ID.ROOT_REGITEM;
pub const SHDID_FS_FILE = SHDID_ID.FS_FILE;
pub const SHDID_FS_DIRECTORY = SHDID_ID.FS_DIRECTORY;
pub const SHDID_FS_OTHER = SHDID_ID.FS_OTHER;
pub const SHDID_COMPUTER_DRIVE35 = SHDID_ID.COMPUTER_DRIVE35;
pub const SHDID_COMPUTER_DRIVE525 = SHDID_ID.COMPUTER_DRIVE525;
pub const SHDID_COMPUTER_REMOVABLE = SHDID_ID.COMPUTER_REMOVABLE;
pub const SHDID_COMPUTER_FIXED = SHDID_ID.COMPUTER_FIXED;
pub const SHDID_COMPUTER_NETDRIVE = SHDID_ID.COMPUTER_NETDRIVE;
pub const SHDID_COMPUTER_CDROM = SHDID_ID.COMPUTER_CDROM;
pub const SHDID_COMPUTER_RAMDISK = SHDID_ID.COMPUTER_RAMDISK;
pub const SHDID_COMPUTER_OTHER = SHDID_ID.COMPUTER_OTHER;
pub const SHDID_NET_DOMAIN = SHDID_ID.NET_DOMAIN;
pub const SHDID_NET_SERVER = SHDID_ID.NET_SERVER;
pub const SHDID_NET_SHARE = SHDID_ID.NET_SHARE;
pub const SHDID_NET_RESTOFNET = SHDID_ID.NET_RESTOFNET;
pub const SHDID_NET_OTHER = SHDID_ID.NET_OTHER;
pub const SHDID_COMPUTER_IMAGING = SHDID_ID.COMPUTER_IMAGING;
pub const SHDID_COMPUTER_AUDIO = SHDID_ID.COMPUTER_AUDIO;
pub const SHDID_COMPUTER_SHAREDDOCS = SHDID_ID.COMPUTER_SHAREDDOCS;
pub const SHDID_MOBILE_DEVICE = SHDID_ID.MOBILE_DEVICE;
pub const SHDID_REMOTE_DESKTOP_DRIVE = SHDID_ID.REMOTE_DESKTOP_DRIVE;

pub const SHGDFIL_FORMAT = enum(i32) {
    FINDDATA = 1,
    NETRESOURCE = 2,
    DESCRIPTIONID = 3,
};
pub const SHGDFIL_FINDDATA = SHGDFIL_FORMAT.FINDDATA;
pub const SHGDFIL_NETRESOURCE = SHGDFIL_FORMAT.NETRESOURCE;
pub const SHGDFIL_DESCRIPTIONID = SHGDFIL_FORMAT.DESCRIPTIONID;

pub const PRF_FLAGS = packed struct(i32) {
    VERIFYEXISTS: u1 = 0,
    _1: u1 = 0,
    FIRSTDIRDEF: u1 = 0,
    DONTFINDLNK: u1 = 0,
    REQUIREABSOLUTE: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const PRF_VERIFYEXISTS = PRF_FLAGS{ .VERIFYEXISTS = 1 };
pub const PRF_TRYPROGRAMEXTENSIONS = PRF_FLAGS{
    .VERIFYEXISTS = 1,
    ._1 = 1,
};
pub const PRF_FIRSTDIRDEF = PRF_FLAGS{ .FIRSTDIRDEF = 1 };
pub const PRF_DONTFINDLNK = PRF_FLAGS{ .DONTFINDLNK = 1 };
pub const PRF_REQUIREABSOLUTE = PRF_FLAGS{ .REQUIREABSOLUTE = 1 };

pub const PCS_RET = packed struct(u32) {
    REPLACEDCHAR: u1 = 0,
    REMOVEDCHAR: u1 = 0,
    TRUNCATED: u1 = 0,
    PATHTOOLONG: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    FATAL: u1 = 0,
};
pub const PCS_FATAL = PCS_RET{ .FATAL = 1 };
pub const PCS_REPLACEDCHAR = PCS_RET{ .REPLACEDCHAR = 1 };
pub const PCS_REMOVEDCHAR = PCS_RET{ .REMOVEDCHAR = 1 };
pub const PCS_TRUNCATED = PCS_RET{ .TRUNCATED = 1 };
pub const PCS_PATHTOOLONG = PCS_RET{ .PATHTOOLONG = 1 };

pub const MM_FLAGS = packed struct(u32) {
    ADDSEPARATOR: u1 = 0,
    SUBMENUSHAVEIDS: u1 = 0,
    DONTREMOVESEPS: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const MM_ADDSEPARATOR = MM_FLAGS{ .ADDSEPARATOR = 1 };
pub const MM_SUBMENUSHAVEIDS = MM_FLAGS{ .SUBMENUSHAVEIDS = 1 };
pub const MM_DONTREMOVESEPS = MM_FLAGS{ .DONTREMOVESEPS = 1 };

pub const SHOP_TYPE = packed struct(i32) {
    PRINTERNAME: u1 = 0,
    FILEPATH: u1 = 0,
    VOLUMEGUID: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const SHOP_PRINTERNAME = SHOP_TYPE{ .PRINTERNAME = 1 };
pub const SHOP_FILEPATH = SHOP_TYPE{ .FILEPATH = 1 };
pub const SHOP_VOLUMEGUID = SHOP_TYPE{ .VOLUMEGUID = 1 };

pub const SHFMT_ID = enum(u32) {
    T = 65535,
};
pub const SHFMT_ID_DEFAULT = SHFMT_ID.T;

pub const SHFMT_OPT = packed struct(i32) {
    FULL: u1 = 0,
    SYSONLY: u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const SHFMT_OPT_NONE = SHFMT_OPT{ };
pub const SHFMT_OPT_FULL = SHFMT_OPT{ .FULL = 1 };
pub const SHFMT_OPT_SYSONLY = SHFMT_OPT{ .SYSONLY = 1 };

pub const SHFMT_RET = enum(u32) {
    ERROR = 4294967295,
    CANCEL = 4294967294,
    NOFORMAT = 4294967293,
};
pub const SHFMT_ERROR = SHFMT_RET.ERROR;
pub const SHFMT_CANCEL = SHFMT_RET.CANCEL;
pub const SHFMT_NOFORMAT = SHFMT_RET.NOFORMAT;

pub const VALIDATEUNC_OPTION = packed struct(i32) {
    CONNECT: u1 = 0,
    NOUI: u1 = 0,
    PRINT: u1 = 0,
    PERSIST: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const VALIDATEUNC_CONNECT = VALIDATEUNC_OPTION{ .CONNECT = 1 };
pub const VALIDATEUNC_NOUI = VALIDATEUNC_OPTION{ .NOUI = 1 };
pub const VALIDATEUNC_PRINT = VALIDATEUNC_OPTION{ .PRINT = 1 };
pub const VALIDATEUNC_PERSIST = VALIDATEUNC_OPTION{ .PERSIST = 1 };
pub const VALIDATEUNC_VALID = VALIDATEUNC_OPTION{
    .CONNECT = 1,
    .NOUI = 1,
    .PRINT = 1,
    .PERSIST = 1,
};

pub const SFVM_MESSAGE_ID = enum(i32) {
    MERGEMENU = 1,
    INVOKECOMMAND = 2,
    GETHELPTEXT = 3,
    GETTOOLTIPTEXT = 4,
    GETBUTTONINFO = 5,
    GETBUTTONS = 6,
    INITMENUPOPUP = 7,
    FSNOTIFY = 14,
    WINDOWCREATED = 15,
    GETDETAILSOF = 23,
    COLUMNCLICK = 24,
    QUERYFSNOTIFY = 25,
    DEFITEMCOUNT = 26,
    DEFVIEWMODE = 27,
    UNMERGEMENU = 28,
    UPDATESTATUSBAR = 31,
    BACKGROUNDENUM = 32,
    DIDDRAGDROP = 36,
    SETISFV = 39,
    THISIDLIST = 41,
    ADDPROPERTYPAGES = 47,
    BACKGROUNDENUMDONE = 48,
    GETNOTIFY = 49,
    GETSORTDEFAULTS = 53,
    SIZE = 57,
    GETZONE = 58,
    GETPANE = 59,
    GETHELPTOPIC = 63,
    GETANIMATION = 68,
};
pub const SFVM_MERGEMENU = SFVM_MESSAGE_ID.MERGEMENU;
pub const SFVM_INVOKECOMMAND = SFVM_MESSAGE_ID.INVOKECOMMAND;
pub const SFVM_GETHELPTEXT = SFVM_MESSAGE_ID.GETHELPTEXT;
pub const SFVM_GETTOOLTIPTEXT = SFVM_MESSAGE_ID.GETTOOLTIPTEXT;
pub const SFVM_GETBUTTONINFO = SFVM_MESSAGE_ID.GETBUTTONINFO;
pub const SFVM_GETBUTTONS = SFVM_MESSAGE_ID.GETBUTTONS;
pub const SFVM_INITMENUPOPUP = SFVM_MESSAGE_ID.INITMENUPOPUP;
pub const SFVM_FSNOTIFY = SFVM_MESSAGE_ID.FSNOTIFY;
pub const SFVM_WINDOWCREATED = SFVM_MESSAGE_ID.WINDOWCREATED;
pub const SFVM_GETDETAILSOF = SFVM_MESSAGE_ID.GETDETAILSOF;
pub const SFVM_COLUMNCLICK = SFVM_MESSAGE_ID.COLUMNCLICK;
pub const SFVM_QUERYFSNOTIFY = SFVM_MESSAGE_ID.QUERYFSNOTIFY;
pub const SFVM_DEFITEMCOUNT = SFVM_MESSAGE_ID.DEFITEMCOUNT;
pub const SFVM_DEFVIEWMODE = SFVM_MESSAGE_ID.DEFVIEWMODE;
pub const SFVM_UNMERGEMENU = SFVM_MESSAGE_ID.UNMERGEMENU;
pub const SFVM_UPDATESTATUSBAR = SFVM_MESSAGE_ID.UPDATESTATUSBAR;
pub const SFVM_BACKGROUNDENUM = SFVM_MESSAGE_ID.BACKGROUNDENUM;
pub const SFVM_DIDDRAGDROP = SFVM_MESSAGE_ID.DIDDRAGDROP;
pub const SFVM_SETISFV = SFVM_MESSAGE_ID.SETISFV;
pub const SFVM_THISIDLIST = SFVM_MESSAGE_ID.THISIDLIST;
pub const SFVM_ADDPROPERTYPAGES = SFVM_MESSAGE_ID.ADDPROPERTYPAGES;
pub const SFVM_BACKGROUNDENUMDONE = SFVM_MESSAGE_ID.BACKGROUNDENUMDONE;
pub const SFVM_GETNOTIFY = SFVM_MESSAGE_ID.GETNOTIFY;
pub const SFVM_GETSORTDEFAULTS = SFVM_MESSAGE_ID.GETSORTDEFAULTS;
pub const SFVM_SIZE = SFVM_MESSAGE_ID.SIZE;
pub const SFVM_GETZONE = SFVM_MESSAGE_ID.GETZONE;
pub const SFVM_GETPANE = SFVM_MESSAGE_ID.GETPANE;
pub const SFVM_GETHELPTOPIC = SFVM_MESSAGE_ID.GETHELPTOPIC;
pub const SFVM_GETANIMATION = SFVM_MESSAGE_ID.GETANIMATION;

pub const SFVS_SELECT = enum(i32) {
    NONE = 0,
    ALLITEMS = 1,
    INVERT = 2,
};
pub const SFVS_SELECT_NONE = SFVS_SELECT.NONE;
pub const SFVS_SELECT_ALLITEMS = SFVS_SELECT.ALLITEMS;
pub const SFVS_SELECT_INVERT = SFVS_SELECT.INVERT;

pub const DFM_MESSAGE_ID = enum(i32) {
    MERGECONTEXTMENU = 1,
    INVOKECOMMAND = 2,
    GETHELPTEXT = 5,
    WM_MEASUREITEM = 6,
    WM_DRAWITEM = 7,
    WM_INITMENUPOPUP = 8,
    VALIDATECMD = 9,
    MERGECONTEXTMENU_TOP = 10,
    GETHELPTEXTW = 11,
    INVOKECOMMANDEX = 12,
    MAPCOMMANDNAME = 13,
    GETDEFSTATICID = 14,
    GETVERBW = 15,
    GETVERBA = 16,
    MERGECONTEXTMENU_BOTTOM = 17,
    MODIFYQCMFLAGS = 18,
};
pub const DFM_MERGECONTEXTMENU = DFM_MESSAGE_ID.MERGECONTEXTMENU;
pub const DFM_INVOKECOMMAND = DFM_MESSAGE_ID.INVOKECOMMAND;
pub const DFM_GETHELPTEXT = DFM_MESSAGE_ID.GETHELPTEXT;
pub const DFM_WM_MEASUREITEM = DFM_MESSAGE_ID.WM_MEASUREITEM;
pub const DFM_WM_DRAWITEM = DFM_MESSAGE_ID.WM_DRAWITEM;
pub const DFM_WM_INITMENUPOPUP = DFM_MESSAGE_ID.WM_INITMENUPOPUP;
pub const DFM_VALIDATECMD = DFM_MESSAGE_ID.VALIDATECMD;
pub const DFM_MERGECONTEXTMENU_TOP = DFM_MESSAGE_ID.MERGECONTEXTMENU_TOP;
pub const DFM_GETHELPTEXTW = DFM_MESSAGE_ID.GETHELPTEXTW;
pub const DFM_INVOKECOMMANDEX = DFM_MESSAGE_ID.INVOKECOMMANDEX;
pub const DFM_MAPCOMMANDNAME = DFM_MESSAGE_ID.MAPCOMMANDNAME;
pub const DFM_GETDEFSTATICID = DFM_MESSAGE_ID.GETDEFSTATICID;
pub const DFM_GETVERBW = DFM_MESSAGE_ID.GETVERBW;
pub const DFM_GETVERBA = DFM_MESSAGE_ID.GETVERBA;
pub const DFM_MERGECONTEXTMENU_BOTTOM = DFM_MESSAGE_ID.MERGECONTEXTMENU_BOTTOM;
pub const DFM_MODIFYQCMFLAGS = DFM_MESSAGE_ID.MODIFYQCMFLAGS;

pub const DFM_CMD = enum(i32) {
    DELETE = -1,
    MOVE = -2,
    COPY = -3,
    LINK = -4,
    PROPERTIES = -5,
    NEWFOLDER = -6,
    PASTE = -7,
    VIEWLIST = -8,
    VIEWDETAILS = -9,
    PASTELINK = -10,
    PASTESPECIAL = -11,
    MODALPROP = -12,
    RENAME = -13,
};
pub const DFM_CMD_DELETE = DFM_CMD.DELETE;
pub const DFM_CMD_MOVE = DFM_CMD.MOVE;
pub const DFM_CMD_COPY = DFM_CMD.COPY;
pub const DFM_CMD_LINK = DFM_CMD.LINK;
pub const DFM_CMD_PROPERTIES = DFM_CMD.PROPERTIES;
pub const DFM_CMD_NEWFOLDER = DFM_CMD.NEWFOLDER;
pub const DFM_CMD_PASTE = DFM_CMD.PASTE;
pub const DFM_CMD_VIEWLIST = DFM_CMD.VIEWLIST;
pub const DFM_CMD_VIEWDETAILS = DFM_CMD.VIEWDETAILS;
pub const DFM_CMD_PASTELINK = DFM_CMD.PASTELINK;
pub const DFM_CMD_PASTESPECIAL = DFM_CMD.PASTESPECIAL;
pub const DFM_CMD_MODALPROP = DFM_CMD.MODALPROP;
pub const DFM_CMD_RENAME = DFM_CMD.RENAME;

pub const PID_IS = enum(i32) {
    URL = 2,
    NAME = 4,
    WORKINGDIR = 5,
    HOTKEY = 6,
    SHOWCMD = 7,
    ICONINDEX = 8,
    ICONFILE = 9,
    WHATSNEW = 10,
    AUTHOR = 11,
    DESCRIPTION = 12,
    COMMENT = 13,
    ROAMED = 15,
};
pub const PID_IS_URL = PID_IS.URL;
pub const PID_IS_NAME = PID_IS.NAME;
pub const PID_IS_WORKINGDIR = PID_IS.WORKINGDIR;
pub const PID_IS_HOTKEY = PID_IS.HOTKEY;
pub const PID_IS_SHOWCMD = PID_IS.SHOWCMD;
pub const PID_IS_ICONINDEX = PID_IS.ICONINDEX;
pub const PID_IS_ICONFILE = PID_IS.ICONFILE;
pub const PID_IS_WHATSNEW = PID_IS.WHATSNEW;
pub const PID_IS_AUTHOR = PID_IS.AUTHOR;
pub const PID_IS_DESCRIPTION = PID_IS.DESCRIPTION;
pub const PID_IS_COMMENT = PID_IS.COMMENT;
pub const PID_IS_ROAMED = PID_IS.ROAMED;

pub const PID_INTSITE = enum(i32) {
    WHATSNEW = 2,
    AUTHOR = 3,
    LASTVISIT = 4,
    LASTMOD = 5,
    VISITCOUNT = 6,
    DESCRIPTION = 7,
    COMMENT = 8,
    FLAGS = 9,
    CONTENTLEN = 10,
    CONTENTCODE = 11,
    RECURSE = 12,
    WATCH = 13,
    SUBSCRIPTION = 14,
    URL = 15,
    TITLE = 16,
    CODEPAGE = 18,
    TRACKING = 19,
    ICONINDEX = 20,
    ICONFILE = 21,
    ROAMED = 34,
};
pub const PID_INTSITE_WHATSNEW = PID_INTSITE.WHATSNEW;
pub const PID_INTSITE_AUTHOR = PID_INTSITE.AUTHOR;
pub const PID_INTSITE_LASTVISIT = PID_INTSITE.LASTVISIT;
pub const PID_INTSITE_LASTMOD = PID_INTSITE.LASTMOD;
pub const PID_INTSITE_VISITCOUNT = PID_INTSITE.VISITCOUNT;
pub const PID_INTSITE_DESCRIPTION = PID_INTSITE.DESCRIPTION;
pub const PID_INTSITE_COMMENT = PID_INTSITE.COMMENT;
pub const PID_INTSITE_FLAGS = PID_INTSITE.FLAGS;
pub const PID_INTSITE_CONTENTLEN = PID_INTSITE.CONTENTLEN;
pub const PID_INTSITE_CONTENTCODE = PID_INTSITE.CONTENTCODE;
pub const PID_INTSITE_RECURSE = PID_INTSITE.RECURSE;
pub const PID_INTSITE_WATCH = PID_INTSITE.WATCH;
pub const PID_INTSITE_SUBSCRIPTION = PID_INTSITE.SUBSCRIPTION;
pub const PID_INTSITE_URL = PID_INTSITE.URL;
pub const PID_INTSITE_TITLE = PID_INTSITE.TITLE;
pub const PID_INTSITE_CODEPAGE = PID_INTSITE.CODEPAGE;
pub const PID_INTSITE_TRACKING = PID_INTSITE.TRACKING;
pub const PID_INTSITE_ICONINDEX = PID_INTSITE.ICONINDEX;
pub const PID_INTSITE_ICONFILE = PID_INTSITE.ICONFILE;
pub const PID_INTSITE_ROAMED = PID_INTSITE.ROAMED;

pub const PIDISF_FLAGS = packed struct(i32) {
    RECENTLYCHANGED: u1 = 0,
    CACHEDSTICKY: u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    CACHEIMAGES: u1 = 0,
    FOLLOWALLLINKS: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const PIDISF_RECENTLYCHANGED = PIDISF_FLAGS{ .RECENTLYCHANGED = 1 };
pub const PIDISF_CACHEDSTICKY = PIDISF_FLAGS{ .CACHEDSTICKY = 1 };
pub const PIDISF_CACHEIMAGES = PIDISF_FLAGS{ .CACHEIMAGES = 1 };
pub const PIDISF_FOLLOWALLLINKS = PIDISF_FLAGS{ .FOLLOWALLLINKS = 1 };

pub const PIDISM_OPTIONS = enum(i32) {
    GLOBAL = 0,
    WATCH = 1,
    DONTWATCH = 2,
};
pub const PIDISM_GLOBAL = PIDISM_OPTIONS.GLOBAL;
pub const PIDISM_WATCH = PIDISM_OPTIONS.WATCH;
pub const PIDISM_DONTWATCH = PIDISM_OPTIONS.DONTWATCH;

pub const PIDISR_INFO = enum(i32) {
    UP_TO_DATE = 0,
    NEEDS_ADD = 1,
    NEEDS_UPDATE = 2,
    NEEDS_DELETE = 3,
};
pub const PIDISR_UP_TO_DATE = PIDISR_INFO.UP_TO_DATE;
pub const PIDISR_NEEDS_ADD = PIDISR_INFO.NEEDS_ADD;
pub const PIDISR_NEEDS_UPDATE = PIDISR_INFO.NEEDS_UPDATE;
pub const PIDISR_NEEDS_DELETE = PIDISR_INFO.NEEDS_DELETE;

pub const SSF_MASK = packed struct(u32) {
    SHOWALLOBJECTS: u1 = 0,
    SHOWEXTENSIONS: u1 = 0,
    HIDDENFILEEXTS: u1 = 0,
    SHOWCOMPCOLOR: u1 = 0,
    SORTCOLUMNS: u1 = 0,
    SHOWSYSFILES: u1 = 0,
    _6: u1 = 0,
    DOUBLECLICKINWEBVIEW: u1 = 0,
    SHOWATTRIBCOL: u1 = 0,
    DESKTOPHTML: u1 = 0,
    WIN95CLASSIC: u1 = 0,
    DONTPRETTYPATH: u1 = 0,
    MAPNETDRVBUTTON: u1 = 0,
    SHOWINFOTIP: u1 = 0,
    HIDEICONS: u1 = 0,
    NOCONFIRMRECYCLE: u1 = 0,
    FILTER: u1 = 0,
    WEBVIEW: u1 = 0,
    SHOWSUPERHIDDEN: u1 = 0,
    SEPPROCESS: u1 = 0,
    NONETCRAWLING: u1 = 0,
    STARTPANELON: u1 = 0,
    SHOWSTARTPAGE: u1 = 0,
    AUTOCHECKSELECT: u1 = 0,
    ICONSONLY: u1 = 0,
    SHOWTYPEOVERLAY: u1 = 0,
    SHOWSTATUSBAR: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
    // SERVERADMINUI (bit index 2) conflicts with HIDDENFILEEXTS
};
pub const SSF_SHOWALLOBJECTS = SSF_MASK{ .SHOWALLOBJECTS = 1 };
pub const SSF_SHOWEXTENSIONS = SSF_MASK{ .SHOWEXTENSIONS = 1 };
pub const SSF_HIDDENFILEEXTS = SSF_MASK{ .HIDDENFILEEXTS = 1 };
pub const SSF_SERVERADMINUI = SSF_MASK{ .HIDDENFILEEXTS = 1 };
pub const SSF_SHOWCOMPCOLOR = SSF_MASK{ .SHOWCOMPCOLOR = 1 };
pub const SSF_SORTCOLUMNS = SSF_MASK{ .SORTCOLUMNS = 1 };
pub const SSF_SHOWSYSFILES = SSF_MASK{ .SHOWSYSFILES = 1 };
pub const SSF_DOUBLECLICKINWEBVIEW = SSF_MASK{ .DOUBLECLICKINWEBVIEW = 1 };
pub const SSF_SHOWATTRIBCOL = SSF_MASK{ .SHOWATTRIBCOL = 1 };
pub const SSF_DESKTOPHTML = SSF_MASK{ .DESKTOPHTML = 1 };
pub const SSF_WIN95CLASSIC = SSF_MASK{ .WIN95CLASSIC = 1 };
pub const SSF_DONTPRETTYPATH = SSF_MASK{ .DONTPRETTYPATH = 1 };
pub const SSF_SHOWINFOTIP = SSF_MASK{ .SHOWINFOTIP = 1 };
pub const SSF_MAPNETDRVBUTTON = SSF_MASK{ .MAPNETDRVBUTTON = 1 };
pub const SSF_NOCONFIRMRECYCLE = SSF_MASK{ .NOCONFIRMRECYCLE = 1 };
pub const SSF_HIDEICONS = SSF_MASK{ .HIDEICONS = 1 };
pub const SSF_FILTER = SSF_MASK{ .FILTER = 1 };
pub const SSF_WEBVIEW = SSF_MASK{ .WEBVIEW = 1 };
pub const SSF_SHOWSUPERHIDDEN = SSF_MASK{ .SHOWSUPERHIDDEN = 1 };
pub const SSF_SEPPROCESS = SSF_MASK{ .SEPPROCESS = 1 };
pub const SSF_NONETCRAWLING = SSF_MASK{ .NONETCRAWLING = 1 };
pub const SSF_STARTPANELON = SSF_MASK{ .STARTPANELON = 1 };
pub const SSF_SHOWSTARTPAGE = SSF_MASK{ .SHOWSTARTPAGE = 1 };
pub const SSF_AUTOCHECKSELECT = SSF_MASK{ .AUTOCHECKSELECT = 1 };
pub const SSF_ICONSONLY = SSF_MASK{ .ICONSONLY = 1 };
pub const SSF_SHOWTYPEOVERLAY = SSF_MASK{ .SHOWTYPEOVERLAY = 1 };
pub const SSF_SHOWSTATUSBAR = SSF_MASK{ .SHOWSTATUSBAR = 1 };

pub const NOTIFY_ICON_MESSAGE = enum(u32) {
    ADD = 0,
    MODIFY = 1,
    DELETE = 2,
    SETFOCUS = 3,
    SETVERSION = 4,
};
pub const NIM_ADD = NOTIFY_ICON_MESSAGE.ADD;
pub const NIM_MODIFY = NOTIFY_ICON_MESSAGE.MODIFY;
pub const NIM_DELETE = NOTIFY_ICON_MESSAGE.DELETE;
pub const NIM_SETFOCUS = NOTIFY_ICON_MESSAGE.SETFOCUS;
pub const NIM_SETVERSION = NOTIFY_ICON_MESSAGE.SETVERSION;

pub const NOTIFY_ICON_DATA_FLAGS = packed struct(u32) {
    MESSAGE: u1 = 0,
    ICON: u1 = 0,
    TIP: u1 = 0,
    STATE: u1 = 0,
    INFO: u1 = 0,
    GUID: u1 = 0,
    REALTIME: u1 = 0,
    SHOWTIP: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const NIF_MESSAGE = NOTIFY_ICON_DATA_FLAGS{ .MESSAGE = 1 };
pub const NIF_ICON = NOTIFY_ICON_DATA_FLAGS{ .ICON = 1 };
pub const NIF_TIP = NOTIFY_ICON_DATA_FLAGS{ .TIP = 1 };
pub const NIF_STATE = NOTIFY_ICON_DATA_FLAGS{ .STATE = 1 };
pub const NIF_INFO = NOTIFY_ICON_DATA_FLAGS{ .INFO = 1 };
pub const NIF_GUID = NOTIFY_ICON_DATA_FLAGS{ .GUID = 1 };
pub const NIF_REALTIME = NOTIFY_ICON_DATA_FLAGS{ .REALTIME = 1 };
pub const NIF_SHOWTIP = NOTIFY_ICON_DATA_FLAGS{ .SHOWTIP = 1 };

pub const OS = enum(u32) {
    WINDOWS = 0,
    NT = 1,
    WIN95ORGREATER = 2,
    NT4ORGREATER = 3,
    WIN98ORGREATER = 5,
    WIN98_GOLD = 6,
    WIN2000ORGREATER = 7,
    WIN2000PRO = 8,
    WIN2000SERVER = 9,
    WIN2000ADVSERVER = 10,
    WIN2000DATACENTER = 11,
    WIN2000TERMINAL = 12,
    EMBEDDED = 13,
    TERMINALCLIENT = 14,
    TERMINALREMOTEADMIN = 15,
    WIN95_GOLD = 16,
    MEORGREATER = 17,
    XPORGREATER = 18,
    HOME = 19,
    PROFESSIONAL = 20,
    DATACENTER = 21,
    ADVSERVER = 22,
    SERVER = 23,
    TERMINALSERVER = 24,
    PERSONALTERMINALSERVER = 25,
    FASTUSERSWITCHING = 26,
    WELCOMELOGONUI = 27,
    DOMAINMEMBER = 28,
    ANYSERVER = 29,
    WOW6432 = 30,
    WEBSERVER = 31,
    SMALLBUSINESSSERVER = 32,
    TABLETPC = 33,
    SERVERADMINUI = 34,
    MEDIACENTER = 35,
    APPLIANCE = 36,
};
pub const OS_WINDOWS = OS.WINDOWS;
pub const OS_NT = OS.NT;
pub const OS_WIN95ORGREATER = OS.WIN95ORGREATER;
pub const OS_NT4ORGREATER = OS.NT4ORGREATER;
pub const OS_WIN98ORGREATER = OS.WIN98ORGREATER;
pub const OS_WIN98_GOLD = OS.WIN98_GOLD;
pub const OS_WIN2000ORGREATER = OS.WIN2000ORGREATER;
pub const OS_WIN2000PRO = OS.WIN2000PRO;
pub const OS_WIN2000SERVER = OS.WIN2000SERVER;
pub const OS_WIN2000ADVSERVER = OS.WIN2000ADVSERVER;
pub const OS_WIN2000DATACENTER = OS.WIN2000DATACENTER;
pub const OS_WIN2000TERMINAL = OS.WIN2000TERMINAL;
pub const OS_EMBEDDED = OS.EMBEDDED;
pub const OS_TERMINALCLIENT = OS.TERMINALCLIENT;
pub const OS_TERMINALREMOTEADMIN = OS.TERMINALREMOTEADMIN;
pub const OS_WIN95_GOLD = OS.WIN95_GOLD;
pub const OS_MEORGREATER = OS.MEORGREATER;
pub const OS_XPORGREATER = OS.XPORGREATER;
pub const OS_HOME = OS.HOME;
pub const OS_PROFESSIONAL = OS.PROFESSIONAL;
pub const OS_DATACENTER = OS.DATACENTER;
pub const OS_ADVSERVER = OS.ADVSERVER;
pub const OS_SERVER = OS.SERVER;
pub const OS_TERMINALSERVER = OS.TERMINALSERVER;
pub const OS_PERSONALTERMINALSERVER = OS.PERSONALTERMINALSERVER;
pub const OS_FASTUSERSWITCHING = OS.FASTUSERSWITCHING;
pub const OS_WELCOMELOGONUI = OS.WELCOMELOGONUI;
pub const OS_DOMAINMEMBER = OS.DOMAINMEMBER;
pub const OS_ANYSERVER = OS.ANYSERVER;
pub const OS_WOW6432 = OS.WOW6432;
pub const OS_WEBSERVER = OS.WEBSERVER;
pub const OS_SMALLBUSINESSSERVER = OS.SMALLBUSINESSSERVER;
pub const OS_TABLETPC = OS.TABLETPC;
pub const OS_SERVERADMINUI = OS.SERVERADMINUI;
pub const OS_MEDIACENTER = OS.MEDIACENTER;
pub const OS_APPLIANCE = OS.APPLIANCE;

pub const _APPSTATE_REGISTRATION = extern struct {
    placeholder: usize, // TODO: why is this type empty?
};

pub const _APPCONSTRAIN_REGISTRATION = extern struct {
    placeholder: usize, // TODO: why is this type empty?
};

// TODO: this type has a FreeFunc 'SHChangeNotification_Unlock', what can Zig do with this information?
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const ShFindChangeNotificationHandle = isize;

// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HDROP = *opaque{};

// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HPSXA = *opaque{};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INotifyReplica_Value = Guid.initString("99180163-da16-101a-935c-444553540000");
pub const IID_INotifyReplica = &IID_INotifyReplica_Value;
pub const INotifyReplica = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        YouAreAReplica: *const fn(
            self: *const INotifyReplica,
            ulcOtherReplicas: u32,
            rgpmkOtherReplicas: [*]?*IMoniker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn YouAreAReplica(self: *const INotifyReplica, ulcOtherReplicas: u32, rgpmkOtherReplicas: [*]?*IMoniker) callconv(.Inline) HRESULT {
        return self.vtable.YouAreAReplica(self, ulcOtherReplicas, rgpmkOtherReplicas);
    }
};

pub const APPCATEGORYINFO = extern struct {
    Locale: u32,
    pszDescription: ?PWSTR,
    AppCategoryId: Guid,
};

pub const APPCATEGORYINFOLIST = extern struct {
    cCategory: u32,
    pCategoryInfo: ?*APPCATEGORYINFO,
};

pub const SUBCLASSPROC = *const fn(
    hWnd: ?HWND,
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    uIdSubclass: usize,
    dwRefData: usize,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const HELPINFO = extern struct {
    cbSize: u32,
    iContextType: i32,
    iCtrlId: i32,
    hItemHandle: ?HANDLE,
    dwContextId: usize,
    MousePos: POINT,
};

pub const MULTIKEYHELPA = extern struct {
    mkSize: u32,
    mkKeylist: CHAR,
    szKeyphrase: [1]CHAR,
};

pub const MULTIKEYHELPW = extern struct {
    mkSize: u32,
    mkKeylist: u16,
    szKeyphrase: [1]u16,
};

pub const HELPWININFOA = extern struct {
    wStructSize: i32,
    x: i32,
    y: i32,
    dx: i32,
    dy: i32,
    wMax: i32,
    rgchMember: [2]CHAR,
};

pub const HELPWININFOW = extern struct {
    wStructSize: i32,
    x: i32,
    y: i32,
    dx: i32,
    dy: i32,
    wMax: i32,
    rgchMember: [2]u16,
};

const CLSID_QueryCancelAutoPlay_Value = Guid.initString("331f1768-05a9-4ddd-b86e-dae34ddc998a");
pub const CLSID_QueryCancelAutoPlay = &CLSID_QueryCancelAutoPlay_Value;

const CLSID_TimeCategorizer_Value = Guid.initString("3bb4118f-ddfd-4d30-a348-9fb5d6bf1afe");
pub const CLSID_TimeCategorizer = &CLSID_TimeCategorizer_Value;

const CLSID_AlphabeticalCategorizer_Value = Guid.initString("3c2654c6-7372-4f6b-b310-55d6128f49d2");
pub const CLSID_AlphabeticalCategorizer = &CLSID_AlphabeticalCategorizer_Value;

const CLSID_MergedCategorizer_Value = Guid.initString("8e827c11-33e7-4bc1-b242-8cd9a1c2b304");
pub const CLSID_MergedCategorizer = &CLSID_MergedCategorizer_Value;

const CLSID_ImageProperties_Value = Guid.initString("7ab770c7-0e23-4d7a-8aa2-19bfad479829");
pub const CLSID_ImageProperties = &CLSID_ImageProperties_Value;

const CLSID_CDBurn_Value = Guid.initString("fbeb8a05-beee-4442-804e-409d6c4515e9");
pub const CLSID_CDBurn = &CLSID_CDBurn_Value;

const CLSID_StartMenuPin_Value = Guid.initString("a2a9545d-a0c2-42b4-9708-a0b2badd77c8");
pub const CLSID_StartMenuPin = &CLSID_StartMenuPin_Value;

const CLSID_WebWizardHost_Value = Guid.initString("c827f149-55c1-4d28-935e-57e47caed973");
pub const CLSID_WebWizardHost = &CLSID_WebWizardHost_Value;

const CLSID_PublishDropTarget_Value = Guid.initString("cc6eeffb-43f6-46c5-9619-51d571967f7d");
pub const CLSID_PublishDropTarget = &CLSID_PublishDropTarget_Value;

const CLSID_PublishingWizard_Value = Guid.initString("6b33163c-76a5-4b6c-bf21-45de9cd503a1");
pub const CLSID_PublishingWizard = &CLSID_PublishingWizard_Value;

const CLSID_InternetPrintOrdering_Value = Guid.initString("add36aa8-751a-4579-a266-d66f5202ccbb");
pub const CLSID_InternetPrintOrdering = &CLSID_InternetPrintOrdering_Value;

const CLSID_FolderViewHost_Value = Guid.initString("20b1cb23-6968-4eb9-b7d4-a66d00d07cee");
pub const CLSID_FolderViewHost = &CLSID_FolderViewHost_Value;

const CLSID_ExplorerBrowser_Value = Guid.initString("71f96385-ddd6-48d3-a0c1-ae06e8b055fb");
pub const CLSID_ExplorerBrowser = &CLSID_ExplorerBrowser_Value;

const CLSID_ImageRecompress_Value = Guid.initString("6e33091c-d2f8-4740-b55e-2e11d1477a2c");
pub const CLSID_ImageRecompress = &CLSID_ImageRecompress_Value;

const CLSID_TrayBandSiteService_Value = Guid.initString("f60ad0a0-e5e1-45cb-b51a-e15b9f8b2934");
pub const CLSID_TrayBandSiteService = &CLSID_TrayBandSiteService_Value;

const CLSID_TrayDeskBand_Value = Guid.initString("e6442437-6c68-4f52-94dd-2cfed267efb9");
pub const CLSID_TrayDeskBand = &CLSID_TrayDeskBand_Value;

const CLSID_AttachmentServices_Value = Guid.initString("4125dd96-e03a-4103-8f70-e0597d803b9c");
pub const CLSID_AttachmentServices = &CLSID_AttachmentServices_Value;

const CLSID_DocPropShellExtension_Value = Guid.initString("883373c3-bf89-11d1-be35-080036b11a03");
pub const CLSID_DocPropShellExtension = &CLSID_DocPropShellExtension_Value;

const CLSID_FSCopyHandler_Value = Guid.initString("d197380a-0a79-4dc8-a033-ed882c2fa14b");
pub const CLSID_FSCopyHandler = &CLSID_FSCopyHandler_Value;

const CLSID_PreviousVersions_Value = Guid.initString("596ab062-b4d2-4215-9f74-e9109b0a8153");
pub const CLSID_PreviousVersions = &CLSID_PreviousVersions_Value;

const CLSID_NamespaceTreeControl_Value = Guid.initString("ae054212-3535-4430-83ed-d501aa6680e6");
pub const CLSID_NamespaceTreeControl = &CLSID_NamespaceTreeControl_Value;

const CLSID_IENamespaceTreeControl_Value = Guid.initString("ace52d03-e5cd-4b20-82ff-e71b11beae1d");
pub const CLSID_IENamespaceTreeControl = &CLSID_IENamespaceTreeControl_Value;

const CLSID_ApplicationAssociationRegistrationUI_Value = Guid.initString("1968106d-f3b5-44cf-890e-116fcb9ecef1");
pub const CLSID_ApplicationAssociationRegistrationUI = &CLSID_ApplicationAssociationRegistrationUI_Value;

const CLSID_DesktopGadget_Value = Guid.initString("924ccc1b-6562-4c85-8657-d177925222b6");
pub const CLSID_DesktopGadget = &CLSID_DesktopGadget_Value;

const CLSID_AccessibilityDockingService_Value = Guid.initString("29ce1d46-b481-4aa0-a08a-d3ebc8aca402");
pub const CLSID_AccessibilityDockingService = &CLSID_AccessibilityDockingService_Value;

const CLSID_ExecuteFolder_Value = Guid.initString("11dbb47c-a525-400b-9e80-a54615a090c0");
pub const CLSID_ExecuteFolder = &CLSID_ExecuteFolder_Value;

const CLSID_VirtualDesktopManager_Value = Guid.initString("aa509086-5ca9-4c25-8f95-589d3c07b48a");
pub const CLSID_VirtualDesktopManager = &CLSID_VirtualDesktopManager_Value;

const CLSID_StorageProviderBanners_Value = Guid.initString("7ccdf9f4-e576-455a-8bc7-f6ec68d6f063");
pub const CLSID_StorageProviderBanners = &CLSID_StorageProviderBanners_Value;

const CLSID_DesktopWallpaper_Value = Guid.initString("c2cf3110-460e-4fc1-b9d0-8a1c0c9cc4bd");
pub const CLSID_DesktopWallpaper = &CLSID_DesktopWallpaper_Value;

const CLSID_ShellDesktop_Value = Guid.initString("00021400-0000-0000-c000-000000000046");
pub const CLSID_ShellDesktop = &CLSID_ShellDesktop_Value;

const CLSID_ShellFSFolder_Value = Guid.initString("f3364ba0-65b9-11ce-a9ba-00aa004ae837");
pub const CLSID_ShellFSFolder = &CLSID_ShellFSFolder_Value;

const CLSID_NetworkPlaces_Value = Guid.initString("208d2c60-3aea-1069-a2d7-08002b30309d");
pub const CLSID_NetworkPlaces = &CLSID_NetworkPlaces_Value;

const CLSID_ShellLink_Value = Guid.initString("00021401-0000-0000-c000-000000000046");
pub const CLSID_ShellLink = &CLSID_ShellLink_Value;

const CLSID_DriveSizeCategorizer_Value = Guid.initString("94357b53-ca29-4b78-83ae-e8fe7409134f");
pub const CLSID_DriveSizeCategorizer = &CLSID_DriveSizeCategorizer_Value;

const CLSID_DriveTypeCategorizer_Value = Guid.initString("b0a8f3cf-4333-4bab-8873-1ccb1cada48b");
pub const CLSID_DriveTypeCategorizer = &CLSID_DriveTypeCategorizer_Value;

const CLSID_FreeSpaceCategorizer_Value = Guid.initString("b5607793-24ac-44c7-82e2-831726aa6cb7");
pub const CLSID_FreeSpaceCategorizer = &CLSID_FreeSpaceCategorizer_Value;

const CLSID_SizeCategorizer_Value = Guid.initString("55d7b852-f6d1-42f2-aa75-8728a1b2d264");
pub const CLSID_SizeCategorizer = &CLSID_SizeCategorizer_Value;

const CLSID_PropertiesUI_Value = Guid.initString("d912f8cf-0396-4915-884e-fb425d32943b");
pub const CLSID_PropertiesUI = &CLSID_PropertiesUI_Value;

const CLSID_UserNotification_Value = Guid.initString("0010890e-8789-413c-adbc-48f5b511b3af");
pub const CLSID_UserNotification = &CLSID_UserNotification_Value;

const CLSID_TaskbarList_Value = Guid.initString("56fdf344-fd6d-11d0-958a-006097c9a090");
pub const CLSID_TaskbarList = &CLSID_TaskbarList_Value;

const CLSID_ShellItem_Value = Guid.initString("9ac9fbe1-e0a2-4ad6-b4ee-e212013ea917");
pub const CLSID_ShellItem = &CLSID_ShellItem_Value;

const CLSID_NamespaceWalker_Value = Guid.initString("72eb61e0-8672-4303-9175-f2e4c68b2e7c");
pub const CLSID_NamespaceWalker = &CLSID_NamespaceWalker_Value;

const CLSID_FileOperation_Value = Guid.initString("3ad05575-8857-4850-9277-11b85bdb8e09");
pub const CLSID_FileOperation = &CLSID_FileOperation_Value;

const CLSID_FileOpenDialog_Value = Guid.initString("dc1c5a9c-e88a-4dde-a5a1-60f82a20aef7");
pub const CLSID_FileOpenDialog = &CLSID_FileOpenDialog_Value;

const CLSID_FileSaveDialog_Value = Guid.initString("c0b4e2f3-ba21-4773-8dba-335ec946eb8b");
pub const CLSID_FileSaveDialog = &CLSID_FileSaveDialog_Value;

const CLSID_KnownFolderManager_Value = Guid.initString("4df0c730-df9d-4ae3-9153-aa6b82e9795a");
pub const CLSID_KnownFolderManager = &CLSID_KnownFolderManager_Value;

const CLSID_SharingConfigurationManager_Value = Guid.initString("49f371e1-8c5c-4d9c-9a3b-54a6827f513c");
pub const CLSID_SharingConfigurationManager = &CLSID_SharingConfigurationManager_Value;

const CLSID_NetworkConnections_Value = Guid.initString("7007acc7-3202-11d1-aad2-00805fc1270e");
pub const CLSID_NetworkConnections = &CLSID_NetworkConnections_Value;

const CLSID_ScheduledTasks_Value = Guid.initString("d6277990-4c6a-11cf-8d87-00aa0060f5bf");
pub const CLSID_ScheduledTasks = &CLSID_ScheduledTasks_Value;

const CLSID_ApplicationAssociationRegistration_Value = Guid.initString("591209c7-767b-42b2-9fba-44ee4615f2c7");
pub const CLSID_ApplicationAssociationRegistration = &CLSID_ApplicationAssociationRegistration_Value;

const CLSID_SearchFolderItemFactory_Value = Guid.initString("14010e02-bbbd-41f0-88e3-eda371216584");
pub const CLSID_SearchFolderItemFactory = &CLSID_SearchFolderItemFactory_Value;

const CLSID_OpenControlPanel_Value = Guid.initString("06622d85-6856-4460-8de1-a81921b41c4b");
pub const CLSID_OpenControlPanel = &CLSID_OpenControlPanel_Value;

const CLSID_MailRecipient_Value = Guid.initString("9e56be60-c50f-11cf-9a2c-00a0c90a90ce");
pub const CLSID_MailRecipient = &CLSID_MailRecipient_Value;

const CLSID_NetworkExplorerFolder_Value = Guid.initString("f02c1a0d-be21-4350-88b0-7367fc96ef3c");
pub const CLSID_NetworkExplorerFolder = &CLSID_NetworkExplorerFolder_Value;

const CLSID_DestinationList_Value = Guid.initString("77f10cf0-3db5-4966-b520-b7c54fd35ed6");
pub const CLSID_DestinationList = &CLSID_DestinationList_Value;

const CLSID_ApplicationDestinations_Value = Guid.initString("86c14003-4d6b-4ef3-a7b4-0506663b2e68");
pub const CLSID_ApplicationDestinations = &CLSID_ApplicationDestinations_Value;

const CLSID_ApplicationDocumentLists_Value = Guid.initString("86bec222-30f2-47e0-9f25-60d11cd75c28");
pub const CLSID_ApplicationDocumentLists = &CLSID_ApplicationDocumentLists_Value;

const CLSID_HomeGroup_Value = Guid.initString("de77ba04-3c92-4d11-a1a5-42352a53e0e3");
pub const CLSID_HomeGroup = &CLSID_HomeGroup_Value;

const CLSID_ShellLibrary_Value = Guid.initString("d9b3211d-e57f-4426-aaef-30a806add397");
pub const CLSID_ShellLibrary = &CLSID_ShellLibrary_Value;

const CLSID_AppStartupLink_Value = Guid.initString("273eb5e7-88b0-4843-bfef-e2c81d43aae5");
pub const CLSID_AppStartupLink = &CLSID_AppStartupLink_Value;

const CLSID_EnumerableObjectCollection_Value = Guid.initString("2d3468c1-36a7-43b6-ac24-d3f02fd9607a");
pub const CLSID_EnumerableObjectCollection = &CLSID_EnumerableObjectCollection_Value;

const CLSID_FrameworkInputPane_Value = Guid.initString("d5120aa3-46ba-44c5-822d-ca8092c1fc72");
pub const CLSID_FrameworkInputPane = &CLSID_FrameworkInputPane_Value;

const CLSID_DefFolderMenu_Value = Guid.initString("c63382be-7933-48d0-9ac8-85fb46be2fdd");
pub const CLSID_DefFolderMenu = &CLSID_DefFolderMenu_Value;

const CLSID_AppVisibility_Value = Guid.initString("7e5fe3d9-985f-4908-91f9-ee19f9fd1514");
pub const CLSID_AppVisibility = &CLSID_AppVisibility_Value;

const CLSID_AppShellVerbHandler_Value = Guid.initString("4ed3a719-cea8-4bd9-910d-e252f997afc2");
pub const CLSID_AppShellVerbHandler = &CLSID_AppShellVerbHandler_Value;

const CLSID_ExecuteUnknown_Value = Guid.initString("e44e9428-bdbc-4987-a099-40dc8fd255e7");
pub const CLSID_ExecuteUnknown = &CLSID_ExecuteUnknown_Value;

const CLSID_PackageDebugSettings_Value = Guid.initString("b1aec16f-2383-4852-b0e9-8f0b1dc66b4d");
pub const CLSID_PackageDebugSettings = &CLSID_PackageDebugSettings_Value;

const CLSID_SuspensionDependencyManager_Value = Guid.initString("6b273fc5-61fd-4918-95a2-c3b5e9d7f581");
pub const CLSID_SuspensionDependencyManager = &CLSID_SuspensionDependencyManager_Value;

const CLSID_ApplicationActivationManager_Value = Guid.initString("45ba127d-10a8-46ea-8ab7-56ea9078943c");
pub const CLSID_ApplicationActivationManager = &CLSID_ApplicationActivationManager_Value;

const CLSID_ApplicationDesignModeSettings_Value = Guid.initString("958a6fb5-dcb2-4faf-aafd-7fb054ad1a3b");
pub const CLSID_ApplicationDesignModeSettings = &CLSID_ApplicationDesignModeSettings_Value;

pub const CMINVOKECOMMANDINFO = extern struct {
    cbSize: u32,
    fMask: u32,
    hwnd: ?HWND,
    lpVerb: ?[*:0]const u8,
    lpParameters: ?[*:0]const u8,
    lpDirectory: ?[*:0]const u8,
    nShow: i32,
    dwHotKey: u32,
    hIcon: ?HANDLE,
};

pub const CMINVOKECOMMANDINFOEX = extern struct {
    cbSize: u32,
    fMask: u32,
    hwnd: ?HWND,
    lpVerb: ?[*:0]const u8,
    lpParameters: ?[*:0]const u8,
    lpDirectory: ?[*:0]const u8,
    nShow: i32,
    dwHotKey: u32,
    hIcon: ?HANDLE,
    lpTitle: ?[*:0]const u8,
    lpVerbW: ?[*:0]const u16,
    lpParametersW: ?[*:0]const u16,
    lpDirectoryW: ?[*:0]const u16,
    lpTitleW: ?[*:0]const u16,
    ptInvoke: POINT,
};

pub const CMINVOKECOMMANDINFOEX_REMOTE = extern struct {
    cbSize: u32,
    fMask: u32,
    hwnd: ?HWND,
    lpVerbString: ?[*:0]const u8,
    lpParameters: ?[*:0]const u8,
    lpDirectory: ?[*:0]const u8,
    nShow: i32,
    dwHotKey: u32,
    lpTitle: ?[*:0]const u8,
    lpVerbWString: ?[*:0]const u16,
    lpParametersW: ?[*:0]const u16,
    lpDirectoryW: ?[*:0]const u16,
    lpTitleW: ?[*:0]const u16,
    ptInvoke: POINT,
    lpVerbInt: u32,
    lpVerbWInt: u32,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IContextMenu_Value = Guid.initString("000214e4-0000-0000-c000-000000000046");
pub const IID_IContextMenu = &IID_IContextMenu_Value;
pub const IContextMenu = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryContextMenu: *const fn(
            self: *const IContextMenu,
            hmenu: ?HMENU,
            indexMenu: u32,
            idCmdFirst: u32,
            idCmdLast: u32,
            uFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeCommand: *const fn(
            self: *const IContextMenu,
            pici: ?*CMINVOKECOMMANDINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCommandString: *const fn(
            self: *const IContextMenu,
            idCmd: usize,
            uType: u32,
            pReserved: ?*u32,
            pszName: ?PSTR,
            cchMax: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn QueryContextMenu(self: *const IContextMenu, hmenu: ?HMENU, indexMenu: u32, idCmdFirst: u32, idCmdLast: u32, uFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.QueryContextMenu(self, hmenu, indexMenu, idCmdFirst, idCmdLast, uFlags);
    }
    pub fn InvokeCommand(self: *const IContextMenu, pici: ?*CMINVOKECOMMANDINFO) callconv(.Inline) HRESULT {
        return self.vtable.InvokeCommand(self, pici);
    }
    pub fn GetCommandString(self: *const IContextMenu, idCmd: usize, uType: u32, pReserved: ?*u32, pszName: ?PSTR, cchMax: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCommandString(self, idCmd, uType, pReserved, pszName, cchMax);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IContextMenu2_Value = Guid.initString("000214f4-0000-0000-c000-000000000046");
pub const IID_IContextMenu2 = &IID_IContextMenu2_Value;
pub const IContextMenu2 = extern union {
    pub const VTable = extern struct {
        base: IContextMenu.VTable,
        HandleMenuMsg: *const fn(
            self: *const IContextMenu2,
            uMsg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IContextMenu: IContextMenu,
    IUnknown: IUnknown,
    pub fn HandleMenuMsg(self: *const IContextMenu2, uMsg: u32, wParam: WPARAM, lParam: LPARAM) callconv(.Inline) HRESULT {
        return self.vtable.HandleMenuMsg(self, uMsg, wParam, lParam);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IContextMenu3_Value = Guid.initString("bcfce0a0-ec17-11d0-8d10-00a0c90f2719");
pub const IID_IContextMenu3 = &IID_IContextMenu3_Value;
pub const IContextMenu3 = extern union {
    pub const VTable = extern struct {
        base: IContextMenu2.VTable,
        HandleMenuMsg2: *const fn(
            self: *const IContextMenu3,
            uMsg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
            plResult: ?*LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IContextMenu2: IContextMenu2,
    IContextMenu: IContextMenu,
    IUnknown: IUnknown,
    pub fn HandleMenuMsg2(self: *const IContextMenu3, uMsg: u32, wParam: WPARAM, lParam: LPARAM, plResult: ?*LRESULT) callconv(.Inline) HRESULT {
        return self.vtable.HandleMenuMsg2(self, uMsg, wParam, lParam, plResult);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IExecuteCommand_Value = Guid.initString("7f9185b0-cb92-43c5-80a9-92277a4f7b54");
pub const IID_IExecuteCommand = &IID_IExecuteCommand_Value;
pub const IExecuteCommand = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetKeyState: *const fn(
            self: *const IExecuteCommand,
            grfKeyState: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetParameters: *const fn(
            self: *const IExecuteCommand,
            pszParameters: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPosition: *const fn(
            self: *const IExecuteCommand,
            pt: POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetShowWindow: *const fn(
            self: *const IExecuteCommand,
            nShow: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNoShowUI: *const fn(
            self: *const IExecuteCommand,
            fNoShowUI: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDirectory: *const fn(
            self: *const IExecuteCommand,
            pszDirectory: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Execute: *const fn(
            self: *const IExecuteCommand,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetKeyState(self: *const IExecuteCommand, grfKeyState: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetKeyState(self, grfKeyState);
    }
    pub fn SetParameters(self: *const IExecuteCommand, pszParameters: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetParameters(self, pszParameters);
    }
    pub fn SetPosition(self: *const IExecuteCommand, pt: POINT) callconv(.Inline) HRESULT {
        return self.vtable.SetPosition(self, pt);
    }
    pub fn SetShowWindow(self: *const IExecuteCommand, nShow: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetShowWindow(self, nShow);
    }
    pub fn SetNoShowUI(self: *const IExecuteCommand, fNoShowUI: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetNoShowUI(self, fNoShowUI);
    }
    pub fn SetDirectory(self: *const IExecuteCommand, pszDirectory: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetDirectory(self, pszDirectory);
    }
    pub fn Execute(self: *const IExecuteCommand) callconv(.Inline) HRESULT {
        return self.vtable.Execute(self);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IPersistFolder_Value = Guid.initString("000214ea-0000-0000-c000-000000000046");
pub const IID_IPersistFolder = &IID_IPersistFolder_Value;
pub const IPersistFolder = extern union {
    pub const VTable = extern struct {
        base: IPersist.VTable,
        Initialize: *const fn(
            self: *const IPersistFolder,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IPersist: IPersist,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IPersistFolder, pidl: ?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, pidl);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IRunnableTask_Value = Guid.initString("85788d00-6807-11d0-b810-00c04fd706ec");
pub const IID_IRunnableTask = &IID_IRunnableTask_Value;
pub const IRunnableTask = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Run: *const fn(
            self: *const IRunnableTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Kill: *const fn(
            self: *const IRunnableTask,
            bWait: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Suspend: *const fn(
            self: *const IRunnableTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: *const fn(
            self: *const IRunnableTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsRunning: *const fn(
            self: *const IRunnableTask,
        ) callconv(@import("std").os.windows.WINAPI) u32,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Run(self: *const IRunnableTask) callconv(.Inline) HRESULT {
        return self.vtable.Run(self);
    }
    pub fn Kill(self: *const IRunnableTask, bWait: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.Kill(self, bWait);
    }
    pub fn Suspend(self: *const IRunnableTask) callconv(.Inline) HRESULT {
        return self.vtable.Suspend(self);
    }
    pub fn Resume(self: *const IRunnableTask) callconv(.Inline) HRESULT {
        return self.vtable.Resume(self);
    }
    pub fn IsRunning(self: *const IRunnableTask) callconv(.Inline) u32 {
        return self.vtable.IsRunning(self);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellTaskScheduler_Value = Guid.initString("6ccb7be0-6807-11d0-b810-00c04fd706ec");
pub const IID_IShellTaskScheduler = &IID_IShellTaskScheduler_Value;
pub const IShellTaskScheduler = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddTask: *const fn(
            self: *const IShellTaskScheduler,
            prt: ?*IRunnableTask,
            rtoid: ?*const Guid,
            lParam: usize,
            dwPriority: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveTasks: *const fn(
            self: *const IShellTaskScheduler,
            rtoid: ?*const Guid,
            lParam: usize,
            bWaitIfRunning: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CountTasks: *const fn(
            self: *const IShellTaskScheduler,
            rtoid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        Status: *const fn(
            self: *const IShellTaskScheduler,
            dwReleaseStatus: u32,
            dwThreadTimeout: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn AddTask(self: *const IShellTaskScheduler, prt: ?*IRunnableTask, rtoid: ?*const Guid, lParam: usize, dwPriority: u32) callconv(.Inline) HRESULT {
        return self.vtable.AddTask(self, prt, rtoid, lParam, dwPriority);
    }
    pub fn RemoveTasks(self: *const IShellTaskScheduler, rtoid: ?*const Guid, lParam: usize, bWaitIfRunning: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.RemoveTasks(self, rtoid, lParam, bWaitIfRunning);
    }
    pub fn CountTasks(self: *const IShellTaskScheduler, rtoid: ?*const Guid) callconv(.Inline) u32 {
        return self.vtable.CountTasks(self, rtoid);
    }
    pub fn Status(self: *const IShellTaskScheduler, dwReleaseStatus: u32, dwThreadTimeout: u32) callconv(.Inline) HRESULT {
        return self.vtable.Status(self, dwReleaseStatus, dwThreadTimeout);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IPersistFolder2_Value = Guid.initString("1ac3d9f0-175c-11d1-95be-00609797ea4f");
pub const IID_IPersistFolder2 = &IID_IPersistFolder2_Value;
pub const IPersistFolder2 = extern union {
    pub const VTable = extern struct {
        base: IPersistFolder.VTable,
        GetCurFolder: *const fn(
            self: *const IPersistFolder2,
            ppidl: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IPersistFolder: IPersistFolder,
    IPersist: IPersist,
    IUnknown: IUnknown,
    pub fn GetCurFolder(self: *const IPersistFolder2, ppidl: ?*?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.GetCurFolder(self, ppidl);
    }
};

pub const PERSIST_FOLDER_TARGET_INFO = extern struct {
    pidlTargetFolder: ?*ITEMIDLIST,
    szTargetParsingName: [260]u16,
    szNetworkProvider: [260]u16,
    dwAttributes: u32,
    csidl: i32,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IPersistFolder3_Value = Guid.initString("cef04fdf-fe72-11d2-87a5-00c04f6837cf");
pub const IID_IPersistFolder3 = &IID_IPersistFolder3_Value;
pub const IPersistFolder3 = extern union {
    pub const VTable = extern struct {
        base: IPersistFolder2.VTable,
        InitializeEx: *const fn(
            self: *const IPersistFolder3,
            pbc: ?*IBindCtx,
            pidlRoot: ?*ITEMIDLIST,
            ppfti: ?*const PERSIST_FOLDER_TARGET_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderTargetInfo: *const fn(
            self: *const IPersistFolder3,
            ppfti: ?*PERSIST_FOLDER_TARGET_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IPersistFolder2: IPersistFolder2,
    IPersistFolder: IPersistFolder,
    IPersist: IPersist,
    IUnknown: IUnknown,
    pub fn InitializeEx(self: *const IPersistFolder3, pbc: ?*IBindCtx, pidlRoot: ?*ITEMIDLIST, ppfti: ?*const PERSIST_FOLDER_TARGET_INFO) callconv(.Inline) HRESULT {
        return self.vtable.InitializeEx(self, pbc, pidlRoot, ppfti);
    }
    pub fn GetFolderTargetInfo(self: *const IPersistFolder3, ppfti: ?*PERSIST_FOLDER_TARGET_INFO) callconv(.Inline) HRESULT {
        return self.vtable.GetFolderTargetInfo(self, ppfti);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IPersistIDList_Value = Guid.initString("1079acfc-29bd-11d3-8e0d-00c04f6837d5");
pub const IID_IPersistIDList = &IID_IPersistIDList_Value;
pub const IPersistIDList = extern union {
    pub const VTable = extern struct {
        base: IPersist.VTable,
        SetIDList: *const fn(
            self: *const IPersistIDList,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIDList: *const fn(
            self: *const IPersistIDList,
            ppidl: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IPersist: IPersist,
    IUnknown: IUnknown,
    pub fn SetIDList(self: *const IPersistIDList, pidl: ?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.SetIDList(self, pidl);
    }
    pub fn GetIDList(self: *const IPersistIDList, ppidl: ?*?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.GetIDList(self, ppidl);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IEnumIDList_Value = Guid.initString("000214f2-0000-0000-c000-000000000046");
pub const IID_IEnumIDList = &IID_IEnumIDList_Value;
pub const IEnumIDList = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumIDList,
            celt: u32,
            rgelt: [*]?*ITEMIDLIST,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumIDList,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumIDList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumIDList,
            ppenum: ?*?*IEnumIDList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumIDList, celt: u32, rgelt: [*]?*ITEMIDLIST, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, celt, rgelt, pceltFetched);
    }
    pub fn Skip(self: *const IEnumIDList, celt: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumIDList) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumIDList, ppenum: ?*?*IEnumIDList) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppenum);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumFullIDList_Value = Guid.initString("d0191542-7954-4908-bc06-b2360bbe45ba");
pub const IID_IEnumFullIDList = &IID_IEnumFullIDList_Value;
pub const IEnumFullIDList = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumFullIDList,
            celt: u32,
            rgelt: [*]?*ITEMIDLIST,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumFullIDList,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumFullIDList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumFullIDList,
            ppenum: ?*?*IEnumFullIDList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumFullIDList, celt: u32, rgelt: [*]?*ITEMIDLIST, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, celt, rgelt, pceltFetched);
    }
    pub fn Skip(self: *const IEnumFullIDList, celt: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumFullIDList) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumFullIDList, ppenum: ?*?*IEnumFullIDList) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppenum);
    }
};

pub const SHGDNF = enum(u32) {
    NORMAL = 0,
    INFOLDER = 1,
    FOREDITING = 4096,
    FORADDRESSBAR = 16384,
    FORPARSING = 32768,
};
pub const SHGDN_NORMAL = SHGDNF.NORMAL;
pub const SHGDN_INFOLDER = SHGDNF.INFOLDER;
pub const SHGDN_FOREDITING = SHGDNF.FOREDITING;
pub const SHGDN_FORADDRESSBAR = SHGDNF.FORADDRESSBAR;
pub const SHGDN_FORPARSING = SHGDNF.FORPARSING;

pub const _SHCONTF = enum(i32) {
    CHECKING_FOR_CHILDREN = 16,
    FOLDERS = 32,
    NONFOLDERS = 64,
    INCLUDEHIDDEN = 128,
    INIT_ON_FIRST_NEXT = 256,
    NETPRINTERSRCH = 512,
    SHAREABLE = 1024,
    STORAGE = 2048,
    NAVIGATION_ENUM = 4096,
    FASTITEMS = 8192,
    FLATLIST = 16384,
    ENABLE_ASYNC = 32768,
    INCLUDESUPERHIDDEN = 65536,
};
pub const SHCONTF_CHECKING_FOR_CHILDREN = _SHCONTF.CHECKING_FOR_CHILDREN;
pub const SHCONTF_FOLDERS = _SHCONTF.FOLDERS;
pub const SHCONTF_NONFOLDERS = _SHCONTF.NONFOLDERS;
pub const SHCONTF_INCLUDEHIDDEN = _SHCONTF.INCLUDEHIDDEN;
pub const SHCONTF_INIT_ON_FIRST_NEXT = _SHCONTF.INIT_ON_FIRST_NEXT;
pub const SHCONTF_NETPRINTERSRCH = _SHCONTF.NETPRINTERSRCH;
pub const SHCONTF_SHAREABLE = _SHCONTF.SHAREABLE;
pub const SHCONTF_STORAGE = _SHCONTF.STORAGE;
pub const SHCONTF_NAVIGATION_ENUM = _SHCONTF.NAVIGATION_ENUM;
pub const SHCONTF_FASTITEMS = _SHCONTF.FASTITEMS;
pub const SHCONTF_FLATLIST = _SHCONTF.FLATLIST;
pub const SHCONTF_ENABLE_ASYNC = _SHCONTF.ENABLE_ASYNC;
pub const SHCONTF_INCLUDESUPERHIDDEN = _SHCONTF.INCLUDESUPERHIDDEN;

pub const STORAGE_PROVIDER_FILE_FLAGS = enum(i32) {
    NONE = 0,
    DOWNLOAD_BY_DEFAULT = 1,
    CREATED_ON_THIS_DEVICE = 2,
};
pub const SPFF_NONE = STORAGE_PROVIDER_FILE_FLAGS.NONE;
pub const SPFF_DOWNLOAD_BY_DEFAULT = STORAGE_PROVIDER_FILE_FLAGS.DOWNLOAD_BY_DEFAULT;
pub const SPFF_CREATED_ON_THIS_DEVICE = STORAGE_PROVIDER_FILE_FLAGS.CREATED_ON_THIS_DEVICE;

pub const MERGE_UPDATE_STATUS = enum(i32) {
    COMPLETE = 0,
    USERINPUTNEEDED = 1,
    FAILED = 2,
};
pub const MUS_COMPLETE = MERGE_UPDATE_STATUS.COMPLETE;
pub const MUS_USERINPUTNEEDED = MERGE_UPDATE_STATUS.USERINPUTNEEDED;
pub const MUS_FAILED = MERGE_UPDATE_STATUS.FAILED;

// TODO: this type is limited to platform 'windows8.1'
const IID_IFileSyncMergeHandler_Value = Guid.initString("d97b5aac-c792-433c-975d-35c4eadc7a9d");
pub const IID_IFileSyncMergeHandler = &IID_IFileSyncMergeHandler_Value;
pub const IFileSyncMergeHandler = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Merge: *const fn(
            self: *const IFileSyncMergeHandler,
            localFilePath: ?[*:0]const u16,
            serverFilePath: ?[*:0]const u16,
            updateStatus: ?*MERGE_UPDATE_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowResolveConflictUIAsync: *const fn(
            self: *const IFileSyncMergeHandler,
            localFilePath: ?[*:0]const u16,
            monitorToDisplayOn: ?HMONITOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Merge(self: *const IFileSyncMergeHandler, localFilePath: ?[*:0]const u16, serverFilePath: ?[*:0]const u16, updateStatus: ?*MERGE_UPDATE_STATUS) callconv(.Inline) HRESULT {
        return self.vtable.Merge(self, localFilePath, serverFilePath, updateStatus);
    }
    pub fn ShowResolveConflictUIAsync(self: *const IFileSyncMergeHandler, localFilePath: ?[*:0]const u16, monitorToDisplayOn: ?HMONITOR) callconv(.Inline) HRESULT {
        return self.vtable.ShowResolveConflictUIAsync(self, localFilePath, monitorToDisplayOn);
    }
};

pub const FOLDER_ENUM_MODE = enum(i32) {
    VIEWRESULT = 0,
    NAVIGATION = 1,
};
pub const FEM_VIEWRESULT = FOLDER_ENUM_MODE.VIEWRESULT;
pub const FEM_NAVIGATION = FOLDER_ENUM_MODE.NAVIGATION;

// TODO: this type is limited to platform 'windows6.1'
const IID_IObjectWithFolderEnumMode_Value = Guid.initString("6a9d9026-0e6e-464c-b000-42ecc07de673");
pub const IID_IObjectWithFolderEnumMode = &IID_IObjectWithFolderEnumMode_Value;
pub const IObjectWithFolderEnumMode = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetMode: *const fn(
            self: *const IObjectWithFolderEnumMode,
            feMode: FOLDER_ENUM_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMode: *const fn(
            self: *const IObjectWithFolderEnumMode,
            pfeMode: ?*FOLDER_ENUM_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetMode(self: *const IObjectWithFolderEnumMode, feMode: FOLDER_ENUM_MODE) callconv(.Inline) HRESULT {
        return self.vtable.SetMode(self, feMode);
    }
    pub fn GetMode(self: *const IObjectWithFolderEnumMode, pfeMode: ?*FOLDER_ENUM_MODE) callconv(.Inline) HRESULT {
        return self.vtable.GetMode(self, pfeMode);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IParseAndCreateItem_Value = Guid.initString("67efed0e-e827-4408-b493-78f3982b685c");
pub const IID_IParseAndCreateItem = &IID_IParseAndCreateItem_Value;
pub const IParseAndCreateItem = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetItem: *const fn(
            self: *const IParseAndCreateItem,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItem: *const fn(
            self: *const IParseAndCreateItem,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetItem(self: *const IParseAndCreateItem, psi: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.SetItem(self, psi);
    }
    pub fn GetItem(self: *const IParseAndCreateItem, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetItem(self, riid, ppv);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellFolder_Value = Guid.initString("000214e6-0000-0000-c000-000000000046");
pub const IID_IShellFolder = &IID_IShellFolder_Value;
pub const IShellFolder = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ParseDisplayName: *const fn(
            self: *const IShellFolder,
            hwnd: ?HWND,
            pbc: ?*IBindCtx,
            pszDisplayName: ?PWSTR,
            pchEaten: ?*u32,
            ppidl: ?*?*ITEMIDLIST,
            pdwAttributes: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumObjects: *const fn(
            self: *const IShellFolder,
            hwnd: ?HWND,
            grfFlags: u32,
            ppenumIDList: ?*?*IEnumIDList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindToObject: *const fn(
            self: *const IShellFolder,
            pidl: ?*ITEMIDLIST,
            pbc: ?*IBindCtx,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindToStorage: *const fn(
            self: *const IShellFolder,
            pidl: ?*ITEMIDLIST,
            pbc: ?*IBindCtx,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CompareIDs: *const fn(
            self: *const IShellFolder,
            lParam: LPARAM,
            pidl1: ?*ITEMIDLIST,
            pidl2: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateViewObject: *const fn(
            self: *const IShellFolder,
            hwndOwner: ?HWND,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributesOf: *const fn(
            self: *const IShellFolder,
            cidl: u32,
            apidl: [*]?*ITEMIDLIST,
            rgfInOut: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUIObjectOf: *const fn(
            self: *const IShellFolder,
            hwndOwner: ?HWND,
            cidl: u32,
            apidl: [*]?*ITEMIDLIST,
            riid: ?*const Guid,
            rgfReserved: ?*u32,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayNameOf: *const fn(
            self: *const IShellFolder,
            pidl: ?*ITEMIDLIST,
            uFlags: SHGDNF,
            pName: ?*STRRET,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNameOf: *const fn(
            self: *const IShellFolder,
            hwnd: ?HWND,
            pidl: ?*ITEMIDLIST,
            pszName: ?[*:0]const u16,
            uFlags: SHGDNF,
            ppidlOut: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn ParseDisplayName(self: *const IShellFolder, hwnd: ?HWND, pbc: ?*IBindCtx, pszDisplayName: ?PWSTR, pchEaten: ?*u32, ppidl: ?*?*ITEMIDLIST, pdwAttributes: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.ParseDisplayName(self, hwnd, pbc, pszDisplayName, pchEaten, ppidl, pdwAttributes);
    }
    pub fn EnumObjects(self: *const IShellFolder, hwnd: ?HWND, grfFlags: u32, ppenumIDList: ?*?*IEnumIDList) callconv(.Inline) HRESULT {
        return self.vtable.EnumObjects(self, hwnd, grfFlags, ppenumIDList);
    }
    pub fn BindToObject(self: *const IShellFolder, pidl: ?*ITEMIDLIST, pbc: ?*IBindCtx, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.BindToObject(self, pidl, pbc, riid, ppv);
    }
    pub fn BindToStorage(self: *const IShellFolder, pidl: ?*ITEMIDLIST, pbc: ?*IBindCtx, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.BindToStorage(self, pidl, pbc, riid, ppv);
    }
    pub fn CompareIDs(self: *const IShellFolder, lParam: LPARAM, pidl1: ?*ITEMIDLIST, pidl2: ?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.CompareIDs(self, lParam, pidl1, pidl2);
    }
    pub fn CreateViewObject(self: *const IShellFolder, hwndOwner: ?HWND, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.CreateViewObject(self, hwndOwner, riid, ppv);
    }
    pub fn GetAttributesOf(self: *const IShellFolder, cidl: u32, apidl: [*]?*ITEMIDLIST, rgfInOut: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetAttributesOf(self, cidl, apidl, rgfInOut);
    }
    pub fn GetUIObjectOf(self: *const IShellFolder, hwndOwner: ?HWND, cidl: u32, apidl: [*]?*ITEMIDLIST, riid: ?*const Guid, rgfReserved: ?*u32, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetUIObjectOf(self, hwndOwner, cidl, apidl, riid, rgfReserved, ppv);
    }
    pub fn GetDisplayNameOf(self: *const IShellFolder, pidl: ?*ITEMIDLIST, uFlags: SHGDNF, pName: ?*STRRET) callconv(.Inline) HRESULT {
        return self.vtable.GetDisplayNameOf(self, pidl, uFlags, pName);
    }
    pub fn SetNameOf(self: *const IShellFolder, hwnd: ?HWND, pidl: ?*ITEMIDLIST, pszName: ?[*:0]const u16, uFlags: SHGDNF, ppidlOut: ?*?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.SetNameOf(self, hwnd, pidl, pszName, uFlags, ppidlOut);
    }
};

pub const EXTRASEARCH = extern struct {
    guidSearch: Guid,
    wszFriendlyName: [80]u16,
    wszUrl: [2084]u16,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IEnumExtraSearch_Value = Guid.initString("0e700be1-9db6-11d1-a1ce-00c04fd75d13");
pub const IID_IEnumExtraSearch = &IID_IEnumExtraSearch_Value;
pub const IEnumExtraSearch = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumExtraSearch,
            celt: u32,
            rgelt: [*]EXTRASEARCH,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumExtraSearch,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumExtraSearch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumExtraSearch,
            ppenum: ?*?*IEnumExtraSearch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumExtraSearch, celt: u32, rgelt: [*]EXTRASEARCH, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, celt, rgelt, pceltFetched);
    }
    pub fn Skip(self: *const IEnumExtraSearch, celt: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumExtraSearch) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumExtraSearch, ppenum: ?*?*IEnumExtraSearch) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppenum);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IShellFolder2_Value = Guid.initString("93f2f68c-1d1b-11d3-a30e-00c04f79abd1");
pub const IID_IShellFolder2 = &IID_IShellFolder2_Value;
pub const IShellFolder2 = extern union {
    pub const VTable = extern struct {
        base: IShellFolder.VTable,
        GetDefaultSearchGUID: *const fn(
            self: *const IShellFolder2,
            pguid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumSearches: *const fn(
            self: *const IShellFolder2,
            ppenum: ?*?*IEnumExtraSearch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultColumn: *const fn(
            self: *const IShellFolder2,
            dwRes: u32,
            pSort: ?*u32,
            pDisplay: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultColumnState: *const fn(
            self: *const IShellFolder2,
            iColumn: u32,
            pcsFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDetailsEx: *const fn(
            self: *const IShellFolder2,
            pidl: ?*ITEMIDLIST,
            pscid: ?*const PROPERTYKEY,
            pv: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDetailsOf: *const fn(
            self: *const IShellFolder2,
            pidl: ?*ITEMIDLIST,
            iColumn: u32,
            psd: ?*SHELLDETAILS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MapColumnToSCID: *const fn(
            self: *const IShellFolder2,
            iColumn: u32,
            pscid: ?*PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IShellFolder: IShellFolder,
    IUnknown: IUnknown,
    pub fn GetDefaultSearchGUID(self: *const IShellFolder2, pguid: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetDefaultSearchGUID(self, pguid);
    }
    pub fn EnumSearches(self: *const IShellFolder2, ppenum: ?*?*IEnumExtraSearch) callconv(.Inline) HRESULT {
        return self.vtable.EnumSearches(self, ppenum);
    }
    pub fn GetDefaultColumn(self: *const IShellFolder2, dwRes: u32, pSort: ?*u32, pDisplay: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetDefaultColumn(self, dwRes, pSort, pDisplay);
    }
    pub fn GetDefaultColumnState(self: *const IShellFolder2, iColumn: u32, pcsFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetDefaultColumnState(self, iColumn, pcsFlags);
    }
    pub fn GetDetailsEx(self: *const IShellFolder2, pidl: ?*ITEMIDLIST, pscid: ?*const PROPERTYKEY, pv: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetDetailsEx(self, pidl, pscid, pv);
    }
    pub fn GetDetailsOf(self: *const IShellFolder2, pidl: ?*ITEMIDLIST, iColumn: u32, psd: ?*SHELLDETAILS) callconv(.Inline) HRESULT {
        return self.vtable.GetDetailsOf(self, pidl, iColumn, psd);
    }
    pub fn MapColumnToSCID(self: *const IShellFolder2, iColumn: u32, pscid: ?*PROPERTYKEY) callconv(.Inline) HRESULT {
        return self.vtable.MapColumnToSCID(self, iColumn, pscid);
    }
};

pub const FOLDERFLAGS = enum(i32) {
    NONE = 0,
    AUTOARRANGE = 1,
    ABBREVIATEDNAMES = 2,
    SNAPTOGRID = 4,
    OWNERDATA = 8,
    BESTFITWINDOW = 16,
    DESKTOP = 32,
    SINGLESEL = 64,
    NOSUBFOLDERS = 128,
    TRANSPARENT = 256,
    NOCLIENTEDGE = 512,
    NOSCROLL = 1024,
    ALIGNLEFT = 2048,
    NOICONS = 4096,
    SHOWSELALWAYS = 8192,
    NOVISIBLE = 16384,
    SINGLECLICKACTIVATE = 32768,
    NOWEBVIEW = 65536,
    HIDEFILENAMES = 131072,
    CHECKSELECT = 262144,
    NOENUMREFRESH = 524288,
    NOGROUPING = 1048576,
    FULLROWSELECT = 2097152,
    NOFILTERS = 4194304,
    NOCOLUMNHEADER = 8388608,
    NOHEADERINALLVIEWS = 16777216,
    EXTENDEDTILES = 33554432,
    TRICHECKSELECT = 67108864,
    AUTOCHECKSELECT = 134217728,
    NOBROWSERVIEWSTATE = 268435456,
    SUBSETGROUPS = 536870912,
    USESEARCHFOLDER = 1073741824,
    ALLOWRTLREADING = -2147483648,
};
pub const FWF_NONE = FOLDERFLAGS.NONE;
pub const FWF_AUTOARRANGE = FOLDERFLAGS.AUTOARRANGE;
pub const FWF_ABBREVIATEDNAMES = FOLDERFLAGS.ABBREVIATEDNAMES;
pub const FWF_SNAPTOGRID = FOLDERFLAGS.SNAPTOGRID;
pub const FWF_OWNERDATA = FOLDERFLAGS.OWNERDATA;
pub const FWF_BESTFITWINDOW = FOLDERFLAGS.BESTFITWINDOW;
pub const FWF_DESKTOP = FOLDERFLAGS.DESKTOP;
pub const FWF_SINGLESEL = FOLDERFLAGS.SINGLESEL;
pub const FWF_NOSUBFOLDERS = FOLDERFLAGS.NOSUBFOLDERS;
pub const FWF_TRANSPARENT = FOLDERFLAGS.TRANSPARENT;
pub const FWF_NOCLIENTEDGE = FOLDERFLAGS.NOCLIENTEDGE;
pub const FWF_NOSCROLL = FOLDERFLAGS.NOSCROLL;
pub const FWF_ALIGNLEFT = FOLDERFLAGS.ALIGNLEFT;
pub const FWF_NOICONS = FOLDERFLAGS.NOICONS;
pub const FWF_SHOWSELALWAYS = FOLDERFLAGS.SHOWSELALWAYS;
pub const FWF_NOVISIBLE = FOLDERFLAGS.NOVISIBLE;
pub const FWF_SINGLECLICKACTIVATE = FOLDERFLAGS.SINGLECLICKACTIVATE;
pub const FWF_NOWEBVIEW = FOLDERFLAGS.NOWEBVIEW;
pub const FWF_HIDEFILENAMES = FOLDERFLAGS.HIDEFILENAMES;
pub const FWF_CHECKSELECT = FOLDERFLAGS.CHECKSELECT;
pub const FWF_NOENUMREFRESH = FOLDERFLAGS.NOENUMREFRESH;
pub const FWF_NOGROUPING = FOLDERFLAGS.NOGROUPING;
pub const FWF_FULLROWSELECT = FOLDERFLAGS.FULLROWSELECT;
pub const FWF_NOFILTERS = FOLDERFLAGS.NOFILTERS;
pub const FWF_NOCOLUMNHEADER = FOLDERFLAGS.NOCOLUMNHEADER;
pub const FWF_NOHEADERINALLVIEWS = FOLDERFLAGS.NOHEADERINALLVIEWS;
pub const FWF_EXTENDEDTILES = FOLDERFLAGS.EXTENDEDTILES;
pub const FWF_TRICHECKSELECT = FOLDERFLAGS.TRICHECKSELECT;
pub const FWF_AUTOCHECKSELECT = FOLDERFLAGS.AUTOCHECKSELECT;
pub const FWF_NOBROWSERVIEWSTATE = FOLDERFLAGS.NOBROWSERVIEWSTATE;
pub const FWF_SUBSETGROUPS = FOLDERFLAGS.SUBSETGROUPS;
pub const FWF_USESEARCHFOLDER = FOLDERFLAGS.USESEARCHFOLDER;
pub const FWF_ALLOWRTLREADING = FOLDERFLAGS.ALLOWRTLREADING;

pub const FOLDERVIEWMODE = enum(i32) {
    AUTO = -1,
    FIRST = 1,
    SMALLICON = 2,
    LIST = 3,
    DETAILS = 4,
    THUMBNAIL = 5,
    TILE = 6,
    THUMBSTRIP = 7,
    CONTENT = 8,
    pub const ICON = .FIRST;
    pub const LAST = .CONTENT;
};
pub const FVM_AUTO = FOLDERVIEWMODE.AUTO;
pub const FVM_FIRST = FOLDERVIEWMODE.FIRST;
pub const FVM_ICON = FOLDERVIEWMODE.FIRST;
pub const FVM_SMALLICON = FOLDERVIEWMODE.SMALLICON;
pub const FVM_LIST = FOLDERVIEWMODE.LIST;
pub const FVM_DETAILS = FOLDERVIEWMODE.DETAILS;
pub const FVM_THUMBNAIL = FOLDERVIEWMODE.THUMBNAIL;
pub const FVM_TILE = FOLDERVIEWMODE.TILE;
pub const FVM_THUMBSTRIP = FOLDERVIEWMODE.THUMBSTRIP;
pub const FVM_CONTENT = FOLDERVIEWMODE.CONTENT;
pub const FVM_LAST = FOLDERVIEWMODE.CONTENT;

pub const FOLDERLOGICALVIEWMODE = enum(i32) {
    UNSPECIFIED = -1,
    FIRST = 1,
    TILES = 2,
    ICONS = 3,
    LIST = 4,
    CONTENT = 5,
    pub const DETAILS = .FIRST;
    pub const LAST = .CONTENT;
};
pub const FLVM_UNSPECIFIED = FOLDERLOGICALVIEWMODE.UNSPECIFIED;
pub const FLVM_FIRST = FOLDERLOGICALVIEWMODE.FIRST;
pub const FLVM_DETAILS = FOLDERLOGICALVIEWMODE.FIRST;
pub const FLVM_TILES = FOLDERLOGICALVIEWMODE.TILES;
pub const FLVM_ICONS = FOLDERLOGICALVIEWMODE.ICONS;
pub const FLVM_LIST = FOLDERLOGICALVIEWMODE.LIST;
pub const FLVM_CONTENT = FOLDERLOGICALVIEWMODE.CONTENT;
pub const FLVM_LAST = FOLDERLOGICALVIEWMODE.CONTENT;

pub const FOLDERSETTINGS = extern struct {
    ViewMode: u32,
    fFlags: u32,
};

pub const _SVSIF = enum(i32) {
    DESELECT = 0,
    SELECT = 1,
    EDIT = 3,
    DESELECTOTHERS = 4,
    ENSUREVISIBLE = 8,
    FOCUSED = 16,
    TRANSLATEPT = 32,
    SELECTIONMARK = 64,
    POSITIONITEM = 128,
    CHECK = 256,
    CHECK2 = 512,
    KEYBOARDSELECT = 1025,
    NOTAKEFOCUS = 1073741824,
};
pub const SVSI_DESELECT = _SVSIF.DESELECT;
pub const SVSI_SELECT = _SVSIF.SELECT;
pub const SVSI_EDIT = _SVSIF.EDIT;
pub const SVSI_DESELECTOTHERS = _SVSIF.DESELECTOTHERS;
pub const SVSI_ENSUREVISIBLE = _SVSIF.ENSUREVISIBLE;
pub const SVSI_FOCUSED = _SVSIF.FOCUSED;
pub const SVSI_TRANSLATEPT = _SVSIF.TRANSLATEPT;
pub const SVSI_SELECTIONMARK = _SVSIF.SELECTIONMARK;
pub const SVSI_POSITIONITEM = _SVSIF.POSITIONITEM;
pub const SVSI_CHECK = _SVSIF.CHECK;
pub const SVSI_CHECK2 = _SVSIF.CHECK2;
pub const SVSI_KEYBOARDSELECT = _SVSIF.KEYBOARDSELECT;
pub const SVSI_NOTAKEFOCUS = _SVSIF.NOTAKEFOCUS;

pub const _SVGIO = enum(i32) {
    BACKGROUND = 0,
    SELECTION = 1,
    ALLVIEW = 2,
    CHECKED = 3,
    TYPE_MASK = 15,
    FLAG_VIEWORDER = -2147483648,
};
pub const SVGIO_BACKGROUND = _SVGIO.BACKGROUND;
pub const SVGIO_SELECTION = _SVGIO.SELECTION;
pub const SVGIO_ALLVIEW = _SVGIO.ALLVIEW;
pub const SVGIO_CHECKED = _SVGIO.CHECKED;
pub const SVGIO_TYPE_MASK = _SVGIO.TYPE_MASK;
pub const SVGIO_FLAG_VIEWORDER = _SVGIO.FLAG_VIEWORDER;

pub const SVUIA_STATUS = enum(i32) {
    DEACTIVATE = 0,
    ACTIVATE_NOFOCUS = 1,
    ACTIVATE_FOCUS = 2,
    INPLACEACTIVATE = 3,
};
pub const SVUIA_DEACTIVATE = SVUIA_STATUS.DEACTIVATE;
pub const SVUIA_ACTIVATE_NOFOCUS = SVUIA_STATUS.ACTIVATE_NOFOCUS;
pub const SVUIA_ACTIVATE_FOCUS = SVUIA_STATUS.ACTIVATE_FOCUS;
pub const SVUIA_INPLACEACTIVATE = SVUIA_STATUS.INPLACEACTIVATE;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellView_Value = Guid.initString("000214e3-0000-0000-c000-000000000046");
pub const IID_IShellView = &IID_IShellView_Value;
pub const IShellView = extern union {
    pub const VTable = extern struct {
        base: IOleWindow.VTable,
        TranslateAccelerator: *const fn(
            self: *const IShellView,
            pmsg: ?*MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableModeless: *const fn(
            self: *const IShellView,
            fEnable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UIActivate: *const fn(
            self: *const IShellView,
            uState: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn(
            self: *const IShellView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateViewWindow: *const fn(
            self: *const IShellView,
            psvPrevious: ?*IShellView,
            pfs: ?*FOLDERSETTINGS,
            psb: ?*IShellBrowser,
            prcView: ?*RECT,
            phWnd: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DestroyViewWindow: *const fn(
            self: *const IShellView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentInfo: *const fn(
            self: *const IShellView,
            pfs: ?*FOLDERSETTINGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPropertySheetPages: *const fn(
            self: *const IShellView,
            dwReserved: u32,
            pfn: ?LPFNSVADDPROPSHEETPAGE,
            lparam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveViewState: *const fn(
            self: *const IShellView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectItem: *const fn(
            self: *const IShellView,
            pidlItem: ?*ITEMIDLIST,
            uFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemObject: *const fn(
            self: *const IShellView,
            uItem: u32,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IOleWindow: IOleWindow,
    IUnknown: IUnknown,
    pub fn TranslateAccelerator(self: *const IShellView, pmsg: ?*MSG) callconv(.Inline) HRESULT {
        return self.vtable.TranslateAccelerator(self, pmsg);
    }
    pub fn EnableModeless(self: *const IShellView, fEnable: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.EnableModeless(self, fEnable);
    }
    pub fn UIActivate(self: *const IShellView, uState: u32) callconv(.Inline) HRESULT {
        return self.vtable.UIActivate(self, uState);
    }
    pub fn Refresh(self: *const IShellView) callconv(.Inline) HRESULT {
        return self.vtable.Refresh(self);
    }
    pub fn CreateViewWindow(self: *const IShellView, psvPrevious: ?*IShellView, pfs: ?*FOLDERSETTINGS, psb: ?*IShellBrowser, prcView: ?*RECT, phWnd: ?*?HWND) callconv(.Inline) HRESULT {
        return self.vtable.CreateViewWindow(self, psvPrevious, pfs, psb, prcView, phWnd);
    }
    pub fn DestroyViewWindow(self: *const IShellView) callconv(.Inline) HRESULT {
        return self.vtable.DestroyViewWindow(self);
    }
    pub fn GetCurrentInfo(self: *const IShellView, pfs: ?*FOLDERSETTINGS) callconv(.Inline) HRESULT {
        return self.vtable.GetCurrentInfo(self, pfs);
    }
    pub fn AddPropertySheetPages(self: *const IShellView, dwReserved: u32, pfn: ?LPFNSVADDPROPSHEETPAGE, lparam: LPARAM) callconv(.Inline) HRESULT {
        return self.vtable.AddPropertySheetPages(self, dwReserved, pfn, lparam);
    }
    pub fn SaveViewState(self: *const IShellView) callconv(.Inline) HRESULT {
        return self.vtable.SaveViewState(self);
    }
    pub fn SelectItem(self: *const IShellView, pidlItem: ?*ITEMIDLIST, uFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.SelectItem(self, pidlItem, uFlags);
    }
    pub fn GetItemObject(self: *const IShellView, uItem: u32, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetItemObject(self, uItem, riid, ppv);
    }
};

pub const SV2CVW2_PARAMS = extern struct {
    cbSize: u32,
    psvPrev: ?*IShellView,
    pfs: ?*FOLDERSETTINGS,
    psbOwner: ?*IShellBrowser,
    prcView: ?*RECT,
    pvid: ?*const Guid,
    hwndView: ?HWND,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IShellView2_Value = Guid.initString("88e39e80-3578-11cf-ae69-08002b2e1262");
pub const IID_IShellView2 = &IID_IShellView2_Value;
pub const IShellView2 = extern union {
    pub const VTable = extern struct {
        base: IShellView.VTable,
        GetView: *const fn(
            self: *const IShellView2,
            pvid: ?*Guid,
            uView: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateViewWindow2: *const fn(
            self: *const IShellView2,
            lpParams: ?*SV2CVW2_PARAMS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleRename: *const fn(
            self: *const IShellView2,
            pidlNew: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectAndPositionItem: *const fn(
            self: *const IShellView2,
            pidlItem: ?*ITEMIDLIST,
            uFlags: u32,
            ppt: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IShellView: IShellView,
    IOleWindow: IOleWindow,
    IUnknown: IUnknown,
    pub fn GetView(self: *const IShellView2, pvid: ?*Guid, uView: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetView(self, pvid, uView);
    }
    pub fn CreateViewWindow2(self: *const IShellView2, lpParams: ?*SV2CVW2_PARAMS) callconv(.Inline) HRESULT {
        return self.vtable.CreateViewWindow2(self, lpParams);
    }
    pub fn HandleRename(self: *const IShellView2, pidlNew: ?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.HandleRename(self, pidlNew);
    }
    pub fn SelectAndPositionItem(self: *const IShellView2, pidlItem: ?*ITEMIDLIST, uFlags: u32, ppt: ?*POINT) callconv(.Inline) HRESULT {
        return self.vtable.SelectAndPositionItem(self, pidlItem, uFlags, ppt);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFolderView_Value = Guid.initString("cde725b0-ccc9-4519-917e-325d72fab4ce");
pub const IID_IFolderView = &IID_IFolderView_Value;
pub const IFolderView = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCurrentViewMode: *const fn(
            self: *const IFolderView,
            pViewMode: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCurrentViewMode: *const fn(
            self: *const IFolderView,
            ViewMode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolder: *const fn(
            self: *const IFolderView,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn(
            self: *const IFolderView,
            iItemIndex: i32,
            ppidl: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemCount: *const fn(
            self: *const IFolderView,
            uFlags: u32,
            pcItems: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Items: *const fn(
            self: *const IFolderView,
            uFlags: u32,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectionMarkedItem: *const fn(
            self: *const IFolderView,
            piItem: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFocusedItem: *const fn(
            self: *const IFolderView,
            piItem: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemPosition: *const fn(
            self: *const IFolderView,
            pidl: ?*ITEMIDLIST,
            ppt: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSpacing: *const fn(
            self: *const IFolderView,
            ppt: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultSpacing: *const fn(
            self: *const IFolderView,
            ppt: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAutoArrange: *const fn(
            self: *const IFolderView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectItem: *const fn(
            self: *const IFolderView,
            iItem: i32,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectAndPositionItems: *const fn(
            self: *const IFolderView,
            cidl: u32,
            apidl: [*]?*ITEMIDLIST,
            apt: ?[*]POINT,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetCurrentViewMode(self: *const IFolderView, pViewMode: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCurrentViewMode(self, pViewMode);
    }
    pub fn SetCurrentViewMode(self: *const IFolderView, ViewMode: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetCurrentViewMode(self, ViewMode);
    }
    pub fn GetFolder(self: *const IFolderView, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetFolder(self, riid, ppv);
    }
    pub fn Item(self: *const IFolderView, iItemIndex: i32, ppidl: ?*?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.Item(self, iItemIndex, ppidl);
    }
    pub fn ItemCount(self: *const IFolderView, uFlags: u32, pcItems: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.ItemCount(self, uFlags, pcItems);
    }
    pub fn Items(self: *const IFolderView, uFlags: u32, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.Items(self, uFlags, riid, ppv);
    }
    pub fn GetSelectionMarkedItem(self: *const IFolderView, piItem: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetSelectionMarkedItem(self, piItem);
    }
    pub fn GetFocusedItem(self: *const IFolderView, piItem: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetFocusedItem(self, piItem);
    }
    pub fn GetItemPosition(self: *const IFolderView, pidl: ?*ITEMIDLIST, ppt: ?*POINT) callconv(.Inline) HRESULT {
        return self.vtable.GetItemPosition(self, pidl, ppt);
    }
    pub fn GetSpacing(self: *const IFolderView, ppt: ?*POINT) callconv(.Inline) HRESULT {
        return self.vtable.GetSpacing(self, ppt);
    }
    pub fn GetDefaultSpacing(self: *const IFolderView, ppt: ?*POINT) callconv(.Inline) HRESULT {
        return self.vtable.GetDefaultSpacing(self, ppt);
    }
    pub fn GetAutoArrange(self: *const IFolderView) callconv(.Inline) HRESULT {
        return self.vtable.GetAutoArrange(self);
    }
    pub fn SelectItem(self: *const IFolderView, iItem: i32, dwFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.SelectItem(self, iItem, dwFlags);
    }
    pub fn SelectAndPositionItems(self: *const IFolderView, cidl: u32, apidl: [*]?*ITEMIDLIST, apt: ?[*]POINT, dwFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.SelectAndPositionItems(self, cidl, apidl, apt, dwFlags);
    }
};

pub const SORTDIRECTION = enum(i32) {
    DESCENDING = -1,
    ASCENDING = 1,
};
pub const SORT_DESCENDING = SORTDIRECTION.DESCENDING;
pub const SORT_ASCENDING = SORTDIRECTION.ASCENDING;

pub const SORTCOLUMN = extern struct {
    propkey: PROPERTYKEY,
    direction: SORTDIRECTION,
};

pub const FVTEXTTYPE = enum(i32) {
    T = 0,
};
pub const FVST_EMPTYTEXT = FVTEXTTYPE.T;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFolderView2_Value = Guid.initString("1af3a467-214f-4298-908e-06b03e0b39f9");
pub const IID_IFolderView2 = &IID_IFolderView2_Value;
pub const IFolderView2 = extern union {
    pub const VTable = extern struct {
        base: IFolderView.VTable,
        SetGroupBy: *const fn(
            self: *const IFolderView2,
            key: ?*const PROPERTYKEY,
            fAscending: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGroupBy: *const fn(
            self: *const IFolderView2,
            pkey: ?*PROPERTYKEY,
            pfAscending: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetViewProperty: *const fn(
            self: *const IFolderView2,
            pidl: ?*ITEMIDLIST,
            propkey: ?*const PROPERTYKEY,
            propvar: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewProperty: *const fn(
            self: *const IFolderView2,
            pidl: ?*ITEMIDLIST,
            propkey: ?*const PROPERTYKEY,
            ppropvar: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTileViewProperties: *const fn(
            self: *const IFolderView2,
            pidl: ?*ITEMIDLIST,
            pszPropList: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetExtendedTileViewProperties: *const fn(
            self: *const IFolderView2,
            pidl: ?*ITEMIDLIST,
            pszPropList: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetText: *const fn(
            self: *const IFolderView2,
            iType: FVTEXTTYPE,
            pwszText: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCurrentFolderFlags: *const fn(
            self: *const IFolderView2,
            dwMask: u32,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentFolderFlags: *const fn(
            self: *const IFolderView2,
            pdwFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSortColumnCount: *const fn(
            self: *const IFolderView2,
            pcColumns: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSortColumns: *const fn(
            self: *const IFolderView2,
            rgSortColumns: [*]const SORTCOLUMN,
            cColumns: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSortColumns: *const fn(
            self: *const IFolderView2,
            rgSortColumns: [*]SORTCOLUMN,
            cColumns: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItem: *const fn(
            self: *const IFolderView2,
            iItem: i32,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVisibleItem: *const fn(
            self: *const IFolderView2,
            iStart: i32,
            fPrevious: BOOL,
            piItem: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectedItem: *const fn(
            self: *const IFolderView2,
            iStart: i32,
            piItem: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelection: *const fn(
            self: *const IFolderView2,
            fNoneImpliesFolder: BOOL,
            ppsia: ?*?*IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectionState: *const fn(
            self: *const IFolderView2,
            pidl: ?*ITEMIDLIST,
            pdwFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeVerbOnSelection: *const fn(
            self: *const IFolderView2,
            pszVerb: ?[*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetViewModeAndIconSize: *const fn(
            self: *const IFolderView2,
            uViewMode: FOLDERVIEWMODE,
            iImageSize: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewModeAndIconSize: *const fn(
            self: *const IFolderView2,
            puViewMode: ?*FOLDERVIEWMODE,
            piImageSize: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGroupSubsetCount: *const fn(
            self: *const IFolderView2,
            cVisibleRows: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGroupSubsetCount: *const fn(
            self: *const IFolderView2,
            pcVisibleRows: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRedraw: *const fn(
            self: *const IFolderView2,
            fRedrawOn: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsMoveInSameFolder: *const fn(
            self: *const IFolderView2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoRename: *const fn(
            self: *const IFolderView2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IFolderView: IFolderView,
    IUnknown: IUnknown,
    pub fn SetGroupBy(self: *const IFolderView2, key: ?*const PROPERTYKEY, fAscending: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetGroupBy(self, key, fAscending);
    }
    pub fn GetGroupBy(self: *const IFolderView2, pkey: ?*PROPERTYKEY, pfAscending: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.GetGroupBy(self, pkey, pfAscending);
    }
    pub fn SetViewProperty(self: *const IFolderView2, pidl: ?*ITEMIDLIST, propkey: ?*const PROPERTYKEY, propvar: ?*const PROPVARIANT) callconv(.Inline) HRESULT {
        return self.vtable.SetViewProperty(self, pidl, propkey, propvar);
    }
    pub fn GetViewProperty(self: *const IFolderView2, pidl: ?*ITEMIDLIST, propkey: ?*const PROPERTYKEY, ppropvar: ?*PROPVARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetViewProperty(self, pidl, propkey, ppropvar);
    }
    pub fn SetTileViewProperties(self: *const IFolderView2, pidl: ?*ITEMIDLIST, pszPropList: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetTileViewProperties(self, pidl, pszPropList);
    }
    pub fn SetExtendedTileViewProperties(self: *const IFolderView2, pidl: ?*ITEMIDLIST, pszPropList: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetExtendedTileViewProperties(self, pidl, pszPropList);
    }
    pub fn SetText(self: *const IFolderView2, iType: FVTEXTTYPE, pwszText: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetText(self, iType, pwszText);
    }
    pub fn SetCurrentFolderFlags(self: *const IFolderView2, dwMask: u32, dwFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetCurrentFolderFlags(self, dwMask, dwFlags);
    }
    pub fn GetCurrentFolderFlags(self: *const IFolderView2, pdwFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCurrentFolderFlags(self, pdwFlags);
    }
    pub fn GetSortColumnCount(self: *const IFolderView2, pcColumns: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetSortColumnCount(self, pcColumns);
    }
    pub fn SetSortColumns(self: *const IFolderView2, rgSortColumns: [*]const SORTCOLUMN, cColumns: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetSortColumns(self, rgSortColumns, cColumns);
    }
    pub fn GetSortColumns(self: *const IFolderView2, rgSortColumns: [*]SORTCOLUMN, cColumns: i32) callconv(.Inline) HRESULT {
        return self.vtable.GetSortColumns(self, rgSortColumns, cColumns);
    }
    pub fn GetItem(self: *const IFolderView2, iItem: i32, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetItem(self, iItem, riid, ppv);
    }
    pub fn GetVisibleItem(self: *const IFolderView2, iStart: i32, fPrevious: BOOL, piItem: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetVisibleItem(self, iStart, fPrevious, piItem);
    }
    pub fn GetSelectedItem(self: *const IFolderView2, iStart: i32, piItem: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetSelectedItem(self, iStart, piItem);
    }
    pub fn GetSelection(self: *const IFolderView2, fNoneImpliesFolder: BOOL, ppsia: ?*?*IShellItemArray) callconv(.Inline) HRESULT {
        return self.vtable.GetSelection(self, fNoneImpliesFolder, ppsia);
    }
    pub fn GetSelectionState(self: *const IFolderView2, pidl: ?*ITEMIDLIST, pdwFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetSelectionState(self, pidl, pdwFlags);
    }
    pub fn InvokeVerbOnSelection(self: *const IFolderView2, pszVerb: ?[*:0]const u8) callconv(.Inline) HRESULT {
        return self.vtable.InvokeVerbOnSelection(self, pszVerb);
    }
    pub fn SetViewModeAndIconSize(self: *const IFolderView2, uViewMode: FOLDERVIEWMODE, iImageSize: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetViewModeAndIconSize(self, uViewMode, iImageSize);
    }
    pub fn GetViewModeAndIconSize(self: *const IFolderView2, puViewMode: ?*FOLDERVIEWMODE, piImageSize: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetViewModeAndIconSize(self, puViewMode, piImageSize);
    }
    pub fn SetGroupSubsetCount(self: *const IFolderView2, cVisibleRows: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetGroupSubsetCount(self, cVisibleRows);
    }
    pub fn GetGroupSubsetCount(self: *const IFolderView2, pcVisibleRows: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetGroupSubsetCount(self, pcVisibleRows);
    }
    pub fn SetRedraw(self: *const IFolderView2, fRedrawOn: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetRedraw(self, fRedrawOn);
    }
    pub fn IsMoveInSameFolder(self: *const IFolderView2) callconv(.Inline) HRESULT {
        return self.vtable.IsMoveInSameFolder(self);
    }
    pub fn DoRename(self: *const IFolderView2) callconv(.Inline) HRESULT {
        return self.vtable.DoRename(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFolderViewSettings_Value = Guid.initString("ae8c987d-8797-4ed3-be72-2a47dd938db0");
pub const IID_IFolderViewSettings = &IID_IFolderViewSettings_Value;
pub const IFolderViewSettings = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetColumnPropertyList: *const fn(
            self: *const IFolderViewSettings,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGroupByProperty: *const fn(
            self: *const IFolderViewSettings,
            pkey: ?*PROPERTYKEY,
            pfGroupAscending: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewMode: *const fn(
            self: *const IFolderViewSettings,
            plvm: ?*FOLDERLOGICALVIEWMODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIconSize: *const fn(
            self: *const IFolderViewSettings,
            puIconSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderFlags: *const fn(
            self: *const IFolderViewSettings,
            pfolderMask: ?*FOLDERFLAGS,
            pfolderFlags: ?*FOLDERFLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSortColumns: *const fn(
            self: *const IFolderViewSettings,
            rgSortColumns: [*]SORTCOLUMN,
            cColumnsIn: u32,
            pcColumnsOut: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGroupSubsetCount: *const fn(
            self: *const IFolderViewSettings,
            pcVisibleRows: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetColumnPropertyList(self: *const IFolderViewSettings, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetColumnPropertyList(self, riid, ppv);
    }
    pub fn GetGroupByProperty(self: *const IFolderViewSettings, pkey: ?*PROPERTYKEY, pfGroupAscending: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.GetGroupByProperty(self, pkey, pfGroupAscending);
    }
    pub fn GetViewMode(self: *const IFolderViewSettings, plvm: ?*FOLDERLOGICALVIEWMODE) callconv(.Inline) HRESULT {
        return self.vtable.GetViewMode(self, plvm);
    }
    pub fn GetIconSize(self: *const IFolderViewSettings, puIconSize: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetIconSize(self, puIconSize);
    }
    pub fn GetFolderFlags(self: *const IFolderViewSettings, pfolderMask: ?*FOLDERFLAGS, pfolderFlags: ?*FOLDERFLAGS) callconv(.Inline) HRESULT {
        return self.vtable.GetFolderFlags(self, pfolderMask, pfolderFlags);
    }
    pub fn GetSortColumns(self: *const IFolderViewSettings, rgSortColumns: [*]SORTCOLUMN, cColumnsIn: u32, pcColumnsOut: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetSortColumns(self, rgSortColumns, cColumnsIn, pcColumnsOut);
    }
    pub fn GetGroupSubsetCount(self: *const IFolderViewSettings, pcVisibleRows: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetGroupSubsetCount(self, pcVisibleRows);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IInitializeNetworkFolder_Value = Guid.initString("6e0f9881-42a8-4f2a-97f8-8af4e026d92d");
pub const IID_IInitializeNetworkFolder = &IID_IInitializeNetworkFolder_Value;
pub const IInitializeNetworkFolder = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn(
            self: *const IInitializeNetworkFolder,
            pidl: ?*ITEMIDLIST,
            pidlTarget: ?*ITEMIDLIST,
            uDisplayType: u32,
            pszResName: ?[*:0]const u16,
            pszProvider: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IInitializeNetworkFolder, pidl: ?*ITEMIDLIST, pidlTarget: ?*ITEMIDLIST, uDisplayType: u32, pszResName: ?[*:0]const u16, pszProvider: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, pidl, pidlTarget, uDisplayType, pszResName, pszProvider);
    }
};

const IID_INetworkFolderInternal_Value = Guid.initString("ceb38218-c971-47bb-a703-f0bc99ccdb81");
pub const IID_INetworkFolderInternal = &IID_INetworkFolderInternal_Value;
pub const INetworkFolderInternal = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetResourceDisplayType: *const fn(
            self: *const INetworkFolderInternal,
            displayType: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIDList: *const fn(
            self: *const INetworkFolderInternal,
            idList: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProvider: *const fn(
            self: *const INetworkFolderInternal,
            itemIdCount: u32,
            itemIds: [*]?*ITEMIDLIST,
            providerMaxLength: u32,
            provider: [*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetResourceDisplayType(self: *const INetworkFolderInternal, displayType: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetResourceDisplayType(self, displayType);
    }
    pub fn GetIDList(self: *const INetworkFolderInternal, idList: ?*?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.GetIDList(self, idList);
    }
    pub fn GetProvider(self: *const INetworkFolderInternal, itemIdCount: u32, itemIds: [*]?*ITEMIDLIST, providerMaxLength: u32, provider: [*:0]u16) callconv(.Inline) HRESULT {
        return self.vtable.GetProvider(self, itemIdCount, itemIds, providerMaxLength, provider);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPreviewHandlerVisuals_Value = Guid.initString("196bf9a5-b346-4ef0-aa1e-5dcdb76768b1");
pub const IID_IPreviewHandlerVisuals = &IID_IPreviewHandlerVisuals_Value;
pub const IPreviewHandlerVisuals = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetBackgroundColor: *const fn(
            self: *const IPreviewHandlerVisuals,
            color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFont: *const fn(
            self: *const IPreviewHandlerVisuals,
            plf: ?*const LOGFONTW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTextColor: *const fn(
            self: *const IPreviewHandlerVisuals,
            color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetBackgroundColor(self: *const IPreviewHandlerVisuals, color: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetBackgroundColor(self, color);
    }
    pub fn SetFont(self: *const IPreviewHandlerVisuals, plf: ?*const LOGFONTW) callconv(.Inline) HRESULT {
        return self.vtable.SetFont(self, plf);
    }
    pub fn SetTextColor(self: *const IPreviewHandlerVisuals, color: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetTextColor(self, color);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ICommDlgBrowser_Value = Guid.initString("000214f1-0000-0000-c000-000000000046");
pub const IID_ICommDlgBrowser = &IID_ICommDlgBrowser_Value;
pub const ICommDlgBrowser = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnDefaultCommand: *const fn(
            self: *const ICommDlgBrowser,
            ppshv: ?*IShellView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnStateChange: *const fn(
            self: *const ICommDlgBrowser,
            ppshv: ?*IShellView,
            uChange: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IncludeObject: *const fn(
            self: *const ICommDlgBrowser,
            ppshv: ?*IShellView,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnDefaultCommand(self: *const ICommDlgBrowser, ppshv: ?*IShellView) callconv(.Inline) HRESULT {
        return self.vtable.OnDefaultCommand(self, ppshv);
    }
    pub fn OnStateChange(self: *const ICommDlgBrowser, ppshv: ?*IShellView, uChange: u32) callconv(.Inline) HRESULT {
        return self.vtable.OnStateChange(self, ppshv, uChange);
    }
    pub fn IncludeObject(self: *const ICommDlgBrowser, ppshv: ?*IShellView, pidl: ?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.IncludeObject(self, ppshv, pidl);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ICommDlgBrowser2_Value = Guid.initString("10339516-2894-11d2-9039-00c04f8eeb3e");
pub const IID_ICommDlgBrowser2 = &IID_ICommDlgBrowser2_Value;
pub const ICommDlgBrowser2 = extern union {
    pub const VTable = extern struct {
        base: ICommDlgBrowser.VTable,
        Notify: *const fn(
            self: *const ICommDlgBrowser2,
            ppshv: ?*IShellView,
            dwNotifyType: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultMenuText: *const fn(
            self: *const ICommDlgBrowser2,
            ppshv: ?*IShellView,
            pszText: [*:0]u16,
            cchMax: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewFlags: *const fn(
            self: *const ICommDlgBrowser2,
            pdwFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICommDlgBrowser: ICommDlgBrowser,
    IUnknown: IUnknown,
    pub fn Notify(self: *const ICommDlgBrowser2, ppshv: ?*IShellView, dwNotifyType: u32) callconv(.Inline) HRESULT {
        return self.vtable.Notify(self, ppshv, dwNotifyType);
    }
    pub fn GetDefaultMenuText(self: *const ICommDlgBrowser2, ppshv: ?*IShellView, pszText: [*:0]u16, cchMax: i32) callconv(.Inline) HRESULT {
        return self.vtable.GetDefaultMenuText(self, ppshv, pszText, cchMax);
    }
    pub fn GetViewFlags(self: *const ICommDlgBrowser2, pdwFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetViewFlags(self, pdwFlags);
    }
};

pub const CM_MASK = enum(i32) {
    WIDTH = 1,
    DEFAULTWIDTH = 2,
    IDEALWIDTH = 4,
    NAME = 8,
    STATE = 16,
};
pub const CM_MASK_WIDTH = CM_MASK.WIDTH;
pub const CM_MASK_DEFAULTWIDTH = CM_MASK.DEFAULTWIDTH;
pub const CM_MASK_IDEALWIDTH = CM_MASK.IDEALWIDTH;
pub const CM_MASK_NAME = CM_MASK.NAME;
pub const CM_MASK_STATE = CM_MASK.STATE;

pub const CM_STATE = enum(i32) {
    NONE = 0,
    VISIBLE = 1,
    FIXEDWIDTH = 2,
    NOSORTBYFOLDERNESS = 4,
    ALWAYSVISIBLE = 8,
};
pub const CM_STATE_NONE = CM_STATE.NONE;
pub const CM_STATE_VISIBLE = CM_STATE.VISIBLE;
pub const CM_STATE_FIXEDWIDTH = CM_STATE.FIXEDWIDTH;
pub const CM_STATE_NOSORTBYFOLDERNESS = CM_STATE.NOSORTBYFOLDERNESS;
pub const CM_STATE_ALWAYSVISIBLE = CM_STATE.ALWAYSVISIBLE;

pub const CM_ENUM_FLAGS = enum(i32) {
    ALL = 1,
    VISIBLE = 2,
};
pub const CM_ENUM_ALL = CM_ENUM_FLAGS.ALL;
pub const CM_ENUM_VISIBLE = CM_ENUM_FLAGS.VISIBLE;

pub const CM_SET_WIDTH_VALUE = enum(i32) {
    USEDEFAULT = -1,
    AUTOSIZE = -2,
};
pub const CM_WIDTH_USEDEFAULT = CM_SET_WIDTH_VALUE.USEDEFAULT;
pub const CM_WIDTH_AUTOSIZE = CM_SET_WIDTH_VALUE.AUTOSIZE;

pub const CM_COLUMNINFO = extern struct {
    cbSize: u32,
    dwMask: u32,
    dwState: u32,
    uWidth: u32,
    uDefaultWidth: u32,
    uIdealWidth: u32,
    wszName: [80]u16,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IColumnManager_Value = Guid.initString("d8ec27bb-3f3b-4042-b10a-4acfd924d453");
pub const IID_IColumnManager = &IID_IColumnManager_Value;
pub const IColumnManager = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetColumnInfo: *const fn(
            self: *const IColumnManager,
            propkey: ?*const PROPERTYKEY,
            pcmci: ?*const CM_COLUMNINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnInfo: *const fn(
            self: *const IColumnManager,
            propkey: ?*const PROPERTYKEY,
            pcmci: ?*CM_COLUMNINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnCount: *const fn(
            self: *const IColumnManager,
            dwFlags: CM_ENUM_FLAGS,
            puCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumns: *const fn(
            self: *const IColumnManager,
            dwFlags: CM_ENUM_FLAGS,
            rgkeyOrder: [*]PROPERTYKEY,
            cColumns: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColumns: *const fn(
            self: *const IColumnManager,
            rgkeyOrder: [*]const PROPERTYKEY,
            cVisible: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetColumnInfo(self: *const IColumnManager, propkey: ?*const PROPERTYKEY, pcmci: ?*const CM_COLUMNINFO) callconv(.Inline) HRESULT {
        return self.vtable.SetColumnInfo(self, propkey, pcmci);
    }
    pub fn GetColumnInfo(self: *const IColumnManager, propkey: ?*const PROPERTYKEY, pcmci: ?*CM_COLUMNINFO) callconv(.Inline) HRESULT {
        return self.vtable.GetColumnInfo(self, propkey, pcmci);
    }
    pub fn GetColumnCount(self: *const IColumnManager, dwFlags: CM_ENUM_FLAGS, puCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetColumnCount(self, dwFlags, puCount);
    }
    pub fn GetColumns(self: *const IColumnManager, dwFlags: CM_ENUM_FLAGS, rgkeyOrder: [*]PROPERTYKEY, cColumns: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetColumns(self, dwFlags, rgkeyOrder, cColumns);
    }
    pub fn SetColumns(self: *const IColumnManager, rgkeyOrder: [*]const PROPERTYKEY, cVisible: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetColumns(self, rgkeyOrder, cVisible);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFolderFilterSite_Value = Guid.initString("c0a651f5-b48b-11d2-b5ed-006097c686f6");
pub const IID_IFolderFilterSite = &IID_IFolderFilterSite_Value;
pub const IFolderFilterSite = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetFilter: *const fn(
            self: *const IFolderFilterSite,
            punk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetFilter(self: *const IFolderFilterSite, punk: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.SetFilter(self, punk);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFolderFilter_Value = Guid.initString("9cc22886-dc8e-11d2-b1d0-00c04f8eeb3e");
pub const IID_IFolderFilter = &IID_IFolderFilter_Value;
pub const IFolderFilter = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ShouldShow: *const fn(
            self: *const IFolderFilter,
            psf: ?*IShellFolder,
            pidlFolder: ?*ITEMIDLIST,
            pidlItem: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumFlags: *const fn(
            self: *const IFolderFilter,
            psf: ?*IShellFolder,
            pidlFolder: ?*ITEMIDLIST,
            phwnd: ?*?HWND,
            pgrfFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn ShouldShow(self: *const IFolderFilter, psf: ?*IShellFolder, pidlFolder: ?*ITEMIDLIST, pidlItem: ?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.ShouldShow(self, psf, pidlFolder, pidlItem);
    }
    pub fn GetEnumFlags(self: *const IFolderFilter, psf: ?*IShellFolder, pidlFolder: ?*ITEMIDLIST, phwnd: ?*?HWND, pgrfFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetEnumFlags(self, psf, pidlFolder, phwnd, pgrfFlags);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IInputObjectSite_Value = Guid.initString("f1db8392-7331-11d0-8c99-00a0c92dbfe8");
pub const IID_IInputObjectSite = &IID_IInputObjectSite_Value;
pub const IInputObjectSite = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnFocusChangeIS: *const fn(
            self: *const IInputObjectSite,
            punkObj: ?*IUnknown,
            fSetFocus: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnFocusChangeIS(self: *const IInputObjectSite, punkObj: ?*IUnknown, fSetFocus: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.OnFocusChangeIS(self, punkObj, fSetFocus);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IInputObject_Value = Guid.initString("68284faa-6a48-11d0-8c78-00c04fd918b4");
pub const IID_IInputObject = &IID_IInputObject_Value;
pub const IInputObject = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        UIActivateIO: *const fn(
            self: *const IInputObject,
            fActivate: BOOL,
            pMsg: ?*MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasFocusIO: *const fn(
            self: *const IInputObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateAcceleratorIO: *const fn(
            self: *const IInputObject,
            pMsg: ?*MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn UIActivateIO(self: *const IInputObject, fActivate: BOOL, pMsg: ?*MSG) callconv(.Inline) HRESULT {
        return self.vtable.UIActivateIO(self, fActivate, pMsg);
    }
    pub fn HasFocusIO(self: *const IInputObject) callconv(.Inline) HRESULT {
        return self.vtable.HasFocusIO(self);
    }
    pub fn TranslateAcceleratorIO(self: *const IInputObject, pMsg: ?*MSG) callconv(.Inline) HRESULT {
        return self.vtable.TranslateAcceleratorIO(self, pMsg);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IInputObject2_Value = Guid.initString("6915c085-510b-44cd-94af-28dfa56cf92b");
pub const IID_IInputObject2 = &IID_IInputObject2_Value;
pub const IInputObject2 = extern union {
    pub const VTable = extern struct {
        base: IInputObject.VTable,
        TranslateAcceleratorGlobal: *const fn(
            self: *const IInputObject2,
            pMsg: ?*MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IInputObject: IInputObject,
    IUnknown: IUnknown,
    pub fn TranslateAcceleratorGlobal(self: *const IInputObject2, pMsg: ?*MSG) callconv(.Inline) HRESULT {
        return self.vtable.TranslateAcceleratorGlobal(self, pMsg);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellIcon_Value = Guid.initString("000214e5-0000-0000-c000-000000000046");
pub const IID_IShellIcon = &IID_IShellIcon_Value;
pub const IShellIcon = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIconOf: *const fn(
            self: *const IShellIcon,
            pidl: ?*ITEMIDLIST,
            flags: u32,
            pIconIndex: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetIconOf(self: *const IShellIcon, pidl: ?*ITEMIDLIST, flags: u32, pIconIndex: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetIconOf(self, pidl, flags, pIconIndex);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellBrowser_Value = Guid.initString("000214e2-0000-0000-c000-000000000046");
pub const IID_IShellBrowser = &IID_IShellBrowser_Value;
pub const IShellBrowser = extern union {
    pub const VTable = extern struct {
        base: IOleWindow.VTable,
        InsertMenusSB: *const fn(
            self: *const IShellBrowser,
            hmenuShared: ?HMENU,
            lpMenuWidths: ?*OleMenuGroupWidths,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMenuSB: *const fn(
            self: *const IShellBrowser,
            hmenuShared: ?HMENU,
            holemenuRes: isize,
            hwndActiveObject: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveMenusSB: *const fn(
            self: *const IShellBrowser,
            hmenuShared: ?HMENU,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStatusTextSB: *const fn(
            self: *const IShellBrowser,
            pszStatusText: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableModelessSB: *const fn(
            self: *const IShellBrowser,
            fEnable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateAcceleratorSB: *const fn(
            self: *const IShellBrowser,
            pmsg: ?*MSG,
            wID: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BrowseObject: *const fn(
            self: *const IShellBrowser,
            pidl: ?*ITEMIDLIST,
            wFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewStateStream: *const fn(
            self: *const IShellBrowser,
            grfMode: u32,
            ppStrm: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetControlWindow: *const fn(
            self: *const IShellBrowser,
            id: u32,
            phwnd: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendControlMsg: *const fn(
            self: *const IShellBrowser,
            id: u32,
            uMsg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
            pret: ?*LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryActiveShellView: *const fn(
            self: *const IShellBrowser,
            ppshv: ?*?*IShellView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnViewWindowActive: *const fn(
            self: *const IShellBrowser,
            pshv: ?*IShellView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetToolbarItems: *const fn(
            self: *const IShellBrowser,
            lpButtons: ?[*]TBBUTTON,
            nButtons: u32,
            uFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IOleWindow: IOleWindow,
    IUnknown: IUnknown,
    pub fn InsertMenusSB(self: *const IShellBrowser, hmenuShared: ?HMENU, lpMenuWidths: ?*OleMenuGroupWidths) callconv(.Inline) HRESULT {
        return self.vtable.InsertMenusSB(self, hmenuShared, lpMenuWidths);
    }
    pub fn SetMenuSB(self: *const IShellBrowser, hmenuShared: ?HMENU, holemenuRes: isize, hwndActiveObject: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.SetMenuSB(self, hmenuShared, holemenuRes, hwndActiveObject);
    }
    pub fn RemoveMenusSB(self: *const IShellBrowser, hmenuShared: ?HMENU) callconv(.Inline) HRESULT {
        return self.vtable.RemoveMenusSB(self, hmenuShared);
    }
    pub fn SetStatusTextSB(self: *const IShellBrowser, pszStatusText: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetStatusTextSB(self, pszStatusText);
    }
    pub fn EnableModelessSB(self: *const IShellBrowser, fEnable: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.EnableModelessSB(self, fEnable);
    }
    pub fn TranslateAcceleratorSB(self: *const IShellBrowser, pmsg: ?*MSG, wID: u16) callconv(.Inline) HRESULT {
        return self.vtable.TranslateAcceleratorSB(self, pmsg, wID);
    }
    pub fn BrowseObject(self: *const IShellBrowser, pidl: ?*ITEMIDLIST, wFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.BrowseObject(self, pidl, wFlags);
    }
    pub fn GetViewStateStream(self: *const IShellBrowser, grfMode: u32, ppStrm: ?*?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.GetViewStateStream(self, grfMode, ppStrm);
    }
    pub fn GetControlWindow(self: *const IShellBrowser, id: u32, phwnd: ?*?HWND) callconv(.Inline) HRESULT {
        return self.vtable.GetControlWindow(self, id, phwnd);
    }
    pub fn SendControlMsg(self: *const IShellBrowser, id: u32, uMsg: u32, wParam: WPARAM, lParam: LPARAM, pret: ?*LRESULT) callconv(.Inline) HRESULT {
        return self.vtable.SendControlMsg(self, id, uMsg, wParam, lParam, pret);
    }
    pub fn QueryActiveShellView(self: *const IShellBrowser, ppshv: ?*?*IShellView) callconv(.Inline) HRESULT {
        return self.vtable.QueryActiveShellView(self, ppshv);
    }
    pub fn OnViewWindowActive(self: *const IShellBrowser, pshv: ?*IShellView) callconv(.Inline) HRESULT {
        return self.vtable.OnViewWindowActive(self, pshv);
    }
    pub fn SetToolbarItems(self: *const IShellBrowser, lpButtons: ?[*]TBBUTTON, nButtons: u32, uFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetToolbarItems(self, lpButtons, nButtons, uFlags);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IProfferService_Value = Guid.initString("cb728b20-f786-11ce-92ad-00aa00a74cd0");
pub const IID_IProfferService = &IID_IProfferService_Value;
pub const IProfferService = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ProfferService: *const fn(
            self: *const IProfferService,
            serviceId: ?*const Guid,
            serviceProvider: ?*IServiceProvider,
            cookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RevokeService: *const fn(
            self: *const IProfferService,
            cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn ProfferService(self: *const IProfferService, serviceId: ?*const Guid, serviceProvider: ?*IServiceProvider, cookie: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.ProfferService(self, serviceId, serviceProvider, cookie);
    }
    pub fn RevokeService(self: *const IProfferService, cookie: u32) callconv(.Inline) HRESULT {
        return self.vtable.RevokeService(self, cookie);
    }
};

const IID_IGetServiceIds_Value = Guid.initString("4a073526-6103-4e21-b7bc-f519d1524e5d");
pub const IID_IGetServiceIds = &IID_IGetServiceIds_Value;
pub const IGetServiceIds = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetServiceIds: *const fn(
            self: *const IGetServiceIds,
            serviceIdCount: ?*u32,
            serviceIds: [*]?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetServiceIds(self: *const IGetServiceIds, serviceIdCount: ?*u32, serviceIds: [*]?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetServiceIds(self, serviceIdCount, serviceIds);
    }
};

pub const SIGDN = enum(i32) {
    NORMALDISPLAY = 0,
    PARENTRELATIVEPARSING = -2147385343,
    DESKTOPABSOLUTEPARSING = -2147319808,
    PARENTRELATIVEEDITING = -2147282943,
    DESKTOPABSOLUTEEDITING = -2147172352,
    FILESYSPATH = -2147123200,
    URL = -2147057664,
    PARENTRELATIVEFORADDRESSBAR = -2146975743,
    PARENTRELATIVE = -2146959359,
    PARENTRELATIVEFORUI = -2146877439,
};
pub const SIGDN_NORMALDISPLAY = SIGDN.NORMALDISPLAY;
pub const SIGDN_PARENTRELATIVEPARSING = SIGDN.PARENTRELATIVEPARSING;
pub const SIGDN_DESKTOPABSOLUTEPARSING = SIGDN.DESKTOPABSOLUTEPARSING;
pub const SIGDN_PARENTRELATIVEEDITING = SIGDN.PARENTRELATIVEEDITING;
pub const SIGDN_DESKTOPABSOLUTEEDITING = SIGDN.DESKTOPABSOLUTEEDITING;
pub const SIGDN_FILESYSPATH = SIGDN.FILESYSPATH;
pub const SIGDN_URL = SIGDN.URL;
pub const SIGDN_PARENTRELATIVEFORADDRESSBAR = SIGDN.PARENTRELATIVEFORADDRESSBAR;
pub const SIGDN_PARENTRELATIVE = SIGDN.PARENTRELATIVE;
pub const SIGDN_PARENTRELATIVEFORUI = SIGDN.PARENTRELATIVEFORUI;

pub const _SICHINTF = enum(i32) {
    DISPLAY = 0,
    ALLFIELDS = -2147483648,
    CANONICAL = 268435456,
    TEST_FILESYSPATH_IF_NOT_EQUAL = 536870912,
};
pub const SICHINT_DISPLAY = _SICHINTF.DISPLAY;
pub const SICHINT_ALLFIELDS = _SICHINTF.ALLFIELDS;
pub const SICHINT_CANONICAL = _SICHINTF.CANONICAL;
pub const SICHINT_TEST_FILESYSPATH_IF_NOT_EQUAL = _SICHINTF.TEST_FILESYSPATH_IF_NOT_EQUAL;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellItem_Value = Guid.initString("43826d1e-e718-42ee-bc55-a1e261c37bfe");
pub const IID_IShellItem = &IID_IShellItem_Value;
pub const IShellItem = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BindToHandler: *const fn(
            self: *const IShellItem,
            pbc: ?*IBindCtx,
            bhid: ?*const Guid,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParent: *const fn(
            self: *const IShellItem,
            ppsi: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayName: *const fn(
            self: *const IShellItem,
            sigdnName: SIGDN,
            ppszName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributes: *const fn(
            self: *const IShellItem,
            sfgaoMask: u32,
            psfgaoAttribs: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Compare: *const fn(
            self: *const IShellItem,
            psi: ?*IShellItem,
            hint: u32,
            piOrder: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn BindToHandler(self: *const IShellItem, pbc: ?*IBindCtx, bhid: ?*const Guid, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.BindToHandler(self, pbc, bhid, riid, ppv);
    }
    pub fn GetParent(self: *const IShellItem, ppsi: ?*?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.GetParent(self, ppsi);
    }
    pub fn GetDisplayName(self: *const IShellItem, sigdnName: SIGDN, ppszName: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetDisplayName(self, sigdnName, ppszName);
    }
    pub fn GetAttributes(self: *const IShellItem, sfgaoMask: u32, psfgaoAttribs: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetAttributes(self, sfgaoMask, psfgaoAttribs);
    }
    pub fn Compare(self: *const IShellItem, psi: ?*IShellItem, hint: u32, piOrder: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.Compare(self, psi, hint, piOrder);
    }
};

pub const DATAOBJ_GET_ITEM_FLAGS = enum(i32) {
    DEFAULT = 0,
    TRAVERSE_LINK = 1,
    NO_HDROP = 2,
    NO_URL = 4,
    ONLY_IF_ONE = 8,
};
pub const DOGIF_DEFAULT = DATAOBJ_GET_ITEM_FLAGS.DEFAULT;
pub const DOGIF_TRAVERSE_LINK = DATAOBJ_GET_ITEM_FLAGS.TRAVERSE_LINK;
pub const DOGIF_NO_HDROP = DATAOBJ_GET_ITEM_FLAGS.NO_HDROP;
pub const DOGIF_NO_URL = DATAOBJ_GET_ITEM_FLAGS.NO_URL;
pub const DOGIF_ONLY_IF_ONE = DATAOBJ_GET_ITEM_FLAGS.ONLY_IF_ONE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IShellItem2_Value = Guid.initString("7e9fb0d3-919f-4307-ab2e-9b1860310c93");
pub const IID_IShellItem2 = &IID_IShellItem2_Value;
pub const IShellItem2 = extern union {
    pub const VTable = extern struct {
        base: IShellItem.VTable,
        GetPropertyStore: *const fn(
            self: *const IShellItem2,
            flags: GETPROPERTYSTOREFLAGS,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyStoreWithCreateObject: *const fn(
            self: *const IShellItem2,
            flags: GETPROPERTYSTOREFLAGS,
            punkCreateObject: ?*IUnknown,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyStoreForKeys: *const fn(
            self: *const IShellItem2,
            rgKeys: [*]const PROPERTYKEY,
            cKeys: u32,
            flags: GETPROPERTYSTOREFLAGS,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyDescriptionList: *const fn(
            self: *const IShellItem2,
            keyType: ?*const PROPERTYKEY,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Update: *const fn(
            self: *const IShellItem2,
            pbc: ?*IBindCtx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn(
            self: *const IShellItem2,
            key: ?*const PROPERTYKEY,
            ppropvar: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCLSID: *const fn(
            self: *const IShellItem2,
            key: ?*const PROPERTYKEY,
            pclsid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileTime: *const fn(
            self: *const IShellItem2,
            key: ?*const PROPERTYKEY,
            pft: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInt32: *const fn(
            self: *const IShellItem2,
            key: ?*const PROPERTYKEY,
            pi: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetString: *const fn(
            self: *const IShellItem2,
            key: ?*const PROPERTYKEY,
            ppsz: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUInt32: *const fn(
            self: *const IShellItem2,
            key: ?*const PROPERTYKEY,
            pui: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUInt64: *const fn(
            self: *const IShellItem2,
            key: ?*const PROPERTYKEY,
            pull: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBool: *const fn(
            self: *const IShellItem2,
            key: ?*const PROPERTYKEY,
            pf: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IShellItem: IShellItem,
    IUnknown: IUnknown,
    pub fn GetPropertyStore(self: *const IShellItem2, flags: GETPROPERTYSTOREFLAGS, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyStore(self, flags, riid, ppv);
    }
    pub fn GetPropertyStoreWithCreateObject(self: *const IShellItem2, flags: GETPROPERTYSTOREFLAGS, punkCreateObject: ?*IUnknown, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyStoreWithCreateObject(self, flags, punkCreateObject, riid, ppv);
    }
    pub fn GetPropertyStoreForKeys(self: *const IShellItem2, rgKeys: [*]const PROPERTYKEY, cKeys: u32, flags: GETPROPERTYSTOREFLAGS, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyStoreForKeys(self, rgKeys, cKeys, flags, riid, ppv);
    }
    pub fn GetPropertyDescriptionList(self: *const IShellItem2, keyType: ?*const PROPERTYKEY, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyDescriptionList(self, keyType, riid, ppv);
    }
    pub fn Update(self: *const IShellItem2, pbc: ?*IBindCtx) callconv(.Inline) HRESULT {
        return self.vtable.Update(self, pbc);
    }
    pub fn GetProperty(self: *const IShellItem2, key: ?*const PROPERTYKEY, ppropvar: ?*PROPVARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetProperty(self, key, ppropvar);
    }
    pub fn GetCLSID(self: *const IShellItem2, key: ?*const PROPERTYKEY, pclsid: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetCLSID(self, key, pclsid);
    }
    pub fn GetFileTime(self: *const IShellItem2, key: ?*const PROPERTYKEY, pft: ?*FILETIME) callconv(.Inline) HRESULT {
        return self.vtable.GetFileTime(self, key, pft);
    }
    pub fn GetInt32(self: *const IShellItem2, key: ?*const PROPERTYKEY, pi: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetInt32(self, key, pi);
    }
    pub fn GetString(self: *const IShellItem2, key: ?*const PROPERTYKEY, ppsz: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetString(self, key, ppsz);
    }
    pub fn GetUInt32(self: *const IShellItem2, key: ?*const PROPERTYKEY, pui: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetUInt32(self, key, pui);
    }
    pub fn GetUInt64(self: *const IShellItem2, key: ?*const PROPERTYKEY, pull: ?*u64) callconv(.Inline) HRESULT {
        return self.vtable.GetUInt64(self, key, pull);
    }
    pub fn GetBool(self: *const IShellItem2, key: ?*const PROPERTYKEY, pf: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.GetBool(self, key, pf);
    }
};

pub const SIIGBF = packed struct(i32) {
    BIGGERSIZEOK: u1 = 0,
    MEMORYONLY: u1 = 0,
    ICONONLY: u1 = 0,
    THUMBNAILONLY: u1 = 0,
    INCACHEONLY: u1 = 0,
    CROPTOSQUARE: u1 = 0,
    WIDETHUMBNAILS: u1 = 0,
    ICONBACKGROUND: u1 = 0,
    SCALEUP: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const SIIGBF_RESIZETOFIT = SIIGBF{ };
pub const SIIGBF_BIGGERSIZEOK = SIIGBF{ .BIGGERSIZEOK = 1 };
pub const SIIGBF_MEMORYONLY = SIIGBF{ .MEMORYONLY = 1 };
pub const SIIGBF_ICONONLY = SIIGBF{ .ICONONLY = 1 };
pub const SIIGBF_THUMBNAILONLY = SIIGBF{ .THUMBNAILONLY = 1 };
pub const SIIGBF_INCACHEONLY = SIIGBF{ .INCACHEONLY = 1 };
pub const SIIGBF_CROPTOSQUARE = SIIGBF{ .CROPTOSQUARE = 1 };
pub const SIIGBF_WIDETHUMBNAILS = SIIGBF{ .WIDETHUMBNAILS = 1 };
pub const SIIGBF_ICONBACKGROUND = SIIGBF{ .ICONBACKGROUND = 1 };
pub const SIIGBF_SCALEUP = SIIGBF{ .SCALEUP = 1 };

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IShellItemImageFactory_Value = Guid.initString("bcc18b79-ba16-442f-80c4-8a59c30c463b");
pub const IID_IShellItemImageFactory = &IID_IShellItemImageFactory_Value;
pub const IShellItemImageFactory = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetImage: *const fn(
            self: *const IShellItemImageFactory,
            size: SIZE,
            flags: SIIGBF,
            phbm: ?*?HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetImage(self: *const IShellItemImageFactory, size: SIZE, flags: SIIGBF, phbm: ?*?HBITMAP) callconv(.Inline) HRESULT {
        return self.vtable.GetImage(self, size, flags, phbm);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumShellItems_Value = Guid.initString("70629033-e363-4a28-a567-0db78006e6d7");
pub const IID_IEnumShellItems = &IID_IEnumShellItems_Value;
pub const IEnumShellItems = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumShellItems,
            celt: u32,
            rgelt: [*]?*IShellItem,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumShellItems,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumShellItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumShellItems,
            ppenum: ?*?*IEnumShellItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumShellItems, celt: u32, rgelt: [*]?*IShellItem, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, celt, rgelt, pceltFetched);
    }
    pub fn Skip(self: *const IEnumShellItems, celt: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumShellItems) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumShellItems, ppenum: ?*?*IEnumShellItems) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppenum);
    }
};

pub const STGOP = enum(i32) {
    MOVE = 1,
    COPY = 2,
    SYNC = 3,
    REMOVE = 5,
    RENAME = 6,
    APPLYPROPERTIES = 8,
    NEW = 10,
};
pub const STGOP_MOVE = STGOP.MOVE;
pub const STGOP_COPY = STGOP.COPY;
pub const STGOP_SYNC = STGOP.SYNC;
pub const STGOP_REMOVE = STGOP.REMOVE;
pub const STGOP_RENAME = STGOP.RENAME;
pub const STGOP_APPLYPROPERTIES = STGOP.APPLYPROPERTIES;
pub const STGOP_NEW = STGOP.NEW;

pub const _TRANSFER_SOURCE_FLAGS = enum(i32) {
    NORMAL = 0,
    RENAME_EXIST = 1,
    OVERWRITE_EXIST = 2,
    ALLOW_DECRYPTION = 4,
    NO_SECURITY = 8,
    COPY_CREATION_TIME = 16,
    COPY_WRITE_TIME = 32,
    USE_FULL_ACCESS = 64,
    DELETE_RECYCLE_IF_POSSIBLE = 128,
    COPY_HARD_LINK = 256,
    COPY_LOCALIZED_NAME = 512,
    MOVE_AS_COPY_DELETE = 1024,
    SUSPEND_SHELLEVENTS = 2048,
    pub const FAIL_EXIST = .NORMAL;
};
pub const TSF_NORMAL = _TRANSFER_SOURCE_FLAGS.NORMAL;
pub const TSF_FAIL_EXIST = _TRANSFER_SOURCE_FLAGS.NORMAL;
pub const TSF_RENAME_EXIST = _TRANSFER_SOURCE_FLAGS.RENAME_EXIST;
pub const TSF_OVERWRITE_EXIST = _TRANSFER_SOURCE_FLAGS.OVERWRITE_EXIST;
pub const TSF_ALLOW_DECRYPTION = _TRANSFER_SOURCE_FLAGS.ALLOW_DECRYPTION;
pub const TSF_NO_SECURITY = _TRANSFER_SOURCE_FLAGS.NO_SECURITY;
pub const TSF_COPY_CREATION_TIME = _TRANSFER_SOURCE_FLAGS.COPY_CREATION_TIME;
pub const TSF_COPY_WRITE_TIME = _TRANSFER_SOURCE_FLAGS.COPY_WRITE_TIME;
pub const TSF_USE_FULL_ACCESS = _TRANSFER_SOURCE_FLAGS.USE_FULL_ACCESS;
pub const TSF_DELETE_RECYCLE_IF_POSSIBLE = _TRANSFER_SOURCE_FLAGS.DELETE_RECYCLE_IF_POSSIBLE;
pub const TSF_COPY_HARD_LINK = _TRANSFER_SOURCE_FLAGS.COPY_HARD_LINK;
pub const TSF_COPY_LOCALIZED_NAME = _TRANSFER_SOURCE_FLAGS.COPY_LOCALIZED_NAME;
pub const TSF_MOVE_AS_COPY_DELETE = _TRANSFER_SOURCE_FLAGS.MOVE_AS_COPY_DELETE;
pub const TSF_SUSPEND_SHELLEVENTS = _TRANSFER_SOURCE_FLAGS.SUSPEND_SHELLEVENTS;

pub const _TRANSFER_ADVISE_STATE = enum(i32) {
    NONE = 0,
    PERFORMING = 1,
    PREPARING = 2,
    INDETERMINATE = 4,
};
pub const TS_NONE = _TRANSFER_ADVISE_STATE.NONE;
pub const TS_PERFORMING = _TRANSFER_ADVISE_STATE.PERFORMING;
pub const TS_PREPARING = _TRANSFER_ADVISE_STATE.PREPARING;
pub const TS_INDETERMINATE = _TRANSFER_ADVISE_STATE.INDETERMINATE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITransferAdviseSink_Value = Guid.initString("d594d0d8-8da7-457b-b3b4-ce5dbaac0b88");
pub const IID_ITransferAdviseSink = &IID_ITransferAdviseSink_Value;
pub const ITransferAdviseSink = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        UpdateProgress: *const fn(
            self: *const ITransferAdviseSink,
            ullSizeCurrent: u64,
            ullSizeTotal: u64,
            nFilesCurrent: i32,
            nFilesTotal: i32,
            nFoldersCurrent: i32,
            nFoldersTotal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateTransferState: *const fn(
            self: *const ITransferAdviseSink,
            ts: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConfirmOverwrite: *const fn(
            self: *const ITransferAdviseSink,
            psiSource: ?*IShellItem,
            psiDestParent: ?*IShellItem,
            pszName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConfirmEncryptionLoss: *const fn(
            self: *const ITransferAdviseSink,
            psiSource: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FileFailure: *const fn(
            self: *const ITransferAdviseSink,
            psi: ?*IShellItem,
            pszItem: ?[*:0]const u16,
            hrError: HRESULT,
            pszRename: [*:0]u16,
            cchRename: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SubStreamFailure: *const fn(
            self: *const ITransferAdviseSink,
            psi: ?*IShellItem,
            pszStreamName: ?[*:0]const u16,
            hrError: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PropertyFailure: *const fn(
            self: *const ITransferAdviseSink,
            psi: ?*IShellItem,
            pkey: ?*const PROPERTYKEY,
            hrError: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn UpdateProgress(self: *const ITransferAdviseSink, ullSizeCurrent: u64, ullSizeTotal: u64, nFilesCurrent: i32, nFilesTotal: i32, nFoldersCurrent: i32, nFoldersTotal: i32) callconv(.Inline) HRESULT {
        return self.vtable.UpdateProgress(self, ullSizeCurrent, ullSizeTotal, nFilesCurrent, nFilesTotal, nFoldersCurrent, nFoldersTotal);
    }
    pub fn UpdateTransferState(self: *const ITransferAdviseSink, ts: u32) callconv(.Inline) HRESULT {
        return self.vtable.UpdateTransferState(self, ts);
    }
    pub fn ConfirmOverwrite(self: *const ITransferAdviseSink, psiSource: ?*IShellItem, psiDestParent: ?*IShellItem, pszName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.ConfirmOverwrite(self, psiSource, psiDestParent, pszName);
    }
    pub fn ConfirmEncryptionLoss(self: *const ITransferAdviseSink, psiSource: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.ConfirmEncryptionLoss(self, psiSource);
    }
    pub fn FileFailure(self: *const ITransferAdviseSink, psi: ?*IShellItem, pszItem: ?[*:0]const u16, hrError: HRESULT, pszRename: [*:0]u16, cchRename: u32) callconv(.Inline) HRESULT {
        return self.vtable.FileFailure(self, psi, pszItem, hrError, pszRename, cchRename);
    }
    pub fn SubStreamFailure(self: *const ITransferAdviseSink, psi: ?*IShellItem, pszStreamName: ?[*:0]const u16, hrError: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.SubStreamFailure(self, psi, pszStreamName, hrError);
    }
    pub fn PropertyFailure(self: *const ITransferAdviseSink, psi: ?*IShellItem, pkey: ?*const PROPERTYKEY, hrError: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.PropertyFailure(self, psi, pkey, hrError);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITransferSource_Value = Guid.initString("00adb003-bde9-45c6-8e29-d09f9353e108");
pub const IID_ITransferSource = &IID_ITransferSource_Value;
pub const ITransferSource = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Advise: *const fn(
            self: *const ITransferSource,
            psink: ?*ITransferAdviseSink,
            pdwCookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: *const fn(
            self: *const ITransferSource,
            dwCookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperties: *const fn(
            self: *const ITransferSource,
            pproparray: ?*IPropertyChangeArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenItem: *const fn(
            self: *const ITransferSource,
            psi: ?*IShellItem,
            flags: u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveItem: *const fn(
            self: *const ITransferSource,
            psi: ?*IShellItem,
            psiParentDst: ?*IShellItem,
            pszNameDst: ?[*:0]const u16,
            flags: u32,
            ppsiNew: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RecycleItem: *const fn(
            self: *const ITransferSource,
            psiSource: ?*IShellItem,
            psiParentDest: ?*IShellItem,
            flags: u32,
            ppsiNewDest: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveItem: *const fn(
            self: *const ITransferSource,
            psiSource: ?*IShellItem,
            flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RenameItem: *const fn(
            self: *const ITransferSource,
            psiSource: ?*IShellItem,
            pszNewName: ?[*:0]const u16,
            flags: u32,
            ppsiNewDest: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LinkItem: *const fn(
            self: *const ITransferSource,
            psiSource: ?*IShellItem,
            psiParentDest: ?*IShellItem,
            pszNewName: ?[*:0]const u16,
            flags: u32,
            ppsiNewDest: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ApplyPropertiesToItem: *const fn(
            self: *const ITransferSource,
            psiSource: ?*IShellItem,
            ppsiNew: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultDestinationName: *const fn(
            self: *const ITransferSource,
            psiSource: ?*IShellItem,
            psiParentDest: ?*IShellItem,
            ppszDestinationName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnterFolder: *const fn(
            self: *const ITransferSource,
            psiChildFolderDest: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LeaveFolder: *const fn(
            self: *const ITransferSource,
            psiChildFolderDest: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Advise(self: *const ITransferSource, psink: ?*ITransferAdviseSink, pdwCookie: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Advise(self, psink, pdwCookie);
    }
    pub fn Unadvise(self: *const ITransferSource, dwCookie: u32) callconv(.Inline) HRESULT {
        return self.vtable.Unadvise(self, dwCookie);
    }
    pub fn SetProperties(self: *const ITransferSource, pproparray: ?*IPropertyChangeArray) callconv(.Inline) HRESULT {
        return self.vtable.SetProperties(self, pproparray);
    }
    pub fn OpenItem(self: *const ITransferSource, psi: ?*IShellItem, flags: u32, riid: ?*const Guid, ppv: ?*?*anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.OpenItem(self, psi, flags, riid, ppv);
    }
    pub fn MoveItem(self: *const ITransferSource, psi: ?*IShellItem, psiParentDst: ?*IShellItem, pszNameDst: ?[*:0]const u16, flags: u32, ppsiNew: ?*?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.MoveItem(self, psi, psiParentDst, pszNameDst, flags, ppsiNew);
    }
    pub fn RecycleItem(self: *const ITransferSource, psiSource: ?*IShellItem, psiParentDest: ?*IShellItem, flags: u32, ppsiNewDest: ?*?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.RecycleItem(self, psiSource, psiParentDest, flags, ppsiNewDest);
    }
    pub fn RemoveItem(self: *const ITransferSource, psiSource: ?*IShellItem, flags: u32) callconv(.Inline) HRESULT {
        return self.vtable.RemoveItem(self, psiSource, flags);
    }
    pub fn RenameItem(self: *const ITransferSource, psiSource: ?*IShellItem, pszNewName: ?[*:0]const u16, flags: u32, ppsiNewDest: ?*?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.RenameItem(self, psiSource, pszNewName, flags, ppsiNewDest);
    }
    pub fn LinkItem(self: *const ITransferSource, psiSource: ?*IShellItem, psiParentDest: ?*IShellItem, pszNewName: ?[*:0]const u16, flags: u32, ppsiNewDest: ?*?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.LinkItem(self, psiSource, psiParentDest, pszNewName, flags, ppsiNewDest);
    }
    pub fn ApplyPropertiesToItem(self: *const ITransferSource, psiSource: ?*IShellItem, ppsiNew: ?*?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.ApplyPropertiesToItem(self, psiSource, ppsiNew);
    }
    pub fn GetDefaultDestinationName(self: *const ITransferSource, psiSource: ?*IShellItem, psiParentDest: ?*IShellItem, ppszDestinationName: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetDefaultDestinationName(self, psiSource, psiParentDest, ppszDestinationName);
    }
    pub fn EnterFolder(self: *const ITransferSource, psiChildFolderDest: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.EnterFolder(self, psiChildFolderDest);
    }
    pub fn LeaveFolder(self: *const ITransferSource, psiChildFolderDest: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.LeaveFolder(self, psiChildFolderDest);
    }
};

pub const SHELL_ITEM_RESOURCE = extern struct {
    guidType: Guid,
    szName: [260]u16,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumResources_Value = Guid.initString("2dd81fe3-a83c-4da9-a330-47249d345ba1");
pub const IID_IEnumResources = &IID_IEnumResources_Value;
pub const IEnumResources = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumResources,
            celt: u32,
            psir: [*]SHELL_ITEM_RESOURCE,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumResources,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumResources,
            ppenumr: ?*?*IEnumResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumResources, celt: u32, psir: [*]SHELL_ITEM_RESOURCE, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, celt, psir, pceltFetched);
    }
    pub fn Skip(self: *const IEnumResources, celt: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumResources) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumResources, ppenumr: ?*?*IEnumResources) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppenumr);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IShellItemResources_Value = Guid.initString("ff5693be-2ce0-4d48-b5c5-40817d1acdb9");
pub const IID_IShellItemResources = &IID_IShellItemResources_Value;
pub const IShellItemResources = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAttributes: *const fn(
            self: *const IShellItemResources,
            pdwAttributes: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSize: *const fn(
            self: *const IShellItemResources,
            pullSize: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTimes: *const fn(
            self: *const IShellItemResources,
            pftCreation: ?*FILETIME,
            pftWrite: ?*FILETIME,
            pftAccess: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTimes: *const fn(
            self: *const IShellItemResources,
            pftCreation: ?*const FILETIME,
            pftWrite: ?*const FILETIME,
            pftAccess: ?*const FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResourceDescription: *const fn(
            self: *const IShellItemResources,
            pcsir: ?*const SHELL_ITEM_RESOURCE,
            ppszDescription: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumResources: *const fn(
            self: *const IShellItemResources,
            ppenumr: ?*?*IEnumResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SupportsResource: *const fn(
            self: *const IShellItemResources,
            pcsir: ?*const SHELL_ITEM_RESOURCE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenResource: *const fn(
            self: *const IShellItemResources,
            pcsir: ?*const SHELL_ITEM_RESOURCE,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateResource: *const fn(
            self: *const IShellItemResources,
            pcsir: ?*const SHELL_ITEM_RESOURCE,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MarkForDelete: *const fn(
            self: *const IShellItemResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetAttributes(self: *const IShellItemResources, pdwAttributes: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetAttributes(self, pdwAttributes);
    }
    pub fn GetSize(self: *const IShellItemResources, pullSize: ?*u64) callconv(.Inline) HRESULT {
        return self.vtable.GetSize(self, pullSize);
    }
    pub fn GetTimes(self: *const IShellItemResources, pftCreation: ?*FILETIME, pftWrite: ?*FILETIME, pftAccess: ?*FILETIME) callconv(.Inline) HRESULT {
        return self.vtable.GetTimes(self, pftCreation, pftWrite, pftAccess);
    }
    pub fn SetTimes(self: *const IShellItemResources, pftCreation: ?*const FILETIME, pftWrite: ?*const FILETIME, pftAccess: ?*const FILETIME) callconv(.Inline) HRESULT {
        return self.vtable.SetTimes(self, pftCreation, pftWrite, pftAccess);
    }
    pub fn GetResourceDescription(self: *const IShellItemResources, pcsir: ?*const SHELL_ITEM_RESOURCE, ppszDescription: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetResourceDescription(self, pcsir, ppszDescription);
    }
    pub fn EnumResources(self: *const IShellItemResources, ppenumr: ?*?*IEnumResources) callconv(.Inline) HRESULT {
        return self.vtable.EnumResources(self, ppenumr);
    }
    pub fn SupportsResource(self: *const IShellItemResources, pcsir: ?*const SHELL_ITEM_RESOURCE) callconv(.Inline) HRESULT {
        return self.vtable.SupportsResource(self, pcsir);
    }
    pub fn OpenResource(self: *const IShellItemResources, pcsir: ?*const SHELL_ITEM_RESOURCE, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.OpenResource(self, pcsir, riid, ppv);
    }
    pub fn CreateResource(self: *const IShellItemResources, pcsir: ?*const SHELL_ITEM_RESOURCE, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.CreateResource(self, pcsir, riid, ppv);
    }
    pub fn MarkForDelete(self: *const IShellItemResources) callconv(.Inline) HRESULT {
        return self.vtable.MarkForDelete(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITransferDestination_Value = Guid.initString("48addd32-3ca5-4124-abe3-b5a72531b207");
pub const IID_ITransferDestination = &IID_ITransferDestination_Value;
pub const ITransferDestination = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Advise: *const fn(
            self: *const ITransferDestination,
            psink: ?*ITransferAdviseSink,
            pdwCookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: *const fn(
            self: *const ITransferDestination,
            dwCookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateItem: *const fn(
            self: *const ITransferDestination,
            pszName: ?[*:0]const u16,
            dwAttributes: u32,
            ullSize: u64,
            flags: u32,
            riidItem: ?*const Guid,
            ppvItem: ?*?*anyopaque,
            riidResources: ?*const Guid,
            ppvResources: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Advise(self: *const ITransferDestination, psink: ?*ITransferAdviseSink, pdwCookie: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Advise(self, psink, pdwCookie);
    }
    pub fn Unadvise(self: *const ITransferDestination, dwCookie: u32) callconv(.Inline) HRESULT {
        return self.vtable.Unadvise(self, dwCookie);
    }
    pub fn CreateItem(self: *const ITransferDestination, pszName: ?[*:0]const u16, dwAttributes: u32, ullSize: u64, flags: u32, riidItem: ?*const Guid, ppvItem: ?*?*anyopaque, riidResources: ?*const Guid, ppvResources: ?*?*anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.CreateItem(self, pszName, dwAttributes, ullSize, flags, riidItem, ppvItem, riidResources, ppvResources);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFileOperationProgressSink_Value = Guid.initString("04b0f1a7-9490-44bc-96e1-4296a31252e2");
pub const IID_IFileOperationProgressSink = &IID_IFileOperationProgressSink_Value;
pub const IFileOperationProgressSink = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        StartOperations: *const fn(
            self: *const IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FinishOperations: *const fn(
            self: *const IFileOperationProgressSink,
            hrResult: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreRenameItem: *const fn(
            self: *const IFileOperationProgressSink,
            dwFlags: u32,
            psiItem: ?*IShellItem,
            pszNewName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostRenameItem: *const fn(
            self: *const IFileOperationProgressSink,
            dwFlags: u32,
            psiItem: ?*IShellItem,
            pszNewName: ?[*:0]const u16,
            hrRename: HRESULT,
            psiNewlyCreated: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreMoveItem: *const fn(
            self: *const IFileOperationProgressSink,
            dwFlags: u32,
            psiItem: ?*IShellItem,
            psiDestinationFolder: ?*IShellItem,
            pszNewName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostMoveItem: *const fn(
            self: *const IFileOperationProgressSink,
            dwFlags: u32,
            psiItem: ?*IShellItem,
            psiDestinationFolder: ?*IShellItem,
            pszNewName: ?[*:0]const u16,
            hrMove: HRESULT,
            psiNewlyCreated: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreCopyItem: *const fn(
            self: *const IFileOperationProgressSink,
            dwFlags: u32,
            psiItem: ?*IShellItem,
            psiDestinationFolder: ?*IShellItem,
            pszNewName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostCopyItem: *const fn(
            self: *const IFileOperationProgressSink,
            dwFlags: u32,
            psiItem: ?*IShellItem,
            psiDestinationFolder: ?*IShellItem,
            pszNewName: ?[*:0]const u16,
            hrCopy: HRESULT,
            psiNewlyCreated: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreDeleteItem: *const fn(
            self: *const IFileOperationProgressSink,
            dwFlags: u32,
            psiItem: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostDeleteItem: *const fn(
            self: *const IFileOperationProgressSink,
            dwFlags: u32,
            psiItem: ?*IShellItem,
            hrDelete: HRESULT,
            psiNewlyCreated: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreNewItem: *const fn(
            self: *const IFileOperationProgressSink,
            dwFlags: u32,
            psiDestinationFolder: ?*IShellItem,
            pszNewName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostNewItem: *const fn(
            self: *const IFileOperationProgressSink,
            dwFlags: u32,
            psiDestinationFolder: ?*IShellItem,
            pszNewName: ?[*:0]const u16,
            pszTemplateName: ?[*:0]const u16,
            dwFileAttributes: u32,
            hrNew: HRESULT,
            psiNewItem: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateProgress: *const fn(
            self: *const IFileOperationProgressSink,
            iWorkTotal: u32,
            iWorkSoFar: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetTimer: *const fn(
            self: *const IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PauseTimer: *const fn(
            self: *const IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResumeTimer: *const fn(
            self: *const IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn StartOperations(self: *const IFileOperationProgressSink) callconv(.Inline) HRESULT {
        return self.vtable.StartOperations(self);
    }
    pub fn FinishOperations(self: *const IFileOperationProgressSink, hrResult: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.FinishOperations(self, hrResult);
    }
    pub fn PreRenameItem(self: *const IFileOperationProgressSink, dwFlags: u32, psiItem: ?*IShellItem, pszNewName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.PreRenameItem(self, dwFlags, psiItem, pszNewName);
    }
    pub fn PostRenameItem(self: *const IFileOperationProgressSink, dwFlags: u32, psiItem: ?*IShellItem, pszNewName: ?[*:0]const u16, hrRename: HRESULT, psiNewlyCreated: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.PostRenameItem(self, dwFlags, psiItem, pszNewName, hrRename, psiNewlyCreated);
    }
    pub fn PreMoveItem(self: *const IFileOperationProgressSink, dwFlags: u32, psiItem: ?*IShellItem, psiDestinationFolder: ?*IShellItem, pszNewName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.PreMoveItem(self, dwFlags, psiItem, psiDestinationFolder, pszNewName);
    }
    pub fn PostMoveItem(self: *const IFileOperationProgressSink, dwFlags: u32, psiItem: ?*IShellItem, psiDestinationFolder: ?*IShellItem, pszNewName: ?[*:0]const u16, hrMove: HRESULT, psiNewlyCreated: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.PostMoveItem(self, dwFlags, psiItem, psiDestinationFolder, pszNewName, hrMove, psiNewlyCreated);
    }
    pub fn PreCopyItem(self: *const IFileOperationProgressSink, dwFlags: u32, psiItem: ?*IShellItem, psiDestinationFolder: ?*IShellItem, pszNewName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.PreCopyItem(self, dwFlags, psiItem, psiDestinationFolder, pszNewName);
    }
    pub fn PostCopyItem(self: *const IFileOperationProgressSink, dwFlags: u32, psiItem: ?*IShellItem, psiDestinationFolder: ?*IShellItem, pszNewName: ?[*:0]const u16, hrCopy: HRESULT, psiNewlyCreated: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.PostCopyItem(self, dwFlags, psiItem, psiDestinationFolder, pszNewName, hrCopy, psiNewlyCreated);
    }
    pub fn PreDeleteItem(self: *const IFileOperationProgressSink, dwFlags: u32, psiItem: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.PreDeleteItem(self, dwFlags, psiItem);
    }
    pub fn PostDeleteItem(self: *const IFileOperationProgressSink, dwFlags: u32, psiItem: ?*IShellItem, hrDelete: HRESULT, psiNewlyCreated: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.PostDeleteItem(self, dwFlags, psiItem, hrDelete, psiNewlyCreated);
    }
    pub fn PreNewItem(self: *const IFileOperationProgressSink, dwFlags: u32, psiDestinationFolder: ?*IShellItem, pszNewName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.PreNewItem(self, dwFlags, psiDestinationFolder, pszNewName);
    }
    pub fn PostNewItem(self: *const IFileOperationProgressSink, dwFlags: u32, psiDestinationFolder: ?*IShellItem, pszNewName: ?[*:0]const u16, pszTemplateName: ?[*:0]const u16, dwFileAttributes: u32, hrNew: HRESULT, psiNewItem: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.PostNewItem(self, dwFlags, psiDestinationFolder, pszNewName, pszTemplateName, dwFileAttributes, hrNew, psiNewItem);
    }
    pub fn UpdateProgress(self: *const IFileOperationProgressSink, iWorkTotal: u32, iWorkSoFar: u32) callconv(.Inline) HRESULT {
        return self.vtable.UpdateProgress(self, iWorkTotal, iWorkSoFar);
    }
    pub fn ResetTimer(self: *const IFileOperationProgressSink) callconv(.Inline) HRESULT {
        return self.vtable.ResetTimer(self);
    }
    pub fn PauseTimer(self: *const IFileOperationProgressSink) callconv(.Inline) HRESULT {
        return self.vtable.PauseTimer(self);
    }
    pub fn ResumeTimer(self: *const IFileOperationProgressSink) callconv(.Inline) HRESULT {
        return self.vtable.ResumeTimer(self);
    }
};

pub const SIATTRIBFLAGS = enum(i32) {
    AND = 1,
    OR = 2,
    APPCOMPAT = 3,
    ALLITEMS = 16384,
    pub const MASK = .APPCOMPAT;
};
pub const SIATTRIBFLAGS_AND = SIATTRIBFLAGS.AND;
pub const SIATTRIBFLAGS_OR = SIATTRIBFLAGS.OR;
pub const SIATTRIBFLAGS_APPCOMPAT = SIATTRIBFLAGS.APPCOMPAT;
pub const SIATTRIBFLAGS_MASK = SIATTRIBFLAGS.APPCOMPAT;
pub const SIATTRIBFLAGS_ALLITEMS = SIATTRIBFLAGS.ALLITEMS;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IShellItemArray_Value = Guid.initString("b63ea76d-1f85-456f-a19c-48159efa858b");
pub const IID_IShellItemArray = &IID_IShellItemArray_Value;
pub const IShellItemArray = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BindToHandler: *const fn(
            self: *const IShellItemArray,
            pbc: ?*IBindCtx,
            bhid: ?*const Guid,
            riid: ?*const Guid,
            ppvOut: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyStore: *const fn(
            self: *const IShellItemArray,
            flags: GETPROPERTYSTOREFLAGS,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyDescriptionList: *const fn(
            self: *const IShellItemArray,
            keyType: ?*const PROPERTYKEY,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributes: *const fn(
            self: *const IShellItemArray,
            AttribFlags: SIATTRIBFLAGS,
            sfgaoMask: u32,
            psfgaoAttribs: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn(
            self: *const IShellItemArray,
            pdwNumItems: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemAt: *const fn(
            self: *const IShellItemArray,
            dwIndex: u32,
            ppsi: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumItems: *const fn(
            self: *const IShellItemArray,
            ppenumShellItems: ?*?*IEnumShellItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn BindToHandler(self: *const IShellItemArray, pbc: ?*IBindCtx, bhid: ?*const Guid, riid: ?*const Guid, ppvOut: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.BindToHandler(self, pbc, bhid, riid, ppvOut);
    }
    pub fn GetPropertyStore(self: *const IShellItemArray, flags: GETPROPERTYSTOREFLAGS, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyStore(self, flags, riid, ppv);
    }
    pub fn GetPropertyDescriptionList(self: *const IShellItemArray, keyType: ?*const PROPERTYKEY, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyDescriptionList(self, keyType, riid, ppv);
    }
    pub fn GetAttributes(self: *const IShellItemArray, AttribFlags: SIATTRIBFLAGS, sfgaoMask: u32, psfgaoAttribs: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetAttributes(self, AttribFlags, sfgaoMask, psfgaoAttribs);
    }
    pub fn GetCount(self: *const IShellItemArray, pdwNumItems: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCount(self, pdwNumItems);
    }
    pub fn GetItemAt(self: *const IShellItemArray, dwIndex: u32, ppsi: ?*?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.GetItemAt(self, dwIndex, ppsi);
    }
    pub fn EnumItems(self: *const IShellItemArray, ppenumShellItems: ?*?*IEnumShellItems) callconv(.Inline) HRESULT {
        return self.vtable.EnumItems(self, ppenumShellItems);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IInitializeWithItem_Value = Guid.initString("7f73be3f-fb79-493c-a6c7-7ee14e245841");
pub const IID_IInitializeWithItem = &IID_IInitializeWithItem_Value;
pub const IInitializeWithItem = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn(
            self: *const IInitializeWithItem,
            psi: ?*IShellItem,
            grfMode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IInitializeWithItem, psi: ?*IShellItem, grfMode: u32) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, psi, grfMode);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IObjectWithSelection_Value = Guid.initString("1c9cd5bb-98e9-4491-a60f-31aacc72b83c");
pub const IID_IObjectWithSelection = &IID_IObjectWithSelection_Value;
pub const IObjectWithSelection = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetSelection: *const fn(
            self: *const IObjectWithSelection,
            psia: ?*IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelection: *const fn(
            self: *const IObjectWithSelection,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetSelection(self: *const IObjectWithSelection, psia: ?*IShellItemArray) callconv(.Inline) HRESULT {
        return self.vtable.SetSelection(self, psia);
    }
    pub fn GetSelection(self: *const IObjectWithSelection, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetSelection(self, riid, ppv);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IObjectWithBackReferences_Value = Guid.initString("321a6a6a-d61f-4bf3-97ae-14be2986bb36");
pub const IID_IObjectWithBackReferences = &IID_IObjectWithBackReferences_Value;
pub const IObjectWithBackReferences = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RemoveBackReferences: *const fn(
            self: *const IObjectWithBackReferences,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn RemoveBackReferences(self: *const IObjectWithBackReferences) callconv(.Inline) HRESULT {
        return self.vtable.RemoveBackReferences(self);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ICategoryProvider_Value = Guid.initString("9af64809-5864-4c26-a720-c1f78c086ee3");
pub const IID_ICategoryProvider = &IID_ICategoryProvider_Value;
pub const ICategoryProvider = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CanCategorizeOnSCID: *const fn(
            self: *const ICategoryProvider,
            pscid: ?*const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultCategory: *const fn(
            self: *const ICategoryProvider,
            pguid: ?*Guid,
            pscid: ?*PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCategoryForSCID: *const fn(
            self: *const ICategoryProvider,
            pscid: ?*const PROPERTYKEY,
            pguid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumCategories: *const fn(
            self: *const ICategoryProvider,
            penum: ?*?*IEnumGUID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCategoryName: *const fn(
            self: *const ICategoryProvider,
            pguid: ?*const Guid,
            pszName: [*:0]u16,
            cch: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCategory: *const fn(
            self: *const ICategoryProvider,
            pguid: ?*const Guid,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CanCategorizeOnSCID(self: *const ICategoryProvider, pscid: ?*const PROPERTYKEY) callconv(.Inline) HRESULT {
        return self.vtable.CanCategorizeOnSCID(self, pscid);
    }
    pub fn GetDefaultCategory(self: *const ICategoryProvider, pguid: ?*Guid, pscid: ?*PROPERTYKEY) callconv(.Inline) HRESULT {
        return self.vtable.GetDefaultCategory(self, pguid, pscid);
    }
    pub fn GetCategoryForSCID(self: *const ICategoryProvider, pscid: ?*const PROPERTYKEY, pguid: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetCategoryForSCID(self, pscid, pguid);
    }
    pub fn EnumCategories(self: *const ICategoryProvider, penum: ?*?*IEnumGUID) callconv(.Inline) HRESULT {
        return self.vtable.EnumCategories(self, penum);
    }
    pub fn GetCategoryName(self: *const ICategoryProvider, pguid: ?*const Guid, pszName: [*:0]u16, cch: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCategoryName(self, pguid, pszName, cch);
    }
    pub fn CreateCategory(self: *const ICategoryProvider, pguid: ?*const Guid, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.CreateCategory(self, pguid, riid, ppv);
    }
};

pub const CATEGORYINFO_FLAGS = enum(i32) {
    NORMAL = 0,
    COLLAPSED = 1,
    HIDDEN = 2,
    EXPANDED = 4,
    NOHEADER = 8,
    NOTCOLLAPSIBLE = 16,
    NOHEADERCOUNT = 32,
    SUBSETTED = 64,
    SEPARATE_IMAGES = 128,
    SHOWEMPTY = 256,
};
pub const CATINFO_NORMAL = CATEGORYINFO_FLAGS.NORMAL;
pub const CATINFO_COLLAPSED = CATEGORYINFO_FLAGS.COLLAPSED;
pub const CATINFO_HIDDEN = CATEGORYINFO_FLAGS.HIDDEN;
pub const CATINFO_EXPANDED = CATEGORYINFO_FLAGS.EXPANDED;
pub const CATINFO_NOHEADER = CATEGORYINFO_FLAGS.NOHEADER;
pub const CATINFO_NOTCOLLAPSIBLE = CATEGORYINFO_FLAGS.NOTCOLLAPSIBLE;
pub const CATINFO_NOHEADERCOUNT = CATEGORYINFO_FLAGS.NOHEADERCOUNT;
pub const CATINFO_SUBSETTED = CATEGORYINFO_FLAGS.SUBSETTED;
pub const CATINFO_SEPARATE_IMAGES = CATEGORYINFO_FLAGS.SEPARATE_IMAGES;
pub const CATINFO_SHOWEMPTY = CATEGORYINFO_FLAGS.SHOWEMPTY;

pub const CATSORT_FLAGS = enum(i32) {
    DEFAULT = 0,
    NAME = 1,
};
pub const CATSORT_DEFAULT = CATSORT_FLAGS.DEFAULT;
pub const CATSORT_NAME = CATSORT_FLAGS.NAME;

pub const CATEGORY_INFO = extern struct {
    cif: CATEGORYINFO_FLAGS,
    wszName: [260]u16,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ICategorizer_Value = Guid.initString("a3b14589-9174-49a8-89a3-06a1ae2b9ba7");
pub const IID_ICategorizer = &IID_ICategorizer_Value;
pub const ICategorizer = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDescription: *const fn(
            self: *const ICategorizer,
            pszDesc: [*:0]u16,
            cch: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCategory: *const fn(
            self: *const ICategorizer,
            cidl: u32,
            apidl: [*]?*ITEMIDLIST,
            rgCategoryIds: [*]u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCategoryInfo: *const fn(
            self: *const ICategorizer,
            dwCategoryId: u32,
            pci: ?*CATEGORY_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CompareCategory: *const fn(
            self: *const ICategorizer,
            csfFlags: CATSORT_FLAGS,
            dwCategoryId1: u32,
            dwCategoryId2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetDescription(self: *const ICategorizer, pszDesc: [*:0]u16, cch: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetDescription(self, pszDesc, cch);
    }
    pub fn GetCategory(self: *const ICategorizer, cidl: u32, apidl: [*]?*ITEMIDLIST, rgCategoryIds: [*]u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCategory(self, cidl, apidl, rgCategoryIds);
    }
    pub fn GetCategoryInfo(self: *const ICategorizer, dwCategoryId: u32, pci: ?*CATEGORY_INFO) callconv(.Inline) HRESULT {
        return self.vtable.GetCategoryInfo(self, dwCategoryId, pci);
    }
    pub fn CompareCategory(self: *const ICategorizer, csfFlags: CATSORT_FLAGS, dwCategoryId1: u32, dwCategoryId2: u32) callconv(.Inline) HRESULT {
        return self.vtable.CompareCategory(self, csfFlags, dwCategoryId1, dwCategoryId2);
    }
};

pub const SHDRAGIMAGE = extern struct {
    sizeDragImage: SIZE,
    ptOffset: POINT,
    hbmpDragImage: ?HBITMAP,
    crColorKey: u32,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IDropTargetHelper_Value = Guid.initString("4657278b-411b-11d2-839a-00c04fd918d0");
pub const IID_IDropTargetHelper = &IID_IDropTargetHelper_Value;
pub const IDropTargetHelper = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DragEnter: *const fn(
            self: *const IDropTargetHelper,
            hwndTarget: ?HWND,
            pDataObject: ?*IDataObject,
            ppt: ?*POINT,
            dwEffect: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DragLeave: *const fn(
            self: *const IDropTargetHelper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DragOver: *const fn(
            self: *const IDropTargetHelper,
            ppt: ?*POINT,
            dwEffect: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Drop: *const fn(
            self: *const IDropTargetHelper,
            pDataObject: ?*IDataObject,
            ppt: ?*POINT,
            dwEffect: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Show: *const fn(
            self: *const IDropTargetHelper,
            fShow: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn DragEnter(self: *const IDropTargetHelper, hwndTarget: ?HWND, pDataObject: ?*IDataObject, ppt: ?*POINT, dwEffect: u32) callconv(.Inline) HRESULT {
        return self.vtable.DragEnter(self, hwndTarget, pDataObject, ppt, dwEffect);
    }
    pub fn DragLeave(self: *const IDropTargetHelper) callconv(.Inline) HRESULT {
        return self.vtable.DragLeave(self);
    }
    pub fn DragOver(self: *const IDropTargetHelper, ppt: ?*POINT, dwEffect: u32) callconv(.Inline) HRESULT {
        return self.vtable.DragOver(self, ppt, dwEffect);
    }
    pub fn Drop(self: *const IDropTargetHelper, pDataObject: ?*IDataObject, ppt: ?*POINT, dwEffect: u32) callconv(.Inline) HRESULT {
        return self.vtable.Drop(self, pDataObject, ppt, dwEffect);
    }
    pub fn Show(self: *const IDropTargetHelper, fShow: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.Show(self, fShow);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IDragSourceHelper_Value = Guid.initString("de5bf786-477a-11d2-839d-00c04fd918d0");
pub const IID_IDragSourceHelper = &IID_IDragSourceHelper_Value;
pub const IDragSourceHelper = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InitializeFromBitmap: *const fn(
            self: *const IDragSourceHelper,
            pshdi: ?*SHDRAGIMAGE,
            pDataObject: ?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromWindow: *const fn(
            self: *const IDragSourceHelper,
            hwnd: ?HWND,
            ppt: ?*POINT,
            pDataObject: ?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn InitializeFromBitmap(self: *const IDragSourceHelper, pshdi: ?*SHDRAGIMAGE, pDataObject: ?*IDataObject) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromBitmap(self, pshdi, pDataObject);
    }
    pub fn InitializeFromWindow(self: *const IDragSourceHelper, hwnd: ?HWND, ppt: ?*POINT, pDataObject: ?*IDataObject) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromWindow(self, hwnd, ppt, pDataObject);
    }
};

pub const SLR_FLAGS = enum(i32) {
    NONE = 0,
    NO_UI = 1,
    ANY_MATCH = 2,
    UPDATE = 4,
    NOUPDATE = 8,
    NOSEARCH = 16,
    NOTRACK = 32,
    NOLINKINFO = 64,
    INVOKE_MSI = 128,
    NO_UI_WITH_MSG_PUMP = 257,
    OFFER_DELETE_WITHOUT_FILE = 512,
    KNOWNFOLDER = 1024,
    MACHINE_IN_LOCAL_TARGET = 2048,
    UPDATE_MACHINE_AND_SID = 4096,
    NO_OBJECT_ID = 8192,
};
pub const SLR_NONE = SLR_FLAGS.NONE;
pub const SLR_NO_UI = SLR_FLAGS.NO_UI;
pub const SLR_ANY_MATCH = SLR_FLAGS.ANY_MATCH;
pub const SLR_UPDATE = SLR_FLAGS.UPDATE;
pub const SLR_NOUPDATE = SLR_FLAGS.NOUPDATE;
pub const SLR_NOSEARCH = SLR_FLAGS.NOSEARCH;
pub const SLR_NOTRACK = SLR_FLAGS.NOTRACK;
pub const SLR_NOLINKINFO = SLR_FLAGS.NOLINKINFO;
pub const SLR_INVOKE_MSI = SLR_FLAGS.INVOKE_MSI;
pub const SLR_NO_UI_WITH_MSG_PUMP = SLR_FLAGS.NO_UI_WITH_MSG_PUMP;
pub const SLR_OFFER_DELETE_WITHOUT_FILE = SLR_FLAGS.OFFER_DELETE_WITHOUT_FILE;
pub const SLR_KNOWNFOLDER = SLR_FLAGS.KNOWNFOLDER;
pub const SLR_MACHINE_IN_LOCAL_TARGET = SLR_FLAGS.MACHINE_IN_LOCAL_TARGET;
pub const SLR_UPDATE_MACHINE_AND_SID = SLR_FLAGS.UPDATE_MACHINE_AND_SID;
pub const SLR_NO_OBJECT_ID = SLR_FLAGS.NO_OBJECT_ID;

pub const SLGP_FLAGS = enum(i32) {
    SHORTPATH = 1,
    UNCPRIORITY = 2,
    RAWPATH = 4,
    RELATIVEPRIORITY = 8,
};
pub const SLGP_SHORTPATH = SLGP_FLAGS.SHORTPATH;
pub const SLGP_UNCPRIORITY = SLGP_FLAGS.UNCPRIORITY;
pub const SLGP_RAWPATH = SLGP_FLAGS.RAWPATH;
pub const SLGP_RELATIVEPRIORITY = SLGP_FLAGS.RELATIVEPRIORITY;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellLinkA_Value = Guid.initString("000214ee-0000-0000-c000-000000000046");
pub const IID_IShellLinkA = &IID_IShellLinkA_Value;
pub const IShellLinkA = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPath: *const fn(
            self: *const IShellLinkA,
            pszFile: [*:0]u8,
            cch: i32,
            pfd: ?*WIN32_FIND_DATAA,
            fFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIDList: *const fn(
            self: *const IShellLinkA,
            ppidl: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIDList: *const fn(
            self: *const IShellLinkA,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: *const fn(
            self: *const IShellLinkA,
            pszName: [*:0]u8,
            cch: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDescription: *const fn(
            self: *const IShellLinkA,
            pszName: ?[*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWorkingDirectory: *const fn(
            self: *const IShellLinkA,
            pszDir: [*:0]u8,
            cch: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWorkingDirectory: *const fn(
            self: *const IShellLinkA,
            pszDir: ?[*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetArguments: *const fn(
            self: *const IShellLinkA,
            pszArgs: [*:0]u8,
            cch: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetArguments: *const fn(
            self: *const IShellLinkA,
            pszArgs: ?[*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHotkey: *const fn(
            self: *const IShellLinkA,
            pwHotkey: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHotkey: *const fn(
            self: *const IShellLinkA,
            wHotkey: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShowCmd: *const fn(
            self: *const IShellLinkA,
            piShowCmd: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetShowCmd: *const fn(
            self: *const IShellLinkA,
            iShowCmd: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIconLocation: *const fn(
            self: *const IShellLinkA,
            pszIconPath: [*:0]u8,
            cch: i32,
            piIcon: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIconLocation: *const fn(
            self: *const IShellLinkA,
            pszIconPath: ?[*:0]const u8,
            iIcon: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRelativePath: *const fn(
            self: *const IShellLinkA,
            pszPathRel: ?[*:0]const u8,
            dwReserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resolve: *const fn(
            self: *const IShellLinkA,
            hwnd: ?HWND,
            fFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPath: *const fn(
            self: *const IShellLinkA,
            pszFile: ?[*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetPath(self: *const IShellLinkA, pszFile: [*:0]u8, cch: i32, pfd: ?*WIN32_FIND_DATAA, fFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetPath(self, pszFile, cch, pfd, fFlags);
    }
    pub fn GetIDList(self: *const IShellLinkA, ppidl: ?*?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.GetIDList(self, ppidl);
    }
    pub fn SetIDList(self: *const IShellLinkA, pidl: ?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.SetIDList(self, pidl);
    }
    pub fn GetDescription(self: *const IShellLinkA, pszName: [*:0]u8, cch: i32) callconv(.Inline) HRESULT {
        return self.vtable.GetDescription(self, pszName, cch);
    }
    pub fn SetDescription(self: *const IShellLinkA, pszName: ?[*:0]const u8) callconv(.Inline) HRESULT {
        return self.vtable.SetDescription(self, pszName);
    }
    pub fn GetWorkingDirectory(self: *const IShellLinkA, pszDir: [*:0]u8, cch: i32) callconv(.Inline) HRESULT {
        return self.vtable.GetWorkingDirectory(self, pszDir, cch);
    }
    pub fn SetWorkingDirectory(self: *const IShellLinkA, pszDir: ?[*:0]const u8) callconv(.Inline) HRESULT {
        return self.vtable.SetWorkingDirectory(self, pszDir);
    }
    pub fn GetArguments(self: *const IShellLinkA, pszArgs: [*:0]u8, cch: i32) callconv(.Inline) HRESULT {
        return self.vtable.GetArguments(self, pszArgs, cch);
    }
    pub fn SetArguments(self: *const IShellLinkA, pszArgs: ?[*:0]const u8) callconv(.Inline) HRESULT {
        return self.vtable.SetArguments(self, pszArgs);
    }
    pub fn GetHotkey(self: *const IShellLinkA, pwHotkey: ?*u16) callconv(.Inline) HRESULT {
        return self.vtable.GetHotkey(self, pwHotkey);
    }
    pub fn SetHotkey(self: *const IShellLinkA, wHotkey: u16) callconv(.Inline) HRESULT {
        return self.vtable.SetHotkey(self, wHotkey);
    }
    pub fn GetShowCmd(self: *const IShellLinkA, piShowCmd: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetShowCmd(self, piShowCmd);
    }
    pub fn SetShowCmd(self: *const IShellLinkA, iShowCmd: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetShowCmd(self, iShowCmd);
    }
    pub fn GetIconLocation(self: *const IShellLinkA, pszIconPath: [*:0]u8, cch: i32, piIcon: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetIconLocation(self, pszIconPath, cch, piIcon);
    }
    pub fn SetIconLocation(self: *const IShellLinkA, pszIconPath: ?[*:0]const u8, iIcon: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetIconLocation(self, pszIconPath, iIcon);
    }
    pub fn SetRelativePath(self: *const IShellLinkA, pszPathRel: ?[*:0]const u8, dwReserved: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetRelativePath(self, pszPathRel, dwReserved);
    }
    pub fn Resolve(self: *const IShellLinkA, hwnd: ?HWND, fFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.Resolve(self, hwnd, fFlags);
    }
    pub fn SetPath(self: *const IShellLinkA, pszFile: ?[*:0]const u8) callconv(.Inline) HRESULT {
        return self.vtable.SetPath(self, pszFile);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellLinkW_Value = Guid.initString("000214f9-0000-0000-c000-000000000046");
pub const IID_IShellLinkW = &IID_IShellLinkW_Value;
pub const IShellLinkW = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPath: *const fn(
            self: *const IShellLinkW,
            pszFile: [*:0]u16,
            cch: i32,
            pfd: ?*WIN32_FIND_DATAW,
            fFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIDList: *const fn(
            self: *const IShellLinkW,
            ppidl: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIDList: *const fn(
            self: *const IShellLinkW,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: *const fn(
            self: *const IShellLinkW,
            pszName: [*:0]u16,
            cch: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDescription: *const fn(
            self: *const IShellLinkW,
            pszName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWorkingDirectory: *const fn(
            self: *const IShellLinkW,
            pszDir: [*:0]u16,
            cch: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWorkingDirectory: *const fn(
            self: *const IShellLinkW,
            pszDir: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetArguments: *const fn(
            self: *const IShellLinkW,
            pszArgs: [*:0]u16,
            cch: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetArguments: *const fn(
            self: *const IShellLinkW,
            pszArgs: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHotkey: *const fn(
            self: *const IShellLinkW,
            pwHotkey: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHotkey: *const fn(
            self: *const IShellLinkW,
            wHotkey: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShowCmd: *const fn(
            self: *const IShellLinkW,
            piShowCmd: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetShowCmd: *const fn(
            self: *const IShellLinkW,
            iShowCmd: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIconLocation: *const fn(
            self: *const IShellLinkW,
            pszIconPath: [*:0]u16,
            cch: i32,
            piIcon: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIconLocation: *const fn(
            self: *const IShellLinkW,
            pszIconPath: ?[*:0]const u16,
            iIcon: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRelativePath: *const fn(
            self: *const IShellLinkW,
            pszPathRel: ?[*:0]const u16,
            dwReserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resolve: *const fn(
            self: *const IShellLinkW,
            hwnd: ?HWND,
            fFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPath: *const fn(
            self: *const IShellLinkW,
            pszFile: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetPath(self: *const IShellLinkW, pszFile: [*:0]u16, cch: i32, pfd: ?*WIN32_FIND_DATAW, fFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetPath(self, pszFile, cch, pfd, fFlags);
    }
    pub fn GetIDList(self: *const IShellLinkW, ppidl: ?*?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.GetIDList(self, ppidl);
    }
    pub fn SetIDList(self: *const IShellLinkW, pidl: ?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.SetIDList(self, pidl);
    }
    pub fn GetDescription(self: *const IShellLinkW, pszName: [*:0]u16, cch: i32) callconv(.Inline) HRESULT {
        return self.vtable.GetDescription(self, pszName, cch);
    }
    pub fn SetDescription(self: *const IShellLinkW, pszName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetDescription(self, pszName);
    }
    pub fn GetWorkingDirectory(self: *const IShellLinkW, pszDir: [*:0]u16, cch: i32) callconv(.Inline) HRESULT {
        return self.vtable.GetWorkingDirectory(self, pszDir, cch);
    }
    pub fn SetWorkingDirectory(self: *const IShellLinkW, pszDir: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetWorkingDirectory(self, pszDir);
    }
    pub fn GetArguments(self: *const IShellLinkW, pszArgs: [*:0]u16, cch: i32) callconv(.Inline) HRESULT {
        return self.vtable.GetArguments(self, pszArgs, cch);
    }
    pub fn SetArguments(self: *const IShellLinkW, pszArgs: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetArguments(self, pszArgs);
    }
    pub fn GetHotkey(self: *const IShellLinkW, pwHotkey: ?*u16) callconv(.Inline) HRESULT {
        return self.vtable.GetHotkey(self, pwHotkey);
    }
    pub fn SetHotkey(self: *const IShellLinkW, wHotkey: u16) callconv(.Inline) HRESULT {
        return self.vtable.SetHotkey(self, wHotkey);
    }
    pub fn GetShowCmd(self: *const IShellLinkW, piShowCmd: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetShowCmd(self, piShowCmd);
    }
    pub fn SetShowCmd(self: *const IShellLinkW, iShowCmd: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetShowCmd(self, iShowCmd);
    }
    pub fn GetIconLocation(self: *const IShellLinkW, pszIconPath: [*:0]u16, cch: i32, piIcon: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetIconLocation(self, pszIconPath, cch, piIcon);
    }
    pub fn SetIconLocation(self: *const IShellLinkW, pszIconPath: ?[*:0]const u16, iIcon: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetIconLocation(self, pszIconPath, iIcon);
    }
    pub fn SetRelativePath(self: *const IShellLinkW, pszPathRel: ?[*:0]const u16, dwReserved: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetRelativePath(self, pszPathRel, dwReserved);
    }
    pub fn Resolve(self: *const IShellLinkW, hwnd: ?HWND, fFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.Resolve(self, hwnd, fFlags);
    }
    pub fn SetPath(self: *const IShellLinkW, pszFile: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetPath(self, pszFile);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IShellLinkDataList_Value = Guid.initString("45e2b4ae-b1c3-11d0-b92f-00a0c90312e1");
pub const IID_IShellLinkDataList = &IID_IShellLinkDataList_Value;
pub const IShellLinkDataList = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddDataBlock: *const fn(
            self: *const IShellLinkDataList,
            pDataBlock: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyDataBlock: *const fn(
            self: *const IShellLinkDataList,
            dwSig: u32,
            ppDataBlock: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveDataBlock: *const fn(
            self: *const IShellLinkDataList,
            dwSig: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: *const fn(
            self: *const IShellLinkDataList,
            pdwFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFlags: *const fn(
            self: *const IShellLinkDataList,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn AddDataBlock(self: *const IShellLinkDataList, pDataBlock: ?*anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.AddDataBlock(self, pDataBlock);
    }
    pub fn CopyDataBlock(self: *const IShellLinkDataList, dwSig: u32, ppDataBlock: ?*?*anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.CopyDataBlock(self, dwSig, ppDataBlock);
    }
    pub fn RemoveDataBlock(self: *const IShellLinkDataList, dwSig: u32) callconv(.Inline) HRESULT {
        return self.vtable.RemoveDataBlock(self, dwSig);
    }
    pub fn GetFlags(self: *const IShellLinkDataList, pdwFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetFlags(self, pdwFlags);
    }
    pub fn SetFlags(self: *const IShellLinkDataList, dwFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetFlags(self, dwFlags);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IResolveShellLink_Value = Guid.initString("5cd52983-9449-11d2-963a-00c04f79adf0");
pub const IID_IResolveShellLink = &IID_IResolveShellLink_Value;
pub const IResolveShellLink = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ResolveShellLink: *const fn(
            self: *const IResolveShellLink,
            punkLink: ?*IUnknown,
            hwnd: ?HWND,
            fFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn ResolveShellLink(self: *const IResolveShellLink, punkLink: ?*IUnknown, hwnd: ?HWND, fFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.ResolveShellLink(self, punkLink, hwnd, fFlags);
    }
};

pub const _SPINITF = enum(i32) {
    NORMAL = 0,
    MODAL = 1,
    NOMINIMIZE = 8,
};
pub const SPINITF_NORMAL = _SPINITF.NORMAL;
pub const SPINITF_MODAL = _SPINITF.MODAL;
pub const SPINITF_NOMINIMIZE = _SPINITF.NOMINIMIZE;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IActionProgressDialog_Value = Guid.initString("49ff1172-eadc-446d-9285-156453a6431c");
pub const IID_IActionProgressDialog = &IID_IActionProgressDialog_Value;
pub const IActionProgressDialog = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn(
            self: *const IActionProgressDialog,
            flags: u32,
            pszTitle: ?[*:0]const u16,
            pszCancel: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn(
            self: *const IActionProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IActionProgressDialog, flags: u32, pszTitle: ?[*:0]const u16, pszCancel: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, flags, pszTitle, pszCancel);
    }
    pub fn Stop(self: *const IActionProgressDialog) callconv(.Inline) HRESULT {
        return self.vtable.Stop(self);
    }
};

pub const _SPBEGINF = enum(i32) {
    NORMAL = 0,
    AUTOTIME = 2,
    NOPROGRESSBAR = 16,
    MARQUEEPROGRESS = 32,
    NOCANCELBUTTON = 64,
};
pub const SPBEGINF_NORMAL = _SPBEGINF.NORMAL;
pub const SPBEGINF_AUTOTIME = _SPBEGINF.AUTOTIME;
pub const SPBEGINF_NOPROGRESSBAR = _SPBEGINF.NOPROGRESSBAR;
pub const SPBEGINF_MARQUEEPROGRESS = _SPBEGINF.MARQUEEPROGRESS;
pub const SPBEGINF_NOCANCELBUTTON = _SPBEGINF.NOCANCELBUTTON;

pub const SPACTION = enum(i32) {
    NONE = 0,
    MOVING = 1,
    COPYING = 2,
    RECYCLING = 3,
    APPLYINGATTRIBS = 4,
    DOWNLOADING = 5,
    SEARCHING_INTERNET = 6,
    CALCULATING = 7,
    UPLOADING = 8,
    SEARCHING_FILES = 9,
    DELETING = 10,
    RENAMING = 11,
    FORMATTING = 12,
    COPY_MOVING = 13,
};
pub const SPACTION_NONE = SPACTION.NONE;
pub const SPACTION_MOVING = SPACTION.MOVING;
pub const SPACTION_COPYING = SPACTION.COPYING;
pub const SPACTION_RECYCLING = SPACTION.RECYCLING;
pub const SPACTION_APPLYINGATTRIBS = SPACTION.APPLYINGATTRIBS;
pub const SPACTION_DOWNLOADING = SPACTION.DOWNLOADING;
pub const SPACTION_SEARCHING_INTERNET = SPACTION.SEARCHING_INTERNET;
pub const SPACTION_CALCULATING = SPACTION.CALCULATING;
pub const SPACTION_UPLOADING = SPACTION.UPLOADING;
pub const SPACTION_SEARCHING_FILES = SPACTION.SEARCHING_FILES;
pub const SPACTION_DELETING = SPACTION.DELETING;
pub const SPACTION_RENAMING = SPACTION.RENAMING;
pub const SPACTION_FORMATTING = SPACTION.FORMATTING;
pub const SPACTION_COPY_MOVING = SPACTION.COPY_MOVING;

pub const SPTEXT = enum(i32) {
    SCRIPTION = 1,
    TAIL = 2,
};
pub const SPTEXT_ACTIONDESCRIPTION = SPTEXT.SCRIPTION;
pub const SPTEXT_ACTIONDETAIL = SPTEXT.TAIL;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IActionProgress_Value = Guid.initString("49ff1173-eadc-446d-9285-156453a6431c");
pub const IID_IActionProgress = &IID_IActionProgress_Value;
pub const IActionProgress = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Begin: *const fn(
            self: *const IActionProgress,
            action: SPACTION,
            flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateProgress: *const fn(
            self: *const IActionProgress,
            ulCompleted: u64,
            ulTotal: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateText: *const fn(
            self: *const IActionProgress,
            sptext: SPTEXT,
            pszText: ?[*:0]const u16,
            fMayCompact: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryCancel: *const fn(
            self: *const IActionProgress,
            pfCancelled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetCancel: *const fn(
            self: *const IActionProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        End: *const fn(
            self: *const IActionProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Begin(self: *const IActionProgress, action: SPACTION, flags: u32) callconv(.Inline) HRESULT {
        return self.vtable.Begin(self, action, flags);
    }
    pub fn UpdateProgress(self: *const IActionProgress, ulCompleted: u64, ulTotal: u64) callconv(.Inline) HRESULT {
        return self.vtable.UpdateProgress(self, ulCompleted, ulTotal);
    }
    pub fn UpdateText(self: *const IActionProgress, sptext: SPTEXT, pszText: ?[*:0]const u16, fMayCompact: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.UpdateText(self, sptext, pszText, fMayCompact);
    }
    pub fn QueryCancel(self: *const IActionProgress, pfCancelled: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.QueryCancel(self, pfCancelled);
    }
    pub fn ResetCancel(self: *const IActionProgress) callconv(.Inline) HRESULT {
        return self.vtable.ResetCancel(self);
    }
    pub fn End(self: *const IActionProgress) callconv(.Inline) HRESULT {
        return self.vtable.End(self);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellExtInit_Value = Guid.initString("000214e8-0000-0000-c000-000000000046");
pub const IID_IShellExtInit = &IID_IShellExtInit_Value;
pub const IShellExtInit = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn(
            self: *const IShellExtInit,
            pidlFolder: ?*ITEMIDLIST,
            pdtobj: ?*IDataObject,
            hkeyProgID: ?HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IShellExtInit, pidlFolder: ?*ITEMIDLIST, pdtobj: ?*IDataObject, hkeyProgID: ?HKEY) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, pidlFolder, pdtobj, hkeyProgID);
    }
};

pub const _EXPPS = enum(i32) {
    S = 1,
};
pub const EXPPS_FILETYPES = _EXPPS.S;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellPropSheetExt_Value = Guid.initString("000214e9-0000-0000-c000-000000000046");
pub const IID_IShellPropSheetExt = &IID_IShellPropSheetExt_Value;
pub const IShellPropSheetExt = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddPages: *const fn(
            self: *const IShellPropSheetExt,
            pfnAddPage: ?LPFNSVADDPROPSHEETPAGE,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReplacePage: *const fn(
            self: *const IShellPropSheetExt,
            uPageID: u32,
            pfnReplaceWith: ?LPFNSVADDPROPSHEETPAGE,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn AddPages(self: *const IShellPropSheetExt, pfnAddPage: ?LPFNSVADDPROPSHEETPAGE, lParam: LPARAM) callconv(.Inline) HRESULT {
        return self.vtable.AddPages(self, pfnAddPage, lParam);
    }
    pub fn ReplacePage(self: *const IShellPropSheetExt, uPageID: u32, pfnReplaceWith: ?LPFNSVADDPROPSHEETPAGE, lParam: LPARAM) callconv(.Inline) HRESULT {
        return self.vtable.ReplacePage(self, uPageID, pfnReplaceWith, lParam);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IRemoteComputer_Value = Guid.initString("000214fe-0000-0000-c000-000000000046");
pub const IID_IRemoteComputer = &IID_IRemoteComputer_Value;
pub const IRemoteComputer = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn(
            self: *const IRemoteComputer,
            pszMachine: ?[*:0]const u16,
            bEnumerating: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IRemoteComputer, pszMachine: ?[*:0]const u16, bEnumerating: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, pszMachine, bEnumerating);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IQueryContinue_Value = Guid.initString("7307055c-b24a-486b-9f25-163e597a28a9");
pub const IID_IQueryContinue = &IID_IQueryContinue_Value;
pub const IQueryContinue = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryContinue: *const fn(
            self: *const IQueryContinue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn QueryContinue(self: *const IQueryContinue) callconv(.Inline) HRESULT {
        return self.vtable.QueryContinue(self);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IObjectWithCancelEvent_Value = Guid.initString("f279b885-0ae9-4b85-ac06-ddecf9408941");
pub const IID_IObjectWithCancelEvent = &IID_IObjectWithCancelEvent_Value;
pub const IObjectWithCancelEvent = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCancelEvent: *const fn(
            self: *const IObjectWithCancelEvent,
            phEvent: ?*?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetCancelEvent(self: *const IObjectWithCancelEvent, phEvent: ?*?HANDLE) callconv(.Inline) HRESULT {
        return self.vtable.GetCancelEvent(self, phEvent);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IUserNotification_Value = Guid.initString("ba9711ba-5893-4787-a7e1-41277151550b");
pub const IID_IUserNotification = &IID_IUserNotification_Value;
pub const IUserNotification = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetBalloonInfo: *const fn(
            self: *const IUserNotification,
            pszTitle: ?[*:0]const u16,
            pszText: ?[*:0]const u16,
            dwInfoFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBalloonRetry: *const fn(
            self: *const IUserNotification,
            dwShowTime: u32,
            dwInterval: u32,
            cRetryCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIconInfo: *const fn(
            self: *const IUserNotification,
            hIcon: ?HICON,
            pszToolTip: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Show: *const fn(
            self: *const IUserNotification,
            pqc: ?*IQueryContinue,
            dwContinuePollInterval: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PlaySound: *const fn(
            self: *const IUserNotification,
            pszSoundName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetBalloonInfo(self: *const IUserNotification, pszTitle: ?[*:0]const u16, pszText: ?[*:0]const u16, dwInfoFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetBalloonInfo(self, pszTitle, pszText, dwInfoFlags);
    }
    pub fn SetBalloonRetry(self: *const IUserNotification, dwShowTime: u32, dwInterval: u32, cRetryCount: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetBalloonRetry(self, dwShowTime, dwInterval, cRetryCount);
    }
    pub fn SetIconInfo(self: *const IUserNotification, hIcon: ?HICON, pszToolTip: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetIconInfo(self, hIcon, pszToolTip);
    }
    pub fn Show(self: *const IUserNotification, pqc: ?*IQueryContinue, dwContinuePollInterval: u32) callconv(.Inline) HRESULT {
        return self.vtable.Show(self, pqc, dwContinuePollInterval);
    }
    pub fn PlaySound(self: *const IUserNotification, pszSoundName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.PlaySound(self, pszSoundName);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IItemNameLimits_Value = Guid.initString("1df0d7f1-b267-4d28-8b10-12e23202a5c4");
pub const IID_IItemNameLimits = &IID_IItemNameLimits_Value;
pub const IItemNameLimits = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetValidCharacters: *const fn(
            self: *const IItemNameLimits,
            ppwszValidChars: ?*?PWSTR,
            ppwszInvalidChars: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxLength: *const fn(
            self: *const IItemNameLimits,
            pszName: ?[*:0]const u16,
            piMaxNameLen: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetValidCharacters(self: *const IItemNameLimits, ppwszValidChars: ?*?PWSTR, ppwszInvalidChars: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetValidCharacters(self, ppwszValidChars, ppwszInvalidChars);
    }
    pub fn GetMaxLength(self: *const IItemNameLimits, pszName: ?[*:0]const u16, piMaxNameLen: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetMaxLength(self, pszName, piMaxNameLen);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISearchFolderItemFactory_Value = Guid.initString("a0ffbc28-5482-4366-be27-3e81e78e06c2");
pub const IID_ISearchFolderItemFactory = &IID_ISearchFolderItemFactory_Value;
pub const ISearchFolderItemFactory = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetDisplayName: *const fn(
            self: *const ISearchFolderItemFactory,
            pszDisplayName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFolderTypeID: *const fn(
            self: *const ISearchFolderItemFactory,
            ftid: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFolderLogicalViewMode: *const fn(
            self: *const ISearchFolderItemFactory,
            flvm: FOLDERLOGICALVIEWMODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIconSize: *const fn(
            self: *const ISearchFolderItemFactory,
            iIconSize: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVisibleColumns: *const fn(
            self: *const ISearchFolderItemFactory,
            cVisibleColumns: u32,
            rgKey: [*]const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSortColumns: *const fn(
            self: *const ISearchFolderItemFactory,
            cSortColumns: u32,
            rgSortColumns: [*]SORTCOLUMN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGroupColumn: *const fn(
            self: *const ISearchFolderItemFactory,
            keyGroup: ?*const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStacks: *const fn(
            self: *const ISearchFolderItemFactory,
            cStackKeys: u32,
            rgStackKeys: [*]PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScope: *const fn(
            self: *const ISearchFolderItemFactory,
            psiaScope: ?*IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCondition: *const fn(
            self: *const ISearchFolderItemFactory,
            pCondition: ?*ICondition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShellItem: *const fn(
            self: *const ISearchFolderItemFactory,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIDList: *const fn(
            self: *const ISearchFolderItemFactory,
            ppidl: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetDisplayName(self: *const ISearchFolderItemFactory, pszDisplayName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetDisplayName(self, pszDisplayName);
    }
    pub fn SetFolderTypeID(self: *const ISearchFolderItemFactory, ftid: Guid) callconv(.Inline) HRESULT {
        return self.vtable.SetFolderTypeID(self, ftid);
    }
    pub fn SetFolderLogicalViewMode(self: *const ISearchFolderItemFactory, flvm: FOLDERLOGICALVIEWMODE) callconv(.Inline) HRESULT {
        return self.vtable.SetFolderLogicalViewMode(self, flvm);
    }
    pub fn SetIconSize(self: *const ISearchFolderItemFactory, iIconSize: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetIconSize(self, iIconSize);
    }
    pub fn SetVisibleColumns(self: *const ISearchFolderItemFactory, cVisibleColumns: u32, rgKey: [*]const PROPERTYKEY) callconv(.Inline) HRESULT {
        return self.vtable.SetVisibleColumns(self, cVisibleColumns, rgKey);
    }
    pub fn SetSortColumns(self: *const ISearchFolderItemFactory, cSortColumns: u32, rgSortColumns: [*]SORTCOLUMN) callconv(.Inline) HRESULT {
        return self.vtable.SetSortColumns(self, cSortColumns, rgSortColumns);
    }
    pub fn SetGroupColumn(self: *const ISearchFolderItemFactory, keyGroup: ?*const PROPERTYKEY) callconv(.Inline) HRESULT {
        return self.vtable.SetGroupColumn(self, keyGroup);
    }
    pub fn SetStacks(self: *const ISearchFolderItemFactory, cStackKeys: u32, rgStackKeys: [*]PROPERTYKEY) callconv(.Inline) HRESULT {
        return self.vtable.SetStacks(self, cStackKeys, rgStackKeys);
    }
    pub fn SetScope(self: *const ISearchFolderItemFactory, psiaScope: ?*IShellItemArray) callconv(.Inline) HRESULT {
        return self.vtable.SetScope(self, psiaScope);
    }
    pub fn SetCondition(self: *const ISearchFolderItemFactory, pCondition: ?*ICondition) callconv(.Inline) HRESULT {
        return self.vtable.SetCondition(self, pCondition);
    }
    pub fn GetShellItem(self: *const ISearchFolderItemFactory, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetShellItem(self, riid, ppv);
    }
    pub fn GetIDList(self: *const ISearchFolderItemFactory, ppidl: ?*?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.GetIDList(self, ppidl);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IExtractImage_Value = Guid.initString("bb2e617c-0920-11d1-9a0b-00c04fc2d6c1");
pub const IID_IExtractImage = &IID_IExtractImage_Value;
pub const IExtractImage = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetLocation: *const fn(
            self: *const IExtractImage,
            pszPathBuffer: [*:0]u16,
            cch: u32,
            pdwPriority: ?*u32,
            prgSize: ?*const SIZE,
            dwRecClrDepth: u32,
            pdwFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Extract: *const fn(
            self: *const IExtractImage,
            phBmpThumbnail: ?*?HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetLocation(self: *const IExtractImage, pszPathBuffer: [*:0]u16, cch: u32, pdwPriority: ?*u32, prgSize: ?*const SIZE, dwRecClrDepth: u32, pdwFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetLocation(self, pszPathBuffer, cch, pdwPriority, prgSize, dwRecClrDepth, pdwFlags);
    }
    pub fn Extract(self: *const IExtractImage, phBmpThumbnail: ?*?HBITMAP) callconv(.Inline) HRESULT {
        return self.vtable.Extract(self, phBmpThumbnail);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IExtractImage2_Value = Guid.initString("953bb1ee-93b4-11d1-98a3-00c04fb687da");
pub const IID_IExtractImage2 = &IID_IExtractImage2_Value;
pub const IExtractImage2 = extern union {
    pub const VTable = extern struct {
        base: IExtractImage.VTable,
        GetDateStamp: *const fn(
            self: *const IExtractImage2,
            pDateStamp: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IExtractImage: IExtractImage,
    IUnknown: IUnknown,
    pub fn GetDateStamp(self: *const IExtractImage2, pDateStamp: ?*FILETIME) callconv(.Inline) HRESULT {
        return self.vtable.GetDateStamp(self, pDateStamp);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IThumbnailHandlerFactory_Value = Guid.initString("e35b4b2e-00da-4bc1-9f13-38bc11f5d417");
pub const IID_IThumbnailHandlerFactory = &IID_IThumbnailHandlerFactory_Value;
pub const IThumbnailHandlerFactory = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetThumbnailHandler: *const fn(
            self: *const IThumbnailHandlerFactory,
            pidlChild: ?*ITEMIDLIST,
            pbc: ?*IBindCtx,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetThumbnailHandler(self: *const IThumbnailHandlerFactory, pidlChild: ?*ITEMIDLIST, pbc: ?*IBindCtx, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetThumbnailHandler(self, pidlChild, pbc, riid, ppv);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IParentAndItem_Value = Guid.initString("b3a4b685-b685-4805-99d9-5dead2873236");
pub const IID_IParentAndItem = &IID_IParentAndItem_Value;
pub const IParentAndItem = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetParentAndItem: *const fn(
            self: *const IParentAndItem,
            pidlParent: ?*ITEMIDLIST,
            psf: ?*IShellFolder,
            pidlChild: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParentAndItem: *const fn(
            self: *const IParentAndItem,
            ppidlParent: ?*?*ITEMIDLIST,
            ppsf: ?*?*IShellFolder,
            ppidlChild: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetParentAndItem(self: *const IParentAndItem, pidlParent: ?*ITEMIDLIST, psf: ?*IShellFolder, pidlChild: ?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.SetParentAndItem(self, pidlParent, psf, pidlChild);
    }
    pub fn GetParentAndItem(self: *const IParentAndItem, ppidlParent: ?*?*ITEMIDLIST, ppsf: ?*?*IShellFolder, ppidlChild: ?*?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.GetParentAndItem(self, ppidlParent, ppsf, ppidlChild);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IDockingWindow_Value = Guid.initString("012dd920-7b26-11d0-8ca9-00a0c92dbfe8");
pub const IID_IDockingWindow = &IID_IDockingWindow_Value;
pub const IDockingWindow = extern union {
    pub const VTable = extern struct {
        base: IOleWindow.VTable,
        ShowDW: *const fn(
            self: *const IDockingWindow,
            fShow: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloseDW: *const fn(
            self: *const IDockingWindow,
            dwReserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResizeBorderDW: *const fn(
            self: *const IDockingWindow,
            prcBorder: ?*RECT,
            punkToolbarSite: ?*IUnknown,
            fReserved: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IOleWindow: IOleWindow,
    IUnknown: IUnknown,
    pub fn ShowDW(self: *const IDockingWindow, fShow: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.ShowDW(self, fShow);
    }
    pub fn CloseDW(self: *const IDockingWindow, dwReserved: u32) callconv(.Inline) HRESULT {
        return self.vtable.CloseDW(self, dwReserved);
    }
    pub fn ResizeBorderDW(self: *const IDockingWindow, prcBorder: ?*RECT, punkToolbarSite: ?*IUnknown, fReserved: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.ResizeBorderDW(self, prcBorder, punkToolbarSite, fReserved);
    }
};

pub const DESKBANDINFO = extern struct {
    dwMask: u32,
    ptMinSize: POINTL,
    ptMaxSize: POINTL,
    ptIntegral: POINTL,
    ptActual: POINTL,
    wszTitle: [256]u16,
    dwModeFlags: u32,
    crBkgnd: u32,
};

pub const DESKBANDCID = enum(i32) {
    BANDINFOCHANGED = 0,
    SHOWONLY = 1,
    MAXIMIZEBAND = 2,
    PUSHCHEVRON = 3,
    DELAYINIT = 4,
    FINISHINIT = 5,
    SETWINDOWTHEME = 6,
    PERMITAUTOHIDE = 7,
};
pub const DBID_BANDINFOCHANGED = DESKBANDCID.BANDINFOCHANGED;
pub const DBID_SHOWONLY = DESKBANDCID.SHOWONLY;
pub const DBID_MAXIMIZEBAND = DESKBANDCID.MAXIMIZEBAND;
pub const DBID_PUSHCHEVRON = DESKBANDCID.PUSHCHEVRON;
pub const DBID_DELAYINIT = DESKBANDCID.DELAYINIT;
pub const DBID_FINISHINIT = DESKBANDCID.FINISHINIT;
pub const DBID_SETWINDOWTHEME = DESKBANDCID.SETWINDOWTHEME;
pub const DBID_PERMITAUTOHIDE = DESKBANDCID.PERMITAUTOHIDE;

// TODO: this type is limited to platform 'windows5.0'
const IID_IDeskBand_Value = Guid.initString("eb0fe172-1a3a-11d0-89b3-00a0c90a90ac");
pub const IID_IDeskBand = &IID_IDeskBand_Value;
pub const IDeskBand = extern union {
    pub const VTable = extern struct {
        base: IDockingWindow.VTable,
        GetBandInfo: *const fn(
            self: *const IDeskBand,
            dwBandID: u32,
            dwViewMode: u32,
            pdbi: ?*DESKBANDINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDockingWindow: IDockingWindow,
    IOleWindow: IOleWindow,
    IUnknown: IUnknown,
    pub fn GetBandInfo(self: *const IDeskBand, dwBandID: u32, dwViewMode: u32, pdbi: ?*DESKBANDINFO) callconv(.Inline) HRESULT {
        return self.vtable.GetBandInfo(self, dwBandID, dwViewMode, pdbi);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDeskBandInfo_Value = Guid.initString("77e425fc-cbf9-4307-ba6a-bb5727745661");
pub const IID_IDeskBandInfo = &IID_IDeskBandInfo_Value;
pub const IDeskBandInfo = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDefaultBandWidth: *const fn(
            self: *const IDeskBandInfo,
            dwBandID: u32,
            dwViewMode: u32,
            pnWidth: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetDefaultBandWidth(self: *const IDeskBandInfo, dwBandID: u32, dwViewMode: u32, pnWidth: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetDefaultBandWidth(self, dwBandID, dwViewMode, pnWidth);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ITaskbarList_Value = Guid.initString("56fdf342-fd6d-11d0-958a-006097c9a090");
pub const IID_ITaskbarList = &IID_ITaskbarList_Value;
pub const ITaskbarList = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        HrInit: *const fn(
            self: *const ITaskbarList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddTab: *const fn(
            self: *const ITaskbarList,
            hwnd: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteTab: *const fn(
            self: *const ITaskbarList,
            hwnd: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ActivateTab: *const fn(
            self: *const ITaskbarList,
            hwnd: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActiveAlt: *const fn(
            self: *const ITaskbarList,
            hwnd: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn HrInit(self: *const ITaskbarList) callconv(.Inline) HRESULT {
        return self.vtable.HrInit(self);
    }
    pub fn AddTab(self: *const ITaskbarList, hwnd: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.AddTab(self, hwnd);
    }
    pub fn DeleteTab(self: *const ITaskbarList, hwnd: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.DeleteTab(self, hwnd);
    }
    pub fn ActivateTab(self: *const ITaskbarList, hwnd: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.ActivateTab(self, hwnd);
    }
    pub fn SetActiveAlt(self: *const ITaskbarList, hwnd: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.SetActiveAlt(self, hwnd);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ITaskbarList2_Value = Guid.initString("602d4995-b13a-429b-a66e-1935e44f4317");
pub const IID_ITaskbarList2 = &IID_ITaskbarList2_Value;
pub const ITaskbarList2 = extern union {
    pub const VTable = extern struct {
        base: ITaskbarList.VTable,
        MarkFullscreenWindow: *const fn(
            self: *const ITaskbarList2,
            hwnd: ?HWND,
            fFullscreen: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ITaskbarList: ITaskbarList,
    IUnknown: IUnknown,
    pub fn MarkFullscreenWindow(self: *const ITaskbarList2, hwnd: ?HWND, fFullscreen: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.MarkFullscreenWindow(self, hwnd, fFullscreen);
    }
};

pub const THUMBBUTTONFLAGS = enum(i32) {
    ENABLED = 0,
    DISABLED = 1,
    DISMISSONCLICK = 2,
    NOBACKGROUND = 4,
    HIDDEN = 8,
    NONINTERACTIVE = 16,
};
pub const THBF_ENABLED = THUMBBUTTONFLAGS.ENABLED;
pub const THBF_DISABLED = THUMBBUTTONFLAGS.DISABLED;
pub const THBF_DISMISSONCLICK = THUMBBUTTONFLAGS.DISMISSONCLICK;
pub const THBF_NOBACKGROUND = THUMBBUTTONFLAGS.NOBACKGROUND;
pub const THBF_HIDDEN = THUMBBUTTONFLAGS.HIDDEN;
pub const THBF_NONINTERACTIVE = THUMBBUTTONFLAGS.NONINTERACTIVE;

pub const THUMBBUTTONMASK = enum(i32) {
    BITMAP = 1,
    ICON = 2,
    TOOLTIP = 4,
    FLAGS = 8,
};
pub const THB_BITMAP = THUMBBUTTONMASK.BITMAP;
pub const THB_ICON = THUMBBUTTONMASK.ICON;
pub const THB_TOOLTIP = THUMBBUTTONMASK.TOOLTIP;
pub const THB_FLAGS = THUMBBUTTONMASK.FLAGS;

pub const THUMBBUTTON = extern struct {
    dwMask: THUMBBUTTONMASK,
    iId: u32,
    iBitmap: u32,
    hIcon: ?HICON,
    szTip: [260]u16,
    dwFlags: THUMBBUTTONFLAGS,
};

pub const TBPFLAG = enum(i32) {
    NOPROGRESS = 0,
    INDETERMINATE = 1,
    NORMAL = 2,
    ERROR = 4,
    PAUSED = 8,
};
pub const TBPF_NOPROGRESS = TBPFLAG.NOPROGRESS;
pub const TBPF_INDETERMINATE = TBPFLAG.INDETERMINATE;
pub const TBPF_NORMAL = TBPFLAG.NORMAL;
pub const TBPF_ERROR = TBPFLAG.ERROR;
pub const TBPF_PAUSED = TBPFLAG.PAUSED;

// TODO: this type is limited to platform 'windows6.1'
const IID_ITaskbarList3_Value = Guid.initString("ea1afb91-9e28-4b86-90e9-9e9f8a5eefaf");
pub const IID_ITaskbarList3 = &IID_ITaskbarList3_Value;
pub const ITaskbarList3 = extern union {
    pub const VTable = extern struct {
        base: ITaskbarList2.VTable,
        SetProgressValue: *const fn(
            self: *const ITaskbarList3,
            hwnd: ?HWND,
            ullCompleted: u64,
            ullTotal: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProgressState: *const fn(
            self: *const ITaskbarList3,
            hwnd: ?HWND,
            tbpFlags: TBPFLAG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterTab: *const fn(
            self: *const ITaskbarList3,
            hwndTab: ?HWND,
            hwndMDI: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterTab: *const fn(
            self: *const ITaskbarList3,
            hwndTab: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTabOrder: *const fn(
            self: *const ITaskbarList3,
            hwndTab: ?HWND,
            hwndInsertBefore: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTabActive: *const fn(
            self: *const ITaskbarList3,
            hwndTab: ?HWND,
            hwndMDI: ?HWND,
            dwReserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ThumbBarAddButtons: *const fn(
            self: *const ITaskbarList3,
            hwnd: ?HWND,
            cButtons: u32,
            pButton: [*]THUMBBUTTON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ThumbBarUpdateButtons: *const fn(
            self: *const ITaskbarList3,
            hwnd: ?HWND,
            cButtons: u32,
            pButton: [*]THUMBBUTTON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ThumbBarSetImageList: *const fn(
            self: *const ITaskbarList3,
            hwnd: ?HWND,
            himl: ?HIMAGELIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOverlayIcon: *const fn(
            self: *const ITaskbarList3,
            hwnd: ?HWND,
            hIcon: ?HICON,
            pszDescription: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetThumbnailTooltip: *const fn(
            self: *const ITaskbarList3,
            hwnd: ?HWND,
            pszTip: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetThumbnailClip: *const fn(
            self: *const ITaskbarList3,
            hwnd: ?HWND,
            prcClip: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ITaskbarList2: ITaskbarList2,
    ITaskbarList: ITaskbarList,
    IUnknown: IUnknown,
    pub fn SetProgressValue(self: *const ITaskbarList3, hwnd: ?HWND, ullCompleted: u64, ullTotal: u64) callconv(.Inline) HRESULT {
        return self.vtable.SetProgressValue(self, hwnd, ullCompleted, ullTotal);
    }
    pub fn SetProgressState(self: *const ITaskbarList3, hwnd: ?HWND, tbpFlags: TBPFLAG) callconv(.Inline) HRESULT {
        return self.vtable.SetProgressState(self, hwnd, tbpFlags);
    }
    pub fn RegisterTab(self: *const ITaskbarList3, hwndTab: ?HWND, hwndMDI: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.RegisterTab(self, hwndTab, hwndMDI);
    }
    pub fn UnregisterTab(self: *const ITaskbarList3, hwndTab: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.UnregisterTab(self, hwndTab);
    }
    pub fn SetTabOrder(self: *const ITaskbarList3, hwndTab: ?HWND, hwndInsertBefore: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.SetTabOrder(self, hwndTab, hwndInsertBefore);
    }
    pub fn SetTabActive(self: *const ITaskbarList3, hwndTab: ?HWND, hwndMDI: ?HWND, dwReserved: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetTabActive(self, hwndTab, hwndMDI, dwReserved);
    }
    pub fn ThumbBarAddButtons(self: *const ITaskbarList3, hwnd: ?HWND, cButtons: u32, pButton: [*]THUMBBUTTON) callconv(.Inline) HRESULT {
        return self.vtable.ThumbBarAddButtons(self, hwnd, cButtons, pButton);
    }
    pub fn ThumbBarUpdateButtons(self: *const ITaskbarList3, hwnd: ?HWND, cButtons: u32, pButton: [*]THUMBBUTTON) callconv(.Inline) HRESULT {
        return self.vtable.ThumbBarUpdateButtons(self, hwnd, cButtons, pButton);
    }
    pub fn ThumbBarSetImageList(self: *const ITaskbarList3, hwnd: ?HWND, himl: ?HIMAGELIST) callconv(.Inline) HRESULT {
        return self.vtable.ThumbBarSetImageList(self, hwnd, himl);
    }
    pub fn SetOverlayIcon(self: *const ITaskbarList3, hwnd: ?HWND, hIcon: ?HICON, pszDescription: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetOverlayIcon(self, hwnd, hIcon, pszDescription);
    }
    pub fn SetThumbnailTooltip(self: *const ITaskbarList3, hwnd: ?HWND, pszTip: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetThumbnailTooltip(self, hwnd, pszTip);
    }
    pub fn SetThumbnailClip(self: *const ITaskbarList3, hwnd: ?HWND, prcClip: ?*RECT) callconv(.Inline) HRESULT {
        return self.vtable.SetThumbnailClip(self, hwnd, prcClip);
    }
};

pub const STPFLAG = enum(i32) {
    NONE = 0,
    USEAPPTHUMBNAILALWAYS = 1,
    USEAPPTHUMBNAILWHENACTIVE = 2,
    USEAPPPEEKALWAYS = 4,
    USEAPPPEEKWHENACTIVE = 8,
};
pub const STPF_NONE = STPFLAG.NONE;
pub const STPF_USEAPPTHUMBNAILALWAYS = STPFLAG.USEAPPTHUMBNAILALWAYS;
pub const STPF_USEAPPTHUMBNAILWHENACTIVE = STPFLAG.USEAPPTHUMBNAILWHENACTIVE;
pub const STPF_USEAPPPEEKALWAYS = STPFLAG.USEAPPPEEKALWAYS;
pub const STPF_USEAPPPEEKWHENACTIVE = STPFLAG.USEAPPPEEKWHENACTIVE;

// TODO: this type is limited to platform 'windows6.1'
const IID_ITaskbarList4_Value = Guid.initString("c43dc798-95d1-4bea-9030-bb99e2983a1a");
pub const IID_ITaskbarList4 = &IID_ITaskbarList4_Value;
pub const ITaskbarList4 = extern union {
    pub const VTable = extern struct {
        base: ITaskbarList3.VTable,
        SetTabProperties: *const fn(
            self: *const ITaskbarList4,
            hwndTab: ?HWND,
            stpFlags: STPFLAG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ITaskbarList3: ITaskbarList3,
    ITaskbarList2: ITaskbarList2,
    ITaskbarList: ITaskbarList,
    IUnknown: IUnknown,
    pub fn SetTabProperties(self: *const ITaskbarList4, hwndTab: ?HWND, stpFlags: STPFLAG) callconv(.Inline) HRESULT {
        return self.vtable.SetTabProperties(self, hwndTab, stpFlags);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IExplorerBrowserEvents_Value = Guid.initString("361bbdc7-e6ee-4e13-be58-58e2240c810f");
pub const IID_IExplorerBrowserEvents = &IID_IExplorerBrowserEvents_Value;
pub const IExplorerBrowserEvents = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnNavigationPending: *const fn(
            self: *const IExplorerBrowserEvents,
            pidlFolder: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnViewCreated: *const fn(
            self: *const IExplorerBrowserEvents,
            psv: ?*IShellView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNavigationComplete: *const fn(
            self: *const IExplorerBrowserEvents,
            pidlFolder: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNavigationFailed: *const fn(
            self: *const IExplorerBrowserEvents,
            pidlFolder: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnNavigationPending(self: *const IExplorerBrowserEvents, pidlFolder: ?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.OnNavigationPending(self, pidlFolder);
    }
    pub fn OnViewCreated(self: *const IExplorerBrowserEvents, psv: ?*IShellView) callconv(.Inline) HRESULT {
        return self.vtable.OnViewCreated(self, psv);
    }
    pub fn OnNavigationComplete(self: *const IExplorerBrowserEvents, pidlFolder: ?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.OnNavigationComplete(self, pidlFolder);
    }
    pub fn OnNavigationFailed(self: *const IExplorerBrowserEvents, pidlFolder: ?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.OnNavigationFailed(self, pidlFolder);
    }
};

pub const EXPLORER_BROWSER_OPTIONS = enum(i32) {
    NONE = 0,
    NAVIGATEONCE = 1,
    SHOWFRAMES = 2,
    ALWAYSNAVIGATE = 4,
    NOTRAVELLOG = 8,
    NOWRAPPERWINDOW = 16,
    HTMLSHAREPOINTVIEW = 32,
    NOBORDER = 64,
    NOPERSISTVIEWSTATE = 128,
};
pub const EBO_NONE = EXPLORER_BROWSER_OPTIONS.NONE;
pub const EBO_NAVIGATEONCE = EXPLORER_BROWSER_OPTIONS.NAVIGATEONCE;
pub const EBO_SHOWFRAMES = EXPLORER_BROWSER_OPTIONS.SHOWFRAMES;
pub const EBO_ALWAYSNAVIGATE = EXPLORER_BROWSER_OPTIONS.ALWAYSNAVIGATE;
pub const EBO_NOTRAVELLOG = EXPLORER_BROWSER_OPTIONS.NOTRAVELLOG;
pub const EBO_NOWRAPPERWINDOW = EXPLORER_BROWSER_OPTIONS.NOWRAPPERWINDOW;
pub const EBO_HTMLSHAREPOINTVIEW = EXPLORER_BROWSER_OPTIONS.HTMLSHAREPOINTVIEW;
pub const EBO_NOBORDER = EXPLORER_BROWSER_OPTIONS.NOBORDER;
pub const EBO_NOPERSISTVIEWSTATE = EXPLORER_BROWSER_OPTIONS.NOPERSISTVIEWSTATE;

pub const EXPLORER_BROWSER_FILL_FLAGS = enum(i32) {
    NONE = 0,
    SELECTFROMDATAOBJECT = 256,
    NODROPTARGET = 512,
};
pub const EBF_NONE = EXPLORER_BROWSER_FILL_FLAGS.NONE;
pub const EBF_SELECTFROMDATAOBJECT = EXPLORER_BROWSER_FILL_FLAGS.SELECTFROMDATAOBJECT;
pub const EBF_NODROPTARGET = EXPLORER_BROWSER_FILL_FLAGS.NODROPTARGET;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IExplorerBrowser_Value = Guid.initString("dfd3b6b5-c10c-4be9-85f6-a66969f402f6");
pub const IID_IExplorerBrowser = &IID_IExplorerBrowser_Value;
pub const IExplorerBrowser = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn(
            self: *const IExplorerBrowser,
            hwndParent: ?HWND,
            prc: ?*const RECT,
            pfs: ?*const FOLDERSETTINGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Destroy: *const fn(
            self: *const IExplorerBrowser,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRect: *const fn(
            self: *const IExplorerBrowser,
            phdwp: ?*isize,
            rcBrowser: RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPropertyBag: *const fn(
            self: *const IExplorerBrowser,
            pszPropertyBag: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEmptyText: *const fn(
            self: *const IExplorerBrowser,
            pszEmptyText: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFolderSettings: *const fn(
            self: *const IExplorerBrowser,
            pfs: ?*const FOLDERSETTINGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Advise: *const fn(
            self: *const IExplorerBrowser,
            psbe: ?*IExplorerBrowserEvents,
            pdwCookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: *const fn(
            self: *const IExplorerBrowser,
            dwCookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOptions: *const fn(
            self: *const IExplorerBrowser,
            dwFlag: EXPLORER_BROWSER_OPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptions: *const fn(
            self: *const IExplorerBrowser,
            pdwFlag: ?*EXPLORER_BROWSER_OPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BrowseToIDList: *const fn(
            self: *const IExplorerBrowser,
            pidl: ?*ITEMIDLIST,
            uFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BrowseToObject: *const fn(
            self: *const IExplorerBrowser,
            punk: ?*IUnknown,
            uFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FillFromObject: *const fn(
            self: *const IExplorerBrowser,
            punk: ?*IUnknown,
            dwFlags: EXPLORER_BROWSER_FILL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAll: *const fn(
            self: *const IExplorerBrowser,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentView: *const fn(
            self: *const IExplorerBrowser,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IExplorerBrowser, hwndParent: ?HWND, prc: ?*const RECT, pfs: ?*const FOLDERSETTINGS) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, hwndParent, prc, pfs);
    }
    pub fn Destroy(self: *const IExplorerBrowser) callconv(.Inline) HRESULT {
        return self.vtable.Destroy(self);
    }
    pub fn SetRect(self: *const IExplorerBrowser, phdwp: ?*isize, rcBrowser: RECT) callconv(.Inline) HRESULT {
        return self.vtable.SetRect(self, phdwp, rcBrowser);
    }
    pub fn SetPropertyBag(self: *const IExplorerBrowser, pszPropertyBag: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetPropertyBag(self, pszPropertyBag);
    }
    pub fn SetEmptyText(self: *const IExplorerBrowser, pszEmptyText: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetEmptyText(self, pszEmptyText);
    }
    pub fn SetFolderSettings(self: *const IExplorerBrowser, pfs: ?*const FOLDERSETTINGS) callconv(.Inline) HRESULT {
        return self.vtable.SetFolderSettings(self, pfs);
    }
    pub fn Advise(self: *const IExplorerBrowser, psbe: ?*IExplorerBrowserEvents, pdwCookie: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Advise(self, psbe, pdwCookie);
    }
    pub fn Unadvise(self: *const IExplorerBrowser, dwCookie: u32) callconv(.Inline) HRESULT {
        return self.vtable.Unadvise(self, dwCookie);
    }
    pub fn SetOptions(self: *const IExplorerBrowser, dwFlag: EXPLORER_BROWSER_OPTIONS) callconv(.Inline) HRESULT {
        return self.vtable.SetOptions(self, dwFlag);
    }
    pub fn GetOptions(self: *const IExplorerBrowser, pdwFlag: ?*EXPLORER_BROWSER_OPTIONS) callconv(.Inline) HRESULT {
        return self.vtable.GetOptions(self, pdwFlag);
    }
    pub fn BrowseToIDList(self: *const IExplorerBrowser, pidl: ?*ITEMIDLIST, uFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.BrowseToIDList(self, pidl, uFlags);
    }
    pub fn BrowseToObject(self: *const IExplorerBrowser, punk: ?*IUnknown, uFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.BrowseToObject(self, punk, uFlags);
    }
    pub fn FillFromObject(self: *const IExplorerBrowser, punk: ?*IUnknown, dwFlags: EXPLORER_BROWSER_FILL_FLAGS) callconv(.Inline) HRESULT {
        return self.vtable.FillFromObject(self, punk, dwFlags);
    }
    pub fn RemoveAll(self: *const IExplorerBrowser) callconv(.Inline) HRESULT {
        return self.vtable.RemoveAll(self);
    }
    pub fn GetCurrentView(self: *const IExplorerBrowser, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetCurrentView(self, riid, ppv);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumObjects_Value = Guid.initString("2c1c7e2e-2d0e-4059-831e-1e6f82335c2e");
pub const IID_IEnumObjects = &IID_IEnumObjects_Value;
pub const IEnumObjects = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumObjects,
            celt: u32,
            riid: ?*const Guid,
            rgelt: [*]?*anyopaque,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumObjects,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumObjects,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumObjects,
            ppenum: ?*?*IEnumObjects,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumObjects, celt: u32, riid: ?*const Guid, rgelt: [*]?*anyopaque, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, celt, riid, rgelt, pceltFetched);
    }
    pub fn Skip(self: *const IEnumObjects, celt: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumObjects) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumObjects, ppenum: ?*?*IEnumObjects) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppenum);
    }
};

pub const _OPPROGDLGF = enum(i32) {
    DEFAULT = 0,
    ENABLEPAUSE = 128,
    ALLOWUNDO = 256,
    DONTDISPLAYSOURCEPATH = 512,
    DONTDISPLAYDESTPATH = 1024,
    NOMULTIDAYESTIMATES = 2048,
    DONTDISPLAYLOCATIONS = 4096,
};
pub const OPPROGDLG_DEFAULT = _OPPROGDLGF.DEFAULT;
pub const OPPROGDLG_ENABLEPAUSE = _OPPROGDLGF.ENABLEPAUSE;
pub const OPPROGDLG_ALLOWUNDO = _OPPROGDLGF.ALLOWUNDO;
pub const OPPROGDLG_DONTDISPLAYSOURCEPATH = _OPPROGDLGF.DONTDISPLAYSOURCEPATH;
pub const OPPROGDLG_DONTDISPLAYDESTPATH = _OPPROGDLGF.DONTDISPLAYDESTPATH;
pub const OPPROGDLG_NOMULTIDAYESTIMATES = _OPPROGDLGF.NOMULTIDAYESTIMATES;
pub const OPPROGDLG_DONTDISPLAYLOCATIONS = _OPPROGDLGF.DONTDISPLAYLOCATIONS;

pub const _PDMODE = enum(i32) {
    DEFAULT = 0,
    RUN = 1,
    PREFLIGHT = 2,
    UNDOING = 4,
    ERRORSBLOCKING = 8,
    INDETERMINATE = 16,
};
pub const PDM_DEFAULT = _PDMODE.DEFAULT;
pub const PDM_RUN = _PDMODE.RUN;
pub const PDM_PREFLIGHT = _PDMODE.PREFLIGHT;
pub const PDM_UNDOING = _PDMODE.UNDOING;
pub const PDM_ERRORSBLOCKING = _PDMODE.ERRORSBLOCKING;
pub const PDM_INDETERMINATE = _PDMODE.INDETERMINATE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOperationsProgressDialog_Value = Guid.initString("0c9fb851-e5c9-43eb-a370-f0677b13874c");
pub const IID_IOperationsProgressDialog = &IID_IOperationsProgressDialog_Value;
pub const IOperationsProgressDialog = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        StartProgressDialog: *const fn(
            self: *const IOperationsProgressDialog,
            hwndOwner: ?HWND,
            flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopProgressDialog: *const fn(
            self: *const IOperationsProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOperation: *const fn(
            self: *const IOperationsProgressDialog,
            action: SPACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMode: *const fn(
            self: *const IOperationsProgressDialog,
            mode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateProgress: *const fn(
            self: *const IOperationsProgressDialog,
            ullPointsCurrent: u64,
            ullPointsTotal: u64,
            ullSizeCurrent: u64,
            ullSizeTotal: u64,
            ullItemsCurrent: u64,
            ullItemsTotal: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateLocations: *const fn(
            self: *const IOperationsProgressDialog,
            psiSource: ?*IShellItem,
            psiTarget: ?*IShellItem,
            psiItem: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetTimer: *const fn(
            self: *const IOperationsProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PauseTimer: *const fn(
            self: *const IOperationsProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResumeTimer: *const fn(
            self: *const IOperationsProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMilliseconds: *const fn(
            self: *const IOperationsProgressDialog,
            pullElapsed: ?*u64,
            pullRemaining: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOperationStatus: *const fn(
            self: *const IOperationsProgressDialog,
            popstatus: ?*PDOPSTATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn StartProgressDialog(self: *const IOperationsProgressDialog, hwndOwner: ?HWND, flags: u32) callconv(.Inline) HRESULT {
        return self.vtable.StartProgressDialog(self, hwndOwner, flags);
    }
    pub fn StopProgressDialog(self: *const IOperationsProgressDialog) callconv(.Inline) HRESULT {
        return self.vtable.StopProgressDialog(self);
    }
    pub fn SetOperation(self: *const IOperationsProgressDialog, action: SPACTION) callconv(.Inline) HRESULT {
        return self.vtable.SetOperation(self, action);
    }
    pub fn SetMode(self: *const IOperationsProgressDialog, mode: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetMode(self, mode);
    }
    pub fn UpdateProgress(self: *const IOperationsProgressDialog, ullPointsCurrent: u64, ullPointsTotal: u64, ullSizeCurrent: u64, ullSizeTotal: u64, ullItemsCurrent: u64, ullItemsTotal: u64) callconv(.Inline) HRESULT {
        return self.vtable.UpdateProgress(self, ullPointsCurrent, ullPointsTotal, ullSizeCurrent, ullSizeTotal, ullItemsCurrent, ullItemsTotal);
    }
    pub fn UpdateLocations(self: *const IOperationsProgressDialog, psiSource: ?*IShellItem, psiTarget: ?*IShellItem, psiItem: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.UpdateLocations(self, psiSource, psiTarget, psiItem);
    }
    pub fn ResetTimer(self: *const IOperationsProgressDialog) callconv(.Inline) HRESULT {
        return self.vtable.ResetTimer(self);
    }
    pub fn PauseTimer(self: *const IOperationsProgressDialog) callconv(.Inline) HRESULT {
        return self.vtable.PauseTimer(self);
    }
    pub fn ResumeTimer(self: *const IOperationsProgressDialog) callconv(.Inline) HRESULT {
        return self.vtable.ResumeTimer(self);
    }
    pub fn GetMilliseconds(self: *const IOperationsProgressDialog, pullElapsed: ?*u64, pullRemaining: ?*u64) callconv(.Inline) HRESULT {
        return self.vtable.GetMilliseconds(self, pullElapsed, pullRemaining);
    }
    pub fn GetOperationStatus(self: *const IOperationsProgressDialog, popstatus: ?*PDOPSTATUS) callconv(.Inline) HRESULT {
        return self.vtable.GetOperationStatus(self, popstatus);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IIOCancelInformation_Value = Guid.initString("f5b0bf81-8cb5-4b1b-9449-1a159e0c733c");
pub const IID_IIOCancelInformation = &IID_IIOCancelInformation_Value;
pub const IIOCancelInformation = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetCancelInformation: *const fn(
            self: *const IIOCancelInformation,
            dwThreadID: u32,
            uMsgCancel: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCancelInformation: *const fn(
            self: *const IIOCancelInformation,
            pdwThreadID: ?*u32,
            puMsgCancel: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetCancelInformation(self: *const IIOCancelInformation, dwThreadID: u32, uMsgCancel: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetCancelInformation(self, dwThreadID, uMsgCancel);
    }
    pub fn GetCancelInformation(self: *const IIOCancelInformation, pdwThreadID: ?*u32, puMsgCancel: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCancelInformation(self, pdwThreadID, puMsgCancel);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFileOperation_Value = Guid.initString("947aab5f-0a5c-4c13-b4d6-4bf7836fc9f8");
pub const IID_IFileOperation = &IID_IFileOperation_Value;
pub const IFileOperation = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Advise: *const fn(
            self: *const IFileOperation,
            pfops: ?*IFileOperationProgressSink,
            pdwCookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: *const fn(
            self: *const IFileOperation,
            dwCookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOperationFlags: *const fn(
            self: *const IFileOperation,
            dwOperationFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProgressMessage: *const fn(
            self: *const IFileOperation,
            pszMessage: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProgressDialog: *const fn(
            self: *const IFileOperation,
            popd: ?*IOperationsProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperties: *const fn(
            self: *const IFileOperation,
            pproparray: ?*IPropertyChangeArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOwnerWindow: *const fn(
            self: *const IFileOperation,
            hwndOwner: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ApplyPropertiesToItem: *const fn(
            self: *const IFileOperation,
            psiItem: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ApplyPropertiesToItems: *const fn(
            self: *const IFileOperation,
            punkItems: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RenameItem: *const fn(
            self: *const IFileOperation,
            psiItem: ?*IShellItem,
            pszNewName: ?[*:0]const u16,
            pfopsItem: ?*IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RenameItems: *const fn(
            self: *const IFileOperation,
            pUnkItems: ?*IUnknown,
            pszNewName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveItem: *const fn(
            self: *const IFileOperation,
            psiItem: ?*IShellItem,
            psiDestinationFolder: ?*IShellItem,
            pszNewName: ?[*:0]const u16,
            pfopsItem: ?*IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveItems: *const fn(
            self: *const IFileOperation,
            punkItems: ?*IUnknown,
            psiDestinationFolder: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyItem: *const fn(
            self: *const IFileOperation,
            psiItem: ?*IShellItem,
            psiDestinationFolder: ?*IShellItem,
            pszCopyName: ?[*:0]const u16,
            pfopsItem: ?*IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyItems: *const fn(
            self: *const IFileOperation,
            punkItems: ?*IUnknown,
            psiDestinationFolder: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteItem: *const fn(
            self: *const IFileOperation,
            psiItem: ?*IShellItem,
            pfopsItem: ?*IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteItems: *const fn(
            self: *const IFileOperation,
            punkItems: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NewItem: *const fn(
            self: *const IFileOperation,
            psiDestinationFolder: ?*IShellItem,
            dwFileAttributes: u32,
            pszName: ?[*:0]const u16,
            pszTemplateName: ?[*:0]const u16,
            pfopsItem: ?*IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PerformOperations: *const fn(
            self: *const IFileOperation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAnyOperationsAborted: *const fn(
            self: *const IFileOperation,
            pfAnyOperationsAborted: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Advise(self: *const IFileOperation, pfops: ?*IFileOperationProgressSink, pdwCookie: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Advise(self, pfops, pdwCookie);
    }
    pub fn Unadvise(self: *const IFileOperation, dwCookie: u32) callconv(.Inline) HRESULT {
        return self.vtable.Unadvise(self, dwCookie);
    }
    pub fn SetOperationFlags(self: *const IFileOperation, dwOperationFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetOperationFlags(self, dwOperationFlags);
    }
    pub fn SetProgressMessage(self: *const IFileOperation, pszMessage: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetProgressMessage(self, pszMessage);
    }
    pub fn SetProgressDialog(self: *const IFileOperation, popd: ?*IOperationsProgressDialog) callconv(.Inline) HRESULT {
        return self.vtable.SetProgressDialog(self, popd);
    }
    pub fn SetProperties(self: *const IFileOperation, pproparray: ?*IPropertyChangeArray) callconv(.Inline) HRESULT {
        return self.vtable.SetProperties(self, pproparray);
    }
    pub fn SetOwnerWindow(self: *const IFileOperation, hwndOwner: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.SetOwnerWindow(self, hwndOwner);
    }
    pub fn ApplyPropertiesToItem(self: *const IFileOperation, psiItem: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.ApplyPropertiesToItem(self, psiItem);
    }
    pub fn ApplyPropertiesToItems(self: *const IFileOperation, punkItems: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.ApplyPropertiesToItems(self, punkItems);
    }
    pub fn RenameItem(self: *const IFileOperation, psiItem: ?*IShellItem, pszNewName: ?[*:0]const u16, pfopsItem: ?*IFileOperationProgressSink) callconv(.Inline) HRESULT {
        return self.vtable.RenameItem(self, psiItem, pszNewName, pfopsItem);
    }
    pub fn RenameItems(self: *const IFileOperation, pUnkItems: ?*IUnknown, pszNewName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.RenameItems(self, pUnkItems, pszNewName);
    }
    pub fn MoveItem(self: *const IFileOperation, psiItem: ?*IShellItem, psiDestinationFolder: ?*IShellItem, pszNewName: ?[*:0]const u16, pfopsItem: ?*IFileOperationProgressSink) callconv(.Inline) HRESULT {
        return self.vtable.MoveItem(self, psiItem, psiDestinationFolder, pszNewName, pfopsItem);
    }
    pub fn MoveItems(self: *const IFileOperation, punkItems: ?*IUnknown, psiDestinationFolder: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.MoveItems(self, punkItems, psiDestinationFolder);
    }
    pub fn CopyItem(self: *const IFileOperation, psiItem: ?*IShellItem, psiDestinationFolder: ?*IShellItem, pszCopyName: ?[*:0]const u16, pfopsItem: ?*IFileOperationProgressSink) callconv(.Inline) HRESULT {
        return self.vtable.CopyItem(self, psiItem, psiDestinationFolder, pszCopyName, pfopsItem);
    }
    pub fn CopyItems(self: *const IFileOperation, punkItems: ?*IUnknown, psiDestinationFolder: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.CopyItems(self, punkItems, psiDestinationFolder);
    }
    pub fn DeleteItem(self: *const IFileOperation, psiItem: ?*IShellItem, pfopsItem: ?*IFileOperationProgressSink) callconv(.Inline) HRESULT {
        return self.vtable.DeleteItem(self, psiItem, pfopsItem);
    }
    pub fn DeleteItems(self: *const IFileOperation, punkItems: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.DeleteItems(self, punkItems);
    }
    pub fn NewItem(self: *const IFileOperation, psiDestinationFolder: ?*IShellItem, dwFileAttributes: u32, pszName: ?[*:0]const u16, pszTemplateName: ?[*:0]const u16, pfopsItem: ?*IFileOperationProgressSink) callconv(.Inline) HRESULT {
        return self.vtable.NewItem(self, psiDestinationFolder, dwFileAttributes, pszName, pszTemplateName, pfopsItem);
    }
    pub fn PerformOperations(self: *const IFileOperation) callconv(.Inline) HRESULT {
        return self.vtable.PerformOperations(self);
    }
    pub fn GetAnyOperationsAborted(self: *const IFileOperation, pfAnyOperationsAborted: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.GetAnyOperationsAborted(self, pfAnyOperationsAborted);
    }
};

pub const FILE_OPERATION_FLAGS2 = enum(i32) {
    NONE = 0,
    MERGEFOLDERSONCOLLISION = 1,
};
pub const FOF2_NONE = FILE_OPERATION_FLAGS2.NONE;
pub const FOF2_MERGEFOLDERSONCOLLISION = FILE_OPERATION_FLAGS2.MERGEFOLDERSONCOLLISION;

const IID_IFileOperation2_Value = Guid.initString("cd8f23c1-8f61-4916-909d-55bdd0918753");
pub const IID_IFileOperation2 = &IID_IFileOperation2_Value;
pub const IFileOperation2 = extern union {
    pub const VTable = extern struct {
        base: IFileOperation.VTable,
        SetOperationFlags2: *const fn(
            self: *const IFileOperation2,
            operationFlags2: FILE_OPERATION_FLAGS2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IFileOperation: IFileOperation,
    IUnknown: IUnknown,
    pub fn SetOperationFlags2(self: *const IFileOperation2, operationFlags2: FILE_OPERATION_FLAGS2) callconv(.Inline) HRESULT {
        return self.vtable.SetOperationFlags2(self, operationFlags2);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IObjectProvider_Value = Guid.initString("a6087428-3be3-4d73-b308-7c04a540bf1a");
pub const IID_IObjectProvider = &IID_IObjectProvider_Value;
pub const IObjectProvider = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryObject: *const fn(
            self: *const IObjectProvider,
            guidObject: ?*const Guid,
            riid: ?*const Guid,
            ppvOut: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn QueryObject(self: *const IObjectProvider, guidObject: ?*const Guid, riid: ?*const Guid, ppvOut: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.QueryObject(self, guidObject, riid, ppvOut);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INamespaceWalkCB_Value = Guid.initString("d92995f8-cf5e-4a76-bf59-ead39ea2b97e");
pub const IID_INamespaceWalkCB = &IID_INamespaceWalkCB_Value;
pub const INamespaceWalkCB = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FoundItem: *const fn(
            self: *const INamespaceWalkCB,
            psf: ?*IShellFolder,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnterFolder: *const fn(
            self: *const INamespaceWalkCB,
            psf: ?*IShellFolder,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LeaveFolder: *const fn(
            self: *const INamespaceWalkCB,
            psf: ?*IShellFolder,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeProgressDialog: *const fn(
            self: *const INamespaceWalkCB,
            ppszTitle: ?*?PWSTR,
            ppszCancel: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn FoundItem(self: *const INamespaceWalkCB, psf: ?*IShellFolder, pidl: ?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.FoundItem(self, psf, pidl);
    }
    pub fn EnterFolder(self: *const INamespaceWalkCB, psf: ?*IShellFolder, pidl: ?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.EnterFolder(self, psf, pidl);
    }
    pub fn LeaveFolder(self: *const INamespaceWalkCB, psf: ?*IShellFolder, pidl: ?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.LeaveFolder(self, psf, pidl);
    }
    pub fn InitializeProgressDialog(self: *const INamespaceWalkCB, ppszTitle: ?*?PWSTR, ppszCancel: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeProgressDialog(self, ppszTitle, ppszCancel);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INamespaceWalkCB2_Value = Guid.initString("7ac7492b-c38e-438a-87db-68737844ff70");
pub const IID_INamespaceWalkCB2 = &IID_INamespaceWalkCB2_Value;
pub const INamespaceWalkCB2 = extern union {
    pub const VTable = extern struct {
        base: INamespaceWalkCB.VTable,
        WalkComplete: *const fn(
            self: *const INamespaceWalkCB2,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    INamespaceWalkCB: INamespaceWalkCB,
    IUnknown: IUnknown,
    pub fn WalkComplete(self: *const INamespaceWalkCB2, hr: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.WalkComplete(self, hr);
    }
};

pub const NAMESPACEWALKFLAG = enum(i32) {
    DEFAULT = 0,
    NONE_IMPLIES_ALL = 1,
    ONE_IMPLIES_ALL = 2,
    DONT_TRAVERSE_LINKS = 4,
    DONT_ACCUMULATE_RESULT = 8,
    TRAVERSE_STREAM_JUNCTIONS = 16,
    FILESYSTEM_ONLY = 32,
    SHOW_PROGRESS = 64,
    FLAG_VIEWORDER = 128,
    IGNORE_AUTOPLAY_HIDA = 256,
    ASYNC = 512,
    DONT_RESOLVE_LINKS = 1024,
    ACCUMULATE_FOLDERS = 2048,
    DONT_SORT = 4096,
    USE_TRANSFER_MEDIUM = 8192,
    DONT_TRAVERSE_STREAM_JUNCTIONS = 16384,
    ANY_IMPLIES_ALL = 32768,
};
pub const NSWF_DEFAULT = NAMESPACEWALKFLAG.DEFAULT;
pub const NSWF_NONE_IMPLIES_ALL = NAMESPACEWALKFLAG.NONE_IMPLIES_ALL;
pub const NSWF_ONE_IMPLIES_ALL = NAMESPACEWALKFLAG.ONE_IMPLIES_ALL;
pub const NSWF_DONT_TRAVERSE_LINKS = NAMESPACEWALKFLAG.DONT_TRAVERSE_LINKS;
pub const NSWF_DONT_ACCUMULATE_RESULT = NAMESPACEWALKFLAG.DONT_ACCUMULATE_RESULT;
pub const NSWF_TRAVERSE_STREAM_JUNCTIONS = NAMESPACEWALKFLAG.TRAVERSE_STREAM_JUNCTIONS;
pub const NSWF_FILESYSTEM_ONLY = NAMESPACEWALKFLAG.FILESYSTEM_ONLY;
pub const NSWF_SHOW_PROGRESS = NAMESPACEWALKFLAG.SHOW_PROGRESS;
pub const NSWF_FLAG_VIEWORDER = NAMESPACEWALKFLAG.FLAG_VIEWORDER;
pub const NSWF_IGNORE_AUTOPLAY_HIDA = NAMESPACEWALKFLAG.IGNORE_AUTOPLAY_HIDA;
pub const NSWF_ASYNC = NAMESPACEWALKFLAG.ASYNC;
pub const NSWF_DONT_RESOLVE_LINKS = NAMESPACEWALKFLAG.DONT_RESOLVE_LINKS;
pub const NSWF_ACCUMULATE_FOLDERS = NAMESPACEWALKFLAG.ACCUMULATE_FOLDERS;
pub const NSWF_DONT_SORT = NAMESPACEWALKFLAG.DONT_SORT;
pub const NSWF_USE_TRANSFER_MEDIUM = NAMESPACEWALKFLAG.USE_TRANSFER_MEDIUM;
pub const NSWF_DONT_TRAVERSE_STREAM_JUNCTIONS = NAMESPACEWALKFLAG.DONT_TRAVERSE_STREAM_JUNCTIONS;
pub const NSWF_ANY_IMPLIES_ALL = NAMESPACEWALKFLAG.ANY_IMPLIES_ALL;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INamespaceWalk_Value = Guid.initString("57ced8a7-3f4a-432c-9350-30f24483f74f");
pub const IID_INamespaceWalk = &IID_INamespaceWalk_Value;
pub const INamespaceWalk = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Walk: *const fn(
            self: *const INamespaceWalk,
            punkToWalk: ?*IUnknown,
            dwFlags: u32,
            cDepth: i32,
            pnswcb: ?*INamespaceWalkCB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIDArrayResult: *const fn(
            self: *const INamespaceWalk,
            pcItems: ?*u32,
            prgpidl: [*]?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Walk(self: *const INamespaceWalk, punkToWalk: ?*IUnknown, dwFlags: u32, cDepth: i32, pnswcb: ?*INamespaceWalkCB) callconv(.Inline) HRESULT {
        return self.vtable.Walk(self, punkToWalk, dwFlags, cDepth, pnswcb);
    }
    pub fn GetIDArrayResult(self: *const INamespaceWalk, pcItems: ?*u32, prgpidl: [*]?*?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.GetIDArrayResult(self, pcItems, prgpidl);
    }
};

pub const BANDSITEINFO = extern struct {
    dwMask: u32,
    dwState: u32,
    dwStyle: u32,
};

pub const BANDSITECID = enum(i32) {
    ADDED = 0,
    REMOVED = 1,
};
pub const BSID_BANDADDED = BANDSITECID.ADDED;
pub const BSID_BANDREMOVED = BANDSITECID.REMOVED;

// TODO: this type is limited to platform 'windows5.0'
const IID_IBandSite_Value = Guid.initString("4cf504b0-de96-11d0-8b3f-00a0c911e8e5");
pub const IID_IBandSite = &IID_IBandSite_Value;
pub const IBandSite = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddBand: *const fn(
            self: *const IBandSite,
            punk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumBands: *const fn(
            self: *const IBandSite,
            uBand: u32,
            pdwBandID: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryBand: *const fn(
            self: *const IBandSite,
            dwBandID: u32,
            ppstb: ?*?*IDeskBand,
            pdwState: ?*u32,
            pszName: ?[*:0]u16,
            cchName: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBandState: *const fn(
            self: *const IBandSite,
            dwBandID: u32,
            dwMask: u32,
            dwState: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveBand: *const fn(
            self: *const IBandSite,
            dwBandID: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBandObject: *const fn(
            self: *const IBandSite,
            dwBandID: u32,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBandSiteInfo: *const fn(
            self: *const IBandSite,
            pbsinfo: ?*const BANDSITEINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBandSiteInfo: *const fn(
            self: *const IBandSite,
            pbsinfo: ?*BANDSITEINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn AddBand(self: *const IBandSite, punk: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.AddBand(self, punk);
    }
    pub fn EnumBands(self: *const IBandSite, uBand: u32, pdwBandID: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.EnumBands(self, uBand, pdwBandID);
    }
    pub fn QueryBand(self: *const IBandSite, dwBandID: u32, ppstb: ?*?*IDeskBand, pdwState: ?*u32, pszName: ?[*:0]u16, cchName: i32) callconv(.Inline) HRESULT {
        return self.vtable.QueryBand(self, dwBandID, ppstb, pdwState, pszName, cchName);
    }
    pub fn SetBandState(self: *const IBandSite, dwBandID: u32, dwMask: u32, dwState: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetBandState(self, dwBandID, dwMask, dwState);
    }
    pub fn RemoveBand(self: *const IBandSite, dwBandID: u32) callconv(.Inline) HRESULT {
        return self.vtable.RemoveBand(self, dwBandID);
    }
    pub fn GetBandObject(self: *const IBandSite, dwBandID: u32, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetBandObject(self, dwBandID, riid, ppv);
    }
    pub fn SetBandSiteInfo(self: *const IBandSite, pbsinfo: ?*const BANDSITEINFO) callconv(.Inline) HRESULT {
        return self.vtable.SetBandSiteInfo(self, pbsinfo);
    }
    pub fn GetBandSiteInfo(self: *const IBandSite, pbsinfo: ?*BANDSITEINFO) callconv(.Inline) HRESULT {
        return self.vtable.GetBandSiteInfo(self, pbsinfo);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IModalWindow_Value = Guid.initString("b4db1657-70d7-485e-8e3e-6fcb5a5c1802");
pub const IID_IModalWindow = &IID_IModalWindow_Value;
pub const IModalWindow = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Show: *const fn(
            self: *const IModalWindow,
            hwndOwner: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Show(self: *const IModalWindow, hwndOwner: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.Show(self, hwndOwner);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IContextMenuSite_Value = Guid.initString("0811aebe-0b87-4c54-9e72-548cf649016b");
pub const IID_IContextMenuSite = &IID_IContextMenuSite_Value;
pub const IContextMenuSite = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DoContextMenuPopup: *const fn(
            self: *const IContextMenuSite,
            punkContextMenu: ?*IUnknown,
            fFlags: u32,
            pt: POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn DoContextMenuPopup(self: *const IContextMenuSite, punkContextMenu: ?*IUnknown, fFlags: u32, pt: POINT) callconv(.Inline) HRESULT {
        return self.vtable.DoContextMenuPopup(self, punkContextMenu, fFlags, pt);
    }
};

pub const MENUBANDHANDLERCID = enum(i32) {
    T = 0,
};
pub const MBHANDCID_PIDLSELECT = MENUBANDHANDLERCID.T;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMenuBand_Value = Guid.initString("568804cd-cbd7-11d0-9816-00c04fd91972");
pub const IID_IMenuBand = &IID_IMenuBand_Value;
pub const IMenuBand = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsMenuMessage: *const fn(
            self: *const IMenuBand,
            pmsg: ?*MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateMenuMessage: *const fn(
            self: *const IMenuBand,
            pmsg: ?*MSG,
            plRet: ?*LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn IsMenuMessage(self: *const IMenuBand, pmsg: ?*MSG) callconv(.Inline) HRESULT {
        return self.vtable.IsMenuMessage(self, pmsg);
    }
    pub fn TranslateMenuMessage(self: *const IMenuBand, pmsg: ?*MSG, plRet: ?*LRESULT) callconv(.Inline) HRESULT {
        return self.vtable.TranslateMenuMessage(self, pmsg, plRet);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IRegTreeItem_Value = Guid.initString("a9521922-0812-4d44-9ec3-7fd38c726f3d");
pub const IID_IRegTreeItem = &IID_IRegTreeItem_Value;
pub const IRegTreeItem = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCheckState: *const fn(
            self: *const IRegTreeItem,
            pbCheck: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCheckState: *const fn(
            self: *const IRegTreeItem,
            bCheck: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetCheckState(self: *const IRegTreeItem, pbCheck: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.GetCheckState(self, pbCheck);
    }
    pub fn SetCheckState(self: *const IRegTreeItem, bCheck: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetCheckState(self, bCheck);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IDeskBar_Value = Guid.initString("eb0fe173-1a3a-11d0-89b3-00a0c90a90ac");
pub const IID_IDeskBar = &IID_IDeskBar_Value;
pub const IDeskBar = extern union {
    pub const VTable = extern struct {
        base: IOleWindow.VTable,
        SetClient: *const fn(
            self: *const IDeskBar,
            punkClient: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClient: *const fn(
            self: *const IDeskBar,
            ppunkClient: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnPosRectChangeDB: *const fn(
            self: *const IDeskBar,
            prc: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IOleWindow: IOleWindow,
    IUnknown: IUnknown,
    pub fn SetClient(self: *const IDeskBar, punkClient: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.SetClient(self, punkClient);
    }
    pub fn GetClient(self: *const IDeskBar, ppunkClient: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.GetClient(self, ppunkClient);
    }
    pub fn OnPosRectChangeDB(self: *const IDeskBar, prc: ?*RECT) callconv(.Inline) HRESULT {
        return self.vtable.OnPosRectChangeDB(self, prc);
    }
};

pub const MENUPOPUPSELECT = enum(i32) {
    EXECUTE = 0,
    FULLCANCEL = 1,
    CANCELLEVEL = 2,
    SELECTLEFT = 3,
    SELECTRIGHT = 4,
    CHILDTRACKING = 5,
};
pub const MPOS_EXECUTE = MENUPOPUPSELECT.EXECUTE;
pub const MPOS_FULLCANCEL = MENUPOPUPSELECT.FULLCANCEL;
pub const MPOS_CANCELLEVEL = MENUPOPUPSELECT.CANCELLEVEL;
pub const MPOS_SELECTLEFT = MENUPOPUPSELECT.SELECTLEFT;
pub const MPOS_SELECTRIGHT = MENUPOPUPSELECT.SELECTRIGHT;
pub const MPOS_CHILDTRACKING = MENUPOPUPSELECT.CHILDTRACKING;

pub const MENUPOPUPPOPUPFLAGS = enum(i32) {
    SETFOCUS = 1,
    INITIALSELECT = 2,
    NOANIMATE = 4,
    KEYBOARD = 16,
    REPOSITION = 32,
    FORCEZORDER = 64,
    FINALSELECT = 128,
    TOP = 536870912,
    LEFT = 1073741824,
    RIGHT = 1610612736,
    BOTTOM = -2147483648,
    POS_MASK = -536870912,
    ALIGN_LEFT = 33554432,
    ALIGN_RIGHT = 67108864,
};
pub const MPPF_SETFOCUS = MENUPOPUPPOPUPFLAGS.SETFOCUS;
pub const MPPF_INITIALSELECT = MENUPOPUPPOPUPFLAGS.INITIALSELECT;
pub const MPPF_NOANIMATE = MENUPOPUPPOPUPFLAGS.NOANIMATE;
pub const MPPF_KEYBOARD = MENUPOPUPPOPUPFLAGS.KEYBOARD;
pub const MPPF_REPOSITION = MENUPOPUPPOPUPFLAGS.REPOSITION;
pub const MPPF_FORCEZORDER = MENUPOPUPPOPUPFLAGS.FORCEZORDER;
pub const MPPF_FINALSELECT = MENUPOPUPPOPUPFLAGS.FINALSELECT;
pub const MPPF_TOP = MENUPOPUPPOPUPFLAGS.TOP;
pub const MPPF_LEFT = MENUPOPUPPOPUPFLAGS.LEFT;
pub const MPPF_RIGHT = MENUPOPUPPOPUPFLAGS.RIGHT;
pub const MPPF_BOTTOM = MENUPOPUPPOPUPFLAGS.BOTTOM;
pub const MPPF_POS_MASK = MENUPOPUPPOPUPFLAGS.POS_MASK;
pub const MPPF_ALIGN_LEFT = MENUPOPUPPOPUPFLAGS.ALIGN_LEFT;
pub const MPPF_ALIGN_RIGHT = MENUPOPUPPOPUPFLAGS.ALIGN_RIGHT;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMenuPopup_Value = Guid.initString("d1e7afeb-6a2e-11d0-8c78-00c04fd918b4");
pub const IID_IMenuPopup = &IID_IMenuPopup_Value;
pub const IMenuPopup = extern union {
    pub const VTable = extern struct {
        base: IDeskBar.VTable,
        Popup: *const fn(
            self: *const IMenuPopup,
            ppt: ?*POINTL,
            prcExclude: ?*RECTL,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSelect: *const fn(
            self: *const IMenuPopup,
            dwSelectType: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSubMenu: *const fn(
            self: *const IMenuPopup,
            pmp: ?*IMenuPopup,
            fSet: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDeskBar: IDeskBar,
    IOleWindow: IOleWindow,
    IUnknown: IUnknown,
    pub fn Popup(self: *const IMenuPopup, ppt: ?*POINTL, prcExclude: ?*RECTL, dwFlags: i32) callconv(.Inline) HRESULT {
        return self.vtable.Popup(self, ppt, prcExclude, dwFlags);
    }
    pub fn OnSelect(self: *const IMenuPopup, dwSelectType: u32) callconv(.Inline) HRESULT {
        return self.vtable.OnSelect(self, dwSelectType);
    }
    pub fn SetSubMenu(self: *const IMenuPopup, pmp: ?*IMenuPopup, fSet: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetSubMenu(self, pmp, fSet);
    }
};

pub const FILE_USAGE_TYPE = enum(i32) {
    PLAYING = 0,
    EDITING = 1,
    GENERIC = 2,
};
pub const FUT_PLAYING = FILE_USAGE_TYPE.PLAYING;
pub const FUT_EDITING = FILE_USAGE_TYPE.EDITING;
pub const FUT_GENERIC = FILE_USAGE_TYPE.GENERIC;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFileIsInUse_Value = Guid.initString("64a1cbf0-3a1a-4461-9158-376969693950");
pub const IID_IFileIsInUse = &IID_IFileIsInUse_Value;
pub const IFileIsInUse = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAppName: *const fn(
            self: *const IFileIsInUse,
            ppszName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUsage: *const fn(
            self: *const IFileIsInUse,
            pfut: ?*FILE_USAGE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCapabilities: *const fn(
            self: *const IFileIsInUse,
            pdwCapFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSwitchToHWND: *const fn(
            self: *const IFileIsInUse,
            phwnd: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloseFile: *const fn(
            self: *const IFileIsInUse,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetAppName(self: *const IFileIsInUse, ppszName: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetAppName(self, ppszName);
    }
    pub fn GetUsage(self: *const IFileIsInUse, pfut: ?*FILE_USAGE_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.GetUsage(self, pfut);
    }
    pub fn GetCapabilities(self: *const IFileIsInUse, pdwCapFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCapabilities(self, pdwCapFlags);
    }
    pub fn GetSwitchToHWND(self: *const IFileIsInUse, phwnd: ?*?HWND) callconv(.Inline) HRESULT {
        return self.vtable.GetSwitchToHWND(self, phwnd);
    }
    pub fn CloseFile(self: *const IFileIsInUse) callconv(.Inline) HRESULT {
        return self.vtable.CloseFile(self);
    }
};

pub const FDE_OVERWRITE_RESPONSE = enum(i32) {
    DEFAULT = 0,
    ACCEPT = 1,
    REFUSE = 2,
};
pub const FDEOR_DEFAULT = FDE_OVERWRITE_RESPONSE.DEFAULT;
pub const FDEOR_ACCEPT = FDE_OVERWRITE_RESPONSE.ACCEPT;
pub const FDEOR_REFUSE = FDE_OVERWRITE_RESPONSE.REFUSE;

pub const FDE_SHAREVIOLATION_RESPONSE = enum(i32) {
    DEFAULT = 0,
    ACCEPT = 1,
    REFUSE = 2,
};
pub const FDESVR_DEFAULT = FDE_SHAREVIOLATION_RESPONSE.DEFAULT;
pub const FDESVR_ACCEPT = FDE_SHAREVIOLATION_RESPONSE.ACCEPT;
pub const FDESVR_REFUSE = FDE_SHAREVIOLATION_RESPONSE.REFUSE;

pub const FDAP = enum(i32) {
    BOTTOM = 0,
    TOP = 1,
};
pub const FDAP_BOTTOM = FDAP.BOTTOM;
pub const FDAP_TOP = FDAP.TOP;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFileDialogEvents_Value = Guid.initString("973510db-7d7f-452b-8975-74a85828d354");
pub const IID_IFileDialogEvents = &IID_IFileDialogEvents_Value;
pub const IFileDialogEvents = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnFileOk: *const fn(
            self: *const IFileDialogEvents,
            pfd: ?*IFileDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnFolderChanging: *const fn(
            self: *const IFileDialogEvents,
            pfd: ?*IFileDialog,
            psiFolder: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnFolderChange: *const fn(
            self: *const IFileDialogEvents,
            pfd: ?*IFileDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSelectionChange: *const fn(
            self: *const IFileDialogEvents,
            pfd: ?*IFileDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnShareViolation: *const fn(
            self: *const IFileDialogEvents,
            pfd: ?*IFileDialog,
            psi: ?*IShellItem,
            pResponse: ?*FDE_SHAREVIOLATION_RESPONSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTypeChange: *const fn(
            self: *const IFileDialogEvents,
            pfd: ?*IFileDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnOverwrite: *const fn(
            self: *const IFileDialogEvents,
            pfd: ?*IFileDialog,
            psi: ?*IShellItem,
            pResponse: ?*FDE_OVERWRITE_RESPONSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnFileOk(self: *const IFileDialogEvents, pfd: ?*IFileDialog) callconv(.Inline) HRESULT {
        return self.vtable.OnFileOk(self, pfd);
    }
    pub fn OnFolderChanging(self: *const IFileDialogEvents, pfd: ?*IFileDialog, psiFolder: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.OnFolderChanging(self, pfd, psiFolder);
    }
    pub fn OnFolderChange(self: *const IFileDialogEvents, pfd: ?*IFileDialog) callconv(.Inline) HRESULT {
        return self.vtable.OnFolderChange(self, pfd);
    }
    pub fn OnSelectionChange(self: *const IFileDialogEvents, pfd: ?*IFileDialog) callconv(.Inline) HRESULT {
        return self.vtable.OnSelectionChange(self, pfd);
    }
    pub fn OnShareViolation(self: *const IFileDialogEvents, pfd: ?*IFileDialog, psi: ?*IShellItem, pResponse: ?*FDE_SHAREVIOLATION_RESPONSE) callconv(.Inline) HRESULT {
        return self.vtable.OnShareViolation(self, pfd, psi, pResponse);
    }
    pub fn OnTypeChange(self: *const IFileDialogEvents, pfd: ?*IFileDialog) callconv(.Inline) HRESULT {
        return self.vtable.OnTypeChange(self, pfd);
    }
    pub fn OnOverwrite(self: *const IFileDialogEvents, pfd: ?*IFileDialog, psi: ?*IShellItem, pResponse: ?*FDE_OVERWRITE_RESPONSE) callconv(.Inline) HRESULT {
        return self.vtable.OnOverwrite(self, pfd, psi, pResponse);
    }
};

pub const FILEOPENDIALOGOPTIONS = packed struct(u32) {
    _0: u1 = 0,
    OVERWRITEPROMPT: u1 = 0,
    STRICTFILETYPES: u1 = 0,
    NOCHANGEDIR: u1 = 0,
    _4: u1 = 0,
    PICKFOLDERS: u1 = 0,
    FORCEFILESYSTEM: u1 = 0,
    ALLNONSTORAGEITEMS: u1 = 0,
    NOVALIDATE: u1 = 0,
    ALLOWMULTISELECT: u1 = 0,
    _10: u1 = 0,
    PATHMUSTEXIST: u1 = 0,
    FILEMUSTEXIST: u1 = 0,
    CREATEPROMPT: u1 = 0,
    SHAREAWARE: u1 = 0,
    NOREADONLYRETURN: u1 = 0,
    NOTESTFILECREATE: u1 = 0,
    HIDEMRUPLACES: u1 = 0,
    HIDEPINNEDPLACES: u1 = 0,
    _19: u1 = 0,
    NODEREFERENCELINKS: u1 = 0,
    OKBUTTONNEEDSINTERACTION: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    DONTADDTORECENT: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    FORCESHOWHIDDEN: u1 = 0,
    DEFAULTNOMINIMODE: u1 = 0,
    FORCEPREVIEWPANEON: u1 = 0,
    SUPPORTSTREAMABLEITEMS: u1 = 0,
};
pub const FOS_OVERWRITEPROMPT = FILEOPENDIALOGOPTIONS{ .OVERWRITEPROMPT = 1 };
pub const FOS_STRICTFILETYPES = FILEOPENDIALOGOPTIONS{ .STRICTFILETYPES = 1 };
pub const FOS_NOCHANGEDIR = FILEOPENDIALOGOPTIONS{ .NOCHANGEDIR = 1 };
pub const FOS_PICKFOLDERS = FILEOPENDIALOGOPTIONS{ .PICKFOLDERS = 1 };
pub const FOS_FORCEFILESYSTEM = FILEOPENDIALOGOPTIONS{ .FORCEFILESYSTEM = 1 };
pub const FOS_ALLNONSTORAGEITEMS = FILEOPENDIALOGOPTIONS{ .ALLNONSTORAGEITEMS = 1 };
pub const FOS_NOVALIDATE = FILEOPENDIALOGOPTIONS{ .NOVALIDATE = 1 };
pub const FOS_ALLOWMULTISELECT = FILEOPENDIALOGOPTIONS{ .ALLOWMULTISELECT = 1 };
pub const FOS_PATHMUSTEXIST = FILEOPENDIALOGOPTIONS{ .PATHMUSTEXIST = 1 };
pub const FOS_FILEMUSTEXIST = FILEOPENDIALOGOPTIONS{ .FILEMUSTEXIST = 1 };
pub const FOS_CREATEPROMPT = FILEOPENDIALOGOPTIONS{ .CREATEPROMPT = 1 };
pub const FOS_SHAREAWARE = FILEOPENDIALOGOPTIONS{ .SHAREAWARE = 1 };
pub const FOS_NOREADONLYRETURN = FILEOPENDIALOGOPTIONS{ .NOREADONLYRETURN = 1 };
pub const FOS_NOTESTFILECREATE = FILEOPENDIALOGOPTIONS{ .NOTESTFILECREATE = 1 };
pub const FOS_HIDEMRUPLACES = FILEOPENDIALOGOPTIONS{ .HIDEMRUPLACES = 1 };
pub const FOS_HIDEPINNEDPLACES = FILEOPENDIALOGOPTIONS{ .HIDEPINNEDPLACES = 1 };
pub const FOS_NODEREFERENCELINKS = FILEOPENDIALOGOPTIONS{ .NODEREFERENCELINKS = 1 };
pub const FOS_OKBUTTONNEEDSINTERACTION = FILEOPENDIALOGOPTIONS{ .OKBUTTONNEEDSINTERACTION = 1 };
pub const FOS_DONTADDTORECENT = FILEOPENDIALOGOPTIONS{ .DONTADDTORECENT = 1 };
pub const FOS_FORCESHOWHIDDEN = FILEOPENDIALOGOPTIONS{ .FORCESHOWHIDDEN = 1 };
pub const FOS_DEFAULTNOMINIMODE = FILEOPENDIALOGOPTIONS{ .DEFAULTNOMINIMODE = 1 };
pub const FOS_FORCEPREVIEWPANEON = FILEOPENDIALOGOPTIONS{ .FORCEPREVIEWPANEON = 1 };
pub const FOS_SUPPORTSTREAMABLEITEMS = FILEOPENDIALOGOPTIONS{ .SUPPORTSTREAMABLEITEMS = 1 };

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFileDialog_Value = Guid.initString("42f85136-db7e-439c-85f1-e4075d135fc8");
pub const IID_IFileDialog = &IID_IFileDialog_Value;
pub const IFileDialog = extern union {
    pub const VTable = extern struct {
        base: IModalWindow.VTable,
        SetFileTypes: *const fn(
            self: *const IFileDialog,
            cFileTypes: u32,
            rgFilterSpec: [*]const COMDLG_FILTERSPEC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFileTypeIndex: *const fn(
            self: *const IFileDialog,
            iFileType: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileTypeIndex: *const fn(
            self: *const IFileDialog,
            piFileType: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Advise: *const fn(
            self: *const IFileDialog,
            pfde: ?*IFileDialogEvents,
            pdwCookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: *const fn(
            self: *const IFileDialog,
            dwCookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOptions: *const fn(
            self: *const IFileDialog,
            fos: FILEOPENDIALOGOPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptions: *const fn(
            self: *const IFileDialog,
            pfos: ?*FILEOPENDIALOGOPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultFolder: *const fn(
            self: *const IFileDialog,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFolder: *const fn(
            self: *const IFileDialog,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolder: *const fn(
            self: *const IFileDialog,
            ppsi: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentSelection: *const fn(
            self: *const IFileDialog,
            ppsi: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFileName: *const fn(
            self: *const IFileDialog,
            pszName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileName: *const fn(
            self: *const IFileDialog,
            pszName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTitle: *const fn(
            self: *const IFileDialog,
            pszTitle: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOkButtonLabel: *const fn(
            self: *const IFileDialog,
            pszText: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFileNameLabel: *const fn(
            self: *const IFileDialog,
            pszLabel: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResult: *const fn(
            self: *const IFileDialog,
            ppsi: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPlace: *const fn(
            self: *const IFileDialog,
            psi: ?*IShellItem,
            fdap: FDAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultExtension: *const fn(
            self: *const IFileDialog,
            pszDefaultExtension: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn(
            self: *const IFileDialog,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClientGuid: *const fn(
            self: *const IFileDialog,
            guid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearClientData: *const fn(
            self: *const IFileDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFilter: *const fn(
            self: *const IFileDialog,
            pFilter: ?*IShellItemFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IModalWindow: IModalWindow,
    IUnknown: IUnknown,
    pub fn SetFileTypes(self: *const IFileDialog, cFileTypes: u32, rgFilterSpec: [*]const COMDLG_FILTERSPEC) callconv(.Inline) HRESULT {
        return self.vtable.SetFileTypes(self, cFileTypes, rgFilterSpec);
    }
    pub fn SetFileTypeIndex(self: *const IFileDialog, iFileType: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetFileTypeIndex(self, iFileType);
    }
    pub fn GetFileTypeIndex(self: *const IFileDialog, piFileType: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetFileTypeIndex(self, piFileType);
    }
    pub fn Advise(self: *const IFileDialog, pfde: ?*IFileDialogEvents, pdwCookie: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Advise(self, pfde, pdwCookie);
    }
    pub fn Unadvise(self: *const IFileDialog, dwCookie: u32) callconv(.Inline) HRESULT {
        return self.vtable.Unadvise(self, dwCookie);
    }
    pub fn SetOptions(self: *const IFileDialog, fos: FILEOPENDIALOGOPTIONS) callconv(.Inline) HRESULT {
        return self.vtable.SetOptions(self, fos);
    }
    pub fn GetOptions(self: *const IFileDialog, pfos: ?*FILEOPENDIALOGOPTIONS) callconv(.Inline) HRESULT {
        return self.vtable.GetOptions(self, pfos);
    }
    pub fn SetDefaultFolder(self: *const IFileDialog, psi: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.SetDefaultFolder(self, psi);
    }
    pub fn SetFolder(self: *const IFileDialog, psi: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.SetFolder(self, psi);
    }
    pub fn GetFolder(self: *const IFileDialog, ppsi: ?*?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.GetFolder(self, ppsi);
    }
    pub fn GetCurrentSelection(self: *const IFileDialog, ppsi: ?*?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.GetCurrentSelection(self, ppsi);
    }
    pub fn SetFileName(self: *const IFileDialog, pszName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetFileName(self, pszName);
    }
    pub fn GetFileName(self: *const IFileDialog, pszName: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetFileName(self, pszName);
    }
    pub fn SetTitle(self: *const IFileDialog, pszTitle: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetTitle(self, pszTitle);
    }
    pub fn SetOkButtonLabel(self: *const IFileDialog, pszText: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetOkButtonLabel(self, pszText);
    }
    pub fn SetFileNameLabel(self: *const IFileDialog, pszLabel: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetFileNameLabel(self, pszLabel);
    }
    pub fn GetResult(self: *const IFileDialog, ppsi: ?*?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.GetResult(self, ppsi);
    }
    pub fn AddPlace(self: *const IFileDialog, psi: ?*IShellItem, fdap: FDAP) callconv(.Inline) HRESULT {
        return self.vtable.AddPlace(self, psi, fdap);
    }
    pub fn SetDefaultExtension(self: *const IFileDialog, pszDefaultExtension: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetDefaultExtension(self, pszDefaultExtension);
    }
    pub fn Close(self: *const IFileDialog, hr: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.Close(self, hr);
    }
    pub fn SetClientGuid(self: *const IFileDialog, guid: ?*const Guid) callconv(.Inline) HRESULT {
        return self.vtable.SetClientGuid(self, guid);
    }
    pub fn ClearClientData(self: *const IFileDialog) callconv(.Inline) HRESULT {
        return self.vtable.ClearClientData(self);
    }
    pub fn SetFilter(self: *const IFileDialog, pFilter: ?*IShellItemFilter) callconv(.Inline) HRESULT {
        return self.vtable.SetFilter(self, pFilter);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFileSaveDialog_Value = Guid.initString("84bccd23-5fde-4cdb-aea4-af64b83d78ab");
pub const IID_IFileSaveDialog = &IID_IFileSaveDialog_Value;
pub const IFileSaveDialog = extern union {
    pub const VTable = extern struct {
        base: IFileDialog.VTable,
        SetSaveAsItem: *const fn(
            self: *const IFileSaveDialog,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperties: *const fn(
            self: *const IFileSaveDialog,
            pStore: ?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCollectedProperties: *const fn(
            self: *const IFileSaveDialog,
            pList: ?*IPropertyDescriptionList,
            fAppendDefault: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperties: *const fn(
            self: *const IFileSaveDialog,
            ppStore: ?*?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ApplyProperties: *const fn(
            self: *const IFileSaveDialog,
            psi: ?*IShellItem,
            pStore: ?*IPropertyStore,
            hwnd: ?HWND,
            pSink: ?*IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IFileDialog: IFileDialog,
    IModalWindow: IModalWindow,
    IUnknown: IUnknown,
    pub fn SetSaveAsItem(self: *const IFileSaveDialog, psi: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.SetSaveAsItem(self, psi);
    }
    pub fn SetProperties(self: *const IFileSaveDialog, pStore: ?*IPropertyStore) callconv(.Inline) HRESULT {
        return self.vtable.SetProperties(self, pStore);
    }
    pub fn SetCollectedProperties(self: *const IFileSaveDialog, pList: ?*IPropertyDescriptionList, fAppendDefault: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetCollectedProperties(self, pList, fAppendDefault);
    }
    pub fn GetProperties(self: *const IFileSaveDialog, ppStore: ?*?*IPropertyStore) callconv(.Inline) HRESULT {
        return self.vtable.GetProperties(self, ppStore);
    }
    pub fn ApplyProperties(self: *const IFileSaveDialog, psi: ?*IShellItem, pStore: ?*IPropertyStore, hwnd: ?HWND, pSink: ?*IFileOperationProgressSink) callconv(.Inline) HRESULT {
        return self.vtable.ApplyProperties(self, psi, pStore, hwnd, pSink);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFileOpenDialog_Value = Guid.initString("d57c7288-d4ad-4768-be02-9d969532d960");
pub const IID_IFileOpenDialog = &IID_IFileOpenDialog_Value;
pub const IFileOpenDialog = extern union {
    pub const VTable = extern struct {
        base: IFileDialog.VTable,
        GetResults: *const fn(
            self: *const IFileOpenDialog,
            ppenum: ?*?*IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectedItems: *const fn(
            self: *const IFileOpenDialog,
            ppsai: ?*?*IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IFileDialog: IFileDialog,
    IModalWindow: IModalWindow,
    IUnknown: IUnknown,
    pub fn GetResults(self: *const IFileOpenDialog, ppenum: ?*?*IShellItemArray) callconv(.Inline) HRESULT {
        return self.vtable.GetResults(self, ppenum);
    }
    pub fn GetSelectedItems(self: *const IFileOpenDialog, ppsai: ?*?*IShellItemArray) callconv(.Inline) HRESULT {
        return self.vtable.GetSelectedItems(self, ppsai);
    }
};

pub const CDCONTROLSTATEF = enum(i32) {
    INACTIVE = 0,
    ENABLED = 1,
    VISIBLE = 2,
    ENABLEDVISIBLE = 3,
};
pub const CDCS_INACTIVE = CDCONTROLSTATEF.INACTIVE;
pub const CDCS_ENABLED = CDCONTROLSTATEF.ENABLED;
pub const CDCS_VISIBLE = CDCONTROLSTATEF.VISIBLE;
pub const CDCS_ENABLEDVISIBLE = CDCONTROLSTATEF.ENABLEDVISIBLE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFileDialogCustomize_Value = Guid.initString("e6fdd21a-163f-4975-9c8c-a69f1ba37034");
pub const IID_IFileDialogCustomize = &IID_IFileDialogCustomize_Value;
pub const IFileDialogCustomize = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnableOpenDropDown: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddMenu: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            pszLabel: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPushButton: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            pszLabel: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddComboBox: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRadioButtonList: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCheckButton: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            pszLabel: ?[*:0]const u16,
            bChecked: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddEditBox: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            pszText: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddSeparator: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddText: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            pszText: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetControlLabel: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            pszLabel: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetControlState: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            pdwState: ?*CDCONTROLSTATEF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetControlState: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            dwState: CDCONTROLSTATEF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEditBoxText: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            ppszText: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEditBoxText: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            pszText: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCheckButtonState: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            pbChecked: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCheckButtonState: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            bChecked: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddControlItem: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            dwIDItem: u32,
            pszLabel: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveControlItem: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            dwIDItem: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllControlItems: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetControlItemState: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            dwIDItem: u32,
            pdwState: ?*CDCONTROLSTATEF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetControlItemState: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            dwIDItem: u32,
            dwState: CDCONTROLSTATEF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectedControlItem: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            pdwIDItem: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSelectedControlItem: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            dwIDItem: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartVisualGroup: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            pszLabel: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndVisualGroup: *const fn(
            self: *const IFileDialogCustomize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MakeProminent: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetControlItemText: *const fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            dwIDItem: u32,
            pszLabel: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn EnableOpenDropDown(self: *const IFileDialogCustomize, dwIDCtl: u32) callconv(.Inline) HRESULT {
        return self.vtable.EnableOpenDropDown(self, dwIDCtl);
    }
    pub fn AddMenu(self: *const IFileDialogCustomize, dwIDCtl: u32, pszLabel: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.AddMenu(self, dwIDCtl, pszLabel);
    }
    pub fn AddPushButton(self: *const IFileDialogCustomize, dwIDCtl: u32, pszLabel: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.AddPushButton(self, dwIDCtl, pszLabel);
    }
    pub fn AddComboBox(self: *const IFileDialogCustomize, dwIDCtl: u32) callconv(.Inline) HRESULT {
        return self.vtable.AddComboBox(self, dwIDCtl);
    }
    pub fn AddRadioButtonList(self: *const IFileDialogCustomize, dwIDCtl: u32) callconv(.Inline) HRESULT {
        return self.vtable.AddRadioButtonList(self, dwIDCtl);
    }
    pub fn AddCheckButton(self: *const IFileDialogCustomize, dwIDCtl: u32, pszLabel: ?[*:0]const u16, bChecked: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.AddCheckButton(self, dwIDCtl, pszLabel, bChecked);
    }
    pub fn AddEditBox(self: *const IFileDialogCustomize, dwIDCtl: u32, pszText: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.AddEditBox(self, dwIDCtl, pszText);
    }
    pub fn AddSeparator(self: *const IFileDialogCustomize, dwIDCtl: u32) callconv(.Inline) HRESULT {
        return self.vtable.AddSeparator(self, dwIDCtl);
    }
    pub fn AddText(self: *const IFileDialogCustomize, dwIDCtl: u32, pszText: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.AddText(self, dwIDCtl, pszText);
    }
    pub fn SetControlLabel(self: *const IFileDialogCustomize, dwIDCtl: u32, pszLabel: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetControlLabel(self, dwIDCtl, pszLabel);
    }
    pub fn GetControlState(self: *const IFileDialogCustomize, dwIDCtl: u32, pdwState: ?*CDCONTROLSTATEF) callconv(.Inline) HRESULT {
        return self.vtable.GetControlState(self, dwIDCtl, pdwState);
    }
    pub fn SetControlState(self: *const IFileDialogCustomize, dwIDCtl: u32, dwState: CDCONTROLSTATEF) callconv(.Inline) HRESULT {
        return self.vtable.SetControlState(self, dwIDCtl, dwState);
    }
    pub fn GetEditBoxText(self: *const IFileDialogCustomize, dwIDCtl: u32, ppszText: ?*?*u16) callconv(.Inline) HRESULT {
        return self.vtable.GetEditBoxText(self, dwIDCtl, ppszText);
    }
    pub fn SetEditBoxText(self: *const IFileDialogCustomize, dwIDCtl: u32, pszText: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetEditBoxText(self, dwIDCtl, pszText);
    }
    pub fn GetCheckButtonState(self: *const IFileDialogCustomize, dwIDCtl: u32, pbChecked: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.GetCheckButtonState(self, dwIDCtl, pbChecked);
    }
    pub fn SetCheckButtonState(self: *const IFileDialogCustomize, dwIDCtl: u32, bChecked: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetCheckButtonState(self, dwIDCtl, bChecked);
    }
    pub fn AddControlItem(self: *const IFileDialogCustomize, dwIDCtl: u32, dwIDItem: u32, pszLabel: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.AddControlItem(self, dwIDCtl, dwIDItem, pszLabel);
    }
    pub fn RemoveControlItem(self: *const IFileDialogCustomize, dwIDCtl: u32, dwIDItem: u32) callconv(.Inline) HRESULT {
        return self.vtable.RemoveControlItem(self, dwIDCtl, dwIDItem);
    }
    pub fn RemoveAllControlItems(self: *const IFileDialogCustomize, dwIDCtl: u32) callconv(.Inline) HRESULT {
        return self.vtable.RemoveAllControlItems(self, dwIDCtl);
    }
    pub fn GetControlItemState(self: *const IFileDialogCustomize, dwIDCtl: u32, dwIDItem: u32, pdwState: ?*CDCONTROLSTATEF) callconv(.Inline) HRESULT {
        return self.vtable.GetControlItemState(self, dwIDCtl, dwIDItem, pdwState);
    }
    pub fn SetControlItemState(self: *const IFileDialogCustomize, dwIDCtl: u32, dwIDItem: u32, dwState: CDCONTROLSTATEF) callconv(.Inline) HRESULT {
        return self.vtable.SetControlItemState(self, dwIDCtl, dwIDItem, dwState);
    }
    pub fn GetSelectedControlItem(self: *const IFileDialogCustomize, dwIDCtl: u32, pdwIDItem: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetSelectedControlItem(self, dwIDCtl, pdwIDItem);
    }
    pub fn SetSelectedControlItem(self: *const IFileDialogCustomize, dwIDCtl: u32, dwIDItem: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetSelectedControlItem(self, dwIDCtl, dwIDItem);
    }
    pub fn StartVisualGroup(self: *const IFileDialogCustomize, dwIDCtl: u32, pszLabel: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.StartVisualGroup(self, dwIDCtl, pszLabel);
    }
    pub fn EndVisualGroup(self: *const IFileDialogCustomize) callconv(.Inline) HRESULT {
        return self.vtable.EndVisualGroup(self);
    }
    pub fn MakeProminent(self: *const IFileDialogCustomize, dwIDCtl: u32) callconv(.Inline) HRESULT {
        return self.vtable.MakeProminent(self, dwIDCtl);
    }
    pub fn SetControlItemText(self: *const IFileDialogCustomize, dwIDCtl: u32, dwIDItem: u32, pszLabel: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetControlItemText(self, dwIDCtl, dwIDItem, pszLabel);
    }
};

pub const ASSOCIATIONLEVEL = enum(i32) {
    MACHINE = 0,
    EFFECTIVE = 1,
    USER = 2,
};
pub const AL_MACHINE = ASSOCIATIONLEVEL.MACHINE;
pub const AL_EFFECTIVE = ASSOCIATIONLEVEL.EFFECTIVE;
pub const AL_USER = ASSOCIATIONLEVEL.USER;

pub const ASSOCIATIONTYPE = enum(i32) {
    FILEEXTENSION = 0,
    URLPROTOCOL = 1,
    STARTMENUCLIENT = 2,
    MIMETYPE = 3,
};
pub const AT_FILEEXTENSION = ASSOCIATIONTYPE.FILEEXTENSION;
pub const AT_URLPROTOCOL = ASSOCIATIONTYPE.URLPROTOCOL;
pub const AT_STARTMENUCLIENT = ASSOCIATIONTYPE.STARTMENUCLIENT;
pub const AT_MIMETYPE = ASSOCIATIONTYPE.MIMETYPE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IApplicationAssociationRegistration_Value = Guid.initString("4e530b0a-e611-4c77-a3ac-9031d022281b");
pub const IID_IApplicationAssociationRegistration = &IID_IApplicationAssociationRegistration_Value;
pub const IApplicationAssociationRegistration = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryCurrentDefault: *const fn(
            self: *const IApplicationAssociationRegistration,
            pszQuery: ?[*:0]const u16,
            atQueryType: ASSOCIATIONTYPE,
            alQueryLevel: ASSOCIATIONLEVEL,
            ppszAssociation: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryAppIsDefault: *const fn(
            self: *const IApplicationAssociationRegistration,
            pszQuery: ?[*:0]const u16,
            atQueryType: ASSOCIATIONTYPE,
            alQueryLevel: ASSOCIATIONLEVEL,
            pszAppRegistryName: ?[*:0]const u16,
            pfDefault: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryAppIsDefaultAll: *const fn(
            self: *const IApplicationAssociationRegistration,
            alQueryLevel: ASSOCIATIONLEVEL,
            pszAppRegistryName: ?[*:0]const u16,
            pfDefault: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAppAsDefault: *const fn(
            self: *const IApplicationAssociationRegistration,
            pszAppRegistryName: ?[*:0]const u16,
            pszSet: ?[*:0]const u16,
            atSetType: ASSOCIATIONTYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAppAsDefaultAll: *const fn(
            self: *const IApplicationAssociationRegistration,
            pszAppRegistryName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearUserAssociations: *const fn(
            self: *const IApplicationAssociationRegistration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn QueryCurrentDefault(self: *const IApplicationAssociationRegistration, pszQuery: ?[*:0]const u16, atQueryType: ASSOCIATIONTYPE, alQueryLevel: ASSOCIATIONLEVEL, ppszAssociation: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.QueryCurrentDefault(self, pszQuery, atQueryType, alQueryLevel, ppszAssociation);
    }
    pub fn QueryAppIsDefault(self: *const IApplicationAssociationRegistration, pszQuery: ?[*:0]const u16, atQueryType: ASSOCIATIONTYPE, alQueryLevel: ASSOCIATIONLEVEL, pszAppRegistryName: ?[*:0]const u16, pfDefault: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.QueryAppIsDefault(self, pszQuery, atQueryType, alQueryLevel, pszAppRegistryName, pfDefault);
    }
    pub fn QueryAppIsDefaultAll(self: *const IApplicationAssociationRegistration, alQueryLevel: ASSOCIATIONLEVEL, pszAppRegistryName: ?[*:0]const u16, pfDefault: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.QueryAppIsDefaultAll(self, alQueryLevel, pszAppRegistryName, pfDefault);
    }
    pub fn SetAppAsDefault(self: *const IApplicationAssociationRegistration, pszAppRegistryName: ?[*:0]const u16, pszSet: ?[*:0]const u16, atSetType: ASSOCIATIONTYPE) callconv(.Inline) HRESULT {
        return self.vtable.SetAppAsDefault(self, pszAppRegistryName, pszSet, atSetType);
    }
    pub fn SetAppAsDefaultAll(self: *const IApplicationAssociationRegistration, pszAppRegistryName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetAppAsDefaultAll(self, pszAppRegistryName);
    }
    pub fn ClearUserAssociations(self: *const IApplicationAssociationRegistration) callconv(.Inline) HRESULT {
        return self.vtable.ClearUserAssociations(self);
    }
};

pub const DELEGATEITEMID = extern struct {
    cbSize: u16 align(1),
    wOuter: u16 align(1),
    cbInner: u16 align(1),
    rgb: [1]u8 align(1),
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IDelegateFolder_Value = Guid.initString("add8ba80-002b-11d0-8f0f-00c04fd7d062");
pub const IID_IDelegateFolder = &IID_IDelegateFolder_Value;
pub const IDelegateFolder = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetItemAlloc: *const fn(
            self: *const IDelegateFolder,
            pmalloc: ?*IMalloc,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetItemAlloc(self: *const IDelegateFolder, pmalloc: ?*IMalloc) callconv(.Inline) HRESULT {
        return self.vtable.SetItemAlloc(self, pmalloc);
    }
};

pub const _BROWSERFRAMEOPTIONS = enum(i32) {
    FO_NONE = 0,
    FO_BROWSER_PERSIST_SETTINGS = 1,
    FO_RENAME_FOLDER_OPTIONS_TOINTERNET = 2,
    FO_BOTH_OPTIONS = 4,
    IF_PREFER_INTERNET_SHORTCUT = 8,
    FO_BROWSE_NO_IN_NEW_PROCESS = 16,
    FO_ENABLE_HYPERLINK_TRACKING = 32,
    FO_USE_IE_OFFLINE_SUPPORT = 64,
    FO_SUBSTITUE_INTERNET_START_PAGE = 128,
    FO_USE_IE_LOGOBANDING = 256,
    FO_ADD_IE_TOCAPTIONBAR = 512,
    FO_USE_DIALUP_REF = 1024,
    FO_USE_IE_TOOLBAR = 2048,
    FO_NO_PARENT_FOLDER_SUPPORT = 4096,
    FO_NO_REOPEN_NEXT_RESTART = 8192,
    FO_GO_HOME_PAGE = 16384,
    FO_PREFER_IEPROCESS = 32768,
    FO_SHOW_NAVIGATION_CANCELLED = 65536,
    FO_USE_IE_STATUSBAR = 131072,
    FO_QUERY_ALL = -1,
};
pub const BFO_NONE = _BROWSERFRAMEOPTIONS.FO_NONE;
pub const BFO_BROWSER_PERSIST_SETTINGS = _BROWSERFRAMEOPTIONS.FO_BROWSER_PERSIST_SETTINGS;
pub const BFO_RENAME_FOLDER_OPTIONS_TOINTERNET = _BROWSERFRAMEOPTIONS.FO_RENAME_FOLDER_OPTIONS_TOINTERNET;
pub const BFO_BOTH_OPTIONS = _BROWSERFRAMEOPTIONS.FO_BOTH_OPTIONS;
pub const BIF_PREFER_INTERNET_SHORTCUT = _BROWSERFRAMEOPTIONS.IF_PREFER_INTERNET_SHORTCUT;
pub const BFO_BROWSE_NO_IN_NEW_PROCESS = _BROWSERFRAMEOPTIONS.FO_BROWSE_NO_IN_NEW_PROCESS;
pub const BFO_ENABLE_HYPERLINK_TRACKING = _BROWSERFRAMEOPTIONS.FO_ENABLE_HYPERLINK_TRACKING;
pub const BFO_USE_IE_OFFLINE_SUPPORT = _BROWSERFRAMEOPTIONS.FO_USE_IE_OFFLINE_SUPPORT;
pub const BFO_SUBSTITUE_INTERNET_START_PAGE = _BROWSERFRAMEOPTIONS.FO_SUBSTITUE_INTERNET_START_PAGE;
pub const BFO_USE_IE_LOGOBANDING = _BROWSERFRAMEOPTIONS.FO_USE_IE_LOGOBANDING;
pub const BFO_ADD_IE_TOCAPTIONBAR = _BROWSERFRAMEOPTIONS.FO_ADD_IE_TOCAPTIONBAR;
pub const BFO_USE_DIALUP_REF = _BROWSERFRAMEOPTIONS.FO_USE_DIALUP_REF;
pub const BFO_USE_IE_TOOLBAR = _BROWSERFRAMEOPTIONS.FO_USE_IE_TOOLBAR;
pub const BFO_NO_PARENT_FOLDER_SUPPORT = _BROWSERFRAMEOPTIONS.FO_NO_PARENT_FOLDER_SUPPORT;
pub const BFO_NO_REOPEN_NEXT_RESTART = _BROWSERFRAMEOPTIONS.FO_NO_REOPEN_NEXT_RESTART;
pub const BFO_GO_HOME_PAGE = _BROWSERFRAMEOPTIONS.FO_GO_HOME_PAGE;
pub const BFO_PREFER_IEPROCESS = _BROWSERFRAMEOPTIONS.FO_PREFER_IEPROCESS;
pub const BFO_SHOW_NAVIGATION_CANCELLED = _BROWSERFRAMEOPTIONS.FO_SHOW_NAVIGATION_CANCELLED;
pub const BFO_USE_IE_STATUSBAR = _BROWSERFRAMEOPTIONS.FO_USE_IE_STATUSBAR;
pub const BFO_QUERY_ALL = _BROWSERFRAMEOPTIONS.FO_QUERY_ALL;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IBrowserFrameOptions_Value = Guid.initString("10df43c8-1dbe-11d3-8b34-006097df5bd4");
pub const IID_IBrowserFrameOptions = &IID_IBrowserFrameOptions_Value;
pub const IBrowserFrameOptions = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFrameOptions: *const fn(
            self: *const IBrowserFrameOptions,
            dwMask: u32,
            pdwOptions: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetFrameOptions(self: *const IBrowserFrameOptions, dwMask: u32, pdwOptions: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetFrameOptions(self, dwMask, pdwOptions);
    }
};

pub const NWMF = enum(i32) {
    UNLOADING = 1,
    USERINITED = 2,
    FIRST = 4,
    OVERRIDEKEY = 8,
    SHOWHELP = 16,
    HTMLDIALOG = 32,
    FROMDIALOGCHILD = 64,
    USERREQUESTED = 128,
    USERALLOWED = 256,
    FORCEWINDOW = 65536,
    FORCETAB = 131072,
    SUGGESTWINDOW = 262144,
    SUGGESTTAB = 524288,
    INACTIVETAB = 1048576,
};
pub const NWMF_UNLOADING = NWMF.UNLOADING;
pub const NWMF_USERINITED = NWMF.USERINITED;
pub const NWMF_FIRST = NWMF.FIRST;
pub const NWMF_OVERRIDEKEY = NWMF.OVERRIDEKEY;
pub const NWMF_SHOWHELP = NWMF.SHOWHELP;
pub const NWMF_HTMLDIALOG = NWMF.HTMLDIALOG;
pub const NWMF_FROMDIALOGCHILD = NWMF.FROMDIALOGCHILD;
pub const NWMF_USERREQUESTED = NWMF.USERREQUESTED;
pub const NWMF_USERALLOWED = NWMF.USERALLOWED;
pub const NWMF_FORCEWINDOW = NWMF.FORCEWINDOW;
pub const NWMF_FORCETAB = NWMF.FORCETAB;
pub const NWMF_SUGGESTWINDOW = NWMF.SUGGESTWINDOW;
pub const NWMF_SUGGESTTAB = NWMF.SUGGESTTAB;
pub const NWMF_INACTIVETAB = NWMF.INACTIVETAB;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INewWindowManager_Value = Guid.initString("d2bc4c84-3f72-4a52-a604-7bcbf3982cbb");
pub const IID_INewWindowManager = &IID_INewWindowManager_Value;
pub const INewWindowManager = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EvaluateNewWindow: *const fn(
            self: *const INewWindowManager,
            pszUrl: ?[*:0]const u16,
            pszName: ?[*:0]const u16,
            pszUrlContext: ?[*:0]const u16,
            pszFeatures: ?[*:0]const u16,
            fReplace: BOOL,
            dwFlags: u32,
            dwUserActionTime: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn EvaluateNewWindow(self: *const INewWindowManager, pszUrl: ?[*:0]const u16, pszName: ?[*:0]const u16, pszUrlContext: ?[*:0]const u16, pszFeatures: ?[*:0]const u16, fReplace: BOOL, dwFlags: u32, dwUserActionTime: u32) callconv(.Inline) HRESULT {
        return self.vtable.EvaluateNewWindow(self, pszUrl, pszName, pszUrlContext, pszFeatures, fReplace, dwFlags, dwUserActionTime);
    }
};

pub const ATTACHMENT_PROMPT = enum(i32) {
    NONE = 0,
    SAVE = 1,
    EXEC = 2,
    EXEC_OR_SAVE = 3,
};
pub const ATTACHMENT_PROMPT_NONE = ATTACHMENT_PROMPT.NONE;
pub const ATTACHMENT_PROMPT_SAVE = ATTACHMENT_PROMPT.SAVE;
pub const ATTACHMENT_PROMPT_EXEC = ATTACHMENT_PROMPT.EXEC;
pub const ATTACHMENT_PROMPT_EXEC_OR_SAVE = ATTACHMENT_PROMPT.EXEC_OR_SAVE;

pub const ATTACHMENT_ACTION = enum(i32) {
    CANCEL = 0,
    SAVE = 1,
    EXEC = 2,
};
pub const ATTACHMENT_ACTION_CANCEL = ATTACHMENT_ACTION.CANCEL;
pub const ATTACHMENT_ACTION_SAVE = ATTACHMENT_ACTION.SAVE;
pub const ATTACHMENT_ACTION_EXEC = ATTACHMENT_ACTION.EXEC;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IAttachmentExecute_Value = Guid.initString("73db1241-1e85-4581-8e4f-a81e1d0f8c57");
pub const IID_IAttachmentExecute = &IID_IAttachmentExecute_Value;
pub const IAttachmentExecute = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetClientTitle: *const fn(
            self: *const IAttachmentExecute,
            pszTitle: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClientGuid: *const fn(
            self: *const IAttachmentExecute,
            guid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLocalPath: *const fn(
            self: *const IAttachmentExecute,
            pszLocalPath: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFileName: *const fn(
            self: *const IAttachmentExecute,
            pszFileName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSource: *const fn(
            self: *const IAttachmentExecute,
            pszSource: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetReferrer: *const fn(
            self: *const IAttachmentExecute,
            pszReferrer: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckPolicy: *const fn(
            self: *const IAttachmentExecute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Prompt: *const fn(
            self: *const IAttachmentExecute,
            hwnd: ?HWND,
            prompt: ATTACHMENT_PROMPT,
            paction: ?*ATTACHMENT_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn(
            self: *const IAttachmentExecute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Execute: *const fn(
            self: *const IAttachmentExecute,
            hwnd: ?HWND,
            pszVerb: ?[*:0]const u16,
            phProcess: ?*?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveWithUI: *const fn(
            self: *const IAttachmentExecute,
            hwnd: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearClientState: *const fn(
            self: *const IAttachmentExecute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetClientTitle(self: *const IAttachmentExecute, pszTitle: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetClientTitle(self, pszTitle);
    }
    pub fn SetClientGuid(self: *const IAttachmentExecute, guid: ?*const Guid) callconv(.Inline) HRESULT {
        return self.vtable.SetClientGuid(self, guid);
    }
    pub fn SetLocalPath(self: *const IAttachmentExecute, pszLocalPath: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetLocalPath(self, pszLocalPath);
    }
    pub fn SetFileName(self: *const IAttachmentExecute, pszFileName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetFileName(self, pszFileName);
    }
    pub fn SetSource(self: *const IAttachmentExecute, pszSource: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetSource(self, pszSource);
    }
    pub fn SetReferrer(self: *const IAttachmentExecute, pszReferrer: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetReferrer(self, pszReferrer);
    }
    pub fn CheckPolicy(self: *const IAttachmentExecute) callconv(.Inline) HRESULT {
        return self.vtable.CheckPolicy(self);
    }
    pub fn Prompt(self: *const IAttachmentExecute, hwnd: ?HWND, prompt: ATTACHMENT_PROMPT, paction: ?*ATTACHMENT_ACTION) callconv(.Inline) HRESULT {
        return self.vtable.Prompt(self, hwnd, prompt, paction);
    }
    pub fn Save(self: *const IAttachmentExecute) callconv(.Inline) HRESULT {
        return self.vtable.Save(self);
    }
    pub fn Execute(self: *const IAttachmentExecute, hwnd: ?HWND, pszVerb: ?[*:0]const u16, phProcess: ?*?HANDLE) callconv(.Inline) HRESULT {
        return self.vtable.Execute(self, hwnd, pszVerb, phProcess);
    }
    pub fn SaveWithUI(self: *const IAttachmentExecute, hwnd: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.SaveWithUI(self, hwnd);
    }
    pub fn ClearClientState(self: *const IAttachmentExecute) callconv(.Inline) HRESULT {
        return self.vtable.ClearClientState(self);
    }
};

pub const SMDATA = extern struct {
    dwMask: u32,
    dwFlags: u32,
    hmenu: ?HMENU,
    hwnd: ?HWND,
    uId: u32,
    uIdParent: u32,
    uIdAncestor: u32,
    punk: ?*IUnknown,
    pidlFolder: ?*ITEMIDLIST,
    pidlItem: ?*ITEMIDLIST,
    psf: ?*IShellFolder,
    pvUserData: ?*anyopaque,
};

pub const SMINFO = extern struct {
    dwMask: u32,
    dwType: u32,
    dwFlags: u32,
    iIcon: i32,
};

pub const SMCSHCHANGENOTIFYSTRUCT = extern struct {
    lEvent: i32,
    pidl1: ?*ITEMIDLIST,
    pidl2: ?*ITEMIDLIST,
};

pub const SMINFOMASK = enum(i32) {
    TYPE = 1,
    FLAGS = 2,
    ICON = 4,
};
pub const SMIM_TYPE = SMINFOMASK.TYPE;
pub const SMIM_FLAGS = SMINFOMASK.FLAGS;
pub const SMIM_ICON = SMINFOMASK.ICON;

pub const SMINFOTYPE = enum(i32) {
    EPARATOR = 1,
    TRING = 2,
};
pub const SMIT_SEPARATOR = SMINFOTYPE.EPARATOR;
pub const SMIT_STRING = SMINFOTYPE.TRING;

pub const SMINFOFLAGS = enum(i32) {
    ICON = 1,
    ACCELERATOR = 2,
    DROPTARGET = 4,
    SUBMENU = 8,
    CHECKED = 32,
    DROPCASCADE = 64,
    HIDDEN = 128,
    DISABLED = 256,
    TRACKPOPUP = 512,
    DEMOTED = 1024,
    ALTSTATE = 2048,
    DRAGNDROP = 4096,
    NEW = 8192,
};
pub const SMIF_ICON = SMINFOFLAGS.ICON;
pub const SMIF_ACCELERATOR = SMINFOFLAGS.ACCELERATOR;
pub const SMIF_DROPTARGET = SMINFOFLAGS.DROPTARGET;
pub const SMIF_SUBMENU = SMINFOFLAGS.SUBMENU;
pub const SMIF_CHECKED = SMINFOFLAGS.CHECKED;
pub const SMIF_DROPCASCADE = SMINFOFLAGS.DROPCASCADE;
pub const SMIF_HIDDEN = SMINFOFLAGS.HIDDEN;
pub const SMIF_DISABLED = SMINFOFLAGS.DISABLED;
pub const SMIF_TRACKPOPUP = SMINFOFLAGS.TRACKPOPUP;
pub const SMIF_DEMOTED = SMINFOFLAGS.DEMOTED;
pub const SMIF_ALTSTATE = SMINFOFLAGS.ALTSTATE;
pub const SMIF_DRAGNDROP = SMINFOFLAGS.DRAGNDROP;
pub const SMIF_NEW = SMINFOFLAGS.NEW;

// TODO: this type is limited to platform 'windows5.0'
const IID_IShellMenuCallback_Value = Guid.initString("4ca300a1-9b8d-11d1-8b22-00c04fd918d0");
pub const IID_IShellMenuCallback = &IID_IShellMenuCallback_Value;
pub const IShellMenuCallback = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CallbackSM: *const fn(
            self: *const IShellMenuCallback,
            psmd: ?*SMDATA,
            uMsg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CallbackSM(self: *const IShellMenuCallback, psmd: ?*SMDATA, uMsg: u32, wParam: WPARAM, lParam: LPARAM) callconv(.Inline) HRESULT {
        return self.vtable.CallbackSM(self, psmd, uMsg, wParam, lParam);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellMenu_Value = Guid.initString("ee1f7637-e138-11d1-8379-00c04fd918d0");
pub const IID_IShellMenu = &IID_IShellMenu_Value;
pub const IShellMenu = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn(
            self: *const IShellMenu,
            psmc: ?*IShellMenuCallback,
            uId: u32,
            uIdAncestor: u32,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMenuInfo: *const fn(
            self: *const IShellMenu,
            ppsmc: ?*?*IShellMenuCallback,
            puId: ?*u32,
            puIdAncestor: ?*u32,
            pdwFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetShellFolder: *const fn(
            self: *const IShellMenu,
            psf: ?*IShellFolder,
            pidlFolder: ?*ITEMIDLIST,
            hKey: ?HKEY,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShellFolder: *const fn(
            self: *const IShellMenu,
            pdwFlags: ?*u32,
            ppidl: ?*?*ITEMIDLIST,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMenu: *const fn(
            self: *const IShellMenu,
            hmenu: ?HMENU,
            hwnd: ?HWND,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMenu: *const fn(
            self: *const IShellMenu,
            phmenu: ?*?HMENU,
            phwnd: ?*?HWND,
            pdwFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvalidateItem: *const fn(
            self: *const IShellMenu,
            psmd: ?*SMDATA,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetState: *const fn(
            self: *const IShellMenu,
            psmd: ?*SMDATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMenuToolbar: *const fn(
            self: *const IShellMenu,
            punk: ?*IUnknown,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IShellMenu, psmc: ?*IShellMenuCallback, uId: u32, uIdAncestor: u32, dwFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, psmc, uId, uIdAncestor, dwFlags);
    }
    pub fn GetMenuInfo(self: *const IShellMenu, ppsmc: ?*?*IShellMenuCallback, puId: ?*u32, puIdAncestor: ?*u32, pdwFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetMenuInfo(self, ppsmc, puId, puIdAncestor, pdwFlags);
    }
    pub fn SetShellFolder(self: *const IShellMenu, psf: ?*IShellFolder, pidlFolder: ?*ITEMIDLIST, hKey: ?HKEY, dwFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetShellFolder(self, psf, pidlFolder, hKey, dwFlags);
    }
    pub fn GetShellFolder(self: *const IShellMenu, pdwFlags: ?*u32, ppidl: ?*?*ITEMIDLIST, riid: ?*const Guid, ppv: ?*?*anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetShellFolder(self, pdwFlags, ppidl, riid, ppv);
    }
    pub fn SetMenu(self: *const IShellMenu, hmenu: ?HMENU, hwnd: ?HWND, dwFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetMenu(self, hmenu, hwnd, dwFlags);
    }
    pub fn GetMenu(self: *const IShellMenu, phmenu: ?*?HMENU, phwnd: ?*?HWND, pdwFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetMenu(self, phmenu, phwnd, pdwFlags);
    }
    pub fn InvalidateItem(self: *const IShellMenu, psmd: ?*SMDATA, dwFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.InvalidateItem(self, psmd, dwFlags);
    }
    pub fn GetState(self: *const IShellMenu, psmd: ?*SMDATA) callconv(.Inline) HRESULT {
        return self.vtable.GetState(self, psmd);
    }
    pub fn SetMenuToolbar(self: *const IShellMenu, punk: ?*IUnknown, dwFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetMenuToolbar(self, punk, dwFlags);
    }
};

pub const KF_CATEGORY = enum(i32) {
    VIRTUAL = 1,
    FIXED = 2,
    COMMON = 3,
    PERUSER = 4,
};
pub const KF_CATEGORY_VIRTUAL = KF_CATEGORY.VIRTUAL;
pub const KF_CATEGORY_FIXED = KF_CATEGORY.FIXED;
pub const KF_CATEGORY_COMMON = KF_CATEGORY.COMMON;
pub const KF_CATEGORY_PERUSER = KF_CATEGORY.PERUSER;

pub const _KF_DEFINITION_FLAGS = enum(i32) {
    LOCAL_REDIRECT_ONLY = 2,
    ROAMABLE = 4,
    PRECREATE = 8,
    STREAM = 16,
    PUBLISHEXPANDEDPATH = 32,
    NO_REDIRECT_UI = 64,
};
pub const KFDF_LOCAL_REDIRECT_ONLY = _KF_DEFINITION_FLAGS.LOCAL_REDIRECT_ONLY;
pub const KFDF_ROAMABLE = _KF_DEFINITION_FLAGS.ROAMABLE;
pub const KFDF_PRECREATE = _KF_DEFINITION_FLAGS.PRECREATE;
pub const KFDF_STREAM = _KF_DEFINITION_FLAGS.STREAM;
pub const KFDF_PUBLISHEXPANDEDPATH = _KF_DEFINITION_FLAGS.PUBLISHEXPANDEDPATH;
pub const KFDF_NO_REDIRECT_UI = _KF_DEFINITION_FLAGS.NO_REDIRECT_UI;

pub const _KF_REDIRECT_FLAGS = enum(i32) {
    USER_EXCLUSIVE = 1,
    COPY_SOURCE_DACL = 2,
    OWNER_USER = 4,
    SET_OWNER_EXPLICIT = 8,
    CHECK_ONLY = 16,
    WITH_UI = 32,
    UNPIN = 64,
    PIN = 128,
    COPY_CONTENTS = 512,
    DEL_SOURCE_CONTENTS = 1024,
    EXCLUDE_ALL_KNOWN_SUBFOLDERS = 2048,
};
pub const KF_REDIRECT_USER_EXCLUSIVE = _KF_REDIRECT_FLAGS.USER_EXCLUSIVE;
pub const KF_REDIRECT_COPY_SOURCE_DACL = _KF_REDIRECT_FLAGS.COPY_SOURCE_DACL;
pub const KF_REDIRECT_OWNER_USER = _KF_REDIRECT_FLAGS.OWNER_USER;
pub const KF_REDIRECT_SET_OWNER_EXPLICIT = _KF_REDIRECT_FLAGS.SET_OWNER_EXPLICIT;
pub const KF_REDIRECT_CHECK_ONLY = _KF_REDIRECT_FLAGS.CHECK_ONLY;
pub const KF_REDIRECT_WITH_UI = _KF_REDIRECT_FLAGS.WITH_UI;
pub const KF_REDIRECT_UNPIN = _KF_REDIRECT_FLAGS.UNPIN;
pub const KF_REDIRECT_PIN = _KF_REDIRECT_FLAGS.PIN;
pub const KF_REDIRECT_COPY_CONTENTS = _KF_REDIRECT_FLAGS.COPY_CONTENTS;
pub const KF_REDIRECT_DEL_SOURCE_CONTENTS = _KF_REDIRECT_FLAGS.DEL_SOURCE_CONTENTS;
pub const KF_REDIRECT_EXCLUDE_ALL_KNOWN_SUBFOLDERS = _KF_REDIRECT_FLAGS.EXCLUDE_ALL_KNOWN_SUBFOLDERS;

pub const _KF_REDIRECTION_CAPABILITIES = enum(i32) {
    ALLOW_ALL = 255,
    REDIRECTABLE = 1,
    DENY_ALL = 1048320,
    DENY_POLICY_REDIRECTED = 256,
    DENY_POLICY = 512,
    DENY_PERMISSIONS = 1024,
};
pub const KF_REDIRECTION_CAPABILITIES_ALLOW_ALL = _KF_REDIRECTION_CAPABILITIES.ALLOW_ALL;
pub const KF_REDIRECTION_CAPABILITIES_REDIRECTABLE = _KF_REDIRECTION_CAPABILITIES.REDIRECTABLE;
pub const KF_REDIRECTION_CAPABILITIES_DENY_ALL = _KF_REDIRECTION_CAPABILITIES.DENY_ALL;
pub const KF_REDIRECTION_CAPABILITIES_DENY_POLICY_REDIRECTED = _KF_REDIRECTION_CAPABILITIES.DENY_POLICY_REDIRECTED;
pub const KF_REDIRECTION_CAPABILITIES_DENY_POLICY = _KF_REDIRECTION_CAPABILITIES.DENY_POLICY;
pub const KF_REDIRECTION_CAPABILITIES_DENY_PERMISSIONS = _KF_REDIRECTION_CAPABILITIES.DENY_PERMISSIONS;

pub const KNOWNFOLDER_DEFINITION = extern struct {
    category: KF_CATEGORY,
    pszName: ?PWSTR,
    pszDescription: ?PWSTR,
    fidParent: Guid,
    pszRelativePath: ?PWSTR,
    pszParsingName: ?PWSTR,
    pszTooltip: ?PWSTR,
    pszLocalizedName: ?PWSTR,
    pszIcon: ?PWSTR,
    pszSecurity: ?PWSTR,
    dwAttributes: u32,
    kfdFlags: u32,
    ftidType: Guid,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IKnownFolder_Value = Guid.initString("3aa7af7e-9b36-420c-a8e3-f77d4674a488");
pub const IID_IKnownFolder = &IID_IKnownFolder_Value;
pub const IKnownFolder = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetId: *const fn(
            self: *const IKnownFolder,
            pkfid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCategory: *const fn(
            self: *const IKnownFolder,
            pCategory: ?*KF_CATEGORY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShellItem: *const fn(
            self: *const IKnownFolder,
            dwFlags: u32,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPath: *const fn(
            self: *const IKnownFolder,
            dwFlags: u32,
            ppszPath: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPath: *const fn(
            self: *const IKnownFolder,
            dwFlags: u32,
            pszPath: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIDList: *const fn(
            self: *const IKnownFolder,
            dwFlags: u32,
            ppidl: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderType: *const fn(
            self: *const IKnownFolder,
            pftid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRedirectionCapabilities: *const fn(
            self: *const IKnownFolder,
            pCapabilities: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderDefinition: *const fn(
            self: *const IKnownFolder,
            pKFD: ?*KNOWNFOLDER_DEFINITION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetId(self: *const IKnownFolder, pkfid: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetId(self, pkfid);
    }
    pub fn GetCategory(self: *const IKnownFolder, pCategory: ?*KF_CATEGORY) callconv(.Inline) HRESULT {
        return self.vtable.GetCategory(self, pCategory);
    }
    pub fn GetShellItem(self: *const IKnownFolder, dwFlags: u32, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetShellItem(self, dwFlags, riid, ppv);
    }
    pub fn GetPath(self: *const IKnownFolder, dwFlags: u32, ppszPath: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetPath(self, dwFlags, ppszPath);
    }
    pub fn SetPath(self: *const IKnownFolder, dwFlags: u32, pszPath: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetPath(self, dwFlags, pszPath);
    }
    pub fn GetIDList(self: *const IKnownFolder, dwFlags: u32, ppidl: ?*?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.GetIDList(self, dwFlags, ppidl);
    }
    pub fn GetFolderType(self: *const IKnownFolder, pftid: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetFolderType(self, pftid);
    }
    pub fn GetRedirectionCapabilities(self: *const IKnownFolder, pCapabilities: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetRedirectionCapabilities(self, pCapabilities);
    }
    pub fn GetFolderDefinition(self: *const IKnownFolder, pKFD: ?*KNOWNFOLDER_DEFINITION) callconv(.Inline) HRESULT {
        return self.vtable.GetFolderDefinition(self, pKFD);
    }
};

pub const FFFP_MODE = enum(i32) {
    EXACTMATCH = 0,
    NEARESTPARENTMATCH = 1,
};
pub const FFFP_EXACTMATCH = FFFP_MODE.EXACTMATCH;
pub const FFFP_NEARESTPARENTMATCH = FFFP_MODE.NEARESTPARENTMATCH;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IKnownFolderManager_Value = Guid.initString("8be2d872-86aa-4d47-b776-32cca40c7018");
pub const IID_IKnownFolderManager = &IID_IKnownFolderManager_Value;
pub const IKnownFolderManager = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FolderIdFromCsidl: *const fn(
            self: *const IKnownFolderManager,
            nCsidl: i32,
            pfid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FolderIdToCsidl: *const fn(
            self: *const IKnownFolderManager,
            rfid: ?*const Guid,
            pnCsidl: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderIds: *const fn(
            self: *const IKnownFolderManager,
            ppKFId: [*]?*Guid,
            pCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolder: *const fn(
            self: *const IKnownFolderManager,
            rfid: ?*const Guid,
            ppkf: ?*?*IKnownFolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderByName: *const fn(
            self: *const IKnownFolderManager,
            pszCanonicalName: ?[*:0]const u16,
            ppkf: ?*?*IKnownFolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterFolder: *const fn(
            self: *const IKnownFolderManager,
            rfid: ?*const Guid,
            pKFD: ?*const KNOWNFOLDER_DEFINITION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterFolder: *const fn(
            self: *const IKnownFolderManager,
            rfid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFolderFromPath: *const fn(
            self: *const IKnownFolderManager,
            pszPath: ?[*:0]const u16,
            mode: FFFP_MODE,
            ppkf: ?*?*IKnownFolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFolderFromIDList: *const fn(
            self: *const IKnownFolderManager,
            pidl: ?*ITEMIDLIST,
            ppkf: ?*?*IKnownFolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Redirect: *const fn(
            self: *const IKnownFolderManager,
            rfid: ?*const Guid,
            hwnd: ?HWND,
            flags: u32,
            pszTargetPath: ?[*:0]const u16,
            cFolders: u32,
            pExclusion: ?[*]const Guid,
            ppszError: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn FolderIdFromCsidl(self: *const IKnownFolderManager, nCsidl: i32, pfid: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.FolderIdFromCsidl(self, nCsidl, pfid);
    }
    pub fn FolderIdToCsidl(self: *const IKnownFolderManager, rfid: ?*const Guid, pnCsidl: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.FolderIdToCsidl(self, rfid, pnCsidl);
    }
    pub fn GetFolderIds(self: *const IKnownFolderManager, ppKFId: [*]?*Guid, pCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetFolderIds(self, ppKFId, pCount);
    }
    pub fn GetFolder(self: *const IKnownFolderManager, rfid: ?*const Guid, ppkf: ?*?*IKnownFolder) callconv(.Inline) HRESULT {
        return self.vtable.GetFolder(self, rfid, ppkf);
    }
    pub fn GetFolderByName(self: *const IKnownFolderManager, pszCanonicalName: ?[*:0]const u16, ppkf: ?*?*IKnownFolder) callconv(.Inline) HRESULT {
        return self.vtable.GetFolderByName(self, pszCanonicalName, ppkf);
    }
    pub fn RegisterFolder(self: *const IKnownFolderManager, rfid: ?*const Guid, pKFD: ?*const KNOWNFOLDER_DEFINITION) callconv(.Inline) HRESULT {
        return self.vtable.RegisterFolder(self, rfid, pKFD);
    }
    pub fn UnregisterFolder(self: *const IKnownFolderManager, rfid: ?*const Guid) callconv(.Inline) HRESULT {
        return self.vtable.UnregisterFolder(self, rfid);
    }
    pub fn FindFolderFromPath(self: *const IKnownFolderManager, pszPath: ?[*:0]const u16, mode: FFFP_MODE, ppkf: ?*?*IKnownFolder) callconv(.Inline) HRESULT {
        return self.vtable.FindFolderFromPath(self, pszPath, mode, ppkf);
    }
    pub fn FindFolderFromIDList(self: *const IKnownFolderManager, pidl: ?*ITEMIDLIST, ppkf: ?*?*IKnownFolder) callconv(.Inline) HRESULT {
        return self.vtable.FindFolderFromIDList(self, pidl, ppkf);
    }
    pub fn Redirect(self: *const IKnownFolderManager, rfid: ?*const Guid, hwnd: ?HWND, flags: u32, pszTargetPath: ?[*:0]const u16, cFolders: u32, pExclusion: ?[*]const Guid, ppszError: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.Redirect(self, rfid, hwnd, flags, pszTargetPath, cFolders, pExclusion, ppszError);
    }
};

pub const SHARE_ROLE = enum(i32) {
    INVALID = -1,
    READER = 0,
    CONTRIBUTOR = 1,
    CO_OWNER = 2,
    OWNER = 3,
    CUSTOM = 4,
    MIXED = 5,
};
pub const SHARE_ROLE_INVALID = SHARE_ROLE.INVALID;
pub const SHARE_ROLE_READER = SHARE_ROLE.READER;
pub const SHARE_ROLE_CONTRIBUTOR = SHARE_ROLE.CONTRIBUTOR;
pub const SHARE_ROLE_CO_OWNER = SHARE_ROLE.CO_OWNER;
pub const SHARE_ROLE_OWNER = SHARE_ROLE.OWNER;
pub const SHARE_ROLE_CUSTOM = SHARE_ROLE.CUSTOM;
pub const SHARE_ROLE_MIXED = SHARE_ROLE.MIXED;

pub const DEF_SHARE_ID = enum(i32) {
    USERS = 1,
    PUBLIC = 2,
};
pub const DEFSHAREID_USERS = DEF_SHARE_ID.USERS;
pub const DEFSHAREID_PUBLIC = DEF_SHARE_ID.PUBLIC;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISharingConfigurationManager_Value = Guid.initString("b4cd448a-9c86-4466-9201-2e62105b87ae");
pub const IID_ISharingConfigurationManager = &IID_ISharingConfigurationManager_Value;
pub const ISharingConfigurationManager = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateShare: *const fn(
            self: *const ISharingConfigurationManager,
            dsid: DEF_SHARE_ID,
            role: SHARE_ROLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteShare: *const fn(
            self: *const ISharingConfigurationManager,
            dsid: DEF_SHARE_ID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShareExists: *const fn(
            self: *const ISharingConfigurationManager,
            dsid: DEF_SHARE_ID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSharePermissions: *const fn(
            self: *const ISharingConfigurationManager,
            dsid: DEF_SHARE_ID,
            pRole: ?*SHARE_ROLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SharePrinters: *const fn(
            self: *const ISharingConfigurationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopSharingPrinters: *const fn(
            self: *const ISharingConfigurationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ArePrintersShared: *const fn(
            self: *const ISharingConfigurationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateShare(self: *const ISharingConfigurationManager, dsid: DEF_SHARE_ID, role: SHARE_ROLE) callconv(.Inline) HRESULT {
        return self.vtable.CreateShare(self, dsid, role);
    }
    pub fn DeleteShare(self: *const ISharingConfigurationManager, dsid: DEF_SHARE_ID) callconv(.Inline) HRESULT {
        return self.vtable.DeleteShare(self, dsid);
    }
    pub fn ShareExists(self: *const ISharingConfigurationManager, dsid: DEF_SHARE_ID) callconv(.Inline) HRESULT {
        return self.vtable.ShareExists(self, dsid);
    }
    pub fn GetSharePermissions(self: *const ISharingConfigurationManager, dsid: DEF_SHARE_ID, pRole: ?*SHARE_ROLE) callconv(.Inline) HRESULT {
        return self.vtable.GetSharePermissions(self, dsid, pRole);
    }
    pub fn SharePrinters(self: *const ISharingConfigurationManager) callconv(.Inline) HRESULT {
        return self.vtable.SharePrinters(self);
    }
    pub fn StopSharingPrinters(self: *const ISharingConfigurationManager) callconv(.Inline) HRESULT {
        return self.vtable.StopSharingPrinters(self);
    }
    pub fn ArePrintersShared(self: *const ISharingConfigurationManager) callconv(.Inline) HRESULT {
        return self.vtable.ArePrintersShared(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRelatedItem_Value = Guid.initString("a73ce67a-8ab1-44f1-8d43-d2fcbf6b1cd0");
pub const IID_IRelatedItem = &IID_IRelatedItem_Value;
pub const IRelatedItem = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetItemIDList: *const fn(
            self: *const IRelatedItem,
            ppidl: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItem: *const fn(
            self: *const IRelatedItem,
            ppsi: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetItemIDList(self: *const IRelatedItem, ppidl: ?*?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.GetItemIDList(self, ppidl);
    }
    pub fn GetItem(self: *const IRelatedItem, ppsi: ?*?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.GetItem(self, ppsi);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IIdentityName_Value = Guid.initString("7d903fca-d6f9-4810-8332-946c0177e247");
pub const IID_IIdentityName = &IID_IIdentityName_Value;
pub const IIdentityName = extern union {
    pub const VTable = extern struct {
        base: IRelatedItem.VTable,
    };
    vtable: *const VTable,
    IRelatedItem: IRelatedItem,
    IUnknown: IUnknown,
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDelegateItem_Value = Guid.initString("3c5a1c94-c951-4cb7-bb6d-3b93f30cce93");
pub const IID_IDelegateItem = &IID_IDelegateItem_Value;
pub const IDelegateItem = extern union {
    pub const VTable = extern struct {
        base: IRelatedItem.VTable,
    };
    vtable: *const VTable,
    IRelatedItem: IRelatedItem,
    IUnknown: IUnknown,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICurrentItem_Value = Guid.initString("240a7174-d653-4a1d-a6d3-d4943cfbfe3d");
pub const IID_ICurrentItem = &IID_ICurrentItem_Value;
pub const ICurrentItem = extern union {
    pub const VTable = extern struct {
        base: IRelatedItem.VTable,
    };
    vtable: *const VTable,
    IRelatedItem: IRelatedItem,
    IUnknown: IUnknown,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITransferMediumItem_Value = Guid.initString("77f295d5-2d6f-4e19-b8ae-322f3e721ab5");
pub const IID_ITransferMediumItem = &IID_ITransferMediumItem_Value;
pub const ITransferMediumItem = extern union {
    pub const VTable = extern struct {
        base: IRelatedItem.VTable,
    };
    vtable: *const VTable,
    IRelatedItem: IRelatedItem,
    IUnknown: IUnknown,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDisplayItem_Value = Guid.initString("c6fd5997-9f6b-4888-8703-94e80e8cde3f");
pub const IID_IDisplayItem = &IID_IDisplayItem_Value;
pub const IDisplayItem = extern union {
    pub const VTable = extern struct {
        base: IRelatedItem.VTable,
    };
    vtable: *const VTable,
    IRelatedItem: IRelatedItem,
    IUnknown: IUnknown,
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IViewStateIdentityItem_Value = Guid.initString("9d264146-a94f-4195-9f9f-3bb12ce0c955");
pub const IID_IViewStateIdentityItem = &IID_IViewStateIdentityItem_Value;
pub const IViewStateIdentityItem = extern union {
    pub const VTable = extern struct {
        base: IRelatedItem.VTable,
    };
    vtable: *const VTable,
    IRelatedItem: IRelatedItem,
    IUnknown: IUnknown,
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IPreviewItem_Value = Guid.initString("36149969-0a8f-49c8-8b00-4aecb20222fb");
pub const IID_IPreviewItem = &IID_IPreviewItem_Value;
pub const IPreviewItem = extern union {
    pub const VTable = extern struct {
        base: IRelatedItem.VTable,
    };
    vtable: *const VTable,
    IRelatedItem: IRelatedItem,
    IUnknown: IUnknown,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDestinationStreamFactory_Value = Guid.initString("8a87781b-39a7-4a1f-aab3-a39b9c34a7d9");
pub const IID_IDestinationStreamFactory = &IID_IDestinationStreamFactory_Value;
pub const IDestinationStreamFactory = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDestinationStream: *const fn(
            self: *const IDestinationStreamFactory,
            ppstm: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetDestinationStream(self: *const IDestinationStreamFactory, ppstm: ?*?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.GetDestinationStream(self, ppstm);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICreateProcessInputs_Value = Guid.initString("f6ef6140-e26f-4d82-bac4-e9ba5fd239a8");
pub const IID_ICreateProcessInputs = &IID_ICreateProcessInputs_Value;
pub const ICreateProcessInputs = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCreateFlags: *const fn(
            self: *const ICreateProcessInputs,
            pdwCreationFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCreateFlags: *const fn(
            self: *const ICreateProcessInputs,
            dwCreationFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCreateFlags: *const fn(
            self: *const ICreateProcessInputs,
            dwCreationFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHotKey: *const fn(
            self: *const ICreateProcessInputs,
            wHotKey: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddStartupFlags: *const fn(
            self: *const ICreateProcessInputs,
            dwStartupInfoFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTitle: *const fn(
            self: *const ICreateProcessInputs,
            pszTitle: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnvironmentVariable: *const fn(
            self: *const ICreateProcessInputs,
            pszName: ?[*:0]const u16,
            pszValue: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetCreateFlags(self: *const ICreateProcessInputs, pdwCreationFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCreateFlags(self, pdwCreationFlags);
    }
    pub fn SetCreateFlags(self: *const ICreateProcessInputs, dwCreationFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetCreateFlags(self, dwCreationFlags);
    }
    pub fn AddCreateFlags(self: *const ICreateProcessInputs, dwCreationFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.AddCreateFlags(self, dwCreationFlags);
    }
    pub fn SetHotKey(self: *const ICreateProcessInputs, wHotKey: u16) callconv(.Inline) HRESULT {
        return self.vtable.SetHotKey(self, wHotKey);
    }
    pub fn AddStartupFlags(self: *const ICreateProcessInputs, dwStartupInfoFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.AddStartupFlags(self, dwStartupInfoFlags);
    }
    pub fn SetTitle(self: *const ICreateProcessInputs, pszTitle: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetTitle(self, pszTitle);
    }
    pub fn SetEnvironmentVariable(self: *const ICreateProcessInputs, pszName: ?[*:0]const u16, pszValue: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetEnvironmentVariable(self, pszName, pszValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICreatingProcess_Value = Guid.initString("c2b937a9-3110-4398-8a56-f34c6342d244");
pub const IID_ICreatingProcess = &IID_ICreatingProcess_Value;
pub const ICreatingProcess = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnCreating: *const fn(
            self: *const ICreatingProcess,
            pcpi: ?*ICreateProcessInputs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnCreating(self: *const ICreatingProcess, pcpi: ?*ICreateProcessInputs) callconv(.Inline) HRESULT {
        return self.vtable.OnCreating(self, pcpi);
    }
};

const IID_ILaunchUIContext_Value = Guid.initString("1791e8f6-21c7-4340-882a-a6a93e3fd73b");
pub const IID_ILaunchUIContext = &IID_ILaunchUIContext_Value;
pub const ILaunchUIContext = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAssociatedWindow: *const fn(
            self: *const ILaunchUIContext,
            value: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTabGroupingPreference: *const fn(
            self: *const ILaunchUIContext,
            value: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetAssociatedWindow(self: *const ILaunchUIContext, value: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.SetAssociatedWindow(self, value);
    }
    pub fn SetTabGroupingPreference(self: *const ILaunchUIContext, value: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetTabGroupingPreference(self, value);
    }
};

const IID_ILaunchUIContextProvider_Value = Guid.initString("0d12c4c8-a3d9-4e24-94c1-0e20c5a956c4");
pub const IID_ILaunchUIContextProvider = &IID_ILaunchUIContextProvider_Value;
pub const ILaunchUIContextProvider = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        UpdateContext: *const fn(
            self: *const ILaunchUIContextProvider,
            context: ?*ILaunchUIContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn UpdateContext(self: *const ILaunchUIContextProvider, context: ?*ILaunchUIContext) callconv(.Inline) HRESULT {
        return self.vtable.UpdateContext(self, context);
    }
};

pub const _NMCII_FLAGS = enum(i32) {
    NONE = 0,
    ITEMS = 1,
    FOLDERS = 2,
};
pub const NMCII_NONE = _NMCII_FLAGS.NONE;
pub const NMCII_ITEMS = _NMCII_FLAGS.ITEMS;
pub const NMCII_FOLDERS = _NMCII_FLAGS.FOLDERS;

pub const _NMCSAEI_FLAGS = enum(i32) {
    SELECT = 0,
    EDIT = 1,
};
pub const NMCSAEI_SELECT = _NMCSAEI_FLAGS.SELECT;
pub const NMCSAEI_EDIT = _NMCSAEI_FLAGS.EDIT;

// TODO: this type is limited to platform 'windows6.1'
const IID_INewMenuClient_Value = Guid.initString("dcb07fdc-3bb5-451c-90be-966644fed7b0");
pub const IID_INewMenuClient = &IID_INewMenuClient_Value;
pub const INewMenuClient = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IncludeItems: *const fn(
            self: *const INewMenuClient,
            pflags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectAndEditItem: *const fn(
            self: *const INewMenuClient,
            pidlItem: ?*ITEMIDLIST,
            flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn IncludeItems(self: *const INewMenuClient, pflags: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.IncludeItems(self, pflags);
    }
    pub fn SelectAndEditItem(self: *const INewMenuClient, pidlItem: ?*ITEMIDLIST, flags: i32) callconv(.Inline) HRESULT {
        return self.vtable.SelectAndEditItem(self, pidlItem, flags);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IInitializeWithBindCtx_Value = Guid.initString("71c0d2bc-726d-45cc-a6c0-2e31c1db2159");
pub const IID_IInitializeWithBindCtx = &IID_IInitializeWithBindCtx_Value;
pub const IInitializeWithBindCtx = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn(
            self: *const IInitializeWithBindCtx,
            pbc: ?*IBindCtx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IInitializeWithBindCtx, pbc: ?*IBindCtx) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, pbc);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IShellItemFilter_Value = Guid.initString("2659b475-eeb8-48b7-8f07-b378810f48cf");
pub const IID_IShellItemFilter = &IID_IShellItemFilter_Value;
pub const IShellItemFilter = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IncludeItem: *const fn(
            self: *const IShellItemFilter,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumFlagsForItem: *const fn(
            self: *const IShellItemFilter,
            psi: ?*IShellItem,
            pgrfFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn IncludeItem(self: *const IShellItemFilter, psi: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.IncludeItem(self, psi);
    }
    pub fn GetEnumFlagsForItem(self: *const IShellItemFilter, psi: ?*IShellItem, pgrfFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetEnumFlagsForItem(self, psi, pgrfFlags);
    }
};

pub const _NSTCSTYLE = enum(i32) {
    HASEXPANDOS = 1,
    HASLINES = 2,
    SINGLECLICKEXPAND = 4,
    FULLROWSELECT = 8,
    SPRINGEXPAND = 16,
    HORIZONTALSCROLL = 32,
    ROOTHASEXPANDO = 64,
    SHOWSELECTIONALWAYS = 128,
    NOINFOTIP = 512,
    EVENHEIGHT = 1024,
    NOREPLACEOPEN = 2048,
    DISABLEDRAGDROP = 4096,
    NOORDERSTREAM = 8192,
    RICHTOOLTIP = 16384,
    BORDER = 32768,
    NOEDITLABELS = 65536,
    TABSTOP = 131072,
    FAVORITESMODE = 524288,
    AUTOHSCROLL = 1048576,
    FADEINOUTEXPANDOS = 2097152,
    EMPTYTEXT = 4194304,
    CHECKBOXES = 8388608,
    PARTIALCHECKBOXES = 16777216,
    EXCLUSIONCHECKBOXES = 33554432,
    DIMMEDCHECKBOXES = 67108864,
    NOINDENTCHECKS = 134217728,
    ALLOWJUNCTIONS = 268435456,
    SHOWTABSBUTTON = 536870912,
    SHOWDELETEBUTTON = 1073741824,
    SHOWREFRESHBUTTON = -2147483648,
};
pub const NSTCS_HASEXPANDOS = _NSTCSTYLE.HASEXPANDOS;
pub const NSTCS_HASLINES = _NSTCSTYLE.HASLINES;
pub const NSTCS_SINGLECLICKEXPAND = _NSTCSTYLE.SINGLECLICKEXPAND;
pub const NSTCS_FULLROWSELECT = _NSTCSTYLE.FULLROWSELECT;
pub const NSTCS_SPRINGEXPAND = _NSTCSTYLE.SPRINGEXPAND;
pub const NSTCS_HORIZONTALSCROLL = _NSTCSTYLE.HORIZONTALSCROLL;
pub const NSTCS_ROOTHASEXPANDO = _NSTCSTYLE.ROOTHASEXPANDO;
pub const NSTCS_SHOWSELECTIONALWAYS = _NSTCSTYLE.SHOWSELECTIONALWAYS;
pub const NSTCS_NOINFOTIP = _NSTCSTYLE.NOINFOTIP;
pub const NSTCS_EVENHEIGHT = _NSTCSTYLE.EVENHEIGHT;
pub const NSTCS_NOREPLACEOPEN = _NSTCSTYLE.NOREPLACEOPEN;
pub const NSTCS_DISABLEDRAGDROP = _NSTCSTYLE.DISABLEDRAGDROP;
pub const NSTCS_NOORDERSTREAM = _NSTCSTYLE.NOORDERSTREAM;
pub const NSTCS_RICHTOOLTIP = _NSTCSTYLE.RICHTOOLTIP;
pub const NSTCS_BORDER = _NSTCSTYLE.BORDER;
pub const NSTCS_NOEDITLABELS = _NSTCSTYLE.NOEDITLABELS;
pub const NSTCS_TABSTOP = _NSTCSTYLE.TABSTOP;
pub const NSTCS_FAVORITESMODE = _NSTCSTYLE.FAVORITESMODE;
pub const NSTCS_AUTOHSCROLL = _NSTCSTYLE.AUTOHSCROLL;
pub const NSTCS_FADEINOUTEXPANDOS = _NSTCSTYLE.FADEINOUTEXPANDOS;
pub const NSTCS_EMPTYTEXT = _NSTCSTYLE.EMPTYTEXT;
pub const NSTCS_CHECKBOXES = _NSTCSTYLE.CHECKBOXES;
pub const NSTCS_PARTIALCHECKBOXES = _NSTCSTYLE.PARTIALCHECKBOXES;
pub const NSTCS_EXCLUSIONCHECKBOXES = _NSTCSTYLE.EXCLUSIONCHECKBOXES;
pub const NSTCS_DIMMEDCHECKBOXES = _NSTCSTYLE.DIMMEDCHECKBOXES;
pub const NSTCS_NOINDENTCHECKS = _NSTCSTYLE.NOINDENTCHECKS;
pub const NSTCS_ALLOWJUNCTIONS = _NSTCSTYLE.ALLOWJUNCTIONS;
pub const NSTCS_SHOWTABSBUTTON = _NSTCSTYLE.SHOWTABSBUTTON;
pub const NSTCS_SHOWDELETEBUTTON = _NSTCSTYLE.SHOWDELETEBUTTON;
pub const NSTCS_SHOWREFRESHBUTTON = _NSTCSTYLE.SHOWREFRESHBUTTON;

pub const _NSTCROOTSTYLE = enum(i32) {
    VISIBLE = 0,
    HIDDEN = 1,
    EXPANDED = 2,
};
pub const NSTCRS_VISIBLE = _NSTCROOTSTYLE.VISIBLE;
pub const NSTCRS_HIDDEN = _NSTCROOTSTYLE.HIDDEN;
pub const NSTCRS_EXPANDED = _NSTCROOTSTYLE.EXPANDED;

pub const _NSTCITEMSTATE = enum(i32) {
    NONE = 0,
    SELECTED = 1,
    EXPANDED = 2,
    BOLD = 4,
    DISABLED = 8,
    SELECTEDNOEXPAND = 16,
};
pub const NSTCIS_NONE = _NSTCITEMSTATE.NONE;
pub const NSTCIS_SELECTED = _NSTCITEMSTATE.SELECTED;
pub const NSTCIS_EXPANDED = _NSTCITEMSTATE.EXPANDED;
pub const NSTCIS_BOLD = _NSTCITEMSTATE.BOLD;
pub const NSTCIS_DISABLED = _NSTCITEMSTATE.DISABLED;
pub const NSTCIS_SELECTEDNOEXPAND = _NSTCITEMSTATE.SELECTEDNOEXPAND;

pub const NSTCGNI = enum(i32) {
    NEXT = 0,
    NEXTVISIBLE = 1,
    PREV = 2,
    PREVVISIBLE = 3,
    PARENT = 4,
    CHILD = 5,
    FIRSTVISIBLE = 6,
    LASTVISIBLE = 7,
};
pub const NSTCGNI_NEXT = NSTCGNI.NEXT;
pub const NSTCGNI_NEXTVISIBLE = NSTCGNI.NEXTVISIBLE;
pub const NSTCGNI_PREV = NSTCGNI.PREV;
pub const NSTCGNI_PREVVISIBLE = NSTCGNI.PREVVISIBLE;
pub const NSTCGNI_PARENT = NSTCGNI.PARENT;
pub const NSTCGNI_CHILD = NSTCGNI.CHILD;
pub const NSTCGNI_FIRSTVISIBLE = NSTCGNI.FIRSTVISIBLE;
pub const NSTCGNI_LASTVISIBLE = NSTCGNI.LASTVISIBLE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INameSpaceTreeControl_Value = Guid.initString("028212a3-b627-47e9-8856-c14265554e4f");
pub const IID_INameSpaceTreeControl = &IID_INameSpaceTreeControl_Value;
pub const INameSpaceTreeControl = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn(
            self: *const INameSpaceTreeControl,
            hwndParent: ?HWND,
            prc: ?*RECT,
            nsctsFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TreeAdvise: *const fn(
            self: *const INameSpaceTreeControl,
            punk: ?*IUnknown,
            pdwCookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TreeUnadvise: *const fn(
            self: *const INameSpaceTreeControl,
            dwCookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AppendRoot: *const fn(
            self: *const INameSpaceTreeControl,
            psiRoot: ?*IShellItem,
            grfEnumFlags: u32,
            grfRootStyle: u32,
            pif: ?*IShellItemFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertRoot: *const fn(
            self: *const INameSpaceTreeControl,
            iIndex: i32,
            psiRoot: ?*IShellItem,
            grfEnumFlags: u32,
            grfRootStyle: u32,
            pif: ?*IShellItemFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveRoot: *const fn(
            self: *const INameSpaceTreeControl,
            psiRoot: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllRoots: *const fn(
            self: *const INameSpaceTreeControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRootItems: *const fn(
            self: *const INameSpaceTreeControl,
            ppsiaRootItems: ?*?*IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetItemState: *const fn(
            self: *const INameSpaceTreeControl,
            psi: ?*IShellItem,
            nstcisMask: u32,
            nstcisFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemState: *const fn(
            self: *const INameSpaceTreeControl,
            psi: ?*IShellItem,
            nstcisMask: u32,
            pnstcisFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectedItems: *const fn(
            self: *const INameSpaceTreeControl,
            psiaItems: ?*?*IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemCustomState: *const fn(
            self: *const INameSpaceTreeControl,
            psi: ?*IShellItem,
            piStateNumber: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetItemCustomState: *const fn(
            self: *const INameSpaceTreeControl,
            psi: ?*IShellItem,
            iStateNumber: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnsureItemVisible: *const fn(
            self: *const INameSpaceTreeControl,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTheme: *const fn(
            self: *const INameSpaceTreeControl,
            pszTheme: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextItem: *const fn(
            self: *const INameSpaceTreeControl,
            psi: ?*IShellItem,
            nstcgi: NSTCGNI,
            ppsiNext: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HitTest: *const fn(
            self: *const INameSpaceTreeControl,
            ppt: ?*POINT,
            ppsiOut: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemRect: *const fn(
            self: *const INameSpaceTreeControl,
            psi: ?*IShellItem,
            prect: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CollapseAll: *const fn(
            self: *const INameSpaceTreeControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const INameSpaceTreeControl, hwndParent: ?HWND, prc: ?*RECT, nsctsFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, hwndParent, prc, nsctsFlags);
    }
    pub fn TreeAdvise(self: *const INameSpaceTreeControl, punk: ?*IUnknown, pdwCookie: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.TreeAdvise(self, punk, pdwCookie);
    }
    pub fn TreeUnadvise(self: *const INameSpaceTreeControl, dwCookie: u32) callconv(.Inline) HRESULT {
        return self.vtable.TreeUnadvise(self, dwCookie);
    }
    pub fn AppendRoot(self: *const INameSpaceTreeControl, psiRoot: ?*IShellItem, grfEnumFlags: u32, grfRootStyle: u32, pif: ?*IShellItemFilter) callconv(.Inline) HRESULT {
        return self.vtable.AppendRoot(self, psiRoot, grfEnumFlags, grfRootStyle, pif);
    }
    pub fn InsertRoot(self: *const INameSpaceTreeControl, iIndex: i32, psiRoot: ?*IShellItem, grfEnumFlags: u32, grfRootStyle: u32, pif: ?*IShellItemFilter) callconv(.Inline) HRESULT {
        return self.vtable.InsertRoot(self, iIndex, psiRoot, grfEnumFlags, grfRootStyle, pif);
    }
    pub fn RemoveRoot(self: *const INameSpaceTreeControl, psiRoot: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.RemoveRoot(self, psiRoot);
    }
    pub fn RemoveAllRoots(self: *const INameSpaceTreeControl) callconv(.Inline) HRESULT {
        return self.vtable.RemoveAllRoots(self);
    }
    pub fn GetRootItems(self: *const INameSpaceTreeControl, ppsiaRootItems: ?*?*IShellItemArray) callconv(.Inline) HRESULT {
        return self.vtable.GetRootItems(self, ppsiaRootItems);
    }
    pub fn SetItemState(self: *const INameSpaceTreeControl, psi: ?*IShellItem, nstcisMask: u32, nstcisFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetItemState(self, psi, nstcisMask, nstcisFlags);
    }
    pub fn GetItemState(self: *const INameSpaceTreeControl, psi: ?*IShellItem, nstcisMask: u32, pnstcisFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetItemState(self, psi, nstcisMask, pnstcisFlags);
    }
    pub fn GetSelectedItems(self: *const INameSpaceTreeControl, psiaItems: ?*?*IShellItemArray) callconv(.Inline) HRESULT {
        return self.vtable.GetSelectedItems(self, psiaItems);
    }
    pub fn GetItemCustomState(self: *const INameSpaceTreeControl, psi: ?*IShellItem, piStateNumber: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetItemCustomState(self, psi, piStateNumber);
    }
    pub fn SetItemCustomState(self: *const INameSpaceTreeControl, psi: ?*IShellItem, iStateNumber: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetItemCustomState(self, psi, iStateNumber);
    }
    pub fn EnsureItemVisible(self: *const INameSpaceTreeControl, psi: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.EnsureItemVisible(self, psi);
    }
    pub fn SetTheme(self: *const INameSpaceTreeControl, pszTheme: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetTheme(self, pszTheme);
    }
    pub fn GetNextItem(self: *const INameSpaceTreeControl, psi: ?*IShellItem, nstcgi: NSTCGNI, ppsiNext: ?*?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.GetNextItem(self, psi, nstcgi, ppsiNext);
    }
    pub fn HitTest(self: *const INameSpaceTreeControl, ppt: ?*POINT, ppsiOut: ?*?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.HitTest(self, ppt, ppsiOut);
    }
    pub fn GetItemRect(self: *const INameSpaceTreeControl, psi: ?*IShellItem, prect: ?*RECT) callconv(.Inline) HRESULT {
        return self.vtable.GetItemRect(self, psi, prect);
    }
    pub fn CollapseAll(self: *const INameSpaceTreeControl) callconv(.Inline) HRESULT {
        return self.vtable.CollapseAll(self);
    }
};

pub const NSTCFOLDERCAPABILITIES = enum(i32) {
    NONE = 0,
    PINNEDITEMFILTERING = 1,
    DELAY_REGISTER_NOTIFY = 2,
};
pub const NSTCFC_NONE = NSTCFOLDERCAPABILITIES.NONE;
pub const NSTCFC_PINNEDITEMFILTERING = NSTCFOLDERCAPABILITIES.PINNEDITEMFILTERING;
pub const NSTCFC_DELAY_REGISTER_NOTIFY = NSTCFOLDERCAPABILITIES.DELAY_REGISTER_NOTIFY;

// TODO: this type is limited to platform 'windows6.1'
const IID_INameSpaceTreeControlFolderCapabilities_Value = Guid.initString("e9701183-e6b3-4ff2-8568-813615fec7be");
pub const IID_INameSpaceTreeControlFolderCapabilities = &IID_INameSpaceTreeControlFolderCapabilities_Value;
pub const INameSpaceTreeControlFolderCapabilities = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFolderCapabilities: *const fn(
            self: *const INameSpaceTreeControlFolderCapabilities,
            nfcMask: NSTCFOLDERCAPABILITIES,
            pnfcValue: ?*NSTCFOLDERCAPABILITIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetFolderCapabilities(self: *const INameSpaceTreeControlFolderCapabilities, nfcMask: NSTCFOLDERCAPABILITIES, pnfcValue: ?*NSTCFOLDERCAPABILITIES) callconv(.Inline) HRESULT {
        return self.vtable.GetFolderCapabilities(self, nfcMask, pnfcValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPreviewHandler_Value = Guid.initString("8895b1c6-b41f-4c1c-a562-0d564250836f");
pub const IID_IPreviewHandler = &IID_IPreviewHandler_Value;
pub const IPreviewHandler = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetWindow: *const fn(
            self: *const IPreviewHandler,
            hwnd: ?HWND,
            prc: ?*const RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRect: *const fn(
            self: *const IPreviewHandler,
            prc: ?*const RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoPreview: *const fn(
            self: *const IPreviewHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unload: *const fn(
            self: *const IPreviewHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFocus: *const fn(
            self: *const IPreviewHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryFocus: *const fn(
            self: *const IPreviewHandler,
            phwnd: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateAccelerator: *const fn(
            self: *const IPreviewHandler,
            pmsg: ?*MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetWindow(self: *const IPreviewHandler, hwnd: ?HWND, prc: ?*const RECT) callconv(.Inline) HRESULT {
        return self.vtable.SetWindow(self, hwnd, prc);
    }
    pub fn SetRect(self: *const IPreviewHandler, prc: ?*const RECT) callconv(.Inline) HRESULT {
        return self.vtable.SetRect(self, prc);
    }
    pub fn DoPreview(self: *const IPreviewHandler) callconv(.Inline) HRESULT {
        return self.vtable.DoPreview(self);
    }
    pub fn Unload(self: *const IPreviewHandler) callconv(.Inline) HRESULT {
        return self.vtable.Unload(self);
    }
    pub fn SetFocus(self: *const IPreviewHandler) callconv(.Inline) HRESULT {
        return self.vtable.SetFocus(self);
    }
    pub fn QueryFocus(self: *const IPreviewHandler, phwnd: ?*?HWND) callconv(.Inline) HRESULT {
        return self.vtable.QueryFocus(self, phwnd);
    }
    pub fn TranslateAccelerator(self: *const IPreviewHandler, pmsg: ?*MSG) callconv(.Inline) HRESULT {
        return self.vtable.TranslateAccelerator(self, pmsg);
    }
};

pub const PREVIEWHANDLERFRAMEINFO = extern struct {
    haccel: ?HACCEL,
    cAccelEntries: u32,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPreviewHandlerFrame_Value = Guid.initString("fec87aaf-35f9-447a-adb7-20234491401a");
pub const IID_IPreviewHandlerFrame = &IID_IPreviewHandlerFrame_Value;
pub const IPreviewHandlerFrame = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetWindowContext: *const fn(
            self: *const IPreviewHandlerFrame,
            pinfo: ?*PREVIEWHANDLERFRAMEINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateAccelerator: *const fn(
            self: *const IPreviewHandlerFrame,
            pmsg: ?*MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetWindowContext(self: *const IPreviewHandlerFrame, pinfo: ?*PREVIEWHANDLERFRAMEINFO) callconv(.Inline) HRESULT {
        return self.vtable.GetWindowContext(self, pinfo);
    }
    pub fn TranslateAccelerator(self: *const IPreviewHandlerFrame, pmsg: ?*MSG) callconv(.Inline) HRESULT {
        return self.vtable.TranslateAccelerator(self, pmsg);
    }
};

pub const _EXPLORERPANESTATE = enum(i32) {
    DONTCARE = 0,
    DEFAULT_ON = 1,
    DEFAULT_OFF = 2,
    STATEMASK = 65535,
    INITIALSTATE = 65536,
    FORCE = 131072,
};
pub const EPS_DONTCARE = _EXPLORERPANESTATE.DONTCARE;
pub const EPS_DEFAULT_ON = _EXPLORERPANESTATE.DEFAULT_ON;
pub const EPS_DEFAULT_OFF = _EXPLORERPANESTATE.DEFAULT_OFF;
pub const EPS_STATEMASK = _EXPLORERPANESTATE.STATEMASK;
pub const EPS_INITIALSTATE = _EXPLORERPANESTATE.INITIALSTATE;
pub const EPS_FORCE = _EXPLORERPANESTATE.FORCE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IExplorerPaneVisibility_Value = Guid.initString("e07010ec-bc17-44c0-97b0-46c7c95b9edc");
pub const IID_IExplorerPaneVisibility = &IID_IExplorerPaneVisibility_Value;
pub const IExplorerPaneVisibility = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPaneState: *const fn(
            self: *const IExplorerPaneVisibility,
            ep: ?*const Guid,
            peps: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetPaneState(self: *const IExplorerPaneVisibility, ep: ?*const Guid, peps: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetPaneState(self, ep, peps);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IContextMenuCB_Value = Guid.initString("3409e930-5a39-11d1-83fa-00a0c90dc849");
pub const IID_IContextMenuCB = &IID_IContextMenuCB_Value;
pub const IContextMenuCB = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CallBack: *const fn(
            self: *const IContextMenuCB,
            psf: ?*IShellFolder,
            hwndOwner: ?HWND,
            pdtobj: ?*IDataObject,
            uMsg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CallBack(self: *const IContextMenuCB, psf: ?*IShellFolder, hwndOwner: ?HWND, pdtobj: ?*IDataObject, uMsg: u32, wParam: WPARAM, lParam: LPARAM) callconv(.Inline) HRESULT {
        return self.vtable.CallBack(self, psf, hwndOwner, pdtobj, uMsg, wParam, lParam);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDefaultExtractIconInit_Value = Guid.initString("41ded17d-d6b3-4261-997d-88c60e4b1d58");
pub const IID_IDefaultExtractIconInit = &IID_IDefaultExtractIconInit_Value;
pub const IDefaultExtractIconInit = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetFlags: *const fn(
            self: *const IDefaultExtractIconInit,
            uFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetKey: *const fn(
            self: *const IDefaultExtractIconInit,
            hkey: ?HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNormalIcon: *const fn(
            self: *const IDefaultExtractIconInit,
            pszFile: ?[*:0]const u16,
            iIcon: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOpenIcon: *const fn(
            self: *const IDefaultExtractIconInit,
            pszFile: ?[*:0]const u16,
            iIcon: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetShortcutIcon: *const fn(
            self: *const IDefaultExtractIconInit,
            pszFile: ?[*:0]const u16,
            iIcon: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultIcon: *const fn(
            self: *const IDefaultExtractIconInit,
            pszFile: ?[*:0]const u16,
            iIcon: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetFlags(self: *const IDefaultExtractIconInit, uFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetFlags(self, uFlags);
    }
    pub fn SetKey(self: *const IDefaultExtractIconInit, hkey: ?HKEY) callconv(.Inline) HRESULT {
        return self.vtable.SetKey(self, hkey);
    }
    pub fn SetNormalIcon(self: *const IDefaultExtractIconInit, pszFile: ?[*:0]const u16, iIcon: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetNormalIcon(self, pszFile, iIcon);
    }
    pub fn SetOpenIcon(self: *const IDefaultExtractIconInit, pszFile: ?[*:0]const u16, iIcon: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetOpenIcon(self, pszFile, iIcon);
    }
    pub fn SetShortcutIcon(self: *const IDefaultExtractIconInit, pszFile: ?[*:0]const u16, iIcon: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetShortcutIcon(self, pszFile, iIcon);
    }
    pub fn SetDefaultIcon(self: *const IDefaultExtractIconInit, pszFile: ?[*:0]const u16, iIcon: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetDefaultIcon(self, pszFile, iIcon);
    }
};

pub const _EXPCMDSTATE = enum(i32) {
    ENABLED = 0,
    DISABLED = 1,
    HIDDEN = 2,
    CHECKBOX = 4,
    CHECKED = 8,
    RADIOCHECK = 16,
};
pub const ECS_ENABLED = _EXPCMDSTATE.ENABLED;
pub const ECS_DISABLED = _EXPCMDSTATE.DISABLED;
pub const ECS_HIDDEN = _EXPCMDSTATE.HIDDEN;
pub const ECS_CHECKBOX = _EXPCMDSTATE.CHECKBOX;
pub const ECS_CHECKED = _EXPCMDSTATE.CHECKED;
pub const ECS_RADIOCHECK = _EXPCMDSTATE.RADIOCHECK;

pub const _EXPCMDFLAGS = enum(i32) {
    DEFAULT = 0,
    HASSUBCOMMANDS = 1,
    HASSPLITBUTTON = 2,
    HIDELABEL = 4,
    ISSEPARATOR = 8,
    HASLUASHIELD = 16,
    SEPARATORBEFORE = 32,
    SEPARATORAFTER = 64,
    ISDROPDOWN = 128,
    TOGGLEABLE = 256,
    AUTOMENUICONS = 512,
};
pub const ECF_DEFAULT = _EXPCMDFLAGS.DEFAULT;
pub const ECF_HASSUBCOMMANDS = _EXPCMDFLAGS.HASSUBCOMMANDS;
pub const ECF_HASSPLITBUTTON = _EXPCMDFLAGS.HASSPLITBUTTON;
pub const ECF_HIDELABEL = _EXPCMDFLAGS.HIDELABEL;
pub const ECF_ISSEPARATOR = _EXPCMDFLAGS.ISSEPARATOR;
pub const ECF_HASLUASHIELD = _EXPCMDFLAGS.HASLUASHIELD;
pub const ECF_SEPARATORBEFORE = _EXPCMDFLAGS.SEPARATORBEFORE;
pub const ECF_SEPARATORAFTER = _EXPCMDFLAGS.SEPARATORAFTER;
pub const ECF_ISDROPDOWN = _EXPCMDFLAGS.ISDROPDOWN;
pub const ECF_TOGGLEABLE = _EXPCMDFLAGS.TOGGLEABLE;
pub const ECF_AUTOMENUICONS = _EXPCMDFLAGS.AUTOMENUICONS;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IExplorerCommand_Value = Guid.initString("a08ce4d0-fa25-44ab-b57c-c7b1c323e0b9");
pub const IID_IExplorerCommand = &IID_IExplorerCommand_Value;
pub const IExplorerCommand = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTitle: *const fn(
            self: *const IExplorerCommand,
            psiItemArray: ?*IShellItemArray,
            ppszName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIcon: *const fn(
            self: *const IExplorerCommand,
            psiItemArray: ?*IShellItemArray,
            ppszIcon: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetToolTip: *const fn(
            self: *const IExplorerCommand,
            psiItemArray: ?*IShellItemArray,
            ppszInfotip: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCanonicalName: *const fn(
            self: *const IExplorerCommand,
            pguidCommandName: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetState: *const fn(
            self: *const IExplorerCommand,
            psiItemArray: ?*IShellItemArray,
            fOkToBeSlow: BOOL,
            pCmdState: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Invoke: *const fn(
            self: *const IExplorerCommand,
            psiItemArray: ?*IShellItemArray,
            pbc: ?*IBindCtx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: *const fn(
            self: *const IExplorerCommand,
            pFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumSubCommands: *const fn(
            self: *const IExplorerCommand,
            ppEnum: ?*?*IEnumExplorerCommand,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetTitle(self: *const IExplorerCommand, psiItemArray: ?*IShellItemArray, ppszName: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetTitle(self, psiItemArray, ppszName);
    }
    pub fn GetIcon(self: *const IExplorerCommand, psiItemArray: ?*IShellItemArray, ppszIcon: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetIcon(self, psiItemArray, ppszIcon);
    }
    pub fn GetToolTip(self: *const IExplorerCommand, psiItemArray: ?*IShellItemArray, ppszInfotip: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetToolTip(self, psiItemArray, ppszInfotip);
    }
    pub fn GetCanonicalName(self: *const IExplorerCommand, pguidCommandName: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetCanonicalName(self, pguidCommandName);
    }
    pub fn GetState(self: *const IExplorerCommand, psiItemArray: ?*IShellItemArray, fOkToBeSlow: BOOL, pCmdState: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetState(self, psiItemArray, fOkToBeSlow, pCmdState);
    }
    pub fn Invoke(self: *const IExplorerCommand, psiItemArray: ?*IShellItemArray, pbc: ?*IBindCtx) callconv(.Inline) HRESULT {
        return self.vtable.Invoke(self, psiItemArray, pbc);
    }
    pub fn GetFlags(self: *const IExplorerCommand, pFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetFlags(self, pFlags);
    }
    pub fn EnumSubCommands(self: *const IExplorerCommand, ppEnum: ?*?*IEnumExplorerCommand) callconv(.Inline) HRESULT {
        return self.vtable.EnumSubCommands(self, ppEnum);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IExplorerCommandState_Value = Guid.initString("bddacb60-7657-47ae-8445-d23e1acf82ae");
pub const IID_IExplorerCommandState = &IID_IExplorerCommandState_Value;
pub const IExplorerCommandState = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetState: *const fn(
            self: *const IExplorerCommandState,
            psiItemArray: ?*IShellItemArray,
            fOkToBeSlow: BOOL,
            pCmdState: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetState(self: *const IExplorerCommandState, psiItemArray: ?*IShellItemArray, fOkToBeSlow: BOOL, pCmdState: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetState(self, psiItemArray, fOkToBeSlow, pCmdState);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IInitializeCommand_Value = Guid.initString("85075acf-231f-40ea-9610-d26b7b58f638");
pub const IID_IInitializeCommand = &IID_IInitializeCommand_Value;
pub const IInitializeCommand = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn(
            self: *const IInitializeCommand,
            pszCommandName: ?[*:0]const u16,
            ppb: ?*IPropertyBag,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IInitializeCommand, pszCommandName: ?[*:0]const u16, ppb: ?*IPropertyBag) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, pszCommandName, ppb);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumExplorerCommand_Value = Guid.initString("a88826f8-186f-4987-aade-ea0cef8fbfe8");
pub const IID_IEnumExplorerCommand = &IID_IEnumExplorerCommand_Value;
pub const IEnumExplorerCommand = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumExplorerCommand,
            celt: u32,
            pUICommand: [*]?*IExplorerCommand,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumExplorerCommand,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumExplorerCommand,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumExplorerCommand,
            ppenum: ?*?*IEnumExplorerCommand,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumExplorerCommand, celt: u32, pUICommand: [*]?*IExplorerCommand, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, celt, pUICommand, pceltFetched);
    }
    pub fn Skip(self: *const IEnumExplorerCommand, celt: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumExplorerCommand) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumExplorerCommand, ppenum: ?*?*IEnumExplorerCommand) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppenum);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IExplorerCommandProvider_Value = Guid.initString("64961751-0835-43c0-8ffe-d57686530e64");
pub const IID_IExplorerCommandProvider = &IID_IExplorerCommandProvider_Value;
pub const IExplorerCommandProvider = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCommands: *const fn(
            self: *const IExplorerCommandProvider,
            punkSite: ?*IUnknown,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCommand: *const fn(
            self: *const IExplorerCommandProvider,
            rguidCommandId: ?*const Guid,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetCommands(self: *const IExplorerCommandProvider, punkSite: ?*IUnknown, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetCommands(self, punkSite, riid, ppv);
    }
    pub fn GetCommand(self: *const IExplorerCommandProvider, rguidCommandId: ?*const Guid, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetCommand(self, rguidCommandId, riid, ppv);
    }
};

pub const CPVIEW = enum(i32) {
    CLASSIC = 0,
    CATEGORY = 1,
    pub const ALLITEMS = .CLASSIC;
    pub const HOME = .CATEGORY;
};
pub const CPVIEW_CLASSIC = CPVIEW.CLASSIC;
pub const CPVIEW_ALLITEMS = CPVIEW.CLASSIC;
pub const CPVIEW_CATEGORY = CPVIEW.CATEGORY;
pub const CPVIEW_HOME = CPVIEW.CATEGORY;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOpenControlPanel_Value = Guid.initString("d11ad862-66de-4df4-bf6c-1f5621996af1");
pub const IID_IOpenControlPanel = &IID_IOpenControlPanel_Value;
pub const IOpenControlPanel = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Open: *const fn(
            self: *const IOpenControlPanel,
            pszName: ?[*:0]const u16,
            pszPage: ?[*:0]const u16,
            punkSite: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPath: *const fn(
            self: *const IOpenControlPanel,
            pszName: ?[*:0]const u16,
            pszPath: [*:0]u16,
            cchPath: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentView: *const fn(
            self: *const IOpenControlPanel,
            pView: ?*CPVIEW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Open(self: *const IOpenControlPanel, pszName: ?[*:0]const u16, pszPage: ?[*:0]const u16, punkSite: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.Open(self, pszName, pszPage, punkSite);
    }
    pub fn GetPath(self: *const IOpenControlPanel, pszName: ?[*:0]const u16, pszPath: [*:0]u16, cchPath: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetPath(self, pszName, pszPath, cchPath);
    }
    pub fn GetCurrentView(self: *const IOpenControlPanel, pView: ?*CPVIEW) callconv(.Inline) HRESULT {
        return self.vtable.GetCurrentView(self, pView);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IFileSystemBindData_Value = Guid.initString("01e18d10-4d8b-11d2-855d-006008059367");
pub const IID_IFileSystemBindData = &IID_IFileSystemBindData_Value;
pub const IFileSystemBindData = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetFindData: *const fn(
            self: *const IFileSystemBindData,
            pfd: ?*const WIN32_FIND_DATAW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFindData: *const fn(
            self: *const IFileSystemBindData,
            pfd: ?*WIN32_FIND_DATAW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetFindData(self: *const IFileSystemBindData, pfd: ?*const WIN32_FIND_DATAW) callconv(.Inline) HRESULT {
        return self.vtable.SetFindData(self, pfd);
    }
    pub fn GetFindData(self: *const IFileSystemBindData, pfd: ?*WIN32_FIND_DATAW) callconv(.Inline) HRESULT {
        return self.vtable.GetFindData(self, pfd);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFileSystemBindData2_Value = Guid.initString("3acf075f-71db-4afa-81f0-3fc4fdf2a5b8");
pub const IID_IFileSystemBindData2 = &IID_IFileSystemBindData2_Value;
pub const IFileSystemBindData2 = extern union {
    pub const VTable = extern struct {
        base: IFileSystemBindData.VTable,
        SetFileID: *const fn(
            self: *const IFileSystemBindData2,
            liFileID: LARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileID: *const fn(
            self: *const IFileSystemBindData2,
            pliFileID: ?*LARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetJunctionCLSID: *const fn(
            self: *const IFileSystemBindData2,
            clsid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetJunctionCLSID: *const fn(
            self: *const IFileSystemBindData2,
            pclsid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IFileSystemBindData: IFileSystemBindData,
    IUnknown: IUnknown,
    pub fn SetFileID(self: *const IFileSystemBindData2, liFileID: LARGE_INTEGER) callconv(.Inline) HRESULT {
        return self.vtable.SetFileID(self, liFileID);
    }
    pub fn GetFileID(self: *const IFileSystemBindData2, pliFileID: ?*LARGE_INTEGER) callconv(.Inline) HRESULT {
        return self.vtable.GetFileID(self, pliFileID);
    }
    pub fn SetJunctionCLSID(self: *const IFileSystemBindData2, clsid: ?*const Guid) callconv(.Inline) HRESULT {
        return self.vtable.SetJunctionCLSID(self, clsid);
    }
    pub fn GetJunctionCLSID(self: *const IFileSystemBindData2, pclsid: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetJunctionCLSID(self, pclsid);
    }
};

pub const KNOWNDESTCATEGORY = enum(i32) {
    FREQUENT = 1,
    RECENT = 2,
};
pub const KDC_FREQUENT = KNOWNDESTCATEGORY.FREQUENT;
pub const KDC_RECENT = KNOWNDESTCATEGORY.RECENT;

// TODO: this type is limited to platform 'windows6.1'
const IID_ICustomDestinationList_Value = Guid.initString("6332debf-87b5-4670-90c0-5e57b408a49e");
pub const IID_ICustomDestinationList = &IID_ICustomDestinationList_Value;
pub const ICustomDestinationList = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAppID: *const fn(
            self: *const ICustomDestinationList,
            pszAppID: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginList: *const fn(
            self: *const ICustomDestinationList,
            pcMinSlots: ?*u32,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AppendCategory: *const fn(
            self: *const ICustomDestinationList,
            pszCategory: ?[*:0]const u16,
            poa: ?*IObjectArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AppendKnownCategory: *const fn(
            self: *const ICustomDestinationList,
            category: KNOWNDESTCATEGORY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddUserTasks: *const fn(
            self: *const ICustomDestinationList,
            poa: ?*IObjectArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitList: *const fn(
            self: *const ICustomDestinationList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRemovedDestinations: *const fn(
            self: *const ICustomDestinationList,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteList: *const fn(
            self: *const ICustomDestinationList,
            pszAppID: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AbortList: *const fn(
            self: *const ICustomDestinationList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetAppID(self: *const ICustomDestinationList, pszAppID: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetAppID(self, pszAppID);
    }
    pub fn BeginList(self: *const ICustomDestinationList, pcMinSlots: ?*u32, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.BeginList(self, pcMinSlots, riid, ppv);
    }
    pub fn AppendCategory(self: *const ICustomDestinationList, pszCategory: ?[*:0]const u16, poa: ?*IObjectArray) callconv(.Inline) HRESULT {
        return self.vtable.AppendCategory(self, pszCategory, poa);
    }
    pub fn AppendKnownCategory(self: *const ICustomDestinationList, category: KNOWNDESTCATEGORY) callconv(.Inline) HRESULT {
        return self.vtable.AppendKnownCategory(self, category);
    }
    pub fn AddUserTasks(self: *const ICustomDestinationList, poa: ?*IObjectArray) callconv(.Inline) HRESULT {
        return self.vtable.AddUserTasks(self, poa);
    }
    pub fn CommitList(self: *const ICustomDestinationList) callconv(.Inline) HRESULT {
        return self.vtable.CommitList(self);
    }
    pub fn GetRemovedDestinations(self: *const ICustomDestinationList, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetRemovedDestinations(self, riid, ppv);
    }
    pub fn DeleteList(self: *const ICustomDestinationList, pszAppID: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.DeleteList(self, pszAppID);
    }
    pub fn AbortList(self: *const ICustomDestinationList) callconv(.Inline) HRESULT {
        return self.vtable.AbortList(self);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IApplicationDestinations_Value = Guid.initString("12337d35-94c6-48a0-bce7-6a9c69d4d600");
pub const IID_IApplicationDestinations = &IID_IApplicationDestinations_Value;
pub const IApplicationDestinations = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAppID: *const fn(
            self: *const IApplicationDestinations,
            pszAppID: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveDestination: *const fn(
            self: *const IApplicationDestinations,
            punk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllDestinations: *const fn(
            self: *const IApplicationDestinations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetAppID(self: *const IApplicationDestinations, pszAppID: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetAppID(self, pszAppID);
    }
    pub fn RemoveDestination(self: *const IApplicationDestinations, punk: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.RemoveDestination(self, punk);
    }
    pub fn RemoveAllDestinations(self: *const IApplicationDestinations) callconv(.Inline) HRESULT {
        return self.vtable.RemoveAllDestinations(self);
    }
};

pub const APPDOCLISTTYPE = enum(i32) {
    RECENT = 0,
    FREQUENT = 1,
};
pub const ADLT_RECENT = APPDOCLISTTYPE.RECENT;
pub const ADLT_FREQUENT = APPDOCLISTTYPE.FREQUENT;

// TODO: this type is limited to platform 'windows6.1'
const IID_IApplicationDocumentLists_Value = Guid.initString("3c594f9f-9f30-47a1-979a-c9e83d3d0a06");
pub const IID_IApplicationDocumentLists = &IID_IApplicationDocumentLists_Value;
pub const IApplicationDocumentLists = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAppID: *const fn(
            self: *const IApplicationDocumentLists,
            pszAppID: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetList: *const fn(
            self: *const IApplicationDocumentLists,
            listtype: APPDOCLISTTYPE,
            cItemsDesired: u32,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetAppID(self: *const IApplicationDocumentLists, pszAppID: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetAppID(self, pszAppID);
    }
    pub fn GetList(self: *const IApplicationDocumentLists, listtype: APPDOCLISTTYPE, cItemsDesired: u32, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetList(self, listtype, cItemsDesired, riid, ppv);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IObjectWithAppUserModelID_Value = Guid.initString("36db0196-9665-46d1-9ba7-d3709eecf9ed");
pub const IID_IObjectWithAppUserModelID = &IID_IObjectWithAppUserModelID_Value;
pub const IObjectWithAppUserModelID = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAppID: *const fn(
            self: *const IObjectWithAppUserModelID,
            pszAppID: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAppID: *const fn(
            self: *const IObjectWithAppUserModelID,
            ppszAppID: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetAppID(self: *const IObjectWithAppUserModelID, pszAppID: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetAppID(self, pszAppID);
    }
    pub fn GetAppID(self: *const IObjectWithAppUserModelID, ppszAppID: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetAppID(self, ppszAppID);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IObjectWithProgID_Value = Guid.initString("71e806fb-8dee-46fc-bf8c-7748a8a1ae13");
pub const IID_IObjectWithProgID = &IID_IObjectWithProgID_Value;
pub const IObjectWithProgID = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetProgID: *const fn(
            self: *const IObjectWithProgID,
            pszProgID: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProgID: *const fn(
            self: *const IObjectWithProgID,
            ppszProgID: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetProgID(self: *const IObjectWithProgID, pszProgID: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetProgID(self, pszProgID);
    }
    pub fn GetProgID(self: *const IObjectWithProgID, ppszProgID: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetProgID(self, ppszProgID);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IUpdateIDList_Value = Guid.initString("6589b6d2-5f8d-4b9e-b7e0-23cdd9717d8c");
pub const IID_IUpdateIDList = &IID_IUpdateIDList_Value;
pub const IUpdateIDList = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Update: *const fn(
            self: *const IUpdateIDList,
            pbc: ?*IBindCtx,
            pidlIn: ?*ITEMIDLIST,
            ppidlOut: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Update(self: *const IUpdateIDList, pbc: ?*IBindCtx, pidlIn: ?*ITEMIDLIST, ppidlOut: ?*?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.Update(self, pbc, pidlIn, ppidlOut);
    }
};

pub const DESKTOP_SLIDESHOW_OPTIONS = enum(i32) {
    S = 1,
};
pub const DSO_SHUFFLEIMAGES = DESKTOP_SLIDESHOW_OPTIONS.S;

pub const DESKTOP_SLIDESHOW_STATE = enum(i32) {
    ENABLED = 1,
    SLIDESHOW = 2,
    DISABLED_BY_REMOTE_SESSION = 4,
};
pub const DSS_ENABLED = DESKTOP_SLIDESHOW_STATE.ENABLED;
pub const DSS_SLIDESHOW = DESKTOP_SLIDESHOW_STATE.SLIDESHOW;
pub const DSS_DISABLED_BY_REMOTE_SESSION = DESKTOP_SLIDESHOW_STATE.DISABLED_BY_REMOTE_SESSION;

pub const DESKTOP_SLIDESHOW_DIRECTION = enum(i32) {
    FORWARD = 0,
    BACKWARD = 1,
};
pub const DSD_FORWARD = DESKTOP_SLIDESHOW_DIRECTION.FORWARD;
pub const DSD_BACKWARD = DESKTOP_SLIDESHOW_DIRECTION.BACKWARD;

pub const DESKTOP_WALLPAPER_POSITION = enum(i32) {
    CENTER = 0,
    TILE = 1,
    STRETCH = 2,
    FIT = 3,
    FILL = 4,
    SPAN = 5,
};
pub const DWPOS_CENTER = DESKTOP_WALLPAPER_POSITION.CENTER;
pub const DWPOS_TILE = DESKTOP_WALLPAPER_POSITION.TILE;
pub const DWPOS_STRETCH = DESKTOP_WALLPAPER_POSITION.STRETCH;
pub const DWPOS_FIT = DESKTOP_WALLPAPER_POSITION.FIT;
pub const DWPOS_FILL = DESKTOP_WALLPAPER_POSITION.FILL;
pub const DWPOS_SPAN = DESKTOP_WALLPAPER_POSITION.SPAN;

// TODO: this type is limited to platform 'windows8.0'
const IID_IDesktopWallpaper_Value = Guid.initString("b92b56a9-8b55-4e14-9a89-0199bbb6f93b");
pub const IID_IDesktopWallpaper = &IID_IDesktopWallpaper_Value;
pub const IDesktopWallpaper = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetWallpaper: *const fn(
            self: *const IDesktopWallpaper,
            monitorID: ?[*:0]const u16,
            wallpaper: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWallpaper: *const fn(
            self: *const IDesktopWallpaper,
            monitorID: ?[*:0]const u16,
            wallpaper: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMonitorDevicePathAt: *const fn(
            self: *const IDesktopWallpaper,
            monitorIndex: u32,
            monitorID: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMonitorDevicePathCount: *const fn(
            self: *const IDesktopWallpaper,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMonitorRECT: *const fn(
            self: *const IDesktopWallpaper,
            monitorID: ?[*:0]const u16,
            displayRect: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBackgroundColor: *const fn(
            self: *const IDesktopWallpaper,
            color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBackgroundColor: *const fn(
            self: *const IDesktopWallpaper,
            color: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPosition: *const fn(
            self: *const IDesktopWallpaper,
            position: DESKTOP_WALLPAPER_POSITION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPosition: *const fn(
            self: *const IDesktopWallpaper,
            position: ?*DESKTOP_WALLPAPER_POSITION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSlideshow: *const fn(
            self: *const IDesktopWallpaper,
            items: ?*IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSlideshow: *const fn(
            self: *const IDesktopWallpaper,
            items: ?*?*IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSlideshowOptions: *const fn(
            self: *const IDesktopWallpaper,
            options: DESKTOP_SLIDESHOW_OPTIONS,
            slideshowTick: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSlideshowOptions: *const fn(
            self: *const IDesktopWallpaper,
            options: ?*DESKTOP_SLIDESHOW_OPTIONS,
            slideshowTick: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AdvanceSlideshow: *const fn(
            self: *const IDesktopWallpaper,
            monitorID: ?[*:0]const u16,
            direction: DESKTOP_SLIDESHOW_DIRECTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: *const fn(
            self: *const IDesktopWallpaper,
            state: ?*DESKTOP_SLIDESHOW_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enable: *const fn(
            self: *const IDesktopWallpaper,
            enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetWallpaper(self: *const IDesktopWallpaper, monitorID: ?[*:0]const u16, wallpaper: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetWallpaper(self, monitorID, wallpaper);
    }
    pub fn GetWallpaper(self: *const IDesktopWallpaper, monitorID: ?[*:0]const u16, wallpaper: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetWallpaper(self, monitorID, wallpaper);
    }
    pub fn GetMonitorDevicePathAt(self: *const IDesktopWallpaper, monitorIndex: u32, monitorID: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetMonitorDevicePathAt(self, monitorIndex, monitorID);
    }
    pub fn GetMonitorDevicePathCount(self: *const IDesktopWallpaper, count: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetMonitorDevicePathCount(self, count);
    }
    pub fn GetMonitorRECT(self: *const IDesktopWallpaper, monitorID: ?[*:0]const u16, displayRect: ?*RECT) callconv(.Inline) HRESULT {
        return self.vtable.GetMonitorRECT(self, monitorID, displayRect);
    }
    pub fn SetBackgroundColor(self: *const IDesktopWallpaper, color: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetBackgroundColor(self, color);
    }
    pub fn GetBackgroundColor(self: *const IDesktopWallpaper, color: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetBackgroundColor(self, color);
    }
    pub fn SetPosition(self: *const IDesktopWallpaper, position: DESKTOP_WALLPAPER_POSITION) callconv(.Inline) HRESULT {
        return self.vtable.SetPosition(self, position);
    }
    pub fn GetPosition(self: *const IDesktopWallpaper, position: ?*DESKTOP_WALLPAPER_POSITION) callconv(.Inline) HRESULT {
        return self.vtable.GetPosition(self, position);
    }
    pub fn SetSlideshow(self: *const IDesktopWallpaper, items: ?*IShellItemArray) callconv(.Inline) HRESULT {
        return self.vtable.SetSlideshow(self, items);
    }
    pub fn GetSlideshow(self: *const IDesktopWallpaper, items: ?*?*IShellItemArray) callconv(.Inline) HRESULT {
        return self.vtable.GetSlideshow(self, items);
    }
    pub fn SetSlideshowOptions(self: *const IDesktopWallpaper, options: DESKTOP_SLIDESHOW_OPTIONS, slideshowTick: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetSlideshowOptions(self, options, slideshowTick);
    }
    pub fn GetSlideshowOptions(self: *const IDesktopWallpaper, options: ?*DESKTOP_SLIDESHOW_OPTIONS, slideshowTick: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetSlideshowOptions(self, options, slideshowTick);
    }
    pub fn AdvanceSlideshow(self: *const IDesktopWallpaper, monitorID: ?[*:0]const u16, direction: DESKTOP_SLIDESHOW_DIRECTION) callconv(.Inline) HRESULT {
        return self.vtable.AdvanceSlideshow(self, monitorID, direction);
    }
    pub fn GetStatus(self: *const IDesktopWallpaper, state: ?*DESKTOP_SLIDESHOW_STATE) callconv(.Inline) HRESULT {
        return self.vtable.GetStatus(self, state);
    }
    pub fn Enable(self: *const IDesktopWallpaper, enable: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.Enable(self, enable);
    }
};

pub const HOMEGROUPSHARINGCHOICES = enum(i32) {
    NONE = 0,
    MUSICLIBRARY = 1,
    PICTURESLIBRARY = 2,
    VIDEOSLIBRARY = 4,
    DOCUMENTSLIBRARY = 8,
    PRINTERS = 16,
};
pub const HGSC_NONE = HOMEGROUPSHARINGCHOICES.NONE;
pub const HGSC_MUSICLIBRARY = HOMEGROUPSHARINGCHOICES.MUSICLIBRARY;
pub const HGSC_PICTURESLIBRARY = HOMEGROUPSHARINGCHOICES.PICTURESLIBRARY;
pub const HGSC_VIDEOSLIBRARY = HOMEGROUPSHARINGCHOICES.VIDEOSLIBRARY;
pub const HGSC_DOCUMENTSLIBRARY = HOMEGROUPSHARINGCHOICES.DOCUMENTSLIBRARY;
pub const HGSC_PRINTERS = HOMEGROUPSHARINGCHOICES.PRINTERS;

// TODO: this type is limited to platform 'windows6.1'
const IID_IHomeGroup_Value = Guid.initString("7a3bd1d9-35a9-4fb3-a467-f48cac35e2d0");
pub const IID_IHomeGroup = &IID_IHomeGroup_Value;
pub const IHomeGroup = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsMember: *const fn(
            self: *const IHomeGroup,
            member: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowSharingWizard: *const fn(
            self: *const IHomeGroup,
            owner: ?HWND,
            sharingchoices: ?*HOMEGROUPSHARINGCHOICES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn IsMember(self: *const IHomeGroup, member: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.IsMember(self, member);
    }
    pub fn ShowSharingWizard(self: *const IHomeGroup, owner: ?HWND, sharingchoices: ?*HOMEGROUPSHARINGCHOICES) callconv(.Inline) HRESULT {
        return self.vtable.ShowSharingWizard(self, owner, sharingchoices);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IInitializeWithPropertyStore_Value = Guid.initString("c3e12eb5-7d8d-44f8-b6dd-0e77b34d6de4");
pub const IID_IInitializeWithPropertyStore = &IID_IInitializeWithPropertyStore_Value;
pub const IInitializeWithPropertyStore = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn(
            self: *const IInitializeWithPropertyStore,
            pps: ?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IInitializeWithPropertyStore, pps: ?*IPropertyStore) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, pps);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpenSearchSource_Value = Guid.initString("f0ee7333-e6fc-479b-9f25-a860c234a38e");
pub const IID_IOpenSearchSource = &IID_IOpenSearchSource_Value;
pub const IOpenSearchSource = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetResults: *const fn(
            self: *const IOpenSearchSource,
            hwnd: ?HWND,
            pszQuery: ?[*:0]const u16,
            dwStartIndex: u32,
            dwCount: u32,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetResults(self: *const IOpenSearchSource, hwnd: ?HWND, pszQuery: ?[*:0]const u16, dwStartIndex: u32, dwCount: u32, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetResults(self, hwnd, pszQuery, dwStartIndex, dwCount, riid, ppv);
    }
};

pub const LIBRARYFOLDERFILTER = enum(i32) {
    FORCEFILESYSTEM = 1,
    STORAGEITEMS = 2,
    ALLITEMS = 3,
};
pub const LFF_FORCEFILESYSTEM = LIBRARYFOLDERFILTER.FORCEFILESYSTEM;
pub const LFF_STORAGEITEMS = LIBRARYFOLDERFILTER.STORAGEITEMS;
pub const LFF_ALLITEMS = LIBRARYFOLDERFILTER.ALLITEMS;

pub const LIBRARYOPTIONFLAGS = enum(i32) {
    DEFAULT = 0,
    PINNEDTONAVPANE = 1,
    pub const MASK_ALL = .PINNEDTONAVPANE;
};
pub const LOF_DEFAULT = LIBRARYOPTIONFLAGS.DEFAULT;
pub const LOF_PINNEDTONAVPANE = LIBRARYOPTIONFLAGS.PINNEDTONAVPANE;
pub const LOF_MASK_ALL = LIBRARYOPTIONFLAGS.PINNEDTONAVPANE;

pub const DEFAULTSAVEFOLDERTYPE = enum(i32) {
    DETECT = 1,
    PRIVATE = 2,
    PUBLIC = 3,
};
pub const DSFT_DETECT = DEFAULTSAVEFOLDERTYPE.DETECT;
pub const DSFT_PRIVATE = DEFAULTSAVEFOLDERTYPE.PRIVATE;
pub const DSFT_PUBLIC = DEFAULTSAVEFOLDERTYPE.PUBLIC;

pub const LIBRARYSAVEFLAGS = enum(i32) {
    FAILIFTHERE = 0,
    OVERRIDEEXISTING = 1,
    MAKEUNIQUENAME = 2,
};
pub const LSF_FAILIFTHERE = LIBRARYSAVEFLAGS.FAILIFTHERE;
pub const LSF_OVERRIDEEXISTING = LIBRARYSAVEFLAGS.OVERRIDEEXISTING;
pub const LSF_MAKEUNIQUENAME = LIBRARYSAVEFLAGS.MAKEUNIQUENAME;

// TODO: this type is limited to platform 'windows6.1'
const IID_IShellLibrary_Value = Guid.initString("11a66efa-382e-451a-9234-1e0e12ef3085");
pub const IID_IShellLibrary = &IID_IShellLibrary_Value;
pub const IShellLibrary = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        LoadLibraryFromItem: *const fn(
            self: *const IShellLibrary,
            psiLibrary: ?*IShellItem,
            grfMode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadLibraryFromKnownFolder: *const fn(
            self: *const IShellLibrary,
            kfidLibrary: ?*const Guid,
            grfMode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFolder: *const fn(
            self: *const IShellLibrary,
            psiLocation: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveFolder: *const fn(
            self: *const IShellLibrary,
            psiLocation: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolders: *const fn(
            self: *const IShellLibrary,
            lff: LIBRARYFOLDERFILTER,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResolveFolder: *const fn(
            self: *const IShellLibrary,
            psiFolderToResolve: ?*IShellItem,
            dwTimeout: u32,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultSaveFolder: *const fn(
            self: *const IShellLibrary,
            dsft: DEFAULTSAVEFOLDERTYPE,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultSaveFolder: *const fn(
            self: *const IShellLibrary,
            dsft: DEFAULTSAVEFOLDERTYPE,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptions: *const fn(
            self: *const IShellLibrary,
            plofOptions: ?*LIBRARYOPTIONFLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOptions: *const fn(
            self: *const IShellLibrary,
            lofMask: LIBRARYOPTIONFLAGS,
            lofOptions: LIBRARYOPTIONFLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderType: *const fn(
            self: *const IShellLibrary,
            pftid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFolderType: *const fn(
            self: *const IShellLibrary,
            ftid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIcon: *const fn(
            self: *const IShellLibrary,
            ppszIcon: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIcon: *const fn(
            self: *const IShellLibrary,
            pszIcon: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: *const fn(
            self: *const IShellLibrary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn(
            self: *const IShellLibrary,
            psiFolderToSaveIn: ?*IShellItem,
            pszLibraryName: ?[*:0]const u16,
            lsf: LIBRARYSAVEFLAGS,
            ppsiSavedTo: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveInKnownFolder: *const fn(
            self: *const IShellLibrary,
            kfidToSaveIn: ?*const Guid,
            pszLibraryName: ?[*:0]const u16,
            lsf: LIBRARYSAVEFLAGS,
            ppsiSavedTo: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn LoadLibraryFromItem(self: *const IShellLibrary, psiLibrary: ?*IShellItem, grfMode: u32) callconv(.Inline) HRESULT {
        return self.vtable.LoadLibraryFromItem(self, psiLibrary, grfMode);
    }
    pub fn LoadLibraryFromKnownFolder(self: *const IShellLibrary, kfidLibrary: ?*const Guid, grfMode: u32) callconv(.Inline) HRESULT {
        return self.vtable.LoadLibraryFromKnownFolder(self, kfidLibrary, grfMode);
    }
    pub fn AddFolder(self: *const IShellLibrary, psiLocation: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.AddFolder(self, psiLocation);
    }
    pub fn RemoveFolder(self: *const IShellLibrary, psiLocation: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.RemoveFolder(self, psiLocation);
    }
    pub fn GetFolders(self: *const IShellLibrary, lff: LIBRARYFOLDERFILTER, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetFolders(self, lff, riid, ppv);
    }
    pub fn ResolveFolder(self: *const IShellLibrary, psiFolderToResolve: ?*IShellItem, dwTimeout: u32, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.ResolveFolder(self, psiFolderToResolve, dwTimeout, riid, ppv);
    }
    pub fn GetDefaultSaveFolder(self: *const IShellLibrary, dsft: DEFAULTSAVEFOLDERTYPE, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetDefaultSaveFolder(self, dsft, riid, ppv);
    }
    pub fn SetDefaultSaveFolder(self: *const IShellLibrary, dsft: DEFAULTSAVEFOLDERTYPE, psi: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.SetDefaultSaveFolder(self, dsft, psi);
    }
    pub fn GetOptions(self: *const IShellLibrary, plofOptions: ?*LIBRARYOPTIONFLAGS) callconv(.Inline) HRESULT {
        return self.vtable.GetOptions(self, plofOptions);
    }
    pub fn SetOptions(self: *const IShellLibrary, lofMask: LIBRARYOPTIONFLAGS, lofOptions: LIBRARYOPTIONFLAGS) callconv(.Inline) HRESULT {
        return self.vtable.SetOptions(self, lofMask, lofOptions);
    }
    pub fn GetFolderType(self: *const IShellLibrary, pftid: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetFolderType(self, pftid);
    }
    pub fn SetFolderType(self: *const IShellLibrary, ftid: ?*const Guid) callconv(.Inline) HRESULT {
        return self.vtable.SetFolderType(self, ftid);
    }
    pub fn GetIcon(self: *const IShellLibrary, ppszIcon: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetIcon(self, ppszIcon);
    }
    pub fn SetIcon(self: *const IShellLibrary, pszIcon: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetIcon(self, pszIcon);
    }
    pub fn Commit(self: *const IShellLibrary) callconv(.Inline) HRESULT {
        return self.vtable.Commit(self);
    }
    pub fn Save(self: *const IShellLibrary, psiFolderToSaveIn: ?*IShellItem, pszLibraryName: ?[*:0]const u16, lsf: LIBRARYSAVEFLAGS, ppsiSavedTo: ?*?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.Save(self, psiFolderToSaveIn, pszLibraryName, lsf, ppsiSavedTo);
    }
    pub fn SaveInKnownFolder(self: *const IShellLibrary, kfidToSaveIn: ?*const Guid, pszLibraryName: ?[*:0]const u16, lsf: LIBRARYSAVEFLAGS, ppsiSavedTo: ?*?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.SaveInKnownFolder(self, kfidToSaveIn, pszLibraryName, lsf, ppsiSavedTo);
    }
};

pub const DEFAULT_FOLDER_MENU_RESTRICTIONS = enum(i32) {
    DEFAULT = 0,
    NO_STATIC_VERBS = 8,
    STATIC_VERBS_ONLY = 16,
    NO_RESOURCE_VERBS = 32,
    OPTIN_HANDLERS_ONLY = 64,
    RESOURCE_AND_FOLDER_VERBS_ONLY = 128,
    USE_SPECIFIED_HANDLERS = 256,
    USE_SPECIFIED_VERBS = 512,
    NO_ASYNC_VERBS = 1024,
    NO_NATIVECPU_VERBS = 2048,
    NO_NONWOW_VERBS = 4096,
};
pub const DFMR_DEFAULT = DEFAULT_FOLDER_MENU_RESTRICTIONS.DEFAULT;
pub const DFMR_NO_STATIC_VERBS = DEFAULT_FOLDER_MENU_RESTRICTIONS.NO_STATIC_VERBS;
pub const DFMR_STATIC_VERBS_ONLY = DEFAULT_FOLDER_MENU_RESTRICTIONS.STATIC_VERBS_ONLY;
pub const DFMR_NO_RESOURCE_VERBS = DEFAULT_FOLDER_MENU_RESTRICTIONS.NO_RESOURCE_VERBS;
pub const DFMR_OPTIN_HANDLERS_ONLY = DEFAULT_FOLDER_MENU_RESTRICTIONS.OPTIN_HANDLERS_ONLY;
pub const DFMR_RESOURCE_AND_FOLDER_VERBS_ONLY = DEFAULT_FOLDER_MENU_RESTRICTIONS.RESOURCE_AND_FOLDER_VERBS_ONLY;
pub const DFMR_USE_SPECIFIED_HANDLERS = DEFAULT_FOLDER_MENU_RESTRICTIONS.USE_SPECIFIED_HANDLERS;
pub const DFMR_USE_SPECIFIED_VERBS = DEFAULT_FOLDER_MENU_RESTRICTIONS.USE_SPECIFIED_VERBS;
pub const DFMR_NO_ASYNC_VERBS = DEFAULT_FOLDER_MENU_RESTRICTIONS.NO_ASYNC_VERBS;
pub const DFMR_NO_NATIVECPU_VERBS = DEFAULT_FOLDER_MENU_RESTRICTIONS.NO_NATIVECPU_VERBS;
pub const DFMR_NO_NONWOW_VERBS = DEFAULT_FOLDER_MENU_RESTRICTIONS.NO_NONWOW_VERBS;

// TODO: this type is limited to platform 'windows8.0'
const IID_IDefaultFolderMenuInitialize_Value = Guid.initString("7690aa79-f8fc-4615-a327-36f7d18f5d91");
pub const IID_IDefaultFolderMenuInitialize = &IID_IDefaultFolderMenuInitialize_Value;
pub const IDefaultFolderMenuInitialize = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn(
            self: *const IDefaultFolderMenuInitialize,
            hwnd: ?HWND,
            pcmcb: ?*IContextMenuCB,
            pidlFolder: ?*ITEMIDLIST,
            psf: ?*IShellFolder,
            cidl: u32,
            apidl: [*]?*ITEMIDLIST,
            punkAssociation: ?*IUnknown,
            cKeys: u32,
            aKeys: ?*const ?HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMenuRestrictions: *const fn(
            self: *const IDefaultFolderMenuInitialize,
            dfmrValues: DEFAULT_FOLDER_MENU_RESTRICTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMenuRestrictions: *const fn(
            self: *const IDefaultFolderMenuInitialize,
            dfmrMask: DEFAULT_FOLDER_MENU_RESTRICTIONS,
            pdfmrValues: ?*DEFAULT_FOLDER_MENU_RESTRICTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHandlerClsid: *const fn(
            self: *const IDefaultFolderMenuInitialize,
            rclsid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IDefaultFolderMenuInitialize, hwnd: ?HWND, pcmcb: ?*IContextMenuCB, pidlFolder: ?*ITEMIDLIST, psf: ?*IShellFolder, cidl: u32, apidl: [*]?*ITEMIDLIST, punkAssociation: ?*IUnknown, cKeys: u32, aKeys: ?*const ?HKEY) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, hwnd, pcmcb, pidlFolder, psf, cidl, apidl, punkAssociation, cKeys, aKeys);
    }
    pub fn SetMenuRestrictions(self: *const IDefaultFolderMenuInitialize, dfmrValues: DEFAULT_FOLDER_MENU_RESTRICTIONS) callconv(.Inline) HRESULT {
        return self.vtable.SetMenuRestrictions(self, dfmrValues);
    }
    pub fn GetMenuRestrictions(self: *const IDefaultFolderMenuInitialize, dfmrMask: DEFAULT_FOLDER_MENU_RESTRICTIONS, pdfmrValues: ?*DEFAULT_FOLDER_MENU_RESTRICTIONS) callconv(.Inline) HRESULT {
        return self.vtable.GetMenuRestrictions(self, dfmrMask, pdfmrValues);
    }
    pub fn SetHandlerClsid(self: *const IDefaultFolderMenuInitialize, rclsid: ?*const Guid) callconv(.Inline) HRESULT {
        return self.vtable.SetHandlerClsid(self, rclsid);
    }
};

pub const ACTIVATEOPTIONS = enum(i32) {
    NONE = 0,
    DESIGNMODE = 1,
    NOERRORUI = 2,
    NOSPLASHSCREEN = 4,
    PRELAUNCH = 33554432,
};
pub const AO_NONE = ACTIVATEOPTIONS.NONE;
pub const AO_DESIGNMODE = ACTIVATEOPTIONS.DESIGNMODE;
pub const AO_NOERRORUI = ACTIVATEOPTIONS.NOERRORUI;
pub const AO_NOSPLASHSCREEN = ACTIVATEOPTIONS.NOSPLASHSCREEN;
pub const AO_PRELAUNCH = ACTIVATEOPTIONS.PRELAUNCH;

// TODO: this type is limited to platform 'windows8.0'
const IID_IApplicationActivationManager_Value = Guid.initString("2e941141-7f97-4756-ba1d-9decde894a3d");
pub const IID_IApplicationActivationManager = &IID_IApplicationActivationManager_Value;
pub const IApplicationActivationManager = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ActivateApplication: *const fn(
            self: *const IApplicationActivationManager,
            appUserModelId: ?[*:0]const u16,
            arguments: ?[*:0]const u16,
            options: ACTIVATEOPTIONS,
            processId: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ActivateForFile: *const fn(
            self: *const IApplicationActivationManager,
            appUserModelId: ?[*:0]const u16,
            itemArray: ?*IShellItemArray,
            verb: ?[*:0]const u16,
            processId: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ActivateForProtocol: *const fn(
            self: *const IApplicationActivationManager,
            appUserModelId: ?[*:0]const u16,
            itemArray: ?*IShellItemArray,
            processId: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn ActivateApplication(self: *const IApplicationActivationManager, appUserModelId: ?[*:0]const u16, arguments: ?[*:0]const u16, options: ACTIVATEOPTIONS, processId: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.ActivateApplication(self, appUserModelId, arguments, options, processId);
    }
    pub fn ActivateForFile(self: *const IApplicationActivationManager, appUserModelId: ?[*:0]const u16, itemArray: ?*IShellItemArray, verb: ?[*:0]const u16, processId: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.ActivateForFile(self, appUserModelId, itemArray, verb, processId);
    }
    pub fn ActivateForProtocol(self: *const IApplicationActivationManager, appUserModelId: ?[*:0]const u16, itemArray: ?*IShellItemArray, processId: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.ActivateForProtocol(self, appUserModelId, itemArray, processId);
    }
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IVirtualDesktopManager_Value = Guid.initString("a5cd92ff-29be-454c-8d04-d82879fb3f1b");
pub const IID_IVirtualDesktopManager = &IID_IVirtualDesktopManager_Value;
pub const IVirtualDesktopManager = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsWindowOnCurrentVirtualDesktop: *const fn(
            self: *const IVirtualDesktopManager,
            topLevelWindow: ?HWND,
            onCurrentDesktop: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWindowDesktopId: *const fn(
            self: *const IVirtualDesktopManager,
            topLevelWindow: ?HWND,
            desktopId: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveWindowToDesktop: *const fn(
            self: *const IVirtualDesktopManager,
            topLevelWindow: ?HWND,
            desktopId: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn IsWindowOnCurrentVirtualDesktop(self: *const IVirtualDesktopManager, topLevelWindow: ?HWND, onCurrentDesktop: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.IsWindowOnCurrentVirtualDesktop(self, topLevelWindow, onCurrentDesktop);
    }
    pub fn GetWindowDesktopId(self: *const IVirtualDesktopManager, topLevelWindow: ?HWND, desktopId: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetWindowDesktopId(self, topLevelWindow, desktopId);
    }
    pub fn MoveWindowToDesktop(self: *const IVirtualDesktopManager, topLevelWindow: ?HWND, desktopId: ?*const Guid) callconv(.Inline) HRESULT {
        return self.vtable.MoveWindowToDesktop(self, topLevelWindow, desktopId);
    }
};

pub const LIBRARYMANAGEDIALOGOPTIONS = enum(i32) {
    DEFAULT = 0,
    ALLOWUNINDEXABLENETWORKLOCATIONS = 1,
};
pub const LMD_DEFAULT = LIBRARYMANAGEDIALOGOPTIONS.DEFAULT;
pub const LMD_ALLOWUNINDEXABLENETWORKLOCATIONS = LIBRARYMANAGEDIALOGOPTIONS.ALLOWUNINDEXABLENETWORKLOCATIONS;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAssocHandlerInvoker_Value = Guid.initString("92218cab-ecaa-4335-8133-807fd234c2ee");
pub const IID_IAssocHandlerInvoker = &IID_IAssocHandlerInvoker_Value;
pub const IAssocHandlerInvoker = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SupportsSelection: *const fn(
            self: *const IAssocHandlerInvoker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Invoke: *const fn(
            self: *const IAssocHandlerInvoker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SupportsSelection(self: *const IAssocHandlerInvoker) callconv(.Inline) HRESULT {
        return self.vtable.SupportsSelection(self);
    }
    pub fn Invoke(self: *const IAssocHandlerInvoker) callconv(.Inline) HRESULT {
        return self.vtable.Invoke(self);
    }
};

pub const AHTYPE = enum(i32) {
    UNDEFINED = 0,
    USER_APPLICATION = 8,
    ANY_APPLICATION = 16,
    MACHINEDEFAULT = 32,
    PROGID = 64,
    APPLICATION = 128,
    CLASS_APPLICATION = 256,
    ANY_PROGID = 512,
};
pub const AHTYPE_UNDEFINED = AHTYPE.UNDEFINED;
pub const AHTYPE_USER_APPLICATION = AHTYPE.USER_APPLICATION;
pub const AHTYPE_ANY_APPLICATION = AHTYPE.ANY_APPLICATION;
pub const AHTYPE_MACHINEDEFAULT = AHTYPE.MACHINEDEFAULT;
pub const AHTYPE_PROGID = AHTYPE.PROGID;
pub const AHTYPE_APPLICATION = AHTYPE.APPLICATION;
pub const AHTYPE_CLASS_APPLICATION = AHTYPE.CLASS_APPLICATION;
pub const AHTYPE_ANY_PROGID = AHTYPE.ANY_PROGID;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAssocHandler_Value = Guid.initString("f04061ac-1659-4a3f-a954-775aa57fc083");
pub const IID_IAssocHandler = &IID_IAssocHandler_Value;
pub const IAssocHandler = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetName: *const fn(
            self: *const IAssocHandler,
            ppsz: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUIName: *const fn(
            self: *const IAssocHandler,
            ppsz: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIconLocation: *const fn(
            self: *const IAssocHandler,
            ppszPath: ?*?PWSTR,
            pIndex: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsRecommended: *const fn(
            self: *const IAssocHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MakeDefault: *const fn(
            self: *const IAssocHandler,
            pszDescription: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Invoke: *const fn(
            self: *const IAssocHandler,
            pdo: ?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInvoker: *const fn(
            self: *const IAssocHandler,
            pdo: ?*IDataObject,
            ppInvoker: ?*?*IAssocHandlerInvoker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetName(self: *const IAssocHandler, ppsz: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetName(self, ppsz);
    }
    pub fn GetUIName(self: *const IAssocHandler, ppsz: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetUIName(self, ppsz);
    }
    pub fn GetIconLocation(self: *const IAssocHandler, ppszPath: ?*?PWSTR, pIndex: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetIconLocation(self, ppszPath, pIndex);
    }
    pub fn IsRecommended(self: *const IAssocHandler) callconv(.Inline) HRESULT {
        return self.vtable.IsRecommended(self);
    }
    pub fn MakeDefault(self: *const IAssocHandler, pszDescription: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.MakeDefault(self, pszDescription);
    }
    pub fn Invoke(self: *const IAssocHandler, pdo: ?*IDataObject) callconv(.Inline) HRESULT {
        return self.vtable.Invoke(self, pdo);
    }
    pub fn CreateInvoker(self: *const IAssocHandler, pdo: ?*IDataObject, ppInvoker: ?*?*IAssocHandlerInvoker) callconv(.Inline) HRESULT {
        return self.vtable.CreateInvoker(self, pdo, ppInvoker);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumAssocHandlers_Value = Guid.initString("973810ae-9599-4b88-9e4d-6ee98c9552da");
pub const IID_IEnumAssocHandlers = &IID_IEnumAssocHandlers_Value;
pub const IEnumAssocHandlers = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumAssocHandlers,
            celt: u32,
            rgelt: [*]?*IAssocHandler,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumAssocHandlers, celt: u32, rgelt: [*]?*IAssocHandler, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, celt, rgelt, pceltFetched);
    }
};

pub const ASSOC_FILTER = enum(i32) {
    NONE = 0,
    RECOMMENDED = 1,
};
pub const ASSOC_FILTER_NONE = ASSOC_FILTER.NONE;
pub const ASSOC_FILTER_RECOMMENDED = ASSOC_FILTER.RECOMMENDED;

// TODO: this type is limited to platform 'windows8.0'
const IID_IDataObjectProvider_Value = Guid.initString("3d25f6d6-4b2a-433c-9184-7c33ad35d001");
pub const IID_IDataObjectProvider = &IID_IDataObjectProvider_Value;
pub const IDataObjectProvider = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDataObject: *const fn(
            self: *const IDataObjectProvider,
            dataObject: ?*?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDataObject: *const fn(
            self: *const IDataObjectProvider,
            dataObject: ?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetDataObject(self: *const IDataObjectProvider, dataObject: ?*?*IDataObject) callconv(.Inline) HRESULT {
        return self.vtable.GetDataObject(self, dataObject);
    }
    pub fn SetDataObject(self: *const IDataObjectProvider, dataObject: ?*IDataObject) callconv(.Inline) HRESULT {
        return self.vtable.SetDataObject(self, dataObject);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDataTransferManagerInterop_Value = Guid.initString("3a3dcd6c-3eab-43dc-bcde-45671ce800c8");
pub const IID_IDataTransferManagerInterop = &IID_IDataTransferManagerInterop_Value;
pub const IDataTransferManagerInterop = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetForWindow: *const fn(
            self: *const IDataTransferManagerInterop,
            appWindow: ?HWND,
            riid: ?*const Guid,
            dataTransferManager: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowShareUIForWindow: *const fn(
            self: *const IDataTransferManagerInterop,
            appWindow: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetForWindow(self: *const IDataTransferManagerInterop, appWindow: ?HWND, riid: ?*const Guid, dataTransferManager: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetForWindow(self, appWindow, riid, dataTransferManager);
    }
    pub fn ShowShareUIForWindow(self: *const IDataTransferManagerInterop, appWindow: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.ShowShareUIForWindow(self, appWindow);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IFrameworkInputPaneHandler_Value = Guid.initString("226c537b-1e76-4d9e-a760-33db29922f18");
pub const IID_IFrameworkInputPaneHandler = &IID_IFrameworkInputPaneHandler_Value;
pub const IFrameworkInputPaneHandler = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Showing: *const fn(
            self: *const IFrameworkInputPaneHandler,
            prcInputPaneScreenLocation: ?*RECT,
            fEnsureFocusedElementInView: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Hiding: *const fn(
            self: *const IFrameworkInputPaneHandler,
            fEnsureFocusedElementInView: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Showing(self: *const IFrameworkInputPaneHandler, prcInputPaneScreenLocation: ?*RECT, fEnsureFocusedElementInView: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.Showing(self, prcInputPaneScreenLocation, fEnsureFocusedElementInView);
    }
    pub fn Hiding(self: *const IFrameworkInputPaneHandler, fEnsureFocusedElementInView: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.Hiding(self, fEnsureFocusedElementInView);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IFrameworkInputPane_Value = Guid.initString("5752238b-24f0-495a-82f1-2fd593056796");
pub const IID_IFrameworkInputPane = &IID_IFrameworkInputPane_Value;
pub const IFrameworkInputPane = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Advise: *const fn(
            self: *const IFrameworkInputPane,
            pWindow: ?*IUnknown,
            pHandler: ?*IFrameworkInputPaneHandler,
            pdwCookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AdviseWithHWND: *const fn(
            self: *const IFrameworkInputPane,
            hwnd: ?HWND,
            pHandler: ?*IFrameworkInputPaneHandler,
            pdwCookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: *const fn(
            self: *const IFrameworkInputPane,
            dwCookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Location: *const fn(
            self: *const IFrameworkInputPane,
            prcInputPaneScreenLocation: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Advise(self: *const IFrameworkInputPane, pWindow: ?*IUnknown, pHandler: ?*IFrameworkInputPaneHandler, pdwCookie: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Advise(self, pWindow, pHandler, pdwCookie);
    }
    pub fn AdviseWithHWND(self: *const IFrameworkInputPane, hwnd: ?HWND, pHandler: ?*IFrameworkInputPaneHandler, pdwCookie: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.AdviseWithHWND(self, hwnd, pHandler, pdwCookie);
    }
    pub fn Unadvise(self: *const IFrameworkInputPane, dwCookie: u32) callconv(.Inline) HRESULT {
        return self.vtable.Unadvise(self, dwCookie);
    }
    pub fn Location(self: *const IFrameworkInputPane, prcInputPaneScreenLocation: ?*RECT) callconv(.Inline) HRESULT {
        return self.vtable.Location(self, prcInputPaneScreenLocation);
    }
};

pub const MONITOR_APP_VISIBILITY = enum(i32) {
    UNKNOWN = 0,
    NO_APP_VISIBLE = 1,
    APP_VISIBLE = 2,
};
pub const MAV_UNKNOWN = MONITOR_APP_VISIBILITY.UNKNOWN;
pub const MAV_NO_APP_VISIBLE = MONITOR_APP_VISIBILITY.NO_APP_VISIBLE;
pub const MAV_APP_VISIBLE = MONITOR_APP_VISIBILITY.APP_VISIBLE;

// TODO: this type is limited to platform 'windows8.0'
const IID_IAppVisibilityEvents_Value = Guid.initString("6584ce6b-7d82-49c2-89c9-c6bc02ba8c38");
pub const IID_IAppVisibilityEvents = &IID_IAppVisibilityEvents_Value;
pub const IAppVisibilityEvents = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AppVisibilityOnMonitorChanged: *const fn(
            self: *const IAppVisibilityEvents,
            hMonitor: ?HMONITOR,
            previousMode: MONITOR_APP_VISIBILITY,
            currentMode: MONITOR_APP_VISIBILITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LauncherVisibilityChange: *const fn(
            self: *const IAppVisibilityEvents,
            currentVisibleState: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn AppVisibilityOnMonitorChanged(self: *const IAppVisibilityEvents, hMonitor: ?HMONITOR, previousMode: MONITOR_APP_VISIBILITY, currentMode: MONITOR_APP_VISIBILITY) callconv(.Inline) HRESULT {
        return self.vtable.AppVisibilityOnMonitorChanged(self, hMonitor, previousMode, currentMode);
    }
    pub fn LauncherVisibilityChange(self: *const IAppVisibilityEvents, currentVisibleState: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.LauncherVisibilityChange(self, currentVisibleState);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IAppVisibility_Value = Guid.initString("2246ea2d-caea-4444-a3c4-6de827e44313");
pub const IID_IAppVisibility = &IID_IAppVisibility_Value;
pub const IAppVisibility = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAppVisibilityOnMonitor: *const fn(
            self: *const IAppVisibility,
            hMonitor: ?HMONITOR,
            pMode: ?*MONITOR_APP_VISIBILITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsLauncherVisible: *const fn(
            self: *const IAppVisibility,
            pfVisible: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Advise: *const fn(
            self: *const IAppVisibility,
            pCallback: ?*IAppVisibilityEvents,
            pdwCookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: *const fn(
            self: *const IAppVisibility,
            dwCookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetAppVisibilityOnMonitor(self: *const IAppVisibility, hMonitor: ?HMONITOR, pMode: ?*MONITOR_APP_VISIBILITY) callconv(.Inline) HRESULT {
        return self.vtable.GetAppVisibilityOnMonitor(self, hMonitor, pMode);
    }
    pub fn IsLauncherVisible(self: *const IAppVisibility, pfVisible: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.IsLauncherVisible(self, pfVisible);
    }
    pub fn Advise(self: *const IAppVisibility, pCallback: ?*IAppVisibilityEvents, pdwCookie: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Advise(self, pCallback, pdwCookie);
    }
    pub fn Unadvise(self: *const IAppVisibility, dwCookie: u32) callconv(.Inline) HRESULT {
        return self.vtable.Unadvise(self, dwCookie);
    }
};

pub const PACKAGE_EXECUTION_STATE = enum(i32) {
    UNKNOWN = 0,
    RUNNING = 1,
    SUSPENDING = 2,
    SUSPENDED = 3,
    TERMINATED = 4,
};
pub const PES_UNKNOWN = PACKAGE_EXECUTION_STATE.UNKNOWN;
pub const PES_RUNNING = PACKAGE_EXECUTION_STATE.RUNNING;
pub const PES_SUSPENDING = PACKAGE_EXECUTION_STATE.SUSPENDING;
pub const PES_SUSPENDED = PACKAGE_EXECUTION_STATE.SUSPENDED;
pub const PES_TERMINATED = PACKAGE_EXECUTION_STATE.TERMINATED;

// TODO: this type is limited to platform 'windows8.0'
const IID_IPackageExecutionStateChangeNotification_Value = Guid.initString("1bb12a62-2ad8-432b-8ccf-0c2c52afcd5b");
pub const IID_IPackageExecutionStateChangeNotification = &IID_IPackageExecutionStateChangeNotification_Value;
pub const IPackageExecutionStateChangeNotification = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnStateChanged: *const fn(
            self: *const IPackageExecutionStateChangeNotification,
            pszPackageFullName: ?[*:0]const u16,
            pesNewState: PACKAGE_EXECUTION_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnStateChanged(self: *const IPackageExecutionStateChangeNotification, pszPackageFullName: ?[*:0]const u16, pesNewState: PACKAGE_EXECUTION_STATE) callconv(.Inline) HRESULT {
        return self.vtable.OnStateChanged(self, pszPackageFullName, pesNewState);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IPackageDebugSettings_Value = Guid.initString("f27c3930-8029-4ad1-94e3-3dba417810c1");
pub const IID_IPackageDebugSettings = &IID_IPackageDebugSettings_Value;
pub const IPackageDebugSettings = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnableDebugging: *const fn(
            self: *const IPackageDebugSettings,
            packageFullName: ?[*:0]const u16,
            debuggerCommandLine: ?[*:0]const u16,
            environment: ?[*]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisableDebugging: *const fn(
            self: *const IPackageDebugSettings,
            packageFullName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Suspend: *const fn(
            self: *const IPackageDebugSettings,
            packageFullName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: *const fn(
            self: *const IPackageDebugSettings,
            packageFullName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TerminateAllProcesses: *const fn(
            self: *const IPackageDebugSettings,
            packageFullName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTargetSessionId: *const fn(
            self: *const IPackageDebugSettings,
            sessionId: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateBackgroundTasks: *const fn(
            self: *const IPackageDebugSettings,
            packageFullName: ?[*:0]const u16,
            taskCount: ?*u32,
            taskIds: ?*?*Guid,
            taskNames: ?*?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ActivateBackgroundTask: *const fn(
            self: *const IPackageDebugSettings,
            taskId: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartServicing: *const fn(
            self: *const IPackageDebugSettings,
            packageFullName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopServicing: *const fn(
            self: *const IPackageDebugSettings,
            packageFullName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartSessionRedirection: *const fn(
            self: *const IPackageDebugSettings,
            packageFullName: ?[*:0]const u16,
            sessionId: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopSessionRedirection: *const fn(
            self: *const IPackageDebugSettings,
            packageFullName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPackageExecutionState: *const fn(
            self: *const IPackageDebugSettings,
            packageFullName: ?[*:0]const u16,
            packageExecutionState: ?*PACKAGE_EXECUTION_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterForPackageStateChanges: *const fn(
            self: *const IPackageDebugSettings,
            packageFullName: ?[*:0]const u16,
            pPackageExecutionStateChangeNotification: ?*IPackageExecutionStateChangeNotification,
            pdwCookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterForPackageStateChanges: *const fn(
            self: *const IPackageDebugSettings,
            dwCookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn EnableDebugging(self: *const IPackageDebugSettings, packageFullName: ?[*:0]const u16, debuggerCommandLine: ?[*:0]const u16, environment: ?[*]u16) callconv(.Inline) HRESULT {
        return self.vtable.EnableDebugging(self, packageFullName, debuggerCommandLine, environment);
    }
    pub fn DisableDebugging(self: *const IPackageDebugSettings, packageFullName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.DisableDebugging(self, packageFullName);
    }
    pub fn Suspend(self: *const IPackageDebugSettings, packageFullName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.Suspend(self, packageFullName);
    }
    pub fn Resume(self: *const IPackageDebugSettings, packageFullName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.Resume(self, packageFullName);
    }
    pub fn TerminateAllProcesses(self: *const IPackageDebugSettings, packageFullName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.TerminateAllProcesses(self, packageFullName);
    }
    pub fn SetTargetSessionId(self: *const IPackageDebugSettings, sessionId: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetTargetSessionId(self, sessionId);
    }
    pub fn EnumerateBackgroundTasks(self: *const IPackageDebugSettings, packageFullName: ?[*:0]const u16, taskCount: ?*u32, taskIds: ?*?*Guid, taskNames: ?*?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.EnumerateBackgroundTasks(self, packageFullName, taskCount, taskIds, taskNames);
    }
    pub fn ActivateBackgroundTask(self: *const IPackageDebugSettings, taskId: ?*const Guid) callconv(.Inline) HRESULT {
        return self.vtable.ActivateBackgroundTask(self, taskId);
    }
    pub fn StartServicing(self: *const IPackageDebugSettings, packageFullName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.StartServicing(self, packageFullName);
    }
    pub fn StopServicing(self: *const IPackageDebugSettings, packageFullName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.StopServicing(self, packageFullName);
    }
    pub fn StartSessionRedirection(self: *const IPackageDebugSettings, packageFullName: ?[*:0]const u16, sessionId: u32) callconv(.Inline) HRESULT {
        return self.vtable.StartSessionRedirection(self, packageFullName, sessionId);
    }
    pub fn StopSessionRedirection(self: *const IPackageDebugSettings, packageFullName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.StopSessionRedirection(self, packageFullName);
    }
    pub fn GetPackageExecutionState(self: *const IPackageDebugSettings, packageFullName: ?[*:0]const u16, packageExecutionState: ?*PACKAGE_EXECUTION_STATE) callconv(.Inline) HRESULT {
        return self.vtable.GetPackageExecutionState(self, packageFullName, packageExecutionState);
    }
    pub fn RegisterForPackageStateChanges(self: *const IPackageDebugSettings, packageFullName: ?[*:0]const u16, pPackageExecutionStateChangeNotification: ?*IPackageExecutionStateChangeNotification, pdwCookie: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.RegisterForPackageStateChanges(self, packageFullName, pPackageExecutionStateChangeNotification, pdwCookie);
    }
    pub fn UnregisterForPackageStateChanges(self: *const IPackageDebugSettings, dwCookie: u32) callconv(.Inline) HRESULT {
        return self.vtable.UnregisterForPackageStateChanges(self, dwCookie);
    }
};

const IID_IPackageDebugSettings2_Value = Guid.initString("6e3194bb-ab82-4d22-93f5-fabda40e7b16");
pub const IID_IPackageDebugSettings2 = &IID_IPackageDebugSettings2_Value;
pub const IPackageDebugSettings2 = extern union {
    pub const VTable = extern struct {
        base: IPackageDebugSettings.VTable,
        EnumerateApps: *const fn(
            self: *const IPackageDebugSettings2,
            packageFullName: ?[*:0]const u16,
            appCount: ?*u32,
            appUserModelIds: ?*?*?PWSTR,
            appDisplayNames: ?*?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IPackageDebugSettings: IPackageDebugSettings,
    IUnknown: IUnknown,
    pub fn EnumerateApps(self: *const IPackageDebugSettings2, packageFullName: ?[*:0]const u16, appCount: ?*u32, appUserModelIds: ?*?*?PWSTR, appDisplayNames: ?*?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.EnumerateApps(self, packageFullName, appCount, appUserModelIds, appDisplayNames);
    }
};

// TODO: this type is limited to platform 'windows8.1'
const IID_ISuspensionDependencyManager_Value = Guid.initString("52b83a42-2543-416a-81d9-c0de7969c8b3");
pub const IID_ISuspensionDependencyManager = &IID_ISuspensionDependencyManager_Value;
pub const ISuspensionDependencyManager = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterAsChild: *const fn(
            self: *const ISuspensionDependencyManager,
            processHandle: ?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GroupChildWithParent: *const fn(
            self: *const ISuspensionDependencyManager,
            childProcessHandle: ?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UngroupChildFromParent: *const fn(
            self: *const ISuspensionDependencyManager,
            childProcessHandle: ?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn RegisterAsChild(self: *const ISuspensionDependencyManager, processHandle: ?HANDLE) callconv(.Inline) HRESULT {
        return self.vtable.RegisterAsChild(self, processHandle);
    }
    pub fn GroupChildWithParent(self: *const ISuspensionDependencyManager, childProcessHandle: ?HANDLE) callconv(.Inline) HRESULT {
        return self.vtable.GroupChildWithParent(self, childProcessHandle);
    }
    pub fn UngroupChildFromParent(self: *const ISuspensionDependencyManager, childProcessHandle: ?HANDLE) callconv(.Inline) HRESULT {
        return self.vtable.UngroupChildFromParent(self, childProcessHandle);
    }
};

pub const AHE_TYPE = enum(i32) {
    DESKTOP = 0,
    IMMERSIVE = 1,
};
pub const AHE_DESKTOP = AHE_TYPE.DESKTOP;
pub const AHE_IMMERSIVE = AHE_TYPE.IMMERSIVE;

// TODO: this type is limited to platform 'windows8.0'
const IID_IExecuteCommandApplicationHostEnvironment_Value = Guid.initString("18b21aa9-e184-4ff0-9f5e-f882d03771b3");
pub const IID_IExecuteCommandApplicationHostEnvironment = &IID_IExecuteCommandApplicationHostEnvironment_Value;
pub const IExecuteCommandApplicationHostEnvironment = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetValue: *const fn(
            self: *const IExecuteCommandApplicationHostEnvironment,
            pahe: ?*AHE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetValue(self: *const IExecuteCommandApplicationHostEnvironment, pahe: ?*AHE_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.GetValue(self, pahe);
    }
};

pub const EC_HOST_UI_MODE = enum(i32) {
    DESKTOP = 0,
    IMMERSIVE = 1,
    SYSTEM_LAUNCHER = 2,
};
pub const ECHUIM_DESKTOP = EC_HOST_UI_MODE.DESKTOP;
pub const ECHUIM_IMMERSIVE = EC_HOST_UI_MODE.IMMERSIVE;
pub const ECHUIM_SYSTEM_LAUNCHER = EC_HOST_UI_MODE.SYSTEM_LAUNCHER;

// TODO: this type is limited to platform 'windows8.0'
const IID_IExecuteCommandHost_Value = Guid.initString("4b6832a2-5f04-4c9d-b89d-727a15d103e7");
pub const IID_IExecuteCommandHost = &IID_IExecuteCommandHost_Value;
pub const IExecuteCommandHost = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetUIMode: *const fn(
            self: *const IExecuteCommandHost,
            pUIMode: ?*EC_HOST_UI_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetUIMode(self: *const IExecuteCommandHost, pUIMode: ?*EC_HOST_UI_MODE) callconv(.Inline) HRESULT {
        return self.vtable.GetUIMode(self, pUIMode);
    }
};

pub const APPLICATION_VIEW_STATE = enum(i32) {
    FULLSCREEN_LANDSCAPE = 0,
    FILLED = 1,
    SNAPPED = 2,
    FULLSCREEN_PORTRAIT = 3,
};
pub const AVS_FULLSCREEN_LANDSCAPE = APPLICATION_VIEW_STATE.FULLSCREEN_LANDSCAPE;
pub const AVS_FILLED = APPLICATION_VIEW_STATE.FILLED;
pub const AVS_SNAPPED = APPLICATION_VIEW_STATE.SNAPPED;
pub const AVS_FULLSCREEN_PORTRAIT = APPLICATION_VIEW_STATE.FULLSCREEN_PORTRAIT;

pub const EDGE_GESTURE_KIND = enum(i32) {
    TOUCH = 0,
    KEYBOARD = 1,
    MOUSE = 2,
};
pub const EGK_TOUCH = EDGE_GESTURE_KIND.TOUCH;
pub const EGK_KEYBOARD = EDGE_GESTURE_KIND.KEYBOARD;
pub const EGK_MOUSE = EDGE_GESTURE_KIND.MOUSE;

// TODO: this type is limited to platform 'windows8.0'
const IID_IApplicationDesignModeSettings_Value = Guid.initString("2a3dee9a-e31d-46d6-8508-bcc597db3557");
pub const IID_IApplicationDesignModeSettings = &IID_IApplicationDesignModeSettings_Value;
pub const IApplicationDesignModeSettings = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetNativeDisplaySize: *const fn(
            self: *const IApplicationDesignModeSettings,
            nativeDisplaySizePixels: SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScaleFactor: *const fn(
            self: *const IApplicationDesignModeSettings,
            scaleFactor: DEVICE_SCALE_FACTOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetApplicationViewState: *const fn(
            self: *const IApplicationDesignModeSettings,
            viewState: APPLICATION_VIEW_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ComputeApplicationSize: *const fn(
            self: *const IApplicationDesignModeSettings,
            applicationSizePixels: ?*SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsApplicationViewStateSupported: *const fn(
            self: *const IApplicationDesignModeSettings,
            viewState: APPLICATION_VIEW_STATE,
            nativeDisplaySizePixels: SIZE,
            scaleFactor: DEVICE_SCALE_FACTOR,
            supported: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TriggerEdgeGesture: *const fn(
            self: *const IApplicationDesignModeSettings,
            edgeGestureKind: EDGE_GESTURE_KIND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetNativeDisplaySize(self: *const IApplicationDesignModeSettings, nativeDisplaySizePixels: SIZE) callconv(.Inline) HRESULT {
        return self.vtable.SetNativeDisplaySize(self, nativeDisplaySizePixels);
    }
    pub fn SetScaleFactor(self: *const IApplicationDesignModeSettings, scaleFactor: DEVICE_SCALE_FACTOR) callconv(.Inline) HRESULT {
        return self.vtable.SetScaleFactor(self, scaleFactor);
    }
    pub fn SetApplicationViewState(self: *const IApplicationDesignModeSettings, viewState: APPLICATION_VIEW_STATE) callconv(.Inline) HRESULT {
        return self.vtable.SetApplicationViewState(self, viewState);
    }
    pub fn ComputeApplicationSize(self: *const IApplicationDesignModeSettings, applicationSizePixels: ?*SIZE) callconv(.Inline) HRESULT {
        return self.vtable.ComputeApplicationSize(self, applicationSizePixels);
    }
    pub fn IsApplicationViewStateSupported(self: *const IApplicationDesignModeSettings, viewState: APPLICATION_VIEW_STATE, nativeDisplaySizePixels: SIZE, scaleFactor: DEVICE_SCALE_FACTOR, supported: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.IsApplicationViewStateSupported(self, viewState, nativeDisplaySizePixels, scaleFactor, supported);
    }
    pub fn TriggerEdgeGesture(self: *const IApplicationDesignModeSettings, edgeGestureKind: EDGE_GESTURE_KIND) callconv(.Inline) HRESULT {
        return self.vtable.TriggerEdgeGesture(self, edgeGestureKind);
    }
};

pub const NATIVE_DISPLAY_ORIENTATION = enum(i32) {
    LANDSCAPE = 0,
    PORTRAIT = 1,
};
pub const NDO_LANDSCAPE = NATIVE_DISPLAY_ORIENTATION.LANDSCAPE;
pub const NDO_PORTRAIT = NATIVE_DISPLAY_ORIENTATION.PORTRAIT;

pub const APPLICATION_VIEW_ORIENTATION = enum(i32) {
    LANDSCAPE = 0,
    PORTRAIT = 1,
};
pub const AVO_LANDSCAPE = APPLICATION_VIEW_ORIENTATION.LANDSCAPE;
pub const AVO_PORTRAIT = APPLICATION_VIEW_ORIENTATION.PORTRAIT;

pub const ADJACENT_DISPLAY_EDGES = enum(i32) {
    NONE = 0,
    LEFT = 1,
    RIGHT = 2,
};
pub const ADE_NONE = ADJACENT_DISPLAY_EDGES.NONE;
pub const ADE_LEFT = ADJACENT_DISPLAY_EDGES.LEFT;
pub const ADE_RIGHT = ADJACENT_DISPLAY_EDGES.RIGHT;

pub const APPLICATION_VIEW_MIN_WIDTH = enum(i32) {
    DEFAULT = 0,
    @"320" = 1,
    @"500" = 2,
};
pub const AVMW_DEFAULT = APPLICATION_VIEW_MIN_WIDTH.DEFAULT;
pub const AVMW_320 = APPLICATION_VIEW_MIN_WIDTH.@"320";
pub const AVMW_500 = APPLICATION_VIEW_MIN_WIDTH.@"500";

// TODO: this type is limited to platform 'windows8.1'
const IID_IApplicationDesignModeSettings2_Value = Guid.initString("490514e1-675a-4d6e-a58d-e54901b4ca2f");
pub const IID_IApplicationDesignModeSettings2 = &IID_IApplicationDesignModeSettings2_Value;
pub const IApplicationDesignModeSettings2 = extern union {
    pub const VTable = extern struct {
        base: IApplicationDesignModeSettings.VTable,
        SetNativeDisplayOrientation: *const fn(
            self: *const IApplicationDesignModeSettings2,
            nativeDisplayOrientation: NATIVE_DISPLAY_ORIENTATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetApplicationViewOrientation: *const fn(
            self: *const IApplicationDesignModeSettings2,
            viewOrientation: APPLICATION_VIEW_ORIENTATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAdjacentDisplayEdges: *const fn(
            self: *const IApplicationDesignModeSettings2,
            adjacentDisplayEdges: ADJACENT_DISPLAY_EDGES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIsOnLockScreen: *const fn(
            self: *const IApplicationDesignModeSettings2,
            isOnLockScreen: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetApplicationViewMinWidth: *const fn(
            self: *const IApplicationDesignModeSettings2,
            viewMinWidth: APPLICATION_VIEW_MIN_WIDTH,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationSizeBounds: *const fn(
            self: *const IApplicationDesignModeSettings2,
            minApplicationSizePixels: ?*SIZE,
            maxApplicationSizePixels: ?*SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationViewOrientation: *const fn(
            self: *const IApplicationDesignModeSettings2,
            applicationSizePixels: SIZE,
            viewOrientation: ?*APPLICATION_VIEW_ORIENTATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IApplicationDesignModeSettings: IApplicationDesignModeSettings,
    IUnknown: IUnknown,
    pub fn SetNativeDisplayOrientation(self: *const IApplicationDesignModeSettings2, nativeDisplayOrientation: NATIVE_DISPLAY_ORIENTATION) callconv(.Inline) HRESULT {
        return self.vtable.SetNativeDisplayOrientation(self, nativeDisplayOrientation);
    }
    pub fn SetApplicationViewOrientation(self: *const IApplicationDesignModeSettings2, viewOrientation: APPLICATION_VIEW_ORIENTATION) callconv(.Inline) HRESULT {
        return self.vtable.SetApplicationViewOrientation(self, viewOrientation);
    }
    pub fn SetAdjacentDisplayEdges(self: *const IApplicationDesignModeSettings2, adjacentDisplayEdges: ADJACENT_DISPLAY_EDGES) callconv(.Inline) HRESULT {
        return self.vtable.SetAdjacentDisplayEdges(self, adjacentDisplayEdges);
    }
    pub fn SetIsOnLockScreen(self: *const IApplicationDesignModeSettings2, isOnLockScreen: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetIsOnLockScreen(self, isOnLockScreen);
    }
    pub fn SetApplicationViewMinWidth(self: *const IApplicationDesignModeSettings2, viewMinWidth: APPLICATION_VIEW_MIN_WIDTH) callconv(.Inline) HRESULT {
        return self.vtable.SetApplicationViewMinWidth(self, viewMinWidth);
    }
    pub fn GetApplicationSizeBounds(self: *const IApplicationDesignModeSettings2, minApplicationSizePixels: ?*SIZE, maxApplicationSizePixels: ?*SIZE) callconv(.Inline) HRESULT {
        return self.vtable.GetApplicationSizeBounds(self, minApplicationSizePixels, maxApplicationSizePixels);
    }
    pub fn GetApplicationViewOrientation(self: *const IApplicationDesignModeSettings2, applicationSizePixels: SIZE, viewOrientation: ?*APPLICATION_VIEW_ORIENTATION) callconv(.Inline) HRESULT {
        return self.vtable.GetApplicationViewOrientation(self, applicationSizePixels, viewOrientation);
    }
};

// TODO: this type is limited to platform 'windows8.1'
const IID_ILaunchTargetMonitor_Value = Guid.initString("266fbc7e-490d-46ed-a96b-2274db252003");
pub const IID_ILaunchTargetMonitor = &IID_ILaunchTargetMonitor_Value;
pub const ILaunchTargetMonitor = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetMonitor: *const fn(
            self: *const ILaunchTargetMonitor,
            monitor: ?*?HMONITOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetMonitor(self: *const ILaunchTargetMonitor, monitor: ?*?HMONITOR) callconv(.Inline) HRESULT {
        return self.vtable.GetMonitor(self, monitor);
    }
};

pub const APPLICATION_VIEW_SIZE_PREFERENCE = enum(i32) {
    DEFAULT = 0,
    USE_LESS = 1,
    USE_HALF = 2,
    USE_MORE = 3,
    USE_MINIMUM = 4,
    USE_NONE = 5,
    CUSTOM = 6,
};
pub const AVSP_DEFAULT = APPLICATION_VIEW_SIZE_PREFERENCE.DEFAULT;
pub const AVSP_USE_LESS = APPLICATION_VIEW_SIZE_PREFERENCE.USE_LESS;
pub const AVSP_USE_HALF = APPLICATION_VIEW_SIZE_PREFERENCE.USE_HALF;
pub const AVSP_USE_MORE = APPLICATION_VIEW_SIZE_PREFERENCE.USE_MORE;
pub const AVSP_USE_MINIMUM = APPLICATION_VIEW_SIZE_PREFERENCE.USE_MINIMUM;
pub const AVSP_USE_NONE = APPLICATION_VIEW_SIZE_PREFERENCE.USE_NONE;
pub const AVSP_CUSTOM = APPLICATION_VIEW_SIZE_PREFERENCE.CUSTOM;

// TODO: this type is limited to platform 'windows8.1'
const IID_ILaunchSourceViewSizePreference_Value = Guid.initString("e5aa01f7-1fb8-4830-8720-4e6734cbd5f3");
pub const IID_ILaunchSourceViewSizePreference = &IID_ILaunchSourceViewSizePreference_Value;
pub const ILaunchSourceViewSizePreference = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSourceViewToPosition: *const fn(
            self: *const ILaunchSourceViewSizePreference,
            hwnd: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSourceViewSizePreference: *const fn(
            self: *const ILaunchSourceViewSizePreference,
            sourceSizeAfterLaunch: ?*APPLICATION_VIEW_SIZE_PREFERENCE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetSourceViewToPosition(self: *const ILaunchSourceViewSizePreference, hwnd: ?*?HWND) callconv(.Inline) HRESULT {
        return self.vtable.GetSourceViewToPosition(self, hwnd);
    }
    pub fn GetSourceViewSizePreference(self: *const ILaunchSourceViewSizePreference, sourceSizeAfterLaunch: ?*APPLICATION_VIEW_SIZE_PREFERENCE) callconv(.Inline) HRESULT {
        return self.vtable.GetSourceViewSizePreference(self, sourceSizeAfterLaunch);
    }
};

// TODO: this type is limited to platform 'windows8.1'
const IID_ILaunchTargetViewSizePreference_Value = Guid.initString("2f0666c6-12f7-4360-b511-a394a0553725");
pub const IID_ILaunchTargetViewSizePreference = &IID_ILaunchTargetViewSizePreference_Value;
pub const ILaunchTargetViewSizePreference = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTargetViewSizePreference: *const fn(
            self: *const ILaunchTargetViewSizePreference,
            targetSizeOnLaunch: ?*APPLICATION_VIEW_SIZE_PREFERENCE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetTargetViewSizePreference(self: *const ILaunchTargetViewSizePreference, targetSizeOnLaunch: ?*APPLICATION_VIEW_SIZE_PREFERENCE) callconv(.Inline) HRESULT {
        return self.vtable.GetTargetViewSizePreference(self, targetSizeOnLaunch);
    }
};

// TODO: this type is limited to platform 'windows8.1'
const IID_ILaunchSourceAppUserModelId_Value = Guid.initString("989191ac-28ff-4cf0-9584-e0d078bc2396");
pub const IID_ILaunchSourceAppUserModelId = &IID_ILaunchSourceAppUserModelId_Value;
pub const ILaunchSourceAppUserModelId = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAppUserModelId: *const fn(
            self: *const ILaunchSourceAppUserModelId,
            launchingApp: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetAppUserModelId(self: *const ILaunchSourceAppUserModelId, launchingApp: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetAppUserModelId(self, launchingApp);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IInitializeWithWindow_Value = Guid.initString("3e68d4bd-7135-4d10-8018-9fb6d9f33fa1");
pub const IID_IInitializeWithWindow = &IID_IInitializeWithWindow_Value;
pub const IInitializeWithWindow = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn(
            self: *const IInitializeWithWindow,
            hwnd: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IInitializeWithWindow, hwnd: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, hwnd);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IHandlerInfo_Value = Guid.initString("997706ef-f880-453b-8118-39e1a2d2655a");
pub const IID_IHandlerInfo = &IID_IHandlerInfo_Value;
pub const IHandlerInfo = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetApplicationDisplayName: *const fn(
            self: *const IHandlerInfo,
            value: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationPublisher: *const fn(
            self: *const IHandlerInfo,
            value: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationIconReference: *const fn(
            self: *const IHandlerInfo,
            value: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetApplicationDisplayName(self: *const IHandlerInfo, value: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetApplicationDisplayName(self, value);
    }
    pub fn GetApplicationPublisher(self: *const IHandlerInfo, value: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetApplicationPublisher(self, value);
    }
    pub fn GetApplicationIconReference(self: *const IHandlerInfo, value: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetApplicationIconReference(self, value);
    }
};

const IID_IHandlerInfo2_Value = Guid.initString("31cca04c-04d3-4ea9-90de-97b15e87a532");
pub const IID_IHandlerInfo2 = &IID_IHandlerInfo2_Value;
pub const IHandlerInfo2 = extern union {
    pub const VTable = extern struct {
        base: IHandlerInfo.VTable,
        GetApplicationId: *const fn(
            self: *const IHandlerInfo2,
            value: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IHandlerInfo: IHandlerInfo,
    IUnknown: IUnknown,
    pub fn GetApplicationId(self: *const IHandlerInfo2, value: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetApplicationId(self, value);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IHandlerActivationHost_Value = Guid.initString("35094a87-8bb1-4237-96c6-c417eebdb078");
pub const IID_IHandlerActivationHost = &IID_IHandlerActivationHost_Value;
pub const IHandlerActivationHost = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BeforeCoCreateInstance: *const fn(
            self: *const IHandlerActivationHost,
            clsidHandler: ?*const Guid,
            itemsBeingActivated: ?*IShellItemArray,
            handlerInfo: ?*IHandlerInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeforeCreateProcess: *const fn(
            self: *const IHandlerActivationHost,
            applicationPath: ?[*:0]const u16,
            commandLine: ?[*:0]const u16,
            handlerInfo: ?*IHandlerInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn BeforeCoCreateInstance(self: *const IHandlerActivationHost, clsidHandler: ?*const Guid, itemsBeingActivated: ?*IShellItemArray, handlerInfo: ?*IHandlerInfo) callconv(.Inline) HRESULT {
        return self.vtable.BeforeCoCreateInstance(self, clsidHandler, itemsBeingActivated, handlerInfo);
    }
    pub fn BeforeCreateProcess(self: *const IHandlerActivationHost, applicationPath: ?[*:0]const u16, commandLine: ?[*:0]const u16, handlerInfo: ?*IHandlerInfo) callconv(.Inline) HRESULT {
        return self.vtable.BeforeCreateProcess(self, applicationPath, commandLine, handlerInfo);
    }
};

const IID_IAppActivationUIInfo_Value = Guid.initString("abad189d-9fa3-4278-b3ca-8ca448a88dcb");
pub const IID_IAppActivationUIInfo = &IID_IAppActivationUIInfo_Value;
pub const IAppActivationUIInfo = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetMonitor: *const fn(
            self: *const IAppActivationUIInfo,
            value: ?*?HMONITOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInvokePoint: *const fn(
            self: *const IAppActivationUIInfo,
            value: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShowCommand: *const fn(
            self: *const IAppActivationUIInfo,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShowUI: *const fn(
            self: *const IAppActivationUIInfo,
            value: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyState: *const fn(
            self: *const IAppActivationUIInfo,
            value: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetMonitor(self: *const IAppActivationUIInfo, value: ?*?HMONITOR) callconv(.Inline) HRESULT {
        return self.vtable.GetMonitor(self, value);
    }
    pub fn GetInvokePoint(self: *const IAppActivationUIInfo, value: ?*POINT) callconv(.Inline) HRESULT {
        return self.vtable.GetInvokePoint(self, value);
    }
    pub fn GetShowCommand(self: *const IAppActivationUIInfo, value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetShowCommand(self, value);
    }
    pub fn GetShowUI(self: *const IAppActivationUIInfo, value: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.GetShowUI(self, value);
    }
    pub fn GetKeyState(self: *const IAppActivationUIInfo, value: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetKeyState(self, value);
    }
};

pub const FLYOUT_PLACEMENT = enum(i32) {
    DEFAULT = 0,
    ABOVE = 1,
    BELOW = 2,
    LEFT = 3,
    RIGHT = 4,
};
pub const FP_DEFAULT = FLYOUT_PLACEMENT.DEFAULT;
pub const FP_ABOVE = FLYOUT_PLACEMENT.ABOVE;
pub const FP_BELOW = FLYOUT_PLACEMENT.BELOW;
pub const FP_LEFT = FLYOUT_PLACEMENT.LEFT;
pub const FP_RIGHT = FLYOUT_PLACEMENT.RIGHT;

// TODO: this type is limited to platform 'windows8.1'
const IID_IContactManagerInterop_Value = Guid.initString("99eacba7-e073-43b6-a896-55afe48a0833");
pub const IID_IContactManagerInterop = &IID_IContactManagerInterop_Value;
pub const IContactManagerInterop = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ShowContactCardForWindow: *const fn(
            self: *const IContactManagerInterop,
            appWindow: ?HWND,
            contact: ?*IUnknown,
            selection: ?*const RECT,
            preferredPlacement: FLYOUT_PLACEMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn ShowContactCardForWindow(self: *const IContactManagerInterop, appWindow: ?HWND, contact: ?*IUnknown, selection: ?*const RECT, preferredPlacement: FLYOUT_PLACEMENT) callconv(.Inline) HRESULT {
        return self.vtable.ShowContactCardForWindow(self, appWindow, contact, selection, preferredPlacement);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IShellIconOverlayIdentifier_Value = Guid.initString("0c6c4200-c589-11d0-999a-00c04fd655e1");
pub const IID_IShellIconOverlayIdentifier = &IID_IShellIconOverlayIdentifier_Value;
pub const IShellIconOverlayIdentifier = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsMemberOf: *const fn(
            self: *const IShellIconOverlayIdentifier,
            pwszPath: ?[*:0]const u16,
            dwAttrib: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOverlayInfo: *const fn(
            self: *const IShellIconOverlayIdentifier,
            pwszIconFile: [*:0]u16,
            cchMax: i32,
            pIndex: ?*i32,
            pdwFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPriority: *const fn(
            self: *const IShellIconOverlayIdentifier,
            pPriority: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn IsMemberOf(self: *const IShellIconOverlayIdentifier, pwszPath: ?[*:0]const u16, dwAttrib: u32) callconv(.Inline) HRESULT {
        return self.vtable.IsMemberOf(self, pwszPath, dwAttrib);
    }
    pub fn GetOverlayInfo(self: *const IShellIconOverlayIdentifier, pwszIconFile: [*:0]u16, cchMax: i32, pIndex: ?*i32, pdwFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetOverlayInfo(self, pwszIconFile, cchMax, pIndex, pdwFlags);
    }
    pub fn GetPriority(self: *const IShellIconOverlayIdentifier, pPriority: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetPriority(self, pPriority);
    }
};

pub const BANNER_NOTIFICATION_EVENT = enum(i32) {
    Rendered = 0,
    Hovered = 1,
    Closed = 2,
    Dismissed = 3,
    Button1Clicked = 4,
    Button2Clicked = 5,
};
pub const BNE_Rendered = BANNER_NOTIFICATION_EVENT.Rendered;
pub const BNE_Hovered = BANNER_NOTIFICATION_EVENT.Hovered;
pub const BNE_Closed = BANNER_NOTIFICATION_EVENT.Closed;
pub const BNE_Dismissed = BANNER_NOTIFICATION_EVENT.Dismissed;
pub const BNE_Button1Clicked = BANNER_NOTIFICATION_EVENT.Button1Clicked;
pub const BNE_Button2Clicked = BANNER_NOTIFICATION_EVENT.Button2Clicked;

pub const BANNER_NOTIFICATION = extern struct {
    event: BANNER_NOTIFICATION_EVENT,
    providerIdentity: ?[*:0]const u16,
    contentId: ?[*:0]const u16,
};

const IID_IBannerNotificationHandler_Value = Guid.initString("8d7b2ba7-db05-46a8-823c-d2b6de08ee91");
pub const IID_IBannerNotificationHandler = &IID_IBannerNotificationHandler_Value;
pub const IBannerNotificationHandler = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnBannerEvent: *const fn(
            self: *const IBannerNotificationHandler,
            notification: ?*const BANNER_NOTIFICATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnBannerEvent(self: *const IBannerNotificationHandler, notification: ?*const BANNER_NOTIFICATION) callconv(.Inline) HRESULT {
        return self.vtable.OnBannerEvent(self, notification);
    }
};

pub const SORT_ORDER_TYPE = enum(i32) {
    DEFAULT = 0,
    IGNORE_FOLDERNESS = 1,
};
pub const SOT_DEFAULT = SORT_ORDER_TYPE.DEFAULT;
pub const SOT_IGNORE_FOLDERNESS = SORT_ORDER_TYPE.IGNORE_FOLDERNESS;

const IID_ISortColumnArray_Value = Guid.initString("6dfc60fb-f2e9-459b-beb5-288f1a7c7d54");
pub const IID_ISortColumnArray = &IID_ISortColumnArray_Value;
pub const ISortColumnArray = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn(
            self: *const ISortColumnArray,
            columnCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn(
            self: *const ISortColumnArray,
            index: u32,
            sortcolumn: ?*SORTCOLUMN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSortType: *const fn(
            self: *const ISortColumnArray,
            type: ?*SORT_ORDER_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetCount(self: *const ISortColumnArray, columnCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCount(self, columnCount);
    }
    pub fn GetAt(self: *const ISortColumnArray, index: u32, sortcolumn: ?*SORTCOLUMN) callconv(.Inline) HRESULT {
        return self.vtable.GetAt(self, index, sortcolumn);
    }
    pub fn GetSortType(self: *const ISortColumnArray, @"type": ?*SORT_ORDER_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.GetSortType(self, @"type");
    }
};

const IID_IPropertyKeyStore_Value = Guid.initString("75bd59aa-f23b-4963-aba4-0b355752a91b");
pub const IID_IPropertyKeyStore = &IID_IPropertyKeyStore_Value;
pub const IPropertyKeyStore = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetKeyCount: *const fn(
            self: *const IPropertyKeyStore,
            keyCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyAt: *const fn(
            self: *const IPropertyKeyStore,
            index: i32,
            pkey: ?*PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AppendKey: *const fn(
            self: *const IPropertyKeyStore,
            key: ?*const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteKey: *const fn(
            self: *const IPropertyKeyStore,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsKeyInStore: *const fn(
            self: *const IPropertyKeyStore,
            key: ?*const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveKey: *const fn(
            self: *const IPropertyKeyStore,
            key: ?*const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetKeyCount(self: *const IPropertyKeyStore, keyCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetKeyCount(self, keyCount);
    }
    pub fn GetKeyAt(self: *const IPropertyKeyStore, index: i32, pkey: ?*PROPERTYKEY) callconv(.Inline) HRESULT {
        return self.vtable.GetKeyAt(self, index, pkey);
    }
    pub fn AppendKey(self: *const IPropertyKeyStore, key: ?*const PROPERTYKEY) callconv(.Inline) HRESULT {
        return self.vtable.AppendKey(self, key);
    }
    pub fn DeleteKey(self: *const IPropertyKeyStore, index: i32) callconv(.Inline) HRESULT {
        return self.vtable.DeleteKey(self, index);
    }
    pub fn IsKeyInStore(self: *const IPropertyKeyStore, key: ?*const PROPERTYKEY) callconv(.Inline) HRESULT {
        return self.vtable.IsKeyInStore(self, key);
    }
    pub fn RemoveKey(self: *const IPropertyKeyStore, key: ?*const PROPERTYKEY) callconv(.Inline) HRESULT {
        return self.vtable.RemoveKey(self, key);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IQueryCodePage_Value = Guid.initString("c7b236ce-ee80-11d0-985f-006008059382");
pub const IID_IQueryCodePage = &IID_IQueryCodePage_Value;
pub const IQueryCodePage = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCodePage: *const fn(
            self: *const IQueryCodePage,
            puiCodePage: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCodePage: *const fn(
            self: *const IQueryCodePage,
            uiCodePage: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetCodePage(self: *const IQueryCodePage, puiCodePage: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCodePage(self, puiCodePage);
    }
    pub fn SetCodePage(self: *const IQueryCodePage, uiCodePage: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetCodePage(self, uiCodePage);
    }
};

pub const FOLDERVIEWOPTIONS = enum(i32) {
    DEFAULT = 0,
    VISTALAYOUT = 1,
    CUSTOMPOSITION = 2,
    CUSTOMORDERING = 4,
    SUPPORTHYPERLINKS = 8,
    NOANIMATIONS = 16,
    NOSCROLLTIPS = 32,
};
pub const FVO_DEFAULT = FOLDERVIEWOPTIONS.DEFAULT;
pub const FVO_VISTALAYOUT = FOLDERVIEWOPTIONS.VISTALAYOUT;
pub const FVO_CUSTOMPOSITION = FOLDERVIEWOPTIONS.CUSTOMPOSITION;
pub const FVO_CUSTOMORDERING = FOLDERVIEWOPTIONS.CUSTOMORDERING;
pub const FVO_SUPPORTHYPERLINKS = FOLDERVIEWOPTIONS.SUPPORTHYPERLINKS;
pub const FVO_NOANIMATIONS = FOLDERVIEWOPTIONS.NOANIMATIONS;
pub const FVO_NOSCROLLTIPS = FOLDERVIEWOPTIONS.NOSCROLLTIPS;

// TODO: this type is limited to platform 'windows6.1'
const IID_IFolderViewOptions_Value = Guid.initString("3cc974d2-b302-4d36-ad3e-06d93f695d3f");
pub const IID_IFolderViewOptions = &IID_IFolderViewOptions_Value;
pub const IFolderViewOptions = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetFolderViewOptions: *const fn(
            self: *const IFolderViewOptions,
            fvoMask: FOLDERVIEWOPTIONS,
            fvoFlags: FOLDERVIEWOPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderViewOptions: *const fn(
            self: *const IFolderViewOptions,
            pfvoFlags: ?*FOLDERVIEWOPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetFolderViewOptions(self: *const IFolderViewOptions, fvoMask: FOLDERVIEWOPTIONS, fvoFlags: FOLDERVIEWOPTIONS) callconv(.Inline) HRESULT {
        return self.vtable.SetFolderViewOptions(self, fvoMask, fvoFlags);
    }
    pub fn GetFolderViewOptions(self: *const IFolderViewOptions, pfvoFlags: ?*FOLDERVIEWOPTIONS) callconv(.Inline) HRESULT {
        return self.vtable.GetFolderViewOptions(self, pfvoFlags);
    }
};

pub const _SV3CVW3_FLAGS = enum(i32) {
    DEFAULT = 0,
    NONINTERACTIVE = 1,
    FORCEVIEWMODE = 2,
    FORCEFOLDERFLAGS = 4,
};
pub const SV3CVW3_DEFAULT = _SV3CVW3_FLAGS.DEFAULT;
pub const SV3CVW3_NONINTERACTIVE = _SV3CVW3_FLAGS.NONINTERACTIVE;
pub const SV3CVW3_FORCEVIEWMODE = _SV3CVW3_FLAGS.FORCEVIEWMODE;
pub const SV3CVW3_FORCEFOLDERFLAGS = _SV3CVW3_FLAGS.FORCEFOLDERFLAGS;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IShellView3_Value = Guid.initString("ec39fa88-f8af-41c5-8421-38bed28f4673");
pub const IID_IShellView3 = &IID_IShellView3_Value;
pub const IShellView3 = extern union {
    pub const VTable = extern struct {
        base: IShellView2.VTable,
        CreateViewWindow3: *const fn(
            self: *const IShellView3,
            psbOwner: ?*IShellBrowser,
            psvPrev: ?*IShellView,
            dwViewFlags: u32,
            dwMask: FOLDERFLAGS,
            dwFlags: FOLDERFLAGS,
            fvMode: FOLDERVIEWMODE,
            pvid: ?*const Guid,
            prcView: ?*const RECT,
            phwndView: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IShellView2: IShellView2,
    IShellView: IShellView,
    IOleWindow: IOleWindow,
    IUnknown: IUnknown,
    pub fn CreateViewWindow3(self: *const IShellView3, psbOwner: ?*IShellBrowser, psvPrev: ?*IShellView, dwViewFlags: u32, dwMask: FOLDERFLAGS, dwFlags: FOLDERFLAGS, fvMode: FOLDERVIEWMODE, pvid: ?*const Guid, prcView: ?*const RECT, phwndView: ?*?HWND) callconv(.Inline) HRESULT {
        return self.vtable.CreateViewWindow3(self, psbOwner, psvPrev, dwViewFlags, dwMask, dwFlags, fvMode, pvid, prcView, phwndView);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISearchBoxInfo_Value = Guid.initString("6af6e03f-d664-4ef4-9626-f7e0ed36755e");
pub const IID_ISearchBoxInfo = &IID_ISearchBoxInfo_Value;
pub const ISearchBoxInfo = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCondition: *const fn(
            self: *const ISearchBoxInfo,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetText: *const fn(
            self: *const ISearchBoxInfo,
            ppsz: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetCondition(self: *const ISearchBoxInfo, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetCondition(self, riid, ppv);
    }
    pub fn GetText(self: *const ISearchBoxInfo, ppsz: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetText(self, ppsz);
    }
};

pub const VPWATERMARKFLAGS = enum(i32) {
    DEFAULT = 0,
    ALPHABLEND = 1,
};
pub const VPWF_DEFAULT = VPWATERMARKFLAGS.DEFAULT;
pub const VPWF_ALPHABLEND = VPWATERMARKFLAGS.ALPHABLEND;

pub const VPCOLORFLAGS = enum(i32) {
    TEXT = 1,
    BACKGROUND = 2,
    SORTCOLUMN = 3,
    SUBTEXT = 4,
    TEXTBACKGROUND = 5,
};
pub const VPCF_TEXT = VPCOLORFLAGS.TEXT;
pub const VPCF_BACKGROUND = VPCOLORFLAGS.BACKGROUND;
pub const VPCF_SORTCOLUMN = VPCOLORFLAGS.SORTCOLUMN;
pub const VPCF_SUBTEXT = VPCOLORFLAGS.SUBTEXT;
pub const VPCF_TEXTBACKGROUND = VPCOLORFLAGS.TEXTBACKGROUND;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IVisualProperties_Value = Guid.initString("e693cf68-d967-4112-8763-99172aee5e5a");
pub const IID_IVisualProperties = &IID_IVisualProperties_Value;
pub const IVisualProperties = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetWatermark: *const fn(
            self: *const IVisualProperties,
            hbmp: ?HBITMAP,
            vpwf: VPWATERMARKFLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColor: *const fn(
            self: *const IVisualProperties,
            vpcf: VPCOLORFLAGS,
            cr: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColor: *const fn(
            self: *const IVisualProperties,
            vpcf: VPCOLORFLAGS,
            pcr: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetItemHeight: *const fn(
            self: *const IVisualProperties,
            cyItemInPixels: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemHeight: *const fn(
            self: *const IVisualProperties,
            cyItemInPixels: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFont: *const fn(
            self: *const IVisualProperties,
            plf: ?*const LOGFONTW,
            bRedraw: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFont: *const fn(
            self: *const IVisualProperties,
            plf: ?*LOGFONTW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTheme: *const fn(
            self: *const IVisualProperties,
            pszSubAppName: ?[*:0]const u16,
            pszSubIdList: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetWatermark(self: *const IVisualProperties, hbmp: ?HBITMAP, vpwf: VPWATERMARKFLAGS) callconv(.Inline) HRESULT {
        return self.vtable.SetWatermark(self, hbmp, vpwf);
    }
    pub fn SetColor(self: *const IVisualProperties, vpcf: VPCOLORFLAGS, cr: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetColor(self, vpcf, cr);
    }
    pub fn GetColor(self: *const IVisualProperties, vpcf: VPCOLORFLAGS, pcr: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetColor(self, vpcf, pcr);
    }
    pub fn SetItemHeight(self: *const IVisualProperties, cyItemInPixels: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetItemHeight(self, cyItemInPixels);
    }
    pub fn GetItemHeight(self: *const IVisualProperties, cyItemInPixels: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetItemHeight(self, cyItemInPixels);
    }
    pub fn SetFont(self: *const IVisualProperties, plf: ?*const LOGFONTW, bRedraw: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetFont(self, plf, bRedraw);
    }
    pub fn GetFont(self: *const IVisualProperties, plf: ?*LOGFONTW) callconv(.Inline) HRESULT {
        return self.vtable.GetFont(self, plf);
    }
    pub fn SetTheme(self: *const IVisualProperties, pszSubAppName: ?[*:0]const u16, pszSubIdList: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetTheme(self, pszSubAppName, pszSubIdList);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICommDlgBrowser3_Value = Guid.initString("c8ad25a1-3294-41ee-8165-71174bd01c57");
pub const IID_ICommDlgBrowser3 = &IID_ICommDlgBrowser3_Value;
pub const ICommDlgBrowser3 = extern union {
    pub const VTable = extern struct {
        base: ICommDlgBrowser2.VTable,
        OnColumnClicked: *const fn(
            self: *const ICommDlgBrowser3,
            ppshv: ?*IShellView,
            iColumn: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentFilter: *const fn(
            self: *const ICommDlgBrowser3,
            pszFileSpec: [*:0]u16,
            cchFileSpec: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnPreViewCreated: *const fn(
            self: *const ICommDlgBrowser3,
            ppshv: ?*IShellView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICommDlgBrowser2: ICommDlgBrowser2,
    ICommDlgBrowser: ICommDlgBrowser,
    IUnknown: IUnknown,
    pub fn OnColumnClicked(self: *const ICommDlgBrowser3, ppshv: ?*IShellView, iColumn: i32) callconv(.Inline) HRESULT {
        return self.vtable.OnColumnClicked(self, ppshv, iColumn);
    }
    pub fn GetCurrentFilter(self: *const ICommDlgBrowser3, pszFileSpec: [*:0]u16, cchFileSpec: i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCurrentFilter(self, pszFileSpec, cchFileSpec);
    }
    pub fn OnPreViewCreated(self: *const ICommDlgBrowser3, ppshv: ?*IShellView) callconv(.Inline) HRESULT {
        return self.vtable.OnPreViewCreated(self, ppshv);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IUserAccountChangeCallback_Value = Guid.initString("a561e69a-b4b8-4113-91a5-64c6bcca3430");
pub const IID_IUserAccountChangeCallback = &IID_IUserAccountChangeCallback_Value;
pub const IUserAccountChangeCallback = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnPictureChange: *const fn(
            self: *const IUserAccountChangeCallback,
            pszUserName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnPictureChange(self: *const IUserAccountChangeCallback, pszUserName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.OnPictureChange(self, pszUserName);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IStreamAsync_Value = Guid.initString("fe0b6665-e0ca-49b9-a178-2b5cb48d92a5");
pub const IID_IStreamAsync = &IID_IStreamAsync_Value;
pub const IStreamAsync = extern union {
    pub const VTable = extern struct {
        base: IStream.VTable,
        ReadAsync: *const fn(
            self: *const IStreamAsync,
            // TODO: what to do with BytesParamIndex 1?
            pv: ?*anyopaque,
            cb: u32,
            pcbRead: ?*u32,
            lpOverlapped: ?*OVERLAPPED,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteAsync: *const fn(
            self: *const IStreamAsync,
            // TODO: what to do with BytesParamIndex 1?
            lpBuffer: ?*const anyopaque,
            cb: u32,
            pcbWritten: ?*u32,
            lpOverlapped: ?*OVERLAPPED,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OverlappedResult: *const fn(
            self: *const IStreamAsync,
            lpOverlapped: ?*OVERLAPPED,
            lpNumberOfBytesTransferred: ?*u32,
            bWait: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelIo: *const fn(
            self: *const IStreamAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IStream: IStream,
    ISequentialStream: ISequentialStream,
    IUnknown: IUnknown,
    pub fn ReadAsync(self: *const IStreamAsync, pv: ?*anyopaque, cb: u32, pcbRead: ?*u32, lpOverlapped: ?*OVERLAPPED) callconv(.Inline) HRESULT {
        return self.vtable.ReadAsync(self, pv, cb, pcbRead, lpOverlapped);
    }
    pub fn WriteAsync(self: *const IStreamAsync, lpBuffer: ?*const anyopaque, cb: u32, pcbWritten: ?*u32, lpOverlapped: ?*OVERLAPPED) callconv(.Inline) HRESULT {
        return self.vtable.WriteAsync(self, lpBuffer, cb, pcbWritten, lpOverlapped);
    }
    pub fn OverlappedResult(self: *const IStreamAsync, lpOverlapped: ?*OVERLAPPED, lpNumberOfBytesTransferred: ?*u32, bWait: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.OverlappedResult(self, lpOverlapped, lpNumberOfBytesTransferred, bWait);
    }
    pub fn CancelIo(self: *const IStreamAsync) callconv(.Inline) HRESULT {
        return self.vtable.CancelIo(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IStreamUnbufferedInfo_Value = Guid.initString("8a68fdda-1fdc-4c20-8ceb-416643b5a625");
pub const IID_IStreamUnbufferedInfo = &IID_IStreamUnbufferedInfo_Value;
pub const IStreamUnbufferedInfo = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSectorSize: *const fn(
            self: *const IStreamUnbufferedInfo,
            pcbSectorSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetSectorSize(self: *const IStreamUnbufferedInfo, pcbSectorSize: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetSectorSize(self, pcbSectorSize);
    }
};

pub const DSH_FLAGS = enum(i32) {
    T = 1,
};
pub const DSH_ALLOWDROPDESCRIPTIONTEXT = DSH_FLAGS.T;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDragSourceHelper2_Value = Guid.initString("83e07d0d-0c5f-4163-bf1a-60b274051e40");
pub const IID_IDragSourceHelper2 = &IID_IDragSourceHelper2_Value;
pub const IDragSourceHelper2 = extern union {
    pub const VTable = extern struct {
        base: IDragSourceHelper.VTable,
        SetFlags: *const fn(
            self: *const IDragSourceHelper2,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDragSourceHelper: IDragSourceHelper,
    IUnknown: IUnknown,
    pub fn SetFlags(self: *const IDragSourceHelper2, dwFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetFlags(self, dwFlags);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IHWEventHandler_Value = Guid.initString("c1fb73d0-ec3a-4ba2-b512-8cdb9187b6d1");
pub const IID_IHWEventHandler = &IID_IHWEventHandler_Value;
pub const IHWEventHandler = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn(
            self: *const IHWEventHandler,
            pszParams: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleEvent: *const fn(
            self: *const IHWEventHandler,
            pszDeviceID: ?[*:0]const u16,
            pszAltDeviceID: ?[*:0]const u16,
            pszEventType: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleEventWithContent: *const fn(
            self: *const IHWEventHandler,
            pszDeviceID: ?[*:0]const u16,
            pszAltDeviceID: ?[*:0]const u16,
            pszEventType: ?[*:0]const u16,
            pszContentTypeHandler: ?[*:0]const u16,
            pdataobject: ?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IHWEventHandler, pszParams: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, pszParams);
    }
    pub fn HandleEvent(self: *const IHWEventHandler, pszDeviceID: ?[*:0]const u16, pszAltDeviceID: ?[*:0]const u16, pszEventType: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.HandleEvent(self, pszDeviceID, pszAltDeviceID, pszEventType);
    }
    pub fn HandleEventWithContent(self: *const IHWEventHandler, pszDeviceID: ?[*:0]const u16, pszAltDeviceID: ?[*:0]const u16, pszEventType: ?[*:0]const u16, pszContentTypeHandler: ?[*:0]const u16, pdataobject: ?*IDataObject) callconv(.Inline) HRESULT {
        return self.vtable.HandleEventWithContent(self, pszDeviceID, pszAltDeviceID, pszEventType, pszContentTypeHandler, pdataobject);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IHWEventHandler2_Value = Guid.initString("cfcc809f-295d-42e8-9ffc-424b33c487e6");
pub const IID_IHWEventHandler2 = &IID_IHWEventHandler2_Value;
pub const IHWEventHandler2 = extern union {
    pub const VTable = extern struct {
        base: IHWEventHandler.VTable,
        HandleEventWithHWND: *const fn(
            self: *const IHWEventHandler2,
            pszDeviceID: ?[*:0]const u16,
            pszAltDeviceID: ?[*:0]const u16,
            pszEventType: ?[*:0]const u16,
            hwndOwner: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IHWEventHandler: IHWEventHandler,
    IUnknown: IUnknown,
    pub fn HandleEventWithHWND(self: *const IHWEventHandler2, pszDeviceID: ?[*:0]const u16, pszAltDeviceID: ?[*:0]const u16, pszEventType: ?[*:0]const u16, hwndOwner: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.HandleEventWithHWND(self, pszDeviceID, pszAltDeviceID, pszEventType, hwndOwner);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IQueryCancelAutoPlay_Value = Guid.initString("ddefe873-6997-4e68-be26-39b633adbe12");
pub const IID_IQueryCancelAutoPlay = &IID_IQueryCancelAutoPlay_Value;
pub const IQueryCancelAutoPlay = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AllowAutoPlay: *const fn(
            self: *const IQueryCancelAutoPlay,
            pszPath: ?[*:0]const u16,
            dwContentType: u32,
            pszLabel: ?[*:0]const u16,
            dwSerialNumber: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn AllowAutoPlay(self: *const IQueryCancelAutoPlay, pszPath: ?[*:0]const u16, dwContentType: u32, pszLabel: ?[*:0]const u16, dwSerialNumber: u32) callconv(.Inline) HRESULT {
        return self.vtable.AllowAutoPlay(self, pszPath, dwContentType, pszLabel, dwSerialNumber);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDynamicHWHandler_Value = Guid.initString("dc2601d7-059e-42fc-a09d-2afd21b6d5f7");
pub const IID_IDynamicHWHandler = &IID_IDynamicHWHandler_Value;
pub const IDynamicHWHandler = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDynamicInfo: *const fn(
            self: *const IDynamicHWHandler,
            pszDeviceID: ?[*:0]const u16,
            dwContentType: u32,
            ppszAction: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetDynamicInfo(self: *const IDynamicHWHandler, pszDeviceID: ?[*:0]const u16, dwContentType: u32, ppszAction: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetDynamicInfo(self, pszDeviceID, dwContentType, ppszAction);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IUserNotificationCallback_Value = Guid.initString("19108294-0441-4aff-8013-fa0a730b0bea");
pub const IID_IUserNotificationCallback = &IID_IUserNotificationCallback_Value;
pub const IUserNotificationCallback = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnBalloonUserClick: *const fn(
            self: *const IUserNotificationCallback,
            pt: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnLeftClick: *const fn(
            self: *const IUserNotificationCallback,
            pt: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnContextMenu: *const fn(
            self: *const IUserNotificationCallback,
            pt: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnBalloonUserClick(self: *const IUserNotificationCallback, pt: ?*POINT) callconv(.Inline) HRESULT {
        return self.vtable.OnBalloonUserClick(self, pt);
    }
    pub fn OnLeftClick(self: *const IUserNotificationCallback, pt: ?*POINT) callconv(.Inline) HRESULT {
        return self.vtable.OnLeftClick(self, pt);
    }
    pub fn OnContextMenu(self: *const IUserNotificationCallback, pt: ?*POINT) callconv(.Inline) HRESULT {
        return self.vtable.OnContextMenu(self, pt);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IUserNotification2_Value = Guid.initString("215913cc-57eb-4fab-ab5a-e5fa7bea2a6c");
pub const IID_IUserNotification2 = &IID_IUserNotification2_Value;
pub const IUserNotification2 = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetBalloonInfo: *const fn(
            self: *const IUserNotification2,
            pszTitle: ?[*:0]const u16,
            pszText: ?[*:0]const u16,
            dwInfoFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBalloonRetry: *const fn(
            self: *const IUserNotification2,
            dwShowTime: u32,
            dwInterval: u32,
            cRetryCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIconInfo: *const fn(
            self: *const IUserNotification2,
            hIcon: ?HICON,
            pszToolTip: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Show: *const fn(
            self: *const IUserNotification2,
            pqc: ?*IQueryContinue,
            dwContinuePollInterval: u32,
            pSink: ?*IUserNotificationCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PlaySound: *const fn(
            self: *const IUserNotification2,
            pszSoundName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetBalloonInfo(self: *const IUserNotification2, pszTitle: ?[*:0]const u16, pszText: ?[*:0]const u16, dwInfoFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetBalloonInfo(self, pszTitle, pszText, dwInfoFlags);
    }
    pub fn SetBalloonRetry(self: *const IUserNotification2, dwShowTime: u32, dwInterval: u32, cRetryCount: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetBalloonRetry(self, dwShowTime, dwInterval, cRetryCount);
    }
    pub fn SetIconInfo(self: *const IUserNotification2, hIcon: ?HICON, pszToolTip: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetIconInfo(self, hIcon, pszToolTip);
    }
    pub fn Show(self: *const IUserNotification2, pqc: ?*IQueryContinue, dwContinuePollInterval: u32, pSink: ?*IUserNotificationCallback) callconv(.Inline) HRESULT {
        return self.vtable.Show(self, pqc, dwContinuePollInterval, pSink);
    }
    pub fn PlaySound(self: *const IUserNotification2, pszSoundName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.PlaySound(self, pszSoundName);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDeskBand2_Value = Guid.initString("79d16de4-abee-4021-8d9d-9169b261d657");
pub const IID_IDeskBand2 = &IID_IDeskBand2_Value;
pub const IDeskBand2 = extern union {
    pub const VTable = extern struct {
        base: IDeskBand.VTable,
        CanRenderComposited: *const fn(
            self: *const IDeskBand2,
            pfCanRenderComposited: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCompositionState: *const fn(
            self: *const IDeskBand2,
            fCompositionEnabled: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCompositionState: *const fn(
            self: *const IDeskBand2,
            pfCompositionEnabled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDeskBand: IDeskBand,
    IDockingWindow: IDockingWindow,
    IOleWindow: IOleWindow,
    IUnknown: IUnknown,
    pub fn CanRenderComposited(self: *const IDeskBand2, pfCanRenderComposited: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.CanRenderComposited(self, pfCanRenderComposited);
    }
    pub fn SetCompositionState(self: *const IDeskBand2, fCompositionEnabled: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetCompositionState(self, fCompositionEnabled);
    }
    pub fn GetCompositionState(self: *const IDeskBand2, pfCompositionEnabled: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.GetCompositionState(self, pfCompositionEnabled);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IStartMenuPinnedList_Value = Guid.initString("4cd19ada-25a5-4a32-b3b7-347bee5be36b");
pub const IID_IStartMenuPinnedList = &IID_IStartMenuPinnedList_Value;
pub const IStartMenuPinnedList = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RemoveFromList: *const fn(
            self: *const IStartMenuPinnedList,
            pitem: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn RemoveFromList(self: *const IStartMenuPinnedList, pitem: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.RemoveFromList(self, pitem);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ICDBurn_Value = Guid.initString("3d73a659-e5d0-4d42-afc0-5121ba425c8d");
pub const IID_ICDBurn = &IID_ICDBurn_Value;
pub const ICDBurn = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetRecorderDriveLetter: *const fn(
            self: *const ICDBurn,
            pszDrive: [*:0]u16,
            cch: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Burn: *const fn(
            self: *const ICDBurn,
            hwnd: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasRecordableDrive: *const fn(
            self: *const ICDBurn,
            pfHasRecorder: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetRecorderDriveLetter(self: *const ICDBurn, pszDrive: [*:0]u16, cch: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetRecorderDriveLetter(self, pszDrive, cch);
    }
    pub fn Burn(self: *const ICDBurn, hwnd: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.Burn(self, hwnd);
    }
    pub fn HasRecordableDrive(self: *const ICDBurn, pfHasRecorder: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.HasRecordableDrive(self, pfHasRecorder);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWizardSite_Value = Guid.initString("88960f5b-422f-4e7b-8013-73415381c3c3");
pub const IID_IWizardSite = &IID_IWizardSite_Value;
pub const IWizardSite = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPreviousPage: *const fn(
            self: *const IWizardSite,
            phpage: ?*?HPROPSHEETPAGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextPage: *const fn(
            self: *const IWizardSite,
            phpage: ?*?HPROPSHEETPAGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCancelledPage: *const fn(
            self: *const IWizardSite,
            phpage: ?*?HPROPSHEETPAGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetPreviousPage(self: *const IWizardSite, phpage: ?*?HPROPSHEETPAGE) callconv(.Inline) HRESULT {
        return self.vtable.GetPreviousPage(self, phpage);
    }
    pub fn GetNextPage(self: *const IWizardSite, phpage: ?*?HPROPSHEETPAGE) callconv(.Inline) HRESULT {
        return self.vtable.GetNextPage(self, phpage);
    }
    pub fn GetCancelledPage(self: *const IWizardSite, phpage: ?*?HPROPSHEETPAGE) callconv(.Inline) HRESULT {
        return self.vtable.GetCancelledPage(self, phpage);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWizardExtension_Value = Guid.initString("c02ea696-86cc-491e-9b23-74394a0444a8");
pub const IID_IWizardExtension = &IID_IWizardExtension_Value;
pub const IWizardExtension = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddPages: *const fn(
            self: *const IWizardExtension,
            aPages: [*]?HPROPSHEETPAGE,
            cPages: u32,
            pnPagesAdded: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFirstPage: *const fn(
            self: *const IWizardExtension,
            phpage: ?*?HPROPSHEETPAGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastPage: *const fn(
            self: *const IWizardExtension,
            phpage: ?*?HPROPSHEETPAGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn AddPages(self: *const IWizardExtension, aPages: [*]?HPROPSHEETPAGE, cPages: u32, pnPagesAdded: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.AddPages(self, aPages, cPages, pnPagesAdded);
    }
    pub fn GetFirstPage(self: *const IWizardExtension, phpage: ?*?HPROPSHEETPAGE) callconv(.Inline) HRESULT {
        return self.vtable.GetFirstPage(self, phpage);
    }
    pub fn GetLastPage(self: *const IWizardExtension, phpage: ?*?HPROPSHEETPAGE) callconv(.Inline) HRESULT {
        return self.vtable.GetLastPage(self, phpage);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWebWizardExtension_Value = Guid.initString("0e6b3f66-98d1-48c0-a222-fbde74e2fbc5");
pub const IID_IWebWizardExtension = &IID_IWebWizardExtension_Value;
pub const IWebWizardExtension = extern union {
    pub const VTable = extern struct {
        base: IWizardExtension.VTable,
        SetInitialURL: *const fn(
            self: *const IWebWizardExtension,
            pszURL: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetErrorURL: *const fn(
            self: *const IWebWizardExtension,
            pszErrorURL: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IWizardExtension: IWizardExtension,
    IUnknown: IUnknown,
    pub fn SetInitialURL(self: *const IWebWizardExtension, pszURL: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetInitialURL(self, pszURL);
    }
    pub fn SetErrorURL(self: *const IWebWizardExtension, pszErrorURL: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetErrorURL(self, pszErrorURL);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IPublishingWizard_Value = Guid.initString("aa9198bb-ccec-472d-beed-19a4f6733f7a");
pub const IID_IPublishingWizard = &IID_IPublishingWizard_Value;
pub const IPublishingWizard = extern union {
    pub const VTable = extern struct {
        base: IWizardExtension.VTable,
        Initialize: *const fn(
            self: *const IPublishingWizard,
            pdo: ?*IDataObject,
            dwOptions: u32,
            pszServiceScope: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransferManifest: *const fn(
            self: *const IPublishingWizard,
            phrFromTransfer: ?*HRESULT,
            pdocManifest: ?*?*IXMLDOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IWizardExtension: IWizardExtension,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IPublishingWizard, pdo: ?*IDataObject, dwOptions: u32, pszServiceScope: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, pdo, dwOptions, pszServiceScope);
    }
    pub fn GetTransferManifest(self: *const IPublishingWizard, phrFromTransfer: ?*HRESULT, pdocManifest: ?*?*IXMLDOMDocument) callconv(.Inline) HRESULT {
        return self.vtable.GetTransferManifest(self, phrFromTransfer, pdocManifest);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFolderViewHost_Value = Guid.initString("1ea58f02-d55a-411d-b09e-9e65ac21605b");
pub const IID_IFolderViewHost = &IID_IFolderViewHost_Value;
pub const IFolderViewHost = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn(
            self: *const IFolderViewHost,
            hwndParent: ?HWND,
            pdo: ?*IDataObject,
            prc: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IFolderViewHost, hwndParent: ?HWND, pdo: ?*IDataObject, prc: ?*RECT) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, hwndParent, pdo, prc);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAccessibleObject_Value = Guid.initString("95a391c5-9ed4-4c28-8401-ab9e06719e11");
pub const IID_IAccessibleObject = &IID_IAccessibleObject_Value;
pub const IAccessibleObject = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAccessibleName: *const fn(
            self: *const IAccessibleObject,
            pszName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetAccessibleName(self: *const IAccessibleObject, pszName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetAccessibleName(self, pszName);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IResultsFolder_Value = Guid.initString("96e5ae6d-6ae1-4b1c-900c-c6480eaa8828");
pub const IID_IResultsFolder = &IID_IResultsFolder_Value;
pub const IResultsFolder = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddItem: *const fn(
            self: *const IResultsFolder,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddIDList: *const fn(
            self: *const IResultsFolder,
            pidl: ?*ITEMIDLIST,
            ppidlAdded: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveItem: *const fn(
            self: *const IResultsFolder,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveIDList: *const fn(
            self: *const IResultsFolder,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAll: *const fn(
            self: *const IResultsFolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn AddItem(self: *const IResultsFolder, psi: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.AddItem(self, psi);
    }
    pub fn AddIDList(self: *const IResultsFolder, pidl: ?*ITEMIDLIST, ppidlAdded: ?*?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.AddIDList(self, pidl, ppidlAdded);
    }
    pub fn RemoveItem(self: *const IResultsFolder, psi: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.RemoveItem(self, psi);
    }
    pub fn RemoveIDList(self: *const IResultsFolder, pidl: ?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.RemoveIDList(self, pidl);
    }
    pub fn RemoveAll(self: *const IResultsFolder) callconv(.Inline) HRESULT {
        return self.vtable.RemoveAll(self);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IAutoCompleteDropDown_Value = Guid.initString("3cd141f4-3c6a-11d2-bcaa-00c04fd929db");
pub const IID_IAutoCompleteDropDown = &IID_IAutoCompleteDropDown_Value;
pub const IAutoCompleteDropDown = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDropDownStatus: *const fn(
            self: *const IAutoCompleteDropDown,
            pdwFlags: ?*u32,
            ppwszString: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetEnumerator: *const fn(
            self: *const IAutoCompleteDropDown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetDropDownStatus(self: *const IAutoCompleteDropDown, pdwFlags: ?*u32, ppwszString: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetDropDownStatus(self, pdwFlags, ppwszString);
    }
    pub fn ResetEnumerator(self: *const IAutoCompleteDropDown) callconv(.Inline) HRESULT {
        return self.vtable.ResetEnumerator(self);
    }
};

pub const CDBURNINGEXTENSIONRET = enum(i32) {
    DEFAULT = 0,
    DONTRUNOTHEREXTS = 1,
    STOPWIZARD = 2,
};
pub const CDBE_RET_DEFAULT = CDBURNINGEXTENSIONRET.DEFAULT;
pub const CDBE_RET_DONTRUNOTHEREXTS = CDBURNINGEXTENSIONRET.DONTRUNOTHEREXTS;
pub const CDBE_RET_STOPWIZARD = CDBURNINGEXTENSIONRET.STOPWIZARD;

pub const _CDBE_ACTIONS = enum(i32) {
    MUSIC = 1,
    DATA = 2,
    ALL = -1,
};
pub const CDBE_TYPE_MUSIC = _CDBE_ACTIONS.MUSIC;
pub const CDBE_TYPE_DATA = _CDBE_ACTIONS.DATA;
pub const CDBE_TYPE_ALL = _CDBE_ACTIONS.ALL;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ICDBurnExt_Value = Guid.initString("2271dcca-74fc-4414-8fb7-c56b05ace2d7");
pub const IID_ICDBurnExt = &IID_ICDBurnExt_Value;
pub const ICDBurnExt = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSupportedActionTypes: *const fn(
            self: *const ICDBurnExt,
            pdwActions: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetSupportedActionTypes(self: *const ICDBurnExt, pdwActions: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetSupportedActionTypes(self, pdwActions);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumReadyCallback_Value = Guid.initString("61e00d45-8fff-4e60-924e-6537b61612dd");
pub const IID_IEnumReadyCallback = &IID_IEnumReadyCallback_Value;
pub const IEnumReadyCallback = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnumReady: *const fn(
            self: *const IEnumReadyCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn EnumReady(self: *const IEnumReadyCallback) callconv(.Inline) HRESULT {
        return self.vtable.EnumReady(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumerableView_Value = Guid.initString("8c8bf236-1aec-495f-9894-91d57c3c686f");
pub const IID_IEnumerableView = &IID_IEnumerableView_Value;
pub const IEnumerableView = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetEnumReadyCallback: *const fn(
            self: *const IEnumerableView,
            percb: ?*IEnumReadyCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEnumIDListFromContents: *const fn(
            self: *const IEnumerableView,
            pidlFolder: ?*ITEMIDLIST,
            dwEnumFlags: u32,
            ppEnumIDList: ?*?*IEnumIDList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetEnumReadyCallback(self: *const IEnumerableView, percb: ?*IEnumReadyCallback) callconv(.Inline) HRESULT {
        return self.vtable.SetEnumReadyCallback(self, percb);
    }
    pub fn CreateEnumIDListFromContents(self: *const IEnumerableView, pidlFolder: ?*ITEMIDLIST, dwEnumFlags: u32, ppEnumIDList: ?*?*IEnumIDList) callconv(.Inline) HRESULT {
        return self.vtable.CreateEnumIDListFromContents(self, pidlFolder, dwEnumFlags, ppEnumIDList);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IInsertItem_Value = Guid.initString("d2b57227-3d23-4b95-93c0-492bd454c356");
pub const IID_IInsertItem = &IID_IInsertItem_Value;
pub const IInsertItem = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InsertItem: *const fn(
            self: *const IInsertItem,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn InsertItem(self: *const IInsertItem, pidl: ?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.InsertItem(self, pidl);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFolderBandPriv_Value = Guid.initString("47c01f95-e185-412c-b5c5-4f27df965aea");
pub const IID_IFolderBandPriv = &IID_IFolderBandPriv_Value;
pub const IFolderBandPriv = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetCascade: *const fn(
            self: *const IFolderBandPriv,
            fCascade: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAccelerators: *const fn(
            self: *const IFolderBandPriv,
            fAccelerators: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNoIcons: *const fn(
            self: *const IFolderBandPriv,
            fNoIcons: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNoText: *const fn(
            self: *const IFolderBandPriv,
            fNoText: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetCascade(self: *const IFolderBandPriv, fCascade: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetCascade(self, fCascade);
    }
    pub fn SetAccelerators(self: *const IFolderBandPriv, fAccelerators: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetAccelerators(self, fAccelerators);
    }
    pub fn SetNoIcons(self: *const IFolderBandPriv, fNoIcons: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetNoIcons(self, fNoIcons);
    }
    pub fn SetNoText(self: *const IFolderBandPriv, fNoText: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetNoText(self, fNoText);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IImageRecompress_Value = Guid.initString("505f1513-6b3e-4892-a272-59f8889a4d3e");
pub const IID_IImageRecompress = &IID_IImageRecompress_Value;
pub const IImageRecompress = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RecompressImage: *const fn(
            self: *const IImageRecompress,
            psi: ?*IShellItem,
            cx: i32,
            cy: i32,
            iQuality: i32,
            pstg: ?*IStorage,
            ppstrmOut: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn RecompressImage(self: *const IImageRecompress, psi: ?*IShellItem, cx: i32, cy: i32, iQuality: i32, pstg: ?*IStorage, ppstrmOut: ?*?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.RecompressImage(self, psi, cx, cy, iQuality, pstg, ppstrmOut);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFileDialogControlEvents_Value = Guid.initString("36116642-d713-4b97-9b83-7484a9d00433");
pub const IID_IFileDialogControlEvents = &IID_IFileDialogControlEvents_Value;
pub const IFileDialogControlEvents = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnItemSelected: *const fn(
            self: *const IFileDialogControlEvents,
            pfdc: ?*IFileDialogCustomize,
            dwIDCtl: u32,
            dwIDItem: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnButtonClicked: *const fn(
            self: *const IFileDialogControlEvents,
            pfdc: ?*IFileDialogCustomize,
            dwIDCtl: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCheckButtonToggled: *const fn(
            self: *const IFileDialogControlEvents,
            pfdc: ?*IFileDialogCustomize,
            dwIDCtl: u32,
            bChecked: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnControlActivating: *const fn(
            self: *const IFileDialogControlEvents,
            pfdc: ?*IFileDialogCustomize,
            dwIDCtl: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnItemSelected(self: *const IFileDialogControlEvents, pfdc: ?*IFileDialogCustomize, dwIDCtl: u32, dwIDItem: u32) callconv(.Inline) HRESULT {
        return self.vtable.OnItemSelected(self, pfdc, dwIDCtl, dwIDItem);
    }
    pub fn OnButtonClicked(self: *const IFileDialogControlEvents, pfdc: ?*IFileDialogCustomize, dwIDCtl: u32) callconv(.Inline) HRESULT {
        return self.vtable.OnButtonClicked(self, pfdc, dwIDCtl);
    }
    pub fn OnCheckButtonToggled(self: *const IFileDialogControlEvents, pfdc: ?*IFileDialogCustomize, dwIDCtl: u32, bChecked: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.OnCheckButtonToggled(self, pfdc, dwIDCtl, bChecked);
    }
    pub fn OnControlActivating(self: *const IFileDialogControlEvents, pfdc: ?*IFileDialogCustomize, dwIDCtl: u32) callconv(.Inline) HRESULT {
        return self.vtable.OnControlActivating(self, pfdc, dwIDCtl);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IFileDialog2_Value = Guid.initString("61744fc7-85b5-4791-a9b0-272276309b13");
pub const IID_IFileDialog2 = &IID_IFileDialog2_Value;
pub const IFileDialog2 = extern union {
    pub const VTable = extern struct {
        base: IFileDialog.VTable,
        SetCancelButtonLabel: *const fn(
            self: *const IFileDialog2,
            pszLabel: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNavigationRoot: *const fn(
            self: *const IFileDialog2,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IFileDialog: IFileDialog,
    IModalWindow: IModalWindow,
    IUnknown: IUnknown,
    pub fn SetCancelButtonLabel(self: *const IFileDialog2, pszLabel: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetCancelButtonLabel(self, pszLabel);
    }
    pub fn SetNavigationRoot(self: *const IFileDialog2, psi: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.SetNavigationRoot(self, psi);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IApplicationAssociationRegistrationUI_Value = Guid.initString("1f76a169-f994-40ac-8fc8-0959e8874710");
pub const IID_IApplicationAssociationRegistrationUI = &IID_IApplicationAssociationRegistrationUI_Value;
pub const IApplicationAssociationRegistrationUI = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        LaunchAdvancedAssociationUI: *const fn(
            self: *const IApplicationAssociationRegistrationUI,
            pszAppRegistryName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn LaunchAdvancedAssociationUI(self: *const IApplicationAssociationRegistrationUI, pszAppRegistryName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.LaunchAdvancedAssociationUI(self, pszAppRegistryName);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IShellRunDll_Value = Guid.initString("fce4bde0-4b68-4b80-8e9c-7426315a7388");
pub const IID_IShellRunDll = &IID_IShellRunDll_Value;
pub const IShellRunDll = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Run: *const fn(
            self: *const IShellRunDll,
            pszArgs: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Run(self: *const IShellRunDll, pszArgs: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.Run(self, pszArgs);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IPreviousVersionsInfo_Value = Guid.initString("76e54780-ad74-48e3-a695-3ba9a0aff10d");
pub const IID_IPreviousVersionsInfo = &IID_IPreviousVersionsInfo_Value;
pub const IPreviousVersionsInfo = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AreSnapshotsAvailable: *const fn(
            self: *const IPreviousVersionsInfo,
            pszPath: ?[*:0]const u16,
            fOkToBeSlow: BOOL,
            pfAvailable: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn AreSnapshotsAvailable(self: *const IPreviousVersionsInfo, pszPath: ?[*:0]const u16, fOkToBeSlow: BOOL, pfAvailable: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.AreSnapshotsAvailable(self, pszPath, fOkToBeSlow, pfAvailable);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IUseToBrowseItem_Value = Guid.initString("05edda5c-98a3-4717-8adb-c5e7da991eb1");
pub const IID_IUseToBrowseItem = &IID_IUseToBrowseItem_Value;
pub const IUseToBrowseItem = extern union {
    pub const VTable = extern struct {
        base: IRelatedItem.VTable,
    };
    vtable: *const VTable,
    IRelatedItem: IRelatedItem,
    IUnknown: IUnknown,
};

pub const NSTCSTYLE2 = enum(i32) {
    STCS2_DEFAULT = 0,
    STCS2_INTERRUPTNOTIFICATIONS = 1,
    STCS2_SHOWNULLSPACEMENU = 2,
    STCS2_DISPLAYPADDING = 4,
    STCS2_DISPLAYPINNEDONLY = 8,
    TSCS2_NOSINGLETONAUTOEXPAND = 16,
    TSCS2_NEVERINSERTNONENUMERATED = 32,
};
pub const NSTCS2_DEFAULT = NSTCSTYLE2.STCS2_DEFAULT;
pub const NSTCS2_INTERRUPTNOTIFICATIONS = NSTCSTYLE2.STCS2_INTERRUPTNOTIFICATIONS;
pub const NSTCS2_SHOWNULLSPACEMENU = NSTCSTYLE2.STCS2_SHOWNULLSPACEMENU;
pub const NSTCS2_DISPLAYPADDING = NSTCSTYLE2.STCS2_DISPLAYPADDING;
pub const NSTCS2_DISPLAYPINNEDONLY = NSTCSTYLE2.STCS2_DISPLAYPINNEDONLY;
pub const NTSCS2_NOSINGLETONAUTOEXPAND = NSTCSTYLE2.TSCS2_NOSINGLETONAUTOEXPAND;
pub const NTSCS2_NEVERINSERTNONENUMERATED = NSTCSTYLE2.TSCS2_NEVERINSERTNONENUMERATED;

// TODO: this type is limited to platform 'windows6.1'
const IID_INameSpaceTreeControl2_Value = Guid.initString("7cc7aed8-290e-49bc-8945-c1401cc9306c");
pub const IID_INameSpaceTreeControl2 = &IID_INameSpaceTreeControl2_Value;
pub const INameSpaceTreeControl2 = extern union {
    pub const VTable = extern struct {
        base: INameSpaceTreeControl.VTable,
        SetControlStyle: *const fn(
            self: *const INameSpaceTreeControl2,
            nstcsMask: u32,
            nstcsStyle: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetControlStyle: *const fn(
            self: *const INameSpaceTreeControl2,
            nstcsMask: u32,
            pnstcsStyle: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetControlStyle2: *const fn(
            self: *const INameSpaceTreeControl2,
            nstcsMask: NSTCSTYLE2,
            nstcsStyle: NSTCSTYLE2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetControlStyle2: *const fn(
            self: *const INameSpaceTreeControl2,
            nstcsMask: NSTCSTYLE2,
            pnstcsStyle: ?*NSTCSTYLE2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    INameSpaceTreeControl: INameSpaceTreeControl,
    IUnknown: IUnknown,
    pub fn SetControlStyle(self: *const INameSpaceTreeControl2, nstcsMask: u32, nstcsStyle: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetControlStyle(self, nstcsMask, nstcsStyle);
    }
    pub fn GetControlStyle(self: *const INameSpaceTreeControl2, nstcsMask: u32, pnstcsStyle: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetControlStyle(self, nstcsMask, pnstcsStyle);
    }
    pub fn SetControlStyle2(self: *const INameSpaceTreeControl2, nstcsMask: NSTCSTYLE2, nstcsStyle: NSTCSTYLE2) callconv(.Inline) HRESULT {
        return self.vtable.SetControlStyle2(self, nstcsMask, nstcsStyle);
    }
    pub fn GetControlStyle2(self: *const INameSpaceTreeControl2, nstcsMask: NSTCSTYLE2, pnstcsStyle: ?*NSTCSTYLE2) callconv(.Inline) HRESULT {
        return self.vtable.GetControlStyle2(self, nstcsMask, pnstcsStyle);
    }
};

pub const _NSTCEHITTEST = enum(i32) {
    NOWHERE = 1,
    ONITEMICON = 2,
    ONITEMLABEL = 4,
    ONITEMINDENT = 8,
    ONITEMBUTTON = 16,
    ONITEMRIGHT = 32,
    ONITEMSTATEICON = 64,
    ONITEM = 70,
    ONITEMTABBUTTON = 4096,
};
pub const NSTCEHT_NOWHERE = _NSTCEHITTEST.NOWHERE;
pub const NSTCEHT_ONITEMICON = _NSTCEHITTEST.ONITEMICON;
pub const NSTCEHT_ONITEMLABEL = _NSTCEHITTEST.ONITEMLABEL;
pub const NSTCEHT_ONITEMINDENT = _NSTCEHITTEST.ONITEMINDENT;
pub const NSTCEHT_ONITEMBUTTON = _NSTCEHITTEST.ONITEMBUTTON;
pub const NSTCEHT_ONITEMRIGHT = _NSTCEHITTEST.ONITEMRIGHT;
pub const NSTCEHT_ONITEMSTATEICON = _NSTCEHITTEST.ONITEMSTATEICON;
pub const NSTCEHT_ONITEM = _NSTCEHITTEST.ONITEM;
pub const NSTCEHT_ONITEMTABBUTTON = _NSTCEHITTEST.ONITEMTABBUTTON;

pub const _NSTCECLICKTYPE = enum(i32) {
    LBUTTON = 1,
    MBUTTON = 2,
    RBUTTON = 3,
    DBLCLICK = 4,
    pub const BUTTON = .RBUTTON;
};
pub const NSTCECT_LBUTTON = _NSTCECLICKTYPE.LBUTTON;
pub const NSTCECT_MBUTTON = _NSTCECLICKTYPE.MBUTTON;
pub const NSTCECT_RBUTTON = _NSTCECLICKTYPE.RBUTTON;
pub const NSTCECT_BUTTON = _NSTCECLICKTYPE.RBUTTON;
pub const NSTCECT_DBLCLICK = _NSTCECLICKTYPE.DBLCLICK;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INameSpaceTreeControlEvents_Value = Guid.initString("93d77985-b3d8-4484-8318-672cdda002ce");
pub const IID_INameSpaceTreeControlEvents = &IID_INameSpaceTreeControlEvents_Value;
pub const INameSpaceTreeControlEvents = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnItemClick: *const fn(
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
            nstceHitTest: u32,
            nstceClickType: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnPropertyItemCommit: *const fn(
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnItemStateChanging: *const fn(
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
            nstcisMask: u32,
            nstcisState: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnItemStateChanged: *const fn(
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
            nstcisMask: u32,
            nstcisState: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSelectionChanged: *const fn(
            self: *const INameSpaceTreeControlEvents,
            psiaSelection: ?*IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnKeyboardInput: *const fn(
            self: *const INameSpaceTreeControlEvents,
            uMsg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnBeforeExpand: *const fn(
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnAfterExpand: *const fn(
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnBeginLabelEdit: *const fn(
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnEndLabelEdit: *const fn(
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnGetToolTip: *const fn(
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
            pszTip: [*:0]u16,
            cchTip: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnBeforeItemDelete: *const fn(
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnItemAdded: *const fn(
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
            fIsRoot: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnItemDeleted: *const fn(
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
            fIsRoot: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnBeforeContextMenu: *const fn(
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnAfterContextMenu: *const fn(
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
            pcmIn: ?*IContextMenu,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnBeforeStateImageChange: *const fn(
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnGetDefaultIconIndex: *const fn(
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
            piDefaultIcon: ?*i32,
            piOpenIcon: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnItemClick(self: *const INameSpaceTreeControlEvents, psi: ?*IShellItem, nstceHitTest: u32, nstceClickType: u32) callconv(.Inline) HRESULT {
        return self.vtable.OnItemClick(self, psi, nstceHitTest, nstceClickType);
    }
    pub fn OnPropertyItemCommit(self: *const INameSpaceTreeControlEvents, psi: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.OnPropertyItemCommit(self, psi);
    }
    pub fn OnItemStateChanging(self: *const INameSpaceTreeControlEvents, psi: ?*IShellItem, nstcisMask: u32, nstcisState: u32) callconv(.Inline) HRESULT {
        return self.vtable.OnItemStateChanging(self, psi, nstcisMask, nstcisState);
    }
    pub fn OnItemStateChanged(self: *const INameSpaceTreeControlEvents, psi: ?*IShellItem, nstcisMask: u32, nstcisState: u32) callconv(.Inline) HRESULT {
        return self.vtable.OnItemStateChanged(self, psi, nstcisMask, nstcisState);
    }
    pub fn OnSelectionChanged(self: *const INameSpaceTreeControlEvents, psiaSelection: ?*IShellItemArray) callconv(.Inline) HRESULT {
        return self.vtable.OnSelectionChanged(self, psiaSelection);
    }
    pub fn OnKeyboardInput(self: *const INameSpaceTreeControlEvents, uMsg: u32, wParam: WPARAM, lParam: LPARAM) callconv(.Inline) HRESULT {
        return self.vtable.OnKeyboardInput(self, uMsg, wParam, lParam);
    }
    pub fn OnBeforeExpand(self: *const INameSpaceTreeControlEvents, psi: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.OnBeforeExpand(self, psi);
    }
    pub fn OnAfterExpand(self: *const INameSpaceTreeControlEvents, psi: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.OnAfterExpand(self, psi);
    }
    pub fn OnBeginLabelEdit(self: *const INameSpaceTreeControlEvents, psi: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.OnBeginLabelEdit(self, psi);
    }
    pub fn OnEndLabelEdit(self: *const INameSpaceTreeControlEvents, psi: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.OnEndLabelEdit(self, psi);
    }
    pub fn OnGetToolTip(self: *const INameSpaceTreeControlEvents, psi: ?*IShellItem, pszTip: [*:0]u16, cchTip: i32) callconv(.Inline) HRESULT {
        return self.vtable.OnGetToolTip(self, psi, pszTip, cchTip);
    }
    pub fn OnBeforeItemDelete(self: *const INameSpaceTreeControlEvents, psi: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.OnBeforeItemDelete(self, psi);
    }
    pub fn OnItemAdded(self: *const INameSpaceTreeControlEvents, psi: ?*IShellItem, fIsRoot: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.OnItemAdded(self, psi, fIsRoot);
    }
    pub fn OnItemDeleted(self: *const INameSpaceTreeControlEvents, psi: ?*IShellItem, fIsRoot: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.OnItemDeleted(self, psi, fIsRoot);
    }
    pub fn OnBeforeContextMenu(self: *const INameSpaceTreeControlEvents, psi: ?*IShellItem, riid: ?*const Guid, ppv: ?*?*anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.OnBeforeContextMenu(self, psi, riid, ppv);
    }
    pub fn OnAfterContextMenu(self: *const INameSpaceTreeControlEvents, psi: ?*IShellItem, pcmIn: ?*IContextMenu, riid: ?*const Guid, ppv: ?*?*anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.OnAfterContextMenu(self, psi, pcmIn, riid, ppv);
    }
    pub fn OnBeforeStateImageChange(self: *const INameSpaceTreeControlEvents, psi: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.OnBeforeStateImageChange(self, psi);
    }
    pub fn OnGetDefaultIconIndex(self: *const INameSpaceTreeControlEvents, psi: ?*IShellItem, piDefaultIcon: ?*i32, piOpenIcon: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.OnGetDefaultIconIndex(self, psi, piDefaultIcon, piOpenIcon);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INameSpaceTreeControlDropHandler_Value = Guid.initString("f9c665d6-c2f2-4c19-bf33-8322d7352f51");
pub const IID_INameSpaceTreeControlDropHandler = &IID_INameSpaceTreeControlDropHandler_Value;
pub const INameSpaceTreeControlDropHandler = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnDragEnter: *const fn(
            self: *const INameSpaceTreeControlDropHandler,
            psiOver: ?*IShellItem,
            psiaData: ?*IShellItemArray,
            fOutsideSource: BOOL,
            grfKeyState: u32,
            pdwEffect: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDragOver: *const fn(
            self: *const INameSpaceTreeControlDropHandler,
            psiOver: ?*IShellItem,
            psiaData: ?*IShellItemArray,
            grfKeyState: u32,
            pdwEffect: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDragPosition: *const fn(
            self: *const INameSpaceTreeControlDropHandler,
            psiOver: ?*IShellItem,
            psiaData: ?*IShellItemArray,
            iNewPosition: i32,
            iOldPosition: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDrop: *const fn(
            self: *const INameSpaceTreeControlDropHandler,
            psiOver: ?*IShellItem,
            psiaData: ?*IShellItemArray,
            iPosition: i32,
            grfKeyState: u32,
            pdwEffect: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDropPosition: *const fn(
            self: *const INameSpaceTreeControlDropHandler,
            psiOver: ?*IShellItem,
            psiaData: ?*IShellItemArray,
            iNewPosition: i32,
            iOldPosition: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDragLeave: *const fn(
            self: *const INameSpaceTreeControlDropHandler,
            psiOver: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnDragEnter(self: *const INameSpaceTreeControlDropHandler, psiOver: ?*IShellItem, psiaData: ?*IShellItemArray, fOutsideSource: BOOL, grfKeyState: u32, pdwEffect: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.OnDragEnter(self, psiOver, psiaData, fOutsideSource, grfKeyState, pdwEffect);
    }
    pub fn OnDragOver(self: *const INameSpaceTreeControlDropHandler, psiOver: ?*IShellItem, psiaData: ?*IShellItemArray, grfKeyState: u32, pdwEffect: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.OnDragOver(self, psiOver, psiaData, grfKeyState, pdwEffect);
    }
    pub fn OnDragPosition(self: *const INameSpaceTreeControlDropHandler, psiOver: ?*IShellItem, psiaData: ?*IShellItemArray, iNewPosition: i32, iOldPosition: i32) callconv(.Inline) HRESULT {
        return self.vtable.OnDragPosition(self, psiOver, psiaData, iNewPosition, iOldPosition);
    }
    pub fn OnDrop(self: *const INameSpaceTreeControlDropHandler, psiOver: ?*IShellItem, psiaData: ?*IShellItemArray, iPosition: i32, grfKeyState: u32, pdwEffect: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.OnDrop(self, psiOver, psiaData, iPosition, grfKeyState, pdwEffect);
    }
    pub fn OnDropPosition(self: *const INameSpaceTreeControlDropHandler, psiOver: ?*IShellItem, psiaData: ?*IShellItemArray, iNewPosition: i32, iOldPosition: i32) callconv(.Inline) HRESULT {
        return self.vtable.OnDropPosition(self, psiOver, psiaData, iNewPosition, iOldPosition);
    }
    pub fn OnDragLeave(self: *const INameSpaceTreeControlDropHandler, psiOver: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.OnDragLeave(self, psiOver);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INameSpaceTreeAccessible_Value = Guid.initString("71f312de-43ed-4190-8477-e9536b82350b");
pub const IID_INameSpaceTreeAccessible = &IID_INameSpaceTreeAccessible_Value;
pub const INameSpaceTreeAccessible = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnGetDefaultAccessibilityAction: *const fn(
            self: *const INameSpaceTreeAccessible,
            psi: ?*IShellItem,
            pbstrDefaultAction: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDoDefaultAccessibilityAction: *const fn(
            self: *const INameSpaceTreeAccessible,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnGetAccessibilityRole: *const fn(
            self: *const INameSpaceTreeAccessible,
            psi: ?*IShellItem,
            pvarRole: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnGetDefaultAccessibilityAction(self: *const INameSpaceTreeAccessible, psi: ?*IShellItem, pbstrDefaultAction: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.OnGetDefaultAccessibilityAction(self, psi, pbstrDefaultAction);
    }
    pub fn OnDoDefaultAccessibilityAction(self: *const INameSpaceTreeAccessible, psi: ?*IShellItem) callconv(.Inline) HRESULT {
        return self.vtable.OnDoDefaultAccessibilityAction(self, psi);
    }
    pub fn OnGetAccessibilityRole(self: *const INameSpaceTreeAccessible, psi: ?*IShellItem, pvarRole: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.OnGetAccessibilityRole(self, psi, pvarRole);
    }
};

pub const NSTCCUSTOMDRAW = extern struct {
    psi: ?*IShellItem,
    uItemState: u32,
    nstcis: u32,
    pszText: ?[*:0]const u16,
    iImage: i32,
    himl: ?HIMAGELIST,
    iLevel: i32,
    iIndent: i32,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INameSpaceTreeControlCustomDraw_Value = Guid.initString("2d3ba758-33ee-42d5-bb7b-5f3431d86c78");
pub const IID_INameSpaceTreeControlCustomDraw = &IID_INameSpaceTreeControlCustomDraw_Value;
pub const INameSpaceTreeControlCustomDraw = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PrePaint: *const fn(
            self: *const INameSpaceTreeControlCustomDraw,
            hdc: ?HDC,
            prc: ?*RECT,
            plres: ?*LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostPaint: *const fn(
            self: *const INameSpaceTreeControlCustomDraw,
            hdc: ?HDC,
            prc: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemPrePaint: *const fn(
            self: *const INameSpaceTreeControlCustomDraw,
            hdc: ?HDC,
            prc: ?*RECT,
            pnstccdItem: ?*NSTCCUSTOMDRAW,
            pclrText: ?*u32,
            pclrTextBk: ?*u32,
            plres: ?*LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemPostPaint: *const fn(
            self: *const INameSpaceTreeControlCustomDraw,
            hdc: ?HDC,
            prc: ?*RECT,
            pnstccdItem: ?*NSTCCUSTOMDRAW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn PrePaint(self: *const INameSpaceTreeControlCustomDraw, hdc: ?HDC, prc: ?*RECT, plres: ?*LRESULT) callconv(.Inline) HRESULT {
        return self.vtable.PrePaint(self, hdc, prc, plres);
    }
    pub fn PostPaint(self: *const INameSpaceTreeControlCustomDraw, hdc: ?HDC, prc: ?*RECT) callconv(.Inline) HRESULT {
        return self.vtable.PostPaint(self, hdc, prc);
    }
    pub fn ItemPrePaint(self: *const INameSpaceTreeControlCustomDraw, hdc: ?HDC, prc: ?*RECT, pnstccdItem: ?*NSTCCUSTOMDRAW, pclrText: ?*u32, pclrTextBk: ?*u32, plres: ?*LRESULT) callconv(.Inline) HRESULT {
        return self.vtable.ItemPrePaint(self, hdc, prc, pnstccdItem, pclrText, pclrTextBk, plres);
    }
    pub fn ItemPostPaint(self: *const INameSpaceTreeControlCustomDraw, hdc: ?HDC, prc: ?*RECT, pnstccdItem: ?*NSTCCUSTOMDRAW) callconv(.Inline) HRESULT {
        return self.vtable.ItemPostPaint(self, hdc, prc, pnstccdItem);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITrayDeskBand_Value = Guid.initString("6d67e846-5b9c-4db8-9cbc-dde12f4254f1");
pub const IID_ITrayDeskBand = &IID_ITrayDeskBand_Value;
pub const ITrayDeskBand = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ShowDeskBand: *const fn(
            self: *const ITrayDeskBand,
            clsid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HideDeskBand: *const fn(
            self: *const ITrayDeskBand,
            clsid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsDeskBandShown: *const fn(
            self: *const ITrayDeskBand,
            clsid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeskBandRegistrationChanged: *const fn(
            self: *const ITrayDeskBand,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn ShowDeskBand(self: *const ITrayDeskBand, clsid: ?*const Guid) callconv(.Inline) HRESULT {
        return self.vtable.ShowDeskBand(self, clsid);
    }
    pub fn HideDeskBand(self: *const ITrayDeskBand, clsid: ?*const Guid) callconv(.Inline) HRESULT {
        return self.vtable.HideDeskBand(self, clsid);
    }
    pub fn IsDeskBandShown(self: *const ITrayDeskBand, clsid: ?*const Guid) callconv(.Inline) HRESULT {
        return self.vtable.IsDeskBandShown(self, clsid);
    }
    pub fn DeskBandRegistrationChanged(self: *const ITrayDeskBand) callconv(.Inline) HRESULT {
        return self.vtable.DeskBandRegistrationChanged(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IBandHost_Value = Guid.initString("b9075c7c-d48e-403f-ab99-d6c77a1084ac");
pub const IID_IBandHost = &IID_IBandHost_Value;
pub const IBandHost = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateBand: *const fn(
            self: *const IBandHost,
            rclsidBand: ?*const Guid,
            fAvailable: BOOL,
            fVisible: BOOL,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBandAvailability: *const fn(
            self: *const IBandHost,
            rclsidBand: ?*const Guid,
            fAvailable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DestroyBand: *const fn(
            self: *const IBandHost,
            rclsidBand: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateBand(self: *const IBandHost, rclsidBand: ?*const Guid, fAvailable: BOOL, fVisible: BOOL, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.CreateBand(self, rclsidBand, fAvailable, fVisible, riid, ppv);
    }
    pub fn SetBandAvailability(self: *const IBandHost, rclsidBand: ?*const Guid, fAvailable: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetBandAvailability(self, rclsidBand, fAvailable);
    }
    pub fn DestroyBand(self: *const IBandHost, rclsidBand: ?*const Guid) callconv(.Inline) HRESULT {
        return self.vtable.DestroyBand(self, rclsidBand);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IComputerInfoChangeNotify_Value = Guid.initString("0df60d92-6818-46d6-b358-d66170dde466");
pub const IID_IComputerInfoChangeNotify = &IID_IComputerInfoChangeNotify_Value;
pub const IComputerInfoChangeNotify = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ComputerInfoChanged: *const fn(
            self: *const IComputerInfoChangeNotify,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn ComputerInfoChanged(self: *const IComputerInfoChangeNotify) callconv(.Inline) HRESULT {
        return self.vtable.ComputerInfoChanged(self);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDesktopGadget_Value = Guid.initString("c1646bc4-f298-4f91-a204-eb2dd1709d1a");
pub const IID_IDesktopGadget = &IID_IDesktopGadget_Value;
pub const IDesktopGadget = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RunGadget: *const fn(
            self: *const IDesktopGadget,
            gadgetPath: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn RunGadget(self: *const IDesktopGadget, gadgetPath: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.RunGadget(self, gadgetPath);
    }
};

pub const UNDOCK_REASON = enum(i32) {
    RESOLUTION_CHANGE = 0,
    MONITOR_DISCONNECT = 1,
};
pub const UR_RESOLUTION_CHANGE = UNDOCK_REASON.RESOLUTION_CHANGE;
pub const UR_MONITOR_DISCONNECT = UNDOCK_REASON.MONITOR_DISCONNECT;

const IID_IAccessibilityDockingServiceCallback_Value = Guid.initString("157733fd-a592-42e5-b594-248468c5a81b");
pub const IID_IAccessibilityDockingServiceCallback = &IID_IAccessibilityDockingServiceCallback_Value;
pub const IAccessibilityDockingServiceCallback = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Undocked: *const fn(
            self: *const IAccessibilityDockingServiceCallback,
            undockReason: UNDOCK_REASON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Undocked(self: *const IAccessibilityDockingServiceCallback, undockReason: UNDOCK_REASON) callconv(.Inline) HRESULT {
        return self.vtable.Undocked(self, undockReason);
    }
};

const IID_IAccessibilityDockingService_Value = Guid.initString("8849dc22-cedf-4c95-998d-051419dd3f76");
pub const IID_IAccessibilityDockingService = &IID_IAccessibilityDockingService_Value;
pub const IAccessibilityDockingService = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAvailableSize: *const fn(
            self: *const IAccessibilityDockingService,
            hMonitor: ?HMONITOR,
            pcxFixed: ?*u32,
            pcyMax: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DockWindow: *const fn(
            self: *const IAccessibilityDockingService,
            hwnd: ?HWND,
            hMonitor: ?HMONITOR,
            cyRequested: u32,
            pCallback: ?*IAccessibilityDockingServiceCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UndockWindow: *const fn(
            self: *const IAccessibilityDockingService,
            hwnd: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetAvailableSize(self: *const IAccessibilityDockingService, hMonitor: ?HMONITOR, pcxFixed: ?*u32, pcyMax: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetAvailableSize(self, hMonitor, pcxFixed, pcyMax);
    }
    pub fn DockWindow(self: *const IAccessibilityDockingService, hwnd: ?HWND, hMonitor: ?HMONITOR, cyRequested: u32, pCallback: ?*IAccessibilityDockingServiceCallback) callconv(.Inline) HRESULT {
        return self.vtable.DockWindow(self, hwnd, hMonitor, cyRequested, pCallback);
    }
    pub fn UndockWindow(self: *const IAccessibilityDockingService, hwnd: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.UndockWindow(self, hwnd);
    }
};

const IID_IStorageProviderBanners_Value = Guid.initString("5efb46d7-47c0-4b68-acda-ded47c90ec91");
pub const IID_IStorageProviderBanners = &IID_IStorageProviderBanners_Value;
pub const IStorageProviderBanners = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetBanner: *const fn(
            self: *const IStorageProviderBanners,
            providerIdentity: ?[*:0]const u16,
            subscriptionId: ?[*:0]const u16,
            contentId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearBanner: *const fn(
            self: *const IStorageProviderBanners,
            providerIdentity: ?[*:0]const u16,
            subscriptionId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearAllBanners: *const fn(
            self: *const IStorageProviderBanners,
            providerIdentity: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBanner: *const fn(
            self: *const IStorageProviderBanners,
            providerIdentity: ?[*:0]const u16,
            subscriptionId: ?[*:0]const u16,
            contentId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetBanner(self: *const IStorageProviderBanners, providerIdentity: ?[*:0]const u16, subscriptionId: ?[*:0]const u16, contentId: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetBanner(self, providerIdentity, subscriptionId, contentId);
    }
    pub fn ClearBanner(self: *const IStorageProviderBanners, providerIdentity: ?[*:0]const u16, subscriptionId: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.ClearBanner(self, providerIdentity, subscriptionId);
    }
    pub fn ClearAllBanners(self: *const IStorageProviderBanners, providerIdentity: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.ClearAllBanners(self, providerIdentity);
    }
    pub fn GetBanner(self: *const IStorageProviderBanners, providerIdentity: ?[*:0]const u16, subscriptionId: ?[*:0]const u16, contentId: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetBanner(self, providerIdentity, subscriptionId, contentId);
    }
};

const IID_IStorageProviderCopyHook_Value = Guid.initString("7bf992a9-af7a-4dba-b2e5-4d080b1ecbc6");
pub const IID_IStorageProviderCopyHook = &IID_IStorageProviderCopyHook_Value;
pub const IStorageProviderCopyHook = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CopyCallback: *const fn(
            self: *const IStorageProviderCopyHook,
            hwnd: ?HWND,
            operation: u32,
            flags: u32,
            srcFile: ?[*:0]const u16,
            srcAttribs: u32,
            destFile: ?[*:0]const u16,
            destAttribs: u32,
            result: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CopyCallback(self: *const IStorageProviderCopyHook, hwnd: ?HWND, operation: u32, flags: u32, srcFile: ?[*:0]const u16, srcAttribs: u32, destFile: ?[*:0]const u16, destAttribs: u32, result: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.CopyCallback(self, hwnd, operation, flags, srcFile, srcAttribs, destFile, destAttribs, result);
    }
};

const CLSID_WebBrowser_V1_Value = Guid.initString("eab22ac3-30c1-11cf-a7eb-0000c05bae0b");
pub const CLSID_WebBrowser_V1 = &CLSID_WebBrowser_V1_Value;

const CLSID_WebBrowser_Value = Guid.initString("8856f961-340a-11d0-a96b-00c04fd705a2");
pub const CLSID_WebBrowser = &CLSID_WebBrowser_Value;

const CLSID_InternetExplorer_Value = Guid.initString("0002df01-0000-0000-c000-000000000046");
pub const CLSID_InternetExplorer = &CLSID_InternetExplorer_Value;

const CLSID_InternetExplorerMedium_Value = Guid.initString("d5e8041d-920f-45e9-b8fb-b1deb82c6e5e");
pub const CLSID_InternetExplorerMedium = &CLSID_InternetExplorerMedium_Value;

const CLSID_ShellBrowserWindow_Value = Guid.initString("c08afd90-f2a1-11d1-8455-00a0c91f3880");
pub const CLSID_ShellBrowserWindow = &CLSID_ShellBrowserWindow_Value;

const CLSID_ShellWindows_Value = Guid.initString("9ba05972-f6a8-11cf-a442-00a0c90a8f39");
pub const CLSID_ShellWindows = &CLSID_ShellWindows_Value;

const CLSID_ShellUIHelper_Value = Guid.initString("64ab4bb7-111e-11d1-8f79-00c04fc2fbe1");
pub const CLSID_ShellUIHelper = &CLSID_ShellUIHelper_Value;

const CLSID_ShellNameSpace_Value = Guid.initString("55136805-b2de-11d1-b9f2-00a0c98bc547");
pub const CLSID_ShellNameSpace = &CLSID_ShellNameSpace_Value;

const CLSID_CScriptErrorList_Value = Guid.initString("efd01300-160f-11d2-bb2e-00805ff7efca");
pub const CLSID_CScriptErrorList = &CLSID_CScriptErrorList_Value;

pub const CommandStateChangeConstants = enum(i32) {
    UPDATECOMMANDS = -1,
    NAVIGATEFORWARD = 1,
    NAVIGATEBACK = 2,
};
pub const CSC_UPDATECOMMANDS = CommandStateChangeConstants.UPDATECOMMANDS;
pub const CSC_NAVIGATEFORWARD = CommandStateChangeConstants.NAVIGATEFORWARD;
pub const CSC_NAVIGATEBACK = CommandStateChangeConstants.NAVIGATEBACK;

pub const SecureLockIconConstants = enum(i32) {
    Unsecure = 0,
    Mixed = 1,
    SecureUnknownBits = 2,
    Secure40Bit = 3,
    Secure56Bit = 4,
    SecureFortezza = 5,
    Secure128Bit = 6,
};
pub const secureLockIconUnsecure = SecureLockIconConstants.Unsecure;
pub const secureLockIconMixed = SecureLockIconConstants.Mixed;
pub const secureLockIconSecureUnknownBits = SecureLockIconConstants.SecureUnknownBits;
pub const secureLockIconSecure40Bit = SecureLockIconConstants.Secure40Bit;
pub const secureLockIconSecure56Bit = SecureLockIconConstants.Secure56Bit;
pub const secureLockIconSecureFortezza = SecureLockIconConstants.SecureFortezza;
pub const secureLockIconSecure128Bit = SecureLockIconConstants.Secure128Bit;

pub const NewProcessCauseConstants = enum(i32) {
    t = 1,
};
pub const ProtectedModeRedirect = NewProcessCauseConstants.t;

pub const ShellWindowTypeConstants = enum(i32) {
    EXPLORER = 0,
    BROWSER = 1,
    @"3RDPARTY" = 2,
    CALLBACK = 4,
    DESKTOP = 8,
};
pub const SWC_EXPLORER = ShellWindowTypeConstants.EXPLORER;
pub const SWC_BROWSER = ShellWindowTypeConstants.BROWSER;
pub const SWC_3RDPARTY = ShellWindowTypeConstants.@"3RDPARTY";
pub const SWC_CALLBACK = ShellWindowTypeConstants.CALLBACK;
pub const SWC_DESKTOP = ShellWindowTypeConstants.DESKTOP;

pub const ShellWindowFindWindowOptions = enum(i32) {
    NEEDDISPATCH = 1,
    INCLUDEPENDING = 2,
    COOKIEPASSED = 4,
};
pub const SWFO_NEEDDISPATCH = ShellWindowFindWindowOptions.NEEDDISPATCH;
pub const SWFO_INCLUDEPENDING = ShellWindowFindWindowOptions.INCLUDEPENDING;
pub const SWFO_COOKIEPASSED = ShellWindowFindWindowOptions.COOKIEPASSED;

pub const BrowserNavConstants = enum(i32) {
    OpenInNewWindow = 1,
    NoHistory = 2,
    NoReadFromCache = 4,
    NoWriteToCache = 8,
    AllowAutosearch = 16,
    BrowserBar = 32,
    Hyperlink = 64,
    EnforceRestricted = 128,
    NewWindowsManaged = 256,
    UntrustedForDownload = 512,
    TrustedForActiveX = 1024,
    OpenInNewTab = 2048,
    OpenInBackgroundTab = 4096,
    KeepWordWheelText = 8192,
    VirtualTab = 16384,
    BlockRedirectsXDomain = 32768,
    OpenNewForegroundTab = 65536,
    TravelLogScreenshot = 131072,
    DeferUnload = 262144,
    Speculative = 524288,
    SuggestNewWindow = 1048576,
    SuggestNewTab = 2097152,
    Reserved1 = 4194304,
    HomepageNavigate = 8388608,
    Refresh = 16777216,
    HostNavigation = 33554432,
    Reserved2 = 67108864,
    Reserved3 = 134217728,
    Reserved4 = 268435456,
    Reserved5 = 536870912,
    Reserved6 = 1073741824,
    Reserved7 = -2147483648,
};
pub const navOpenInNewWindow = BrowserNavConstants.OpenInNewWindow;
pub const navNoHistory = BrowserNavConstants.NoHistory;
pub const navNoReadFromCache = BrowserNavConstants.NoReadFromCache;
pub const navNoWriteToCache = BrowserNavConstants.NoWriteToCache;
pub const navAllowAutosearch = BrowserNavConstants.AllowAutosearch;
pub const navBrowserBar = BrowserNavConstants.BrowserBar;
pub const navHyperlink = BrowserNavConstants.Hyperlink;
pub const navEnforceRestricted = BrowserNavConstants.EnforceRestricted;
pub const navNewWindowsManaged = BrowserNavConstants.NewWindowsManaged;
pub const navUntrustedForDownload = BrowserNavConstants.UntrustedForDownload;
pub const navTrustedForActiveX = BrowserNavConstants.TrustedForActiveX;
pub const navOpenInNewTab = BrowserNavConstants.OpenInNewTab;
pub const navOpenInBackgroundTab = BrowserNavConstants.OpenInBackgroundTab;
pub const navKeepWordWheelText = BrowserNavConstants.KeepWordWheelText;
pub const navVirtualTab = BrowserNavConstants.VirtualTab;
pub const navBlockRedirectsXDomain = BrowserNavConstants.BlockRedirectsXDomain;
pub const navOpenNewForegroundTab = BrowserNavConstants.OpenNewForegroundTab;
pub const navTravelLogScreenshot = BrowserNavConstants.TravelLogScreenshot;
pub const navDeferUnload = BrowserNavConstants.DeferUnload;
pub const navSpeculative = BrowserNavConstants.Speculative;
pub const navSuggestNewWindow = BrowserNavConstants.SuggestNewWindow;
pub const navSuggestNewTab = BrowserNavConstants.SuggestNewTab;
pub const navReserved1 = BrowserNavConstants.Reserved1;
pub const navHomepageNavigate = BrowserNavConstants.HomepageNavigate;
pub const navRefresh = BrowserNavConstants.Refresh;
pub const navHostNavigation = BrowserNavConstants.HostNavigation;
pub const navReserved2 = BrowserNavConstants.Reserved2;
pub const navReserved3 = BrowserNavConstants.Reserved3;
pub const navReserved4 = BrowserNavConstants.Reserved4;
pub const navReserved5 = BrowserNavConstants.Reserved5;
pub const navReserved6 = BrowserNavConstants.Reserved6;
pub const navReserved7 = BrowserNavConstants.Reserved7;

pub const RefreshConstants = enum(i32) {
    NORMAL = 0,
    IFEXPIRED = 1,
    COMPLETELY = 3,
};
pub const REFRESH_NORMAL = RefreshConstants.NORMAL;
pub const REFRESH_IFEXPIRED = RefreshConstants.IFEXPIRED;
pub const REFRESH_COMPLETELY = RefreshConstants.COMPLETELY;

const IID_IWebBrowser_Value = Guid.initString("eab22ac1-30c1-11cf-a7eb-0000c05bae0b");
pub const IID_IWebBrowser = &IID_IWebBrowser_Value;
pub const IWebBrowser = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GoBack: *const fn(
            self: *const IWebBrowser,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GoForward: *const fn(
            self: *const IWebBrowser,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GoHome: *const fn(
            self: *const IWebBrowser,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GoSearch: *const fn(
            self: *const IWebBrowser,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Navigate: *const fn(
            self: *const IWebBrowser,
            URL: ?BSTR,
            Flags: ?*VARIANT,
            TargetFrameName: ?*VARIANT,
            PostData: ?*VARIANT,
            Headers: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn(
            self: *const IWebBrowser,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh2: *const fn(
            self: *const IWebBrowser,
            Level: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn(
            self: *const IWebBrowser,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Application: *const fn(
            self: *const IWebBrowser,
            ppDisp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parent: *const fn(
            self: *const IWebBrowser,
            ppDisp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Container: *const fn(
            self: *const IWebBrowser,
            ppDisp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Document: *const fn(
            self: *const IWebBrowser,
            ppDisp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TopLevelContainer: *const fn(
            self: *const IWebBrowser,
            pBool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn(
            self: *const IWebBrowser,
            Type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Left: *const fn(
            self: *const IWebBrowser,
            pl: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Left: *const fn(
            self: *const IWebBrowser,
            Left: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Top: *const fn(
            self: *const IWebBrowser,
            pl: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Top: *const fn(
            self: *const IWebBrowser,
            Top: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Width: *const fn(
            self: *const IWebBrowser,
            pl: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Width: *const fn(
            self: *const IWebBrowser,
            Width: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Height: *const fn(
            self: *const IWebBrowser,
            pl: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Height: *const fn(
            self: *const IWebBrowser,
            Height: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocationName: *const fn(
            self: *const IWebBrowser,
            LocationName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocationURL: *const fn(
            self: *const IWebBrowser,
            LocationURL: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Busy: *const fn(
            self: *const IWebBrowser,
            pBool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GoBack(self: *const IWebBrowser) callconv(.Inline) HRESULT {
        return self.vtable.GoBack(self);
    }
    pub fn GoForward(self: *const IWebBrowser) callconv(.Inline) HRESULT {
        return self.vtable.GoForward(self);
    }
    pub fn GoHome(self: *const IWebBrowser) callconv(.Inline) HRESULT {
        return self.vtable.GoHome(self);
    }
    pub fn GoSearch(self: *const IWebBrowser) callconv(.Inline) HRESULT {
        return self.vtable.GoSearch(self);
    }
    pub fn Navigate(self: *const IWebBrowser, URL: ?BSTR, Flags: ?*VARIANT, TargetFrameName: ?*VARIANT, PostData: ?*VARIANT, Headers: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.Navigate(self, URL, Flags, TargetFrameName, PostData, Headers);
    }
    pub fn Refresh(self: *const IWebBrowser) callconv(.Inline) HRESULT {
        return self.vtable.Refresh(self);
    }
    pub fn Refresh2(self: *const IWebBrowser, Level: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.Refresh2(self, Level);
    }
    pub fn Stop(self: *const IWebBrowser) callconv(.Inline) HRESULT {
        return self.vtable.Stop(self);
    }
    pub fn get_Application(self: *const IWebBrowser, ppDisp: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Application(self, ppDisp);
    }
    pub fn get_Parent(self: *const IWebBrowser, ppDisp: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Parent(self, ppDisp);
    }
    pub fn get_Container(self: *const IWebBrowser, ppDisp: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Container(self, ppDisp);
    }
    pub fn get_Document(self: *const IWebBrowser, ppDisp: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Document(self, ppDisp);
    }
    pub fn get_TopLevelContainer(self: *const IWebBrowser, pBool: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_TopLevelContainer(self, pBool);
    }
    pub fn get_Type(self: *const IWebBrowser, Type: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Type(self, Type);
    }
    pub fn get_Left(self: *const IWebBrowser, pl: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Left(self, pl);
    }
    pub fn put_Left(self: *const IWebBrowser, Left: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Left(self, Left);
    }
    pub fn get_Top(self: *const IWebBrowser, pl: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Top(self, pl);
    }
    pub fn put_Top(self: *const IWebBrowser, Top: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Top(self, Top);
    }
    pub fn get_Width(self: *const IWebBrowser, pl: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Width(self, pl);
    }
    pub fn put_Width(self: *const IWebBrowser, Width: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Width(self, Width);
    }
    pub fn get_Height(self: *const IWebBrowser, pl: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Height(self, pl);
    }
    pub fn put_Height(self: *const IWebBrowser, Height: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Height(self, Height);
    }
    pub fn get_LocationName(self: *const IWebBrowser, LocationName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_LocationName(self, LocationName);
    }
    pub fn get_LocationURL(self: *const IWebBrowser, LocationURL: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_LocationURL(self, LocationURL);
    }
    pub fn get_Busy(self: *const IWebBrowser, pBool: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Busy(self, pBool);
    }
};

const IID_DWebBrowserEvents_Value = Guid.initString("eab22ac2-30c1-11cf-a7eb-0000c05bae0b");
pub const IID_DWebBrowserEvents = &IID_DWebBrowserEvents_Value;
pub const DWebBrowserEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IWebBrowserApp_Value = Guid.initString("0002df05-0000-0000-c000-000000000046");
pub const IID_IWebBrowserApp = &IID_IWebBrowserApp_Value;
pub const IWebBrowserApp = extern union {
    pub const VTable = extern struct {
        base: IWebBrowser.VTable,
        Quit: *const fn(
            self: *const IWebBrowserApp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClientToWindow: *const fn(
            self: *const IWebBrowserApp,
            pcx: ?*i32,
            pcy: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutProperty: *const fn(
            self: *const IWebBrowserApp,
            Property: ?BSTR,
            vtValue: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn(
            self: *const IWebBrowserApp,
            Property: ?BSTR,
            pvtValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn(
            self: *const IWebBrowserApp,
            Name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HWND: *const fn(
            self: *const IWebBrowserApp,
            pHWND: ?*SHANDLE_PTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FullName: *const fn(
            self: *const IWebBrowserApp,
            FullName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn(
            self: *const IWebBrowserApp,
            Path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Visible: *const fn(
            self: *const IWebBrowserApp,
            pBool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Visible: *const fn(
            self: *const IWebBrowserApp,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusBar: *const fn(
            self: *const IWebBrowserApp,
            pBool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StatusBar: *const fn(
            self: *const IWebBrowserApp,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusText: *const fn(
            self: *const IWebBrowserApp,
            StatusText: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StatusText: *const fn(
            self: *const IWebBrowserApp,
            StatusText: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ToolBar: *const fn(
            self: *const IWebBrowserApp,
            Value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ToolBar: *const fn(
            self: *const IWebBrowserApp,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MenuBar: *const fn(
            self: *const IWebBrowserApp,
            Value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MenuBar: *const fn(
            self: *const IWebBrowserApp,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FullScreen: *const fn(
            self: *const IWebBrowserApp,
            pbFullScreen: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FullScreen: *const fn(
            self: *const IWebBrowserApp,
            bFullScreen: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IWebBrowser: IWebBrowser,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Quit(self: *const IWebBrowserApp) callconv(.Inline) HRESULT {
        return self.vtable.Quit(self);
    }
    pub fn ClientToWindow(self: *const IWebBrowserApp, pcx: ?*i32, pcy: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.ClientToWindow(self, pcx, pcy);
    }
    pub fn PutProperty(self: *const IWebBrowserApp, Property: ?BSTR, vtValue: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.PutProperty(self, Property, vtValue);
    }
    pub fn GetProperty(self: *const IWebBrowserApp, Property: ?BSTR, pvtValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetProperty(self, Property, pvtValue);
    }
    pub fn get_Name(self: *const IWebBrowserApp, Name: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Name(self, Name);
    }
    pub fn get_HWND(self: *const IWebBrowserApp, pHWND: ?*SHANDLE_PTR) callconv(.Inline) HRESULT {
        return self.vtable.get_HWND(self, pHWND);
    }
    pub fn get_FullName(self: *const IWebBrowserApp, FullName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_FullName(self, FullName);
    }
    pub fn get_Path(self: *const IWebBrowserApp, Path: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Path(self, Path);
    }
    pub fn get_Visible(self: *const IWebBrowserApp, pBool: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Visible(self, pBool);
    }
    pub fn put_Visible(self: *const IWebBrowserApp, Value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_Visible(self, Value);
    }
    pub fn get_StatusBar(self: *const IWebBrowserApp, pBool: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_StatusBar(self, pBool);
    }
    pub fn put_StatusBar(self: *const IWebBrowserApp, Value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_StatusBar(self, Value);
    }
    pub fn get_StatusText(self: *const IWebBrowserApp, StatusText: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_StatusText(self, StatusText);
    }
    pub fn put_StatusText(self: *const IWebBrowserApp, StatusText: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_StatusText(self, StatusText);
    }
    pub fn get_ToolBar(self: *const IWebBrowserApp, Value: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ToolBar(self, Value);
    }
    pub fn put_ToolBar(self: *const IWebBrowserApp, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_ToolBar(self, Value);
    }
    pub fn get_MenuBar(self: *const IWebBrowserApp, Value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_MenuBar(self, Value);
    }
    pub fn put_MenuBar(self: *const IWebBrowserApp, Value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_MenuBar(self, Value);
    }
    pub fn get_FullScreen(self: *const IWebBrowserApp, pbFullScreen: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_FullScreen(self, pbFullScreen);
    }
    pub fn put_FullScreen(self: *const IWebBrowserApp, bFullScreen: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_FullScreen(self, bFullScreen);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWebBrowser2_Value = Guid.initString("d30c1661-cdaf-11d0-8a3e-00c04fc9e26e");
pub const IID_IWebBrowser2 = &IID_IWebBrowser2_Value;
pub const IWebBrowser2 = extern union {
    pub const VTable = extern struct {
        base: IWebBrowserApp.VTable,
        Navigate2: *const fn(
            self: *const IWebBrowser2,
            URL: ?*VARIANT,
            Flags: ?*VARIANT,
            TargetFrameName: ?*VARIANT,
            PostData: ?*VARIANT,
            Headers: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryStatusWB: *const fn(
            self: *const IWebBrowser2,
            cmdID: OLECMDID,
            pcmdf: ?*OLECMDF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecWB: *const fn(
            self: *const IWebBrowser2,
            cmdID: OLECMDID,
            cmdexecopt: OLECMDEXECOPT,
            pvaIn: ?*VARIANT,
            pvaOut: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowBrowserBar: *const fn(
            self: *const IWebBrowser2,
            pvaClsid: ?*VARIANT,
            pvarShow: ?*VARIANT,
            pvarSize: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReadyState: *const fn(
            self: *const IWebBrowser2,
            plReadyState: ?*READYSTATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Offline: *const fn(
            self: *const IWebBrowser2,
            pbOffline: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Offline: *const fn(
            self: *const IWebBrowser2,
            bOffline: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Silent: *const fn(
            self: *const IWebBrowser2,
            pbSilent: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Silent: *const fn(
            self: *const IWebBrowser2,
            bSilent: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RegisterAsBrowser: *const fn(
            self: *const IWebBrowser2,
            pbRegister: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RegisterAsBrowser: *const fn(
            self: *const IWebBrowser2,
            bRegister: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RegisterAsDropTarget: *const fn(
            self: *const IWebBrowser2,
            pbRegister: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RegisterAsDropTarget: *const fn(
            self: *const IWebBrowser2,
            bRegister: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TheaterMode: *const fn(
            self: *const IWebBrowser2,
            pbRegister: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TheaterMode: *const fn(
            self: *const IWebBrowser2,
            bRegister: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AddressBar: *const fn(
            self: *const IWebBrowser2,
            Value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AddressBar: *const fn(
            self: *const IWebBrowser2,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Resizable: *const fn(
            self: *const IWebBrowser2,
            Value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Resizable: *const fn(
            self: *const IWebBrowser2,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IWebBrowserApp: IWebBrowserApp,
    IWebBrowser: IWebBrowser,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Navigate2(self: *const IWebBrowser2, URL: ?*VARIANT, Flags: ?*VARIANT, TargetFrameName: ?*VARIANT, PostData: ?*VARIANT, Headers: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.Navigate2(self, URL, Flags, TargetFrameName, PostData, Headers);
    }
    pub fn QueryStatusWB(self: *const IWebBrowser2, cmdID: OLECMDID, pcmdf: ?*OLECMDF) callconv(.Inline) HRESULT {
        return self.vtable.QueryStatusWB(self, cmdID, pcmdf);
    }
    pub fn ExecWB(self: *const IWebBrowser2, cmdID: OLECMDID, cmdexecopt: OLECMDEXECOPT, pvaIn: ?*VARIANT, pvaOut: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.ExecWB(self, cmdID, cmdexecopt, pvaIn, pvaOut);
    }
    pub fn ShowBrowserBar(self: *const IWebBrowser2, pvaClsid: ?*VARIANT, pvarShow: ?*VARIANT, pvarSize: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.ShowBrowserBar(self, pvaClsid, pvarShow, pvarSize);
    }
    pub fn get_ReadyState(self: *const IWebBrowser2, plReadyState: ?*READYSTATE) callconv(.Inline) HRESULT {
        return self.vtable.get_ReadyState(self, plReadyState);
    }
    pub fn get_Offline(self: *const IWebBrowser2, pbOffline: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Offline(self, pbOffline);
    }
    pub fn put_Offline(self: *const IWebBrowser2, bOffline: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_Offline(self, bOffline);
    }
    pub fn get_Silent(self: *const IWebBrowser2, pbSilent: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Silent(self, pbSilent);
    }
    pub fn put_Silent(self: *const IWebBrowser2, bSilent: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_Silent(self, bSilent);
    }
    pub fn get_RegisterAsBrowser(self: *const IWebBrowser2, pbRegister: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_RegisterAsBrowser(self, pbRegister);
    }
    pub fn put_RegisterAsBrowser(self: *const IWebBrowser2, bRegister: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_RegisterAsBrowser(self, bRegister);
    }
    pub fn get_RegisterAsDropTarget(self: *const IWebBrowser2, pbRegister: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_RegisterAsDropTarget(self, pbRegister);
    }
    pub fn put_RegisterAsDropTarget(self: *const IWebBrowser2, bRegister: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_RegisterAsDropTarget(self, bRegister);
    }
    pub fn get_TheaterMode(self: *const IWebBrowser2, pbRegister: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_TheaterMode(self, pbRegister);
    }
    pub fn put_TheaterMode(self: *const IWebBrowser2, bRegister: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_TheaterMode(self, bRegister);
    }
    pub fn get_AddressBar(self: *const IWebBrowser2, Value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_AddressBar(self, Value);
    }
    pub fn put_AddressBar(self: *const IWebBrowser2, Value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_AddressBar(self, Value);
    }
    pub fn get_Resizable(self: *const IWebBrowser2, Value: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Resizable(self, Value);
    }
    pub fn put_Resizable(self: *const IWebBrowser2, Value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_Resizable(self, Value);
    }
};

const IID_DWebBrowserEvents2_Value = Guid.initString("34a715a0-6587-11d0-924a-0020afc7ac4d");
pub const IID_DWebBrowserEvents2 = &IID_DWebBrowserEvents2_Value;
pub const DWebBrowserEvents2 = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DShellWindowsEvents_Value = Guid.initString("fe4106e0-399a-11d0-a48c-00a0c90a8f39");
pub const IID_DShellWindowsEvents = &IID_DShellWindowsEvents_Value;
pub const DShellWindowsEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IShellWindows_Value = Guid.initString("85cb6900-4d95-11cf-960c-0080c7f4ee85");
pub const IID_IShellWindows = &IID_IShellWindows_Value;
pub const IShellWindows = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IShellWindows,
            Count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn(
            self: *const IShellWindows,
            index: VARIANT,
            Folder: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _NewEnum: *const fn(
            self: *const IShellWindows,
            ppunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Register: *const fn(
            self: *const IShellWindows,
            pid: ?*IDispatch,
            hwnd: i32,
            swClass: i32,
            plCookie: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterPending: *const fn(
            self: *const IShellWindows,
            lThreadId: i32,
            pvarloc: ?*VARIANT,
            pvarlocRoot: ?*VARIANT,
            swClass: i32,
            plCookie: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Revoke: *const fn(
            self: *const IShellWindows,
            lCookie: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNavigate: *const fn(
            self: *const IShellWindows,
            lCookie: i32,
            pvarLoc: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnActivated: *const fn(
            self: *const IShellWindows,
            lCookie: i32,
            fActive: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindWindowSW: *const fn(
            self: *const IShellWindows,
            pvarLoc: ?*VARIANT,
            pvarLocRoot: ?*VARIANT,
            swClass: i32,
            phwnd: ?*i32,
            swfwOptions: i32,
            ppdispOut: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCreated: *const fn(
            self: *const IShellWindows,
            lCookie: i32,
            punk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProcessAttachDetach: *const fn(
            self: *const IShellWindows,
            fAttach: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Count(self: *const IShellWindows, Count: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, Count);
    }
    pub fn Item(self: *const IShellWindows, index: VARIANT, _param_Folder: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.Item(self, index, _param_Folder);
    }
    pub fn _NewEnum(self: *const IShellWindows, ppunk: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable._NewEnum(self, ppunk);
    }
    pub fn Register(self: *const IShellWindows, pid: ?*IDispatch, hwnd: i32, swClass: i32, plCookie: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.Register(self, pid, hwnd, swClass, plCookie);
    }
    pub fn RegisterPending(self: *const IShellWindows, lThreadId: i32, pvarloc: ?*VARIANT, pvarlocRoot: ?*VARIANT, swClass: i32, plCookie: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.RegisterPending(self, lThreadId, pvarloc, pvarlocRoot, swClass, plCookie);
    }
    pub fn Revoke(self: *const IShellWindows, lCookie: i32) callconv(.Inline) HRESULT {
        return self.vtable.Revoke(self, lCookie);
    }
    pub fn OnNavigate(self: *const IShellWindows, lCookie: i32, pvarLoc: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.OnNavigate(self, lCookie, pvarLoc);
    }
    pub fn OnActivated(self: *const IShellWindows, lCookie: i32, fActive: i16) callconv(.Inline) HRESULT {
        return self.vtable.OnActivated(self, lCookie, fActive);
    }
    pub fn FindWindowSW(self: *const IShellWindows, pvarLoc: ?*VARIANT, pvarLocRoot: ?*VARIANT, swClass: i32, phwnd: ?*i32, swfwOptions: i32, ppdispOut: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.FindWindowSW(self, pvarLoc, pvarLocRoot, swClass, phwnd, swfwOptions, ppdispOut);
    }
    pub fn OnCreated(self: *const IShellWindows, lCookie: i32, punk: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.OnCreated(self, lCookie, punk);
    }
    pub fn ProcessAttachDetach(self: *const IShellWindows, fAttach: i16) callconv(.Inline) HRESULT {
        return self.vtable.ProcessAttachDetach(self, fAttach);
    }
};

const IID_IShellUIHelper_Value = Guid.initString("729fe2f8-1ea8-11d1-8f85-00c04fc2fbe1");
pub const IID_IShellUIHelper = &IID_IShellUIHelper_Value;
pub const IShellUIHelper = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        ResetFirstBootMode: *const fn(
            self: *const IShellUIHelper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetSafeMode: *const fn(
            self: *const IShellUIHelper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshOfflineDesktop: *const fn(
            self: *const IShellUIHelper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFavorite: *const fn(
            self: *const IShellUIHelper,
            URL: ?BSTR,
            Title: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddChannel: *const fn(
            self: *const IShellUIHelper,
            URL: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDesktopComponent: *const fn(
            self: *const IShellUIHelper,
            URL: ?BSTR,
            Type: ?BSTR,
            Left: ?*VARIANT,
            Top: ?*VARIANT,
            Width: ?*VARIANT,
            Height: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSubscribed: *const fn(
            self: *const IShellUIHelper,
            URL: ?BSTR,
            pBool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NavigateAndFind: *const fn(
            self: *const IShellUIHelper,
            URL: ?BSTR,
            strQuery: ?BSTR,
            varTargetFrame: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportExportFavorites: *const fn(
            self: *const IShellUIHelper,
            fImport: i16,
            strImpExpPath: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AutoCompleteSaveForm: *const fn(
            self: *const IShellUIHelper,
            Form: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AutoScan: *const fn(
            self: *const IShellUIHelper,
            strSearch: ?BSTR,
            strFailureUrl: ?BSTR,
            pvarTargetFrame: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AutoCompleteAttach: *const fn(
            self: *const IShellUIHelper,
            Reserved: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowBrowserUI: *const fn(
            self: *const IShellUIHelper,
            bstrName: ?BSTR,
            pvarIn: ?*VARIANT,
            pvarOut: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn ResetFirstBootMode(self: *const IShellUIHelper) callconv(.Inline) HRESULT {
        return self.vtable.ResetFirstBootMode(self);
    }
    pub fn ResetSafeMode(self: *const IShellUIHelper) callconv(.Inline) HRESULT {
        return self.vtable.ResetSafeMode(self);
    }
    pub fn RefreshOfflineDesktop(self: *const IShellUIHelper) callconv(.Inline) HRESULT {
        return self.vtable.RefreshOfflineDesktop(self);
    }
    pub fn AddFavorite(self: *const IShellUIHelper, URL: ?BSTR, Title: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.AddFavorite(self, URL, Title);
    }
    pub fn AddChannel(self: *const IShellUIHelper, URL: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.AddChannel(self, URL);
    }
    pub fn AddDesktopComponent(self: *const IShellUIHelper, URL: ?BSTR, Type: ?BSTR, Left: ?*VARIANT, Top: ?*VARIANT, Width: ?*VARIANT, Height: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.AddDesktopComponent(self, URL, Type, Left, Top, Width, Height);
    }
    pub fn IsSubscribed(self: *const IShellUIHelper, URL: ?BSTR, pBool: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.IsSubscribed(self, URL, pBool);
    }
    pub fn NavigateAndFind(self: *const IShellUIHelper, URL: ?BSTR, strQuery: ?BSTR, varTargetFrame: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.NavigateAndFind(self, URL, strQuery, varTargetFrame);
    }
    pub fn ImportExportFavorites(self: *const IShellUIHelper, fImport: i16, strImpExpPath: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.ImportExportFavorites(self, fImport, strImpExpPath);
    }
    pub fn AutoCompleteSaveForm(self: *const IShellUIHelper, Form: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.AutoCompleteSaveForm(self, Form);
    }
    pub fn AutoScan(self: *const IShellUIHelper, strSearch: ?BSTR, strFailureUrl: ?BSTR, pvarTargetFrame: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.AutoScan(self, strSearch, strFailureUrl, pvarTargetFrame);
    }
    pub fn AutoCompleteAttach(self: *const IShellUIHelper, Reserved: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.AutoCompleteAttach(self, Reserved);
    }
    pub fn ShowBrowserUI(self: *const IShellUIHelper, bstrName: ?BSTR, pvarIn: ?*VARIANT, pvarOut: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.ShowBrowserUI(self, bstrName, pvarIn, pvarOut);
    }
};

const IID_IShellUIHelper2_Value = Guid.initString("a7fe6eda-1932-4281-b881-87b31b8bc52c");
pub const IID_IShellUIHelper2 = &IID_IShellUIHelper2_Value;
pub const IShellUIHelper2 = extern union {
    pub const VTable = extern struct {
        base: IShellUIHelper.VTable,
        AddSearchProvider: *const fn(
            self: *const IShellUIHelper2,
            URL: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunOnceShown: *const fn(
            self: *const IShellUIHelper2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SkipRunOnce: *const fn(
            self: *const IShellUIHelper2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CustomizeSettings: *const fn(
            self: *const IShellUIHelper2,
            fSQM: i16,
            fPhishing: i16,
            bstrLocale: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SqmEnabled: *const fn(
            self: *const IShellUIHelper2,
            pfEnabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PhishingEnabled: *const fn(
            self: *const IShellUIHelper2,
            pfEnabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BrandImageUri: *const fn(
            self: *const IShellUIHelper2,
            pbstrUri: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SkipTabsWelcome: *const fn(
            self: *const IShellUIHelper2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DiagnoseConnection: *const fn(
            self: *const IShellUIHelper2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CustomizeClearType: *const fn(
            self: *const IShellUIHelper2,
            fSet: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSearchProviderInstalled: *const fn(
            self: *const IShellUIHelper2,
            URL: ?BSTR,
            pdwResult: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSearchMigrated: *const fn(
            self: *const IShellUIHelper2,
            pfMigrated: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DefaultSearchProvider: *const fn(
            self: *const IShellUIHelper2,
            pbstrName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunOnceRequiredSettingsComplete: *const fn(
            self: *const IShellUIHelper2,
            fComplete: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunOnceHasShown: *const fn(
            self: *const IShellUIHelper2,
            pfShown: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SearchGuideUrl: *const fn(
            self: *const IShellUIHelper2,
            pbstrUrl: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IShellUIHelper: IShellUIHelper,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn AddSearchProvider(self: *const IShellUIHelper2, URL: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.AddSearchProvider(self, URL);
    }
    pub fn RunOnceShown(self: *const IShellUIHelper2) callconv(.Inline) HRESULT {
        return self.vtable.RunOnceShown(self);
    }
    pub fn SkipRunOnce(self: *const IShellUIHelper2) callconv(.Inline) HRESULT {
        return self.vtable.SkipRunOnce(self);
    }
    pub fn CustomizeSettings(self: *const IShellUIHelper2, fSQM: i16, fPhishing: i16, bstrLocale: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.CustomizeSettings(self, fSQM, fPhishing, bstrLocale);
    }
    pub fn SqmEnabled(self: *const IShellUIHelper2, pfEnabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.SqmEnabled(self, pfEnabled);
    }
    pub fn PhishingEnabled(self: *const IShellUIHelper2, pfEnabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.PhishingEnabled(self, pfEnabled);
    }
    pub fn BrandImageUri(self: *const IShellUIHelper2, pbstrUri: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.BrandImageUri(self, pbstrUri);
    }
    pub fn SkipTabsWelcome(self: *const IShellUIHelper2) callconv(.Inline) HRESULT {
        return self.vtable.SkipTabsWelcome(self);
    }
    pub fn DiagnoseConnection(self: *const IShellUIHelper2) callconv(.Inline) HRESULT {
        return self.vtable.DiagnoseConnection(self);
    }
    pub fn CustomizeClearType(self: *const IShellUIHelper2, fSet: i16) callconv(.Inline) HRESULT {
        return self.vtable.CustomizeClearType(self, fSet);
    }
    pub fn IsSearchProviderInstalled(self: *const IShellUIHelper2, URL: ?BSTR, pdwResult: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.IsSearchProviderInstalled(self, URL, pdwResult);
    }
    pub fn IsSearchMigrated(self: *const IShellUIHelper2, pfMigrated: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.IsSearchMigrated(self, pfMigrated);
    }
    pub fn DefaultSearchProvider(self: *const IShellUIHelper2, pbstrName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.DefaultSearchProvider(self, pbstrName);
    }
    pub fn RunOnceRequiredSettingsComplete(self: *const IShellUIHelper2, fComplete: i16) callconv(.Inline) HRESULT {
        return self.vtable.RunOnceRequiredSettingsComplete(self, fComplete);
    }
    pub fn RunOnceHasShown(self: *const IShellUIHelper2, pfShown: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.RunOnceHasShown(self, pfShown);
    }
    pub fn SearchGuideUrl(self: *const IShellUIHelper2, pbstrUrl: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.SearchGuideUrl(self, pbstrUrl);
    }
};

const IID_IShellUIHelper3_Value = Guid.initString("528df2ec-d419-40bc-9b6d-dcdbf9c1b25d");
pub const IID_IShellUIHelper3 = &IID_IShellUIHelper3_Value;
pub const IShellUIHelper3 = extern union {
    pub const VTable = extern struct {
        base: IShellUIHelper2.VTable,
        AddService: *const fn(
            self: *const IShellUIHelper3,
            URL: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsServiceInstalled: *const fn(
            self: *const IShellUIHelper3,
            URL: ?BSTR,
            Verb: ?BSTR,
            pdwResult: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InPrivateFilteringEnabled: *const fn(
            self: *const IShellUIHelper3,
            pfEnabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddToFavoritesBar: *const fn(
            self: *const IShellUIHelper3,
            URL: ?BSTR,
            Title: ?BSTR,
            Type: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BuildNewTabPage: *const fn(
            self: *const IShellUIHelper3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRecentlyClosedVisible: *const fn(
            self: *const IShellUIHelper3,
            fVisible: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActivitiesVisible: *const fn(
            self: *const IShellUIHelper3,
            fVisible: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ContentDiscoveryReset: *const fn(
            self: *const IShellUIHelper3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSuggestedSitesEnabled: *const fn(
            self: *const IShellUIHelper3,
            pfEnabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableSuggestedSites: *const fn(
            self: *const IShellUIHelper3,
            fEnable: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NavigateToSuggestedSites: *const fn(
            self: *const IShellUIHelper3,
            bstrRelativeUrl: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowTabsHelp: *const fn(
            self: *const IShellUIHelper3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowInPrivateHelp: *const fn(
            self: *const IShellUIHelper3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IShellUIHelper2: IShellUIHelper2,
    IShellUIHelper: IShellUIHelper,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn AddService(self: *const IShellUIHelper3, URL: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.AddService(self, URL);
    }
    pub fn IsServiceInstalled(self: *const IShellUIHelper3, URL: ?BSTR, Verb: ?BSTR, pdwResult: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.IsServiceInstalled(self, URL, Verb, pdwResult);
    }
    pub fn InPrivateFilteringEnabled(self: *const IShellUIHelper3, pfEnabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.InPrivateFilteringEnabled(self, pfEnabled);
    }
    pub fn AddToFavoritesBar(self: *const IShellUIHelper3, URL: ?BSTR, Title: ?BSTR, Type: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.AddToFavoritesBar(self, URL, Title, Type);
    }
    pub fn BuildNewTabPage(self: *const IShellUIHelper3) callconv(.Inline) HRESULT {
        return self.vtable.BuildNewTabPage(self);
    }
    pub fn SetRecentlyClosedVisible(self: *const IShellUIHelper3, fVisible: i16) callconv(.Inline) HRESULT {
        return self.vtable.SetRecentlyClosedVisible(self, fVisible);
    }
    pub fn SetActivitiesVisible(self: *const IShellUIHelper3, fVisible: i16) callconv(.Inline) HRESULT {
        return self.vtable.SetActivitiesVisible(self, fVisible);
    }
    pub fn ContentDiscoveryReset(self: *const IShellUIHelper3) callconv(.Inline) HRESULT {
        return self.vtable.ContentDiscoveryReset(self);
    }
    pub fn IsSuggestedSitesEnabled(self: *const IShellUIHelper3, pfEnabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.IsSuggestedSitesEnabled(self, pfEnabled);
    }
    pub fn EnableSuggestedSites(self: *const IShellUIHelper3, fEnable: i16) callconv(.Inline) HRESULT {
        return self.vtable.EnableSuggestedSites(self, fEnable);
    }
    pub fn NavigateToSuggestedSites(self: *const IShellUIHelper3, bstrRelativeUrl: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.NavigateToSuggestedSites(self, bstrRelativeUrl);
    }
    pub fn ShowTabsHelp(self: *const IShellUIHelper3) callconv(.Inline) HRESULT {
        return self.vtable.ShowTabsHelp(self);
    }
    pub fn ShowInPrivateHelp(self: *const IShellUIHelper3) callconv(.Inline) HRESULT {
        return self.vtable.ShowInPrivateHelp(self);
    }
};

const IID_IShellUIHelper4_Value = Guid.initString("b36e6a53-8073-499e-824c-d776330a333e");
pub const IID_IShellUIHelper4 = &IID_IShellUIHelper4_Value;
pub const IShellUIHelper4 = extern union {
    pub const VTable = extern struct {
        base: IShellUIHelper3.VTable,
        msIsSiteMode: *const fn(
            self: *const IShellUIHelper4,
            pfSiteMode: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeShowThumbBar: *const fn(
            self: *const IShellUIHelper4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeAddThumbBarButton: *const fn(
            self: *const IShellUIHelper4,
            bstrIconURL: ?BSTR,
            bstrTooltip: ?BSTR,
            pvarButtonID: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeUpdateThumbBarButton: *const fn(
            self: *const IShellUIHelper4,
            ButtonID: VARIANT,
            fEnabled: i16,
            fVisible: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeSetIconOverlay: *const fn(
            self: *const IShellUIHelper4,
            IconUrl: ?BSTR,
            pvarDescription: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeClearIconOverlay: *const fn(
            self: *const IShellUIHelper4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msAddSiteMode: *const fn(
            self: *const IShellUIHelper4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeCreateJumpList: *const fn(
            self: *const IShellUIHelper4,
            bstrHeader: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeAddJumpListItem: *const fn(
            self: *const IShellUIHelper4,
            bstrName: ?BSTR,
            bstrActionUri: ?BSTR,
            bstrIconUri: ?BSTR,
            pvarWindowType: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeClearJumpList: *const fn(
            self: *const IShellUIHelper4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeShowJumpList: *const fn(
            self: *const IShellUIHelper4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeAddButtonStyle: *const fn(
            self: *const IShellUIHelper4,
            uiButtonID: VARIANT,
            bstrIconUrl: ?BSTR,
            bstrTooltip: ?BSTR,
            pvarStyleID: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeShowButtonStyle: *const fn(
            self: *const IShellUIHelper4,
            uiButtonID: VARIANT,
            uiStyleID: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeActivate: *const fn(
            self: *const IShellUIHelper4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msIsSiteModeFirstRun: *const fn(
            self: *const IShellUIHelper4,
            fPreserveState: i16,
            puiFirstRun: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msAddTrackingProtectionList: *const fn(
            self: *const IShellUIHelper4,
            URL: ?BSTR,
            bstrFilterName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msTrackingProtectionEnabled: *const fn(
            self: *const IShellUIHelper4,
            pfEnabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msActiveXFilteringEnabled: *const fn(
            self: *const IShellUIHelper4,
            pfEnabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IShellUIHelper3: IShellUIHelper3,
    IShellUIHelper2: IShellUIHelper2,
    IShellUIHelper: IShellUIHelper,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn msIsSiteMode(self: *const IShellUIHelper4, pfSiteMode: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.msIsSiteMode(self, pfSiteMode);
    }
    pub fn msSiteModeShowThumbBar(self: *const IShellUIHelper4) callconv(.Inline) HRESULT {
        return self.vtable.msSiteModeShowThumbBar(self);
    }
    pub fn msSiteModeAddThumbBarButton(self: *const IShellUIHelper4, bstrIconURL: ?BSTR, bstrTooltip: ?BSTR, pvarButtonID: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.msSiteModeAddThumbBarButton(self, bstrIconURL, bstrTooltip, pvarButtonID);
    }
    pub fn msSiteModeUpdateThumbBarButton(self: *const IShellUIHelper4, ButtonID: VARIANT, fEnabled: i16, fVisible: i16) callconv(.Inline) HRESULT {
        return self.vtable.msSiteModeUpdateThumbBarButton(self, ButtonID, fEnabled, fVisible);
    }
    pub fn msSiteModeSetIconOverlay(self: *const IShellUIHelper4, IconUrl: ?BSTR, pvarDescription: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.msSiteModeSetIconOverlay(self, IconUrl, pvarDescription);
    }
    pub fn msSiteModeClearIconOverlay(self: *const IShellUIHelper4) callconv(.Inline) HRESULT {
        return self.vtable.msSiteModeClearIconOverlay(self);
    }
    pub fn msAddSiteMode(self: *const IShellUIHelper4) callconv(.Inline) HRESULT {
        return self.vtable.msAddSiteMode(self);
    }
    pub fn msSiteModeCreateJumpList(self: *const IShellUIHelper4, bstrHeader: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.msSiteModeCreateJumpList(self, bstrHeader);
    }
    pub fn msSiteModeAddJumpListItem(self: *const IShellUIHelper4, bstrName: ?BSTR, bstrActionUri: ?BSTR, bstrIconUri: ?BSTR, pvarWindowType: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.msSiteModeAddJumpListItem(self, bstrName, bstrActionUri, bstrIconUri, pvarWindowType);
    }
    pub fn msSiteModeClearJumpList(self: *const IShellUIHelper4) callconv(.Inline) HRESULT {
        return self.vtable.msSiteModeClearJumpList(self);
    }
    pub fn msSiteModeShowJumpList(self: *const IShellUIHelper4) callconv(.Inline) HRESULT {
        return self.vtable.msSiteModeShowJumpList(self);
    }
    pub fn msSiteModeAddButtonStyle(self: *const IShellUIHelper4, uiButtonID: VARIANT, bstrIconUrl: ?BSTR, bstrTooltip: ?BSTR, pvarStyleID: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.msSiteModeAddButtonStyle(self, uiButtonID, bstrIconUrl, bstrTooltip, pvarStyleID);
    }
    pub fn msSiteModeShowButtonStyle(self: *const IShellUIHelper4, uiButtonID: VARIANT, uiStyleID: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.msSiteModeShowButtonStyle(self, uiButtonID, uiStyleID);
    }
    pub fn msSiteModeActivate(self: *const IShellUIHelper4) callconv(.Inline) HRESULT {
        return self.vtable.msSiteModeActivate(self);
    }
    pub fn msIsSiteModeFirstRun(self: *const IShellUIHelper4, fPreserveState: i16, puiFirstRun: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.msIsSiteModeFirstRun(self, fPreserveState, puiFirstRun);
    }
    pub fn msAddTrackingProtectionList(self: *const IShellUIHelper4, URL: ?BSTR, bstrFilterName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.msAddTrackingProtectionList(self, URL, bstrFilterName);
    }
    pub fn msTrackingProtectionEnabled(self: *const IShellUIHelper4, pfEnabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.msTrackingProtectionEnabled(self, pfEnabled);
    }
    pub fn msActiveXFilteringEnabled(self: *const IShellUIHelper4, pfEnabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.msActiveXFilteringEnabled(self, pfEnabled);
    }
};

const IID_IShellUIHelper5_Value = Guid.initString("a2a08b09-103d-4d3f-b91c-ea455ca82efa");
pub const IID_IShellUIHelper5 = &IID_IShellUIHelper5_Value;
pub const IShellUIHelper5 = extern union {
    pub const VTable = extern struct {
        base: IShellUIHelper4.VTable,
        msProvisionNetworks: *const fn(
            self: *const IShellUIHelper5,
            bstrProvisioningXml: ?BSTR,
            puiResult: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msReportSafeUrl: *const fn(
            self: *const IShellUIHelper5,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeRefreshBadge: *const fn(
            self: *const IShellUIHelper5,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeClearBadge: *const fn(
            self: *const IShellUIHelper5,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msDiagnoseConnectionUILess: *const fn(
            self: *const IShellUIHelper5,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msLaunchNetworkClientHelp: *const fn(
            self: *const IShellUIHelper5,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msChangeDefaultBrowser: *const fn(
            self: *const IShellUIHelper5,
            fChange: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IShellUIHelper4: IShellUIHelper4,
    IShellUIHelper3: IShellUIHelper3,
    IShellUIHelper2: IShellUIHelper2,
    IShellUIHelper: IShellUIHelper,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn msProvisionNetworks(self: *const IShellUIHelper5, bstrProvisioningXml: ?BSTR, puiResult: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.msProvisionNetworks(self, bstrProvisioningXml, puiResult);
    }
    pub fn msReportSafeUrl(self: *const IShellUIHelper5) callconv(.Inline) HRESULT {
        return self.vtable.msReportSafeUrl(self);
    }
    pub fn msSiteModeRefreshBadge(self: *const IShellUIHelper5) callconv(.Inline) HRESULT {
        return self.vtable.msSiteModeRefreshBadge(self);
    }
    pub fn msSiteModeClearBadge(self: *const IShellUIHelper5) callconv(.Inline) HRESULT {
        return self.vtable.msSiteModeClearBadge(self);
    }
    pub fn msDiagnoseConnectionUILess(self: *const IShellUIHelper5) callconv(.Inline) HRESULT {
        return self.vtable.msDiagnoseConnectionUILess(self);
    }
    pub fn msLaunchNetworkClientHelp(self: *const IShellUIHelper5) callconv(.Inline) HRESULT {
        return self.vtable.msLaunchNetworkClientHelp(self);
    }
    pub fn msChangeDefaultBrowser(self: *const IShellUIHelper5, fChange: i16) callconv(.Inline) HRESULT {
        return self.vtable.msChangeDefaultBrowser(self, fChange);
    }
};

const IID_IShellUIHelper6_Value = Guid.initString("987a573e-46ee-4e89-96ab-ddf7f8fdc98c");
pub const IID_IShellUIHelper6 = &IID_IShellUIHelper6_Value;
pub const IShellUIHelper6 = extern union {
    pub const VTable = extern struct {
        base: IShellUIHelper5.VTable,
        msStopPeriodicTileUpdate: *const fn(
            self: *const IShellUIHelper6,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msStartPeriodicTileUpdate: *const fn(
            self: *const IShellUIHelper6,
            pollingUris: VARIANT,
            startTime: VARIANT,
            uiUpdateRecurrence: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msStartPeriodicTileUpdateBatch: *const fn(
            self: *const IShellUIHelper6,
            pollingUris: VARIANT,
            startTime: VARIANT,
            uiUpdateRecurrence: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msClearTile: *const fn(
            self: *const IShellUIHelper6,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msEnableTileNotificationQueue: *const fn(
            self: *const IShellUIHelper6,
            fChange: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msPinnedSiteState: *const fn(
            self: *const IShellUIHelper6,
            pvarSiteState: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msEnableTileNotificationQueueForSquare150x150: *const fn(
            self: *const IShellUIHelper6,
            fChange: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msEnableTileNotificationQueueForWide310x150: *const fn(
            self: *const IShellUIHelper6,
            fChange: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msEnableTileNotificationQueueForSquare310x310: *const fn(
            self: *const IShellUIHelper6,
            fChange: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msScheduledTileNotification: *const fn(
            self: *const IShellUIHelper6,
            bstrNotificationXml: ?BSTR,
            bstrNotificationId: ?BSTR,
            bstrNotificationTag: ?BSTR,
            startTime: VARIANT,
            expirationTime: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msRemoveScheduledTileNotification: *const fn(
            self: *const IShellUIHelper6,
            bstrNotificationId: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msStartPeriodicBadgeUpdate: *const fn(
            self: *const IShellUIHelper6,
            pollingUri: ?BSTR,
            startTime: VARIANT,
            uiUpdateRecurrence: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msStopPeriodicBadgeUpdate: *const fn(
            self: *const IShellUIHelper6,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msLaunchInternetOptions: *const fn(
            self: *const IShellUIHelper6,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IShellUIHelper5: IShellUIHelper5,
    IShellUIHelper4: IShellUIHelper4,
    IShellUIHelper3: IShellUIHelper3,
    IShellUIHelper2: IShellUIHelper2,
    IShellUIHelper: IShellUIHelper,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn msStopPeriodicTileUpdate(self: *const IShellUIHelper6) callconv(.Inline) HRESULT {
        return self.vtable.msStopPeriodicTileUpdate(self);
    }
    pub fn msStartPeriodicTileUpdate(self: *const IShellUIHelper6, pollingUris: VARIANT, startTime: VARIANT, uiUpdateRecurrence: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.msStartPeriodicTileUpdate(self, pollingUris, startTime, uiUpdateRecurrence);
    }
    pub fn msStartPeriodicTileUpdateBatch(self: *const IShellUIHelper6, pollingUris: VARIANT, startTime: VARIANT, uiUpdateRecurrence: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.msStartPeriodicTileUpdateBatch(self, pollingUris, startTime, uiUpdateRecurrence);
    }
    pub fn msClearTile(self: *const IShellUIHelper6) callconv(.Inline) HRESULT {
        return self.vtable.msClearTile(self);
    }
    pub fn msEnableTileNotificationQueue(self: *const IShellUIHelper6, fChange: i16) callconv(.Inline) HRESULT {
        return self.vtable.msEnableTileNotificationQueue(self, fChange);
    }
    pub fn msPinnedSiteState(self: *const IShellUIHelper6, pvarSiteState: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.msPinnedSiteState(self, pvarSiteState);
    }
    pub fn msEnableTileNotificationQueueForSquare150x150(self: *const IShellUIHelper6, fChange: i16) callconv(.Inline) HRESULT {
        return self.vtable.msEnableTileNotificationQueueForSquare150x150(self, fChange);
    }
    pub fn msEnableTileNotificationQueueForWide310x150(self: *const IShellUIHelper6, fChange: i16) callconv(.Inline) HRESULT {
        return self.vtable.msEnableTileNotificationQueueForWide310x150(self, fChange);
    }
    pub fn msEnableTileNotificationQueueForSquare310x310(self: *const IShellUIHelper6, fChange: i16) callconv(.Inline) HRESULT {
        return self.vtable.msEnableTileNotificationQueueForSquare310x310(self, fChange);
    }
    pub fn msScheduledTileNotification(self: *const IShellUIHelper6, bstrNotificationXml: ?BSTR, bstrNotificationId: ?BSTR, bstrNotificationTag: ?BSTR, startTime: VARIANT, expirationTime: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.msScheduledTileNotification(self, bstrNotificationXml, bstrNotificationId, bstrNotificationTag, startTime, expirationTime);
    }
    pub fn msRemoveScheduledTileNotification(self: *const IShellUIHelper6, bstrNotificationId: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.msRemoveScheduledTileNotification(self, bstrNotificationId);
    }
    pub fn msStartPeriodicBadgeUpdate(self: *const IShellUIHelper6, pollingUri: ?BSTR, startTime: VARIANT, uiUpdateRecurrence: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.msStartPeriodicBadgeUpdate(self, pollingUri, startTime, uiUpdateRecurrence);
    }
    pub fn msStopPeriodicBadgeUpdate(self: *const IShellUIHelper6) callconv(.Inline) HRESULT {
        return self.vtable.msStopPeriodicBadgeUpdate(self);
    }
    pub fn msLaunchInternetOptions(self: *const IShellUIHelper6) callconv(.Inline) HRESULT {
        return self.vtable.msLaunchInternetOptions(self);
    }
};

const IID_IShellUIHelper7_Value = Guid.initString("60e567c8-9573-4ab2-a264-637c6c161cb1");
pub const IID_IShellUIHelper7 = &IID_IShellUIHelper7_Value;
pub const IShellUIHelper7 = extern union {
    pub const VTable = extern struct {
        base: IShellUIHelper6.VTable,
        SetExperimentalFlag: *const fn(
            self: *const IShellUIHelper7,
            bstrFlagString: ?BSTR,
            vfFlag: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExperimentalFlag: *const fn(
            self: *const IShellUIHelper7,
            bstrFlagString: ?BSTR,
            vfFlag: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetExperimentalValue: *const fn(
            self: *const IShellUIHelper7,
            bstrValueString: ?BSTR,
            dwValue: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExperimentalValue: *const fn(
            self: *const IShellUIHelper7,
            bstrValueString: ?BSTR,
            pdwValue: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetAllExperimentalFlagsAndValues: *const fn(
            self: *const IShellUIHelper7,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNeedIEAutoLaunchFlag: *const fn(
            self: *const IShellUIHelper7,
            bstrUrl: ?BSTR,
            flag: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNeedIEAutoLaunchFlag: *const fn(
            self: *const IShellUIHelper7,
            bstrUrl: ?BSTR,
            flag: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasNeedIEAutoLaunchFlag: *const fn(
            self: *const IShellUIHelper7,
            bstrUrl: ?BSTR,
            exists: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LaunchIE: *const fn(
            self: *const IShellUIHelper7,
            bstrUrl: ?BSTR,
            automated: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IShellUIHelper6: IShellUIHelper6,
    IShellUIHelper5: IShellUIHelper5,
    IShellUIHelper4: IShellUIHelper4,
    IShellUIHelper3: IShellUIHelper3,
    IShellUIHelper2: IShellUIHelper2,
    IShellUIHelper: IShellUIHelper,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn SetExperimentalFlag(self: *const IShellUIHelper7, bstrFlagString: ?BSTR, vfFlag: i16) callconv(.Inline) HRESULT {
        return self.vtable.SetExperimentalFlag(self, bstrFlagString, vfFlag);
    }
    pub fn GetExperimentalFlag(self: *const IShellUIHelper7, bstrFlagString: ?BSTR, vfFlag: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.GetExperimentalFlag(self, bstrFlagString, vfFlag);
    }
    pub fn SetExperimentalValue(self: *const IShellUIHelper7, bstrValueString: ?BSTR, dwValue: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetExperimentalValue(self, bstrValueString, dwValue);
    }
    pub fn GetExperimentalValue(self: *const IShellUIHelper7, bstrValueString: ?BSTR, pdwValue: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetExperimentalValue(self, bstrValueString, pdwValue);
    }
    pub fn ResetAllExperimentalFlagsAndValues(self: *const IShellUIHelper7) callconv(.Inline) HRESULT {
        return self.vtable.ResetAllExperimentalFlagsAndValues(self);
    }
    pub fn GetNeedIEAutoLaunchFlag(self: *const IShellUIHelper7, bstrUrl: ?BSTR, flag: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.GetNeedIEAutoLaunchFlag(self, bstrUrl, flag);
    }
    pub fn SetNeedIEAutoLaunchFlag(self: *const IShellUIHelper7, bstrUrl: ?BSTR, flag: i16) callconv(.Inline) HRESULT {
        return self.vtable.SetNeedIEAutoLaunchFlag(self, bstrUrl, flag);
    }
    pub fn HasNeedIEAutoLaunchFlag(self: *const IShellUIHelper7, bstrUrl: ?BSTR, exists: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.HasNeedIEAutoLaunchFlag(self, bstrUrl, exists);
    }
    pub fn LaunchIE(self: *const IShellUIHelper7, bstrUrl: ?BSTR, automated: i16) callconv(.Inline) HRESULT {
        return self.vtable.LaunchIE(self, bstrUrl, automated);
    }
};

const IID_IShellUIHelper8_Value = Guid.initString("66debcf2-05b0-4f07-b49b-b96241a65db2");
pub const IID_IShellUIHelper8 = &IID_IShellUIHelper8_Value;
pub const IShellUIHelper8 = extern union {
    pub const VTable = extern struct {
        base: IShellUIHelper7.VTable,
        GetCVListData: *const fn(
            self: *const IShellUIHelper8,
            pbstrResult: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCVListLocalData: *const fn(
            self: *const IShellUIHelper8,
            pbstrResult: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEMIEListData: *const fn(
            self: *const IShellUIHelper8,
            pbstrResult: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEMIEListLocalData: *const fn(
            self: *const IShellUIHelper8,
            pbstrResult: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenFavoritesPane: *const fn(
            self: *const IShellUIHelper8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenFavoritesSettings: *const fn(
            self: *const IShellUIHelper8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LaunchInHVSI: *const fn(
            self: *const IShellUIHelper8,
            bstrUrl: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IShellUIHelper7: IShellUIHelper7,
    IShellUIHelper6: IShellUIHelper6,
    IShellUIHelper5: IShellUIHelper5,
    IShellUIHelper4: IShellUIHelper4,
    IShellUIHelper3: IShellUIHelper3,
    IShellUIHelper2: IShellUIHelper2,
    IShellUIHelper: IShellUIHelper,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GetCVListData(self: *const IShellUIHelper8, pbstrResult: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetCVListData(self, pbstrResult);
    }
    pub fn GetCVListLocalData(self: *const IShellUIHelper8, pbstrResult: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetCVListLocalData(self, pbstrResult);
    }
    pub fn GetEMIEListData(self: *const IShellUIHelper8, pbstrResult: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetEMIEListData(self, pbstrResult);
    }
    pub fn GetEMIEListLocalData(self: *const IShellUIHelper8, pbstrResult: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetEMIEListLocalData(self, pbstrResult);
    }
    pub fn OpenFavoritesPane(self: *const IShellUIHelper8) callconv(.Inline) HRESULT {
        return self.vtable.OpenFavoritesPane(self);
    }
    pub fn OpenFavoritesSettings(self: *const IShellUIHelper8) callconv(.Inline) HRESULT {
        return self.vtable.OpenFavoritesSettings(self);
    }
    pub fn LaunchInHVSI(self: *const IShellUIHelper8, bstrUrl: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.LaunchInHVSI(self, bstrUrl);
    }
};

const IID_IShellUIHelper9_Value = Guid.initString("6cdf73b0-7f2f-451f-bc0f-63e0f3284e54");
pub const IID_IShellUIHelper9 = &IID_IShellUIHelper9_Value;
pub const IShellUIHelper9 = extern union {
    pub const VTable = extern struct {
        base: IShellUIHelper8.VTable,
        GetOSSku: *const fn(
            self: *const IShellUIHelper9,
            pdwResult: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IShellUIHelper8: IShellUIHelper8,
    IShellUIHelper7: IShellUIHelper7,
    IShellUIHelper6: IShellUIHelper6,
    IShellUIHelper5: IShellUIHelper5,
    IShellUIHelper4: IShellUIHelper4,
    IShellUIHelper3: IShellUIHelper3,
    IShellUIHelper2: IShellUIHelper2,
    IShellUIHelper: IShellUIHelper,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GetOSSku(self: *const IShellUIHelper9, pdwResult: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetOSSku(self, pdwResult);
    }
};

const IID_DShellNameSpaceEvents_Value = Guid.initString("55136806-b2de-11d1-b9f2-00a0c98bc547");
pub const IID_DShellNameSpaceEvents = &IID_DShellNameSpaceEvents_Value;
pub const DShellNameSpaceEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_IShellFavoritesNameSpace_Value = Guid.initString("55136804-b2de-11d1-b9f2-00a0c98bc547");
pub const IID_IShellFavoritesNameSpace = &IID_IShellFavoritesNameSpace_Value;
pub const IShellFavoritesNameSpace = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        MoveSelectionUp: *const fn(
            self: *const IShellFavoritesNameSpace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveSelectionDown: *const fn(
            self: *const IShellFavoritesNameSpace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetSort: *const fn(
            self: *const IShellFavoritesNameSpace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NewFolder: *const fn(
            self: *const IShellFavoritesNameSpace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Synchronize: *const fn(
            self: *const IShellFavoritesNameSpace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Import: *const fn(
            self: *const IShellFavoritesNameSpace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Export: *const fn(
            self: *const IShellFavoritesNameSpace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeContextMenuCommand: *const fn(
            self: *const IShellFavoritesNameSpace,
            strCommand: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveSelectionTo: *const fn(
            self: *const IShellFavoritesNameSpace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SubscriptionsEnabled: *const fn(
            self: *const IShellFavoritesNameSpace,
            pBool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSubscriptionForSelection: *const fn(
            self: *const IShellFavoritesNameSpace,
            pBool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteSubscriptionForSelection: *const fn(
            self: *const IShellFavoritesNameSpace,
            pBool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRoot: *const fn(
            self: *const IShellFavoritesNameSpace,
            bstrFullPath: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn MoveSelectionUp(self: *const IShellFavoritesNameSpace) callconv(.Inline) HRESULT {
        return self.vtable.MoveSelectionUp(self);
    }
    pub fn MoveSelectionDown(self: *const IShellFavoritesNameSpace) callconv(.Inline) HRESULT {
        return self.vtable.MoveSelectionDown(self);
    }
    pub fn ResetSort(self: *const IShellFavoritesNameSpace) callconv(.Inline) HRESULT {
        return self.vtable.ResetSort(self);
    }
    pub fn NewFolder(self: *const IShellFavoritesNameSpace) callconv(.Inline) HRESULT {
        return self.vtable.NewFolder(self);
    }
    pub fn Synchronize(self: *const IShellFavoritesNameSpace) callconv(.Inline) HRESULT {
        return self.vtable.Synchronize(self);
    }
    pub fn Import(self: *const IShellFavoritesNameSpace) callconv(.Inline) HRESULT {
        return self.vtable.Import(self);
    }
    pub fn Export(self: *const IShellFavoritesNameSpace) callconv(.Inline) HRESULT {
        return self.vtable.Export(self);
    }
    pub fn InvokeContextMenuCommand(self: *const IShellFavoritesNameSpace, strCommand: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InvokeContextMenuCommand(self, strCommand);
    }
    pub fn MoveSelectionTo(self: *const IShellFavoritesNameSpace) callconv(.Inline) HRESULT {
        return self.vtable.MoveSelectionTo(self);
    }
    pub fn get_SubscriptionsEnabled(self: *const IShellFavoritesNameSpace, pBool: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_SubscriptionsEnabled(self, pBool);
    }
    pub fn CreateSubscriptionForSelection(self: *const IShellFavoritesNameSpace, pBool: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.CreateSubscriptionForSelection(self, pBool);
    }
    pub fn DeleteSubscriptionForSelection(self: *const IShellFavoritesNameSpace, pBool: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.DeleteSubscriptionForSelection(self, pBool);
    }
    pub fn SetRoot(self: *const IShellFavoritesNameSpace, bstrFullPath: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.SetRoot(self, bstrFullPath);
    }
};

const IID_IShellNameSpace_Value = Guid.initString("e572d3c9-37be-4ae2-825d-d521763e3108");
pub const IID_IShellNameSpace = &IID_IShellNameSpace_Value;
pub const IShellNameSpace = extern union {
    pub const VTable = extern struct {
        base: IShellFavoritesNameSpace.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnumOptions: *const fn(
            self: *const IShellNameSpace,
            pgrfEnumFlags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EnumOptions: *const fn(
            self: *const IShellNameSpace,
            lVal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SelectedItem: *const fn(
            self: *const IShellNameSpace,
            pItem: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SelectedItem: *const fn(
            self: *const IShellNameSpace,
            pItem: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Root: *const fn(
            self: *const IShellNameSpace,
            pvar: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Root: *const fn(
            self: *const IShellNameSpace,
            @"var": VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Depth: *const fn(
            self: *const IShellNameSpace,
            piDepth: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Depth: *const fn(
            self: *const IShellNameSpace,
            iDepth: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Mode: *const fn(
            self: *const IShellNameSpace,
            puMode: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Mode: *const fn(
            self: *const IShellNameSpace,
            uMode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Flags: *const fn(
            self: *const IShellNameSpace,
            pdwFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Flags: *const fn(
            self: *const IShellNameSpace,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TVFlags: *const fn(
            self: *const IShellNameSpace,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TVFlags: *const fn(
            self: *const IShellNameSpace,
            dwFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Columns: *const fn(
            self: *const IShellNameSpace,
            bstrColumns: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Columns: *const fn(
            self: *const IShellNameSpace,
            bstrColumns: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CountViewTypes: *const fn(
            self: *const IShellNameSpace,
            piTypes: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetViewType: *const fn(
            self: *const IShellNameSpace,
            iType: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectedItems: *const fn(
            self: *const IShellNameSpace,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Expand: *const fn(
            self: *const IShellNameSpace,
            @"var": VARIANT,
            iDepth: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnselectAll: *const fn(
            self: *const IShellNameSpace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IShellFavoritesNameSpace: IShellFavoritesNameSpace,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_EnumOptions(self: *const IShellNameSpace, pgrfEnumFlags: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_EnumOptions(self, pgrfEnumFlags);
    }
    pub fn put_EnumOptions(self: *const IShellNameSpace, lVal: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_EnumOptions(self, lVal);
    }
    pub fn get_SelectedItem(self: *const IShellNameSpace, pItem: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_SelectedItem(self, pItem);
    }
    pub fn put_SelectedItem(self: *const IShellNameSpace, pItem: ?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.put_SelectedItem(self, pItem);
    }
    pub fn get_Root(self: *const IShellNameSpace, pvar: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Root(self, pvar);
    }
    pub fn put_Root(self: *const IShellNameSpace, @"var": VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_Root(self, @"var");
    }
    pub fn get_Depth(self: *const IShellNameSpace, piDepth: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Depth(self, piDepth);
    }
    pub fn put_Depth(self: *const IShellNameSpace, iDepth: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Depth(self, iDepth);
    }
    pub fn get_Mode(self: *const IShellNameSpace, puMode: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_Mode(self, puMode);
    }
    pub fn put_Mode(self: *const IShellNameSpace, uMode: u32) callconv(.Inline) HRESULT {
        return self.vtable.put_Mode(self, uMode);
    }
    pub fn get_Flags(self: *const IShellNameSpace, pdwFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_Flags(self, pdwFlags);
    }
    pub fn put_Flags(self: *const IShellNameSpace, dwFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.put_Flags(self, dwFlags);
    }
    pub fn put_TVFlags(self: *const IShellNameSpace, dwFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.put_TVFlags(self, dwFlags);
    }
    pub fn get_TVFlags(self: *const IShellNameSpace, dwFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_TVFlags(self, dwFlags);
    }
    pub fn get_Columns(self: *const IShellNameSpace, bstrColumns: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Columns(self, bstrColumns);
    }
    pub fn put_Columns(self: *const IShellNameSpace, bstrColumns: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Columns(self, bstrColumns);
    }
    pub fn get_CountViewTypes(self: *const IShellNameSpace, piTypes: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_CountViewTypes(self, piTypes);
    }
    pub fn SetViewType(self: *const IShellNameSpace, iType: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetViewType(self, iType);
    }
    pub fn SelectedItems(self: *const IShellNameSpace, ppid: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.SelectedItems(self, ppid);
    }
    pub fn Expand(self: *const IShellNameSpace, @"var": VARIANT, iDepth: i32) callconv(.Inline) HRESULT {
        return self.vtable.Expand(self, @"var", iDepth);
    }
    pub fn UnselectAll(self: *const IShellNameSpace) callconv(.Inline) HRESULT {
        return self.vtable.UnselectAll(self);
    }
};

const IID_IScriptErrorList_Value = Guid.initString("f3470f24-15fd-11d2-bb2e-00805ff7efca");
pub const IID_IScriptErrorList = &IID_IScriptErrorList_Value;
pub const IScriptErrorList = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        advanceError: *const fn(
            self: *const IScriptErrorList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        retreatError: *const fn(
            self: *const IScriptErrorList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        canAdvanceError: *const fn(
            self: *const IScriptErrorList,
            pfCanAdvance: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        canRetreatError: *const fn(
            self: *const IScriptErrorList,
            pfCanRetreat: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getErrorLine: *const fn(
            self: *const IScriptErrorList,
            plLine: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getErrorChar: *const fn(
            self: *const IScriptErrorList,
            plChar: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getErrorCode: *const fn(
            self: *const IScriptErrorList,
            plCode: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getErrorMsg: *const fn(
            self: *const IScriptErrorList,
            pstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getErrorUrl: *const fn(
            self: *const IScriptErrorList,
            pstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getAlwaysShowLockState: *const fn(
            self: *const IScriptErrorList,
            pfAlwaysShowLocked: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getDetailsPaneOpen: *const fn(
            self: *const IScriptErrorList,
            pfDetailsPaneOpen: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setDetailsPaneOpen: *const fn(
            self: *const IScriptErrorList,
            fDetailsPaneOpen: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getPerErrorDisplay: *const fn(
            self: *const IScriptErrorList,
            pfPerErrorDisplay: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setPerErrorDisplay: *const fn(
            self: *const IScriptErrorList,
            fPerErrorDisplay: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn advanceError(self: *const IScriptErrorList) callconv(.Inline) HRESULT {
        return self.vtable.advanceError(self);
    }
    pub fn retreatError(self: *const IScriptErrorList) callconv(.Inline) HRESULT {
        return self.vtable.retreatError(self);
    }
    pub fn canAdvanceError(self: *const IScriptErrorList, pfCanAdvance: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.canAdvanceError(self, pfCanAdvance);
    }
    pub fn canRetreatError(self: *const IScriptErrorList, pfCanRetreat: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.canRetreatError(self, pfCanRetreat);
    }
    pub fn getErrorLine(self: *const IScriptErrorList, plLine: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.getErrorLine(self, plLine);
    }
    pub fn getErrorChar(self: *const IScriptErrorList, plChar: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.getErrorChar(self, plChar);
    }
    pub fn getErrorCode(self: *const IScriptErrorList, plCode: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.getErrorCode(self, plCode);
    }
    pub fn getErrorMsg(self: *const IScriptErrorList, pstr: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.getErrorMsg(self, pstr);
    }
    pub fn getErrorUrl(self: *const IScriptErrorList, pstr: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.getErrorUrl(self, pstr);
    }
    pub fn getAlwaysShowLockState(self: *const IScriptErrorList, pfAlwaysShowLocked: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.getAlwaysShowLockState(self, pfAlwaysShowLocked);
    }
    pub fn getDetailsPaneOpen(self: *const IScriptErrorList, pfDetailsPaneOpen: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.getDetailsPaneOpen(self, pfDetailsPaneOpen);
    }
    pub fn setDetailsPaneOpen(self: *const IScriptErrorList, fDetailsPaneOpen: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.setDetailsPaneOpen(self, fDetailsPaneOpen);
    }
    pub fn getPerErrorDisplay(self: *const IScriptErrorList, pfPerErrorDisplay: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.getPerErrorDisplay(self, pfPerErrorDisplay);
    }
    pub fn setPerErrorDisplay(self: *const IScriptErrorList, fPerErrorDisplay: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.setPerErrorDisplay(self, fPerErrorDisplay);
    }
};

const CLSID_ShellFolderViewOC_Value = Guid.initString("9ba05971-f6a8-11cf-a442-00a0c90a8f39");
pub const CLSID_ShellFolderViewOC = &CLSID_ShellFolderViewOC_Value;

const CLSID_ShellFolderItem_Value = Guid.initString("2fe352ea-fd1f-11d2-b1f4-00c04f8eeb3e");
pub const CLSID_ShellFolderItem = &CLSID_ShellFolderItem_Value;

const CLSID_ShellLinkObject_Value = Guid.initString("11219420-1768-11d1-95be-00609797ea4f");
pub const CLSID_ShellLinkObject = &CLSID_ShellLinkObject_Value;

const CLSID_ShellFolderView_Value = Guid.initString("62112aa1-ebe4-11cf-a5fb-0020afe7292d");
pub const CLSID_ShellFolderView = &CLSID_ShellFolderView_Value;

const CLSID_Shell_Value = Guid.initString("13709620-c279-11ce-a49e-444553540000");
pub const CLSID_Shell = &CLSID_Shell_Value;

const CLSID_ShellDispatchInproc_Value = Guid.initString("0a89a860-d7b1-11ce-8350-444553540000");
pub const CLSID_ShellDispatchInproc = &CLSID_ShellDispatchInproc_Value;

const CLSID_FileSearchBand_Value = Guid.initString("c4ee31f3-4768-11d2-be5c-00a0c9a83da1");
pub const CLSID_FileSearchBand = &CLSID_FileSearchBand_Value;

pub const OfflineFolderStatus = enum(i32) {
    INACTIVE = -1,
    ONLINE = 0,
    OFFLINE = 1,
    SERVERBACK = 2,
    DIRTYCACHE = 3,
};
pub const OFS_INACTIVE = OfflineFolderStatus.INACTIVE;
pub const OFS_ONLINE = OfflineFolderStatus.ONLINE;
pub const OFS_OFFLINE = OfflineFolderStatus.OFFLINE;
pub const OFS_SERVERBACK = OfflineFolderStatus.SERVERBACK;
pub const OFS_DIRTYCACHE = OfflineFolderStatus.DIRTYCACHE;

pub const ShellFolderViewOptions = enum(i32) {
    SHOWALLOBJECTS = 1,
    SHOWEXTENSIONS = 2,
    SHOWCOMPCOLOR = 8,
    SHOWSYSFILES = 32,
    WIN95CLASSIC = 64,
    DOUBLECLICKINWEBVIEW = 128,
    DESKTOPHTML = 512,
};
pub const SFVVO_SHOWALLOBJECTS = ShellFolderViewOptions.SHOWALLOBJECTS;
pub const SFVVO_SHOWEXTENSIONS = ShellFolderViewOptions.SHOWEXTENSIONS;
pub const SFVVO_SHOWCOMPCOLOR = ShellFolderViewOptions.SHOWCOMPCOLOR;
pub const SFVVO_SHOWSYSFILES = ShellFolderViewOptions.SHOWSYSFILES;
pub const SFVVO_WIN95CLASSIC = ShellFolderViewOptions.WIN95CLASSIC;
pub const SFVVO_DOUBLECLICKINWEBVIEW = ShellFolderViewOptions.DOUBLECLICKINWEBVIEW;
pub const SFVVO_DESKTOPHTML = ShellFolderViewOptions.DESKTOPHTML;

pub const ShellSpecialFolderConstants = enum(i32) {
    DESKTOP = 0,
    PROGRAMS = 2,
    CONTROLS = 3,
    PRINTERS = 4,
    PERSONAL = 5,
    FAVORITES = 6,
    STARTUP = 7,
    RECENT = 8,
    SENDTO = 9,
    BITBUCKET = 10,
    STARTMENU = 11,
    DESKTOPDIRECTORY = 16,
    DRIVES = 17,
    NETWORK = 18,
    NETHOOD = 19,
    FONTS = 20,
    TEMPLATES = 21,
    COMMONSTARTMENU = 22,
    COMMONPROGRAMS = 23,
    COMMONSTARTUP = 24,
    COMMONDESKTOPDIR = 25,
    APPDATA = 26,
    PRINTHOOD = 27,
    LOCALAPPDATA = 28,
    ALTSTARTUP = 29,
    COMMONALTSTARTUP = 30,
    COMMONFAVORITES = 31,
    INTERNETCACHE = 32,
    COOKIES = 33,
    HISTORY = 34,
    COMMONAPPDATA = 35,
    WINDOWS = 36,
    SYSTEM = 37,
    PROGRAMFILES = 38,
    MYPICTURES = 39,
    PROFILE = 40,
    SYSTEMx86 = 41,
    PROGRAMFILESx86 = 48,
};
pub const ssfDESKTOP = ShellSpecialFolderConstants.DESKTOP;
pub const ssfPROGRAMS = ShellSpecialFolderConstants.PROGRAMS;
pub const ssfCONTROLS = ShellSpecialFolderConstants.CONTROLS;
pub const ssfPRINTERS = ShellSpecialFolderConstants.PRINTERS;
pub const ssfPERSONAL = ShellSpecialFolderConstants.PERSONAL;
pub const ssfFAVORITES = ShellSpecialFolderConstants.FAVORITES;
pub const ssfSTARTUP = ShellSpecialFolderConstants.STARTUP;
pub const ssfRECENT = ShellSpecialFolderConstants.RECENT;
pub const ssfSENDTO = ShellSpecialFolderConstants.SENDTO;
pub const ssfBITBUCKET = ShellSpecialFolderConstants.BITBUCKET;
pub const ssfSTARTMENU = ShellSpecialFolderConstants.STARTMENU;
pub const ssfDESKTOPDIRECTORY = ShellSpecialFolderConstants.DESKTOPDIRECTORY;
pub const ssfDRIVES = ShellSpecialFolderConstants.DRIVES;
pub const ssfNETWORK = ShellSpecialFolderConstants.NETWORK;
pub const ssfNETHOOD = ShellSpecialFolderConstants.NETHOOD;
pub const ssfFONTS = ShellSpecialFolderConstants.FONTS;
pub const ssfTEMPLATES = ShellSpecialFolderConstants.TEMPLATES;
pub const ssfCOMMONSTARTMENU = ShellSpecialFolderConstants.COMMONSTARTMENU;
pub const ssfCOMMONPROGRAMS = ShellSpecialFolderConstants.COMMONPROGRAMS;
pub const ssfCOMMONSTARTUP = ShellSpecialFolderConstants.COMMONSTARTUP;
pub const ssfCOMMONDESKTOPDIR = ShellSpecialFolderConstants.COMMONDESKTOPDIR;
pub const ssfAPPDATA = ShellSpecialFolderConstants.APPDATA;
pub const ssfPRINTHOOD = ShellSpecialFolderConstants.PRINTHOOD;
pub const ssfLOCALAPPDATA = ShellSpecialFolderConstants.LOCALAPPDATA;
pub const ssfALTSTARTUP = ShellSpecialFolderConstants.ALTSTARTUP;
pub const ssfCOMMONALTSTARTUP = ShellSpecialFolderConstants.COMMONALTSTARTUP;
pub const ssfCOMMONFAVORITES = ShellSpecialFolderConstants.COMMONFAVORITES;
pub const ssfINTERNETCACHE = ShellSpecialFolderConstants.INTERNETCACHE;
pub const ssfCOOKIES = ShellSpecialFolderConstants.COOKIES;
pub const ssfHISTORY = ShellSpecialFolderConstants.HISTORY;
pub const ssfCOMMONAPPDATA = ShellSpecialFolderConstants.COMMONAPPDATA;
pub const ssfWINDOWS = ShellSpecialFolderConstants.WINDOWS;
pub const ssfSYSTEM = ShellSpecialFolderConstants.SYSTEM;
pub const ssfPROGRAMFILES = ShellSpecialFolderConstants.PROGRAMFILES;
pub const ssfMYPICTURES = ShellSpecialFolderConstants.MYPICTURES;
pub const ssfPROFILE = ShellSpecialFolderConstants.PROFILE;
pub const ssfSYSTEMx86 = ShellSpecialFolderConstants.SYSTEMx86;
pub const ssfPROGRAMFILESx86 = ShellSpecialFolderConstants.PROGRAMFILESx86;

const IID_IFolderViewOC_Value = Guid.initString("9ba05970-f6a8-11cf-a442-00a0c90a8f39");
pub const IID_IFolderViewOC = &IID_IFolderViewOC_Value;
pub const IFolderViewOC = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        SetFolderView: *const fn(
            self: *const IFolderViewOC,
            pdisp: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn SetFolderView(self: *const IFolderViewOC, pdisp: ?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.SetFolderView(self, pdisp);
    }
};

const IID_DShellFolderViewEvents_Value = Guid.initString("62112aa2-ebe4-11cf-a5fb-0020afe7292d");
pub const IID_DShellFolderViewEvents = &IID_DShellFolderViewEvents_Value;
pub const DShellFolderViewEvents = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
};

const IID_DFConstraint_Value = Guid.initString("4a3df050-23bd-11d2-939f-00a0c91eedba");
pub const IID_DFConstraint = &IID_DFConstraint_Value;
pub const DFConstraint = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn(
            self: *const DFConstraint,
            pbs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn(
            self: *const DFConstraint,
            pv: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Name(self: *const DFConstraint, pbs: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Name(self, pbs);
    }
    pub fn get_Value(self: *const DFConstraint, pv: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Value(self, pv);
    }
};

const IID_FolderItem_Value = Guid.initString("fac32c80-cbe4-11ce-8350-444553540000");
pub const IID_FolderItem = &IID_FolderItem_Value;
pub const FolderItem = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Application: *const fn(
            self: *const FolderItem,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parent: *const fn(
            self: *const FolderItem,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn(
            self: *const FolderItem,
            pbs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn(
            self: *const FolderItem,
            bs: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn(
            self: *const FolderItem,
            pbs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GetLink: *const fn(
            self: *const FolderItem,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GetFolder: *const fn(
            self: *const FolderItem,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsLink: *const fn(
            self: *const FolderItem,
            pb: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsFolder: *const fn(
            self: *const FolderItem,
            pb: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsFileSystem: *const fn(
            self: *const FolderItem,
            pb: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsBrowsable: *const fn(
            self: *const FolderItem,
            pb: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ModifyDate: *const fn(
            self: *const FolderItem,
            pdt: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ModifyDate: *const fn(
            self: *const FolderItem,
            dt: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Size: *const fn(
            self: *const FolderItem,
            pul: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn(
            self: *const FolderItem,
            pbs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Verbs: *const fn(
            self: *const FolderItem,
            ppfic: ?*?*FolderItemVerbs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeVerb: *const fn(
            self: *const FolderItem,
            vVerb: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Application(self: *const FolderItem, ppid: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Application(self, ppid);
    }
    pub fn get_Parent(self: *const FolderItem, ppid: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Parent(self, ppid);
    }
    pub fn get_Name(self: *const FolderItem, pbs: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Name(self, pbs);
    }
    pub fn put_Name(self: *const FolderItem, bs: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Name(self, bs);
    }
    pub fn get_Path(self: *const FolderItem, pbs: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Path(self, pbs);
    }
    pub fn get_GetLink(self: *const FolderItem, ppid: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_GetLink(self, ppid);
    }
    pub fn get_GetFolder(self: *const FolderItem, ppid: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_GetFolder(self, ppid);
    }
    pub fn get_IsLink(self: *const FolderItem, pb: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsLink(self, pb);
    }
    pub fn get_IsFolder(self: *const FolderItem, pb: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsFolder(self, pb);
    }
    pub fn get_IsFileSystem(self: *const FolderItem, pb: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsFileSystem(self, pb);
    }
    pub fn get_IsBrowsable(self: *const FolderItem, pb: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsBrowsable(self, pb);
    }
    pub fn get_ModifyDate(self: *const FolderItem, pdt: ?*f64) callconv(.Inline) HRESULT {
        return self.vtable.get_ModifyDate(self, pdt);
    }
    pub fn put_ModifyDate(self: *const FolderItem, dt: f64) callconv(.Inline) HRESULT {
        return self.vtable.put_ModifyDate(self, dt);
    }
    pub fn get_Size(self: *const FolderItem, pul: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Size(self, pul);
    }
    pub fn get_Type(self: *const FolderItem, pbs: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Type(self, pbs);
    }
    pub fn Verbs(self: *const FolderItem, ppfic: ?*?*FolderItemVerbs) callconv(.Inline) HRESULT {
        return self.vtable.Verbs(self, ppfic);
    }
    pub fn InvokeVerb(self: *const FolderItem, vVerb: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.InvokeVerb(self, vVerb);
    }
};

const IID_FolderItems_Value = Guid.initString("744129e0-cbe5-11ce-8350-444553540000");
pub const IID_FolderItems = &IID_FolderItems_Value;
pub const FolderItems = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const FolderItems,
            plCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Application: *const fn(
            self: *const FolderItems,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parent: *const fn(
            self: *const FolderItems,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn(
            self: *const FolderItems,
            index: VARIANT,
            ppid: ?*?*FolderItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _NewEnum: *const fn(
            self: *const FolderItems,
            ppunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Count(self: *const FolderItems, plCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, plCount);
    }
    pub fn get_Application(self: *const FolderItems, ppid: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Application(self, ppid);
    }
    pub fn get_Parent(self: *const FolderItems, ppid: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Parent(self, ppid);
    }
    pub fn Item(self: *const FolderItems, index: VARIANT, ppid: ?*?*FolderItem) callconv(.Inline) HRESULT {
        return self.vtable.Item(self, index, ppid);
    }
    pub fn _NewEnum(self: *const FolderItems, ppunk: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable._NewEnum(self, ppunk);
    }
};

const IID_FolderItemVerb_Value = Guid.initString("08ec3e00-50b0-11cf-960c-0080c7f4ee85");
pub const IID_FolderItemVerb = &IID_FolderItemVerb_Value;
pub const FolderItemVerb = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Application: *const fn(
            self: *const FolderItemVerb,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parent: *const fn(
            self: *const FolderItemVerb,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn(
            self: *const FolderItemVerb,
            pbs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoIt: *const fn(
            self: *const FolderItemVerb,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Application(self: *const FolderItemVerb, ppid: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Application(self, ppid);
    }
    pub fn get_Parent(self: *const FolderItemVerb, ppid: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Parent(self, ppid);
    }
    pub fn get_Name(self: *const FolderItemVerb, pbs: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Name(self, pbs);
    }
    pub fn DoIt(self: *const FolderItemVerb) callconv(.Inline) HRESULT {
        return self.vtable.DoIt(self);
    }
};

const IID_FolderItemVerbs_Value = Guid.initString("1f8352c0-50b0-11cf-960c-0080c7f4ee85");
pub const IID_FolderItemVerbs = &IID_FolderItemVerbs_Value;
pub const FolderItemVerbs = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const FolderItemVerbs,
            plCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Application: *const fn(
            self: *const FolderItemVerbs,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parent: *const fn(
            self: *const FolderItemVerbs,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn(
            self: *const FolderItemVerbs,
            index: VARIANT,
            ppid: ?*?*FolderItemVerb,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _NewEnum: *const fn(
            self: *const FolderItemVerbs,
            ppunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Count(self: *const FolderItemVerbs, plCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, plCount);
    }
    pub fn get_Application(self: *const FolderItemVerbs, ppid: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Application(self, ppid);
    }
    pub fn get_Parent(self: *const FolderItemVerbs, ppid: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Parent(self, ppid);
    }
    pub fn Item(self: *const FolderItemVerbs, index: VARIANT, ppid: ?*?*FolderItemVerb) callconv(.Inline) HRESULT {
        return self.vtable.Item(self, index, ppid);
    }
    pub fn _NewEnum(self: *const FolderItemVerbs, ppunk: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable._NewEnum(self, ppunk);
    }
};

const IID_Folder_Value = Guid.initString("bbcbde60-c3ff-11ce-8350-444553540000");
pub const IID_Folder = &IID_Folder_Value;
pub const Folder = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Title: *const fn(
            self: *const Folder,
            pbs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Application: *const fn(
            self: *const Folder,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parent: *const fn(
            self: *const Folder,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ParentFolder: *const fn(
            self: *const Folder,
            ppsf: ?*?*Folder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Items: *const fn(
            self: *const Folder,
            ppid: ?*?*FolderItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ParseName: *const fn(
            self: *const Folder,
            bName: ?BSTR,
            ppid: ?*?*FolderItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NewFolder: *const fn(
            self: *const Folder,
            bName: ?BSTR,
            vOptions: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveHere: *const fn(
            self: *const Folder,
            vItem: VARIANT,
            vOptions: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyHere: *const fn(
            self: *const Folder,
            vItem: VARIANT,
            vOptions: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDetailsOf: *const fn(
            self: *const Folder,
            vItem: VARIANT,
            iColumn: i32,
            pbs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Title(self: *const Folder, pbs: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Title(self, pbs);
    }
    pub fn get_Application(self: *const Folder, ppid: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Application(self, ppid);
    }
    pub fn get_Parent(self: *const Folder, ppid: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Parent(self, ppid);
    }
    pub fn get_ParentFolder(self: *const Folder, ppsf: ?*?*Folder) callconv(.Inline) HRESULT {
        return self.vtable.get_ParentFolder(self, ppsf);
    }
    pub fn Items(self: *const Folder, ppid: ?*?*FolderItems) callconv(.Inline) HRESULT {
        return self.vtable.Items(self, ppid);
    }
    pub fn ParseName(self: *const Folder, bName: ?BSTR, ppid: ?*?*FolderItem) callconv(.Inline) HRESULT {
        return self.vtable.ParseName(self, bName, ppid);
    }
    pub fn NewFolder(self: *const Folder, bName: ?BSTR, vOptions: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.NewFolder(self, bName, vOptions);
    }
    pub fn MoveHere(self: *const Folder, vItem: VARIANT, vOptions: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.MoveHere(self, vItem, vOptions);
    }
    pub fn CopyHere(self: *const Folder, vItem: VARIANT, vOptions: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.CopyHere(self, vItem, vOptions);
    }
    pub fn GetDetailsOf(self: *const Folder, vItem: VARIANT, iColumn: i32, pbs: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetDetailsOf(self, vItem, iColumn, pbs);
    }
};

const IID_Folder2_Value = Guid.initString("f0d2d8ef-3890-11d2-bf8b-00c04fb93661");
pub const IID_Folder2 = &IID_Folder2_Value;
pub const Folder2 = extern union {
    pub const VTable = extern struct {
        base: Folder.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Self: *const fn(
            self: *const Folder2,
            ppfi: ?*?*FolderItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OfflineStatus: *const fn(
            self: *const Folder2,
            pul: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Synchronize: *const fn(
            self: *const Folder2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HaveToShowWebViewBarricade: *const fn(
            self: *const Folder2,
            pbHaveToShowWebViewBarricade: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DismissedWebViewBarricade: *const fn(
            self: *const Folder2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    Folder: Folder,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Self(self: *const Folder2, ppfi: ?*?*FolderItem) callconv(.Inline) HRESULT {
        return self.vtable.get_Self(self, ppfi);
    }
    pub fn get_OfflineStatus(self: *const Folder2, pul: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_OfflineStatus(self, pul);
    }
    pub fn Synchronize(self: *const Folder2) callconv(.Inline) HRESULT {
        return self.vtable.Synchronize(self);
    }
    pub fn get_HaveToShowWebViewBarricade(self: *const Folder2, pbHaveToShowWebViewBarricade: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_HaveToShowWebViewBarricade(self, pbHaveToShowWebViewBarricade);
    }
    pub fn DismissedWebViewBarricade(self: *const Folder2) callconv(.Inline) HRESULT {
        return self.vtable.DismissedWebViewBarricade(self);
    }
};

const IID_Folder3_Value = Guid.initString("a7ae5f64-c4d7-4d7f-9307-4d24ee54b841");
pub const IID_Folder3 = &IID_Folder3_Value;
pub const Folder3 = extern union {
    pub const VTable = extern struct {
        base: Folder2.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowWebViewBarricade: *const fn(
            self: *const Folder3,
            pbShowWebViewBarricade: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowWebViewBarricade: *const fn(
            self: *const Folder3,
            bShowWebViewBarricade: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    Folder2: Folder2,
    Folder: Folder,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ShowWebViewBarricade(self: *const Folder3, pbShowWebViewBarricade: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_ShowWebViewBarricade(self, pbShowWebViewBarricade);
    }
    pub fn put_ShowWebViewBarricade(self: *const Folder3, bShowWebViewBarricade: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_ShowWebViewBarricade(self, bShowWebViewBarricade);
    }
};

const IID_FolderItem2_Value = Guid.initString("edc817aa-92b8-11d1-b075-00c04fc33aa5");
pub const IID_FolderItem2 = &IID_FolderItem2_Value;
pub const FolderItem2 = extern union {
    pub const VTable = extern struct {
        base: FolderItem.VTable,
        InvokeVerbEx: *const fn(
            self: *const FolderItem2,
            vVerb: VARIANT,
            vArgs: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExtendedProperty: *const fn(
            self: *const FolderItem2,
            bstrPropName: ?BSTR,
            pvRet: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    FolderItem: FolderItem,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InvokeVerbEx(self: *const FolderItem2, vVerb: VARIANT, vArgs: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.InvokeVerbEx(self, vVerb, vArgs);
    }
    pub fn ExtendedProperty(self: *const FolderItem2, bstrPropName: ?BSTR, pvRet: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.ExtendedProperty(self, bstrPropName, pvRet);
    }
};

const IID_FolderItems2_Value = Guid.initString("c94f0ad0-f363-11d2-a327-00c04f8eec7f");
pub const IID_FolderItems2 = &IID_FolderItems2_Value;
pub const FolderItems2 = extern union {
    pub const VTable = extern struct {
        base: FolderItems.VTable,
        InvokeVerbEx: *const fn(
            self: *const FolderItems2,
            vVerb: VARIANT,
            vArgs: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    FolderItems: FolderItems,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InvokeVerbEx(self: *const FolderItems2, vVerb: VARIANT, vArgs: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.InvokeVerbEx(self, vVerb, vArgs);
    }
};

const IID_FolderItems3_Value = Guid.initString("eaa7c309-bbec-49d5-821d-64d966cb667f");
pub const IID_FolderItems3 = &IID_FolderItems3_Value;
pub const FolderItems3 = extern union {
    pub const VTable = extern struct {
        base: FolderItems2.VTable,
        Filter: *const fn(
            self: *const FolderItems3,
            grfFlags: i32,
            bstrFileSpec: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Verbs: *const fn(
            self: *const FolderItems3,
            ppfic: ?*?*FolderItemVerbs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    FolderItems2: FolderItems2,
    FolderItems: FolderItems,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Filter(self: *const FolderItems3, grfFlags: i32, bstrFileSpec: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Filter(self, grfFlags, bstrFileSpec);
    }
    pub fn get_Verbs(self: *const FolderItems3, ppfic: ?*?*FolderItemVerbs) callconv(.Inline) HRESULT {
        return self.vtable.get_Verbs(self, ppfic);
    }
};

const IID_IShellLinkDual_Value = Guid.initString("88a05c00-f000-11ce-8350-444553540000");
pub const IID_IShellLinkDual = &IID_IShellLinkDual_Value;
pub const IShellLinkDual = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn(
            self: *const IShellLinkDual,
            pbs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Path: *const fn(
            self: *const IShellLinkDual,
            bs: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn(
            self: *const IShellLinkDual,
            pbs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn(
            self: *const IShellLinkDual,
            bs: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WorkingDirectory: *const fn(
            self: *const IShellLinkDual,
            pbs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_WorkingDirectory: *const fn(
            self: *const IShellLinkDual,
            bs: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Arguments: *const fn(
            self: *const IShellLinkDual,
            pbs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Arguments: *const fn(
            self: *const IShellLinkDual,
            bs: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Hotkey: *const fn(
            self: *const IShellLinkDual,
            piHK: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Hotkey: *const fn(
            self: *const IShellLinkDual,
            iHK: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowCommand: *const fn(
            self: *const IShellLinkDual,
            piShowCommand: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowCommand: *const fn(
            self: *const IShellLinkDual,
            iShowCommand: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resolve: *const fn(
            self: *const IShellLinkDual,
            fFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIconLocation: *const fn(
            self: *const IShellLinkDual,
            pbs: ?*?BSTR,
            piIcon: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIconLocation: *const fn(
            self: *const IShellLinkDual,
            bs: ?BSTR,
            iIcon: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn(
            self: *const IShellLinkDual,
            vWhere: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Path(self: *const IShellLinkDual, pbs: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Path(self, pbs);
    }
    pub fn put_Path(self: *const IShellLinkDual, bs: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Path(self, bs);
    }
    pub fn get_Description(self: *const IShellLinkDual, pbs: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Description(self, pbs);
    }
    pub fn put_Description(self: *const IShellLinkDual, bs: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Description(self, bs);
    }
    pub fn get_WorkingDirectory(self: *const IShellLinkDual, pbs: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_WorkingDirectory(self, pbs);
    }
    pub fn put_WorkingDirectory(self: *const IShellLinkDual, bs: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_WorkingDirectory(self, bs);
    }
    pub fn get_Arguments(self: *const IShellLinkDual, pbs: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Arguments(self, pbs);
    }
    pub fn put_Arguments(self: *const IShellLinkDual, bs: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Arguments(self, bs);
    }
    pub fn get_Hotkey(self: *const IShellLinkDual, piHK: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Hotkey(self, piHK);
    }
    pub fn put_Hotkey(self: *const IShellLinkDual, iHK: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Hotkey(self, iHK);
    }
    pub fn get_ShowCommand(self: *const IShellLinkDual, piShowCommand: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ShowCommand(self, piShowCommand);
    }
    pub fn put_ShowCommand(self: *const IShellLinkDual, iShowCommand: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_ShowCommand(self, iShowCommand);
    }
    pub fn Resolve(self: *const IShellLinkDual, fFlags: i32) callconv(.Inline) HRESULT {
        return self.vtable.Resolve(self, fFlags);
    }
    pub fn GetIconLocation(self: *const IShellLinkDual, pbs: ?*?BSTR, piIcon: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetIconLocation(self, pbs, piIcon);
    }
    pub fn SetIconLocation(self: *const IShellLinkDual, bs: ?BSTR, iIcon: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetIconLocation(self, bs, iIcon);
    }
    pub fn Save(self: *const IShellLinkDual, vWhere: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.Save(self, vWhere);
    }
};

const IID_IShellLinkDual2_Value = Guid.initString("317ee249-f12e-11d2-b1e4-00c04f8eeb3e");
pub const IID_IShellLinkDual2 = &IID_IShellLinkDual2_Value;
pub const IShellLinkDual2 = extern union {
    pub const VTable = extern struct {
        base: IShellLinkDual.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Target: *const fn(
            self: *const IShellLinkDual2,
            ppfi: ?*?*FolderItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IShellLinkDual: IShellLinkDual,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Target(self: *const IShellLinkDual2, ppfi: ?*?*FolderItem) callconv(.Inline) HRESULT {
        return self.vtable.get_Target(self, ppfi);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellFolderViewDual_Value = Guid.initString("e7a1af80-4d96-11cf-960c-0080c7f4ee85");
pub const IID_IShellFolderViewDual = &IID_IShellFolderViewDual_Value;
pub const IShellFolderViewDual = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Application: *const fn(
            self: *const IShellFolderViewDual,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parent: *const fn(
            self: *const IShellFolderViewDual,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Folder: *const fn(
            self: *const IShellFolderViewDual,
            ppid: ?*?*Folder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectedItems: *const fn(
            self: *const IShellFolderViewDual,
            ppid: ?*?*FolderItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FocusedItem: *const fn(
            self: *const IShellFolderViewDual,
            ppid: ?*?*FolderItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectItem: *const fn(
            self: *const IShellFolderViewDual,
            pvfi: ?*VARIANT,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PopupItemMenu: *const fn(
            self: *const IShellFolderViewDual,
            pfi: ?*FolderItem,
            vx: VARIANT,
            vy: VARIANT,
            pbs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Script: *const fn(
            self: *const IShellFolderViewDual,
            ppDisp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ViewOptions: *const fn(
            self: *const IShellFolderViewDual,
            plViewOptions: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Application(self: *const IShellFolderViewDual, ppid: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Application(self, ppid);
    }
    pub fn get_Parent(self: *const IShellFolderViewDual, ppid: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Parent(self, ppid);
    }
    pub fn get_Folder(self: *const IShellFolderViewDual, ppid: ?*?*Folder) callconv(.Inline) HRESULT {
        return self.vtable.get_Folder(self, ppid);
    }
    pub fn SelectedItems(self: *const IShellFolderViewDual, ppid: ?*?*FolderItems) callconv(.Inline) HRESULT {
        return self.vtable.SelectedItems(self, ppid);
    }
    pub fn get_FocusedItem(self: *const IShellFolderViewDual, ppid: ?*?*FolderItem) callconv(.Inline) HRESULT {
        return self.vtable.get_FocusedItem(self, ppid);
    }
    pub fn SelectItem(self: *const IShellFolderViewDual, pvfi: ?*VARIANT, dwFlags: i32) callconv(.Inline) HRESULT {
        return self.vtable.SelectItem(self, pvfi, dwFlags);
    }
    pub fn PopupItemMenu(self: *const IShellFolderViewDual, pfi: ?*FolderItem, vx: VARIANT, vy: VARIANT, pbs: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.PopupItemMenu(self, pfi, vx, vy, pbs);
    }
    pub fn get_Script(self: *const IShellFolderViewDual, ppDisp: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Script(self, ppDisp);
    }
    pub fn get_ViewOptions(self: *const IShellFolderViewDual, plViewOptions: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ViewOptions(self, plViewOptions);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellFolderViewDual2_Value = Guid.initString("31c147b6-0ade-4a3c-b514-ddf932ef6d17");
pub const IID_IShellFolderViewDual2 = &IID_IShellFolderViewDual2_Value;
pub const IShellFolderViewDual2 = extern union {
    pub const VTable = extern struct {
        base: IShellFolderViewDual.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentViewMode: *const fn(
            self: *const IShellFolderViewDual2,
            pViewMode: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CurrentViewMode: *const fn(
            self: *const IShellFolderViewDual2,
            ViewMode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectItemRelative: *const fn(
            self: *const IShellFolderViewDual2,
            iRelative: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IShellFolderViewDual: IShellFolderViewDual,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_CurrentViewMode(self: *const IShellFolderViewDual2, pViewMode: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_CurrentViewMode(self, pViewMode);
    }
    pub fn put_CurrentViewMode(self: *const IShellFolderViewDual2, ViewMode: u32) callconv(.Inline) HRESULT {
        return self.vtable.put_CurrentViewMode(self, ViewMode);
    }
    pub fn SelectItemRelative(self: *const IShellFolderViewDual2, iRelative: i32) callconv(.Inline) HRESULT {
        return self.vtable.SelectItemRelative(self, iRelative);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IShellFolderViewDual3_Value = Guid.initString("29ec8e6c-46d3-411f-baaa-611a6c9cac66");
pub const IID_IShellFolderViewDual3 = &IID_IShellFolderViewDual3_Value;
pub const IShellFolderViewDual3 = extern union {
    pub const VTable = extern struct {
        base: IShellFolderViewDual2.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GroupBy: *const fn(
            self: *const IShellFolderViewDual3,
            pbstrGroupBy: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GroupBy: *const fn(
            self: *const IShellFolderViewDual3,
            bstrGroupBy: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FolderFlags: *const fn(
            self: *const IShellFolderViewDual3,
            pdwFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FolderFlags: *const fn(
            self: *const IShellFolderViewDual3,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SortColumns: *const fn(
            self: *const IShellFolderViewDual3,
            pbstrSortColumns: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SortColumns: *const fn(
            self: *const IShellFolderViewDual3,
            bstrSortColumns: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IconSize: *const fn(
            self: *const IShellFolderViewDual3,
            iIconSize: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IconSize: *const fn(
            self: *const IShellFolderViewDual3,
            piIconSize: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FilterView: *const fn(
            self: *const IShellFolderViewDual3,
            bstrFilterText: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IShellFolderViewDual2: IShellFolderViewDual2,
    IShellFolderViewDual: IShellFolderViewDual,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_GroupBy(self: *const IShellFolderViewDual3, pbstrGroupBy: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_GroupBy(self, pbstrGroupBy);
    }
    pub fn put_GroupBy(self: *const IShellFolderViewDual3, bstrGroupBy: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_GroupBy(self, bstrGroupBy);
    }
    pub fn get_FolderFlags(self: *const IShellFolderViewDual3, pdwFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_FolderFlags(self, pdwFlags);
    }
    pub fn put_FolderFlags(self: *const IShellFolderViewDual3, dwFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.put_FolderFlags(self, dwFlags);
    }
    pub fn get_SortColumns(self: *const IShellFolderViewDual3, pbstrSortColumns: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_SortColumns(self, pbstrSortColumns);
    }
    pub fn put_SortColumns(self: *const IShellFolderViewDual3, bstrSortColumns: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_SortColumns(self, bstrSortColumns);
    }
    pub fn put_IconSize(self: *const IShellFolderViewDual3, iIconSize: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_IconSize(self, iIconSize);
    }
    pub fn get_IconSize(self: *const IShellFolderViewDual3, piIconSize: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_IconSize(self, piIconSize);
    }
    pub fn FilterView(self: *const IShellFolderViewDual3, bstrFilterText: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.FilterView(self, bstrFilterText);
    }
};

const IID_IShellDispatch_Value = Guid.initString("d8f015c0-c278-11ce-a49e-444553540000");
pub const IID_IShellDispatch = &IID_IShellDispatch_Value;
pub const IShellDispatch = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Application: *const fn(
            self: *const IShellDispatch,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parent: *const fn(
            self: *const IShellDispatch,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NameSpace: *const fn(
            self: *const IShellDispatch,
            vDir: VARIANT,
            ppsdf: ?*?*Folder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BrowseForFolder: *const fn(
            self: *const IShellDispatch,
            Hwnd: i32,
            Title: ?BSTR,
            Options: i32,
            RootFolder: VARIANT,
            ppsdf: ?*?*Folder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Windows: *const fn(
            self: *const IShellDispatch,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Open: *const fn(
            self: *const IShellDispatch,
            vDir: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Explore: *const fn(
            self: *const IShellDispatch,
            vDir: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MinimizeAll: *const fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UndoMinimizeALL: *const fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FileRun: *const fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CascadeWindows: *const fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TileVertically: *const fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TileHorizontally: *const fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShutdownWindows: *const fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Suspend: *const fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EjectPC: *const fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTime: *const fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TrayProperties: *const fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Help: *const fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFiles: *const fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindComputer: *const fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshMenu: *const fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ControlPanelItem: *const fn(
            self: *const IShellDispatch,
            bstrDir: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Application(self: *const IShellDispatch, ppid: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Application(self, ppid);
    }
    pub fn get_Parent(self: *const IShellDispatch, ppid: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.get_Parent(self, ppid);
    }
    pub fn NameSpace(self: *const IShellDispatch, vDir: VARIANT, ppsdf: ?*?*Folder) callconv(.Inline) HRESULT {
        return self.vtable.NameSpace(self, vDir, ppsdf);
    }
    pub fn BrowseForFolder(self: *const IShellDispatch, Hwnd: i32, Title: ?BSTR, Options: i32, RootFolder: VARIANT, ppsdf: ?*?*Folder) callconv(.Inline) HRESULT {
        return self.vtable.BrowseForFolder(self, Hwnd, Title, Options, RootFolder, ppsdf);
    }
    pub fn Windows(self: *const IShellDispatch, ppid: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.Windows(self, ppid);
    }
    pub fn Open(self: *const IShellDispatch, vDir: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.Open(self, vDir);
    }
    pub fn Explore(self: *const IShellDispatch, vDir: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.Explore(self, vDir);
    }
    pub fn MinimizeAll(self: *const IShellDispatch) callconv(.Inline) HRESULT {
        return self.vtable.MinimizeAll(self);
    }
    pub fn UndoMinimizeALL(self: *const IShellDispatch) callconv(.Inline) HRESULT {
        return self.vtable.UndoMinimizeALL(self);
    }
    pub fn FileRun(self: *const IShellDispatch) callconv(.Inline) HRESULT {
        return self.vtable.FileRun(self);
    }
    pub fn CascadeWindows(self: *const IShellDispatch) callconv(.Inline) HRESULT {
        return self.vtable.CascadeWindows(self);
    }
    pub fn TileVertically(self: *const IShellDispatch) callconv(.Inline) HRESULT {
        return self.vtable.TileVertically(self);
    }
    pub fn TileHorizontally(self: *const IShellDispatch) callconv(.Inline) HRESULT {
        return self.vtable.TileHorizontally(self);
    }
    pub fn ShutdownWindows(self: *const IShellDispatch) callconv(.Inline) HRESULT {
        return self.vtable.ShutdownWindows(self);
    }
    pub fn Suspend(self: *const IShellDispatch) callconv(.Inline) HRESULT {
        return self.vtable.Suspend(self);
    }
    pub fn EjectPC(self: *const IShellDispatch) callconv(.Inline) HRESULT {
        return self.vtable.EjectPC(self);
    }
    pub fn SetTime(self: *const IShellDispatch) callconv(.Inline) HRESULT {
        return self.vtable.SetTime(self);
    }
    pub fn TrayProperties(self: *const IShellDispatch) callconv(.Inline) HRESULT {
        return self.vtable.TrayProperties(self);
    }
    pub fn Help(self: *const IShellDispatch) callconv(.Inline) HRESULT {
        return self.vtable.Help(self);
    }
    pub fn FindFiles(self: *const IShellDispatch) callconv(.Inline) HRESULT {
        return self.vtable.FindFiles(self);
    }
    pub fn FindComputer(self: *const IShellDispatch) callconv(.Inline) HRESULT {
        return self.vtable.FindComputer(self);
    }
    pub fn RefreshMenu(self: *const IShellDispatch) callconv(.Inline) HRESULT {
        return self.vtable.RefreshMenu(self);
    }
    pub fn ControlPanelItem(self: *const IShellDispatch, bstrDir: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.ControlPanelItem(self, bstrDir);
    }
};

const IID_IShellDispatch2_Value = Guid.initString("a4c6892c-3ba9-11d2-9dea-00c04fb16162");
pub const IID_IShellDispatch2 = &IID_IShellDispatch2_Value;
pub const IShellDispatch2 = extern union {
    pub const VTable = extern struct {
        base: IShellDispatch.VTable,
        IsRestricted: *const fn(
            self: *const IShellDispatch2,
            Group: ?BSTR,
            Restriction: ?BSTR,
            plRestrictValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShellExecute: *const fn(
            self: *const IShellDispatch2,
            File: ?BSTR,
            vArgs: VARIANT,
            vDir: VARIANT,
            vOperation: VARIANT,
            vShow: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindPrinter: *const fn(
            self: *const IShellDispatch2,
            name: ?BSTR,
            location: ?BSTR,
            model: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSystemInformation: *const fn(
            self: *const IShellDispatch2,
            name: ?BSTR,
            pv: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ServiceStart: *const fn(
            self: *const IShellDispatch2,
            ServiceName: ?BSTR,
            Persistent: VARIANT,
            pSuccess: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ServiceStop: *const fn(
            self: *const IShellDispatch2,
            ServiceName: ?BSTR,
            Persistent: VARIANT,
            pSuccess: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsServiceRunning: *const fn(
            self: *const IShellDispatch2,
            ServiceName: ?BSTR,
            pRunning: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanStartStopService: *const fn(
            self: *const IShellDispatch2,
            ServiceName: ?BSTR,
            pCanStartStop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowBrowserBar: *const fn(
            self: *const IShellDispatch2,
            bstrClsid: ?BSTR,
            bShow: VARIANT,
            pSuccess: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IShellDispatch: IShellDispatch,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn IsRestricted(self: *const IShellDispatch2, Group: ?BSTR, Restriction: ?BSTR, plRestrictValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.IsRestricted(self, Group, Restriction, plRestrictValue);
    }
    pub fn ShellExecute(self: *const IShellDispatch2, File: ?BSTR, vArgs: VARIANT, vDir: VARIANT, vOperation: VARIANT, vShow: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.ShellExecute(self, File, vArgs, vDir, vOperation, vShow);
    }
    pub fn FindPrinter(self: *const IShellDispatch2, name: ?BSTR, location: ?BSTR, model: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.FindPrinter(self, name, location, model);
    }
    pub fn GetSystemInformation(self: *const IShellDispatch2, name: ?BSTR, pv: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetSystemInformation(self, name, pv);
    }
    pub fn ServiceStart(self: *const IShellDispatch2, ServiceName: ?BSTR, Persistent: VARIANT, pSuccess: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.ServiceStart(self, ServiceName, Persistent, pSuccess);
    }
    pub fn ServiceStop(self: *const IShellDispatch2, ServiceName: ?BSTR, Persistent: VARIANT, pSuccess: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.ServiceStop(self, ServiceName, Persistent, pSuccess);
    }
    pub fn IsServiceRunning(self: *const IShellDispatch2, ServiceName: ?BSTR, pRunning: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.IsServiceRunning(self, ServiceName, pRunning);
    }
    pub fn CanStartStopService(self: *const IShellDispatch2, ServiceName: ?BSTR, pCanStartStop: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.CanStartStopService(self, ServiceName, pCanStartStop);
    }
    pub fn ShowBrowserBar(self: *const IShellDispatch2, bstrClsid: ?BSTR, bShow: VARIANT, pSuccess: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.ShowBrowserBar(self, bstrClsid, bShow, pSuccess);
    }
};

const IID_IShellDispatch3_Value = Guid.initString("177160ca-bb5a-411c-841d-bd38facdeaa0");
pub const IID_IShellDispatch3 = &IID_IShellDispatch3_Value;
pub const IShellDispatch3 = extern union {
    pub const VTable = extern struct {
        base: IShellDispatch2.VTable,
        AddToRecent: *const fn(
            self: *const IShellDispatch3,
            varFile: VARIANT,
            bstrCategory: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IShellDispatch2: IShellDispatch2,
    IShellDispatch: IShellDispatch,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn AddToRecent(self: *const IShellDispatch3, varFile: VARIANT, bstrCategory: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.AddToRecent(self, varFile, bstrCategory);
    }
};

const IID_IShellDispatch4_Value = Guid.initString("efd84b2d-4bcf-4298-be25-eb542a59fbda");
pub const IID_IShellDispatch4 = &IID_IShellDispatch4_Value;
pub const IShellDispatch4 = extern union {
    pub const VTable = extern struct {
        base: IShellDispatch3.VTable,
        WindowsSecurity: *const fn(
            self: *const IShellDispatch4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ToggleDesktop: *const fn(
            self: *const IShellDispatch4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExplorerPolicy: *const fn(
            self: *const IShellDispatch4,
            bstrPolicyName: ?BSTR,
            pValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSetting: *const fn(
            self: *const IShellDispatch4,
            lSetting: i32,
            pResult: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IShellDispatch3: IShellDispatch3,
    IShellDispatch2: IShellDispatch2,
    IShellDispatch: IShellDispatch,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn WindowsSecurity(self: *const IShellDispatch4) callconv(.Inline) HRESULT {
        return self.vtable.WindowsSecurity(self);
    }
    pub fn ToggleDesktop(self: *const IShellDispatch4) callconv(.Inline) HRESULT {
        return self.vtable.ToggleDesktop(self);
    }
    pub fn ExplorerPolicy(self: *const IShellDispatch4, bstrPolicyName: ?BSTR, pValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.ExplorerPolicy(self, bstrPolicyName, pValue);
    }
    pub fn GetSetting(self: *const IShellDispatch4, lSetting: i32, pResult: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.GetSetting(self, lSetting, pResult);
    }
};

const IID_IShellDispatch5_Value = Guid.initString("866738b9-6cf2-4de8-8767-f794ebe74f4e");
pub const IID_IShellDispatch5 = &IID_IShellDispatch5_Value;
pub const IShellDispatch5 = extern union {
    pub const VTable = extern struct {
        base: IShellDispatch4.VTable,
        WindowSwitcher: *const fn(
            self: *const IShellDispatch5,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IShellDispatch4: IShellDispatch4,
    IShellDispatch3: IShellDispatch3,
    IShellDispatch2: IShellDispatch2,
    IShellDispatch: IShellDispatch,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn WindowSwitcher(self: *const IShellDispatch5) callconv(.Inline) HRESULT {
        return self.vtable.WindowSwitcher(self);
    }
};

const IID_IShellDispatch6_Value = Guid.initString("286e6f1b-7113-4355-9562-96b7e9d64c54");
pub const IID_IShellDispatch6 = &IID_IShellDispatch6_Value;
pub const IShellDispatch6 = extern union {
    pub const VTable = extern struct {
        base: IShellDispatch5.VTable,
        SearchCommand: *const fn(
            self: *const IShellDispatch6,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IShellDispatch5: IShellDispatch5,
    IShellDispatch4: IShellDispatch4,
    IShellDispatch3: IShellDispatch3,
    IShellDispatch2: IShellDispatch2,
    IShellDispatch: IShellDispatch,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn SearchCommand(self: *const IShellDispatch6) callconv(.Inline) HRESULT {
        return self.vtable.SearchCommand(self);
    }
};

const IID_IFileSearchBand_Value = Guid.initString("2d91eea1-9932-11d2-be86-00a0c9a83da1");
pub const IID_IFileSearchBand = &IID_IFileSearchBand_Value;
pub const IFileSearchBand = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        SetFocus: *const fn(
            self: *const IFileSearchBand,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSearchParameters: *const fn(
            self: *const IFileSearchBand,
            pbstrSearchID: ?*?BSTR,
            bNavToResults: i16,
            pvarScope: ?*VARIANT,
            pvarQueryFile: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SearchID: *const fn(
            self: *const IFileSearchBand,
            pbstrSearchID: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Scope: *const fn(
            self: *const IFileSearchBand,
            pvarScope: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QueryFile: *const fn(
            self: *const IFileSearchBand,
            pvarFile: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn SetFocus(self: *const IFileSearchBand) callconv(.Inline) HRESULT {
        return self.vtable.SetFocus(self);
    }
    pub fn SetSearchParameters(self: *const IFileSearchBand, pbstrSearchID: ?*?BSTR, bNavToResults: i16, pvarScope: ?*VARIANT, pvarQueryFile: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.SetSearchParameters(self, pbstrSearchID, bNavToResults, pvarScope, pvarQueryFile);
    }
    pub fn get_SearchID(self: *const IFileSearchBand, pbstrSearchID: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_SearchID(self, pbstrSearchID);
    }
    pub fn get_Scope(self: *const IFileSearchBand, pvarScope: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Scope(self, pvarScope);
    }
    pub fn get_QueryFile(self: *const IFileSearchBand, pvarFile: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_QueryFile(self, pvarFile);
    }
};

const IID_IWebWizardHost_Value = Guid.initString("18bcc359-4990-4bfb-b951-3c83702be5f9");
pub const IID_IWebWizardHost = &IID_IWebWizardHost_Value;
pub const IWebWizardHost = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        FinalBack: *const fn(
            self: *const IWebWizardHost,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FinalNext: *const fn(
            self: *const IWebWizardHost,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: *const fn(
            self: *const IWebWizardHost,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Caption: *const fn(
            self: *const IWebWizardHost,
            bstrCaption: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Caption: *const fn(
            self: *const IWebWizardHost,
            pbstrCaption: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Property: *const fn(
            self: *const IWebWizardHost,
            bstrPropertyName: ?BSTR,
            pvProperty: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Property: *const fn(
            self: *const IWebWizardHost,
            bstrPropertyName: ?BSTR,
            pvProperty: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWizardButtons: *const fn(
            self: *const IWebWizardHost,
            vfEnableBack: i16,
            vfEnableNext: i16,
            vfLastPage: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHeaderText: *const fn(
            self: *const IWebWizardHost,
            bstrHeaderTitle: ?BSTR,
            bstrHeaderSubtitle: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn FinalBack(self: *const IWebWizardHost) callconv(.Inline) HRESULT {
        return self.vtable.FinalBack(self);
    }
    pub fn FinalNext(self: *const IWebWizardHost) callconv(.Inline) HRESULT {
        return self.vtable.FinalNext(self);
    }
    pub fn Cancel(self: *const IWebWizardHost) callconv(.Inline) HRESULT {
        return self.vtable.Cancel(self);
    }
    pub fn put_Caption(self: *const IWebWizardHost, bstrCaption: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Caption(self, bstrCaption);
    }
    pub fn get_Caption(self: *const IWebWizardHost, pbstrCaption: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Caption(self, pbstrCaption);
    }
    pub fn put_Property(self: *const IWebWizardHost, bstrPropertyName: ?BSTR, pvProperty: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_Property(self, bstrPropertyName, pvProperty);
    }
    pub fn get_Property(self: *const IWebWizardHost, bstrPropertyName: ?BSTR, pvProperty: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Property(self, bstrPropertyName, pvProperty);
    }
    pub fn SetWizardButtons(self: *const IWebWizardHost, vfEnableBack: i16, vfEnableNext: i16, vfLastPage: i16) callconv(.Inline) HRESULT {
        return self.vtable.SetWizardButtons(self, vfEnableBack, vfEnableNext, vfLastPage);
    }
    pub fn SetHeaderText(self: *const IWebWizardHost, bstrHeaderTitle: ?BSTR, bstrHeaderSubtitle: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.SetHeaderText(self, bstrHeaderTitle, bstrHeaderSubtitle);
    }
};

const IID_IWebWizardHost2_Value = Guid.initString("f9c013dc-3c23-4041-8e39-cfb402f7ea59");
pub const IID_IWebWizardHost2 = &IID_IWebWizardHost2_Value;
pub const IWebWizardHost2 = extern union {
    pub const VTable = extern struct {
        base: IWebWizardHost.VTable,
        SignString: *const fn(
            self: *const IWebWizardHost2,
            value: ?BSTR,
            signedValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IWebWizardHost: IWebWizardHost,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn SignString(self: *const IWebWizardHost2, value: ?BSTR, signedValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.SignString(self, value, signedValue);
    }
};

const IID_INewWDEvents_Value = Guid.initString("0751c551-7568-41c9-8e5b-e22e38919236");
pub const IID_INewWDEvents = &IID_INewWDEvents_Value;
pub const INewWDEvents = extern union {
    pub const VTable = extern struct {
        base: IWebWizardHost.VTable,
        PassportAuthenticate: *const fn(
            self: *const INewWDEvents,
            bstrSignInUrl: ?BSTR,
            pvfAuthenitcated: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IWebWizardHost: IWebWizardHost,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn PassportAuthenticate(self: *const INewWDEvents, bstrSignInUrl: ?BSTR, pvfAuthenitcated: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.PassportAuthenticate(self, bstrSignInUrl, pvfAuthenitcated);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IAutoComplete_Value = Guid.initString("00bb2762-6a77-11d0-a535-00c04fd7d062");
pub const IID_IAutoComplete = &IID_IAutoComplete_Value;
pub const IAutoComplete = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Init: *const fn(
            self: *const IAutoComplete,
            hwndEdit: ?HWND,
            punkACL: ?*IUnknown,
            pwszRegKeyPath: ?[*:0]const u16,
            pwszQuickComplete: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enable: *const fn(
            self: *const IAutoComplete,
            fEnable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Init(self: *const IAutoComplete, hwndEdit: ?HWND, punkACL: ?*IUnknown, pwszRegKeyPath: ?[*:0]const u16, pwszQuickComplete: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.Init(self, hwndEdit, punkACL, pwszRegKeyPath, pwszQuickComplete);
    }
    pub fn Enable(self: *const IAutoComplete, fEnable: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.Enable(self, fEnable);
    }
};

pub const AUTOCOMPLETEOPTIONS = enum(i32) {
    NONE = 0,
    AUTOSUGGEST = 1,
    AUTOAPPEND = 2,
    SEARCH = 4,
    FILTERPREFIXES = 8,
    USETAB = 16,
    UPDOWNKEYDROPSLIST = 32,
    RTLREADING = 64,
    WORD_FILTER = 128,
    NOPREFIXFILTERING = 256,
};
pub const ACO_NONE = AUTOCOMPLETEOPTIONS.NONE;
pub const ACO_AUTOSUGGEST = AUTOCOMPLETEOPTIONS.AUTOSUGGEST;
pub const ACO_AUTOAPPEND = AUTOCOMPLETEOPTIONS.AUTOAPPEND;
pub const ACO_SEARCH = AUTOCOMPLETEOPTIONS.SEARCH;
pub const ACO_FILTERPREFIXES = AUTOCOMPLETEOPTIONS.FILTERPREFIXES;
pub const ACO_USETAB = AUTOCOMPLETEOPTIONS.USETAB;
pub const ACO_UPDOWNKEYDROPSLIST = AUTOCOMPLETEOPTIONS.UPDOWNKEYDROPSLIST;
pub const ACO_RTLREADING = AUTOCOMPLETEOPTIONS.RTLREADING;
pub const ACO_WORD_FILTER = AUTOCOMPLETEOPTIONS.WORD_FILTER;
pub const ACO_NOPREFIXFILTERING = AUTOCOMPLETEOPTIONS.NOPREFIXFILTERING;

// TODO: this type is limited to platform 'windows5.0'
const IID_IAutoComplete2_Value = Guid.initString("eac04bc0-3791-11d2-bb95-0060977b464c");
pub const IID_IAutoComplete2 = &IID_IAutoComplete2_Value;
pub const IAutoComplete2 = extern union {
    pub const VTable = extern struct {
        base: IAutoComplete.VTable,
        SetOptions: *const fn(
            self: *const IAutoComplete2,
            dwFlag: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptions: *const fn(
            self: *const IAutoComplete2,
            pdwFlag: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IAutoComplete: IAutoComplete,
    IUnknown: IUnknown,
    pub fn SetOptions(self: *const IAutoComplete2, dwFlag: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetOptions(self, dwFlag);
    }
    pub fn GetOptions(self: *const IAutoComplete2, pdwFlag: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetOptions(self, pdwFlag);
    }
};

pub const ACENUMOPTION = enum(i32) {
    NONE = 0,
    MOSTRECENTFIRST = 1,
    FIRSTUNUSED = 65536,
};
pub const ACEO_NONE = ACENUMOPTION.NONE;
pub const ACEO_MOSTRECENTFIRST = ACENUMOPTION.MOSTRECENTFIRST;
pub const ACEO_FIRSTUNUSED = ACENUMOPTION.FIRSTUNUSED;

const IID_IEnumACString_Value = Guid.initString("8e74c210-cf9d-4eaf-a403-7356428f0a5a");
pub const IID_IEnumACString = &IID_IEnumACString_Value;
pub const IEnumACString = extern union {
    pub const VTable = extern struct {
        base: IEnumString.VTable,
        NextItem: *const fn(
            self: *const IEnumACString,
            pszUrl: ?[*:0]u16,
            cchMax: u32,
            pulSortIndex: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnumOptions: *const fn(
            self: *const IEnumACString,
            dwOptions: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumOptions: *const fn(
            self: *const IEnumACString,
            pdwOptions: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IEnumString: IEnumString,
    IUnknown: IUnknown,
    pub fn NextItem(self: *const IEnumACString, pszUrl: ?[*:0]u16, cchMax: u32, pulSortIndex: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.NextItem(self, pszUrl, cchMax, pulSortIndex);
    }
    pub fn SetEnumOptions(self: *const IEnumACString, dwOptions: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetEnumOptions(self, dwOptions);
    }
    pub fn GetEnumOptions(self: *const IEnumACString, pdwOptions: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetEnumOptions(self, pdwOptions);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDataObjectAsyncCapability_Value = Guid.initString("3d8b0590-f691-11d2-8ea9-006097df5bd4");
pub const IID_IDataObjectAsyncCapability = &IID_IDataObjectAsyncCapability_Value;
pub const IDataObjectAsyncCapability = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAsyncMode: *const fn(
            self: *const IDataObjectAsyncCapability,
            fDoOpAsync: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAsyncMode: *const fn(
            self: *const IDataObjectAsyncCapability,
            pfIsOpAsync: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartOperation: *const fn(
            self: *const IDataObjectAsyncCapability,
            pbcReserved: ?*IBindCtx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InOperation: *const fn(
            self: *const IDataObjectAsyncCapability,
            pfInAsyncOp: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndOperation: *const fn(
            self: *const IDataObjectAsyncCapability,
            hResult: HRESULT,
            pbcReserved: ?*IBindCtx,
            dwEffects: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetAsyncMode(self: *const IDataObjectAsyncCapability, fDoOpAsync: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetAsyncMode(self, fDoOpAsync);
    }
    pub fn GetAsyncMode(self: *const IDataObjectAsyncCapability, pfIsOpAsync: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.GetAsyncMode(self, pfIsOpAsync);
    }
    pub fn StartOperation(self: *const IDataObjectAsyncCapability, pbcReserved: ?*IBindCtx) callconv(.Inline) HRESULT {
        return self.vtable.StartOperation(self, pbcReserved);
    }
    pub fn InOperation(self: *const IDataObjectAsyncCapability, pfInAsyncOp: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.InOperation(self, pfInAsyncOp);
    }
    pub fn EndOperation(self: *const IDataObjectAsyncCapability, hResult: HRESULT, pbcReserved: ?*IBindCtx, dwEffects: u32) callconv(.Inline) HRESULT {
        return self.vtable.EndOperation(self, hResult, pbcReserved, dwEffects);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IExtractIconA_Value = Guid.initString("000214eb-0000-0000-c000-000000000046");
pub const IID_IExtractIconA = &IID_IExtractIconA_Value;
pub const IExtractIconA = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIconLocation: *const fn(
            self: *const IExtractIconA,
            uFlags: u32,
            pszIconFile: [*:0]u8,
            cchMax: u32,
            piIndex: ?*i32,
            pwFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Extract: *const fn(
            self: *const IExtractIconA,
            pszFile: ?[*:0]const u8,
            nIconIndex: u32,
            phiconLarge: ?*?HICON,
            phiconSmall: ?*?HICON,
            nIconSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetIconLocation(self: *const IExtractIconA, uFlags: u32, pszIconFile: [*:0]u8, cchMax: u32, piIndex: ?*i32, pwFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetIconLocation(self, uFlags, pszIconFile, cchMax, piIndex, pwFlags);
    }
    pub fn Extract(self: *const IExtractIconA, pszFile: ?[*:0]const u8, nIconIndex: u32, phiconLarge: ?*?HICON, phiconSmall: ?*?HICON, nIconSize: u32) callconv(.Inline) HRESULT {
        return self.vtable.Extract(self, pszFile, nIconIndex, phiconLarge, phiconSmall, nIconSize);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IExtractIconW_Value = Guid.initString("000214fa-0000-0000-c000-000000000046");
pub const IID_IExtractIconW = &IID_IExtractIconW_Value;
pub const IExtractIconW = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIconLocation: *const fn(
            self: *const IExtractIconW,
            uFlags: u32,
            pszIconFile: [*:0]u16,
            cchMax: u32,
            piIndex: ?*i32,
            pwFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Extract: *const fn(
            self: *const IExtractIconW,
            pszFile: ?[*:0]const u16,
            nIconIndex: u32,
            phiconLarge: ?*?HICON,
            phiconSmall: ?*?HICON,
            nIconSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetIconLocation(self: *const IExtractIconW, uFlags: u32, pszIconFile: [*:0]u16, cchMax: u32, piIndex: ?*i32, pwFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetIconLocation(self, uFlags, pszIconFile, cchMax, piIndex, pwFlags);
    }
    pub fn Extract(self: *const IExtractIconW, pszFile: ?[*:0]const u16, nIconIndex: u32, phiconLarge: ?*?HICON, phiconSmall: ?*?HICON, nIconSize: u32) callconv(.Inline) HRESULT {
        return self.vtable.Extract(self, pszFile, nIconIndex, phiconLarge, phiconSmall, nIconSize);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellIconOverlayManager_Value = Guid.initString("f10b5e34-dd3b-42a7-aa7d-2f4ec54bb09b");
pub const IID_IShellIconOverlayManager = &IID_IShellIconOverlayManager_Value;
pub const IShellIconOverlayManager = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFileOverlayInfo: *const fn(
            self: *const IShellIconOverlayManager,
            pwszPath: ?[*:0]const u16,
            dwAttrib: u32,
            pIndex: ?*i32,
            dwflags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReservedOverlayInfo: *const fn(
            self: *const IShellIconOverlayManager,
            pwszPath: ?[*:0]const u16,
            dwAttrib: u32,
            pIndex: ?*i32,
            dwflags: u32,
            iReservedID: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshOverlayImages: *const fn(
            self: *const IShellIconOverlayManager,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadNonloadedOverlayIdentifiers: *const fn(
            self: *const IShellIconOverlayManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OverlayIndexFromImageIndex: *const fn(
            self: *const IShellIconOverlayManager,
            iImage: i32,
            piIndex: ?*i32,
            fAdd: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetFileOverlayInfo(self: *const IShellIconOverlayManager, pwszPath: ?[*:0]const u16, dwAttrib: u32, pIndex: ?*i32, dwflags: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetFileOverlayInfo(self, pwszPath, dwAttrib, pIndex, dwflags);
    }
    pub fn GetReservedOverlayInfo(self: *const IShellIconOverlayManager, pwszPath: ?[*:0]const u16, dwAttrib: u32, pIndex: ?*i32, dwflags: u32, iReservedID: i32) callconv(.Inline) HRESULT {
        return self.vtable.GetReservedOverlayInfo(self, pwszPath, dwAttrib, pIndex, dwflags, iReservedID);
    }
    pub fn RefreshOverlayImages(self: *const IShellIconOverlayManager, dwFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.RefreshOverlayImages(self, dwFlags);
    }
    pub fn LoadNonloadedOverlayIdentifiers(self: *const IShellIconOverlayManager) callconv(.Inline) HRESULT {
        return self.vtable.LoadNonloadedOverlayIdentifiers(self);
    }
    pub fn OverlayIndexFromImageIndex(self: *const IShellIconOverlayManager, iImage: i32, piIndex: ?*i32, fAdd: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.OverlayIndexFromImageIndex(self, iImage, piIndex, fAdd);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IShellIconOverlay_Value = Guid.initString("7d688a70-c613-11d0-999b-00c04fd655e1");
pub const IID_IShellIconOverlay = &IID_IShellIconOverlay_Value;
pub const IShellIconOverlay = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOverlayIndex: *const fn(
            self: *const IShellIconOverlay,
            pidl: ?*ITEMIDLIST,
            pIndex: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOverlayIconIndex: *const fn(
            self: *const IShellIconOverlay,
            pidl: ?*ITEMIDLIST,
            pIconIndex: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetOverlayIndex(self: *const IShellIconOverlay, pidl: ?*ITEMIDLIST, pIndex: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetOverlayIndex(self, pidl, pIndex);
    }
    pub fn GetOverlayIconIndex(self: *const IShellIconOverlay, pidl: ?*ITEMIDLIST, pIconIndex: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetOverlayIconIndex(self, pidl, pIconIndex);
    }
};

pub const SHELL_LINK_DATA_FLAGS = enum(i32) {
    DEFAULT = 0,
    HAS_ID_LIST = 1,
    HAS_LINK_INFO = 2,
    HAS_NAME = 4,
    HAS_RELPATH = 8,
    HAS_WORKINGDIR = 16,
    HAS_ARGS = 32,
    HAS_ICONLOCATION = 64,
    UNICODE = 128,
    FORCE_NO_LINKINFO = 256,
    HAS_EXP_SZ = 512,
    RUN_IN_SEPARATE = 1024,
    HAS_DARWINID = 4096,
    RUNAS_USER = 8192,
    HAS_EXP_ICON_SZ = 16384,
    NO_PIDL_ALIAS = 32768,
    FORCE_UNCNAME = 65536,
    RUN_WITH_SHIMLAYER = 131072,
    FORCE_NO_LINKTRACK = 262144,
    ENABLE_TARGET_METADATA = 524288,
    DISABLE_LINK_PATH_TRACKING = 1048576,
    DISABLE_KNOWNFOLDER_RELATIVE_TRACKING = 2097152,
    NO_KF_ALIAS = 4194304,
    ALLOW_LINK_TO_LINK = 8388608,
    UNALIAS_ON_SAVE = 16777216,
    PREFER_ENVIRONMENT_PATH = 33554432,
    KEEP_LOCAL_IDLIST_FOR_UNC_TARGET = 67108864,
    PERSIST_VOLUME_ID_RELATIVE = 134217728,
    VALID = 268433407,
    RESERVED = -2147483648,
};
pub const SLDF_DEFAULT = SHELL_LINK_DATA_FLAGS.DEFAULT;
pub const SLDF_HAS_ID_LIST = SHELL_LINK_DATA_FLAGS.HAS_ID_LIST;
pub const SLDF_HAS_LINK_INFO = SHELL_LINK_DATA_FLAGS.HAS_LINK_INFO;
pub const SLDF_HAS_NAME = SHELL_LINK_DATA_FLAGS.HAS_NAME;
pub const SLDF_HAS_RELPATH = SHELL_LINK_DATA_FLAGS.HAS_RELPATH;
pub const SLDF_HAS_WORKINGDIR = SHELL_LINK_DATA_FLAGS.HAS_WORKINGDIR;
pub const SLDF_HAS_ARGS = SHELL_LINK_DATA_FLAGS.HAS_ARGS;
pub const SLDF_HAS_ICONLOCATION = SHELL_LINK_DATA_FLAGS.HAS_ICONLOCATION;
pub const SLDF_UNICODE = SHELL_LINK_DATA_FLAGS.UNICODE;
pub const SLDF_FORCE_NO_LINKINFO = SHELL_LINK_DATA_FLAGS.FORCE_NO_LINKINFO;
pub const SLDF_HAS_EXP_SZ = SHELL_LINK_DATA_FLAGS.HAS_EXP_SZ;
pub const SLDF_RUN_IN_SEPARATE = SHELL_LINK_DATA_FLAGS.RUN_IN_SEPARATE;
pub const SLDF_HAS_DARWINID = SHELL_LINK_DATA_FLAGS.HAS_DARWINID;
pub const SLDF_RUNAS_USER = SHELL_LINK_DATA_FLAGS.RUNAS_USER;
pub const SLDF_HAS_EXP_ICON_SZ = SHELL_LINK_DATA_FLAGS.HAS_EXP_ICON_SZ;
pub const SLDF_NO_PIDL_ALIAS = SHELL_LINK_DATA_FLAGS.NO_PIDL_ALIAS;
pub const SLDF_FORCE_UNCNAME = SHELL_LINK_DATA_FLAGS.FORCE_UNCNAME;
pub const SLDF_RUN_WITH_SHIMLAYER = SHELL_LINK_DATA_FLAGS.RUN_WITH_SHIMLAYER;
pub const SLDF_FORCE_NO_LINKTRACK = SHELL_LINK_DATA_FLAGS.FORCE_NO_LINKTRACK;
pub const SLDF_ENABLE_TARGET_METADATA = SHELL_LINK_DATA_FLAGS.ENABLE_TARGET_METADATA;
pub const SLDF_DISABLE_LINK_PATH_TRACKING = SHELL_LINK_DATA_FLAGS.DISABLE_LINK_PATH_TRACKING;
pub const SLDF_DISABLE_KNOWNFOLDER_RELATIVE_TRACKING = SHELL_LINK_DATA_FLAGS.DISABLE_KNOWNFOLDER_RELATIVE_TRACKING;
pub const SLDF_NO_KF_ALIAS = SHELL_LINK_DATA_FLAGS.NO_KF_ALIAS;
pub const SLDF_ALLOW_LINK_TO_LINK = SHELL_LINK_DATA_FLAGS.ALLOW_LINK_TO_LINK;
pub const SLDF_UNALIAS_ON_SAVE = SHELL_LINK_DATA_FLAGS.UNALIAS_ON_SAVE;
pub const SLDF_PREFER_ENVIRONMENT_PATH = SHELL_LINK_DATA_FLAGS.PREFER_ENVIRONMENT_PATH;
pub const SLDF_KEEP_LOCAL_IDLIST_FOR_UNC_TARGET = SHELL_LINK_DATA_FLAGS.KEEP_LOCAL_IDLIST_FOR_UNC_TARGET;
pub const SLDF_PERSIST_VOLUME_ID_RELATIVE = SHELL_LINK_DATA_FLAGS.PERSIST_VOLUME_ID_RELATIVE;
pub const SLDF_VALID = SHELL_LINK_DATA_FLAGS.VALID;
pub const SLDF_RESERVED = SHELL_LINK_DATA_FLAGS.RESERVED;

pub const DATABLOCK_HEADER = extern struct {
    cbSize: u32 align(1),
    dwSignature: u32 align(1),
};

pub const NT_CONSOLE_PROPS = extern struct {
    dbh: DATABLOCK_HEADER align(1),
    wFillAttribute: u16 align(1),
    wPopupFillAttribute: u16 align(1),
    dwScreenBufferSize: COORD align(1),
    dwWindowSize: COORD align(1),
    dwWindowOrigin: COORD align(1),
    nFont: u32 align(1),
    nInputBufferSize: u32 align(1),
    dwFontSize: COORD align(1),
    uFontFamily: u32 align(1),
    uFontWeight: u32 align(1),
    FaceName: [32]u16 align(1),
    uCursorSize: u32 align(1),
    bFullScreen: BOOL align(1),
    bQuickEdit: BOOL align(1),
    bInsertMode: BOOL align(1),
    bAutoPosition: BOOL align(1),
    uHistoryBufferSize: u32 align(1),
    uNumberOfHistoryBuffers: u32 align(1),
    bHistoryNoDup: BOOL align(1),
    ColorTable: [16]u32 align(1),
};

pub const NT_FE_CONSOLE_PROPS = extern struct {
    dbh: DATABLOCK_HEADER align(1),
    uCodePage: u32 align(1),
};

pub const EXP_DARWIN_LINK = extern struct {
    dbh: DATABLOCK_HEADER align(1),
    szDarwinID: [260]CHAR align(1),
    szwDarwinID: [260]u16 align(1),
};

pub const EXP_SPECIAL_FOLDER = extern struct {
    cbSize: u32 align(1),
    dwSignature: u32 align(1),
    idSpecialFolder: u32 align(1),
    cbOffset: u32 align(1),
};

pub const EXP_SZ_LINK = extern struct {
    cbSize: u32 align(1),
    dwSignature: u32 align(1),
    szTarget: [260]CHAR align(1),
    swzTarget: [260]u16 align(1),
};

pub const EXP_PROPERTYSTORAGE = extern struct {
    cbSize: u32 align(1),
    dwSignature: u32 align(1),
    abPropertyStorage: [1]u8 align(1),
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IURLSearchHook_Value = Guid.initString("ac60f6a0-0fd9-11d0-99cb-00c04fd64497");
pub const IID_IURLSearchHook = &IID_IURLSearchHook_Value;
pub const IURLSearchHook = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Translate: *const fn(
            self: *const IURLSearchHook,
            pwszSearchURL: [*:0]u16,
            cchBufferSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Translate(self: *const IURLSearchHook, pwszSearchURL: [*:0]u16, cchBufferSize: u32) callconv(.Inline) HRESULT {
        return self.vtable.Translate(self, pwszSearchURL, cchBufferSize);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ISearchContext_Value = Guid.initString("09f656a2-41af-480c-88f7-16cc0d164615");
pub const IID_ISearchContext = &IID_ISearchContext_Value;
pub const ISearchContext = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSearchUrl: *const fn(
            self: *const ISearchContext,
            pbstrSearchUrl: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSearchText: *const fn(
            self: *const ISearchContext,
            pbstrSearchText: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSearchStyle: *const fn(
            self: *const ISearchContext,
            pdwSearchStyle: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetSearchUrl(self: *const ISearchContext, pbstrSearchUrl: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetSearchUrl(self, pbstrSearchUrl);
    }
    pub fn GetSearchText(self: *const ISearchContext, pbstrSearchText: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetSearchText(self, pbstrSearchText);
    }
    pub fn GetSearchStyle(self: *const ISearchContext, pdwSearchStyle: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetSearchStyle(self, pdwSearchStyle);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IURLSearchHook2_Value = Guid.initString("5ee44da4-6d32-46e3-86bc-07540dedd0e0");
pub const IID_IURLSearchHook2 = &IID_IURLSearchHook2_Value;
pub const IURLSearchHook2 = extern union {
    pub const VTable = extern struct {
        base: IURLSearchHook.VTable,
        TranslateWithSearchContext: *const fn(
            self: *const IURLSearchHook2,
            pwszSearchURL: [*:0]u16,
            cchBufferSize: u32,
            pSearchContext: ?*ISearchContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IURLSearchHook: IURLSearchHook,
    IUnknown: IUnknown,
    pub fn TranslateWithSearchContext(self: *const IURLSearchHook2, pwszSearchURL: [*:0]u16, cchBufferSize: u32, pSearchContext: ?*ISearchContext) callconv(.Inline) HRESULT {
        return self.vtable.TranslateWithSearchContext(self, pwszSearchURL, cchBufferSize, pSearchContext);
    }
};

pub const SHGFP_TYPE = enum(i32) {
    CURRENT = 0,
    DEFAULT = 1,
};
pub const SHGFP_TYPE_CURRENT = SHGFP_TYPE.CURRENT;
pub const SHGFP_TYPE_DEFAULT = SHGFP_TYPE.DEFAULT;

pub const KNOWN_FOLDER_FLAG = enum(i32) {
    DEFAULT = 0,
    FORCE_APP_DATA_REDIRECTION = 524288,
    RETURN_FILTER_REDIRECTION_TARGET = 262144,
    FORCE_PACKAGE_REDIRECTION = 131072,
    NO_PACKAGE_REDIRECTION = 65536,
    CREATE = 32768,
    DONT_VERIFY = 16384,
    DONT_UNEXPAND = 8192,
    NO_ALIAS = 4096,
    INIT = 2048,
    DEFAULT_PATH = 1024,
    NOT_PARENT_RELATIVE = 512,
    SIMPLE_IDLIST = 256,
    ALIAS_ONLY = -2147483648,
    pub const FORCE_APPCONTAINER_REDIRECTION = .FORCE_PACKAGE_REDIRECTION;
    pub const NO_APPCONTAINER_REDIRECTION = .NO_PACKAGE_REDIRECTION;
};
pub const KF_FLAG_DEFAULT = KNOWN_FOLDER_FLAG.DEFAULT;
pub const KF_FLAG_FORCE_APP_DATA_REDIRECTION = KNOWN_FOLDER_FLAG.FORCE_APP_DATA_REDIRECTION;
pub const KF_FLAG_RETURN_FILTER_REDIRECTION_TARGET = KNOWN_FOLDER_FLAG.RETURN_FILTER_REDIRECTION_TARGET;
pub const KF_FLAG_FORCE_PACKAGE_REDIRECTION = KNOWN_FOLDER_FLAG.FORCE_PACKAGE_REDIRECTION;
pub const KF_FLAG_NO_PACKAGE_REDIRECTION = KNOWN_FOLDER_FLAG.NO_PACKAGE_REDIRECTION;
pub const KF_FLAG_FORCE_APPCONTAINER_REDIRECTION = KNOWN_FOLDER_FLAG.FORCE_PACKAGE_REDIRECTION;
pub const KF_FLAG_NO_APPCONTAINER_REDIRECTION = KNOWN_FOLDER_FLAG.NO_PACKAGE_REDIRECTION;
pub const KF_FLAG_CREATE = KNOWN_FOLDER_FLAG.CREATE;
pub const KF_FLAG_DONT_VERIFY = KNOWN_FOLDER_FLAG.DONT_VERIFY;
pub const KF_FLAG_DONT_UNEXPAND = KNOWN_FOLDER_FLAG.DONT_UNEXPAND;
pub const KF_FLAG_NO_ALIAS = KNOWN_FOLDER_FLAG.NO_ALIAS;
pub const KF_FLAG_INIT = KNOWN_FOLDER_FLAG.INIT;
pub const KF_FLAG_DEFAULT_PATH = KNOWN_FOLDER_FLAG.DEFAULT_PATH;
pub const KF_FLAG_NOT_PARENT_RELATIVE = KNOWN_FOLDER_FLAG.NOT_PARENT_RELATIVE;
pub const KF_FLAG_SIMPLE_IDLIST = KNOWN_FOLDER_FLAG.SIMPLE_IDLIST;
pub const KF_FLAG_ALIAS_ONLY = KNOWN_FOLDER_FLAG.ALIAS_ONLY;

pub const SHFOLDERCUSTOMSETTINGS = extern struct {
    dwSize: u32,
    dwMask: u32,
    pvid: ?*Guid,
    pszWebViewTemplate: ?PWSTR,
    cchWebViewTemplate: u32,
    pszWebViewTemplateVersion: ?PWSTR,
    pszInfoTip: ?PWSTR,
    cchInfoTip: u32,
    pclsid: ?*Guid,
    dwFlags: u32,
    pszIconFile: ?PWSTR,
    cchIconFile: u32,
    iIconIndex: i32,
    pszLogo: ?PWSTR,
    cchLogo: u32,
};

pub const BFFCALLBACK = *const fn(
    hwnd: ?HWND,
    uMsg: u32,
    lParam: LPARAM,
    lpData: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const BROWSEINFOA = extern struct {
    hwndOwner: ?HWND,
    pidlRoot: ?*ITEMIDLIST,
    pszDisplayName: ?PSTR,
    lpszTitle: ?[*:0]const u8,
    ulFlags: u32,
    lpfn: ?BFFCALLBACK,
    lParam: LPARAM,
    iImage: i32,
};

pub const BROWSEINFOW = extern struct {
    hwndOwner: ?HWND,
    pidlRoot: ?*ITEMIDLIST,
    pszDisplayName: ?PWSTR,
    lpszTitle: ?[*:0]const u16,
    ulFlags: u32,
    lpfn: ?BFFCALLBACK,
    lParam: LPARAM,
    iImage: i32,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IShellDetails_Value = Guid.initString("000214ec-0000-0000-c000-000000000046");
pub const IID_IShellDetails = &IID_IShellDetails_Value;
pub const IShellDetails = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDetailsOf: *const fn(
            self: *const IShellDetails,
            pidl: ?*ITEMIDLIST,
            iColumn: u32,
            pDetails: ?*SHELLDETAILS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ColumnClick: *const fn(
            self: *const IShellDetails,
            iColumn: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetDetailsOf(self: *const IShellDetails, pidl: ?*ITEMIDLIST, iColumn: u32, pDetails: ?*SHELLDETAILS) callconv(.Inline) HRESULT {
        return self.vtable.GetDetailsOf(self, pidl, iColumn, pDetails);
    }
    pub fn ColumnClick(self: *const IShellDetails, iColumn: u32) callconv(.Inline) HRESULT {
        return self.vtable.ColumnClick(self, iColumn);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IObjMgr_Value = Guid.initString("00bb2761-6a77-11d0-a535-00c04fd7d062");
pub const IID_IObjMgr = &IID_IObjMgr_Value;
pub const IObjMgr = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Append: *const fn(
            self: *const IObjMgr,
            punk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const IObjMgr,
            punk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Append(self: *const IObjMgr, punk: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.Append(self, punk);
    }
    pub fn Remove(self: *const IObjMgr, punk: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, punk);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IACList_Value = Guid.initString("77a130b0-94fd-11d0-a544-00c04fd7d062");
pub const IID_IACList = &IID_IACList_Value;
pub const IACList = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Expand: *const fn(
            self: *const IACList,
            pszExpand: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Expand(self: *const IACList, pszExpand: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.Expand(self, pszExpand);
    }
};

pub const AUTOCOMPLETELISTOPTIONS = enum(i32) {
    NONE = 0,
    CURRENTDIR = 1,
    MYCOMPUTER = 2,
    DESKTOP = 4,
    FAVORITES = 8,
    FILESYSONLY = 16,
    FILESYSDIRS = 32,
    VIRTUALNAMESPACE = 64,
};
pub const ACLO_NONE = AUTOCOMPLETELISTOPTIONS.NONE;
pub const ACLO_CURRENTDIR = AUTOCOMPLETELISTOPTIONS.CURRENTDIR;
pub const ACLO_MYCOMPUTER = AUTOCOMPLETELISTOPTIONS.MYCOMPUTER;
pub const ACLO_DESKTOP = AUTOCOMPLETELISTOPTIONS.DESKTOP;
pub const ACLO_FAVORITES = AUTOCOMPLETELISTOPTIONS.FAVORITES;
pub const ACLO_FILESYSONLY = AUTOCOMPLETELISTOPTIONS.FILESYSONLY;
pub const ACLO_FILESYSDIRS = AUTOCOMPLETELISTOPTIONS.FILESYSDIRS;
pub const ACLO_VIRTUALNAMESPACE = AUTOCOMPLETELISTOPTIONS.VIRTUALNAMESPACE;

// TODO: this type is limited to platform 'windows5.0'
const IID_IACList2_Value = Guid.initString("470141a0-5186-11d2-bbb6-0060977b464c");
pub const IID_IACList2 = &IID_IACList2_Value;
pub const IACList2 = extern union {
    pub const VTable = extern struct {
        base: IACList.VTable,
        SetOptions: *const fn(
            self: *const IACList2,
            dwFlag: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptions: *const fn(
            self: *const IACList2,
            pdwFlag: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IACList: IACList,
    IUnknown: IUnknown,
    pub fn SetOptions(self: *const IACList2, dwFlag: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetOptions(self, dwFlag);
    }
    pub fn GetOptions(self: *const IACList2, pdwFlag: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetOptions(self, pdwFlag);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IProgressDialog_Value = Guid.initString("ebbc7c04-315e-11d2-b62f-006097df5bd4");
pub const IID_IProgressDialog = &IID_IProgressDialog_Value;
pub const IProgressDialog = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        StartProgressDialog: *const fn(
            self: *const IProgressDialog,
            hwndParent: ?HWND,
            punkEnableModless: ?*IUnknown,
            dwFlags: u32,
            pvResevered: ?*const anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopProgressDialog: *const fn(
            self: *const IProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTitle: *const fn(
            self: *const IProgressDialog,
            pwzTitle: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAnimation: *const fn(
            self: *const IProgressDialog,
            hInstAnimation: ?HINSTANCE,
            idAnimation: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasUserCancelled: *const fn(
            self: *const IProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        SetProgress: *const fn(
            self: *const IProgressDialog,
            dwCompleted: u32,
            dwTotal: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProgress64: *const fn(
            self: *const IProgressDialog,
            ullCompleted: u64,
            ullTotal: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLine: *const fn(
            self: *const IProgressDialog,
            dwLineNum: u32,
            pwzString: ?[*:0]const u16,
            fCompactPath: BOOL,
            pvResevered: ?*const anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCancelMsg: *const fn(
            self: *const IProgressDialog,
            pwzCancelMsg: ?[*:0]const u16,
            pvResevered: ?*const anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Timer: *const fn(
            self: *const IProgressDialog,
            dwTimerAction: u32,
            pvResevered: ?*const anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn StartProgressDialog(self: *const IProgressDialog, hwndParent: ?HWND, punkEnableModless: ?*IUnknown, dwFlags: u32, pvResevered: ?*const anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.StartProgressDialog(self, hwndParent, punkEnableModless, dwFlags, pvResevered);
    }
    pub fn StopProgressDialog(self: *const IProgressDialog) callconv(.Inline) HRESULT {
        return self.vtable.StopProgressDialog(self);
    }
    pub fn SetTitle(self: *const IProgressDialog, pwzTitle: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetTitle(self, pwzTitle);
    }
    pub fn SetAnimation(self: *const IProgressDialog, hInstAnimation: ?HINSTANCE, idAnimation: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetAnimation(self, hInstAnimation, idAnimation);
    }
    pub fn HasUserCancelled(self: *const IProgressDialog) callconv(.Inline) BOOL {
        return self.vtable.HasUserCancelled(self);
    }
    pub fn SetProgress(self: *const IProgressDialog, dwCompleted: u32, dwTotal: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetProgress(self, dwCompleted, dwTotal);
    }
    pub fn SetProgress64(self: *const IProgressDialog, ullCompleted: u64, ullTotal: u64) callconv(.Inline) HRESULT {
        return self.vtable.SetProgress64(self, ullCompleted, ullTotal);
    }
    pub fn SetLine(self: *const IProgressDialog, dwLineNum: u32, pwzString: ?[*:0]const u16, fCompactPath: BOOL, pvResevered: ?*const anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.SetLine(self, dwLineNum, pwzString, fCompactPath, pvResevered);
    }
    pub fn SetCancelMsg(self: *const IProgressDialog, pwzCancelMsg: ?[*:0]const u16, pvResevered: ?*const anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.SetCancelMsg(self, pwzCancelMsg, pvResevered);
    }
    pub fn Timer(self: *const IProgressDialog, dwTimerAction: u32, pvResevered: ?*const anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.Timer(self, dwTimerAction, pvResevered);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IDockingWindowSite_Value = Guid.initString("2a342fc2-7b26-11d0-8ca9-00a0c92dbfe8");
pub const IID_IDockingWindowSite = &IID_IDockingWindowSite_Value;
pub const IDockingWindowSite = extern union {
    pub const VTable = extern struct {
        base: IOleWindow.VTable,
        GetBorderDW: *const fn(
            self: *const IDockingWindowSite,
            punkObj: ?*IUnknown,
            prcBorder: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestBorderSpaceDW: *const fn(
            self: *const IDockingWindowSite,
            punkObj: ?*IUnknown,
            pbw: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBorderSpaceDW: *const fn(
            self: *const IDockingWindowSite,
            punkObj: ?*IUnknown,
            pbw: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IOleWindow: IOleWindow,
    IUnknown: IUnknown,
    pub fn GetBorderDW(self: *const IDockingWindowSite, punkObj: ?*IUnknown, prcBorder: ?*RECT) callconv(.Inline) HRESULT {
        return self.vtable.GetBorderDW(self, punkObj, prcBorder);
    }
    pub fn RequestBorderSpaceDW(self: *const IDockingWindowSite, punkObj: ?*IUnknown, pbw: ?*RECT) callconv(.Inline) HRESULT {
        return self.vtable.RequestBorderSpaceDW(self, punkObj, pbw);
    }
    pub fn SetBorderSpaceDW(self: *const IDockingWindowSite, punkObj: ?*IUnknown, pbw: ?*RECT) callconv(.Inline) HRESULT {
        return self.vtable.SetBorderSpaceDW(self, punkObj, pbw);
    }
};

pub const NRESARRAY = extern struct {
    cItems: u32,
    nr: [1]NETRESOURCEA,
};

pub const CIDA = extern struct {
    cidl: u32 align(1),
    aoffset: [1]u32 align(1),
};

pub const FD_FLAGS = enum(i32) {
    CLSID = 1,
    SIZEPOINT = 2,
    ATTRIBUTES = 4,
    CREATETIME = 8,
    ACCESSTIME = 16,
    WRITESTIME = 32,
    FILESIZE = 64,
    PROGRESSUI = 16384,
    LINKUI = 32768,
    UNICODE = -2147483648,
};
pub const FD_CLSID = FD_FLAGS.CLSID;
pub const FD_SIZEPOINT = FD_FLAGS.SIZEPOINT;
pub const FD_ATTRIBUTES = FD_FLAGS.ATTRIBUTES;
pub const FD_CREATETIME = FD_FLAGS.CREATETIME;
pub const FD_ACCESSTIME = FD_FLAGS.ACCESSTIME;
pub const FD_WRITESTIME = FD_FLAGS.WRITESTIME;
pub const FD_FILESIZE = FD_FLAGS.FILESIZE;
pub const FD_PROGRESSUI = FD_FLAGS.PROGRESSUI;
pub const FD_LINKUI = FD_FLAGS.LINKUI;
pub const FD_UNICODE = FD_FLAGS.UNICODE;

pub const FILEDESCRIPTORA = extern struct {
    dwFlags: u32 align(1),
    clsid: Guid align(1),
    sizel: SIZE align(1),
    pointl: POINTL align(1),
    dwFileAttributes: u32 align(1),
    ftCreationTime: FILETIME align(1),
    ftLastAccessTime: FILETIME align(1),
    ftLastWriteTime: FILETIME align(1),
    nFileSizeHigh: u32 align(1),
    nFileSizeLow: u32 align(1),
    cFileName: [260]CHAR align(1),
};

pub const FILEDESCRIPTORW = extern struct {
    dwFlags: u32 align(1),
    clsid: Guid align(1),
    sizel: SIZE align(1),
    pointl: POINTL align(1),
    dwFileAttributes: u32 align(1),
    ftCreationTime: FILETIME align(1),
    ftLastAccessTime: FILETIME align(1),
    ftLastWriteTime: FILETIME align(1),
    nFileSizeHigh: u32 align(1),
    nFileSizeLow: u32 align(1),
    cFileName: [260]u16 align(1),
};

// TODO: not generating this type because array of 'win32.ui.shell.FILEDESCRIPTORA' not allowed in packed struct due to padding bits
pub const FILEGROUPDESCRIPTORA = usize;

pub const FILEGROUPDESCRIPTORW = extern struct {
    cItems: u32 align(1),
    fgd: [1]FILEDESCRIPTORW align(1),
};

pub const DROPFILES = extern struct {
    pFiles: u32 align(1),
    pt: POINT align(1),
    fNC: BOOL align(1),
    fWide: BOOL align(1),
};

pub const FILE_ATTRIBUTES_ARRAY = extern struct {
    cItems: u32 align(1),
    dwSumFileAttributes: u32 align(1),
    dwProductFileAttributes: u32 align(1),
    rgdwFileAttributes: [1]u32 align(1),
};

pub const DROPIMAGETYPE = enum(i32) {
    INVALID = -1,
    NONE = 0,
    COPY = 1,
    MOVE = 2,
    LINK = 4,
    LABEL = 6,
    WARNING = 7,
    NOIMAGE = 8,
};
pub const DROPIMAGE_INVALID = DROPIMAGETYPE.INVALID;
pub const DROPIMAGE_NONE = DROPIMAGETYPE.NONE;
pub const DROPIMAGE_COPY = DROPIMAGETYPE.COPY;
pub const DROPIMAGE_MOVE = DROPIMAGETYPE.MOVE;
pub const DROPIMAGE_LINK = DROPIMAGETYPE.LINK;
pub const DROPIMAGE_LABEL = DROPIMAGETYPE.LABEL;
pub const DROPIMAGE_WARNING = DROPIMAGETYPE.WARNING;
pub const DROPIMAGE_NOIMAGE = DROPIMAGETYPE.NOIMAGE;

pub const DROPDESCRIPTION = extern struct {
    type: DROPIMAGETYPE align(1),
    szMessage: [260]u16 align(1),
    szInsert: [260]u16 align(1),
};

pub const SHChangeNotifyEntry = extern struct {
    pidl: ?*ITEMIDLIST align(1),
    fRecursive: BOOL align(1),
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IShellChangeNotify_Value = Guid.initString("d82be2b1-5764-11d0-a96e-00c04fd705a2");
pub const IID_IShellChangeNotify = &IID_IShellChangeNotify_Value;
pub const IShellChangeNotify = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnChange: *const fn(
            self: *const IShellChangeNotify,
            lEvent: i32,
            pidl1: ?*ITEMIDLIST,
            pidl2: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnChange(self: *const IShellChangeNotify, lEvent: i32, pidl1: ?*ITEMIDLIST, pidl2: ?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.OnChange(self, lEvent, pidl1, pidl2);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IQueryInfo_Value = Guid.initString("00021500-0000-0000-c000-000000000046");
pub const IID_IQueryInfo = &IID_IQueryInfo_Value;
pub const IQueryInfo = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInfoTip: *const fn(
            self: *const IQueryInfo,
            dwFlags: QITIPF_FLAGS,
            ppwszTip: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInfoFlags: *const fn(
            self: *const IQueryInfo,
            pdwFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetInfoTip(self: *const IQueryInfo, dwFlags: QITIPF_FLAGS, ppwszTip: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetInfoTip(self, dwFlags, ppwszTip);
    }
    pub fn GetInfoFlags(self: *const IQueryInfo, pdwFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetInfoFlags(self, pdwFlags);
    }
};

pub const SHARD = enum(i32) {
    PIDL = 1,
    PATHA = 2,
    PATHW = 3,
    APPIDINFO = 4,
    APPIDINFOIDLIST = 5,
    LINK = 6,
    APPIDINFOLINK = 7,
    SHELLITEM = 8,
};
pub const SHARD_PIDL = SHARD.PIDL;
pub const SHARD_PATHA = SHARD.PATHA;
pub const SHARD_PATHW = SHARD.PATHW;
pub const SHARD_APPIDINFO = SHARD.APPIDINFO;
pub const SHARD_APPIDINFOIDLIST = SHARD.APPIDINFOIDLIST;
pub const SHARD_LINK = SHARD.LINK;
pub const SHARD_APPIDINFOLINK = SHARD.APPIDINFOLINK;
pub const SHARD_SHELLITEM = SHARD.SHELLITEM;

pub const SHARDAPPIDINFO = extern struct {
    psi: ?*IShellItem align(1),
    pszAppID: ?[*:0]const u16 align(1),
};

pub const SHARDAPPIDINFOIDLIST = extern struct {
    pidl: ?*ITEMIDLIST align(1),
    pszAppID: ?[*:0]const u16 align(1),
};

pub const SHARDAPPIDINFOLINK = extern struct {
    psl: ?*IShellLinkA align(1),
    pszAppID: ?[*:0]const u16 align(1),
};

pub const SHChangeDWORDAsIDList = extern struct {
    cb: u16 align(1),
    dwItem1: u32 align(1),
    dwItem2: u32 align(1),
    cbZero: u16 align(1),
};

pub const SHChangeUpdateImageIDList = extern struct {
    cb: u16 align(1),
    iIconIndex: i32 align(1),
    iCurIndex: i32 align(1),
    uFlags: u32 align(1),
    dwProcessID: u32 align(1),
    szName: [260]u16 align(1),
    cbZero: u16 align(1),
};

pub const SCNRT_STATUS = enum(i32) {
    ENABLE = 0,
    DISABLE = 1,
};
pub const SCNRT_ENABLE = SCNRT_STATUS.ENABLE;
pub const SCNRT_DISABLE = SCNRT_STATUS.DISABLE;

pub const SHDESCRIPTIONID = extern struct {
    dwDescriptionId: SHDID_ID,
    clsid: Guid,
};

pub const AUTO_SCROLL_DATA = extern struct {
    iNextSample: i32 align(1),
    dwLastScroll: u32 align(1),
    bFull: BOOL align(1),
    pts: [3]POINT align(1),
    dwTimes: [3]u32 align(1),
};

pub const CABINETSTATE = extern struct {
    cLength: u16 align(1),
    nVersion: u16 align(1),
    _bitfield: i32 align(1),
    fMenuEnumFilter: u32 align(1),
};

pub const RESTRICTIONS = enum(i32) {
    NONE = 0,
    NORUN = 1,
    NOCLOSE = 2,
    NOSAVESET = 4,
    NOFILEMENU = 8,
    NOSETFOLDERS = 16,
    NOSETTASKBAR = 32,
    NODESKTOP = 64,
    NOFIND = 128,
    NODRIVES = 256,
    NODRIVEAUTORUN = 512,
    NODRIVETYPEAUTORUN = 1024,
    NONETHOOD = 2048,
    STARTBANNER = 4096,
    RESTRICTRUN = 8192,
    NOPRINTERTABS = 16384,
    NOPRINTERDELETE = 32768,
    NOPRINTERADD = 65536,
    NOSTARTMENUSUBFOLDERS = 131072,
    MYDOCSONNET = 262144,
    NOEXITTODOS = 524288,
    ENFORCESHELLEXTSECURITY = 1048576,
    LINKRESOLVEIGNORELINKINFO = 2097152,
    NOCOMMONGROUPS = 4194304,
    SEPARATEDESKTOPPROCESS = 8388608,
    NOWEB = 16777216,
    NOTRAYCONTEXTMENU = 33554432,
    NOVIEWCONTEXTMENU = 67108864,
    NONETCONNECTDISCONNECT = 134217728,
    STARTMENULOGOFF = 268435456,
    NOSETTINGSASSIST = 536870912,
    NOINTERNETICON = 1073741825,
    NORECENTDOCSHISTORY = 1073741826,
    NORECENTDOCSMENU = 1073741827,
    NOACTIVEDESKTOP = 1073741828,
    NOACTIVEDESKTOPCHANGES = 1073741829,
    NOFAVORITESMENU = 1073741830,
    CLEARRECENTDOCSONEXIT = 1073741831,
    CLASSICSHELL = 1073741832,
    NOCUSTOMIZEWEBVIEW = 1073741833,
    NOHTMLWALLPAPER = 1073741840,
    NOCHANGINGWALLPAPER = 1073741841,
    NODESKCOMP = 1073741842,
    NOADDDESKCOMP = 1073741843,
    NODELDESKCOMP = 1073741844,
    NOCLOSEDESKCOMP = 1073741845,
    NOCLOSE_DRAGDROPBAND = 1073741846,
    NOMOVINGBAND = 1073741847,
    NOEDITDESKCOMP = 1073741848,
    NORESOLVESEARCH = 1073741849,
    NORESOLVETRACK = 1073741850,
    FORCECOPYACLWITHFILE = 1073741851,
    NOFORGETSOFTWAREUPDATE = 1073741853,
    NOSETACTIVEDESKTOP = 1073741854,
    NOUPDATEWINDOWS = 1073741855,
    NOCHANGESTARMENU = 1073741856,
    NOFOLDEROPTIONS = 1073741857,
    HASFINDCOMPUTERS = 1073741858,
    INTELLIMENUS = 1073741859,
    RUNDLGMEMCHECKBOX = 1073741860,
    ARP_ShowPostSetup = 1073741861,
    NOCSC = 1073741862,
    NOCONTROLPANEL = 1073741863,
    ENUMWORKGROUP = 1073741864,
    ARP_NOARP = 1073741865,
    ARP_NOREMOVEPAGE = 1073741866,
    ARP_NOADDPAGE = 1073741867,
    ARP_NOWINSETUPPAGE = 1073741868,
    GREYMSIADS = 1073741869,
    NOCHANGEMAPPEDDRIVELABEL = 1073741870,
    NOCHANGEMAPPEDDRIVECOMMENT = 1073741871,
    MaxRecentDocs = 1073741872,
    NONETWORKCONNECTIONS = 1073741873,
    FORCESTARTMENULOGOFF = 1073741874,
    NOWEBVIEW = 1073741875,
    NOCUSTOMIZETHISFOLDER = 1073741876,
    NOENCRYPTION = 1073741877,
    DONTSHOWSUPERHIDDEN = 1073741879,
    NOSHELLSEARCHBUTTON = 1073741880,
    NOHARDWARETAB = 1073741881,
    NORUNASINSTALLPROMPT = 1073741882,
    PROMPTRUNASINSTALLNETPATH = 1073741883,
    NOMANAGEMYCOMPUTERVERB = 1073741884,
    DISALLOWRUN = 1073741886,
    NOWELCOMESCREEN = 1073741887,
    RESTRICTCPL = 1073741888,
    DISALLOWCPL = 1073741889,
    NOSMBALLOONTIP = 1073741890,
    NOSMHELP = 1073741891,
    NOWINKEYS = 1073741892,
    NOENCRYPTONMOVE = 1073741893,
    NOLOCALMACHINERUN = 1073741894,
    NOCURRENTUSERRUN = 1073741895,
    NOLOCALMACHINERUNONCE = 1073741896,
    NOCURRENTUSERRUNONCE = 1073741897,
    FORCEACTIVEDESKTOPON = 1073741898,
    NOVIEWONDRIVE = 1073741900,
    NONETCRAWL = 1073741901,
    NOSHAREDDOCUMENTS = 1073741902,
    NOSMMYDOCS = 1073741903,
    NOSMMYPICS = 1073741904,
    ALLOWBITBUCKDRIVES = 1073741905,
    NONLEGACYSHELLMODE = 1073741906,
    NOCONTROLPANELBARRICADE = 1073741907,
    NOSTARTPAGE = 1073741908,
    NOAUTOTRAYNOTIFY = 1073741909,
    NOTASKGROUPING = 1073741910,
    NOCDBURNING = 1073741911,
    MYCOMPNOPROP = 1073741912,
    MYDOCSNOPROP = 1073741913,
    NOSTARTPANEL = 1073741914,
    NODISPLAYAPPEARANCEPAGE = 1073741915,
    NOTHEMESTAB = 1073741916,
    NOVISUALSTYLECHOICE = 1073741917,
    NOSIZECHOICE = 1073741918,
    NOCOLORCHOICE = 1073741919,
    SETVISUALSTYLE = 1073741920,
    STARTRUNNOHOMEPATH = 1073741921,
    NOUSERNAMEINSTARTPANEL = 1073741922,
    NOMYCOMPUTERICON = 1073741923,
    NOSMNETWORKPLACES = 1073741924,
    NOSMPINNEDLIST = 1073741925,
    NOSMMYMUSIC = 1073741926,
    NOSMEJECTPC = 1073741927,
    NOSMMOREPROGRAMS = 1073741928,
    NOSMMFUPROGRAMS = 1073741929,
    NOTRAYITEMSDISPLAY = 1073741930,
    NOTOOLBARSONTASKBAR = 1073741931,
    NOSMCONFIGUREPROGRAMS = 1073741935,
    HIDECLOCK = 1073741936,
    NOLOWDISKSPACECHECKS = 1073741937,
    NOENTIRENETWORK = 1073741938,
    NODESKTOPCLEANUP = 1073741939,
    BITBUCKNUKEONDELETE = 1073741940,
    BITBUCKCONFIRMDELETE = 1073741941,
    BITBUCKNOPROP = 1073741942,
    NODISPBACKGROUND = 1073741943,
    NODISPSCREENSAVEPG = 1073741944,
    NODISPSETTINGSPG = 1073741945,
    NODISPSCREENSAVEPREVIEW = 1073741946,
    NODISPLAYCPL = 1073741947,
    HIDERUNASVERB = 1073741948,
    NOTHUMBNAILCACHE = 1073741949,
    NOSTRCMPLOGICAL = 1073741950,
    NOPUBLISHWIZARD = 1073741951,
    NOONLINEPRINTSWIZARD = 1073741952,
    NOWEBSERVICES = 1073741953,
    ALLOWUNHASHEDWEBVIEW = 1073741954,
    ALLOWLEGACYWEBVIEW = 1073741955,
    REVERTWEBVIEWSECURITY = 1073741956,
    INHERITCONSOLEHANDLES = 1073741958,
    NOREMOTERECURSIVEEVENTS = 1073741961,
    NOREMOTECHANGENOTIFY = 1073741969,
    NOENUMENTIRENETWORK = 1073741971,
    NOINTERNETOPENWITH = 1073741973,
    DONTRETRYBADNETNAME = 1073741979,
    ALLOWFILECLSIDJUNCTIONS = 1073741980,
    NOUPNPINSTALL = 1073741981,
    ARP_DONTGROUPPATCHES = 1073741996,
    ARP_NOCHOOSEPROGRAMSPAGE = 1073741997,
    NODISCONNECT = 1090519041,
    NOSECURITY = 1090519042,
    NOFILEASSOCIATE = 1090519043,
    ALLOWCOMMENTTOGGLE = 1090519044,
};
pub const REST_NONE = RESTRICTIONS.NONE;
pub const REST_NORUN = RESTRICTIONS.NORUN;
pub const REST_NOCLOSE = RESTRICTIONS.NOCLOSE;
pub const REST_NOSAVESET = RESTRICTIONS.NOSAVESET;
pub const REST_NOFILEMENU = RESTRICTIONS.NOFILEMENU;
pub const REST_NOSETFOLDERS = RESTRICTIONS.NOSETFOLDERS;
pub const REST_NOSETTASKBAR = RESTRICTIONS.NOSETTASKBAR;
pub const REST_NODESKTOP = RESTRICTIONS.NODESKTOP;
pub const REST_NOFIND = RESTRICTIONS.NOFIND;
pub const REST_NODRIVES = RESTRICTIONS.NODRIVES;
pub const REST_NODRIVEAUTORUN = RESTRICTIONS.NODRIVEAUTORUN;
pub const REST_NODRIVETYPEAUTORUN = RESTRICTIONS.NODRIVETYPEAUTORUN;
pub const REST_NONETHOOD = RESTRICTIONS.NONETHOOD;
pub const REST_STARTBANNER = RESTRICTIONS.STARTBANNER;
pub const REST_RESTRICTRUN = RESTRICTIONS.RESTRICTRUN;
pub const REST_NOPRINTERTABS = RESTRICTIONS.NOPRINTERTABS;
pub const REST_NOPRINTERDELETE = RESTRICTIONS.NOPRINTERDELETE;
pub const REST_NOPRINTERADD = RESTRICTIONS.NOPRINTERADD;
pub const REST_NOSTARTMENUSUBFOLDERS = RESTRICTIONS.NOSTARTMENUSUBFOLDERS;
pub const REST_MYDOCSONNET = RESTRICTIONS.MYDOCSONNET;
pub const REST_NOEXITTODOS = RESTRICTIONS.NOEXITTODOS;
pub const REST_ENFORCESHELLEXTSECURITY = RESTRICTIONS.ENFORCESHELLEXTSECURITY;
pub const REST_LINKRESOLVEIGNORELINKINFO = RESTRICTIONS.LINKRESOLVEIGNORELINKINFO;
pub const REST_NOCOMMONGROUPS = RESTRICTIONS.NOCOMMONGROUPS;
pub const REST_SEPARATEDESKTOPPROCESS = RESTRICTIONS.SEPARATEDESKTOPPROCESS;
pub const REST_NOWEB = RESTRICTIONS.NOWEB;
pub const REST_NOTRAYCONTEXTMENU = RESTRICTIONS.NOTRAYCONTEXTMENU;
pub const REST_NOVIEWCONTEXTMENU = RESTRICTIONS.NOVIEWCONTEXTMENU;
pub const REST_NONETCONNECTDISCONNECT = RESTRICTIONS.NONETCONNECTDISCONNECT;
pub const REST_STARTMENULOGOFF = RESTRICTIONS.STARTMENULOGOFF;
pub const REST_NOSETTINGSASSIST = RESTRICTIONS.NOSETTINGSASSIST;
pub const REST_NOINTERNETICON = RESTRICTIONS.NOINTERNETICON;
pub const REST_NORECENTDOCSHISTORY = RESTRICTIONS.NORECENTDOCSHISTORY;
pub const REST_NORECENTDOCSMENU = RESTRICTIONS.NORECENTDOCSMENU;
pub const REST_NOACTIVEDESKTOP = RESTRICTIONS.NOACTIVEDESKTOP;
pub const REST_NOACTIVEDESKTOPCHANGES = RESTRICTIONS.NOACTIVEDESKTOPCHANGES;
pub const REST_NOFAVORITESMENU = RESTRICTIONS.NOFAVORITESMENU;
pub const REST_CLEARRECENTDOCSONEXIT = RESTRICTIONS.CLEARRECENTDOCSONEXIT;
pub const REST_CLASSICSHELL = RESTRICTIONS.CLASSICSHELL;
pub const REST_NOCUSTOMIZEWEBVIEW = RESTRICTIONS.NOCUSTOMIZEWEBVIEW;
pub const REST_NOHTMLWALLPAPER = RESTRICTIONS.NOHTMLWALLPAPER;
pub const REST_NOCHANGINGWALLPAPER = RESTRICTIONS.NOCHANGINGWALLPAPER;
pub const REST_NODESKCOMP = RESTRICTIONS.NODESKCOMP;
pub const REST_NOADDDESKCOMP = RESTRICTIONS.NOADDDESKCOMP;
pub const REST_NODELDESKCOMP = RESTRICTIONS.NODELDESKCOMP;
pub const REST_NOCLOSEDESKCOMP = RESTRICTIONS.NOCLOSEDESKCOMP;
pub const REST_NOCLOSE_DRAGDROPBAND = RESTRICTIONS.NOCLOSE_DRAGDROPBAND;
pub const REST_NOMOVINGBAND = RESTRICTIONS.NOMOVINGBAND;
pub const REST_NOEDITDESKCOMP = RESTRICTIONS.NOEDITDESKCOMP;
pub const REST_NORESOLVESEARCH = RESTRICTIONS.NORESOLVESEARCH;
pub const REST_NORESOLVETRACK = RESTRICTIONS.NORESOLVETRACK;
pub const REST_FORCECOPYACLWITHFILE = RESTRICTIONS.FORCECOPYACLWITHFILE;
pub const REST_NOFORGETSOFTWAREUPDATE = RESTRICTIONS.NOFORGETSOFTWAREUPDATE;
pub const REST_NOSETACTIVEDESKTOP = RESTRICTIONS.NOSETACTIVEDESKTOP;
pub const REST_NOUPDATEWINDOWS = RESTRICTIONS.NOUPDATEWINDOWS;
pub const REST_NOCHANGESTARMENU = RESTRICTIONS.NOCHANGESTARMENU;
pub const REST_NOFOLDEROPTIONS = RESTRICTIONS.NOFOLDEROPTIONS;
pub const REST_HASFINDCOMPUTERS = RESTRICTIONS.HASFINDCOMPUTERS;
pub const REST_INTELLIMENUS = RESTRICTIONS.INTELLIMENUS;
pub const REST_RUNDLGMEMCHECKBOX = RESTRICTIONS.RUNDLGMEMCHECKBOX;
pub const REST_ARP_ShowPostSetup = RESTRICTIONS.ARP_ShowPostSetup;
pub const REST_NOCSC = RESTRICTIONS.NOCSC;
pub const REST_NOCONTROLPANEL = RESTRICTIONS.NOCONTROLPANEL;
pub const REST_ENUMWORKGROUP = RESTRICTIONS.ENUMWORKGROUP;
pub const REST_ARP_NOARP = RESTRICTIONS.ARP_NOARP;
pub const REST_ARP_NOREMOVEPAGE = RESTRICTIONS.ARP_NOREMOVEPAGE;
pub const REST_ARP_NOADDPAGE = RESTRICTIONS.ARP_NOADDPAGE;
pub const REST_ARP_NOWINSETUPPAGE = RESTRICTIONS.ARP_NOWINSETUPPAGE;
pub const REST_GREYMSIADS = RESTRICTIONS.GREYMSIADS;
pub const REST_NOCHANGEMAPPEDDRIVELABEL = RESTRICTIONS.NOCHANGEMAPPEDDRIVELABEL;
pub const REST_NOCHANGEMAPPEDDRIVECOMMENT = RESTRICTIONS.NOCHANGEMAPPEDDRIVECOMMENT;
pub const REST_MaxRecentDocs = RESTRICTIONS.MaxRecentDocs;
pub const REST_NONETWORKCONNECTIONS = RESTRICTIONS.NONETWORKCONNECTIONS;
pub const REST_FORCESTARTMENULOGOFF = RESTRICTIONS.FORCESTARTMENULOGOFF;
pub const REST_NOWEBVIEW = RESTRICTIONS.NOWEBVIEW;
pub const REST_NOCUSTOMIZETHISFOLDER = RESTRICTIONS.NOCUSTOMIZETHISFOLDER;
pub const REST_NOENCRYPTION = RESTRICTIONS.NOENCRYPTION;
pub const REST_DONTSHOWSUPERHIDDEN = RESTRICTIONS.DONTSHOWSUPERHIDDEN;
pub const REST_NOSHELLSEARCHBUTTON = RESTRICTIONS.NOSHELLSEARCHBUTTON;
pub const REST_NOHARDWARETAB = RESTRICTIONS.NOHARDWARETAB;
pub const REST_NORUNASINSTALLPROMPT = RESTRICTIONS.NORUNASINSTALLPROMPT;
pub const REST_PROMPTRUNASINSTALLNETPATH = RESTRICTIONS.PROMPTRUNASINSTALLNETPATH;
pub const REST_NOMANAGEMYCOMPUTERVERB = RESTRICTIONS.NOMANAGEMYCOMPUTERVERB;
pub const REST_DISALLOWRUN = RESTRICTIONS.DISALLOWRUN;
pub const REST_NOWELCOMESCREEN = RESTRICTIONS.NOWELCOMESCREEN;
pub const REST_RESTRICTCPL = RESTRICTIONS.RESTRICTCPL;
pub const REST_DISALLOWCPL = RESTRICTIONS.DISALLOWCPL;
pub const REST_NOSMBALLOONTIP = RESTRICTIONS.NOSMBALLOONTIP;
pub const REST_NOSMHELP = RESTRICTIONS.NOSMHELP;
pub const REST_NOWINKEYS = RESTRICTIONS.NOWINKEYS;
pub const REST_NOENCRYPTONMOVE = RESTRICTIONS.NOENCRYPTONMOVE;
pub const REST_NOLOCALMACHINERUN = RESTRICTIONS.NOLOCALMACHINERUN;
pub const REST_NOCURRENTUSERRUN = RESTRICTIONS.NOCURRENTUSERRUN;
pub const REST_NOLOCALMACHINERUNONCE = RESTRICTIONS.NOLOCALMACHINERUNONCE;
pub const REST_NOCURRENTUSERRUNONCE = RESTRICTIONS.NOCURRENTUSERRUNONCE;
pub const REST_FORCEACTIVEDESKTOPON = RESTRICTIONS.FORCEACTIVEDESKTOPON;
pub const REST_NOVIEWONDRIVE = RESTRICTIONS.NOVIEWONDRIVE;
pub const REST_NONETCRAWL = RESTRICTIONS.NONETCRAWL;
pub const REST_NOSHAREDDOCUMENTS = RESTRICTIONS.NOSHAREDDOCUMENTS;
pub const REST_NOSMMYDOCS = RESTRICTIONS.NOSMMYDOCS;
pub const REST_NOSMMYPICS = RESTRICTIONS.NOSMMYPICS;
pub const REST_ALLOWBITBUCKDRIVES = RESTRICTIONS.ALLOWBITBUCKDRIVES;
pub const REST_NONLEGACYSHELLMODE = RESTRICTIONS.NONLEGACYSHELLMODE;
pub const REST_NOCONTROLPANELBARRICADE = RESTRICTIONS.NOCONTROLPANELBARRICADE;
pub const REST_NOSTARTPAGE = RESTRICTIONS.NOSTARTPAGE;
pub const REST_NOAUTOTRAYNOTIFY = RESTRICTIONS.NOAUTOTRAYNOTIFY;
pub const REST_NOTASKGROUPING = RESTRICTIONS.NOTASKGROUPING;
pub const REST_NOCDBURNING = RESTRICTIONS.NOCDBURNING;
pub const REST_MYCOMPNOPROP = RESTRICTIONS.MYCOMPNOPROP;
pub const REST_MYDOCSNOPROP = RESTRICTIONS.MYDOCSNOPROP;
pub const REST_NOSTARTPANEL = RESTRICTIONS.NOSTARTPANEL;
pub const REST_NODISPLAYAPPEARANCEPAGE = RESTRICTIONS.NODISPLAYAPPEARANCEPAGE;
pub const REST_NOTHEMESTAB = RESTRICTIONS.NOTHEMESTAB;
pub const REST_NOVISUALSTYLECHOICE = RESTRICTIONS.NOVISUALSTYLECHOICE;
pub const REST_NOSIZECHOICE = RESTRICTIONS.NOSIZECHOICE;
pub const REST_NOCOLORCHOICE = RESTRICTIONS.NOCOLORCHOICE;
pub const REST_SETVISUALSTYLE = RESTRICTIONS.SETVISUALSTYLE;
pub const REST_STARTRUNNOHOMEPATH = RESTRICTIONS.STARTRUNNOHOMEPATH;
pub const REST_NOUSERNAMEINSTARTPANEL = RESTRICTIONS.NOUSERNAMEINSTARTPANEL;
pub const REST_NOMYCOMPUTERICON = RESTRICTIONS.NOMYCOMPUTERICON;
pub const REST_NOSMNETWORKPLACES = RESTRICTIONS.NOSMNETWORKPLACES;
pub const REST_NOSMPINNEDLIST = RESTRICTIONS.NOSMPINNEDLIST;
pub const REST_NOSMMYMUSIC = RESTRICTIONS.NOSMMYMUSIC;
pub const REST_NOSMEJECTPC = RESTRICTIONS.NOSMEJECTPC;
pub const REST_NOSMMOREPROGRAMS = RESTRICTIONS.NOSMMOREPROGRAMS;
pub const REST_NOSMMFUPROGRAMS = RESTRICTIONS.NOSMMFUPROGRAMS;
pub const REST_NOTRAYITEMSDISPLAY = RESTRICTIONS.NOTRAYITEMSDISPLAY;
pub const REST_NOTOOLBARSONTASKBAR = RESTRICTIONS.NOTOOLBARSONTASKBAR;
pub const REST_NOSMCONFIGUREPROGRAMS = RESTRICTIONS.NOSMCONFIGUREPROGRAMS;
pub const REST_HIDECLOCK = RESTRICTIONS.HIDECLOCK;
pub const REST_NOLOWDISKSPACECHECKS = RESTRICTIONS.NOLOWDISKSPACECHECKS;
pub const REST_NOENTIRENETWORK = RESTRICTIONS.NOENTIRENETWORK;
pub const REST_NODESKTOPCLEANUP = RESTRICTIONS.NODESKTOPCLEANUP;
pub const REST_BITBUCKNUKEONDELETE = RESTRICTIONS.BITBUCKNUKEONDELETE;
pub const REST_BITBUCKCONFIRMDELETE = RESTRICTIONS.BITBUCKCONFIRMDELETE;
pub const REST_BITBUCKNOPROP = RESTRICTIONS.BITBUCKNOPROP;
pub const REST_NODISPBACKGROUND = RESTRICTIONS.NODISPBACKGROUND;
pub const REST_NODISPSCREENSAVEPG = RESTRICTIONS.NODISPSCREENSAVEPG;
pub const REST_NODISPSETTINGSPG = RESTRICTIONS.NODISPSETTINGSPG;
pub const REST_NODISPSCREENSAVEPREVIEW = RESTRICTIONS.NODISPSCREENSAVEPREVIEW;
pub const REST_NODISPLAYCPL = RESTRICTIONS.NODISPLAYCPL;
pub const REST_HIDERUNASVERB = RESTRICTIONS.HIDERUNASVERB;
pub const REST_NOTHUMBNAILCACHE = RESTRICTIONS.NOTHUMBNAILCACHE;
pub const REST_NOSTRCMPLOGICAL = RESTRICTIONS.NOSTRCMPLOGICAL;
pub const REST_NOPUBLISHWIZARD = RESTRICTIONS.NOPUBLISHWIZARD;
pub const REST_NOONLINEPRINTSWIZARD = RESTRICTIONS.NOONLINEPRINTSWIZARD;
pub const REST_NOWEBSERVICES = RESTRICTIONS.NOWEBSERVICES;
pub const REST_ALLOWUNHASHEDWEBVIEW = RESTRICTIONS.ALLOWUNHASHEDWEBVIEW;
pub const REST_ALLOWLEGACYWEBVIEW = RESTRICTIONS.ALLOWLEGACYWEBVIEW;
pub const REST_REVERTWEBVIEWSECURITY = RESTRICTIONS.REVERTWEBVIEWSECURITY;
pub const REST_INHERITCONSOLEHANDLES = RESTRICTIONS.INHERITCONSOLEHANDLES;
pub const REST_NOREMOTERECURSIVEEVENTS = RESTRICTIONS.NOREMOTERECURSIVEEVENTS;
pub const REST_NOREMOTECHANGENOTIFY = RESTRICTIONS.NOREMOTECHANGENOTIFY;
pub const REST_NOENUMENTIRENETWORK = RESTRICTIONS.NOENUMENTIRENETWORK;
pub const REST_NOINTERNETOPENWITH = RESTRICTIONS.NOINTERNETOPENWITH;
pub const REST_DONTRETRYBADNETNAME = RESTRICTIONS.DONTRETRYBADNETNAME;
pub const REST_ALLOWFILECLSIDJUNCTIONS = RESTRICTIONS.ALLOWFILECLSIDJUNCTIONS;
pub const REST_NOUPNPINSTALL = RESTRICTIONS.NOUPNPINSTALL;
pub const REST_ARP_DONTGROUPPATCHES = RESTRICTIONS.ARP_DONTGROUPPATCHES;
pub const REST_ARP_NOCHOOSEPROGRAMSPAGE = RESTRICTIONS.ARP_NOCHOOSEPROGRAMSPAGE;
pub const REST_NODISCONNECT = RESTRICTIONS.NODISCONNECT;
pub const REST_NOSECURITY = RESTRICTIONS.NOSECURITY;
pub const REST_NOFILEASSOCIATE = RESTRICTIONS.NOFILEASSOCIATE;
pub const REST_ALLOWCOMMENTTOGGLE = RESTRICTIONS.ALLOWCOMMENTTOGGLE;

pub const OPEN_AS_INFO_FLAGS = packed struct(u32) {
    ALLOW_REGISTRATION: u1 = 0,
    REGISTER_EXT: u1 = 0,
    EXEC: u1 = 0,
    FORCE_REGISTRATION: u1 = 0,
    _4: u1 = 0,
    HIDE_REGISTRATION: u1 = 0,
    URL_PROTOCOL: u1 = 0,
    FILE_IS_URI: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const OAIF_ALLOW_REGISTRATION = OPEN_AS_INFO_FLAGS{ .ALLOW_REGISTRATION = 1 };
pub const OAIF_REGISTER_EXT = OPEN_AS_INFO_FLAGS{ .REGISTER_EXT = 1 };
pub const OAIF_EXEC = OPEN_AS_INFO_FLAGS{ .EXEC = 1 };
pub const OAIF_FORCE_REGISTRATION = OPEN_AS_INFO_FLAGS{ .FORCE_REGISTRATION = 1 };
pub const OAIF_HIDE_REGISTRATION = OPEN_AS_INFO_FLAGS{ .HIDE_REGISTRATION = 1 };
pub const OAIF_URL_PROTOCOL = OPEN_AS_INFO_FLAGS{ .URL_PROTOCOL = 1 };
pub const OAIF_FILE_IS_URI = OPEN_AS_INFO_FLAGS{ .FILE_IS_URI = 1 };

pub const OPENASINFO = extern struct {
    pcszFile: ?[*:0]const u16,
    pcszClass: ?[*:0]const u16,
    oaifInFlags: OPEN_AS_INFO_FLAGS,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IShellFolderViewCB_Value = Guid.initString("2047e320-f2a9-11ce-ae65-08002b2e1262");
pub const IID_IShellFolderViewCB = &IID_IShellFolderViewCB_Value;
pub const IShellFolderViewCB = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        MessageSFVCB: *const fn(
            self: *const IShellFolderViewCB,
            uMsg: SFVM_MESSAGE_ID,
            wParam: WPARAM,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn MessageSFVCB(self: *const IShellFolderViewCB, uMsg: SFVM_MESSAGE_ID, wParam: WPARAM, lParam: LPARAM) callconv(.Inline) HRESULT {
        return self.vtable.MessageSFVCB(self, uMsg, wParam, lParam);
    }
};

pub const QCMINFO_IDMAP_PLACEMENT = extern struct {
    id: u32,
    fFlags: u32,
};

pub const QCMINFO_IDMAP = extern struct {
    nMaxIds: u32,
    pIdList: [1]QCMINFO_IDMAP_PLACEMENT,
};

pub const QCMINFO = extern struct {
    hmenu: ?HMENU,
    indexMenu: u32,
    idCmdFirst: u32,
    idCmdLast: u32,
    pIdMap: ?*const QCMINFO_IDMAP,
};

pub const DETAILSINFO = extern struct {
    pidl: ?*ITEMIDLIST,
    fmt: i32,
    cxChar: i32,
    str: STRRET,
    iImage: i32,
};

pub const SFVM_PROPPAGE_DATA = extern struct {
    dwReserved: u32,
    pfn: ?LPFNSVADDPROPSHEETPAGE,
    lParam: LPARAM,
};

pub const SFVM_HELPTOPIC_DATA = extern struct {
    wszHelpFile: [260]u16,
    wszHelpTopic: [260]u16,
};

pub const ITEMSPACING = extern struct {
    cxSmall: i32,
    cySmall: i32,
    cxLarge: i32,
    cyLarge: i32,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellFolderView_Value = Guid.initString("37a378c0-f82d-11ce-ae65-08002b2e1262");
pub const IID_IShellFolderView = &IID_IShellFolderView_Value;
pub const IShellFolderView = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Rearrange: *const fn(
            self: *const IShellFolderView,
            lParamSort: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetArrangeParam: *const fn(
            self: *const IShellFolderView,
            plParamSort: ?*LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ArrangeGrid: *const fn(
            self: *const IShellFolderView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AutoArrange: *const fn(
            self: *const IShellFolderView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAutoArrange: *const fn(
            self: *const IShellFolderView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddObject: *const fn(
            self: *const IShellFolderView,
            pidl: ?*ITEMIDLIST,
            puItem: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObject: *const fn(
            self: *const IShellFolderView,
            ppidl: ?*?*ITEMIDLIST,
            uItem: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveObject: *const fn(
            self: *const IShellFolderView,
            pidl: ?*ITEMIDLIST,
            puItem: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectCount: *const fn(
            self: *const IShellFolderView,
            puCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetObjectCount: *const fn(
            self: *const IShellFolderView,
            uCount: u32,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateObject: *const fn(
            self: *const IShellFolderView,
            pidlOld: ?*ITEMIDLIST,
            pidlNew: ?*ITEMIDLIST,
            puItem: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshObject: *const fn(
            self: *const IShellFolderView,
            pidl: ?*ITEMIDLIST,
            puItem: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRedraw: *const fn(
            self: *const IShellFolderView,
            bRedraw: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectedCount: *const fn(
            self: *const IShellFolderView,
            puSelected: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectedObjects: *const fn(
            self: *const IShellFolderView,
            pppidl: ?*?*?*ITEMIDLIST,
            puItems: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsDropOnSource: *const fn(
            self: *const IShellFolderView,
            pDropTarget: ?*IDropTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDragPoint: *const fn(
            self: *const IShellFolderView,
            ppt: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDropPoint: *const fn(
            self: *const IShellFolderView,
            ppt: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveIcons: *const fn(
            self: *const IShellFolderView,
            pDataObject: ?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetItemPos: *const fn(
            self: *const IShellFolderView,
            pidl: ?*ITEMIDLIST,
            ppt: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsBkDropTarget: *const fn(
            self: *const IShellFolderView,
            pDropTarget: ?*IDropTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClipboard: *const fn(
            self: *const IShellFolderView,
            bMove: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPoints: *const fn(
            self: *const IShellFolderView,
            pDataObject: ?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemSpacing: *const fn(
            self: *const IShellFolderView,
            pSpacing: ?*ITEMSPACING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCallback: *const fn(
            self: *const IShellFolderView,
            pNewCB: ?*IShellFolderViewCB,
            ppOldCB: ?*?*IShellFolderViewCB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Select: *const fn(
            self: *const IShellFolderView,
            dwFlags: SFVS_SELECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QuerySupport: *const fn(
            self: *const IShellFolderView,
            pdwSupport: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAutomationObject: *const fn(
            self: *const IShellFolderView,
            pdisp: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Rearrange(self: *const IShellFolderView, lParamSort: LPARAM) callconv(.Inline) HRESULT {
        return self.vtable.Rearrange(self, lParamSort);
    }
    pub fn GetArrangeParam(self: *const IShellFolderView, plParamSort: ?*LPARAM) callconv(.Inline) HRESULT {
        return self.vtable.GetArrangeParam(self, plParamSort);
    }
    pub fn ArrangeGrid(self: *const IShellFolderView) callconv(.Inline) HRESULT {
        return self.vtable.ArrangeGrid(self);
    }
    pub fn AutoArrange(self: *const IShellFolderView) callconv(.Inline) HRESULT {
        return self.vtable.AutoArrange(self);
    }
    pub fn GetAutoArrange(self: *const IShellFolderView) callconv(.Inline) HRESULT {
        return self.vtable.GetAutoArrange(self);
    }
    pub fn AddObject(self: *const IShellFolderView, pidl: ?*ITEMIDLIST, puItem: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.AddObject(self, pidl, puItem);
    }
    pub fn GetObject(self: *const IShellFolderView, ppidl: ?*?*ITEMIDLIST, uItem: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetObject(self, ppidl, uItem);
    }
    pub fn RemoveObject(self: *const IShellFolderView, pidl: ?*ITEMIDLIST, puItem: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.RemoveObject(self, pidl, puItem);
    }
    pub fn GetObjectCount(self: *const IShellFolderView, puCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetObjectCount(self, puCount);
    }
    pub fn SetObjectCount(self: *const IShellFolderView, uCount: u32, dwFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetObjectCount(self, uCount, dwFlags);
    }
    pub fn UpdateObject(self: *const IShellFolderView, pidlOld: ?*ITEMIDLIST, pidlNew: ?*ITEMIDLIST, puItem: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.UpdateObject(self, pidlOld, pidlNew, puItem);
    }
    pub fn RefreshObject(self: *const IShellFolderView, pidl: ?*ITEMIDLIST, puItem: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.RefreshObject(self, pidl, puItem);
    }
    pub fn SetRedraw(self: *const IShellFolderView, bRedraw: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetRedraw(self, bRedraw);
    }
    pub fn GetSelectedCount(self: *const IShellFolderView, puSelected: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetSelectedCount(self, puSelected);
    }
    pub fn GetSelectedObjects(self: *const IShellFolderView, pppidl: ?*?*?*ITEMIDLIST, puItems: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetSelectedObjects(self, pppidl, puItems);
    }
    pub fn IsDropOnSource(self: *const IShellFolderView, pDropTarget: ?*IDropTarget) callconv(.Inline) HRESULT {
        return self.vtable.IsDropOnSource(self, pDropTarget);
    }
    pub fn GetDragPoint(self: *const IShellFolderView, ppt: ?*POINT) callconv(.Inline) HRESULT {
        return self.vtable.GetDragPoint(self, ppt);
    }
    pub fn GetDropPoint(self: *const IShellFolderView, ppt: ?*POINT) callconv(.Inline) HRESULT {
        return self.vtable.GetDropPoint(self, ppt);
    }
    pub fn MoveIcons(self: *const IShellFolderView, pDataObject: ?*IDataObject) callconv(.Inline) HRESULT {
        return self.vtable.MoveIcons(self, pDataObject);
    }
    pub fn SetItemPos(self: *const IShellFolderView, pidl: ?*ITEMIDLIST, ppt: ?*POINT) callconv(.Inline) HRESULT {
        return self.vtable.SetItemPos(self, pidl, ppt);
    }
    pub fn IsBkDropTarget(self: *const IShellFolderView, pDropTarget: ?*IDropTarget) callconv(.Inline) HRESULT {
        return self.vtable.IsBkDropTarget(self, pDropTarget);
    }
    pub fn SetClipboard(self: *const IShellFolderView, bMove: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetClipboard(self, bMove);
    }
    pub fn SetPoints(self: *const IShellFolderView, pDataObject: ?*IDataObject) callconv(.Inline) HRESULT {
        return self.vtable.SetPoints(self, pDataObject);
    }
    pub fn GetItemSpacing(self: *const IShellFolderView, pSpacing: ?*ITEMSPACING) callconv(.Inline) HRESULT {
        return self.vtable.GetItemSpacing(self, pSpacing);
    }
    pub fn SetCallback(self: *const IShellFolderView, pNewCB: ?*IShellFolderViewCB, ppOldCB: ?*?*IShellFolderViewCB) callconv(.Inline) HRESULT {
        return self.vtable.SetCallback(self, pNewCB, ppOldCB);
    }
    pub fn Select(self: *const IShellFolderView, dwFlags: SFVS_SELECT) callconv(.Inline) HRESULT {
        return self.vtable.Select(self, dwFlags);
    }
    pub fn QuerySupport(self: *const IShellFolderView, pdwSupport: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.QuerySupport(self, pdwSupport);
    }
    pub fn SetAutomationObject(self: *const IShellFolderView, pdisp: ?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.SetAutomationObject(self, pdisp);
    }
};

pub const SFV_CREATE = extern struct {
    cbSize: u32,
    pshf: ?*IShellFolder,
    psvOuter: ?*IShellView,
    psfvcb: ?*IShellFolderViewCB,
};

pub const LPFNDFMCALLBACK = *const fn(
    psf: ?*IShellFolder,
    hwnd: ?HWND,
    pdtobj: ?*IDataObject,
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const DEFCONTEXTMENU = extern struct {
    hwnd: ?HWND,
    pcmcb: ?*IContextMenuCB,
    pidlFolder: ?*ITEMIDLIST,
    psf: ?*IShellFolder,
    cidl: u32,
    apidl: ?*?*ITEMIDLIST,
    punkAssociationInfo: ?*IUnknown,
    cKeys: u32,
    aKeys: ?*const ?HKEY,
};

pub const DFMICS = extern struct {
    cbSize: u32,
    fMask: u32,
    lParam: LPARAM,
    idCmdFirst: u32,
    idDefMax: u32,
    pici: ?*CMINVOKECOMMANDINFO,
    punkSite: ?*IUnknown,
};

pub const LPFNVIEWCALLBACK = *const fn(
    psvOuter: ?*IShellView,
    psf: ?*IShellFolder,
    hwndMain: ?HWND,
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const CSFV = extern struct {
    cbSize: u32,
    pshf: ?*IShellFolder,
    psvOuter: ?*IShellView,
    pidl: ?*ITEMIDLIST,
    lEvents: i32,
    pfnCallback: ?LPFNVIEWCALLBACK,
    fvm: FOLDERVIEWMODE,
};

pub const SHELLSTATEA = extern struct {
    _bitfield1: i32 align(1),
    dwWin95Unused: u32 align(1),
    uWin95Unused: u32 align(1),
    lParamSort: i32 align(1),
    iSortDirection: i32 align(1),
    version: u32 align(1),
    uNotUsed: u32 align(1),
    _bitfield2: i32 align(1),
};

pub const SHELLSTATEW = extern struct {
    _bitfield1: i32 align(1),
    dwWin95Unused: u32 align(1),
    uWin95Unused: u32 align(1),
    lParamSort: i32 align(1),
    iSortDirection: i32 align(1),
    version: u32 align(1),
    uNotUsed: u32 align(1),
    _bitfield2: i32 align(1),
};

pub const SHELLFLAGSTATE = extern struct {
    _bitfield: i32 align(1),
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INamedPropertyBag_Value = Guid.initString("fb700430-952c-11d1-946f-000000000000");
pub const IID_INamedPropertyBag = &IID_INamedPropertyBag_Value;
pub const INamedPropertyBag = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ReadPropertyNPB: *const fn(
            self: *const INamedPropertyBag,
            pszBagname: ?[*:0]const u16,
            pszPropName: ?[*:0]const u16,
            pVar: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WritePropertyNPB: *const fn(
            self: *const INamedPropertyBag,
            pszBagname: ?[*:0]const u16,
            pszPropName: ?[*:0]const u16,
            pVar: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemovePropertyNPB: *const fn(
            self: *const INamedPropertyBag,
            pszBagname: ?[*:0]const u16,
            pszPropName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn ReadPropertyNPB(self: *const INamedPropertyBag, pszBagname: ?[*:0]const u16, pszPropName: ?[*:0]const u16, pVar: ?*PROPVARIANT) callconv(.Inline) HRESULT {
        return self.vtable.ReadPropertyNPB(self, pszBagname, pszPropName, pVar);
    }
    pub fn WritePropertyNPB(self: *const INamedPropertyBag, pszBagname: ?[*:0]const u16, pszPropName: ?[*:0]const u16, pVar: ?*PROPVARIANT) callconv(.Inline) HRESULT {
        return self.vtable.WritePropertyNPB(self, pszBagname, pszPropName, pVar);
    }
    pub fn RemovePropertyNPB(self: *const INamedPropertyBag, pszBagname: ?[*:0]const u16, pszPropName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.RemovePropertyNPB(self, pszBagname, pszPropName);
    }
};

pub const IESHORTCUTFLAGS = enum(i32) {
    NEWBROWSER = 1,
    OPENNEWTAB = 2,
    FORCENAVIGATE = 4,
    BACKGROUNDTAB = 8,
};
pub const IESHORTCUT_NEWBROWSER = IESHORTCUTFLAGS.NEWBROWSER;
pub const IESHORTCUT_OPENNEWTAB = IESHORTCUTFLAGS.OPENNEWTAB;
pub const IESHORTCUT_FORCENAVIGATE = IESHORTCUTFLAGS.FORCENAVIGATE;
pub const IESHORTCUT_BACKGROUNDTAB = IESHORTCUTFLAGS.BACKGROUNDTAB;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INewShortcutHookA_Value = Guid.initString("000214e1-0000-0000-c000-000000000046");
pub const IID_INewShortcutHookA = &IID_INewShortcutHookA_Value;
pub const INewShortcutHookA = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetReferent: *const fn(
            self: *const INewShortcutHookA,
            pcszReferent: ?[*:0]const u8,
            hwnd: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReferent: *const fn(
            self: *const INewShortcutHookA,
            pszReferent: [*:0]u8,
            cchReferent: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFolder: *const fn(
            self: *const INewShortcutHookA,
            pcszFolder: ?[*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolder: *const fn(
            self: *const INewShortcutHookA,
            pszFolder: [*:0]u8,
            cchFolder: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn(
            self: *const INewShortcutHookA,
            pszName: [*:0]u8,
            cchName: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExtension: *const fn(
            self: *const INewShortcutHookA,
            pszExtension: [*:0]u8,
            cchExtension: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetReferent(self: *const INewShortcutHookA, pcszReferent: ?[*:0]const u8, hwnd: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.SetReferent(self, pcszReferent, hwnd);
    }
    pub fn GetReferent(self: *const INewShortcutHookA, pszReferent: [*:0]u8, cchReferent: i32) callconv(.Inline) HRESULT {
        return self.vtable.GetReferent(self, pszReferent, cchReferent);
    }
    pub fn SetFolder(self: *const INewShortcutHookA, pcszFolder: ?[*:0]const u8) callconv(.Inline) HRESULT {
        return self.vtable.SetFolder(self, pcszFolder);
    }
    pub fn GetFolder(self: *const INewShortcutHookA, pszFolder: [*:0]u8, cchFolder: i32) callconv(.Inline) HRESULT {
        return self.vtable.GetFolder(self, pszFolder, cchFolder);
    }
    pub fn GetName(self: *const INewShortcutHookA, pszName: [*:0]u8, cchName: i32) callconv(.Inline) HRESULT {
        return self.vtable.GetName(self, pszName, cchName);
    }
    pub fn GetExtension(self: *const INewShortcutHookA, pszExtension: [*:0]u8, cchExtension: i32) callconv(.Inline) HRESULT {
        return self.vtable.GetExtension(self, pszExtension, cchExtension);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INewShortcutHookW_Value = Guid.initString("000214f7-0000-0000-c000-000000000046");
pub const IID_INewShortcutHookW = &IID_INewShortcutHookW_Value;
pub const INewShortcutHookW = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetReferent: *const fn(
            self: *const INewShortcutHookW,
            pcszReferent: ?[*:0]const u16,
            hwnd: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReferent: *const fn(
            self: *const INewShortcutHookW,
            pszReferent: [*:0]u16,
            cchReferent: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFolder: *const fn(
            self: *const INewShortcutHookW,
            pcszFolder: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolder: *const fn(
            self: *const INewShortcutHookW,
            pszFolder: [*:0]u16,
            cchFolder: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn(
            self: *const INewShortcutHookW,
            pszName: [*:0]u16,
            cchName: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExtension: *const fn(
            self: *const INewShortcutHookW,
            pszExtension: [*:0]u16,
            cchExtension: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetReferent(self: *const INewShortcutHookW, pcszReferent: ?[*:0]const u16, hwnd: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.SetReferent(self, pcszReferent, hwnd);
    }
    pub fn GetReferent(self: *const INewShortcutHookW, pszReferent: [*:0]u16, cchReferent: i32) callconv(.Inline) HRESULT {
        return self.vtable.GetReferent(self, pszReferent, cchReferent);
    }
    pub fn SetFolder(self: *const INewShortcutHookW, pcszFolder: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetFolder(self, pcszFolder);
    }
    pub fn GetFolder(self: *const INewShortcutHookW, pszFolder: [*:0]u16, cchFolder: i32) callconv(.Inline) HRESULT {
        return self.vtable.GetFolder(self, pszFolder, cchFolder);
    }
    pub fn GetName(self: *const INewShortcutHookW, pszName: [*:0]u16, cchName: i32) callconv(.Inline) HRESULT {
        return self.vtable.GetName(self, pszName, cchName);
    }
    pub fn GetExtension(self: *const INewShortcutHookW, pszExtension: [*:0]u16, cchExtension: i32) callconv(.Inline) HRESULT {
        return self.vtable.GetExtension(self, pszExtension, cchExtension);
    }
};

const IID_ICopyHookA_Value = Guid.initString("000214ef-0000-0000-c000-000000000046");
pub const IID_ICopyHookA = &IID_ICopyHookA_Value;
pub const ICopyHookA = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CopyCallback: *const fn(
            self: *const ICopyHookA,
            hwnd: ?HWND,
            wFunc: u32,
            wFlags: u32,
            pszSrcFile: ?[*:0]const u8,
            dwSrcAttribs: u32,
            pszDestFile: ?[*:0]const u8,
            dwDestAttribs: u32,
        ) callconv(@import("std").os.windows.WINAPI) u32,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CopyCallback(self: *const ICopyHookA, hwnd: ?HWND, wFunc: u32, wFlags: u32, pszSrcFile: ?[*:0]const u8, dwSrcAttribs: u32, pszDestFile: ?[*:0]const u8, dwDestAttribs: u32) callconv(.Inline) u32 {
        return self.vtable.CopyCallback(self, hwnd, wFunc, wFlags, pszSrcFile, dwSrcAttribs, pszDestFile, dwDestAttribs);
    }
};

const IID_ICopyHookW_Value = Guid.initString("000214fc-0000-0000-c000-000000000046");
pub const IID_ICopyHookW = &IID_ICopyHookW_Value;
pub const ICopyHookW = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CopyCallback: *const fn(
            self: *const ICopyHookW,
            hwnd: ?HWND,
            wFunc: u32,
            wFlags: u32,
            pszSrcFile: ?[*:0]const u16,
            dwSrcAttribs: u32,
            pszDestFile: ?[*:0]const u16,
            dwDestAttribs: u32,
        ) callconv(@import("std").os.windows.WINAPI) u32,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CopyCallback(self: *const ICopyHookW, hwnd: ?HWND, wFunc: u32, wFlags: u32, pszSrcFile: ?[*:0]const u16, dwSrcAttribs: u32, pszDestFile: ?[*:0]const u16, dwDestAttribs: u32) callconv(.Inline) u32 {
        return self.vtable.CopyCallback(self, hwnd, wFunc, wFlags, pszSrcFile, dwSrcAttribs, pszDestFile, dwDestAttribs);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ICurrentWorkingDirectory_Value = Guid.initString("91956d21-9276-11d1-921a-006097df5bd4");
pub const IID_ICurrentWorkingDirectory = &IID_ICurrentWorkingDirectory_Value;
pub const ICurrentWorkingDirectory = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDirectory: *const fn(
            self: *const ICurrentWorkingDirectory,
            pwzPath: [*:0]u16,
            cchSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDirectory: *const fn(
            self: *const ICurrentWorkingDirectory,
            pwzPath: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetDirectory(self: *const ICurrentWorkingDirectory, pwzPath: [*:0]u16, cchSize: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetDirectory(self, pwzPath, cchSize);
    }
    pub fn SetDirectory(self: *const ICurrentWorkingDirectory, pwzPath: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetDirectory(self, pwzPath);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IDockingWindowFrame_Value = Guid.initString("47d2657a-7b27-11d0-8ca9-00a0c92dbfe8");
pub const IID_IDockingWindowFrame = &IID_IDockingWindowFrame_Value;
pub const IDockingWindowFrame = extern union {
    pub const VTable = extern struct {
        base: IOleWindow.VTable,
        AddToolbar: *const fn(
            self: *const IDockingWindowFrame,
            punkSrc: ?*IUnknown,
            pwszItem: ?[*:0]const u16,
            dwAddFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveToolbar: *const fn(
            self: *const IDockingWindowFrame,
            punkSrc: ?*IUnknown,
            dwRemoveFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindToolbar: *const fn(
            self: *const IDockingWindowFrame,
            pwszItem: ?[*:0]const u16,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IOleWindow: IOleWindow,
    IUnknown: IUnknown,
    pub fn AddToolbar(self: *const IDockingWindowFrame, punkSrc: ?*IUnknown, pwszItem: ?[*:0]const u16, dwAddFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.AddToolbar(self, punkSrc, pwszItem, dwAddFlags);
    }
    pub fn RemoveToolbar(self: *const IDockingWindowFrame, punkSrc: ?*IUnknown, dwRemoveFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.RemoveToolbar(self, punkSrc, dwRemoveFlags);
    }
    pub fn FindToolbar(self: *const IDockingWindowFrame, pwszItem: ?[*:0]const u16, riid: ?*const Guid, ppv: ?*?*anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.FindToolbar(self, pwszItem, riid, ppv);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IThumbnailCapture_Value = Guid.initString("4ea39266-7211-409f-b622-f63dbd16c533");
pub const IID_IThumbnailCapture = &IID_IThumbnailCapture_Value;
pub const IThumbnailCapture = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CaptureThumbnail: *const fn(
            self: *const IThumbnailCapture,
            pMaxSize: ?*const SIZE,
            pHTMLDoc2: ?*IUnknown,
            phbmThumbnail: ?*?HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CaptureThumbnail(self: *const IThumbnailCapture, pMaxSize: ?*const SIZE, pHTMLDoc2: ?*IUnknown, phbmThumbnail: ?*?HBITMAP) callconv(.Inline) HRESULT {
        return self.vtable.CaptureThumbnail(self, pMaxSize, pHTMLDoc2, phbmThumbnail);
    }
};

pub const BANDINFOSFB = extern struct {
    dwMask: u32,
    dwStateMask: u32,
    dwState: u32,
    crBkgnd: u32,
    crBtnLt: u32,
    crBtnDk: u32,
    wViewMode: u16,
    wAlign: u16,
    psf: ?*IShellFolder,
    pidl: ?*ITEMIDLIST,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellFolderBand_Value = Guid.initString("7fe80cc8-c247-11d0-b93a-00a0c90312e1");
pub const IID_IShellFolderBand = &IID_IShellFolderBand_Value;
pub const IShellFolderBand = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InitializeSFB: *const fn(
            self: *const IShellFolderBand,
            psf: ?*IShellFolder,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBandInfoSFB: *const fn(
            self: *const IShellFolderBand,
            pbi: ?*BANDINFOSFB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBandInfoSFB: *const fn(
            self: *const IShellFolderBand,
            pbi: ?*BANDINFOSFB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn InitializeSFB(self: *const IShellFolderBand, psf: ?*IShellFolder, pidl: ?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.InitializeSFB(self, psf, pidl);
    }
    pub fn SetBandInfoSFB(self: *const IShellFolderBand, pbi: ?*BANDINFOSFB) callconv(.Inline) HRESULT {
        return self.vtable.SetBandInfoSFB(self, pbi);
    }
    pub fn GetBandInfoSFB(self: *const IShellFolderBand, pbi: ?*BANDINFOSFB) callconv(.Inline) HRESULT {
        return self.vtable.GetBandInfoSFB(self, pbi);
    }
};

const IID_IDeskBarClient_Value = Guid.initString("eb0fe175-1a3a-11d0-89b3-00a0c90a90ac");
pub const IID_IDeskBarClient = &IID_IDeskBarClient_Value;
pub const IDeskBarClient = extern union {
    pub const VTable = extern struct {
        base: IOleWindow.VTable,
        SetDeskBarSite: *const fn(
            self: *const IDeskBarClient,
            punkSite: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetModeDBC: *const fn(
            self: *const IDeskBarClient,
            dwMode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UIActivateDBC: *const fn(
            self: *const IDeskBarClient,
            dwState: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSize: *const fn(
            self: *const IDeskBarClient,
            dwWhich: u32,
            prc: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IOleWindow: IOleWindow,
    IUnknown: IUnknown,
    pub fn SetDeskBarSite(self: *const IDeskBarClient, punkSite: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.SetDeskBarSite(self, punkSite);
    }
    pub fn SetModeDBC(self: *const IDeskBarClient, dwMode: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetModeDBC(self, dwMode);
    }
    pub fn UIActivateDBC(self: *const IDeskBarClient, dwState: u32) callconv(.Inline) HRESULT {
        return self.vtable.UIActivateDBC(self, dwState);
    }
    pub fn GetSize(self: *const IDeskBarClient, dwWhich: u32, prc: ?*RECT) callconv(.Inline) HRESULT {
        return self.vtable.GetSize(self, dwWhich, prc);
    }
};

pub const SHCOLUMNINFO = extern struct {
    scid: PROPERTYKEY align(1),
    vt: u16 align(1),
    fmt: u32 align(1),
    cChars: u32 align(1),
    csFlags: u32 align(1),
    wszTitle: [80]u16 align(1),
    wszDescription: [128]u16 align(1),
};

pub const SHCOLUMNINIT = extern struct {
    dwFlags: u32,
    dwReserved: u32,
    wszFolder: [260]u16,
};

pub const SHCOLUMNDATA = extern struct {
    dwFlags: u32,
    dwFileAttributes: u32,
    dwReserved: u32,
    pwszExt: ?PWSTR,
    wszFile: [260]u16,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IColumnProvider_Value = Guid.initString("e8025004-1c42-11d2-be2c-00a0c9a83da1");
pub const IID_IColumnProvider = &IID_IColumnProvider_Value;
pub const IColumnProvider = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn(
            self: *const IColumnProvider,
            psci: ?*SHCOLUMNINIT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnInfo: *const fn(
            self: *const IColumnProvider,
            dwIndex: u32,
            psci: ?*SHCOLUMNINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemData: *const fn(
            self: *const IColumnProvider,
            pscid: ?*PROPERTYKEY,
            pscd: ?*SHCOLUMNDATA,
            pvarData: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IColumnProvider, psci: ?*SHCOLUMNINIT) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, psci);
    }
    pub fn GetColumnInfo(self: *const IColumnProvider, dwIndex: u32, psci: ?*SHCOLUMNINFO) callconv(.Inline) HRESULT {
        return self.vtable.GetColumnInfo(self, dwIndex, psci);
    }
    pub fn GetItemData(self: *const IColumnProvider, pscid: ?*PROPERTYKEY, pscd: ?*SHCOLUMNDATA, pvarData: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetItemData(self, pscid, pscd, pvarData);
    }
};

pub const SHChangeProductKeyAsIDList = extern struct {
    cb: u16 align(1),
    wszProductKey: [39]u16 align(1),
    cbZero: u16 align(1),
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IDocViewSite_Value = Guid.initString("87d605e0-c511-11cf-89a9-00a0c9054129");
pub const IID_IDocViewSite = &IID_IDocViewSite_Value;
pub const IDocViewSite = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnSetTitle: *const fn(
            self: *const IDocViewSite,
            pvTitle: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnSetTitle(self: *const IDocViewSite, pvTitle: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.OnSetTitle(self, pvTitle);
    }
};

const IID_IInitializeObject_Value = Guid.initString("4622ad16-ff23-11d0-8d34-00a0c90f2719");
pub const IID_IInitializeObject = &IID_IInitializeObject_Value;
pub const IInitializeObject = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn(
            self: *const IInitializeObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IInitializeObject) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self);
    }
};

const IID_IBanneredBar_Value = Guid.initString("596a9a94-013e-11d1-8d34-00a0c90f2719");
pub const IID_IBanneredBar = &IID_IBanneredBar_Value;
pub const IBanneredBar = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetIconSize: *const fn(
            self: *const IBanneredBar,
            iIcon: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIconSize: *const fn(
            self: *const IBanneredBar,
            piIcon: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBitmap: *const fn(
            self: *const IBanneredBar,
            hBitmap: ?HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBitmap: *const fn(
            self: *const IBanneredBar,
            phBitmap: ?*?HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetIconSize(self: *const IBanneredBar, iIcon: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetIconSize(self, iIcon);
    }
    pub fn GetIconSize(self: *const IBanneredBar, piIcon: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetIconSize(self, piIcon);
    }
    pub fn SetBitmap(self: *const IBanneredBar, hBitmap: ?HBITMAP) callconv(.Inline) HRESULT {
        return self.vtable.SetBitmap(self, hBitmap);
    }
    pub fn GetBitmap(self: *const IBanneredBar, phBitmap: ?*?HBITMAP) callconv(.Inline) HRESULT {
        return self.vtable.GetBitmap(self, phBitmap);
    }
};

pub const TBINFO = extern struct {
    cbuttons: u32,
    uFlags: u32,
};

pub const SFV_SETITEMPOS = extern struct {
    pidl: ?*ITEMIDLIST,
    pt: POINT,
};

pub const AASHELLMENUFILENAME = extern struct {
    cbTotal: i16,
    rgbReserved: [12]u8,
    szFileName: [1]u16,
};

pub const AASHELLMENUITEM = extern struct {
    lpReserved1: ?*anyopaque,
    iReserved: i32,
    uiReserved: u32,
    lpName: ?*AASHELLMENUFILENAME,
    psz: ?PWSTR,
};

pub const DISPLAY_DEVICE_TYPE = enum(i32) {
    PRIMARY = 0,
    IMMERSIVE = 1,
};
pub const DEVICE_PRIMARY = DISPLAY_DEVICE_TYPE.PRIMARY;
pub const DEVICE_IMMERSIVE = DISPLAY_DEVICE_TYPE.IMMERSIVE;

pub const SCALE_CHANGE_FLAGS = packed struct(u32) {
    SCALE: u1 = 0,
    PHYSICAL: u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const SCF_VALUE_NONE = SCALE_CHANGE_FLAGS{ };
pub const SCF_SCALE = SCALE_CHANGE_FLAGS{ .SCALE = 1 };
pub const SCF_PHYSICAL = SCALE_CHANGE_FLAGS{ .PHYSICAL = 1 };

pub const SHELL_UI_COMPONENT = enum(i32) {
    TASKBARS = 0,
    NOTIFICATIONAREA = 1,
    DESKBAND = 2,
};
pub const SHELL_UI_COMPONENT_TASKBARS = SHELL_UI_COMPONENT.TASKBARS;
pub const SHELL_UI_COMPONENT_NOTIFICATIONAREA = SHELL_UI_COMPONENT.NOTIFICATIONAREA;
pub const SHELL_UI_COMPONENT_DESKBAND = SHELL_UI_COMPONENT.DESKBAND;











pub const ASSOCCLASS = enum(i32) {
    SHELL_KEY = 0,
    PROGID_KEY = 1,
    PROGID_STR = 2,
    CLSID_KEY = 3,
    CLSID_STR = 4,
    APP_KEY = 5,
    APP_STR = 6,
    SYSTEM_STR = 7,
    FOLDER = 8,
    STAR = 9,
    FIXED_PROGID_STR = 10,
    PROTOCOL_STR = 11,
};
pub const ASSOCCLASS_SHELL_KEY = ASSOCCLASS.SHELL_KEY;
pub const ASSOCCLASS_PROGID_KEY = ASSOCCLASS.PROGID_KEY;
pub const ASSOCCLASS_PROGID_STR = ASSOCCLASS.PROGID_STR;
pub const ASSOCCLASS_CLSID_KEY = ASSOCCLASS.CLSID_KEY;
pub const ASSOCCLASS_CLSID_STR = ASSOCCLASS.CLSID_STR;
pub const ASSOCCLASS_APP_KEY = ASSOCCLASS.APP_KEY;
pub const ASSOCCLASS_APP_STR = ASSOCCLASS.APP_STR;
pub const ASSOCCLASS_SYSTEM_STR = ASSOCCLASS.SYSTEM_STR;
pub const ASSOCCLASS_FOLDER = ASSOCCLASS.FOLDER;
pub const ASSOCCLASS_STAR = ASSOCCLASS.STAR;
pub const ASSOCCLASS_FIXED_PROGID_STR = ASSOCCLASS.FIXED_PROGID_STR;
pub const ASSOCCLASS_PROTOCOL_STR = ASSOCCLASS.PROTOCOL_STR;



pub const QUERY_USER_NOTIFICATION_STATE = enum(i32) {
    NOT_PRESENT = 1,
    BUSY = 2,
    RUNNING_D3D_FULL_SCREEN = 3,
    PRESENTATION_MODE = 4,
    ACCEPTS_NOTIFICATIONS = 5,
    QUIET_TIME = 6,
    APP = 7,
};
pub const QUNS_NOT_PRESENT = QUERY_USER_NOTIFICATION_STATE.NOT_PRESENT;
pub const QUNS_BUSY = QUERY_USER_NOTIFICATION_STATE.BUSY;
pub const QUNS_RUNNING_D3D_FULL_SCREEN = QUERY_USER_NOTIFICATION_STATE.RUNNING_D3D_FULL_SCREEN;
pub const QUNS_PRESENTATION_MODE = QUERY_USER_NOTIFICATION_STATE.PRESENTATION_MODE;
pub const QUNS_ACCEPTS_NOTIFICATIONS = QUERY_USER_NOTIFICATION_STATE.ACCEPTS_NOTIFICATIONS;
pub const QUNS_QUIET_TIME = QUERY_USER_NOTIFICATION_STATE.QUIET_TIME;
pub const QUNS_APP = QUERY_USER_NOTIFICATION_STATE.APP;







pub const SHSTOCKICONID = enum(i32) {
    DOCNOASSOC = 0,
    DOCASSOC = 1,
    APPLICATION = 2,
    FOLDER = 3,
    FOLDEROPEN = 4,
    DRIVE525 = 5,
    DRIVE35 = 6,
    DRIVEREMOVE = 7,
    DRIVEFIXED = 8,
    DRIVENET = 9,
    DRIVENETDISABLED = 10,
    DRIVECD = 11,
    DRIVERAM = 12,
    WORLD = 13,
    SERVER = 15,
    PRINTER = 16,
    MYNETWORK = 17,
    FIND = 22,
    HELP = 23,
    SHARE = 28,
    LINK = 29,
    SLOWFILE = 30,
    RECYCLER = 31,
    RECYCLERFULL = 32,
    MEDIACDAUDIO = 40,
    LOCK = 47,
    AUTOLIST = 49,
    PRINTERNET = 50,
    SERVERSHARE = 51,
    PRINTERFAX = 52,
    PRINTERFAXNET = 53,
    PRINTERFILE = 54,
    STACK = 55,
    MEDIASVCD = 56,
    STUFFEDFOLDER = 57,
    DRIVEUNKNOWN = 58,
    DRIVEDVD = 59,
    MEDIADVD = 60,
    MEDIADVDRAM = 61,
    MEDIADVDRW = 62,
    MEDIADVDR = 63,
    MEDIADVDROM = 64,
    MEDIACDAUDIOPLUS = 65,
    MEDIACDRW = 66,
    MEDIACDR = 67,
    MEDIACDBURN = 68,
    MEDIABLANKCD = 69,
    MEDIACDROM = 70,
    AUDIOFILES = 71,
    IMAGEFILES = 72,
    VIDEOFILES = 73,
    MIXEDFILES = 74,
    FOLDERBACK = 75,
    FOLDERFRONT = 76,
    SHIELD = 77,
    WARNING = 78,
    INFO = 79,
    ERROR = 80,
    KEY = 81,
    SOFTWARE = 82,
    RENAME = 83,
    DELETE = 84,
    MEDIAAUDIODVD = 85,
    MEDIAMOVIEDVD = 86,
    MEDIAENHANCEDCD = 87,
    MEDIAENHANCEDDVD = 88,
    MEDIAHDDVD = 89,
    MEDIABLURAY = 90,
    MEDIAVCD = 91,
    MEDIADVDPLUSR = 92,
    MEDIADVDPLUSRW = 93,
    DESKTOPPC = 94,
    MOBILEPC = 95,
    USERS = 96,
    MEDIASMARTMEDIA = 97,
    MEDIACOMPACTFLASH = 98,
    DEVICECELLPHONE = 99,
    DEVICECAMERA = 100,
    DEVICEVIDEOCAMERA = 101,
    DEVICEAUDIOPLAYER = 102,
    NETWORKCONNECT = 103,
    INTERNET = 104,
    ZIPFILE = 105,
    SETTINGS = 106,
    DRIVEHDDVD = 132,
    DRIVEBD = 133,
    MEDIAHDDVDROM = 134,
    MEDIAHDDVDR = 135,
    MEDIAHDDVDRAM = 136,
    MEDIABDROM = 137,
    MEDIABDR = 138,
    MEDIABDRE = 139,
    CLUSTEREDDRIVE = 140,
    MAX_ICONS = 181,
};
pub const SIID_DOCNOASSOC = SHSTOCKICONID.DOCNOASSOC;
pub const SIID_DOCASSOC = SHSTOCKICONID.DOCASSOC;
pub const SIID_APPLICATION = SHSTOCKICONID.APPLICATION;
pub const SIID_FOLDER = SHSTOCKICONID.FOLDER;
pub const SIID_FOLDEROPEN = SHSTOCKICONID.FOLDEROPEN;
pub const SIID_DRIVE525 = SHSTOCKICONID.DRIVE525;
pub const SIID_DRIVE35 = SHSTOCKICONID.DRIVE35;
pub const SIID_DRIVEREMOVE = SHSTOCKICONID.DRIVEREMOVE;
pub const SIID_DRIVEFIXED = SHSTOCKICONID.DRIVEFIXED;
pub const SIID_DRIVENET = SHSTOCKICONID.DRIVENET;
pub const SIID_DRIVENETDISABLED = SHSTOCKICONID.DRIVENETDISABLED;
pub const SIID_DRIVECD = SHSTOCKICONID.DRIVECD;
pub const SIID_DRIVERAM = SHSTOCKICONID.DRIVERAM;
pub const SIID_WORLD = SHSTOCKICONID.WORLD;
pub const SIID_SERVER = SHSTOCKICONID.SERVER;
pub const SIID_PRINTER = SHSTOCKICONID.PRINTER;
pub const SIID_MYNETWORK = SHSTOCKICONID.MYNETWORK;
pub const SIID_FIND = SHSTOCKICONID.FIND;
pub const SIID_HELP = SHSTOCKICONID.HELP;
pub const SIID_SHARE = SHSTOCKICONID.SHARE;
pub const SIID_LINK = SHSTOCKICONID.LINK;
pub const SIID_SLOWFILE = SHSTOCKICONID.SLOWFILE;
pub const SIID_RECYCLER = SHSTOCKICONID.RECYCLER;
pub const SIID_RECYCLERFULL = SHSTOCKICONID.RECYCLERFULL;
pub const SIID_MEDIACDAUDIO = SHSTOCKICONID.MEDIACDAUDIO;
pub const SIID_LOCK = SHSTOCKICONID.LOCK;
pub const SIID_AUTOLIST = SHSTOCKICONID.AUTOLIST;
pub const SIID_PRINTERNET = SHSTOCKICONID.PRINTERNET;
pub const SIID_SERVERSHARE = SHSTOCKICONID.SERVERSHARE;
pub const SIID_PRINTERFAX = SHSTOCKICONID.PRINTERFAX;
pub const SIID_PRINTERFAXNET = SHSTOCKICONID.PRINTERFAXNET;
pub const SIID_PRINTERFILE = SHSTOCKICONID.PRINTERFILE;
pub const SIID_STACK = SHSTOCKICONID.STACK;
pub const SIID_MEDIASVCD = SHSTOCKICONID.MEDIASVCD;
pub const SIID_STUFFEDFOLDER = SHSTOCKICONID.STUFFEDFOLDER;
pub const SIID_DRIVEUNKNOWN = SHSTOCKICONID.DRIVEUNKNOWN;
pub const SIID_DRIVEDVD = SHSTOCKICONID.DRIVEDVD;
pub const SIID_MEDIADVD = SHSTOCKICONID.MEDIADVD;
pub const SIID_MEDIADVDRAM = SHSTOCKICONID.MEDIADVDRAM;
pub const SIID_MEDIADVDRW = SHSTOCKICONID.MEDIADVDRW;
pub const SIID_MEDIADVDR = SHSTOCKICONID.MEDIADVDR;
pub const SIID_MEDIADVDROM = SHSTOCKICONID.MEDIADVDROM;
pub const SIID_MEDIACDAUDIOPLUS = SHSTOCKICONID.MEDIACDAUDIOPLUS;
pub const SIID_MEDIACDRW = SHSTOCKICONID.MEDIACDRW;
pub const SIID_MEDIACDR = SHSTOCKICONID.MEDIACDR;
pub const SIID_MEDIACDBURN = SHSTOCKICONID.MEDIACDBURN;
pub const SIID_MEDIABLANKCD = SHSTOCKICONID.MEDIABLANKCD;
pub const SIID_MEDIACDROM = SHSTOCKICONID.MEDIACDROM;
pub const SIID_AUDIOFILES = SHSTOCKICONID.AUDIOFILES;
pub const SIID_IMAGEFILES = SHSTOCKICONID.IMAGEFILES;
pub const SIID_VIDEOFILES = SHSTOCKICONID.VIDEOFILES;
pub const SIID_MIXEDFILES = SHSTOCKICONID.MIXEDFILES;
pub const SIID_FOLDERBACK = SHSTOCKICONID.FOLDERBACK;
pub const SIID_FOLDERFRONT = SHSTOCKICONID.FOLDERFRONT;
pub const SIID_SHIELD = SHSTOCKICONID.SHIELD;
pub const SIID_WARNING = SHSTOCKICONID.WARNING;
pub const SIID_INFO = SHSTOCKICONID.INFO;
pub const SIID_ERROR = SHSTOCKICONID.ERROR;
pub const SIID_KEY = SHSTOCKICONID.KEY;
pub const SIID_SOFTWARE = SHSTOCKICONID.SOFTWARE;
pub const SIID_RENAME = SHSTOCKICONID.RENAME;
pub const SIID_DELETE = SHSTOCKICONID.DELETE;
pub const SIID_MEDIAAUDIODVD = SHSTOCKICONID.MEDIAAUDIODVD;
pub const SIID_MEDIAMOVIEDVD = SHSTOCKICONID.MEDIAMOVIEDVD;
pub const SIID_MEDIAENHANCEDCD = SHSTOCKICONID.MEDIAENHANCEDCD;
pub const SIID_MEDIAENHANCEDDVD = SHSTOCKICONID.MEDIAENHANCEDDVD;
pub const SIID_MEDIAHDDVD = SHSTOCKICONID.MEDIAHDDVD;
pub const SIID_MEDIABLURAY = SHSTOCKICONID.MEDIABLURAY;
pub const SIID_MEDIAVCD = SHSTOCKICONID.MEDIAVCD;
pub const SIID_MEDIADVDPLUSR = SHSTOCKICONID.MEDIADVDPLUSR;
pub const SIID_MEDIADVDPLUSRW = SHSTOCKICONID.MEDIADVDPLUSRW;
pub const SIID_DESKTOPPC = SHSTOCKICONID.DESKTOPPC;
pub const SIID_MOBILEPC = SHSTOCKICONID.MOBILEPC;
pub const SIID_USERS = SHSTOCKICONID.USERS;
pub const SIID_MEDIASMARTMEDIA = SHSTOCKICONID.MEDIASMARTMEDIA;
pub const SIID_MEDIACOMPACTFLASH = SHSTOCKICONID.MEDIACOMPACTFLASH;
pub const SIID_DEVICECELLPHONE = SHSTOCKICONID.DEVICECELLPHONE;
pub const SIID_DEVICECAMERA = SHSTOCKICONID.DEVICECAMERA;
pub const SIID_DEVICEVIDEOCAMERA = SHSTOCKICONID.DEVICEVIDEOCAMERA;
pub const SIID_DEVICEAUDIOPLAYER = SHSTOCKICONID.DEVICEAUDIOPLAYER;
pub const SIID_NETWORKCONNECT = SHSTOCKICONID.NETWORKCONNECT;
pub const SIID_INTERNET = SHSTOCKICONID.INTERNET;
pub const SIID_ZIPFILE = SHSTOCKICONID.ZIPFILE;
pub const SIID_SETTINGS = SHSTOCKICONID.SETTINGS;
pub const SIID_DRIVEHDDVD = SHSTOCKICONID.DRIVEHDDVD;
pub const SIID_DRIVEBD = SHSTOCKICONID.DRIVEBD;
pub const SIID_MEDIAHDDVDROM = SHSTOCKICONID.MEDIAHDDVDROM;
pub const SIID_MEDIAHDDVDR = SHSTOCKICONID.MEDIAHDDVDR;
pub const SIID_MEDIAHDDVDRAM = SHSTOCKICONID.MEDIAHDDVDRAM;
pub const SIID_MEDIABDROM = SHSTOCKICONID.MEDIABDROM;
pub const SIID_MEDIABDR = SHSTOCKICONID.MEDIABDR;
pub const SIID_MEDIABDRE = SHSTOCKICONID.MEDIABDRE;
pub const SIID_CLUSTEREDDRIVE = SHSTOCKICONID.CLUSTEREDDRIVE;
pub const SIID_MAX_ICONS = SHSTOCKICONID.MAX_ICONS;



pub const PFNCANSHAREFOLDERW = *const fn(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PFNSHOWSHAREFOLDERUIW = *const fn(
    hwndParent: ?HWND,
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const NC_ADDRESS = extern struct {
    pub const NET_ADDRESS_INFO = extern struct {
        placeholder: usize, // TODO: why is this type empty?
    };
    pAddrInfo: ?*NET_ADDRESS_INFO,
    PortNumber: u16,
    PrefixLength: u8,
};

pub const SFBS_FLAGS = enum(i32) {
    ROUND_TO_NEAREST_DISPLAYED_DIGIT = 1,
    TRUNCATE_UNDISPLAYED_DECIMAL_DIGITS = 2,
};
pub const SFBS_FLAGS_ROUND_TO_NEAREST_DISPLAYED_DIGIT = SFBS_FLAGS.ROUND_TO_NEAREST_DISPLAYED_DIGIT;
pub const SFBS_FLAGS_TRUNCATE_UNDISPLAYED_DECIMAL_DIGITS = SFBS_FLAGS.TRUNCATE_UNDISPLAYED_DECIMAL_DIGITS;

pub const URL_SCHEME = enum(i32) {
    INVALID = -1,
    UNKNOWN = 0,
    FTP = 1,
    HTTP = 2,
    GOPHER = 3,
    MAILTO = 4,
    NEWS = 5,
    NNTP = 6,
    TELNET = 7,
    WAIS = 8,
    FILE = 9,
    MK = 10,
    HTTPS = 11,
    SHELL = 12,
    SNEWS = 13,
    LOCAL = 14,
    JAVASCRIPT = 15,
    VBSCRIPT = 16,
    ABOUT = 17,
    RES = 18,
    MSSHELLROOTED = 19,
    MSSHELLIDLIST = 20,
    MSHELP = 21,
    MSSHELLDEVICE = 22,
    WILDCARD = 23,
    SEARCH_MS = 24,
    SEARCH = 25,
    KNOWNFOLDER = 26,
    MAXVALUE = 27,
};
pub const URL_SCHEME_INVALID = URL_SCHEME.INVALID;
pub const URL_SCHEME_UNKNOWN = URL_SCHEME.UNKNOWN;
pub const URL_SCHEME_FTP = URL_SCHEME.FTP;
pub const URL_SCHEME_HTTP = URL_SCHEME.HTTP;
pub const URL_SCHEME_GOPHER = URL_SCHEME.GOPHER;
pub const URL_SCHEME_MAILTO = URL_SCHEME.MAILTO;
pub const URL_SCHEME_NEWS = URL_SCHEME.NEWS;
pub const URL_SCHEME_NNTP = URL_SCHEME.NNTP;
pub const URL_SCHEME_TELNET = URL_SCHEME.TELNET;
pub const URL_SCHEME_WAIS = URL_SCHEME.WAIS;
pub const URL_SCHEME_FILE = URL_SCHEME.FILE;
pub const URL_SCHEME_MK = URL_SCHEME.MK;
pub const URL_SCHEME_HTTPS = URL_SCHEME.HTTPS;
pub const URL_SCHEME_SHELL = URL_SCHEME.SHELL;
pub const URL_SCHEME_SNEWS = URL_SCHEME.SNEWS;
pub const URL_SCHEME_LOCAL = URL_SCHEME.LOCAL;
pub const URL_SCHEME_JAVASCRIPT = URL_SCHEME.JAVASCRIPT;
pub const URL_SCHEME_VBSCRIPT = URL_SCHEME.VBSCRIPT;
pub const URL_SCHEME_ABOUT = URL_SCHEME.ABOUT;
pub const URL_SCHEME_RES = URL_SCHEME.RES;
pub const URL_SCHEME_MSSHELLROOTED = URL_SCHEME.MSSHELLROOTED;
pub const URL_SCHEME_MSSHELLIDLIST = URL_SCHEME.MSSHELLIDLIST;
pub const URL_SCHEME_MSHELP = URL_SCHEME.MSHELP;
pub const URL_SCHEME_MSSHELLDEVICE = URL_SCHEME.MSSHELLDEVICE;
pub const URL_SCHEME_WILDCARD = URL_SCHEME.WILDCARD;
pub const URL_SCHEME_SEARCH_MS = URL_SCHEME.SEARCH_MS;
pub const URL_SCHEME_SEARCH = URL_SCHEME.SEARCH;
pub const URL_SCHEME_KNOWNFOLDER = URL_SCHEME.KNOWNFOLDER;
pub const URL_SCHEME_MAXVALUE = URL_SCHEME.MAXVALUE;

pub const URL_PART = enum(i32) {
    NONE = 0,
    SCHEME = 1,
    HOSTNAME = 2,
    USERNAME = 3,
    PASSWORD = 4,
    PORT = 5,
    QUERY = 6,
};
pub const URL_PART_NONE = URL_PART.NONE;
pub const URL_PART_SCHEME = URL_PART.SCHEME;
pub const URL_PART_HOSTNAME = URL_PART.HOSTNAME;
pub const URL_PART_USERNAME = URL_PART.USERNAME;
pub const URL_PART_PASSWORD = URL_PART.PASSWORD;
pub const URL_PART_PORT = URL_PART.PORT;
pub const URL_PART_QUERY = URL_PART.QUERY;

pub const URLIS = enum(i32) {
    URL = 0,
    OPAQUE = 1,
    NOHISTORY = 2,
    FILEURL = 3,
    APPLIABLE = 4,
    DIRECTORY = 5,
    HASQUERY = 6,
};
pub const URLIS_URL = URLIS.URL;
pub const URLIS_OPAQUE = URLIS.OPAQUE;
pub const URLIS_NOHISTORY = URLIS.NOHISTORY;
pub const URLIS_FILEURL = URLIS.FILEURL;
pub const URLIS_APPLIABLE = URLIS.APPLIABLE;
pub const URLIS_DIRECTORY = URLIS.DIRECTORY;
pub const URLIS_HASQUERY = URLIS.HASQUERY;

pub const PARSEDURLA = extern struct {
    cbSize: u32,
    pszProtocol: ?[*:0]const u8,
    cchProtocol: u32,
    pszSuffix: ?[*:0]const u8,
    cchSuffix: u32,
    nScheme: u32,
};

pub const PARSEDURLW = extern struct {
    cbSize: u32,
    pszProtocol: ?[*:0]const u16,
    cchProtocol: u32,
    pszSuffix: ?[*:0]const u16,
    cchSuffix: u32,
    nScheme: u32,
};

pub const SHREGDEL_FLAGS = enum(i32) {
    DEFAULT = 0,
    HKCU = 1,
    HKLM = 16,
    BOTH = 17,
};
pub const SHREGDEL_DEFAULT = SHREGDEL_FLAGS.DEFAULT;
pub const SHREGDEL_HKCU = SHREGDEL_FLAGS.HKCU;
pub const SHREGDEL_HKLM = SHREGDEL_FLAGS.HKLM;
pub const SHREGDEL_BOTH = SHREGDEL_FLAGS.BOTH;

pub const SHREGENUM_FLAGS = enum(i32) {
    DEFAULT = 0,
    HKCU = 1,
    HKLM = 16,
    BOTH = 17,
};
pub const SHREGENUM_DEFAULT = SHREGENUM_FLAGS.DEFAULT;
pub const SHREGENUM_HKCU = SHREGENUM_FLAGS.HKCU;
pub const SHREGENUM_HKLM = SHREGENUM_FLAGS.HKLM;
pub const SHREGENUM_BOTH = SHREGENUM_FLAGS.BOTH;

pub const ASSOCSTR = enum(i32) {
    COMMAND = 1,
    EXECUTABLE = 2,
    FRIENDLYDOCNAME = 3,
    FRIENDLYAPPNAME = 4,
    NOOPEN = 5,
    SHELLNEWVALUE = 6,
    DDECOMMAND = 7,
    DDEIFEXEC = 8,
    DDEAPPLICATION = 9,
    DDETOPIC = 10,
    INFOTIP = 11,
    QUICKTIP = 12,
    TILEINFO = 13,
    CONTENTTYPE = 14,
    DEFAULTICON = 15,
    SHELLEXTENSION = 16,
    DROPTARGET = 17,
    DELEGATEEXECUTE = 18,
    SUPPORTED_URI_PROTOCOLS = 19,
    PROGID = 20,
    APPID = 21,
    APPPUBLISHER = 22,
    APPICONREFERENCE = 23,
    MAX = 24,
};
pub const ASSOCSTR_COMMAND = ASSOCSTR.COMMAND;
pub const ASSOCSTR_EXECUTABLE = ASSOCSTR.EXECUTABLE;
pub const ASSOCSTR_FRIENDLYDOCNAME = ASSOCSTR.FRIENDLYDOCNAME;
pub const ASSOCSTR_FRIENDLYAPPNAME = ASSOCSTR.FRIENDLYAPPNAME;
pub const ASSOCSTR_NOOPEN = ASSOCSTR.NOOPEN;
pub const ASSOCSTR_SHELLNEWVALUE = ASSOCSTR.SHELLNEWVALUE;
pub const ASSOCSTR_DDECOMMAND = ASSOCSTR.DDECOMMAND;
pub const ASSOCSTR_DDEIFEXEC = ASSOCSTR.DDEIFEXEC;
pub const ASSOCSTR_DDEAPPLICATION = ASSOCSTR.DDEAPPLICATION;
pub const ASSOCSTR_DDETOPIC = ASSOCSTR.DDETOPIC;
pub const ASSOCSTR_INFOTIP = ASSOCSTR.INFOTIP;
pub const ASSOCSTR_QUICKTIP = ASSOCSTR.QUICKTIP;
pub const ASSOCSTR_TILEINFO = ASSOCSTR.TILEINFO;
pub const ASSOCSTR_CONTENTTYPE = ASSOCSTR.CONTENTTYPE;
pub const ASSOCSTR_DEFAULTICON = ASSOCSTR.DEFAULTICON;
pub const ASSOCSTR_SHELLEXTENSION = ASSOCSTR.SHELLEXTENSION;
pub const ASSOCSTR_DROPTARGET = ASSOCSTR.DROPTARGET;
pub const ASSOCSTR_DELEGATEEXECUTE = ASSOCSTR.DELEGATEEXECUTE;
pub const ASSOCSTR_SUPPORTED_URI_PROTOCOLS = ASSOCSTR.SUPPORTED_URI_PROTOCOLS;
pub const ASSOCSTR_PROGID = ASSOCSTR.PROGID;
pub const ASSOCSTR_APPID = ASSOCSTR.APPID;
pub const ASSOCSTR_APPPUBLISHER = ASSOCSTR.APPPUBLISHER;
pub const ASSOCSTR_APPICONREFERENCE = ASSOCSTR.APPICONREFERENCE;
pub const ASSOCSTR_MAX = ASSOCSTR.MAX;

pub const ASSOCKEY = enum(i32) {
    SHELLEXECCLASS = 1,
    APP = 2,
    CLASS = 3,
    BASECLASS = 4,
    MAX = 5,
};
pub const ASSOCKEY_SHELLEXECCLASS = ASSOCKEY.SHELLEXECCLASS;
pub const ASSOCKEY_APP = ASSOCKEY.APP;
pub const ASSOCKEY_CLASS = ASSOCKEY.CLASS;
pub const ASSOCKEY_BASECLASS = ASSOCKEY.BASECLASS;
pub const ASSOCKEY_MAX = ASSOCKEY.MAX;

pub const ASSOCDATA = enum(i32) {
    MSIDESCRIPTOR = 1,
    NOACTIVATEHANDLER = 2,
    UNUSED1 = 3,
    HASPERUSERASSOC = 4,
    EDITFLAGS = 5,
    VALUE = 6,
    MAX = 7,
};
pub const ASSOCDATA_MSIDESCRIPTOR = ASSOCDATA.MSIDESCRIPTOR;
pub const ASSOCDATA_NOACTIVATEHANDLER = ASSOCDATA.NOACTIVATEHANDLER;
pub const ASSOCDATA_UNUSED1 = ASSOCDATA.UNUSED1;
pub const ASSOCDATA_HASPERUSERASSOC = ASSOCDATA.HASPERUSERASSOC;
pub const ASSOCDATA_EDITFLAGS = ASSOCDATA.EDITFLAGS;
pub const ASSOCDATA_VALUE = ASSOCDATA.VALUE;
pub const ASSOCDATA_MAX = ASSOCDATA.MAX;

pub const ASSOCENUM = enum(i32) {
    E = 0,
};
pub const ASSOCENUM_NONE = ASSOCENUM.E;

pub const FILETYPEATTRIBUTEFLAGS = enum(i32) {
    None = 0,
    Exclude = 1,
    Show = 2,
    HasExtension = 4,
    NoEdit = 8,
    NoRemove = 16,
    NoNewVerb = 32,
    NoEditVerb = 64,
    NoRemoveVerb = 128,
    NoEditDesc = 256,
    NoEditIcon = 512,
    NoEditDflt = 1024,
    NoEditVerbCmd = 2048,
    NoEditVerbExe = 4096,
    NoDDE = 8192,
    NoEditMIME = 32768,
    OpenIsSafe = 65536,
    AlwaysUnsafe = 131072,
    NoRecentDocs = 1048576,
    SafeForElevation = 2097152,
    AlwaysUseDirectInvoke = 4194304,
};
pub const FTA_None = FILETYPEATTRIBUTEFLAGS.None;
pub const FTA_Exclude = FILETYPEATTRIBUTEFLAGS.Exclude;
pub const FTA_Show = FILETYPEATTRIBUTEFLAGS.Show;
pub const FTA_HasExtension = FILETYPEATTRIBUTEFLAGS.HasExtension;
pub const FTA_NoEdit = FILETYPEATTRIBUTEFLAGS.NoEdit;
pub const FTA_NoRemove = FILETYPEATTRIBUTEFLAGS.NoRemove;
pub const FTA_NoNewVerb = FILETYPEATTRIBUTEFLAGS.NoNewVerb;
pub const FTA_NoEditVerb = FILETYPEATTRIBUTEFLAGS.NoEditVerb;
pub const FTA_NoRemoveVerb = FILETYPEATTRIBUTEFLAGS.NoRemoveVerb;
pub const FTA_NoEditDesc = FILETYPEATTRIBUTEFLAGS.NoEditDesc;
pub const FTA_NoEditIcon = FILETYPEATTRIBUTEFLAGS.NoEditIcon;
pub const FTA_NoEditDflt = FILETYPEATTRIBUTEFLAGS.NoEditDflt;
pub const FTA_NoEditVerbCmd = FILETYPEATTRIBUTEFLAGS.NoEditVerbCmd;
pub const FTA_NoEditVerbExe = FILETYPEATTRIBUTEFLAGS.NoEditVerbExe;
pub const FTA_NoDDE = FILETYPEATTRIBUTEFLAGS.NoDDE;
pub const FTA_NoEditMIME = FILETYPEATTRIBUTEFLAGS.NoEditMIME;
pub const FTA_OpenIsSafe = FILETYPEATTRIBUTEFLAGS.OpenIsSafe;
pub const FTA_AlwaysUnsafe = FILETYPEATTRIBUTEFLAGS.AlwaysUnsafe;
pub const FTA_NoRecentDocs = FILETYPEATTRIBUTEFLAGS.NoRecentDocs;
pub const FTA_SafeForElevation = FILETYPEATTRIBUTEFLAGS.SafeForElevation;
pub const FTA_AlwaysUseDirectInvoke = FILETYPEATTRIBUTEFLAGS.AlwaysUseDirectInvoke;

// TODO: this type is limited to platform 'windows5.0'
const IID_IQueryAssociations_Value = Guid.initString("c46ca590-3c3f-11d2-bee6-0000f805ca57");
pub const IID_IQueryAssociations = &IID_IQueryAssociations_Value;
pub const IQueryAssociations = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Init: *const fn(
            self: *const IQueryAssociations,
            flags: u32,
            pszAssoc: ?[*:0]const u16,
            hkProgid: ?HKEY,
            hwnd: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetString: *const fn(
            self: *const IQueryAssociations,
            flags: u32,
            str: ASSOCSTR,
            pszExtra: ?[*:0]const u16,
            pszOut: ?[*:0]u16,
            pcchOut: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKey: *const fn(
            self: *const IQueryAssociations,
            flags: u32,
            key: ASSOCKEY,
            pszExtra: ?[*:0]const u16,
            phkeyOut: ?*?HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetData: *const fn(
            self: *const IQueryAssociations,
            flags: u32,
            data: ASSOCDATA,
            pszExtra: ?[*:0]const u16,
            // TODO: what to do with BytesParamIndex 4?
            pvOut: ?*anyopaque,
            pcbOut: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnum: *const fn(
            self: *const IQueryAssociations,
            flags: u32,
            assocenum: ASSOCENUM,
            pszExtra: ?[*:0]const u16,
            riid: ?*const Guid,
            ppvOut: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Init(self: *const IQueryAssociations, flags: u32, pszAssoc: ?[*:0]const u16, hkProgid: ?HKEY, hwnd: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.Init(self, flags, pszAssoc, hkProgid, hwnd);
    }
    pub fn GetString(self: *const IQueryAssociations, flags: u32, str: ASSOCSTR, pszExtra: ?[*:0]const u16, pszOut: ?[*:0]u16, pcchOut: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetString(self, flags, str, pszExtra, pszOut, pcchOut);
    }
    pub fn GetKey(self: *const IQueryAssociations, flags: u32, key: ASSOCKEY, pszExtra: ?[*:0]const u16, phkeyOut: ?*?HKEY) callconv(.Inline) HRESULT {
        return self.vtable.GetKey(self, flags, key, pszExtra, phkeyOut);
    }
    pub fn GetData(self: *const IQueryAssociations, flags: u32, data: ASSOCDATA, pszExtra: ?[*:0]const u16, pvOut: ?*anyopaque, pcbOut: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetData(self, flags, data, pszExtra, pvOut, pcbOut);
    }
    pub fn GetEnum(self: *const IQueryAssociations, flags: u32, assocenum: ASSOCENUM, pszExtra: ?[*:0]const u16, riid: ?*const Guid, ppvOut: ?*?*anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetEnum(self, flags, assocenum, pszExtra, riid, ppvOut);
    }
};

pub const SHGLOBALCOUNTER = enum(i32) {
    GLOBALCOUNTER_SEARCHMANAGER = 0,
    GLOBALCOUNTER_SEARCHOPTIONS = 1,
    GLOBALCOUNTER_FOLDERSETTINGSCHANGE = 2,
    GLOBALCOUNTER_RATINGS = 3,
    GLOBALCOUNTER_APPROVEDSITES = 4,
    GLOBALCOUNTER_RESTRICTIONS = 5,
    GLOBALCOUNTER_SHELLSETTINGSCHANGED = 6,
    GLOBALCOUNTER_SYSTEMPIDLCHANGE = 7,
    GLOBALCOUNTER_OVERLAYMANAGER = 8,
    GLOBALCOUNTER_QUERYASSOCIATIONS = 9,
    GLOBALCOUNTER_IESESSIONS = 10,
    GLOBALCOUNTER_IEONLY_SESSIONS = 11,
    GLOBALCOUNTER_APPLICATION_DESTINATIONS = 12,
    __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_CSCSYNCINPROGRESS = 13,
    GLOBALCOUNTER_BITBUCKETNUMDELETERS = 14,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SHARES = 15,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_A = 16,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_B = 17,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_C = 18,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_D = 19,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_E = 20,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_F = 21,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_G = 22,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_H = 23,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_I = 24,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_J = 25,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_K = 26,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_L = 27,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_M = 28,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_N = 29,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_O = 30,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_P = 31,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Q = 32,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_R = 33,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_S = 34,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_T = 35,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_U = 36,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_V = 37,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_W = 38,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_X = 39,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Y = 40,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Z = 41,
    __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SERVERDRIVE = 42,
    __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEGLOBALDIRTYCOUNT = 43,
    GLOBALCOUNTER_RECYCLEBINENUM = 44,
    GLOBALCOUNTER_RECYCLEBINCORRUPTED = 45,
    GLOBALCOUNTER_RATINGS_STATECOUNTER = 46,
    GLOBALCOUNTER_PRIVATE_PROFILE_CACHE = 47,
    GLOBALCOUNTER_INTERNETTOOLBAR_LAYOUT = 48,
    GLOBALCOUNTER_FOLDERDEFINITION_CACHE = 49,
    GLOBALCOUNTER_COMMONPLACES_LIST_CACHE = 50,
    GLOBALCOUNTER_PRIVATE_PROFILE_CACHE_MACHINEWIDE = 51,
    GLOBALCOUNTER_ASSOCCHANGED = 52,
    GLOBALCOUNTER_APP_ITEMS_STATE_STORE_CACHE = 53,
    GLOBALCOUNTER_SETTINGSYNC_ENABLED = 54,
    GLOBALCOUNTER_APPSFOLDER_FILETYPEASSOCIATION_COUNTER = 55,
    GLOBALCOUNTER_USERINFOCHANGED = 56,
    GLOBALCOUNTER_SYNC_ENGINE_INFORMATION_CACHE_MACHINEWIDE = 57,
    GLOBALCOUNTER_BANNERS_DATAMODEL_CACHE_MACHINEWIDE = 58,
    GLOBALCOUNTER_MAXIMUMVALUE = 59,
};
pub const GLOBALCOUNTER_SEARCHMANAGER = SHGLOBALCOUNTER.GLOBALCOUNTER_SEARCHMANAGER;
pub const GLOBALCOUNTER_SEARCHOPTIONS = SHGLOBALCOUNTER.GLOBALCOUNTER_SEARCHOPTIONS;
pub const GLOBALCOUNTER_FOLDERSETTINGSCHANGE = SHGLOBALCOUNTER.GLOBALCOUNTER_FOLDERSETTINGSCHANGE;
pub const GLOBALCOUNTER_RATINGS = SHGLOBALCOUNTER.GLOBALCOUNTER_RATINGS;
pub const GLOBALCOUNTER_APPROVEDSITES = SHGLOBALCOUNTER.GLOBALCOUNTER_APPROVEDSITES;
pub const GLOBALCOUNTER_RESTRICTIONS = SHGLOBALCOUNTER.GLOBALCOUNTER_RESTRICTIONS;
pub const GLOBALCOUNTER_SHELLSETTINGSCHANGED = SHGLOBALCOUNTER.GLOBALCOUNTER_SHELLSETTINGSCHANGED;
pub const GLOBALCOUNTER_SYSTEMPIDLCHANGE = SHGLOBALCOUNTER.GLOBALCOUNTER_SYSTEMPIDLCHANGE;
pub const GLOBALCOUNTER_OVERLAYMANAGER = SHGLOBALCOUNTER.GLOBALCOUNTER_OVERLAYMANAGER;
pub const GLOBALCOUNTER_QUERYASSOCIATIONS = SHGLOBALCOUNTER.GLOBALCOUNTER_QUERYASSOCIATIONS;
pub const GLOBALCOUNTER_IESESSIONS = SHGLOBALCOUNTER.GLOBALCOUNTER_IESESSIONS;
pub const GLOBALCOUNTER_IEONLY_SESSIONS = SHGLOBALCOUNTER.GLOBALCOUNTER_IEONLY_SESSIONS;
pub const GLOBALCOUNTER_APPLICATION_DESTINATIONS = SHGLOBALCOUNTER.GLOBALCOUNTER_APPLICATION_DESTINATIONS;
pub const __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_CSCSYNCINPROGRESS = SHGLOBALCOUNTER.__UNUSED_RECYCLE_WAS_GLOBALCOUNTER_CSCSYNCINPROGRESS;
pub const GLOBALCOUNTER_BITBUCKETNUMDELETERS = SHGLOBALCOUNTER.GLOBALCOUNTER_BITBUCKETNUMDELETERS;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SHARES = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SHARES;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_A = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_A;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_B = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_B;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_C = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_C;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_D = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_D;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_E = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_E;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_F = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_F;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_G = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_G;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_H = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_H;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_I = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_I;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_J = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_J;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_K = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_K;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_L = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_L;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_M = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_M;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_N = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_N;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_O = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_O;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_P = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_P;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Q = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Q;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_R = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_R;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_S = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_S;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_T = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_T;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_U = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_U;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_V = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_V;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_W = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_W;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_X = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_X;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Y = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Y;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Z = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Z;
pub const __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SERVERDRIVE = SHGLOBALCOUNTER.__UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SERVERDRIVE;
pub const __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEGLOBALDIRTYCOUNT = SHGLOBALCOUNTER.__UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEGLOBALDIRTYCOUNT;
pub const GLOBALCOUNTER_RECYCLEBINENUM = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEBINENUM;
pub const GLOBALCOUNTER_RECYCLEBINCORRUPTED = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEBINCORRUPTED;
pub const GLOBALCOUNTER_RATINGS_STATECOUNTER = SHGLOBALCOUNTER.GLOBALCOUNTER_RATINGS_STATECOUNTER;
pub const GLOBALCOUNTER_PRIVATE_PROFILE_CACHE = SHGLOBALCOUNTER.GLOBALCOUNTER_PRIVATE_PROFILE_CACHE;
pub const GLOBALCOUNTER_INTERNETTOOLBAR_LAYOUT = SHGLOBALCOUNTER.GLOBALCOUNTER_INTERNETTOOLBAR_LAYOUT;
pub const GLOBALCOUNTER_FOLDERDEFINITION_CACHE = SHGLOBALCOUNTER.GLOBALCOUNTER_FOLDERDEFINITION_CACHE;
pub const GLOBALCOUNTER_COMMONPLACES_LIST_CACHE = SHGLOBALCOUNTER.GLOBALCOUNTER_COMMONPLACES_LIST_CACHE;
pub const GLOBALCOUNTER_PRIVATE_PROFILE_CACHE_MACHINEWIDE = SHGLOBALCOUNTER.GLOBALCOUNTER_PRIVATE_PROFILE_CACHE_MACHINEWIDE;
pub const GLOBALCOUNTER_ASSOCCHANGED = SHGLOBALCOUNTER.GLOBALCOUNTER_ASSOCCHANGED;
pub const GLOBALCOUNTER_APP_ITEMS_STATE_STORE_CACHE = SHGLOBALCOUNTER.GLOBALCOUNTER_APP_ITEMS_STATE_STORE_CACHE;
pub const GLOBALCOUNTER_SETTINGSYNC_ENABLED = SHGLOBALCOUNTER.GLOBALCOUNTER_SETTINGSYNC_ENABLED;
pub const GLOBALCOUNTER_APPSFOLDER_FILETYPEASSOCIATION_COUNTER = SHGLOBALCOUNTER.GLOBALCOUNTER_APPSFOLDER_FILETYPEASSOCIATION_COUNTER;
pub const GLOBALCOUNTER_USERINFOCHANGED = SHGLOBALCOUNTER.GLOBALCOUNTER_USERINFOCHANGED;
pub const GLOBALCOUNTER_SYNC_ENGINE_INFORMATION_CACHE_MACHINEWIDE = SHGLOBALCOUNTER.GLOBALCOUNTER_SYNC_ENGINE_INFORMATION_CACHE_MACHINEWIDE;
pub const GLOBALCOUNTER_BANNERS_DATAMODEL_CACHE_MACHINEWIDE = SHGLOBALCOUNTER.GLOBALCOUNTER_BANNERS_DATAMODEL_CACHE_MACHINEWIDE;
pub const GLOBALCOUNTER_MAXIMUMVALUE = SHGLOBALCOUNTER.GLOBALCOUNTER_MAXIMUMVALUE;

pub const QITAB = extern struct {
    piid: ?*const Guid,
    dwOffset: u32,
};

pub const DLLVERSIONINFO = extern struct {
    cbSize: u32,
    dwMajorVersion: u32,
    dwMinorVersion: u32,
    dwBuildNumber: u32,
    dwPlatformID: u32,
};

pub const DLLVERSIONINFO2 = extern struct {
    info1: DLLVERSIONINFO,
    dwFlags: u32,
    ullVersion: u64,
};

pub const DLLGETVERSIONPROC = *const fn(
    param0: ?*DLLVERSIONINFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const APPINFODATAFLAGS = enum(i32) {
    DISPLAYNAME = 1,
    VERSION = 2,
    PUBLISHER = 4,
    PRODUCTID = 8,
    REGISTEREDOWNER = 16,
    REGISTEREDCOMPANY = 32,
    LANGUAGE = 64,
    SUPPORTURL = 128,
    SUPPORTTELEPHONE = 256,
    HELPLINK = 512,
    INSTALLLOCATION = 1024,
    INSTALLSOURCE = 2048,
    INSTALLDATE = 4096,
    CONTACT = 16384,
    COMMENTS = 32768,
    IMAGE = 131072,
    READMEURL = 262144,
    UPDATEINFOURL = 524288,
};
pub const AIM_DISPLAYNAME = APPINFODATAFLAGS.DISPLAYNAME;
pub const AIM_VERSION = APPINFODATAFLAGS.VERSION;
pub const AIM_PUBLISHER = APPINFODATAFLAGS.PUBLISHER;
pub const AIM_PRODUCTID = APPINFODATAFLAGS.PRODUCTID;
pub const AIM_REGISTEREDOWNER = APPINFODATAFLAGS.REGISTEREDOWNER;
pub const AIM_REGISTEREDCOMPANY = APPINFODATAFLAGS.REGISTEREDCOMPANY;
pub const AIM_LANGUAGE = APPINFODATAFLAGS.LANGUAGE;
pub const AIM_SUPPORTURL = APPINFODATAFLAGS.SUPPORTURL;
pub const AIM_SUPPORTTELEPHONE = APPINFODATAFLAGS.SUPPORTTELEPHONE;
pub const AIM_HELPLINK = APPINFODATAFLAGS.HELPLINK;
pub const AIM_INSTALLLOCATION = APPINFODATAFLAGS.INSTALLLOCATION;
pub const AIM_INSTALLSOURCE = APPINFODATAFLAGS.INSTALLSOURCE;
pub const AIM_INSTALLDATE = APPINFODATAFLAGS.INSTALLDATE;
pub const AIM_CONTACT = APPINFODATAFLAGS.CONTACT;
pub const AIM_COMMENTS = APPINFODATAFLAGS.COMMENTS;
pub const AIM_IMAGE = APPINFODATAFLAGS.IMAGE;
pub const AIM_READMEURL = APPINFODATAFLAGS.READMEURL;
pub const AIM_UPDATEINFOURL = APPINFODATAFLAGS.UPDATEINFOURL;

pub const APPINFODATA = extern struct {
    cbSize: u32,
    dwMask: u32,
    pszDisplayName: ?PWSTR,
    pszVersion: ?PWSTR,
    pszPublisher: ?PWSTR,
    pszProductID: ?PWSTR,
    pszRegisteredOwner: ?PWSTR,
    pszRegisteredCompany: ?PWSTR,
    pszLanguage: ?PWSTR,
    pszSupportUrl: ?PWSTR,
    pszSupportTelephone: ?PWSTR,
    pszHelpLink: ?PWSTR,
    pszInstallLocation: ?PWSTR,
    pszInstallSource: ?PWSTR,
    pszInstallDate: ?PWSTR,
    pszContact: ?PWSTR,
    pszComments: ?PWSTR,
    pszImage: ?PWSTR,
    pszReadmeUrl: ?PWSTR,
    pszUpdateInfoUrl: ?PWSTR,
};

pub const APPACTIONFLAGS = enum(i32) {
    INSTALL = 1,
    UNINSTALL = 2,
    MODIFY = 4,
    REPAIR = 8,
    UPGRADE = 16,
    CANGETSIZE = 32,
    MODIFYREMOVE = 128,
    ADDLATER = 256,
    UNSCHEDULE = 512,
};
pub const APPACTION_INSTALL = APPACTIONFLAGS.INSTALL;
pub const APPACTION_UNINSTALL = APPACTIONFLAGS.UNINSTALL;
pub const APPACTION_MODIFY = APPACTIONFLAGS.MODIFY;
pub const APPACTION_REPAIR = APPACTIONFLAGS.REPAIR;
pub const APPACTION_UPGRADE = APPACTIONFLAGS.UPGRADE;
pub const APPACTION_CANGETSIZE = APPACTIONFLAGS.CANGETSIZE;
pub const APPACTION_MODIFYREMOVE = APPACTIONFLAGS.MODIFYREMOVE;
pub const APPACTION_ADDLATER = APPACTIONFLAGS.ADDLATER;
pub const APPACTION_UNSCHEDULE = APPACTIONFLAGS.UNSCHEDULE;

pub const SLOWAPPINFO = extern struct {
    ullSize: u64,
    ftLastUsed: FILETIME,
    iTimesUsed: i32,
    pszImage: ?PWSTR,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellApp_Value = Guid.initString("a3e14960-935f-11d1-b8b8-006008059382");
pub const IID_IShellApp = &IID_IShellApp_Value;
pub const IShellApp = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAppInfo: *const fn(
            self: *const IShellApp,
            pai: ?*APPINFODATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPossibleActions: *const fn(
            self: *const IShellApp,
            pdwActions: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSlowAppInfo: *const fn(
            self: *const IShellApp,
            psaid: ?*SLOWAPPINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCachedSlowAppInfo: *const fn(
            self: *const IShellApp,
            psaid: ?*SLOWAPPINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsInstalled: *const fn(
            self: *const IShellApp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetAppInfo(self: *const IShellApp, pai: ?*APPINFODATA) callconv(.Inline) HRESULT {
        return self.vtable.GetAppInfo(self, pai);
    }
    pub fn GetPossibleActions(self: *const IShellApp, pdwActions: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetPossibleActions(self, pdwActions);
    }
    pub fn GetSlowAppInfo(self: *const IShellApp, psaid: ?*SLOWAPPINFO) callconv(.Inline) HRESULT {
        return self.vtable.GetSlowAppInfo(self, psaid);
    }
    pub fn GetCachedSlowAppInfo(self: *const IShellApp, psaid: ?*SLOWAPPINFO) callconv(.Inline) HRESULT {
        return self.vtable.GetCachedSlowAppInfo(self, psaid);
    }
    pub fn IsInstalled(self: *const IShellApp) callconv(.Inline) HRESULT {
        return self.vtable.IsInstalled(self);
    }
};

pub const PUBAPPINFOFLAGS = enum(i32) {
    SOURCE = 1,
    ASSIGNEDTIME = 2,
    PUBLISHEDTIME = 4,
    SCHEDULEDTIME = 8,
    EXPIRETIME = 16,
};
pub const PAI_SOURCE = PUBAPPINFOFLAGS.SOURCE;
pub const PAI_ASSIGNEDTIME = PUBAPPINFOFLAGS.ASSIGNEDTIME;
pub const PAI_PUBLISHEDTIME = PUBAPPINFOFLAGS.PUBLISHEDTIME;
pub const PAI_SCHEDULEDTIME = PUBAPPINFOFLAGS.SCHEDULEDTIME;
pub const PAI_EXPIRETIME = PUBAPPINFOFLAGS.EXPIRETIME;

pub const PUBAPPINFO = extern struct {
    cbSize: u32,
    dwMask: u32,
    pszSource: ?PWSTR,
    stAssigned: SYSTEMTIME,
    stPublished: SYSTEMTIME,
    stScheduled: SYSTEMTIME,
    stExpire: SYSTEMTIME,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IPublishedApp_Value = Guid.initString("1bc752e0-9046-11d1-b8b3-006008059382");
pub const IID_IPublishedApp = &IID_IPublishedApp_Value;
pub const IPublishedApp = extern union {
    pub const VTable = extern struct {
        base: IShellApp.VTable,
        Install: *const fn(
            self: *const IPublishedApp,
            pstInstall: ?*SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPublishedAppInfo: *const fn(
            self: *const IPublishedApp,
            ppai: ?*PUBAPPINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unschedule: *const fn(
            self: *const IPublishedApp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IShellApp: IShellApp,
    IUnknown: IUnknown,
    pub fn Install(self: *const IPublishedApp, pstInstall: ?*SYSTEMTIME) callconv(.Inline) HRESULT {
        return self.vtable.Install(self, pstInstall);
    }
    pub fn GetPublishedAppInfo(self: *const IPublishedApp, ppai: ?*PUBAPPINFO) callconv(.Inline) HRESULT {
        return self.vtable.GetPublishedAppInfo(self, ppai);
    }
    pub fn Unschedule(self: *const IPublishedApp) callconv(.Inline) HRESULT {
        return self.vtable.Unschedule(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPublishedApp2_Value = Guid.initString("12b81347-1b3a-4a04-aa61-3f768b67fd7e");
pub const IID_IPublishedApp2 = &IID_IPublishedApp2_Value;
pub const IPublishedApp2 = extern union {
    pub const VTable = extern struct {
        base: IPublishedApp.VTable,
        Install2: *const fn(
            self: *const IPublishedApp2,
            pstInstall: ?*SYSTEMTIME,
            hwndParent: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IPublishedApp: IPublishedApp,
    IShellApp: IShellApp,
    IUnknown: IUnknown,
    pub fn Install2(self: *const IPublishedApp2, pstInstall: ?*SYSTEMTIME, hwndParent: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.Install2(self, pstInstall, hwndParent);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IEnumPublishedApps_Value = Guid.initString("0b124f8c-91f0-11d1-b8b5-006008059382");
pub const IID_IEnumPublishedApps = &IID_IEnumPublishedApps_Value;
pub const IEnumPublishedApps = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumPublishedApps,
            pia: ?*?*IPublishedApp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumPublishedApps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumPublishedApps, pia: ?*?*IPublishedApp) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, pia);
    }
    pub fn Reset(self: *const IEnumPublishedApps) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IAppPublisher_Value = Guid.initString("07250a10-9cf9-11d1-9076-006008059382");
pub const IID_IAppPublisher = &IID_IAppPublisher_Value;
pub const IAppPublisher = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNumberOfCategories: *const fn(
            self: *const IAppPublisher,
            pdwCat: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCategories: *const fn(
            self: *const IAppPublisher,
            pAppCategoryList: ?*APPCATEGORYINFOLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumberOfApps: *const fn(
            self: *const IAppPublisher,
            pdwApps: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumApps: *const fn(
            self: *const IAppPublisher,
            pAppCategoryId: ?*Guid,
            ppepa: ?*?*IEnumPublishedApps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetNumberOfCategories(self: *const IAppPublisher, pdwCat: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetNumberOfCategories(self, pdwCat);
    }
    pub fn GetCategories(self: *const IAppPublisher, pAppCategoryList: ?*APPCATEGORYINFOLIST) callconv(.Inline) HRESULT {
        return self.vtable.GetCategories(self, pAppCategoryList);
    }
    pub fn GetNumberOfApps(self: *const IAppPublisher, pdwApps: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetNumberOfApps(self, pdwApps);
    }
    pub fn EnumApps(self: *const IAppPublisher, pAppCategoryId: ?*Guid, ppepa: ?*?*IEnumPublishedApps) callconv(.Inline) HRESULT {
        return self.vtable.EnumApps(self, pAppCategoryId, ppepa);
    }
};

const CLSID_PasswordCredentialProvider_Value = Guid.initString("60b78e88-ead8-445c-9cfd-0b87f74ea6cd");
pub const CLSID_PasswordCredentialProvider = &CLSID_PasswordCredentialProvider_Value;

const CLSID_V1PasswordCredentialProvider_Value = Guid.initString("6f45dc1e-5384-457a-bc13-2cd81b0d28ed");
pub const CLSID_V1PasswordCredentialProvider = &CLSID_V1PasswordCredentialProvider_Value;

const CLSID_PINLogonCredentialProvider_Value = Guid.initString("cb82ea12-9f71-446d-89e1-8d0924e1256e");
pub const CLSID_PINLogonCredentialProvider = &CLSID_PINLogonCredentialProvider_Value;

const CLSID_NPCredentialProvider_Value = Guid.initString("3dd6bec0-8193-4ffe-ae25-e08e39ea4063");
pub const CLSID_NPCredentialProvider = &CLSID_NPCredentialProvider_Value;

const CLSID_SmartcardCredentialProvider_Value = Guid.initString("8fd7e19c-3bf7-489b-a72c-846ab3678c96");
pub const CLSID_SmartcardCredentialProvider = &CLSID_SmartcardCredentialProvider_Value;

const CLSID_V1SmartcardCredentialProvider_Value = Guid.initString("8bf9a910-a8ff-457f-999f-a5ca10b4a885");
pub const CLSID_V1SmartcardCredentialProvider = &CLSID_V1SmartcardCredentialProvider_Value;

const CLSID_SmartcardPinProvider_Value = Guid.initString("94596c7e-3744-41ce-893e-bbf09122f76a");
pub const CLSID_SmartcardPinProvider = &CLSID_SmartcardPinProvider_Value;

const CLSID_SmartcardReaderSelectionProvider_Value = Guid.initString("1b283861-754f-4022-ad47-a5eaaa618894");
pub const CLSID_SmartcardReaderSelectionProvider = &CLSID_SmartcardReaderSelectionProvider_Value;

const CLSID_SmartcardWinRTProvider_Value = Guid.initString("1ee7337f-85ac-45e2-a23c-37c753209769");
pub const CLSID_SmartcardWinRTProvider = &CLSID_SmartcardWinRTProvider_Value;

const CLSID_GenericCredentialProvider_Value = Guid.initString("25cbb996-92ed-457e-b28c-4774084bd562");
pub const CLSID_GenericCredentialProvider = &CLSID_GenericCredentialProvider_Value;

const CLSID_RASProvider_Value = Guid.initString("5537e283-b1e7-4ef8-9c6e-7ab0afe5056d");
pub const CLSID_RASProvider = &CLSID_RASProvider_Value;

const CLSID_OnexCredentialProvider_Value = Guid.initString("07aa0886-cc8d-4e19-a410-1c75af686e62");
pub const CLSID_OnexCredentialProvider = &CLSID_OnexCredentialProvider_Value;

const CLSID_OnexPlapSmartcardCredentialProvider_Value = Guid.initString("33c86cd6-705f-4ba1-9adb-67070b837775");
pub const CLSID_OnexPlapSmartcardCredentialProvider = &CLSID_OnexPlapSmartcardCredentialProvider_Value;

const CLSID_VaultProvider_Value = Guid.initString("503739d0-4c5e-4cfd-b3ba-d881334f0df2");
pub const CLSID_VaultProvider = &CLSID_VaultProvider_Value;

const CLSID_WinBioCredentialProvider_Value = Guid.initString("bec09223-b018-416d-a0ac-523971b639f5");
pub const CLSID_WinBioCredentialProvider = &CLSID_WinBioCredentialProvider_Value;

const CLSID_V1WinBioCredentialProvider_Value = Guid.initString("ac3ac249-e820-4343-a65b-377ac634dc09");
pub const CLSID_V1WinBioCredentialProvider = &CLSID_V1WinBioCredentialProvider_Value;

pub const CREDENTIAL_PROVIDER_USAGE_SCENARIO = enum(i32) {
    INVALID = 0,
    LOGON = 1,
    UNLOCK_WORKSTATION = 2,
    CHANGE_PASSWORD = 3,
    CREDUI = 4,
    PLAP = 5,
};
pub const CPUS_INVALID = CREDENTIAL_PROVIDER_USAGE_SCENARIO.INVALID;
pub const CPUS_LOGON = CREDENTIAL_PROVIDER_USAGE_SCENARIO.LOGON;
pub const CPUS_UNLOCK_WORKSTATION = CREDENTIAL_PROVIDER_USAGE_SCENARIO.UNLOCK_WORKSTATION;
pub const CPUS_CHANGE_PASSWORD = CREDENTIAL_PROVIDER_USAGE_SCENARIO.CHANGE_PASSWORD;
pub const CPUS_CREDUI = CREDENTIAL_PROVIDER_USAGE_SCENARIO.CREDUI;
pub const CPUS_PLAP = CREDENTIAL_PROVIDER_USAGE_SCENARIO.PLAP;

pub const CREDENTIAL_PROVIDER_FIELD_TYPE = enum(i32) {
    INVALID = 0,
    LARGE_TEXT = 1,
    SMALL_TEXT = 2,
    COMMAND_LINK = 3,
    EDIT_TEXT = 4,
    PASSWORD_TEXT = 5,
    TILE_IMAGE = 6,
    CHECKBOX = 7,
    COMBOBOX = 8,
    SUBMIT_BUTTON = 9,
};
pub const CPFT_INVALID = CREDENTIAL_PROVIDER_FIELD_TYPE.INVALID;
pub const CPFT_LARGE_TEXT = CREDENTIAL_PROVIDER_FIELD_TYPE.LARGE_TEXT;
pub const CPFT_SMALL_TEXT = CREDENTIAL_PROVIDER_FIELD_TYPE.SMALL_TEXT;
pub const CPFT_COMMAND_LINK = CREDENTIAL_PROVIDER_FIELD_TYPE.COMMAND_LINK;
pub const CPFT_EDIT_TEXT = CREDENTIAL_PROVIDER_FIELD_TYPE.EDIT_TEXT;
pub const CPFT_PASSWORD_TEXT = CREDENTIAL_PROVIDER_FIELD_TYPE.PASSWORD_TEXT;
pub const CPFT_TILE_IMAGE = CREDENTIAL_PROVIDER_FIELD_TYPE.TILE_IMAGE;
pub const CPFT_CHECKBOX = CREDENTIAL_PROVIDER_FIELD_TYPE.CHECKBOX;
pub const CPFT_COMBOBOX = CREDENTIAL_PROVIDER_FIELD_TYPE.COMBOBOX;
pub const CPFT_SUBMIT_BUTTON = CREDENTIAL_PROVIDER_FIELD_TYPE.SUBMIT_BUTTON;

pub const CREDENTIAL_PROVIDER_FIELD_STATE = enum(i32) {
    HIDDEN = 0,
    DISPLAY_IN_SELECTED_TILE = 1,
    DISPLAY_IN_DESELECTED_TILE = 2,
    DISPLAY_IN_BOTH = 3,
};
pub const CPFS_HIDDEN = CREDENTIAL_PROVIDER_FIELD_STATE.HIDDEN;
pub const CPFS_DISPLAY_IN_SELECTED_TILE = CREDENTIAL_PROVIDER_FIELD_STATE.DISPLAY_IN_SELECTED_TILE;
pub const CPFS_DISPLAY_IN_DESELECTED_TILE = CREDENTIAL_PROVIDER_FIELD_STATE.DISPLAY_IN_DESELECTED_TILE;
pub const CPFS_DISPLAY_IN_BOTH = CREDENTIAL_PROVIDER_FIELD_STATE.DISPLAY_IN_BOTH;

pub const CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE = enum(i32) {
    NONE = 0,
    READONLY = 1,
    DISABLED = 2,
    FOCUSED = 3,
};
pub const CPFIS_NONE = CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE.NONE;
pub const CPFIS_READONLY = CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE.READONLY;
pub const CPFIS_DISABLED = CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE.DISABLED;
pub const CPFIS_FOCUSED = CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE.FOCUSED;

pub const CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR = extern struct {
    dwFieldID: u32,
    cpft: CREDENTIAL_PROVIDER_FIELD_TYPE,
    pszLabel: ?PWSTR,
    guidFieldType: Guid,
};

pub const CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE = enum(i32) {
    NO_CREDENTIAL_NOT_FINISHED = 0,
    NO_CREDENTIAL_FINISHED = 1,
    RETURN_CREDENTIAL_FINISHED = 2,
    RETURN_NO_CREDENTIAL_FINISHED = 3,
};
pub const CPGSR_NO_CREDENTIAL_NOT_FINISHED = CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE.NO_CREDENTIAL_NOT_FINISHED;
pub const CPGSR_NO_CREDENTIAL_FINISHED = CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE.NO_CREDENTIAL_FINISHED;
pub const CPGSR_RETURN_CREDENTIAL_FINISHED = CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE.RETURN_CREDENTIAL_FINISHED;
pub const CPGSR_RETURN_NO_CREDENTIAL_FINISHED = CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE.RETURN_NO_CREDENTIAL_FINISHED;

pub const CREDENTIAL_PROVIDER_STATUS_ICON = enum(i32) {
    NONE = 0,
    ERROR = 1,
    WARNING = 2,
    SUCCESS = 3,
};
pub const CPSI_NONE = CREDENTIAL_PROVIDER_STATUS_ICON.NONE;
pub const CPSI_ERROR = CREDENTIAL_PROVIDER_STATUS_ICON.ERROR;
pub const CPSI_WARNING = CREDENTIAL_PROVIDER_STATUS_ICON.WARNING;
pub const CPSI_SUCCESS = CREDENTIAL_PROVIDER_STATUS_ICON.SUCCESS;

pub const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION = extern struct {
    ulAuthenticationPackage: u32,
    clsidCredentialProvider: Guid,
    cbSerialization: u32,
    rgbSerialization: ?*u8,
};

pub const CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS = enum(i32) {
    NONE = 0,
    EMPTY_LOCAL = 1,
    EMPTY_CONNECTED = 2,
};
pub const CPAO_NONE = CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS.NONE;
pub const CPAO_EMPTY_LOCAL = CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS.EMPTY_LOCAL;
pub const CPAO_EMPTY_CONNECTED = CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS.EMPTY_CONNECTED;

pub const CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS = enum(i32) {
    NONE = 0,
    ENABLE_PASSWORD_REVEAL = 1,
    IS_EMAIL_ADDRESS = 2,
    ENABLE_TOUCH_KEYBOARD_AUTO_INVOKE = 4,
    NUMBERS_ONLY = 8,
    SHOW_ENGLISH_KEYBOARD = 16,
};
pub const CPCFO_NONE = CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS.NONE;
pub const CPCFO_ENABLE_PASSWORD_REVEAL = CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS.ENABLE_PASSWORD_REVEAL;
pub const CPCFO_IS_EMAIL_ADDRESS = CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS.IS_EMAIL_ADDRESS;
pub const CPCFO_ENABLE_TOUCH_KEYBOARD_AUTO_INVOKE = CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS.ENABLE_TOUCH_KEYBOARD_AUTO_INVOKE;
pub const CPCFO_NUMBERS_ONLY = CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS.NUMBERS_ONLY;
pub const CPCFO_SHOW_ENGLISH_KEYBOARD = CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS.SHOW_ENGLISH_KEYBOARD;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICredentialProviderCredential_Value = Guid.initString("63913a93-40c1-481a-818d-4072ff8c70cc");
pub const IID_ICredentialProviderCredential = &IID_ICredentialProviderCredential_Value;
pub const ICredentialProviderCredential = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Advise: *const fn(
            self: *const ICredentialProviderCredential,
            pcpce: ?*ICredentialProviderCredentialEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnAdvise: *const fn(
            self: *const ICredentialProviderCredential,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSelected: *const fn(
            self: *const ICredentialProviderCredential,
            pbAutoLogon: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDeselected: *const fn(
            self: *const ICredentialProviderCredential,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFieldState: *const fn(
            self: *const ICredentialProviderCredential,
            dwFieldID: u32,
            pcpfs: ?*CREDENTIAL_PROVIDER_FIELD_STATE,
            pcpfis: ?*CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringValue: *const fn(
            self: *const ICredentialProviderCredential,
            dwFieldID: u32,
            ppsz: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBitmapValue: *const fn(
            self: *const ICredentialProviderCredential,
            dwFieldID: u32,
            phbmp: ?*?HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCheckboxValue: *const fn(
            self: *const ICredentialProviderCredential,
            dwFieldID: u32,
            pbChecked: ?*BOOL,
            ppszLabel: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSubmitButtonValue: *const fn(
            self: *const ICredentialProviderCredential,
            dwFieldID: u32,
            pdwAdjacentTo: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComboBoxValueCount: *const fn(
            self: *const ICredentialProviderCredential,
            dwFieldID: u32,
            pcItems: ?*u32,
            pdwSelectedItem: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComboBoxValueAt: *const fn(
            self: *const ICredentialProviderCredential,
            dwFieldID: u32,
            dwItem: u32,
            ppszItem: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStringValue: *const fn(
            self: *const ICredentialProviderCredential,
            dwFieldID: u32,
            psz: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCheckboxValue: *const fn(
            self: *const ICredentialProviderCredential,
            dwFieldID: u32,
            bChecked: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetComboBoxSelectedValue: *const fn(
            self: *const ICredentialProviderCredential,
            dwFieldID: u32,
            dwSelectedItem: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommandLinkClicked: *const fn(
            self: *const ICredentialProviderCredential,
            dwFieldID: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSerialization: *const fn(
            self: *const ICredentialProviderCredential,
            pcpgsr: ?*CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE,
            pcpcs: ?*CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION,
            ppszOptionalStatusText: ?*?PWSTR,
            pcpsiOptionalStatusIcon: ?*CREDENTIAL_PROVIDER_STATUS_ICON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReportResult: *const fn(
            self: *const ICredentialProviderCredential,
            ntsStatus: NTSTATUS,
            ntsSubstatus: NTSTATUS,
            ppszOptionalStatusText: ?*?PWSTR,
            pcpsiOptionalStatusIcon: ?*CREDENTIAL_PROVIDER_STATUS_ICON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Advise(self: *const ICredentialProviderCredential, pcpce: ?*ICredentialProviderCredentialEvents) callconv(.Inline) HRESULT {
        return self.vtable.Advise(self, pcpce);
    }
    pub fn UnAdvise(self: *const ICredentialProviderCredential) callconv(.Inline) HRESULT {
        return self.vtable.UnAdvise(self);
    }
    pub fn SetSelected(self: *const ICredentialProviderCredential, pbAutoLogon: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetSelected(self, pbAutoLogon);
    }
    pub fn SetDeselected(self: *const ICredentialProviderCredential) callconv(.Inline) HRESULT {
        return self.vtable.SetDeselected(self);
    }
    pub fn GetFieldState(self: *const ICredentialProviderCredential, dwFieldID: u32, pcpfs: ?*CREDENTIAL_PROVIDER_FIELD_STATE, pcpfis: ?*CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE) callconv(.Inline) HRESULT {
        return self.vtable.GetFieldState(self, dwFieldID, pcpfs, pcpfis);
    }
    pub fn GetStringValue(self: *const ICredentialProviderCredential, dwFieldID: u32, ppsz: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetStringValue(self, dwFieldID, ppsz);
    }
    pub fn GetBitmapValue(self: *const ICredentialProviderCredential, dwFieldID: u32, phbmp: ?*?HBITMAP) callconv(.Inline) HRESULT {
        return self.vtable.GetBitmapValue(self, dwFieldID, phbmp);
    }
    pub fn GetCheckboxValue(self: *const ICredentialProviderCredential, dwFieldID: u32, pbChecked: ?*BOOL, ppszLabel: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetCheckboxValue(self, dwFieldID, pbChecked, ppszLabel);
    }
    pub fn GetSubmitButtonValue(self: *const ICredentialProviderCredential, dwFieldID: u32, pdwAdjacentTo: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetSubmitButtonValue(self, dwFieldID, pdwAdjacentTo);
    }
    pub fn GetComboBoxValueCount(self: *const ICredentialProviderCredential, dwFieldID: u32, pcItems: ?*u32, pdwSelectedItem: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetComboBoxValueCount(self, dwFieldID, pcItems, pdwSelectedItem);
    }
    pub fn GetComboBoxValueAt(self: *const ICredentialProviderCredential, dwFieldID: u32, dwItem: u32, ppszItem: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetComboBoxValueAt(self, dwFieldID, dwItem, ppszItem);
    }
    pub fn SetStringValue(self: *const ICredentialProviderCredential, dwFieldID: u32, psz: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetStringValue(self, dwFieldID, psz);
    }
    pub fn SetCheckboxValue(self: *const ICredentialProviderCredential, dwFieldID: u32, bChecked: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetCheckboxValue(self, dwFieldID, bChecked);
    }
    pub fn SetComboBoxSelectedValue(self: *const ICredentialProviderCredential, dwFieldID: u32, dwSelectedItem: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetComboBoxSelectedValue(self, dwFieldID, dwSelectedItem);
    }
    pub fn CommandLinkClicked(self: *const ICredentialProviderCredential, dwFieldID: u32) callconv(.Inline) HRESULT {
        return self.vtable.CommandLinkClicked(self, dwFieldID);
    }
    pub fn GetSerialization(self: *const ICredentialProviderCredential, pcpgsr: ?*CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE, pcpcs: ?*CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION, ppszOptionalStatusText: ?*?PWSTR, pcpsiOptionalStatusIcon: ?*CREDENTIAL_PROVIDER_STATUS_ICON) callconv(.Inline) HRESULT {
        return self.vtable.GetSerialization(self, pcpgsr, pcpcs, ppszOptionalStatusText, pcpsiOptionalStatusIcon);
    }
    pub fn ReportResult(self: *const ICredentialProviderCredential, ntsStatus: NTSTATUS, ntsSubstatus: NTSTATUS, ppszOptionalStatusText: ?*?PWSTR, pcpsiOptionalStatusIcon: ?*CREDENTIAL_PROVIDER_STATUS_ICON) callconv(.Inline) HRESULT {
        return self.vtable.ReportResult(self, ntsStatus, ntsSubstatus, ppszOptionalStatusText, pcpsiOptionalStatusIcon);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IQueryContinueWithStatus_Value = Guid.initString("9090be5b-502b-41fb-bccc-0049a6c7254b");
pub const IID_IQueryContinueWithStatus = &IID_IQueryContinueWithStatus_Value;
pub const IQueryContinueWithStatus = extern union {
    pub const VTable = extern struct {
        base: IQueryContinue.VTable,
        SetStatusMessage: *const fn(
            self: *const IQueryContinueWithStatus,
            psz: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IQueryContinue: IQueryContinue,
    IUnknown: IUnknown,
    pub fn SetStatusMessage(self: *const IQueryContinueWithStatus, psz: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetStatusMessage(self, psz);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IConnectableCredentialProviderCredential_Value = Guid.initString("9387928b-ac75-4bf9-8ab2-2b93c4a55290");
pub const IID_IConnectableCredentialProviderCredential = &IID_IConnectableCredentialProviderCredential_Value;
pub const IConnectableCredentialProviderCredential = extern union {
    pub const VTable = extern struct {
        base: ICredentialProviderCredential.VTable,
        Connect: *const fn(
            self: *const IConnectableCredentialProviderCredential,
            pqcws: ?*IQueryContinueWithStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: *const fn(
            self: *const IConnectableCredentialProviderCredential,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICredentialProviderCredential: ICredentialProviderCredential,
    IUnknown: IUnknown,
    pub fn Connect(self: *const IConnectableCredentialProviderCredential, pqcws: ?*IQueryContinueWithStatus) callconv(.Inline) HRESULT {
        return self.vtable.Connect(self, pqcws);
    }
    pub fn Disconnect(self: *const IConnectableCredentialProviderCredential) callconv(.Inline) HRESULT {
        return self.vtable.Disconnect(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICredentialProviderCredentialEvents_Value = Guid.initString("fa6fa76b-66b7-4b11-95f1-86171118e816");
pub const IID_ICredentialProviderCredentialEvents = &IID_ICredentialProviderCredentialEvents_Value;
pub const ICredentialProviderCredentialEvents = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetFieldState: *const fn(
            self: *const ICredentialProviderCredentialEvents,
            pcpc: ?*ICredentialProviderCredential,
            dwFieldID: u32,
            cpfs: CREDENTIAL_PROVIDER_FIELD_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFieldInteractiveState: *const fn(
            self: *const ICredentialProviderCredentialEvents,
            pcpc: ?*ICredentialProviderCredential,
            dwFieldID: u32,
            cpfis: CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFieldString: *const fn(
            self: *const ICredentialProviderCredentialEvents,
            pcpc: ?*ICredentialProviderCredential,
            dwFieldID: u32,
            psz: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFieldCheckbox: *const fn(
            self: *const ICredentialProviderCredentialEvents,
            pcpc: ?*ICredentialProviderCredential,
            dwFieldID: u32,
            bChecked: BOOL,
            pszLabel: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFieldBitmap: *const fn(
            self: *const ICredentialProviderCredentialEvents,
            pcpc: ?*ICredentialProviderCredential,
            dwFieldID: u32,
            hbmp: ?HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFieldComboBoxSelectedItem: *const fn(
            self: *const ICredentialProviderCredentialEvents,
            pcpc: ?*ICredentialProviderCredential,
            dwFieldID: u32,
            dwSelectedItem: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteFieldComboBoxItem: *const fn(
            self: *const ICredentialProviderCredentialEvents,
            pcpc: ?*ICredentialProviderCredential,
            dwFieldID: u32,
            dwItem: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AppendFieldComboBoxItem: *const fn(
            self: *const ICredentialProviderCredentialEvents,
            pcpc: ?*ICredentialProviderCredential,
            dwFieldID: u32,
            pszItem: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFieldSubmitButton: *const fn(
            self: *const ICredentialProviderCredentialEvents,
            pcpc: ?*ICredentialProviderCredential,
            dwFieldID: u32,
            dwAdjacentTo: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCreatingWindow: *const fn(
            self: *const ICredentialProviderCredentialEvents,
            phwndOwner: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetFieldState(self: *const ICredentialProviderCredentialEvents, pcpc: ?*ICredentialProviderCredential, dwFieldID: u32, cpfs: CREDENTIAL_PROVIDER_FIELD_STATE) callconv(.Inline) HRESULT {
        return self.vtable.SetFieldState(self, pcpc, dwFieldID, cpfs);
    }
    pub fn SetFieldInteractiveState(self: *const ICredentialProviderCredentialEvents, pcpc: ?*ICredentialProviderCredential, dwFieldID: u32, cpfis: CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE) callconv(.Inline) HRESULT {
        return self.vtable.SetFieldInteractiveState(self, pcpc, dwFieldID, cpfis);
    }
    pub fn SetFieldString(self: *const ICredentialProviderCredentialEvents, pcpc: ?*ICredentialProviderCredential, dwFieldID: u32, psz: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetFieldString(self, pcpc, dwFieldID, psz);
    }
    pub fn SetFieldCheckbox(self: *const ICredentialProviderCredentialEvents, pcpc: ?*ICredentialProviderCredential, dwFieldID: u32, bChecked: BOOL, pszLabel: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetFieldCheckbox(self, pcpc, dwFieldID, bChecked, pszLabel);
    }
    pub fn SetFieldBitmap(self: *const ICredentialProviderCredentialEvents, pcpc: ?*ICredentialProviderCredential, dwFieldID: u32, hbmp: ?HBITMAP) callconv(.Inline) HRESULT {
        return self.vtable.SetFieldBitmap(self, pcpc, dwFieldID, hbmp);
    }
    pub fn SetFieldComboBoxSelectedItem(self: *const ICredentialProviderCredentialEvents, pcpc: ?*ICredentialProviderCredential, dwFieldID: u32, dwSelectedItem: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetFieldComboBoxSelectedItem(self, pcpc, dwFieldID, dwSelectedItem);
    }
    pub fn DeleteFieldComboBoxItem(self: *const ICredentialProviderCredentialEvents, pcpc: ?*ICredentialProviderCredential, dwFieldID: u32, dwItem: u32) callconv(.Inline) HRESULT {
        return self.vtable.DeleteFieldComboBoxItem(self, pcpc, dwFieldID, dwItem);
    }
    pub fn AppendFieldComboBoxItem(self: *const ICredentialProviderCredentialEvents, pcpc: ?*ICredentialProviderCredential, dwFieldID: u32, pszItem: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.AppendFieldComboBoxItem(self, pcpc, dwFieldID, pszItem);
    }
    pub fn SetFieldSubmitButton(self: *const ICredentialProviderCredentialEvents, pcpc: ?*ICredentialProviderCredential, dwFieldID: u32, dwAdjacentTo: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetFieldSubmitButton(self, pcpc, dwFieldID, dwAdjacentTo);
    }
    pub fn OnCreatingWindow(self: *const ICredentialProviderCredentialEvents, phwndOwner: ?*?HWND) callconv(.Inline) HRESULT {
        return self.vtable.OnCreatingWindow(self, phwndOwner);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICredentialProvider_Value = Guid.initString("d27c3481-5a1c-45b2-8aaa-c20ebbe8229e");
pub const IID_ICredentialProvider = &IID_ICredentialProvider_Value;
pub const ICredentialProvider = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetUsageScenario: *const fn(
            self: *const ICredentialProvider,
            cpus: CREDENTIAL_PROVIDER_USAGE_SCENARIO,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSerialization: *const fn(
            self: *const ICredentialProvider,
            pcpcs: ?*const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Advise: *const fn(
            self: *const ICredentialProvider,
            pcpe: ?*ICredentialProviderEvents,
            upAdviseContext: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnAdvise: *const fn(
            self: *const ICredentialProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFieldDescriptorCount: *const fn(
            self: *const ICredentialProvider,
            pdwCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFieldDescriptorAt: *const fn(
            self: *const ICredentialProvider,
            dwIndex: u32,
            ppcpfd: ?*?*CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCredentialCount: *const fn(
            self: *const ICredentialProvider,
            pdwCount: ?*u32,
            pdwDefault: ?*u32,
            pbAutoLogonWithDefault: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCredentialAt: *const fn(
            self: *const ICredentialProvider,
            dwIndex: u32,
            ppcpc: **ICredentialProviderCredential,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetUsageScenario(self: *const ICredentialProvider, cpus: CREDENTIAL_PROVIDER_USAGE_SCENARIO, dwFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetUsageScenario(self, cpus, dwFlags);
    }
    pub fn SetSerialization(self: *const ICredentialProvider, pcpcs: ?*const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION) callconv(.Inline) HRESULT {
        return self.vtable.SetSerialization(self, pcpcs);
    }
    pub fn Advise(self: *const ICredentialProvider, pcpe: ?*ICredentialProviderEvents, upAdviseContext: usize) callconv(.Inline) HRESULT {
        return self.vtable.Advise(self, pcpe, upAdviseContext);
    }
    pub fn UnAdvise(self: *const ICredentialProvider) callconv(.Inline) HRESULT {
        return self.vtable.UnAdvise(self);
    }
    pub fn GetFieldDescriptorCount(self: *const ICredentialProvider, pdwCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetFieldDescriptorCount(self, pdwCount);
    }
    pub fn GetFieldDescriptorAt(self: *const ICredentialProvider, dwIndex: u32, ppcpfd: ?*?*CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR) callconv(.Inline) HRESULT {
        return self.vtable.GetFieldDescriptorAt(self, dwIndex, ppcpfd);
    }
    pub fn GetCredentialCount(self: *const ICredentialProvider, pdwCount: ?*u32, pdwDefault: ?*u32, pbAutoLogonWithDefault: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.GetCredentialCount(self, pdwCount, pdwDefault, pbAutoLogonWithDefault);
    }
    pub fn GetCredentialAt(self: *const ICredentialProvider, dwIndex: u32, ppcpc: **ICredentialProviderCredential) callconv(.Inline) HRESULT {
        return self.vtable.GetCredentialAt(self, dwIndex, ppcpc);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICredentialProviderEvents_Value = Guid.initString("34201e5a-a787-41a3-a5a4-bd6dcf2a854e");
pub const IID_ICredentialProviderEvents = &IID_ICredentialProviderEvents_Value;
pub const ICredentialProviderEvents = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CredentialsChanged: *const fn(
            self: *const ICredentialProviderEvents,
            upAdviseContext: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CredentialsChanged(self: *const ICredentialProviderEvents, upAdviseContext: usize) callconv(.Inline) HRESULT {
        return self.vtable.CredentialsChanged(self, upAdviseContext);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICredentialProviderFilter_Value = Guid.initString("a5da53f9-d475-4080-a120-910c4a739880");
pub const IID_ICredentialProviderFilter = &IID_ICredentialProviderFilter_Value;
pub const ICredentialProviderFilter = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Filter: *const fn(
            self: *const ICredentialProviderFilter,
            cpus: CREDENTIAL_PROVIDER_USAGE_SCENARIO,
            dwFlags: u32,
            rgclsidProviders: [*]Guid,
            rgbAllow: [*]BOOL,
            cProviders: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateRemoteCredential: *const fn(
            self: *const ICredentialProviderFilter,
            pcpcsIn: ?*const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION,
            pcpcsOut: ?*CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Filter(self: *const ICredentialProviderFilter, cpus: CREDENTIAL_PROVIDER_USAGE_SCENARIO, dwFlags: u32, rgclsidProviders: [*]Guid, rgbAllow: [*]BOOL, cProviders: u32) callconv(.Inline) HRESULT {
        return self.vtable.Filter(self, cpus, dwFlags, rgclsidProviders, rgbAllow, cProviders);
    }
    pub fn UpdateRemoteCredential(self: *const ICredentialProviderFilter, pcpcsIn: ?*const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION, pcpcsOut: ?*CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION) callconv(.Inline) HRESULT {
        return self.vtable.UpdateRemoteCredential(self, pcpcsIn, pcpcsOut);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ICredentialProviderCredential2_Value = Guid.initString("fd672c54-40ea-4d6e-9b49-cfb1a7507bd7");
pub const IID_ICredentialProviderCredential2 = &IID_ICredentialProviderCredential2_Value;
pub const ICredentialProviderCredential2 = extern union {
    pub const VTable = extern struct {
        base: ICredentialProviderCredential.VTable,
        GetUserSid: *const fn(
            self: *const ICredentialProviderCredential2,
            sid: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICredentialProviderCredential: ICredentialProviderCredential,
    IUnknown: IUnknown,
    pub fn GetUserSid(self: *const ICredentialProviderCredential2, sid: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetUserSid(self, sid);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ICredentialProviderCredentialWithFieldOptions_Value = Guid.initString("dbc6fb30-c843-49e3-a645-573e6f39446a");
pub const IID_ICredentialProviderCredentialWithFieldOptions = &IID_ICredentialProviderCredentialWithFieldOptions_Value;
pub const ICredentialProviderCredentialWithFieldOptions = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFieldOptions: *const fn(
            self: *const ICredentialProviderCredentialWithFieldOptions,
            fieldID: u32,
            options: ?*CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetFieldOptions(self: *const ICredentialProviderCredentialWithFieldOptions, fieldID: u32, options: ?*CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS) callconv(.Inline) HRESULT {
        return self.vtable.GetFieldOptions(self, fieldID, options);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ICredentialProviderCredentialEvents2_Value = Guid.initString("b53c00b6-9922-4b78-b1f4-ddfe774dc39b");
pub const IID_ICredentialProviderCredentialEvents2 = &IID_ICredentialProviderCredentialEvents2_Value;
pub const ICredentialProviderCredentialEvents2 = extern union {
    pub const VTable = extern struct {
        base: ICredentialProviderCredentialEvents.VTable,
        BeginFieldUpdates: *const fn(
            self: *const ICredentialProviderCredentialEvents2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndFieldUpdates: *const fn(
            self: *const ICredentialProviderCredentialEvents2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFieldOptions: *const fn(
            self: *const ICredentialProviderCredentialEvents2,
            credential: ?*ICredentialProviderCredential,
            fieldID: u32,
            options: CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICredentialProviderCredentialEvents: ICredentialProviderCredentialEvents,
    IUnknown: IUnknown,
    pub fn BeginFieldUpdates(self: *const ICredentialProviderCredentialEvents2) callconv(.Inline) HRESULT {
        return self.vtable.BeginFieldUpdates(self);
    }
    pub fn EndFieldUpdates(self: *const ICredentialProviderCredentialEvents2) callconv(.Inline) HRESULT {
        return self.vtable.EndFieldUpdates(self);
    }
    pub fn SetFieldOptions(self: *const ICredentialProviderCredentialEvents2, credential: ?*ICredentialProviderCredential, fieldID: u32, options: CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS) callconv(.Inline) HRESULT {
        return self.vtable.SetFieldOptions(self, credential, fieldID, options);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ICredentialProviderUser_Value = Guid.initString("13793285-3ea6-40fd-b420-15f47da41fbb");
pub const IID_ICredentialProviderUser = &IID_ICredentialProviderUser_Value;
pub const ICredentialProviderUser = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSid: *const fn(
            self: *const ICredentialProviderUser,
            sid: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProviderID: *const fn(
            self: *const ICredentialProviderUser,
            providerID: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringValue: *const fn(
            self: *const ICredentialProviderUser,
            key: ?*const PROPERTYKEY,
            stringValue: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn(
            self: *const ICredentialProviderUser,
            key: ?*const PROPERTYKEY,
            value: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetSid(self: *const ICredentialProviderUser, sid: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetSid(self, sid);
    }
    pub fn GetProviderID(self: *const ICredentialProviderUser, providerID: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetProviderID(self, providerID);
    }
    pub fn GetStringValue(self: *const ICredentialProviderUser, key: ?*const PROPERTYKEY, stringValue: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetStringValue(self, key, stringValue);
    }
    pub fn GetValue(self: *const ICredentialProviderUser, key: ?*const PROPERTYKEY, value: ?*PROPVARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetValue(self, key, value);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ICredentialProviderUserArray_Value = Guid.initString("90c119ae-0f18-4520-a1f1-114366a40fe8");
pub const IID_ICredentialProviderUserArray = &IID_ICredentialProviderUserArray_Value;
pub const ICredentialProviderUserArray = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetProviderFilter: *const fn(
            self: *const ICredentialProviderUserArray,
            guidProviderToFilterTo: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAccountOptions: *const fn(
            self: *const ICredentialProviderUserArray,
            credentialProviderAccountOptions: ?*CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn(
            self: *const ICredentialProviderUserArray,
            userCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn(
            self: *const ICredentialProviderUserArray,
            userIndex: u32,
            user: **ICredentialProviderUser,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetProviderFilter(self: *const ICredentialProviderUserArray, guidProviderToFilterTo: ?*const Guid) callconv(.Inline) HRESULT {
        return self.vtable.SetProviderFilter(self, guidProviderToFilterTo);
    }
    pub fn GetAccountOptions(self: *const ICredentialProviderUserArray, credentialProviderAccountOptions: ?*CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS) callconv(.Inline) HRESULT {
        return self.vtable.GetAccountOptions(self, credentialProviderAccountOptions);
    }
    pub fn GetCount(self: *const ICredentialProviderUserArray, userCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCount(self, userCount);
    }
    pub fn GetAt(self: *const ICredentialProviderUserArray, userIndex: u32, user: **ICredentialProviderUser) callconv(.Inline) HRESULT {
        return self.vtable.GetAt(self, userIndex, user);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ICredentialProviderSetUserArray_Value = Guid.initString("095c1484-1c0c-4388-9c6d-500e61bf84bd");
pub const IID_ICredentialProviderSetUserArray = &IID_ICredentialProviderSetUserArray_Value;
pub const ICredentialProviderSetUserArray = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetUserArray: *const fn(
            self: *const ICredentialProviderSetUserArray,
            users: ?*ICredentialProviderUserArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetUserArray(self: *const ICredentialProviderSetUserArray, users: ?*ICredentialProviderUserArray) callconv(.Inline) HRESULT {
        return self.vtable.SetUserArray(self, users);
    }
};

const CLSID_SyncMgrClient_Value = Guid.initString("1202db60-1dac-42c5-aed5-1abdd432248e");
pub const CLSID_SyncMgrClient = &CLSID_SyncMgrClient_Value;

const CLSID_SyncMgrControl_Value = Guid.initString("1a1f4206-0688-4e7f-be03-d82ec69df9a5");
pub const CLSID_SyncMgrControl = &CLSID_SyncMgrControl_Value;

const CLSID_SyncMgrScheduleWizard_Value = Guid.initString("8d8b8e30-c451-421b-8553-d2976afa648c");
pub const CLSID_SyncMgrScheduleWizard = &CLSID_SyncMgrScheduleWizard_Value;

const CLSID_SyncMgrFolder_Value = Guid.initString("9c73f5e5-7ae7-4e32-a8e8-8d23b85255bf");
pub const CLSID_SyncMgrFolder = &CLSID_SyncMgrFolder_Value;

const CLSID_SyncSetupFolder_Value = Guid.initString("2e9e59c0-b437-4981-a647-9c34b9b90891");
pub const CLSID_SyncSetupFolder = &CLSID_SyncSetupFolder_Value;

const CLSID_ConflictFolder_Value = Guid.initString("289978ac-a101-4341-a817-21eba7fd046d");
pub const CLSID_ConflictFolder = &CLSID_ConflictFolder_Value;

const CLSID_SyncResultsFolder_Value = Guid.initString("71d99464-3b6b-475c-b241-e15883207529");
pub const CLSID_SyncResultsFolder = &CLSID_SyncResultsFolder_Value;

const CLSID_SimpleConflictPresenter_Value = Guid.initString("7a0f6ab7-ed84-46b6-b47e-02aa159a152b");
pub const CLSID_SimpleConflictPresenter = &CLSID_SimpleConflictPresenter_Value;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrHandlerCollection_Value = Guid.initString("a7f337a3-d20b-45cb-9ed7-87d094ca5045");
pub const IID_ISyncMgrHandlerCollection = &IID_ISyncMgrHandlerCollection_Value;
pub const ISyncMgrHandlerCollection = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetHandlerEnumerator: *const fn(
            self: *const ISyncMgrHandlerCollection,
            ppenum: ?*?*IEnumString,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindToHandler: *const fn(
            self: *const ISyncMgrHandlerCollection,
            pszHandlerID: ?[*:0]const u16,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetHandlerEnumerator(self: *const ISyncMgrHandlerCollection, ppenum: ?*?*IEnumString) callconv(.Inline) HRESULT {
        return self.vtable.GetHandlerEnumerator(self, ppenum);
    }
    pub fn BindToHandler(self: *const ISyncMgrHandlerCollection, pszHandlerID: ?[*:0]const u16, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.BindToHandler(self, pszHandlerID, riid, ppv);
    }
};

pub const SYNCMGR_HANDLER_CAPABILITIES = enum(i32) {
    NONE = 0,
    PROVIDES_ICON = 1,
    EVENT_STORE = 2,
    CONFLICT_STORE = 4,
    SUPPORTS_CONCURRENT_SESSIONS = 16,
    CAN_BROWSE_CONTENT = 65536,
    CAN_SHOW_SCHEDULE = 131072,
    QUERY_BEFORE_ACTIVATE = 1048576,
    QUERY_BEFORE_DEACTIVATE = 2097152,
    QUERY_BEFORE_ENABLE = 4194304,
    QUERY_BEFORE_DISABLE = 8388608,
    VALID_MASK = 15925271,
};
pub const SYNCMGR_HCM_NONE = SYNCMGR_HANDLER_CAPABILITIES.NONE;
pub const SYNCMGR_HCM_PROVIDES_ICON = SYNCMGR_HANDLER_CAPABILITIES.PROVIDES_ICON;
pub const SYNCMGR_HCM_EVENT_STORE = SYNCMGR_HANDLER_CAPABILITIES.EVENT_STORE;
pub const SYNCMGR_HCM_CONFLICT_STORE = SYNCMGR_HANDLER_CAPABILITIES.CONFLICT_STORE;
pub const SYNCMGR_HCM_SUPPORTS_CONCURRENT_SESSIONS = SYNCMGR_HANDLER_CAPABILITIES.SUPPORTS_CONCURRENT_SESSIONS;
pub const SYNCMGR_HCM_CAN_BROWSE_CONTENT = SYNCMGR_HANDLER_CAPABILITIES.CAN_BROWSE_CONTENT;
pub const SYNCMGR_HCM_CAN_SHOW_SCHEDULE = SYNCMGR_HANDLER_CAPABILITIES.CAN_SHOW_SCHEDULE;
pub const SYNCMGR_HCM_QUERY_BEFORE_ACTIVATE = SYNCMGR_HANDLER_CAPABILITIES.QUERY_BEFORE_ACTIVATE;
pub const SYNCMGR_HCM_QUERY_BEFORE_DEACTIVATE = SYNCMGR_HANDLER_CAPABILITIES.QUERY_BEFORE_DEACTIVATE;
pub const SYNCMGR_HCM_QUERY_BEFORE_ENABLE = SYNCMGR_HANDLER_CAPABILITIES.QUERY_BEFORE_ENABLE;
pub const SYNCMGR_HCM_QUERY_BEFORE_DISABLE = SYNCMGR_HANDLER_CAPABILITIES.QUERY_BEFORE_DISABLE;
pub const SYNCMGR_HCM_VALID_MASK = SYNCMGR_HANDLER_CAPABILITIES.VALID_MASK;

pub const SYNCMGR_HANDLER_POLICIES = enum(i32) {
    NONE = 0,
    PREVENT_ACTIVATE = 1,
    PREVENT_DEACTIVATE = 2,
    PREVENT_ENABLE = 4,
    PREVENT_DISABLE = 8,
    PREVENT_START_SYNC = 16,
    PREVENT_STOP_SYNC = 32,
    DISABLE_ENABLE = 256,
    DISABLE_DISABLE = 512,
    DISABLE_START_SYNC = 1024,
    DISABLE_STOP_SYNC = 2048,
    DISABLE_BROWSE = 4096,
    DISABLE_SCHEDULE = 8192,
    HIDDEN_BY_DEFAULT = 65536,
    BACKGROUND_SYNC_ONLY = 48,
    VALID_MASK = 77631,
};
pub const SYNCMGR_HPM_NONE = SYNCMGR_HANDLER_POLICIES.NONE;
pub const SYNCMGR_HPM_PREVENT_ACTIVATE = SYNCMGR_HANDLER_POLICIES.PREVENT_ACTIVATE;
pub const SYNCMGR_HPM_PREVENT_DEACTIVATE = SYNCMGR_HANDLER_POLICIES.PREVENT_DEACTIVATE;
pub const SYNCMGR_HPM_PREVENT_ENABLE = SYNCMGR_HANDLER_POLICIES.PREVENT_ENABLE;
pub const SYNCMGR_HPM_PREVENT_DISABLE = SYNCMGR_HANDLER_POLICIES.PREVENT_DISABLE;
pub const SYNCMGR_HPM_PREVENT_START_SYNC = SYNCMGR_HANDLER_POLICIES.PREVENT_START_SYNC;
pub const SYNCMGR_HPM_PREVENT_STOP_SYNC = SYNCMGR_HANDLER_POLICIES.PREVENT_STOP_SYNC;
pub const SYNCMGR_HPM_DISABLE_ENABLE = SYNCMGR_HANDLER_POLICIES.DISABLE_ENABLE;
pub const SYNCMGR_HPM_DISABLE_DISABLE = SYNCMGR_HANDLER_POLICIES.DISABLE_DISABLE;
pub const SYNCMGR_HPM_DISABLE_START_SYNC = SYNCMGR_HANDLER_POLICIES.DISABLE_START_SYNC;
pub const SYNCMGR_HPM_DISABLE_STOP_SYNC = SYNCMGR_HANDLER_POLICIES.DISABLE_STOP_SYNC;
pub const SYNCMGR_HPM_DISABLE_BROWSE = SYNCMGR_HANDLER_POLICIES.DISABLE_BROWSE;
pub const SYNCMGR_HPM_DISABLE_SCHEDULE = SYNCMGR_HANDLER_POLICIES.DISABLE_SCHEDULE;
pub const SYNCMGR_HPM_HIDDEN_BY_DEFAULT = SYNCMGR_HANDLER_POLICIES.HIDDEN_BY_DEFAULT;
pub const SYNCMGR_HPM_BACKGROUND_SYNC_ONLY = SYNCMGR_HANDLER_POLICIES.BACKGROUND_SYNC_ONLY;
pub const SYNCMGR_HPM_VALID_MASK = SYNCMGR_HANDLER_POLICIES.VALID_MASK;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrHandler_Value = Guid.initString("04ec2e43-ac77-49f9-9b98-0307ef7a72a2");
pub const IID_ISyncMgrHandler = &IID_ISyncMgrHandler_Value;
pub const ISyncMgrHandler = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetName: *const fn(
            self: *const ISyncMgrHandler,
            ppszName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHandlerInfo: *const fn(
            self: *const ISyncMgrHandler,
            ppHandlerInfo: ?*?*ISyncMgrHandlerInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObject: *const fn(
            self: *const ISyncMgrHandler,
            rguidObjectID: ?*const Guid,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCapabilities: *const fn(
            self: *const ISyncMgrHandler,
            pmCapabilities: ?*SYNCMGR_HANDLER_CAPABILITIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicies: *const fn(
            self: *const ISyncMgrHandler,
            pmPolicies: ?*SYNCMGR_HANDLER_POLICIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Activate: *const fn(
            self: *const ISyncMgrHandler,
            fActivate: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enable: *const fn(
            self: *const ISyncMgrHandler,
            fEnable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Synchronize: *const fn(
            self: *const ISyncMgrHandler,
            ppszItemIDs: [*]?PWSTR,
            cItems: u32,
            hwndOwner: ?HWND,
            pSessionCreator: ?*ISyncMgrSessionCreator,
            punk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetName(self: *const ISyncMgrHandler, ppszName: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetName(self, ppszName);
    }
    pub fn GetHandlerInfo(self: *const ISyncMgrHandler, ppHandlerInfo: ?*?*ISyncMgrHandlerInfo) callconv(.Inline) HRESULT {
        return self.vtable.GetHandlerInfo(self, ppHandlerInfo);
    }
    pub fn GetObject(self: *const ISyncMgrHandler, rguidObjectID: ?*const Guid, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetObject(self, rguidObjectID, riid, ppv);
    }
    pub fn GetCapabilities(self: *const ISyncMgrHandler, pmCapabilities: ?*SYNCMGR_HANDLER_CAPABILITIES) callconv(.Inline) HRESULT {
        return self.vtable.GetCapabilities(self, pmCapabilities);
    }
    pub fn GetPolicies(self: *const ISyncMgrHandler, pmPolicies: ?*SYNCMGR_HANDLER_POLICIES) callconv(.Inline) HRESULT {
        return self.vtable.GetPolicies(self, pmPolicies);
    }
    pub fn Activate(self: *const ISyncMgrHandler, fActivate: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.Activate(self, fActivate);
    }
    pub fn Enable(self: *const ISyncMgrHandler, fEnable: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.Enable(self, fEnable);
    }
    pub fn Synchronize(self: *const ISyncMgrHandler, ppszItemIDs: [*]?PWSTR, cItems: u32, hwndOwner: ?HWND, pSessionCreator: ?*ISyncMgrSessionCreator, punk: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.Synchronize(self, ppszItemIDs, cItems, hwndOwner, pSessionCreator, punk);
    }
};

pub const SYNCMGR_HANDLER_TYPE = enum(i32) {
    UNSPECIFIED = 0,
    APPLICATION = 1,
    DEVICE = 2,
    FOLDER = 3,
    SERVICE = 4,
    COMPUTER = 5,
    pub const MIN = .UNSPECIFIED;
    pub const MAX = .COMPUTER;
};
pub const SYNCMGR_HT_UNSPECIFIED = SYNCMGR_HANDLER_TYPE.UNSPECIFIED;
pub const SYNCMGR_HT_APPLICATION = SYNCMGR_HANDLER_TYPE.APPLICATION;
pub const SYNCMGR_HT_DEVICE = SYNCMGR_HANDLER_TYPE.DEVICE;
pub const SYNCMGR_HT_FOLDER = SYNCMGR_HANDLER_TYPE.FOLDER;
pub const SYNCMGR_HT_SERVICE = SYNCMGR_HANDLER_TYPE.SERVICE;
pub const SYNCMGR_HT_COMPUTER = SYNCMGR_HANDLER_TYPE.COMPUTER;
pub const SYNCMGR_HT_MIN = SYNCMGR_HANDLER_TYPE.UNSPECIFIED;
pub const SYNCMGR_HT_MAX = SYNCMGR_HANDLER_TYPE.COMPUTER;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrHandlerInfo_Value = Guid.initString("4ff1d798-ecf7-4524-aa81-1e362a0aef3a");
pub const IID_ISyncMgrHandlerInfo = &IID_ISyncMgrHandlerInfo_Value;
pub const ISyncMgrHandlerInfo = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetType: *const fn(
            self: *const ISyncMgrHandlerInfo,
            pnType: ?*SYNCMGR_HANDLER_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTypeLabel: *const fn(
            self: *const ISyncMgrHandlerInfo,
            ppszTypeLabel: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComment: *const fn(
            self: *const ISyncMgrHandlerInfo,
            ppszComment: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastSyncTime: *const fn(
            self: *const ISyncMgrHandlerInfo,
            pftLastSync: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsActive: *const fn(
            self: *const ISyncMgrHandlerInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsEnabled: *const fn(
            self: *const ISyncMgrHandlerInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsConnected: *const fn(
            self: *const ISyncMgrHandlerInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetType(self: *const ISyncMgrHandlerInfo, pnType: ?*SYNCMGR_HANDLER_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.GetType(self, pnType);
    }
    pub fn GetTypeLabel(self: *const ISyncMgrHandlerInfo, ppszTypeLabel: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetTypeLabel(self, ppszTypeLabel);
    }
    pub fn GetComment(self: *const ISyncMgrHandlerInfo, ppszComment: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetComment(self, ppszComment);
    }
    pub fn GetLastSyncTime(self: *const ISyncMgrHandlerInfo, pftLastSync: ?*FILETIME) callconv(.Inline) HRESULT {
        return self.vtable.GetLastSyncTime(self, pftLastSync);
    }
    pub fn IsActive(self: *const ISyncMgrHandlerInfo) callconv(.Inline) HRESULT {
        return self.vtable.IsActive(self);
    }
    pub fn IsEnabled(self: *const ISyncMgrHandlerInfo) callconv(.Inline) HRESULT {
        return self.vtable.IsEnabled(self);
    }
    pub fn IsConnected(self: *const ISyncMgrHandlerInfo) callconv(.Inline) HRESULT {
        return self.vtable.IsConnected(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrSyncItemContainer_Value = Guid.initString("90701133-be32-4129-a65c-99e616cafff4");
pub const IID_ISyncMgrSyncItemContainer = &IID_ISyncMgrSyncItemContainer_Value;
pub const ISyncMgrSyncItemContainer = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSyncItem: *const fn(
            self: *const ISyncMgrSyncItemContainer,
            pszItemID: ?[*:0]const u16,
            ppItem: ?*?*ISyncMgrSyncItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSyncItemEnumerator: *const fn(
            self: *const ISyncMgrSyncItemContainer,
            ppenum: ?*?*IEnumSyncMgrSyncItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSyncItemCount: *const fn(
            self: *const ISyncMgrSyncItemContainer,
            pcItems: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetSyncItem(self: *const ISyncMgrSyncItemContainer, pszItemID: ?[*:0]const u16, ppItem: ?*?*ISyncMgrSyncItem) callconv(.Inline) HRESULT {
        return self.vtable.GetSyncItem(self, pszItemID, ppItem);
    }
    pub fn GetSyncItemEnumerator(self: *const ISyncMgrSyncItemContainer, ppenum: ?*?*IEnumSyncMgrSyncItems) callconv(.Inline) HRESULT {
        return self.vtable.GetSyncItemEnumerator(self, ppenum);
    }
    pub fn GetSyncItemCount(self: *const ISyncMgrSyncItemContainer, pcItems: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetSyncItemCount(self, pcItems);
    }
};

pub const SYNCMGR_ITEM_CAPABILITIES = enum(i32) {
    NONE = 0,
    PROVIDES_ICON = 1,
    EVENT_STORE = 2,
    CONFLICT_STORE = 4,
    CAN_DELETE = 16,
    CAN_BROWSE_CONTENT = 65536,
    QUERY_BEFORE_ENABLE = 1048576,
    QUERY_BEFORE_DISABLE = 2097152,
    QUERY_BEFORE_DELETE = 4194304,
    VALID_MASK = 7405591,
};
pub const SYNCMGR_ICM_NONE = SYNCMGR_ITEM_CAPABILITIES.NONE;
pub const SYNCMGR_ICM_PROVIDES_ICON = SYNCMGR_ITEM_CAPABILITIES.PROVIDES_ICON;
pub const SYNCMGR_ICM_EVENT_STORE = SYNCMGR_ITEM_CAPABILITIES.EVENT_STORE;
pub const SYNCMGR_ICM_CONFLICT_STORE = SYNCMGR_ITEM_CAPABILITIES.CONFLICT_STORE;
pub const SYNCMGR_ICM_CAN_DELETE = SYNCMGR_ITEM_CAPABILITIES.CAN_DELETE;
pub const SYNCMGR_ICM_CAN_BROWSE_CONTENT = SYNCMGR_ITEM_CAPABILITIES.CAN_BROWSE_CONTENT;
pub const SYNCMGR_ICM_QUERY_BEFORE_ENABLE = SYNCMGR_ITEM_CAPABILITIES.QUERY_BEFORE_ENABLE;
pub const SYNCMGR_ICM_QUERY_BEFORE_DISABLE = SYNCMGR_ITEM_CAPABILITIES.QUERY_BEFORE_DISABLE;
pub const SYNCMGR_ICM_QUERY_BEFORE_DELETE = SYNCMGR_ITEM_CAPABILITIES.QUERY_BEFORE_DELETE;
pub const SYNCMGR_ICM_VALID_MASK = SYNCMGR_ITEM_CAPABILITIES.VALID_MASK;

pub const SYNCMGR_ITEM_POLICIES = enum(i32) {
    NONE = 0,
    PREVENT_ENABLE = 1,
    PREVENT_DISABLE = 2,
    PREVENT_START_SYNC = 4,
    PREVENT_STOP_SYNC = 8,
    DISABLE_ENABLE = 16,
    DISABLE_DISABLE = 32,
    DISABLE_START_SYNC = 64,
    DISABLE_STOP_SYNC = 128,
    DISABLE_BROWSE = 256,
    DISABLE_DELETE = 512,
    HIDDEN_BY_DEFAULT = 65536,
    VALID_MASK = 66303,
};
pub const SYNCMGR_IPM_NONE = SYNCMGR_ITEM_POLICIES.NONE;
pub const SYNCMGR_IPM_PREVENT_ENABLE = SYNCMGR_ITEM_POLICIES.PREVENT_ENABLE;
pub const SYNCMGR_IPM_PREVENT_DISABLE = SYNCMGR_ITEM_POLICIES.PREVENT_DISABLE;
pub const SYNCMGR_IPM_PREVENT_START_SYNC = SYNCMGR_ITEM_POLICIES.PREVENT_START_SYNC;
pub const SYNCMGR_IPM_PREVENT_STOP_SYNC = SYNCMGR_ITEM_POLICIES.PREVENT_STOP_SYNC;
pub const SYNCMGR_IPM_DISABLE_ENABLE = SYNCMGR_ITEM_POLICIES.DISABLE_ENABLE;
pub const SYNCMGR_IPM_DISABLE_DISABLE = SYNCMGR_ITEM_POLICIES.DISABLE_DISABLE;
pub const SYNCMGR_IPM_DISABLE_START_SYNC = SYNCMGR_ITEM_POLICIES.DISABLE_START_SYNC;
pub const SYNCMGR_IPM_DISABLE_STOP_SYNC = SYNCMGR_ITEM_POLICIES.DISABLE_STOP_SYNC;
pub const SYNCMGR_IPM_DISABLE_BROWSE = SYNCMGR_ITEM_POLICIES.DISABLE_BROWSE;
pub const SYNCMGR_IPM_DISABLE_DELETE = SYNCMGR_ITEM_POLICIES.DISABLE_DELETE;
pub const SYNCMGR_IPM_HIDDEN_BY_DEFAULT = SYNCMGR_ITEM_POLICIES.HIDDEN_BY_DEFAULT;
pub const SYNCMGR_IPM_VALID_MASK = SYNCMGR_ITEM_POLICIES.VALID_MASK;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrSyncItem_Value = Guid.initString("b20b24ce-2593-4f04-bd8b-7ad6c45051cd");
pub const IID_ISyncMgrSyncItem = &IID_ISyncMgrSyncItem_Value;
pub const ISyncMgrSyncItem = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetItemID: *const fn(
            self: *const ISyncMgrSyncItem,
            ppszItemID: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn(
            self: *const ISyncMgrSyncItem,
            ppszName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemInfo: *const fn(
            self: *const ISyncMgrSyncItem,
            ppItemInfo: ?*?*ISyncMgrSyncItemInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObject: *const fn(
            self: *const ISyncMgrSyncItem,
            rguidObjectID: ?*const Guid,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCapabilities: *const fn(
            self: *const ISyncMgrSyncItem,
            pmCapabilities: ?*SYNCMGR_ITEM_CAPABILITIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicies: *const fn(
            self: *const ISyncMgrSyncItem,
            pmPolicies: ?*SYNCMGR_ITEM_POLICIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enable: *const fn(
            self: *const ISyncMgrSyncItem,
            fEnable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn(
            self: *const ISyncMgrSyncItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetItemID(self: *const ISyncMgrSyncItem, ppszItemID: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetItemID(self, ppszItemID);
    }
    pub fn GetName(self: *const ISyncMgrSyncItem, ppszName: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetName(self, ppszName);
    }
    pub fn GetItemInfo(self: *const ISyncMgrSyncItem, ppItemInfo: ?*?*ISyncMgrSyncItemInfo) callconv(.Inline) HRESULT {
        return self.vtable.GetItemInfo(self, ppItemInfo);
    }
    pub fn GetObject(self: *const ISyncMgrSyncItem, rguidObjectID: ?*const Guid, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetObject(self, rguidObjectID, riid, ppv);
    }
    pub fn GetCapabilities(self: *const ISyncMgrSyncItem, pmCapabilities: ?*SYNCMGR_ITEM_CAPABILITIES) callconv(.Inline) HRESULT {
        return self.vtable.GetCapabilities(self, pmCapabilities);
    }
    pub fn GetPolicies(self: *const ISyncMgrSyncItem, pmPolicies: ?*SYNCMGR_ITEM_POLICIES) callconv(.Inline) HRESULT {
        return self.vtable.GetPolicies(self, pmPolicies);
    }
    pub fn Enable(self: *const ISyncMgrSyncItem, fEnable: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.Enable(self, fEnable);
    }
    pub fn Delete(self: *const ISyncMgrSyncItem) callconv(.Inline) HRESULT {
        return self.vtable.Delete(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrSyncItemInfo_Value = Guid.initString("e7fd9502-be0c-4464-90a1-2b5277031232");
pub const IID_ISyncMgrSyncItemInfo = &IID_ISyncMgrSyncItemInfo_Value;
pub const ISyncMgrSyncItemInfo = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTypeLabel: *const fn(
            self: *const ISyncMgrSyncItemInfo,
            ppszTypeLabel: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComment: *const fn(
            self: *const ISyncMgrSyncItemInfo,
            ppszComment: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastSyncTime: *const fn(
            self: *const ISyncMgrSyncItemInfo,
            pftLastSync: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsEnabled: *const fn(
            self: *const ISyncMgrSyncItemInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsConnected: *const fn(
            self: *const ISyncMgrSyncItemInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetTypeLabel(self: *const ISyncMgrSyncItemInfo, ppszTypeLabel: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetTypeLabel(self, ppszTypeLabel);
    }
    pub fn GetComment(self: *const ISyncMgrSyncItemInfo, ppszComment: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetComment(self, ppszComment);
    }
    pub fn GetLastSyncTime(self: *const ISyncMgrSyncItemInfo, pftLastSync: ?*FILETIME) callconv(.Inline) HRESULT {
        return self.vtable.GetLastSyncTime(self, pftLastSync);
    }
    pub fn IsEnabled(self: *const ISyncMgrSyncItemInfo) callconv(.Inline) HRESULT {
        return self.vtable.IsEnabled(self);
    }
    pub fn IsConnected(self: *const ISyncMgrSyncItemInfo) callconv(.Inline) HRESULT {
        return self.vtable.IsConnected(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumSyncMgrSyncItems_Value = Guid.initString("54b3abf3-f085-4181-b546-e29c403c726b");
pub const IID_IEnumSyncMgrSyncItems = &IID_IEnumSyncMgrSyncItems_Value;
pub const IEnumSyncMgrSyncItems = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumSyncMgrSyncItems,
            celt: u32,
            rgelt: [*]?*ISyncMgrSyncItem,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumSyncMgrSyncItems,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumSyncMgrSyncItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumSyncMgrSyncItems,
            ppenum: ?*?*IEnumSyncMgrSyncItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumSyncMgrSyncItems, celt: u32, rgelt: [*]?*ISyncMgrSyncItem, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, celt, rgelt, pceltFetched);
    }
    pub fn Skip(self: *const IEnumSyncMgrSyncItems, celt: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumSyncMgrSyncItems) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumSyncMgrSyncItems, ppenum: ?*?*IEnumSyncMgrSyncItems) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppenum);
    }
};

pub const SYNCMGR_PROGRESS_STATUS = enum(i32) {
    UPDATING = 1,
    UPDATING_INDETERMINATE = 2,
    SUCCEEDED = 3,
    FAILED = 4,
    CANCELED = 5,
    DISCONNECTED = 6,
    pub const MAX = .DISCONNECTED;
};
pub const SYNCMGR_PS_UPDATING = SYNCMGR_PROGRESS_STATUS.UPDATING;
pub const SYNCMGR_PS_UPDATING_INDETERMINATE = SYNCMGR_PROGRESS_STATUS.UPDATING_INDETERMINATE;
pub const SYNCMGR_PS_SUCCEEDED = SYNCMGR_PROGRESS_STATUS.SUCCEEDED;
pub const SYNCMGR_PS_FAILED = SYNCMGR_PROGRESS_STATUS.FAILED;
pub const SYNCMGR_PS_CANCELED = SYNCMGR_PROGRESS_STATUS.CANCELED;
pub const SYNCMGR_PS_DISCONNECTED = SYNCMGR_PROGRESS_STATUS.DISCONNECTED;
pub const SYNCMGR_PS_MAX = SYNCMGR_PROGRESS_STATUS.DISCONNECTED;

pub const SYNCMGR_CANCEL_REQUEST = enum(i32) {
    NONE = 0,
    CANCEL_ITEM = 1,
    CANCEL_ALL = 2,
    pub const MAX = .CANCEL_ALL;
};
pub const SYNCMGR_CR_NONE = SYNCMGR_CANCEL_REQUEST.NONE;
pub const SYNCMGR_CR_CANCEL_ITEM = SYNCMGR_CANCEL_REQUEST.CANCEL_ITEM;
pub const SYNCMGR_CR_CANCEL_ALL = SYNCMGR_CANCEL_REQUEST.CANCEL_ALL;
pub const SYNCMGR_CR_MAX = SYNCMGR_CANCEL_REQUEST.CANCEL_ALL;

pub const SYNCMGR_EVENT_LEVEL = enum(i32) {
    INFORMATION = 1,
    WARNING = 2,
    ERROR = 3,
    pub const MAX = .ERROR;
};
pub const SYNCMGR_EL_INFORMATION = SYNCMGR_EVENT_LEVEL.INFORMATION;
pub const SYNCMGR_EL_WARNING = SYNCMGR_EVENT_LEVEL.WARNING;
pub const SYNCMGR_EL_ERROR = SYNCMGR_EVENT_LEVEL.ERROR;
pub const SYNCMGR_EL_MAX = SYNCMGR_EVENT_LEVEL.ERROR;

pub const SYNCMGR_EVENT_FLAGS = enum(i32) {
    NONE = 0,
    pub const VALID = .NONE;
};
pub const SYNCMGR_EF_NONE = SYNCMGR_EVENT_FLAGS.NONE;
pub const SYNCMGR_EF_VALID = SYNCMGR_EVENT_FLAGS.NONE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrSessionCreator_Value = Guid.initString("17f48517-f305-4321-a08d-b25a834918fd");
pub const IID_ISyncMgrSessionCreator = &IID_ISyncMgrSessionCreator_Value;
pub const ISyncMgrSessionCreator = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateSession: *const fn(
            self: *const ISyncMgrSessionCreator,
            pszHandlerID: ?[*:0]const u16,
            ppszItemIDs: [*]?PWSTR,
            cItems: u32,
            ppCallback: ?*?*ISyncMgrSyncCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateSession(self: *const ISyncMgrSessionCreator, pszHandlerID: ?[*:0]const u16, ppszItemIDs: [*]?PWSTR, cItems: u32, ppCallback: ?*?*ISyncMgrSyncCallback) callconv(.Inline) HRESULT {
        return self.vtable.CreateSession(self, pszHandlerID, ppszItemIDs, cItems, ppCallback);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrSyncCallback_Value = Guid.initString("884ccd87-b139-4937-a4ba-4f8e19513fbe");
pub const IID_ISyncMgrSyncCallback = &IID_ISyncMgrSyncCallback_Value;
pub const ISyncMgrSyncCallback = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ReportProgress: *const fn(
            self: *const ISyncMgrSyncCallback,
            pszItemID: ?[*:0]const u16,
            pszProgressText: ?[*:0]const u16,
            nStatus: SYNCMGR_PROGRESS_STATUS,
            uCurrentStep: u32,
            uMaxStep: u32,
            pnCancelRequest: ?*SYNCMGR_CANCEL_REQUEST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHandlerProgressText: *const fn(
            self: *const ISyncMgrSyncCallback,
            pszProgressText: ?[*:0]const u16,
            pnCancelRequest: ?*SYNCMGR_CANCEL_REQUEST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReportEvent: *const fn(
            self: *const ISyncMgrSyncCallback,
            pszItemID: ?[*:0]const u16,
            nLevel: SYNCMGR_EVENT_LEVEL,
            nFlags: SYNCMGR_EVENT_FLAGS,
            pszName: ?[*:0]const u16,
            pszDescription: ?[*:0]const u16,
            pszLinkText: ?[*:0]const u16,
            pszLinkReference: ?[*:0]const u16,
            pszContext: ?[*:0]const u16,
            pguidEventID: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanContinue: *const fn(
            self: *const ISyncMgrSyncCallback,
            pszItemID: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryForAdditionalItems: *const fn(
            self: *const ISyncMgrSyncCallback,
            ppenumItemIDs: ?*?*IEnumString,
            ppenumPunks: ?*?*IEnumUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddItemToSession: *const fn(
            self: *const ISyncMgrSyncCallback,
            pszItemID: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddIUnknownToSession: *const fn(
            self: *const ISyncMgrSyncCallback,
            punk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProposeItem: *const fn(
            self: *const ISyncMgrSyncCallback,
            pNewItem: ?*ISyncMgrSyncItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitItem: *const fn(
            self: *const ISyncMgrSyncCallback,
            pszItemID: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReportManualSync: *const fn(
            self: *const ISyncMgrSyncCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn ReportProgress(self: *const ISyncMgrSyncCallback, pszItemID: ?[*:0]const u16, pszProgressText: ?[*:0]const u16, nStatus: SYNCMGR_PROGRESS_STATUS, uCurrentStep: u32, uMaxStep: u32, pnCancelRequest: ?*SYNCMGR_CANCEL_REQUEST) callconv(.Inline) HRESULT {
        return self.vtable.ReportProgress(self, pszItemID, pszProgressText, nStatus, uCurrentStep, uMaxStep, pnCancelRequest);
    }
    pub fn SetHandlerProgressText(self: *const ISyncMgrSyncCallback, pszProgressText: ?[*:0]const u16, pnCancelRequest: ?*SYNCMGR_CANCEL_REQUEST) callconv(.Inline) HRESULT {
        return self.vtable.SetHandlerProgressText(self, pszProgressText, pnCancelRequest);
    }
    pub fn ReportEvent(self: *const ISyncMgrSyncCallback, pszItemID: ?[*:0]const u16, nLevel: SYNCMGR_EVENT_LEVEL, nFlags: SYNCMGR_EVENT_FLAGS, pszName: ?[*:0]const u16, pszDescription: ?[*:0]const u16, pszLinkText: ?[*:0]const u16, pszLinkReference: ?[*:0]const u16, pszContext: ?[*:0]const u16, pguidEventID: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.ReportEvent(self, pszItemID, nLevel, nFlags, pszName, pszDescription, pszLinkText, pszLinkReference, pszContext, pguidEventID);
    }
    pub fn CanContinue(self: *const ISyncMgrSyncCallback, pszItemID: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.CanContinue(self, pszItemID);
    }
    pub fn QueryForAdditionalItems(self: *const ISyncMgrSyncCallback, ppenumItemIDs: ?*?*IEnumString, ppenumPunks: ?*?*IEnumUnknown) callconv(.Inline) HRESULT {
        return self.vtable.QueryForAdditionalItems(self, ppenumItemIDs, ppenumPunks);
    }
    pub fn AddItemToSession(self: *const ISyncMgrSyncCallback, pszItemID: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.AddItemToSession(self, pszItemID);
    }
    pub fn AddIUnknownToSession(self: *const ISyncMgrSyncCallback, punk: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.AddIUnknownToSession(self, punk);
    }
    pub fn ProposeItem(self: *const ISyncMgrSyncCallback, pNewItem: ?*ISyncMgrSyncItem) callconv(.Inline) HRESULT {
        return self.vtable.ProposeItem(self, pNewItem);
    }
    pub fn CommitItem(self: *const ISyncMgrSyncCallback, pszItemID: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.CommitItem(self, pszItemID);
    }
    pub fn ReportManualSync(self: *const ISyncMgrSyncCallback) callconv(.Inline) HRESULT {
        return self.vtable.ReportManualSync(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrUIOperation_Value = Guid.initString("fc7cfa47-dfe1-45b5-a049-8cfd82bec271");
pub const IID_ISyncMgrUIOperation = &IID_ISyncMgrUIOperation_Value;
pub const ISyncMgrUIOperation = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Run: *const fn(
            self: *const ISyncMgrUIOperation,
            hwndOwner: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Run(self: *const ISyncMgrUIOperation, hwndOwner: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.Run(self, hwndOwner);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrEventLinkUIOperation_Value = Guid.initString("64522e52-848b-4015-89ce-5a36f00b94ff");
pub const IID_ISyncMgrEventLinkUIOperation = &IID_ISyncMgrEventLinkUIOperation_Value;
pub const ISyncMgrEventLinkUIOperation = extern union {
    pub const VTable = extern struct {
        base: ISyncMgrUIOperation.VTable,
        Init: *const fn(
            self: *const ISyncMgrEventLinkUIOperation,
            rguidEventID: ?*const Guid,
            pEvent: ?*ISyncMgrEvent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ISyncMgrUIOperation: ISyncMgrUIOperation,
    IUnknown: IUnknown,
    pub fn Init(self: *const ISyncMgrEventLinkUIOperation, rguidEventID: ?*const Guid, pEvent: ?*ISyncMgrEvent) callconv(.Inline) HRESULT {
        return self.vtable.Init(self, rguidEventID, pEvent);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrScheduleWizardUIOperation_Value = Guid.initString("459a6c84-21d2-4ddc-8a53-f023a46066f2");
pub const IID_ISyncMgrScheduleWizardUIOperation = &IID_ISyncMgrScheduleWizardUIOperation_Value;
pub const ISyncMgrScheduleWizardUIOperation = extern union {
    pub const VTable = extern struct {
        base: ISyncMgrUIOperation.VTable,
        InitWizard: *const fn(
            self: *const ISyncMgrScheduleWizardUIOperation,
            pszHandlerID: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ISyncMgrUIOperation: ISyncMgrUIOperation,
    IUnknown: IUnknown,
    pub fn InitWizard(self: *const ISyncMgrScheduleWizardUIOperation, pszHandlerID: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.InitWizard(self, pszHandlerID);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrSyncResult_Value = Guid.initString("2b90f17e-5a3e-4b33-bb7f-1bc48056b94d");
pub const IID_ISyncMgrSyncResult = &IID_ISyncMgrSyncResult_Value;
pub const ISyncMgrSyncResult = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Result: *const fn(
            self: *const ISyncMgrSyncResult,
            nStatus: SYNCMGR_PROGRESS_STATUS,
            cError: u32,
            cConflicts: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Result(self: *const ISyncMgrSyncResult, nStatus: SYNCMGR_PROGRESS_STATUS, cError: u32, cConflicts: u32) callconv(.Inline) HRESULT {
        return self.vtable.Result(self, nStatus, cError, cConflicts);
    }
};

pub const SYNCMGR_CONTROL_FLAGS = enum(i32) {
    NONE = 0,
    WAIT = 1,
    NOUI = 2,
    VALID = 3,
    pub const NOWAIT = .NONE;
};
pub const SYNCMGR_CF_NONE = SYNCMGR_CONTROL_FLAGS.NONE;
pub const SYNCMGR_CF_NOWAIT = SYNCMGR_CONTROL_FLAGS.NONE;
pub const SYNCMGR_CF_WAIT = SYNCMGR_CONTROL_FLAGS.WAIT;
pub const SYNCMGR_CF_NOUI = SYNCMGR_CONTROL_FLAGS.NOUI;
pub const SYNCMGR_CF_VALID = SYNCMGR_CONTROL_FLAGS.VALID;

pub const SYNCMGR_SYNC_CONTROL_FLAGS = enum(i32) {
    NONE = 0,
    IGNORE_IF_ALREADY_SYNCING = 1,
    pub const VALID = .IGNORE_IF_ALREADY_SYNCING;
};
pub const SYNCMGR_SCF_NONE = SYNCMGR_SYNC_CONTROL_FLAGS.NONE;
pub const SYNCMGR_SCF_IGNORE_IF_ALREADY_SYNCING = SYNCMGR_SYNC_CONTROL_FLAGS.IGNORE_IF_ALREADY_SYNCING;
pub const SYNCMGR_SCF_VALID = SYNCMGR_SYNC_CONTROL_FLAGS.IGNORE_IF_ALREADY_SYNCING;

pub const SYNCMGR_UPDATE_REASON = enum(i32) {
    ADDED = 0,
    CHANGED = 1,
    REMOVED = 2,
    pub const MAX = .REMOVED;
};
pub const SYNCMGR_UR_ADDED = SYNCMGR_UPDATE_REASON.ADDED;
pub const SYNCMGR_UR_CHANGED = SYNCMGR_UPDATE_REASON.CHANGED;
pub const SYNCMGR_UR_REMOVED = SYNCMGR_UPDATE_REASON.REMOVED;
pub const SYNCMGR_UR_MAX = SYNCMGR_UPDATE_REASON.REMOVED;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrControl_Value = Guid.initString("9b63616c-36b2-46bc-959f-c1593952d19b");
pub const IID_ISyncMgrControl = &IID_ISyncMgrControl_Value;
pub const ISyncMgrControl = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        StartHandlerSync: *const fn(
            self: *const ISyncMgrControl,
            pszHandlerID: ?[*:0]const u16,
            hwndOwner: ?HWND,
            punk: ?*IUnknown,
            nSyncControlFlags: SYNCMGR_SYNC_CONTROL_FLAGS,
            pResult: ?*ISyncMgrSyncResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartItemSync: *const fn(
            self: *const ISyncMgrControl,
            pszHandlerID: ?[*:0]const u16,
            ppszItemIDs: [*]?PWSTR,
            cItems: u32,
            hwndOwner: ?HWND,
            punk: ?*IUnknown,
            nSyncControlFlags: SYNCMGR_SYNC_CONTROL_FLAGS,
            pResult: ?*ISyncMgrSyncResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartSyncAll: *const fn(
            self: *const ISyncMgrControl,
            hwndOwner: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopHandlerSync: *const fn(
            self: *const ISyncMgrControl,
            pszHandlerID: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopItemSync: *const fn(
            self: *const ISyncMgrControl,
            pszHandlerID: ?[*:0]const u16,
            ppszItemIDs: [*]?PWSTR,
            cItems: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopSyncAll: *const fn(
            self: *const ISyncMgrControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateHandlerCollection: *const fn(
            self: *const ISyncMgrControl,
            rclsidCollectionID: ?*const Guid,
            nControlFlags: SYNCMGR_CONTROL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateHandler: *const fn(
            self: *const ISyncMgrControl,
            pszHandlerID: ?[*:0]const u16,
            nControlFlags: SYNCMGR_CONTROL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateItem: *const fn(
            self: *const ISyncMgrControl,
            pszHandlerID: ?[*:0]const u16,
            pszItemID: ?[*:0]const u16,
            nControlFlags: SYNCMGR_CONTROL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateEvents: *const fn(
            self: *const ISyncMgrControl,
            pszHandlerID: ?[*:0]const u16,
            pszItemID: ?[*:0]const u16,
            nControlFlags: SYNCMGR_CONTROL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateConflict: *const fn(
            self: *const ISyncMgrControl,
            pszHandlerID: ?[*:0]const u16,
            pszItemID: ?[*:0]const u16,
            pConflict: ?*ISyncMgrConflict,
            nReason: SYNCMGR_UPDATE_REASON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateConflicts: *const fn(
            self: *const ISyncMgrControl,
            pszHandlerID: ?[*:0]const u16,
            pszItemID: ?[*:0]const u16,
            nControlFlags: SYNCMGR_CONTROL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ActivateHandler: *const fn(
            self: *const ISyncMgrControl,
            fActivate: BOOL,
            pszHandlerID: ?[*:0]const u16,
            hwndOwner: ?HWND,
            nControlFlags: SYNCMGR_CONTROL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableHandler: *const fn(
            self: *const ISyncMgrControl,
            fEnable: BOOL,
            pszHandlerID: ?[*:0]const u16,
            hwndOwner: ?HWND,
            nControlFlags: SYNCMGR_CONTROL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableItem: *const fn(
            self: *const ISyncMgrControl,
            fEnable: BOOL,
            pszHandlerID: ?[*:0]const u16,
            pszItemID: ?[*:0]const u16,
            hwndOwner: ?HWND,
            nControlFlags: SYNCMGR_CONTROL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn StartHandlerSync(self: *const ISyncMgrControl, pszHandlerID: ?[*:0]const u16, hwndOwner: ?HWND, punk: ?*IUnknown, nSyncControlFlags: SYNCMGR_SYNC_CONTROL_FLAGS, pResult: ?*ISyncMgrSyncResult) callconv(.Inline) HRESULT {
        return self.vtable.StartHandlerSync(self, pszHandlerID, hwndOwner, punk, nSyncControlFlags, pResult);
    }
    pub fn StartItemSync(self: *const ISyncMgrControl, pszHandlerID: ?[*:0]const u16, ppszItemIDs: [*]?PWSTR, cItems: u32, hwndOwner: ?HWND, punk: ?*IUnknown, nSyncControlFlags: SYNCMGR_SYNC_CONTROL_FLAGS, pResult: ?*ISyncMgrSyncResult) callconv(.Inline) HRESULT {
        return self.vtable.StartItemSync(self, pszHandlerID, ppszItemIDs, cItems, hwndOwner, punk, nSyncControlFlags, pResult);
    }
    pub fn StartSyncAll(self: *const ISyncMgrControl, hwndOwner: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.StartSyncAll(self, hwndOwner);
    }
    pub fn StopHandlerSync(self: *const ISyncMgrControl, pszHandlerID: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.StopHandlerSync(self, pszHandlerID);
    }
    pub fn StopItemSync(self: *const ISyncMgrControl, pszHandlerID: ?[*:0]const u16, ppszItemIDs: [*]?PWSTR, cItems: u32) callconv(.Inline) HRESULT {
        return self.vtable.StopItemSync(self, pszHandlerID, ppszItemIDs, cItems);
    }
    pub fn StopSyncAll(self: *const ISyncMgrControl) callconv(.Inline) HRESULT {
        return self.vtable.StopSyncAll(self);
    }
    pub fn UpdateHandlerCollection(self: *const ISyncMgrControl, rclsidCollectionID: ?*const Guid, nControlFlags: SYNCMGR_CONTROL_FLAGS) callconv(.Inline) HRESULT {
        return self.vtable.UpdateHandlerCollection(self, rclsidCollectionID, nControlFlags);
    }
    pub fn UpdateHandler(self: *const ISyncMgrControl, pszHandlerID: ?[*:0]const u16, nControlFlags: SYNCMGR_CONTROL_FLAGS) callconv(.Inline) HRESULT {
        return self.vtable.UpdateHandler(self, pszHandlerID, nControlFlags);
    }
    pub fn UpdateItem(self: *const ISyncMgrControl, pszHandlerID: ?[*:0]const u16, pszItemID: ?[*:0]const u16, nControlFlags: SYNCMGR_CONTROL_FLAGS) callconv(.Inline) HRESULT {
        return self.vtable.UpdateItem(self, pszHandlerID, pszItemID, nControlFlags);
    }
    pub fn UpdateEvents(self: *const ISyncMgrControl, pszHandlerID: ?[*:0]const u16, pszItemID: ?[*:0]const u16, nControlFlags: SYNCMGR_CONTROL_FLAGS) callconv(.Inline) HRESULT {
        return self.vtable.UpdateEvents(self, pszHandlerID, pszItemID, nControlFlags);
    }
    pub fn UpdateConflict(self: *const ISyncMgrControl, pszHandlerID: ?[*:0]const u16, pszItemID: ?[*:0]const u16, pConflict: ?*ISyncMgrConflict, nReason: SYNCMGR_UPDATE_REASON) callconv(.Inline) HRESULT {
        return self.vtable.UpdateConflict(self, pszHandlerID, pszItemID, pConflict, nReason);
    }
    pub fn UpdateConflicts(self: *const ISyncMgrControl, pszHandlerID: ?[*:0]const u16, pszItemID: ?[*:0]const u16, nControlFlags: SYNCMGR_CONTROL_FLAGS) callconv(.Inline) HRESULT {
        return self.vtable.UpdateConflicts(self, pszHandlerID, pszItemID, nControlFlags);
    }
    pub fn ActivateHandler(self: *const ISyncMgrControl, fActivate: BOOL, pszHandlerID: ?[*:0]const u16, hwndOwner: ?HWND, nControlFlags: SYNCMGR_CONTROL_FLAGS) callconv(.Inline) HRESULT {
        return self.vtable.ActivateHandler(self, fActivate, pszHandlerID, hwndOwner, nControlFlags);
    }
    pub fn EnableHandler(self: *const ISyncMgrControl, fEnable: BOOL, pszHandlerID: ?[*:0]const u16, hwndOwner: ?HWND, nControlFlags: SYNCMGR_CONTROL_FLAGS) callconv(.Inline) HRESULT {
        return self.vtable.EnableHandler(self, fEnable, pszHandlerID, hwndOwner, nControlFlags);
    }
    pub fn EnableItem(self: *const ISyncMgrControl, fEnable: BOOL, pszHandlerID: ?[*:0]const u16, pszItemID: ?[*:0]const u16, hwndOwner: ?HWND, nControlFlags: SYNCMGR_CONTROL_FLAGS) callconv(.Inline) HRESULT {
        return self.vtable.EnableItem(self, fEnable, pszHandlerID, pszItemID, hwndOwner, nControlFlags);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrEventStore_Value = Guid.initString("37e412f9-016e-44c2-81ff-db3add774266");
pub const IID_ISyncMgrEventStore = &IID_ISyncMgrEventStore_Value;
pub const ISyncMgrEventStore = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetEventEnumerator: *const fn(
            self: *const ISyncMgrEventStore,
            ppenum: ?*?*IEnumSyncMgrEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEventCount: *const fn(
            self: *const ISyncMgrEventStore,
            pcEvents: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEvent: *const fn(
            self: *const ISyncMgrEventStore,
            rguidEventID: ?*const Guid,
            ppEvent: ?*?*ISyncMgrEvent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveEvent: *const fn(
            self: *const ISyncMgrEventStore,
            pguidEventIDs: [*]Guid,
            cEvents: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetEventEnumerator(self: *const ISyncMgrEventStore, ppenum: ?*?*IEnumSyncMgrEvents) callconv(.Inline) HRESULT {
        return self.vtable.GetEventEnumerator(self, ppenum);
    }
    pub fn GetEventCount(self: *const ISyncMgrEventStore, pcEvents: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetEventCount(self, pcEvents);
    }
    pub fn GetEvent(self: *const ISyncMgrEventStore, rguidEventID: ?*const Guid, ppEvent: ?*?*ISyncMgrEvent) callconv(.Inline) HRESULT {
        return self.vtable.GetEvent(self, rguidEventID, ppEvent);
    }
    pub fn RemoveEvent(self: *const ISyncMgrEventStore, pguidEventIDs: [*]Guid, cEvents: u32) callconv(.Inline) HRESULT {
        return self.vtable.RemoveEvent(self, pguidEventIDs, cEvents);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrEvent_Value = Guid.initString("fee0ef8b-46bd-4db4-b7e6-ff2c687313bc");
pub const IID_ISyncMgrEvent = &IID_ISyncMgrEvent_Value;
pub const ISyncMgrEvent = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetEventID: *const fn(
            self: *const ISyncMgrEvent,
            pguidEventID: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHandlerID: *const fn(
            self: *const ISyncMgrEvent,
            ppszHandlerID: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemID: *const fn(
            self: *const ISyncMgrEvent,
            ppszItemID: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLevel: *const fn(
            self: *const ISyncMgrEvent,
            pnLevel: ?*SYNCMGR_EVENT_LEVEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: *const fn(
            self: *const ISyncMgrEvent,
            pnFlags: ?*SYNCMGR_EVENT_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTime: *const fn(
            self: *const ISyncMgrEvent,
            pfCreationTime: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn(
            self: *const ISyncMgrEvent,
            ppszName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: *const fn(
            self: *const ISyncMgrEvent,
            ppszDescription: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLinkText: *const fn(
            self: *const ISyncMgrEvent,
            ppszLinkText: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLinkReference: *const fn(
            self: *const ISyncMgrEvent,
            ppszLinkReference: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContext: *const fn(
            self: *const ISyncMgrEvent,
            ppszContext: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetEventID(self: *const ISyncMgrEvent, pguidEventID: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetEventID(self, pguidEventID);
    }
    pub fn GetHandlerID(self: *const ISyncMgrEvent, ppszHandlerID: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetHandlerID(self, ppszHandlerID);
    }
    pub fn GetItemID(self: *const ISyncMgrEvent, ppszItemID: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetItemID(self, ppszItemID);
    }
    pub fn GetLevel(self: *const ISyncMgrEvent, pnLevel: ?*SYNCMGR_EVENT_LEVEL) callconv(.Inline) HRESULT {
        return self.vtable.GetLevel(self, pnLevel);
    }
    pub fn GetFlags(self: *const ISyncMgrEvent, pnFlags: ?*SYNCMGR_EVENT_FLAGS) callconv(.Inline) HRESULT {
        return self.vtable.GetFlags(self, pnFlags);
    }
    pub fn GetTime(self: *const ISyncMgrEvent, pfCreationTime: ?*FILETIME) callconv(.Inline) HRESULT {
        return self.vtable.GetTime(self, pfCreationTime);
    }
    pub fn GetName(self: *const ISyncMgrEvent, ppszName: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetName(self, ppszName);
    }
    pub fn GetDescription(self: *const ISyncMgrEvent, ppszDescription: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetDescription(self, ppszDescription);
    }
    pub fn GetLinkText(self: *const ISyncMgrEvent, ppszLinkText: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetLinkText(self, ppszLinkText);
    }
    pub fn GetLinkReference(self: *const ISyncMgrEvent, ppszLinkReference: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetLinkReference(self, ppszLinkReference);
    }
    pub fn GetContext(self: *const ISyncMgrEvent, ppszContext: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetContext(self, ppszContext);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumSyncMgrEvents_Value = Guid.initString("c81a1d4e-8cf7-4683-80e0-bcae88d677b6");
pub const IID_IEnumSyncMgrEvents = &IID_IEnumSyncMgrEvents_Value;
pub const IEnumSyncMgrEvents = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumSyncMgrEvents,
            celt: u32,
            rgelt: [*]?*ISyncMgrEvent,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumSyncMgrEvents,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumSyncMgrEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumSyncMgrEvents,
            ppenum: ?*?*IEnumSyncMgrEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumSyncMgrEvents, celt: u32, rgelt: [*]?*ISyncMgrEvent, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, celt, rgelt, pceltFetched);
    }
    pub fn Skip(self: *const IEnumSyncMgrEvents, celt: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumSyncMgrEvents) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumSyncMgrEvents, ppenum: ?*?*IEnumSyncMgrEvents) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppenum);
    }
};

pub const SYNCMGR_CONFLICT_ID_INFO = extern struct {
    pblobID: ?*BYTE_BLOB,
    pblobExtra: ?*BYTE_BLOB,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrConflictStore_Value = Guid.initString("cf8fc579-c396-4774-85f1-d908a831156e");
pub const IID_ISyncMgrConflictStore = &IID_ISyncMgrConflictStore_Value;
pub const ISyncMgrConflictStore = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnumConflicts: *const fn(
            self: *const ISyncMgrConflictStore,
            pszHandlerID: ?[*:0]const u16,
            pszItemID: ?[*:0]const u16,
            ppEnum: ?*?*IEnumSyncMgrConflict,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindToConflict: *const fn(
            self: *const ISyncMgrConflictStore,
            pConflictIdInfo: ?*const SYNCMGR_CONFLICT_ID_INFO,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveConflicts: *const fn(
            self: *const ISyncMgrConflictStore,
            rgConflictIdInfo: [*]const SYNCMGR_CONFLICT_ID_INFO,
            cConflicts: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn(
            self: *const ISyncMgrConflictStore,
            pszHandlerID: ?[*:0]const u16,
            pszItemID: ?[*:0]const u16,
            pnConflicts: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn EnumConflicts(self: *const ISyncMgrConflictStore, pszHandlerID: ?[*:0]const u16, pszItemID: ?[*:0]const u16, ppEnum: ?*?*IEnumSyncMgrConflict) callconv(.Inline) HRESULT {
        return self.vtable.EnumConflicts(self, pszHandlerID, pszItemID, ppEnum);
    }
    pub fn BindToConflict(self: *const ISyncMgrConflictStore, pConflictIdInfo: ?*const SYNCMGR_CONFLICT_ID_INFO, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.BindToConflict(self, pConflictIdInfo, riid, ppv);
    }
    pub fn RemoveConflicts(self: *const ISyncMgrConflictStore, rgConflictIdInfo: [*]const SYNCMGR_CONFLICT_ID_INFO, cConflicts: u32) callconv(.Inline) HRESULT {
        return self.vtable.RemoveConflicts(self, rgConflictIdInfo, cConflicts);
    }
    pub fn GetCount(self: *const ISyncMgrConflictStore, pszHandlerID: ?[*:0]const u16, pszItemID: ?[*:0]const u16, pnConflicts: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCount(self, pszHandlerID, pszItemID, pnConflicts);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumSyncMgrConflict_Value = Guid.initString("82705914-dda3-4893-ba99-49de6c8c8036");
pub const IID_IEnumSyncMgrConflict = &IID_IEnumSyncMgrConflict_Value;
pub const IEnumSyncMgrConflict = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumSyncMgrConflict,
            celt: u32,
            rgelt: [*]?*ISyncMgrConflict,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumSyncMgrConflict,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumSyncMgrConflict,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumSyncMgrConflict,
            ppenum: ?*?*IEnumSyncMgrConflict,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumSyncMgrConflict, celt: u32, rgelt: [*]?*ISyncMgrConflict, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, celt, rgelt, pceltFetched);
    }
    pub fn Skip(self: *const IEnumSyncMgrConflict, celt: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumSyncMgrConflict) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumSyncMgrConflict, ppenum: ?*?*IEnumSyncMgrConflict) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppenum);
    }
};

pub const SYNCMGR_CONFLICT_ITEM_TYPE = enum(i32) {
    UPDATED = 1,
    DELETED = 2,
};
pub const SYNCMGR_CIT_UPDATED = SYNCMGR_CONFLICT_ITEM_TYPE.UPDATED;
pub const SYNCMGR_CIT_DELETED = SYNCMGR_CONFLICT_ITEM_TYPE.DELETED;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrConflict_Value = Guid.initString("9c204249-c443-4ba4-85ed-c972681db137");
pub const IID_ISyncMgrConflict = &IID_ISyncMgrConflict_Value;
pub const ISyncMgrConflict = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetProperty: *const fn(
            self: *const ISyncMgrConflict,
            propkey: ?*const PROPERTYKEY,
            ppropvar: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConflictIdInfo: *const fn(
            self: *const ISyncMgrConflict,
            pConflictIdInfo: ?*SYNCMGR_CONFLICT_ID_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemsArray: *const fn(
            self: *const ISyncMgrConflict,
            ppArray: ?*?*ISyncMgrConflictItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resolve: *const fn(
            self: *const ISyncMgrConflict,
            pResolveInfo: ?*ISyncMgrConflictResolveInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResolutionHandler: *const fn(
            self: *const ISyncMgrConflict,
            riid: ?*const Guid,
            ppvResolutionHandler: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetProperty(self: *const ISyncMgrConflict, propkey: ?*const PROPERTYKEY, ppropvar: ?*PROPVARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetProperty(self, propkey, ppropvar);
    }
    pub fn GetConflictIdInfo(self: *const ISyncMgrConflict, pConflictIdInfo: ?*SYNCMGR_CONFLICT_ID_INFO) callconv(.Inline) HRESULT {
        return self.vtable.GetConflictIdInfo(self, pConflictIdInfo);
    }
    pub fn GetItemsArray(self: *const ISyncMgrConflict, ppArray: ?*?*ISyncMgrConflictItems) callconv(.Inline) HRESULT {
        return self.vtable.GetItemsArray(self, ppArray);
    }
    pub fn Resolve(self: *const ISyncMgrConflict, pResolveInfo: ?*ISyncMgrConflictResolveInfo) callconv(.Inline) HRESULT {
        return self.vtable.Resolve(self, pResolveInfo);
    }
    pub fn GetResolutionHandler(self: *const ISyncMgrConflict, riid: ?*const Guid, ppvResolutionHandler: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetResolutionHandler(self, riid, ppvResolutionHandler);
    }
};

pub const SYNCMGR_RESOLUTION_ABILITIES = enum(i32) {
    KEEPOTHER = 1,
    KEEPRECENT = 2,
    REMOVEFROMSYNCSET = 4,
    KEEP_SINGLE = 8,
    KEEP_MULTIPLE = 16,
    VALID = 31,
};
pub const SYNCMGR_RA_KEEPOTHER = SYNCMGR_RESOLUTION_ABILITIES.KEEPOTHER;
pub const SYNCMGR_RA_KEEPRECENT = SYNCMGR_RESOLUTION_ABILITIES.KEEPRECENT;
pub const SYNCMGR_RA_REMOVEFROMSYNCSET = SYNCMGR_RESOLUTION_ABILITIES.REMOVEFROMSYNCSET;
pub const SYNCMGR_RA_KEEP_SINGLE = SYNCMGR_RESOLUTION_ABILITIES.KEEP_SINGLE;
pub const SYNCMGR_RA_KEEP_MULTIPLE = SYNCMGR_RESOLUTION_ABILITIES.KEEP_MULTIPLE;
pub const SYNCMGR_RA_VALID = SYNCMGR_RESOLUTION_ABILITIES.VALID;

pub const SYNCMGR_RESOLUTION_FEEDBACK = enum(i32) {
    CONTINUE = 0,
    REFRESH = 1,
    CANCEL = 2,
};
pub const SYNCMGR_RF_CONTINUE = SYNCMGR_RESOLUTION_FEEDBACK.CONTINUE;
pub const SYNCMGR_RF_REFRESH = SYNCMGR_RESOLUTION_FEEDBACK.REFRESH;
pub const SYNCMGR_RF_CANCEL = SYNCMGR_RESOLUTION_FEEDBACK.CANCEL;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrResolutionHandler_Value = Guid.initString("40a3d052-8bff-4c4b-a338-d4a395700de9");
pub const IID_ISyncMgrResolutionHandler = &IID_ISyncMgrResolutionHandler_Value;
pub const ISyncMgrResolutionHandler = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryAbilities: *const fn(
            self: *const ISyncMgrResolutionHandler,
            pdwAbilities: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        KeepOther: *const fn(
            self: *const ISyncMgrResolutionHandler,
            psiOther: ?*IShellItem,
            pFeedback: ?*SYNCMGR_RESOLUTION_FEEDBACK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        KeepRecent: *const fn(
            self: *const ISyncMgrResolutionHandler,
            pFeedback: ?*SYNCMGR_RESOLUTION_FEEDBACK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveFromSyncSet: *const fn(
            self: *const ISyncMgrResolutionHandler,
            pFeedback: ?*SYNCMGR_RESOLUTION_FEEDBACK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        KeepItems: *const fn(
            self: *const ISyncMgrResolutionHandler,
            pArray: ?*ISyncMgrConflictResolutionItems,
            pFeedback: ?*SYNCMGR_RESOLUTION_FEEDBACK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn QueryAbilities(self: *const ISyncMgrResolutionHandler, pdwAbilities: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.QueryAbilities(self, pdwAbilities);
    }
    pub fn KeepOther(self: *const ISyncMgrResolutionHandler, psiOther: ?*IShellItem, pFeedback: ?*SYNCMGR_RESOLUTION_FEEDBACK) callconv(.Inline) HRESULT {
        return self.vtable.KeepOther(self, psiOther, pFeedback);
    }
    pub fn KeepRecent(self: *const ISyncMgrResolutionHandler, pFeedback: ?*SYNCMGR_RESOLUTION_FEEDBACK) callconv(.Inline) HRESULT {
        return self.vtable.KeepRecent(self, pFeedback);
    }
    pub fn RemoveFromSyncSet(self: *const ISyncMgrResolutionHandler, pFeedback: ?*SYNCMGR_RESOLUTION_FEEDBACK) callconv(.Inline) HRESULT {
        return self.vtable.RemoveFromSyncSet(self, pFeedback);
    }
    pub fn KeepItems(self: *const ISyncMgrResolutionHandler, pArray: ?*ISyncMgrConflictResolutionItems, pFeedback: ?*SYNCMGR_RESOLUTION_FEEDBACK) callconv(.Inline) HRESULT {
        return self.vtable.KeepItems(self, pArray, pFeedback);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrConflictPresenter_Value = Guid.initString("0b4f5353-fd2b-42cd-8763-4779f2d508a3");
pub const IID_ISyncMgrConflictPresenter = &IID_ISyncMgrConflictPresenter_Value;
pub const ISyncMgrConflictPresenter = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PresentConflict: *const fn(
            self: *const ISyncMgrConflictPresenter,
            pConflict: ?*ISyncMgrConflict,
            pResolveInfo: ?*ISyncMgrConflictResolveInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn PresentConflict(self: *const ISyncMgrConflictPresenter, pConflict: ?*ISyncMgrConflict, pResolveInfo: ?*ISyncMgrConflictResolveInfo) callconv(.Inline) HRESULT {
        return self.vtable.PresentConflict(self, pConflict, pResolveInfo);
    }
};

pub const SYNCMGR_PRESENTER_NEXT_STEP = enum(i32) {
    CONTINUE = 0,
    DEFAULT = 1,
    CANCEL = 2,
};
pub const SYNCMGR_PNS_CONTINUE = SYNCMGR_PRESENTER_NEXT_STEP.CONTINUE;
pub const SYNCMGR_PNS_DEFAULT = SYNCMGR_PRESENTER_NEXT_STEP.DEFAULT;
pub const SYNCMGR_PNS_CANCEL = SYNCMGR_PRESENTER_NEXT_STEP.CANCEL;

pub const SYNCMGR_PRESENTER_CHOICE = enum(i32) {
    NO_CHOICE = 0,
    KEEP_ONE = 1,
    KEEP_MULTIPLE = 2,
    KEEP_RECENT = 3,
    REMOVE_FROM_SYNC_SET = 4,
    SKIP = 5,
};
pub const SYNCMGR_PC_NO_CHOICE = SYNCMGR_PRESENTER_CHOICE.NO_CHOICE;
pub const SYNCMGR_PC_KEEP_ONE = SYNCMGR_PRESENTER_CHOICE.KEEP_ONE;
pub const SYNCMGR_PC_KEEP_MULTIPLE = SYNCMGR_PRESENTER_CHOICE.KEEP_MULTIPLE;
pub const SYNCMGR_PC_KEEP_RECENT = SYNCMGR_PRESENTER_CHOICE.KEEP_RECENT;
pub const SYNCMGR_PC_REMOVE_FROM_SYNC_SET = SYNCMGR_PRESENTER_CHOICE.REMOVE_FROM_SYNC_SET;
pub const SYNCMGR_PC_SKIP = SYNCMGR_PRESENTER_CHOICE.SKIP;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrConflictResolveInfo_Value = Guid.initString("c405a219-25a2-442e-8743-b845a2cee93f");
pub const IID_ISyncMgrConflictResolveInfo = &IID_ISyncMgrConflictResolveInfo_Value;
pub const ISyncMgrConflictResolveInfo = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIterationInfo: *const fn(
            self: *const ISyncMgrConflictResolveInfo,
            pnCurrentConflict: ?*u32,
            pcConflicts: ?*u32,
            pcRemainingForApplyToAll: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPresenterNextStep: *const fn(
            self: *const ISyncMgrConflictResolveInfo,
            pnPresenterNextStep: ?*SYNCMGR_PRESENTER_NEXT_STEP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPresenterChoice: *const fn(
            self: *const ISyncMgrConflictResolveInfo,
            pnPresenterChoice: ?*SYNCMGR_PRESENTER_CHOICE,
            pfApplyToAll: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemChoiceCount: *const fn(
            self: *const ISyncMgrConflictResolveInfo,
            pcChoices: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemChoice: *const fn(
            self: *const ISyncMgrConflictResolveInfo,
            iChoice: u32,
            piChoiceIndex: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPresenterNextStep: *const fn(
            self: *const ISyncMgrConflictResolveInfo,
            nPresenterNextStep: SYNCMGR_PRESENTER_NEXT_STEP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPresenterChoice: *const fn(
            self: *const ISyncMgrConflictResolveInfo,
            nPresenterChoice: SYNCMGR_PRESENTER_CHOICE,
            fApplyToAll: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetItemChoices: *const fn(
            self: *const ISyncMgrConflictResolveInfo,
            prgiConflictItemIndexes: ?*u32,
            cChoices: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetIterationInfo(self: *const ISyncMgrConflictResolveInfo, pnCurrentConflict: ?*u32, pcConflicts: ?*u32, pcRemainingForApplyToAll: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetIterationInfo(self, pnCurrentConflict, pcConflicts, pcRemainingForApplyToAll);
    }
    pub fn GetPresenterNextStep(self: *const ISyncMgrConflictResolveInfo, pnPresenterNextStep: ?*SYNCMGR_PRESENTER_NEXT_STEP) callconv(.Inline) HRESULT {
        return self.vtable.GetPresenterNextStep(self, pnPresenterNextStep);
    }
    pub fn GetPresenterChoice(self: *const ISyncMgrConflictResolveInfo, pnPresenterChoice: ?*SYNCMGR_PRESENTER_CHOICE, pfApplyToAll: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.GetPresenterChoice(self, pnPresenterChoice, pfApplyToAll);
    }
    pub fn GetItemChoiceCount(self: *const ISyncMgrConflictResolveInfo, pcChoices: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetItemChoiceCount(self, pcChoices);
    }
    pub fn GetItemChoice(self: *const ISyncMgrConflictResolveInfo, iChoice: u32, piChoiceIndex: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetItemChoice(self, iChoice, piChoiceIndex);
    }
    pub fn SetPresenterNextStep(self: *const ISyncMgrConflictResolveInfo, nPresenterNextStep: SYNCMGR_PRESENTER_NEXT_STEP) callconv(.Inline) HRESULT {
        return self.vtable.SetPresenterNextStep(self, nPresenterNextStep);
    }
    pub fn SetPresenterChoice(self: *const ISyncMgrConflictResolveInfo, nPresenterChoice: SYNCMGR_PRESENTER_CHOICE, fApplyToAll: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetPresenterChoice(self, nPresenterChoice, fApplyToAll);
    }
    pub fn SetItemChoices(self: *const ISyncMgrConflictResolveInfo, prgiConflictItemIndexes: ?*u32, cChoices: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetItemChoices(self, prgiConflictItemIndexes, cChoices);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrConflictFolder_Value = Guid.initString("59287f5e-bc81-4fca-a7f1-e5a8ecdb1d69");
pub const IID_ISyncMgrConflictFolder = &IID_ISyncMgrConflictFolder_Value;
pub const ISyncMgrConflictFolder = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetConflictIDList: *const fn(
            self: *const ISyncMgrConflictFolder,
            pConflict: ?*ISyncMgrConflict,
            ppidlConflict: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetConflictIDList(self: *const ISyncMgrConflictFolder, pConflict: ?*ISyncMgrConflict, ppidlConflict: ?*?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.GetConflictIDList(self, pConflict, ppidlConflict);
    }
};

pub const CONFIRM_CONFLICT_ITEM = extern struct {
    pShellItem: ?*IShellItem2,
    pszOriginalName: ?PWSTR,
    pszAlternateName: ?PWSTR,
    pszLocationShort: ?PWSTR,
    pszLocationFull: ?PWSTR,
    nType: SYNCMGR_CONFLICT_ITEM_TYPE,
};

pub const CONFIRM_CONFLICT_RESULT_INFO = extern struct {
    pszNewName: ?PWSTR,
    iItemIndex: u32,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrConflictItems_Value = Guid.initString("9c7ead52-8023-4936-a4db-d2a9a99e436a");
pub const IID_ISyncMgrConflictItems = &IID_ISyncMgrConflictItems_Value;
pub const ISyncMgrConflictItems = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn(
            self: *const ISyncMgrConflictItems,
            pCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItem: *const fn(
            self: *const ISyncMgrConflictItems,
            iIndex: u32,
            pItemInfo: ?*CONFIRM_CONFLICT_ITEM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetCount(self: *const ISyncMgrConflictItems, pCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCount(self, pCount);
    }
    pub fn GetItem(self: *const ISyncMgrConflictItems, iIndex: u32, pItemInfo: ?*CONFIRM_CONFLICT_ITEM) callconv(.Inline) HRESULT {
        return self.vtable.GetItem(self, iIndex, pItemInfo);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrConflictResolutionItems_Value = Guid.initString("458725b9-129d-4135-a998-9ceafec27007");
pub const IID_ISyncMgrConflictResolutionItems = &IID_ISyncMgrConflictResolutionItems_Value;
pub const ISyncMgrConflictResolutionItems = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn(
            self: *const ISyncMgrConflictResolutionItems,
            pCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItem: *const fn(
            self: *const ISyncMgrConflictResolutionItems,
            iIndex: u32,
            pItemInfo: ?*CONFIRM_CONFLICT_RESULT_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetCount(self: *const ISyncMgrConflictResolutionItems, pCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCount(self, pCount);
    }
    pub fn GetItem(self: *const ISyncMgrConflictResolutionItems, iIndex: u32, pItemInfo: ?*CONFIRM_CONFLICT_RESULT_INFO) callconv(.Inline) HRESULT {
        return self.vtable.GetItem(self, iIndex, pItemInfo);
    }
};

const CLSID_InputPanelConfiguration_Value = Guid.initString("2853add3-f096-4c63-a78f-7fa3ea837fb7");
pub const CLSID_InputPanelConfiguration = &CLSID_InputPanelConfiguration_Value;

// TODO: this type is limited to platform 'windows8.0'
const IID_IInputPanelConfiguration_Value = Guid.initString("41c81592-514c-48bd-a22e-e6af638521a6");
pub const IID_IInputPanelConfiguration = &IID_IInputPanelConfiguration_Value;
pub const IInputPanelConfiguration = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnableFocusTracking: *const fn(
            self: *const IInputPanelConfiguration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn EnableFocusTracking(self: *const IInputPanelConfiguration) callconv(.Inline) HRESULT {
        return self.vtable.EnableFocusTracking(self);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IInputPanelInvocationConfiguration_Value = Guid.initString("a213f136-3b45-4362-a332-efb6547cd432");
pub const IID_IInputPanelInvocationConfiguration = &IID_IInputPanelInvocationConfiguration_Value;
pub const IInputPanelInvocationConfiguration = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RequireTouchInEditControl: *const fn(
            self: *const IInputPanelInvocationConfiguration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn RequireTouchInEditControl(self: *const IInputPanelInvocationConfiguration) callconv(.Inline) HRESULT {
        return self.vtable.RequireTouchInEditControl(self);
    }
};

const CLSID_LocalThumbnailCache_Value = Guid.initString("50ef4544-ac9f-4a8e-b21b-8a26180db13f");
pub const CLSID_LocalThumbnailCache = &CLSID_LocalThumbnailCache_Value;

const CLSID_SharedBitmap_Value = Guid.initString("4db26476-6787-4046-b836-e8412a9e8a27");
pub const CLSID_SharedBitmap = &CLSID_SharedBitmap_Value;

pub const WTS_FLAGS = enum(i32) {
    NONE = 0,
    INCACHEONLY = 1,
    FASTEXTRACT = 2,
    FORCEEXTRACTION = 4,
    SLOWRECLAIM = 8,
    EXTRACTDONOTCACHE = 32,
    SCALETOREQUESTEDSIZE = 64,
    SKIPFASTEXTRACT = 128,
    EXTRACTINPROC = 256,
    CROPTOSQUARE = 512,
    INSTANCESURROGATE = 1024,
    REQUIRESURROGATE = 2048,
    APPSTYLE = 8192,
    WIDETHUMBNAILS = 16384,
    IDEALCACHESIZEONLY = 32768,
    SCALEUP = 65536,
    pub const EXTRACT = .NONE;
};
pub const WTS_NONE = WTS_FLAGS.NONE;
pub const WTS_EXTRACT = WTS_FLAGS.NONE;
pub const WTS_INCACHEONLY = WTS_FLAGS.INCACHEONLY;
pub const WTS_FASTEXTRACT = WTS_FLAGS.FASTEXTRACT;
pub const WTS_FORCEEXTRACTION = WTS_FLAGS.FORCEEXTRACTION;
pub const WTS_SLOWRECLAIM = WTS_FLAGS.SLOWRECLAIM;
pub const WTS_EXTRACTDONOTCACHE = WTS_FLAGS.EXTRACTDONOTCACHE;
pub const WTS_SCALETOREQUESTEDSIZE = WTS_FLAGS.SCALETOREQUESTEDSIZE;
pub const WTS_SKIPFASTEXTRACT = WTS_FLAGS.SKIPFASTEXTRACT;
pub const WTS_EXTRACTINPROC = WTS_FLAGS.EXTRACTINPROC;
pub const WTS_CROPTOSQUARE = WTS_FLAGS.CROPTOSQUARE;
pub const WTS_INSTANCESURROGATE = WTS_FLAGS.INSTANCESURROGATE;
pub const WTS_REQUIRESURROGATE = WTS_FLAGS.REQUIRESURROGATE;
pub const WTS_APPSTYLE = WTS_FLAGS.APPSTYLE;
pub const WTS_WIDETHUMBNAILS = WTS_FLAGS.WIDETHUMBNAILS;
pub const WTS_IDEALCACHESIZEONLY = WTS_FLAGS.IDEALCACHESIZEONLY;
pub const WTS_SCALEUP = WTS_FLAGS.SCALEUP;

pub const WTS_CACHEFLAGS = enum(i32) {
    DEFAULT = 0,
    LOWQUALITY = 1,
    CACHED = 2,
};
pub const WTS_DEFAULT = WTS_CACHEFLAGS.DEFAULT;
pub const WTS_LOWQUALITY = WTS_CACHEFLAGS.LOWQUALITY;
pub const WTS_CACHED = WTS_CACHEFLAGS.CACHED;

pub const WTS_CONTEXTFLAGS = enum(i32) {
    DEFAULT = 0,
    APPSTYLE = 1,
    SQUARE = 2,
    WIDE = 4,
    FAST = 8,
};
pub const WTSCF_DEFAULT = WTS_CONTEXTFLAGS.DEFAULT;
pub const WTSCF_APPSTYLE = WTS_CONTEXTFLAGS.APPSTYLE;
pub const WTSCF_SQUARE = WTS_CONTEXTFLAGS.SQUARE;
pub const WTSCF_WIDE = WTS_CONTEXTFLAGS.WIDE;
pub const WTSCF_FAST = WTS_CONTEXTFLAGS.FAST;

pub const WTS_ALPHATYPE = enum(i32) {
    UNKNOWN = 0,
    RGB = 1,
    ARGB = 2,
};
pub const WTSAT_UNKNOWN = WTS_ALPHATYPE.UNKNOWN;
pub const WTSAT_RGB = WTS_ALPHATYPE.RGB;
pub const WTSAT_ARGB = WTS_ALPHATYPE.ARGB;

pub const WTS_THUMBNAILID = extern struct {
    rgbKey: [16]u8,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISharedBitmap_Value = Guid.initString("091162a4-bc96-411f-aae8-c5122cd03363");
pub const IID_ISharedBitmap = &IID_ISharedBitmap_Value;
pub const ISharedBitmap = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSharedBitmap: *const fn(
            self: *const ISharedBitmap,
            phbm: ?*?HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSize: *const fn(
            self: *const ISharedBitmap,
            pSize: ?*SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormat: *const fn(
            self: *const ISharedBitmap,
            pat: ?*WTS_ALPHATYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeBitmap: *const fn(
            self: *const ISharedBitmap,
            hbm: ?HBITMAP,
            wtsAT: WTS_ALPHATYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Detach: *const fn(
            self: *const ISharedBitmap,
            phbm: ?*?HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetSharedBitmap(self: *const ISharedBitmap, phbm: ?*?HBITMAP) callconv(.Inline) HRESULT {
        return self.vtable.GetSharedBitmap(self, phbm);
    }
    pub fn GetSize(self: *const ISharedBitmap, pSize: ?*SIZE) callconv(.Inline) HRESULT {
        return self.vtable.GetSize(self, pSize);
    }
    pub fn GetFormat(self: *const ISharedBitmap, pat: ?*WTS_ALPHATYPE) callconv(.Inline) HRESULT {
        return self.vtable.GetFormat(self, pat);
    }
    pub fn InitializeBitmap(self: *const ISharedBitmap, hbm: ?HBITMAP, wtsAT: WTS_ALPHATYPE) callconv(.Inline) HRESULT {
        return self.vtable.InitializeBitmap(self, hbm, wtsAT);
    }
    pub fn Detach(self: *const ISharedBitmap, phbm: ?*?HBITMAP) callconv(.Inline) HRESULT {
        return self.vtable.Detach(self, phbm);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IThumbnailCache_Value = Guid.initString("f676c15d-596a-4ce2-8234-33996f445db1");
pub const IID_IThumbnailCache = &IID_IThumbnailCache_Value;
pub const IThumbnailCache = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetThumbnail: *const fn(
            self: *const IThumbnailCache,
            pShellItem: ?*IShellItem,
            cxyRequestedThumbSize: u32,
            flags: WTS_FLAGS,
            ppvThumb: ?*?*ISharedBitmap,
            pOutFlags: ?*WTS_CACHEFLAGS,
            pThumbnailID: ?*WTS_THUMBNAILID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetThumbnailByID: *const fn(
            self: *const IThumbnailCache,
            thumbnailID: WTS_THUMBNAILID,
            cxyRequestedThumbSize: u32,
            ppvThumb: ?*?*ISharedBitmap,
            pOutFlags: ?*WTS_CACHEFLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetThumbnail(self: *const IThumbnailCache, pShellItem: ?*IShellItem, cxyRequestedThumbSize: u32, flags: WTS_FLAGS, ppvThumb: ?*?*ISharedBitmap, pOutFlags: ?*WTS_CACHEFLAGS, pThumbnailID: ?*WTS_THUMBNAILID) callconv(.Inline) HRESULT {
        return self.vtable.GetThumbnail(self, pShellItem, cxyRequestedThumbSize, flags, ppvThumb, pOutFlags, pThumbnailID);
    }
    pub fn GetThumbnailByID(self: *const IThumbnailCache, thumbnailID: WTS_THUMBNAILID, cxyRequestedThumbSize: u32, ppvThumb: ?*?*ISharedBitmap, pOutFlags: ?*WTS_CACHEFLAGS) callconv(.Inline) HRESULT {
        return self.vtable.GetThumbnailByID(self, thumbnailID, cxyRequestedThumbSize, ppvThumb, pOutFlags);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IThumbnailProvider_Value = Guid.initString("e357fccd-a995-4576-b01f-234630154e96");
pub const IID_IThumbnailProvider = &IID_IThumbnailProvider_Value;
pub const IThumbnailProvider = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetThumbnail: *const fn(
            self: *const IThumbnailProvider,
            cx: u32,
            phbmp: ?*?HBITMAP,
            pdwAlpha: ?*WTS_ALPHATYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetThumbnail(self: *const IThumbnailProvider, cx: u32, phbmp: ?*?HBITMAP, pdwAlpha: ?*WTS_ALPHATYPE) callconv(.Inline) HRESULT {
        return self.vtable.GetThumbnail(self, cx, phbmp, pdwAlpha);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IThumbnailSettings_Value = Guid.initString("f4376f00-bef5-4d45-80f3-1e023bbf1209");
pub const IID_IThumbnailSettings = &IID_IThumbnailSettings_Value;
pub const IThumbnailSettings = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetContext: *const fn(
            self: *const IThumbnailSettings,
            dwContext: WTS_CONTEXTFLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetContext(self: *const IThumbnailSettings, dwContext: WTS_CONTEXTFLAGS) callconv(.Inline) HRESULT {
        return self.vtable.SetContext(self, dwContext);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IThumbnailCachePrimer_Value = Guid.initString("0f03f8fe-2b26-46f0-965a-212aa8d66b76");
pub const IID_IThumbnailCachePrimer = &IID_IThumbnailCachePrimer_Value;
pub const IThumbnailCachePrimer = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PageInThumbnail: *const fn(
            self: *const IThumbnailCachePrimer,
            psi: ?*IShellItem,
            wtsFlags: WTS_FLAGS,
            cxyRequestedThumbSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn PageInThumbnail(self: *const IThumbnailCachePrimer, psi: ?*IShellItem, wtsFlags: WTS_FLAGS, cxyRequestedThumbSize: u32) callconv(.Inline) HRESULT {
        return self.vtable.PageInThumbnail(self, psi, wtsFlags, cxyRequestedThumbSize);
    }
};

const CLSID_ShellImageDataFactory_Value = Guid.initString("66e4e4fb-f385-4dd0-8d74-a2efd1bc6178");
pub const CLSID_ShellImageDataFactory = &CLSID_ShellImageDataFactory_Value;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellImageDataFactory_Value = Guid.initString("9be8ed5c-edab-4d75-90f3-bd5bdbb21c82");
pub const IID_IShellImageDataFactory = &IID_IShellImageDataFactory_Value;
pub const IShellImageDataFactory = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateIShellImageData: *const fn(
            self: *const IShellImageDataFactory,
            ppshimg: ?*?*IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateImageFromFile: *const fn(
            self: *const IShellImageDataFactory,
            pszPath: ?[*:0]const u16,
            ppshimg: ?*?*IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateImageFromStream: *const fn(
            self: *const IShellImageDataFactory,
            pStream: ?*IStream,
            ppshimg: ?*?*IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDataFormatFromPath: *const fn(
            self: *const IShellImageDataFactory,
            pszPath: ?[*:0]const u16,
            pDataFormat: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateIShellImageData(self: *const IShellImageDataFactory, ppshimg: ?*?*IShellImageData) callconv(.Inline) HRESULT {
        return self.vtable.CreateIShellImageData(self, ppshimg);
    }
    pub fn CreateImageFromFile(self: *const IShellImageDataFactory, pszPath: ?[*:0]const u16, ppshimg: ?*?*IShellImageData) callconv(.Inline) HRESULT {
        return self.vtable.CreateImageFromFile(self, pszPath, ppshimg);
    }
    pub fn CreateImageFromStream(self: *const IShellImageDataFactory, pStream: ?*IStream, ppshimg: ?*?*IShellImageData) callconv(.Inline) HRESULT {
        return self.vtable.CreateImageFromStream(self, pStream, ppshimg);
    }
    pub fn GetDataFormatFromPath(self: *const IShellImageDataFactory, pszPath: ?[*:0]const u16, pDataFormat: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetDataFormatFromPath(self, pszPath, pDataFormat);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellImageData_Value = Guid.initString("bfdeec12-8040-4403-a5ea-9e07dafcf530");
pub const IID_IShellImageData = &IID_IShellImageData_Value;
pub const IShellImageData = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Decode: *const fn(
            self: *const IShellImageData,
            dwFlags: u32,
            cxDesired: u32,
            cyDesired: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Draw: *const fn(
            self: *const IShellImageData,
            hdc: ?HDC,
            prcDest: ?*RECT,
            prcSrc: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NextFrame: *const fn(
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NextPage: *const fn(
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrevPage: *const fn(
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsTransparent: *const fn(
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsAnimated: *const fn(
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsVector: *const fn(
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsMultipage: *const fn(
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsEditable: *const fn(
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPrintable: *const fn(
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsDecoded: *const fn(
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentPage: *const fn(
            self: *const IShellImageData,
            pnPage: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPageCount: *const fn(
            self: *const IShellImageData,
            pcPages: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectPage: *const fn(
            self: *const IShellImageData,
            iPage: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSize: *const fn(
            self: *const IShellImageData,
            pSize: ?*SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRawDataFormat: *const fn(
            self: *const IShellImageData,
            pDataFormat: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPixelFormat: *const fn(
            self: *const IShellImageData,
            pFormat: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDelay: *const fn(
            self: *const IShellImageData,
            pdwDelay: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperties: *const fn(
            self: *const IShellImageData,
            dwMode: u32,
            ppPropSet: ?*?*IPropertySetStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Rotate: *const fn(
            self: *const IShellImageData,
            dwAngle: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Scale: *const fn(
            self: *const IShellImageData,
            cx: u32,
            cy: u32,
            hints: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DiscardEdit: *const fn(
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEncoderParams: *const fn(
            self: *const IShellImageData,
            pbagEnc: ?*IPropertyBag,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisplayName: *const fn(
            self: *const IShellImageData,
            wszName: ?PWSTR,
            cch: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResolution: *const fn(
            self: *const IShellImageData,
            puResolutionX: ?*u32,
            puResolutionY: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEncoderParams: *const fn(
            self: *const IShellImageData,
            pguidFmt: ?*Guid,
            ppEncParams: ?*?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterAbort: *const fn(
            self: *const IShellImageData,
            pAbort: ?*IShellImageDataAbort,
            ppAbortPrev: ?*?*IShellImageDataAbort,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloneFrame: *const fn(
            self: *const IShellImageData,
            ppImg: ?*?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReplaceFrame: *const fn(
            self: *const IShellImageData,
            pImg: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Decode(self: *const IShellImageData, dwFlags: u32, cxDesired: u32, cyDesired: u32) callconv(.Inline) HRESULT {
        return self.vtable.Decode(self, dwFlags, cxDesired, cyDesired);
    }
    pub fn Draw(self: *const IShellImageData, hdc: ?HDC, prcDest: ?*RECT, prcSrc: ?*RECT) callconv(.Inline) HRESULT {
        return self.vtable.Draw(self, hdc, prcDest, prcSrc);
    }
    pub fn NextFrame(self: *const IShellImageData) callconv(.Inline) HRESULT {
        return self.vtable.NextFrame(self);
    }
    pub fn NextPage(self: *const IShellImageData) callconv(.Inline) HRESULT {
        return self.vtable.NextPage(self);
    }
    pub fn PrevPage(self: *const IShellImageData) callconv(.Inline) HRESULT {
        return self.vtable.PrevPage(self);
    }
    pub fn IsTransparent(self: *const IShellImageData) callconv(.Inline) HRESULT {
        return self.vtable.IsTransparent(self);
    }
    pub fn IsAnimated(self: *const IShellImageData) callconv(.Inline) HRESULT {
        return self.vtable.IsAnimated(self);
    }
    pub fn IsVector(self: *const IShellImageData) callconv(.Inline) HRESULT {
        return self.vtable.IsVector(self);
    }
    pub fn IsMultipage(self: *const IShellImageData) callconv(.Inline) HRESULT {
        return self.vtable.IsMultipage(self);
    }
    pub fn IsEditable(self: *const IShellImageData) callconv(.Inline) HRESULT {
        return self.vtable.IsEditable(self);
    }
    pub fn IsPrintable(self: *const IShellImageData) callconv(.Inline) HRESULT {
        return self.vtable.IsPrintable(self);
    }
    pub fn IsDecoded(self: *const IShellImageData) callconv(.Inline) HRESULT {
        return self.vtable.IsDecoded(self);
    }
    pub fn GetCurrentPage(self: *const IShellImageData, pnPage: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCurrentPage(self, pnPage);
    }
    pub fn GetPageCount(self: *const IShellImageData, pcPages: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetPageCount(self, pcPages);
    }
    pub fn SelectPage(self: *const IShellImageData, iPage: u32) callconv(.Inline) HRESULT {
        return self.vtable.SelectPage(self, iPage);
    }
    pub fn GetSize(self: *const IShellImageData, pSize: ?*SIZE) callconv(.Inline) HRESULT {
        return self.vtable.GetSize(self, pSize);
    }
    pub fn GetRawDataFormat(self: *const IShellImageData, pDataFormat: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetRawDataFormat(self, pDataFormat);
    }
    pub fn GetPixelFormat(self: *const IShellImageData, pFormat: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetPixelFormat(self, pFormat);
    }
    pub fn GetDelay(self: *const IShellImageData, pdwDelay: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetDelay(self, pdwDelay);
    }
    pub fn GetProperties(self: *const IShellImageData, dwMode: u32, ppPropSet: ?*?*IPropertySetStorage) callconv(.Inline) HRESULT {
        return self.vtable.GetProperties(self, dwMode, ppPropSet);
    }
    pub fn Rotate(self: *const IShellImageData, dwAngle: u32) callconv(.Inline) HRESULT {
        return self.vtable.Rotate(self, dwAngle);
    }
    pub fn Scale(self: *const IShellImageData, cx: u32, cy: u32, hints: u32) callconv(.Inline) HRESULT {
        return self.vtable.Scale(self, cx, cy, hints);
    }
    pub fn DiscardEdit(self: *const IShellImageData) callconv(.Inline) HRESULT {
        return self.vtable.DiscardEdit(self);
    }
    pub fn SetEncoderParams(self: *const IShellImageData, pbagEnc: ?*IPropertyBag) callconv(.Inline) HRESULT {
        return self.vtable.SetEncoderParams(self, pbagEnc);
    }
    pub fn DisplayName(self: *const IShellImageData, wszName: ?PWSTR, cch: u32) callconv(.Inline) HRESULT {
        return self.vtable.DisplayName(self, wszName, cch);
    }
    pub fn GetResolution(self: *const IShellImageData, puResolutionX: ?*u32, puResolutionY: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetResolution(self, puResolutionX, puResolutionY);
    }
    pub fn GetEncoderParams(self: *const IShellImageData, pguidFmt: ?*Guid, ppEncParams: ?*?*u8) callconv(.Inline) HRESULT {
        return self.vtable.GetEncoderParams(self, pguidFmt, ppEncParams);
    }
    pub fn RegisterAbort(self: *const IShellImageData, pAbort: ?*IShellImageDataAbort, ppAbortPrev: ?*?*IShellImageDataAbort) callconv(.Inline) HRESULT {
        return self.vtable.RegisterAbort(self, pAbort, ppAbortPrev);
    }
    pub fn CloneFrame(self: *const IShellImageData, ppImg: ?*?*u8) callconv(.Inline) HRESULT {
        return self.vtable.CloneFrame(self, ppImg);
    }
    pub fn ReplaceFrame(self: *const IShellImageData, pImg: ?*u8) callconv(.Inline) HRESULT {
        return self.vtable.ReplaceFrame(self, pImg);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellImageDataAbort_Value = Guid.initString("53fb8e58-50c0-4003-b4aa-0c8df28e7f3a");
pub const IID_IShellImageDataAbort = &IID_IShellImageDataAbort_Value;
pub const IShellImageDataAbort = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryAbort: *const fn(
            self: *const IShellImageDataAbort,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn QueryAbort(self: *const IShellImageDataAbort) callconv(.Inline) HRESULT {
        return self.vtable.QueryAbort(self);
    }
};

const IID_IStorageProviderPropertyHandler_Value = Guid.initString("301dfbe5-524c-4b0f-8b2d-21c40b3a2988");
pub const IID_IStorageProviderPropertyHandler = &IID_IStorageProviderPropertyHandler_Value;
pub const IStorageProviderPropertyHandler = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RetrieveProperties: *const fn(
            self: *const IStorageProviderPropertyHandler,
            propertiesToRetrieve: [*]const PROPERTYKEY,
            propertiesToRetrieveCount: u32,
            retrievedProperties: ?*?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveProperties: *const fn(
            self: *const IStorageProviderPropertyHandler,
            propertiesToSave: ?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn RetrieveProperties(self: *const IStorageProviderPropertyHandler, propertiesToRetrieve: [*]const PROPERTYKEY, propertiesToRetrieveCount: u32, retrievedProperties: ?*?*IPropertyStore) callconv(.Inline) HRESULT {
        return self.vtable.RetrieveProperties(self, propertiesToRetrieve, propertiesToRetrieveCount, retrievedProperties);
    }
    pub fn SaveProperties(self: *const IStorageProviderPropertyHandler, propertiesToSave: ?*IPropertyStore) callconv(.Inline) HRESULT {
        return self.vtable.SaveProperties(self, propertiesToSave);
    }
};

const IID_IStorageProviderHandler_Value = Guid.initString("162c6fb5-44d3-435b-903d-e613fa093fb5");
pub const IID_IStorageProviderHandler = &IID_IStorageProviderHandler_Value;
pub const IStorageProviderHandler = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPropertyHandlerFromPath: *const fn(
            self: *const IStorageProviderHandler,
            path: ?[*:0]const u16,
            propertyHandler: ?*?*IStorageProviderPropertyHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyHandlerFromUri: *const fn(
            self: *const IStorageProviderHandler,
            uri: ?[*:0]const u16,
            propertyHandler: ?*?*IStorageProviderPropertyHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyHandlerFromFileId: *const fn(
            self: *const IStorageProviderHandler,
            fileId: ?[*:0]const u16,
            propertyHandler: ?*?*IStorageProviderPropertyHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetPropertyHandlerFromPath(self: *const IStorageProviderHandler, path: ?[*:0]const u16, propertyHandler: ?*?*IStorageProviderPropertyHandler) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyHandlerFromPath(self, path, propertyHandler);
    }
    pub fn GetPropertyHandlerFromUri(self: *const IStorageProviderHandler, uri: ?[*:0]const u16, propertyHandler: ?*?*IStorageProviderPropertyHandler) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyHandlerFromUri(self, uri, propertyHandler);
    }
    pub fn GetPropertyHandlerFromFileId(self: *const IStorageProviderHandler, fileId: ?[*:0]const u16, propertyHandler: ?*?*IStorageProviderPropertyHandler) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyHandlerFromFileId(self, fileId, propertyHandler);
    }
};

const CLSID_SyncMgr_Value = Guid.initString("6295df27-35ee-11d1-8707-00c04fd93327");
pub const CLSID_SyncMgr = &CLSID_SyncMgr_Value;

pub const SYNCMGRSTATUS = enum(i32) {
    STOPPED = 0,
    SKIPPED = 1,
    PENDING = 2,
    UPDATING = 3,
    SUCCEEDED = 4,
    FAILED = 5,
    PAUSED = 6,
    RESUMING = 7,
    UPDATING_INDETERMINATE = 8,
    DELETED = 256,
};
pub const SYNCMGRSTATUS_STOPPED = SYNCMGRSTATUS.STOPPED;
pub const SYNCMGRSTATUS_SKIPPED = SYNCMGRSTATUS.SKIPPED;
pub const SYNCMGRSTATUS_PENDING = SYNCMGRSTATUS.PENDING;
pub const SYNCMGRSTATUS_UPDATING = SYNCMGRSTATUS.UPDATING;
pub const SYNCMGRSTATUS_SUCCEEDED = SYNCMGRSTATUS.SUCCEEDED;
pub const SYNCMGRSTATUS_FAILED = SYNCMGRSTATUS.FAILED;
pub const SYNCMGRSTATUS_PAUSED = SYNCMGRSTATUS.PAUSED;
pub const SYNCMGRSTATUS_RESUMING = SYNCMGRSTATUS.RESUMING;
pub const SYNCMGRSTATUS_UPDATING_INDETERMINATE = SYNCMGRSTATUS.UPDATING_INDETERMINATE;
pub const SYNCMGRSTATUS_DELETED = SYNCMGRSTATUS.DELETED;

pub const SYNCMGRPROGRESSITEM = extern struct {
    cbSize: u32,
    mask: u32,
    lpcStatusText: ?[*:0]const u16,
    dwStatusType: u32,
    iProgValue: i32,
    iMaxValue: i32,
};

pub const SYNCMGRLOGLEVEL = enum(i32) {
    INFORMATION = 1,
    WARNING = 2,
    ERROR = 3,
    pub const LOGLEVELMAX = .ERROR;
};
pub const SYNCMGRLOGLEVEL_INFORMATION = SYNCMGRLOGLEVEL.INFORMATION;
pub const SYNCMGRLOGLEVEL_WARNING = SYNCMGRLOGLEVEL.WARNING;
pub const SYNCMGRLOGLEVEL_ERROR = SYNCMGRLOGLEVEL.ERROR;
pub const SYNCMGRLOGLEVEL_LOGLEVELMAX = SYNCMGRLOGLEVEL.ERROR;

pub const SYNCMGRERRORFLAGS = enum(i32) {
    T = 1,
};
pub const SYNCMGRERRORFLAG_ENABLEJUMPTEXT = SYNCMGRERRORFLAGS.T;

pub const SYNCMGRLOGERRORINFO = extern struct {
    cbSize: u32,
    mask: u32,
    dwSyncMgrErrorFlags: u32,
    ErrorID: Guid,
    ItemID: Guid,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ISyncMgrSynchronizeCallback_Value = Guid.initString("6295df41-35ee-11d1-8707-00c04fd93327");
pub const IID_ISyncMgrSynchronizeCallback = &IID_ISyncMgrSynchronizeCallback_Value;
pub const ISyncMgrSynchronizeCallback = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ShowPropertiesCompleted: *const fn(
            self: *const ISyncMgrSynchronizeCallback,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrepareForSyncCompleted: *const fn(
            self: *const ISyncMgrSynchronizeCallback,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SynchronizeCompleted: *const fn(
            self: *const ISyncMgrSynchronizeCallback,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowErrorCompleted: *const fn(
            self: *const ISyncMgrSynchronizeCallback,
            hr: HRESULT,
            cItems: u32,
            pItemIDs: [*]const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableModeless: *const fn(
            self: *const ISyncMgrSynchronizeCallback,
            fEnable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Progress: *const fn(
            self: *const ISyncMgrSynchronizeCallback,
            ItemID: ?*const Guid,
            pSyncProgressItem: ?*const SYNCMGRPROGRESSITEM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LogError: *const fn(
            self: *const ISyncMgrSynchronizeCallback,
            dwErrorLevel: u32,
            pszErrorText: ?[*:0]const u16,
            pSyncLogError: ?*const SYNCMGRLOGERRORINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteLogError: *const fn(
            self: *const ISyncMgrSynchronizeCallback,
            ErrorID: ?*const Guid,
            dwReserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EstablishConnection: *const fn(
            self: *const ISyncMgrSynchronizeCallback,
            pwszConnection: ?[*:0]const u16,
            dwReserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn ShowPropertiesCompleted(self: *const ISyncMgrSynchronizeCallback, hr: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.ShowPropertiesCompleted(self, hr);
    }
    pub fn PrepareForSyncCompleted(self: *const ISyncMgrSynchronizeCallback, hr: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.PrepareForSyncCompleted(self, hr);
    }
    pub fn SynchronizeCompleted(self: *const ISyncMgrSynchronizeCallback, hr: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.SynchronizeCompleted(self, hr);
    }
    pub fn ShowErrorCompleted(self: *const ISyncMgrSynchronizeCallback, hr: HRESULT, cItems: u32, pItemIDs: [*]const Guid) callconv(.Inline) HRESULT {
        return self.vtable.ShowErrorCompleted(self, hr, cItems, pItemIDs);
    }
    pub fn EnableModeless(self: *const ISyncMgrSynchronizeCallback, fEnable: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.EnableModeless(self, fEnable);
    }
    pub fn Progress(self: *const ISyncMgrSynchronizeCallback, ItemID: ?*const Guid, pSyncProgressItem: ?*const SYNCMGRPROGRESSITEM) callconv(.Inline) HRESULT {
        return self.vtable.Progress(self, ItemID, pSyncProgressItem);
    }
    pub fn LogError(self: *const ISyncMgrSynchronizeCallback, dwErrorLevel: u32, pszErrorText: ?[*:0]const u16, pSyncLogError: ?*const SYNCMGRLOGERRORINFO) callconv(.Inline) HRESULT {
        return self.vtable.LogError(self, dwErrorLevel, pszErrorText, pSyncLogError);
    }
    pub fn DeleteLogError(self: *const ISyncMgrSynchronizeCallback, ErrorID: ?*const Guid, dwReserved: u32) callconv(.Inline) HRESULT {
        return self.vtable.DeleteLogError(self, ErrorID, dwReserved);
    }
    pub fn EstablishConnection(self: *const ISyncMgrSynchronizeCallback, pwszConnection: ?[*:0]const u16, dwReserved: u32) callconv(.Inline) HRESULT {
        return self.vtable.EstablishConnection(self, pwszConnection, dwReserved);
    }
};

pub const SYNCMGRITEMFLAGS = enum(i32) {
    HASPROPERTIES = 1,
    TEMPORARY = 2,
    ROAMINGUSER = 4,
    LASTUPDATETIME = 8,
    MAYDELETEITEM = 16,
    HIDDEN = 32,
};
pub const SYNCMGRITEM_HASPROPERTIES = SYNCMGRITEMFLAGS.HASPROPERTIES;
pub const SYNCMGRITEM_TEMPORARY = SYNCMGRITEMFLAGS.TEMPORARY;
pub const SYNCMGRITEM_ROAMINGUSER = SYNCMGRITEMFLAGS.ROAMINGUSER;
pub const SYNCMGRITEM_LASTUPDATETIME = SYNCMGRITEMFLAGS.LASTUPDATETIME;
pub const SYNCMGRITEM_MAYDELETEITEM = SYNCMGRITEMFLAGS.MAYDELETEITEM;
pub const SYNCMGRITEM_HIDDEN = SYNCMGRITEMFLAGS.HIDDEN;

pub const SYNCMGRITEM = extern struct {
    cbSize: u32,
    dwFlags: u32,
    ItemID: Guid,
    dwItemState: u32,
    hIcon: ?HICON,
    wszItemName: [128]u16,
    ftLastUpdate: FILETIME,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ISyncMgrEnumItems_Value = Guid.initString("6295df2a-35ee-11d1-8707-00c04fd93327");
pub const IID_ISyncMgrEnumItems = &IID_ISyncMgrEnumItems_Value;
pub const ISyncMgrEnumItems = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const ISyncMgrEnumItems,
            celt: u32,
            rgelt: [*]SYNCMGRITEM,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const ISyncMgrEnumItems,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const ISyncMgrEnumItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const ISyncMgrEnumItems,
            ppenum: ?*?*ISyncMgrEnumItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const ISyncMgrEnumItems, celt: u32, rgelt: [*]SYNCMGRITEM, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, celt, rgelt, pceltFetched);
    }
    pub fn Skip(self: *const ISyncMgrEnumItems, celt: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const ISyncMgrEnumItems) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const ISyncMgrEnumItems, ppenum: ?*?*ISyncMgrEnumItems) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppenum);
    }
};

pub const SYNCMGRFLAG = enum(i32) {
    CONNECT = 1,
    PENDINGDISCONNECT = 2,
    MANUAL = 3,
    IDLE = 4,
    INVOKE = 5,
    SCHEDULED = 6,
    EVENTMASK = 255,
    SETTINGS = 256,
    MAYBOTHERUSER = 512,
};
pub const SYNCMGRFLAG_CONNECT = SYNCMGRFLAG.CONNECT;
pub const SYNCMGRFLAG_PENDINGDISCONNECT = SYNCMGRFLAG.PENDINGDISCONNECT;
pub const SYNCMGRFLAG_MANUAL = SYNCMGRFLAG.MANUAL;
pub const SYNCMGRFLAG_IDLE = SYNCMGRFLAG.IDLE;
pub const SYNCMGRFLAG_INVOKE = SYNCMGRFLAG.INVOKE;
pub const SYNCMGRFLAG_SCHEDULED = SYNCMGRFLAG.SCHEDULED;
pub const SYNCMGRFLAG_EVENTMASK = SYNCMGRFLAG.EVENTMASK;
pub const SYNCMGRFLAG_SETTINGS = SYNCMGRFLAG.SETTINGS;
pub const SYNCMGRFLAG_MAYBOTHERUSER = SYNCMGRFLAG.MAYBOTHERUSER;

pub const SYNCMGRHANDLERFLAGS = enum(i32) {
    HASPROPERTIES = 1,
    MAYESTABLISHCONNECTION = 2,
    ALWAYSLISTHANDLER = 4,
    HIDDEN = 8,
};
pub const SYNCMGRHANDLER_HASPROPERTIES = SYNCMGRHANDLERFLAGS.HASPROPERTIES;
pub const SYNCMGRHANDLER_MAYESTABLISHCONNECTION = SYNCMGRHANDLERFLAGS.MAYESTABLISHCONNECTION;
pub const SYNCMGRHANDLER_ALWAYSLISTHANDLER = SYNCMGRHANDLERFLAGS.ALWAYSLISTHANDLER;
pub const SYNCMGRHANDLER_HIDDEN = SYNCMGRHANDLERFLAGS.HIDDEN;

pub const SYNCMGRHANDLERINFO = extern struct {
    cbSize: u32,
    hIcon: ?HICON,
    SyncMgrHandlerFlags: u32,
    wszHandlerName: [32]u16,
};

pub const SYNCMGRITEMSTATE = enum(i32) {
    UNCHECKED = 0,
    CHECKED = 1,
};
pub const SYNCMGRITEMSTATE_UNCHECKED = SYNCMGRITEMSTATE.UNCHECKED;
pub const SYNCMGRITEMSTATE_CHECKED = SYNCMGRITEMSTATE.CHECKED;

// TODO: this type is limited to platform 'windows5.0'
const IID_ISyncMgrSynchronize_Value = Guid.initString("6295df40-35ee-11d1-8707-00c04fd93327");
pub const IID_ISyncMgrSynchronize = &IID_ISyncMgrSynchronize_Value;
pub const ISyncMgrSynchronize = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn(
            self: *const ISyncMgrSynchronize,
            dwReserved: u32,
            dwSyncMgrFlags: u32,
            cbCookie: u32,
            lpCookie: [*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHandlerInfo: *const fn(
            self: *const ISyncMgrSynchronize,
            ppSyncMgrHandlerInfo: ?*?*SYNCMGRHANDLERINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumSyncMgrItems: *const fn(
            self: *const ISyncMgrSynchronize,
            ppSyncMgrEnumItems: ?*?*ISyncMgrEnumItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemObject: *const fn(
            self: *const ISyncMgrSynchronize,
            ItemID: ?*const Guid,
            riid: ?*const Guid,
            ppv: **anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowProperties: *const fn(
            self: *const ISyncMgrSynchronize,
            hWndParent: ?HWND,
            ItemID: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProgressCallback: *const fn(
            self: *const ISyncMgrSynchronize,
            lpCallBack: ?*ISyncMgrSynchronizeCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrepareForSync: *const fn(
            self: *const ISyncMgrSynchronize,
            cbNumItems: u32,
            pItemIDs: [*]Guid,
            hWndParent: ?HWND,
            dwReserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Synchronize: *const fn(
            self: *const ISyncMgrSynchronize,
            hWndParent: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetItemStatus: *const fn(
            self: *const ISyncMgrSynchronize,
            pItemID: ?*const Guid,
            dwSyncMgrStatus: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowError: *const fn(
            self: *const ISyncMgrSynchronize,
            hWndParent: ?HWND,
            ErrorID: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const ISyncMgrSynchronize, dwReserved: u32, dwSyncMgrFlags: u32, cbCookie: u32, lpCookie: [*:0]const u8) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, dwReserved, dwSyncMgrFlags, cbCookie, lpCookie);
    }
    pub fn GetHandlerInfo(self: *const ISyncMgrSynchronize, ppSyncMgrHandlerInfo: ?*?*SYNCMGRHANDLERINFO) callconv(.Inline) HRESULT {
        return self.vtable.GetHandlerInfo(self, ppSyncMgrHandlerInfo);
    }
    pub fn EnumSyncMgrItems(self: *const ISyncMgrSynchronize, ppSyncMgrEnumItems: ?*?*ISyncMgrEnumItems) callconv(.Inline) HRESULT {
        return self.vtable.EnumSyncMgrItems(self, ppSyncMgrEnumItems);
    }
    pub fn GetItemObject(self: *const ISyncMgrSynchronize, ItemID: ?*const Guid, riid: ?*const Guid, ppv: **anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetItemObject(self, ItemID, riid, ppv);
    }
    pub fn ShowProperties(self: *const ISyncMgrSynchronize, hWndParent: ?HWND, ItemID: ?*const Guid) callconv(.Inline) HRESULT {
        return self.vtable.ShowProperties(self, hWndParent, ItemID);
    }
    pub fn SetProgressCallback(self: *const ISyncMgrSynchronize, lpCallBack: ?*ISyncMgrSynchronizeCallback) callconv(.Inline) HRESULT {
        return self.vtable.SetProgressCallback(self, lpCallBack);
    }
    pub fn PrepareForSync(self: *const ISyncMgrSynchronize, cbNumItems: u32, pItemIDs: [*]Guid, hWndParent: ?HWND, dwReserved: u32) callconv(.Inline) HRESULT {
        return self.vtable.PrepareForSync(self, cbNumItems, pItemIDs, hWndParent, dwReserved);
    }
    pub fn Synchronize(self: *const ISyncMgrSynchronize, hWndParent: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.Synchronize(self, hWndParent);
    }
    pub fn SetItemStatus(self: *const ISyncMgrSynchronize, pItemID: ?*const Guid, dwSyncMgrStatus: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetItemStatus(self, pItemID, dwSyncMgrStatus);
    }
    pub fn ShowError(self: *const ISyncMgrSynchronize, hWndParent: ?HWND, ErrorID: ?*const Guid) callconv(.Inline) HRESULT {
        return self.vtable.ShowError(self, hWndParent, ErrorID);
    }
};

pub const SYNCMGRINVOKEFLAGS = enum(i32) {
    STARTSYNC = 2,
    MINIMIZED = 4,
};
pub const SYNCMGRINVOKE_STARTSYNC = SYNCMGRINVOKEFLAGS.STARTSYNC;
pub const SYNCMGRINVOKE_MINIMIZED = SYNCMGRINVOKEFLAGS.MINIMIZED;

// TODO: this type is limited to platform 'windows5.0'
const IID_ISyncMgrSynchronizeInvoke_Value = Guid.initString("6295df2c-35ee-11d1-8707-00c04fd93327");
pub const IID_ISyncMgrSynchronizeInvoke = &IID_ISyncMgrSynchronizeInvoke_Value;
pub const ISyncMgrSynchronizeInvoke = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        UpdateItems: *const fn(
            self: *const ISyncMgrSynchronizeInvoke,
            dwInvokeFlags: u32,
            clsid: ?*const Guid,
            cbCookie: u32,
            pCookie: [*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateAll: *const fn(
            self: *const ISyncMgrSynchronizeInvoke,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn UpdateItems(self: *const ISyncMgrSynchronizeInvoke, dwInvokeFlags: u32, clsid: ?*const Guid, cbCookie: u32, pCookie: [*:0]const u8) callconv(.Inline) HRESULT {
        return self.vtable.UpdateItems(self, dwInvokeFlags, clsid, cbCookie, pCookie);
    }
    pub fn UpdateAll(self: *const ISyncMgrSynchronizeInvoke) callconv(.Inline) HRESULT {
        return self.vtable.UpdateAll(self);
    }
};

pub const SYNCMGRREGISTERFLAGS = enum(i32) {
    CONNECT = 1,
    PENDINGDISCONNECT = 2,
    IDLE = 4,
};
pub const SYNCMGRREGISTERFLAG_CONNECT = SYNCMGRREGISTERFLAGS.CONNECT;
pub const SYNCMGRREGISTERFLAG_PENDINGDISCONNECT = SYNCMGRREGISTERFLAGS.PENDINGDISCONNECT;
pub const SYNCMGRREGISTERFLAG_IDLE = SYNCMGRREGISTERFLAGS.IDLE;

// TODO: this type is limited to platform 'windows5.0'
const IID_ISyncMgrRegister_Value = Guid.initString("6295df42-35ee-11d1-8707-00c04fd93327");
pub const IID_ISyncMgrRegister = &IID_ISyncMgrRegister_Value;
pub const ISyncMgrRegister = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterSyncMgrHandler: *const fn(
            self: *const ISyncMgrRegister,
            clsidHandler: ?*const Guid,
            pwszDescription: ?[*:0]const u16,
            dwSyncMgrRegisterFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterSyncMgrHandler: *const fn(
            self: *const ISyncMgrRegister,
            clsidHandler: ?*const Guid,
            dwReserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHandlerRegistrationInfo: *const fn(
            self: *const ISyncMgrRegister,
            clsidHandler: ?*const Guid,
            pdwSyncMgrRegisterFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn RegisterSyncMgrHandler(self: *const ISyncMgrRegister, clsidHandler: ?*const Guid, pwszDescription: ?[*:0]const u16, dwSyncMgrRegisterFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.RegisterSyncMgrHandler(self, clsidHandler, pwszDescription, dwSyncMgrRegisterFlags);
    }
    pub fn UnregisterSyncMgrHandler(self: *const ISyncMgrRegister, clsidHandler: ?*const Guid, dwReserved: u32) callconv(.Inline) HRESULT {
        return self.vtable.UnregisterSyncMgrHandler(self, clsidHandler, dwReserved);
    }
    pub fn GetHandlerRegistrationInfo(self: *const ISyncMgrRegister, clsidHandler: ?*const Guid, pdwSyncMgrRegisterFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetHandlerRegistrationInfo(self, clsidHandler, pdwSyncMgrRegisterFlags);
    }
};

const CLSID_ThumbnailStreamCache_Value = Guid.initString("cbe0fed3-4b91-4e90-8354-8a8c84ec6872");
pub const CLSID_ThumbnailStreamCache = &CLSID_ThumbnailStreamCache_Value;

pub const ThumbnailStreamCacheOptions = enum(i32) {
    ExtractIfNotCached = 0,
    ReturnOnlyIfCached = 1,
    ResizeThumbnail = 2,
    AllowSmallerSize = 4,
};
pub const ExtractIfNotCached = ThumbnailStreamCacheOptions.ExtractIfNotCached;
pub const ReturnOnlyIfCached = ThumbnailStreamCacheOptions.ReturnOnlyIfCached;
pub const ResizeThumbnail = ThumbnailStreamCacheOptions.ResizeThumbnail;
pub const AllowSmallerSize = ThumbnailStreamCacheOptions.AllowSmallerSize;

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IThumbnailStreamCache_Value = Guid.initString("90e11430-9569-41d8-ae75-6d4d2ae7cca0");
pub const IID_IThumbnailStreamCache = &IID_IThumbnailStreamCache_Value;
pub const IThumbnailStreamCache = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetThumbnailStream: *const fn(
            self: *const IThumbnailStreamCache,
            path: ?[*:0]const u16,
            cacheId: u64,
            options: ThumbnailStreamCacheOptions,
            requestedThumbnailSize: u32,
            thumbnailSize: ?*SIZE,
            thumbnailStream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetThumbnailStream: *const fn(
            self: *const IThumbnailStreamCache,
            path: ?[*:0]const u16,
            cacheId: u64,
            thumbnailSize: SIZE,
            thumbnailStream: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetThumbnailStream(self: *const IThumbnailStreamCache, path: ?[*:0]const u16, cacheId: u64, options: ThumbnailStreamCacheOptions, requestedThumbnailSize: u32, thumbnailSize: ?*SIZE, thumbnailStream: ?*?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.GetThumbnailStream(self, path, cacheId, options, requestedThumbnailSize, thumbnailSize, thumbnailStream);
    }
    pub fn SetThumbnailStream(self: *const IThumbnailStreamCache, path: ?[*:0]const u16, cacheId: u64, thumbnailSize: SIZE, thumbnailStream: ?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.SetThumbnailStream(self, path, cacheId, thumbnailSize, thumbnailStream);
    }
};

const CLSID_TrackShellMenu_Value = Guid.initString("8278f931-2a3e-11d2-838f-00c04fd918d0");
pub const CLSID_TrackShellMenu = &CLSID_TrackShellMenu_Value;

pub const WINDOWDATA = extern struct {
    dwWindowID: u32,
    uiCP: u32,
    pidl: ?*ITEMIDLIST,
    lpszUrl: ?PWSTR,
    lpszUrlLocation: ?PWSTR,
    lpszTitle: ?PWSTR,
};

const IID_ITravelLogEntry_Value = Guid.initString("7ebfdd87-ad18-11d3-a4c5-00c04f72d6b8");
pub const IID_ITravelLogEntry = &IID_ITravelLogEntry_Value;
pub const ITravelLogEntry = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTitle: *const fn(
            self: *const ITravelLogEntry,
            ppszTitle: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetURL: *const fn(
            self: *const ITravelLogEntry,
            ppszURL: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetTitle(self: *const ITravelLogEntry, ppszTitle: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetTitle(self, ppszTitle);
    }
    pub fn GetURL(self: *const ITravelLogEntry, ppszURL: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetURL(self, ppszURL);
    }
};

const IID_ITravelLogClient_Value = Guid.initString("241c033e-e659-43da-aa4d-4086dbc4758d");
pub const IID_ITravelLogClient = &IID_ITravelLogClient_Value;
pub const ITravelLogClient = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindWindowByIndex: *const fn(
            self: *const ITravelLogClient,
            dwID: u32,
            ppunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWindowData: *const fn(
            self: *const ITravelLogClient,
            pStream: ?*IStream,
            pWinData: ?*WINDOWDATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadHistoryPosition: *const fn(
            self: *const ITravelLogClient,
            pszUrlLocation: ?PWSTR,
            dwPosition: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn FindWindowByIndex(self: *const ITravelLogClient, dwID: u32, ppunk: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.FindWindowByIndex(self, dwID, ppunk);
    }
    pub fn GetWindowData(self: *const ITravelLogClient, pStream: ?*IStream, pWinData: ?*WINDOWDATA) callconv(.Inline) HRESULT {
        return self.vtable.GetWindowData(self, pStream, pWinData);
    }
    pub fn LoadHistoryPosition(self: *const ITravelLogClient, pszUrlLocation: ?PWSTR, dwPosition: u32) callconv(.Inline) HRESULT {
        return self.vtable.LoadHistoryPosition(self, pszUrlLocation, dwPosition);
    }
};

const IID_IEnumTravelLogEntry_Value = Guid.initString("7ebfdd85-ad18-11d3-a4c5-00c04f72d6b8");
pub const IID_IEnumTravelLogEntry = &IID_IEnumTravelLogEntry_Value;
pub const IEnumTravelLogEntry = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumTravelLogEntry,
            cElt: u32,
            rgElt: [*]?*ITravelLogEntry,
            pcEltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumTravelLogEntry,
            cElt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumTravelLogEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumTravelLogEntry,
            ppEnum: ?*?*IEnumTravelLogEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumTravelLogEntry, cElt: u32, rgElt: [*]?*ITravelLogEntry, pcEltFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, cElt, rgElt, pcEltFetched);
    }
    pub fn Skip(self: *const IEnumTravelLogEntry, cElt: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, cElt);
    }
    pub fn Reset(self: *const IEnumTravelLogEntry) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumTravelLogEntry, ppEnum: ?*?*IEnumTravelLogEntry) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppEnum);
    }
};

pub const TLENUMF = enum(i32) {
    RELATIVE_INCLUDE_CURRENT = 1,
    RELATIVE_BACK = 16,
    RELATIVE_FORE = 32,
    INCLUDE_UNINVOKEABLE = 64,
    ABSOLUTE = 49,
    EXCLUDE_SUBFRAME_ENTRIES = 128,
    EXCLUDE_ABOUT_PAGES = 256,
};
pub const TLEF_RELATIVE_INCLUDE_CURRENT = TLENUMF.RELATIVE_INCLUDE_CURRENT;
pub const TLEF_RELATIVE_BACK = TLENUMF.RELATIVE_BACK;
pub const TLEF_RELATIVE_FORE = TLENUMF.RELATIVE_FORE;
pub const TLEF_INCLUDE_UNINVOKEABLE = TLENUMF.INCLUDE_UNINVOKEABLE;
pub const TLEF_ABSOLUTE = TLENUMF.ABSOLUTE;
pub const TLEF_EXCLUDE_SUBFRAME_ENTRIES = TLENUMF.EXCLUDE_SUBFRAME_ENTRIES;
pub const TLEF_EXCLUDE_ABOUT_PAGES = TLENUMF.EXCLUDE_ABOUT_PAGES;

const IID_ITravelLogStg_Value = Guid.initString("7ebfdd80-ad18-11d3-a4c5-00c04f72d6b8");
pub const IID_ITravelLogStg = &IID_ITravelLogStg_Value;
pub const ITravelLogStg = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateEntry: *const fn(
            self: *const ITravelLogStg,
            pszUrl: ?[*:0]const u16,
            pszTitle: ?[*:0]const u16,
            ptleRelativeTo: ?*ITravelLogEntry,
            fPrepend: BOOL,
            pptle: ?*?*ITravelLogEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TravelTo: *const fn(
            self: *const ITravelLogStg,
            ptle: ?*ITravelLogEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumEntries: *const fn(
            self: *const ITravelLogStg,
            flags: TLENUMF,
            ppenum: ?*?*IEnumTravelLogEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindEntries: *const fn(
            self: *const ITravelLogStg,
            flags: TLENUMF,
            pszUrl: ?[*:0]const u16,
            ppenum: ?*?*IEnumTravelLogEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn(
            self: *const ITravelLogStg,
            flags: TLENUMF,
            pcEntries: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveEntry: *const fn(
            self: *const ITravelLogStg,
            ptle: ?*ITravelLogEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRelativeEntry: *const fn(
            self: *const ITravelLogStg,
            iOffset: i32,
            ptle: ?*?*ITravelLogEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateEntry(self: *const ITravelLogStg, pszUrl: ?[*:0]const u16, pszTitle: ?[*:0]const u16, ptleRelativeTo: ?*ITravelLogEntry, fPrepend: BOOL, pptle: ?*?*ITravelLogEntry) callconv(.Inline) HRESULT {
        return self.vtable.CreateEntry(self, pszUrl, pszTitle, ptleRelativeTo, fPrepend, pptle);
    }
    pub fn TravelTo(self: *const ITravelLogStg, ptle: ?*ITravelLogEntry) callconv(.Inline) HRESULT {
        return self.vtable.TravelTo(self, ptle);
    }
    pub fn EnumEntries(self: *const ITravelLogStg, flags: TLENUMF, ppenum: ?*?*IEnumTravelLogEntry) callconv(.Inline) HRESULT {
        return self.vtable.EnumEntries(self, flags, ppenum);
    }
    pub fn FindEntries(self: *const ITravelLogStg, flags: TLENUMF, pszUrl: ?[*:0]const u16, ppenum: ?*?*IEnumTravelLogEntry) callconv(.Inline) HRESULT {
        return self.vtable.FindEntries(self, flags, pszUrl, ppenum);
    }
    pub fn GetCount(self: *const ITravelLogStg, flags: TLENUMF, pcEntries: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCount(self, flags, pcEntries);
    }
    pub fn RemoveEntry(self: *const ITravelLogStg, ptle: ?*ITravelLogEntry) callconv(.Inline) HRESULT {
        return self.vtable.RemoveEntry(self, ptle);
    }
    pub fn GetRelativeEntry(self: *const ITravelLogStg, iOffset: i32, ptle: ?*?*ITravelLogEntry) callconv(.Inline) HRESULT {
        return self.vtable.GetRelativeEntry(self, iOffset, ptle);
    }
};

pub const _HLSR_NOREDEF10 = enum(i32) {
    HOME = 0,
    SEARCHPAGE = 1,
    HISTORYFOLDER = 2,
};
pub const HLSR_HOME = _HLSR_NOREDEF10.HOME;
pub const HLSR_SEARCHPAGE = _HLSR_NOREDEF10.SEARCHPAGE;
pub const HLSR_HISTORYFOLDER = _HLSR_NOREDEF10.HISTORYFOLDER;

pub const _HLSHORTCUTF__NOREDEF10 = enum(i32) {
    DEFAULT = 0,
    DONTACTUALLYCREATE = 1,
    USEFILENAMEFROMFRIENDLYNAME = 2,
    USEUNIQUEFILENAME = 4,
    MAYUSEEXISTINGSHORTCUT = 8,
};
pub const HLSHORTCUTF_DEFAULT = _HLSHORTCUTF__NOREDEF10.DEFAULT;
pub const HLSHORTCUTF_DONTACTUALLYCREATE = _HLSHORTCUTF__NOREDEF10.DONTACTUALLYCREATE;
pub const HLSHORTCUTF_USEFILENAMEFROMFRIENDLYNAME = _HLSHORTCUTF__NOREDEF10.USEFILENAMEFROMFRIENDLYNAME;
pub const HLSHORTCUTF_USEUNIQUEFILENAME = _HLSHORTCUTF__NOREDEF10.USEUNIQUEFILENAME;
pub const HLSHORTCUTF_MAYUSEEXISTINGSHORTCUT = _HLSHORTCUTF__NOREDEF10.MAYUSEEXISTINGSHORTCUT;

pub const _HLTRANSLATEF_NOREDEF10 = enum(i32) {
    EFAULT = 0,
    ONTAPPLYDEFAULTPREFIX = 1,
};
pub const HLTRANSLATEF_DEFAULT = _HLTRANSLATEF_NOREDEF10.EFAULT;
pub const HLTRANSLATEF_DONTAPPLYDEFAULTPREFIX = _HLTRANSLATEF_NOREDEF10.ONTAPPLYDEFAULTPREFIX;

pub const HLNF = packed struct(u32) {
    INTERNALJUMP: u1 = 0,
    OPENINNEWWINDOW: u1 = 0,
    NAVIGATINGBACK: u1 = 0,
    NAVIGATINGFORWARD: u1 = 0,
    NAVIGATINGTOSTACKITEM: u1 = 0,
    CREATENOHISTORY: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const HLNF_INTERNALJUMP = HLNF{ .INTERNALJUMP = 1 };
pub const HLNF_OPENINNEWWINDOW = HLNF{ .OPENINNEWWINDOW = 1 };
pub const HLNF_NAVIGATINGBACK = HLNF{ .NAVIGATINGBACK = 1 };
pub const HLNF_NAVIGATINGFORWARD = HLNF{ .NAVIGATINGFORWARD = 1 };
pub const HLNF_NAVIGATINGTOSTACKITEM = HLNF{ .NAVIGATINGTOSTACKITEM = 1 };
pub const HLNF_CREATENOHISTORY = HLNF{ .CREATENOHISTORY = 1 };

pub const HLINKGETREF = enum(i32) {
    DEFAULT = 0,
    ABSOLUTE = 1,
    RELATIVE = 2,
};
pub const HLINKGETREF_DEFAULT = HLINKGETREF.DEFAULT;
pub const HLINKGETREF_ABSOLUTE = HLINKGETREF.ABSOLUTE;
pub const HLINKGETREF_RELATIVE = HLINKGETREF.RELATIVE;

pub const HLFNAMEF = packed struct(u32) {
    TRYCACHE: u1 = 0,
    TRYPRETTYTARGET: u1 = 0,
    TRYFULLTARGET: u1 = 0,
    TRYWIN95SHORTCUT: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const HLFNAMEF_DEFAULT = HLFNAMEF{ };
pub const HLFNAMEF_TRYCACHE = HLFNAMEF{ .TRYCACHE = 1 };
pub const HLFNAMEF_TRYPRETTYTARGET = HLFNAMEF{ .TRYPRETTYTARGET = 1 };
pub const HLFNAMEF_TRYFULLTARGET = HLFNAMEF{ .TRYFULLTARGET = 1 };
pub const HLFNAMEF_TRYWIN95SHORTCUT = HLFNAMEF{ .TRYWIN95SHORTCUT = 1 };

pub const HLINKMISC = enum(i32) {
    E = 1,
};
pub const HLINKMISC_RELATIVE = HLINKMISC.E;

pub const HLINKSETF = enum(i32) {
    TARGET = 1,
    LOCATION = 2,
};
pub const HLINKSETF_TARGET = HLINKSETF.TARGET;
pub const HLINKSETF_LOCATION = HLINKSETF.LOCATION;

const IID_IHlink_Value = Guid.initString("79eac9c3-baf9-11ce-8c82-00aa004ba90b");
pub const IID_IHlink = &IID_IHlink_Value;
pub const IHlink = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetHlinkSite: *const fn(
            self: *const IHlink,
            pihlSite: ?*IHlinkSite,
            dwSiteData: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHlinkSite: *const fn(
            self: *const IHlink,
            ppihlSite: ?*?*IHlinkSite,
            pdwSiteData: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMonikerReference: *const fn(
            self: *const IHlink,
            grfHLSETF: u32,
            pimkTarget: ?*IMoniker,
            pwzLocation: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMonikerReference: *const fn(
            self: *const IHlink,
            dwWhichRef: u32,
            ppimkTarget: ?*?*IMoniker,
            ppwzLocation: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStringReference: *const fn(
            self: *const IHlink,
            grfHLSETF: u32,
            pwzTarget: ?[*:0]const u16,
            pwzLocation: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringReference: *const fn(
            self: *const IHlink,
            dwWhichRef: u32,
            ppwzTarget: ?*?PWSTR,
            ppwzLocation: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFriendlyName: *const fn(
            self: *const IHlink,
            pwzFriendlyName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFriendlyName: *const fn(
            self: *const IHlink,
            grfHLFNAMEF: u32,
            ppwzFriendlyName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTargetFrameName: *const fn(
            self: *const IHlink,
            pwzTargetFrameName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTargetFrameName: *const fn(
            self: *const IHlink,
            ppwzTargetFrameName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMiscStatus: *const fn(
            self: *const IHlink,
            pdwStatus: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Navigate: *const fn(
            self: *const IHlink,
            grfHLNF: u32,
            pibc: ?*IBindCtx,
            pibsc: ?*IBindStatusCallback,
            pihlbc: ?*IHlinkBrowseContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAdditionalParams: *const fn(
            self: *const IHlink,
            pwzAdditionalParams: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAdditionalParams: *const fn(
            self: *const IHlink,
            ppwzAdditionalParams: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetHlinkSite(self: *const IHlink, pihlSite: ?*IHlinkSite, dwSiteData: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetHlinkSite(self, pihlSite, dwSiteData);
    }
    pub fn GetHlinkSite(self: *const IHlink, ppihlSite: ?*?*IHlinkSite, pdwSiteData: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetHlinkSite(self, ppihlSite, pdwSiteData);
    }
    pub fn SetMonikerReference(self: *const IHlink, grfHLSETF: u32, pimkTarget: ?*IMoniker, pwzLocation: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetMonikerReference(self, grfHLSETF, pimkTarget, pwzLocation);
    }
    pub fn GetMonikerReference(self: *const IHlink, dwWhichRef: u32, ppimkTarget: ?*?*IMoniker, ppwzLocation: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetMonikerReference(self, dwWhichRef, ppimkTarget, ppwzLocation);
    }
    pub fn SetStringReference(self: *const IHlink, grfHLSETF: u32, pwzTarget: ?[*:0]const u16, pwzLocation: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetStringReference(self, grfHLSETF, pwzTarget, pwzLocation);
    }
    pub fn GetStringReference(self: *const IHlink, dwWhichRef: u32, ppwzTarget: ?*?PWSTR, ppwzLocation: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetStringReference(self, dwWhichRef, ppwzTarget, ppwzLocation);
    }
    pub fn SetFriendlyName(self: *const IHlink, pwzFriendlyName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetFriendlyName(self, pwzFriendlyName);
    }
    pub fn GetFriendlyName(self: *const IHlink, grfHLFNAMEF: u32, ppwzFriendlyName: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetFriendlyName(self, grfHLFNAMEF, ppwzFriendlyName);
    }
    pub fn SetTargetFrameName(self: *const IHlink, pwzTargetFrameName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetTargetFrameName(self, pwzTargetFrameName);
    }
    pub fn GetTargetFrameName(self: *const IHlink, ppwzTargetFrameName: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetTargetFrameName(self, ppwzTargetFrameName);
    }
    pub fn GetMiscStatus(self: *const IHlink, pdwStatus: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetMiscStatus(self, pdwStatus);
    }
    pub fn Navigate(self: *const IHlink, grfHLNF: u32, pibc: ?*IBindCtx, pibsc: ?*IBindStatusCallback, pihlbc: ?*IHlinkBrowseContext) callconv(.Inline) HRESULT {
        return self.vtable.Navigate(self, grfHLNF, pibc, pibsc, pihlbc);
    }
    pub fn SetAdditionalParams(self: *const IHlink, pwzAdditionalParams: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetAdditionalParams(self, pwzAdditionalParams);
    }
    pub fn GetAdditionalParams(self: *const IHlink, ppwzAdditionalParams: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetAdditionalParams(self, ppwzAdditionalParams);
    }
};

pub const HLINKWHICHMK = enum(i32) {
    CONTAINER = 1,
    BASE = 2,
};
pub const HLINKWHICHMK_CONTAINER = HLINKWHICHMK.CONTAINER;
pub const HLINKWHICHMK_BASE = HLINKWHICHMK.BASE;

const IID_IHlinkSite_Value = Guid.initString("79eac9c2-baf9-11ce-8c82-00aa004ba90b");
pub const IID_IHlinkSite = &IID_IHlinkSite_Value;
pub const IHlinkSite = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryService: *const fn(
            self: *const IHlinkSite,
            dwSiteData: u32,
            guidService: ?*const Guid,
            riid: ?*const Guid,
            ppiunk: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMoniker: *const fn(
            self: *const IHlinkSite,
            dwSiteData: u32,
            dwAssign: u32,
            dwWhich: u32,
            ppimk: ?*?*IMoniker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadyToNavigate: *const fn(
            self: *const IHlinkSite,
            dwSiteData: u32,
            dwReserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNavigationComplete: *const fn(
            self: *const IHlinkSite,
            dwSiteData: u32,
            dwreserved: u32,
            hrError: HRESULT,
            pwzError: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn QueryService(self: *const IHlinkSite, dwSiteData: u32, guidService: ?*const Guid, riid: ?*const Guid, ppiunk: **IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.QueryService(self, dwSiteData, guidService, riid, ppiunk);
    }
    pub fn GetMoniker(self: *const IHlinkSite, dwSiteData: u32, dwAssign: u32, dwWhich: u32, ppimk: ?*?*IMoniker) callconv(.Inline) HRESULT {
        return self.vtable.GetMoniker(self, dwSiteData, dwAssign, dwWhich, ppimk);
    }
    pub fn ReadyToNavigate(self: *const IHlinkSite, dwSiteData: u32, dwReserved: u32) callconv(.Inline) HRESULT {
        return self.vtable.ReadyToNavigate(self, dwSiteData, dwReserved);
    }
    pub fn OnNavigationComplete(self: *const IHlinkSite, dwSiteData: u32, dwreserved: u32, hrError: HRESULT, pwzError: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.OnNavigationComplete(self, dwSiteData, dwreserved, hrError, pwzError);
    }
};

const IID_IHlinkTarget_Value = Guid.initString("79eac9c4-baf9-11ce-8c82-00aa004ba90b");
pub const IID_IHlinkTarget = &IID_IHlinkTarget_Value;
pub const IHlinkTarget = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetBrowseContext: *const fn(
            self: *const IHlinkTarget,
            pihlbc: ?*IHlinkBrowseContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBrowseContext: *const fn(
            self: *const IHlinkTarget,
            ppihlbc: ?*?*IHlinkBrowseContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Navigate: *const fn(
            self: *const IHlinkTarget,
            grfHLNF: u32,
            pwzJumpLocation: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMoniker: *const fn(
            self: *const IHlinkTarget,
            pwzLocation: ?[*:0]const u16,
            dwAssign: u32,
            ppimkLocation: ?*?*IMoniker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFriendlyName: *const fn(
            self: *const IHlinkTarget,
            pwzLocation: ?[*:0]const u16,
            ppwzFriendlyName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetBrowseContext(self: *const IHlinkTarget, pihlbc: ?*IHlinkBrowseContext) callconv(.Inline) HRESULT {
        return self.vtable.SetBrowseContext(self, pihlbc);
    }
    pub fn GetBrowseContext(self: *const IHlinkTarget, ppihlbc: ?*?*IHlinkBrowseContext) callconv(.Inline) HRESULT {
        return self.vtable.GetBrowseContext(self, ppihlbc);
    }
    pub fn Navigate(self: *const IHlinkTarget, grfHLNF: u32, pwzJumpLocation: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.Navigate(self, grfHLNF, pwzJumpLocation);
    }
    pub fn GetMoniker(self: *const IHlinkTarget, pwzLocation: ?[*:0]const u16, dwAssign: u32, ppimkLocation: ?*?*IMoniker) callconv(.Inline) HRESULT {
        return self.vtable.GetMoniker(self, pwzLocation, dwAssign, ppimkLocation);
    }
    pub fn GetFriendlyName(self: *const IHlinkTarget, pwzLocation: ?[*:0]const u16, ppwzFriendlyName: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetFriendlyName(self, pwzLocation, ppwzFriendlyName);
    }
};

const IID_IHlinkFrame_Value = Guid.initString("79eac9c5-baf9-11ce-8c82-00aa004ba90b");
pub const IID_IHlinkFrame = &IID_IHlinkFrame_Value;
pub const IHlinkFrame = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetBrowseContext: *const fn(
            self: *const IHlinkFrame,
            pihlbc: ?*IHlinkBrowseContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBrowseContext: *const fn(
            self: *const IHlinkFrame,
            ppihlbc: ?*?*IHlinkBrowseContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Navigate: *const fn(
            self: *const IHlinkFrame,
            grfHLNF: u32,
            pbc: ?*IBindCtx,
            pibsc: ?*IBindStatusCallback,
            pihlNavigate: ?*IHlink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNavigate: *const fn(
            self: *const IHlinkFrame,
            grfHLNF: u32,
            pimkTarget: ?*IMoniker,
            pwzLocation: ?[*:0]const u16,
            pwzFriendlyName: ?[*:0]const u16,
            dwreserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateHlink: *const fn(
            self: *const IHlinkFrame,
            uHLID: u32,
            pimkTarget: ?*IMoniker,
            pwzLocation: ?[*:0]const u16,
            pwzFriendlyName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetBrowseContext(self: *const IHlinkFrame, pihlbc: ?*IHlinkBrowseContext) callconv(.Inline) HRESULT {
        return self.vtable.SetBrowseContext(self, pihlbc);
    }
    pub fn GetBrowseContext(self: *const IHlinkFrame, ppihlbc: ?*?*IHlinkBrowseContext) callconv(.Inline) HRESULT {
        return self.vtable.GetBrowseContext(self, ppihlbc);
    }
    pub fn Navigate(self: *const IHlinkFrame, grfHLNF: u32, pbc: ?*IBindCtx, pibsc: ?*IBindStatusCallback, pihlNavigate: ?*IHlink) callconv(.Inline) HRESULT {
        return self.vtable.Navigate(self, grfHLNF, pbc, pibsc, pihlNavigate);
    }
    pub fn OnNavigate(self: *const IHlinkFrame, grfHLNF: u32, pimkTarget: ?*IMoniker, pwzLocation: ?[*:0]const u16, pwzFriendlyName: ?[*:0]const u16, dwreserved: u32) callconv(.Inline) HRESULT {
        return self.vtable.OnNavigate(self, grfHLNF, pimkTarget, pwzLocation, pwzFriendlyName, dwreserved);
    }
    pub fn UpdateHlink(self: *const IHlinkFrame, uHLID: u32, pimkTarget: ?*IMoniker, pwzLocation: ?[*:0]const u16, pwzFriendlyName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.UpdateHlink(self, uHLID, pimkTarget, pwzLocation, pwzFriendlyName);
    }
};

pub const HLITEM = extern struct {
    uHLID: u32,
    pwzFriendlyName: ?PWSTR,
};

const IID_IEnumHLITEM_Value = Guid.initString("79eac9c6-baf9-11ce-8c82-00aa004ba90b");
pub const IID_IEnumHLITEM = &IID_IEnumHLITEM_Value;
pub const IEnumHLITEM = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumHLITEM,
            celt: u32,
            rgelt: ?*HLITEM,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumHLITEM,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumHLITEM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumHLITEM,
            ppienumhlitem: ?*?*IEnumHLITEM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumHLITEM, celt: u32, rgelt: ?*HLITEM, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, celt, rgelt, pceltFetched);
    }
    pub fn Skip(self: *const IEnumHLITEM, celt: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumHLITEM) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumHLITEM, ppienumhlitem: ?*?*IEnumHLITEM) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppienumhlitem);
    }
};

pub const HLTB_INFO = enum(i32) {
    DOCKEDLEFT = 0,
    DOCKEDTOP = 1,
    DOCKEDRIGHT = 2,
    DOCKEDBOTTOM = 3,
    FLOATING = 4,
};
pub const HLTB_DOCKEDLEFT = HLTB_INFO.DOCKEDLEFT;
pub const HLTB_DOCKEDTOP = HLTB_INFO.DOCKEDTOP;
pub const HLTB_DOCKEDRIGHT = HLTB_INFO.DOCKEDRIGHT;
pub const HLTB_DOCKEDBOTTOM = HLTB_INFO.DOCKEDBOTTOM;
pub const HLTB_FLOATING = HLTB_INFO.FLOATING;

pub const HLTBINFO = extern struct {
    uDockType: u32,
    rcTbPos: RECT,
};

pub const HLBWIF_FLAGS = packed struct(u32) {
    HASFRAMEWNDINFO: u1 = 0,
    HASDOCWNDINFO: u1 = 0,
    FRAMEWNDMAXIMIZED: u1 = 0,
    DOCWNDMAXIMIZED: u1 = 0,
    HASWEBTOOLBARINFO: u1 = 0,
    WEBTOOLBARHIDDEN: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const HLBWIF_HASFRAMEWNDINFO = HLBWIF_FLAGS{ .HASFRAMEWNDINFO = 1 };
pub const HLBWIF_HASDOCWNDINFO = HLBWIF_FLAGS{ .HASDOCWNDINFO = 1 };
pub const HLBWIF_FRAMEWNDMAXIMIZED = HLBWIF_FLAGS{ .FRAMEWNDMAXIMIZED = 1 };
pub const HLBWIF_DOCWNDMAXIMIZED = HLBWIF_FLAGS{ .DOCWNDMAXIMIZED = 1 };
pub const HLBWIF_HASWEBTOOLBARINFO = HLBWIF_FLAGS{ .HASWEBTOOLBARINFO = 1 };
pub const HLBWIF_WEBTOOLBARHIDDEN = HLBWIF_FLAGS{ .WEBTOOLBARHIDDEN = 1 };

pub const HLBWINFO = extern struct {
    cbSize: u32,
    grfHLBWIF: u32,
    rcFramePos: RECT,
    rcDocPos: RECT,
    hltbinfo: HLTBINFO,
};

pub const HLID_INFO = enum(u32) {
    INVALID = 0,
    PREVIOUS = 4294967295,
    NEXT = 4294967294,
    CURRENT = 4294967293,
    STACKBOTTOM = 4294967292,
    STACKTOP = 4294967291,
};
pub const HLID_INVALID = HLID_INFO.INVALID;
pub const HLID_PREVIOUS = HLID_INFO.PREVIOUS;
pub const HLID_NEXT = HLID_INFO.NEXT;
pub const HLID_CURRENT = HLID_INFO.CURRENT;
pub const HLID_STACKBOTTOM = HLID_INFO.STACKBOTTOM;
pub const HLID_STACKTOP = HLID_INFO.STACKTOP;

pub const HLQF_INFO = enum(i32) {
    VALID = 1,
    CURRENT = 2,
};
pub const HLQF_ISVALID = HLQF_INFO.VALID;
pub const HLQF_ISCURRENT = HLQF_INFO.CURRENT;

const IID_IHlinkBrowseContext_Value = Guid.initString("79eac9c7-baf9-11ce-8c82-00aa004ba90b");
pub const IID_IHlinkBrowseContext = &IID_IHlinkBrowseContext_Value;
pub const IHlinkBrowseContext = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Register: *const fn(
            self: *const IHlinkBrowseContext,
            reserved: u32,
            piunk: ?*IUnknown,
            pimk: ?*IMoniker,
            pdwRegister: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObject: *const fn(
            self: *const IHlinkBrowseContext,
            pimk: ?*IMoniker,
            fBindIfRootRegistered: BOOL,
            ppiunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Revoke: *const fn(
            self: *const IHlinkBrowseContext,
            dwRegister: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBrowseWindowInfo: *const fn(
            self: *const IHlinkBrowseContext,
            phlbwi: ?*HLBWINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBrowseWindowInfo: *const fn(
            self: *const IHlinkBrowseContext,
            phlbwi: ?*HLBWINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInitialHlink: *const fn(
            self: *const IHlinkBrowseContext,
            pimkTarget: ?*IMoniker,
            pwzLocation: ?[*:0]const u16,
            pwzFriendlyName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNavigateHlink: *const fn(
            self: *const IHlinkBrowseContext,
            grfHLNF: u32,
            pimkTarget: ?*IMoniker,
            pwzLocation: ?[*:0]const u16,
            pwzFriendlyName: ?[*:0]const u16,
            puHLID: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateHlink: *const fn(
            self: *const IHlinkBrowseContext,
            uHLID: u32,
            pimkTarget: ?*IMoniker,
            pwzLocation: ?[*:0]const u16,
            pwzFriendlyName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumNavigationStack: *const fn(
            self: *const IHlinkBrowseContext,
            dwReserved: u32,
            grfHLFNAMEF: u32,
            ppienumhlitem: ?*?*IEnumHLITEM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryHlink: *const fn(
            self: *const IHlinkBrowseContext,
            grfHLQF: u32,
            uHLID: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHlink: *const fn(
            self: *const IHlinkBrowseContext,
            uHLID: u32,
            ppihl: ?*?*IHlink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCurrentHlink: *const fn(
            self: *const IHlinkBrowseContext,
            uHLID: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IHlinkBrowseContext,
            piunkOuter: ?*IUnknown,
            riid: ?*const Guid,
            ppiunkObj: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn(
            self: *const IHlinkBrowseContext,
            reserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Register(self: *const IHlinkBrowseContext, reserved: u32, piunk: ?*IUnknown, pimk: ?*IMoniker, pdwRegister: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Register(self, reserved, piunk, pimk, pdwRegister);
    }
    pub fn GetObject(self: *const IHlinkBrowseContext, pimk: ?*IMoniker, fBindIfRootRegistered: BOOL, ppiunk: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.GetObject(self, pimk, fBindIfRootRegistered, ppiunk);
    }
    pub fn Revoke(self: *const IHlinkBrowseContext, dwRegister: u32) callconv(.Inline) HRESULT {
        return self.vtable.Revoke(self, dwRegister);
    }
    pub fn SetBrowseWindowInfo(self: *const IHlinkBrowseContext, phlbwi: ?*HLBWINFO) callconv(.Inline) HRESULT {
        return self.vtable.SetBrowseWindowInfo(self, phlbwi);
    }
    pub fn GetBrowseWindowInfo(self: *const IHlinkBrowseContext, phlbwi: ?*HLBWINFO) callconv(.Inline) HRESULT {
        return self.vtable.GetBrowseWindowInfo(self, phlbwi);
    }
    pub fn SetInitialHlink(self: *const IHlinkBrowseContext, pimkTarget: ?*IMoniker, pwzLocation: ?[*:0]const u16, pwzFriendlyName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetInitialHlink(self, pimkTarget, pwzLocation, pwzFriendlyName);
    }
    pub fn OnNavigateHlink(self: *const IHlinkBrowseContext, grfHLNF: u32, pimkTarget: ?*IMoniker, pwzLocation: ?[*:0]const u16, pwzFriendlyName: ?[*:0]const u16, puHLID: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.OnNavigateHlink(self, grfHLNF, pimkTarget, pwzLocation, pwzFriendlyName, puHLID);
    }
    pub fn UpdateHlink(self: *const IHlinkBrowseContext, uHLID: u32, pimkTarget: ?*IMoniker, pwzLocation: ?[*:0]const u16, pwzFriendlyName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.UpdateHlink(self, uHLID, pimkTarget, pwzLocation, pwzFriendlyName);
    }
    pub fn EnumNavigationStack(self: *const IHlinkBrowseContext, dwReserved: u32, grfHLFNAMEF: u32, ppienumhlitem: ?*?*IEnumHLITEM) callconv(.Inline) HRESULT {
        return self.vtable.EnumNavigationStack(self, dwReserved, grfHLFNAMEF, ppienumhlitem);
    }
    pub fn QueryHlink(self: *const IHlinkBrowseContext, grfHLQF: u32, uHLID: u32) callconv(.Inline) HRESULT {
        return self.vtable.QueryHlink(self, grfHLQF, uHLID);
    }
    pub fn GetHlink(self: *const IHlinkBrowseContext, uHLID: u32, ppihl: ?*?*IHlink) callconv(.Inline) HRESULT {
        return self.vtable.GetHlink(self, uHLID, ppihl);
    }
    pub fn SetCurrentHlink(self: *const IHlinkBrowseContext, uHLID: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetCurrentHlink(self, uHLID);
    }
    pub fn Clone(self: *const IHlinkBrowseContext, piunkOuter: ?*IUnknown, riid: ?*const Guid, ppiunkObj: **IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, piunkOuter, riid, ppiunkObj);
    }
    pub fn Close(self: *const IHlinkBrowseContext, reserved: u32) callconv(.Inline) HRESULT {
        return self.vtable.Close(self, reserved);
    }
};

const IID_IExtensionServices_Value = Guid.initString("79eac9cb-baf9-11ce-8c82-00aa004ba90b");
pub const IID_IExtensionServices = &IID_IExtensionServices_Value;
pub const IExtensionServices = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAdditionalHeaders: *const fn(
            self: *const IExtensionServices,
            pwzAdditionalHeaders: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAuthenticateData: *const fn(
            self: *const IExtensionServices,
            phwnd: ?HWND,
            pwzUsername: ?[*:0]const u16,
            pwzPassword: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetAdditionalHeaders(self: *const IExtensionServices, pwzAdditionalHeaders: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetAdditionalHeaders(self, pwzAdditionalHeaders);
    }
    pub fn SetAuthenticateData(self: *const IExtensionServices, phwnd: ?HWND, pwzUsername: ?[*:0]const u16, pwzPassword: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetAuthenticateData(self, phwnd, pwzUsername, pwzPassword);
    }
};

const IID_ITravelEntry_Value = Guid.initString("f46edb3b-bc2f-11d0-9412-00aa00a3ebd3");
pub const IID_ITravelEntry = &IID_ITravelEntry_Value;
pub const ITravelEntry = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Invoke: *const fn(
            self: *const ITravelEntry,
            punk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Update: *const fn(
            self: *const ITravelEntry,
            punk: ?*IUnknown,
            fIsLocalAnchor: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPidl: *const fn(
            self: *const ITravelEntry,
            ppidl: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Invoke(self: *const ITravelEntry, punk: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.Invoke(self, punk);
    }
    pub fn Update(self: *const ITravelEntry, punk: ?*IUnknown, fIsLocalAnchor: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.Update(self, punk, fIsLocalAnchor);
    }
    pub fn GetPidl(self: *const ITravelEntry, ppidl: ?*?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.GetPidl(self, ppidl);
    }
};

const IID_ITravelLog_Value = Guid.initString("66a9cb08-4802-11d2-a561-00a0c92dbfe8");
pub const IID_ITravelLog = &IID_ITravelLog_Value;
pub const ITravelLog = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddEntry: *const fn(
            self: *const ITravelLog,
            punk: ?*IUnknown,
            fIsLocalAnchor: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateEntry: *const fn(
            self: *const ITravelLog,
            punk: ?*IUnknown,
            fIsLocalAnchor: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateExternal: *const fn(
            self: *const ITravelLog,
            punk: ?*IUnknown,
            punkHLBrowseContext: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Travel: *const fn(
            self: *const ITravelLog,
            punk: ?*IUnknown,
            iOffset: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTravelEntry: *const fn(
            self: *const ITravelLog,
            punk: ?*IUnknown,
            iOffset: i32,
            ppte: ?*?*ITravelEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindTravelEntry: *const fn(
            self: *const ITravelLog,
            punk: ?*IUnknown,
            pidl: ?*ITEMIDLIST,
            ppte: ?*?*ITravelEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetToolTipText: *const fn(
            self: *const ITravelLog,
            punk: ?*IUnknown,
            iOffset: i32,
            idsTemplate: i32,
            pwzText: [*:0]u16,
            cchText: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertMenuEntries: *const fn(
            self: *const ITravelLog,
            punk: ?*IUnknown,
            hmenu: ?HMENU,
            nPos: i32,
            idFirst: i32,
            idLast: i32,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const ITravelLog,
            pptl: ?*?*ITravelLog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CountEntries: *const fn(
            self: *const ITravelLog,
            punk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        Revert: *const fn(
            self: *const ITravelLog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn AddEntry(self: *const ITravelLog, punk: ?*IUnknown, fIsLocalAnchor: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.AddEntry(self, punk, fIsLocalAnchor);
    }
    pub fn UpdateEntry(self: *const ITravelLog, punk: ?*IUnknown, fIsLocalAnchor: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.UpdateEntry(self, punk, fIsLocalAnchor);
    }
    pub fn UpdateExternal(self: *const ITravelLog, punk: ?*IUnknown, punkHLBrowseContext: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.UpdateExternal(self, punk, punkHLBrowseContext);
    }
    pub fn Travel(self: *const ITravelLog, punk: ?*IUnknown, iOffset: i32) callconv(.Inline) HRESULT {
        return self.vtable.Travel(self, punk, iOffset);
    }
    pub fn GetTravelEntry(self: *const ITravelLog, punk: ?*IUnknown, iOffset: i32, ppte: ?*?*ITravelEntry) callconv(.Inline) HRESULT {
        return self.vtable.GetTravelEntry(self, punk, iOffset, ppte);
    }
    pub fn FindTravelEntry(self: *const ITravelLog, punk: ?*IUnknown, pidl: ?*ITEMIDLIST, ppte: ?*?*ITravelEntry) callconv(.Inline) HRESULT {
        return self.vtable.FindTravelEntry(self, punk, pidl, ppte);
    }
    pub fn GetToolTipText(self: *const ITravelLog, punk: ?*IUnknown, iOffset: i32, idsTemplate: i32, pwzText: [*:0]u16, cchText: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetToolTipText(self, punk, iOffset, idsTemplate, pwzText, cchText);
    }
    pub fn InsertMenuEntries(self: *const ITravelLog, punk: ?*IUnknown, hmenu: ?HMENU, nPos: i32, idFirst: i32, idLast: i32, dwFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.InsertMenuEntries(self, punk, hmenu, nPos, idFirst, idLast, dwFlags);
    }
    pub fn Clone(self: *const ITravelLog, pptl: ?*?*ITravelLog) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, pptl);
    }
    pub fn CountEntries(self: *const ITravelLog, punk: ?*IUnknown) callconv(.Inline) u32 {
        return self.vtable.CountEntries(self, punk);
    }
    pub fn Revert(self: *const ITravelLog) callconv(.Inline) HRESULT {
        return self.vtable.Revert(self);
    }
};

pub const CIE4ConnectionPoint = extern union {
    pub const VTable = extern struct {
        base: IConnectionPoint.VTable,
        DoInvokeIE4: *const fn(
            self: *const CIE4ConnectionPoint,
            pf: ?*BOOL,
            ppv: ?*?*anyopaque,
            dispid: i32,
            pdispparams: ?*DISPPARAMS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoInvokePIDLIE4: *const fn(
            self: *const CIE4ConnectionPoint,
            dispid: i32,
            pidl: ?*ITEMIDLIST,
            fCanCancel: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IConnectionPoint: IConnectionPoint,
    IUnknown: IUnknown,
    pub fn DoInvokeIE4(self: *const CIE4ConnectionPoint, pf: ?*BOOL, ppv: ?*?*anyopaque, dispid: i32, pdispparams: ?*DISPPARAMS) callconv(.Inline) HRESULT {
        return self.vtable.DoInvokeIE4(self, pf, ppv, dispid, pdispparams);
    }
    pub fn DoInvokePIDLIE4(self: *const CIE4ConnectionPoint, dispid: i32, pidl: ?*ITEMIDLIST, fCanCancel: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.DoInvokePIDLIE4(self, dispid, pidl, fCanCancel);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IExpDispSupportXP_Value = Guid.initString("2f0dd58c-f789-4f14-99fb-9293b3c9c212");
pub const IID_IExpDispSupportXP = &IID_IExpDispSupportXP_Value;
pub const IExpDispSupportXP = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindCIE4ConnectionPoint: *const fn(
            self: *const IExpDispSupportXP,
            riid: ?*const Guid,
            ppccp: ?*?*CIE4ConnectionPoint,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTranslateAccelerator: *const fn(
            self: *const IExpDispSupportXP,
            pMsg: ?*MSG,
            grfModifiers: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnInvoke: *const fn(
            self: *const IExpDispSupportXP,
            dispidMember: i32,
            iid: ?*const Guid,
            lcid: u32,
            wFlags: u16,
            pdispparams: ?*DISPPARAMS,
            pVarResult: ?*VARIANT,
            pexcepinfo: ?*EXCEPINFO,
            puArgErr: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn FindCIE4ConnectionPoint(self: *const IExpDispSupportXP, riid: ?*const Guid, ppccp: ?*?*CIE4ConnectionPoint) callconv(.Inline) HRESULT {
        return self.vtable.FindCIE4ConnectionPoint(self, riid, ppccp);
    }
    pub fn OnTranslateAccelerator(self: *const IExpDispSupportXP, pMsg: ?*MSG, grfModifiers: u32) callconv(.Inline) HRESULT {
        return self.vtable.OnTranslateAccelerator(self, pMsg, grfModifiers);
    }
    pub fn OnInvoke(self: *const IExpDispSupportXP, dispidMember: i32, iid: ?*const Guid, lcid: u32, wFlags: u16, pdispparams: ?*DISPPARAMS, pVarResult: ?*VARIANT, pexcepinfo: ?*EXCEPINFO, puArgErr: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.OnInvoke(self, dispidMember, iid, lcid, wFlags, pdispparams, pVarResult, pexcepinfo, puArgErr);
    }
};

const IID_IExpDispSupport_Value = Guid.initString("0d7d1d00-6fc0-11d0-a974-00c04fd705a2");
pub const IID_IExpDispSupport = &IID_IExpDispSupport_Value;
pub const IExpDispSupport = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindConnectionPoint: *const fn(
            self: *const IExpDispSupport,
            riid: ?*const Guid,
            ppccp: ?*?*IConnectionPoint,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTranslateAccelerator: *const fn(
            self: *const IExpDispSupport,
            pMsg: ?*MSG,
            grfModifiers: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnInvoke: *const fn(
            self: *const IExpDispSupport,
            dispidMember: i32,
            iid: ?*const Guid,
            lcid: u32,
            wFlags: u16,
            pdispparams: ?*DISPPARAMS,
            pVarResult: ?*VARIANT,
            pexcepinfo: ?*EXCEPINFO,
            puArgErr: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn FindConnectionPoint(self: *const IExpDispSupport, riid: ?*const Guid, ppccp: ?*?*IConnectionPoint) callconv(.Inline) HRESULT {
        return self.vtable.FindConnectionPoint(self, riid, ppccp);
    }
    pub fn OnTranslateAccelerator(self: *const IExpDispSupport, pMsg: ?*MSG, grfModifiers: u32) callconv(.Inline) HRESULT {
        return self.vtable.OnTranslateAccelerator(self, pMsg, grfModifiers);
    }
    pub fn OnInvoke(self: *const IExpDispSupport, dispidMember: i32, iid: ?*const Guid, lcid: u32, wFlags: u16, pdispparams: ?*DISPPARAMS, pVarResult: ?*VARIANT, pexcepinfo: ?*EXCEPINFO, puArgErr: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.OnInvoke(self, dispidMember, iid, lcid, wFlags, pdispparams, pVarResult, pexcepinfo, puArgErr);
    }
};

pub const BNSTATE = enum(i32) {
    NORMAL = 0,
    BEGIN_NAVIGATE = 1,
    NAVIGATE = 2,
};
pub const BNS_NORMAL = BNSTATE.NORMAL;
pub const BNS_BEGIN_NAVIGATE = BNSTATE.BEGIN_NAVIGATE;
pub const BNS_NAVIGATE = BNSTATE.NAVIGATE;

pub const SHELLBROWSERSHOWCONTROL = enum(i32) {
    HIDE = 0,
    SHOW = 1,
    TOGGLE = 2,
    QUERY = 3,
};
pub const SBSC_HIDE = SHELLBROWSERSHOWCONTROL.HIDE;
pub const SBSC_SHOW = SHELLBROWSERSHOWCONTROL.SHOW;
pub const SBSC_TOGGLE = SHELLBROWSERSHOWCONTROL.TOGGLE;
pub const SBSC_QUERY = SHELLBROWSERSHOWCONTROL.QUERY;

const IID_IBrowserService_Value = Guid.initString("02ba3b52-0547-11d1-b833-00c04fc9b31f");
pub const IID_IBrowserService = &IID_IBrowserService_Value;
pub const IBrowserService = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetParentSite: *const fn(
            self: *const IBrowserService,
            ppipsite: ?*?*IOleInPlaceSite,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTitle: *const fn(
            self: *const IBrowserService,
            psv: ?*IShellView,
            pszName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTitle: *const fn(
            self: *const IBrowserService,
            psv: ?*IShellView,
            pszName: [*:0]u16,
            cchName: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOleObject: *const fn(
            self: *const IBrowserService,
            ppobjv: ?*?*IOleObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTravelLog: *const fn(
            self: *const IBrowserService,
            pptl: ?*?*ITravelLog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowControlWindow: *const fn(
            self: *const IBrowserService,
            id: u32,
            fShow: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsControlWindowShown: *const fn(
            self: *const IBrowserService,
            id: u32,
            pfShown: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IEGetDisplayName: *const fn(
            self: *const IBrowserService,
            pidl: ?*ITEMIDLIST,
            pwszName: ?PWSTR,
            uFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IEParseDisplayName: *const fn(
            self: *const IBrowserService,
            uiCP: u32,
            pwszPath: ?[*:0]const u16,
            ppidlOut: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisplayParseError: *const fn(
            self: *const IBrowserService,
            hres: HRESULT,
            pwszPath: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NavigateToPidl: *const fn(
            self: *const IBrowserService,
            pidl: ?*ITEMIDLIST,
            grfHLNF: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNavigateState: *const fn(
            self: *const IBrowserService,
            bnstate: BNSTATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNavigateState: *const fn(
            self: *const IBrowserService,
            pbnstate: ?*BNSTATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyRedirect: *const fn(
            self: *const IBrowserService,
            psv: ?*IShellView,
            pidl: ?*ITEMIDLIST,
            pfDidBrowse: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateWindowList: *const fn(
            self: *const IBrowserService,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateBackForwardState: *const fn(
            self: *const IBrowserService,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFlags: *const fn(
            self: *const IBrowserService,
            dwFlags: u32,
            dwFlagMask: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: *const fn(
            self: *const IBrowserService,
            pdwFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanNavigateNow: *const fn(
            self: *const IBrowserService,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPidl: *const fn(
            self: *const IBrowserService,
            ppidl: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetReferrer: *const fn(
            self: *const IBrowserService,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBrowserIndex: *const fn(
            self: *const IBrowserService,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetBrowserByIndex: *const fn(
            self: *const IBrowserService,
            dwID: u32,
            ppunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHistoryObject: *const fn(
            self: *const IBrowserService,
            ppole: ?*?*IOleObject,
            pstm: ?*?*IStream,
            ppbc: ?*?*IBindCtx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHistoryObject: *const fn(
            self: *const IBrowserService,
            pole: ?*IOleObject,
            fIsLocalAnchor: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CacheOLEServer: *const fn(
            self: *const IBrowserService,
            pole: ?*IOleObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSetCodePage: *const fn(
            self: *const IBrowserService,
            pvarIn: ?*VARIANT,
            pvarOut: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnHttpEquiv: *const fn(
            self: *const IBrowserService,
            psv: ?*IShellView,
            fDone: BOOL,
            pvarargIn: ?*VARIANT,
            pvarargOut: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPalette: *const fn(
            self: *const IBrowserService,
            hpal: ?*?HPALETTE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterWindow: *const fn(
            self: *const IBrowserService,
            fForceRegister: BOOL,
            swc: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetParentSite(self: *const IBrowserService, ppipsite: ?*?*IOleInPlaceSite) callconv(.Inline) HRESULT {
        return self.vtable.GetParentSite(self, ppipsite);
    }
    pub fn SetTitle(self: *const IBrowserService, psv: ?*IShellView, pszName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetTitle(self, psv, pszName);
    }
    pub fn GetTitle(self: *const IBrowserService, psv: ?*IShellView, pszName: [*:0]u16, cchName: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetTitle(self, psv, pszName, cchName);
    }
    pub fn GetOleObject(self: *const IBrowserService, ppobjv: ?*?*IOleObject) callconv(.Inline) HRESULT {
        return self.vtable.GetOleObject(self, ppobjv);
    }
    pub fn GetTravelLog(self: *const IBrowserService, pptl: ?*?*ITravelLog) callconv(.Inline) HRESULT {
        return self.vtable.GetTravelLog(self, pptl);
    }
    pub fn ShowControlWindow(self: *const IBrowserService, id: u32, fShow: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.ShowControlWindow(self, id, fShow);
    }
    pub fn IsControlWindowShown(self: *const IBrowserService, id: u32, pfShown: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.IsControlWindowShown(self, id, pfShown);
    }
    pub fn IEGetDisplayName(self: *const IBrowserService, pidl: ?*ITEMIDLIST, pwszName: ?PWSTR, uFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.IEGetDisplayName(self, pidl, pwszName, uFlags);
    }
    pub fn IEParseDisplayName(self: *const IBrowserService, uiCP: u32, pwszPath: ?[*:0]const u16, ppidlOut: ?*?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.IEParseDisplayName(self, uiCP, pwszPath, ppidlOut);
    }
    pub fn DisplayParseError(self: *const IBrowserService, hres: HRESULT, pwszPath: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.DisplayParseError(self, hres, pwszPath);
    }
    pub fn NavigateToPidl(self: *const IBrowserService, pidl: ?*ITEMIDLIST, grfHLNF: u32) callconv(.Inline) HRESULT {
        return self.vtable.NavigateToPidl(self, pidl, grfHLNF);
    }
    pub fn SetNavigateState(self: *const IBrowserService, bnstate: BNSTATE) callconv(.Inline) HRESULT {
        return self.vtable.SetNavigateState(self, bnstate);
    }
    pub fn GetNavigateState(self: *const IBrowserService, pbnstate: ?*BNSTATE) callconv(.Inline) HRESULT {
        return self.vtable.GetNavigateState(self, pbnstate);
    }
    pub fn NotifyRedirect(self: *const IBrowserService, psv: ?*IShellView, pidl: ?*ITEMIDLIST, pfDidBrowse: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.NotifyRedirect(self, psv, pidl, pfDidBrowse);
    }
    pub fn UpdateWindowList(self: *const IBrowserService) callconv(.Inline) HRESULT {
        return self.vtable.UpdateWindowList(self);
    }
    pub fn UpdateBackForwardState(self: *const IBrowserService) callconv(.Inline) HRESULT {
        return self.vtable.UpdateBackForwardState(self);
    }
    pub fn SetFlags(self: *const IBrowserService, dwFlags: u32, dwFlagMask: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetFlags(self, dwFlags, dwFlagMask);
    }
    pub fn GetFlags(self: *const IBrowserService, pdwFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetFlags(self, pdwFlags);
    }
    pub fn CanNavigateNow(self: *const IBrowserService) callconv(.Inline) HRESULT {
        return self.vtable.CanNavigateNow(self);
    }
    pub fn GetPidl(self: *const IBrowserService, ppidl: ?*?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.GetPidl(self, ppidl);
    }
    pub fn SetReferrer(self: *const IBrowserService, pidl: ?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.SetReferrer(self, pidl);
    }
    pub fn GetBrowserIndex(self: *const IBrowserService) callconv(.Inline) u32 {
        return self.vtable.GetBrowserIndex(self);
    }
    pub fn GetBrowserByIndex(self: *const IBrowserService, dwID: u32, ppunk: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.GetBrowserByIndex(self, dwID, ppunk);
    }
    pub fn GetHistoryObject(self: *const IBrowserService, ppole: ?*?*IOleObject, pstm: ?*?*IStream, ppbc: ?*?*IBindCtx) callconv(.Inline) HRESULT {
        return self.vtable.GetHistoryObject(self, ppole, pstm, ppbc);
    }
    pub fn SetHistoryObject(self: *const IBrowserService, pole: ?*IOleObject, fIsLocalAnchor: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetHistoryObject(self, pole, fIsLocalAnchor);
    }
    pub fn CacheOLEServer(self: *const IBrowserService, pole: ?*IOleObject) callconv(.Inline) HRESULT {
        return self.vtable.CacheOLEServer(self, pole);
    }
    pub fn GetSetCodePage(self: *const IBrowserService, pvarIn: ?*VARIANT, pvarOut: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetSetCodePage(self, pvarIn, pvarOut);
    }
    pub fn OnHttpEquiv(self: *const IBrowserService, psv: ?*IShellView, fDone: BOOL, pvarargIn: ?*VARIANT, pvarargOut: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.OnHttpEquiv(self, psv, fDone, pvarargIn, pvarargOut);
    }
    pub fn GetPalette(self: *const IBrowserService, hpal: ?*?HPALETTE) callconv(.Inline) HRESULT {
        return self.vtable.GetPalette(self, hpal);
    }
    pub fn RegisterWindow(self: *const IBrowserService, fForceRegister: BOOL, swc: i32) callconv(.Inline) HRESULT {
        return self.vtable.RegisterWindow(self, fForceRegister, swc);
    }
};

const IID_IShellService_Value = Guid.initString("5836fb00-8187-11cf-a12b-00aa004ae837");
pub const IID_IShellService = &IID_IShellService_Value;
pub const IShellService = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetOwner: *const fn(
            self: *const IShellService,
            punkOwner: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetOwner(self: *const IShellService, punkOwner: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.SetOwner(self, punkOwner);
    }
};

pub const SECURELOCKCODE = enum(i32) {
    NOCHANGE = -1,
    SET_UNSECURE = 0,
    SET_MIXED = 1,
    SET_SECUREUNKNOWNBIT = 2,
    SET_SECURE40BIT = 3,
    SET_SECURE56BIT = 4,
    SET_FORTEZZA = 5,
    SET_SECURE128BIT = 6,
    FIRSTSUGGEST = 7,
    SUGGEST_MIXED = 8,
    SUGGEST_SECUREUNKNOWNBIT = 9,
    SUGGEST_SECURE40BIT = 10,
    SUGGEST_SECURE56BIT = 11,
    SUGGEST_FORTEZZA = 12,
    SUGGEST_SECURE128BIT = 13,
    pub const SUGGEST_UNSECURE = .FIRSTSUGGEST;
};
pub const SECURELOCK_NOCHANGE = SECURELOCKCODE.NOCHANGE;
pub const SECURELOCK_SET_UNSECURE = SECURELOCKCODE.SET_UNSECURE;
pub const SECURELOCK_SET_MIXED = SECURELOCKCODE.SET_MIXED;
pub const SECURELOCK_SET_SECUREUNKNOWNBIT = SECURELOCKCODE.SET_SECUREUNKNOWNBIT;
pub const SECURELOCK_SET_SECURE40BIT = SECURELOCKCODE.SET_SECURE40BIT;
pub const SECURELOCK_SET_SECURE56BIT = SECURELOCKCODE.SET_SECURE56BIT;
pub const SECURELOCK_SET_FORTEZZA = SECURELOCKCODE.SET_FORTEZZA;
pub const SECURELOCK_SET_SECURE128BIT = SECURELOCKCODE.SET_SECURE128BIT;
pub const SECURELOCK_FIRSTSUGGEST = SECURELOCKCODE.FIRSTSUGGEST;
pub const SECURELOCK_SUGGEST_UNSECURE = SECURELOCKCODE.FIRSTSUGGEST;
pub const SECURELOCK_SUGGEST_MIXED = SECURELOCKCODE.SUGGEST_MIXED;
pub const SECURELOCK_SUGGEST_SECUREUNKNOWNBIT = SECURELOCKCODE.SUGGEST_SECUREUNKNOWNBIT;
pub const SECURELOCK_SUGGEST_SECURE40BIT = SECURELOCKCODE.SUGGEST_SECURE40BIT;
pub const SECURELOCK_SUGGEST_SECURE56BIT = SECURELOCKCODE.SUGGEST_SECURE56BIT;
pub const SECURELOCK_SUGGEST_FORTEZZA = SECURELOCKCODE.SUGGEST_FORTEZZA;
pub const SECURELOCK_SUGGEST_SECURE128BIT = SECURELOCKCODE.SUGGEST_SECURE128BIT;

pub const BASEBROWSERDATAXP = extern struct {
    _hwnd: ?HWND,
    _ptl: ?*ITravelLog,
    _phlf: ?*IHlinkFrame,
    _pautoWB2: ?*IWebBrowser2,
    _pautoEDS: ?*IExpDispSupportXP,
    _pautoSS: ?*IShellService,
    _eSecureLockIcon: i32,
    _bitfield: u32,
    _uActivateState: u32,
    _pidlViewState: ?*ITEMIDLIST,
    _pctView: ?*IOleCommandTarget,
    _pidlCur: ?*ITEMIDLIST,
    _psv: ?*IShellView,
    _psf: ?*IShellFolder,
    _hwndView: ?HWND,
    _pszTitleCur: ?PWSTR,
    _pidlPending: ?*ITEMIDLIST,
    _psvPending: ?*IShellView,
    _psfPending: ?*IShellFolder,
    _hwndViewPending: ?HWND,
    _pszTitlePending: ?PWSTR,
    _fIsViewMSHTML: BOOL,
    _fPrivacyImpacted: BOOL,
    _clsidView: Guid,
    _clsidViewPending: Guid,
    _hwndFrame: ?HWND,
};

pub const BASEBROWSERDATALH = extern struct {
    _hwnd: ?HWND,
    _ptl: ?*ITravelLog,
    _phlf: ?*IHlinkFrame,
    _pautoWB2: ?*IWebBrowser2,
    _pautoEDS: ?*IExpDispSupport,
    _pautoSS: ?*IShellService,
    _eSecureLockIcon: i32,
    _bitfield: u32,
    _uActivateState: u32,
    _pidlViewState: ?*ITEMIDLIST,
    _pctView: ?*IOleCommandTarget,
    _pidlCur: ?*ITEMIDLIST,
    _psv: ?*IShellView,
    _psf: ?*IShellFolder,
    _hwndView: ?HWND,
    _pszTitleCur: ?PWSTR,
    _pidlPending: ?*ITEMIDLIST,
    _psvPending: ?*IShellView,
    _psfPending: ?*IShellFolder,
    _hwndViewPending: ?HWND,
    _pszTitlePending: ?PWSTR,
    _fIsViewMSHTML: BOOL,
    _fPrivacyImpacted: BOOL,
    _clsidView: Guid,
    _clsidViewPending: Guid,
    _hwndFrame: ?HWND,
    _lPhishingFilterStatus: i32,
};

pub const FOLDERSETDATA = extern struct {
    _fs: FOLDERSETTINGS,
    _vidRestore: Guid,
    _dwViewPriority: u32,
};

pub const TOOLBARITEM = extern struct {
    ptbar: ?*IDockingWindow,
    rcBorderTool: RECT,
    pwszItem: ?PWSTR,
    fShow: BOOL,
    hMon: ?HMONITOR,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IBrowserService2_Value = Guid.initString("68bd21cc-438b-11d2-a560-00a0c92dbfe8");
pub const IID_IBrowserService2 = &IID_IBrowserService2_Value;
pub const IBrowserService2 = extern union {
    pub const VTable = extern struct {
        base: IBrowserService.VTable,
        WndProcBS: *const fn(
            self: *const IBrowserService2,
            hwnd: ?HWND,
            uMsg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) LRESULT,
        SetAsDefFolderSettings: *const fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewRect: *const fn(
            self: *const IBrowserService2,
            prc: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSize: *const fn(
            self: *const IBrowserService2,
            wParam: WPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCreate: *const fn(
            self: *const IBrowserService2,
            pcs: ?*CREATESTRUCTW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCommand: *const fn(
            self: *const IBrowserService2,
            wParam: WPARAM,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) LRESULT,
        OnDestroy: *const fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNotify: *const fn(
            self: *const IBrowserService2,
            pnm: ?*NMHDR,
        ) callconv(@import("std").os.windows.WINAPI) LRESULT,
        OnSetFocus: *const fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnFrameWindowActivateBS: *const fn(
            self: *const IBrowserService2,
            fActive: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseShellView: *const fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ActivatePendingView: *const fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateViewWindow: *const fn(
            self: *const IBrowserService2,
            psvNew: ?*IShellView,
            psvOld: ?*IShellView,
            prcView: ?*RECT,
            phwnd: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBrowserPropSheetExt: *const fn(
            self: *const IBrowserService2,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewWindow: *const fn(
            self: *const IBrowserService2,
            phwndView: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBaseBrowserData: *const fn(
            self: *const IBrowserService2,
            pbbd: ?*?*BASEBROWSERDATALH,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutBaseBrowserData: *const fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) ?*BASEBROWSERDATALH,
        InitializeTravelLog: *const fn(
            self: *const IBrowserService2,
            ptl: ?*ITravelLog,
            dw: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTopBrowser: *const fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Offline: *const fn(
            self: *const IBrowserService2,
            iCmd: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AllowViewResize: *const fn(
            self: *const IBrowserService2,
            f: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActivateState: *const fn(
            self: *const IBrowserService2,
            u: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateSecureLockIcon: *const fn(
            self: *const IBrowserService2,
            eSecureLock: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDownloadManager: *const fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeTransitionSite: *const fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _Initialize: *const fn(
            self: *const IBrowserService2,
            hwnd: ?HWND,
            pauto: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _CancelPendingNavigationAsync: *const fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _CancelPendingView: *const fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _MaySaveChanges: *const fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _PauseOrResumeView: *const fn(
            self: *const IBrowserService2,
            fPaused: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _DisableModeless: *const fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _NavigateToPidl2: *const fn(
            self: *const IBrowserService2,
            pidl: ?*ITEMIDLIST,
            grfHLNF: u32,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _TryShell2Rename: *const fn(
            self: *const IBrowserService2,
            psv: ?*IShellView,
            pidlNew: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _SwitchActivationNow: *const fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _ExecChildren: *const fn(
            self: *const IBrowserService2,
            punkBar: ?*IUnknown,
            fBroadcast: BOOL,
            pguidCmdGroup: ?*const Guid,
            nCmdID: u32,
            nCmdexecopt: u32,
            pvarargIn: ?*VARIANT,
            pvarargOut: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _SendChildren: *const fn(
            self: *const IBrowserService2,
            hwndBar: ?HWND,
            fBroadcast: BOOL,
            uMsg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderSetData: *const fn(
            self: *const IBrowserService2,
            pfsd: ?*FOLDERSETDATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _OnFocusChange: *const fn(
            self: *const IBrowserService2,
            itb: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        v_ShowHideChildWindows: *const fn(
            self: *const IBrowserService2,
            fChildOnly: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _get_itbLastFocus: *const fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        _put_itbLastFocus: *const fn(
            self: *const IBrowserService2,
            itbLastFocus: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _UIActivateView: *const fn(
            self: *const IBrowserService2,
            uState: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _GetViewBorderRect: *const fn(
            self: *const IBrowserService2,
            prc: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _UpdateViewRectSize: *const fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _ResizeNextBorder: *const fn(
            self: *const IBrowserService2,
            itb: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _ResizeView: *const fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _GetEffectiveClientArea: *const fn(
            self: *const IBrowserService2,
            lprectBorder: ?*RECT,
            hmon: ?HMONITOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        v_GetViewStream: *const fn(
            self: *const IBrowserService2,
            pidl: ?*ITEMIDLIST,
            grfMode: u32,
            pwszName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) ?*IStream,
        ForwardViewMsg: *const fn(
            self: *const IBrowserService2,
            uMsg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) LRESULT,
        SetAcceleratorMenu: *const fn(
            self: *const IBrowserService2,
            hacc: ?HACCEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _GetToolbarCount: *const fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) i32,
        _GetToolbarItem: *const fn(
            self: *const IBrowserService2,
            itb: i32,
        ) callconv(@import("std").os.windows.WINAPI) ?*TOOLBARITEM,
        _SaveToolbars: *const fn(
            self: *const IBrowserService2,
            pstm: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _LoadToolbars: *const fn(
            self: *const IBrowserService2,
            pstm: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _CloseAndReleaseToolbars: *const fn(
            self: *const IBrowserService2,
            fClose: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        v_MayGetNextToolbarFocus: *const fn(
            self: *const IBrowserService2,
            lpMsg: ?*MSG,
            itbNext: u32,
            citb: i32,
            pptbi: ?*?*TOOLBARITEM,
            phwnd: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _ResizeNextBorderHelper: *const fn(
            self: *const IBrowserService2,
            itb: u32,
            bUseHmonitor: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _FindTBar: *const fn(
            self: *const IBrowserService2,
            punkSrc: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        _SetFocus: *const fn(
            self: *const IBrowserService2,
            ptbi: ?*TOOLBARITEM,
            hwnd: ?HWND,
            lpMsg: ?*MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        v_MayTranslateAccelerator: *const fn(
            self: *const IBrowserService2,
            pmsg: ?*MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _GetBorderDWHelper: *const fn(
            self: *const IBrowserService2,
            punkSrc: ?*IUnknown,
            lprectBorder: ?*RECT,
            bUseHmonitor: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        v_CheckZoneCrossing: *const fn(
            self: *const IBrowserService2,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IBrowserService: IBrowserService,
    IUnknown: IUnknown,
    pub fn WndProcBS(self: *const IBrowserService2, hwnd: ?HWND, uMsg: u32, wParam: WPARAM, lParam: LPARAM) callconv(.Inline) LRESULT {
        return self.vtable.WndProcBS(self, hwnd, uMsg, wParam, lParam);
    }
    pub fn SetAsDefFolderSettings(self: *const IBrowserService2) callconv(.Inline) HRESULT {
        return self.vtable.SetAsDefFolderSettings(self);
    }
    pub fn GetViewRect(self: *const IBrowserService2, prc: ?*RECT) callconv(.Inline) HRESULT {
        return self.vtable.GetViewRect(self, prc);
    }
    pub fn OnSize(self: *const IBrowserService2, wParam: WPARAM) callconv(.Inline) HRESULT {
        return self.vtable.OnSize(self, wParam);
    }
    pub fn OnCreate(self: *const IBrowserService2, pcs: ?*CREATESTRUCTW) callconv(.Inline) HRESULT {
        return self.vtable.OnCreate(self, pcs);
    }
    pub fn OnCommand(self: *const IBrowserService2, wParam: WPARAM, lParam: LPARAM) callconv(.Inline) LRESULT {
        return self.vtable.OnCommand(self, wParam, lParam);
    }
    pub fn OnDestroy(self: *const IBrowserService2) callconv(.Inline) HRESULT {
        return self.vtable.OnDestroy(self);
    }
    pub fn OnNotify(self: *const IBrowserService2, pnm: ?*NMHDR) callconv(.Inline) LRESULT {
        return self.vtable.OnNotify(self, pnm);
    }
    pub fn OnSetFocus(self: *const IBrowserService2) callconv(.Inline) HRESULT {
        return self.vtable.OnSetFocus(self);
    }
    pub fn OnFrameWindowActivateBS(self: *const IBrowserService2, fActive: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.OnFrameWindowActivateBS(self, fActive);
    }
    pub fn ReleaseShellView(self: *const IBrowserService2) callconv(.Inline) HRESULT {
        return self.vtable.ReleaseShellView(self);
    }
    pub fn ActivatePendingView(self: *const IBrowserService2) callconv(.Inline) HRESULT {
        return self.vtable.ActivatePendingView(self);
    }
    pub fn CreateViewWindow(self: *const IBrowserService2, psvNew: ?*IShellView, psvOld: ?*IShellView, prcView: ?*RECT, phwnd: ?*?HWND) callconv(.Inline) HRESULT {
        return self.vtable.CreateViewWindow(self, psvNew, psvOld, prcView, phwnd);
    }
    pub fn CreateBrowserPropSheetExt(self: *const IBrowserService2, riid: ?*const Guid, ppv: ?*?*anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.CreateBrowserPropSheetExt(self, riid, ppv);
    }
    pub fn GetViewWindow(self: *const IBrowserService2, phwndView: ?*?HWND) callconv(.Inline) HRESULT {
        return self.vtable.GetViewWindow(self, phwndView);
    }
    pub fn GetBaseBrowserData(self: *const IBrowserService2, pbbd: ?*?*BASEBROWSERDATALH) callconv(.Inline) HRESULT {
        return self.vtable.GetBaseBrowserData(self, pbbd);
    }
    pub fn PutBaseBrowserData(self: *const IBrowserService2) callconv(.Inline) ?*BASEBROWSERDATALH {
        return self.vtable.PutBaseBrowserData(self);
    }
    pub fn InitializeTravelLog(self: *const IBrowserService2, ptl: ?*ITravelLog, dw: u32) callconv(.Inline) HRESULT {
        return self.vtable.InitializeTravelLog(self, ptl, dw);
    }
    pub fn SetTopBrowser(self: *const IBrowserService2) callconv(.Inline) HRESULT {
        return self.vtable.SetTopBrowser(self);
    }
    pub fn Offline(self: *const IBrowserService2, iCmd: i32) callconv(.Inline) HRESULT {
        return self.vtable.Offline(self, iCmd);
    }
    pub fn AllowViewResize(self: *const IBrowserService2, f: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.AllowViewResize(self, f);
    }
    pub fn SetActivateState(self: *const IBrowserService2, u: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetActivateState(self, u);
    }
    pub fn UpdateSecureLockIcon(self: *const IBrowserService2, eSecureLock: i32) callconv(.Inline) HRESULT {
        return self.vtable.UpdateSecureLockIcon(self, eSecureLock);
    }
    pub fn InitializeDownloadManager(self: *const IBrowserService2) callconv(.Inline) HRESULT {
        return self.vtable.InitializeDownloadManager(self);
    }
    pub fn InitializeTransitionSite(self: *const IBrowserService2) callconv(.Inline) HRESULT {
        return self.vtable.InitializeTransitionSite(self);
    }
    pub fn _Initialize(self: *const IBrowserService2, hwnd: ?HWND, pauto: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable._Initialize(self, hwnd, pauto);
    }
    pub fn _CancelPendingNavigationAsync(self: *const IBrowserService2) callconv(.Inline) HRESULT {
        return self.vtable._CancelPendingNavigationAsync(self);
    }
    pub fn _CancelPendingView(self: *const IBrowserService2) callconv(.Inline) HRESULT {
        return self.vtable._CancelPendingView(self);
    }
    pub fn _MaySaveChanges(self: *const IBrowserService2) callconv(.Inline) HRESULT {
        return self.vtable._MaySaveChanges(self);
    }
    pub fn _PauseOrResumeView(self: *const IBrowserService2, fPaused: BOOL) callconv(.Inline) HRESULT {
        return self.vtable._PauseOrResumeView(self, fPaused);
    }
    pub fn _DisableModeless(self: *const IBrowserService2) callconv(.Inline) HRESULT {
        return self.vtable._DisableModeless(self);
    }
    pub fn _NavigateToPidl2(self: *const IBrowserService2, pidl: ?*ITEMIDLIST, grfHLNF: u32, dwFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable._NavigateToPidl2(self, pidl, grfHLNF, dwFlags);
    }
    pub fn _TryShell2Rename(self: *const IBrowserService2, psv: ?*IShellView, pidlNew: ?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable._TryShell2Rename(self, psv, pidlNew);
    }
    pub fn _SwitchActivationNow(self: *const IBrowserService2) callconv(.Inline) HRESULT {
        return self.vtable._SwitchActivationNow(self);
    }
    pub fn _ExecChildren(self: *const IBrowserService2, punkBar: ?*IUnknown, fBroadcast: BOOL, pguidCmdGroup: ?*const Guid, nCmdID: u32, nCmdexecopt: u32, pvarargIn: ?*VARIANT, pvarargOut: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable._ExecChildren(self, punkBar, fBroadcast, pguidCmdGroup, nCmdID, nCmdexecopt, pvarargIn, pvarargOut);
    }
    pub fn _SendChildren(self: *const IBrowserService2, hwndBar: ?HWND, fBroadcast: BOOL, uMsg: u32, wParam: WPARAM, lParam: LPARAM) callconv(.Inline) HRESULT {
        return self.vtable._SendChildren(self, hwndBar, fBroadcast, uMsg, wParam, lParam);
    }
    pub fn GetFolderSetData(self: *const IBrowserService2, pfsd: ?*FOLDERSETDATA) callconv(.Inline) HRESULT {
        return self.vtable.GetFolderSetData(self, pfsd);
    }
    pub fn _OnFocusChange(self: *const IBrowserService2, itb: u32) callconv(.Inline) HRESULT {
        return self.vtable._OnFocusChange(self, itb);
    }
    pub fn v_ShowHideChildWindows(self: *const IBrowserService2, fChildOnly: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.v_ShowHideChildWindows(self, fChildOnly);
    }
    pub fn _get_itbLastFocus(self: *const IBrowserService2) callconv(.Inline) u32 {
        return self.vtable._get_itbLastFocus(self);
    }
    pub fn _put_itbLastFocus(self: *const IBrowserService2, itbLastFocus: u32) callconv(.Inline) HRESULT {
        return self.vtable._put_itbLastFocus(self, itbLastFocus);
    }
    pub fn _UIActivateView(self: *const IBrowserService2, uState: u32) callconv(.Inline) HRESULT {
        return self.vtable._UIActivateView(self, uState);
    }
    pub fn _GetViewBorderRect(self: *const IBrowserService2, prc: ?*RECT) callconv(.Inline) HRESULT {
        return self.vtable._GetViewBorderRect(self, prc);
    }
    pub fn _UpdateViewRectSize(self: *const IBrowserService2) callconv(.Inline) HRESULT {
        return self.vtable._UpdateViewRectSize(self);
    }
    pub fn _ResizeNextBorder(self: *const IBrowserService2, itb: u32) callconv(.Inline) HRESULT {
        return self.vtable._ResizeNextBorder(self, itb);
    }
    pub fn _ResizeView(self: *const IBrowserService2) callconv(.Inline) HRESULT {
        return self.vtable._ResizeView(self);
    }
    pub fn _GetEffectiveClientArea(self: *const IBrowserService2, lprectBorder: ?*RECT, hmon: ?HMONITOR) callconv(.Inline) HRESULT {
        return self.vtable._GetEffectiveClientArea(self, lprectBorder, hmon);
    }
    pub fn v_GetViewStream(self: *const IBrowserService2, pidl: ?*ITEMIDLIST, grfMode: u32, pwszName: ?[*:0]const u16) callconv(.Inline) ?*IStream {
        return self.vtable.v_GetViewStream(self, pidl, grfMode, pwszName);
    }
    pub fn ForwardViewMsg(self: *const IBrowserService2, uMsg: u32, wParam: WPARAM, lParam: LPARAM) callconv(.Inline) LRESULT {
        return self.vtable.ForwardViewMsg(self, uMsg, wParam, lParam);
    }
    pub fn SetAcceleratorMenu(self: *const IBrowserService2, hacc: ?HACCEL) callconv(.Inline) HRESULT {
        return self.vtable.SetAcceleratorMenu(self, hacc);
    }
    pub fn _GetToolbarCount(self: *const IBrowserService2) callconv(.Inline) i32 {
        return self.vtable._GetToolbarCount(self);
    }
    pub fn _GetToolbarItem(self: *const IBrowserService2, itb: i32) callconv(.Inline) ?*TOOLBARITEM {
        return self.vtable._GetToolbarItem(self, itb);
    }
    pub fn _SaveToolbars(self: *const IBrowserService2, pstm: ?*IStream) callconv(.Inline) HRESULT {
        return self.vtable._SaveToolbars(self, pstm);
    }
    pub fn _LoadToolbars(self: *const IBrowserService2, pstm: ?*IStream) callconv(.Inline) HRESULT {
        return self.vtable._LoadToolbars(self, pstm);
    }
    pub fn _CloseAndReleaseToolbars(self: *const IBrowserService2, fClose: BOOL) callconv(.Inline) HRESULT {
        return self.vtable._CloseAndReleaseToolbars(self, fClose);
    }
    pub fn v_MayGetNextToolbarFocus(self: *const IBrowserService2, lpMsg: ?*MSG, itbNext: u32, citb: i32, pptbi: ?*?*TOOLBARITEM, phwnd: ?*?HWND) callconv(.Inline) HRESULT {
        return self.vtable.v_MayGetNextToolbarFocus(self, lpMsg, itbNext, citb, pptbi, phwnd);
    }
    pub fn _ResizeNextBorderHelper(self: *const IBrowserService2, itb: u32, bUseHmonitor: BOOL) callconv(.Inline) HRESULT {
        return self.vtable._ResizeNextBorderHelper(self, itb, bUseHmonitor);
    }
    pub fn _FindTBar(self: *const IBrowserService2, punkSrc: ?*IUnknown) callconv(.Inline) u32 {
        return self.vtable._FindTBar(self, punkSrc);
    }
    pub fn _SetFocus(self: *const IBrowserService2, ptbi: ?*TOOLBARITEM, hwnd: ?HWND, lpMsg: ?*MSG) callconv(.Inline) HRESULT {
        return self.vtable._SetFocus(self, ptbi, hwnd, lpMsg);
    }
    pub fn v_MayTranslateAccelerator(self: *const IBrowserService2, pmsg: ?*MSG) callconv(.Inline) HRESULT {
        return self.vtable.v_MayTranslateAccelerator(self, pmsg);
    }
    pub fn _GetBorderDWHelper(self: *const IBrowserService2, punkSrc: ?*IUnknown, lprectBorder: ?*RECT, bUseHmonitor: BOOL) callconv(.Inline) HRESULT {
        return self.vtable._GetBorderDWHelper(self, punkSrc, lprectBorder, bUseHmonitor);
    }
    pub fn v_CheckZoneCrossing(self: *const IBrowserService2, pidl: ?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.v_CheckZoneCrossing(self, pidl);
    }
};

pub const IEPDNFLAGS = enum(i32) {
    I = 1,
};
pub const IEPDN_BINDINGUI = IEPDNFLAGS.I;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IBrowserService3_Value = Guid.initString("27d7ce21-762d-48f3-86f3-40e2fd3749c4");
pub const IID_IBrowserService3 = &IID_IBrowserService3_Value;
pub const IBrowserService3 = extern union {
    pub const VTable = extern struct {
        base: IBrowserService2.VTable,
        _PositionViewWindow: *const fn(
            self: *const IBrowserService3,
            hwnd: ?HWND,
            prc: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IEParseDisplayNameEx: *const fn(
            self: *const IBrowserService3,
            uiCP: u32,
            pwszPath: ?[*:0]const u16,
            dwFlags: u32,
            ppidlOut: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IBrowserService2: IBrowserService2,
    IBrowserService: IBrowserService,
    IUnknown: IUnknown,
    pub fn _PositionViewWindow(self: *const IBrowserService3, hwnd: ?HWND, prc: ?*RECT) callconv(.Inline) HRESULT {
        return self.vtable._PositionViewWindow(self, hwnd, prc);
    }
    pub fn IEParseDisplayNameEx(self: *const IBrowserService3, uiCP: u32, pwszPath: ?[*:0]const u16, dwFlags: u32, ppidlOut: ?*?*ITEMIDLIST) callconv(.Inline) HRESULT {
        return self.vtable.IEParseDisplayNameEx(self, uiCP, pwszPath, dwFlags, ppidlOut);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IBrowserService4_Value = Guid.initString("639f1bff-e135-4096-abd8-e0f504d649a4");
pub const IID_IBrowserService4 = &IID_IBrowserService4_Value;
pub const IBrowserService4 = extern union {
    pub const VTable = extern struct {
        base: IBrowserService3.VTable,
        ActivateView: *const fn(
            self: *const IBrowserService4,
            fPendingView: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveViewState: *const fn(
            self: *const IBrowserService4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _ResizeAllBorders: *const fn(
            self: *const IBrowserService4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IBrowserService3: IBrowserService3,
    IBrowserService2: IBrowserService2,
    IBrowserService: IBrowserService,
    IUnknown: IUnknown,
    pub fn ActivateView(self: *const IBrowserService4, fPendingView: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.ActivateView(self, fPendingView);
    }
    pub fn SaveViewState(self: *const IBrowserService4) callconv(.Inline) HRESULT {
        return self.vtable.SaveViewState(self);
    }
    pub fn _ResizeAllBorders(self: *const IBrowserService4) callconv(.Inline) HRESULT {
        return self.vtable._ResizeAllBorders(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITrackShellMenu_Value = Guid.initString("8278f932-2a3e-11d2-838f-00c04fd918d0");
pub const IID_ITrackShellMenu = &IID_ITrackShellMenu_Value;
pub const ITrackShellMenu = extern union {
    pub const VTable = extern struct {
        base: IShellMenu.VTable,
        SetObscured: *const fn(
            self: *const ITrackShellMenu,
            hwndTB: ?HWND,
            punkBand: ?*IUnknown,
            dwSMSetFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Popup: *const fn(
            self: *const ITrackShellMenu,
            hwnd: ?HWND,
            ppt: ?*POINTL,
            prcExclude: ?*RECTL,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IShellMenu: IShellMenu,
    IUnknown: IUnknown,
    pub fn SetObscured(self: *const ITrackShellMenu, hwndTB: ?HWND, punkBand: ?*IUnknown, dwSMSetFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetObscured(self, hwndTB, punkBand, dwSMSetFlags);
    }
    pub fn Popup(self: *const ITrackShellMenu, hwnd: ?HWND, ppt: ?*POINTL, prcExclude: ?*RECTL, dwFlags: i32) callconv(.Inline) HRESULT {
        return self.vtable.Popup(self, hwnd, ppt, prcExclude, dwFlags);
    }
};

const CLSID_ImageTranscode_Value = Guid.initString("17b75166-928f-417d-9685-64aa135565c1");
pub const CLSID_ImageTranscode = &CLSID_ImageTranscode_Value;

pub const TI_FLAGS = enum(i32) {
    BITMAP = 1,
    JPEG = 2,
};
pub const TI_BITMAP = TI_FLAGS.BITMAP;
pub const TI_JPEG = TI_FLAGS.JPEG;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITranscodeImage_Value = Guid.initString("bae86ddd-dc11-421c-b7ab-cc55d1d65c44");
pub const IID_ITranscodeImage = &IID_ITranscodeImage_Value;
pub const ITranscodeImage = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        TranscodeImage: *const fn(
            self: *const ITranscodeImage,
            pShellItem: ?*IShellItem,
            uiMaxWidth: u32,
            uiMaxHeight: u32,
            flags: u32,
            pvImage: ?*IStream,
            puiWidth: ?*u32,
            puiHeight: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn TranscodeImage(self: *const ITranscodeImage, pShellItem: ?*IShellItem, uiMaxWidth: u32, uiMaxHeight: u32, flags: u32, pvImage: ?*IStream, puiWidth: ?*u32, puiHeight: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.TranscodeImage(self, pShellItem, uiMaxWidth, uiMaxHeight, flags, pvImage, puiWidth, puiHeight);
    }
};

pub const PATHCCH_OPTIONS = packed struct(u32) {
    ALLOW_LONG_PATHS: u1 = 0,
    FORCE_ENABLE_LONG_NAME_PROCESS: u1 = 0,
    FORCE_DISABLE_LONG_NAME_PROCESS: u1 = 0,
    DO_NOT_NORMALIZE_SEGMENTS: u1 = 0,
    ENSURE_IS_EXTENDED_LENGTH_PATH: u1 = 0,
    ENSURE_TRAILING_SLASH: u1 = 0,
    CANONICALIZE_SLASHES: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const PATHCCH_NONE = PATHCCH_OPTIONS{ };
pub const PATHCCH_ALLOW_LONG_PATHS = PATHCCH_OPTIONS{ .ALLOW_LONG_PATHS = 1 };
pub const PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS = PATHCCH_OPTIONS{ .FORCE_ENABLE_LONG_NAME_PROCESS = 1 };
pub const PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS = PATHCCH_OPTIONS{ .FORCE_DISABLE_LONG_NAME_PROCESS = 1 };
pub const PATHCCH_DO_NOT_NORMALIZE_SEGMENTS = PATHCCH_OPTIONS{ .DO_NOT_NORMALIZE_SEGMENTS = 1 };
pub const PATHCCH_ENSURE_IS_EXTENDED_LENGTH_PATH = PATHCCH_OPTIONS{ .ENSURE_IS_EXTENDED_LENGTH_PATH = 1 };
pub const PATHCCH_ENSURE_TRAILING_SLASH = PATHCCH_OPTIONS{ .ENSURE_TRAILING_SLASH = 1 };
pub const PATHCCH_CANONICALIZE_SLASHES = PATHCCH_OPTIONS{ .CANONICALIZE_SLASHES = 1 };

pub const APPLET_PROC = *const fn(
    hwndCpl: ?HWND,
    msg: u32,
    lParam1: LPARAM,
    lParam2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const CPLINFO = extern struct {
    idIcon: i32 align(1),
    idName: i32 align(1),
    idInfo: i32 align(1),
    lData: isize align(1),
};

pub const NEWCPLINFOA = extern struct {
    dwSize: u32 align(1),
    dwFlags: u32 align(1),
    dwHelpContext: u32 align(1),
    lData: isize align(1),
    hIcon: ?HICON align(1),
    szName: [32]CHAR align(1),
    szInfo: [64]CHAR align(1),
    szHelpFile: [128]CHAR align(1),
};

pub const NEWCPLINFOW = extern struct {
    dwSize: u32 align(1),
    dwFlags: u32 align(1),
    dwHelpContext: u32 align(1),
    lData: isize align(1),
    hIcon: ?HICON align(1),
    szName: [32]u16 align(1),
    szInfo: [64]u16 align(1),
    szHelpFile: [128]u16 align(1),
};

pub const PROFILEINFOA = extern struct {
    dwSize: u32,
    dwFlags: u32,
    lpUserName: ?PSTR,
    lpProfilePath: ?PSTR,
    lpDefaultPath: ?PSTR,
    lpServerName: ?PSTR,
    lpPolicyPath: ?PSTR,
    hProfile: ?HANDLE,
};

pub const PROFILEINFOW = extern struct {
    dwSize: u32,
    dwFlags: u32,
    lpUserName: ?PWSTR,
    lpProfilePath: ?PWSTR,
    lpDefaultPath: ?PWSTR,
    lpServerName: ?PWSTR,
    lpPolicyPath: ?PWSTR,
    hProfile: ?HANDLE,
};

pub const iurl_seturl_flags = enum(i32) {
    GUESS_PROTOCOL = 1,
    USE_DEFAULT_PROTOCOL = 2,
};
pub const IURL_SETURL_FL_GUESS_PROTOCOL = iurl_seturl_flags.GUESS_PROTOCOL;
pub const IURL_SETURL_FL_USE_DEFAULT_PROTOCOL = iurl_seturl_flags.USE_DEFAULT_PROTOCOL;

pub const iurl_invokecommand_flags = enum(i32) {
    ALLOW_UI = 1,
    USE_DEFAULT_VERB = 2,
    DDEWAIT = 4,
    ASYNCOK = 8,
    LOG_USAGE = 16,
};
pub const IURL_INVOKECOMMAND_FL_ALLOW_UI = iurl_invokecommand_flags.ALLOW_UI;
pub const IURL_INVOKECOMMAND_FL_USE_DEFAULT_VERB = iurl_invokecommand_flags.USE_DEFAULT_VERB;
pub const IURL_INVOKECOMMAND_FL_DDEWAIT = iurl_invokecommand_flags.DDEWAIT;
pub const IURL_INVOKECOMMAND_FL_ASYNCOK = iurl_invokecommand_flags.ASYNCOK;
pub const IURL_INVOKECOMMAND_FL_LOG_USAGE = iurl_invokecommand_flags.LOG_USAGE;

pub const urlinvokecommandinfoA = extern struct {
    dwcbSize: u32,
    dwFlags: u32,
    hwndParent: ?HWND,
    pcszVerb: ?[*:0]const u8,
};

pub const urlinvokecommandinfoW = extern struct {
    dwcbSize: u32,
    dwFlags: u32,
    hwndParent: ?HWND,
    pcszVerb: ?[*:0]const u16,
};

const IID_IUniformResourceLocatorA_Value = Guid.initString("fbf23b80-e3f0-101b-8488-00aa003e56f8");
pub const IID_IUniformResourceLocatorA = &IID_IUniformResourceLocatorA_Value;
pub const IUniformResourceLocatorA = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetURL: *const fn(
            self: *const IUniformResourceLocatorA,
            pcszURL: ?[*:0]const u8,
            dwInFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetURL: *const fn(
            self: *const IUniformResourceLocatorA,
            ppszURL: ?*?PSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeCommand: *const fn(
            self: *const IUniformResourceLocatorA,
            purlici: ?*urlinvokecommandinfoA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetURL(self: *const IUniformResourceLocatorA, pcszURL: ?[*:0]const u8, dwInFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetURL(self, pcszURL, dwInFlags);
    }
    pub fn GetURL(self: *const IUniformResourceLocatorA, ppszURL: ?*?PSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetURL(self, ppszURL);
    }
    pub fn InvokeCommand(self: *const IUniformResourceLocatorA, purlici: ?*urlinvokecommandinfoA) callconv(.Inline) HRESULT {
        return self.vtable.InvokeCommand(self, purlici);
    }
};

const IID_IUniformResourceLocatorW_Value = Guid.initString("cabb0da0-da57-11cf-9974-0020afd79762");
pub const IID_IUniformResourceLocatorW = &IID_IUniformResourceLocatorW_Value;
pub const IUniformResourceLocatorW = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetURL: *const fn(
            self: *const IUniformResourceLocatorW,
            pcszURL: ?[*:0]const u16,
            dwInFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetURL: *const fn(
            self: *const IUniformResourceLocatorW,
            ppszURL: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeCommand: *const fn(
            self: *const IUniformResourceLocatorW,
            purlici: ?*urlinvokecommandinfoW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetURL(self: *const IUniformResourceLocatorW, pcszURL: ?[*:0]const u16, dwInFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetURL(self, pcszURL, dwInFlags);
    }
    pub fn GetURL(self: *const IUniformResourceLocatorW, ppszURL: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetURL(self, ppszURL);
    }
    pub fn InvokeCommand(self: *const IUniformResourceLocatorW, purlici: ?*urlinvokecommandinfoW) callconv(.Inline) HRESULT {
        return self.vtable.InvokeCommand(self, purlici);
    }
};

pub const translateurl_in_flags = enum(i32) {
    GUESS_PROTOCOL = 1,
    USE_DEFAULT_PROTOCOL = 2,
};
pub const TRANSLATEURL_FL_GUESS_PROTOCOL = translateurl_in_flags.GUESS_PROTOCOL;
pub const TRANSLATEURL_FL_USE_DEFAULT_PROTOCOL = translateurl_in_flags.USE_DEFAULT_PROTOCOL;

pub const urlassociationdialog_in_flags = enum(i32) {
    USE_DEFAULT_NAME = 1,
    REGISTER_ASSOC = 2,
};
pub const URLASSOCDLG_FL_USE_DEFAULT_NAME = urlassociationdialog_in_flags.USE_DEFAULT_NAME;
pub const URLASSOCDLG_FL_REGISTER_ASSOC = urlassociationdialog_in_flags.REGISTER_ASSOC;

pub const mimeassociationdialog_in_flags = enum(i32) {
    C = 1,
};
pub const MIMEASSOCDLG_FL_REGISTER_ASSOC = mimeassociationdialog_in_flags.C;

pub const PAPPSTATE_CHANGE_ROUTINE = *const fn(
    Quiesced: BOOLEAN,
    Context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PAPPCONSTRAIN_CHANGE_ROUTINE = *const fn(
    Constrained: BOOLEAN,
    Context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

const CLSID_ShowInputPaneAnimationCoordinator_Value = Guid.initString("1f046abf-3202-4dc1-8cb5-3c67617ce1fa");
pub const CLSID_ShowInputPaneAnimationCoordinator = &CLSID_ShowInputPaneAnimationCoordinator_Value;

const CLSID_HideInputPaneAnimationCoordinator_Value = Guid.initString("384742b1-2a77-4cb3-8cf8-1136f5e17e59");
pub const CLSID_HideInputPaneAnimationCoordinator = &CLSID_HideInputPaneAnimationCoordinator_Value;

const IID_IInputPaneAnimationCoordinator_Value = Guid.initString("2af16ba9-2de5-4b75-82d9-01372afbffb4");
pub const IID_IInputPaneAnimationCoordinator = &IID_IInputPaneAnimationCoordinator_Value;
pub const IInputPaneAnimationCoordinator = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddAnimation: *const fn(
            self: *const IInputPaneAnimationCoordinator,
            device: ?*IUnknown,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn AddAnimation(self: *const IInputPaneAnimationCoordinator, device: ?*IUnknown, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.AddAnimation(self, device, animation);
    }
};





















pub const DRAGINFOA = switch(@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        uSize: u32,
        pt: POINT,
        fNC: BOOL,
        lpFileList: ?[*]u8,
        grfKeyState: u32,
    },
    .X86 => extern struct {
        uSize: u32 align(1),
        pt: POINT align(1),
        fNC: BOOL align(1),
        lpFileList: ?[*]u8 align(1),
        grfKeyState: u32 align(1),
    },
};
pub const DRAGINFOW = switch(@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        uSize: u32,
        pt: POINT,
        fNC: BOOL,
        lpFileList: ?[*]u16,
        grfKeyState: u32,
    },
    .X86 => extern struct {
        uSize: u32 align(1),
        pt: POINT align(1),
        fNC: BOOL align(1),
        lpFileList: ?[*]u16 align(1),
        grfKeyState: u32 align(1),
    },
};
pub const APPBARDATA = switch(@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        cbSize: u32,
        hWnd: ?HWND,
        uCallbackMessage: u32,
        uEdge: u32,
        rc: RECT,
        lParam: LPARAM,
    },
    .X86 => extern struct {
        cbSize: u32 align(1),
        hWnd: ?HWND align(1),
        uCallbackMessage: u32 align(1),
        uEdge: u32 align(1),
        rc: RECT align(1),
        lParam: LPARAM align(1),
    },
};
pub const SHFILEOPSTRUCTA = switch(@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        hwnd: ?HWND,
        wFunc: u32,
        pFrom: ?*i8,
        pTo: ?*i8,
        fFlags: u16,
        fAnyOperationsAborted: BOOL,
        hNameMappings: ?*anyopaque,
        lpszProgressTitle: ?[*:0]const u8,
    },
    .X86 => extern struct {
        hwnd: ?HWND align(1),
        wFunc: u32 align(1),
        pFrom: ?*i8 align(1),
        pTo: ?*i8 align(1),
        fFlags: u16 align(1),
        fAnyOperationsAborted: BOOL align(1),
        hNameMappings: ?*anyopaque align(1),
        lpszProgressTitle: ?[*:0]const u8 align(1),
    },
};
pub const SHFILEOPSTRUCTW = switch(@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        hwnd: ?HWND,
        wFunc: u32,
        pFrom: ?[*]const u16,
        pTo: ?[*]const u16,
        fFlags: u16,
        fAnyOperationsAborted: BOOL,
        hNameMappings: ?*anyopaque,
        lpszProgressTitle: ?[*:0]const u16,
    },
    .X86 => extern struct {
        hwnd: ?HWND align(1),
        wFunc: u32 align(1),
        pFrom: ?[*]const u16 align(1),
        pTo: ?[*]const u16 align(1),
        fFlags: u16 align(1),
        fAnyOperationsAborted: BOOL align(1),
        hNameMappings: ?*anyopaque align(1),
        lpszProgressTitle: ?[*:0]const u16 align(1),
    },
};
pub const SHNAMEMAPPINGA = switch(@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        pszOldPath: ?PSTR,
        pszNewPath: ?PSTR,
        cchOldPath: i32,
        cchNewPath: i32,
    },
    .X86 => extern struct {
        pszOldPath: ?PSTR align(1),
        pszNewPath: ?PSTR align(1),
        cchOldPath: i32 align(1),
        cchNewPath: i32 align(1),
    },
};
pub const SHNAMEMAPPINGW = switch(@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        pszOldPath: ?PWSTR,
        pszNewPath: ?PWSTR,
        cchOldPath: i32,
        cchNewPath: i32,
    },
    .X86 => extern struct {
        pszOldPath: ?PWSTR align(1),
        pszNewPath: ?PWSTR align(1),
        cchOldPath: i32 align(1),
        cchNewPath: i32 align(1),
    },
};
pub const SHELLEXECUTEINFOA = switch(@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        cbSize: u32,
        fMask: u32,
        hwnd: ?HWND,
        lpVerb: ?[*:0]const u8,
        lpFile: ?[*:0]const u8,
        lpParameters: ?[*:0]const u8,
        lpDirectory: ?[*:0]const u8,
        nShow: i32,
        hInstApp: ?HINSTANCE,
        lpIDList: ?*anyopaque,
        lpClass: ?[*:0]const u8,
        hkeyClass: ?HKEY,
        dwHotKey: u32,
        Anonymous: extern union {
            hIcon: ?HANDLE,
            hMonitor: ?HANDLE,
        },
        hProcess: ?HANDLE,
    },
    .X86 => extern struct {
        cbSize: u32 align(1),
        fMask: u32 align(1),
        hwnd: ?HWND align(1),
        lpVerb: ?[*:0]const u8 align(1),
        lpFile: ?[*:0]const u8 align(1),
        lpParameters: ?[*:0]const u8 align(1),
        lpDirectory: ?[*:0]const u8 align(1),
        nShow: i32 align(1),
        hInstApp: ?HINSTANCE align(1),
        lpIDList: ?*anyopaque align(1),
        lpClass: ?[*:0]const u8 align(1),
        hkeyClass: ?HKEY align(1),
        dwHotKey: u32 align(1),
        Anonymous: extern union {
            hIcon: ?HANDLE align(1),
            hMonitor: ?HANDLE align(1),
        } align(1),
        hProcess: ?HANDLE align(1),
    },
};
pub const SHELLEXECUTEINFOW = switch(@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        cbSize: u32,
        fMask: u32,
        hwnd: ?HWND,
        lpVerb: ?[*:0]const u16,
        lpFile: ?[*:0]const u16,
        lpParameters: ?[*:0]const u16,
        lpDirectory: ?[*:0]const u16,
        nShow: i32,
        hInstApp: ?HINSTANCE,
        lpIDList: ?*anyopaque,
        lpClass: ?[*:0]const u16,
        hkeyClass: ?HKEY,
        dwHotKey: u32,
        Anonymous: extern union {
            hIcon: ?HANDLE,
            hMonitor: ?HANDLE,
        },
        hProcess: ?HANDLE,
    },
    .X86 => extern struct {
        cbSize: u32 align(1),
        fMask: u32 align(1),
        hwnd: ?HWND align(1),
        lpVerb: ?[*:0]const u16 align(1),
        lpFile: ?[*:0]const u16 align(1),
        lpParameters: ?[*:0]const u16 align(1),
        lpDirectory: ?[*:0]const u16 align(1),
        nShow: i32 align(1),
        hInstApp: ?HINSTANCE align(1),
        lpIDList: ?*anyopaque align(1),
        lpClass: ?[*:0]const u16 align(1),
        hkeyClass: ?HKEY align(1),
        dwHotKey: u32 align(1),
        Anonymous: extern union {
            hIcon: ?HANDLE align(1),
            hMonitor: ?HANDLE align(1),
        } align(1),
        hProcess: ?HANDLE align(1),
    },
};
pub const SHCREATEPROCESSINFOW = switch(@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        cbSize: u32,
        fMask: u32,
        hwnd: ?HWND,
        pszFile: ?[*:0]const u16,
        pszParameters: ?[*:0]const u16,
        pszCurrentDirectory: ?[*:0]const u16,
        hUserToken: ?HANDLE,
        lpProcessAttributes: ?*SECURITY_ATTRIBUTES,
        lpThreadAttributes: ?*SECURITY_ATTRIBUTES,
        bInheritHandles: BOOL,
        dwCreationFlags: u32,
        lpStartupInfo: ?*STARTUPINFOW,
        lpProcessInformation: ?*PROCESS_INFORMATION,
    },
    .X86 => extern struct {
        cbSize: u32 align(1),
        fMask: u32 align(1),
        hwnd: ?HWND align(1),
        pszFile: ?[*:0]const u16 align(1),
        pszParameters: ?[*:0]const u16 align(1),
        pszCurrentDirectory: ?[*:0]const u16 align(1),
        hUserToken: ?HANDLE align(1),
        lpProcessAttributes: ?*SECURITY_ATTRIBUTES align(1),
        lpThreadAttributes: ?*SECURITY_ATTRIBUTES align(1),
        bInheritHandles: BOOL align(1),
        dwCreationFlags: u32 align(1),
        lpStartupInfo: ?*STARTUPINFOW align(1),
        lpProcessInformation: ?*PROCESS_INFORMATION align(1),
    },
};
pub const ASSOCIATIONELEMENT = switch(@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        ac: ASSOCCLASS,
        hkClass: ?HKEY,
        pszClass: ?[*:0]const u16,
    },
    .X86 => extern struct {
        ac: ASSOCCLASS align(1),
        hkClass: ?HKEY align(1),
        pszClass: ?[*:0]const u16 align(1),
    },
};
pub const SHQUERYRBINFO = switch(@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        cbSize: u32,
        i64Size: i64,
        i64NumItems: i64,
    },
    .X86 => extern struct {
        cbSize: u32 align(1),
        i64Size: i64 align(1),
        i64NumItems: i64 align(1),
    },
};
pub const NOTIFYICONDATAA = switch(@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        cbSize: u32,
        hWnd: ?HWND,
        uID: u32,
        uFlags: NOTIFY_ICON_DATA_FLAGS,
        uCallbackMessage: u32,
        hIcon: ?HICON,
        szTip: [128]CHAR,
        dwState: u32,
        dwStateMask: u32,
        szInfo: [256]CHAR,
        Anonymous: extern union {
            uTimeout: u32,
            uVersion: u32,
        },
        szInfoTitle: [64]CHAR,
        dwInfoFlags: u32,
        guidItem: Guid,
        hBalloonIcon: ?HICON,
    },
    .X86 => extern struct {
        cbSize: u32 align(1),
        hWnd: ?HWND align(1),
        uID: u32 align(1),
        uFlags: NOTIFY_ICON_DATA_FLAGS align(1),
        uCallbackMessage: u32 align(1),
        hIcon: ?HICON align(1),
        szTip: [128]CHAR align(1),
        dwState: u32 align(1),
        dwStateMask: u32 align(1),
        szInfo: [256]CHAR align(1),
        Anonymous: extern union {
            uTimeout: u32 align(1),
            uVersion: u32 align(1),
        } align(1),
        szInfoTitle: [64]CHAR align(1),
        dwInfoFlags: u32 align(1),
        guidItem: Guid align(1),
        hBalloonIcon: ?HICON align(1),
    },
};
pub const NOTIFYICONDATAW = switch(@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        cbSize: u32,
        hWnd: ?HWND,
        uID: u32,
        uFlags: NOTIFY_ICON_DATA_FLAGS,
        uCallbackMessage: u32,
        hIcon: ?HICON,
        szTip: [128]u16,
        dwState: u32,
        dwStateMask: u32,
        szInfo: [256]u16,
        Anonymous: extern union {
            uTimeout: u32,
            uVersion: u32,
        },
        szInfoTitle: [64]u16,
        dwInfoFlags: u32,
        guidItem: Guid,
        hBalloonIcon: ?HICON,
    },
    .X86 => extern struct {
        cbSize: u32 align(1),
        hWnd: ?HWND align(1),
        uID: u32 align(1),
        uFlags: NOTIFY_ICON_DATA_FLAGS align(1),
        uCallbackMessage: u32 align(1),
        hIcon: ?HICON align(1),
        szTip: [128]u16 align(1),
        dwState: u32 align(1),
        dwStateMask: u32 align(1),
        szInfo: [256]u16 align(1),
        Anonymous: extern union {
            uTimeout: u32 align(1),
            uVersion: u32 align(1),
        } align(1),
        szInfoTitle: [64]u16 align(1),
        dwInfoFlags: u32 align(1),
        guidItem: Guid align(1),
        hBalloonIcon: ?HICON align(1),
    },
};
pub const NOTIFYICONIDENTIFIER = switch(@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        cbSize: u32,
        hWnd: ?HWND,
        uID: u32,
        guidItem: Guid,
    },
    .X86 => extern struct {
        cbSize: u32 align(1),
        hWnd: ?HWND align(1),
        uID: u32 align(1),
        guidItem: Guid align(1),
    },
};
pub const SHFILEINFOA = switch(@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        hIcon: ?HICON,
        iIcon: i32,
        dwAttributes: u32,
        szDisplayName: [260]CHAR,
        szTypeName: [80]CHAR,
    },
    .X86 => extern struct {
        hIcon: ?HICON align(1),
        iIcon: i32 align(1),
        dwAttributes: u32 align(1),
        szDisplayName: [260]CHAR align(1),
        szTypeName: [80]CHAR align(1),
    },
};
pub const SHFILEINFOW = switch(@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        hIcon: ?HICON,
        iIcon: i32,
        dwAttributes: u32,
        szDisplayName: [260]u16,
        szTypeName: [80]u16,
    },
    .X86 => extern struct {
        hIcon: ?HICON align(1),
        iIcon: i32 align(1),
        dwAttributes: u32 align(1),
        szDisplayName: [260]u16 align(1),
        szTypeName: [80]u16 align(1),
    },
};
pub const SHSTOCKICONINFO = switch(@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        cbSize: u32,
        hIcon: ?HICON,
        iSysImageIndex: i32,
        iIcon: i32,
        szPath: [260]u16,
    },
    .X86 => extern struct {
        cbSize: u32 align(1),
        hIcon: ?HICON align(1),
        iSysImageIndex: i32 align(1),
        iIcon: i32 align(1),
        szPath: [260]u16 align(1),
    },
};
pub const OPEN_PRINTER_PROPS_INFOA = switch(@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        dwSize: u32,
        pszSheetName: ?PSTR,
        uSheetIndex: u32,
        dwFlags: u32,
        bModal: BOOL,
    },
    .X86 => extern struct {
        dwSize: u32 align(1),
        pszSheetName: ?PSTR align(1),
        uSheetIndex: u32 align(1),
        dwFlags: u32 align(1),
        bModal: BOOL align(1),
    },
};
pub const OPEN_PRINTER_PROPS_INFOW = switch(@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        dwSize: u32,
        pszSheetName: ?PWSTR,
        uSheetIndex: u32,
        dwFlags: u32,
        bModal: BOOL,
    },
    .X86 => extern struct {
        dwSize: u32 align(1),
        pszSheetName: ?PWSTR align(1),
        uSheetIndex: u32 align(1),
        dwFlags: u32 align(1),
        bModal: BOOL align(1),
    },
};

//--------------------------------------------------------------------------------
// Section: Functions (688)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn LoadUserProfileA(
    hToken: ?HANDLE,
    lpProfileInfo: ?*PROFILEINFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn LoadUserProfileW(
    hToken: ?HANDLE,
    lpProfileInfo: ?*PROFILEINFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn UnloadUserProfile(
    hToken: ?HANDLE,
    hProfile: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn GetProfilesDirectoryA(
    lpProfileDir: ?[*:0]u8,
    lpcchSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn GetProfilesDirectoryW(
    lpProfileDir: ?[*:0]u16,
    lpcchSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn GetProfileType(
    dwFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn DeleteProfileA(
    lpSidString: ?[*:0]const u8,
    lpProfilePath: ?[*:0]const u8,
    lpComputerName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn DeleteProfileW(
    lpSidString: ?[*:0]const u16,
    lpProfilePath: ?[*:0]const u16,
    lpComputerName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "userenv" fn CreateProfile(
    pszUserSid: ?[*:0]const u16,
    pszUserName: ?[*:0]const u16,
    pszProfilePath: [*:0]u16,
    cchProfilePath: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn GetDefaultUserProfileDirectoryA(
    lpProfileDir: ?[*:0]u8,
    lpcchSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn GetDefaultUserProfileDirectoryW(
    lpProfileDir: ?[*:0]u16,
    lpcchSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn GetAllUsersProfileDirectoryA(
    lpProfileDir: ?[*:0]u8,
    lpcchSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn GetAllUsersProfileDirectoryW(
    lpProfileDir: ?[*:0]u16,
    lpcchSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn GetUserProfileDirectoryA(
    hToken: ?HANDLE,
    lpProfileDir: ?[*:0]u8,
    lpcchSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn GetUserProfileDirectoryW(
    hToken: ?HANDLE,
    lpProfileDir: ?[*:0]u16,
    lpcchSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "comctl32" fn SetWindowSubclass(
    hWnd: ?HWND,
    pfnSubclass: ?SUBCLASSPROC,
    uIdSubclass: usize,
    dwRefData: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "comctl32" fn GetWindowSubclass(
    hWnd: ?HWND,
    pfnSubclass: ?SUBCLASSPROC,
    uIdSubclass: usize,
    pdwRefData: ?*usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "comctl32" fn RemoveWindowSubclass(
    hWnd: ?HWND,
    pfnSubclass: ?SUBCLASSPROC,
    uIdSubclass: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "comctl32" fn DefSubclassProc(
    hWnd: ?HWND,
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn SetWindowContextHelpId(
    param0: ?HWND,
    param1: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn GetWindowContextHelpId(
    param0: ?HWND,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn SetMenuContextHelpId(
    param0: ?HMENU,
    param1: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn GetMenuContextHelpId(
    param0: ?HMENU,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn WinHelpA(
    hWndMain: ?HWND,
    lpszHelp: ?[*:0]const u8,
    uCommand: u32,
    dwData: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn WinHelpW(
    hWndMain: ?HWND,
    lpszHelp: ?[*:0]const u16,
    uCommand: u32,
    dwData: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHSimpleIDListFromPath(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateItemFromIDList(
    pidl: ?*ITEMIDLIST,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateItemFromParsingName(
    pszPath: ?[*:0]const u16,
    pbc: ?*IBindCtx,
    riid: ?*const Guid,
    ppv: **anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateItemWithParent(
    pidlParent: ?*ITEMIDLIST,
    psfParent: ?*IShellFolder,
    pidl: ?*ITEMIDLIST,
    riid: ?*const Guid,
    ppvItem: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateItemFromRelativeName(
    psiParent: ?*IShellItem,
    pszName: ?[*:0]const u16,
    pbc: ?*IBindCtx,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateItemInKnownFolder(
    kfid: ?*const Guid,
    dwKFFlags: u32,
    pszItem: ?[*:0]const u16,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHGetIDListFromObject(
    punk: ?*IUnknown,
    ppidl: ?*?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shell32" fn SHGetItemFromObject(
    punk: ?*IUnknown,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHGetNameFromIDList(
    pidl: ?*ITEMIDLIST,
    sigdnName: SIGDN,
    ppszName: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shell32" fn SHGetItemFromDataObject(
    pdtobj: ?*IDataObject,
    dwFlags: DATAOBJ_GET_ITEM_FLAGS,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateShellItemArray(
    pidlParent: ?*ITEMIDLIST,
    psf: ?*IShellFolder,
    cidl: u32,
    ppidl: ?[*]?*ITEMIDLIST,
    ppsiItemArray: ?*?*IShellItemArray,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateShellItemArrayFromDataObject(
    pdo: ?*IDataObject,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateShellItemArrayFromIDLists(
    cidl: u32,
    rgpidl: [*]?*ITEMIDLIST,
    ppsiItemArray: ?*?*IShellItemArray,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateShellItemArrayFromShellItem(
    psi: ?*IShellItem,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateAssociationRegistration(
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateDefaultExtractIcon(
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shell32" fn SetCurrentProcessExplicitAppUserModelID(
    AppID: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shell32" fn GetCurrentProcessExplicitAppUserModelID(
    AppID: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHGetTemporaryPropertyForItem(
    psi: ?*IShellItem,
    propkey: ?*const PROPERTYKEY,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHSetTemporaryPropertyForItem(
    psi: ?*IShellItem,
    propkey: ?*const PROPERTYKEY,
    propvar: ?*const PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shell32" fn SHShowManageLibraryUI(
    psiLibrary: ?*IShellItem,
    hwndOwner: ?HWND,
    pszTitle: ?[*:0]const u16,
    pszInstruction: ?[*:0]const u16,
    lmdOptions: LIBRARYMANAGEDIALOGOPTIONS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shell32" fn SHResolveLibrary(
    psiLibrary: ?*IShellItem,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHAssocEnumHandlers(
    pszExtra: ?[*:0]const u16,
    afFilter: ASSOC_FILTER,
    ppEnumHandler: ?*?*IEnumAssocHandlers,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shell32" fn SHAssocEnumHandlersForProtocolByApplication(
    protocol: ?[*:0]const u16,
    riid: ?*const Guid,
    enumHandlers: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "ole32" fn HMONITOR_UserSize(
    param0: ?*u32,
    param1: u32,
    param2: ?*?HMONITOR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ole32" fn HMONITOR_UserMarshal(
    param0: ?*u32,
    param1: ?*u8,
    param2: ?*?HMONITOR,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

pub extern "ole32" fn HMONITOR_UserUnmarshal(
    param0: ?*u32,
    param1: [*:0]u8,
    param2: ?*?HMONITOR,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

pub extern "ole32" fn HMONITOR_UserFree(
    param0: ?*u32,
    param1: ?*?HMONITOR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "ole32" fn HMONITOR_UserSize64(
    param0: ?*u32,
    param1: u32,
    param2: ?*?HMONITOR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ole32" fn HMONITOR_UserMarshal64(
    param0: ?*u32,
    param1: ?*u8,
    param2: ?*?HMONITOR,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

pub extern "ole32" fn HMONITOR_UserUnmarshal64(
    param0: ?*u32,
    param1: [*:0]u8,
    param2: ?*?HMONITOR,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

pub extern "ole32" fn HMONITOR_UserFree64(
    param0: ?*u32,
    param1: ?*?HMONITOR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateDefaultPropertiesOp(
    psi: ?*IShellItem,
    ppFileOp: ?*?*IFileOperation,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHSetDefaultProperties(
    hwnd: ?HWND,
    psi: ?*IShellItem,
    dwFileOpFlags: u32,
    pfops: ?*IFileOperationProgressSink,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetMalloc(
    ppMalloc: ?*?*IMalloc,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHAlloc(
    cb: usize,
) callconv(@import("std").os.windows.WINAPI) ?*anyopaque;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHFree(
    pv: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetIconOverlayIndexA(
    pszIconPath: ?[*:0]const u8,
    iIconIndex: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetIconOverlayIndexW(
    pszIconPath: ?[*:0]const u16,
    iIconIndex: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILClone(
    pidl: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILCloneFirst(
    pidl: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILCombine(
    pidl1: ?*ITEMIDLIST,
    pidl2: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILFree(
    pidl: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILGetNext(
    pidl: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILGetSize(
    pidl: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILFindChild(
    pidlParent: ?*ITEMIDLIST,
    pidlChild: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILFindLastID(
    pidl: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILRemoveLastID(
    pidl: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILIsEqual(
    pidl1: ?*ITEMIDLIST,
    pidl2: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILIsParent(
    pidl1: ?*ITEMIDLIST,
    pidl2: ?*ITEMIDLIST,
    fImmediate: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILSaveToStream(
    pstm: ?*IStream,
    pidl: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn ILLoadFromStreamEx(
    pstm: ?*IStream,
    pidl: ?*?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILCreateFromPathA(
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILCreateFromPathW(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHILCreateFromPath(
    pszPath: ?[*:0]const u16,
    ppidl: ?*?*ITEMIDLIST,
    rgfInOut: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILAppendID(
    pidl: ?*ITEMIDLIST,
    pmkid: ?*SHITEMID,
    fAppend: BOOL,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHGetPathFromIDListEx(
    pidl: ?*ITEMIDLIST,
    pszPath: [*:0]u16,
    cchPath: u32,
    uOpts: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetPathFromIDListA(
    pidl: ?*ITEMIDLIST,
    pszPath: *[260]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetPathFromIDListW(
    pidl: ?*ITEMIDLIST,
    pszPath: *[260]u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHCreateDirectory(
    hwnd: ?HWND,
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHCreateDirectoryExA(
    hwnd: ?HWND,
    pszPath: ?[*:0]const u8,
    psa: ?*const SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHCreateDirectoryExW(
    hwnd: ?HWND,
    pszPath: ?[*:0]const u16,
    psa: ?*const SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHOpenFolderAndSelectItems(
    pidlFolder: ?*ITEMIDLIST,
    cidl: u32,
    apidl: ?[*]?*ITEMIDLIST,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHCreateShellItem(
    pidlParent: ?*ITEMIDLIST,
    psfParent: ?*IShellFolder,
    pidl: ?*ITEMIDLIST,
    ppsi: ?*?*IShellItem,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetSpecialFolderLocation(
    hwnd: ?HWND,
    csidl: i32,
    ppidl: ?*?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHCloneSpecialIDList(
    hwnd: ?HWND,
    csidl: i32,
    fCreate: BOOL,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetSpecialFolderPathA(
    hwnd: ?HWND,
    pszPath: *[260]u8,
    csidl: i32,
    fCreate: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetSpecialFolderPathW(
    hwnd: ?HWND,
    pszPath: *[260]u16,
    csidl: i32,
    fCreate: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHFlushSFCache(
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetFolderPathA(
    hwnd: ?HWND,
    csidl: i32,
    hToken: ?HANDLE,
    dwFlags: u32,
    pszPath: *[260]u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetFolderPathW(
    hwnd: ?HWND,
    csidl: i32,
    hToken: ?HANDLE,
    dwFlags: u32,
    pszPath: *[260]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetFolderLocation(
    hwnd: ?HWND,
    csidl: i32,
    hToken: ?HANDLE,
    dwFlags: u32,
    ppidl: ?*?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHSetFolderPathA(
    csidl: i32,
    hToken: ?HANDLE,
    dwFlags: u32,
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHSetFolderPathW(
    csidl: i32,
    hToken: ?HANDLE,
    dwFlags: u32,
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetFolderPathAndSubDirA(
    hwnd: ?HWND,
    csidl: i32,
    hToken: ?HANDLE,
    dwFlags: u32,
    pszSubDir: ?[*:0]const u8,
    pszPath: *[260]u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetFolderPathAndSubDirW(
    hwnd: ?HWND,
    csidl: i32,
    hToken: ?HANDLE,
    dwFlags: u32,
    pszSubDir: ?[*:0]const u16,
    pszPath: *[260]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHGetKnownFolderIDList(
    rfid: ?*const Guid,
    dwFlags: u32,
    hToken: ?HANDLE,
    ppidl: ?*?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHSetKnownFolderPath(
    rfid: ?*const Guid,
    dwFlags: u32,
    hToken: ?HANDLE,
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHGetKnownFolderPath(
    rfid: ?*const Guid,
    dwFlags: u32,
    hToken: ?HANDLE,
    ppszPath: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shell32" fn SHGetKnownFolderItem(
    rfid: ?*const Guid,
    flags: KNOWN_FOLDER_FLAG,
    hToken: ?HANDLE,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetSetFolderCustomSettings(
    pfcs: ?*SHFOLDERCUSTOMSETTINGS,
    pszPath: ?[*:0]const u16,
    dwReadWrite: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHBrowseForFolderA(
    lpbi: ?*BROWSEINFOA,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHBrowseForFolderW(
    lpbi: ?*BROWSEINFOW,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHLoadInProc(
    rclsid: ?*const Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetDesktopFolder(
    ppshf: ?*?*IShellFolder,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHChangeNotify(
    wEventId: SHCNE_ID,
    uFlags: SHCNF_FLAGS,
    dwItem1: ?*const anyopaque,
    dwItem2: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHAddToRecentDocs(
    uFlags: u32,
    pv: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHHandleUpdateImage(
    pidlExtra: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHUpdateImageA(
    pszHashItem: ?[*:0]const u8,
    iIndex: i32,
    uFlags: u32,
    iImageIndex: i32,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHUpdateImageW(
    pszHashItem: ?[*:0]const u16,
    iIndex: i32,
    uFlags: u32,
    iImageIndex: i32,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHChangeNotifyRegister(
    hwnd: ?HWND,
    fSources: SHCNRF_SOURCE,
    fEvents: i32,
    wMsg: u32,
    cEntries: i32,
    pshcne: ?*const SHChangeNotifyEntry,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHChangeNotifyDeregister(
    ulID: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHChangeNotification_Lock(
    hChange: ?HANDLE,
    dwProcId: u32,
    pppidl: ?*?*?*ITEMIDLIST,
    plEvent: ?*i32,
) callconv(@import("std").os.windows.WINAPI) ShFindChangeNotificationHandle;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHChangeNotification_Unlock(
    hLock: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetRealIDL(
    psf: ?*IShellFolder,
    pidlSimple: ?*ITEMIDLIST,
    ppidlReal: ?*?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetInstanceExplorer(
    ppunk: ?*?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetDataFromIDListA(
    psf: ?*IShellFolder,
    pidl: ?*ITEMIDLIST,
    nFormat: SHGDFIL_FORMAT,
    // TODO: what to do with BytesParamIndex 4?
    pv: ?*anyopaque,
    cb: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetDataFromIDListW(
    psf: ?*IShellFolder,
    pidl: ?*ITEMIDLIST,
    nFormat: SHGDFIL_FORMAT,
    // TODO: what to do with BytesParamIndex 4?
    pv: ?*anyopaque,
    cb: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn RestartDialog(
    hwnd: ?HWND,
    pszPrompt: ?[*:0]const u16,
    dwReturn: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn RestartDialogEx(
    hwnd: ?HWND,
    pszPrompt: ?[*:0]const u16,
    dwReturn: u32,
    dwReasonCode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHCoCreateInstance(
    pszCLSID: ?[*:0]const u16,
    pclsid: ?*const Guid,
    pUnkOuter: ?*IUnknown,
    riid: ?*const Guid,
    ppv: **anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateDataObject(
    pidlFolder: ?*ITEMIDLIST,
    cidl: u32,
    apidl: ?[*]?*ITEMIDLIST,
    pdtInner: ?*IDataObject,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn CIDLData_CreateFromIDArray(
    pidlFolder: ?*ITEMIDLIST,
    cidl: u32,
    apidl: ?[*]?*ITEMIDLIST,
    ppdtobj: ?*?*IDataObject,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHCreateStdEnumFmtEtc(
    cfmt: u32,
    afmt: [*]const FORMATETC,
    ppenumFormatEtc: ?*?*IEnumFORMATETC,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHDoDragDrop(
    hwnd: ?HWND,
    pdata: ?*IDataObject,
    pdsrc: ?*IDropSource,
    dwEffect: DROPEFFECT,
    pdwEffect: ?*DROPEFFECT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn DAD_SetDragImage(
    him: ?HIMAGELIST,
    pptOffset: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn DAD_DragEnterEx(
    hwndTarget: ?HWND,
    ptStart: POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn DAD_DragEnterEx2(
    hwndTarget: ?HWND,
    ptStart: POINT,
    pdtObject: ?*IDataObject,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn DAD_ShowDragImage(
    fShow: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn DAD_DragMove(
    pt: POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn DAD_DragLeave(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn DAD_AutoScroll(
    hwnd: ?HWND,
    pad: ?*AUTO_SCROLL_DATA,
    pptNow: ?*const POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ReadCabinetState(
    // TODO: what to do with BytesParamIndex 1?
    pcs: ?*CABINETSTATE,
    cLength: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn WriteCabinetState(
    pcs: ?*CABINETSTATE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn PathMakeUniqueName(
    pszUniqueName: [*:0]u16,
    cchMax: u32,
    pszTemplate: ?[*:0]const u16,
    pszLongPlate: ?[*:0]const u16,
    pszDir: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn PathIsExe(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn PathCleanupSpec(
    pszDir: ?[*:0]const u16,
    pszSpec: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) PCS_RET;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn PathResolve(
    pszPath: *[260]u16,
    dirs: ?*?*u16,
    fFlags: PRF_FLAGS,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn GetFileNameFromBrowse(
    hwnd: ?HWND,
    pszFilePath: [*:0]u16,
    cchFilePath: u32,
    pszWorkingDir: ?[*:0]const u16,
    pszDefExt: ?[*:0]const u16,
    pszFilters: ?[*:0]const u16,
    pszTitle: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn DriveType(
    iDrive: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn RealDriveType(
    iDrive: i32,
    fOKToHitNet: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn IsNetDrive(
    iDrive: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn Shell_MergeMenus(
    hmDst: ?HMENU,
    hmSrc: ?HMENU,
    uInsert: u32,
    uIDAdjust: u32,
    uIDAdjustMax: u32,
    uFlags: MM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHObjectProperties(
    hwnd: ?HWND,
    shopObjectType: SHOP_TYPE,
    pszObjectName: ?[*:0]const u16,
    pszPropertyPage: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHFormatDrive(
    hwnd: ?HWND,
    drive: u32,
    fmtID: SHFMT_ID,
    options: SHFMT_OPT,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHDestroyPropSheetExtArray(
    hpsxa: ?HPSXA,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHAddFromPropSheetExtArray(
    hpsxa: ?HPSXA,
    lpfnAddPage: ?LPFNSVADDPROPSHEETPAGE,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHReplaceFromPropSheetExtArray(
    hpsxa: ?HPSXA,
    uPageID: u32,
    lpfnReplaceWith: ?LPFNSVADDPROPSHEETPAGE,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn OpenRegStream(
    hkey: ?HKEY,
    pszSubkey: ?[*:0]const u16,
    pszValue: ?[*:0]const u16,
    grfMode: u32,
) callconv(@import("std").os.windows.WINAPI) ?*IStream;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHFindFiles(
    pidlFolder: ?*ITEMIDLIST,
    pidlSaveFile: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn PathGetShortPath(
    pszLongPath: *[260]u16,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn PathYetAnotherMakeUniqueName(
    pszUniqueName: *[260]u16,
    pszPath: ?[*:0]const u16,
    pszShort: ?[*:0]const u16,
    pszFileSpec: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn Win32DeleteFile(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHRestricted(
    rest: RESTRICTIONS,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SignalFileOpen(
    pidl: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn AssocGetDetailsOfPropKey(
    psf: ?*IShellFolder,
    pidl: ?*ITEMIDLIST,
    pkey: ?*const PROPERTYKEY,
    pv: ?*VARIANT,
    pfFoundPropKey: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHStartNetConnectionDialogW(
    hwnd: ?HWND,
    pszRemoteName: ?[*:0]const u16,
    dwType: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHDefExtractIconA(
    pszIconFile: ?[*:0]const u8,
    iIndex: i32,
    uFlags: u32,
    phiconLarge: ?*?HICON,
    phiconSmall: ?*?HICON,
    nIconSize: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHDefExtractIconW(
    pszIconFile: ?[*:0]const u16,
    iIndex: i32,
    uFlags: u32,
    phiconLarge: ?*?HICON,
    phiconSmall: ?*?HICON,
    nIconSize: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHOpenWithDialog(
    hwndParent: ?HWND,
    poainfo: ?*const OPENASINFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn Shell_GetImageLists(
    phiml: ?*?HIMAGELIST,
    phimlSmall: ?*?HIMAGELIST,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn Shell_GetCachedImageIndex(
    pwszIconPath: ?[*:0]const u16,
    iIconIndex: i32,
    uIconFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn Shell_GetCachedImageIndexA(
    pszIconPath: ?[*:0]const u8,
    iIconIndex: i32,
    uIconFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn Shell_GetCachedImageIndexW(
    pszIconPath: ?[*:0]const u16,
    iIconIndex: i32,
    uIconFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHValidateUNC(
    hwndOwner: ?HWND,
    pszFile: ?PWSTR,
    fConnect: VALIDATEUNC_OPTION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHSetInstanceExplorer(
    punk: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn IsUserAnAdmin(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHShellFolderView_Message(
    hwndMain: ?HWND,
    uMsg: u32,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHCreateShellFolderView(
    pcsfv: ?*const SFV_CREATE,
    ppsv: ?*?*IShellView,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn CDefFolderMenu_Create2(
    pidlFolder: ?*ITEMIDLIST,
    hwnd: ?HWND,
    cidl: u32,
    apidl: ?[*]?*ITEMIDLIST,
    psf: ?*IShellFolder,
    pfn: ?LPFNDFMCALLBACK,
    nKeys: u32,
    ahkeys: ?[*]const ?HKEY,
    ppcm: ?*?*IContextMenu,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateDefaultContextMenu(
    pdcm: ?*const DEFCONTEXTMENU,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHFind_InitMenuPopup(
    hmenu: ?HMENU,
    hwndOwner: ?HWND,
    idCmdFirst: u32,
    idCmdLast: u32,
) callconv(@import("std").os.windows.WINAPI) ?*IContextMenu;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHCreateShellFolderViewEx(
    pcsfv: ?*CSFV,
    ppsv: ?*?*IShellView,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetSetSettings(
    lpss: ?*SHELLSTATEA,
    dwMask: SSF_MASK,
    bSet: BOOL,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetSettings(
    psfs: ?*SHELLFLAGSTATE,
    dwMask: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHBindToParent(
    pidl: ?*ITEMIDLIST,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
    ppidlLast: ?*?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHBindToFolderIDListParent(
    psfRoot: ?*IShellFolder,
    pidl: ?*ITEMIDLIST,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
    ppidlLast: ?*?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHBindToFolderIDListParentEx(
    psfRoot: ?*IShellFolder,
    pidl: ?*ITEMIDLIST,
    ppbc: ?*IBindCtx,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
    ppidlLast: ?*?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHBindToObject(
    psf: ?*IShellFolder,
    pidl: ?*ITEMIDLIST,
    pbc: ?*IBindCtx,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHParseDisplayName(
    pszName: ?[*:0]const u16,
    pbc: ?*IBindCtx,
    ppidl: ?*?*ITEMIDLIST,
    sfgaoIn: u32,
    psfgaoOut: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHPathPrepareForWriteA(
    hwnd: ?HWND,
    punkEnableModless: ?*IUnknown,
    pszPath: ?[*:0]const u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHPathPrepareForWriteW(
    hwnd: ?HWND,
    punkEnableModless: ?*IUnknown,
    pszPath: ?[*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHCreateFileExtractIconW(
    pszFile: ?[*:0]const u16,
    dwFileAttributes: u32,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHLimitInputEdit(
    hwndEdit: ?HWND,
    psf: ?*IShellFolder,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetAttributesFromDataObject(
    pdo: ?*IDataObject,
    dwAttributeMask: u32,
    pdwAttributes: ?*u32,
    pcItems: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHMapPIDLToSystemImageListIndex(
    pshf: ?*IShellFolder,
    pidl: ?*ITEMIDLIST,
    piIndexSel: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHCLSIDFromString(
    psz: ?[*:0]const u16,
    pclsid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn PickIconDlg(
    hwnd: ?HWND,
    pszIconPath: [*:0]u16,
    cchIconPath: u32,
    piIconIndex: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shell32" fn StgMakeUniqueName(
    pstgParent: ?*IStorage,
    pszFileSpec: ?[*:0]const u16,
    grfMode: u32,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHChangeNotifyRegisterThread(
    status: SCNRT_STATUS,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "shell32" fn PathQualify(
    psz: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn PathIsSlowA(
    pszFile: ?[*:0]const u8,
    dwAttr: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn PathIsSlowW(
    pszFile: ?[*:0]const u16,
    dwAttr: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHCreatePropSheetExtArray(
    hKey: ?HKEY,
    pszSubKey: ?[*:0]const u16,
    max_iface: u32,
) callconv(@import("std").os.windows.WINAPI) ?HPSXA;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHOpenPropSheetW(
    pszCaption: ?[*:0]const u16,
    ahkeys: ?[*]?HKEY,
    ckeys: u32,
    pclsidDefault: ?*const Guid,
    pdtobj: ?*IDataObject,
    psb: ?*IShellBrowser,
    pStartPage: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shdocvw" fn SoftwareUpdateMessageBox(
    hWnd: ?HWND,
    pszDistUnit: ?[*:0]const u16,
    dwFlags: u32,
    psdi: ?*SOFTDISTINFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHMultiFileProperties(
    pdtobj: ?*IDataObject,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHCreateQueryCancelAutoPlayMoniker(
    ppmoniker: ?*?*IMoniker,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "shdocvw" fn ImportPrivacySettings(
    pszFilename: ?[*:0]const u16,
    pfParsePrivacyPreferences: ?*BOOL,
    pfParsePerSiteRules: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-shcore-scaling-l1-1-0" fn GetScaleFactorForDevice(
    deviceType: DISPLAY_DEVICE_TYPE,
) callconv(@import("std").os.windows.WINAPI) DEVICE_SCALE_FACTOR;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-shcore-scaling-l1-1-0" fn RegisterScaleChangeNotifications(
    displayDevice: DISPLAY_DEVICE_TYPE,
    hwndNotify: ?HWND,
    uMsgNotify: u32,
    pdwCookie: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-shcore-scaling-l1-1-0" fn RevokeScaleChangeNotifications(
    displayDevice: DISPLAY_DEVICE_TYPE,
    dwCookie: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.1'
pub extern "api-ms-win-shcore-scaling-l1-1-1" fn GetScaleFactorForMonitor(
    hMon: ?HMONITOR,
    pScale: ?*DEVICE_SCALE_FACTOR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.1'
pub extern "api-ms-win-shcore-scaling-l1-1-1" fn RegisterScaleChangeEvent(
    hEvent: ?HANDLE,
    pdwCookie: ?*usize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.1'
pub extern "api-ms-win-shcore-scaling-l1-1-1" fn UnregisterScaleChangeEvent(
    dwCookie: usize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.1'
pub extern "api-ms-win-shcore-scaling-l1-1-2" fn GetDpiForShellUIComponent(
    param0: SHELL_UI_COMPONENT,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn CommandLineToArgvW(
    lpCmdLine: ?[*:0]const u16,
    pNumArgs: ?*i32,
) callconv(@import("std").os.windows.WINAPI) ?*?PWSTR;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn DragQueryFileA(
    hDrop: ?HDROP,
    iFile: u32,
    lpszFile: ?[*:0]u8,
    cch: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn DragQueryFileW(
    hDrop: ?HDROP,
    iFile: u32,
    lpszFile: ?[*:0]u16,
    cch: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn DragQueryPoint(
    hDrop: ?HDROP,
    ppt: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn DragFinish(
    hDrop: ?HDROP,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn DragAcceptFiles(
    hWnd: ?HWND,
    fAccept: BOOL,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ShellExecuteA(
    hwnd: ?HWND,
    lpOperation: ?[*:0]const u8,
    lpFile: ?[*:0]const u8,
    lpParameters: ?[*:0]const u8,
    lpDirectory: ?[*:0]const u8,
    nShowCmd: i32,
) callconv(@import("std").os.windows.WINAPI) ?HINSTANCE;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ShellExecuteW(
    hwnd: ?HWND,
    lpOperation: ?[*:0]const u16,
    lpFile: ?[*:0]const u16,
    lpParameters: ?[*:0]const u16,
    lpDirectory: ?[*:0]const u16,
    nShowCmd: i32,
) callconv(@import("std").os.windows.WINAPI) ?HINSTANCE;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn FindExecutableA(
    lpFile: ?[*:0]const u8,
    lpDirectory: ?[*:0]const u8,
    lpResult: *[260]u8,
) callconv(@import("std").os.windows.WINAPI) ?HINSTANCE;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn FindExecutableW(
    lpFile: ?[*:0]const u16,
    lpDirectory: ?[*:0]const u16,
    lpResult: *[260]u16,
) callconv(@import("std").os.windows.WINAPI) ?HINSTANCE;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ShellAboutA(
    hWnd: ?HWND,
    szApp: ?[*:0]const u8,
    szOtherStuff: ?[*:0]const u8,
    hIcon: ?HICON,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ShellAboutW(
    hWnd: ?HWND,
    szApp: ?[*:0]const u16,
    szOtherStuff: ?[*:0]const u16,
    hIcon: ?HICON,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn DuplicateIcon(
    hInst: ?HINSTANCE,
    hIcon: ?HICON,
) callconv(@import("std").os.windows.WINAPI) ?HICON;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ExtractAssociatedIconA(
    hInst: ?HINSTANCE,
    pszIconPath: *[128]u8,
    piIcon: ?*u16,
) callconv(@import("std").os.windows.WINAPI) ?HICON;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ExtractAssociatedIconW(
    hInst: ?HINSTANCE,
    pszIconPath: *[128]u16,
    piIcon: ?*u16,
) callconv(@import("std").os.windows.WINAPI) ?HICON;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ExtractAssociatedIconExA(
    hInst: ?HINSTANCE,
    pszIconPath: *[128]u8,
    piIconIndex: ?*u16,
    piIconId: ?*u16,
) callconv(@import("std").os.windows.WINAPI) ?HICON;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ExtractAssociatedIconExW(
    hInst: ?HINSTANCE,
    pszIconPath: *[128]u16,
    piIconIndex: ?*u16,
    piIconId: ?*u16,
) callconv(@import("std").os.windows.WINAPI) ?HICON;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ExtractIconA(
    hInst: ?HINSTANCE,
    pszExeFileName: ?[*:0]const u8,
    nIconIndex: u32,
) callconv(@import("std").os.windows.WINAPI) ?HICON;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ExtractIconW(
    hInst: ?HINSTANCE,
    pszExeFileName: ?[*:0]const u16,
    nIconIndex: u32,
) callconv(@import("std").os.windows.WINAPI) ?HICON;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHAppBarMessage(
    dwMessage: u32,
    pData: ?*APPBARDATA,
) callconv(@import("std").os.windows.WINAPI) usize;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn DoEnvironmentSubstA(
    pszSrc: [*:0]u8,
    cchSrc: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn DoEnvironmentSubstW(
    pszSrc: [*:0]u16,
    cchSrc: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ExtractIconExA(
    lpszFile: ?[*:0]const u8,
    nIconIndex: i32,
    phiconLarge: ?[*]?HICON,
    phiconSmall: ?[*]?HICON,
    nIcons: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ExtractIconExW(
    lpszFile: ?[*:0]const u16,
    nIconIndex: i32,
    phiconLarge: ?[*]?HICON,
    phiconSmall: ?[*]?HICON,
    nIcons: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHFileOperationA(
    lpFileOp: ?*SHFILEOPSTRUCTA,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHFileOperationW(
    lpFileOp: ?*SHFILEOPSTRUCTW,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHFreeNameMappings(
    hNameMappings: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ShellExecuteExA(
    pExecInfo: ?*SHELLEXECUTEINFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ShellExecuteExW(
    pExecInfo: ?*SHELLEXECUTEINFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHCreateProcessAsUserW(
    pscpi: ?*SHCREATEPROCESSINFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHEvaluateSystemCommandTemplate(
    pszCmdTemplate: ?[*:0]const u16,
    ppszApplication: ?*?PWSTR,
    ppszCommandLine: ?*?PWSTR,
    ppszParameters: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn AssocCreateForClasses(
    rgClasses: [*]const ASSOCIATIONELEMENT,
    cClasses: u32,
    riid: ?*const Guid,
    ppv: **anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHQueryRecycleBinA(
    pszRootPath: ?[*:0]const u8,
    pSHQueryRBInfo: ?*SHQUERYRBINFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHQueryRecycleBinW(
    pszRootPath: ?[*:0]const u16,
    pSHQueryRBInfo: ?*SHQUERYRBINFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHEmptyRecycleBinA(
    hwnd: ?HWND,
    pszRootPath: ?[*:0]const u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHEmptyRecycleBinW(
    hwnd: ?HWND,
    pszRootPath: ?[*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHQueryUserNotificationState(
    pquns: ?*QUERY_USER_NOTIFICATION_STATE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn Shell_NotifyIconA(
    dwMessage: NOTIFY_ICON_MESSAGE,
    lpData: ?*NOTIFYICONDATAA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn Shell_NotifyIconW(
    dwMessage: NOTIFY_ICON_MESSAGE,
    lpData: ?*NOTIFYICONDATAW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shell32" fn Shell_NotifyIconGetRect(
    identifier: ?*const NOTIFYICONIDENTIFIER,
    iconLocation: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetFileInfoA(
    pszPath: ?[*:0]const u8,
    dwFileAttributes: FILE_FLAGS_AND_ATTRIBUTES,
    // TODO: what to do with BytesParamIndex 3?
    psfi: ?*SHFILEINFOA,
    cbFileInfo: u32,
    uFlags: SHGFI_FLAGS,
) callconv(@import("std").os.windows.WINAPI) usize;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetFileInfoW(
    pszPath: ?[*:0]const u16,
    dwFileAttributes: FILE_FLAGS_AND_ATTRIBUTES,
    // TODO: what to do with BytesParamIndex 3?
    psfi: ?*SHFILEINFOW,
    cbFileInfo: u32,
    uFlags: SHGFI_FLAGS,
) callconv(@import("std").os.windows.WINAPI) usize;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHGetStockIconInfo(
    siid: SHSTOCKICONID,
    uFlags: u32,
    psii: ?*SHSTOCKICONINFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetDiskFreeSpaceExA(
    pszDirectoryName: ?[*:0]const u8,
    pulFreeBytesAvailableToCaller: ?*ULARGE_INTEGER,
    pulTotalNumberOfBytes: ?*ULARGE_INTEGER,
    pulTotalNumberOfFreeBytes: ?*ULARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetDiskFreeSpaceExW(
    pszDirectoryName: ?[*:0]const u16,
    pulFreeBytesAvailableToCaller: ?*ULARGE_INTEGER,
    pulTotalNumberOfBytes: ?*ULARGE_INTEGER,
    pulTotalNumberOfFreeBytes: ?*ULARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetNewLinkInfoA(
    pszLinkTo: ?[*:0]const u8,
    pszDir: ?[*:0]const u8,
    pszName: *[260]u8,
    pfMustCopy: ?*BOOL,
    uFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetNewLinkInfoW(
    pszLinkTo: ?[*:0]const u16,
    pszDir: ?[*:0]const u16,
    pszName: *[260]u16,
    pfMustCopy: ?*BOOL,
    uFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHInvokePrinterCommandA(
    hwnd: ?HWND,
    uAction: u32,
    lpBuf1: ?[*:0]const u8,
    lpBuf2: ?[*:0]const u8,
    fModal: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHInvokePrinterCommandW(
    hwnd: ?HWND,
    uAction: u32,
    lpBuf1: ?[*:0]const u16,
    lpBuf2: ?[*:0]const u16,
    fModal: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHLoadNonloadedIconOverlayIdentifiers(
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHIsFileAvailableOffline(
    pwszPath: ?[*:0]const u16,
    pdwStatus: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHSetLocalizedName(
    pszPath: ?[*:0]const u16,
    pszResModule: ?[*:0]const u16,
    idsRes: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHRemoveLocalizedName(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHGetLocalizedName(
    pszPath: ?[*:0]const u16,
    pszResModule: [*:0]u16,
    cch: u32,
    pidsRes: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn ShellMessageBoxA(
    hAppInst: ?HINSTANCE,
    hWnd: ?HWND,
    lpcText: ?[*:0]const u8,
    lpcTitle: ?[*:0]const u8,
    fuStyle: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn ShellMessageBoxW(
    hAppInst: ?HINSTANCE,
    hWnd: ?HWND,
    lpcText: ?[*:0]const u16,
    lpcTitle: ?[*:0]const u16,
    fuStyle: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "shell32" fn IsLFNDriveA(
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "shell32" fn IsLFNDriveW(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHEnumerateUnreadMailAccountsW(
    hKeyUser: ?HKEY,
    dwIndex: u32,
    pszMailAddress: [*:0]u16,
    cchMailAddress: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetUnreadMailCountW(
    hKeyUser: ?HKEY,
    pszMailAddress: ?[*:0]const u16,
    pdwCount: ?*u32,
    pFileTime: ?*FILETIME,
    pszShellExecuteCommand: ?[*:0]u16,
    cchShellExecuteCommand: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHSetUnreadMailCountW(
    pszMailAddress: ?[*:0]const u16,
    dwCount: u32,
    pszShellExecuteCommand: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHTestTokenMembership(
    hToken: ?HANDLE,
    ulRID: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetImageList(
    iImageList: i32,
    riid: ?*const Guid,
    ppvObj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn InitNetworkAddressControl(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHGetDriveMedia(
    pszDrive: ?[*:0]const u16,
    pdwMediaContent: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrChrA(
    pszStart: ?[*:0]const u8,
    wMatch: u16,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrChrW(
    pszStart: ?[*:0]const u16,
    wMatch: u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrChrIA(
    pszStart: ?[*:0]const u8,
    wMatch: u16,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrChrIW(
    pszStart: ?[*:0]const u16,
    wMatch: u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn StrChrNW(
    pszStart: ?[*:0]const u16,
    wMatch: u16,
    cchMax: u32,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn StrChrNIW(
    pszStart: ?[*:0]const u16,
    wMatch: u16,
    cchMax: u32,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpNA(
    psz1: ?[*:0]const u8,
    psz2: ?[*:0]const u8,
    nChar: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpNW(
    psz1: ?[*:0]const u16,
    psz2: ?[*:0]const u16,
    nChar: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpNIA(
    psz1: ?[*:0]const u8,
    psz2: ?[*:0]const u8,
    nChar: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpNIW(
    psz1: ?[*:0]const u16,
    psz2: ?[*:0]const u16,
    nChar: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCSpnA(
    pszStr: ?[*:0]const u8,
    pszSet: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCSpnW(
    pszStr: ?[*:0]const u16,
    pszSet: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCSpnIA(
    pszStr: ?[*:0]const u8,
    pszSet: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCSpnIW(
    pszStr: ?[*:0]const u16,
    pszSet: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrDupA(
    pszSrch: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrDupW(
    pszSrch: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn StrFormatByteSizeEx(
    ull: u64,
    flags: SFBS_FLAGS,
    pszBuf: [*:0]u16,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrFormatByteSizeA(
    dw: u32,
    pszBuf: [*:0]u8,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrFormatByteSize64A(
    qdw: i64,
    pszBuf: [*:0]u8,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrFormatByteSizeW(
    qdw: i64,
    pszBuf: [*:0]u16,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrFormatKBSizeW(
    qdw: i64,
    pszBuf: [*:0]u16,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrFormatKBSizeA(
    qdw: i64,
    pszBuf: [*:0]u8,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrFromTimeIntervalA(
    pszOut: [*:0]u8,
    cchMax: u32,
    dwTimeMS: u32,
    digits: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrFromTimeIntervalW(
    pszOut: [*:0]u16,
    cchMax: u32,
    dwTimeMS: u32,
    digits: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrIsIntlEqualA(
    fCaseSens: BOOL,
    pszString1: ?[*:0]const u8,
    pszString2: ?[*:0]const u8,
    nChar: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrIsIntlEqualW(
    fCaseSens: BOOL,
    pszString1: ?[*:0]const u16,
    pszString2: ?[*:0]const u16,
    nChar: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrNCatA(
    psz1: [*:0]u8,
    psz2: ?[*:0]const u8,
    cchMax: i32,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrNCatW(
    psz1: [*:0]u16,
    psz2: ?[*:0]const u16,
    cchMax: i32,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrPBrkA(
    psz: ?[*:0]const u8,
    pszSet: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrPBrkW(
    psz: ?[*:0]const u16,
    pszSet: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrRChrA(
    pszStart: ?[*:0]const u8,
    pszEnd: ?[*:0]const u8,
    wMatch: u16,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrRChrW(
    pszStart: ?[*:0]const u16,
    pszEnd: ?[*:0]const u16,
    wMatch: u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrRChrIA(
    pszStart: ?[*:0]const u8,
    pszEnd: ?[*:0]const u8,
    wMatch: u16,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrRChrIW(
    pszStart: ?[*:0]const u16,
    pszEnd: ?[*:0]const u16,
    wMatch: u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrRStrIA(
    pszSource: ?[*:0]const u8,
    pszLast: ?[*:0]const u8,
    pszSrch: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrRStrIW(
    pszSource: ?[*:0]const u16,
    pszLast: ?[*:0]const u16,
    pszSrch: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrSpnA(
    psz: ?[*:0]const u8,
    pszSet: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrSpnW(
    psz: ?[*:0]const u16,
    pszSet: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrStrA(
    pszFirst: ?[*:0]const u8,
    pszSrch: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrStrW(
    pszFirst: ?[*:0]const u16,
    pszSrch: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrStrIA(
    pszFirst: ?[*:0]const u8,
    pszSrch: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrStrIW(
    pszFirst: ?[*:0]const u16,
    pszSrch: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn StrStrNW(
    pszFirst: ?[*:0]const u16,
    pszSrch: ?[*:0]const u16,
    cchMax: u32,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn StrStrNIW(
    pszFirst: ?[*:0]const u16,
    pszSrch: ?[*:0]const u16,
    cchMax: u32,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrToIntA(
    pszSrc: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrToIntW(
    pszSrc: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrToIntExA(
    pszString: ?[*:0]const u8,
    dwFlags: i32,
    piRet: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrToIntExW(
    pszString: ?[*:0]const u16,
    dwFlags: i32,
    piRet: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrToInt64ExA(
    pszString: ?[*:0]const u8,
    dwFlags: i32,
    pllRet: ?*i64,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrToInt64ExW(
    pszString: ?[*:0]const u16,
    dwFlags: i32,
    pllRet: ?*i64,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrTrimA(
    psz: ?PSTR,
    pszTrimChars: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrTrimW(
    psz: ?PWSTR,
    pszTrimChars: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCatW(
    psz1: ?PWSTR,
    psz2: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpW(
    psz1: ?[*:0]const u16,
    psz2: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpIW(
    psz1: ?[*:0]const u16,
    psz2: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCpyW(
    psz1: ?PWSTR,
    psz2: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCpyNW(
    pszDst: [*:0]u16,
    pszSrc: ?[*:0]const u16,
    cchMax: i32,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCatBuffW(
    pszDest: [*:0]u16,
    pszSrc: ?[*:0]const u16,
    cchDestBuffSize: i32,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCatBuffA(
    pszDest: [*:0]u8,
    pszSrc: ?[*:0]const u8,
    cchDestBuffSize: i32,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn ChrCmpIA(
    w1: u16,
    w2: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn ChrCmpIW(
    w1: u16,
    w2: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn wvnsprintfA(
    pszDest: [*:0]u8,
    cchDest: i32,
    pszFmt: ?[*:0]const u8,
    arglist: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn wvnsprintfW(
    pszDest: [*:0]u16,
    cchDest: i32,
    pszFmt: ?[*:0]const u16,
    arglist: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn wnsprintfA(
    pszDest: [*:0]u8,
    cchDest: i32,
    pszFmt: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn wnsprintfW(
    pszDest: [*:0]u16,
    cchDest: i32,
    pszFmt: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrRetToStrA(
    pstr: ?*STRRET,
    pidl: ?*ITEMIDLIST,
    ppsz: ?*?PSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrRetToStrW(
    pstr: ?*STRRET,
    pidl: ?*ITEMIDLIST,
    ppsz: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrRetToBufA(
    pstr: ?*STRRET,
    pidl: ?*ITEMIDLIST,
    pszBuf: [*:0]u8,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrRetToBufW(
    pstr: ?*STRRET,
    pidl: ?*ITEMIDLIST,
    pszBuf: [*:0]u16,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHStrDupA(
    psz: ?[*:0]const u8,
    ppwsz: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHStrDupW(
    psz: ?[*:0]const u16,
    ppwsz: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn StrCmpLogicalW(
    psz1: ?[*:0]const u16,
    psz2: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn StrCatChainW(
    pszDst: [*:0]u16,
    cchDst: u32,
    ichAt: u32,
    pszSrc: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn StrRetToBSTR(
    pstr: ?*STRRET,
    pidl: ?*ITEMIDLIST,
    pbstr: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHLoadIndirectString(
    pszSource: ?[*:0]const u16,
    pszOutBuf: [*:0]u16,
    cchOutBuf: u32,
    ppvReserved: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IsCharSpaceA(
    wch: CHAR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IsCharSpaceW(
    wch: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpCA(
    pszStr1: ?[*:0]const u8,
    pszStr2: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpCW(
    pszStr1: ?[*:0]const u16,
    pszStr2: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpICA(
    pszStr1: ?[*:0]const u8,
    pszStr2: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpICW(
    pszStr1: ?[*:0]const u16,
    pszStr2: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpNCA(
    pszStr1: ?[*:0]const u8,
    pszStr2: ?[*:0]const u8,
    nChar: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpNCW(
    pszStr1: ?[*:0]const u16,
    pszStr2: ?[*:0]const u16,
    nChar: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpNICA(
    pszStr1: ?[*:0]const u8,
    pszStr2: ?[*:0]const u8,
    nChar: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpNICW(
    pszStr1: ?[*:0]const u16,
    pszStr2: ?[*:0]const u16,
    nChar: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IntlStrEqWorkerA(
    fCaseSens: BOOL,
    lpString1: [*:0]const u8,
    lpString2: [*:0]const u8,
    nChar: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IntlStrEqWorkerW(
    fCaseSens: BOOL,
    lpString1: [*:0]const u16,
    lpString2: [*:0]const u16,
    nChar: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathAddBackslashA(
    pszPath: *[260]u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathAddBackslashW(
    pszPath: *[260]u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathAddExtensionA(
    pszPath: *[260]u8,
    pszExt: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathAddExtensionW(
    pszPath: *[260]u16,
    pszExt: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathAppendA(
    pszPath: *[260]u8,
    pszMore: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathAppendW(
    pszPath: *[260]u16,
    pszMore: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathBuildRootA(
    pszRoot: *[4]u8,
    iDrive: i32,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathBuildRootW(
    pszRoot: *[4]u16,
    iDrive: i32,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathCanonicalizeA(
    pszBuf: *[260]u8,
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathCanonicalizeW(
    pszBuf: *[260]u16,
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathCombineA(
    pszDest: *[260]u8,
    pszDir: ?[*:0]const u8,
    pszFile: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathCombineW(
    pszDest: *[260]u16,
    pszDir: ?[*:0]const u16,
    pszFile: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathCompactPathA(
    hDC: ?HDC,
    pszPath: *[260]u8,
    dx: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathCompactPathW(
    hDC: ?HDC,
    pszPath: *[260]u16,
    dx: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathCompactPathExA(
    pszOut: [*:0]u8,
    pszSrc: ?[*:0]const u8,
    cchMax: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathCompactPathExW(
    pszOut: [*:0]u16,
    pszSrc: ?[*:0]const u16,
    cchMax: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathCommonPrefixA(
    pszFile1: ?[*:0]const u8,
    pszFile2: ?[*:0]const u8,
    achPath: ?*[260]u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathCommonPrefixW(
    pszFile1: ?[*:0]const u16,
    pszFile2: ?[*:0]const u16,
    achPath: ?*[260]u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathFileExistsA(
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathFileExistsW(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathFindExtensionA(
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathFindExtensionW(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathFindFileNameA(
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathFindFileNameW(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathFindNextComponentA(
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathFindNextComponentW(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathFindOnPathA(
    pszPath: *[260]u8,
    ppszOtherDirs: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathFindOnPathW(
    pszPath: *[260]u16,
    ppszOtherDirs: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathFindSuffixArrayA(
    pszPath: ?[*:0]const u8,
    apszSuffix: [*]const ?[*:0]const u8,
    iArraySize: i32,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathFindSuffixArrayW(
    pszPath: ?[*:0]const u16,
    apszSuffix: [*]const ?[*:0]const u16,
    iArraySize: i32,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathGetArgsA(
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathGetArgsW(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsLFNFileSpecA(
    pszName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsLFNFileSpecW(
    pszName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathGetCharTypeA(
    ch: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathGetCharTypeW(
    ch: u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathGetDriveNumberA(
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathGetDriveNumberW(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsDirectoryA(
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsDirectoryW(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsDirectoryEmptyA(
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsDirectoryEmptyW(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsFileSpecA(
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsFileSpecW(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsPrefixA(
    pszPrefix: ?[*:0]const u8,
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsPrefixW(
    pszPrefix: ?[*:0]const u16,
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsRelativeA(
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsRelativeW(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsRootA(
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsRootW(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsSameRootA(
    pszPath1: ?[*:0]const u8,
    pszPath2: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsSameRootW(
    pszPath1: ?[*:0]const u16,
    pszPath2: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsUNCA(
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsUNCW(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsNetworkPathA(
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsNetworkPathW(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsUNCServerA(
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsUNCServerW(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsUNCServerShareA(
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsUNCServerShareW(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsContentTypeA(
    pszPath: ?[*:0]const u8,
    pszContentType: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsContentTypeW(
    pszPath: ?[*:0]const u16,
    pszContentType: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsURLA(
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsURLW(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathMakePrettyA(
    pszPath: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathMakePrettyW(
    pszPath: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathMatchSpecA(
    pszFile: ?[*:0]const u8,
    pszSpec: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathMatchSpecW(
    pszFile: ?[*:0]const u16,
    pszSpec: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn PathMatchSpecExA(
    pszFile: ?[*:0]const u8,
    pszSpec: ?[*:0]const u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn PathMatchSpecExW(
    pszFile: ?[*:0]const u16,
    pszSpec: ?[*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathParseIconLocationA(
    pszIconFile: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathParseIconLocationW(
    pszIconFile: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathQuoteSpacesA(
    lpsz: *[260]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathQuoteSpacesW(
    lpsz: *[260]u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRelativePathToA(
    pszPath: *[260]u8,
    pszFrom: ?[*:0]const u8,
    dwAttrFrom: u32,
    pszTo: ?[*:0]const u8,
    dwAttrTo: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRelativePathToW(
    pszPath: *[260]u16,
    pszFrom: ?[*:0]const u16,
    dwAttrFrom: u32,
    pszTo: ?[*:0]const u16,
    dwAttrTo: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRemoveArgsA(
    pszPath: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRemoveArgsW(
    pszPath: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRemoveBackslashA(
    pszPath: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRemoveBackslashW(
    pszPath: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRemoveBlanksA(
    pszPath: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRemoveBlanksW(
    pszPath: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRemoveExtensionA(
    pszPath: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRemoveExtensionW(
    pszPath: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRemoveFileSpecA(
    pszPath: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRemoveFileSpecW(
    pszPath: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRenameExtensionA(
    pszPath: *[260]u8,
    pszExt: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRenameExtensionW(
    pszPath: *[260]u16,
    pszExt: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathSearchAndQualifyA(
    pszPath: ?[*:0]const u8,
    pszBuf: [*:0]u8,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathSearchAndQualifyW(
    pszPath: ?[*:0]const u16,
    pszBuf: [*:0]u16,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathSetDlgItemPathA(
    hDlg: ?HWND,
    id: i32,
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathSetDlgItemPathW(
    hDlg: ?HWND,
    id: i32,
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathSkipRootA(
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathSkipRootW(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathStripPathA(
    pszPath: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathStripPathW(
    pszPath: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathStripToRootA(
    pszPath: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathStripToRootW(
    pszPath: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathUnquoteSpacesA(
    lpsz: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathUnquoteSpacesW(
    lpsz: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathMakeSystemFolderA(
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathMakeSystemFolderW(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathUnmakeSystemFolderA(
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathUnmakeSystemFolderW(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsSystemFolderA(
    pszPath: ?[*:0]const u8,
    dwAttrb: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsSystemFolderW(
    pszPath: ?[*:0]const u16,
    dwAttrb: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathUndecorateA(
    pszPath: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathUndecorateW(
    pszPath: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathUnExpandEnvStringsA(
    pszPath: ?[*:0]const u8,
    pszBuf: [*:0]u8,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathUnExpandEnvStringsW(
    pszPath: ?[*:0]const u16,
    pszBuf: [*:0]u16,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlCompareA(
    psz1: ?[*:0]const u8,
    psz2: ?[*:0]const u8,
    fIgnoreSlash: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlCompareW(
    psz1: ?[*:0]const u16,
    psz2: ?[*:0]const u16,
    fIgnoreSlash: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlCombineA(
    pszBase: ?[*:0]const u8,
    pszRelative: ?[*:0]const u8,
    pszCombined: ?[*:0]u8,
    pcchCombined: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlCombineW(
    pszBase: ?[*:0]const u16,
    pszRelative: ?[*:0]const u16,
    pszCombined: ?[*:0]u16,
    pcchCombined: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlCanonicalizeA(
    pszUrl: ?[*:0]const u8,
    pszCanonicalized: [*:0]u8,
    pcchCanonicalized: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlCanonicalizeW(
    pszUrl: ?[*:0]const u16,
    pszCanonicalized: [*:0]u16,
    pcchCanonicalized: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlIsOpaqueA(
    pszURL: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlIsOpaqueW(
    pszURL: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlIsNoHistoryA(
    pszURL: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlIsNoHistoryW(
    pszURL: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlIsA(
    pszUrl: ?[*:0]const u8,
    UrlIs: URLIS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlIsW(
    pszUrl: ?[*:0]const u16,
    UrlIs: URLIS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlGetLocationA(
    pszURL: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlGetLocationW(
    pszURL: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlUnescapeA(
    pszUrl: ?PSTR,
    pszUnescaped: ?[*:0]u8,
    pcchUnescaped: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlUnescapeW(
    pszUrl: ?PWSTR,
    pszUnescaped: ?[*:0]u16,
    pcchUnescaped: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlEscapeA(
    pszUrl: ?[*:0]const u8,
    pszEscaped: [*:0]u8,
    pcchEscaped: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlEscapeW(
    pszUrl: ?[*:0]const u16,
    pszEscaped: [*:0]u16,
    pcchEscaped: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlCreateFromPathA(
    pszPath: ?[*:0]const u8,
    pszUrl: [*:0]u8,
    pcchUrl: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlCreateFromPathW(
    pszPath: ?[*:0]const u16,
    pszUrl: [*:0]u16,
    pcchUrl: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathCreateFromUrlA(
    pszUrl: ?[*:0]const u8,
    pszPath: [*:0]u8,
    pcchPath: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathCreateFromUrlW(
    pszUrl: ?[*:0]const u16,
    pszPath: [*:0]u16,
    pcchPath: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn PathCreateFromUrlAlloc(
    pszIn: ?[*:0]const u16,
    ppszOut: ?*?PWSTR,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlHashA(
    pszUrl: ?[*:0]const u8,
    // TODO: what to do with BytesParamIndex 2?
    pbHash: ?*u8,
    cbHash: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlHashW(
    pszUrl: ?[*:0]const u16,
    // TODO: what to do with BytesParamIndex 2?
    pbHash: ?*u8,
    cbHash: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlGetPartW(
    pszIn: ?[*:0]const u16,
    pszOut: [*:0]u16,
    pcchOut: ?*u32,
    dwPart: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlGetPartA(
    pszIn: ?[*:0]const u8,
    pszOut: [*:0]u8,
    pcchOut: ?*u32,
    dwPart: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlApplySchemeA(
    pszIn: ?[*:0]const u8,
    pszOut: [*:0]u8,
    pcchOut: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlApplySchemeW(
    pszIn: ?[*:0]const u16,
    pszOut: [*:0]u16,
    pcchOut: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn HashData(
    // TODO: what to do with BytesParamIndex 1?
    pbData: ?*u8,
    cbData: u32,
    // TODO: what to do with BytesParamIndex 3?
    pbHash: ?*u8,
    cbHash: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn UrlFixupW(
    pcszUrl: ?[*:0]const u16,
    pszTranslatedUrl: [*:0]u16,
    cchMax: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn ParseURLA(
    pcszURL: ?[*:0]const u8,
    ppu: ?*PARSEDURLA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn ParseURLW(
    pcszURL: ?[*:0]const u16,
    ppu: ?*PARSEDURLW,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHDeleteEmptyKeyA(
    hkey: ?HKEY,
    pszSubKey: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHDeleteEmptyKeyW(
    hkey: ?HKEY,
    pszSubKey: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHDeleteKeyA(
    hkey: ?HKEY,
    pszSubKey: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHDeleteKeyW(
    hkey: ?HKEY,
    pszSubKey: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegDuplicateHKey(
    hkey: ?HKEY,
) callconv(@import("std").os.windows.WINAPI) ?HKEY;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHDeleteValueA(
    hkey: ?HKEY,
    pszSubKey: ?[*:0]const u8,
    pszValue: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHDeleteValueW(
    hkey: ?HKEY,
    pszSubKey: ?[*:0]const u16,
    pszValue: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHGetValueA(
    hkey: ?HKEY,
    pszSubKey: ?[*:0]const u8,
    pszValue: ?[*:0]const u8,
    pdwType: ?*u32,
    // TODO: what to do with BytesParamIndex 5?
    pvData: ?*anyopaque,
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHGetValueW(
    hkey: ?HKEY,
    pszSubKey: ?[*:0]const u16,
    pszValue: ?[*:0]const u16,
    pdwType: ?*u32,
    // TODO: what to do with BytesParamIndex 5?
    pvData: ?*anyopaque,
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHSetValueA(
    hkey: ?HKEY,
    pszSubKey: ?[*:0]const u8,
    pszValue: ?[*:0]const u8,
    dwType: u32,
    // TODO: what to do with BytesParamIndex 5?
    pvData: ?*const anyopaque,
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHSetValueW(
    hkey: ?HKEY,
    pszSubKey: ?[*:0]const u16,
    pszValue: ?[*:0]const u16,
    dwType: u32,
    // TODO: what to do with BytesParamIndex 5?
    pvData: ?*const anyopaque,
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHRegGetValueA(
    hkey: ?HKEY,
    pszSubKey: ?[*:0]const u8,
    pszValue: ?[*:0]const u8,
    srrfFlags: i32,
    pdwType: ?*u32,
    // TODO: what to do with BytesParamIndex 6?
    pvData: ?*anyopaque,
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHRegGetValueW(
    hkey: ?HKEY,
    pszSubKey: ?[*:0]const u16,
    pszValue: ?[*:0]const u16,
    srrfFlags: i32,
    pdwType: ?*u32,
    // TODO: what to do with BytesParamIndex 6?
    pvData: ?*anyopaque,
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn SHRegGetValueFromHKCUHKLM(
    pwszKey: ?[*:0]const u16,
    pwszValue: ?[*:0]const u16,
    srrfFlags: i32,
    pdwType: ?*u32,
    // TODO: what to do with BytesParamIndex 5?
    pvData: ?*anyopaque,
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHQueryValueExA(
    hkey: ?HKEY,
    pszValue: ?[*:0]const u8,
    pdwReserved: ?*u32,
    pdwType: ?*u32,
    // TODO: what to do with BytesParamIndex 5?
    pvData: ?*anyopaque,
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHQueryValueExW(
    hkey: ?HKEY,
    pszValue: ?[*:0]const u16,
    pdwReserved: ?*u32,
    pdwType: ?*u32,
    // TODO: what to do with BytesParamIndex 5?
    pvData: ?*anyopaque,
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHEnumKeyExA(
    hkey: ?HKEY,
    dwIndex: u32,
    pszName: [*:0]u8,
    pcchName: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHEnumKeyExW(
    hkey: ?HKEY,
    dwIndex: u32,
    pszName: [*:0]u16,
    pcchName: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHEnumValueA(
    hkey: ?HKEY,
    dwIndex: u32,
    pszValueName: ?[*:0]u8,
    pcchValueName: ?*u32,
    pdwType: ?*u32,
    // TODO: what to do with BytesParamIndex 6?
    pvData: ?*anyopaque,
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHEnumValueW(
    hkey: ?HKEY,
    dwIndex: u32,
    pszValueName: ?[*:0]u16,
    pcchValueName: ?*u32,
    pdwType: ?*u32,
    // TODO: what to do with BytesParamIndex 6?
    pvData: ?*anyopaque,
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHQueryInfoKeyA(
    hkey: ?HKEY,
    pcSubKeys: ?*u32,
    pcchMaxSubKeyLen: ?*u32,
    pcValues: ?*u32,
    pcchMaxValueNameLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHQueryInfoKeyW(
    hkey: ?HKEY,
    pcSubKeys: ?*u32,
    pcchMaxSubKeyLen: ?*u32,
    pcValues: ?*u32,
    pcchMaxValueNameLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHCopyKeyA(
    hkeySrc: ?HKEY,
    pszSrcSubKey: ?[*:0]const u8,
    hkeyDest: ?HKEY,
    fReserved: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHCopyKeyW(
    hkeySrc: ?HKEY,
    pszSrcSubKey: ?[*:0]const u16,
    hkeyDest: ?HKEY,
    fReserved: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegGetPathA(
    hKey: ?HKEY,
    pcszSubKey: ?[*:0]const u8,
    pcszValue: ?[*:0]const u8,
    pszPath: *[260]u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegGetPathW(
    hKey: ?HKEY,
    pcszSubKey: ?[*:0]const u16,
    pcszValue: ?[*:0]const u16,
    pszPath: *[260]u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegSetPathA(
    hKey: ?HKEY,
    pcszSubKey: ?[*:0]const u8,
    pcszValue: ?[*:0]const u8,
    pcszPath: ?[*:0]const u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegSetPathW(
    hKey: ?HKEY,
    pcszSubKey: ?[*:0]const u16,
    pcszValue: ?[*:0]const u16,
    pcszPath: ?[*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegCreateUSKeyA(
    pszPath: ?[*:0]const u8,
    samDesired: u32,
    hRelativeUSKey: isize,
    phNewUSKey: ?*isize,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegCreateUSKeyW(
    pwzPath: ?[*:0]const u16,
    samDesired: u32,
    hRelativeUSKey: isize,
    phNewUSKey: ?*isize,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegOpenUSKeyA(
    pszPath: ?[*:0]const u8,
    samDesired: u32,
    hRelativeUSKey: isize,
    phNewUSKey: ?*isize,
    fIgnoreHKCU: BOOL,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegOpenUSKeyW(
    pwzPath: ?[*:0]const u16,
    samDesired: u32,
    hRelativeUSKey: isize,
    phNewUSKey: ?*isize,
    fIgnoreHKCU: BOOL,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegQueryUSValueA(
    hUSKey: isize,
    pszValue: ?[*:0]const u8,
    pdwType: ?*u32,
    // TODO: what to do with BytesParamIndex 4?
    pvData: ?*anyopaque,
    pcbData: ?*u32,
    fIgnoreHKCU: BOOL,
    // TODO: what to do with BytesParamIndex 7?
    pvDefaultData: ?*anyopaque,
    dwDefaultDataSize: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegQueryUSValueW(
    hUSKey: isize,
    pszValue: ?[*:0]const u16,
    pdwType: ?*u32,
    // TODO: what to do with BytesParamIndex 4?
    pvData: ?*anyopaque,
    pcbData: ?*u32,
    fIgnoreHKCU: BOOL,
    // TODO: what to do with BytesParamIndex 7?
    pvDefaultData: ?*anyopaque,
    dwDefaultDataSize: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegWriteUSValueA(
    hUSKey: isize,
    pszValue: ?[*:0]const u8,
    dwType: u32,
    // TODO: what to do with BytesParamIndex 4?
    pvData: ?*const anyopaque,
    cbData: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegWriteUSValueW(
    hUSKey: isize,
    pwzValue: ?[*:0]const u16,
    dwType: u32,
    // TODO: what to do with BytesParamIndex 4?
    pvData: ?*const anyopaque,
    cbData: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegDeleteUSValueA(
    hUSKey: isize,
    pszValue: ?[*:0]const u8,
    delRegFlags: SHREGDEL_FLAGS,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegDeleteUSValueW(
    hUSKey: isize,
    pwzValue: ?[*:0]const u16,
    delRegFlags: SHREGDEL_FLAGS,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegDeleteEmptyUSKeyW(
    hUSKey: isize,
    pwzSubKey: ?[*:0]const u16,
    delRegFlags: SHREGDEL_FLAGS,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegDeleteEmptyUSKeyA(
    hUSKey: isize,
    pszSubKey: ?[*:0]const u8,
    delRegFlags: SHREGDEL_FLAGS,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegEnumUSKeyA(
    hUSKey: isize,
    dwIndex: u32,
    pszName: [*:0]u8,
    pcchName: ?*u32,
    enumRegFlags: SHREGENUM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegEnumUSKeyW(
    hUSKey: isize,
    dwIndex: u32,
    pwzName: [*:0]u16,
    pcchName: ?*u32,
    enumRegFlags: SHREGENUM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegEnumUSValueA(
    hUSkey: isize,
    dwIndex: u32,
    pszValueName: [*:0]u8,
    pcchValueName: ?*u32,
    pdwType: ?*u32,
    // TODO: what to do with BytesParamIndex 6?
    pvData: ?*anyopaque,
    pcbData: ?*u32,
    enumRegFlags: SHREGENUM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegEnumUSValueW(
    hUSkey: isize,
    dwIndex: u32,
    pszValueName: [*:0]u16,
    pcchValueName: ?*u32,
    pdwType: ?*u32,
    // TODO: what to do with BytesParamIndex 6?
    pvData: ?*anyopaque,
    pcbData: ?*u32,
    enumRegFlags: SHREGENUM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegQueryInfoUSKeyA(
    hUSKey: isize,
    pcSubKeys: ?*u32,
    pcchMaxSubKeyLen: ?*u32,
    pcValues: ?*u32,
    pcchMaxValueNameLen: ?*u32,
    enumRegFlags: SHREGENUM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegQueryInfoUSKeyW(
    hUSKey: isize,
    pcSubKeys: ?*u32,
    pcchMaxSubKeyLen: ?*u32,
    pcValues: ?*u32,
    pcchMaxValueNameLen: ?*u32,
    enumRegFlags: SHREGENUM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegCloseUSKey(
    hUSKey: isize,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegGetUSValueA(
    pszSubKey: ?[*:0]const u8,
    pszValue: ?[*:0]const u8,
    pdwType: ?*u32,
    // TODO: what to do with BytesParamIndex 4?
    pvData: ?*anyopaque,
    pcbData: ?*u32,
    fIgnoreHKCU: BOOL,
    // TODO: what to do with BytesParamIndex 7?
    pvDefaultData: ?*anyopaque,
    dwDefaultDataSize: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegGetUSValueW(
    pszSubKey: ?[*:0]const u16,
    pszValue: ?[*:0]const u16,
    pdwType: ?*u32,
    // TODO: what to do with BytesParamIndex 4?
    pvData: ?*anyopaque,
    pcbData: ?*u32,
    fIgnoreHKCU: BOOL,
    // TODO: what to do with BytesParamIndex 7?
    pvDefaultData: ?*anyopaque,
    dwDefaultDataSize: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegSetUSValueA(
    pszSubKey: ?[*:0]const u8,
    pszValue: ?[*:0]const u8,
    dwType: u32,
    // TODO: what to do with BytesParamIndex 4?
    pvData: ?*const anyopaque,
    cbData: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegSetUSValueW(
    pwzSubKey: ?[*:0]const u16,
    pwzValue: ?[*:0]const u16,
    dwType: u32,
    // TODO: what to do with BytesParamIndex 4?
    pvData: ?*const anyopaque,
    cbData: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegGetIntW(
    hk: ?HKEY,
    pwzKey: ?[*:0]const u16,
    iDefault: i32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegGetBoolUSValueA(
    pszSubKey: ?[*:0]const u8,
    pszValue: ?[*:0]const u8,
    fIgnoreHKCU: BOOL,
    fDefault: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegGetBoolUSValueW(
    pszSubKey: ?[*:0]const u16,
    pszValue: ?[*:0]const u16,
    fIgnoreHKCU: BOOL,
    fDefault: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn AssocCreate(
    clsid: Guid,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn AssocQueryStringA(
    flags: u32,
    str: ASSOCSTR,
    pszAssoc: ?[*:0]const u8,
    pszExtra: ?[*:0]const u8,
    pszOut: ?[*:0]u8,
    pcchOut: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn AssocQueryStringW(
    flags: u32,
    str: ASSOCSTR,
    pszAssoc: ?[*:0]const u16,
    pszExtra: ?[*:0]const u16,
    pszOut: ?[*:0]u16,
    pcchOut: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn AssocQueryStringByKeyA(
    flags: u32,
    str: ASSOCSTR,
    hkAssoc: ?HKEY,
    pszExtra: ?[*:0]const u8,
    pszOut: ?[*:0]u8,
    pcchOut: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn AssocQueryStringByKeyW(
    flags: u32,
    str: ASSOCSTR,
    hkAssoc: ?HKEY,
    pszExtra: ?[*:0]const u16,
    pszOut: ?[*:0]u16,
    pcchOut: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn AssocQueryKeyA(
    flags: u32,
    key: ASSOCKEY,
    pszAssoc: ?[*:0]const u8,
    pszExtra: ?[*:0]const u8,
    phkeyOut: ?*?HKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn AssocQueryKeyW(
    flags: u32,
    key: ASSOCKEY,
    pszAssoc: ?[*:0]const u16,
    pszExtra: ?[*:0]const u16,
    phkeyOut: ?*?HKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn AssocIsDangerous(
    pszAssoc: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn AssocGetPerceivedType(
    pszExt: ?[*:0]const u16,
    ptype: ?*PERCEIVED,
    pflag: ?*u32,
    ppszType: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHOpenRegStreamA(
    hkey: ?HKEY,
    pszSubkey: ?[*:0]const u8,
    pszValue: ?[*:0]const u8,
    grfMode: u32,
) callconv(@import("std").os.windows.WINAPI) ?*IStream;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHOpenRegStreamW(
    hkey: ?HKEY,
    pszSubkey: ?[*:0]const u16,
    pszValue: ?[*:0]const u16,
    grfMode: u32,
) callconv(@import("std").os.windows.WINAPI) ?*IStream;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHOpenRegStream2A(
    hkey: ?HKEY,
    pszSubkey: ?[*:0]const u8,
    pszValue: ?[*:0]const u8,
    grfMode: u32,
) callconv(@import("std").os.windows.WINAPI) ?*IStream;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHOpenRegStream2W(
    hkey: ?HKEY,
    pszSubkey: ?[*:0]const u16,
    pszValue: ?[*:0]const u16,
    grfMode: u32,
) callconv(@import("std").os.windows.WINAPI) ?*IStream;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHCreateStreamOnFileA(
    pszFile: ?[*:0]const u8,
    grfMode: u32,
    ppstm: ?*?*IStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHCreateStreamOnFileW(
    pszFile: ?[*:0]const u16,
    grfMode: u32,
    ppstm: ?*?*IStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHCreateStreamOnFileEx(
    pszFile: ?[*:0]const u16,
    grfMode: u32,
    dwAttributes: u32,
    fCreate: BOOL,
    pstmTemplate: ?*IStream,
    ppstm: ?*?*IStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHCreateMemStream(
    // TODO: what to do with BytesParamIndex 1?
    pInit: ?*const u8,
    cbInit: u32,
) callconv(@import("std").os.windows.WINAPI) ?*IStream;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn GetAcceptLanguagesA(
    pszLanguages: [*:0]u8,
    pcchLanguages: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn GetAcceptLanguagesW(
    pszLanguages: [*:0]u16,
    pcchLanguages: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IUnknown_Set(
    ppunk: ?*?*IUnknown,
    punk: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IUnknown_AtomicRelease(
    ppunk: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IUnknown_GetWindow(
    punk: ?*IUnknown,
    phwnd: ?*?HWND,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IUnknown_SetSite(
    punk: ?*IUnknown,
    punkSite: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IUnknown_GetSite(
    punk: ?*IUnknown,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IUnknown_QueryService(
    punk: ?*IUnknown,
    guidService: ?*const Guid,
    riid: ?*const Guid,
    ppvOut: **anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IStream_Read(
    pstm: ?*IStream,
    // TODO: what to do with BytesParamIndex 2?
    pv: ?*anyopaque,
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn IStream_Write(
    pstm: ?*IStream,
    // TODO: what to do with BytesParamIndex 2?
    pv: ?*const anyopaque,
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IStream_Reset(
    pstm: ?*IStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IStream_Size(
    pstm: ?*IStream,
    pui: ?*ULARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn ConnectToConnectionPoint(
    punk: ?*IUnknown,
    riidEvent: ?*const Guid,
    fConnect: BOOL,
    punkTarget: ?*IUnknown,
    pdwCookie: ?*u32,
    ppcpOut: ?*?*IConnectionPoint,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn IStream_ReadPidl(
    pstm: ?*IStream,
    ppidlOut: ?*?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn IStream_WritePidl(
    pstm: ?*IStream,
    pidlWrite: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn IStream_ReadStr(
    pstm: ?*IStream,
    ppsz: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn IStream_WriteStr(
    pstm: ?*IStream,
    psz: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn IStream_Copy(
    pstmFrom: ?*IStream,
    pstmTo: ?*IStream,
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHGetViewStatePropertyBag(
    pidl: ?*ITEMIDLIST,
    pszBagName: ?[*:0]const u16,
    dwFlags: u32,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHFormatDateTimeA(
    pft: ?*const FILETIME,
    pdwFlags: ?*u32,
    pszBuf: [*:0]u8,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHFormatDateTimeW(
    pft: ?*const FILETIME,
    pdwFlags: ?*u32,
    pszBuf: [*:0]u16,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHAnsiToUnicode(
    pszSrc: ?[*:0]const u8,
    pwszDst: [*:0]u16,
    cwchBuf: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHAnsiToAnsi(
    pszSrc: ?[*:0]const u8,
    pszDst: [*:0]u8,
    cchBuf: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHUnicodeToAnsi(
    pwszSrc: ?[*:0]const u16,
    pszDst: [*:0]u8,
    cchBuf: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHUnicodeToUnicode(
    pwzSrc: ?[*:0]const u16,
    pwzDst: [*:0]u16,
    cwchBuf: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHMessageBoxCheckA(
    hwnd: ?HWND,
    pszText: ?[*:0]const u8,
    pszCaption: ?[*:0]const u8,
    uType: u32,
    iDefault: i32,
    pszRegVal: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHMessageBoxCheckW(
    hwnd: ?HWND,
    pszText: ?[*:0]const u16,
    pszCaption: ?[*:0]const u16,
    uType: u32,
    iDefault: i32,
    pszRegVal: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHSendMessageBroadcastA(
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHSendMessageBroadcastW(
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHStripMneumonicA(
    pszMenu: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) CHAR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHStripMneumonicW(
    pszMenu: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u16;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IsOS(
    dwOS: OS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shlwapi" fn SHGlobalCounterGetValue(
    id: SHGLOBALCOUNTER,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shlwapi" fn SHGlobalCounterIncrement(
    id: SHGLOBALCOUNTER,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shlwapi" fn SHGlobalCounterDecrement(
    id: SHGLOBALCOUNTER,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHAllocShared(
    // TODO: what to do with BytesParamIndex 1?
    pvData: ?*const anyopaque,
    dwSize: u32,
    dwProcessId: u32,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHFreeShared(
    hData: ?HANDLE,
    dwProcessId: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHLockShared(
    hData: ?HANDLE,
    dwProcessId: u32,
) callconv(@import("std").os.windows.WINAPI) ?*anyopaque;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHUnlockShared(
    pvData: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn WhichPlatform(
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn QISearch(
    that: ?*anyopaque,
    pqit: ?*QITAB,
    riid: ?*const Guid,
    ppv: **anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHIsLowMemoryMachine(
    dwType: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn GetMenuPosFromID(
    hmenu: ?HMENU,
    id: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHGetInverseCMAP(
    // TODO: what to do with BytesParamIndex 1?
    pbMap: ?*u8,
    cbMap: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHAutoComplete(
    hwndEdit: ?HWND,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHCreateThreadRef(
    pcRef: ?*i32,
    ppunk: ?*?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHSetThreadRef(
    punk: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHGetThreadRef(
    ppunk: **IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHSkipJunction(
    pbc: ?*IBindCtx,
    pclsid: ?*const Guid,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHCreateThread(
    pfnThreadProc: ?LPTHREAD_START_ROUTINE,
    pData: ?*anyopaque,
    flags: u32,
    pfnCallback: ?LPTHREAD_START_ROUTINE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn SHCreateThreadWithHandle(
    pfnThreadProc: ?LPTHREAD_START_ROUTINE,
    pData: ?*anyopaque,
    flags: u32,
    pfnCallback: ?LPTHREAD_START_ROUTINE,
    pHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHReleaseThreadRef(
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHCreateShellPalette(
    hdc: ?HDC,
) callconv(@import("std").os.windows.WINAPI) ?HPALETTE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn ColorRGBToHLS(
    clrRGB: u32,
    pwHue: ?*u16,
    pwLuminance: ?*u16,
    pwSaturation: ?*u16,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn ColorHLSToRGB(
    wHue: u16,
    wLuminance: u16,
    wSaturation: u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn ColorAdjustLuma(
    clrRGB: u32,
    n: i32,
    fScale: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn IsInternetESCEnabled(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "hlink" fn HlinkCreateFromMoniker(
    pimkTrgt: ?*IMoniker,
    pwzLocation: ?[*:0]const u16,
    pwzFriendlyName: ?[*:0]const u16,
    pihlsite: ?*IHlinkSite,
    dwSiteData: u32,
    piunkOuter: ?*IUnknown,
    riid: ?*const Guid,
    ppvObj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkCreateFromString(
    pwzTarget: ?[*:0]const u16,
    pwzLocation: ?[*:0]const u16,
    pwzFriendlyName: ?[*:0]const u16,
    pihlsite: ?*IHlinkSite,
    dwSiteData: u32,
    piunkOuter: ?*IUnknown,
    riid: ?*const Guid,
    ppvObj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkCreateFromData(
    piDataObj: ?*IDataObject,
    pihlsite: ?*IHlinkSite,
    dwSiteData: u32,
    piunkOuter: ?*IUnknown,
    riid: ?*const Guid,
    ppvObj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkQueryCreateFromData(
    piDataObj: ?*IDataObject,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkClone(
    pihl: ?*IHlink,
    riid: ?*const Guid,
    pihlsiteForClone: ?*IHlinkSite,
    dwSiteData: u32,
    ppvObj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkCreateBrowseContext(
    piunkOuter: ?*IUnknown,
    riid: ?*const Guid,
    ppvObj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkNavigateToStringReference(
    pwzTarget: ?[*:0]const u16,
    pwzLocation: ?[*:0]const u16,
    pihlsite: ?*IHlinkSite,
    dwSiteData: u32,
    pihlframe: ?*IHlinkFrame,
    grfHLNF: u32,
    pibc: ?*IBindCtx,
    pibsc: ?*IBindStatusCallback,
    pihlbc: ?*IHlinkBrowseContext,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkNavigate(
    pihl: ?*IHlink,
    pihlframe: ?*IHlinkFrame,
    grfHLNF: u32,
    pbc: ?*IBindCtx,
    pibsc: ?*IBindStatusCallback,
    pihlbc: ?*IHlinkBrowseContext,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkOnNavigate(
    pihlframe: ?*IHlinkFrame,
    pihlbc: ?*IHlinkBrowseContext,
    grfHLNF: u32,
    pimkTarget: ?*IMoniker,
    pwzLocation: ?[*:0]const u16,
    pwzFriendlyName: ?[*:0]const u16,
    puHLID: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkUpdateStackItem(
    pihlframe: ?*IHlinkFrame,
    pihlbc: ?*IHlinkBrowseContext,
    uHLID: u32,
    pimkTrgt: ?*IMoniker,
    pwzLocation: ?[*:0]const u16,
    pwzFriendlyName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkOnRenameDocument(
    dwReserved: u32,
    pihlbc: ?*IHlinkBrowseContext,
    pimkOld: ?*IMoniker,
    pimkNew: ?*IMoniker,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkResolveMonikerForData(
    pimkReference: ?*IMoniker,
    reserved: u32,
    pibc: ?*IBindCtx,
    cFmtetc: u32,
    rgFmtetc: ?*FORMATETC,
    pibsc: ?*IBindStatusCallback,
    pimkBase: ?*IMoniker,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkResolveStringForData(
    pwzReference: ?[*:0]const u16,
    reserved: u32,
    pibc: ?*IBindCtx,
    cFmtetc: u32,
    rgFmtetc: ?*FORMATETC,
    pibsc: ?*IBindStatusCallback,
    pimkBase: ?*IMoniker,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkParseDisplayName(
    pibc: ?*IBindCtx,
    pwzDisplayName: ?[*:0]const u16,
    fNoForceAbs: BOOL,
    pcchEaten: ?*u32,
    ppimk: ?*?*IMoniker,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkCreateExtensionServices(
    pwzAdditionalHeaders: ?[*:0]const u16,
    phwnd: ?HWND,
    pszUsername: ?[*:0]const u16,
    pszPassword: ?[*:0]const u16,
    piunkOuter: ?*IUnknown,
    riid: ?*const Guid,
    ppvObj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkPreprocessMoniker(
    pibc: ?*IBindCtx,
    pimkIn: ?*IMoniker,
    ppimkOut: ?*?*IMoniker,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn OleSaveToStreamEx(
    piunk: ?*IUnknown,
    pistm: ?*IStream,
    fClearDirty: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkSetSpecialReference(
    uReference: u32,
    pwzReference: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkGetSpecialReference(
    uReference: u32,
    ppwzReference: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkCreateShortcut(
    grfHLSHORTCUTF: u32,
    pihl: ?*IHlink,
    pwzDir: ?[*:0]const u16,
    pwzFileName: ?[*:0]const u16,
    ppwzShortcutFile: ?*?PWSTR,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkCreateShortcutFromMoniker(
    grfHLSHORTCUTF: u32,
    pimkTarget: ?*IMoniker,
    pwzLocation: ?[*:0]const u16,
    pwzDir: ?[*:0]const u16,
    pwzFileName: ?[*:0]const u16,
    ppwzShortcutFile: ?*?PWSTR,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkCreateShortcutFromString(
    grfHLSHORTCUTF: u32,
    pwzTarget: ?[*:0]const u16,
    pwzLocation: ?[*:0]const u16,
    pwzDir: ?[*:0]const u16,
    pwzFileName: ?[*:0]const u16,
    ppwzShortcutFile: ?*?PWSTR,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkResolveShortcut(
    pwzShortcutFileName: ?[*:0]const u16,
    pihlsite: ?*IHlinkSite,
    dwSiteData: u32,
    piunkOuter: ?*IUnknown,
    riid: ?*const Guid,
    ppvObj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkResolveShortcutToMoniker(
    pwzShortcutFileName: ?[*:0]const u16,
    ppimkTarget: ?*?*IMoniker,
    ppwzLocation: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkResolveShortcutToString(
    pwzShortcutFileName: ?[*:0]const u16,
    ppwzTarget: ?*?PWSTR,
    ppwzLocation: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkIsShortcut(
    pwzFileName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkGetValueFromParams(
    pwzParams: ?[*:0]const u16,
    pwzName: ?[*:0]const u16,
    ppwzValue: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkTranslateURL(
    pwzURL: ?[*:0]const u16,
    grfFlags: u32,
    ppwzTranslatedURL: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathIsUNCEx(
    pszPath: ?[*:0]const u16,
    ppszServer: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchIsRoot(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchAddBackslashEx(
    pszPath: [*:0]u16,
    cchPath: usize,
    ppszEnd: ?*?PWSTR,
    pcchRemaining: ?*usize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchAddBackslash(
    pszPath: [*:0]u16,
    cchPath: usize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchRemoveBackslashEx(
    pszPath: ?PWSTR,
    cchPath: usize,
    ppszEnd: ?*?PWSTR,
    pcchRemaining: ?*usize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchRemoveBackslash(
    pszPath: [*:0]u16,
    cchPath: usize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchSkipRoot(
    pszPath: ?[*:0]const u16,
    ppszRootEnd: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchStripToRoot(
    pszPath: ?PWSTR,
    cchPath: usize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchRemoveFileSpec(
    pszPath: ?PWSTR,
    cchPath: usize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchFindExtension(
    pszPath: ?[*:0]const u16,
    cchPath: usize,
    ppszExt: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchAddExtension(
    pszPath: [*:0]u16,
    cchPath: usize,
    pszExt: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchRenameExtension(
    pszPath: [*:0]u16,
    cchPath: usize,
    pszExt: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchRemoveExtension(
    pszPath: ?PWSTR,
    cchPath: usize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchCanonicalizeEx(
    pszPathOut: [*:0]u16,
    cchPathOut: usize,
    pszPathIn: ?[*:0]const u16,
    dwFlags: PATHCCH_OPTIONS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchCanonicalize(
    pszPathOut: [*:0]u16,
    cchPathOut: usize,
    pszPathIn: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchCombineEx(
    pszPathOut: [*:0]u16,
    cchPathOut: usize,
    pszPathIn: ?[*:0]const u16,
    pszMore: ?[*:0]const u16,
    dwFlags: PATHCCH_OPTIONS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchCombine(
    pszPathOut: [*:0]u16,
    cchPathOut: usize,
    pszPathIn: ?[*:0]const u16,
    pszMore: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchAppendEx(
    pszPath: [*:0]u16,
    cchPath: usize,
    pszMore: ?[*:0]const u16,
    dwFlags: PATHCCH_OPTIONS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchAppend(
    pszPath: [*:0]u16,
    cchPath: usize,
    pszMore: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchStripPrefix(
    pszPath: [*:0]u16,
    cchPath: usize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathAllocCombine(
    pszPathIn: ?[*:0]const u16,
    pszMore: ?[*:0]const u16,
    dwFlags: PATHCCH_OPTIONS,
    ppszPathOut: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathAllocCanonicalize(
    pszPathIn: ?[*:0]const u16,
    dwFlags: PATHCCH_OPTIONS,
    ppszPathOut: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-psm-appnotify-l1-1-0" fn RegisterAppStateChangeNotification(
    Routine: ?PAPPSTATE_CHANGE_ROUTINE,
    Context: ?*anyopaque,
    Registration: ?*?*_APPSTATE_REGISTRATION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "api-ms-win-core-psm-appnotify-l1-1-0" fn UnregisterAppStateChangeNotification(
    Registration: ?*_APPSTATE_REGISTRATION,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "api-ms-win-core-psm-appnotify-l1-1-1" fn RegisterAppConstrainedChangeNotification(
    Routine: ?PAPPCONSTRAIN_CHANGE_ROUTINE,
    Context: ?*anyopaque,
    Registration: ?*?*_APPCONSTRAIN_REGISTRATION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "api-ms-win-core-psm-appnotify-l1-1-1" fn UnregisterAppConstrainedChangeNotification(
    Registration: ?*_APPCONSTRAIN_REGISTRATION,
) callconv(@import("std").os.windows.WINAPI) void;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (205)
//--------------------------------------------------------------------------------
pub const MULTIKEYHELP = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MULTIKEYHELPA,
    .wide => @This().MULTIKEYHELPW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MULTIKEYHELP' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const HELPWININFO = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().HELPWININFOA,
    .wide => @This().HELPWININFOW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'HELPWININFO' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const IShellLink = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().IShellLinkA,
    .wide => @This().IShellLinkW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'IShellLink' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const IExtractIcon = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().IExtractIconA,
    .wide => @This().IExtractIconW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'IExtractIcon' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const BROWSEINFO = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().BROWSEINFOA,
    .wide => @This().BROWSEINFOW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'BROWSEINFO' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const FILEDESCRIPTOR = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().FILEDESCRIPTORA,
    .wide => @This().FILEDESCRIPTORW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'FILEDESCRIPTOR' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const FILEGROUPDESCRIPTOR = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().FILEGROUPDESCRIPTORA,
    .wide => @This().FILEGROUPDESCRIPTORW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'FILEGROUPDESCRIPTOR' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHELLSTATE = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHELLSTATEA,
    .wide => @This().SHELLSTATEW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHELLSTATE' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const INewShortcutHook = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().INewShortcutHookA,
    .wide => @This().INewShortcutHookW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'INewShortcutHook' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const ICopyHook = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().ICopyHookA,
    .wide => @This().ICopyHookW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'ICopyHook' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const DRAGINFO = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().DRAGINFOA,
    .wide => @This().DRAGINFOW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'DRAGINFO' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHFILEOPSTRUCT = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHFILEOPSTRUCTA,
    .wide => @This().SHFILEOPSTRUCTW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHFILEOPSTRUCT' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHNAMEMAPPING = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHNAMEMAPPINGA,
    .wide => @This().SHNAMEMAPPINGW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHNAMEMAPPING' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHELLEXECUTEINFO = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHELLEXECUTEINFOA,
    .wide => @This().SHELLEXECUTEINFOW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHELLEXECUTEINFO' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const NOTIFYICONDATA = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().NOTIFYICONDATAA,
    .wide => @This().NOTIFYICONDATAW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'NOTIFYICONDATA' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHFILEINFO = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHFILEINFOA,
    .wide => @This().SHFILEINFOW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHFILEINFO' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const OPEN_PRINTER_PROPS_INFO = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().OPEN_PRINTER_PROPS_INFOA,
    .wide => @This().OPEN_PRINTER_PROPS_INFOW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'OPEN_PRINTER_PROPS_INFO' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PARSEDURL = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PARSEDURLA,
    .wide => @This().PARSEDURLW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PARSEDURL' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const NEWCPLINFO = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().NEWCPLINFOA,
    .wide => @This().NEWCPLINFOW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'NEWCPLINFO' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PROFILEINFO = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PROFILEINFOA,
    .wide => @This().PROFILEINFOW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PROFILEINFO' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const urlinvokecommandinfo = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().urlinvokecommandinfoA,
    .wide => @This().urlinvokecommandinfoW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'urlinvokecommandinfo' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const IUniformResourceLocator = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().IUniformResourceLocatorA,
    .wide => @This().IUniformResourceLocatorW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'IUniformResourceLocator' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const LoadUserProfile = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().LoadUserProfileA,
    .wide => @This().LoadUserProfileW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'LoadUserProfile' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetProfilesDirectory = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetProfilesDirectoryA,
    .wide => @This().GetProfilesDirectoryW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetProfilesDirectory' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const DeleteProfile = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().DeleteProfileA,
    .wide => @This().DeleteProfileW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'DeleteProfile' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetDefaultUserProfileDirectory = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetDefaultUserProfileDirectoryA,
    .wide => @This().GetDefaultUserProfileDirectoryW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetDefaultUserProfileDirectory' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetAllUsersProfileDirectory = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetAllUsersProfileDirectoryA,
    .wide => @This().GetAllUsersProfileDirectoryW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetAllUsersProfileDirectory' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetUserProfileDirectory = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetUserProfileDirectoryA,
    .wide => @This().GetUserProfileDirectoryW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetUserProfileDirectory' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const WinHelp = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().WinHelpA,
    .wide => @This().WinHelpW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'WinHelp' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHGetIconOverlayIndex = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHGetIconOverlayIndexA,
    .wide => @This().SHGetIconOverlayIndexW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHGetIconOverlayIndex' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const ILCreateFromPath = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().ILCreateFromPathA,
    .wide => @This().ILCreateFromPathW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'ILCreateFromPath' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHGetPathFromIDList = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHGetPathFromIDListA,
    .wide => @This().SHGetPathFromIDListW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHGetPathFromIDList' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHCreateDirectoryEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHCreateDirectoryExA,
    .wide => @This().SHCreateDirectoryExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHCreateDirectoryEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHGetSpecialFolderPath = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHGetSpecialFolderPathA,
    .wide => @This().SHGetSpecialFolderPathW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHGetSpecialFolderPath' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHGetFolderPath = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHGetFolderPathA,
    .wide => @This().SHGetFolderPathW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHGetFolderPath' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHSetFolderPath = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHSetFolderPathA,
    .wide => @This().SHSetFolderPathW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHSetFolderPath' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHGetFolderPathAndSubDir = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHGetFolderPathAndSubDirA,
    .wide => @This().SHGetFolderPathAndSubDirW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHGetFolderPathAndSubDir' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHBrowseForFolder = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHBrowseForFolderA,
    .wide => @This().SHBrowseForFolderW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHBrowseForFolder' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHUpdateImage = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHUpdateImageA,
    .wide => @This().SHUpdateImageW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHUpdateImage' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHGetDataFromIDList = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHGetDataFromIDListA,
    .wide => @This().SHGetDataFromIDListW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHGetDataFromIDList' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHDefExtractIcon = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHDefExtractIconA,
    .wide => @This().SHDefExtractIconW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHDefExtractIcon' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHPathPrepareForWrite = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHPathPrepareForWriteA,
    .wide => @This().SHPathPrepareForWriteW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHPathPrepareForWrite' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathIsSlow = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathIsSlowA,
    .wide => @This().PathIsSlowW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathIsSlow' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const DragQueryFile = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().DragQueryFileA,
    .wide => @This().DragQueryFileW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'DragQueryFile' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const ShellExecute = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().ShellExecuteA,
    .wide => @This().ShellExecuteW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'ShellExecute' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const FindExecutable = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().FindExecutableA,
    .wide => @This().FindExecutableW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'FindExecutable' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const ShellAbout = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().ShellAboutA,
    .wide => @This().ShellAboutW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'ShellAbout' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const ExtractAssociatedIcon = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().ExtractAssociatedIconA,
    .wide => @This().ExtractAssociatedIconW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'ExtractAssociatedIcon' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const ExtractAssociatedIconEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().ExtractAssociatedIconExA,
    .wide => @This().ExtractAssociatedIconExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'ExtractAssociatedIconEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const ExtractIcon = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().ExtractIconA,
    .wide => @This().ExtractIconW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'ExtractIcon' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const DoEnvironmentSubst = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().DoEnvironmentSubstA,
    .wide => @This().DoEnvironmentSubstW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'DoEnvironmentSubst' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const ExtractIconEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().ExtractIconExA,
    .wide => @This().ExtractIconExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'ExtractIconEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHFileOperation = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHFileOperationA,
    .wide => @This().SHFileOperationW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHFileOperation' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const ShellExecuteEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().ShellExecuteExA,
    .wide => @This().ShellExecuteExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'ShellExecuteEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHQueryRecycleBin = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHQueryRecycleBinA,
    .wide => @This().SHQueryRecycleBinW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHQueryRecycleBin' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHEmptyRecycleBin = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHEmptyRecycleBinA,
    .wide => @This().SHEmptyRecycleBinW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHEmptyRecycleBin' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const Shell_NotifyIcon = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().Shell_NotifyIconA,
    .wide => @This().Shell_NotifyIconW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'Shell_NotifyIcon' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHGetFileInfo = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHGetFileInfoA,
    .wide => @This().SHGetFileInfoW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHGetFileInfo' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHGetDiskFreeSpaceEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHGetDiskFreeSpaceExA,
    .wide => @This().SHGetDiskFreeSpaceExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHGetDiskFreeSpaceEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHGetNewLinkInfo = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHGetNewLinkInfoA,
    .wide => @This().SHGetNewLinkInfoW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHGetNewLinkInfo' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHInvokePrinterCommand = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHInvokePrinterCommandA,
    .wide => @This().SHInvokePrinterCommandW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHInvokePrinterCommand' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const ShellMessageBox = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().ShellMessageBoxA,
    .wide => @This().ShellMessageBoxW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'ShellMessageBox' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const IsLFNDrive = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().IsLFNDriveA,
    .wide => @This().IsLFNDriveW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'IsLFNDrive' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrChr = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrChrA,
    .wide => @This().StrChrW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrChr' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrChrI = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrChrIA,
    .wide => @This().StrChrIW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrChrI' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrCmpN = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrCmpNA,
    .wide => @This().StrCmpNW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrCmpN' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrCmpNI = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrCmpNIA,
    .wide => @This().StrCmpNIW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrCmpNI' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrCSpn = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrCSpnA,
    .wide => @This().StrCSpnW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrCSpn' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrCSpnI = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrCSpnIA,
    .wide => @This().StrCSpnIW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrCSpnI' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrDup = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrDupA,
    .wide => @This().StrDupW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrDup' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrFormatByteSize = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrFormatByteSizeA,
    .wide => @This().StrFormatByteSizeW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrFormatByteSize' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrFormatKBSize = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrFormatKBSizeA,
    .wide => @This().StrFormatKBSizeW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrFormatKBSize' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrFromTimeInterval = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrFromTimeIntervalA,
    .wide => @This().StrFromTimeIntervalW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrFromTimeInterval' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrIsIntlEqual = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrIsIntlEqualA,
    .wide => @This().StrIsIntlEqualW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrIsIntlEqual' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrNCat = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrNCatA,
    .wide => @This().StrNCatW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrNCat' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrPBrk = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrPBrkA,
    .wide => @This().StrPBrkW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrPBrk' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrRChr = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrRChrA,
    .wide => @This().StrRChrW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrRChr' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrRChrI = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrRChrIA,
    .wide => @This().StrRChrIW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrRChrI' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrRStrI = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrRStrIA,
    .wide => @This().StrRStrIW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrRStrI' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrSpn = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrSpnA,
    .wide => @This().StrSpnW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrSpn' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrStr = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrStrA,
    .wide => @This().StrStrW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrStr' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrStrI = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrStrIA,
    .wide => @This().StrStrIW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrStrI' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrToInt = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrToIntA,
    .wide => @This().StrToIntW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrToInt' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrToIntEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrToIntExA,
    .wide => @This().StrToIntExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrToIntEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrToInt64Ex = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrToInt64ExA,
    .wide => @This().StrToInt64ExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrToInt64Ex' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrTrim = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrTrimA,
    .wide => @This().StrTrimW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrTrim' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrCatBuff = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrCatBuffA,
    .wide => @This().StrCatBuffW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrCatBuff' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const ChrCmpI = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().ChrCmpIA,
    .wide => @This().ChrCmpIW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'ChrCmpI' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const wvnsprintf = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().wvnsprintfA,
    .wide => @This().wvnsprintfW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'wvnsprintf' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const wnsprintf = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().wnsprintfA,
    .wide => @This().wnsprintfW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'wnsprintf' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrRetToStr = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrRetToStrA,
    .wide => @This().StrRetToStrW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrRetToStr' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrRetToBuf = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrRetToBufA,
    .wide => @This().StrRetToBufW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrRetToBuf' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHStrDup = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHStrDupA,
    .wide => @This().SHStrDupW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHStrDup' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const IsCharSpace = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().IsCharSpaceA,
    .wide => @This().IsCharSpaceW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'IsCharSpace' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrCmpC = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrCmpCA,
    .wide => @This().StrCmpCW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrCmpC' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrCmpIC = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrCmpICA,
    .wide => @This().StrCmpICW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrCmpIC' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrCmpNC = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrCmpNCA,
    .wide => @This().StrCmpNCW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrCmpNC' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const StrCmpNIC = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().StrCmpNICA,
    .wide => @This().StrCmpNICW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'StrCmpNIC' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const IntlStrEqWorker = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().IntlStrEqWorkerA,
    .wide => @This().IntlStrEqWorkerW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'IntlStrEqWorker' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathAddBackslash = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathAddBackslashA,
    .wide => @This().PathAddBackslashW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathAddBackslash' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathAddExtension = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathAddExtensionA,
    .wide => @This().PathAddExtensionW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathAddExtension' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathAppend = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathAppendA,
    .wide => @This().PathAppendW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathAppend' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathBuildRoot = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathBuildRootA,
    .wide => @This().PathBuildRootW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathBuildRoot' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathCanonicalize = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathCanonicalizeA,
    .wide => @This().PathCanonicalizeW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathCanonicalize' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathCombine = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathCombineA,
    .wide => @This().PathCombineW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathCombine' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathCompactPath = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathCompactPathA,
    .wide => @This().PathCompactPathW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathCompactPath' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathCompactPathEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathCompactPathExA,
    .wide => @This().PathCompactPathExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathCompactPathEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathCommonPrefix = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathCommonPrefixA,
    .wide => @This().PathCommonPrefixW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathCommonPrefix' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathFileExists = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathFileExistsA,
    .wide => @This().PathFileExistsW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathFileExists' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathFindExtension = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathFindExtensionA,
    .wide => @This().PathFindExtensionW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathFindExtension' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathFindFileName = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathFindFileNameA,
    .wide => @This().PathFindFileNameW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathFindFileName' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathFindNextComponent = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathFindNextComponentA,
    .wide => @This().PathFindNextComponentW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathFindNextComponent' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathFindOnPath = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathFindOnPathA,
    .wide => @This().PathFindOnPathW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathFindOnPath' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathFindSuffixArray = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathFindSuffixArrayA,
    .wide => @This().PathFindSuffixArrayW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathFindSuffixArray' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathGetArgs = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathGetArgsA,
    .wide => @This().PathGetArgsW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathGetArgs' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathIsLFNFileSpec = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathIsLFNFileSpecA,
    .wide => @This().PathIsLFNFileSpecW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathIsLFNFileSpec' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathGetCharType = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathGetCharTypeA,
    .wide => @This().PathGetCharTypeW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathGetCharType' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathGetDriveNumber = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathGetDriveNumberA,
    .wide => @This().PathGetDriveNumberW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathGetDriveNumber' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathIsDirectory = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathIsDirectoryA,
    .wide => @This().PathIsDirectoryW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathIsDirectory' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathIsDirectoryEmpty = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathIsDirectoryEmptyA,
    .wide => @This().PathIsDirectoryEmptyW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathIsDirectoryEmpty' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathIsFileSpec = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathIsFileSpecA,
    .wide => @This().PathIsFileSpecW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathIsFileSpec' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathIsPrefix = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathIsPrefixA,
    .wide => @This().PathIsPrefixW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathIsPrefix' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathIsRelative = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathIsRelativeA,
    .wide => @This().PathIsRelativeW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathIsRelative' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathIsRoot = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathIsRootA,
    .wide => @This().PathIsRootW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathIsRoot' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathIsSameRoot = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathIsSameRootA,
    .wide => @This().PathIsSameRootW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathIsSameRoot' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathIsUNC = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathIsUNCA,
    .wide => @This().PathIsUNCW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathIsUNC' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathIsNetworkPath = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathIsNetworkPathA,
    .wide => @This().PathIsNetworkPathW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathIsNetworkPath' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathIsUNCServer = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathIsUNCServerA,
    .wide => @This().PathIsUNCServerW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathIsUNCServer' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathIsUNCServerShare = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathIsUNCServerShareA,
    .wide => @This().PathIsUNCServerShareW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathIsUNCServerShare' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathIsContentType = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathIsContentTypeA,
    .wide => @This().PathIsContentTypeW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathIsContentType' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathIsURL = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathIsURLA,
    .wide => @This().PathIsURLW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathIsURL' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathMakePretty = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathMakePrettyA,
    .wide => @This().PathMakePrettyW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathMakePretty' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathMatchSpec = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathMatchSpecA,
    .wide => @This().PathMatchSpecW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathMatchSpec' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathMatchSpecEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathMatchSpecExA,
    .wide => @This().PathMatchSpecExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathMatchSpecEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathParseIconLocation = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathParseIconLocationA,
    .wide => @This().PathParseIconLocationW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathParseIconLocation' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathQuoteSpaces = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathQuoteSpacesA,
    .wide => @This().PathQuoteSpacesW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathQuoteSpaces' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathRelativePathTo = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathRelativePathToA,
    .wide => @This().PathRelativePathToW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathRelativePathTo' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathRemoveArgs = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathRemoveArgsA,
    .wide => @This().PathRemoveArgsW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathRemoveArgs' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathRemoveBackslash = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathRemoveBackslashA,
    .wide => @This().PathRemoveBackslashW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathRemoveBackslash' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathRemoveBlanks = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathRemoveBlanksA,
    .wide => @This().PathRemoveBlanksW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathRemoveBlanks' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathRemoveExtension = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathRemoveExtensionA,
    .wide => @This().PathRemoveExtensionW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathRemoveExtension' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathRemoveFileSpec = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathRemoveFileSpecA,
    .wide => @This().PathRemoveFileSpecW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathRemoveFileSpec' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathRenameExtension = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathRenameExtensionA,
    .wide => @This().PathRenameExtensionW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathRenameExtension' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathSearchAndQualify = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathSearchAndQualifyA,
    .wide => @This().PathSearchAndQualifyW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathSearchAndQualify' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathSetDlgItemPath = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathSetDlgItemPathA,
    .wide => @This().PathSetDlgItemPathW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathSetDlgItemPath' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathSkipRoot = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathSkipRootA,
    .wide => @This().PathSkipRootW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathSkipRoot' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathStripPath = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathStripPathA,
    .wide => @This().PathStripPathW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathStripPath' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathStripToRoot = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathStripToRootA,
    .wide => @This().PathStripToRootW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathStripToRoot' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathUnquoteSpaces = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathUnquoteSpacesA,
    .wide => @This().PathUnquoteSpacesW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathUnquoteSpaces' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathMakeSystemFolder = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathMakeSystemFolderA,
    .wide => @This().PathMakeSystemFolderW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathMakeSystemFolder' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathUnmakeSystemFolder = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathUnmakeSystemFolderA,
    .wide => @This().PathUnmakeSystemFolderW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathUnmakeSystemFolder' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathIsSystemFolder = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathIsSystemFolderA,
    .wide => @This().PathIsSystemFolderW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathIsSystemFolder' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathUndecorate = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathUndecorateA,
    .wide => @This().PathUndecorateW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathUndecorate' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathUnExpandEnvStrings = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathUnExpandEnvStringsA,
    .wide => @This().PathUnExpandEnvStringsW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathUnExpandEnvStrings' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const UrlCompare = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().UrlCompareA,
    .wide => @This().UrlCompareW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'UrlCompare' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const UrlCombine = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().UrlCombineA,
    .wide => @This().UrlCombineW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'UrlCombine' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const UrlCanonicalize = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().UrlCanonicalizeA,
    .wide => @This().UrlCanonicalizeW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'UrlCanonicalize' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const UrlIsOpaque = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().UrlIsOpaqueA,
    .wide => @This().UrlIsOpaqueW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'UrlIsOpaque' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const UrlIsNoHistory = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().UrlIsNoHistoryA,
    .wide => @This().UrlIsNoHistoryW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'UrlIsNoHistory' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const UrlIs = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().UrlIsA,
    .wide => @This().UrlIsW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'UrlIs' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const UrlGetLocation = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().UrlGetLocationA,
    .wide => @This().UrlGetLocationW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'UrlGetLocation' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const UrlUnescape = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().UrlUnescapeA,
    .wide => @This().UrlUnescapeW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'UrlUnescape' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const UrlEscape = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().UrlEscapeA,
    .wide => @This().UrlEscapeW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'UrlEscape' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const UrlCreateFromPath = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().UrlCreateFromPathA,
    .wide => @This().UrlCreateFromPathW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'UrlCreateFromPath' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const PathCreateFromUrl = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().PathCreateFromUrlA,
    .wide => @This().PathCreateFromUrlW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'PathCreateFromUrl' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const UrlHash = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().UrlHashA,
    .wide => @This().UrlHashW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'UrlHash' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const UrlGetPart = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().UrlGetPartA,
    .wide => @This().UrlGetPartW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'UrlGetPart' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const UrlApplyScheme = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().UrlApplySchemeA,
    .wide => @This().UrlApplySchemeW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'UrlApplyScheme' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const ParseURL = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().ParseURLA,
    .wide => @This().ParseURLW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'ParseURL' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHDeleteEmptyKey = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHDeleteEmptyKeyA,
    .wide => @This().SHDeleteEmptyKeyW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHDeleteEmptyKey' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHDeleteKey = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHDeleteKeyA,
    .wide => @This().SHDeleteKeyW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHDeleteKey' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHDeleteValue = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHDeleteValueA,
    .wide => @This().SHDeleteValueW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHDeleteValue' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHGetValue = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHGetValueA,
    .wide => @This().SHGetValueW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHGetValue' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHSetValue = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHSetValueA,
    .wide => @This().SHSetValueW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHSetValue' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHRegGetValue = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHRegGetValueA,
    .wide => @This().SHRegGetValueW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHRegGetValue' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHQueryValueEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHQueryValueExA,
    .wide => @This().SHQueryValueExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHQueryValueEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHEnumKeyEx = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHEnumKeyExA,
    .wide => @This().SHEnumKeyExW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHEnumKeyEx' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHEnumValue = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHEnumValueA,
    .wide => @This().SHEnumValueW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHEnumValue' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHQueryInfoKey = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHQueryInfoKeyA,
    .wide => @This().SHQueryInfoKeyW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHQueryInfoKey' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHCopyKey = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHCopyKeyA,
    .wide => @This().SHCopyKeyW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHCopyKey' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHRegGetPath = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHRegGetPathA,
    .wide => @This().SHRegGetPathW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHRegGetPath' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHRegSetPath = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHRegSetPathA,
    .wide => @This().SHRegSetPathW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHRegSetPath' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHRegCreateUSKey = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHRegCreateUSKeyA,
    .wide => @This().SHRegCreateUSKeyW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHRegCreateUSKey' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHRegOpenUSKey = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHRegOpenUSKeyA,
    .wide => @This().SHRegOpenUSKeyW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHRegOpenUSKey' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHRegQueryUSValue = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHRegQueryUSValueA,
    .wide => @This().SHRegQueryUSValueW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHRegQueryUSValue' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHRegWriteUSValue = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHRegWriteUSValueA,
    .wide => @This().SHRegWriteUSValueW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHRegWriteUSValue' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHRegDeleteUSValue = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHRegDeleteUSValueA,
    .wide => @This().SHRegDeleteUSValueW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHRegDeleteUSValue' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHRegDeleteEmptyUSKey = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHRegDeleteEmptyUSKeyA,
    .wide => @This().SHRegDeleteEmptyUSKeyW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHRegDeleteEmptyUSKey' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHRegEnumUSKey = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHRegEnumUSKeyA,
    .wide => @This().SHRegEnumUSKeyW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHRegEnumUSKey' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHRegEnumUSValue = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHRegEnumUSValueA,
    .wide => @This().SHRegEnumUSValueW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHRegEnumUSValue' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHRegQueryInfoUSKey = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHRegQueryInfoUSKeyA,
    .wide => @This().SHRegQueryInfoUSKeyW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHRegQueryInfoUSKey' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHRegGetUSValue = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHRegGetUSValueA,
    .wide => @This().SHRegGetUSValueW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHRegGetUSValue' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHRegSetUSValue = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHRegSetUSValueA,
    .wide => @This().SHRegSetUSValueW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHRegSetUSValue' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHRegGetBoolUSValue = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHRegGetBoolUSValueA,
    .wide => @This().SHRegGetBoolUSValueW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHRegGetBoolUSValue' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const AssocQueryString = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().AssocQueryStringA,
    .wide => @This().AssocQueryStringW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'AssocQueryString' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const AssocQueryStringByKey = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().AssocQueryStringByKeyA,
    .wide => @This().AssocQueryStringByKeyW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'AssocQueryStringByKey' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const AssocQueryKey = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().AssocQueryKeyA,
    .wide => @This().AssocQueryKeyW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'AssocQueryKey' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHOpenRegStream = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHOpenRegStreamA,
    .wide => @This().SHOpenRegStreamW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHOpenRegStream' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHOpenRegStream2 = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHOpenRegStream2A,
    .wide => @This().SHOpenRegStream2W,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHOpenRegStream2' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHCreateStreamOnFile = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHCreateStreamOnFileA,
    .wide => @This().SHCreateStreamOnFileW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHCreateStreamOnFile' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetAcceptLanguages = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetAcceptLanguagesA,
    .wide => @This().GetAcceptLanguagesW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetAcceptLanguages' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHFormatDateTime = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHFormatDateTimeA,
    .wide => @This().SHFormatDateTimeW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHFormatDateTime' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHMessageBoxCheck = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHMessageBoxCheckA,
    .wide => @This().SHMessageBoxCheckW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHMessageBoxCheck' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHSendMessageBroadcast = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHSendMessageBroadcastA,
    .wide => @This().SHSendMessageBroadcastW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHSendMessageBroadcast' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const SHStripMneumonic = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().SHStripMneumonicA,
    .wide => @This().SHStripMneumonicW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'SHStripMneumonic' requires that UNICODE be set to true or false in the root module",
    ),
};
//--------------------------------------------------------------------------------
// Section: Imports (107)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BOOLEAN = @import("../foundation.zig").BOOLEAN;
const BSTR = @import("../foundation.zig").BSTR;
const BYTE_BLOB = @import("../system/com.zig").BYTE_BLOB;
const CHAR = @import("../foundation.zig").CHAR;
const COMDLG_FILTERSPEC = @import("../ui/shell/common.zig").COMDLG_FILTERSPEC;
const COORD = @import("../system/console.zig").COORD;
const CREATESTRUCTW = @import("../ui/windows_and_messaging.zig").CREATESTRUCTW;
const DEVICE_SCALE_FACTOR = @import("../ui/shell/common.zig").DEVICE_SCALE_FACTOR;
const DISPPARAMS = @import("../system/com.zig").DISPPARAMS;
const DROPEFFECT = @import("../system/ole.zig").DROPEFFECT;
const EXCEPINFO = @import("../system/com.zig").EXCEPINFO;
const FILE_FLAGS_AND_ATTRIBUTES = @import("../storage/file_system.zig").FILE_FLAGS_AND_ATTRIBUTES;
const FILETIME = @import("../foundation.zig").FILETIME;
const FORMATETC = @import("../system/com.zig").FORMATETC;
const GETPROPERTYSTOREFLAGS = @import("../ui/shell/properties_system.zig").GETPROPERTYSTOREFLAGS;
const HACCEL = @import("../ui/windows_and_messaging.zig").HACCEL;
const HANDLE = @import("../foundation.zig").HANDLE;
const HBITMAP = @import("../graphics/gdi.zig").HBITMAP;
const HDC = @import("../graphics/gdi.zig").HDC;
const HICON = @import("../ui/windows_and_messaging.zig").HICON;
const HIMAGELIST = @import("../ui/controls.zig").HIMAGELIST;
const HINSTANCE = @import("../foundation.zig").HINSTANCE;
const HKEY = @import("../system/registry.zig").HKEY;
const HMENU = @import("../ui/windows_and_messaging.zig").HMENU;
const HMONITOR = @import("../graphics/gdi.zig").HMONITOR;
const HPALETTE = @import("../graphics/gdi.zig").HPALETTE;
const HPROPSHEETPAGE = @import("../ui/controls.zig").HPROPSHEETPAGE;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IBindCtx = @import("../system/com.zig").IBindCtx;
const IBindStatusCallback = @import("../system/com.zig").IBindStatusCallback;
const ICondition = @import("../system/search.zig").ICondition;
const IConnectionPoint = @import("../system/com.zig").IConnectionPoint;
const IDataObject = @import("../system/com.zig").IDataObject;
const IDCompositionAnimation = @import("../graphics/direct_composition.zig").IDCompositionAnimation;
const IDispatch = @import("../system/com.zig").IDispatch;
const IDropSource = @import("../system/ole.zig").IDropSource;
const IDropTarget = @import("../system/ole.zig").IDropTarget;
const IEnumFORMATETC = @import("../system/com.zig").IEnumFORMATETC;
const IEnumGUID = @import("../system/com.zig").IEnumGUID;
const IEnumString = @import("../system/com.zig").IEnumString;
const IEnumUnknown = @import("../system/com.zig").IEnumUnknown;
const IMalloc = @import("../system/com.zig").IMalloc;
const IMoniker = @import("../system/com.zig").IMoniker;
const IObjectArray = @import("../ui/shell/common.zig").IObjectArray;
const IOleCommandTarget = @import("../system/ole.zig").IOleCommandTarget;
const IOleInPlaceSite = @import("../system/ole.zig").IOleInPlaceSite;
const IOleObject = @import("../system/ole.zig").IOleObject;
const IOleWindow = @import("../system/ole.zig").IOleWindow;
const IPersist = @import("../system/com.zig").IPersist;
const IPropertyBag = @import("../system/com/structured_storage.zig").IPropertyBag;
const IPropertyChangeArray = @import("../ui/shell/properties_system.zig").IPropertyChangeArray;
const IPropertyDescriptionList = @import("../ui/shell/properties_system.zig").IPropertyDescriptionList;
const IPropertySetStorage = @import("../system/com/structured_storage.zig").IPropertySetStorage;
const IPropertyStore = @import("../ui/shell/properties_system.zig").IPropertyStore;
const ISequentialStream = @import("../system/com.zig").ISequentialStream;
const IServiceProvider = @import("../system/com.zig").IServiceProvider;
const IStorage = @import("../system/com/structured_storage.zig").IStorage;
const IStream = @import("../system/com.zig").IStream;
const ITEMIDLIST = @import("../ui/shell/common.zig").ITEMIDLIST;
const IUnknown = @import("../system/com.zig").IUnknown;
const IXMLDOMDocument = @import("../data/xml/ms_xml.zig").IXMLDOMDocument;
const LARGE_INTEGER = @import("../foundation.zig").LARGE_INTEGER;
const LOGFONTW = @import("../graphics/gdi.zig").LOGFONTW;
const LPARAM = @import("../foundation.zig").LPARAM;
const LPFNSVADDPROPSHEETPAGE = @import("../ui/controls.zig").LPFNSVADDPROPSHEETPAGE;
const LPTHREAD_START_ROUTINE = @import("../system/threading.zig").LPTHREAD_START_ROUTINE;
const LRESULT = @import("../foundation.zig").LRESULT;
const MSG = @import("../ui/windows_and_messaging.zig").MSG;
const NETRESOURCEA = @import("../network_management/wnet.zig").NETRESOURCEA;
const NMHDR = @import("../ui/controls.zig").NMHDR;
const NTSTATUS = @import("../foundation.zig").NTSTATUS;
const OLECMDEXECOPT = @import("../system/ole.zig").OLECMDEXECOPT;
const OLECMDF = @import("../system/ole.zig").OLECMDF;
const OLECMDID = @import("../system/ole.zig").OLECMDID;
const OleMenuGroupWidths = @import("../system/ole.zig").OleMenuGroupWidths;
const OVERLAPPED = @import("../system/io.zig").OVERLAPPED;
const PDOPSTATUS = @import("../ui/shell/properties_system.zig").PDOPSTATUS;
const PERCEIVED = @import("../ui/shell/common.zig").PERCEIVED;
const POINT = @import("../foundation.zig").POINT;
const POINTL = @import("../foundation.zig").POINTL;
const PROCESS_INFORMATION = @import("../system/threading.zig").PROCESS_INFORMATION;
const PROPERTYKEY = @import("../ui/shell/properties_system.zig").PROPERTYKEY;
const PROPVARIANT = @import("../system/com/structured_storage.zig").PROPVARIANT;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;
const READYSTATE = @import("../system/ole.zig").READYSTATE;
const RECT = @import("../foundation.zig").RECT;
const RECTL = @import("../foundation.zig").RECTL;
const SECURITY_ATTRIBUTES = @import("../security.zig").SECURITY_ATTRIBUTES;
const SHANDLE_PTR = @import("../foundation.zig").SHANDLE_PTR;
const SHELLDETAILS = @import("../ui/shell/common.zig").SHELLDETAILS;
const SHITEMID = @import("../ui/shell/common.zig").SHITEMID;
const SIZE = @import("../foundation.zig").SIZE;
const SOFTDISTINFO = @import("../system/com/urlmon.zig").SOFTDISTINFO;
const STARTUPINFOW = @import("../system/threading.zig").STARTUPINFOW;
const STRRET = @import("../ui/shell/common.zig").STRRET;
const SYSTEMTIME = @import("../foundation.zig").SYSTEMTIME;
const TBBUTTON = @import("../ui/controls.zig").TBBUTTON;
const ULARGE_INTEGER = @import("../foundation.zig").ULARGE_INTEGER;
const VARIANT = @import("../system/com.zig").VARIANT;
const WIN32_ERROR = @import("../foundation.zig").WIN32_ERROR;
const WIN32_FIND_DATAA = @import("../storage/file_system.zig").WIN32_FIND_DATAA;
const WIN32_FIND_DATAW = @import("../storage/file_system.zig").WIN32_FIND_DATAW;
const WPARAM = @import("../foundation.zig").WPARAM;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "SUBCLASSPROC")) { _ = SUBCLASSPROC; }
    if (@hasDecl(@This(), "BFFCALLBACK")) { _ = BFFCALLBACK; }
    if (@hasDecl(@This(), "LPFNDFMCALLBACK")) { _ = LPFNDFMCALLBACK; }
    if (@hasDecl(@This(), "LPFNVIEWCALLBACK")) { _ = LPFNVIEWCALLBACK; }
    if (@hasDecl(@This(), "PFNCANSHAREFOLDERW")) { _ = PFNCANSHAREFOLDERW; }
    if (@hasDecl(@This(), "PFNSHOWSHAREFOLDERUIW")) { _ = PFNSHOWSHAREFOLDERUIW; }
    if (@hasDecl(@This(), "DLLGETVERSIONPROC")) { _ = DLLGETVERSIONPROC; }
    if (@hasDecl(@This(), "APPLET_PROC")) { _ = APPLET_PROC; }
    if (@hasDecl(@This(), "PAPPSTATE_CHANGE_ROUTINE")) { _ = PAPPSTATE_CHANGE_ROUTINE; }
    if (@hasDecl(@This(), "PAPPCONSTRAIN_CHANGE_ROUTINE")) { _ = PAPPCONSTRAIN_CHANGE_ROUTINE; }

    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
//--------------------------------------------------------------------------------
// Section: SubModules (2)
//--------------------------------------------------------------------------------
pub const common = @import("shell/common.zig");
pub const properties_system = @import("shell/properties_system.zig");
