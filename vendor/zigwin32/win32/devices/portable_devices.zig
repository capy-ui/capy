//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (1215)
//--------------------------------------------------------------------------------
pub const DEVPKEY_MTPBTH_IsConnected = DEVPROPKEY { .fmtid = Guid.initString("ea1237fa-589d-4472-84e4-0abe36fd62ef"), .pid = 2 };
pub const GUID_DEVINTERFACE_WPD = Guid.initString("6ac27878-a6fa-4155-ba85-f98f491d4f33");
pub const GUID_DEVINTERFACE_WPD_PRIVATE = Guid.initString("ba0c718f-4ded-49b7-bdd3-fabe28661211");
pub const GUID_DEVINTERFACE_WPD_SERVICE = Guid.initString("9ef44f80-3d64-4246-a6aa-206f328d1edc");
pub const WPD_CONTROL_FUNCTION_GENERIC_MESSAGE = @as(u32, 66);
pub const IOCTL_WPD_MESSAGE_READWRITE_ACCESS = @as(u32, 4243720);
pub const IOCTL_WPD_MESSAGE_READ_ACCESS = @as(u32, 4210952);
pub const WPD_DEVICE_OBJECT_ID = "DEVICE";
pub const PORTABLE_DEVICE_TYPE = "PortableDeviceType";
pub const PORTABLE_DEVICE_ICON = "Icons";
pub const PORTABLE_DEVICE_NAMESPACE_TIMEOUT = "PortableDeviceNameSpaceTimeout";
pub const PORTABLE_DEVICE_NAMESPACE_EXCLUDE_FROM_SHELL = "PortableDeviceNameSpaceExcludeFromShell";
pub const PORTABLE_DEVICE_NAMESPACE_THUMBNAIL_CONTENT_TYPES = "PortableDeviceNameSpaceThumbnailContentTypes";
pub const PORTABLE_DEVICE_IS_MASS_STORAGE = "PortableDeviceIsMassStorage";
pub const PORTABLE_DEVICE_DRM_SCHEME_WMDRM10_PD = "WMDRM10-PD";
pub const PORTABLE_DEVICE_DRM_SCHEME_PDDRM = "PDDRM";
pub const FACILITY_WPD = @as(u32, 42);
pub const E_WPD_DEVICE_ALREADY_OPENED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144731135));
pub const E_WPD_DEVICE_NOT_OPEN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144731134));
pub const E_WPD_OBJECT_ALREADY_ATTACHED_TO_DEVICE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144731133));
pub const E_WPD_OBJECT_NOT_ATTACHED_TO_DEVICE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144731132));
pub const E_WPD_OBJECT_NOT_COMMITED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144731131));
pub const E_WPD_DEVICE_IS_HUNG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144731130));
pub const E_WPD_SMS_INVALID_RECIPIENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144731036));
pub const E_WPD_SMS_INVALID_MESSAGE_BODY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144731035));
pub const E_WPD_SMS_SERVICE_UNAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144731034));
pub const E_WPD_SERVICE_ALREADY_OPENED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144730936));
pub const E_WPD_SERVICE_NOT_OPEN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144730935));
pub const E_WPD_OBJECT_ALREADY_ATTACHED_TO_SERVICE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144730934));
pub const E_WPD_OBJECT_NOT_ATTACHED_TO_SERVICE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144730933));
pub const E_WPD_SERVICE_BAD_PARAMETER_ORDER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144730932));
pub const WPD_EVENT_NOTIFICATION = Guid.initString("2ba2e40a-6b4c-4295-bb43-26322b99aeb2");
pub const WPD_EVENT_OBJECT_ADDED = Guid.initString("a726da95-e207-4b02-8d44-bef2e86cbffc");
pub const WPD_EVENT_OBJECT_REMOVED = Guid.initString("be82ab88-a52c-4823-96e5-d0272671fc38");
pub const WPD_EVENT_OBJECT_UPDATED = Guid.initString("1445a759-2e01-485d-9f27-ff07dae697ab");
pub const WPD_EVENT_DEVICE_RESET = Guid.initString("7755cf53-c1ed-44f3-b5a2-451e2c376b27");
pub const WPD_EVENT_DEVICE_CAPABILITIES_UPDATED = Guid.initString("36885aa1-cd54-4daa-b3d0-afb3e03f5999");
pub const WPD_EVENT_STORAGE_FORMAT = Guid.initString("3782616b-22bc-4474-a251-3070f8d38857");
pub const WPD_EVENT_OBJECT_TRANSFER_REQUESTED = Guid.initString("8d16a0a1-f2c6-41da-8f19-5e53721adbf2");
pub const WPD_EVENT_DEVICE_REMOVED = Guid.initString("e4cbca1b-6918-48b9-85ee-02be7c850af9");
pub const WPD_EVENT_SERVICE_METHOD_COMPLETE = Guid.initString("8a33f5f8-0acc-4d9b-9cc4-112d353b86ca");
pub const WPD_CONTENT_TYPE_FUNCTIONAL_OBJECT = Guid.initString("99ed0160-17ff-4c44-9d98-1d7a6f941921");
pub const WPD_CONTENT_TYPE_FOLDER = Guid.initString("27e2e392-a111-48e0-ab0c-e17705a05f85");
pub const WPD_CONTENT_TYPE_IMAGE = Guid.initString("ef2107d5-a52a-4243-a26b-62d4176d7603");
pub const WPD_CONTENT_TYPE_DOCUMENT = Guid.initString("680adf52-950a-4041-9b41-65e393648155");
pub const WPD_CONTENT_TYPE_CONTACT = Guid.initString("eaba8313-4525-4707-9f0e-87c6808e9435");
pub const WPD_CONTENT_TYPE_CONTACT_GROUP = Guid.initString("346b8932-4c36-40d8-9415-1828291f9de9");
pub const WPD_CONTENT_TYPE_AUDIO = Guid.initString("4ad2c85e-5e2d-45e5-8864-4f229e3c6cf0");
pub const WPD_CONTENT_TYPE_VIDEO = Guid.initString("9261b03c-3d78-4519-85e3-02c5e1f50bb9");
pub const WPD_CONTENT_TYPE_TELEVISION = Guid.initString("60a169cf-f2ae-4e21-9375-9677f11c1c6e");
pub const WPD_CONTENT_TYPE_PLAYLIST = Guid.initString("1a33f7e4-af13-48f5-994e-77369dfe04a3");
pub const WPD_CONTENT_TYPE_MIXED_CONTENT_ALBUM = Guid.initString("00f0c3ac-a593-49ac-9219-24abca5a2563");
pub const WPD_CONTENT_TYPE_AUDIO_ALBUM = Guid.initString("aa18737e-5009-48fa-ae21-85f24383b4e6");
pub const WPD_CONTENT_TYPE_IMAGE_ALBUM = Guid.initString("75793148-15f5-4a30-a813-54ed8a37e226");
pub const WPD_CONTENT_TYPE_VIDEO_ALBUM = Guid.initString("012b0db7-d4c1-45d6-b081-94b87779614f");
pub const WPD_CONTENT_TYPE_MEMO = Guid.initString("9cd20ecf-3b50-414f-a641-e473ffe45751");
pub const WPD_CONTENT_TYPE_EMAIL = Guid.initString("8038044a-7e51-4f8f-883d-1d0623d14533");
pub const WPD_CONTENT_TYPE_APPOINTMENT = Guid.initString("0fed060e-8793-4b1e-90c9-48ac389ac631");
pub const WPD_CONTENT_TYPE_TASK = Guid.initString("63252f2c-887f-4cb6-b1ac-d29855dcef6c");
pub const WPD_CONTENT_TYPE_PROGRAM = Guid.initString("d269f96a-247c-4bff-98fb-97f3c49220e6");
pub const WPD_CONTENT_TYPE_GENERIC_FILE = Guid.initString("0085e0a6-8d34-45d7-bc5c-447e59c73d48");
pub const WPD_CONTENT_TYPE_CALENDAR = Guid.initString("a1fd5967-6023-49a0-9df1-f8060be751b0");
pub const WPD_CONTENT_TYPE_GENERIC_MESSAGE = Guid.initString("e80eaaf8-b2db-4133-b67e-1bef4b4a6e5f");
pub const WPD_CONTENT_TYPE_NETWORK_ASSOCIATION = Guid.initString("031da7ee-18c8-4205-847e-89a11261d0f3");
pub const WPD_CONTENT_TYPE_CERTIFICATE = Guid.initString("dc3876e8-a948-4060-9050-cbd77e8a3d87");
pub const WPD_CONTENT_TYPE_WIRELESS_PROFILE = Guid.initString("0bac070a-9f5f-4da4-a8f6-3de44d68fd6c");
pub const WPD_CONTENT_TYPE_MEDIA_CAST = Guid.initString("5e88b3cc-3e65-4e62-bfff-229495253ab0");
pub const WPD_CONTENT_TYPE_SECTION = Guid.initString("821089f5-1d91-4dc9-be3c-bbb1b35b18ce");
pub const WPD_CONTENT_TYPE_UNSPECIFIED = Guid.initString("28d8d31e-249c-454e-aabc-34883168e634");
pub const WPD_CONTENT_TYPE_ALL = Guid.initString("80e170d2-1055-4a3e-b952-82cc4f8a8689");
pub const WPD_FUNCTIONAL_CATEGORY_DEVICE = Guid.initString("08ea466b-e3a4-4336-a1f3-a44d2b5c438c");
pub const WPD_FUNCTIONAL_CATEGORY_STORAGE = Guid.initString("23f05bbc-15de-4c2a-a55b-a9af5ce412ef");
pub const WPD_FUNCTIONAL_CATEGORY_STILL_IMAGE_CAPTURE = Guid.initString("613ca327-ab93-4900-b4fa-895bb5874b79");
pub const WPD_FUNCTIONAL_CATEGORY_AUDIO_CAPTURE = Guid.initString("3f2a1919-c7c2-4a00-855d-f57cf06debbb");
pub const WPD_FUNCTIONAL_CATEGORY_VIDEO_CAPTURE = Guid.initString("e23e5f6b-7243-43aa-8df1-0eb3d968a918");
pub const WPD_FUNCTIONAL_CATEGORY_SMS = Guid.initString("0044a0b1-c1e9-4afd-b358-a62c6117c9cf");
pub const WPD_FUNCTIONAL_CATEGORY_RENDERING_INFORMATION = Guid.initString("08600ba4-a7ba-4a01-ab0e-0065d0a356d3");
pub const WPD_FUNCTIONAL_CATEGORY_NETWORK_CONFIGURATION = Guid.initString("48f4db72-7c6a-4ab0-9e1a-470e3cdbf26a");
pub const WPD_FUNCTIONAL_CATEGORY_ALL = Guid.initString("2d8a6512-a74c-448e-ba8a-f4ac07c49399");
pub const WPD_OBJECT_FORMAT_ICON = Guid.initString("077232ed-102c-4638-9c22-83f142bfc822");
pub const WPD_OBJECT_FORMAT_M4A = Guid.initString("30aba7ac-6ffd-4c23-a359-3e9b52f3f1c8");
pub const WPD_OBJECT_FORMAT_NETWORK_ASSOCIATION = Guid.initString("b1020000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_X509V3CERTIFICATE = Guid.initString("b1030000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_MICROSOFT_WFC = Guid.initString("b1040000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_3GPA = Guid.initString("e5172730-f971-41ef-a10b-2271a0019d7a");
pub const WPD_OBJECT_FORMAT_3G2A = Guid.initString("1a11202d-8759-4e34-ba5e-b1211087eee4");
pub const WPD_OBJECT_FORMAT_ALL = Guid.initString("c1f62eb2-4bb3-479c-9cfa-05b5f3a57b22");
pub const WPD_CATEGORY_NULL = Guid.initString("00000000-0000-0000-0000-000000000000");
pub const WPD_PROPERTY_NULL = PROPERTYKEY { .fmtid = Guid.initString("00000000-0000-0000-0000-000000000000"), .pid = 0 };
pub const WPD_OBJECT_PROPERTIES_V1 = Guid.initString("ef6b490d-5cd8-437a-affc-da8b60ee4a3c");
pub const WPD_OBJECT_CONTENT_TYPE = PROPERTYKEY { .fmtid = Guid.initString("ef6b490d-5cd8-437a-affc-da8b60ee4a3c"), .pid = 7 };
pub const WPD_OBJECT_REFERENCES = PROPERTYKEY { .fmtid = Guid.initString("ef6b490d-5cd8-437a-affc-da8b60ee4a3c"), .pid = 14 };
pub const WPD_OBJECT_CONTAINER_FUNCTIONAL_OBJECT_ID = PROPERTYKEY { .fmtid = Guid.initString("ef6b490d-5cd8-437a-affc-da8b60ee4a3c"), .pid = 23 };
pub const WPD_OBJECT_GENERATE_THUMBNAIL_FROM_RESOURCE = PROPERTYKEY { .fmtid = Guid.initString("ef6b490d-5cd8-437a-affc-da8b60ee4a3c"), .pid = 24 };
pub const WPD_OBJECT_HINT_LOCATION_DISPLAY_NAME = PROPERTYKEY { .fmtid = Guid.initString("ef6b490d-5cd8-437a-affc-da8b60ee4a3c"), .pid = 25 };
pub const WPD_OBJECT_PROPERTIES_V2 = Guid.initString("0373cd3d-4a46-40d7-b4d8-73e8da74e775");
pub const WPD_OBJECT_SUPPORTED_UNITS = PROPERTYKEY { .fmtid = Guid.initString("0373cd3d-4a46-40d7-b4d8-73e8da74e775"), .pid = 2 };
pub const WPD_FUNCTIONAL_OBJECT_PROPERTIES_V1 = Guid.initString("8f052d93-abca-4fc5-a5ac-b01df4dbe598");
pub const WPD_FUNCTIONAL_OBJECT_CATEGORY = PROPERTYKEY { .fmtid = Guid.initString("8f052d93-abca-4fc5-a5ac-b01df4dbe598"), .pid = 2 };
pub const WPD_STORAGE_OBJECT_PROPERTIES_V1 = Guid.initString("01a3057a-74d6-4e80-bea7-dc4c212ce50a");
pub const WPD_STORAGE_TYPE = PROPERTYKEY { .fmtid = Guid.initString("01a3057a-74d6-4e80-bea7-dc4c212ce50a"), .pid = 2 };
pub const WPD_STORAGE_FILE_SYSTEM_TYPE = PROPERTYKEY { .fmtid = Guid.initString("01a3057a-74d6-4e80-bea7-dc4c212ce50a"), .pid = 3 };
pub const WPD_STORAGE_CAPACITY = PROPERTYKEY { .fmtid = Guid.initString("01a3057a-74d6-4e80-bea7-dc4c212ce50a"), .pid = 4 };
pub const WPD_STORAGE_FREE_SPACE_IN_BYTES = PROPERTYKEY { .fmtid = Guid.initString("01a3057a-74d6-4e80-bea7-dc4c212ce50a"), .pid = 5 };
pub const WPD_STORAGE_FREE_SPACE_IN_OBJECTS = PROPERTYKEY { .fmtid = Guid.initString("01a3057a-74d6-4e80-bea7-dc4c212ce50a"), .pid = 6 };
pub const WPD_STORAGE_DESCRIPTION = PROPERTYKEY { .fmtid = Guid.initString("01a3057a-74d6-4e80-bea7-dc4c212ce50a"), .pid = 7 };
pub const WPD_STORAGE_SERIAL_NUMBER = PROPERTYKEY { .fmtid = Guid.initString("01a3057a-74d6-4e80-bea7-dc4c212ce50a"), .pid = 8 };
pub const WPD_STORAGE_MAX_OBJECT_SIZE = PROPERTYKEY { .fmtid = Guid.initString("01a3057a-74d6-4e80-bea7-dc4c212ce50a"), .pid = 9 };
pub const WPD_STORAGE_CAPACITY_IN_OBJECTS = PROPERTYKEY { .fmtid = Guid.initString("01a3057a-74d6-4e80-bea7-dc4c212ce50a"), .pid = 10 };
pub const WPD_STORAGE_ACCESS_CAPABILITY = PROPERTYKEY { .fmtid = Guid.initString("01a3057a-74d6-4e80-bea7-dc4c212ce50a"), .pid = 11 };
pub const WPD_NETWORK_ASSOCIATION_PROPERTIES_V1 = Guid.initString("e4c93c1f-b203-43f1-a100-5a07d11b0274");
pub const WPD_NETWORK_ASSOCIATION_HOST_NETWORK_IDENTIFIERS = PROPERTYKEY { .fmtid = Guid.initString("e4c93c1f-b203-43f1-a100-5a07d11b0274"), .pid = 2 };
pub const WPD_NETWORK_ASSOCIATION_X509V3SEQUENCE = PROPERTYKEY { .fmtid = Guid.initString("e4c93c1f-b203-43f1-a100-5a07d11b0274"), .pid = 3 };
pub const WPD_STILL_IMAGE_CAPTURE_OBJECT_PROPERTIES_V1 = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260");
pub const WPD_STILL_IMAGE_CAPTURE_RESOLUTION = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 2 };
pub const WPD_STILL_IMAGE_CAPTURE_FORMAT = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 3 };
pub const WPD_STILL_IMAGE_COMPRESSION_SETTING = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 4 };
pub const WPD_STILL_IMAGE_WHITE_BALANCE = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 5 };
pub const WPD_STILL_IMAGE_RGB_GAIN = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 6 };
pub const WPD_STILL_IMAGE_FNUMBER = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 7 };
pub const WPD_STILL_IMAGE_FOCAL_LENGTH = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 8 };
pub const WPD_STILL_IMAGE_FOCUS_DISTANCE = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 9 };
pub const WPD_STILL_IMAGE_FOCUS_MODE = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 10 };
pub const WPD_STILL_IMAGE_EXPOSURE_METERING_MODE = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 11 };
pub const WPD_STILL_IMAGE_FLASH_MODE = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 12 };
pub const WPD_STILL_IMAGE_EXPOSURE_TIME = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 13 };
pub const WPD_STILL_IMAGE_EXPOSURE_PROGRAM_MODE = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 14 };
pub const WPD_STILL_IMAGE_EXPOSURE_INDEX = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 15 };
pub const WPD_STILL_IMAGE_EXPOSURE_BIAS_COMPENSATION = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 16 };
pub const WPD_STILL_IMAGE_CAPTURE_DELAY = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 17 };
pub const WPD_STILL_IMAGE_CAPTURE_MODE = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 18 };
pub const WPD_STILL_IMAGE_CONTRAST = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 19 };
pub const WPD_STILL_IMAGE_SHARPNESS = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 20 };
pub const WPD_STILL_IMAGE_DIGITAL_ZOOM = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 21 };
pub const WPD_STILL_IMAGE_EFFECT_MODE = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 22 };
pub const WPD_STILL_IMAGE_BURST_NUMBER = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 23 };
pub const WPD_STILL_IMAGE_BURST_INTERVAL = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 24 };
pub const WPD_STILL_IMAGE_TIMELAPSE_NUMBER = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 25 };
pub const WPD_STILL_IMAGE_TIMELAPSE_INTERVAL = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 26 };
pub const WPD_STILL_IMAGE_FOCUS_METERING_MODE = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 27 };
pub const WPD_STILL_IMAGE_UPLOAD_URL = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 28 };
pub const WPD_STILL_IMAGE_ARTIST = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 29 };
pub const WPD_STILL_IMAGE_CAMERA_MODEL = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 30 };
pub const WPD_STILL_IMAGE_CAMERA_MANUFACTURER = PROPERTYKEY { .fmtid = Guid.initString("58c571ec-1bcb-42a7-8ac5-bb291573a260"), .pid = 31 };
pub const WPD_RENDERING_INFORMATION_OBJECT_PROPERTIES_V1 = Guid.initString("c53d039f-ee23-4a31-8590-7639879870b4");
pub const WPD_RENDERING_INFORMATION_PROFILES = PROPERTYKEY { .fmtid = Guid.initString("c53d039f-ee23-4a31-8590-7639879870b4"), .pid = 2 };
pub const WPD_RENDERING_INFORMATION_PROFILE_ENTRY_TYPE = PROPERTYKEY { .fmtid = Guid.initString("c53d039f-ee23-4a31-8590-7639879870b4"), .pid = 3 };
pub const WPD_RENDERING_INFORMATION_PROFILE_ENTRY_CREATABLE_RESOURCES = PROPERTYKEY { .fmtid = Guid.initString("c53d039f-ee23-4a31-8590-7639879870b4"), .pid = 4 };
pub const WPD_CLIENT_INFORMATION_PROPERTIES_V1 = Guid.initString("204d9f0c-2292-4080-9f42-40664e70f859");
pub const WPD_CLIENT_NAME = PROPERTYKEY { .fmtid = Guid.initString("204d9f0c-2292-4080-9f42-40664e70f859"), .pid = 2 };
pub const WPD_CLIENT_MAJOR_VERSION = PROPERTYKEY { .fmtid = Guid.initString("204d9f0c-2292-4080-9f42-40664e70f859"), .pid = 3 };
pub const WPD_CLIENT_MINOR_VERSION = PROPERTYKEY { .fmtid = Guid.initString("204d9f0c-2292-4080-9f42-40664e70f859"), .pid = 4 };
pub const WPD_CLIENT_REVISION = PROPERTYKEY { .fmtid = Guid.initString("204d9f0c-2292-4080-9f42-40664e70f859"), .pid = 5 };
pub const WPD_CLIENT_WMDRM_APPLICATION_PRIVATE_KEY = PROPERTYKEY { .fmtid = Guid.initString("204d9f0c-2292-4080-9f42-40664e70f859"), .pid = 6 };
pub const WPD_CLIENT_WMDRM_APPLICATION_CERTIFICATE = PROPERTYKEY { .fmtid = Guid.initString("204d9f0c-2292-4080-9f42-40664e70f859"), .pid = 7 };
pub const WPD_CLIENT_SECURITY_QUALITY_OF_SERVICE = PROPERTYKEY { .fmtid = Guid.initString("204d9f0c-2292-4080-9f42-40664e70f859"), .pid = 8 };
pub const WPD_CLIENT_DESIRED_ACCESS = PROPERTYKEY { .fmtid = Guid.initString("204d9f0c-2292-4080-9f42-40664e70f859"), .pid = 9 };
pub const WPD_CLIENT_SHARE_MODE = PROPERTYKEY { .fmtid = Guid.initString("204d9f0c-2292-4080-9f42-40664e70f859"), .pid = 10 };
pub const WPD_CLIENT_EVENT_COOKIE = PROPERTYKEY { .fmtid = Guid.initString("204d9f0c-2292-4080-9f42-40664e70f859"), .pid = 11 };
pub const WPD_CLIENT_MINIMUM_RESULTS_BUFFER_SIZE = PROPERTYKEY { .fmtid = Guid.initString("204d9f0c-2292-4080-9f42-40664e70f859"), .pid = 12 };
pub const WPD_CLIENT_MANUAL_CLOSE_ON_DISCONNECT = PROPERTYKEY { .fmtid = Guid.initString("204d9f0c-2292-4080-9f42-40664e70f859"), .pid = 13 };
pub const WPD_PROPERTY_ATTRIBUTES_V1 = Guid.initString("ab7943d8-6332-445f-a00d-8d5ef1e96f37");
pub const WPD_PROPERTY_ATTRIBUTE_FORM = PROPERTYKEY { .fmtid = Guid.initString("ab7943d8-6332-445f-a00d-8d5ef1e96f37"), .pid = 2 };
pub const WPD_PROPERTY_ATTRIBUTE_CAN_READ = PROPERTYKEY { .fmtid = Guid.initString("ab7943d8-6332-445f-a00d-8d5ef1e96f37"), .pid = 3 };
pub const WPD_PROPERTY_ATTRIBUTE_CAN_WRITE = PROPERTYKEY { .fmtid = Guid.initString("ab7943d8-6332-445f-a00d-8d5ef1e96f37"), .pid = 4 };
pub const WPD_PROPERTY_ATTRIBUTE_CAN_DELETE = PROPERTYKEY { .fmtid = Guid.initString("ab7943d8-6332-445f-a00d-8d5ef1e96f37"), .pid = 5 };
pub const WPD_PROPERTY_ATTRIBUTE_DEFAULT_VALUE = PROPERTYKEY { .fmtid = Guid.initString("ab7943d8-6332-445f-a00d-8d5ef1e96f37"), .pid = 6 };
pub const WPD_PROPERTY_ATTRIBUTE_FAST_PROPERTY = PROPERTYKEY { .fmtid = Guid.initString("ab7943d8-6332-445f-a00d-8d5ef1e96f37"), .pid = 7 };
pub const WPD_PROPERTY_ATTRIBUTE_RANGE_MIN = PROPERTYKEY { .fmtid = Guid.initString("ab7943d8-6332-445f-a00d-8d5ef1e96f37"), .pid = 8 };
pub const WPD_PROPERTY_ATTRIBUTE_RANGE_MAX = PROPERTYKEY { .fmtid = Guid.initString("ab7943d8-6332-445f-a00d-8d5ef1e96f37"), .pid = 9 };
pub const WPD_PROPERTY_ATTRIBUTE_RANGE_STEP = PROPERTYKEY { .fmtid = Guid.initString("ab7943d8-6332-445f-a00d-8d5ef1e96f37"), .pid = 10 };
pub const WPD_PROPERTY_ATTRIBUTE_ENUMERATION_ELEMENTS = PROPERTYKEY { .fmtid = Guid.initString("ab7943d8-6332-445f-a00d-8d5ef1e96f37"), .pid = 11 };
pub const WPD_PROPERTY_ATTRIBUTE_REGULAR_EXPRESSION = PROPERTYKEY { .fmtid = Guid.initString("ab7943d8-6332-445f-a00d-8d5ef1e96f37"), .pid = 12 };
pub const WPD_PROPERTY_ATTRIBUTE_MAX_SIZE = PROPERTYKEY { .fmtid = Guid.initString("ab7943d8-6332-445f-a00d-8d5ef1e96f37"), .pid = 13 };
pub const WPD_PROPERTY_ATTRIBUTES_V2 = Guid.initString("5d9da160-74ae-43cc-85a9-fe555a80798e");
pub const WPD_PROPERTY_ATTRIBUTE_NAME = PROPERTYKEY { .fmtid = Guid.initString("5d9da160-74ae-43cc-85a9-fe555a80798e"), .pid = 2 };
pub const WPD_PROPERTY_ATTRIBUTE_VARTYPE = PROPERTYKEY { .fmtid = Guid.initString("5d9da160-74ae-43cc-85a9-fe555a80798e"), .pid = 3 };
pub const WPD_CLASS_EXTENSION_OPTIONS_V1 = Guid.initString("6309ffef-a87c-4ca7-8434-797576e40a96");
pub const WPD_CLASS_EXTENSION_OPTIONS_SUPPORTED_CONTENT_TYPES = PROPERTYKEY { .fmtid = Guid.initString("6309ffef-a87c-4ca7-8434-797576e40a96"), .pid = 2 };
pub const WPD_CLASS_EXTENSION_OPTIONS_DONT_REGISTER_WPD_DEVICE_INTERFACE = PROPERTYKEY { .fmtid = Guid.initString("6309ffef-a87c-4ca7-8434-797576e40a96"), .pid = 3 };
pub const WPD_CLASS_EXTENSION_OPTIONS_REGISTER_WPD_PRIVATE_DEVICE_INTERFACE = PROPERTYKEY { .fmtid = Guid.initString("6309ffef-a87c-4ca7-8434-797576e40a96"), .pid = 4 };
pub const WPD_CLASS_EXTENSION_OPTIONS_V2 = Guid.initString("3e3595da-4d71-49fe-a0b4-d4406c3ae93f");
pub const WPD_CLASS_EXTENSION_OPTIONS_MULTITRANSPORT_MODE = PROPERTYKEY { .fmtid = Guid.initString("3e3595da-4d71-49fe-a0b4-d4406c3ae93f"), .pid = 2 };
pub const WPD_CLASS_EXTENSION_OPTIONS_DEVICE_IDENTIFICATION_VALUES = PROPERTYKEY { .fmtid = Guid.initString("3e3595da-4d71-49fe-a0b4-d4406c3ae93f"), .pid = 3 };
pub const WPD_CLASS_EXTENSION_OPTIONS_TRANSPORT_BANDWIDTH = PROPERTYKEY { .fmtid = Guid.initString("3e3595da-4d71-49fe-a0b4-d4406c3ae93f"), .pid = 4 };
pub const WPD_CLASS_EXTENSION_OPTIONS_V3 = Guid.initString("65c160f8-1367-4ce2-939d-8310839f0d30");
pub const WPD_CLASS_EXTENSION_OPTIONS_SILENCE_AUTOPLAY = PROPERTYKEY { .fmtid = Guid.initString("65c160f8-1367-4ce2-939d-8310839f0d30"), .pid = 2 };
pub const WPD_RESOURCE_ATTRIBUTES_V1 = Guid.initString("1eb6f604-9278-429f-93cc-5bb8c06656b6");
pub const WPD_RESOURCE_ATTRIBUTE_TOTAL_SIZE = PROPERTYKEY { .fmtid = Guid.initString("1eb6f604-9278-429f-93cc-5bb8c06656b6"), .pid = 2 };
pub const WPD_RESOURCE_ATTRIBUTE_CAN_READ = PROPERTYKEY { .fmtid = Guid.initString("1eb6f604-9278-429f-93cc-5bb8c06656b6"), .pid = 3 };
pub const WPD_RESOURCE_ATTRIBUTE_CAN_WRITE = PROPERTYKEY { .fmtid = Guid.initString("1eb6f604-9278-429f-93cc-5bb8c06656b6"), .pid = 4 };
pub const WPD_RESOURCE_ATTRIBUTE_CAN_DELETE = PROPERTYKEY { .fmtid = Guid.initString("1eb6f604-9278-429f-93cc-5bb8c06656b6"), .pid = 5 };
pub const WPD_RESOURCE_ATTRIBUTE_OPTIMAL_READ_BUFFER_SIZE = PROPERTYKEY { .fmtid = Guid.initString("1eb6f604-9278-429f-93cc-5bb8c06656b6"), .pid = 6 };
pub const WPD_RESOURCE_ATTRIBUTE_OPTIMAL_WRITE_BUFFER_SIZE = PROPERTYKEY { .fmtid = Guid.initString("1eb6f604-9278-429f-93cc-5bb8c06656b6"), .pid = 7 };
pub const WPD_RESOURCE_ATTRIBUTE_FORMAT = PROPERTYKEY { .fmtid = Guid.initString("1eb6f604-9278-429f-93cc-5bb8c06656b6"), .pid = 8 };
pub const WPD_RESOURCE_ATTRIBUTE_RESOURCE_KEY = PROPERTYKEY { .fmtid = Guid.initString("1eb6f604-9278-429f-93cc-5bb8c06656b6"), .pid = 9 };
pub const WPD_DEVICE_PROPERTIES_V1 = Guid.initString("26d4979a-e643-4626-9e2b-736dc0c92fdc");
pub const WPD_DEVICE_SYNC_PARTNER = PROPERTYKEY { .fmtid = Guid.initString("26d4979a-e643-4626-9e2b-736dc0c92fdc"), .pid = 2 };
pub const WPD_DEVICE_FIRMWARE_VERSION = PROPERTYKEY { .fmtid = Guid.initString("26d4979a-e643-4626-9e2b-736dc0c92fdc"), .pid = 3 };
pub const WPD_DEVICE_POWER_LEVEL = PROPERTYKEY { .fmtid = Guid.initString("26d4979a-e643-4626-9e2b-736dc0c92fdc"), .pid = 4 };
pub const WPD_DEVICE_POWER_SOURCE = PROPERTYKEY { .fmtid = Guid.initString("26d4979a-e643-4626-9e2b-736dc0c92fdc"), .pid = 5 };
pub const WPD_DEVICE_PROTOCOL = PROPERTYKEY { .fmtid = Guid.initString("26d4979a-e643-4626-9e2b-736dc0c92fdc"), .pid = 6 };
pub const WPD_DEVICE_MANUFACTURER = PROPERTYKEY { .fmtid = Guid.initString("26d4979a-e643-4626-9e2b-736dc0c92fdc"), .pid = 7 };
pub const WPD_DEVICE_MODEL = PROPERTYKEY { .fmtid = Guid.initString("26d4979a-e643-4626-9e2b-736dc0c92fdc"), .pid = 8 };
pub const WPD_DEVICE_SERIAL_NUMBER = PROPERTYKEY { .fmtid = Guid.initString("26d4979a-e643-4626-9e2b-736dc0c92fdc"), .pid = 9 };
pub const WPD_DEVICE_SUPPORTS_NON_CONSUMABLE = PROPERTYKEY { .fmtid = Guid.initString("26d4979a-e643-4626-9e2b-736dc0c92fdc"), .pid = 10 };
pub const WPD_DEVICE_DATETIME = PROPERTYKEY { .fmtid = Guid.initString("26d4979a-e643-4626-9e2b-736dc0c92fdc"), .pid = 11 };
pub const WPD_DEVICE_FRIENDLY_NAME = PROPERTYKEY { .fmtid = Guid.initString("26d4979a-e643-4626-9e2b-736dc0c92fdc"), .pid = 12 };
pub const WPD_DEVICE_SUPPORTED_DRM_SCHEMES = PROPERTYKEY { .fmtid = Guid.initString("26d4979a-e643-4626-9e2b-736dc0c92fdc"), .pid = 13 };
pub const WPD_DEVICE_SUPPORTED_FORMATS_ARE_ORDERED = PROPERTYKEY { .fmtid = Guid.initString("26d4979a-e643-4626-9e2b-736dc0c92fdc"), .pid = 14 };
pub const WPD_DEVICE_TYPE = PROPERTYKEY { .fmtid = Guid.initString("26d4979a-e643-4626-9e2b-736dc0c92fdc"), .pid = 15 };
pub const WPD_DEVICE_NETWORK_IDENTIFIER = PROPERTYKEY { .fmtid = Guid.initString("26d4979a-e643-4626-9e2b-736dc0c92fdc"), .pid = 16 };
pub const WPD_DEVICE_PROPERTIES_V2 = Guid.initString("463dd662-7fc4-4291-911c-7f4c9cca9799");
pub const WPD_DEVICE_FUNCTIONAL_UNIQUE_ID = PROPERTYKEY { .fmtid = Guid.initString("463dd662-7fc4-4291-911c-7f4c9cca9799"), .pid = 2 };
pub const WPD_DEVICE_MODEL_UNIQUE_ID = PROPERTYKEY { .fmtid = Guid.initString("463dd662-7fc4-4291-911c-7f4c9cca9799"), .pid = 3 };
pub const WPD_DEVICE_TRANSPORT = PROPERTYKEY { .fmtid = Guid.initString("463dd662-7fc4-4291-911c-7f4c9cca9799"), .pid = 4 };
pub const WPD_DEVICE_USE_DEVICE_STAGE = PROPERTYKEY { .fmtid = Guid.initString("463dd662-7fc4-4291-911c-7f4c9cca9799"), .pid = 5 };
pub const WPD_DEVICE_PROPERTIES_V3 = Guid.initString("6c2b878c-c2ec-490d-b425-d7a75e23e5ed");
pub const WPD_DEVICE_EDP_IDENTITY = PROPERTYKEY { .fmtid = Guid.initString("6c2b878c-c2ec-490d-b425-d7a75e23e5ed"), .pid = 1 };
pub const WPD_SERVICE_PROPERTIES_V1 = Guid.initString("7510698a-cb54-481c-b8db-0d75c93f1c06");
pub const WPD_SERVICE_VERSION = PROPERTYKEY { .fmtid = Guid.initString("7510698a-cb54-481c-b8db-0d75c93f1c06"), .pid = 2 };
pub const WPD_EVENT_PROPERTIES_V1 = Guid.initString("15ab1953-f817-4fef-a921-5676e838f6e0");
pub const WPD_EVENT_PARAMETER_PNP_DEVICE_ID = PROPERTYKEY { .fmtid = Guid.initString("15ab1953-f817-4fef-a921-5676e838f6e0"), .pid = 2 };
pub const WPD_EVENT_PARAMETER_EVENT_ID = PROPERTYKEY { .fmtid = Guid.initString("15ab1953-f817-4fef-a921-5676e838f6e0"), .pid = 3 };
pub const WPD_EVENT_PARAMETER_OPERATION_STATE = PROPERTYKEY { .fmtid = Guid.initString("15ab1953-f817-4fef-a921-5676e838f6e0"), .pid = 4 };
pub const WPD_EVENT_PARAMETER_OPERATION_PROGRESS = PROPERTYKEY { .fmtid = Guid.initString("15ab1953-f817-4fef-a921-5676e838f6e0"), .pid = 5 };
pub const WPD_EVENT_PARAMETER_OBJECT_PARENT_PERSISTENT_UNIQUE_ID = PROPERTYKEY { .fmtid = Guid.initString("15ab1953-f817-4fef-a921-5676e838f6e0"), .pid = 6 };
pub const WPD_EVENT_PARAMETER_OBJECT_CREATION_COOKIE = PROPERTYKEY { .fmtid = Guid.initString("15ab1953-f817-4fef-a921-5676e838f6e0"), .pid = 7 };
pub const WPD_EVENT_PARAMETER_CHILD_HIERARCHY_CHANGED = PROPERTYKEY { .fmtid = Guid.initString("15ab1953-f817-4fef-a921-5676e838f6e0"), .pid = 8 };
pub const WPD_EVENT_PROPERTIES_V2 = Guid.initString("52807b8a-4914-4323-9b9a-74f654b2b846");
pub const WPD_EVENT_PARAMETER_SERVICE_METHOD_CONTEXT = PROPERTYKEY { .fmtid = Guid.initString("52807b8a-4914-4323-9b9a-74f654b2b846"), .pid = 2 };
pub const WPD_EVENT_OPTIONS_V1 = Guid.initString("b3d8dad7-a361-4b83-8a48-5b02ce10713b");
pub const WPD_EVENT_OPTION_IS_BROADCAST_EVENT = PROPERTYKEY { .fmtid = Guid.initString("b3d8dad7-a361-4b83-8a48-5b02ce10713b"), .pid = 2 };
pub const WPD_EVENT_OPTION_IS_AUTOPLAY_EVENT = PROPERTYKEY { .fmtid = Guid.initString("b3d8dad7-a361-4b83-8a48-5b02ce10713b"), .pid = 3 };
pub const WPD_EVENT_ATTRIBUTES_V1 = Guid.initString("10c96578-2e81-4111-adde-e08ca6138f6d");
pub const WPD_EVENT_ATTRIBUTE_NAME = PROPERTYKEY { .fmtid = Guid.initString("10c96578-2e81-4111-adde-e08ca6138f6d"), .pid = 2 };
pub const WPD_EVENT_ATTRIBUTE_PARAMETERS = PROPERTYKEY { .fmtid = Guid.initString("10c96578-2e81-4111-adde-e08ca6138f6d"), .pid = 3 };
pub const WPD_EVENT_ATTRIBUTE_OPTIONS = PROPERTYKEY { .fmtid = Guid.initString("10c96578-2e81-4111-adde-e08ca6138f6d"), .pid = 4 };
pub const WPD_API_OPTIONS_V1 = Guid.initString("10e54a3e-052d-4777-a13c-de7614be2bc4");
pub const WPD_API_OPTION_USE_CLEAR_DATA_STREAM = PROPERTYKEY { .fmtid = Guid.initString("10e54a3e-052d-4777-a13c-de7614be2bc4"), .pid = 2 };
pub const WPD_API_OPTION_IOCTL_ACCESS = PROPERTYKEY { .fmtid = Guid.initString("10e54a3e-052d-4777-a13c-de7614be2bc4"), .pid = 3 };
pub const WPD_FORMAT_ATTRIBUTES_V1 = Guid.initString("a0a02000-bcaf-4be8-b3f5-233f231cf58f");
pub const WPD_FORMAT_ATTRIBUTE_NAME = PROPERTYKEY { .fmtid = Guid.initString("a0a02000-bcaf-4be8-b3f5-233f231cf58f"), .pid = 2 };
pub const WPD_FORMAT_ATTRIBUTE_MIMETYPE = PROPERTYKEY { .fmtid = Guid.initString("a0a02000-bcaf-4be8-b3f5-233f231cf58f"), .pid = 3 };
pub const WPD_METHOD_ATTRIBUTES_V1 = Guid.initString("f17a5071-f039-44af-8efe-432cf32e432a");
pub const WPD_METHOD_ATTRIBUTE_NAME = PROPERTYKEY { .fmtid = Guid.initString("f17a5071-f039-44af-8efe-432cf32e432a"), .pid = 2 };
pub const WPD_METHOD_ATTRIBUTE_ASSOCIATED_FORMAT = PROPERTYKEY { .fmtid = Guid.initString("f17a5071-f039-44af-8efe-432cf32e432a"), .pid = 3 };
pub const WPD_METHOD_ATTRIBUTE_ACCESS = PROPERTYKEY { .fmtid = Guid.initString("f17a5071-f039-44af-8efe-432cf32e432a"), .pid = 4 };
pub const WPD_METHOD_ATTRIBUTE_PARAMETERS = PROPERTYKEY { .fmtid = Guid.initString("f17a5071-f039-44af-8efe-432cf32e432a"), .pid = 5 };
pub const WPD_PARAMETER_ATTRIBUTES_V1 = Guid.initString("e6864dd7-f325-45ea-a1d5-97cf73b6ca58");
pub const WPD_PARAMETER_ATTRIBUTE_ORDER = PROPERTYKEY { .fmtid = Guid.initString("e6864dd7-f325-45ea-a1d5-97cf73b6ca58"), .pid = 2 };
pub const WPD_PARAMETER_ATTRIBUTE_USAGE = PROPERTYKEY { .fmtid = Guid.initString("e6864dd7-f325-45ea-a1d5-97cf73b6ca58"), .pid = 3 };
pub const WPD_PARAMETER_ATTRIBUTE_FORM = PROPERTYKEY { .fmtid = Guid.initString("e6864dd7-f325-45ea-a1d5-97cf73b6ca58"), .pid = 4 };
pub const WPD_PARAMETER_ATTRIBUTE_DEFAULT_VALUE = PROPERTYKEY { .fmtid = Guid.initString("e6864dd7-f325-45ea-a1d5-97cf73b6ca58"), .pid = 5 };
pub const WPD_PARAMETER_ATTRIBUTE_RANGE_MIN = PROPERTYKEY { .fmtid = Guid.initString("e6864dd7-f325-45ea-a1d5-97cf73b6ca58"), .pid = 6 };
pub const WPD_PARAMETER_ATTRIBUTE_RANGE_MAX = PROPERTYKEY { .fmtid = Guid.initString("e6864dd7-f325-45ea-a1d5-97cf73b6ca58"), .pid = 7 };
pub const WPD_PARAMETER_ATTRIBUTE_RANGE_STEP = PROPERTYKEY { .fmtid = Guid.initString("e6864dd7-f325-45ea-a1d5-97cf73b6ca58"), .pid = 8 };
pub const WPD_PARAMETER_ATTRIBUTE_ENUMERATION_ELEMENTS = PROPERTYKEY { .fmtid = Guid.initString("e6864dd7-f325-45ea-a1d5-97cf73b6ca58"), .pid = 9 };
pub const WPD_PARAMETER_ATTRIBUTE_REGULAR_EXPRESSION = PROPERTYKEY { .fmtid = Guid.initString("e6864dd7-f325-45ea-a1d5-97cf73b6ca58"), .pid = 10 };
pub const WPD_PARAMETER_ATTRIBUTE_MAX_SIZE = PROPERTYKEY { .fmtid = Guid.initString("e6864dd7-f325-45ea-a1d5-97cf73b6ca58"), .pid = 11 };
pub const WPD_PARAMETER_ATTRIBUTE_VARTYPE = PROPERTYKEY { .fmtid = Guid.initString("e6864dd7-f325-45ea-a1d5-97cf73b6ca58"), .pid = 12 };
pub const WPD_PARAMETER_ATTRIBUTE_NAME = PROPERTYKEY { .fmtid = Guid.initString("e6864dd7-f325-45ea-a1d5-97cf73b6ca58"), .pid = 13 };
pub const WPD_CATEGORY_COMMON = Guid.initString("f0422a9c-5dc8-4440-b5bd-5df28835658a");
pub const WPD_COMMAND_COMMON_RESET_DEVICE = PROPERTYKEY { .fmtid = Guid.initString("f0422a9c-5dc8-4440-b5bd-5df28835658a"), .pid = 2 };
pub const WPD_COMMAND_COMMON_GET_OBJECT_IDS_FROM_PERSISTENT_UNIQUE_IDS = PROPERTYKEY { .fmtid = Guid.initString("f0422a9c-5dc8-4440-b5bd-5df28835658a"), .pid = 3 };
pub const WPD_COMMAND_COMMON_SAVE_CLIENT_INFORMATION = PROPERTYKEY { .fmtid = Guid.initString("f0422a9c-5dc8-4440-b5bd-5df28835658a"), .pid = 4 };
pub const WPD_PROPERTY_COMMON_COMMAND_CATEGORY = PROPERTYKEY { .fmtid = Guid.initString("f0422a9c-5dc8-4440-b5bd-5df28835658a"), .pid = 1001 };
pub const WPD_PROPERTY_COMMON_COMMAND_ID = PROPERTYKEY { .fmtid = Guid.initString("f0422a9c-5dc8-4440-b5bd-5df28835658a"), .pid = 1002 };
pub const WPD_PROPERTY_COMMON_HRESULT = PROPERTYKEY { .fmtid = Guid.initString("f0422a9c-5dc8-4440-b5bd-5df28835658a"), .pid = 1003 };
pub const WPD_PROPERTY_COMMON_DRIVER_ERROR_CODE = PROPERTYKEY { .fmtid = Guid.initString("f0422a9c-5dc8-4440-b5bd-5df28835658a"), .pid = 1004 };
pub const WPD_PROPERTY_COMMON_COMMAND_TARGET = PROPERTYKEY { .fmtid = Guid.initString("f0422a9c-5dc8-4440-b5bd-5df28835658a"), .pid = 1006 };
pub const WPD_PROPERTY_COMMON_PERSISTENT_UNIQUE_IDS = PROPERTYKEY { .fmtid = Guid.initString("f0422a9c-5dc8-4440-b5bd-5df28835658a"), .pid = 1007 };
pub const WPD_PROPERTY_COMMON_OBJECT_IDS = PROPERTYKEY { .fmtid = Guid.initString("f0422a9c-5dc8-4440-b5bd-5df28835658a"), .pid = 1008 };
pub const WPD_PROPERTY_COMMON_CLIENT_INFORMATION = PROPERTYKEY { .fmtid = Guid.initString("f0422a9c-5dc8-4440-b5bd-5df28835658a"), .pid = 1009 };
pub const WPD_PROPERTY_COMMON_CLIENT_INFORMATION_CONTEXT = PROPERTYKEY { .fmtid = Guid.initString("f0422a9c-5dc8-4440-b5bd-5df28835658a"), .pid = 1010 };
pub const WPD_PROPERTY_COMMON_ACTIVITY_ID = PROPERTYKEY { .fmtid = Guid.initString("f0422a9c-5dc8-4440-b5bd-5df28835658a"), .pid = 1011 };
pub const WPD_OPTION_VALID_OBJECT_IDS = PROPERTYKEY { .fmtid = Guid.initString("f0422a9c-5dc8-4440-b5bd-5df28835658a"), .pid = 5001 };
pub const WPD_CATEGORY_OBJECT_ENUMERATION = Guid.initString("b7474e91-e7f8-4ad9-b400-ad1a4b58eeec");
pub const WPD_COMMAND_OBJECT_ENUMERATION_START_FIND = PROPERTYKEY { .fmtid = Guid.initString("b7474e91-e7f8-4ad9-b400-ad1a4b58eeec"), .pid = 2 };
pub const WPD_COMMAND_OBJECT_ENUMERATION_FIND_NEXT = PROPERTYKEY { .fmtid = Guid.initString("b7474e91-e7f8-4ad9-b400-ad1a4b58eeec"), .pid = 3 };
pub const WPD_COMMAND_OBJECT_ENUMERATION_END_FIND = PROPERTYKEY { .fmtid = Guid.initString("b7474e91-e7f8-4ad9-b400-ad1a4b58eeec"), .pid = 4 };
pub const WPD_PROPERTY_OBJECT_ENUMERATION_PARENT_ID = PROPERTYKEY { .fmtid = Guid.initString("b7474e91-e7f8-4ad9-b400-ad1a4b58eeec"), .pid = 1001 };
pub const WPD_PROPERTY_OBJECT_ENUMERATION_FILTER = PROPERTYKEY { .fmtid = Guid.initString("b7474e91-e7f8-4ad9-b400-ad1a4b58eeec"), .pid = 1002 };
pub const WPD_PROPERTY_OBJECT_ENUMERATION_OBJECT_IDS = PROPERTYKEY { .fmtid = Guid.initString("b7474e91-e7f8-4ad9-b400-ad1a4b58eeec"), .pid = 1003 };
pub const WPD_PROPERTY_OBJECT_ENUMERATION_CONTEXT = PROPERTYKEY { .fmtid = Guid.initString("b7474e91-e7f8-4ad9-b400-ad1a4b58eeec"), .pid = 1004 };
pub const WPD_PROPERTY_OBJECT_ENUMERATION_NUM_OBJECTS_REQUESTED = PROPERTYKEY { .fmtid = Guid.initString("b7474e91-e7f8-4ad9-b400-ad1a4b58eeec"), .pid = 1005 };
pub const WPD_CATEGORY_OBJECT_PROPERTIES = Guid.initString("9e5582e4-0814-44e6-981a-b2998d583804");
pub const WPD_COMMAND_OBJECT_PROPERTIES_GET_SUPPORTED = PROPERTYKEY { .fmtid = Guid.initString("9e5582e4-0814-44e6-981a-b2998d583804"), .pid = 2 };
pub const WPD_COMMAND_OBJECT_PROPERTIES_GET_ATTRIBUTES = PROPERTYKEY { .fmtid = Guid.initString("9e5582e4-0814-44e6-981a-b2998d583804"), .pid = 3 };
pub const WPD_COMMAND_OBJECT_PROPERTIES_GET = PROPERTYKEY { .fmtid = Guid.initString("9e5582e4-0814-44e6-981a-b2998d583804"), .pid = 4 };
pub const WPD_COMMAND_OBJECT_PROPERTIES_SET = PROPERTYKEY { .fmtid = Guid.initString("9e5582e4-0814-44e6-981a-b2998d583804"), .pid = 5 };
pub const WPD_COMMAND_OBJECT_PROPERTIES_GET_ALL = PROPERTYKEY { .fmtid = Guid.initString("9e5582e4-0814-44e6-981a-b2998d583804"), .pid = 6 };
pub const WPD_COMMAND_OBJECT_PROPERTIES_DELETE = PROPERTYKEY { .fmtid = Guid.initString("9e5582e4-0814-44e6-981a-b2998d583804"), .pid = 7 };
pub const WPD_PROPERTY_OBJECT_PROPERTIES_OBJECT_ID = PROPERTYKEY { .fmtid = Guid.initString("9e5582e4-0814-44e6-981a-b2998d583804"), .pid = 1001 };
pub const WPD_PROPERTY_OBJECT_PROPERTIES_PROPERTY_KEYS = PROPERTYKEY { .fmtid = Guid.initString("9e5582e4-0814-44e6-981a-b2998d583804"), .pid = 1002 };
pub const WPD_PROPERTY_OBJECT_PROPERTIES_PROPERTY_ATTRIBUTES = PROPERTYKEY { .fmtid = Guid.initString("9e5582e4-0814-44e6-981a-b2998d583804"), .pid = 1003 };
pub const WPD_PROPERTY_OBJECT_PROPERTIES_PROPERTY_VALUES = PROPERTYKEY { .fmtid = Guid.initString("9e5582e4-0814-44e6-981a-b2998d583804"), .pid = 1004 };
pub const WPD_PROPERTY_OBJECT_PROPERTIES_PROPERTY_WRITE_RESULTS = PROPERTYKEY { .fmtid = Guid.initString("9e5582e4-0814-44e6-981a-b2998d583804"), .pid = 1005 };
pub const WPD_PROPERTY_OBJECT_PROPERTIES_PROPERTY_DELETE_RESULTS = PROPERTYKEY { .fmtid = Guid.initString("9e5582e4-0814-44e6-981a-b2998d583804"), .pid = 1006 };
pub const WPD_CATEGORY_OBJECT_PROPERTIES_BULK = Guid.initString("11c824dd-04cd-4e4e-8c7b-f6efb794d84e");
pub const WPD_COMMAND_OBJECT_PROPERTIES_BULK_GET_VALUES_BY_OBJECT_LIST_START = PROPERTYKEY { .fmtid = Guid.initString("11c824dd-04cd-4e4e-8c7b-f6efb794d84e"), .pid = 2 };
pub const WPD_COMMAND_OBJECT_PROPERTIES_BULK_GET_VALUES_BY_OBJECT_LIST_NEXT = PROPERTYKEY { .fmtid = Guid.initString("11c824dd-04cd-4e4e-8c7b-f6efb794d84e"), .pid = 3 };
pub const WPD_COMMAND_OBJECT_PROPERTIES_BULK_GET_VALUES_BY_OBJECT_LIST_END = PROPERTYKEY { .fmtid = Guid.initString("11c824dd-04cd-4e4e-8c7b-f6efb794d84e"), .pid = 4 };
pub const WPD_COMMAND_OBJECT_PROPERTIES_BULK_GET_VALUES_BY_OBJECT_FORMAT_START = PROPERTYKEY { .fmtid = Guid.initString("11c824dd-04cd-4e4e-8c7b-f6efb794d84e"), .pid = 5 };
pub const WPD_COMMAND_OBJECT_PROPERTIES_BULK_GET_VALUES_BY_OBJECT_FORMAT_NEXT = PROPERTYKEY { .fmtid = Guid.initString("11c824dd-04cd-4e4e-8c7b-f6efb794d84e"), .pid = 6 };
pub const WPD_COMMAND_OBJECT_PROPERTIES_BULK_GET_VALUES_BY_OBJECT_FORMAT_END = PROPERTYKEY { .fmtid = Guid.initString("11c824dd-04cd-4e4e-8c7b-f6efb794d84e"), .pid = 7 };
pub const WPD_COMMAND_OBJECT_PROPERTIES_BULK_SET_VALUES_BY_OBJECT_LIST_START = PROPERTYKEY { .fmtid = Guid.initString("11c824dd-04cd-4e4e-8c7b-f6efb794d84e"), .pid = 8 };
pub const WPD_COMMAND_OBJECT_PROPERTIES_BULK_SET_VALUES_BY_OBJECT_LIST_NEXT = PROPERTYKEY { .fmtid = Guid.initString("11c824dd-04cd-4e4e-8c7b-f6efb794d84e"), .pid = 9 };
pub const WPD_COMMAND_OBJECT_PROPERTIES_BULK_SET_VALUES_BY_OBJECT_LIST_END = PROPERTYKEY { .fmtid = Guid.initString("11c824dd-04cd-4e4e-8c7b-f6efb794d84e"), .pid = 10 };
pub const WPD_PROPERTY_OBJECT_PROPERTIES_BULK_OBJECT_IDS = PROPERTYKEY { .fmtid = Guid.initString("11c824dd-04cd-4e4e-8c7b-f6efb794d84e"), .pid = 1001 };
pub const WPD_PROPERTY_OBJECT_PROPERTIES_BULK_CONTEXT = PROPERTYKEY { .fmtid = Guid.initString("11c824dd-04cd-4e4e-8c7b-f6efb794d84e"), .pid = 1002 };
pub const WPD_PROPERTY_OBJECT_PROPERTIES_BULK_VALUES = PROPERTYKEY { .fmtid = Guid.initString("11c824dd-04cd-4e4e-8c7b-f6efb794d84e"), .pid = 1003 };
pub const WPD_PROPERTY_OBJECT_PROPERTIES_BULK_PROPERTY_KEYS = PROPERTYKEY { .fmtid = Guid.initString("11c824dd-04cd-4e4e-8c7b-f6efb794d84e"), .pid = 1004 };
pub const WPD_PROPERTY_OBJECT_PROPERTIES_BULK_DEPTH = PROPERTYKEY { .fmtid = Guid.initString("11c824dd-04cd-4e4e-8c7b-f6efb794d84e"), .pid = 1005 };
pub const WPD_PROPERTY_OBJECT_PROPERTIES_BULK_PARENT_OBJECT_ID = PROPERTYKEY { .fmtid = Guid.initString("11c824dd-04cd-4e4e-8c7b-f6efb794d84e"), .pid = 1006 };
pub const WPD_PROPERTY_OBJECT_PROPERTIES_BULK_OBJECT_FORMAT = PROPERTYKEY { .fmtid = Guid.initString("11c824dd-04cd-4e4e-8c7b-f6efb794d84e"), .pid = 1007 };
pub const WPD_PROPERTY_OBJECT_PROPERTIES_BULK_WRITE_RESULTS = PROPERTYKEY { .fmtid = Guid.initString("11c824dd-04cd-4e4e-8c7b-f6efb794d84e"), .pid = 1008 };
pub const WPD_CATEGORY_OBJECT_RESOURCES = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a");
pub const WPD_COMMAND_OBJECT_RESOURCES_GET_SUPPORTED = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 2 };
pub const WPD_COMMAND_OBJECT_RESOURCES_GET_ATTRIBUTES = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 3 };
pub const WPD_COMMAND_OBJECT_RESOURCES_OPEN = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 4 };
pub const WPD_COMMAND_OBJECT_RESOURCES_READ = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 5 };
pub const WPD_COMMAND_OBJECT_RESOURCES_WRITE = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 6 };
pub const WPD_COMMAND_OBJECT_RESOURCES_CLOSE = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 7 };
pub const WPD_COMMAND_OBJECT_RESOURCES_DELETE = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 8 };
pub const WPD_COMMAND_OBJECT_RESOURCES_CREATE_RESOURCE = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 9 };
pub const WPD_COMMAND_OBJECT_RESOURCES_REVERT = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 10 };
pub const WPD_COMMAND_OBJECT_RESOURCES_SEEK = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 11 };
pub const WPD_COMMAND_OBJECT_RESOURCES_COMMIT = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 12 };
pub const WPD_COMMAND_OBJECT_RESOURCES_SEEK_IN_UNITS = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 13 };
pub const WPD_PROPERTY_OBJECT_RESOURCES_OBJECT_ID = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 1001 };
pub const WPD_PROPERTY_OBJECT_RESOURCES_ACCESS_MODE = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 1002 };
pub const WPD_PROPERTY_OBJECT_RESOURCES_RESOURCE_KEYS = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 1003 };
pub const WPD_PROPERTY_OBJECT_RESOURCES_RESOURCE_ATTRIBUTES = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 1004 };
pub const WPD_PROPERTY_OBJECT_RESOURCES_CONTEXT = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 1005 };
pub const WPD_PROPERTY_OBJECT_RESOURCES_NUM_BYTES_TO_READ = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 1006 };
pub const WPD_PROPERTY_OBJECT_RESOURCES_NUM_BYTES_READ = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 1007 };
pub const WPD_PROPERTY_OBJECT_RESOURCES_NUM_BYTES_TO_WRITE = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 1008 };
pub const WPD_PROPERTY_OBJECT_RESOURCES_NUM_BYTES_WRITTEN = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 1009 };
pub const WPD_PROPERTY_OBJECT_RESOURCES_DATA = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 1010 };
pub const WPD_PROPERTY_OBJECT_RESOURCES_OPTIMAL_TRANSFER_BUFFER_SIZE = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 1011 };
pub const WPD_PROPERTY_OBJECT_RESOURCES_SEEK_OFFSET = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 1012 };
pub const WPD_PROPERTY_OBJECT_RESOURCES_SEEK_ORIGIN_FLAG = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 1013 };
pub const WPD_PROPERTY_OBJECT_RESOURCES_POSITION_FROM_START = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 1014 };
pub const WPD_PROPERTY_OBJECT_RESOURCES_SUPPORTS_UNITS = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 1015 };
pub const WPD_PROPERTY_OBJECT_RESOURCES_STREAM_UNITS = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 1016 };
pub const WPD_OPTION_OBJECT_RESOURCES_SEEK_ON_READ_SUPPORTED = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 5001 };
pub const WPD_OPTION_OBJECT_RESOURCES_SEEK_ON_WRITE_SUPPORTED = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 5002 };
pub const WPD_OPTION_OBJECT_RESOURCES_NO_INPUT_BUFFER_ON_READ = PROPERTYKEY { .fmtid = Guid.initString("b3a2b22d-a595-4108-be0a-fc3c965f3d4a"), .pid = 5003 };
pub const WPD_CATEGORY_OBJECT_MANAGEMENT = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089");
pub const WPD_COMMAND_OBJECT_MANAGEMENT_CREATE_OBJECT_WITH_PROPERTIES_ONLY = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 2 };
pub const WPD_COMMAND_OBJECT_MANAGEMENT_CREATE_OBJECT_WITH_PROPERTIES_AND_DATA = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 3 };
pub const WPD_COMMAND_OBJECT_MANAGEMENT_WRITE_OBJECT_DATA = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 4 };
pub const WPD_COMMAND_OBJECT_MANAGEMENT_COMMIT_OBJECT = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 5 };
pub const WPD_COMMAND_OBJECT_MANAGEMENT_REVERT_OBJECT = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 6 };
pub const WPD_COMMAND_OBJECT_MANAGEMENT_DELETE_OBJECTS = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 7 };
pub const WPD_COMMAND_OBJECT_MANAGEMENT_MOVE_OBJECTS = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 8 };
pub const WPD_COMMAND_OBJECT_MANAGEMENT_COPY_OBJECTS = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 9 };
pub const WPD_COMMAND_OBJECT_MANAGEMENT_UPDATE_OBJECT_WITH_PROPERTIES_AND_DATA = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 10 };
pub const WPD_PROPERTY_OBJECT_MANAGEMENT_CREATION_PROPERTIES = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 1001 };
pub const WPD_PROPERTY_OBJECT_MANAGEMENT_CONTEXT = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 1002 };
pub const WPD_PROPERTY_OBJECT_MANAGEMENT_NUM_BYTES_TO_WRITE = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 1003 };
pub const WPD_PROPERTY_OBJECT_MANAGEMENT_NUM_BYTES_WRITTEN = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 1004 };
pub const WPD_PROPERTY_OBJECT_MANAGEMENT_DATA = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 1005 };
pub const WPD_PROPERTY_OBJECT_MANAGEMENT_OBJECT_ID = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 1006 };
pub const WPD_PROPERTY_OBJECT_MANAGEMENT_DELETE_OPTIONS = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 1007 };
pub const WPD_PROPERTY_OBJECT_MANAGEMENT_OPTIMAL_TRANSFER_BUFFER_SIZE = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 1008 };
pub const WPD_PROPERTY_OBJECT_MANAGEMENT_OBJECT_IDS = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 1009 };
pub const WPD_PROPERTY_OBJECT_MANAGEMENT_DELETE_RESULTS = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 1010 };
pub const WPD_PROPERTY_OBJECT_MANAGEMENT_DESTINATION_FOLDER_OBJECT_ID = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 1011 };
pub const WPD_PROPERTY_OBJECT_MANAGEMENT_MOVE_RESULTS = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 1012 };
pub const WPD_PROPERTY_OBJECT_MANAGEMENT_COPY_RESULTS = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 1013 };
pub const WPD_PROPERTY_OBJECT_MANAGEMENT_UPDATE_PROPERTIES = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 1014 };
pub const WPD_PROPERTY_OBJECT_MANAGEMENT_PROPERTY_KEYS = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 1015 };
pub const WPD_PROPERTY_OBJECT_MANAGEMENT_OBJECT_FORMAT = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 1016 };
pub const WPD_OPTION_OBJECT_MANAGEMENT_RECURSIVE_DELETE_SUPPORTED = PROPERTYKEY { .fmtid = Guid.initString("ef1e43dd-a9ed-4341-8bcc-186192aea089"), .pid = 5001 };
pub const WPD_CATEGORY_CAPABILITIES = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356");
pub const WPD_COMMAND_CAPABILITIES_GET_SUPPORTED_COMMANDS = PROPERTYKEY { .fmtid = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356"), .pid = 2 };
pub const WPD_COMMAND_CAPABILITIES_GET_COMMAND_OPTIONS = PROPERTYKEY { .fmtid = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356"), .pid = 3 };
pub const WPD_COMMAND_CAPABILITIES_GET_SUPPORTED_FUNCTIONAL_CATEGORIES = PROPERTYKEY { .fmtid = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356"), .pid = 4 };
pub const WPD_COMMAND_CAPABILITIES_GET_FUNCTIONAL_OBJECTS = PROPERTYKEY { .fmtid = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356"), .pid = 5 };
pub const WPD_COMMAND_CAPABILITIES_GET_SUPPORTED_CONTENT_TYPES = PROPERTYKEY { .fmtid = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356"), .pid = 6 };
pub const WPD_COMMAND_CAPABILITIES_GET_SUPPORTED_FORMATS = PROPERTYKEY { .fmtid = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356"), .pid = 7 };
pub const WPD_COMMAND_CAPABILITIES_GET_SUPPORTED_FORMAT_PROPERTIES = PROPERTYKEY { .fmtid = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356"), .pid = 8 };
pub const WPD_COMMAND_CAPABILITIES_GET_FIXED_PROPERTY_ATTRIBUTES = PROPERTYKEY { .fmtid = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356"), .pid = 9 };
pub const WPD_COMMAND_CAPABILITIES_GET_SUPPORTED_EVENTS = PROPERTYKEY { .fmtid = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356"), .pid = 10 };
pub const WPD_COMMAND_CAPABILITIES_GET_EVENT_OPTIONS = PROPERTYKEY { .fmtid = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356"), .pid = 11 };
pub const WPD_PROPERTY_CAPABILITIES_SUPPORTED_COMMANDS = PROPERTYKEY { .fmtid = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356"), .pid = 1001 };
pub const WPD_PROPERTY_CAPABILITIES_COMMAND = PROPERTYKEY { .fmtid = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356"), .pid = 1002 };
pub const WPD_PROPERTY_CAPABILITIES_COMMAND_OPTIONS = PROPERTYKEY { .fmtid = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356"), .pid = 1003 };
pub const WPD_PROPERTY_CAPABILITIES_FUNCTIONAL_CATEGORIES = PROPERTYKEY { .fmtid = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356"), .pid = 1004 };
pub const WPD_PROPERTY_CAPABILITIES_FUNCTIONAL_CATEGORY = PROPERTYKEY { .fmtid = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356"), .pid = 1005 };
pub const WPD_PROPERTY_CAPABILITIES_FUNCTIONAL_OBJECTS = PROPERTYKEY { .fmtid = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356"), .pid = 1006 };
pub const WPD_PROPERTY_CAPABILITIES_CONTENT_TYPES = PROPERTYKEY { .fmtid = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356"), .pid = 1007 };
pub const WPD_PROPERTY_CAPABILITIES_CONTENT_TYPE = PROPERTYKEY { .fmtid = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356"), .pid = 1008 };
pub const WPD_PROPERTY_CAPABILITIES_FORMATS = PROPERTYKEY { .fmtid = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356"), .pid = 1009 };
pub const WPD_PROPERTY_CAPABILITIES_FORMAT = PROPERTYKEY { .fmtid = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356"), .pid = 1010 };
pub const WPD_PROPERTY_CAPABILITIES_PROPERTY_KEYS = PROPERTYKEY { .fmtid = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356"), .pid = 1011 };
pub const WPD_PROPERTY_CAPABILITIES_PROPERTY_ATTRIBUTES = PROPERTYKEY { .fmtid = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356"), .pid = 1012 };
pub const WPD_PROPERTY_CAPABILITIES_SUPPORTED_EVENTS = PROPERTYKEY { .fmtid = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356"), .pid = 1013 };
pub const WPD_PROPERTY_CAPABILITIES_EVENT = PROPERTYKEY { .fmtid = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356"), .pid = 1014 };
pub const WPD_PROPERTY_CAPABILITIES_EVENT_OPTIONS = PROPERTYKEY { .fmtid = Guid.initString("0cabec78-6b74-41c6-9216-2639d1fce356"), .pid = 1015 };
pub const WPD_CATEGORY_STORAGE = Guid.initString("d8f907a6-34cc-45fa-97fb-d007fa47ec94");
pub const WPD_COMMAND_STORAGE_FORMAT = PROPERTYKEY { .fmtid = Guid.initString("d8f907a6-34cc-45fa-97fb-d007fa47ec94"), .pid = 2 };
pub const WPD_COMMAND_STORAGE_EJECT = PROPERTYKEY { .fmtid = Guid.initString("d8f907a6-34cc-45fa-97fb-d007fa47ec94"), .pid = 4 };
pub const WPD_PROPERTY_STORAGE_OBJECT_ID = PROPERTYKEY { .fmtid = Guid.initString("d8f907a6-34cc-45fa-97fb-d007fa47ec94"), .pid = 1001 };
pub const WPD_PROPERTY_STORAGE_DESTINATION_OBJECT_ID = PROPERTYKEY { .fmtid = Guid.initString("d8f907a6-34cc-45fa-97fb-d007fa47ec94"), .pid = 1002 };
pub const WPD_CATEGORY_SMS = Guid.initString("afc25d66-fe0d-4114-9097-970c93e920d1");
pub const WPD_COMMAND_SMS_SEND = PROPERTYKEY { .fmtid = Guid.initString("afc25d66-fe0d-4114-9097-970c93e920d1"), .pid = 2 };
pub const WPD_PROPERTY_SMS_RECIPIENT = PROPERTYKEY { .fmtid = Guid.initString("afc25d66-fe0d-4114-9097-970c93e920d1"), .pid = 1001 };
pub const WPD_PROPERTY_SMS_MESSAGE_TYPE = PROPERTYKEY { .fmtid = Guid.initString("afc25d66-fe0d-4114-9097-970c93e920d1"), .pid = 1002 };
pub const WPD_PROPERTY_SMS_TEXT_MESSAGE = PROPERTYKEY { .fmtid = Guid.initString("afc25d66-fe0d-4114-9097-970c93e920d1"), .pid = 1003 };
pub const WPD_PROPERTY_SMS_BINARY_MESSAGE = PROPERTYKEY { .fmtid = Guid.initString("afc25d66-fe0d-4114-9097-970c93e920d1"), .pid = 1004 };
pub const WPD_OPTION_SMS_BINARY_MESSAGE_SUPPORTED = PROPERTYKEY { .fmtid = Guid.initString("afc25d66-fe0d-4114-9097-970c93e920d1"), .pid = 5001 };
pub const WPD_CATEGORY_STILL_IMAGE_CAPTURE = Guid.initString("4fcd6982-22a2-4b05-a48b-62d38bf27b32");
pub const WPD_COMMAND_STILL_IMAGE_CAPTURE_INITIATE = PROPERTYKEY { .fmtid = Guid.initString("4fcd6982-22a2-4b05-a48b-62d38bf27b32"), .pid = 2 };
pub const WPD_CATEGORY_MEDIA_CAPTURE = Guid.initString("59b433ba-fe44-4d8d-808c-6bcb9b0f15e8");
pub const WPD_COMMAND_MEDIA_CAPTURE_START = PROPERTYKEY { .fmtid = Guid.initString("59b433ba-fe44-4d8d-808c-6bcb9b0f15e8"), .pid = 2 };
pub const WPD_COMMAND_MEDIA_CAPTURE_STOP = PROPERTYKEY { .fmtid = Guid.initString("59b433ba-fe44-4d8d-808c-6bcb9b0f15e8"), .pid = 3 };
pub const WPD_COMMAND_MEDIA_CAPTURE_PAUSE = PROPERTYKEY { .fmtid = Guid.initString("59b433ba-fe44-4d8d-808c-6bcb9b0f15e8"), .pid = 4 };
pub const WPD_CATEGORY_DEVICE_HINTS = Guid.initString("0d5fb92b-cb46-4c4f-8343-0bc3d3f17c84");
pub const WPD_COMMAND_DEVICE_HINTS_GET_CONTENT_LOCATION = PROPERTYKEY { .fmtid = Guid.initString("0d5fb92b-cb46-4c4f-8343-0bc3d3f17c84"), .pid = 2 };
pub const WPD_PROPERTY_DEVICE_HINTS_CONTENT_TYPE = PROPERTYKEY { .fmtid = Guid.initString("0d5fb92b-cb46-4c4f-8343-0bc3d3f17c84"), .pid = 1001 };
pub const WPD_PROPERTY_DEVICE_HINTS_CONTENT_LOCATIONS = PROPERTYKEY { .fmtid = Guid.initString("0d5fb92b-cb46-4c4f-8343-0bc3d3f17c84"), .pid = 1002 };
pub const WPD_CLASS_EXTENSION_V1 = Guid.initString("33fb0d11-64a3-4fac-b4c7-3dfeaa99b051");
pub const WPD_COMMAND_CLASS_EXTENSION_WRITE_DEVICE_INFORMATION = PROPERTYKEY { .fmtid = Guid.initString("33fb0d11-64a3-4fac-b4c7-3dfeaa99b051"), .pid = 2 };
pub const WPD_PROPERTY_CLASS_EXTENSION_DEVICE_INFORMATION_VALUES = PROPERTYKEY { .fmtid = Guid.initString("33fb0d11-64a3-4fac-b4c7-3dfeaa99b051"), .pid = 1001 };
pub const WPD_PROPERTY_CLASS_EXTENSION_DEVICE_INFORMATION_WRITE_RESULTS = PROPERTYKEY { .fmtid = Guid.initString("33fb0d11-64a3-4fac-b4c7-3dfeaa99b051"), .pid = 1002 };
pub const WPD_CLASS_EXTENSION_V2 = Guid.initString("7f0779b5-fa2b-4766-9cb2-f73ba30b6758");
pub const WPD_COMMAND_CLASS_EXTENSION_REGISTER_SERVICE_INTERFACES = PROPERTYKEY { .fmtid = Guid.initString("7f0779b5-fa2b-4766-9cb2-f73ba30b6758"), .pid = 2 };
pub const WPD_COMMAND_CLASS_EXTENSION_UNREGISTER_SERVICE_INTERFACES = PROPERTYKEY { .fmtid = Guid.initString("7f0779b5-fa2b-4766-9cb2-f73ba30b6758"), .pid = 3 };
pub const WPD_PROPERTY_CLASS_EXTENSION_SERVICE_OBJECT_ID = PROPERTYKEY { .fmtid = Guid.initString("7f0779b5-fa2b-4766-9cb2-f73ba30b6758"), .pid = 1001 };
pub const WPD_PROPERTY_CLASS_EXTENSION_SERVICE_INTERFACES = PROPERTYKEY { .fmtid = Guid.initString("7f0779b5-fa2b-4766-9cb2-f73ba30b6758"), .pid = 1002 };
pub const WPD_PROPERTY_CLASS_EXTENSION_SERVICE_REGISTRATION_RESULTS = PROPERTYKEY { .fmtid = Guid.initString("7f0779b5-fa2b-4766-9cb2-f73ba30b6758"), .pid = 1003 };
pub const WPD_CATEGORY_NETWORK_CONFIGURATION = Guid.initString("78f9c6fc-79b8-473c-9060-6bd23dd072c4");
pub const WPD_COMMAND_GENERATE_KEYPAIR = PROPERTYKEY { .fmtid = Guid.initString("78f9c6fc-79b8-473c-9060-6bd23dd072c4"), .pid = 2 };
pub const WPD_COMMAND_COMMIT_KEYPAIR = PROPERTYKEY { .fmtid = Guid.initString("78f9c6fc-79b8-473c-9060-6bd23dd072c4"), .pid = 3 };
pub const WPD_COMMAND_PROCESS_WIRELESS_PROFILE = PROPERTYKEY { .fmtid = Guid.initString("78f9c6fc-79b8-473c-9060-6bd23dd072c4"), .pid = 4 };
pub const WPD_PROPERTY_PUBLIC_KEY = PROPERTYKEY { .fmtid = Guid.initString("78f9c6fc-79b8-473c-9060-6bd23dd072c4"), .pid = 1001 };
pub const WPD_CATEGORY_SERVICE_COMMON = Guid.initString("322f071d-36ef-477f-b4b5-6f52d734baee");
pub const WPD_COMMAND_SERVICE_COMMON_GET_SERVICE_OBJECT_ID = PROPERTYKEY { .fmtid = Guid.initString("322f071d-36ef-477f-b4b5-6f52d734baee"), .pid = 2 };
pub const WPD_PROPERTY_SERVICE_OBJECT_ID = PROPERTYKEY { .fmtid = Guid.initString("322f071d-36ef-477f-b4b5-6f52d734baee"), .pid = 1001 };
pub const WPD_CATEGORY_SERVICE_CAPABILITIES = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89");
pub const WPD_COMMAND_SERVICE_CAPABILITIES_GET_SUPPORTED_METHODS = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 2 };
pub const WPD_COMMAND_SERVICE_CAPABILITIES_GET_SUPPORTED_METHODS_BY_FORMAT = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 3 };
pub const WPD_COMMAND_SERVICE_CAPABILITIES_GET_METHOD_ATTRIBUTES = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 4 };
pub const WPD_COMMAND_SERVICE_CAPABILITIES_GET_METHOD_PARAMETER_ATTRIBUTES = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 5 };
pub const WPD_COMMAND_SERVICE_CAPABILITIES_GET_SUPPORTED_FORMATS = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 6 };
pub const WPD_COMMAND_SERVICE_CAPABILITIES_GET_FORMAT_ATTRIBUTES = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 7 };
pub const WPD_COMMAND_SERVICE_CAPABILITIES_GET_SUPPORTED_FORMAT_PROPERTIES = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 8 };
pub const WPD_COMMAND_SERVICE_CAPABILITIES_GET_FORMAT_PROPERTY_ATTRIBUTES = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 9 };
pub const WPD_COMMAND_SERVICE_CAPABILITIES_GET_SUPPORTED_EVENTS = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 10 };
pub const WPD_COMMAND_SERVICE_CAPABILITIES_GET_EVENT_ATTRIBUTES = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 11 };
pub const WPD_COMMAND_SERVICE_CAPABILITIES_GET_EVENT_PARAMETER_ATTRIBUTES = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 12 };
pub const WPD_COMMAND_SERVICE_CAPABILITIES_GET_INHERITED_SERVICES = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 13 };
pub const WPD_COMMAND_SERVICE_CAPABILITIES_GET_FORMAT_RENDERING_PROFILES = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 14 };
pub const WPD_COMMAND_SERVICE_CAPABILITIES_GET_SUPPORTED_COMMANDS = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 15 };
pub const WPD_COMMAND_SERVICE_CAPABILITIES_GET_COMMAND_OPTIONS = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 16 };
pub const WPD_PROPERTY_SERVICE_CAPABILITIES_SUPPORTED_METHODS = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 1001 };
pub const WPD_PROPERTY_SERVICE_CAPABILITIES_FORMAT = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 1002 };
pub const WPD_PROPERTY_SERVICE_CAPABILITIES_METHOD = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 1003 };
pub const WPD_PROPERTY_SERVICE_CAPABILITIES_METHOD_ATTRIBUTES = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 1004 };
pub const WPD_PROPERTY_SERVICE_CAPABILITIES_PARAMETER = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 1005 };
pub const WPD_PROPERTY_SERVICE_CAPABILITIES_PARAMETER_ATTRIBUTES = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 1006 };
pub const WPD_PROPERTY_SERVICE_CAPABILITIES_FORMATS = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 1007 };
pub const WPD_PROPERTY_SERVICE_CAPABILITIES_FORMAT_ATTRIBUTES = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 1008 };
pub const WPD_PROPERTY_SERVICE_CAPABILITIES_PROPERTY_KEYS = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 1009 };
pub const WPD_PROPERTY_SERVICE_CAPABILITIES_PROPERTY_ATTRIBUTES = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 1010 };
pub const WPD_PROPERTY_SERVICE_CAPABILITIES_SUPPORTED_EVENTS = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 1011 };
pub const WPD_PROPERTY_SERVICE_CAPABILITIES_EVENT = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 1012 };
pub const WPD_PROPERTY_SERVICE_CAPABILITIES_EVENT_ATTRIBUTES = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 1013 };
pub const WPD_PROPERTY_SERVICE_CAPABILITIES_INHERITANCE_TYPE = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 1014 };
pub const WPD_PROPERTY_SERVICE_CAPABILITIES_INHERITED_SERVICES = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 1015 };
pub const WPD_PROPERTY_SERVICE_CAPABILITIES_RENDERING_PROFILES = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 1016 };
pub const WPD_PROPERTY_SERVICE_CAPABILITIES_SUPPORTED_COMMANDS = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 1017 };
pub const WPD_PROPERTY_SERVICE_CAPABILITIES_COMMAND = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 1018 };
pub const WPD_PROPERTY_SERVICE_CAPABILITIES_COMMAND_OPTIONS = PROPERTYKEY { .fmtid = Guid.initString("24457e74-2e9f-44f9-8c57-1d1bcb170b89"), .pid = 1019 };
pub const WPD_CATEGORY_SERVICE_METHODS = Guid.initString("2d521ca8-c1b0-4268-a342-cf19321569bc");
pub const WPD_COMMAND_SERVICE_METHODS_START_INVOKE = PROPERTYKEY { .fmtid = Guid.initString("2d521ca8-c1b0-4268-a342-cf19321569bc"), .pid = 2 };
pub const WPD_COMMAND_SERVICE_METHODS_CANCEL_INVOKE = PROPERTYKEY { .fmtid = Guid.initString("2d521ca8-c1b0-4268-a342-cf19321569bc"), .pid = 3 };
pub const WPD_COMMAND_SERVICE_METHODS_END_INVOKE = PROPERTYKEY { .fmtid = Guid.initString("2d521ca8-c1b0-4268-a342-cf19321569bc"), .pid = 4 };
pub const WPD_PROPERTY_SERVICE_METHOD = PROPERTYKEY { .fmtid = Guid.initString("2d521ca8-c1b0-4268-a342-cf19321569bc"), .pid = 1001 };
pub const WPD_PROPERTY_SERVICE_METHOD_PARAMETER_VALUES = PROPERTYKEY { .fmtid = Guid.initString("2d521ca8-c1b0-4268-a342-cf19321569bc"), .pid = 1002 };
pub const WPD_PROPERTY_SERVICE_METHOD_RESULT_VALUES = PROPERTYKEY { .fmtid = Guid.initString("2d521ca8-c1b0-4268-a342-cf19321569bc"), .pid = 1003 };
pub const WPD_PROPERTY_SERVICE_METHOD_CONTEXT = PROPERTYKEY { .fmtid = Guid.initString("2d521ca8-c1b0-4268-a342-cf19321569bc"), .pid = 1004 };
pub const WPD_PROPERTY_SERVICE_METHOD_HRESULT = PROPERTYKEY { .fmtid = Guid.initString("2d521ca8-c1b0-4268-a342-cf19321569bc"), .pid = 1005 };
pub const WPD_RESOURCE_DEFAULT = PROPERTYKEY { .fmtid = Guid.initString("e81e79be-34f0-41bf-b53f-f1a06ae87842"), .pid = 0 };
pub const WPD_RESOURCE_CONTACT_PHOTO = PROPERTYKEY { .fmtid = Guid.initString("2c4d6803-80ea-4580-af9a-5be1a23eddcb"), .pid = 0 };
pub const WPD_RESOURCE_THUMBNAIL = PROPERTYKEY { .fmtid = Guid.initString("c7c407ba-98fa-46b5-9960-23fec124cfde"), .pid = 0 };
pub const WPD_RESOURCE_ICON = PROPERTYKEY { .fmtid = Guid.initString("f195fed8-aa28-4ee3-b153-e182dd5edc39"), .pid = 0 };
pub const WPD_RESOURCE_AUDIO_CLIP = PROPERTYKEY { .fmtid = Guid.initString("3bc13982-85b1-48e0-95a6-8d3ad06be117"), .pid = 0 };
pub const WPD_RESOURCE_ALBUM_ART = PROPERTYKEY { .fmtid = Guid.initString("f02aa354-2300-4e2d-a1b9-3b6730f7fa21"), .pid = 0 };
pub const WPD_RESOURCE_GENERIC = PROPERTYKEY { .fmtid = Guid.initString("b9b9f515-ba70-4647-94dc-fa4925e95a07"), .pid = 0 };
pub const WPD_RESOURCE_VIDEO_CLIP = PROPERTYKEY { .fmtid = Guid.initString("b566ee42-6368-4290-8662-70182fb79f20"), .pid = 0 };
pub const WPD_RESOURCE_BRANDING_ART = PROPERTYKEY { .fmtid = Guid.initString("b633b1ae-6caf-4a87-9589-22ded6dd5899"), .pid = 0 };
pub const WPD_OBJECT_FORMAT_PROPERTIES_ONLY = Guid.initString("30010000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_UNSPECIFIED = Guid.initString("30000000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_SCRIPT = Guid.initString("30020000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_EXECUTABLE = Guid.initString("30030000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_TEXT = Guid.initString("30040000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_HTML = Guid.initString("30050000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_DPOF = Guid.initString("30060000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_AIFF = Guid.initString("30070000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_WAVE = Guid.initString("30080000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_MP3 = Guid.initString("30090000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_AVI = Guid.initString("300a0000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_MPEG = Guid.initString("300b0000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_ASF = Guid.initString("300c0000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_EXIF = Guid.initString("38010000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_TIFFEP = Guid.initString("38020000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_FLASHPIX = Guid.initString("38030000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_BMP = Guid.initString("38040000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_CIFF = Guid.initString("38050000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_GIF = Guid.initString("38070000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_JFIF = Guid.initString("38080000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_PCD = Guid.initString("38090000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_PICT = Guid.initString("380a0000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_PNG = Guid.initString("380b0000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_TIFF = Guid.initString("380d0000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_TIFFIT = Guid.initString("380e0000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_JP2 = Guid.initString("380f0000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_JPX = Guid.initString("38100000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_WBMP = Guid.initString("b8030000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_JPEGXR = Guid.initString("b8040000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_WINDOWSIMAGEFORMAT = Guid.initString("b8810000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_WMA = Guid.initString("b9010000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_WMV = Guid.initString("b9810000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_WPLPLAYLIST = Guid.initString("ba100000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_M3UPLAYLIST = Guid.initString("ba110000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_MPLPLAYLIST = Guid.initString("ba120000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_ASXPLAYLIST = Guid.initString("ba130000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_PLSPLAYLIST = Guid.initString("ba140000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_ABSTRACT_CONTACT_GROUP = Guid.initString("ba060000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_ABSTRACT_MEDIA_CAST = Guid.initString("ba0b0000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_VCALENDAR1 = Guid.initString("be020000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_ICALENDAR = Guid.initString("be030000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_ABSTRACT_CONTACT = Guid.initString("bb810000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_VCARD2 = Guid.initString("bb820000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_VCARD3 = Guid.initString("bb830000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_XML = Guid.initString("ba820000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_AAC = Guid.initString("b9030000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_AUDIBLE = Guid.initString("b9040000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_FLAC = Guid.initString("b9060000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_QCELP = Guid.initString("b9070000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_AMR = Guid.initString("b9080000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_OGG = Guid.initString("b9020000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_MP4 = Guid.initString("b9820000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_MP2 = Guid.initString("b9830000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_MICROSOFT_WORD = Guid.initString("ba830000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_MHT_COMPILED_HTML = Guid.initString("ba840000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_MICROSOFT_EXCEL = Guid.initString("ba850000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_MICROSOFT_POWERPOINT = Guid.initString("ba860000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_3GP = Guid.initString("b9840000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_3G2 = Guid.initString("b9850000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_AVCHD = Guid.initString("b9860000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_ATSCTS = Guid.initString("b9870000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_DVBTS = Guid.initString("b9880000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_FORMAT_MKV = Guid.initString("b9900000-ae6c-4804-98ba-c57b46965fe7");
pub const WPD_OBJECT_ID = PROPERTYKEY { .fmtid = Guid.initString("ef6b490d-5cd8-437a-affc-da8b60ee4a3c"), .pid = 2 };
pub const WPD_OBJECT_PARENT_ID = PROPERTYKEY { .fmtid = Guid.initString("ef6b490d-5cd8-437a-affc-da8b60ee4a3c"), .pid = 3 };
pub const WPD_OBJECT_NAME = PROPERTYKEY { .fmtid = Guid.initString("ef6b490d-5cd8-437a-affc-da8b60ee4a3c"), .pid = 4 };
pub const WPD_OBJECT_PERSISTENT_UNIQUE_ID = PROPERTYKEY { .fmtid = Guid.initString("ef6b490d-5cd8-437a-affc-da8b60ee4a3c"), .pid = 5 };
pub const WPD_OBJECT_FORMAT = PROPERTYKEY { .fmtid = Guid.initString("ef6b490d-5cd8-437a-affc-da8b60ee4a3c"), .pid = 6 };
pub const WPD_OBJECT_ISHIDDEN = PROPERTYKEY { .fmtid = Guid.initString("ef6b490d-5cd8-437a-affc-da8b60ee4a3c"), .pid = 9 };
pub const WPD_OBJECT_ISSYSTEM = PROPERTYKEY { .fmtid = Guid.initString("ef6b490d-5cd8-437a-affc-da8b60ee4a3c"), .pid = 10 };
pub const WPD_OBJECT_SIZE = PROPERTYKEY { .fmtid = Guid.initString("ef6b490d-5cd8-437a-affc-da8b60ee4a3c"), .pid = 11 };
pub const WPD_OBJECT_ORIGINAL_FILE_NAME = PROPERTYKEY { .fmtid = Guid.initString("ef6b490d-5cd8-437a-affc-da8b60ee4a3c"), .pid = 12 };
pub const WPD_OBJECT_NON_CONSUMABLE = PROPERTYKEY { .fmtid = Guid.initString("ef6b490d-5cd8-437a-affc-da8b60ee4a3c"), .pid = 13 };
pub const WPD_OBJECT_KEYWORDS = PROPERTYKEY { .fmtid = Guid.initString("ef6b490d-5cd8-437a-affc-da8b60ee4a3c"), .pid = 15 };
pub const WPD_OBJECT_SYNC_ID = PROPERTYKEY { .fmtid = Guid.initString("ef6b490d-5cd8-437a-affc-da8b60ee4a3c"), .pid = 16 };
pub const WPD_OBJECT_IS_DRM_PROTECTED = PROPERTYKEY { .fmtid = Guid.initString("ef6b490d-5cd8-437a-affc-da8b60ee4a3c"), .pid = 17 };
pub const WPD_OBJECT_DATE_CREATED = PROPERTYKEY { .fmtid = Guid.initString("ef6b490d-5cd8-437a-affc-da8b60ee4a3c"), .pid = 18 };
pub const WPD_OBJECT_DATE_MODIFIED = PROPERTYKEY { .fmtid = Guid.initString("ef6b490d-5cd8-437a-affc-da8b60ee4a3c"), .pid = 19 };
pub const WPD_OBJECT_DATE_AUTHORED = PROPERTYKEY { .fmtid = Guid.initString("ef6b490d-5cd8-437a-affc-da8b60ee4a3c"), .pid = 20 };
pub const WPD_OBJECT_BACK_REFERENCES = PROPERTYKEY { .fmtid = Guid.initString("ef6b490d-5cd8-437a-affc-da8b60ee4a3c"), .pid = 21 };
pub const WPD_OBJECT_CAN_DELETE = PROPERTYKEY { .fmtid = Guid.initString("ef6b490d-5cd8-437a-affc-da8b60ee4a3c"), .pid = 26 };
pub const WPD_OBJECT_LANGUAGE_LOCALE = PROPERTYKEY { .fmtid = Guid.initString("ef6b490d-5cd8-437a-affc-da8b60ee4a3c"), .pid = 27 };
pub const WPD_FOLDER_OBJECT_PROPERTIES_V1 = Guid.initString("7e9a7abf-e568-4b34-aa2f-13bb12ab177d");
pub const WPD_FOLDER_CONTENT_TYPES_ALLOWED = PROPERTYKEY { .fmtid = Guid.initString("7e9a7abf-e568-4b34-aa2f-13bb12ab177d"), .pid = 2 };
pub const WPD_IMAGE_OBJECT_PROPERTIES_V1 = Guid.initString("63d64908-9fa1-479f-85ba-9952216447db");
pub const WPD_IMAGE_BITDEPTH = PROPERTYKEY { .fmtid = Guid.initString("63d64908-9fa1-479f-85ba-9952216447db"), .pid = 3 };
pub const WPD_IMAGE_CROPPED_STATUS = PROPERTYKEY { .fmtid = Guid.initString("63d64908-9fa1-479f-85ba-9952216447db"), .pid = 4 };
pub const WPD_IMAGE_COLOR_CORRECTED_STATUS = PROPERTYKEY { .fmtid = Guid.initString("63d64908-9fa1-479f-85ba-9952216447db"), .pid = 5 };
pub const WPD_IMAGE_FNUMBER = PROPERTYKEY { .fmtid = Guid.initString("63d64908-9fa1-479f-85ba-9952216447db"), .pid = 6 };
pub const WPD_IMAGE_EXPOSURE_TIME = PROPERTYKEY { .fmtid = Guid.initString("63d64908-9fa1-479f-85ba-9952216447db"), .pid = 7 };
pub const WPD_IMAGE_EXPOSURE_INDEX = PROPERTYKEY { .fmtid = Guid.initString("63d64908-9fa1-479f-85ba-9952216447db"), .pid = 8 };
pub const WPD_IMAGE_HORIZONTAL_RESOLUTION = PROPERTYKEY { .fmtid = Guid.initString("63d64908-9fa1-479f-85ba-9952216447db"), .pid = 9 };
pub const WPD_IMAGE_VERTICAL_RESOLUTION = PROPERTYKEY { .fmtid = Guid.initString("63d64908-9fa1-479f-85ba-9952216447db"), .pid = 10 };
pub const WPD_DOCUMENT_OBJECT_PROPERTIES_V1 = Guid.initString("0b110203-eb95-4f02-93e0-97c631493ad5");
pub const WPD_MEDIA_PROPERTIES_V1 = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8");
pub const WPD_MEDIA_TOTAL_BITRATE = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 2 };
pub const WPD_MEDIA_BITRATE_TYPE = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 3 };
pub const WPD_MEDIA_COPYRIGHT = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 4 };
pub const WPD_MEDIA_SUBSCRIPTION_CONTENT_ID = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 5 };
pub const WPD_MEDIA_USE_COUNT = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 6 };
pub const WPD_MEDIA_SKIP_COUNT = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 7 };
pub const WPD_MEDIA_LAST_ACCESSED_TIME = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 8 };
pub const WPD_MEDIA_PARENTAL_RATING = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 9 };
pub const WPD_MEDIA_META_GENRE = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 10 };
pub const WPD_MEDIA_COMPOSER = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 11 };
pub const WPD_MEDIA_EFFECTIVE_RATING = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 12 };
pub const WPD_MEDIA_SUB_TITLE = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 13 };
pub const WPD_MEDIA_RELEASE_DATE = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 14 };
pub const WPD_MEDIA_SAMPLE_RATE = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 15 };
pub const WPD_MEDIA_STAR_RATING = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 16 };
pub const WPD_MEDIA_USER_EFFECTIVE_RATING = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 17 };
pub const WPD_MEDIA_TITLE = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 18 };
pub const WPD_MEDIA_DURATION = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 19 };
pub const WPD_MEDIA_BUY_NOW = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 20 };
pub const WPD_MEDIA_ENCODING_PROFILE = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 21 };
pub const WPD_MEDIA_WIDTH = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 22 };
pub const WPD_MEDIA_HEIGHT = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 23 };
pub const WPD_MEDIA_ARTIST = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 24 };
pub const WPD_MEDIA_ALBUM_ARTIST = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 25 };
pub const WPD_MEDIA_OWNER = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 26 };
pub const WPD_MEDIA_MANAGING_EDITOR = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 27 };
pub const WPD_MEDIA_WEBMASTER = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 28 };
pub const WPD_MEDIA_SOURCE_URL = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 29 };
pub const WPD_MEDIA_DESTINATION_URL = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 30 };
pub const WPD_MEDIA_DESCRIPTION = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 31 };
pub const WPD_MEDIA_GENRE = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 32 };
pub const WPD_MEDIA_TIME_BOOKMARK = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 33 };
pub const WPD_MEDIA_OBJECT_BOOKMARK = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 34 };
pub const WPD_MEDIA_LAST_BUILD_DATE = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 35 };
pub const WPD_MEDIA_BYTE_BOOKMARK = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 36 };
pub const WPD_MEDIA_TIME_TO_LIVE = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 37 };
pub const WPD_MEDIA_GUID = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 38 };
pub const WPD_MEDIA_SUB_DESCRIPTION = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 39 };
pub const WPD_MEDIA_AUDIO_ENCODING_PROFILE = PROPERTYKEY { .fmtid = Guid.initString("2ed8ba05-0ad3-42dc-b0d0-bc95ac396ac8"), .pid = 49 };
pub const WPD_CONTACT_OBJECT_PROPERTIES_V1 = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b");
pub const WPD_CONTACT_DISPLAY_NAME = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 2 };
pub const WPD_CONTACT_FIRST_NAME = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 3 };
pub const WPD_CONTACT_MIDDLE_NAMES = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 4 };
pub const WPD_CONTACT_LAST_NAME = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 5 };
pub const WPD_CONTACT_PREFIX = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 6 };
pub const WPD_CONTACT_SUFFIX = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 7 };
pub const WPD_CONTACT_PHONETIC_FIRST_NAME = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 8 };
pub const WPD_CONTACT_PHONETIC_LAST_NAME = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 9 };
pub const WPD_CONTACT_PERSONAL_FULL_POSTAL_ADDRESS = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 10 };
pub const WPD_CONTACT_PERSONAL_POSTAL_ADDRESS_LINE1 = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 11 };
pub const WPD_CONTACT_PERSONAL_POSTAL_ADDRESS_LINE2 = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 12 };
pub const WPD_CONTACT_PERSONAL_POSTAL_ADDRESS_CITY = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 13 };
pub const WPD_CONTACT_PERSONAL_POSTAL_ADDRESS_REGION = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 14 };
pub const WPD_CONTACT_PERSONAL_POSTAL_ADDRESS_POSTAL_CODE = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 15 };
pub const WPD_CONTACT_PERSONAL_POSTAL_ADDRESS_COUNTRY = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 16 };
pub const WPD_CONTACT_BUSINESS_FULL_POSTAL_ADDRESS = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 17 };
pub const WPD_CONTACT_BUSINESS_POSTAL_ADDRESS_LINE1 = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 18 };
pub const WPD_CONTACT_BUSINESS_POSTAL_ADDRESS_LINE2 = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 19 };
pub const WPD_CONTACT_BUSINESS_POSTAL_ADDRESS_CITY = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 20 };
pub const WPD_CONTACT_BUSINESS_POSTAL_ADDRESS_REGION = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 21 };
pub const WPD_CONTACT_BUSINESS_POSTAL_ADDRESS_POSTAL_CODE = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 22 };
pub const WPD_CONTACT_BUSINESS_POSTAL_ADDRESS_COUNTRY = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 23 };
pub const WPD_CONTACT_OTHER_FULL_POSTAL_ADDRESS = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 24 };
pub const WPD_CONTACT_OTHER_POSTAL_ADDRESS_LINE1 = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 25 };
pub const WPD_CONTACT_OTHER_POSTAL_ADDRESS_LINE2 = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 26 };
pub const WPD_CONTACT_OTHER_POSTAL_ADDRESS_CITY = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 27 };
pub const WPD_CONTACT_OTHER_POSTAL_ADDRESS_REGION = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 28 };
pub const WPD_CONTACT_OTHER_POSTAL_ADDRESS_POSTAL_CODE = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 29 };
pub const WPD_CONTACT_OTHER_POSTAL_ADDRESS_POSTAL_COUNTRY = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 30 };
pub const WPD_CONTACT_PRIMARY_EMAIL_ADDRESS = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 31 };
pub const WPD_CONTACT_PERSONAL_EMAIL = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 32 };
pub const WPD_CONTACT_PERSONAL_EMAIL2 = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 33 };
pub const WPD_CONTACT_BUSINESS_EMAIL = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 34 };
pub const WPD_CONTACT_BUSINESS_EMAIL2 = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 35 };
pub const WPD_CONTACT_OTHER_EMAILS = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 36 };
pub const WPD_CONTACT_PRIMARY_PHONE = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 37 };
pub const WPD_CONTACT_PERSONAL_PHONE = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 38 };
pub const WPD_CONTACT_PERSONAL_PHONE2 = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 39 };
pub const WPD_CONTACT_BUSINESS_PHONE = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 40 };
pub const WPD_CONTACT_BUSINESS_PHONE2 = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 41 };
pub const WPD_CONTACT_MOBILE_PHONE = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 42 };
pub const WPD_CONTACT_MOBILE_PHONE2 = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 43 };
pub const WPD_CONTACT_PERSONAL_FAX = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 44 };
pub const WPD_CONTACT_BUSINESS_FAX = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 45 };
pub const WPD_CONTACT_PAGER = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 46 };
pub const WPD_CONTACT_OTHER_PHONES = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 47 };
pub const WPD_CONTACT_PRIMARY_WEB_ADDRESS = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 48 };
pub const WPD_CONTACT_PERSONAL_WEB_ADDRESS = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 49 };
pub const WPD_CONTACT_BUSINESS_WEB_ADDRESS = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 50 };
pub const WPD_CONTACT_INSTANT_MESSENGER = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 51 };
pub const WPD_CONTACT_INSTANT_MESSENGER2 = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 52 };
pub const WPD_CONTACT_INSTANT_MESSENGER3 = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 53 };
pub const WPD_CONTACT_COMPANY_NAME = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 54 };
pub const WPD_CONTACT_PHONETIC_COMPANY_NAME = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 55 };
pub const WPD_CONTACT_ROLE = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 56 };
pub const WPD_CONTACT_BIRTHDATE = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 57 };
pub const WPD_CONTACT_PRIMARY_FAX = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 58 };
pub const WPD_CONTACT_SPOUSE = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 59 };
pub const WPD_CONTACT_CHILDREN = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 60 };
pub const WPD_CONTACT_ASSISTANT = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 61 };
pub const WPD_CONTACT_ANNIVERSARY_DATE = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 62 };
pub const WPD_CONTACT_RINGTONE = PROPERTYKEY { .fmtid = Guid.initString("fbd4fdab-987d-4777-b3f9-726185a9312b"), .pid = 63 };
pub const WPD_MUSIC_OBJECT_PROPERTIES_V1 = Guid.initString("b324f56a-dc5d-46e5-b6df-d2ea414888c6");
pub const WPD_MUSIC_ALBUM = PROPERTYKEY { .fmtid = Guid.initString("b324f56a-dc5d-46e5-b6df-d2ea414888c6"), .pid = 3 };
pub const WPD_MUSIC_TRACK = PROPERTYKEY { .fmtid = Guid.initString("b324f56a-dc5d-46e5-b6df-d2ea414888c6"), .pid = 4 };
pub const WPD_MUSIC_LYRICS = PROPERTYKEY { .fmtid = Guid.initString("b324f56a-dc5d-46e5-b6df-d2ea414888c6"), .pid = 6 };
pub const WPD_MUSIC_MOOD = PROPERTYKEY { .fmtid = Guid.initString("b324f56a-dc5d-46e5-b6df-d2ea414888c6"), .pid = 8 };
pub const WPD_AUDIO_BITRATE = PROPERTYKEY { .fmtid = Guid.initString("b324f56a-dc5d-46e5-b6df-d2ea414888c6"), .pid = 9 };
pub const WPD_AUDIO_CHANNEL_COUNT = PROPERTYKEY { .fmtid = Guid.initString("b324f56a-dc5d-46e5-b6df-d2ea414888c6"), .pid = 10 };
pub const WPD_AUDIO_FORMAT_CODE = PROPERTYKEY { .fmtid = Guid.initString("b324f56a-dc5d-46e5-b6df-d2ea414888c6"), .pid = 11 };
pub const WPD_AUDIO_BIT_DEPTH = PROPERTYKEY { .fmtid = Guid.initString("b324f56a-dc5d-46e5-b6df-d2ea414888c6"), .pid = 12 };
pub const WPD_AUDIO_BLOCK_ALIGNMENT = PROPERTYKEY { .fmtid = Guid.initString("b324f56a-dc5d-46e5-b6df-d2ea414888c6"), .pid = 13 };
pub const WPD_VIDEO_OBJECT_PROPERTIES_V1 = Guid.initString("346f2163-f998-4146-8b01-d19b4c00de9a");
pub const WPD_VIDEO_AUTHOR = PROPERTYKEY { .fmtid = Guid.initString("346f2163-f998-4146-8b01-d19b4c00de9a"), .pid = 2 };
pub const WPD_VIDEO_RECORDEDTV_STATION_NAME = PROPERTYKEY { .fmtid = Guid.initString("346f2163-f998-4146-8b01-d19b4c00de9a"), .pid = 4 };
pub const WPD_VIDEO_RECORDEDTV_CHANNEL_NUMBER = PROPERTYKEY { .fmtid = Guid.initString("346f2163-f998-4146-8b01-d19b4c00de9a"), .pid = 5 };
pub const WPD_VIDEO_RECORDEDTV_REPEAT = PROPERTYKEY { .fmtid = Guid.initString("346f2163-f998-4146-8b01-d19b4c00de9a"), .pid = 7 };
pub const WPD_VIDEO_BUFFER_SIZE = PROPERTYKEY { .fmtid = Guid.initString("346f2163-f998-4146-8b01-d19b4c00de9a"), .pid = 8 };
pub const WPD_VIDEO_CREDITS = PROPERTYKEY { .fmtid = Guid.initString("346f2163-f998-4146-8b01-d19b4c00de9a"), .pid = 9 };
pub const WPD_VIDEO_KEY_FRAME_DISTANCE = PROPERTYKEY { .fmtid = Guid.initString("346f2163-f998-4146-8b01-d19b4c00de9a"), .pid = 10 };
pub const WPD_VIDEO_QUALITY_SETTING = PROPERTYKEY { .fmtid = Guid.initString("346f2163-f998-4146-8b01-d19b4c00de9a"), .pid = 11 };
pub const WPD_VIDEO_SCAN_TYPE = PROPERTYKEY { .fmtid = Guid.initString("346f2163-f998-4146-8b01-d19b4c00de9a"), .pid = 12 };
pub const WPD_VIDEO_BITRATE = PROPERTYKEY { .fmtid = Guid.initString("346f2163-f998-4146-8b01-d19b4c00de9a"), .pid = 13 };
pub const WPD_VIDEO_FOURCC_CODE = PROPERTYKEY { .fmtid = Guid.initString("346f2163-f998-4146-8b01-d19b4c00de9a"), .pid = 14 };
pub const WPD_VIDEO_FRAMERATE = PROPERTYKEY { .fmtid = Guid.initString("346f2163-f998-4146-8b01-d19b4c00de9a"), .pid = 15 };
pub const WPD_COMMON_INFORMATION_OBJECT_PROPERTIES_V1 = Guid.initString("b28ae94b-05a4-4e8e-be01-72cc7e099d8f");
pub const WPD_COMMON_INFORMATION_SUBJECT = PROPERTYKEY { .fmtid = Guid.initString("b28ae94b-05a4-4e8e-be01-72cc7e099d8f"), .pid = 2 };
pub const WPD_COMMON_INFORMATION_BODY_TEXT = PROPERTYKEY { .fmtid = Guid.initString("b28ae94b-05a4-4e8e-be01-72cc7e099d8f"), .pid = 3 };
pub const WPD_COMMON_INFORMATION_PRIORITY = PROPERTYKEY { .fmtid = Guid.initString("b28ae94b-05a4-4e8e-be01-72cc7e099d8f"), .pid = 4 };
pub const WPD_COMMON_INFORMATION_START_DATETIME = PROPERTYKEY { .fmtid = Guid.initString("b28ae94b-05a4-4e8e-be01-72cc7e099d8f"), .pid = 5 };
pub const WPD_COMMON_INFORMATION_END_DATETIME = PROPERTYKEY { .fmtid = Guid.initString("b28ae94b-05a4-4e8e-be01-72cc7e099d8f"), .pid = 6 };
pub const WPD_COMMON_INFORMATION_NOTES = PROPERTYKEY { .fmtid = Guid.initString("b28ae94b-05a4-4e8e-be01-72cc7e099d8f"), .pid = 7 };
pub const WPD_MEMO_OBJECT_PROPERTIES_V1 = Guid.initString("5ffbfc7b-7483-41ad-afb9-da3f4e592b8d");
pub const WPD_EMAIL_OBJECT_PROPERTIES_V1 = Guid.initString("41f8f65a-5484-4782-b13d-4740dd7c37c5");
pub const WPD_EMAIL_TO_LINE = PROPERTYKEY { .fmtid = Guid.initString("41f8f65a-5484-4782-b13d-4740dd7c37c5"), .pid = 2 };
pub const WPD_EMAIL_CC_LINE = PROPERTYKEY { .fmtid = Guid.initString("41f8f65a-5484-4782-b13d-4740dd7c37c5"), .pid = 3 };
pub const WPD_EMAIL_BCC_LINE = PROPERTYKEY { .fmtid = Guid.initString("41f8f65a-5484-4782-b13d-4740dd7c37c5"), .pid = 4 };
pub const WPD_EMAIL_HAS_BEEN_READ = PROPERTYKEY { .fmtid = Guid.initString("41f8f65a-5484-4782-b13d-4740dd7c37c5"), .pid = 7 };
pub const WPD_EMAIL_RECEIVED_TIME = PROPERTYKEY { .fmtid = Guid.initString("41f8f65a-5484-4782-b13d-4740dd7c37c5"), .pid = 8 };
pub const WPD_EMAIL_HAS_ATTACHMENTS = PROPERTYKEY { .fmtid = Guid.initString("41f8f65a-5484-4782-b13d-4740dd7c37c5"), .pid = 9 };
pub const WPD_EMAIL_SENDER_ADDRESS = PROPERTYKEY { .fmtid = Guid.initString("41f8f65a-5484-4782-b13d-4740dd7c37c5"), .pid = 10 };
pub const WPD_APPOINTMENT_OBJECT_PROPERTIES_V1 = Guid.initString("f99efd03-431d-40d8-a1c9-4e220d9c88d3");
pub const WPD_APPOINTMENT_LOCATION = PROPERTYKEY { .fmtid = Guid.initString("f99efd03-431d-40d8-a1c9-4e220d9c88d3"), .pid = 3 };
pub const WPD_APPOINTMENT_TYPE = PROPERTYKEY { .fmtid = Guid.initString("f99efd03-431d-40d8-a1c9-4e220d9c88d3"), .pid = 7 };
pub const WPD_APPOINTMENT_REQUIRED_ATTENDEES = PROPERTYKEY { .fmtid = Guid.initString("f99efd03-431d-40d8-a1c9-4e220d9c88d3"), .pid = 8 };
pub const WPD_APPOINTMENT_OPTIONAL_ATTENDEES = PROPERTYKEY { .fmtid = Guid.initString("f99efd03-431d-40d8-a1c9-4e220d9c88d3"), .pid = 9 };
pub const WPD_APPOINTMENT_ACCEPTED_ATTENDEES = PROPERTYKEY { .fmtid = Guid.initString("f99efd03-431d-40d8-a1c9-4e220d9c88d3"), .pid = 10 };
pub const WPD_APPOINTMENT_RESOURCES = PROPERTYKEY { .fmtid = Guid.initString("f99efd03-431d-40d8-a1c9-4e220d9c88d3"), .pid = 11 };
pub const WPD_APPOINTMENT_TENTATIVE_ATTENDEES = PROPERTYKEY { .fmtid = Guid.initString("f99efd03-431d-40d8-a1c9-4e220d9c88d3"), .pid = 12 };
pub const WPD_APPOINTMENT_DECLINED_ATTENDEES = PROPERTYKEY { .fmtid = Guid.initString("f99efd03-431d-40d8-a1c9-4e220d9c88d3"), .pid = 13 };
pub const WPD_TASK_OBJECT_PROPERTIES_V1 = Guid.initString("e354e95e-d8a0-4637-a03a-0cb26838dbc7");
pub const WPD_TASK_STATUS = PROPERTYKEY { .fmtid = Guid.initString("e354e95e-d8a0-4637-a03a-0cb26838dbc7"), .pid = 6 };
pub const WPD_TASK_PERCENT_COMPLETE = PROPERTYKEY { .fmtid = Guid.initString("e354e95e-d8a0-4637-a03a-0cb26838dbc7"), .pid = 8 };
pub const WPD_TASK_REMINDER_DATE = PROPERTYKEY { .fmtid = Guid.initString("e354e95e-d8a0-4637-a03a-0cb26838dbc7"), .pid = 10 };
pub const WPD_TASK_OWNER = PROPERTYKEY { .fmtid = Guid.initString("e354e95e-d8a0-4637-a03a-0cb26838dbc7"), .pid = 11 };
pub const WPD_SMS_OBJECT_PROPERTIES_V1 = Guid.initString("7e1074cc-50ff-4dd1-a742-53be6f093a0d");
pub const WPD_SMS_PROVIDER = PROPERTYKEY { .fmtid = Guid.initString("7e1074cc-50ff-4dd1-a742-53be6f093a0d"), .pid = 2 };
pub const WPD_SMS_TIMEOUT = PROPERTYKEY { .fmtid = Guid.initString("7e1074cc-50ff-4dd1-a742-53be6f093a0d"), .pid = 3 };
pub const WPD_SMS_MAX_PAYLOAD = PROPERTYKEY { .fmtid = Guid.initString("7e1074cc-50ff-4dd1-a742-53be6f093a0d"), .pid = 4 };
pub const WPD_SMS_ENCODING = PROPERTYKEY { .fmtid = Guid.initString("7e1074cc-50ff-4dd1-a742-53be6f093a0d"), .pid = 5 };
pub const WPD_SECTION_OBJECT_PROPERTIES_V1 = Guid.initString("516afd2b-c64e-44f0-98dc-bee1c88f7d66");
pub const WPD_SECTION_DATA_OFFSET = PROPERTYKEY { .fmtid = Guid.initString("516afd2b-c64e-44f0-98dc-bee1c88f7d66"), .pid = 2 };
pub const WPD_SECTION_DATA_LENGTH = PROPERTYKEY { .fmtid = Guid.initString("516afd2b-c64e-44f0-98dc-bee1c88f7d66"), .pid = 3 };
pub const WPD_SECTION_DATA_UNITS = PROPERTYKEY { .fmtid = Guid.initString("516afd2b-c64e-44f0-98dc-bee1c88f7d66"), .pid = 4 };
pub const WPD_SECTION_DATA_REFERENCED_OBJECT_RESOURCE = PROPERTYKEY { .fmtid = Guid.initString("516afd2b-c64e-44f0-98dc-bee1c88f7d66"), .pid = 5 };
pub const NAME_Undefined = "Undefined";
pub const NAME_Association = "Association";
pub const NAME_DeviceScript = "DeviceScript";
pub const NAME_DeviceExecutable = "DeviceExecutable";
pub const NAME_TextDocument = "TextDocument";
pub const NAME_HTMLDocument = "HTMLDocument";
pub const NAME_DPOFDocument = "DPOFDocument";
pub const NAME_AIFFFile = "AIFFFile";
pub const NAME_WAVFile = "WAVFile";
pub const NAME_MP3File = "MP3File";
pub const NAME_AVIFile = "AVIFile";
pub const NAME_MPEGFile = "MPEGFile";
pub const NAME_ASFFile = "ASFFile";
pub const NAME_UnknownImage = "UnknownImage";
pub const NAME_EXIFImage = "EXIFImage";
pub const NAME_TIFFEPImage = "TIFFEPImage";
pub const NAME_FlashPixImage = "FlashPixImage";
pub const NAME_BMPImage = "BMPImage";
pub const NAME_CIFFImage = "CIFFImage";
pub const NAME_GIFImage = "GIFImage";
pub const NAME_JFIFImage = "JFIFImage";
pub const NAME_PCDImage = "PCDImage";
pub const NAME_PICTImage = "PICTImage";
pub const NAME_PNGImage = "PNGImage";
pub const NAME_TIFFImage = "TIFFImage";
pub const NAME_TIFFITImage = "TIFFITImage";
pub const NAME_JP2Image = "JP2Image";
pub const NAME_JPXImage = "JPXImage";
pub const NAME_FirmwareFile = "FirmwareFile";
pub const NAME_WBMPImage = "WBMPImage";
pub const NAME_JPEGXRImage = "JPEGXRImage";
pub const NAME_HDPhotoImage = "HDPhotoImage";
pub const NAME_UndefinedAudio = "UndefinedAudio";
pub const NAME_WMAFile = "WMAFile";
pub const NAME_OGGFile = "OGGFile";
pub const NAME_AACFile = "AACFile";
pub const NAME_AudibleFile = "AudibleFile";
pub const NAME_FLACFile = "FLACFile";
pub const NAME_QCELPFile = "QCELPFile";
pub const NAME_AMRFile = "AMRFile";
pub const NAME_UndefinedVideo = "UndefinedVideo";
pub const NAME_WMVFile = "WMVFile";
pub const NAME_MPEG4File = "MPEG4File";
pub const NAME_MPEG2File = "MPEG2File";
pub const NAME_3GPPFile = "3GPPFile";
pub const NAME_3GPP2File = "3GPP2File";
pub const NAME_AVCHDFile = "AVCHDFile";
pub const NAME_ATSCTSFile = "ATSCTSFile";
pub const NAME_DVBTSFile = "DVBTSFile";
pub const NAME_UndefinedCollection = "UndefinedCollection";
pub const NAME_AbstractMultimediaAlbum = "AbstractMultimediaAlbum";
pub const NAME_AbstractImageAlbum = "AbstractImageAlbum";
pub const NAME_AbstractAudioAlbum = "AbstractAudioAlbum";
pub const NAME_AbstractVideoAlbum = "AbstractVideoAlbum";
pub const NAME_AbstractAudioVideoAlbum = "AbstractAudioVideoAlbum";
pub const NAME_AbstractChapteredProduction = "AbstractChapteredProduction";
pub const NAME_AbstractAudioPlaylist = "AbstractAudioPlaylist";
pub const NAME_AbstractVideoPlaylist = "AbstractVideoPlaylist";
pub const NAME_AbstractMediacast = "AbstractMediacast";
pub const NAME_WPLPlaylist = "WPLPlaylist";
pub const NAME_M3UPlaylist = "M3UPlaylist";
pub const NAME_MPLPlaylist = "MPLPlaylist";
pub const NAME_ASXPlaylist = "ASXPlaylist";
pub const NAME_PSLPlaylist = "PSLPlaylist";
pub const NAME_UndefinedDocument = "UndefinedDocument";
pub const NAME_AbstractDocument = "AbstractDocument";
pub const NAME_XMLDocument = "XMLDocument";
pub const NAME_WordDocument = "WordDocument";
pub const NAME_MHTDocument = "MHTDocument";
pub const NAME_ExcelDocument = "ExcelDocument";
pub const NAME_PowerPointDocument = "PowerPointDocument";
pub const NAME_GenericObj_ObjectID = "ObjectID";
pub const NAME_GenericObj_ReferenceParentID = "ReferenceParentID";
pub const NAME_GenericObj_StorageID = "StorageID";
pub const NAME_GenericObj_ObjectFormat = "ObjectFormat";
pub const NAME_GenericObj_ProtectionStatus = "ProtectionStatus";
pub const NAME_GenericObj_ObjectSize = "ObjectSize";
pub const NAME_GenericObj_AssociationType = "AssociationType";
pub const NAME_GenericObj_AssociationDesc = "AssociationDesc";
pub const NAME_GenericObj_ObjectFileName = "ObjectFileName";
pub const NAME_GenericObj_DateCreated = "DateCreated";
pub const NAME_GenericObj_DateModified = "DateModified";
pub const NAME_GenericObj_Keywords = "Keywords";
pub const NAME_GenericObj_ParentID = "ParentID";
pub const NAME_GenericObj_AllowedFolderContents = "AllowedFolderContents";
pub const NAME_GenericObj_Hidden = "Hidden";
pub const NAME_GenericObj_SystemObject = "SystemObject";
pub const NAME_GenericObj_PersistentUID = "PersistentUID";
pub const NAME_GenericObj_SyncID = "SyncID";
pub const NAME_GenericObj_PropertyBag = "PropertyBag";
pub const NAME_GenericObj_Name = "Name";
pub const NAME_MediaObj_Artist = "Artist";
pub const NAME_GenericObj_DateAuthored = "DateAuthored";
pub const NAME_GenericObj_Description = "Description";
pub const NAME_GenericObj_LanguageLocale = "LanguageLocale";
pub const NAME_GenericObj_Copyright = "Copyright";
pub const NAME_VideoObj_Source = "Source";
pub const NAME_MediaObj_GeographicOrigin = "GeographicOrigin";
pub const NAME_GenericObj_DateAdded = "DateAdded";
pub const NAME_GenericObj_NonConsumable = "NonConsumable";
pub const NAME_GenericObj_Corrupt = "Corrupt";
pub const NAME_MediaObj_Width = "Width";
pub const NAME_MediaObj_Height = "Height";
pub const NAME_MediaObj_Duration = "Duration";
pub const NAME_MediaObj_UserRating = "UserRating";
pub const NAME_MediaObj_Track = "Track";
pub const NAME_MediaObj_Genre = "Genre";
pub const NAME_MediaObj_Credits = "Credits";
pub const NAME_AudioObj_Lyrics = "Lyrics";
pub const NAME_MediaObj_SubscriptionContentID = "SubscriptionContentID";
pub const NAME_MediaObj_Producer = "Producer";
pub const NAME_MediaObj_UseCount = "UseCount";
pub const NAME_MediaObj_SkipCount = "SkipCount";
pub const NAME_GenericObj_DateAccessed = "DateAccessed";
pub const NAME_MediaObj_ParentalRating = "ParentalRating";
pub const NAME_MediaObj_MediaType = "MediaType";
pub const NAME_MediaObj_Composer = "Composer";
pub const NAME_MediaObj_EffectiveRating = "EffectiveRating";
pub const NAME_MediaObj_Subtitle = "Subtitle";
pub const NAME_MediaObj_DateOriginalRelease = "DateOriginalRelease";
pub const NAME_MediaObj_AlbumName = "AlbumName";
pub const NAME_MediaObj_AlbumArtist = "AlbumArtist";
pub const NAME_MediaObj_Mood = "Mood";
pub const NAME_GenericObj_DRMStatus = "DRMStatus";
pub const NAME_GenericObj_SubDescription = "SubDescription";
pub const NAME_ImageObj_IsCropped = "IsCropped";
pub const NAME_ImageObj_IsColorCorrected = "IsColorCorrected";
pub const NAME_ImageObj_ImageBitDepth = "ImageBitDepth";
pub const NAME_ImageObj_Aperature = "Aperature";
pub const NAME_ImageObj_Exposure = "Exposure";
pub const NAME_ImageObj_ISOSpeed = "ISOSpeed";
pub const NAME_MediaObj_Owner = "Owner";
pub const NAME_MediaObj_Editor = "Editor";
pub const NAME_MediaObj_WebMaster = "WebMaster";
pub const NAME_MediaObj_URLSource = "URLSource";
pub const NAME_MediaObj_URLLink = "URLLink";
pub const NAME_MediaObj_BookmarkTime = "BookmarkTime";
pub const NAME_MediaObj_BookmarkObject = "BookmarkObject";
pub const NAME_MediaObj_BookmarkByte = "BookmarkByte";
pub const NAME_GenericObj_DateRevised = "DateRevised";
pub const NAME_GenericObj_TimeToLive = "TimeToLive";
pub const NAME_MediaObj_MediaUID = "MediaUID";
pub const NAME_MediaObj_TotalBitRate = "TotalBitRate";
pub const NAME_MediaObj_BitRateType = "BitRateType";
pub const NAME_MediaObj_SampleRate = "SampleRate";
pub const NAME_AudioObj_Channels = "Channels";
pub const NAME_AudioObj_AudioBitDepth = "AudioBitDepth";
pub const NAME_AudioObj_AudioBlockAlignment = "AudioBlockAlignment";
pub const NAME_VideoObj_ScanType = "ScanType";
pub const NAME_AudioObj_AudioFormatCode = "AudioFormatCode";
pub const NAME_AudioObj_AudioBitRate = "AudioBitRate";
pub const NAME_VideoObj_VideoFormatCode = "VideoFormatCode";
pub const NAME_VideoObj_VideoBitRate = "VideoBitRate";
pub const NAME_VideoObj_VideoFrameRate = "VideoFrameRate";
pub const NAME_VideoObj_KeyFrameDistance = "KeyFrameDistance";
pub const NAME_MediaObj_BufferSize = "BufferSize";
pub const NAME_MediaObj_EncodingQuality = "EncodingQuality";
pub const NAME_MediaObj_EncodingProfile = "EncodingProfile";
pub const NAME_MediaObj_AudioEncodingProfile = "AudioEncodingProfile";
pub const DEVSVC_SERVICEINFO_VERSION = @as(u32, 100);
pub const DEVSVCTYPE_DEFAULT = @as(u32, 0);
pub const DEVSVCTYPE_ABSTRACT = @as(u32, 1);
pub const NAME_Services_ServiceDisplayName = "ServiceDisplayName";
pub const NAME_Services_ServiceIcon = "ServiceIcon";
pub const NAME_Services_ServiceLocale = "ServiceLocale";
pub const NAME_CalendarSvc = "Calendar";
pub const TYPE_CalendarSvc = @as(u32, 0);
pub const NAME_CalendarSvc_SyncWindowStart = "SyncWindowStart";
pub const NAME_CalendarSvc_SyncWindowEnd = "SyncWindowEnd";
pub const NAME_AbstractActivity = "AbstractActivity";
pub const NAME_AbstractActivityOccurrence = "AbstractActivityOccurrence";
pub const NAME_VCalendar1Activity = "VCalendar1";
pub const NAME_ICalendarActivity = "ICalendar";
pub const NAME_CalendarObj_Location = "Location";
pub const NAME_CalendarObj_Accepted = "Accepted";
pub const NAME_CalendarObj_Tentative = "Tentative";
pub const NAME_CalendarObj_Declined = "Declined";
pub const NAME_CalendarObj_TimeZone = "TimeZone";
pub const NAME_CalendarObj_ReminderOffset = "ReminderOffset";
pub const NAME_CalendarObj_BusyStatus = "BusyStatus";
pub const ENUM_CalendarObj_BusyStatusFree = @as(u32, 0);
pub const ENUM_CalendarObj_BusyStatusBusy = @as(u32, 1);
pub const ENUM_CalendarObj_BusyStatusOutOfOffice = @as(u32, 2);
pub const ENUM_CalendarObj_BusyStatusTentative = @as(u32, 3);
pub const NAME_CalendarObj_PatternStartTime = "PatternStartTime";
pub const NAME_CalendarObj_PatternDuration = "PatternDuration";
pub const NAME_CalendarObj_BeginDateTime = "BeginDateTime";
pub const NAME_CalendarObj_EndDateTime = "EndDateTime";
pub const NAME_HintsSvc = "Hints";
pub const TYPE_HintsSvc = @as(u32, 0);
pub const NAME_MessageSvc = "Message";
pub const TYPE_MessageSvc = @as(u32, 0);
pub const NAME_AbstractMessage = "AbstractMessage";
pub const NAME_AbstractMessageFolder = "AbstractMessageFolder";
pub const NAME_MessageObj_Subject = "Subject";
pub const NAME_MessageObj_Body = "Body";
pub const NAME_MessageObj_Priority = "Priority";
pub const ENUM_MessageObj_PriorityHighest = @as(u32, 2);
pub const ENUM_MessageObj_PriorityNormal = @as(u32, 1);
pub const ENUM_MessageObj_PriorityLowest = @as(u32, 0);
pub const NAME_MessageObj_Category = "Category";
pub const NAME_MessageObj_Sender = "Sender";
pub const NAME_MessageObj_To = "To";
pub const NAME_MessageObj_CC = "CC";
pub const NAME_MessageObj_BCC = "BCC";
pub const NAME_MessageObj_Read = "Read";
pub const ENUM_MessageObj_ReadFalse = @as(u32, 0);
pub const ENUM_MessageObj_ReadTrue = @as(u32, 255);
pub const NAME_MessageObj_ReceivedTime = "ReceivedTime";
pub const NAME_MessageObj_PatternOriginalDateTime = "PatternOriginalDateTime";
pub const NAME_MessageObj_PatternType = "PatternType";
pub const ENUM_MessageObj_PatternTypeDaily = @as(u32, 1);
pub const ENUM_MessageObj_PatternTypeWeekly = @as(u32, 2);
pub const ENUM_MessageObj_PatternTypeMonthly = @as(u32, 3);
pub const ENUM_MessageObj_PatternTypeYearly = @as(u32, 4);
pub const NAME_MessageObj_PatternValidStartDate = "PatternValidStartDate";
pub const NAME_MessageObj_PatternValidEndDate = "PatternValidEndDate";
pub const NAME_MessageObj_PatternPeriod = "PatternPeriod";
pub const NAME_MessageObj_PatternDayOfWeek = "PatternDayOfWeek";
pub const FLAG_MessageObj_DayOfWeekNone = @as(u32, 0);
pub const FLAG_MessageObj_DayOfWeekSunday = @as(u32, 1);
pub const FLAG_MessageObj_DayOfWeekMonday = @as(u32, 2);
pub const FLAG_MessageObj_DayOfWeekTuesday = @as(u32, 4);
pub const FLAG_MessageObj_DayOfWeekWednesday = @as(u32, 8);
pub const FLAG_MessageObj_DayOfWeekThursday = @as(u32, 16);
pub const FLAG_MessageObj_DayOfWeekFriday = @as(u32, 32);
pub const FLAG_MessageObj_DayOfWeekSaturday = @as(u32, 64);
pub const NAME_MessageObj_PatternDayOfMonth = "PatternDayOfMonth";
pub const RANGEMIN_MessageObj_PatternDayOfMonth = @as(u32, 1);
pub const RANGEMAX_MessageObj_PatternDayOfMonth = @as(u32, 31);
pub const RANGESTEP_MessageObj_PatternDayOfMonth = @as(u32, 1);
pub const NAME_MessageObj_PatternMonthOfYear = "PatternMonthOfYear";
pub const RANGEMIN_MessageObj_PatternMonthOfYear = @as(u32, 1);
pub const RANGEMAX_MessageObj_PatternMonthOfYear = @as(u32, 12);
pub const RANGESTEP_MessageObj_PatternMonthOfYear = @as(u32, 1);
pub const NAME_MessageObj_PatternInstance = "PatternInstance";
pub const ENUM_MessageObj_PatternInstanceNone = @as(u32, 0);
pub const ENUM_MessageObj_PatternInstanceFirst = @as(u32, 1);
pub const ENUM_MessageObj_PatternInstanceSecond = @as(u32, 2);
pub const ENUM_MessageObj_PatternInstanceThird = @as(u32, 3);
pub const ENUM_MessageObj_PatternInstanceFourth = @as(u32, 4);
pub const ENUM_MessageObj_PatternInstanceLast = @as(u32, 5);
pub const NAME_MessageObj_PatternDeleteDates = "PatternDeleteDates";
pub const NAME_DeviceMetadataSvc = "Metadata";
pub const TYPE_DeviceMetadataSvc = @as(u32, 0);
pub const NAME_DeviceMetadataCAB = "DeviceMetadataCAB";
pub const NAME_DeviceMetadataObj_ContentID = "ContentID";
pub const NAME_DeviceMetadataObj_DefaultCAB = "DefaultCAB";
pub const ENUM_DeviceMetadataObj_DefaultCABFalse = @as(u32, 0);
pub const ENUM_DeviceMetadataObj_DefaultCABTrue = @as(u32, 1);
pub const NAME_NotesSvc = "Notes";
pub const TYPE_NotesSvc = @as(u32, 0);
pub const NAME_AbstractNote = "AbstractNote";
pub const NAME_StatusSvc = "Status";
pub const TYPE_StatusSvc = @as(u32, 0);
pub const NAME_StatusSvc_SignalStrength = "SignalStrength";
pub const RANGEMIN_StatusSvc_SignalStrength = @as(u32, 0);
pub const RANGEMAX_StatusSvc_SignalStrength = @as(u32, 4);
pub const RANGESTEP_StatusSvc_SignalStrength = @as(u32, 1);
pub const NAME_StatusSvc_TextMessages = "TextMessages";
pub const RANGEMAX_StatusSvc_TextMessages = @as(u32, 255);
pub const NAME_StatusSvc_NewPictures = "NewPictures";
pub const RANGEMAX_StatusSvc_NewPictures = @as(u32, 65535);
pub const NAME_StatusSvc_MissedCalls = "MissedCalls";
pub const RANGEMAX_StatusSvc_MissedCalls = @as(u32, 255);
pub const NAME_StatusSvc_VoiceMail = "VoiceMail";
pub const RANGEMAX_StatusSvc_VoiceMail = @as(u32, 255);
pub const NAME_StatusSvc_NetworkName = "NetworkName";
pub const NAME_StatusSvc_NetworkType = "NetworkType";
pub const NAME_StatusSvc_Roaming = "Roaming";
pub const ENUM_StatusSvc_RoamingInactive = @as(u32, 0);
pub const ENUM_StatusSvc_RoamingActive = @as(u32, 1);
pub const ENUM_StatusSvc_RoamingUnknown = @as(u32, 2);
pub const NAME_StatusSvc_BatteryLife = "BatteryLife";
pub const RANGEMIN_StatusSvc_BatteryLife = @as(u32, 0);
pub const RANGEMAX_StatusSvc_BatteryLife = @as(u32, 100);
pub const RANGESTEP_StatusSvc_BatteryLife = @as(u32, 1);
pub const NAME_StatusSvc_ChargingState = "ChargingState";
pub const ENUM_StatusSvc_ChargingInactive = @as(u32, 0);
pub const ENUM_StatusSvc_ChargingActive = @as(u32, 1);
pub const ENUM_StatusSvc_ChargingUnknown = @as(u32, 2);
pub const NAME_StatusSvc_StorageCapacity = "StorageCapacity";
pub const NAME_StatusSvc_StorageFreeSpace = "StorageFreeSpace";
pub const NAME_SyncSvc_SyncFormat = "SyncFormat";
pub const NAME_SyncSvc_LocalOnlyDelete = "LocalOnlyDelete";
pub const NAME_SyncSvc_FilterType = "FilterType";
pub const SYNCSVC_FILTER_NONE = @as(u32, 0);
pub const SYNCSVC_FILTER_CONTACTS_WITH_PHONE = @as(u32, 1);
pub const SYNCSVC_FILTER_TASK_ACTIVE = @as(u32, 2);
pub const SYNCSVC_FILTER_CALENDAR_WINDOW_WITH_RECURRENCE = @as(u32, 3);
pub const NAME_SyncSvc_SyncObjectReferences = "SyncObjectReferences";
pub const ENUM_SyncSvc_SyncObjectReferencesDisabled = @as(u32, 0);
pub const ENUM_SyncSvc_SyncObjectReferencesEnabled = @as(u32, 255);
pub const NAME_SyncObj_LastAuthorProxyID = "LastAuthorProxyID";
pub const NAME_SyncSvc_BeginSync = "BeginSync";
pub const NAME_SyncSvc_EndSync = "EndSync";
pub const NAME_TasksSvc = "Tasks";
pub const TYPE_TasksSvc = @as(u32, 0);
pub const NAME_TasksSvc_SyncActiveOnly = "FilterType";
pub const NAME_AbstractTask = "AbstractTask";
pub const NAME_TaskObj_ReminderDateTime = "ReminderDateTime";
pub const NAME_TaskObj_Complete = "Complete";
pub const ENUM_TaskObj_CompleteFalse = @as(u32, 0);
pub const ENUM_TaskObj_CompleteTrue = @as(u32, 255);
pub const NAME_TaskObj_BeginDate = "BeginDate";
pub const NAME_TaskObj_EndDate = "EndDate";
pub const WPD_CATEGORY_MTP_EXT_VENDOR_OPERATIONS = Guid.initString("4d545058-1a2e-4106-a357-771e0819fc56");
pub const WPD_COMMAND_MTP_EXT_GET_SUPPORTED_VENDOR_OPCODES = PROPERTYKEY { .fmtid = Guid.initString("4d545058-1a2e-4106-a357-771e0819fc56"), .pid = 11 };
pub const WPD_COMMAND_MTP_EXT_EXECUTE_COMMAND_WITHOUT_DATA_PHASE = PROPERTYKEY { .fmtid = Guid.initString("4d545058-1a2e-4106-a357-771e0819fc56"), .pid = 12 };
pub const WPD_COMMAND_MTP_EXT_EXECUTE_COMMAND_WITH_DATA_TO_READ = PROPERTYKEY { .fmtid = Guid.initString("4d545058-1a2e-4106-a357-771e0819fc56"), .pid = 13 };
pub const WPD_COMMAND_MTP_EXT_EXECUTE_COMMAND_WITH_DATA_TO_WRITE = PROPERTYKEY { .fmtid = Guid.initString("4d545058-1a2e-4106-a357-771e0819fc56"), .pid = 14 };
pub const WPD_COMMAND_MTP_EXT_READ_DATA = PROPERTYKEY { .fmtid = Guid.initString("4d545058-1a2e-4106-a357-771e0819fc56"), .pid = 15 };
pub const WPD_COMMAND_MTP_EXT_WRITE_DATA = PROPERTYKEY { .fmtid = Guid.initString("4d545058-1a2e-4106-a357-771e0819fc56"), .pid = 16 };
pub const WPD_COMMAND_MTP_EXT_END_DATA_TRANSFER = PROPERTYKEY { .fmtid = Guid.initString("4d545058-1a2e-4106-a357-771e0819fc56"), .pid = 17 };
pub const WPD_COMMAND_MTP_EXT_GET_VENDOR_EXTENSION_DESCRIPTION = PROPERTYKEY { .fmtid = Guid.initString("4d545058-1a2e-4106-a357-771e0819fc56"), .pid = 18 };
pub const WPD_PROPERTY_MTP_EXT_OPERATION_CODE = PROPERTYKEY { .fmtid = Guid.initString("4d545058-1a2e-4106-a357-771e0819fc56"), .pid = 1001 };
pub const WPD_PROPERTY_MTP_EXT_OPERATION_PARAMS = PROPERTYKEY { .fmtid = Guid.initString("4d545058-1a2e-4106-a357-771e0819fc56"), .pid = 1002 };
pub const WPD_PROPERTY_MTP_EXT_RESPONSE_CODE = PROPERTYKEY { .fmtid = Guid.initString("4d545058-1a2e-4106-a357-771e0819fc56"), .pid = 1003 };
pub const WPD_PROPERTY_MTP_EXT_RESPONSE_PARAMS = PROPERTYKEY { .fmtid = Guid.initString("4d545058-1a2e-4106-a357-771e0819fc56"), .pid = 1004 };
pub const WPD_PROPERTY_MTP_EXT_VENDOR_OPERATION_CODES = PROPERTYKEY { .fmtid = Guid.initString("4d545058-1a2e-4106-a357-771e0819fc56"), .pid = 1005 };
pub const WPD_PROPERTY_MTP_EXT_TRANSFER_CONTEXT = PROPERTYKEY { .fmtid = Guid.initString("4d545058-1a2e-4106-a357-771e0819fc56"), .pid = 1006 };
pub const WPD_PROPERTY_MTP_EXT_TRANSFER_TOTAL_DATA_SIZE = PROPERTYKEY { .fmtid = Guid.initString("4d545058-1a2e-4106-a357-771e0819fc56"), .pid = 1007 };
pub const WPD_PROPERTY_MTP_EXT_TRANSFER_NUM_BYTES_TO_READ = PROPERTYKEY { .fmtid = Guid.initString("4d545058-1a2e-4106-a357-771e0819fc56"), .pid = 1008 };
pub const WPD_PROPERTY_MTP_EXT_TRANSFER_NUM_BYTES_READ = PROPERTYKEY { .fmtid = Guid.initString("4d545058-1a2e-4106-a357-771e0819fc56"), .pid = 1009 };
pub const WPD_PROPERTY_MTP_EXT_TRANSFER_NUM_BYTES_TO_WRITE = PROPERTYKEY { .fmtid = Guid.initString("4d545058-1a2e-4106-a357-771e0819fc56"), .pid = 1010 };
pub const WPD_PROPERTY_MTP_EXT_TRANSFER_NUM_BYTES_WRITTEN = PROPERTYKEY { .fmtid = Guid.initString("4d545058-1a2e-4106-a357-771e0819fc56"), .pid = 1011 };
pub const WPD_PROPERTY_MTP_EXT_TRANSFER_DATA = PROPERTYKEY { .fmtid = Guid.initString("4d545058-1a2e-4106-a357-771e0819fc56"), .pid = 1012 };
pub const WPD_PROPERTY_MTP_EXT_OPTIMAL_TRANSFER_BUFFER_SIZE = PROPERTYKEY { .fmtid = Guid.initString("4d545058-1a2e-4106-a357-771e0819fc56"), .pid = 1013 };
pub const WPD_PROPERTY_MTP_EXT_VENDOR_EXTENSION_DESCRIPTION = PROPERTYKEY { .fmtid = Guid.initString("4d545058-1a2e-4106-a357-771e0819fc56"), .pid = 1014 };
pub const WPD_PROPERTIES_MTP_VENDOR_EXTENDED_OBJECT_PROPS = Guid.initString("4d545058-4fce-4578-95c8-8698a9bc0f49");
pub const WPD_PROPERTIES_MTP_VENDOR_EXTENDED_DEVICE_PROPS = Guid.initString("4d545058-8900-40b3-8f1d-dc246e1e8370");
pub const WPD_EVENT_MTP_VENDOR_EXTENDED_EVENTS = Guid.initString("00000000-5738-4ff2-8445-be3126691059");
pub const WPD_PROPERTY_MTP_EXT_EVENT_PARAMS = PROPERTYKEY { .fmtid = Guid.initString("4d545058-ef88-4e4d-95c3-4f327f728a96"), .pid = 1011 };
pub const CLSID_WPD_NAMESPACE_EXTENSION = Guid.initString("35786d3c-b075-49b9-88dd-029876e11c01");
pub const WPDNSE_OBJECT_PROPERTIES_V1 = Guid.initString("34d71409-4b47-4d80-aaac-3a28a4a3b3e6");
pub const WPDNSE_OBJECT_HAS_CONTACT_PHOTO = PROPERTYKEY { .fmtid = Guid.initString("34d71409-4b47-4d80-aaac-3a28a4a3b3e6"), .pid = 2 };
pub const WPDNSE_OBJECT_HAS_THUMBNAIL = PROPERTYKEY { .fmtid = Guid.initString("34d71409-4b47-4d80-aaac-3a28a4a3b3e6"), .pid = 3 };
pub const WPDNSE_OBJECT_HAS_ICON = PROPERTYKEY { .fmtid = Guid.initString("34d71409-4b47-4d80-aaac-3a28a4a3b3e6"), .pid = 4 };
pub const WPDNSE_OBJECT_HAS_AUDIO_CLIP = PROPERTYKEY { .fmtid = Guid.initString("34d71409-4b47-4d80-aaac-3a28a4a3b3e6"), .pid = 5 };
pub const WPDNSE_OBJECT_HAS_ALBUM_ART = PROPERTYKEY { .fmtid = Guid.initString("34d71409-4b47-4d80-aaac-3a28a4a3b3e6"), .pid = 6 };
pub const WPDNSE_OBJECT_OPTIMAL_READ_BLOCK_SIZE = PROPERTYKEY { .fmtid = Guid.initString("34d71409-4b47-4d80-aaac-3a28a4a3b3e6"), .pid = 7 };
pub const WPDNSE_PROPSHEET_DEVICE_GENERAL = @as(u32, 1);
pub const WPDNSE_PROPSHEET_STORAGE_GENERAL = @as(u32, 2);
pub const WPDNSE_PROPSHEET_CONTENT_GENERAL = @as(u32, 4);
pub const WPDNSE_PROPSHEET_CONTENT_REFERENCES = @as(u32, 8);
pub const WPDNSE_PROPSHEET_CONTENT_RESOURCES = @as(u32, 16);
pub const WPDNSE_PROPSHEET_CONTENT_DETAILS = @as(u32, 32);
pub const STR_WPDNSE_FAST_ENUM = "WPDNSE Fast Enum";
pub const STR_WPDNSE_SIMPLE_ITEM = "WPDNSE SimpleItem";
pub const NAME_ContactsSvc = "Contacts";
pub const TYPE_ContactsSvc = @as(u32, 0);
pub const NAME_ContactSvc_SyncWithPhoneOnly = "FilterType";
pub const NAME_AbstractContact = "AbstractContact";
pub const NAME_VCard2Contact = "VCard2Contact";
pub const NAME_VCard3Contact = "VCard3Contact";
pub const NAME_AbstractContactGroup = "AbstractContactGroup";
pub const NAME_ContactObj_GivenName = "GivenName";
pub const NAME_ContactObj_MiddleNames = "MiddleNames";
pub const NAME_ContactObj_FamilyName = "FamilyName";
pub const NAME_ContactObj_Title = "Title";
pub const NAME_ContactObj_Suffix = "Suffix";
pub const NAME_ContactObj_PhoneticGivenName = "PhoneticGivenName";
pub const NAME_ContactObj_PhoneticFamilyName = "PhoneticFamilyName";
pub const NAME_ContactObj_PersonalAddressFull = "PersonalAddressFull";
pub const NAME_ContactObj_PersonalAddressStreet = "PersonalAddressStreet";
pub const NAME_ContactObj_PersonalAddressLine2 = "PersonalAddressLine2";
pub const NAME_ContactObj_PersonalAddressCity = "PersonalAddressCity";
pub const NAME_ContactObj_PersonalAddressRegion = "PersonalAddressRegion";
pub const NAME_ContactObj_PersonalAddressPostalCode = "PersonalAddressPostalCode";
pub const NAME_ContactObj_PersonalAddressCountry = "PersonalAddressCountry";
pub const NAME_ContactObj_BusinessAddressFull = "BusinessAddressFull";
pub const NAME_ContactObj_BusinessAddressStreet = "BusinessAddressStreet";
pub const NAME_ContactObj_BusinessAddressLine2 = "BusinessAddressLine2";
pub const NAME_ContactObj_BusinessAddressCity = "BusinessAddressCity";
pub const NAME_ContactObj_BusinessAddressRegion = "BusinessAddressRegion";
pub const NAME_ContactObj_BusinessAddressPostalCode = "BusinessAddressPostalCode";
pub const NAME_ContactObj_BusinessAddressCountry = "BusinessAddressCountry";
pub const NAME_ContactObj_OtherAddressFull = "OtherAddressFull";
pub const NAME_ContactObj_OtherAddressStreet = "OtherAddressStreet";
pub const NAME_ContactObj_OtherAddressLine2 = "OtherAddressLine2";
pub const NAME_ContactObj_OtherAddressCity = "OtherAddressCity";
pub const NAME_ContactObj_OtherAddressRegion = "OtherAddressRegion";
pub const NAME_ContactObj_OtherAddressPostalCode = "OtherAddressPostalCode";
pub const NAME_ContactObj_OtherAddressCountry = "OtherAddressCountry";
pub const NAME_ContactObj_Email = "Email";
pub const NAME_ContactObj_PersonalEmail = "PersonalEmail";
pub const NAME_ContactObj_PersonalEmail2 = "PersonalEmail2";
pub const NAME_ContactObj_BusinessEmail = "BusinessEmail";
pub const NAME_ContactObj_BusinessEmail2 = "BusinessEmail2";
pub const NAME_ContactObj_OtherEmail = "OtherEmail";
pub const NAME_ContactObj_Phone = "Phone";
pub const NAME_ContactObj_PersonalPhone = "PersonalPhone";
pub const NAME_ContactObj_PersonalPhone2 = "PersonalPhone2";
pub const NAME_ContactObj_BusinessPhone = "BusinessPhone";
pub const NAME_ContactObj_BusinessPhone2 = "BusinessPhone2";
pub const NAME_ContactObj_MobilePhone = "MobilePhone";
pub const NAME_ContactObj_MobilePhone2 = "MobilePhone2";
pub const NAME_ContactObj_PersonalFax = "PersonalFax";
pub const NAME_ContactObj_BusinessFax = "BusinessFax";
pub const NAME_ContactObj_Pager = "Pager";
pub const NAME_ContactObj_OtherPhone = "OtherPhone";
pub const NAME_ContactObj_WebAddress = "WebAddress";
pub const NAME_ContactObj_PersonalWebAddress = "PersonalWebAddress";
pub const NAME_ContactObj_BusinessWebAddress = "BusinessWebAddress";
pub const NAME_ContactObj_IMAddress = "IMAddress";
pub const NAME_ContactObj_IMAddress2 = "IMAddress2";
pub const NAME_ContactObj_IMAddress3 = "IMAddress3";
pub const NAME_ContactObj_Organization = "Organization";
pub const NAME_ContactObj_PhoneticOrganization = "PhoneticOrganization";
pub const NAME_ContactObj_Role = "Role";
pub const NAME_ContactObj_Fax = "Fax";
pub const NAME_ContactObj_Spouse = "Spouse";
pub const NAME_ContactObj_Children = "Children";
pub const NAME_ContactObj_Assistant = "Assistant";
pub const NAME_ContactObj_Ringtone = "Ringtone";
pub const NAME_ContactObj_Birthdate = "Birthdate";
pub const NAME_ContactObj_AnniversaryDate = "AnniversaryDate";
pub const NAME_RingtonesSvc = "Ringtones";
pub const TYPE_RingtonesSvc = @as(u32, 0);
pub const NAME_RingtonesSvc_DefaultRingtone = "DefaultRingtone";
pub const NAME_AnchorSyncSvc = "AnchorSync";
pub const TYPE_AnchorSyncSvc = @as(u32, 1);
pub const NAME_AnchorSyncSvc_VersionProps = "AnchorVersionProps";
pub const NAME_AnchorSyncSvc_ReplicaID = "AnchorReplicaID";
pub const NAME_AnchorSyncSvc_KnowledgeObjectID = "AnchorKnowledgeObjectID";
pub const NAME_AnchorSyncSvc_LastSyncProxyID = "AnchorLastSyncProxyID";
pub const NAME_AnchorSyncSvc_CurrentAnchor = "AnchorCurrentAnchor";
pub const NAME_AnchorSyncSvc_ProviderVersion = "AnchorProviderVersion";
pub const NAME_AnchorSyncSvc_SyncFormat = "SyncFormat";
pub const NAME_AnchorSyncSvc_LocalOnlyDelete = "LocalOnlyDelete";
pub const NAME_AnchorSyncSvc_FilterType = "FilterType";
pub const NAME_AnchorSyncKnowledge = "AnchorSyncKnowledge";
pub const NAME_AnchorResults = "AnchorResults";
pub const NAME_AnchorResults_AnchorState = "AnchorState";
pub const ENUM_AnchorResults_AnchorStateNormal = @as(u32, 0);
pub const ENUM_AnchorResults_AnchorStateInvalid = @as(u32, 1);
pub const ENUM_AnchorResults_AnchorStateOld = @as(u32, 2);
pub const NAME_AnchorResults_Anchor = "Anchor";
pub const NAME_AnchorResults_ResultObjectID = "ResultObjectID";
pub const NAME_AnchorSyncSvc_GetChangesSinceAnchor = "GetChangesSinceAnchor";
pub const NAME_AnchorSyncSvc_BeginSync = "BeginSync";
pub const NAME_AnchorSyncSvc_EndSync = "EndSync";
pub const ENUM_AnchorResults_ItemStateInvalid = @as(u32, 0);
pub const ENUM_AnchorResults_ItemStateDeleted = @as(u32, 1);
pub const ENUM_AnchorResults_ItemStateCreated = @as(u32, 2);
pub const ENUM_AnchorResults_ItemStateUpdated = @as(u32, 3);
pub const ENUM_AnchorResults_ItemStateChanged = @as(u32, 4);
pub const NAME_FullEnumSyncSvc = "FullEnumSync";
pub const TYPE_FullEnumSyncSvc = @as(u32, 1);
pub const NAME_FullEnumSyncSvc_VersionProps = "FullEnumVersionProps";
pub const NAME_FullEnumSyncSvc_ReplicaID = "FullEnumReplicaID";
pub const NAME_FullEnumSyncSvc_KnowledgeObjectID = "FullEnumKnowledgeObjectID";
pub const NAME_FullEnumSyncSvc_LastSyncProxyID = "FullEnumLastSyncProxyID";
pub const NAME_FullEnumSyncSvc_ProviderVersion = "FullEnumProviderVersion";
pub const NAME_FullEnumSyncSvc_SyncFormat = "SyncFormat";
pub const NAME_FullEnumSyncSvc_LocalOnlyDelete = "LocalOnlyDelete";
pub const NAME_FullEnumSyncSvc_FilterType = "FilterType";
pub const NAME_FullEnumSyncKnowledge = "FullEnumSyncKnowledge";
pub const NAME_FullEnumSyncSvc_BeginSync = "BeginSync";
pub const NAME_FullEnumSyncSvc_EndSync = "EndSync";

//--------------------------------------------------------------------------------
// Section: Types (80)
//--------------------------------------------------------------------------------
pub const DELETE_OBJECT_OPTIONS = enum(i32) {
    NO_RECURSION = 0,
    WITH_RECURSION = 1,
};
pub const PORTABLE_DEVICE_DELETE_NO_RECURSION = DELETE_OBJECT_OPTIONS.NO_RECURSION;
pub const PORTABLE_DEVICE_DELETE_WITH_RECURSION = DELETE_OBJECT_OPTIONS.WITH_RECURSION;

pub const WPD_DEVICE_TYPES = enum(i32) {
    GENERIC = 0,
    CAMERA = 1,
    MEDIA_PLAYER = 2,
    PHONE = 3,
    VIDEO = 4,
    PERSONAL_INFORMATION_MANAGER = 5,
    AUDIO_RECORDER = 6,
};
pub const WPD_DEVICE_TYPE_GENERIC = WPD_DEVICE_TYPES.GENERIC;
pub const WPD_DEVICE_TYPE_CAMERA = WPD_DEVICE_TYPES.CAMERA;
pub const WPD_DEVICE_TYPE_MEDIA_PLAYER = WPD_DEVICE_TYPES.MEDIA_PLAYER;
pub const WPD_DEVICE_TYPE_PHONE = WPD_DEVICE_TYPES.PHONE;
pub const WPD_DEVICE_TYPE_VIDEO = WPD_DEVICE_TYPES.VIDEO;
pub const WPD_DEVICE_TYPE_PERSONAL_INFORMATION_MANAGER = WPD_DEVICE_TYPES.PERSONAL_INFORMATION_MANAGER;
pub const WPD_DEVICE_TYPE_AUDIO_RECORDER = WPD_DEVICE_TYPES.AUDIO_RECORDER;

pub const WpdAttributeForm = enum(i32) {
    UNSPECIFIED = 0,
    RANGE = 1,
    ENUMERATION = 2,
    REGULAR_EXPRESSION = 3,
    OBJECT_IDENTIFIER = 4,
};
pub const WPD_PROPERTY_ATTRIBUTE_FORM_UNSPECIFIED = WpdAttributeForm.UNSPECIFIED;
pub const WPD_PROPERTY_ATTRIBUTE_FORM_RANGE = WpdAttributeForm.RANGE;
pub const WPD_PROPERTY_ATTRIBUTE_FORM_ENUMERATION = WpdAttributeForm.ENUMERATION;
pub const WPD_PROPERTY_ATTRIBUTE_FORM_REGULAR_EXPRESSION = WpdAttributeForm.REGULAR_EXPRESSION;
pub const WPD_PROPERTY_ATTRIBUTE_FORM_OBJECT_IDENTIFIER = WpdAttributeForm.OBJECT_IDENTIFIER;

pub const WpdParameterAttributeForm = enum(i32) {
    UNSPECIFIED = 0,
    RANGE = 1,
    ENUMERATION = 2,
    REGULAR_EXPRESSION = 3,
    OBJECT_IDENTIFIER = 4,
};
pub const WPD_PARAMETER_ATTRIBUTE_FORM_UNSPECIFIED = WpdParameterAttributeForm.UNSPECIFIED;
pub const WPD_PARAMETER_ATTRIBUTE_FORM_RANGE = WpdParameterAttributeForm.RANGE;
pub const WPD_PARAMETER_ATTRIBUTE_FORM_ENUMERATION = WpdParameterAttributeForm.ENUMERATION;
pub const WPD_PARAMETER_ATTRIBUTE_FORM_REGULAR_EXPRESSION = WpdParameterAttributeForm.REGULAR_EXPRESSION;
pub const WPD_PARAMETER_ATTRIBUTE_FORM_OBJECT_IDENTIFIER = WpdParameterAttributeForm.OBJECT_IDENTIFIER;

pub const WPD_DEVICE_TRANSPORTS = enum(i32) {
    UNSPECIFIED = 0,
    USB = 1,
    IP = 2,
    BLUETOOTH = 3,
};
pub const WPD_DEVICE_TRANSPORT_UNSPECIFIED = WPD_DEVICE_TRANSPORTS.UNSPECIFIED;
pub const WPD_DEVICE_TRANSPORT_USB = WPD_DEVICE_TRANSPORTS.USB;
pub const WPD_DEVICE_TRANSPORT_IP = WPD_DEVICE_TRANSPORTS.IP;
pub const WPD_DEVICE_TRANSPORT_BLUETOOTH = WPD_DEVICE_TRANSPORTS.BLUETOOTH;

pub const WPD_STORAGE_TYPE_VALUES = enum(i32) {
    UNDEFINED = 0,
    FIXED_ROM = 1,
    REMOVABLE_ROM = 2,
    FIXED_RAM = 3,
    REMOVABLE_RAM = 4,
};
pub const WPD_STORAGE_TYPE_UNDEFINED = WPD_STORAGE_TYPE_VALUES.UNDEFINED;
pub const WPD_STORAGE_TYPE_FIXED_ROM = WPD_STORAGE_TYPE_VALUES.FIXED_ROM;
pub const WPD_STORAGE_TYPE_REMOVABLE_ROM = WPD_STORAGE_TYPE_VALUES.REMOVABLE_ROM;
pub const WPD_STORAGE_TYPE_FIXED_RAM = WPD_STORAGE_TYPE_VALUES.FIXED_RAM;
pub const WPD_STORAGE_TYPE_REMOVABLE_RAM = WPD_STORAGE_TYPE_VALUES.REMOVABLE_RAM;

pub const WPD_STORAGE_ACCESS_CAPABILITY_VALUES = enum(i32) {
    WRITE = 0,
    _ONLY_WITHOUT_OBJECT_DELETION = 1,
    _ONLY_WITH_OBJECT_DELETION = 2,
};
pub const WPD_STORAGE_ACCESS_CAPABILITY_READWRITE = WPD_STORAGE_ACCESS_CAPABILITY_VALUES.WRITE;
pub const WPD_STORAGE_ACCESS_CAPABILITY_READ_ONLY_WITHOUT_OBJECT_DELETION = WPD_STORAGE_ACCESS_CAPABILITY_VALUES._ONLY_WITHOUT_OBJECT_DELETION;
pub const WPD_STORAGE_ACCESS_CAPABILITY_READ_ONLY_WITH_OBJECT_DELETION = WPD_STORAGE_ACCESS_CAPABILITY_VALUES._ONLY_WITH_OBJECT_DELETION;

pub const WPD_SMS_ENCODING_TYPES = enum(i32) {
    @"7_BIT" = 0,
    @"8_BIT" = 1,
    UTF_16 = 2,
};
pub const SMS_ENCODING_7_BIT = WPD_SMS_ENCODING_TYPES.@"7_BIT";
pub const SMS_ENCODING_8_BIT = WPD_SMS_ENCODING_TYPES.@"8_BIT";
pub const SMS_ENCODING_UTF_16 = WPD_SMS_ENCODING_TYPES.UTF_16;

pub const SMS_MESSAGE_TYPES = enum(i32) {
    TEXT_MESSAGE = 0,
    BINARY_MESSAGE = 1,
};
pub const SMS_TEXT_MESSAGE = SMS_MESSAGE_TYPES.TEXT_MESSAGE;
pub const SMS_BINARY_MESSAGE = SMS_MESSAGE_TYPES.BINARY_MESSAGE;

pub const WPD_POWER_SOURCES = enum(i32) {
    BATTERY = 0,
    EXTERNAL = 1,
};
pub const WPD_POWER_SOURCE_BATTERY = WPD_POWER_SOURCES.BATTERY;
pub const WPD_POWER_SOURCE_EXTERNAL = WPD_POWER_SOURCES.EXTERNAL;

pub const WPD_WHITE_BALANCE_SETTINGS = enum(i32) {
    UNDEFINED = 0,
    MANUAL = 1,
    AUTOMATIC = 2,
    ONE_PUSH_AUTOMATIC = 3,
    DAYLIGHT = 4,
    FLORESCENT = 5,
    TUNGSTEN = 6,
    FLASH = 7,
};
pub const WPD_WHITE_BALANCE_UNDEFINED = WPD_WHITE_BALANCE_SETTINGS.UNDEFINED;
pub const WPD_WHITE_BALANCE_MANUAL = WPD_WHITE_BALANCE_SETTINGS.MANUAL;
pub const WPD_WHITE_BALANCE_AUTOMATIC = WPD_WHITE_BALANCE_SETTINGS.AUTOMATIC;
pub const WPD_WHITE_BALANCE_ONE_PUSH_AUTOMATIC = WPD_WHITE_BALANCE_SETTINGS.ONE_PUSH_AUTOMATIC;
pub const WPD_WHITE_BALANCE_DAYLIGHT = WPD_WHITE_BALANCE_SETTINGS.DAYLIGHT;
pub const WPD_WHITE_BALANCE_FLORESCENT = WPD_WHITE_BALANCE_SETTINGS.FLORESCENT;
pub const WPD_WHITE_BALANCE_TUNGSTEN = WPD_WHITE_BALANCE_SETTINGS.TUNGSTEN;
pub const WPD_WHITE_BALANCE_FLASH = WPD_WHITE_BALANCE_SETTINGS.FLASH;

pub const WPD_FOCUS_MODES = enum(i32) {
    UNDEFINED = 0,
    MANUAL = 1,
    AUTOMATIC = 2,
    AUTOMATIC_MACRO = 3,
};
pub const WPD_FOCUS_UNDEFINED = WPD_FOCUS_MODES.UNDEFINED;
pub const WPD_FOCUS_MANUAL = WPD_FOCUS_MODES.MANUAL;
pub const WPD_FOCUS_AUTOMATIC = WPD_FOCUS_MODES.AUTOMATIC;
pub const WPD_FOCUS_AUTOMATIC_MACRO = WPD_FOCUS_MODES.AUTOMATIC_MACRO;

pub const WPD_EXPOSURE_METERING_MODES = enum(i32) {
    UNDEFINED = 0,
    AVERAGE = 1,
    CENTER_WEIGHTED_AVERAGE = 2,
    MULTI_SPOT = 3,
    CENTER_SPOT = 4,
};
pub const WPD_EXPOSURE_METERING_MODE_UNDEFINED = WPD_EXPOSURE_METERING_MODES.UNDEFINED;
pub const WPD_EXPOSURE_METERING_MODE_AVERAGE = WPD_EXPOSURE_METERING_MODES.AVERAGE;
pub const WPD_EXPOSURE_METERING_MODE_CENTER_WEIGHTED_AVERAGE = WPD_EXPOSURE_METERING_MODES.CENTER_WEIGHTED_AVERAGE;
pub const WPD_EXPOSURE_METERING_MODE_MULTI_SPOT = WPD_EXPOSURE_METERING_MODES.MULTI_SPOT;
pub const WPD_EXPOSURE_METERING_MODE_CENTER_SPOT = WPD_EXPOSURE_METERING_MODES.CENTER_SPOT;

pub const WPD_FLASH_MODES = enum(i32) {
    UNDEFINED = 0,
    AUTO = 1,
    OFF = 2,
    FILL = 3,
    RED_EYE_AUTO = 4,
    RED_EYE_FILL = 5,
    EXTERNAL_SYNC = 6,
};
pub const WPD_FLASH_MODE_UNDEFINED = WPD_FLASH_MODES.UNDEFINED;
pub const WPD_FLASH_MODE_AUTO = WPD_FLASH_MODES.AUTO;
pub const WPD_FLASH_MODE_OFF = WPD_FLASH_MODES.OFF;
pub const WPD_FLASH_MODE_FILL = WPD_FLASH_MODES.FILL;
pub const WPD_FLASH_MODE_RED_EYE_AUTO = WPD_FLASH_MODES.RED_EYE_AUTO;
pub const WPD_FLASH_MODE_RED_EYE_FILL = WPD_FLASH_MODES.RED_EYE_FILL;
pub const WPD_FLASH_MODE_EXTERNAL_SYNC = WPD_FLASH_MODES.EXTERNAL_SYNC;

pub const WPD_EXPOSURE_PROGRAM_MODES = enum(i32) {
    UNDEFINED = 0,
    MANUAL = 1,
    AUTO = 2,
    APERTURE_PRIORITY = 3,
    SHUTTER_PRIORITY = 4,
    CREATIVE = 5,
    ACTION = 6,
    PORTRAIT = 7,
};
pub const WPD_EXPOSURE_PROGRAM_MODE_UNDEFINED = WPD_EXPOSURE_PROGRAM_MODES.UNDEFINED;
pub const WPD_EXPOSURE_PROGRAM_MODE_MANUAL = WPD_EXPOSURE_PROGRAM_MODES.MANUAL;
pub const WPD_EXPOSURE_PROGRAM_MODE_AUTO = WPD_EXPOSURE_PROGRAM_MODES.AUTO;
pub const WPD_EXPOSURE_PROGRAM_MODE_APERTURE_PRIORITY = WPD_EXPOSURE_PROGRAM_MODES.APERTURE_PRIORITY;
pub const WPD_EXPOSURE_PROGRAM_MODE_SHUTTER_PRIORITY = WPD_EXPOSURE_PROGRAM_MODES.SHUTTER_PRIORITY;
pub const WPD_EXPOSURE_PROGRAM_MODE_CREATIVE = WPD_EXPOSURE_PROGRAM_MODES.CREATIVE;
pub const WPD_EXPOSURE_PROGRAM_MODE_ACTION = WPD_EXPOSURE_PROGRAM_MODES.ACTION;
pub const WPD_EXPOSURE_PROGRAM_MODE_PORTRAIT = WPD_EXPOSURE_PROGRAM_MODES.PORTRAIT;

pub const WPD_CAPTURE_MODES = enum(i32) {
    UNDEFINED = 0,
    NORMAL = 1,
    BURST = 2,
    TIMELAPSE = 3,
};
pub const WPD_CAPTURE_MODE_UNDEFINED = WPD_CAPTURE_MODES.UNDEFINED;
pub const WPD_CAPTURE_MODE_NORMAL = WPD_CAPTURE_MODES.NORMAL;
pub const WPD_CAPTURE_MODE_BURST = WPD_CAPTURE_MODES.BURST;
pub const WPD_CAPTURE_MODE_TIMELAPSE = WPD_CAPTURE_MODES.TIMELAPSE;

pub const WPD_EFFECT_MODES = enum(i32) {
    UNDEFINED = 0,
    COLOR = 1,
    BLACK_AND_WHITE = 2,
    SEPIA = 3,
};
pub const WPD_EFFECT_MODE_UNDEFINED = WPD_EFFECT_MODES.UNDEFINED;
pub const WPD_EFFECT_MODE_COLOR = WPD_EFFECT_MODES.COLOR;
pub const WPD_EFFECT_MODE_BLACK_AND_WHITE = WPD_EFFECT_MODES.BLACK_AND_WHITE;
pub const WPD_EFFECT_MODE_SEPIA = WPD_EFFECT_MODES.SEPIA;

pub const WPD_FOCUS_METERING_MODES = enum(i32) {
    UNDEFINED = 0,
    CENTER_SPOT = 1,
    MULTI_SPOT = 2,
};
pub const WPD_FOCUS_METERING_MODE_UNDEFINED = WPD_FOCUS_METERING_MODES.UNDEFINED;
pub const WPD_FOCUS_METERING_MODE_CENTER_SPOT = WPD_FOCUS_METERING_MODES.CENTER_SPOT;
pub const WPD_FOCUS_METERING_MODE_MULTI_SPOT = WPD_FOCUS_METERING_MODES.MULTI_SPOT;

pub const WPD_BITRATE_TYPES = enum(i32) {
    UNUSED = 0,
    DISCRETE = 1,
    VARIABLE = 2,
    FREE = 3,
};
pub const WPD_BITRATE_TYPE_UNUSED = WPD_BITRATE_TYPES.UNUSED;
pub const WPD_BITRATE_TYPE_DISCRETE = WPD_BITRATE_TYPES.DISCRETE;
pub const WPD_BITRATE_TYPE_VARIABLE = WPD_BITRATE_TYPES.VARIABLE;
pub const WPD_BITRATE_TYPE_FREE = WPD_BITRATE_TYPES.FREE;

pub const WPD_META_GENRES = enum(i32) {
    UNUSED = 0,
    GENERIC_MUSIC_AUDIO_FILE = 1,
    GENERIC_NON_MUSIC_AUDIO_FILE = 17,
    SPOKEN_WORD_AUDIO_BOOK_FILES = 18,
    SPOKEN_WORD_FILES_NON_AUDIO_BOOK = 19,
    SPOKEN_WORD_NEWS = 20,
    SPOKEN_WORD_TALK_SHOWS = 21,
    GENERIC_VIDEO_FILE = 33,
    NEWS_VIDEO_FILE = 34,
    MUSIC_VIDEO_FILE = 35,
    HOME_VIDEO_FILE = 36,
    FEATURE_FILM_VIDEO_FILE = 37,
    TELEVISION_VIDEO_FILE = 38,
    TRAINING_EDUCATIONAL_VIDEO_FILE = 39,
    PHOTO_MONTAGE_VIDEO_FILE = 40,
    GENERIC_NON_AUDIO_NON_VIDEO = 48,
    AUDIO_PODCAST = 64,
    VIDEO_PODCAST = 65,
    MIXED_PODCAST = 66,
};
pub const WPD_META_GENRE_UNUSED = WPD_META_GENRES.UNUSED;
pub const WPD_META_GENRE_GENERIC_MUSIC_AUDIO_FILE = WPD_META_GENRES.GENERIC_MUSIC_AUDIO_FILE;
pub const WPD_META_GENRE_GENERIC_NON_MUSIC_AUDIO_FILE = WPD_META_GENRES.GENERIC_NON_MUSIC_AUDIO_FILE;
pub const WPD_META_GENRE_SPOKEN_WORD_AUDIO_BOOK_FILES = WPD_META_GENRES.SPOKEN_WORD_AUDIO_BOOK_FILES;
pub const WPD_META_GENRE_SPOKEN_WORD_FILES_NON_AUDIO_BOOK = WPD_META_GENRES.SPOKEN_WORD_FILES_NON_AUDIO_BOOK;
pub const WPD_META_GENRE_SPOKEN_WORD_NEWS = WPD_META_GENRES.SPOKEN_WORD_NEWS;
pub const WPD_META_GENRE_SPOKEN_WORD_TALK_SHOWS = WPD_META_GENRES.SPOKEN_WORD_TALK_SHOWS;
pub const WPD_META_GENRE_GENERIC_VIDEO_FILE = WPD_META_GENRES.GENERIC_VIDEO_FILE;
pub const WPD_META_GENRE_NEWS_VIDEO_FILE = WPD_META_GENRES.NEWS_VIDEO_FILE;
pub const WPD_META_GENRE_MUSIC_VIDEO_FILE = WPD_META_GENRES.MUSIC_VIDEO_FILE;
pub const WPD_META_GENRE_HOME_VIDEO_FILE = WPD_META_GENRES.HOME_VIDEO_FILE;
pub const WPD_META_GENRE_FEATURE_FILM_VIDEO_FILE = WPD_META_GENRES.FEATURE_FILM_VIDEO_FILE;
pub const WPD_META_GENRE_TELEVISION_VIDEO_FILE = WPD_META_GENRES.TELEVISION_VIDEO_FILE;
pub const WPD_META_GENRE_TRAINING_EDUCATIONAL_VIDEO_FILE = WPD_META_GENRES.TRAINING_EDUCATIONAL_VIDEO_FILE;
pub const WPD_META_GENRE_PHOTO_MONTAGE_VIDEO_FILE = WPD_META_GENRES.PHOTO_MONTAGE_VIDEO_FILE;
pub const WPD_META_GENRE_GENERIC_NON_AUDIO_NON_VIDEO = WPD_META_GENRES.GENERIC_NON_AUDIO_NON_VIDEO;
pub const WPD_META_GENRE_AUDIO_PODCAST = WPD_META_GENRES.AUDIO_PODCAST;
pub const WPD_META_GENRE_VIDEO_PODCAST = WPD_META_GENRES.VIDEO_PODCAST;
pub const WPD_META_GENRE_MIXED_PODCAST = WPD_META_GENRES.MIXED_PODCAST;

pub const WPD_CROPPED_STATUS_VALUES = enum(i32) {
    NOT_CROPPED = 0,
    CROPPED = 1,
    SHOULD_NOT_BE_CROPPED = 2,
};
pub const WPD_CROPPED_STATUS_NOT_CROPPED = WPD_CROPPED_STATUS_VALUES.NOT_CROPPED;
pub const WPD_CROPPED_STATUS_CROPPED = WPD_CROPPED_STATUS_VALUES.CROPPED;
pub const WPD_CROPPED_STATUS_SHOULD_NOT_BE_CROPPED = WPD_CROPPED_STATUS_VALUES.SHOULD_NOT_BE_CROPPED;

pub const WPD_COLOR_CORRECTED_STATUS_VALUES = enum(i32) {
    NOT_CORRECTED = 0,
    CORRECTED = 1,
    SHOULD_NOT_BE_CORRECTED = 2,
};
pub const WPD_COLOR_CORRECTED_STATUS_NOT_CORRECTED = WPD_COLOR_CORRECTED_STATUS_VALUES.NOT_CORRECTED;
pub const WPD_COLOR_CORRECTED_STATUS_CORRECTED = WPD_COLOR_CORRECTED_STATUS_VALUES.CORRECTED;
pub const WPD_COLOR_CORRECTED_STATUS_SHOULD_NOT_BE_CORRECTED = WPD_COLOR_CORRECTED_STATUS_VALUES.SHOULD_NOT_BE_CORRECTED;

pub const WPD_VIDEO_SCAN_TYPES = enum(i32) {
    UNUSED = 0,
    PROGRESSIVE = 1,
    FIELD_INTERLEAVED_UPPER_FIRST = 2,
    FIELD_INTERLEAVED_LOWER_FIRST = 3,
    FIELD_SINGLE_UPPER_FIRST = 4,
    FIELD_SINGLE_LOWER_FIRST = 5,
    MIXED_INTERLACE = 6,
    MIXED_INTERLACE_AND_PROGRESSIVE = 7,
};
pub const WPD_VIDEO_SCAN_TYPE_UNUSED = WPD_VIDEO_SCAN_TYPES.UNUSED;
pub const WPD_VIDEO_SCAN_TYPE_PROGRESSIVE = WPD_VIDEO_SCAN_TYPES.PROGRESSIVE;
pub const WPD_VIDEO_SCAN_TYPE_FIELD_INTERLEAVED_UPPER_FIRST = WPD_VIDEO_SCAN_TYPES.FIELD_INTERLEAVED_UPPER_FIRST;
pub const WPD_VIDEO_SCAN_TYPE_FIELD_INTERLEAVED_LOWER_FIRST = WPD_VIDEO_SCAN_TYPES.FIELD_INTERLEAVED_LOWER_FIRST;
pub const WPD_VIDEO_SCAN_TYPE_FIELD_SINGLE_UPPER_FIRST = WPD_VIDEO_SCAN_TYPES.FIELD_SINGLE_UPPER_FIRST;
pub const WPD_VIDEO_SCAN_TYPE_FIELD_SINGLE_LOWER_FIRST = WPD_VIDEO_SCAN_TYPES.FIELD_SINGLE_LOWER_FIRST;
pub const WPD_VIDEO_SCAN_TYPE_MIXED_INTERLACE = WPD_VIDEO_SCAN_TYPES.MIXED_INTERLACE;
pub const WPD_VIDEO_SCAN_TYPE_MIXED_INTERLACE_AND_PROGRESSIVE = WPD_VIDEO_SCAN_TYPES.MIXED_INTERLACE_AND_PROGRESSIVE;

pub const WPD_OPERATION_STATES = enum(i32) {
    UNSPECIFIED = 0,
    STARTED = 1,
    RUNNING = 2,
    PAUSED = 3,
    CANCELLED = 4,
    FINISHED = 5,
    ABORTED = 6,
};
pub const WPD_OPERATION_STATE_UNSPECIFIED = WPD_OPERATION_STATES.UNSPECIFIED;
pub const WPD_OPERATION_STATE_STARTED = WPD_OPERATION_STATES.STARTED;
pub const WPD_OPERATION_STATE_RUNNING = WPD_OPERATION_STATES.RUNNING;
pub const WPD_OPERATION_STATE_PAUSED = WPD_OPERATION_STATES.PAUSED;
pub const WPD_OPERATION_STATE_CANCELLED = WPD_OPERATION_STATES.CANCELLED;
pub const WPD_OPERATION_STATE_FINISHED = WPD_OPERATION_STATES.FINISHED;
pub const WPD_OPERATION_STATE_ABORTED = WPD_OPERATION_STATES.ABORTED;

pub const WPD_SECTION_DATA_UNITS_VALUES = enum(i32) {
    BYTES = 0,
    MILLISECONDS = 1,
};
pub const WPD_SECTION_DATA_UNITS_BYTES = WPD_SECTION_DATA_UNITS_VALUES.BYTES;
pub const WPD_SECTION_DATA_UNITS_MILLISECONDS = WPD_SECTION_DATA_UNITS_VALUES.MILLISECONDS;

pub const WPD_RENDERING_INFORMATION_PROFILE_ENTRY_TYPES = enum(i32) {
    OBJECT = 0,
    RESOURCE = 1,
};
pub const WPD_RENDERING_INFORMATION_PROFILE_ENTRY_TYPE_OBJECT = WPD_RENDERING_INFORMATION_PROFILE_ENTRY_TYPES.OBJECT;
pub const WPD_RENDERING_INFORMATION_PROFILE_ENTRY_TYPE_RESOURCE = WPD_RENDERING_INFORMATION_PROFILE_ENTRY_TYPES.RESOURCE;

pub const WPD_COMMAND_ACCESS_TYPES = enum(i32) {
    READ = 1,
    READWRITE = 3,
    FROM_PROPERTY_WITH_STGM_ACCESS = 4,
    FROM_PROPERTY_WITH_FILE_ACCESS = 8,
    FROM_ATTRIBUTE_WITH_METHOD_ACCESS = 16,
};
pub const WPD_COMMAND_ACCESS_READ = WPD_COMMAND_ACCESS_TYPES.READ;
pub const WPD_COMMAND_ACCESS_READWRITE = WPD_COMMAND_ACCESS_TYPES.READWRITE;
pub const WPD_COMMAND_ACCESS_FROM_PROPERTY_WITH_STGM_ACCESS = WPD_COMMAND_ACCESS_TYPES.FROM_PROPERTY_WITH_STGM_ACCESS;
pub const WPD_COMMAND_ACCESS_FROM_PROPERTY_WITH_FILE_ACCESS = WPD_COMMAND_ACCESS_TYPES.FROM_PROPERTY_WITH_FILE_ACCESS;
pub const WPD_COMMAND_ACCESS_FROM_ATTRIBUTE_WITH_METHOD_ACCESS = WPD_COMMAND_ACCESS_TYPES.FROM_ATTRIBUTE_WITH_METHOD_ACCESS;

pub const WPD_SERVICE_INHERITANCE_TYPES = enum(i32) {
    N = 0,
};
pub const WPD_SERVICE_INHERITANCE_IMPLEMENTATION = WPD_SERVICE_INHERITANCE_TYPES.N;

pub const WPD_PARAMETER_USAGE_TYPES = enum(i32) {
    RETURN = 0,
    IN = 1,
    OUT = 2,
    INOUT = 3,
};
pub const WPD_PARAMETER_USAGE_RETURN = WPD_PARAMETER_USAGE_TYPES.RETURN;
pub const WPD_PARAMETER_USAGE_IN = WPD_PARAMETER_USAGE_TYPES.IN;
pub const WPD_PARAMETER_USAGE_OUT = WPD_PARAMETER_USAGE_TYPES.OUT;
pub const WPD_PARAMETER_USAGE_INOUT = WPD_PARAMETER_USAGE_TYPES.INOUT;

pub const WPD_COMMAND_ACCESS_LOOKUP_ENTRY = extern struct {
    Command: PROPERTYKEY,
    AccessType: u32,
    AccessProperty: PROPERTYKEY,
};

const CLSID_WpdSerializer_Value = Guid.initString("0b91a74b-ad7c-4a9d-b563-29eef9167172");
pub const CLSID_WpdSerializer = &CLSID_WpdSerializer_Value;

const CLSID_PortableDeviceValues_Value = Guid.initString("0c15d503-d017-47ce-9016-7b3f978721cc");
pub const CLSID_PortableDeviceValues = &CLSID_PortableDeviceValues_Value;

const CLSID_PortableDeviceKeyCollection_Value = Guid.initString("de2d022d-2480-43be-97f0-d1fa2cf98f4f");
pub const CLSID_PortableDeviceKeyCollection = &CLSID_PortableDeviceKeyCollection_Value;

const CLSID_PortableDevicePropVariantCollection_Value = Guid.initString("08a99e2f-6d6d-4b80-af5a-baf2bcbe4cb9");
pub const CLSID_PortableDevicePropVariantCollection = &CLSID_PortableDevicePropVariantCollection_Value;

const CLSID_PortableDeviceValuesCollection_Value = Guid.initString("3882134d-14cf-4220-9cb4-435f86d83f60");
pub const CLSID_PortableDeviceValuesCollection = &CLSID_PortableDeviceValuesCollection_Value;

pub const WPD_STREAM_UNITS = enum(i32) {
    BYTES = 0,
    FRAMES = 1,
    ROWS = 2,
    MILLISECONDS = 4,
    MICROSECONDS = 8,
};
pub const WPD_STREAM_UNITS_BYTES = WPD_STREAM_UNITS.BYTES;
pub const WPD_STREAM_UNITS_FRAMES = WPD_STREAM_UNITS.FRAMES;
pub const WPD_STREAM_UNITS_ROWS = WPD_STREAM_UNITS.ROWS;
pub const WPD_STREAM_UNITS_MILLISECONDS = WPD_STREAM_UNITS.MILLISECONDS;
pub const WPD_STREAM_UNITS_MICROSECONDS = WPD_STREAM_UNITS.MICROSECONDS;

const IID_IWpdSerializer_Value = Guid.initString("b32f4002-bb27-45ff-af4f-06631c1e8dad");
pub const IID_IWpdSerializer = &IID_IWpdSerializer_Value;
pub const IWpdSerializer = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIPortableDeviceValuesFromBuffer: *const fn(
            self: *const IWpdSerializer,
            pBuffer: [*:0]u8,
            dwInputBufferLength: u32,
            ppParams: ?*?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteIPortableDeviceValuesToBuffer: *const fn(
            self: *const IWpdSerializer,
            dwOutputBufferLength: u32,
            pResults: ?*IPortableDeviceValues,
            pBuffer: [*:0]u8,
            pdwBytesWritten: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBufferFromIPortableDeviceValues: *const fn(
            self: *const IWpdSerializer,
            pSource: ?*IPortableDeviceValues,
            ppBuffer: [*]?*u8,
            pdwBufferSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSerializedSize: *const fn(
            self: *const IWpdSerializer,
            pSource: ?*IPortableDeviceValues,
            pdwSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetIPortableDeviceValuesFromBuffer(self: *const IWpdSerializer, pBuffer: [*:0]u8, dwInputBufferLength: u32, ppParams: ?*?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.GetIPortableDeviceValuesFromBuffer(self, pBuffer, dwInputBufferLength, ppParams);
    }
    pub fn WriteIPortableDeviceValuesToBuffer(self: *const IWpdSerializer, dwOutputBufferLength: u32, pResults: ?*IPortableDeviceValues, pBuffer: [*:0]u8, pdwBytesWritten: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.WriteIPortableDeviceValuesToBuffer(self, dwOutputBufferLength, pResults, pBuffer, pdwBytesWritten);
    }
    pub fn GetBufferFromIPortableDeviceValues(self: *const IWpdSerializer, pSource: ?*IPortableDeviceValues, ppBuffer: [*]?*u8, pdwBufferSize: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetBufferFromIPortableDeviceValues(self, pSource, ppBuffer, pdwBufferSize);
    }
    pub fn GetSerializedSize(self: *const IWpdSerializer, pSource: ?*IPortableDeviceValues, pdwSize: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetSerializedSize(self, pSource, pdwSize);
    }
};

const IID_IPortableDeviceValues_Value = Guid.initString("6848f6f2-3155-4f86-b6f5-263eeeab3143");
pub const IID_IPortableDeviceValues = &IID_IPortableDeviceValues_Value;
pub const IPortableDeviceValues = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn(
            self: *const IPortableDeviceValues,
            pcelt: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn(
            self: *const IPortableDeviceValues,
            index: u32,
            pKey: ?*PROPERTYKEY,
            pValue: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            pValue: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            pValue: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStringValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            Value: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            pValue: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUnsignedIntegerValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            Value: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUnsignedIntegerValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            pValue: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSignedIntegerValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignedIntegerValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUnsignedLargeIntegerValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            Value: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUnsignedLargeIntegerValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            pValue: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSignedLargeIntegerValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            Value: i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignedLargeIntegerValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            pValue: ?*i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFloatValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            Value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFloatValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            pValue: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetErrorValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            Value: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetErrorValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            pValue: ?*HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetKeyValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            Value: ?*const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            pValue: ?*PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBoolValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            Value: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBoolValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            pValue: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIUnknownValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            pValue: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIUnknownValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            ppValue: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGuidValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            Value: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGuidValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            pValue: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBufferValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            pValue: [*:0]u8,
            cbValue: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBufferValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            ppValue: [*]?*u8,
            pcbValue: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIPortableDeviceValuesValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            pValue: ?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIPortableDeviceValuesValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            ppValue: ?*?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIPortableDevicePropVariantCollectionValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            pValue: ?*IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIPortableDevicePropVariantCollectionValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            ppValue: ?*?*IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIPortableDeviceKeyCollectionValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            pValue: ?*IPortableDeviceKeyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIPortableDeviceKeyCollectionValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            ppValue: ?*?*IPortableDeviceKeyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIPortableDeviceValuesCollectionValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            pValue: ?*IPortableDeviceValuesCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIPortableDeviceValuesCollectionValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
            ppValue: ?*?*IPortableDeviceValuesCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveValue: *const fn(
            self: *const IPortableDeviceValues,
            key: ?*const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyValuesFromPropertyStore: *const fn(
            self: *const IPortableDeviceValues,
            pStore: ?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyValuesToPropertyStore: *const fn(
            self: *const IPortableDeviceValues,
            pStore: ?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn(
            self: *const IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetCount(self: *const IPortableDeviceValues, pcelt: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCount(self, pcelt);
    }
    pub fn GetAt(self: *const IPortableDeviceValues, index: u32, pKey: ?*PROPERTYKEY, pValue: ?*PROPVARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetAt(self, index, pKey, pValue);
    }
    pub fn SetValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, pValue: ?*const PROPVARIANT) callconv(.Inline) HRESULT {
        return self.vtable.SetValue(self, key, pValue);
    }
    pub fn GetValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, pValue: ?*PROPVARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetValue(self, key, pValue);
    }
    pub fn SetStringValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, Value: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetStringValue(self, key, Value);
    }
    pub fn GetStringValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, pValue: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetStringValue(self, key, pValue);
    }
    pub fn SetUnsignedIntegerValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, Value: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetUnsignedIntegerValue(self, key, Value);
    }
    pub fn GetUnsignedIntegerValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, pValue: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetUnsignedIntegerValue(self, key, pValue);
    }
    pub fn SetSignedIntegerValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetSignedIntegerValue(self, key, Value);
    }
    pub fn GetSignedIntegerValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetSignedIntegerValue(self, key, pValue);
    }
    pub fn SetUnsignedLargeIntegerValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, Value: u64) callconv(.Inline) HRESULT {
        return self.vtable.SetUnsignedLargeIntegerValue(self, key, Value);
    }
    pub fn GetUnsignedLargeIntegerValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, pValue: ?*u64) callconv(.Inline) HRESULT {
        return self.vtable.GetUnsignedLargeIntegerValue(self, key, pValue);
    }
    pub fn SetSignedLargeIntegerValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, Value: i64) callconv(.Inline) HRESULT {
        return self.vtable.SetSignedLargeIntegerValue(self, key, Value);
    }
    pub fn GetSignedLargeIntegerValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, pValue: ?*i64) callconv(.Inline) HRESULT {
        return self.vtable.GetSignedLargeIntegerValue(self, key, pValue);
    }
    pub fn SetFloatValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, Value: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetFloatValue(self, key, Value);
    }
    pub fn GetFloatValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, pValue: ?*f32) callconv(.Inline) HRESULT {
        return self.vtable.GetFloatValue(self, key, pValue);
    }
    pub fn SetErrorValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, Value: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.SetErrorValue(self, key, Value);
    }
    pub fn GetErrorValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, pValue: ?*HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.GetErrorValue(self, key, pValue);
    }
    pub fn SetKeyValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, Value: ?*const PROPERTYKEY) callconv(.Inline) HRESULT {
        return self.vtable.SetKeyValue(self, key, Value);
    }
    pub fn GetKeyValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, pValue: ?*PROPERTYKEY) callconv(.Inline) HRESULT {
        return self.vtable.GetKeyValue(self, key, pValue);
    }
    pub fn SetBoolValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, Value: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetBoolValue(self, key, Value);
    }
    pub fn GetBoolValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, pValue: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.GetBoolValue(self, key, pValue);
    }
    pub fn SetIUnknownValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, pValue: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.SetIUnknownValue(self, key, pValue);
    }
    pub fn GetIUnknownValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, ppValue: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.GetIUnknownValue(self, key, ppValue);
    }
    pub fn SetGuidValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, Value: ?*const Guid) callconv(.Inline) HRESULT {
        return self.vtable.SetGuidValue(self, key, Value);
    }
    pub fn GetGuidValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, pValue: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetGuidValue(self, key, pValue);
    }
    pub fn SetBufferValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, pValue: [*:0]u8, cbValue: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetBufferValue(self, key, pValue, cbValue);
    }
    pub fn GetBufferValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, ppValue: [*]?*u8, pcbValue: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetBufferValue(self, key, ppValue, pcbValue);
    }
    pub fn SetIPortableDeviceValuesValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, pValue: ?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.SetIPortableDeviceValuesValue(self, key, pValue);
    }
    pub fn GetIPortableDeviceValuesValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, ppValue: ?*?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.GetIPortableDeviceValuesValue(self, key, ppValue);
    }
    pub fn SetIPortableDevicePropVariantCollectionValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, pValue: ?*IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
        return self.vtable.SetIPortableDevicePropVariantCollectionValue(self, key, pValue);
    }
    pub fn GetIPortableDevicePropVariantCollectionValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, ppValue: ?*?*IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetIPortableDevicePropVariantCollectionValue(self, key, ppValue);
    }
    pub fn SetIPortableDeviceKeyCollectionValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, pValue: ?*IPortableDeviceKeyCollection) callconv(.Inline) HRESULT {
        return self.vtable.SetIPortableDeviceKeyCollectionValue(self, key, pValue);
    }
    pub fn GetIPortableDeviceKeyCollectionValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, ppValue: ?*?*IPortableDeviceKeyCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetIPortableDeviceKeyCollectionValue(self, key, ppValue);
    }
    pub fn SetIPortableDeviceValuesCollectionValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, pValue: ?*IPortableDeviceValuesCollection) callconv(.Inline) HRESULT {
        return self.vtable.SetIPortableDeviceValuesCollectionValue(self, key, pValue);
    }
    pub fn GetIPortableDeviceValuesCollectionValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY, ppValue: ?*?*IPortableDeviceValuesCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetIPortableDeviceValuesCollectionValue(self, key, ppValue);
    }
    pub fn RemoveValue(self: *const IPortableDeviceValues, key: ?*const PROPERTYKEY) callconv(.Inline) HRESULT {
        return self.vtable.RemoveValue(self, key);
    }
    pub fn CopyValuesFromPropertyStore(self: *const IPortableDeviceValues, pStore: ?*IPropertyStore) callconv(.Inline) HRESULT {
        return self.vtable.CopyValuesFromPropertyStore(self, pStore);
    }
    pub fn CopyValuesToPropertyStore(self: *const IPortableDeviceValues, pStore: ?*IPropertyStore) callconv(.Inline) HRESULT {
        return self.vtable.CopyValuesToPropertyStore(self, pStore);
    }
    pub fn Clear(self: *const IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.Clear(self);
    }
};

const IID_IPortableDeviceKeyCollection_Value = Guid.initString("dada2357-e0ad-492e-98db-dd61c53ba353");
pub const IID_IPortableDeviceKeyCollection = &IID_IPortableDeviceKeyCollection_Value;
pub const IPortableDeviceKeyCollection = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn(
            self: *const IPortableDeviceKeyCollection,
            pcElems: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn(
            self: *const IPortableDeviceKeyCollection,
            dwIndex: u32,
            pKey: ?*PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const IPortableDeviceKeyCollection,
            Key: ?*const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn(
            self: *const IPortableDeviceKeyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: *const fn(
            self: *const IPortableDeviceKeyCollection,
            dwIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetCount(self: *const IPortableDeviceKeyCollection, pcElems: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCount(self, pcElems);
    }
    pub fn GetAt(self: *const IPortableDeviceKeyCollection, dwIndex: u32, pKey: ?*PROPERTYKEY) callconv(.Inline) HRESULT {
        return self.vtable.GetAt(self, dwIndex, pKey);
    }
    pub fn Add(self: *const IPortableDeviceKeyCollection, Key: ?*const PROPERTYKEY) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, Key);
    }
    pub fn Clear(self: *const IPortableDeviceKeyCollection) callconv(.Inline) HRESULT {
        return self.vtable.Clear(self);
    }
    pub fn RemoveAt(self: *const IPortableDeviceKeyCollection, dwIndex: u32) callconv(.Inline) HRESULT {
        return self.vtable.RemoveAt(self, dwIndex);
    }
};

const IID_IPortableDevicePropVariantCollection_Value = Guid.initString("89b2e422-4f1b-4316-bcef-a44afea83eb3");
pub const IID_IPortableDevicePropVariantCollection = &IID_IPortableDevicePropVariantCollection_Value;
pub const IPortableDevicePropVariantCollection = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn(
            self: *const IPortableDevicePropVariantCollection,
            pcElems: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn(
            self: *const IPortableDevicePropVariantCollection,
            dwIndex: u32,
            pValue: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const IPortableDevicePropVariantCollection,
            pValue: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetType: *const fn(
            self: *const IPortableDevicePropVariantCollection,
            pvt: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ChangeType: *const fn(
            self: *const IPortableDevicePropVariantCollection,
            vt: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn(
            self: *const IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: *const fn(
            self: *const IPortableDevicePropVariantCollection,
            dwIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetCount(self: *const IPortableDevicePropVariantCollection, pcElems: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCount(self, pcElems);
    }
    pub fn GetAt(self: *const IPortableDevicePropVariantCollection, dwIndex: u32, pValue: ?*PROPVARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetAt(self, dwIndex, pValue);
    }
    pub fn Add(self: *const IPortableDevicePropVariantCollection, pValue: ?*const PROPVARIANT) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, pValue);
    }
    pub fn GetType(self: *const IPortableDevicePropVariantCollection, pvt: ?*u16) callconv(.Inline) HRESULT {
        return self.vtable.GetType(self, pvt);
    }
    pub fn ChangeType(self: *const IPortableDevicePropVariantCollection, vt: u16) callconv(.Inline) HRESULT {
        return self.vtable.ChangeType(self, vt);
    }
    pub fn Clear(self: *const IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
        return self.vtable.Clear(self);
    }
    pub fn RemoveAt(self: *const IPortableDevicePropVariantCollection, dwIndex: u32) callconv(.Inline) HRESULT {
        return self.vtable.RemoveAt(self, dwIndex);
    }
};

const IID_IPortableDeviceValuesCollection_Value = Guid.initString("6e3f2d79-4e07-48c4-8208-d8c2e5af4a99");
pub const IID_IPortableDeviceValuesCollection = &IID_IPortableDeviceValuesCollection_Value;
pub const IPortableDeviceValuesCollection = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn(
            self: *const IPortableDeviceValuesCollection,
            pcElems: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn(
            self: *const IPortableDeviceValuesCollection,
            dwIndex: u32,
            ppValues: ?*?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const IPortableDeviceValuesCollection,
            pValues: ?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn(
            self: *const IPortableDeviceValuesCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: *const fn(
            self: *const IPortableDeviceValuesCollection,
            dwIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetCount(self: *const IPortableDeviceValuesCollection, pcElems: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCount(self, pcElems);
    }
    pub fn GetAt(self: *const IPortableDeviceValuesCollection, dwIndex: u32, ppValues: ?*?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.GetAt(self, dwIndex, ppValues);
    }
    pub fn Add(self: *const IPortableDeviceValuesCollection, pValues: ?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, pValues);
    }
    pub fn Clear(self: *const IPortableDeviceValuesCollection) callconv(.Inline) HRESULT {
        return self.vtable.Clear(self);
    }
    pub fn RemoveAt(self: *const IPortableDeviceValuesCollection, dwIndex: u32) callconv(.Inline) HRESULT {
        return self.vtable.RemoveAt(self, dwIndex);
    }
};

const CLSID_PortableDevice_Value = Guid.initString("728a21c5-3d9e-48d7-9810-864848f0f404");
pub const CLSID_PortableDevice = &CLSID_PortableDevice_Value;

const CLSID_PortableDeviceManager_Value = Guid.initString("0af10cec-2ecd-4b92-9581-34f6ae0637f3");
pub const CLSID_PortableDeviceManager = &CLSID_PortableDeviceManager_Value;

const CLSID_PortableDeviceService_Value = Guid.initString("ef5db4c2-9312-422c-9152-411cd9c4dd84");
pub const CLSID_PortableDeviceService = &CLSID_PortableDeviceService_Value;

const CLSID_PortableDeviceDispatchFactory_Value = Guid.initString("43232233-8338-4658-ae01-0b4ae830b6b0");
pub const CLSID_PortableDeviceDispatchFactory = &CLSID_PortableDeviceDispatchFactory_Value;

const CLSID_PortableDeviceFTM_Value = Guid.initString("f7c0039a-4762-488a-b4b3-760ef9a1ba9b");
pub const CLSID_PortableDeviceFTM = &CLSID_PortableDeviceFTM_Value;

const CLSID_PortableDeviceServiceFTM_Value = Guid.initString("1649b154-c794-497a-9b03-f3f0121302f3");
pub const CLSID_PortableDeviceServiceFTM = &CLSID_PortableDeviceServiceFTM_Value;

const CLSID_PortableDeviceWebControl_Value = Guid.initString("186dd02c-2dec-41b5-a7d4-b59056fade51");
pub const CLSID_PortableDeviceWebControl = &CLSID_PortableDeviceWebControl_Value;

const IID_IPortableDeviceManager_Value = Guid.initString("a1567595-4c2f-4574-a6fa-ecef917b9a40");
pub const IID_IPortableDeviceManager = &IID_IPortableDeviceManager_Value;
pub const IPortableDeviceManager = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDevices: *const fn(
            self: *const IPortableDeviceManager,
            pPnPDeviceIDs: ?*?PWSTR,
            pcPnPDeviceIDs: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshDeviceList: *const fn(
            self: *const IPortableDeviceManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceFriendlyName: *const fn(
            self: *const IPortableDeviceManager,
            pszPnPDeviceID: ?[*:0]const u16,
            pDeviceFriendlyName: ?PWSTR,
            pcchDeviceFriendlyName: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceDescription: *const fn(
            self: *const IPortableDeviceManager,
            pszPnPDeviceID: ?[*:0]const u16,
            pDeviceDescription: ?PWSTR,
            pcchDeviceDescription: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceManufacturer: *const fn(
            self: *const IPortableDeviceManager,
            pszPnPDeviceID: ?[*:0]const u16,
            pDeviceManufacturer: ?PWSTR,
            pcchDeviceManufacturer: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceProperty: *const fn(
            self: *const IPortableDeviceManager,
            pszPnPDeviceID: ?[*:0]const u16,
            pszDevicePropertyName: ?[*:0]const u16,
            pData: ?*u8,
            pcbData: ?*u32,
            pdwType: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrivateDevices: *const fn(
            self: *const IPortableDeviceManager,
            pPnPDeviceIDs: ?*?PWSTR,
            pcPnPDeviceIDs: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetDevices(self: *const IPortableDeviceManager, pPnPDeviceIDs: ?*?PWSTR, pcPnPDeviceIDs: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetDevices(self, pPnPDeviceIDs, pcPnPDeviceIDs);
    }
    pub fn RefreshDeviceList(self: *const IPortableDeviceManager) callconv(.Inline) HRESULT {
        return self.vtable.RefreshDeviceList(self);
    }
    pub fn GetDeviceFriendlyName(self: *const IPortableDeviceManager, pszPnPDeviceID: ?[*:0]const u16, pDeviceFriendlyName: ?PWSTR, pcchDeviceFriendlyName: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetDeviceFriendlyName(self, pszPnPDeviceID, pDeviceFriendlyName, pcchDeviceFriendlyName);
    }
    pub fn GetDeviceDescription(self: *const IPortableDeviceManager, pszPnPDeviceID: ?[*:0]const u16, pDeviceDescription: ?PWSTR, pcchDeviceDescription: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetDeviceDescription(self, pszPnPDeviceID, pDeviceDescription, pcchDeviceDescription);
    }
    pub fn GetDeviceManufacturer(self: *const IPortableDeviceManager, pszPnPDeviceID: ?[*:0]const u16, pDeviceManufacturer: ?PWSTR, pcchDeviceManufacturer: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetDeviceManufacturer(self, pszPnPDeviceID, pDeviceManufacturer, pcchDeviceManufacturer);
    }
    pub fn GetDeviceProperty(self: *const IPortableDeviceManager, pszPnPDeviceID: ?[*:0]const u16, pszDevicePropertyName: ?[*:0]const u16, pData: ?*u8, pcbData: ?*u32, pdwType: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetDeviceProperty(self, pszPnPDeviceID, pszDevicePropertyName, pData, pcbData, pdwType);
    }
    pub fn GetPrivateDevices(self: *const IPortableDeviceManager, pPnPDeviceIDs: ?*?PWSTR, pcPnPDeviceIDs: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetPrivateDevices(self, pPnPDeviceIDs, pcPnPDeviceIDs);
    }
};

const IID_IPortableDevice_Value = Guid.initString("625e2df8-6392-4cf0-9ad1-3cfa5f17775c");
pub const IID_IPortableDevice = &IID_IPortableDevice_Value;
pub const IPortableDevice = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Open: *const fn(
            self: *const IPortableDevice,
            pszPnPDeviceID: ?[*:0]const u16,
            pClientInfo: ?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendCommand: *const fn(
            self: *const IPortableDevice,
            dwFlags: u32,
            pParameters: ?*IPortableDeviceValues,
            ppResults: ?*?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Content: *const fn(
            self: *const IPortableDevice,
            ppContent: ?*?*IPortableDeviceContent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Capabilities: *const fn(
            self: *const IPortableDevice,
            ppCapabilities: ?*?*IPortableDeviceCapabilities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: *const fn(
            self: *const IPortableDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn(
            self: *const IPortableDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Advise: *const fn(
            self: *const IPortableDevice,
            dwFlags: u32,
            pCallback: ?*IPortableDeviceEventCallback,
            pParameters: ?*IPortableDeviceValues,
            ppszCookie: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: *const fn(
            self: *const IPortableDevice,
            pszCookie: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPnPDeviceID: *const fn(
            self: *const IPortableDevice,
            ppszPnPDeviceID: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Open(self: *const IPortableDevice, pszPnPDeviceID: ?[*:0]const u16, pClientInfo: ?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.Open(self, pszPnPDeviceID, pClientInfo);
    }
    pub fn SendCommand(self: *const IPortableDevice, dwFlags: u32, pParameters: ?*IPortableDeviceValues, ppResults: ?*?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.SendCommand(self, dwFlags, pParameters, ppResults);
    }
    pub fn Content(self: *const IPortableDevice, ppContent: ?*?*IPortableDeviceContent) callconv(.Inline) HRESULT {
        return self.vtable.Content(self, ppContent);
    }
    pub fn Capabilities(self: *const IPortableDevice, ppCapabilities: ?*?*IPortableDeviceCapabilities) callconv(.Inline) HRESULT {
        return self.vtable.Capabilities(self, ppCapabilities);
    }
    pub fn Cancel(self: *const IPortableDevice) callconv(.Inline) HRESULT {
        return self.vtable.Cancel(self);
    }
    pub fn Close(self: *const IPortableDevice) callconv(.Inline) HRESULT {
        return self.vtable.Close(self);
    }
    pub fn Advise(self: *const IPortableDevice, dwFlags: u32, pCallback: ?*IPortableDeviceEventCallback, pParameters: ?*IPortableDeviceValues, ppszCookie: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.Advise(self, dwFlags, pCallback, pParameters, ppszCookie);
    }
    pub fn Unadvise(self: *const IPortableDevice, pszCookie: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.Unadvise(self, pszCookie);
    }
    pub fn GetPnPDeviceID(self: *const IPortableDevice, ppszPnPDeviceID: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetPnPDeviceID(self, ppszPnPDeviceID);
    }
};

const IID_IPortableDeviceContent_Value = Guid.initString("6a96ed84-7c73-4480-9938-bf5af477d426");
pub const IID_IPortableDeviceContent = &IID_IPortableDeviceContent_Value;
pub const IPortableDeviceContent = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnumObjects: *const fn(
            self: *const IPortableDeviceContent,
            dwFlags: u32,
            pszParentObjectID: ?[*:0]const u16,
            pFilter: ?*IPortableDeviceValues,
            ppEnum: ?*?*IEnumPortableDeviceObjectIDs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Properties: *const fn(
            self: *const IPortableDeviceContent,
            ppProperties: ?*?*IPortableDeviceProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Transfer: *const fn(
            self: *const IPortableDeviceContent,
            ppResources: ?*?*IPortableDeviceResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateObjectWithPropertiesOnly: *const fn(
            self: *const IPortableDeviceContent,
            pValues: ?*IPortableDeviceValues,
            ppszObjectID: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateObjectWithPropertiesAndData: *const fn(
            self: *const IPortableDeviceContent,
            pValues: ?*IPortableDeviceValues,
            ppData: ?*?*IStream,
            pdwOptimalWriteBufferSize: ?*u32,
            ppszCookie: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn(
            self: *const IPortableDeviceContent,
            dwOptions: u32,
            pObjectIDs: ?*IPortableDevicePropVariantCollection,
            ppResults: ?*?*IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectIDsFromPersistentUniqueIDs: *const fn(
            self: *const IPortableDeviceContent,
            pPersistentUniqueIDs: ?*IPortableDevicePropVariantCollection,
            ppObjectIDs: ?*?*IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: *const fn(
            self: *const IPortableDeviceContent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Move: *const fn(
            self: *const IPortableDeviceContent,
            pObjectIDs: ?*IPortableDevicePropVariantCollection,
            pszDestinationFolderObjectID: ?[*:0]const u16,
            ppResults: ?*?*IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Copy: *const fn(
            self: *const IPortableDeviceContent,
            pObjectIDs: ?*IPortableDevicePropVariantCollection,
            pszDestinationFolderObjectID: ?[*:0]const u16,
            ppResults: ?*?*IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn EnumObjects(self: *const IPortableDeviceContent, dwFlags: u32, pszParentObjectID: ?[*:0]const u16, pFilter: ?*IPortableDeviceValues, ppEnum: ?*?*IEnumPortableDeviceObjectIDs) callconv(.Inline) HRESULT {
        return self.vtable.EnumObjects(self, dwFlags, pszParentObjectID, pFilter, ppEnum);
    }
    pub fn Properties(self: *const IPortableDeviceContent, ppProperties: ?*?*IPortableDeviceProperties) callconv(.Inline) HRESULT {
        return self.vtable.Properties(self, ppProperties);
    }
    pub fn Transfer(self: *const IPortableDeviceContent, ppResources: ?*?*IPortableDeviceResources) callconv(.Inline) HRESULT {
        return self.vtable.Transfer(self, ppResources);
    }
    pub fn CreateObjectWithPropertiesOnly(self: *const IPortableDeviceContent, pValues: ?*IPortableDeviceValues, ppszObjectID: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.CreateObjectWithPropertiesOnly(self, pValues, ppszObjectID);
    }
    pub fn CreateObjectWithPropertiesAndData(self: *const IPortableDeviceContent, pValues: ?*IPortableDeviceValues, ppData: ?*?*IStream, pdwOptimalWriteBufferSize: ?*u32, ppszCookie: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.CreateObjectWithPropertiesAndData(self, pValues, ppData, pdwOptimalWriteBufferSize, ppszCookie);
    }
    pub fn Delete(self: *const IPortableDeviceContent, dwOptions: u32, pObjectIDs: ?*IPortableDevicePropVariantCollection, ppResults: ?*?*IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
        return self.vtable.Delete(self, dwOptions, pObjectIDs, ppResults);
    }
    pub fn GetObjectIDsFromPersistentUniqueIDs(self: *const IPortableDeviceContent, pPersistentUniqueIDs: ?*IPortableDevicePropVariantCollection, ppObjectIDs: ?*?*IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetObjectIDsFromPersistentUniqueIDs(self, pPersistentUniqueIDs, ppObjectIDs);
    }
    pub fn Cancel(self: *const IPortableDeviceContent) callconv(.Inline) HRESULT {
        return self.vtable.Cancel(self);
    }
    pub fn Move(self: *const IPortableDeviceContent, pObjectIDs: ?*IPortableDevicePropVariantCollection, pszDestinationFolderObjectID: ?[*:0]const u16, ppResults: ?*?*IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
        return self.vtable.Move(self, pObjectIDs, pszDestinationFolderObjectID, ppResults);
    }
    pub fn Copy(self: *const IPortableDeviceContent, pObjectIDs: ?*IPortableDevicePropVariantCollection, pszDestinationFolderObjectID: ?[*:0]const u16, ppResults: ?*?*IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
        return self.vtable.Copy(self, pObjectIDs, pszDestinationFolderObjectID, ppResults);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IPortableDeviceContent2_Value = Guid.initString("9b4add96-f6bf-4034-8708-eca72bf10554");
pub const IID_IPortableDeviceContent2 = &IID_IPortableDeviceContent2_Value;
pub const IPortableDeviceContent2 = extern union {
    pub const VTable = extern struct {
        base: IPortableDeviceContent.VTable,
        UpdateObjectWithPropertiesAndData: *const fn(
            self: *const IPortableDeviceContent2,
            pszObjectID: ?[*:0]const u16,
            pProperties: ?*IPortableDeviceValues,
            ppData: ?*?*IStream,
            pdwOptimalWriteBufferSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IPortableDeviceContent: IPortableDeviceContent,
    IUnknown: IUnknown,
    pub fn UpdateObjectWithPropertiesAndData(self: *const IPortableDeviceContent2, pszObjectID: ?[*:0]const u16, pProperties: ?*IPortableDeviceValues, ppData: ?*?*IStream, pdwOptimalWriteBufferSize: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.UpdateObjectWithPropertiesAndData(self, pszObjectID, pProperties, ppData, pdwOptimalWriteBufferSize);
    }
};

const IID_IEnumPortableDeviceObjectIDs_Value = Guid.initString("10ece955-cf41-4728-bfa0-41eedf1bbf19");
pub const IID_IEnumPortableDeviceObjectIDs = &IID_IEnumPortableDeviceObjectIDs_Value;
pub const IEnumPortableDeviceObjectIDs = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumPortableDeviceObjectIDs,
            cObjects: u32,
            pObjIDs: [*]?PWSTR,
            pcFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumPortableDeviceObjectIDs,
            cObjects: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumPortableDeviceObjectIDs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumPortableDeviceObjectIDs,
            ppEnum: ?*?*IEnumPortableDeviceObjectIDs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: *const fn(
            self: *const IEnumPortableDeviceObjectIDs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumPortableDeviceObjectIDs, cObjects: u32, pObjIDs: [*]?PWSTR, pcFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, cObjects, pObjIDs, pcFetched);
    }
    pub fn Skip(self: *const IEnumPortableDeviceObjectIDs, cObjects: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, cObjects);
    }
    pub fn Reset(self: *const IEnumPortableDeviceObjectIDs) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumPortableDeviceObjectIDs, ppEnum: ?*?*IEnumPortableDeviceObjectIDs) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppEnum);
    }
    pub fn Cancel(self: *const IEnumPortableDeviceObjectIDs) callconv(.Inline) HRESULT {
        return self.vtable.Cancel(self);
    }
};

const IID_IPortableDeviceProperties_Value = Guid.initString("7f6d695c-03df-4439-a809-59266beee3a6");
pub const IID_IPortableDeviceProperties = &IID_IPortableDeviceProperties_Value;
pub const IPortableDeviceProperties = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSupportedProperties: *const fn(
            self: *const IPortableDeviceProperties,
            pszObjectID: ?[*:0]const u16,
            ppKeys: ?*?*IPortableDeviceKeyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyAttributes: *const fn(
            self: *const IPortableDeviceProperties,
            pszObjectID: ?[*:0]const u16,
            Key: ?*const PROPERTYKEY,
            ppAttributes: ?*?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValues: *const fn(
            self: *const IPortableDeviceProperties,
            pszObjectID: ?[*:0]const u16,
            pKeys: ?*IPortableDeviceKeyCollection,
            ppValues: ?*?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValues: *const fn(
            self: *const IPortableDeviceProperties,
            pszObjectID: ?[*:0]const u16,
            pValues: ?*IPortableDeviceValues,
            ppResults: ?*?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn(
            self: *const IPortableDeviceProperties,
            pszObjectID: ?[*:0]const u16,
            pKeys: ?*IPortableDeviceKeyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: *const fn(
            self: *const IPortableDeviceProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetSupportedProperties(self: *const IPortableDeviceProperties, pszObjectID: ?[*:0]const u16, ppKeys: ?*?*IPortableDeviceKeyCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetSupportedProperties(self, pszObjectID, ppKeys);
    }
    pub fn GetPropertyAttributes(self: *const IPortableDeviceProperties, pszObjectID: ?[*:0]const u16, Key: ?*const PROPERTYKEY, ppAttributes: ?*?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyAttributes(self, pszObjectID, Key, ppAttributes);
    }
    pub fn GetValues(self: *const IPortableDeviceProperties, pszObjectID: ?[*:0]const u16, pKeys: ?*IPortableDeviceKeyCollection, ppValues: ?*?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.GetValues(self, pszObjectID, pKeys, ppValues);
    }
    pub fn SetValues(self: *const IPortableDeviceProperties, pszObjectID: ?[*:0]const u16, pValues: ?*IPortableDeviceValues, ppResults: ?*?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.SetValues(self, pszObjectID, pValues, ppResults);
    }
    pub fn Delete(self: *const IPortableDeviceProperties, pszObjectID: ?[*:0]const u16, pKeys: ?*IPortableDeviceKeyCollection) callconv(.Inline) HRESULT {
        return self.vtable.Delete(self, pszObjectID, pKeys);
    }
    pub fn Cancel(self: *const IPortableDeviceProperties) callconv(.Inline) HRESULT {
        return self.vtable.Cancel(self);
    }
};

const IID_IPortableDeviceResources_Value = Guid.initString("fd8878ac-d841-4d17-891c-e6829cdb6934");
pub const IID_IPortableDeviceResources = &IID_IPortableDeviceResources_Value;
pub const IPortableDeviceResources = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSupportedResources: *const fn(
            self: *const IPortableDeviceResources,
            pszObjectID: ?[*:0]const u16,
            ppKeys: ?*?*IPortableDeviceKeyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResourceAttributes: *const fn(
            self: *const IPortableDeviceResources,
            pszObjectID: ?[*:0]const u16,
            Key: ?*const PROPERTYKEY,
            ppResourceAttributes: ?*?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStream: *const fn(
            self: *const IPortableDeviceResources,
            pszObjectID: ?[*:0]const u16,
            Key: ?*const PROPERTYKEY,
            dwMode: u32,
            pdwOptimalBufferSize: ?*u32,
            ppStream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn(
            self: *const IPortableDeviceResources,
            pszObjectID: ?[*:0]const u16,
            pKeys: ?*IPortableDeviceKeyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: *const fn(
            self: *const IPortableDeviceResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateResource: *const fn(
            self: *const IPortableDeviceResources,
            pResourceAttributes: ?*IPortableDeviceValues,
            ppData: ?*?*IStream,
            pdwOptimalWriteBufferSize: ?*u32,
            ppszCookie: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetSupportedResources(self: *const IPortableDeviceResources, pszObjectID: ?[*:0]const u16, ppKeys: ?*?*IPortableDeviceKeyCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetSupportedResources(self, pszObjectID, ppKeys);
    }
    pub fn GetResourceAttributes(self: *const IPortableDeviceResources, pszObjectID: ?[*:0]const u16, Key: ?*const PROPERTYKEY, ppResourceAttributes: ?*?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.GetResourceAttributes(self, pszObjectID, Key, ppResourceAttributes);
    }
    pub fn GetStream(self: *const IPortableDeviceResources, pszObjectID: ?[*:0]const u16, Key: ?*const PROPERTYKEY, dwMode: u32, pdwOptimalBufferSize: ?*u32, ppStream: ?*?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.GetStream(self, pszObjectID, Key, dwMode, pdwOptimalBufferSize, ppStream);
    }
    pub fn Delete(self: *const IPortableDeviceResources, pszObjectID: ?[*:0]const u16, pKeys: ?*IPortableDeviceKeyCollection) callconv(.Inline) HRESULT {
        return self.vtable.Delete(self, pszObjectID, pKeys);
    }
    pub fn Cancel(self: *const IPortableDeviceResources) callconv(.Inline) HRESULT {
        return self.vtable.Cancel(self);
    }
    pub fn CreateResource(self: *const IPortableDeviceResources, pResourceAttributes: ?*IPortableDeviceValues, ppData: ?*?*IStream, pdwOptimalWriteBufferSize: ?*u32, ppszCookie: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.CreateResource(self, pResourceAttributes, ppData, pdwOptimalWriteBufferSize, ppszCookie);
    }
};

const IID_IPortableDeviceCapabilities_Value = Guid.initString("2c8c6dbf-e3dc-4061-becc-8542e810d126");
pub const IID_IPortableDeviceCapabilities = &IID_IPortableDeviceCapabilities_Value;
pub const IPortableDeviceCapabilities = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSupportedCommands: *const fn(
            self: *const IPortableDeviceCapabilities,
            ppCommands: ?*?*IPortableDeviceKeyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCommandOptions: *const fn(
            self: *const IPortableDeviceCapabilities,
            Command: ?*const PROPERTYKEY,
            ppOptions: ?*?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFunctionalCategories: *const fn(
            self: *const IPortableDeviceCapabilities,
            ppCategories: ?*?*IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFunctionalObjects: *const fn(
            self: *const IPortableDeviceCapabilities,
            Category: ?*const Guid,
            ppObjectIDs: ?*?*IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedContentTypes: *const fn(
            self: *const IPortableDeviceCapabilities,
            Category: ?*const Guid,
            ppContentTypes: ?*?*IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedFormats: *const fn(
            self: *const IPortableDeviceCapabilities,
            ContentType: ?*const Guid,
            ppFormats: ?*?*IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedFormatProperties: *const fn(
            self: *const IPortableDeviceCapabilities,
            Format: ?*const Guid,
            ppKeys: ?*?*IPortableDeviceKeyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFixedPropertyAttributes: *const fn(
            self: *const IPortableDeviceCapabilities,
            Format: ?*const Guid,
            Key: ?*const PROPERTYKEY,
            ppAttributes: ?*?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: *const fn(
            self: *const IPortableDeviceCapabilities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedEvents: *const fn(
            self: *const IPortableDeviceCapabilities,
            ppEvents: ?*?*IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEventOptions: *const fn(
            self: *const IPortableDeviceCapabilities,
            Event: ?*const Guid,
            ppOptions: ?*?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetSupportedCommands(self: *const IPortableDeviceCapabilities, ppCommands: ?*?*IPortableDeviceKeyCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetSupportedCommands(self, ppCommands);
    }
    pub fn GetCommandOptions(self: *const IPortableDeviceCapabilities, Command: ?*const PROPERTYKEY, ppOptions: ?*?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.GetCommandOptions(self, Command, ppOptions);
    }
    pub fn GetFunctionalCategories(self: *const IPortableDeviceCapabilities, ppCategories: ?*?*IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetFunctionalCategories(self, ppCategories);
    }
    pub fn GetFunctionalObjects(self: *const IPortableDeviceCapabilities, Category: ?*const Guid, ppObjectIDs: ?*?*IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetFunctionalObjects(self, Category, ppObjectIDs);
    }
    pub fn GetSupportedContentTypes(self: *const IPortableDeviceCapabilities, Category: ?*const Guid, ppContentTypes: ?*?*IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetSupportedContentTypes(self, Category, ppContentTypes);
    }
    pub fn GetSupportedFormats(self: *const IPortableDeviceCapabilities, ContentType: ?*const Guid, ppFormats: ?*?*IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetSupportedFormats(self, ContentType, ppFormats);
    }
    pub fn GetSupportedFormatProperties(self: *const IPortableDeviceCapabilities, Format: ?*const Guid, ppKeys: ?*?*IPortableDeviceKeyCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetSupportedFormatProperties(self, Format, ppKeys);
    }
    pub fn GetFixedPropertyAttributes(self: *const IPortableDeviceCapabilities, Format: ?*const Guid, Key: ?*const PROPERTYKEY, ppAttributes: ?*?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.GetFixedPropertyAttributes(self, Format, Key, ppAttributes);
    }
    pub fn Cancel(self: *const IPortableDeviceCapabilities) callconv(.Inline) HRESULT {
        return self.vtable.Cancel(self);
    }
    pub fn GetSupportedEvents(self: *const IPortableDeviceCapabilities, ppEvents: ?*?*IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetSupportedEvents(self, ppEvents);
    }
    pub fn GetEventOptions(self: *const IPortableDeviceCapabilities, Event: ?*const Guid, ppOptions: ?*?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.GetEventOptions(self, Event, ppOptions);
    }
};

const IID_IPortableDeviceEventCallback_Value = Guid.initString("a8792a31-f385-493c-a893-40f64eb45f6e");
pub const IID_IPortableDeviceEventCallback = &IID_IPortableDeviceEventCallback_Value;
pub const IPortableDeviceEventCallback = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnEvent: *const fn(
            self: *const IPortableDeviceEventCallback,
            pEventParameters: ?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnEvent(self: *const IPortableDeviceEventCallback, pEventParameters: ?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.OnEvent(self, pEventParameters);
    }
};

const IID_IPortableDeviceDataStream_Value = Guid.initString("88e04db3-1012-4d64-9996-f703a950d3f4");
pub const IID_IPortableDeviceDataStream = &IID_IPortableDeviceDataStream_Value;
pub const IPortableDeviceDataStream = extern union {
    pub const VTable = extern struct {
        base: IStream.VTable,
        GetObjectID: *const fn(
            self: *const IPortableDeviceDataStream,
            ppszObjectID: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: *const fn(
            self: *const IPortableDeviceDataStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IStream: IStream,
    ISequentialStream: ISequentialStream,
    IUnknown: IUnknown,
    pub fn GetObjectID(self: *const IPortableDeviceDataStream, ppszObjectID: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetObjectID(self, ppszObjectID);
    }
    pub fn Cancel(self: *const IPortableDeviceDataStream) callconv(.Inline) HRESULT {
        return self.vtable.Cancel(self);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IPortableDeviceUnitsStream_Value = Guid.initString("5e98025f-bfc4-47a2-9a5f-bc900a507c67");
pub const IID_IPortableDeviceUnitsStream = &IID_IPortableDeviceUnitsStream_Value;
pub const IPortableDeviceUnitsStream = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SeekInUnits: *const fn(
            self: *const IPortableDeviceUnitsStream,
            dlibMove: LARGE_INTEGER,
            units: WPD_STREAM_UNITS,
            dwOrigin: u32,
            plibNewPosition: ?*ULARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: *const fn(
            self: *const IPortableDeviceUnitsStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SeekInUnits(self: *const IPortableDeviceUnitsStream, dlibMove: LARGE_INTEGER, units: WPD_STREAM_UNITS, dwOrigin: u32, plibNewPosition: ?*ULARGE_INTEGER) callconv(.Inline) HRESULT {
        return self.vtable.SeekInUnits(self, dlibMove, units, dwOrigin, plibNewPosition);
    }
    pub fn Cancel(self: *const IPortableDeviceUnitsStream) callconv(.Inline) HRESULT {
        return self.vtable.Cancel(self);
    }
};

const IID_IPortableDevicePropertiesBulk_Value = Guid.initString("482b05c0-4056-44ed-9e0f-5e23b009da93");
pub const IID_IPortableDevicePropertiesBulk = &IID_IPortableDevicePropertiesBulk_Value;
pub const IPortableDevicePropertiesBulk = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueueGetValuesByObjectList: *const fn(
            self: *const IPortableDevicePropertiesBulk,
            pObjectIDs: ?*IPortableDevicePropVariantCollection,
            pKeys: ?*IPortableDeviceKeyCollection,
            pCallback: ?*IPortableDevicePropertiesBulkCallback,
            pContext: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueueGetValuesByObjectFormat: *const fn(
            self: *const IPortableDevicePropertiesBulk,
            pguidObjectFormat: ?*const Guid,
            pszParentObjectID: ?[*:0]const u16,
            dwDepth: u32,
            pKeys: ?*IPortableDeviceKeyCollection,
            pCallback: ?*IPortableDevicePropertiesBulkCallback,
            pContext: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueueSetValuesByObjectList: *const fn(
            self: *const IPortableDevicePropertiesBulk,
            pObjectValues: ?*IPortableDeviceValuesCollection,
            pCallback: ?*IPortableDevicePropertiesBulkCallback,
            pContext: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Start: *const fn(
            self: *const IPortableDevicePropertiesBulk,
            pContext: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: *const fn(
            self: *const IPortableDevicePropertiesBulk,
            pContext: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn QueueGetValuesByObjectList(self: *const IPortableDevicePropertiesBulk, pObjectIDs: ?*IPortableDevicePropVariantCollection, pKeys: ?*IPortableDeviceKeyCollection, pCallback: ?*IPortableDevicePropertiesBulkCallback, pContext: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.QueueGetValuesByObjectList(self, pObjectIDs, pKeys, pCallback, pContext);
    }
    pub fn QueueGetValuesByObjectFormat(self: *const IPortableDevicePropertiesBulk, pguidObjectFormat: ?*const Guid, pszParentObjectID: ?[*:0]const u16, dwDepth: u32, pKeys: ?*IPortableDeviceKeyCollection, pCallback: ?*IPortableDevicePropertiesBulkCallback, pContext: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.QueueGetValuesByObjectFormat(self, pguidObjectFormat, pszParentObjectID, dwDepth, pKeys, pCallback, pContext);
    }
    pub fn QueueSetValuesByObjectList(self: *const IPortableDevicePropertiesBulk, pObjectValues: ?*IPortableDeviceValuesCollection, pCallback: ?*IPortableDevicePropertiesBulkCallback, pContext: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.QueueSetValuesByObjectList(self, pObjectValues, pCallback, pContext);
    }
    pub fn Start(self: *const IPortableDevicePropertiesBulk, pContext: ?*const Guid) callconv(.Inline) HRESULT {
        return self.vtable.Start(self, pContext);
    }
    pub fn Cancel(self: *const IPortableDevicePropertiesBulk, pContext: ?*const Guid) callconv(.Inline) HRESULT {
        return self.vtable.Cancel(self, pContext);
    }
};

const IID_IPortableDevicePropertiesBulkCallback_Value = Guid.initString("9deacb80-11e8-40e3-a9f3-f557986a7845");
pub const IID_IPortableDevicePropertiesBulkCallback = &IID_IPortableDevicePropertiesBulkCallback_Value;
pub const IPortableDevicePropertiesBulkCallback = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnStart: *const fn(
            self: *const IPortableDevicePropertiesBulkCallback,
            pContext: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnProgress: *const fn(
            self: *const IPortableDevicePropertiesBulkCallback,
            pContext: ?*const Guid,
            pResults: ?*IPortableDeviceValuesCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnEnd: *const fn(
            self: *const IPortableDevicePropertiesBulkCallback,
            pContext: ?*const Guid,
            hrStatus: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnStart(self: *const IPortableDevicePropertiesBulkCallback, pContext: ?*const Guid) callconv(.Inline) HRESULT {
        return self.vtable.OnStart(self, pContext);
    }
    pub fn OnProgress(self: *const IPortableDevicePropertiesBulkCallback, pContext: ?*const Guid, pResults: ?*IPortableDeviceValuesCollection) callconv(.Inline) HRESULT {
        return self.vtable.OnProgress(self, pContext, pResults);
    }
    pub fn OnEnd(self: *const IPortableDevicePropertiesBulkCallback, pContext: ?*const Guid, hrStatus: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.OnEnd(self, pContext, hrStatus);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IPortableDeviceServiceManager_Value = Guid.initString("a8abc4e9-a84a-47a9-80b3-c5d9b172a961");
pub const IID_IPortableDeviceServiceManager = &IID_IPortableDeviceServiceManager_Value;
pub const IPortableDeviceServiceManager = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDeviceServices: *const fn(
            self: *const IPortableDeviceServiceManager,
            pszPnPDeviceID: ?[*:0]const u16,
            guidServiceCategory: ?*const Guid,
            pServices: ?*?PWSTR,
            pcServices: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceForService: *const fn(
            self: *const IPortableDeviceServiceManager,
            pszPnPServiceID: ?[*:0]const u16,
            ppszPnPDeviceID: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetDeviceServices(self: *const IPortableDeviceServiceManager, pszPnPDeviceID: ?[*:0]const u16, guidServiceCategory: ?*const Guid, pServices: ?*?PWSTR, pcServices: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetDeviceServices(self, pszPnPDeviceID, guidServiceCategory, pServices, pcServices);
    }
    pub fn GetDeviceForService(self: *const IPortableDeviceServiceManager, pszPnPServiceID: ?[*:0]const u16, ppszPnPDeviceID: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetDeviceForService(self, pszPnPServiceID, ppszPnPDeviceID);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IPortableDeviceService_Value = Guid.initString("d3bd3a44-d7b5-40a9-98b7-2fa4d01dec08");
pub const IID_IPortableDeviceService = &IID_IPortableDeviceService_Value;
pub const IPortableDeviceService = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Open: *const fn(
            self: *const IPortableDeviceService,
            pszPnPServiceID: ?[*:0]const u16,
            pClientInfo: ?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Capabilities: *const fn(
            self: *const IPortableDeviceService,
            ppCapabilities: ?*?*IPortableDeviceServiceCapabilities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Content: *const fn(
            self: *const IPortableDeviceService,
            ppContent: ?*?*IPortableDeviceContent2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Methods: *const fn(
            self: *const IPortableDeviceService,
            ppMethods: ?*?*IPortableDeviceServiceMethods,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: *const fn(
            self: *const IPortableDeviceService,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn(
            self: *const IPortableDeviceService,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetServiceObjectID: *const fn(
            self: *const IPortableDeviceService,
            ppszServiceObjectID: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPnPServiceID: *const fn(
            self: *const IPortableDeviceService,
            ppszPnPServiceID: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Advise: *const fn(
            self: *const IPortableDeviceService,
            dwFlags: u32,
            pCallback: ?*IPortableDeviceEventCallback,
            pParameters: ?*IPortableDeviceValues,
            ppszCookie: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: *const fn(
            self: *const IPortableDeviceService,
            pszCookie: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendCommand: *const fn(
            self: *const IPortableDeviceService,
            dwFlags: u32,
            pParameters: ?*IPortableDeviceValues,
            ppResults: ?*?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Open(self: *const IPortableDeviceService, pszPnPServiceID: ?[*:0]const u16, pClientInfo: ?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.Open(self, pszPnPServiceID, pClientInfo);
    }
    pub fn Capabilities(self: *const IPortableDeviceService, ppCapabilities: ?*?*IPortableDeviceServiceCapabilities) callconv(.Inline) HRESULT {
        return self.vtable.Capabilities(self, ppCapabilities);
    }
    pub fn Content(self: *const IPortableDeviceService, ppContent: ?*?*IPortableDeviceContent2) callconv(.Inline) HRESULT {
        return self.vtable.Content(self, ppContent);
    }
    pub fn Methods(self: *const IPortableDeviceService, ppMethods: ?*?*IPortableDeviceServiceMethods) callconv(.Inline) HRESULT {
        return self.vtable.Methods(self, ppMethods);
    }
    pub fn Cancel(self: *const IPortableDeviceService) callconv(.Inline) HRESULT {
        return self.vtable.Cancel(self);
    }
    pub fn Close(self: *const IPortableDeviceService) callconv(.Inline) HRESULT {
        return self.vtable.Close(self);
    }
    pub fn GetServiceObjectID(self: *const IPortableDeviceService, ppszServiceObjectID: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetServiceObjectID(self, ppszServiceObjectID);
    }
    pub fn GetPnPServiceID(self: *const IPortableDeviceService, ppszPnPServiceID: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetPnPServiceID(self, ppszPnPServiceID);
    }
    pub fn Advise(self: *const IPortableDeviceService, dwFlags: u32, pCallback: ?*IPortableDeviceEventCallback, pParameters: ?*IPortableDeviceValues, ppszCookie: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.Advise(self, dwFlags, pCallback, pParameters, ppszCookie);
    }
    pub fn Unadvise(self: *const IPortableDeviceService, pszCookie: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.Unadvise(self, pszCookie);
    }
    pub fn SendCommand(self: *const IPortableDeviceService, dwFlags: u32, pParameters: ?*IPortableDeviceValues, ppResults: ?*?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.SendCommand(self, dwFlags, pParameters, ppResults);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IPortableDeviceServiceCapabilities_Value = Guid.initString("24dbd89d-413e-43e0-bd5b-197f3c56c886");
pub const IID_IPortableDeviceServiceCapabilities = &IID_IPortableDeviceServiceCapabilities_Value;
pub const IPortableDeviceServiceCapabilities = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSupportedMethods: *const fn(
            self: *const IPortableDeviceServiceCapabilities,
            ppMethods: ?*?*IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedMethodsByFormat: *const fn(
            self: *const IPortableDeviceServiceCapabilities,
            Format: ?*const Guid,
            ppMethods: ?*?*IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMethodAttributes: *const fn(
            self: *const IPortableDeviceServiceCapabilities,
            Method: ?*const Guid,
            ppAttributes: ?*?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMethodParameterAttributes: *const fn(
            self: *const IPortableDeviceServiceCapabilities,
            Method: ?*const Guid,
            Parameter: ?*const PROPERTYKEY,
            ppAttributes: ?*?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedFormats: *const fn(
            self: *const IPortableDeviceServiceCapabilities,
            ppFormats: ?*?*IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormatAttributes: *const fn(
            self: *const IPortableDeviceServiceCapabilities,
            Format: ?*const Guid,
            ppAttributes: ?*?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedFormatProperties: *const fn(
            self: *const IPortableDeviceServiceCapabilities,
            Format: ?*const Guid,
            ppKeys: ?*?*IPortableDeviceKeyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormatPropertyAttributes: *const fn(
            self: *const IPortableDeviceServiceCapabilities,
            Format: ?*const Guid,
            Property: ?*const PROPERTYKEY,
            ppAttributes: ?*?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedEvents: *const fn(
            self: *const IPortableDeviceServiceCapabilities,
            ppEvents: ?*?*IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEventAttributes: *const fn(
            self: *const IPortableDeviceServiceCapabilities,
            Event: ?*const Guid,
            ppAttributes: ?*?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEventParameterAttributes: *const fn(
            self: *const IPortableDeviceServiceCapabilities,
            Event: ?*const Guid,
            Parameter: ?*const PROPERTYKEY,
            ppAttributes: ?*?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInheritedServices: *const fn(
            self: *const IPortableDeviceServiceCapabilities,
            dwInheritanceType: u32,
            ppServices: ?*?*IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormatRenderingProfiles: *const fn(
            self: *const IPortableDeviceServiceCapabilities,
            Format: ?*const Guid,
            ppRenderingProfiles: ?*?*IPortableDeviceValuesCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedCommands: *const fn(
            self: *const IPortableDeviceServiceCapabilities,
            ppCommands: ?*?*IPortableDeviceKeyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCommandOptions: *const fn(
            self: *const IPortableDeviceServiceCapabilities,
            Command: ?*const PROPERTYKEY,
            ppOptions: ?*?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: *const fn(
            self: *const IPortableDeviceServiceCapabilities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetSupportedMethods(self: *const IPortableDeviceServiceCapabilities, ppMethods: ?*?*IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetSupportedMethods(self, ppMethods);
    }
    pub fn GetSupportedMethodsByFormat(self: *const IPortableDeviceServiceCapabilities, Format: ?*const Guid, ppMethods: ?*?*IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetSupportedMethodsByFormat(self, Format, ppMethods);
    }
    pub fn GetMethodAttributes(self: *const IPortableDeviceServiceCapabilities, Method: ?*const Guid, ppAttributes: ?*?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.GetMethodAttributes(self, Method, ppAttributes);
    }
    pub fn GetMethodParameterAttributes(self: *const IPortableDeviceServiceCapabilities, Method: ?*const Guid, Parameter: ?*const PROPERTYKEY, ppAttributes: ?*?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.GetMethodParameterAttributes(self, Method, Parameter, ppAttributes);
    }
    pub fn GetSupportedFormats(self: *const IPortableDeviceServiceCapabilities, ppFormats: ?*?*IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetSupportedFormats(self, ppFormats);
    }
    pub fn GetFormatAttributes(self: *const IPortableDeviceServiceCapabilities, Format: ?*const Guid, ppAttributes: ?*?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.GetFormatAttributes(self, Format, ppAttributes);
    }
    pub fn GetSupportedFormatProperties(self: *const IPortableDeviceServiceCapabilities, Format: ?*const Guid, ppKeys: ?*?*IPortableDeviceKeyCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetSupportedFormatProperties(self, Format, ppKeys);
    }
    pub fn GetFormatPropertyAttributes(self: *const IPortableDeviceServiceCapabilities, Format: ?*const Guid, Property: ?*const PROPERTYKEY, ppAttributes: ?*?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.GetFormatPropertyAttributes(self, Format, Property, ppAttributes);
    }
    pub fn GetSupportedEvents(self: *const IPortableDeviceServiceCapabilities, ppEvents: ?*?*IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetSupportedEvents(self, ppEvents);
    }
    pub fn GetEventAttributes(self: *const IPortableDeviceServiceCapabilities, Event: ?*const Guid, ppAttributes: ?*?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.GetEventAttributes(self, Event, ppAttributes);
    }
    pub fn GetEventParameterAttributes(self: *const IPortableDeviceServiceCapabilities, Event: ?*const Guid, Parameter: ?*const PROPERTYKEY, ppAttributes: ?*?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.GetEventParameterAttributes(self, Event, Parameter, ppAttributes);
    }
    pub fn GetInheritedServices(self: *const IPortableDeviceServiceCapabilities, dwInheritanceType: u32, ppServices: ?*?*IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetInheritedServices(self, dwInheritanceType, ppServices);
    }
    pub fn GetFormatRenderingProfiles(self: *const IPortableDeviceServiceCapabilities, Format: ?*const Guid, ppRenderingProfiles: ?*?*IPortableDeviceValuesCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetFormatRenderingProfiles(self, Format, ppRenderingProfiles);
    }
    pub fn GetSupportedCommands(self: *const IPortableDeviceServiceCapabilities, ppCommands: ?*?*IPortableDeviceKeyCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetSupportedCommands(self, ppCommands);
    }
    pub fn GetCommandOptions(self: *const IPortableDeviceServiceCapabilities, Command: ?*const PROPERTYKEY, ppOptions: ?*?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.GetCommandOptions(self, Command, ppOptions);
    }
    pub fn Cancel(self: *const IPortableDeviceServiceCapabilities) callconv(.Inline) HRESULT {
        return self.vtable.Cancel(self);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IPortableDeviceServiceMethods_Value = Guid.initString("e20333c9-fd34-412d-a381-cc6f2d820df7");
pub const IID_IPortableDeviceServiceMethods = &IID_IPortableDeviceServiceMethods_Value;
pub const IPortableDeviceServiceMethods = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Invoke: *const fn(
            self: *const IPortableDeviceServiceMethods,
            Method: ?*const Guid,
            pParameters: ?*IPortableDeviceValues,
            ppResults: ?*?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeAsync: *const fn(
            self: *const IPortableDeviceServiceMethods,
            Method: ?*const Guid,
            pParameters: ?*IPortableDeviceValues,
            pCallback: ?*IPortableDeviceServiceMethodCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: *const fn(
            self: *const IPortableDeviceServiceMethods,
            pCallback: ?*IPortableDeviceServiceMethodCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Invoke(self: *const IPortableDeviceServiceMethods, Method: ?*const Guid, pParameters: ?*IPortableDeviceValues, ppResults: ?*?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.Invoke(self, Method, pParameters, ppResults);
    }
    pub fn InvokeAsync(self: *const IPortableDeviceServiceMethods, Method: ?*const Guid, pParameters: ?*IPortableDeviceValues, pCallback: ?*IPortableDeviceServiceMethodCallback) callconv(.Inline) HRESULT {
        return self.vtable.InvokeAsync(self, Method, pParameters, pCallback);
    }
    pub fn Cancel(self: *const IPortableDeviceServiceMethods, pCallback: ?*IPortableDeviceServiceMethodCallback) callconv(.Inline) HRESULT {
        return self.vtable.Cancel(self, pCallback);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IPortableDeviceServiceMethodCallback_Value = Guid.initString("c424233c-afce-4828-a756-7ed7a2350083");
pub const IID_IPortableDeviceServiceMethodCallback = &IID_IPortableDeviceServiceMethodCallback_Value;
pub const IPortableDeviceServiceMethodCallback = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnComplete: *const fn(
            self: *const IPortableDeviceServiceMethodCallback,
            hrStatus: HRESULT,
            pResults: ?*IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnComplete(self: *const IPortableDeviceServiceMethodCallback, hrStatus: HRESULT, pResults: ?*IPortableDeviceValues) callconv(.Inline) HRESULT {
        return self.vtable.OnComplete(self, hrStatus, pResults);
    }
};

const IID_IPortableDeviceServiceActivation_Value = Guid.initString("e56b0534-d9b9-425c-9b99-75f97cb3d7c8");
pub const IID_IPortableDeviceServiceActivation = &IID_IPortableDeviceServiceActivation_Value;
pub const IPortableDeviceServiceActivation = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OpenAsync: *const fn(
            self: *const IPortableDeviceServiceActivation,
            pszPnPServiceID: ?[*:0]const u16,
            pClientInfo: ?*IPortableDeviceValues,
            pCallback: ?*IPortableDeviceServiceOpenCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelOpenAsync: *const fn(
            self: *const IPortableDeviceServiceActivation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OpenAsync(self: *const IPortableDeviceServiceActivation, pszPnPServiceID: ?[*:0]const u16, pClientInfo: ?*IPortableDeviceValues, pCallback: ?*IPortableDeviceServiceOpenCallback) callconv(.Inline) HRESULT {
        return self.vtable.OpenAsync(self, pszPnPServiceID, pClientInfo, pCallback);
    }
    pub fn CancelOpenAsync(self: *const IPortableDeviceServiceActivation) callconv(.Inline) HRESULT {
        return self.vtable.CancelOpenAsync(self);
    }
};

const IID_IPortableDeviceServiceOpenCallback_Value = Guid.initString("bced49c8-8efe-41ed-960b-61313abd47a9");
pub const IID_IPortableDeviceServiceOpenCallback = &IID_IPortableDeviceServiceOpenCallback_Value;
pub const IPortableDeviceServiceOpenCallback = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnComplete: *const fn(
            self: *const IPortableDeviceServiceOpenCallback,
            hrStatus: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnComplete(self: *const IPortableDeviceServiceOpenCallback, hrStatus: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.OnComplete(self, hrStatus);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IPortableDeviceDispatchFactory_Value = Guid.initString("5e1eafc3-e3d7-4132-96fa-759c0f9d1e0f");
pub const IID_IPortableDeviceDispatchFactory = &IID_IPortableDeviceDispatchFactory_Value;
pub const IPortableDeviceDispatchFactory = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDeviceDispatch: *const fn(
            self: *const IPortableDeviceDispatchFactory,
            pszPnPDeviceID: ?[*:0]const u16,
            ppDeviceDispatch: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetDeviceDispatch(self: *const IPortableDeviceDispatchFactory, pszPnPDeviceID: ?[*:0]const u16, ppDeviceDispatch: ?*?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.GetDeviceDispatch(self, pszPnPDeviceID, ppDeviceDispatch);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IPortableDeviceWebControl_Value = Guid.initString("94fc7953-5ca1-483a-8aee-df52e7747d00");
pub const IID_IPortableDeviceWebControl = &IID_IPortableDeviceWebControl_Value;
pub const IPortableDeviceWebControl = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetDeviceFromId: *const fn(
            self: *const IPortableDeviceWebControl,
            deviceId: ?BSTR,
            ppDevice: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceFromIdAsync: *const fn(
            self: *const IPortableDeviceWebControl,
            deviceId: ?BSTR,
            pCompletionHandler: ?*IDispatch,
            pErrorHandler: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GetDeviceFromId(self: *const IPortableDeviceWebControl, deviceId: ?BSTR, ppDevice: **IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.GetDeviceFromId(self, deviceId, ppDevice);
    }
    pub fn GetDeviceFromIdAsync(self: *const IPortableDeviceWebControl, deviceId: ?BSTR, pCompletionHandler: ?*IDispatch, pErrorHandler: ?*IDispatch) callconv(.Inline) HRESULT {
        return self.vtable.GetDeviceFromIdAsync(self, deviceId, pCompletionHandler, pErrorHandler);
    }
};

const CLSID_EnumBthMtpConnectors_Value = Guid.initString("a1570149-e645-4f43-8b0d-409b061db2fc");
pub const CLSID_EnumBthMtpConnectors = &CLSID_EnumBthMtpConnectors_Value;

const IID_IEnumPortableDeviceConnectors_Value = Guid.initString("bfdef549-9247-454f-bd82-06fe80853faa");
pub const IID_IEnumPortableDeviceConnectors = &IID_IEnumPortableDeviceConnectors_Value;
pub const IEnumPortableDeviceConnectors = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn(
            self: *const IEnumPortableDeviceConnectors,
            cRequested: u32,
            pConnectors: [*]?*IPortableDeviceConnector,
            pcFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumPortableDeviceConnectors,
            cConnectors: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumPortableDeviceConnectors,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumPortableDeviceConnectors,
            ppEnum: ?*?*IEnumPortableDeviceConnectors,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumPortableDeviceConnectors, cRequested: u32, pConnectors: [*]?*IPortableDeviceConnector, pcFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, cRequested, pConnectors, pcFetched);
    }
    pub fn Skip(self: *const IEnumPortableDeviceConnectors, cConnectors: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, cConnectors);
    }
    pub fn Reset(self: *const IEnumPortableDeviceConnectors) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumPortableDeviceConnectors, ppEnum: ?*?*IEnumPortableDeviceConnectors) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppEnum);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IPortableDeviceConnector_Value = Guid.initString("625e2df8-6392-4cf0-9ad1-3cfa5f17775c");
pub const IID_IPortableDeviceConnector = &IID_IPortableDeviceConnector_Value;
pub const IPortableDeviceConnector = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Connect: *const fn(
            self: *const IPortableDeviceConnector,
            pCallback: ?*IConnectionRequestCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: *const fn(
            self: *const IPortableDeviceConnector,
            pCallback: ?*IConnectionRequestCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: *const fn(
            self: *const IPortableDeviceConnector,
            pCallback: ?*IConnectionRequestCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn(
            self: *const IPortableDeviceConnector,
            pPropertyKey: ?*const DEVPROPKEY,
            pPropertyType: ?*u32,
            ppData: [*]?*u8,
            pcbData: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn(
            self: *const IPortableDeviceConnector,
            pPropertyKey: ?*const DEVPROPKEY,
            PropertyType: u32,
            pData: [*:0]const u8,
            cbData: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPnPID: *const fn(
            self: *const IPortableDeviceConnector,
            ppwszPnPID: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Connect(self: *const IPortableDeviceConnector, pCallback: ?*IConnectionRequestCallback) callconv(.Inline) HRESULT {
        return self.vtable.Connect(self, pCallback);
    }
    pub fn Disconnect(self: *const IPortableDeviceConnector, pCallback: ?*IConnectionRequestCallback) callconv(.Inline) HRESULT {
        return self.vtable.Disconnect(self, pCallback);
    }
    pub fn Cancel(self: *const IPortableDeviceConnector, pCallback: ?*IConnectionRequestCallback) callconv(.Inline) HRESULT {
        return self.vtable.Cancel(self, pCallback);
    }
    pub fn GetProperty(self: *const IPortableDeviceConnector, pPropertyKey: ?*const DEVPROPKEY, pPropertyType: ?*u32, ppData: [*]?*u8, pcbData: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetProperty(self, pPropertyKey, pPropertyType, ppData, pcbData);
    }
    pub fn SetProperty(self: *const IPortableDeviceConnector, pPropertyKey: ?*const DEVPROPKEY, PropertyType: u32, pData: [*:0]const u8, cbData: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetProperty(self, pPropertyKey, PropertyType, pData, cbData);
    }
    pub fn GetPnPID(self: *const IPortableDeviceConnector, ppwszPnPID: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetPnPID(self, ppwszPnPID);
    }
};

const IID_IConnectionRequestCallback_Value = Guid.initString("272c9ae0-7161-4ae0-91bd-9f448ee9c427");
pub const IID_IConnectionRequestCallback = &IID_IConnectionRequestCallback_Value;
pub const IConnectionRequestCallback = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnComplete: *const fn(
            self: *const IConnectionRequestCallback,
            hrStatus: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnComplete(self: *const IConnectionRequestCallback, hrStatus: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.OnComplete(self, hrStatus);
    }
};

pub const DEVICE_RADIO_STATE = enum(i32) {
    RADIO_ON = 0,
    SW_RADIO_OFF = 1,
    HW_RADIO_OFF = 2,
    SW_HW_RADIO_OFF = 3,
    HW_RADIO_ON_UNCONTROLLABLE = 4,
    RADIO_INVALID = 5,
    HW_RADIO_OFF_UNCONTROLLABLE = 6,
    pub const RADIO_MAX = .HW_RADIO_OFF_UNCONTROLLABLE;
};
pub const DRS_RADIO_ON = DEVICE_RADIO_STATE.RADIO_ON;
pub const DRS_SW_RADIO_OFF = DEVICE_RADIO_STATE.SW_RADIO_OFF;
pub const DRS_HW_RADIO_OFF = DEVICE_RADIO_STATE.HW_RADIO_OFF;
pub const DRS_SW_HW_RADIO_OFF = DEVICE_RADIO_STATE.SW_HW_RADIO_OFF;
pub const DRS_HW_RADIO_ON_UNCONTROLLABLE = DEVICE_RADIO_STATE.HW_RADIO_ON_UNCONTROLLABLE;
pub const DRS_RADIO_INVALID = DEVICE_RADIO_STATE.RADIO_INVALID;
pub const DRS_HW_RADIO_OFF_UNCONTROLLABLE = DEVICE_RADIO_STATE.HW_RADIO_OFF_UNCONTROLLABLE;
pub const DRS_RADIO_MAX = DEVICE_RADIO_STATE.HW_RADIO_OFF_UNCONTROLLABLE;

pub const SYSTEM_RADIO_STATE = enum(i32) {
    ENABLED = 0,
    DISABLED = 1,
};
pub const SRS_RADIO_ENABLED = SYSTEM_RADIO_STATE.ENABLED;
pub const SRS_RADIO_DISABLED = SYSTEM_RADIO_STATE.DISABLED;

const IID_IMediaRadioManager_Value = Guid.initString("6cfdcab5-fc47-42a5-9241-074b58830e73");
pub const IID_IMediaRadioManager = &IID_IMediaRadioManager_Value;
pub const IMediaRadioManager = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetRadioInstances: *const fn(
            self: *const IMediaRadioManager,
            ppCollection: ?*?*IRadioInstanceCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSystemRadioStateChange: *const fn(
            self: *const IMediaRadioManager,
            sysRadioState: SYSTEM_RADIO_STATE,
            uTimeoutSec: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetRadioInstances(self: *const IMediaRadioManager, ppCollection: ?*?*IRadioInstanceCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetRadioInstances(self, ppCollection);
    }
    pub fn OnSystemRadioStateChange(self: *const IMediaRadioManager, sysRadioState: SYSTEM_RADIO_STATE, uTimeoutSec: u32) callconv(.Inline) HRESULT {
        return self.vtable.OnSystemRadioStateChange(self, sysRadioState, uTimeoutSec);
    }
};

const IID_IRadioInstanceCollection_Value = Guid.initString("e5791fae-5665-4e0c-95be-5fde31644185");
pub const IID_IRadioInstanceCollection = &IID_IRadioInstanceCollection_Value;
pub const IRadioInstanceCollection = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn(
            self: *const IRadioInstanceCollection,
            pcInstance: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn(
            self: *const IRadioInstanceCollection,
            uIndex: u32,
            ppRadioInstance: ?*?*IRadioInstance,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetCount(self: *const IRadioInstanceCollection, pcInstance: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCount(self, pcInstance);
    }
    pub fn GetAt(self: *const IRadioInstanceCollection, uIndex: u32, ppRadioInstance: ?*?*IRadioInstance) callconv(.Inline) HRESULT {
        return self.vtable.GetAt(self, uIndex, ppRadioInstance);
    }
};

const IID_IRadioInstance_Value = Guid.initString("70aa1c9e-f2b4-4c61-86d3-6b9fb75fd1a2");
pub const IID_IRadioInstance = &IID_IRadioInstance_Value;
pub const IRadioInstance = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetRadioManagerSignature: *const fn(
            self: *const IRadioInstance,
            pguidSignature: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInstanceSignature: *const fn(
            self: *const IRadioInstance,
            pbstrId: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFriendlyName: *const fn(
            self: *const IRadioInstance,
            lcid: u32,
            pbstrName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRadioState: *const fn(
            self: *const IRadioInstance,
            pRadioState: ?*DEVICE_RADIO_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRadioState: *const fn(
            self: *const IRadioInstance,
            radioState: DEVICE_RADIO_STATE,
            uTimeoutSec: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsMultiComm: *const fn(
            self: *const IRadioInstance,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        IsAssociatingDevice: *const fn(
            self: *const IRadioInstance,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetRadioManagerSignature(self: *const IRadioInstance, pguidSignature: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetRadioManagerSignature(self, pguidSignature);
    }
    pub fn GetInstanceSignature(self: *const IRadioInstance, pbstrId: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetInstanceSignature(self, pbstrId);
    }
    pub fn GetFriendlyName(self: *const IRadioInstance, lcid: u32, pbstrName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetFriendlyName(self, lcid, pbstrName);
    }
    pub fn GetRadioState(self: *const IRadioInstance, pRadioState: ?*DEVICE_RADIO_STATE) callconv(.Inline) HRESULT {
        return self.vtable.GetRadioState(self, pRadioState);
    }
    pub fn SetRadioState(self: *const IRadioInstance, radioState: DEVICE_RADIO_STATE, uTimeoutSec: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetRadioState(self, radioState, uTimeoutSec);
    }
    pub fn IsMultiComm(self: *const IRadioInstance) callconv(.Inline) BOOL {
        return self.vtable.IsMultiComm(self);
    }
    pub fn IsAssociatingDevice(self: *const IRadioInstance) callconv(.Inline) BOOL {
        return self.vtable.IsAssociatingDevice(self);
    }
};

const IID_IMediaRadioManagerNotifySink_Value = Guid.initString("89d81f5f-c147-49ed-a11c-77b20c31e7c9");
pub const IID_IMediaRadioManagerNotifySink = &IID_IMediaRadioManagerNotifySink_Value;
pub const IMediaRadioManagerNotifySink = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnInstanceAdd: *const fn(
            self: *const IMediaRadioManagerNotifySink,
            pRadioInstance: ?*IRadioInstance,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnInstanceRemove: *const fn(
            self: *const IMediaRadioManagerNotifySink,
            bstrRadioInstanceId: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnInstanceRadioChange: *const fn(
            self: *const IMediaRadioManagerNotifySink,
            bstrRadioInstanceId: ?BSTR,
            radioState: DEVICE_RADIO_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn OnInstanceAdd(self: *const IMediaRadioManagerNotifySink, pRadioInstance: ?*IRadioInstance) callconv(.Inline) HRESULT {
        return self.vtable.OnInstanceAdd(self, pRadioInstance);
    }
    pub fn OnInstanceRemove(self: *const IMediaRadioManagerNotifySink, bstrRadioInstanceId: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.OnInstanceRemove(self, bstrRadioInstanceId);
    }
    pub fn OnInstanceRadioChange(self: *const IMediaRadioManagerNotifySink, bstrRadioInstanceId: ?BSTR, radioState: DEVICE_RADIO_STATE) callconv(.Inline) HRESULT {
        return self.vtable.OnInstanceRadioChange(self, bstrRadioInstanceId, radioState);
    }
};


//--------------------------------------------------------------------------------
// Section: Functions (1)
//--------------------------------------------------------------------------------
pub extern "dmprocessxmlfiltered" fn DMProcessConfigXMLFiltered(
    pszXmlIn: ?[*:0]const u16,
    rgszAllowedCspNodes: [*]?PWSTR,
    dwNumAllowedCspNodes: u32,
    pbstrXmlOut: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (15)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const DEVPROPKEY = @import("../devices/properties.zig").DEVPROPKEY;
const HRESULT = @import("../foundation.zig").HRESULT;
const IDispatch = @import("../system/com.zig").IDispatch;
const IPropertyStore = @import("../ui/shell/properties_system.zig").IPropertyStore;
const ISequentialStream = @import("../system/com.zig").ISequentialStream;
const IStream = @import("../system/com.zig").IStream;
const IUnknown = @import("../system/com.zig").IUnknown;
const LARGE_INTEGER = @import("../foundation.zig").LARGE_INTEGER;
const PROPERTYKEY = @import("../ui/shell/properties_system.zig").PROPERTYKEY;
const PROPVARIANT = @import("../system/com/structured_storage.zig").PROPVARIANT;
const PWSTR = @import("../foundation.zig").PWSTR;
const ULARGE_INTEGER = @import("../foundation.zig").ULARGE_INTEGER;

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
