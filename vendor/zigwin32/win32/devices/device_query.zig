//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (11)
//--------------------------------------------------------------------------------
pub const DEVPROP_OPERATOR = packed struct(u32) {
    EXISTS: u1 = 0,
    EQUALS: u1 = 0,
    LESS_THAN: u1 = 0,
    BITWISE_OR: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    LIST_CONTAINS: u1 = 0,
    LIST_ELEMENT_BEGINS_WITH: u1 = 0,
    LIST_ELEMENT_CONTAINS: u1 = 0,
    _15: u1 = 0,
    MODIFIER_NOT: u1 = 0,
    MODIFIER_IGNORE_CASE: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    AND_OPEN: u1 = 0,
    AND_CLOSE: u1 = 0,
    OR_CLOSE: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    ARRAY_CONTAINS: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const DEVPROP_OPERATOR_MODIFIER_NOT = DEVPROP_OPERATOR{ .MODIFIER_NOT = 1 };
pub const DEVPROP_OPERATOR_MODIFIER_IGNORE_CASE = DEVPROP_OPERATOR{ .MODIFIER_IGNORE_CASE = 1 };
pub const DEVPROP_OPERATOR_NONE = DEVPROP_OPERATOR{ };
pub const DEVPROP_OPERATOR_EXISTS = DEVPROP_OPERATOR{ .EXISTS = 1 };
pub const DEVPROP_OPERATOR_NOT_EXISTS = DEVPROP_OPERATOR{
    .EXISTS = 1,
    .MODIFIER_NOT = 1,
};
pub const DEVPROP_OPERATOR_EQUALS = DEVPROP_OPERATOR{ .EQUALS = 1 };
pub const DEVPROP_OPERATOR_NOT_EQUALS = DEVPROP_OPERATOR{
    .EQUALS = 1,
    .MODIFIER_NOT = 1,
};
pub const DEVPROP_OPERATOR_GREATER_THAN = DEVPROP_OPERATOR{
    .EXISTS = 1,
    .EQUALS = 1,
};
pub const DEVPROP_OPERATOR_LESS_THAN = DEVPROP_OPERATOR{ .LESS_THAN = 1 };
pub const DEVPROP_OPERATOR_GREATER_THAN_EQUALS = DEVPROP_OPERATOR{
    .EXISTS = 1,
    .LESS_THAN = 1,
};
pub const DEVPROP_OPERATOR_LESS_THAN_EQUALS = DEVPROP_OPERATOR{
    .EQUALS = 1,
    .LESS_THAN = 1,
};
pub const DEVPROP_OPERATOR_EQUALS_IGNORE_CASE = DEVPROP_OPERATOR{
    .EQUALS = 1,
    .MODIFIER_IGNORE_CASE = 1,
};
pub const DEVPROP_OPERATOR_NOT_EQUALS_IGNORE_CASE = DEVPROP_OPERATOR{
    .EQUALS = 1,
    .MODIFIER_NOT = 1,
    .MODIFIER_IGNORE_CASE = 1,
};
pub const DEVPROP_OPERATOR_BITWISE_AND = DEVPROP_OPERATOR{
    .EXISTS = 1,
    .EQUALS = 1,
    .LESS_THAN = 1,
};
pub const DEVPROP_OPERATOR_BITWISE_OR = DEVPROP_OPERATOR{ .BITWISE_OR = 1 };
pub const DEVPROP_OPERATOR_BEGINS_WITH = DEVPROP_OPERATOR{
    .EXISTS = 1,
    .BITWISE_OR = 1,
};
pub const DEVPROP_OPERATOR_ENDS_WITH = DEVPROP_OPERATOR{
    .EQUALS = 1,
    .BITWISE_OR = 1,
};
pub const DEVPROP_OPERATOR_CONTAINS = DEVPROP_OPERATOR{
    .EXISTS = 1,
    .EQUALS = 1,
    .BITWISE_OR = 1,
};
pub const DEVPROP_OPERATOR_BEGINS_WITH_IGNORE_CASE = DEVPROP_OPERATOR{
    .EXISTS = 1,
    .BITWISE_OR = 1,
    .MODIFIER_IGNORE_CASE = 1,
};
pub const DEVPROP_OPERATOR_ENDS_WITH_IGNORE_CASE = DEVPROP_OPERATOR{
    .EQUALS = 1,
    .BITWISE_OR = 1,
    .MODIFIER_IGNORE_CASE = 1,
};
pub const DEVPROP_OPERATOR_CONTAINS_IGNORE_CASE = DEVPROP_OPERATOR{
    .EXISTS = 1,
    .EQUALS = 1,
    .BITWISE_OR = 1,
    .MODIFIER_IGNORE_CASE = 1,
};
pub const DEVPROP_OPERATOR_LIST_CONTAINS = DEVPROP_OPERATOR{ .LIST_CONTAINS = 1 };
pub const DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH = DEVPROP_OPERATOR{ .LIST_ELEMENT_BEGINS_WITH = 1 };
pub const DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH = DEVPROP_OPERATOR{
    .LIST_CONTAINS = 1,
    .LIST_ELEMENT_BEGINS_WITH = 1,
};
pub const DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS = DEVPROP_OPERATOR{ .LIST_ELEMENT_CONTAINS = 1 };
pub const DEVPROP_OPERATOR_LIST_CONTAINS_IGNORE_CASE = DEVPROP_OPERATOR{
    .LIST_CONTAINS = 1,
    .MODIFIER_IGNORE_CASE = 1,
};
pub const DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH_IGNORE_CASE = DEVPROP_OPERATOR{
    .LIST_ELEMENT_BEGINS_WITH = 1,
    .MODIFIER_IGNORE_CASE = 1,
};
pub const DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH_IGNORE_CASE = DEVPROP_OPERATOR{
    .LIST_CONTAINS = 1,
    .LIST_ELEMENT_BEGINS_WITH = 1,
    .MODIFIER_IGNORE_CASE = 1,
};
pub const DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS_IGNORE_CASE = DEVPROP_OPERATOR{
    .LIST_ELEMENT_CONTAINS = 1,
    .MODIFIER_IGNORE_CASE = 1,
};
pub const DEVPROP_OPERATOR_AND_OPEN = DEVPROP_OPERATOR{ .AND_OPEN = 1 };
pub const DEVPROP_OPERATOR_AND_CLOSE = DEVPROP_OPERATOR{ .AND_CLOSE = 1 };
pub const DEVPROP_OPERATOR_OR_OPEN = DEVPROP_OPERATOR{
    .AND_OPEN = 1,
    .AND_CLOSE = 1,
};
pub const DEVPROP_OPERATOR_OR_CLOSE = DEVPROP_OPERATOR{ .OR_CLOSE = 1 };
pub const DEVPROP_OPERATOR_NOT_OPEN = DEVPROP_OPERATOR{
    .AND_OPEN = 1,
    .OR_CLOSE = 1,
};
pub const DEVPROP_OPERATOR_NOT_CLOSE = DEVPROP_OPERATOR{
    .AND_CLOSE = 1,
    .OR_CLOSE = 1,
};
pub const DEVPROP_OPERATOR_ARRAY_CONTAINS = DEVPROP_OPERATOR{ .ARRAY_CONTAINS = 1 };
pub const DEVPROP_OPERATOR_MASK_EVAL = DEVPROP_OPERATOR{
    .EXISTS = 1,
    .EQUALS = 1,
    .LESS_THAN = 1,
    .BITWISE_OR = 1,
    ._4 = 1,
    ._5 = 1,
    ._6 = 1,
    ._7 = 1,
    ._8 = 1,
    ._9 = 1,
    ._10 = 1,
    ._11 = 1,
};
pub const DEVPROP_OPERATOR_MASK_LIST = DEVPROP_OPERATOR{
    .LIST_CONTAINS = 1,
    .LIST_ELEMENT_BEGINS_WITH = 1,
    .LIST_ELEMENT_CONTAINS = 1,
    ._15 = 1,
};
pub const DEVPROP_OPERATOR_MASK_MODIFIER = DEVPROP_OPERATOR{
    .MODIFIER_NOT = 1,
    .MODIFIER_IGNORE_CASE = 1,
    ._18 = 1,
    ._19 = 1,
};
pub const DEVPROP_OPERATOR_MASK_NOT_LOGICAL = DEVPROP_OPERATOR{
    .EXISTS = 1,
    .EQUALS = 1,
    .LESS_THAN = 1,
    .BITWISE_OR = 1,
    ._4 = 1,
    ._5 = 1,
    ._6 = 1,
    ._7 = 1,
    ._8 = 1,
    ._9 = 1,
    ._10 = 1,
    ._11 = 1,
    .LIST_CONTAINS = 1,
    .LIST_ELEMENT_BEGINS_WITH = 1,
    .LIST_ELEMENT_CONTAINS = 1,
    ._15 = 1,
    .MODIFIER_NOT = 1,
    .MODIFIER_IGNORE_CASE = 1,
    ._18 = 1,
    ._19 = 1,
    .ARRAY_CONTAINS = 1,
    ._29 = 1,
    ._30 = 1,
    ._31 = 1,
};
pub const DEVPROP_OPERATOR_MASK_LOGICAL = DEVPROP_OPERATOR{
    .AND_OPEN = 1,
    .AND_CLOSE = 1,
    .OR_CLOSE = 1,
    ._23 = 1,
    ._24 = 1,
    ._25 = 1,
    ._26 = 1,
    ._27 = 1,
};
pub const DEVPROP_OPERATOR_MASK_ARRAY = DEVPROP_OPERATOR{
    .ARRAY_CONTAINS = 1,
    ._29 = 1,
    ._30 = 1,
    ._31 = 1,
};

pub const DEVPROP_FILTER_EXPRESSION = extern struct {
    Operator: DEVPROP_OPERATOR,
    Property: DEVPROPERTY,
};

pub const DEV_OBJECT_TYPE = enum(i32) {
    Unknown = 0,
    DeviceInterface = 1,
    DeviceContainer = 2,
    Device = 3,
    DeviceInterfaceClass = 4,
    AEP = 5,
    AEPContainer = 6,
    DeviceInstallerClass = 7,
    DeviceInterfaceDisplay = 8,
    DeviceContainerDisplay = 9,
    AEPService = 10,
    DevicePanel = 11,
};
pub const DevObjectTypeUnknown = DEV_OBJECT_TYPE.Unknown;
pub const DevObjectTypeDeviceInterface = DEV_OBJECT_TYPE.DeviceInterface;
pub const DevObjectTypeDeviceContainer = DEV_OBJECT_TYPE.DeviceContainer;
pub const DevObjectTypeDevice = DEV_OBJECT_TYPE.Device;
pub const DevObjectTypeDeviceInterfaceClass = DEV_OBJECT_TYPE.DeviceInterfaceClass;
pub const DevObjectTypeAEP = DEV_OBJECT_TYPE.AEP;
pub const DevObjectTypeAEPContainer = DEV_OBJECT_TYPE.AEPContainer;
pub const DevObjectTypeDeviceInstallerClass = DEV_OBJECT_TYPE.DeviceInstallerClass;
pub const DevObjectTypeDeviceInterfaceDisplay = DEV_OBJECT_TYPE.DeviceInterfaceDisplay;
pub const DevObjectTypeDeviceContainerDisplay = DEV_OBJECT_TYPE.DeviceContainerDisplay;
pub const DevObjectTypeAEPService = DEV_OBJECT_TYPE.AEPService;
pub const DevObjectTypeDevicePanel = DEV_OBJECT_TYPE.DevicePanel;

pub const DEV_QUERY_FLAGS = enum(i32) {
    None = 0,
    UpdateResults = 1,
    AllProperties = 2,
    Localize = 4,
    AsyncClose = 8,
};
pub const DevQueryFlagNone = DEV_QUERY_FLAGS.None;
pub const DevQueryFlagUpdateResults = DEV_QUERY_FLAGS.UpdateResults;
pub const DevQueryFlagAllProperties = DEV_QUERY_FLAGS.AllProperties;
pub const DevQueryFlagLocalize = DEV_QUERY_FLAGS.Localize;
pub const DevQueryFlagAsyncClose = DEV_QUERY_FLAGS.AsyncClose;

pub const DEV_QUERY_STATE = enum(i32) {
    Initialized = 0,
    EnumCompleted = 1,
    Aborted = 2,
    Closed = 3,
};
pub const DevQueryStateInitialized = DEV_QUERY_STATE.Initialized;
pub const DevQueryStateEnumCompleted = DEV_QUERY_STATE.EnumCompleted;
pub const DevQueryStateAborted = DEV_QUERY_STATE.Aborted;
pub const DevQueryStateClosed = DEV_QUERY_STATE.Closed;

pub const DEV_QUERY_RESULT_ACTION = enum(i32) {
    StateChange = 0,
    Add = 1,
    Update = 2,
    Remove = 3,
};
pub const DevQueryResultStateChange = DEV_QUERY_RESULT_ACTION.StateChange;
pub const DevQueryResultAdd = DEV_QUERY_RESULT_ACTION.Add;
pub const DevQueryResultUpdate = DEV_QUERY_RESULT_ACTION.Update;
pub const DevQueryResultRemove = DEV_QUERY_RESULT_ACTION.Remove;

pub const DEV_OBJECT = extern struct {
    ObjectType: DEV_OBJECT_TYPE,
    pszObjectId: ?[*:0]const u16,
    cPropertyCount: u32,
    pProperties: ?*const DEVPROPERTY,
};

pub const DEV_QUERY_RESULT_ACTION_DATA = extern struct {
    pub const _DEV_QUERY_RESULT_UPDATE_PAYLOAD = extern union {
        State: DEV_QUERY_STATE,
        DeviceObject: DEV_OBJECT,
    };
    Action: DEV_QUERY_RESULT_ACTION,
    Data: _DEV_QUERY_RESULT_UPDATE_PAYLOAD,
};

pub const DEV_QUERY_PARAMETER = extern struct {
    Key: DEVPROPKEY,
    Type: u32,
    BufferSize: u32,
    Buffer: ?*anyopaque,
};

pub const HDEVQUERY__ = extern struct {
    unused: i32,
};

pub const PDEV_QUERY_RESULT_CALLBACK = *const fn(
    hDevQuery: ?*HDEVQUERY__,
    pContext: ?*anyopaque,
    pActionData: ?*const DEV_QUERY_RESULT_ACTION_DATA,
) callconv(@import("std").os.windows.WINAPI) void;


//--------------------------------------------------------------------------------
// Section: Functions (14)
//--------------------------------------------------------------------------------
pub extern "api-ms-win-devices-query-l1-1-0" fn DevCreateObjectQuery(
    ObjectType: DEV_OBJECT_TYPE,
    QueryFlags: u32,
    cRequestedProperties: u32,
    pRequestedProperties: ?[*]const DEVPROPCOMPKEY,
    cFilterExpressionCount: u32,
    pFilter: ?[*]const DEVPROP_FILTER_EXPRESSION,
    pCallback: ?PDEV_QUERY_RESULT_CALLBACK,
    pContext: ?*anyopaque,
    phDevQuery: ?*?*HDEVQUERY__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-devices-query-l1-1-1" fn DevCreateObjectQueryEx(
    ObjectType: DEV_OBJECT_TYPE,
    QueryFlags: u32,
    cRequestedProperties: u32,
    pRequestedProperties: ?[*]const DEVPROPCOMPKEY,
    cFilterExpressionCount: u32,
    pFilter: ?[*]const DEVPROP_FILTER_EXPRESSION,
    cExtendedParameterCount: u32,
    pExtendedParameters: ?[*]const DEV_QUERY_PARAMETER,
    pCallback: ?PDEV_QUERY_RESULT_CALLBACK,
    pContext: ?*anyopaque,
    phDevQuery: ?*?*HDEVQUERY__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-devices-query-l1-1-0" fn DevCreateObjectQueryFromId(
    ObjectType: DEV_OBJECT_TYPE,
    pszObjectId: ?[*:0]const u16,
    QueryFlags: u32,
    cRequestedProperties: u32,
    pRequestedProperties: ?[*]const DEVPROPCOMPKEY,
    cFilterExpressionCount: u32,
    pFilter: ?[*]const DEVPROP_FILTER_EXPRESSION,
    pCallback: ?PDEV_QUERY_RESULT_CALLBACK,
    pContext: ?*anyopaque,
    phDevQuery: ?*?*HDEVQUERY__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-devices-query-l1-1-1" fn DevCreateObjectQueryFromIdEx(
    ObjectType: DEV_OBJECT_TYPE,
    pszObjectId: ?[*:0]const u16,
    QueryFlags: u32,
    cRequestedProperties: u32,
    pRequestedProperties: ?[*]const DEVPROPCOMPKEY,
    cFilterExpressionCount: u32,
    pFilter: ?[*]const DEVPROP_FILTER_EXPRESSION,
    cExtendedParameterCount: u32,
    pExtendedParameters: ?[*]const DEV_QUERY_PARAMETER,
    pCallback: ?PDEV_QUERY_RESULT_CALLBACK,
    pContext: ?*anyopaque,
    phDevQuery: ?*?*HDEVQUERY__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-devices-query-l1-1-0" fn DevCreateObjectQueryFromIds(
    ObjectType: DEV_OBJECT_TYPE,
    pszzObjectIds: ?[*]const u16,
    QueryFlags: u32,
    cRequestedProperties: u32,
    pRequestedProperties: ?[*]const DEVPROPCOMPKEY,
    cFilterExpressionCount: u32,
    pFilter: ?[*]const DEVPROP_FILTER_EXPRESSION,
    pCallback: ?PDEV_QUERY_RESULT_CALLBACK,
    pContext: ?*anyopaque,
    phDevQuery: ?*?*HDEVQUERY__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-devices-query-l1-1-1" fn DevCreateObjectQueryFromIdsEx(
    ObjectType: DEV_OBJECT_TYPE,
    pszzObjectIds: ?[*]const u16,
    QueryFlags: u32,
    cRequestedProperties: u32,
    pRequestedProperties: ?[*]const DEVPROPCOMPKEY,
    cFilterExpressionCount: u32,
    pFilter: ?[*]const DEVPROP_FILTER_EXPRESSION,
    cExtendedParameterCount: u32,
    pExtendedParameters: ?[*]const DEV_QUERY_PARAMETER,
    pCallback: ?PDEV_QUERY_RESULT_CALLBACK,
    pContext: ?*anyopaque,
    phDevQuery: ?*?*HDEVQUERY__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-devices-query-l1-1-0" fn DevCloseObjectQuery(
    hDevQuery: ?*HDEVQUERY__,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "api-ms-win-devices-query-l1-1-0" fn DevGetObjects(
    ObjectType: DEV_OBJECT_TYPE,
    QueryFlags: u32,
    cRequestedProperties: u32,
    pRequestedProperties: ?[*]const DEVPROPCOMPKEY,
    cFilterExpressionCount: u32,
    pFilter: ?[*]const DEVPROP_FILTER_EXPRESSION,
    pcObjectCount: ?*u32,
    ppObjects: ?*const ?*DEV_OBJECT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-devices-query-l1-1-1" fn DevGetObjectsEx(
    ObjectType: DEV_OBJECT_TYPE,
    QueryFlags: u32,
    cRequestedProperties: u32,
    pRequestedProperties: ?[*]const DEVPROPCOMPKEY,
    cFilterExpressionCount: u32,
    pFilter: ?[*]const DEVPROP_FILTER_EXPRESSION,
    cExtendedParameterCount: u32,
    pExtendedParameters: ?[*]const DEV_QUERY_PARAMETER,
    pcObjectCount: ?*u32,
    ppObjects: ?*const ?*DEV_OBJECT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-devices-query-l1-1-0" fn DevFreeObjects(
    cObjectCount: u32,
    pObjects: [*]const DEV_OBJECT,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "api-ms-win-devices-query-l1-1-0" fn DevGetObjectProperties(
    ObjectType: DEV_OBJECT_TYPE,
    pszObjectId: ?[*:0]const u16,
    QueryFlags: u32,
    cRequestedProperties: u32,
    pRequestedProperties: [*]const DEVPROPCOMPKEY,
    pcPropertyCount: ?*u32,
    ppProperties: ?*const ?*DEVPROPERTY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-devices-query-l1-1-1" fn DevGetObjectPropertiesEx(
    ObjectType: DEV_OBJECT_TYPE,
    pszObjectId: ?[*:0]const u16,
    QueryFlags: u32,
    cRequestedProperties: u32,
    pRequestedProperties: [*]const DEVPROPCOMPKEY,
    cExtendedParameterCount: u32,
    pExtendedParameters: ?[*]const DEV_QUERY_PARAMETER,
    pcPropertyCount: ?*u32,
    ppProperties: ?*const ?*DEVPROPERTY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-devices-query-l1-1-0" fn DevFreeObjectProperties(
    cPropertyCount: u32,
    pProperties: [*]const DEVPROPERTY,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "api-ms-win-devices-query-l1-1-0" fn DevFindProperty(
    pKey: ?*const DEVPROPKEY,
    Store: DEVPROPSTORE,
    pszLocaleName: ?[*:0]const u16,
    cProperties: u32,
    pProperties: ?[*]const DEVPROPERTY,
) callconv(@import("std").os.windows.WINAPI) ?*DEVPROPERTY;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (6)
//--------------------------------------------------------------------------------
const DEVPROPCOMPKEY = @import("../devices/properties.zig").DEVPROPCOMPKEY;
const DEVPROPERTY = @import("../devices/properties.zig").DEVPROPERTY;
const DEVPROPKEY = @import("../devices/properties.zig").DEVPROPKEY;
const DEVPROPSTORE = @import("../devices/properties.zig").DEVPROPSTORE;
const HRESULT = @import("../foundation.zig").HRESULT;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PDEV_QUERY_RESULT_CALLBACK")) { _ = PDEV_QUERY_RESULT_CALLBACK; }

    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
