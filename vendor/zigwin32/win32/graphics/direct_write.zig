//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (7)
//--------------------------------------------------------------------------------
pub const DWRITE_ALPHA_MAX = @as(u32, 255);
pub const FACILITY_DWRITE = @as(u32, 2200);
pub const DWRITE_ERR_BASE = @as(u32, 20480);
pub const DWRITE_E_REMOTEFONT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2003283955));
pub const DWRITE_E_DOWNLOADCANCELLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2003283954));
pub const DWRITE_E_DOWNLOADFAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2003283953));
pub const DWRITE_E_TOOMANYDOWNLOADS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2003283952));

//--------------------------------------------------------------------------------
// Section: Types (194)
//--------------------------------------------------------------------------------
pub const DWRITE_FONT_AXIS_TAG = enum(u32) {
    WEIGHT = 1952999287,
    WIDTH = 1752458359,
    SLANT = 1953393779,
    OPTICAL_SIZE = 2054385775,
    ITALIC = 1818326121,
};
pub const DWRITE_FONT_AXIS_TAG_WEIGHT = DWRITE_FONT_AXIS_TAG.WEIGHT;
pub const DWRITE_FONT_AXIS_TAG_WIDTH = DWRITE_FONT_AXIS_TAG.WIDTH;
pub const DWRITE_FONT_AXIS_TAG_SLANT = DWRITE_FONT_AXIS_TAG.SLANT;
pub const DWRITE_FONT_AXIS_TAG_OPTICAL_SIZE = DWRITE_FONT_AXIS_TAG.OPTICAL_SIZE;
pub const DWRITE_FONT_AXIS_TAG_ITALIC = DWRITE_FONT_AXIS_TAG.ITALIC;

pub const DWRITE_COLOR_F = extern struct {
    r: f32,
    g: f32,
    b: f32,
    a: f32,
};

pub const DWRITE_MEASURING_MODE = enum(i32) {
    NATURAL = 0,
    GDI_CLASSIC = 1,
    GDI_NATURAL = 2,
};
pub const DWRITE_MEASURING_MODE_NATURAL = DWRITE_MEASURING_MODE.NATURAL;
pub const DWRITE_MEASURING_MODE_GDI_CLASSIC = DWRITE_MEASURING_MODE.GDI_CLASSIC;
pub const DWRITE_MEASURING_MODE_GDI_NATURAL = DWRITE_MEASURING_MODE.GDI_NATURAL;

pub const DWRITE_GLYPH_IMAGE_FORMATS = packed struct(u32) {
    TRUETYPE: u1 = 0,
    CFF: u1 = 0,
    COLR: u1 = 0,
    SVG: u1 = 0,
    PNG: u1 = 0,
    JPEG: u1 = 0,
    TIFF: u1 = 0,
    PREMULTIPLIED_B8G8R8A8: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const DWRITE_GLYPH_IMAGE_FORMATS_NONE = DWRITE_GLYPH_IMAGE_FORMATS{ };
pub const DWRITE_GLYPH_IMAGE_FORMATS_TRUETYPE = DWRITE_GLYPH_IMAGE_FORMATS{ .TRUETYPE = 1 };
pub const DWRITE_GLYPH_IMAGE_FORMATS_CFF = DWRITE_GLYPH_IMAGE_FORMATS{ .CFF = 1 };
pub const DWRITE_GLYPH_IMAGE_FORMATS_COLR = DWRITE_GLYPH_IMAGE_FORMATS{ .COLR = 1 };
pub const DWRITE_GLYPH_IMAGE_FORMATS_SVG = DWRITE_GLYPH_IMAGE_FORMATS{ .SVG = 1 };
pub const DWRITE_GLYPH_IMAGE_FORMATS_PNG = DWRITE_GLYPH_IMAGE_FORMATS{ .PNG = 1 };
pub const DWRITE_GLYPH_IMAGE_FORMATS_JPEG = DWRITE_GLYPH_IMAGE_FORMATS{ .JPEG = 1 };
pub const DWRITE_GLYPH_IMAGE_FORMATS_TIFF = DWRITE_GLYPH_IMAGE_FORMATS{ .TIFF = 1 };
pub const DWRITE_GLYPH_IMAGE_FORMATS_PREMULTIPLIED_B8G8R8A8 = DWRITE_GLYPH_IMAGE_FORMATS{ .PREMULTIPLIED_B8G8R8A8 = 1 };

pub const DWRITE_FONT_FILE_TYPE = enum(i32) {
    UNKNOWN = 0,
    CFF = 1,
    TRUETYPE = 2,
    OPENTYPE_COLLECTION = 3,
    TYPE1_PFM = 4,
    TYPE1_PFB = 5,
    VECTOR = 6,
    BITMAP = 7,
    pub const TRUETYPE_COLLECTION = .OPENTYPE_COLLECTION;
};
pub const DWRITE_FONT_FILE_TYPE_UNKNOWN = DWRITE_FONT_FILE_TYPE.UNKNOWN;
pub const DWRITE_FONT_FILE_TYPE_CFF = DWRITE_FONT_FILE_TYPE.CFF;
pub const DWRITE_FONT_FILE_TYPE_TRUETYPE = DWRITE_FONT_FILE_TYPE.TRUETYPE;
pub const DWRITE_FONT_FILE_TYPE_OPENTYPE_COLLECTION = DWRITE_FONT_FILE_TYPE.OPENTYPE_COLLECTION;
pub const DWRITE_FONT_FILE_TYPE_TYPE1_PFM = DWRITE_FONT_FILE_TYPE.TYPE1_PFM;
pub const DWRITE_FONT_FILE_TYPE_TYPE1_PFB = DWRITE_FONT_FILE_TYPE.TYPE1_PFB;
pub const DWRITE_FONT_FILE_TYPE_VECTOR = DWRITE_FONT_FILE_TYPE.VECTOR;
pub const DWRITE_FONT_FILE_TYPE_BITMAP = DWRITE_FONT_FILE_TYPE.BITMAP;
pub const DWRITE_FONT_FILE_TYPE_TRUETYPE_COLLECTION = DWRITE_FONT_FILE_TYPE.OPENTYPE_COLLECTION;

pub const DWRITE_FONT_FACE_TYPE = enum(i32) {
    CFF = 0,
    TRUETYPE = 1,
    OPENTYPE_COLLECTION = 2,
    TYPE1 = 3,
    VECTOR = 4,
    BITMAP = 5,
    UNKNOWN = 6,
    RAW_CFF = 7,
    pub const TRUETYPE_COLLECTION = .OPENTYPE_COLLECTION;
};
pub const DWRITE_FONT_FACE_TYPE_CFF = DWRITE_FONT_FACE_TYPE.CFF;
pub const DWRITE_FONT_FACE_TYPE_TRUETYPE = DWRITE_FONT_FACE_TYPE.TRUETYPE;
pub const DWRITE_FONT_FACE_TYPE_OPENTYPE_COLLECTION = DWRITE_FONT_FACE_TYPE.OPENTYPE_COLLECTION;
pub const DWRITE_FONT_FACE_TYPE_TYPE1 = DWRITE_FONT_FACE_TYPE.TYPE1;
pub const DWRITE_FONT_FACE_TYPE_VECTOR = DWRITE_FONT_FACE_TYPE.VECTOR;
pub const DWRITE_FONT_FACE_TYPE_BITMAP = DWRITE_FONT_FACE_TYPE.BITMAP;
pub const DWRITE_FONT_FACE_TYPE_UNKNOWN = DWRITE_FONT_FACE_TYPE.UNKNOWN;
pub const DWRITE_FONT_FACE_TYPE_RAW_CFF = DWRITE_FONT_FACE_TYPE.RAW_CFF;
pub const DWRITE_FONT_FACE_TYPE_TRUETYPE_COLLECTION = DWRITE_FONT_FACE_TYPE.OPENTYPE_COLLECTION;

pub const DWRITE_FONT_SIMULATIONS = packed struct(u32) {
    BOLD: u1 = 0,
    OBLIQUE: u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const DWRITE_FONT_SIMULATIONS_NONE = DWRITE_FONT_SIMULATIONS{ };
pub const DWRITE_FONT_SIMULATIONS_BOLD = DWRITE_FONT_SIMULATIONS{ .BOLD = 1 };
pub const DWRITE_FONT_SIMULATIONS_OBLIQUE = DWRITE_FONT_SIMULATIONS{ .OBLIQUE = 1 };

pub const DWRITE_FONT_WEIGHT = enum(i32) {
    THIN = 100,
    EXTRA_LIGHT = 200,
    LIGHT = 300,
    SEMI_LIGHT = 350,
    NORMAL = 400,
    MEDIUM = 500,
    DEMI_BOLD = 600,
    BOLD = 700,
    EXTRA_BOLD = 800,
    BLACK = 900,
    EXTRA_BLACK = 950,
    pub const ULTRA_LIGHT = .EXTRA_LIGHT;
    pub const REGULAR = .NORMAL;
    pub const SEMI_BOLD = .DEMI_BOLD;
    pub const ULTRA_BOLD = .EXTRA_BOLD;
    pub const HEAVY = .BLACK;
    pub const ULTRA_BLACK = .EXTRA_BLACK;
};
pub const DWRITE_FONT_WEIGHT_THIN = DWRITE_FONT_WEIGHT.THIN;
pub const DWRITE_FONT_WEIGHT_EXTRA_LIGHT = DWRITE_FONT_WEIGHT.EXTRA_LIGHT;
pub const DWRITE_FONT_WEIGHT_ULTRA_LIGHT = DWRITE_FONT_WEIGHT.EXTRA_LIGHT;
pub const DWRITE_FONT_WEIGHT_LIGHT = DWRITE_FONT_WEIGHT.LIGHT;
pub const DWRITE_FONT_WEIGHT_SEMI_LIGHT = DWRITE_FONT_WEIGHT.SEMI_LIGHT;
pub const DWRITE_FONT_WEIGHT_NORMAL = DWRITE_FONT_WEIGHT.NORMAL;
pub const DWRITE_FONT_WEIGHT_REGULAR = DWRITE_FONT_WEIGHT.NORMAL;
pub const DWRITE_FONT_WEIGHT_MEDIUM = DWRITE_FONT_WEIGHT.MEDIUM;
pub const DWRITE_FONT_WEIGHT_DEMI_BOLD = DWRITE_FONT_WEIGHT.DEMI_BOLD;
pub const DWRITE_FONT_WEIGHT_SEMI_BOLD = DWRITE_FONT_WEIGHT.DEMI_BOLD;
pub const DWRITE_FONT_WEIGHT_BOLD = DWRITE_FONT_WEIGHT.BOLD;
pub const DWRITE_FONT_WEIGHT_EXTRA_BOLD = DWRITE_FONT_WEIGHT.EXTRA_BOLD;
pub const DWRITE_FONT_WEIGHT_ULTRA_BOLD = DWRITE_FONT_WEIGHT.EXTRA_BOLD;
pub const DWRITE_FONT_WEIGHT_BLACK = DWRITE_FONT_WEIGHT.BLACK;
pub const DWRITE_FONT_WEIGHT_HEAVY = DWRITE_FONT_WEIGHT.BLACK;
pub const DWRITE_FONT_WEIGHT_EXTRA_BLACK = DWRITE_FONT_WEIGHT.EXTRA_BLACK;
pub const DWRITE_FONT_WEIGHT_ULTRA_BLACK = DWRITE_FONT_WEIGHT.EXTRA_BLACK;

pub const DWRITE_FONT_STRETCH = enum(i32) {
    UNDEFINED = 0,
    ULTRA_CONDENSED = 1,
    EXTRA_CONDENSED = 2,
    CONDENSED = 3,
    SEMI_CONDENSED = 4,
    NORMAL = 5,
    SEMI_EXPANDED = 6,
    EXPANDED = 7,
    EXTRA_EXPANDED = 8,
    ULTRA_EXPANDED = 9,
    pub const MEDIUM = .NORMAL;
};
pub const DWRITE_FONT_STRETCH_UNDEFINED = DWRITE_FONT_STRETCH.UNDEFINED;
pub const DWRITE_FONT_STRETCH_ULTRA_CONDENSED = DWRITE_FONT_STRETCH.ULTRA_CONDENSED;
pub const DWRITE_FONT_STRETCH_EXTRA_CONDENSED = DWRITE_FONT_STRETCH.EXTRA_CONDENSED;
pub const DWRITE_FONT_STRETCH_CONDENSED = DWRITE_FONT_STRETCH.CONDENSED;
pub const DWRITE_FONT_STRETCH_SEMI_CONDENSED = DWRITE_FONT_STRETCH.SEMI_CONDENSED;
pub const DWRITE_FONT_STRETCH_NORMAL = DWRITE_FONT_STRETCH.NORMAL;
pub const DWRITE_FONT_STRETCH_MEDIUM = DWRITE_FONT_STRETCH.NORMAL;
pub const DWRITE_FONT_STRETCH_SEMI_EXPANDED = DWRITE_FONT_STRETCH.SEMI_EXPANDED;
pub const DWRITE_FONT_STRETCH_EXPANDED = DWRITE_FONT_STRETCH.EXPANDED;
pub const DWRITE_FONT_STRETCH_EXTRA_EXPANDED = DWRITE_FONT_STRETCH.EXTRA_EXPANDED;
pub const DWRITE_FONT_STRETCH_ULTRA_EXPANDED = DWRITE_FONT_STRETCH.ULTRA_EXPANDED;

pub const DWRITE_FONT_STYLE = enum(i32) {
    NORMAL = 0,
    OBLIQUE = 1,
    ITALIC = 2,
};
pub const DWRITE_FONT_STYLE_NORMAL = DWRITE_FONT_STYLE.NORMAL;
pub const DWRITE_FONT_STYLE_OBLIQUE = DWRITE_FONT_STYLE.OBLIQUE;
pub const DWRITE_FONT_STYLE_ITALIC = DWRITE_FONT_STYLE.ITALIC;

pub const DWRITE_INFORMATIONAL_STRING_ID = enum(i32) {
    NONE = 0,
    COPYRIGHT_NOTICE = 1,
    VERSION_STRINGS = 2,
    TRADEMARK = 3,
    MANUFACTURER = 4,
    DESIGNER = 5,
    DESIGNER_URL = 6,
    DESCRIPTION = 7,
    FONT_VENDOR_URL = 8,
    LICENSE_DESCRIPTION = 9,
    LICENSE_INFO_URL = 10,
    WIN32_FAMILY_NAMES = 11,
    WIN32_SUBFAMILY_NAMES = 12,
    TYPOGRAPHIC_FAMILY_NAMES = 13,
    TYPOGRAPHIC_SUBFAMILY_NAMES = 14,
    SAMPLE_TEXT = 15,
    FULL_NAME = 16,
    POSTSCRIPT_NAME = 17,
    POSTSCRIPT_CID_NAME = 18,
    WEIGHT_STRETCH_STYLE_FAMILY_NAME = 19,
    DESIGN_SCRIPT_LANGUAGE_TAG = 20,
    SUPPORTED_SCRIPT_LANGUAGE_TAG = 21,
    pub const PREFERRED_FAMILY_NAMES = .TYPOGRAPHIC_FAMILY_NAMES;
    pub const PREFERRED_SUBFAMILY_NAMES = .TYPOGRAPHIC_SUBFAMILY_NAMES;
    pub const WWS_FAMILY_NAME = .WEIGHT_STRETCH_STYLE_FAMILY_NAME;
};
pub const DWRITE_INFORMATIONAL_STRING_NONE = DWRITE_INFORMATIONAL_STRING_ID.NONE;
pub const DWRITE_INFORMATIONAL_STRING_COPYRIGHT_NOTICE = DWRITE_INFORMATIONAL_STRING_ID.COPYRIGHT_NOTICE;
pub const DWRITE_INFORMATIONAL_STRING_VERSION_STRINGS = DWRITE_INFORMATIONAL_STRING_ID.VERSION_STRINGS;
pub const DWRITE_INFORMATIONAL_STRING_TRADEMARK = DWRITE_INFORMATIONAL_STRING_ID.TRADEMARK;
pub const DWRITE_INFORMATIONAL_STRING_MANUFACTURER = DWRITE_INFORMATIONAL_STRING_ID.MANUFACTURER;
pub const DWRITE_INFORMATIONAL_STRING_DESIGNER = DWRITE_INFORMATIONAL_STRING_ID.DESIGNER;
pub const DWRITE_INFORMATIONAL_STRING_DESIGNER_URL = DWRITE_INFORMATIONAL_STRING_ID.DESIGNER_URL;
pub const DWRITE_INFORMATIONAL_STRING_DESCRIPTION = DWRITE_INFORMATIONAL_STRING_ID.DESCRIPTION;
pub const DWRITE_INFORMATIONAL_STRING_FONT_VENDOR_URL = DWRITE_INFORMATIONAL_STRING_ID.FONT_VENDOR_URL;
pub const DWRITE_INFORMATIONAL_STRING_LICENSE_DESCRIPTION = DWRITE_INFORMATIONAL_STRING_ID.LICENSE_DESCRIPTION;
pub const DWRITE_INFORMATIONAL_STRING_LICENSE_INFO_URL = DWRITE_INFORMATIONAL_STRING_ID.LICENSE_INFO_URL;
pub const DWRITE_INFORMATIONAL_STRING_WIN32_FAMILY_NAMES = DWRITE_INFORMATIONAL_STRING_ID.WIN32_FAMILY_NAMES;
pub const DWRITE_INFORMATIONAL_STRING_WIN32_SUBFAMILY_NAMES = DWRITE_INFORMATIONAL_STRING_ID.WIN32_SUBFAMILY_NAMES;
pub const DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_FAMILY_NAMES = DWRITE_INFORMATIONAL_STRING_ID.TYPOGRAPHIC_FAMILY_NAMES;
pub const DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_SUBFAMILY_NAMES = DWRITE_INFORMATIONAL_STRING_ID.TYPOGRAPHIC_SUBFAMILY_NAMES;
pub const DWRITE_INFORMATIONAL_STRING_SAMPLE_TEXT = DWRITE_INFORMATIONAL_STRING_ID.SAMPLE_TEXT;
pub const DWRITE_INFORMATIONAL_STRING_FULL_NAME = DWRITE_INFORMATIONAL_STRING_ID.FULL_NAME;
pub const DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_NAME = DWRITE_INFORMATIONAL_STRING_ID.POSTSCRIPT_NAME;
pub const DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_CID_NAME = DWRITE_INFORMATIONAL_STRING_ID.POSTSCRIPT_CID_NAME;
pub const DWRITE_INFORMATIONAL_STRING_WEIGHT_STRETCH_STYLE_FAMILY_NAME = DWRITE_INFORMATIONAL_STRING_ID.WEIGHT_STRETCH_STYLE_FAMILY_NAME;
pub const DWRITE_INFORMATIONAL_STRING_DESIGN_SCRIPT_LANGUAGE_TAG = DWRITE_INFORMATIONAL_STRING_ID.DESIGN_SCRIPT_LANGUAGE_TAG;
pub const DWRITE_INFORMATIONAL_STRING_SUPPORTED_SCRIPT_LANGUAGE_TAG = DWRITE_INFORMATIONAL_STRING_ID.SUPPORTED_SCRIPT_LANGUAGE_TAG;
pub const DWRITE_INFORMATIONAL_STRING_PREFERRED_FAMILY_NAMES = DWRITE_INFORMATIONAL_STRING_ID.TYPOGRAPHIC_FAMILY_NAMES;
pub const DWRITE_INFORMATIONAL_STRING_PREFERRED_SUBFAMILY_NAMES = DWRITE_INFORMATIONAL_STRING_ID.TYPOGRAPHIC_SUBFAMILY_NAMES;
pub const DWRITE_INFORMATIONAL_STRING_WWS_FAMILY_NAME = DWRITE_INFORMATIONAL_STRING_ID.WEIGHT_STRETCH_STYLE_FAMILY_NAME;

pub const DWRITE_FONT_METRICS = extern struct {
    designUnitsPerEm: u16,
    ascent: u16,
    descent: u16,
    lineGap: i16,
    capHeight: u16,
    xHeight: u16,
    underlinePosition: i16,
    underlineThickness: u16,
    strikethroughPosition: i16,
    strikethroughThickness: u16,
};

pub const DWRITE_GLYPH_METRICS = extern struct {
    leftSideBearing: i32,
    advanceWidth: u32,
    rightSideBearing: i32,
    topSideBearing: i32,
    advanceHeight: u32,
    bottomSideBearing: i32,
    verticalOriginY: i32,
};

pub const DWRITE_GLYPH_OFFSET = extern struct {
    advanceOffset: f32,
    ascenderOffset: f32,
};

pub const DWRITE_FACTORY_TYPE = enum(i32) {
    SHARED = 0,
    ISOLATED = 1,
};
pub const DWRITE_FACTORY_TYPE_SHARED = DWRITE_FACTORY_TYPE.SHARED;
pub const DWRITE_FACTORY_TYPE_ISOLATED = DWRITE_FACTORY_TYPE.ISOLATED;

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteFontFileLoader_Value = Guid.initString("727cad4e-d6af-4c9e-8a08-d695b11caa49");
pub const IID_IDWriteFontFileLoader = &IID_IDWriteFontFileLoader_Value;
pub const IDWriteFontFileLoader = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateStreamFromKey: *const fn(
            self: *const IDWriteFontFileLoader,
            // TODO: what to do with BytesParamIndex 1?
            fontFileReferenceKey: ?*const anyopaque,
            fontFileReferenceKeySize: u32,
            fontFileStream: **IDWriteFontFileStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateStreamFromKey(self: *const IDWriteFontFileLoader, fontFileReferenceKey: ?*const anyopaque, fontFileReferenceKeySize: u32, fontFileStream: **IDWriteFontFileStream) callconv(.Inline) HRESULT {
        return self.vtable.CreateStreamFromKey(self, fontFileReferenceKey, fontFileReferenceKeySize, fontFileStream);
    }
};

const IID_IDWriteLocalFontFileLoader_Value = Guid.initString("b2d9f3ec-c9fe-4a11-a2ec-d86208f7c0a2");
pub const IID_IDWriteLocalFontFileLoader = &IID_IDWriteLocalFontFileLoader_Value;
pub const IDWriteLocalFontFileLoader = extern union {
    pub const VTable = extern struct {
        base: IDWriteFontFileLoader.VTable,
        GetFilePathLengthFromKey: *const fn(
            self: *const IDWriteLocalFontFileLoader,
            // TODO: what to do with BytesParamIndex 1?
            fontFileReferenceKey: ?*const anyopaque,
            fontFileReferenceKeySize: u32,
            filePathLength: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilePathFromKey: *const fn(
            self: *const IDWriteLocalFontFileLoader,
            // TODO: what to do with BytesParamIndex 1?
            fontFileReferenceKey: ?*const anyopaque,
            fontFileReferenceKeySize: u32,
            filePath: [*:0]u16,
            filePathSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastWriteTimeFromKey: *const fn(
            self: *const IDWriteLocalFontFileLoader,
            // TODO: what to do with BytesParamIndex 1?
            fontFileReferenceKey: ?*const anyopaque,
            fontFileReferenceKeySize: u32,
            lastWriteTime: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteFontFileLoader: IDWriteFontFileLoader,
    IUnknown: IUnknown,
    pub fn GetFilePathLengthFromKey(self: *const IDWriteLocalFontFileLoader, fontFileReferenceKey: ?*const anyopaque, fontFileReferenceKeySize: u32, filePathLength: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetFilePathLengthFromKey(self, fontFileReferenceKey, fontFileReferenceKeySize, filePathLength);
    }
    pub fn GetFilePathFromKey(self: *const IDWriteLocalFontFileLoader, fontFileReferenceKey: ?*const anyopaque, fontFileReferenceKeySize: u32, filePath: [*:0]u16, filePathSize: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetFilePathFromKey(self, fontFileReferenceKey, fontFileReferenceKeySize, filePath, filePathSize);
    }
    pub fn GetLastWriteTimeFromKey(self: *const IDWriteLocalFontFileLoader, fontFileReferenceKey: ?*const anyopaque, fontFileReferenceKeySize: u32, lastWriteTime: ?*FILETIME) callconv(.Inline) HRESULT {
        return self.vtable.GetLastWriteTimeFromKey(self, fontFileReferenceKey, fontFileReferenceKeySize, lastWriteTime);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteFontFileStream_Value = Guid.initString("6d4865fe-0ab8-4d91-8f62-5dd6be34a3e0");
pub const IID_IDWriteFontFileStream = &IID_IDWriteFontFileStream_Value;
pub const IDWriteFontFileStream = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ReadFileFragment: *const fn(
            self: *const IDWriteFontFileStream,
            fragmentStart: ?*const ?*anyopaque,
            fileOffset: u64,
            fragmentSize: u64,
            fragmentContext: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseFileFragment: *const fn(
            self: *const IDWriteFontFileStream,
            fragmentContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetFileSize: *const fn(
            self: *const IDWriteFontFileStream,
            fileSize: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastWriteTime: *const fn(
            self: *const IDWriteFontFileStream,
            lastWriteTime: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn ReadFileFragment(self: *const IDWriteFontFileStream, fragmentStart: ?*const ?*anyopaque, fileOffset: u64, fragmentSize: u64, fragmentContext: ?*?*anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.ReadFileFragment(self, fragmentStart, fileOffset, fragmentSize, fragmentContext);
    }
    pub fn ReleaseFileFragment(self: *const IDWriteFontFileStream, fragmentContext: ?*anyopaque) callconv(.Inline) void {
        return self.vtable.ReleaseFileFragment(self, fragmentContext);
    }
    pub fn GetFileSize(self: *const IDWriteFontFileStream, fileSize: ?*u64) callconv(.Inline) HRESULT {
        return self.vtable.GetFileSize(self, fileSize);
    }
    pub fn GetLastWriteTime(self: *const IDWriteFontFileStream, lastWriteTime: ?*u64) callconv(.Inline) HRESULT {
        return self.vtable.GetLastWriteTime(self, lastWriteTime);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteFontFile_Value = Guid.initString("739d886a-cef5-47dc-8769-1a8b41bebbb0");
pub const IID_IDWriteFontFile = &IID_IDWriteFontFile_Value;
pub const IDWriteFontFile = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetReferenceKey: *const fn(
            self: *const IDWriteFontFile,
            fontFileReferenceKey: ?*const ?*anyopaque,
            fontFileReferenceKeySize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLoader: *const fn(
            self: *const IDWriteFontFile,
            fontFileLoader: **IDWriteFontFileLoader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Analyze: *const fn(
            self: *const IDWriteFontFile,
            isSupportedFontType: ?*BOOL,
            fontFileType: ?*DWRITE_FONT_FILE_TYPE,
            fontFaceType: ?*DWRITE_FONT_FACE_TYPE,
            numberOfFaces: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetReferenceKey(self: *const IDWriteFontFile, fontFileReferenceKey: ?*const ?*anyopaque, fontFileReferenceKeySize: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetReferenceKey(self, fontFileReferenceKey, fontFileReferenceKeySize);
    }
    pub fn GetLoader(self: *const IDWriteFontFile, fontFileLoader: **IDWriteFontFileLoader) callconv(.Inline) HRESULT {
        return self.vtable.GetLoader(self, fontFileLoader);
    }
    pub fn Analyze(self: *const IDWriteFontFile, isSupportedFontType: ?*BOOL, fontFileType: ?*DWRITE_FONT_FILE_TYPE, fontFaceType: ?*DWRITE_FONT_FACE_TYPE, numberOfFaces: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Analyze(self, isSupportedFontType, fontFileType, fontFaceType, numberOfFaces);
    }
};

pub const DWRITE_PIXEL_GEOMETRY = enum(i32) {
    FLAT = 0,
    RGB = 1,
    BGR = 2,
};
pub const DWRITE_PIXEL_GEOMETRY_FLAT = DWRITE_PIXEL_GEOMETRY.FLAT;
pub const DWRITE_PIXEL_GEOMETRY_RGB = DWRITE_PIXEL_GEOMETRY.RGB;
pub const DWRITE_PIXEL_GEOMETRY_BGR = DWRITE_PIXEL_GEOMETRY.BGR;

pub const DWRITE_RENDERING_MODE = enum(i32) {
    DEFAULT = 0,
    ALIASED = 1,
    GDI_CLASSIC = 2,
    GDI_NATURAL = 3,
    NATURAL = 4,
    NATURAL_SYMMETRIC = 5,
    OUTLINE = 6,
    pub const CLEARTYPE_GDI_CLASSIC = .GDI_CLASSIC;
    pub const CLEARTYPE_GDI_NATURAL = .GDI_NATURAL;
    pub const CLEARTYPE_NATURAL = .NATURAL;
    pub const CLEARTYPE_NATURAL_SYMMETRIC = .NATURAL_SYMMETRIC;
};
pub const DWRITE_RENDERING_MODE_DEFAULT = DWRITE_RENDERING_MODE.DEFAULT;
pub const DWRITE_RENDERING_MODE_ALIASED = DWRITE_RENDERING_MODE.ALIASED;
pub const DWRITE_RENDERING_MODE_GDI_CLASSIC = DWRITE_RENDERING_MODE.GDI_CLASSIC;
pub const DWRITE_RENDERING_MODE_GDI_NATURAL = DWRITE_RENDERING_MODE.GDI_NATURAL;
pub const DWRITE_RENDERING_MODE_NATURAL = DWRITE_RENDERING_MODE.NATURAL;
pub const DWRITE_RENDERING_MODE_NATURAL_SYMMETRIC = DWRITE_RENDERING_MODE.NATURAL_SYMMETRIC;
pub const DWRITE_RENDERING_MODE_OUTLINE = DWRITE_RENDERING_MODE.OUTLINE;
pub const DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC = DWRITE_RENDERING_MODE.GDI_CLASSIC;
pub const DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL = DWRITE_RENDERING_MODE.GDI_NATURAL;
pub const DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL = DWRITE_RENDERING_MODE.NATURAL;
pub const DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC = DWRITE_RENDERING_MODE.NATURAL_SYMMETRIC;

pub const DWRITE_MATRIX = extern struct {
    m11: f32,
    m12: f32,
    m21: f32,
    m22: f32,
    dx: f32,
    dy: f32,
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteRenderingParams_Value = Guid.initString("2f0da53a-2add-47cd-82ee-d9ec34688e75");
pub const IID_IDWriteRenderingParams = &IID_IDWriteRenderingParams_Value;
pub const IDWriteRenderingParams = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetGamma: *const fn(
            self: *const IDWriteRenderingParams,
        ) callconv(@import("std").os.windows.WINAPI) f32,
        GetEnhancedContrast: *const fn(
            self: *const IDWriteRenderingParams,
        ) callconv(@import("std").os.windows.WINAPI) f32,
        GetClearTypeLevel: *const fn(
            self: *const IDWriteRenderingParams,
        ) callconv(@import("std").os.windows.WINAPI) f32,
        GetPixelGeometry: *const fn(
            self: *const IDWriteRenderingParams,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_PIXEL_GEOMETRY,
        GetRenderingMode: *const fn(
            self: *const IDWriteRenderingParams,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_RENDERING_MODE,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetGamma(self: *const IDWriteRenderingParams) callconv(.Inline) f32 {
        return self.vtable.GetGamma(self);
    }
    pub fn GetEnhancedContrast(self: *const IDWriteRenderingParams) callconv(.Inline) f32 {
        return self.vtable.GetEnhancedContrast(self);
    }
    pub fn GetClearTypeLevel(self: *const IDWriteRenderingParams) callconv(.Inline) f32 {
        return self.vtable.GetClearTypeLevel(self);
    }
    pub fn GetPixelGeometry(self: *const IDWriteRenderingParams) callconv(.Inline) DWRITE_PIXEL_GEOMETRY {
        return self.vtable.GetPixelGeometry(self);
    }
    pub fn GetRenderingMode(self: *const IDWriteRenderingParams) callconv(.Inline) DWRITE_RENDERING_MODE {
        return self.vtable.GetRenderingMode(self);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteFontFace_Value = Guid.initString("5f49804d-7024-4d43-bfa9-d25984f53849");
pub const IID_IDWriteFontFace = &IID_IDWriteFontFace_Value;
pub const IDWriteFontFace = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetType: *const fn(
            self: *const IDWriteFontFace,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_FACE_TYPE,
        GetFiles: *const fn(
            self: *const IDWriteFontFace,
            numberOfFiles: ?*u32,
            fontFiles: ?[*]?*IDWriteFontFile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIndex: *const fn(
            self: *const IDWriteFontFace,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetSimulations: *const fn(
            self: *const IDWriteFontFace,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_SIMULATIONS,
        IsSymbolFont: *const fn(
            self: *const IDWriteFontFace,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetMetrics: *const fn(
            self: *const IDWriteFontFace,
            fontFaceMetrics: ?*DWRITE_FONT_METRICS,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetGlyphCount: *const fn(
            self: *const IDWriteFontFace,
        ) callconv(@import("std").os.windows.WINAPI) u16,
        GetDesignGlyphMetrics: *const fn(
            self: *const IDWriteFontFace,
            glyphIndices: [*:0]const u16,
            glyphCount: u32,
            glyphMetrics: [*]DWRITE_GLYPH_METRICS,
            isSideways: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphIndices: *const fn(
            self: *const IDWriteFontFace,
            codePoints: [*]const u32,
            codePointCount: u32,
            glyphIndices: [*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TryGetFontTable: *const fn(
            self: *const IDWriteFontFace,
            openTypeTableTag: u32,
            tableData: ?*const ?*anyopaque,
            tableSize: ?*u32,
            tableContext: ?*?*anyopaque,
            exists: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseFontTable: *const fn(
            self: *const IDWriteFontFace,
            tableContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetGlyphRunOutline: *const fn(
            self: *const IDWriteFontFace,
            emSize: f32,
            glyphIndices: [*:0]const u16,
            glyphAdvances: ?[*]const f32,
            glyphOffsets: ?[*]const DWRITE_GLYPH_OFFSET,
            glyphCount: u32,
            isSideways: BOOL,
            isRightToLeft: BOOL,
            geometrySink: ?*ID2D1SimplifiedGeometrySink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRecommendedRenderingMode: *const fn(
            self: *const IDWriteFontFace,
            emSize: f32,
            pixelsPerDip: f32,
            measuringMode: DWRITE_MEASURING_MODE,
            renderingParams: ?*IDWriteRenderingParams,
            renderingMode: ?*DWRITE_RENDERING_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGdiCompatibleMetrics: *const fn(
            self: *const IDWriteFontFace,
            emSize: f32,
            pixelsPerDip: f32,
            transform: ?*const DWRITE_MATRIX,
            fontFaceMetrics: ?*DWRITE_FONT_METRICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGdiCompatibleGlyphMetrics: *const fn(
            self: *const IDWriteFontFace,
            emSize: f32,
            pixelsPerDip: f32,
            transform: ?*const DWRITE_MATRIX,
            useGdiNatural: BOOL,
            glyphIndices: [*:0]const u16,
            glyphCount: u32,
            glyphMetrics: [*]DWRITE_GLYPH_METRICS,
            isSideways: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetType(self: *const IDWriteFontFace) callconv(.Inline) DWRITE_FONT_FACE_TYPE {
        return self.vtable.GetType(self);
    }
    pub fn GetFiles(self: *const IDWriteFontFace, numberOfFiles: ?*u32, fontFiles: ?[*]?*IDWriteFontFile) callconv(.Inline) HRESULT {
        return self.vtable.GetFiles(self, numberOfFiles, fontFiles);
    }
    pub fn GetIndex(self: *const IDWriteFontFace) callconv(.Inline) u32 {
        return self.vtable.GetIndex(self);
    }
    pub fn GetSimulations(self: *const IDWriteFontFace) callconv(.Inline) DWRITE_FONT_SIMULATIONS {
        return self.vtable.GetSimulations(self);
    }
    pub fn IsSymbolFont(self: *const IDWriteFontFace) callconv(.Inline) BOOL {
        return self.vtable.IsSymbolFont(self);
    }
    pub fn GetMetrics(self: *const IDWriteFontFace, fontFaceMetrics: ?*DWRITE_FONT_METRICS) callconv(.Inline) void {
        return self.vtable.GetMetrics(self, fontFaceMetrics);
    }
    pub fn GetGlyphCount(self: *const IDWriteFontFace) callconv(.Inline) u16 {
        return self.vtable.GetGlyphCount(self);
    }
    pub fn GetDesignGlyphMetrics(self: *const IDWriteFontFace, glyphIndices: [*:0]const u16, glyphCount: u32, glyphMetrics: [*]DWRITE_GLYPH_METRICS, isSideways: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.GetDesignGlyphMetrics(self, glyphIndices, glyphCount, glyphMetrics, isSideways);
    }
    pub fn GetGlyphIndices(self: *const IDWriteFontFace, codePoints: [*]const u32, codePointCount: u32, glyphIndices: [*:0]u16) callconv(.Inline) HRESULT {
        return self.vtable.GetGlyphIndices(self, codePoints, codePointCount, glyphIndices);
    }
    pub fn TryGetFontTable(self: *const IDWriteFontFace, openTypeTableTag: u32, tableData: ?*const ?*anyopaque, tableSize: ?*u32, tableContext: ?*?*anyopaque, exists: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.TryGetFontTable(self, openTypeTableTag, tableData, tableSize, tableContext, exists);
    }
    pub fn ReleaseFontTable(self: *const IDWriteFontFace, tableContext: ?*anyopaque) callconv(.Inline) void {
        return self.vtable.ReleaseFontTable(self, tableContext);
    }
    pub fn GetGlyphRunOutline(self: *const IDWriteFontFace, emSize: f32, glyphIndices: [*:0]const u16, glyphAdvances: ?[*]const f32, glyphOffsets: ?[*]const DWRITE_GLYPH_OFFSET, glyphCount: u32, isSideways: BOOL, isRightToLeft: BOOL, geometrySink: ?*ID2D1SimplifiedGeometrySink) callconv(.Inline) HRESULT {
        return self.vtable.GetGlyphRunOutline(self, emSize, glyphIndices, glyphAdvances, glyphOffsets, glyphCount, isSideways, isRightToLeft, geometrySink);
    }
    pub fn GetRecommendedRenderingMode(self: *const IDWriteFontFace, emSize: f32, pixelsPerDip: f32, measuringMode: DWRITE_MEASURING_MODE, renderingParams: ?*IDWriteRenderingParams, renderingMode: ?*DWRITE_RENDERING_MODE) callconv(.Inline) HRESULT {
        return self.vtable.GetRecommendedRenderingMode(self, emSize, pixelsPerDip, measuringMode, renderingParams, renderingMode);
    }
    pub fn GetGdiCompatibleMetrics(self: *const IDWriteFontFace, emSize: f32, pixelsPerDip: f32, transform: ?*const DWRITE_MATRIX, fontFaceMetrics: ?*DWRITE_FONT_METRICS) callconv(.Inline) HRESULT {
        return self.vtable.GetGdiCompatibleMetrics(self, emSize, pixelsPerDip, transform, fontFaceMetrics);
    }
    pub fn GetGdiCompatibleGlyphMetrics(self: *const IDWriteFontFace, emSize: f32, pixelsPerDip: f32, transform: ?*const DWRITE_MATRIX, useGdiNatural: BOOL, glyphIndices: [*:0]const u16, glyphCount: u32, glyphMetrics: [*]DWRITE_GLYPH_METRICS, isSideways: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.GetGdiCompatibleGlyphMetrics(self, emSize, pixelsPerDip, transform, useGdiNatural, glyphIndices, glyphCount, glyphMetrics, isSideways);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteFontCollectionLoader_Value = Guid.initString("cca920e4-52f0-492b-bfa8-29c72ee0a468");
pub const IID_IDWriteFontCollectionLoader = &IID_IDWriteFontCollectionLoader_Value;
pub const IDWriteFontCollectionLoader = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateEnumeratorFromKey: *const fn(
            self: *const IDWriteFontCollectionLoader,
            factory: ?*IDWriteFactory,
            // TODO: what to do with BytesParamIndex 2?
            collectionKey: ?*const anyopaque,
            collectionKeySize: u32,
            fontFileEnumerator: **IDWriteFontFileEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateEnumeratorFromKey(self: *const IDWriteFontCollectionLoader, factory: ?*IDWriteFactory, collectionKey: ?*const anyopaque, collectionKeySize: u32, fontFileEnumerator: **IDWriteFontFileEnumerator) callconv(.Inline) HRESULT {
        return self.vtable.CreateEnumeratorFromKey(self, factory, collectionKey, collectionKeySize, fontFileEnumerator);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteFontFileEnumerator_Value = Guid.initString("72755049-5ff7-435d-8348-4be97cfa6c7c");
pub const IID_IDWriteFontFileEnumerator = &IID_IDWriteFontFileEnumerator_Value;
pub const IDWriteFontFileEnumerator = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        MoveNext: *const fn(
            self: *const IDWriteFontFileEnumerator,
            hasCurrentFile: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentFontFile: *const fn(
            self: *const IDWriteFontFileEnumerator,
            fontFile: **IDWriteFontFile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn MoveNext(self: *const IDWriteFontFileEnumerator, hasCurrentFile: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.MoveNext(self, hasCurrentFile);
    }
    pub fn GetCurrentFontFile(self: *const IDWriteFontFileEnumerator, fontFile: **IDWriteFontFile) callconv(.Inline) HRESULT {
        return self.vtable.GetCurrentFontFile(self, fontFile);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteLocalizedStrings_Value = Guid.initString("08256209-099a-4b34-b86d-c22b110e7771");
pub const IID_IDWriteLocalizedStrings = &IID_IDWriteLocalizedStrings_Value;
pub const IDWriteLocalizedStrings = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn(
            self: *const IDWriteLocalizedStrings,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        FindLocaleName: *const fn(
            self: *const IDWriteLocalizedStrings,
            localeName: ?[*:0]const u16,
            index: ?*u32,
            exists: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocaleNameLength: *const fn(
            self: *const IDWriteLocalizedStrings,
            index: u32,
            length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocaleName: *const fn(
            self: *const IDWriteLocalizedStrings,
            index: u32,
            localeName: [*:0]u16,
            size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringLength: *const fn(
            self: *const IDWriteLocalizedStrings,
            index: u32,
            length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetString: *const fn(
            self: *const IDWriteLocalizedStrings,
            index: u32,
            stringBuffer: [*:0]u16,
            size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetCount(self: *const IDWriteLocalizedStrings) callconv(.Inline) u32 {
        return self.vtable.GetCount(self);
    }
    pub fn FindLocaleName(self: *const IDWriteLocalizedStrings, localeName: ?[*:0]const u16, index: ?*u32, exists: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.FindLocaleName(self, localeName, index, exists);
    }
    pub fn GetLocaleNameLength(self: *const IDWriteLocalizedStrings, index: u32, length: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetLocaleNameLength(self, index, length);
    }
    pub fn GetLocaleName(self: *const IDWriteLocalizedStrings, index: u32, localeName: [*:0]u16, size: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetLocaleName(self, index, localeName, size);
    }
    pub fn GetStringLength(self: *const IDWriteLocalizedStrings, index: u32, length: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetStringLength(self, index, length);
    }
    pub fn GetString(self: *const IDWriteLocalizedStrings, index: u32, stringBuffer: [*:0]u16, size: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetString(self, index, stringBuffer, size);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteFontCollection_Value = Guid.initString("a84cee02-3eea-4eee-a827-87c1a02a0fcc");
pub const IID_IDWriteFontCollection = &IID_IDWriteFontCollection_Value;
pub const IDWriteFontCollection = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFontFamilyCount: *const fn(
            self: *const IDWriteFontCollection,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetFontFamily: *const fn(
            self: *const IDWriteFontCollection,
            index: u32,
            fontFamily: **IDWriteFontFamily,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFamilyName: *const fn(
            self: *const IDWriteFontCollection,
            familyName: ?[*:0]const u16,
            index: ?*u32,
            exists: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFromFontFace: *const fn(
            self: *const IDWriteFontCollection,
            fontFace: ?*IDWriteFontFace,
            font: **IDWriteFont,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetFontFamilyCount(self: *const IDWriteFontCollection) callconv(.Inline) u32 {
        return self.vtable.GetFontFamilyCount(self);
    }
    pub fn GetFontFamily(self: *const IDWriteFontCollection, index: u32, fontFamily: **IDWriteFontFamily) callconv(.Inline) HRESULT {
        return self.vtable.GetFontFamily(self, index, fontFamily);
    }
    pub fn FindFamilyName(self: *const IDWriteFontCollection, familyName: ?[*:0]const u16, index: ?*u32, exists: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.FindFamilyName(self, familyName, index, exists);
    }
    pub fn GetFontFromFontFace(self: *const IDWriteFontCollection, fontFace: ?*IDWriteFontFace, font: **IDWriteFont) callconv(.Inline) HRESULT {
        return self.vtable.GetFontFromFontFace(self, fontFace, font);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteFontList_Value = Guid.initString("1a0d8438-1d97-4ec1-aef9-a2fb86ed6acb");
pub const IID_IDWriteFontList = &IID_IDWriteFontList_Value;
pub const IDWriteFontList = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFontCollection: *const fn(
            self: *const IDWriteFontList,
            fontCollection: **IDWriteFontCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontCount: *const fn(
            self: *const IDWriteFontList,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetFont: *const fn(
            self: *const IDWriteFontList,
            index: u32,
            font: **IDWriteFont,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetFontCollection(self: *const IDWriteFontList, fontCollection: **IDWriteFontCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetFontCollection(self, fontCollection);
    }
    pub fn GetFontCount(self: *const IDWriteFontList) callconv(.Inline) u32 {
        return self.vtable.GetFontCount(self);
    }
    pub fn GetFont(self: *const IDWriteFontList, index: u32, font: **IDWriteFont) callconv(.Inline) HRESULT {
        return self.vtable.GetFont(self, index, font);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteFontFamily_Value = Guid.initString("da20d8ef-812a-4c43-9802-62ec4abd7add");
pub const IID_IDWriteFontFamily = &IID_IDWriteFontFamily_Value;
pub const IDWriteFontFamily = extern union {
    pub const VTable = extern struct {
        base: IDWriteFontList.VTable,
        GetFamilyNames: *const fn(
            self: *const IDWriteFontFamily,
            names: **IDWriteLocalizedStrings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFirstMatchingFont: *const fn(
            self: *const IDWriteFontFamily,
            weight: DWRITE_FONT_WEIGHT,
            stretch: DWRITE_FONT_STRETCH,
            style: DWRITE_FONT_STYLE,
            matchingFont: **IDWriteFont,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMatchingFonts: *const fn(
            self: *const IDWriteFontFamily,
            weight: DWRITE_FONT_WEIGHT,
            stretch: DWRITE_FONT_STRETCH,
            style: DWRITE_FONT_STYLE,
            matchingFonts: **IDWriteFontList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteFontList: IDWriteFontList,
    IUnknown: IUnknown,
    pub fn GetFamilyNames(self: *const IDWriteFontFamily, names: **IDWriteLocalizedStrings) callconv(.Inline) HRESULT {
        return self.vtable.GetFamilyNames(self, names);
    }
    pub fn GetFirstMatchingFont(self: *const IDWriteFontFamily, weight: DWRITE_FONT_WEIGHT, stretch: DWRITE_FONT_STRETCH, style: DWRITE_FONT_STYLE, matchingFont: **IDWriteFont) callconv(.Inline) HRESULT {
        return self.vtable.GetFirstMatchingFont(self, weight, stretch, style, matchingFont);
    }
    pub fn GetMatchingFonts(self: *const IDWriteFontFamily, weight: DWRITE_FONT_WEIGHT, stretch: DWRITE_FONT_STRETCH, style: DWRITE_FONT_STYLE, matchingFonts: **IDWriteFontList) callconv(.Inline) HRESULT {
        return self.vtable.GetMatchingFonts(self, weight, stretch, style, matchingFonts);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteFont_Value = Guid.initString("acd16696-8c14-4f5d-877e-fe3fc1d32737");
pub const IID_IDWriteFont = &IID_IDWriteFont_Value;
pub const IDWriteFont = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFontFamily: *const fn(
            self: *const IDWriteFont,
            fontFamily: **IDWriteFontFamily,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWeight: *const fn(
            self: *const IDWriteFont,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_WEIGHT,
        GetStretch: *const fn(
            self: *const IDWriteFont,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_STRETCH,
        GetStyle: *const fn(
            self: *const IDWriteFont,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_STYLE,
        IsSymbolFont: *const fn(
            self: *const IDWriteFont,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetFaceNames: *const fn(
            self: *const IDWriteFont,
            names: **IDWriteLocalizedStrings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInformationalStrings: *const fn(
            self: *const IDWriteFont,
            informationalStringID: DWRITE_INFORMATIONAL_STRING_ID,
            informationalStrings: ?**IDWriteLocalizedStrings,
            exists: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSimulations: *const fn(
            self: *const IDWriteFont,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_SIMULATIONS,
        GetMetrics: *const fn(
            self: *const IDWriteFont,
            fontMetrics: ?*DWRITE_FONT_METRICS,
        ) callconv(@import("std").os.windows.WINAPI) void,
        HasCharacter: *const fn(
            self: *const IDWriteFont,
            unicodeValue: u32,
            exists: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontFace: *const fn(
            self: *const IDWriteFont,
            fontFace: **IDWriteFontFace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetFontFamily(self: *const IDWriteFont, fontFamily: **IDWriteFontFamily) callconv(.Inline) HRESULT {
        return self.vtable.GetFontFamily(self, fontFamily);
    }
    pub fn GetWeight(self: *const IDWriteFont) callconv(.Inline) DWRITE_FONT_WEIGHT {
        return self.vtable.GetWeight(self);
    }
    pub fn GetStretch(self: *const IDWriteFont) callconv(.Inline) DWRITE_FONT_STRETCH {
        return self.vtable.GetStretch(self);
    }
    pub fn GetStyle(self: *const IDWriteFont) callconv(.Inline) DWRITE_FONT_STYLE {
        return self.vtable.GetStyle(self);
    }
    pub fn IsSymbolFont(self: *const IDWriteFont) callconv(.Inline) BOOL {
        return self.vtable.IsSymbolFont(self);
    }
    pub fn GetFaceNames(self: *const IDWriteFont, names: **IDWriteLocalizedStrings) callconv(.Inline) HRESULT {
        return self.vtable.GetFaceNames(self, names);
    }
    pub fn GetInformationalStrings(self: *const IDWriteFont, informationalStringID: DWRITE_INFORMATIONAL_STRING_ID, informationalStrings: ?**IDWriteLocalizedStrings, exists: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.GetInformationalStrings(self, informationalStringID, informationalStrings, exists);
    }
    pub fn GetSimulations(self: *const IDWriteFont) callconv(.Inline) DWRITE_FONT_SIMULATIONS {
        return self.vtable.GetSimulations(self);
    }
    pub fn GetMetrics(self: *const IDWriteFont, fontMetrics: ?*DWRITE_FONT_METRICS) callconv(.Inline) void {
        return self.vtable.GetMetrics(self, fontMetrics);
    }
    pub fn HasCharacter(self: *const IDWriteFont, unicodeValue: u32, exists: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.HasCharacter(self, unicodeValue, exists);
    }
    pub fn CreateFontFace(self: *const IDWriteFont, fontFace: **IDWriteFontFace) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontFace(self, fontFace);
    }
};

pub const DWRITE_READING_DIRECTION = enum(i32) {
    LEFT_TO_RIGHT = 0,
    RIGHT_TO_LEFT = 1,
    TOP_TO_BOTTOM = 2,
    BOTTOM_TO_TOP = 3,
};
pub const DWRITE_READING_DIRECTION_LEFT_TO_RIGHT = DWRITE_READING_DIRECTION.LEFT_TO_RIGHT;
pub const DWRITE_READING_DIRECTION_RIGHT_TO_LEFT = DWRITE_READING_DIRECTION.RIGHT_TO_LEFT;
pub const DWRITE_READING_DIRECTION_TOP_TO_BOTTOM = DWRITE_READING_DIRECTION.TOP_TO_BOTTOM;
pub const DWRITE_READING_DIRECTION_BOTTOM_TO_TOP = DWRITE_READING_DIRECTION.BOTTOM_TO_TOP;

pub const DWRITE_FLOW_DIRECTION = enum(i32) {
    TOP_TO_BOTTOM = 0,
    BOTTOM_TO_TOP = 1,
    LEFT_TO_RIGHT = 2,
    RIGHT_TO_LEFT = 3,
};
pub const DWRITE_FLOW_DIRECTION_TOP_TO_BOTTOM = DWRITE_FLOW_DIRECTION.TOP_TO_BOTTOM;
pub const DWRITE_FLOW_DIRECTION_BOTTOM_TO_TOP = DWRITE_FLOW_DIRECTION.BOTTOM_TO_TOP;
pub const DWRITE_FLOW_DIRECTION_LEFT_TO_RIGHT = DWRITE_FLOW_DIRECTION.LEFT_TO_RIGHT;
pub const DWRITE_FLOW_DIRECTION_RIGHT_TO_LEFT = DWRITE_FLOW_DIRECTION.RIGHT_TO_LEFT;

pub const DWRITE_TEXT_ALIGNMENT = enum(i32) {
    LEADING = 0,
    TRAILING = 1,
    CENTER = 2,
    JUSTIFIED = 3,
};
pub const DWRITE_TEXT_ALIGNMENT_LEADING = DWRITE_TEXT_ALIGNMENT.LEADING;
pub const DWRITE_TEXT_ALIGNMENT_TRAILING = DWRITE_TEXT_ALIGNMENT.TRAILING;
pub const DWRITE_TEXT_ALIGNMENT_CENTER = DWRITE_TEXT_ALIGNMENT.CENTER;
pub const DWRITE_TEXT_ALIGNMENT_JUSTIFIED = DWRITE_TEXT_ALIGNMENT.JUSTIFIED;

pub const DWRITE_PARAGRAPH_ALIGNMENT = enum(i32) {
    NEAR = 0,
    FAR = 1,
    CENTER = 2,
};
pub const DWRITE_PARAGRAPH_ALIGNMENT_NEAR = DWRITE_PARAGRAPH_ALIGNMENT.NEAR;
pub const DWRITE_PARAGRAPH_ALIGNMENT_FAR = DWRITE_PARAGRAPH_ALIGNMENT.FAR;
pub const DWRITE_PARAGRAPH_ALIGNMENT_CENTER = DWRITE_PARAGRAPH_ALIGNMENT.CENTER;

pub const DWRITE_WORD_WRAPPING = enum(i32) {
    WRAP = 0,
    NO_WRAP = 1,
    EMERGENCY_BREAK = 2,
    WHOLE_WORD = 3,
    CHARACTER = 4,
};
pub const DWRITE_WORD_WRAPPING_WRAP = DWRITE_WORD_WRAPPING.WRAP;
pub const DWRITE_WORD_WRAPPING_NO_WRAP = DWRITE_WORD_WRAPPING.NO_WRAP;
pub const DWRITE_WORD_WRAPPING_EMERGENCY_BREAK = DWRITE_WORD_WRAPPING.EMERGENCY_BREAK;
pub const DWRITE_WORD_WRAPPING_WHOLE_WORD = DWRITE_WORD_WRAPPING.WHOLE_WORD;
pub const DWRITE_WORD_WRAPPING_CHARACTER = DWRITE_WORD_WRAPPING.CHARACTER;

pub const DWRITE_LINE_SPACING_METHOD = enum(i32) {
    DEFAULT = 0,
    UNIFORM = 1,
    PROPORTIONAL = 2,
};
pub const DWRITE_LINE_SPACING_METHOD_DEFAULT = DWRITE_LINE_SPACING_METHOD.DEFAULT;
pub const DWRITE_LINE_SPACING_METHOD_UNIFORM = DWRITE_LINE_SPACING_METHOD.UNIFORM;
pub const DWRITE_LINE_SPACING_METHOD_PROPORTIONAL = DWRITE_LINE_SPACING_METHOD.PROPORTIONAL;

pub const DWRITE_TRIMMING_GRANULARITY = enum(i32) {
    NONE = 0,
    CHARACTER = 1,
    WORD = 2,
};
pub const DWRITE_TRIMMING_GRANULARITY_NONE = DWRITE_TRIMMING_GRANULARITY.NONE;
pub const DWRITE_TRIMMING_GRANULARITY_CHARACTER = DWRITE_TRIMMING_GRANULARITY.CHARACTER;
pub const DWRITE_TRIMMING_GRANULARITY_WORD = DWRITE_TRIMMING_GRANULARITY.WORD;

pub const DWRITE_FONT_FEATURE_TAG = enum(u32) {
    ALTERNATIVE_FRACTIONS = 1668441697,
    PETITE_CAPITALS_FROM_CAPITALS = 1668297315,
    SMALL_CAPITALS_FROM_CAPITALS = 1668493923,
    CONTEXTUAL_ALTERNATES = 1953259875,
    CASE_SENSITIVE_FORMS = 1702060387,
    GLYPH_COMPOSITION_DECOMPOSITION = 1886217059,
    CONTEXTUAL_LIGATURES = 1734962275,
    CAPITAL_SPACING = 1886613603,
    CONTEXTUAL_SWASH = 1752658787,
    CURSIVE_POSITIONING = 1936880995,
    DEFAULT = 1953261156,
    DISCRETIONARY_LIGATURES = 1734962276,
    EXPERT_FORMS = 1953527909,
    FRACTIONS = 1667330662,
    FULL_WIDTH = 1684633446,
    HALF_FORMS = 1718378856,
    HALANT_FORMS = 1852596584,
    ALTERNATE_HALF_WIDTH = 1953259880,
    HISTORICAL_FORMS = 1953720680,
    HORIZONTAL_KANA_ALTERNATES = 1634626408,
    HISTORICAL_LIGATURES = 1734962280,
    HALF_WIDTH = 1684633448,
    HOJO_KANJI_FORMS = 1869246312,
    JIS04_FORMS = 875589738,
    JIS78_FORMS = 943157354,
    JIS83_FORMS = 859336810,
    JIS90_FORMS = 809070698,
    KERNING = 1852990827,
    STANDARD_LIGATURES = 1634167148,
    LINING_FIGURES = 1836412524,
    LOCALIZED_FORMS = 1818455916,
    MARK_POSITIONING = 1802658157,
    MATHEMATICAL_GREEK = 1802659693,
    MARK_TO_MARK_POSITIONING = 1802333037,
    ALTERNATE_ANNOTATION_FORMS = 1953259886,
    NLC_KANJI_FORMS = 1801677934,
    OLD_STYLE_FIGURES = 1836412527,
    ORDINALS = 1852076655,
    PROPORTIONAL_ALTERNATE_WIDTH = 1953259888,
    PETITE_CAPITALS = 1885430640,
    PROPORTIONAL_FIGURES = 1836412528,
    PROPORTIONAL_WIDTHS = 1684633456,
    QUARTER_WIDTHS = 1684633457,
    REQUIRED_LIGATURES = 1734962290,
    RUBY_NOTATION_FORMS = 2036495730,
    STYLISTIC_ALTERNATES = 1953259891,
    SCIENTIFIC_INFERIORS = 1718511987,
    SMALL_CAPITALS = 1885564275,
    SIMPLIFIED_FORMS = 1819307379,
    STYLISTIC_SET_1 = 825258867,
    STYLISTIC_SET_2 = 842036083,
    STYLISTIC_SET_3 = 858813299,
    STYLISTIC_SET_4 = 875590515,
    STYLISTIC_SET_5 = 892367731,
    STYLISTIC_SET_6 = 909144947,
    STYLISTIC_SET_7 = 925922163,
    STYLISTIC_SET_8 = 942699379,
    STYLISTIC_SET_9 = 959476595,
    STYLISTIC_SET_10 = 808547187,
    STYLISTIC_SET_11 = 825324403,
    STYLISTIC_SET_12 = 842101619,
    STYLISTIC_SET_13 = 858878835,
    STYLISTIC_SET_14 = 875656051,
    STYLISTIC_SET_15 = 892433267,
    STYLISTIC_SET_16 = 909210483,
    STYLISTIC_SET_17 = 925987699,
    STYLISTIC_SET_18 = 942764915,
    STYLISTIC_SET_19 = 959542131,
    STYLISTIC_SET_20 = 808612723,
    SUBSCRIPT = 1935832435,
    SUPERSCRIPT = 1936749939,
    SWASH = 1752397683,
    TITLING = 1819568500,
    TRADITIONAL_NAME_FORMS = 1835101812,
    TABULAR_FIGURES = 1836412532,
    TRADITIONAL_FORMS = 1684107892,
    THIRD_WIDTHS = 1684633460,
    UNICASE = 1667853941,
    VERTICAL_WRITING = 1953654134,
    VERTICAL_ALTERNATES_AND_ROTATION = 846492278,
    SLASHED_ZERO = 1869768058,
};
pub const DWRITE_FONT_FEATURE_TAG_ALTERNATIVE_FRACTIONS = DWRITE_FONT_FEATURE_TAG.ALTERNATIVE_FRACTIONS;
pub const DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS_FROM_CAPITALS = DWRITE_FONT_FEATURE_TAG.PETITE_CAPITALS_FROM_CAPITALS;
pub const DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS_FROM_CAPITALS = DWRITE_FONT_FEATURE_TAG.SMALL_CAPITALS_FROM_CAPITALS;
pub const DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_ALTERNATES = DWRITE_FONT_FEATURE_TAG.CONTEXTUAL_ALTERNATES;
pub const DWRITE_FONT_FEATURE_TAG_CASE_SENSITIVE_FORMS = DWRITE_FONT_FEATURE_TAG.CASE_SENSITIVE_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_GLYPH_COMPOSITION_DECOMPOSITION = DWRITE_FONT_FEATURE_TAG.GLYPH_COMPOSITION_DECOMPOSITION;
pub const DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_LIGATURES = DWRITE_FONT_FEATURE_TAG.CONTEXTUAL_LIGATURES;
pub const DWRITE_FONT_FEATURE_TAG_CAPITAL_SPACING = DWRITE_FONT_FEATURE_TAG.CAPITAL_SPACING;
pub const DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_SWASH = DWRITE_FONT_FEATURE_TAG.CONTEXTUAL_SWASH;
pub const DWRITE_FONT_FEATURE_TAG_CURSIVE_POSITIONING = DWRITE_FONT_FEATURE_TAG.CURSIVE_POSITIONING;
pub const DWRITE_FONT_FEATURE_TAG_DEFAULT = DWRITE_FONT_FEATURE_TAG.DEFAULT;
pub const DWRITE_FONT_FEATURE_TAG_DISCRETIONARY_LIGATURES = DWRITE_FONT_FEATURE_TAG.DISCRETIONARY_LIGATURES;
pub const DWRITE_FONT_FEATURE_TAG_EXPERT_FORMS = DWRITE_FONT_FEATURE_TAG.EXPERT_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_FRACTIONS = DWRITE_FONT_FEATURE_TAG.FRACTIONS;
pub const DWRITE_FONT_FEATURE_TAG_FULL_WIDTH = DWRITE_FONT_FEATURE_TAG.FULL_WIDTH;
pub const DWRITE_FONT_FEATURE_TAG_HALF_FORMS = DWRITE_FONT_FEATURE_TAG.HALF_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_HALANT_FORMS = DWRITE_FONT_FEATURE_TAG.HALANT_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_ALTERNATE_HALF_WIDTH = DWRITE_FONT_FEATURE_TAG.ALTERNATE_HALF_WIDTH;
pub const DWRITE_FONT_FEATURE_TAG_HISTORICAL_FORMS = DWRITE_FONT_FEATURE_TAG.HISTORICAL_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_HORIZONTAL_KANA_ALTERNATES = DWRITE_FONT_FEATURE_TAG.HORIZONTAL_KANA_ALTERNATES;
pub const DWRITE_FONT_FEATURE_TAG_HISTORICAL_LIGATURES = DWRITE_FONT_FEATURE_TAG.HISTORICAL_LIGATURES;
pub const DWRITE_FONT_FEATURE_TAG_HALF_WIDTH = DWRITE_FONT_FEATURE_TAG.HALF_WIDTH;
pub const DWRITE_FONT_FEATURE_TAG_HOJO_KANJI_FORMS = DWRITE_FONT_FEATURE_TAG.HOJO_KANJI_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_JIS04_FORMS = DWRITE_FONT_FEATURE_TAG.JIS04_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_JIS78_FORMS = DWRITE_FONT_FEATURE_TAG.JIS78_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_JIS83_FORMS = DWRITE_FONT_FEATURE_TAG.JIS83_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_JIS90_FORMS = DWRITE_FONT_FEATURE_TAG.JIS90_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_KERNING = DWRITE_FONT_FEATURE_TAG.KERNING;
pub const DWRITE_FONT_FEATURE_TAG_STANDARD_LIGATURES = DWRITE_FONT_FEATURE_TAG.STANDARD_LIGATURES;
pub const DWRITE_FONT_FEATURE_TAG_LINING_FIGURES = DWRITE_FONT_FEATURE_TAG.LINING_FIGURES;
pub const DWRITE_FONT_FEATURE_TAG_LOCALIZED_FORMS = DWRITE_FONT_FEATURE_TAG.LOCALIZED_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_MARK_POSITIONING = DWRITE_FONT_FEATURE_TAG.MARK_POSITIONING;
pub const DWRITE_FONT_FEATURE_TAG_MATHEMATICAL_GREEK = DWRITE_FONT_FEATURE_TAG.MATHEMATICAL_GREEK;
pub const DWRITE_FONT_FEATURE_TAG_MARK_TO_MARK_POSITIONING = DWRITE_FONT_FEATURE_TAG.MARK_TO_MARK_POSITIONING;
pub const DWRITE_FONT_FEATURE_TAG_ALTERNATE_ANNOTATION_FORMS = DWRITE_FONT_FEATURE_TAG.ALTERNATE_ANNOTATION_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_NLC_KANJI_FORMS = DWRITE_FONT_FEATURE_TAG.NLC_KANJI_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_OLD_STYLE_FIGURES = DWRITE_FONT_FEATURE_TAG.OLD_STYLE_FIGURES;
pub const DWRITE_FONT_FEATURE_TAG_ORDINALS = DWRITE_FONT_FEATURE_TAG.ORDINALS;
pub const DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_ALTERNATE_WIDTH = DWRITE_FONT_FEATURE_TAG.PROPORTIONAL_ALTERNATE_WIDTH;
pub const DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS = DWRITE_FONT_FEATURE_TAG.PETITE_CAPITALS;
pub const DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_FIGURES = DWRITE_FONT_FEATURE_TAG.PROPORTIONAL_FIGURES;
pub const DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_WIDTHS = DWRITE_FONT_FEATURE_TAG.PROPORTIONAL_WIDTHS;
pub const DWRITE_FONT_FEATURE_TAG_QUARTER_WIDTHS = DWRITE_FONT_FEATURE_TAG.QUARTER_WIDTHS;
pub const DWRITE_FONT_FEATURE_TAG_REQUIRED_LIGATURES = DWRITE_FONT_FEATURE_TAG.REQUIRED_LIGATURES;
pub const DWRITE_FONT_FEATURE_TAG_RUBY_NOTATION_FORMS = DWRITE_FONT_FEATURE_TAG.RUBY_NOTATION_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_ALTERNATES = DWRITE_FONT_FEATURE_TAG.STYLISTIC_ALTERNATES;
pub const DWRITE_FONT_FEATURE_TAG_SCIENTIFIC_INFERIORS = DWRITE_FONT_FEATURE_TAG.SCIENTIFIC_INFERIORS;
pub const DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS = DWRITE_FONT_FEATURE_TAG.SMALL_CAPITALS;
pub const DWRITE_FONT_FEATURE_TAG_SIMPLIFIED_FORMS = DWRITE_FONT_FEATURE_TAG.SIMPLIFIED_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_1;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_2 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_2;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_3 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_3;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_4 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_4;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_5 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_5;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_6 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_6;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_7 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_7;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_8 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_8;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_9 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_9;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_10 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_10;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_11 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_11;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_12 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_12;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_13 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_13;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_14 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_14;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_15 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_15;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_16 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_16;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_17 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_17;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_18 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_18;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_19 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_19;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_20 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_20;
pub const DWRITE_FONT_FEATURE_TAG_SUBSCRIPT = DWRITE_FONT_FEATURE_TAG.SUBSCRIPT;
pub const DWRITE_FONT_FEATURE_TAG_SUPERSCRIPT = DWRITE_FONT_FEATURE_TAG.SUPERSCRIPT;
pub const DWRITE_FONT_FEATURE_TAG_SWASH = DWRITE_FONT_FEATURE_TAG.SWASH;
pub const DWRITE_FONT_FEATURE_TAG_TITLING = DWRITE_FONT_FEATURE_TAG.TITLING;
pub const DWRITE_FONT_FEATURE_TAG_TRADITIONAL_NAME_FORMS = DWRITE_FONT_FEATURE_TAG.TRADITIONAL_NAME_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_TABULAR_FIGURES = DWRITE_FONT_FEATURE_TAG.TABULAR_FIGURES;
pub const DWRITE_FONT_FEATURE_TAG_TRADITIONAL_FORMS = DWRITE_FONT_FEATURE_TAG.TRADITIONAL_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_THIRD_WIDTHS = DWRITE_FONT_FEATURE_TAG.THIRD_WIDTHS;
pub const DWRITE_FONT_FEATURE_TAG_UNICASE = DWRITE_FONT_FEATURE_TAG.UNICASE;
pub const DWRITE_FONT_FEATURE_TAG_VERTICAL_WRITING = DWRITE_FONT_FEATURE_TAG.VERTICAL_WRITING;
pub const DWRITE_FONT_FEATURE_TAG_VERTICAL_ALTERNATES_AND_ROTATION = DWRITE_FONT_FEATURE_TAG.VERTICAL_ALTERNATES_AND_ROTATION;
pub const DWRITE_FONT_FEATURE_TAG_SLASHED_ZERO = DWRITE_FONT_FEATURE_TAG.SLASHED_ZERO;

pub const DWRITE_TEXT_RANGE = extern struct {
    startPosition: u32,
    length: u32,
};

pub const DWRITE_FONT_FEATURE = extern struct {
    nameTag: DWRITE_FONT_FEATURE_TAG,
    parameter: u32,
};

pub const DWRITE_TYPOGRAPHIC_FEATURES = extern struct {
    features: ?*DWRITE_FONT_FEATURE,
    featureCount: u32,
};

pub const DWRITE_TRIMMING = extern struct {
    granularity: DWRITE_TRIMMING_GRANULARITY,
    delimiter: u32,
    delimiterCount: u32,
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteTextFormat_Value = Guid.initString("9c906818-31d7-4fd3-a151-7c5e225db55a");
pub const IID_IDWriteTextFormat = &IID_IDWriteTextFormat_Value;
pub const IDWriteTextFormat = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetTextAlignment: *const fn(
            self: *const IDWriteTextFormat,
            textAlignment: DWRITE_TEXT_ALIGNMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetParagraphAlignment: *const fn(
            self: *const IDWriteTextFormat,
            paragraphAlignment: DWRITE_PARAGRAPH_ALIGNMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWordWrapping: *const fn(
            self: *const IDWriteTextFormat,
            wordWrapping: DWRITE_WORD_WRAPPING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetReadingDirection: *const fn(
            self: *const IDWriteTextFormat,
            readingDirection: DWRITE_READING_DIRECTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFlowDirection: *const fn(
            self: *const IDWriteTextFormat,
            flowDirection: DWRITE_FLOW_DIRECTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIncrementalTabStop: *const fn(
            self: *const IDWriteTextFormat,
            incrementalTabStop: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTrimming: *const fn(
            self: *const IDWriteTextFormat,
            trimmingOptions: ?*const DWRITE_TRIMMING,
            trimmingSign: ?*IDWriteInlineObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLineSpacing: *const fn(
            self: *const IDWriteTextFormat,
            lineSpacingMethod: DWRITE_LINE_SPACING_METHOD,
            lineSpacing: f32,
            baseline: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTextAlignment: *const fn(
            self: *const IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_TEXT_ALIGNMENT,
        GetParagraphAlignment: *const fn(
            self: *const IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_PARAGRAPH_ALIGNMENT,
        GetWordWrapping: *const fn(
            self: *const IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_WORD_WRAPPING,
        GetReadingDirection: *const fn(
            self: *const IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_READING_DIRECTION,
        GetFlowDirection: *const fn(
            self: *const IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FLOW_DIRECTION,
        GetIncrementalTabStop: *const fn(
            self: *const IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) f32,
        GetTrimming: *const fn(
            self: *const IDWriteTextFormat,
            trimmingOptions: ?*DWRITE_TRIMMING,
            trimmingSign: **IDWriteInlineObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLineSpacing: *const fn(
            self: *const IDWriteTextFormat,
            lineSpacingMethod: ?*DWRITE_LINE_SPACING_METHOD,
            lineSpacing: ?*f32,
            baseline: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontCollection: *const fn(
            self: *const IDWriteTextFormat,
            fontCollection: **IDWriteFontCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFamilyNameLength: *const fn(
            self: *const IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetFontFamilyName: *const fn(
            self: *const IDWriteTextFormat,
            fontFamilyName: [*:0]u16,
            nameSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontWeight: *const fn(
            self: *const IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_WEIGHT,
        GetFontStyle: *const fn(
            self: *const IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_STYLE,
        GetFontStretch: *const fn(
            self: *const IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_STRETCH,
        GetFontSize: *const fn(
            self: *const IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) f32,
        GetLocaleNameLength: *const fn(
            self: *const IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetLocaleName: *const fn(
            self: *const IDWriteTextFormat,
            localeName: [*:0]u16,
            nameSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetTextAlignment(self: *const IDWriteTextFormat, textAlignment: DWRITE_TEXT_ALIGNMENT) callconv(.Inline) HRESULT {
        return self.vtable.SetTextAlignment(self, textAlignment);
    }
    pub fn SetParagraphAlignment(self: *const IDWriteTextFormat, paragraphAlignment: DWRITE_PARAGRAPH_ALIGNMENT) callconv(.Inline) HRESULT {
        return self.vtable.SetParagraphAlignment(self, paragraphAlignment);
    }
    pub fn SetWordWrapping(self: *const IDWriteTextFormat, wordWrapping: DWRITE_WORD_WRAPPING) callconv(.Inline) HRESULT {
        return self.vtable.SetWordWrapping(self, wordWrapping);
    }
    pub fn SetReadingDirection(self: *const IDWriteTextFormat, readingDirection: DWRITE_READING_DIRECTION) callconv(.Inline) HRESULT {
        return self.vtable.SetReadingDirection(self, readingDirection);
    }
    pub fn SetFlowDirection(self: *const IDWriteTextFormat, flowDirection: DWRITE_FLOW_DIRECTION) callconv(.Inline) HRESULT {
        return self.vtable.SetFlowDirection(self, flowDirection);
    }
    pub fn SetIncrementalTabStop(self: *const IDWriteTextFormat, incrementalTabStop: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetIncrementalTabStop(self, incrementalTabStop);
    }
    pub fn SetTrimming(self: *const IDWriteTextFormat, trimmingOptions: ?*const DWRITE_TRIMMING, trimmingSign: ?*IDWriteInlineObject) callconv(.Inline) HRESULT {
        return self.vtable.SetTrimming(self, trimmingOptions, trimmingSign);
    }
    pub fn SetLineSpacing(self: *const IDWriteTextFormat, lineSpacingMethod: DWRITE_LINE_SPACING_METHOD, lineSpacing: f32, baseline: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetLineSpacing(self, lineSpacingMethod, lineSpacing, baseline);
    }
    pub fn GetTextAlignment(self: *const IDWriteTextFormat) callconv(.Inline) DWRITE_TEXT_ALIGNMENT {
        return self.vtable.GetTextAlignment(self);
    }
    pub fn GetParagraphAlignment(self: *const IDWriteTextFormat) callconv(.Inline) DWRITE_PARAGRAPH_ALIGNMENT {
        return self.vtable.GetParagraphAlignment(self);
    }
    pub fn GetWordWrapping(self: *const IDWriteTextFormat) callconv(.Inline) DWRITE_WORD_WRAPPING {
        return self.vtable.GetWordWrapping(self);
    }
    pub fn GetReadingDirection(self: *const IDWriteTextFormat) callconv(.Inline) DWRITE_READING_DIRECTION {
        return self.vtable.GetReadingDirection(self);
    }
    pub fn GetFlowDirection(self: *const IDWriteTextFormat) callconv(.Inline) DWRITE_FLOW_DIRECTION {
        return self.vtable.GetFlowDirection(self);
    }
    pub fn GetIncrementalTabStop(self: *const IDWriteTextFormat) callconv(.Inline) f32 {
        return self.vtable.GetIncrementalTabStop(self);
    }
    pub fn GetTrimming(self: *const IDWriteTextFormat, trimmingOptions: ?*DWRITE_TRIMMING, trimmingSign: **IDWriteInlineObject) callconv(.Inline) HRESULT {
        return self.vtable.GetTrimming(self, trimmingOptions, trimmingSign);
    }
    pub fn GetLineSpacing(self: *const IDWriteTextFormat, lineSpacingMethod: ?*DWRITE_LINE_SPACING_METHOD, lineSpacing: ?*f32, baseline: ?*f32) callconv(.Inline) HRESULT {
        return self.vtable.GetLineSpacing(self, lineSpacingMethod, lineSpacing, baseline);
    }
    pub fn GetFontCollection(self: *const IDWriteTextFormat, fontCollection: **IDWriteFontCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetFontCollection(self, fontCollection);
    }
    pub fn GetFontFamilyNameLength(self: *const IDWriteTextFormat) callconv(.Inline) u32 {
        return self.vtable.GetFontFamilyNameLength(self);
    }
    pub fn GetFontFamilyName(self: *const IDWriteTextFormat, fontFamilyName: [*:0]u16, nameSize: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetFontFamilyName(self, fontFamilyName, nameSize);
    }
    pub fn GetFontWeight(self: *const IDWriteTextFormat) callconv(.Inline) DWRITE_FONT_WEIGHT {
        return self.vtable.GetFontWeight(self);
    }
    pub fn GetFontStyle(self: *const IDWriteTextFormat) callconv(.Inline) DWRITE_FONT_STYLE {
        return self.vtable.GetFontStyle(self);
    }
    pub fn GetFontStretch(self: *const IDWriteTextFormat) callconv(.Inline) DWRITE_FONT_STRETCH {
        return self.vtable.GetFontStretch(self);
    }
    pub fn GetFontSize(self: *const IDWriteTextFormat) callconv(.Inline) f32 {
        return self.vtable.GetFontSize(self);
    }
    pub fn GetLocaleNameLength(self: *const IDWriteTextFormat) callconv(.Inline) u32 {
        return self.vtable.GetLocaleNameLength(self);
    }
    pub fn GetLocaleName(self: *const IDWriteTextFormat, localeName: [*:0]u16, nameSize: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetLocaleName(self, localeName, nameSize);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteTypography_Value = Guid.initString("55f1112b-1dc2-4b3c-9541-f46894ed85b6");
pub const IID_IDWriteTypography = &IID_IDWriteTypography_Value;
pub const IDWriteTypography = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddFontFeature: *const fn(
            self: *const IDWriteTypography,
            fontFeature: DWRITE_FONT_FEATURE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFeatureCount: *const fn(
            self: *const IDWriteTypography,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetFontFeature: *const fn(
            self: *const IDWriteTypography,
            fontFeatureIndex: u32,
            fontFeature: ?*DWRITE_FONT_FEATURE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn AddFontFeature(self: *const IDWriteTypography, fontFeature: DWRITE_FONT_FEATURE) callconv(.Inline) HRESULT {
        return self.vtable.AddFontFeature(self, fontFeature);
    }
    pub fn GetFontFeatureCount(self: *const IDWriteTypography) callconv(.Inline) u32 {
        return self.vtable.GetFontFeatureCount(self);
    }
    pub fn GetFontFeature(self: *const IDWriteTypography, fontFeatureIndex: u32, fontFeature: ?*DWRITE_FONT_FEATURE) callconv(.Inline) HRESULT {
        return self.vtable.GetFontFeature(self, fontFeatureIndex, fontFeature);
    }
};

pub const DWRITE_SCRIPT_SHAPES = packed struct(u32) {
    NO_VISUAL: u1 = 0,
    _1: u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const DWRITE_SCRIPT_SHAPES_DEFAULT = DWRITE_SCRIPT_SHAPES{ };
pub const DWRITE_SCRIPT_SHAPES_NO_VISUAL = DWRITE_SCRIPT_SHAPES{ .NO_VISUAL = 1 };

pub const DWRITE_SCRIPT_ANALYSIS = extern struct {
    script: u16,
    shapes: DWRITE_SCRIPT_SHAPES,
};

pub const DWRITE_BREAK_CONDITION = enum(i32) {
    NEUTRAL = 0,
    CAN_BREAK = 1,
    MAY_NOT_BREAK = 2,
    MUST_BREAK = 3,
};
pub const DWRITE_BREAK_CONDITION_NEUTRAL = DWRITE_BREAK_CONDITION.NEUTRAL;
pub const DWRITE_BREAK_CONDITION_CAN_BREAK = DWRITE_BREAK_CONDITION.CAN_BREAK;
pub const DWRITE_BREAK_CONDITION_MAY_NOT_BREAK = DWRITE_BREAK_CONDITION.MAY_NOT_BREAK;
pub const DWRITE_BREAK_CONDITION_MUST_BREAK = DWRITE_BREAK_CONDITION.MUST_BREAK;

pub const DWRITE_LINE_BREAKPOINT = extern struct {
    _bitfield: u8,
};

pub const DWRITE_NUMBER_SUBSTITUTION_METHOD = enum(i32) {
    FROM_CULTURE = 0,
    CONTEXTUAL = 1,
    NONE = 2,
    NATIONAL = 3,
    TRADITIONAL = 4,
};
pub const DWRITE_NUMBER_SUBSTITUTION_METHOD_FROM_CULTURE = DWRITE_NUMBER_SUBSTITUTION_METHOD.FROM_CULTURE;
pub const DWRITE_NUMBER_SUBSTITUTION_METHOD_CONTEXTUAL = DWRITE_NUMBER_SUBSTITUTION_METHOD.CONTEXTUAL;
pub const DWRITE_NUMBER_SUBSTITUTION_METHOD_NONE = DWRITE_NUMBER_SUBSTITUTION_METHOD.NONE;
pub const DWRITE_NUMBER_SUBSTITUTION_METHOD_NATIONAL = DWRITE_NUMBER_SUBSTITUTION_METHOD.NATIONAL;
pub const DWRITE_NUMBER_SUBSTITUTION_METHOD_TRADITIONAL = DWRITE_NUMBER_SUBSTITUTION_METHOD.TRADITIONAL;

const IID_IDWriteNumberSubstitution_Value = Guid.initString("14885cc9-bab0-4f90-b6ed-5c366a2cd03d");
pub const IID_IDWriteNumberSubstitution = &IID_IDWriteNumberSubstitution_Value;
pub const IDWriteNumberSubstitution = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
};

pub const DWRITE_SHAPING_TEXT_PROPERTIES = extern struct {
    _bitfield: u16,
};

pub const DWRITE_SHAPING_GLYPH_PROPERTIES = extern struct {
    _bitfield: u16,
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteTextAnalysisSource_Value = Guid.initString("688e1a58-5094-47c8-adc8-fbcea60ae92b");
pub const IID_IDWriteTextAnalysisSource = &IID_IDWriteTextAnalysisSource_Value;
pub const IDWriteTextAnalysisSource = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTextAtPosition: *const fn(
            self: *const IDWriteTextAnalysisSource,
            textPosition: u32,
            textString: ?*const ?*u16,
            textLength: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTextBeforePosition: *const fn(
            self: *const IDWriteTextAnalysisSource,
            textPosition: u32,
            textString: ?*const ?*u16,
            textLength: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParagraphReadingDirection: *const fn(
            self: *const IDWriteTextAnalysisSource,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_READING_DIRECTION,
        GetLocaleName: *const fn(
            self: *const IDWriteTextAnalysisSource,
            textPosition: u32,
            textLength: ?*u32,
            localeName: ?*const ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumberSubstitution: *const fn(
            self: *const IDWriteTextAnalysisSource,
            textPosition: u32,
            textLength: ?*u32,
            numberSubstitution: **IDWriteNumberSubstitution,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetTextAtPosition(self: *const IDWriteTextAnalysisSource, textPosition: u32, textString: ?*const ?*u16, textLength: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetTextAtPosition(self, textPosition, textString, textLength);
    }
    pub fn GetTextBeforePosition(self: *const IDWriteTextAnalysisSource, textPosition: u32, textString: ?*const ?*u16, textLength: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetTextBeforePosition(self, textPosition, textString, textLength);
    }
    pub fn GetParagraphReadingDirection(self: *const IDWriteTextAnalysisSource) callconv(.Inline) DWRITE_READING_DIRECTION {
        return self.vtable.GetParagraphReadingDirection(self);
    }
    pub fn GetLocaleName(self: *const IDWriteTextAnalysisSource, textPosition: u32, textLength: ?*u32, localeName: ?*const ?*u16) callconv(.Inline) HRESULT {
        return self.vtable.GetLocaleName(self, textPosition, textLength, localeName);
    }
    pub fn GetNumberSubstitution(self: *const IDWriteTextAnalysisSource, textPosition: u32, textLength: ?*u32, numberSubstitution: **IDWriteNumberSubstitution) callconv(.Inline) HRESULT {
        return self.vtable.GetNumberSubstitution(self, textPosition, textLength, numberSubstitution);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteTextAnalysisSink_Value = Guid.initString("5810cd44-0ca0-4701-b3fa-bec5182ae4f6");
pub const IID_IDWriteTextAnalysisSink = &IID_IDWriteTextAnalysisSink_Value;
pub const IDWriteTextAnalysisSink = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetScriptAnalysis: *const fn(
            self: *const IDWriteTextAnalysisSink,
            textPosition: u32,
            textLength: u32,
            scriptAnalysis: ?*const DWRITE_SCRIPT_ANALYSIS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLineBreakpoints: *const fn(
            self: *const IDWriteTextAnalysisSink,
            textPosition: u32,
            textLength: u32,
            lineBreakpoints: [*]const DWRITE_LINE_BREAKPOINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBidiLevel: *const fn(
            self: *const IDWriteTextAnalysisSink,
            textPosition: u32,
            textLength: u32,
            explicitLevel: u8,
            resolvedLevel: u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNumberSubstitution: *const fn(
            self: *const IDWriteTextAnalysisSink,
            textPosition: u32,
            textLength: u32,
            numberSubstitution: ?*IDWriteNumberSubstitution,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetScriptAnalysis(self: *const IDWriteTextAnalysisSink, textPosition: u32, textLength: u32, scriptAnalysis: ?*const DWRITE_SCRIPT_ANALYSIS) callconv(.Inline) HRESULT {
        return self.vtable.SetScriptAnalysis(self, textPosition, textLength, scriptAnalysis);
    }
    pub fn SetLineBreakpoints(self: *const IDWriteTextAnalysisSink, textPosition: u32, textLength: u32, lineBreakpoints: [*]const DWRITE_LINE_BREAKPOINT) callconv(.Inline) HRESULT {
        return self.vtable.SetLineBreakpoints(self, textPosition, textLength, lineBreakpoints);
    }
    pub fn SetBidiLevel(self: *const IDWriteTextAnalysisSink, textPosition: u32, textLength: u32, explicitLevel: u8, resolvedLevel: u8) callconv(.Inline) HRESULT {
        return self.vtable.SetBidiLevel(self, textPosition, textLength, explicitLevel, resolvedLevel);
    }
    pub fn SetNumberSubstitution(self: *const IDWriteTextAnalysisSink, textPosition: u32, textLength: u32, numberSubstitution: ?*IDWriteNumberSubstitution) callconv(.Inline) HRESULT {
        return self.vtable.SetNumberSubstitution(self, textPosition, textLength, numberSubstitution);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteTextAnalyzer_Value = Guid.initString("b7e6163e-7f46-43b4-84b3-e4e6249c365d");
pub const IID_IDWriteTextAnalyzer = &IID_IDWriteTextAnalyzer_Value;
pub const IDWriteTextAnalyzer = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AnalyzeScript: *const fn(
            self: *const IDWriteTextAnalyzer,
            analysisSource: ?*IDWriteTextAnalysisSource,
            textPosition: u32,
            textLength: u32,
            analysisSink: ?*IDWriteTextAnalysisSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AnalyzeBidi: *const fn(
            self: *const IDWriteTextAnalyzer,
            analysisSource: ?*IDWriteTextAnalysisSource,
            textPosition: u32,
            textLength: u32,
            analysisSink: ?*IDWriteTextAnalysisSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AnalyzeNumberSubstitution: *const fn(
            self: *const IDWriteTextAnalyzer,
            analysisSource: ?*IDWriteTextAnalysisSource,
            textPosition: u32,
            textLength: u32,
            analysisSink: ?*IDWriteTextAnalysisSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AnalyzeLineBreakpoints: *const fn(
            self: *const IDWriteTextAnalyzer,
            analysisSource: ?*IDWriteTextAnalysisSource,
            textPosition: u32,
            textLength: u32,
            analysisSink: ?*IDWriteTextAnalysisSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphs: *const fn(
            self: *const IDWriteTextAnalyzer,
            textString: [*:0]const u16,
            textLength: u32,
            fontFace: ?*IDWriteFontFace,
            isSideways: BOOL,
            isRightToLeft: BOOL,
            scriptAnalysis: ?*const DWRITE_SCRIPT_ANALYSIS,
            localeName: ?[*:0]const u16,
            numberSubstitution: ?*IDWriteNumberSubstitution,
            features: ?[*]const ?*const DWRITE_TYPOGRAPHIC_FEATURES,
            featureRangeLengths: ?[*]const u32,
            featureRanges: u32,
            maxGlyphCount: u32,
            clusterMap: [*:0]u16,
            textProps: [*]DWRITE_SHAPING_TEXT_PROPERTIES,
            glyphIndices: [*:0]u16,
            glyphProps: [*]DWRITE_SHAPING_GLYPH_PROPERTIES,
            actualGlyphCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphPlacements: *const fn(
            self: *const IDWriteTextAnalyzer,
            textString: [*:0]const u16,
            clusterMap: [*:0]const u16,
            textProps: [*]DWRITE_SHAPING_TEXT_PROPERTIES,
            textLength: u32,
            glyphIndices: [*:0]const u16,
            glyphProps: [*]const DWRITE_SHAPING_GLYPH_PROPERTIES,
            glyphCount: u32,
            fontFace: ?*IDWriteFontFace,
            fontEmSize: f32,
            isSideways: BOOL,
            isRightToLeft: BOOL,
            scriptAnalysis: ?*const DWRITE_SCRIPT_ANALYSIS,
            localeName: ?[*:0]const u16,
            features: ?[*]const ?*const DWRITE_TYPOGRAPHIC_FEATURES,
            featureRangeLengths: ?[*]const u32,
            featureRanges: u32,
            glyphAdvances: [*]f32,
            glyphOffsets: [*]DWRITE_GLYPH_OFFSET,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGdiCompatibleGlyphPlacements: *const fn(
            self: *const IDWriteTextAnalyzer,
            textString: [*:0]const u16,
            clusterMap: [*:0]const u16,
            textProps: [*]DWRITE_SHAPING_TEXT_PROPERTIES,
            textLength: u32,
            glyphIndices: [*:0]const u16,
            glyphProps: [*]const DWRITE_SHAPING_GLYPH_PROPERTIES,
            glyphCount: u32,
            fontFace: ?*IDWriteFontFace,
            fontEmSize: f32,
            pixelsPerDip: f32,
            transform: ?*const DWRITE_MATRIX,
            useGdiNatural: BOOL,
            isSideways: BOOL,
            isRightToLeft: BOOL,
            scriptAnalysis: ?*const DWRITE_SCRIPT_ANALYSIS,
            localeName: ?[*:0]const u16,
            features: ?[*]const ?*const DWRITE_TYPOGRAPHIC_FEATURES,
            featureRangeLengths: ?[*]const u32,
            featureRanges: u32,
            glyphAdvances: [*]f32,
            glyphOffsets: [*]DWRITE_GLYPH_OFFSET,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn AnalyzeScript(self: *const IDWriteTextAnalyzer, analysisSource: ?*IDWriteTextAnalysisSource, textPosition: u32, textLength: u32, analysisSink: ?*IDWriteTextAnalysisSink) callconv(.Inline) HRESULT {
        return self.vtable.AnalyzeScript(self, analysisSource, textPosition, textLength, analysisSink);
    }
    pub fn AnalyzeBidi(self: *const IDWriteTextAnalyzer, analysisSource: ?*IDWriteTextAnalysisSource, textPosition: u32, textLength: u32, analysisSink: ?*IDWriteTextAnalysisSink) callconv(.Inline) HRESULT {
        return self.vtable.AnalyzeBidi(self, analysisSource, textPosition, textLength, analysisSink);
    }
    pub fn AnalyzeNumberSubstitution(self: *const IDWriteTextAnalyzer, analysisSource: ?*IDWriteTextAnalysisSource, textPosition: u32, textLength: u32, analysisSink: ?*IDWriteTextAnalysisSink) callconv(.Inline) HRESULT {
        return self.vtable.AnalyzeNumberSubstitution(self, analysisSource, textPosition, textLength, analysisSink);
    }
    pub fn AnalyzeLineBreakpoints(self: *const IDWriteTextAnalyzer, analysisSource: ?*IDWriteTextAnalysisSource, textPosition: u32, textLength: u32, analysisSink: ?*IDWriteTextAnalysisSink) callconv(.Inline) HRESULT {
        return self.vtable.AnalyzeLineBreakpoints(self, analysisSource, textPosition, textLength, analysisSink);
    }
    pub fn GetGlyphs(self: *const IDWriteTextAnalyzer, textString: [*:0]const u16, textLength: u32, fontFace: ?*IDWriteFontFace, isSideways: BOOL, isRightToLeft: BOOL, scriptAnalysis: ?*const DWRITE_SCRIPT_ANALYSIS, localeName: ?[*:0]const u16, numberSubstitution: ?*IDWriteNumberSubstitution, features: ?[*]const ?*const DWRITE_TYPOGRAPHIC_FEATURES, featureRangeLengths: ?[*]const u32, featureRanges: u32, maxGlyphCount: u32, clusterMap: [*:0]u16, textProps: [*]DWRITE_SHAPING_TEXT_PROPERTIES, glyphIndices: [*:0]u16, glyphProps: [*]DWRITE_SHAPING_GLYPH_PROPERTIES, actualGlyphCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetGlyphs(self, textString, textLength, fontFace, isSideways, isRightToLeft, scriptAnalysis, localeName, numberSubstitution, features, featureRangeLengths, featureRanges, maxGlyphCount, clusterMap, textProps, glyphIndices, glyphProps, actualGlyphCount);
    }
    pub fn GetGlyphPlacements(self: *const IDWriteTextAnalyzer, textString: [*:0]const u16, clusterMap: [*:0]const u16, textProps: [*]DWRITE_SHAPING_TEXT_PROPERTIES, textLength: u32, glyphIndices: [*:0]const u16, glyphProps: [*]const DWRITE_SHAPING_GLYPH_PROPERTIES, glyphCount: u32, fontFace: ?*IDWriteFontFace, fontEmSize: f32, isSideways: BOOL, isRightToLeft: BOOL, scriptAnalysis: ?*const DWRITE_SCRIPT_ANALYSIS, localeName: ?[*:0]const u16, features: ?[*]const ?*const DWRITE_TYPOGRAPHIC_FEATURES, featureRangeLengths: ?[*]const u32, featureRanges: u32, glyphAdvances: [*]f32, glyphOffsets: [*]DWRITE_GLYPH_OFFSET) callconv(.Inline) HRESULT {
        return self.vtable.GetGlyphPlacements(self, textString, clusterMap, textProps, textLength, glyphIndices, glyphProps, glyphCount, fontFace, fontEmSize, isSideways, isRightToLeft, scriptAnalysis, localeName, features, featureRangeLengths, featureRanges, glyphAdvances, glyphOffsets);
    }
    pub fn GetGdiCompatibleGlyphPlacements(self: *const IDWriteTextAnalyzer, textString: [*:0]const u16, clusterMap: [*:0]const u16, textProps: [*]DWRITE_SHAPING_TEXT_PROPERTIES, textLength: u32, glyphIndices: [*:0]const u16, glyphProps: [*]const DWRITE_SHAPING_GLYPH_PROPERTIES, glyphCount: u32, fontFace: ?*IDWriteFontFace, fontEmSize: f32, pixelsPerDip: f32, transform: ?*const DWRITE_MATRIX, useGdiNatural: BOOL, isSideways: BOOL, isRightToLeft: BOOL, scriptAnalysis: ?*const DWRITE_SCRIPT_ANALYSIS, localeName: ?[*:0]const u16, features: ?[*]const ?*const DWRITE_TYPOGRAPHIC_FEATURES, featureRangeLengths: ?[*]const u32, featureRanges: u32, glyphAdvances: [*]f32, glyphOffsets: [*]DWRITE_GLYPH_OFFSET) callconv(.Inline) HRESULT {
        return self.vtable.GetGdiCompatibleGlyphPlacements(self, textString, clusterMap, textProps, textLength, glyphIndices, glyphProps, glyphCount, fontFace, fontEmSize, pixelsPerDip, transform, useGdiNatural, isSideways, isRightToLeft, scriptAnalysis, localeName, features, featureRangeLengths, featureRanges, glyphAdvances, glyphOffsets);
    }
};

pub const DWRITE_GLYPH_RUN = extern struct {
    fontFace: ?*IDWriteFontFace,
    fontEmSize: f32,
    glyphCount: u32,
    glyphIndices: ?*const u16,
    glyphAdvances: ?*const f32,
    glyphOffsets: ?*const DWRITE_GLYPH_OFFSET,
    isSideways: BOOL,
    bidiLevel: u32,
};

pub const DWRITE_GLYPH_RUN_DESCRIPTION = extern struct {
    localeName: ?[*:0]const u16,
    string: ?[*:0]const u16,
    stringLength: u32,
    clusterMap: ?*const u16,
    textPosition: u32,
};

pub const DWRITE_UNDERLINE = extern struct {
    width: f32,
    thickness: f32,
    offset: f32,
    runHeight: f32,
    readingDirection: DWRITE_READING_DIRECTION,
    flowDirection: DWRITE_FLOW_DIRECTION,
    localeName: ?[*:0]const u16,
    measuringMode: DWRITE_MEASURING_MODE,
};

pub const DWRITE_STRIKETHROUGH = extern struct {
    width: f32,
    thickness: f32,
    offset: f32,
    readingDirection: DWRITE_READING_DIRECTION,
    flowDirection: DWRITE_FLOW_DIRECTION,
    localeName: ?[*:0]const u16,
    measuringMode: DWRITE_MEASURING_MODE,
};

pub const DWRITE_LINE_METRICS = extern struct {
    length: u32,
    trailingWhitespaceLength: u32,
    newlineLength: u32,
    height: f32,
    baseline: f32,
    isTrimmed: BOOL,
};

pub const DWRITE_CLUSTER_METRICS = extern struct {
    width: f32,
    length: u16,
    _bitfield: u16,
};

pub const DWRITE_TEXT_METRICS = extern struct {
    left: f32,
    top: f32,
    width: f32,
    widthIncludingTrailingWhitespace: f32,
    height: f32,
    layoutWidth: f32,
    layoutHeight: f32,
    maxBidiReorderingDepth: u32,
    lineCount: u32,
};

pub const DWRITE_INLINE_OBJECT_METRICS = extern struct {
    width: f32,
    height: f32,
    baseline: f32,
    supportsSideways: BOOL,
};

pub const DWRITE_OVERHANG_METRICS = extern struct {
    left: f32,
    top: f32,
    right: f32,
    bottom: f32,
};

pub const DWRITE_HIT_TEST_METRICS = extern struct {
    textPosition: u32,
    length: u32,
    left: f32,
    top: f32,
    width: f32,
    height: f32,
    bidiLevel: u32,
    isText: BOOL,
    isTrimmed: BOOL,
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteInlineObject_Value = Guid.initString("8339fde3-106f-47ab-8373-1c6295eb10b3");
pub const IID_IDWriteInlineObject = &IID_IDWriteInlineObject_Value;
pub const IDWriteInlineObject = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Draw: *const fn(
            self: *const IDWriteInlineObject,
            clientDrawingContext: ?*anyopaque,
            renderer: ?*IDWriteTextRenderer,
            originX: f32,
            originY: f32,
            isSideways: BOOL,
            isRightToLeft: BOOL,
            clientDrawingEffect: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMetrics: *const fn(
            self: *const IDWriteInlineObject,
            metrics: ?*DWRITE_INLINE_OBJECT_METRICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOverhangMetrics: *const fn(
            self: *const IDWriteInlineObject,
            overhangs: ?*DWRITE_OVERHANG_METRICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBreakConditions: *const fn(
            self: *const IDWriteInlineObject,
            breakConditionBefore: ?*DWRITE_BREAK_CONDITION,
            breakConditionAfter: ?*DWRITE_BREAK_CONDITION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Draw(self: *const IDWriteInlineObject, clientDrawingContext: ?*anyopaque, renderer: ?*IDWriteTextRenderer, originX: f32, originY: f32, isSideways: BOOL, isRightToLeft: BOOL, clientDrawingEffect: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.Draw(self, clientDrawingContext, renderer, originX, originY, isSideways, isRightToLeft, clientDrawingEffect);
    }
    pub fn GetMetrics(self: *const IDWriteInlineObject, metrics: ?*DWRITE_INLINE_OBJECT_METRICS) callconv(.Inline) HRESULT {
        return self.vtable.GetMetrics(self, metrics);
    }
    pub fn GetOverhangMetrics(self: *const IDWriteInlineObject, overhangs: ?*DWRITE_OVERHANG_METRICS) callconv(.Inline) HRESULT {
        return self.vtable.GetOverhangMetrics(self, overhangs);
    }
    pub fn GetBreakConditions(self: *const IDWriteInlineObject, breakConditionBefore: ?*DWRITE_BREAK_CONDITION, breakConditionAfter: ?*DWRITE_BREAK_CONDITION) callconv(.Inline) HRESULT {
        return self.vtable.GetBreakConditions(self, breakConditionBefore, breakConditionAfter);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWritePixelSnapping_Value = Guid.initString("eaf3a2da-ecf4-4d24-b644-b34f6842024b");
pub const IID_IDWritePixelSnapping = &IID_IDWritePixelSnapping_Value;
pub const IDWritePixelSnapping = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsPixelSnappingDisabled: *const fn(
            self: *const IDWritePixelSnapping,
            clientDrawingContext: ?*anyopaque,
            isDisabled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentTransform: *const fn(
            self: *const IDWritePixelSnapping,
            clientDrawingContext: ?*anyopaque,
            transform: ?*DWRITE_MATRIX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPixelsPerDip: *const fn(
            self: *const IDWritePixelSnapping,
            clientDrawingContext: ?*anyopaque,
            pixelsPerDip: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn IsPixelSnappingDisabled(self: *const IDWritePixelSnapping, clientDrawingContext: ?*anyopaque, isDisabled: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.IsPixelSnappingDisabled(self, clientDrawingContext, isDisabled);
    }
    pub fn GetCurrentTransform(self: *const IDWritePixelSnapping, clientDrawingContext: ?*anyopaque, transform: ?*DWRITE_MATRIX) callconv(.Inline) HRESULT {
        return self.vtable.GetCurrentTransform(self, clientDrawingContext, transform);
    }
    pub fn GetPixelsPerDip(self: *const IDWritePixelSnapping, clientDrawingContext: ?*anyopaque, pixelsPerDip: ?*f32) callconv(.Inline) HRESULT {
        return self.vtable.GetPixelsPerDip(self, clientDrawingContext, pixelsPerDip);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteTextRenderer_Value = Guid.initString("ef8a8135-5cc6-45fe-8825-c5a0724eb819");
pub const IID_IDWriteTextRenderer = &IID_IDWriteTextRenderer_Value;
pub const IDWriteTextRenderer = extern union {
    pub const VTable = extern struct {
        base: IDWritePixelSnapping.VTable,
        DrawGlyphRun: *const fn(
            self: *const IDWriteTextRenderer,
            clientDrawingContext: ?*anyopaque,
            baselineOriginX: f32,
            baselineOriginY: f32,
            measuringMode: DWRITE_MEASURING_MODE,
            glyphRun: ?*const DWRITE_GLYPH_RUN,
            glyphRunDescription: ?*const DWRITE_GLYPH_RUN_DESCRIPTION,
            clientDrawingEffect: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawUnderline: *const fn(
            self: *const IDWriteTextRenderer,
            clientDrawingContext: ?*anyopaque,
            baselineOriginX: f32,
            baselineOriginY: f32,
            underline: ?*const DWRITE_UNDERLINE,
            clientDrawingEffect: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawStrikethrough: *const fn(
            self: *const IDWriteTextRenderer,
            clientDrawingContext: ?*anyopaque,
            baselineOriginX: f32,
            baselineOriginY: f32,
            strikethrough: ?*const DWRITE_STRIKETHROUGH,
            clientDrawingEffect: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawInlineObject: *const fn(
            self: *const IDWriteTextRenderer,
            clientDrawingContext: ?*anyopaque,
            originX: f32,
            originY: f32,
            inlineObject: ?*IDWriteInlineObject,
            isSideways: BOOL,
            isRightToLeft: BOOL,
            clientDrawingEffect: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWritePixelSnapping: IDWritePixelSnapping,
    IUnknown: IUnknown,
    pub fn DrawGlyphRun(self: *const IDWriteTextRenderer, clientDrawingContext: ?*anyopaque, baselineOriginX: f32, baselineOriginY: f32, measuringMode: DWRITE_MEASURING_MODE, glyphRun: ?*const DWRITE_GLYPH_RUN, glyphRunDescription: ?*const DWRITE_GLYPH_RUN_DESCRIPTION, clientDrawingEffect: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.DrawGlyphRun(self, clientDrawingContext, baselineOriginX, baselineOriginY, measuringMode, glyphRun, glyphRunDescription, clientDrawingEffect);
    }
    pub fn DrawUnderline(self: *const IDWriteTextRenderer, clientDrawingContext: ?*anyopaque, baselineOriginX: f32, baselineOriginY: f32, underline: ?*const DWRITE_UNDERLINE, clientDrawingEffect: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.DrawUnderline(self, clientDrawingContext, baselineOriginX, baselineOriginY, underline, clientDrawingEffect);
    }
    pub fn DrawStrikethrough(self: *const IDWriteTextRenderer, clientDrawingContext: ?*anyopaque, baselineOriginX: f32, baselineOriginY: f32, strikethrough: ?*const DWRITE_STRIKETHROUGH, clientDrawingEffect: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.DrawStrikethrough(self, clientDrawingContext, baselineOriginX, baselineOriginY, strikethrough, clientDrawingEffect);
    }
    pub fn DrawInlineObject(self: *const IDWriteTextRenderer, clientDrawingContext: ?*anyopaque, originX: f32, originY: f32, inlineObject: ?*IDWriteInlineObject, isSideways: BOOL, isRightToLeft: BOOL, clientDrawingEffect: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.DrawInlineObject(self, clientDrawingContext, originX, originY, inlineObject, isSideways, isRightToLeft, clientDrawingEffect);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteTextLayout_Value = Guid.initString("53737037-6d14-410b-9bfe-0b182bb70961");
pub const IID_IDWriteTextLayout = &IID_IDWriteTextLayout_Value;
pub const IDWriteTextLayout = extern union {
    pub const VTable = extern struct {
        base: IDWriteTextFormat.VTable,
        SetMaxWidth: *const fn(
            self: *const IDWriteTextLayout,
            maxWidth: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaxHeight: *const fn(
            self: *const IDWriteTextLayout,
            maxHeight: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFontCollection: *const fn(
            self: *const IDWriteTextLayout,
            fontCollection: ?*IDWriteFontCollection,
            textRange: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFontFamilyName: *const fn(
            self: *const IDWriteTextLayout,
            fontFamilyName: ?[*:0]const u16,
            textRange: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFontWeight: *const fn(
            self: *const IDWriteTextLayout,
            fontWeight: DWRITE_FONT_WEIGHT,
            textRange: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFontStyle: *const fn(
            self: *const IDWriteTextLayout,
            fontStyle: DWRITE_FONT_STYLE,
            textRange: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFontStretch: *const fn(
            self: *const IDWriteTextLayout,
            fontStretch: DWRITE_FONT_STRETCH,
            textRange: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFontSize: *const fn(
            self: *const IDWriteTextLayout,
            fontSize: f32,
            textRange: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUnderline: *const fn(
            self: *const IDWriteTextLayout,
            hasUnderline: BOOL,
            textRange: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStrikethrough: *const fn(
            self: *const IDWriteTextLayout,
            hasStrikethrough: BOOL,
            textRange: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDrawingEffect: *const fn(
            self: *const IDWriteTextLayout,
            drawingEffect: ?*IUnknown,
            textRange: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInlineObject: *const fn(
            self: *const IDWriteTextLayout,
            inlineObject: ?*IDWriteInlineObject,
            textRange: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTypography: *const fn(
            self: *const IDWriteTextLayout,
            typography: ?*IDWriteTypography,
            textRange: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLocaleName: *const fn(
            self: *const IDWriteTextLayout,
            localeName: ?[*:0]const u16,
            textRange: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxWidth: *const fn(
            self: *const IDWriteTextLayout,
        ) callconv(@import("std").os.windows.WINAPI) f32,
        GetMaxHeight: *const fn(
            self: *const IDWriteTextLayout,
        ) callconv(@import("std").os.windows.WINAPI) f32,
        GetFontCollection: *const fn(
            self: *const IDWriteTextLayout,
            currentPosition: u32,
            fontCollection: **IDWriteFontCollection,
            textRange: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFamilyNameLength: *const fn(
            self: *const IDWriteTextLayout,
            currentPosition: u32,
            nameLength: ?*u32,
            textRange: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFamilyName: *const fn(
            self: *const IDWriteTextLayout,
            currentPosition: u32,
            fontFamilyName: [*:0]u16,
            nameSize: u32,
            textRange: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontWeight: *const fn(
            self: *const IDWriteTextLayout,
            currentPosition: u32,
            fontWeight: ?*DWRITE_FONT_WEIGHT,
            textRange: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontStyle: *const fn(
            self: *const IDWriteTextLayout,
            currentPosition: u32,
            fontStyle: ?*DWRITE_FONT_STYLE,
            textRange: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontStretch: *const fn(
            self: *const IDWriteTextLayout,
            currentPosition: u32,
            fontStretch: ?*DWRITE_FONT_STRETCH,
            textRange: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontSize: *const fn(
            self: *const IDWriteTextLayout,
            currentPosition: u32,
            fontSize: ?*f32,
            textRange: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUnderline: *const fn(
            self: *const IDWriteTextLayout,
            currentPosition: u32,
            hasUnderline: ?*BOOL,
            textRange: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrikethrough: *const fn(
            self: *const IDWriteTextLayout,
            currentPosition: u32,
            hasStrikethrough: ?*BOOL,
            textRange: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDrawingEffect: *const fn(
            self: *const IDWriteTextLayout,
            currentPosition: u32,
            drawingEffect: **IUnknown,
            textRange: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInlineObject: *const fn(
            self: *const IDWriteTextLayout,
            currentPosition: u32,
            inlineObject: **IDWriteInlineObject,
            textRange: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTypography: *const fn(
            self: *const IDWriteTextLayout,
            currentPosition: u32,
            typography: **IDWriteTypography,
            textRange: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocaleNameLength: *const fn(
            self: *const IDWriteTextLayout,
            currentPosition: u32,
            nameLength: ?*u32,
            textRange: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocaleName: *const fn(
            self: *const IDWriteTextLayout,
            currentPosition: u32,
            localeName: [*:0]u16,
            nameSize: u32,
            textRange: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Draw: *const fn(
            self: *const IDWriteTextLayout,
            clientDrawingContext: ?*anyopaque,
            renderer: ?*IDWriteTextRenderer,
            originX: f32,
            originY: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLineMetrics: *const fn(
            self: *const IDWriteTextLayout,
            lineMetrics: ?[*]DWRITE_LINE_METRICS,
            maxLineCount: u32,
            actualLineCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMetrics: *const fn(
            self: *const IDWriteTextLayout,
            textMetrics: ?*DWRITE_TEXT_METRICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOverhangMetrics: *const fn(
            self: *const IDWriteTextLayout,
            overhangs: ?*DWRITE_OVERHANG_METRICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClusterMetrics: *const fn(
            self: *const IDWriteTextLayout,
            clusterMetrics: ?[*]DWRITE_CLUSTER_METRICS,
            maxClusterCount: u32,
            actualClusterCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DetermineMinWidth: *const fn(
            self: *const IDWriteTextLayout,
            minWidth: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HitTestPoint: *const fn(
            self: *const IDWriteTextLayout,
            pointX: f32,
            pointY: f32,
            isTrailingHit: ?*BOOL,
            isInside: ?*BOOL,
            hitTestMetrics: ?*DWRITE_HIT_TEST_METRICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HitTestTextPosition: *const fn(
            self: *const IDWriteTextLayout,
            textPosition: u32,
            isTrailingHit: BOOL,
            pointX: ?*f32,
            pointY: ?*f32,
            hitTestMetrics: ?*DWRITE_HIT_TEST_METRICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HitTestTextRange: *const fn(
            self: *const IDWriteTextLayout,
            textPosition: u32,
            textLength: u32,
            originX: f32,
            originY: f32,
            hitTestMetrics: ?[*]DWRITE_HIT_TEST_METRICS,
            maxHitTestMetricsCount: u32,
            actualHitTestMetricsCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteTextFormat: IDWriteTextFormat,
    IUnknown: IUnknown,
    pub fn SetMaxWidth(self: *const IDWriteTextLayout, maxWidth: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetMaxWidth(self, maxWidth);
    }
    pub fn SetMaxHeight(self: *const IDWriteTextLayout, maxHeight: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetMaxHeight(self, maxHeight);
    }
    pub fn SetFontCollection(self: *const IDWriteTextLayout, fontCollection: ?*IDWriteFontCollection, textRange: DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.SetFontCollection(self, fontCollection, textRange);
    }
    pub fn SetFontFamilyName(self: *const IDWriteTextLayout, fontFamilyName: ?[*:0]const u16, textRange: DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.SetFontFamilyName(self, fontFamilyName, textRange);
    }
    pub fn SetFontWeight(self: *const IDWriteTextLayout, fontWeight: DWRITE_FONT_WEIGHT, textRange: DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.SetFontWeight(self, fontWeight, textRange);
    }
    pub fn SetFontStyle(self: *const IDWriteTextLayout, fontStyle: DWRITE_FONT_STYLE, textRange: DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.SetFontStyle(self, fontStyle, textRange);
    }
    pub fn SetFontStretch(self: *const IDWriteTextLayout, fontStretch: DWRITE_FONT_STRETCH, textRange: DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.SetFontStretch(self, fontStretch, textRange);
    }
    pub fn SetFontSize(self: *const IDWriteTextLayout, fontSize: f32, textRange: DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.SetFontSize(self, fontSize, textRange);
    }
    pub fn SetUnderline(self: *const IDWriteTextLayout, hasUnderline: BOOL, textRange: DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.SetUnderline(self, hasUnderline, textRange);
    }
    pub fn SetStrikethrough(self: *const IDWriteTextLayout, hasStrikethrough: BOOL, textRange: DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.SetStrikethrough(self, hasStrikethrough, textRange);
    }
    pub fn SetDrawingEffect(self: *const IDWriteTextLayout, drawingEffect: ?*IUnknown, textRange: DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.SetDrawingEffect(self, drawingEffect, textRange);
    }
    pub fn SetInlineObject(self: *const IDWriteTextLayout, inlineObject: ?*IDWriteInlineObject, textRange: DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.SetInlineObject(self, inlineObject, textRange);
    }
    pub fn SetTypography(self: *const IDWriteTextLayout, typography: ?*IDWriteTypography, textRange: DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.SetTypography(self, typography, textRange);
    }
    pub fn SetLocaleName(self: *const IDWriteTextLayout, localeName: ?[*:0]const u16, textRange: DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.SetLocaleName(self, localeName, textRange);
    }
    pub fn GetMaxWidth(self: *const IDWriteTextLayout) callconv(.Inline) f32 {
        return self.vtable.GetMaxWidth(self);
    }
    pub fn GetMaxHeight(self: *const IDWriteTextLayout) callconv(.Inline) f32 {
        return self.vtable.GetMaxHeight(self);
    }
    pub fn GetFontCollection(self: *const IDWriteTextLayout, currentPosition: u32, fontCollection: **IDWriteFontCollection, textRange: ?*DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.GetFontCollection(self, currentPosition, fontCollection, textRange);
    }
    pub fn GetFontFamilyNameLength(self: *const IDWriteTextLayout, currentPosition: u32, nameLength: ?*u32, textRange: ?*DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.GetFontFamilyNameLength(self, currentPosition, nameLength, textRange);
    }
    pub fn GetFontFamilyName(self: *const IDWriteTextLayout, currentPosition: u32, fontFamilyName: [*:0]u16, nameSize: u32, textRange: ?*DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.GetFontFamilyName(self, currentPosition, fontFamilyName, nameSize, textRange);
    }
    pub fn GetFontWeight(self: *const IDWriteTextLayout, currentPosition: u32, fontWeight: ?*DWRITE_FONT_WEIGHT, textRange: ?*DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.GetFontWeight(self, currentPosition, fontWeight, textRange);
    }
    pub fn GetFontStyle(self: *const IDWriteTextLayout, currentPosition: u32, fontStyle: ?*DWRITE_FONT_STYLE, textRange: ?*DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.GetFontStyle(self, currentPosition, fontStyle, textRange);
    }
    pub fn GetFontStretch(self: *const IDWriteTextLayout, currentPosition: u32, fontStretch: ?*DWRITE_FONT_STRETCH, textRange: ?*DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.GetFontStretch(self, currentPosition, fontStretch, textRange);
    }
    pub fn GetFontSize(self: *const IDWriteTextLayout, currentPosition: u32, fontSize: ?*f32, textRange: ?*DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.GetFontSize(self, currentPosition, fontSize, textRange);
    }
    pub fn GetUnderline(self: *const IDWriteTextLayout, currentPosition: u32, hasUnderline: ?*BOOL, textRange: ?*DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.GetUnderline(self, currentPosition, hasUnderline, textRange);
    }
    pub fn GetStrikethrough(self: *const IDWriteTextLayout, currentPosition: u32, hasStrikethrough: ?*BOOL, textRange: ?*DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.GetStrikethrough(self, currentPosition, hasStrikethrough, textRange);
    }
    pub fn GetDrawingEffect(self: *const IDWriteTextLayout, currentPosition: u32, drawingEffect: **IUnknown, textRange: ?*DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.GetDrawingEffect(self, currentPosition, drawingEffect, textRange);
    }
    pub fn GetInlineObject(self: *const IDWriteTextLayout, currentPosition: u32, inlineObject: **IDWriteInlineObject, textRange: ?*DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.GetInlineObject(self, currentPosition, inlineObject, textRange);
    }
    pub fn GetTypography(self: *const IDWriteTextLayout, currentPosition: u32, typography: **IDWriteTypography, textRange: ?*DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.GetTypography(self, currentPosition, typography, textRange);
    }
    pub fn GetLocaleNameLength(self: *const IDWriteTextLayout, currentPosition: u32, nameLength: ?*u32, textRange: ?*DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.GetLocaleNameLength(self, currentPosition, nameLength, textRange);
    }
    pub fn GetLocaleName(self: *const IDWriteTextLayout, currentPosition: u32, localeName: [*:0]u16, nameSize: u32, textRange: ?*DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.GetLocaleName(self, currentPosition, localeName, nameSize, textRange);
    }
    pub fn Draw(self: *const IDWriteTextLayout, clientDrawingContext: ?*anyopaque, renderer: ?*IDWriteTextRenderer, originX: f32, originY: f32) callconv(.Inline) HRESULT {
        return self.vtable.Draw(self, clientDrawingContext, renderer, originX, originY);
    }
    pub fn GetLineMetrics(self: *const IDWriteTextLayout, lineMetrics: ?[*]DWRITE_LINE_METRICS, maxLineCount: u32, actualLineCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetLineMetrics(self, lineMetrics, maxLineCount, actualLineCount);
    }
    pub fn GetMetrics(self: *const IDWriteTextLayout, textMetrics: ?*DWRITE_TEXT_METRICS) callconv(.Inline) HRESULT {
        return self.vtable.GetMetrics(self, textMetrics);
    }
    pub fn GetOverhangMetrics(self: *const IDWriteTextLayout, overhangs: ?*DWRITE_OVERHANG_METRICS) callconv(.Inline) HRESULT {
        return self.vtable.GetOverhangMetrics(self, overhangs);
    }
    pub fn GetClusterMetrics(self: *const IDWriteTextLayout, clusterMetrics: ?[*]DWRITE_CLUSTER_METRICS, maxClusterCount: u32, actualClusterCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetClusterMetrics(self, clusterMetrics, maxClusterCount, actualClusterCount);
    }
    pub fn DetermineMinWidth(self: *const IDWriteTextLayout, minWidth: ?*f32) callconv(.Inline) HRESULT {
        return self.vtable.DetermineMinWidth(self, minWidth);
    }
    pub fn HitTestPoint(self: *const IDWriteTextLayout, pointX: f32, pointY: f32, isTrailingHit: ?*BOOL, isInside: ?*BOOL, hitTestMetrics: ?*DWRITE_HIT_TEST_METRICS) callconv(.Inline) HRESULT {
        return self.vtable.HitTestPoint(self, pointX, pointY, isTrailingHit, isInside, hitTestMetrics);
    }
    pub fn HitTestTextPosition(self: *const IDWriteTextLayout, textPosition: u32, isTrailingHit: BOOL, pointX: ?*f32, pointY: ?*f32, hitTestMetrics: ?*DWRITE_HIT_TEST_METRICS) callconv(.Inline) HRESULT {
        return self.vtable.HitTestTextPosition(self, textPosition, isTrailingHit, pointX, pointY, hitTestMetrics);
    }
    pub fn HitTestTextRange(self: *const IDWriteTextLayout, textPosition: u32, textLength: u32, originX: f32, originY: f32, hitTestMetrics: ?[*]DWRITE_HIT_TEST_METRICS, maxHitTestMetricsCount: u32, actualHitTestMetricsCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.HitTestTextRange(self, textPosition, textLength, originX, originY, hitTestMetrics, maxHitTestMetricsCount, actualHitTestMetricsCount);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteBitmapRenderTarget_Value = Guid.initString("5e5a32a3-8dff-4773-9ff6-0696eab77267");
pub const IID_IDWriteBitmapRenderTarget = &IID_IDWriteBitmapRenderTarget_Value;
pub const IDWriteBitmapRenderTarget = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DrawGlyphRun: *const fn(
            self: *const IDWriteBitmapRenderTarget,
            baselineOriginX: f32,
            baselineOriginY: f32,
            measuringMode: DWRITE_MEASURING_MODE,
            glyphRun: ?*const DWRITE_GLYPH_RUN,
            renderingParams: ?*IDWriteRenderingParams,
            textColor: u32,
            blackBoxRect: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMemoryDC: *const fn(
            self: *const IDWriteBitmapRenderTarget,
        ) callconv(@import("std").os.windows.WINAPI) ?HDC,
        GetPixelsPerDip: *const fn(
            self: *const IDWriteBitmapRenderTarget,
        ) callconv(@import("std").os.windows.WINAPI) f32,
        SetPixelsPerDip: *const fn(
            self: *const IDWriteBitmapRenderTarget,
            pixelsPerDip: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentTransform: *const fn(
            self: *const IDWriteBitmapRenderTarget,
            transform: ?*DWRITE_MATRIX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCurrentTransform: *const fn(
            self: *const IDWriteBitmapRenderTarget,
            transform: ?*const DWRITE_MATRIX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSize: *const fn(
            self: *const IDWriteBitmapRenderTarget,
            size: ?*SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resize: *const fn(
            self: *const IDWriteBitmapRenderTarget,
            width: u32,
            height: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn DrawGlyphRun(self: *const IDWriteBitmapRenderTarget, baselineOriginX: f32, baselineOriginY: f32, measuringMode: DWRITE_MEASURING_MODE, glyphRun: ?*const DWRITE_GLYPH_RUN, renderingParams: ?*IDWriteRenderingParams, textColor: u32, blackBoxRect: ?*RECT) callconv(.Inline) HRESULT {
        return self.vtable.DrawGlyphRun(self, baselineOriginX, baselineOriginY, measuringMode, glyphRun, renderingParams, textColor, blackBoxRect);
    }
    pub fn GetMemoryDC(self: *const IDWriteBitmapRenderTarget) callconv(.Inline) ?HDC {
        return self.vtable.GetMemoryDC(self);
    }
    pub fn GetPixelsPerDip(self: *const IDWriteBitmapRenderTarget) callconv(.Inline) f32 {
        return self.vtable.GetPixelsPerDip(self);
    }
    pub fn SetPixelsPerDip(self: *const IDWriteBitmapRenderTarget, pixelsPerDip: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetPixelsPerDip(self, pixelsPerDip);
    }
    pub fn GetCurrentTransform(self: *const IDWriteBitmapRenderTarget, transform: ?*DWRITE_MATRIX) callconv(.Inline) HRESULT {
        return self.vtable.GetCurrentTransform(self, transform);
    }
    pub fn SetCurrentTransform(self: *const IDWriteBitmapRenderTarget, transform: ?*const DWRITE_MATRIX) callconv(.Inline) HRESULT {
        return self.vtable.SetCurrentTransform(self, transform);
    }
    pub fn GetSize(self: *const IDWriteBitmapRenderTarget, size: ?*SIZE) callconv(.Inline) HRESULT {
        return self.vtable.GetSize(self, size);
    }
    pub fn Resize(self: *const IDWriteBitmapRenderTarget, width: u32, height: u32) callconv(.Inline) HRESULT {
        return self.vtable.Resize(self, width, height);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteGdiInterop_Value = Guid.initString("1edd9491-9853-4299-898f-6432983b6f3a");
pub const IID_IDWriteGdiInterop = &IID_IDWriteGdiInterop_Value;
pub const IDWriteGdiInterop = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateFontFromLOGFONT: *const fn(
            self: *const IDWriteGdiInterop,
            logFont: ?*const LOGFONTW,
            font: **IDWriteFont,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertFontToLOGFONT: *const fn(
            self: *const IDWriteGdiInterop,
            font: ?*IDWriteFont,
            logFont: ?*LOGFONTW,
            isSystemFont: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertFontFaceToLOGFONT: *const fn(
            self: *const IDWriteGdiInterop,
            font: ?*IDWriteFontFace,
            logFont: ?*LOGFONTW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontFaceFromHdc: *const fn(
            self: *const IDWriteGdiInterop,
            hdc: ?HDC,
            fontFace: **IDWriteFontFace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBitmapRenderTarget: *const fn(
            self: *const IDWriteGdiInterop,
            hdc: ?HDC,
            width: u32,
            height: u32,
            renderTarget: **IDWriteBitmapRenderTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateFontFromLOGFONT(self: *const IDWriteGdiInterop, logFont: ?*const LOGFONTW, font: **IDWriteFont) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontFromLOGFONT(self, logFont, font);
    }
    pub fn ConvertFontToLOGFONT(self: *const IDWriteGdiInterop, font: ?*IDWriteFont, logFont: ?*LOGFONTW, isSystemFont: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.ConvertFontToLOGFONT(self, font, logFont, isSystemFont);
    }
    pub fn ConvertFontFaceToLOGFONT(self: *const IDWriteGdiInterop, font: ?*IDWriteFontFace, logFont: ?*LOGFONTW) callconv(.Inline) HRESULT {
        return self.vtable.ConvertFontFaceToLOGFONT(self, font, logFont);
    }
    pub fn CreateFontFaceFromHdc(self: *const IDWriteGdiInterop, hdc: ?HDC, fontFace: **IDWriteFontFace) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontFaceFromHdc(self, hdc, fontFace);
    }
    pub fn CreateBitmapRenderTarget(self: *const IDWriteGdiInterop, hdc: ?HDC, width: u32, height: u32, renderTarget: **IDWriteBitmapRenderTarget) callconv(.Inline) HRESULT {
        return self.vtable.CreateBitmapRenderTarget(self, hdc, width, height, renderTarget);
    }
};

pub const DWRITE_TEXTURE_TYPE = enum(i32) {
    ALIASED_1x1 = 0,
    CLEARTYPE_3x1 = 1,
};
pub const DWRITE_TEXTURE_ALIASED_1x1 = DWRITE_TEXTURE_TYPE.ALIASED_1x1;
pub const DWRITE_TEXTURE_CLEARTYPE_3x1 = DWRITE_TEXTURE_TYPE.CLEARTYPE_3x1;

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteGlyphRunAnalysis_Value = Guid.initString("7d97dbf7-e085-42d4-81e3-6a883bded118");
pub const IID_IDWriteGlyphRunAnalysis = &IID_IDWriteGlyphRunAnalysis_Value;
pub const IDWriteGlyphRunAnalysis = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAlphaTextureBounds: *const fn(
            self: *const IDWriteGlyphRunAnalysis,
            textureType: DWRITE_TEXTURE_TYPE,
            textureBounds: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateAlphaTexture: *const fn(
            self: *const IDWriteGlyphRunAnalysis,
            textureType: DWRITE_TEXTURE_TYPE,
            textureBounds: ?*const RECT,
            // TODO: what to do with BytesParamIndex 3?
            alphaValues: ?*u8,
            bufferSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAlphaBlendParams: *const fn(
            self: *const IDWriteGlyphRunAnalysis,
            renderingParams: ?*IDWriteRenderingParams,
            blendGamma: ?*f32,
            blendEnhancedContrast: ?*f32,
            blendClearTypeLevel: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetAlphaTextureBounds(self: *const IDWriteGlyphRunAnalysis, textureType: DWRITE_TEXTURE_TYPE, textureBounds: ?*RECT) callconv(.Inline) HRESULT {
        return self.vtable.GetAlphaTextureBounds(self, textureType, textureBounds);
    }
    pub fn CreateAlphaTexture(self: *const IDWriteGlyphRunAnalysis, textureType: DWRITE_TEXTURE_TYPE, textureBounds: ?*const RECT, alphaValues: ?*u8, bufferSize: u32) callconv(.Inline) HRESULT {
        return self.vtable.CreateAlphaTexture(self, textureType, textureBounds, alphaValues, bufferSize);
    }
    pub fn GetAlphaBlendParams(self: *const IDWriteGlyphRunAnalysis, renderingParams: ?*IDWriteRenderingParams, blendGamma: ?*f32, blendEnhancedContrast: ?*f32, blendClearTypeLevel: ?*f32) callconv(.Inline) HRESULT {
        return self.vtable.GetAlphaBlendParams(self, renderingParams, blendGamma, blendEnhancedContrast, blendClearTypeLevel);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteFactory_Value = Guid.initString("b859ee5a-d838-4b5b-a2e8-1adc7d93db48");
pub const IID_IDWriteFactory = &IID_IDWriteFactory_Value;
pub const IDWriteFactory = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSystemFontCollection: *const fn(
            self: *const IDWriteFactory,
            fontCollection: **IDWriteFontCollection,
            checkForUpdates: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCustomFontCollection: *const fn(
            self: *const IDWriteFactory,
            collectionLoader: ?*IDWriteFontCollectionLoader,
            // TODO: what to do with BytesParamIndex 2?
            collectionKey: ?*const anyopaque,
            collectionKeySize: u32,
            fontCollection: **IDWriteFontCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterFontCollectionLoader: *const fn(
            self: *const IDWriteFactory,
            fontCollectionLoader: ?*IDWriteFontCollectionLoader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterFontCollectionLoader: *const fn(
            self: *const IDWriteFactory,
            fontCollectionLoader: ?*IDWriteFontCollectionLoader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontFileReference: *const fn(
            self: *const IDWriteFactory,
            filePath: ?[*:0]const u16,
            lastWriteTime: ?*const FILETIME,
            fontFile: **IDWriteFontFile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCustomFontFileReference: *const fn(
            self: *const IDWriteFactory,
            // TODO: what to do with BytesParamIndex 1?
            fontFileReferenceKey: ?*const anyopaque,
            fontFileReferenceKeySize: u32,
            fontFileLoader: ?*IDWriteFontFileLoader,
            fontFile: **IDWriteFontFile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontFace: *const fn(
            self: *const IDWriteFactory,
            fontFaceType: DWRITE_FONT_FACE_TYPE,
            numberOfFiles: u32,
            fontFiles: [*]?*IDWriteFontFile,
            faceIndex: u32,
            fontFaceSimulationFlags: DWRITE_FONT_SIMULATIONS,
            fontFace: **IDWriteFontFace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRenderingParams: *const fn(
            self: *const IDWriteFactory,
            renderingParams: **IDWriteRenderingParams,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMonitorRenderingParams: *const fn(
            self: *const IDWriteFactory,
            monitor: ?HMONITOR,
            renderingParams: **IDWriteRenderingParams,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCustomRenderingParams: *const fn(
            self: *const IDWriteFactory,
            gamma: f32,
            enhancedContrast: f32,
            clearTypeLevel: f32,
            pixelGeometry: DWRITE_PIXEL_GEOMETRY,
            renderingMode: DWRITE_RENDERING_MODE,
            renderingParams: **IDWriteRenderingParams,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterFontFileLoader: *const fn(
            self: *const IDWriteFactory,
            fontFileLoader: ?*IDWriteFontFileLoader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterFontFileLoader: *const fn(
            self: *const IDWriteFactory,
            fontFileLoader: ?*IDWriteFontFileLoader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTextFormat: *const fn(
            self: *const IDWriteFactory,
            fontFamilyName: ?[*:0]const u16,
            fontCollection: ?*IDWriteFontCollection,
            fontWeight: DWRITE_FONT_WEIGHT,
            fontStyle: DWRITE_FONT_STYLE,
            fontStretch: DWRITE_FONT_STRETCH,
            fontSize: f32,
            localeName: ?[*:0]const u16,
            textFormat: **IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTypography: *const fn(
            self: *const IDWriteFactory,
            typography: **IDWriteTypography,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGdiInterop: *const fn(
            self: *const IDWriteFactory,
            gdiInterop: **IDWriteGdiInterop,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTextLayout: *const fn(
            self: *const IDWriteFactory,
            string: [*:0]const u16,
            stringLength: u32,
            textFormat: ?*IDWriteTextFormat,
            maxWidth: f32,
            maxHeight: f32,
            textLayout: **IDWriteTextLayout,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGdiCompatibleTextLayout: *const fn(
            self: *const IDWriteFactory,
            string: [*:0]const u16,
            stringLength: u32,
            textFormat: ?*IDWriteTextFormat,
            layoutWidth: f32,
            layoutHeight: f32,
            pixelsPerDip: f32,
            transform: ?*const DWRITE_MATRIX,
            useGdiNatural: BOOL,
            textLayout: **IDWriteTextLayout,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEllipsisTrimmingSign: *const fn(
            self: *const IDWriteFactory,
            textFormat: ?*IDWriteTextFormat,
            trimmingSign: **IDWriteInlineObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTextAnalyzer: *const fn(
            self: *const IDWriteFactory,
            textAnalyzer: **IDWriteTextAnalyzer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateNumberSubstitution: *const fn(
            self: *const IDWriteFactory,
            substitutionMethod: DWRITE_NUMBER_SUBSTITUTION_METHOD,
            localeName: ?[*:0]const u16,
            ignoreUserOverride: BOOL,
            numberSubstitution: **IDWriteNumberSubstitution,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGlyphRunAnalysis: *const fn(
            self: *const IDWriteFactory,
            glyphRun: ?*const DWRITE_GLYPH_RUN,
            pixelsPerDip: f32,
            transform: ?*const DWRITE_MATRIX,
            renderingMode: DWRITE_RENDERING_MODE,
            measuringMode: DWRITE_MEASURING_MODE,
            baselineOriginX: f32,
            baselineOriginY: f32,
            glyphRunAnalysis: **IDWriteGlyphRunAnalysis,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetSystemFontCollection(self: *const IDWriteFactory, fontCollection: **IDWriteFontCollection, checkForUpdates: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.GetSystemFontCollection(self, fontCollection, checkForUpdates);
    }
    pub fn CreateCustomFontCollection(self: *const IDWriteFactory, collectionLoader: ?*IDWriteFontCollectionLoader, collectionKey: ?*const anyopaque, collectionKeySize: u32, fontCollection: **IDWriteFontCollection) callconv(.Inline) HRESULT {
        return self.vtable.CreateCustomFontCollection(self, collectionLoader, collectionKey, collectionKeySize, fontCollection);
    }
    pub fn RegisterFontCollectionLoader(self: *const IDWriteFactory, fontCollectionLoader: ?*IDWriteFontCollectionLoader) callconv(.Inline) HRESULT {
        return self.vtable.RegisterFontCollectionLoader(self, fontCollectionLoader);
    }
    pub fn UnregisterFontCollectionLoader(self: *const IDWriteFactory, fontCollectionLoader: ?*IDWriteFontCollectionLoader) callconv(.Inline) HRESULT {
        return self.vtable.UnregisterFontCollectionLoader(self, fontCollectionLoader);
    }
    pub fn CreateFontFileReference(self: *const IDWriteFactory, filePath: ?[*:0]const u16, lastWriteTime: ?*const FILETIME, fontFile: **IDWriteFontFile) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontFileReference(self, filePath, lastWriteTime, fontFile);
    }
    pub fn CreateCustomFontFileReference(self: *const IDWriteFactory, fontFileReferenceKey: ?*const anyopaque, fontFileReferenceKeySize: u32, fontFileLoader: ?*IDWriteFontFileLoader, fontFile: **IDWriteFontFile) callconv(.Inline) HRESULT {
        return self.vtable.CreateCustomFontFileReference(self, fontFileReferenceKey, fontFileReferenceKeySize, fontFileLoader, fontFile);
    }
    pub fn CreateFontFace(self: *const IDWriteFactory, fontFaceType: DWRITE_FONT_FACE_TYPE, numberOfFiles: u32, fontFiles: [*]?*IDWriteFontFile, faceIndex: u32, fontFaceSimulationFlags: DWRITE_FONT_SIMULATIONS, fontFace: **IDWriteFontFace) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontFace(self, fontFaceType, numberOfFiles, fontFiles, faceIndex, fontFaceSimulationFlags, fontFace);
    }
    pub fn CreateRenderingParams(self: *const IDWriteFactory, renderingParams: **IDWriteRenderingParams) callconv(.Inline) HRESULT {
        return self.vtable.CreateRenderingParams(self, renderingParams);
    }
    pub fn CreateMonitorRenderingParams(self: *const IDWriteFactory, monitor: ?HMONITOR, renderingParams: **IDWriteRenderingParams) callconv(.Inline) HRESULT {
        return self.vtable.CreateMonitorRenderingParams(self, monitor, renderingParams);
    }
    pub fn CreateCustomRenderingParams(self: *const IDWriteFactory, gamma: f32, enhancedContrast: f32, clearTypeLevel: f32, pixelGeometry: DWRITE_PIXEL_GEOMETRY, renderingMode: DWRITE_RENDERING_MODE, renderingParams: **IDWriteRenderingParams) callconv(.Inline) HRESULT {
        return self.vtable.CreateCustomRenderingParams(self, gamma, enhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, renderingParams);
    }
    pub fn RegisterFontFileLoader(self: *const IDWriteFactory, fontFileLoader: ?*IDWriteFontFileLoader) callconv(.Inline) HRESULT {
        return self.vtable.RegisterFontFileLoader(self, fontFileLoader);
    }
    pub fn UnregisterFontFileLoader(self: *const IDWriteFactory, fontFileLoader: ?*IDWriteFontFileLoader) callconv(.Inline) HRESULT {
        return self.vtable.UnregisterFontFileLoader(self, fontFileLoader);
    }
    pub fn CreateTextFormat(self: *const IDWriteFactory, fontFamilyName: ?[*:0]const u16, fontCollection: ?*IDWriteFontCollection, fontWeight: DWRITE_FONT_WEIGHT, fontStyle: DWRITE_FONT_STYLE, fontStretch: DWRITE_FONT_STRETCH, fontSize: f32, localeName: ?[*:0]const u16, textFormat: **IDWriteTextFormat) callconv(.Inline) HRESULT {
        return self.vtable.CreateTextFormat(self, fontFamilyName, fontCollection, fontWeight, fontStyle, fontStretch, fontSize, localeName, textFormat);
    }
    pub fn CreateTypography(self: *const IDWriteFactory, typography: **IDWriteTypography) callconv(.Inline) HRESULT {
        return self.vtable.CreateTypography(self, typography);
    }
    pub fn GetGdiInterop(self: *const IDWriteFactory, gdiInterop: **IDWriteGdiInterop) callconv(.Inline) HRESULT {
        return self.vtable.GetGdiInterop(self, gdiInterop);
    }
    pub fn CreateTextLayout(self: *const IDWriteFactory, string: [*:0]const u16, stringLength: u32, textFormat: ?*IDWriteTextFormat, maxWidth: f32, maxHeight: f32, textLayout: **IDWriteTextLayout) callconv(.Inline) HRESULT {
        return self.vtable.CreateTextLayout(self, string, stringLength, textFormat, maxWidth, maxHeight, textLayout);
    }
    pub fn CreateGdiCompatibleTextLayout(self: *const IDWriteFactory, string: [*:0]const u16, stringLength: u32, textFormat: ?*IDWriteTextFormat, layoutWidth: f32, layoutHeight: f32, pixelsPerDip: f32, transform: ?*const DWRITE_MATRIX, useGdiNatural: BOOL, textLayout: **IDWriteTextLayout) callconv(.Inline) HRESULT {
        return self.vtable.CreateGdiCompatibleTextLayout(self, string, stringLength, textFormat, layoutWidth, layoutHeight, pixelsPerDip, transform, useGdiNatural, textLayout);
    }
    pub fn CreateEllipsisTrimmingSign(self: *const IDWriteFactory, textFormat: ?*IDWriteTextFormat, trimmingSign: **IDWriteInlineObject) callconv(.Inline) HRESULT {
        return self.vtable.CreateEllipsisTrimmingSign(self, textFormat, trimmingSign);
    }
    pub fn CreateTextAnalyzer(self: *const IDWriteFactory, textAnalyzer: **IDWriteTextAnalyzer) callconv(.Inline) HRESULT {
        return self.vtable.CreateTextAnalyzer(self, textAnalyzer);
    }
    pub fn CreateNumberSubstitution(self: *const IDWriteFactory, substitutionMethod: DWRITE_NUMBER_SUBSTITUTION_METHOD, localeName: ?[*:0]const u16, ignoreUserOverride: BOOL, numberSubstitution: **IDWriteNumberSubstitution) callconv(.Inline) HRESULT {
        return self.vtable.CreateNumberSubstitution(self, substitutionMethod, localeName, ignoreUserOverride, numberSubstitution);
    }
    pub fn CreateGlyphRunAnalysis(self: *const IDWriteFactory, glyphRun: ?*const DWRITE_GLYPH_RUN, pixelsPerDip: f32, transform: ?*const DWRITE_MATRIX, renderingMode: DWRITE_RENDERING_MODE, measuringMode: DWRITE_MEASURING_MODE, baselineOriginX: f32, baselineOriginY: f32, glyphRunAnalysis: **IDWriteGlyphRunAnalysis) callconv(.Inline) HRESULT {
        return self.vtable.CreateGlyphRunAnalysis(self, glyphRun, pixelsPerDip, transform, renderingMode, measuringMode, baselineOriginX, baselineOriginY, glyphRunAnalysis);
    }
};

pub const DWRITE_PANOSE_FAMILY = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    TEXT_DISPLAY = 2,
    SCRIPT = 3,
    DECORATIVE = 4,
    SYMBOL = 5,
    pub const PICTORIAL = .SYMBOL;
};
pub const DWRITE_PANOSE_FAMILY_ANY = DWRITE_PANOSE_FAMILY.ANY;
pub const DWRITE_PANOSE_FAMILY_NO_FIT = DWRITE_PANOSE_FAMILY.NO_FIT;
pub const DWRITE_PANOSE_FAMILY_TEXT_DISPLAY = DWRITE_PANOSE_FAMILY.TEXT_DISPLAY;
pub const DWRITE_PANOSE_FAMILY_SCRIPT = DWRITE_PANOSE_FAMILY.SCRIPT;
pub const DWRITE_PANOSE_FAMILY_DECORATIVE = DWRITE_PANOSE_FAMILY.DECORATIVE;
pub const DWRITE_PANOSE_FAMILY_SYMBOL = DWRITE_PANOSE_FAMILY.SYMBOL;
pub const DWRITE_PANOSE_FAMILY_PICTORIAL = DWRITE_PANOSE_FAMILY.SYMBOL;

pub const DWRITE_PANOSE_SERIF_STYLE = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    COVE = 2,
    OBTUSE_COVE = 3,
    SQUARE_COVE = 4,
    OBTUSE_SQUARE_COVE = 5,
    SQUARE = 6,
    THIN = 7,
    OVAL = 8,
    EXAGGERATED = 9,
    TRIANGLE = 10,
    NORMAL_SANS = 11,
    OBTUSE_SANS = 12,
    PERPENDICULAR_SANS = 13,
    FLARED = 14,
    ROUNDED = 15,
    SCRIPT = 16,
    pub const PERP_SANS = .PERPENDICULAR_SANS;
    pub const BONE = .OVAL;
};
pub const DWRITE_PANOSE_SERIF_STYLE_ANY = DWRITE_PANOSE_SERIF_STYLE.ANY;
pub const DWRITE_PANOSE_SERIF_STYLE_NO_FIT = DWRITE_PANOSE_SERIF_STYLE.NO_FIT;
pub const DWRITE_PANOSE_SERIF_STYLE_COVE = DWRITE_PANOSE_SERIF_STYLE.COVE;
pub const DWRITE_PANOSE_SERIF_STYLE_OBTUSE_COVE = DWRITE_PANOSE_SERIF_STYLE.OBTUSE_COVE;
pub const DWRITE_PANOSE_SERIF_STYLE_SQUARE_COVE = DWRITE_PANOSE_SERIF_STYLE.SQUARE_COVE;
pub const DWRITE_PANOSE_SERIF_STYLE_OBTUSE_SQUARE_COVE = DWRITE_PANOSE_SERIF_STYLE.OBTUSE_SQUARE_COVE;
pub const DWRITE_PANOSE_SERIF_STYLE_SQUARE = DWRITE_PANOSE_SERIF_STYLE.SQUARE;
pub const DWRITE_PANOSE_SERIF_STYLE_THIN = DWRITE_PANOSE_SERIF_STYLE.THIN;
pub const DWRITE_PANOSE_SERIF_STYLE_OVAL = DWRITE_PANOSE_SERIF_STYLE.OVAL;
pub const DWRITE_PANOSE_SERIF_STYLE_EXAGGERATED = DWRITE_PANOSE_SERIF_STYLE.EXAGGERATED;
pub const DWRITE_PANOSE_SERIF_STYLE_TRIANGLE = DWRITE_PANOSE_SERIF_STYLE.TRIANGLE;
pub const DWRITE_PANOSE_SERIF_STYLE_NORMAL_SANS = DWRITE_PANOSE_SERIF_STYLE.NORMAL_SANS;
pub const DWRITE_PANOSE_SERIF_STYLE_OBTUSE_SANS = DWRITE_PANOSE_SERIF_STYLE.OBTUSE_SANS;
pub const DWRITE_PANOSE_SERIF_STYLE_PERPENDICULAR_SANS = DWRITE_PANOSE_SERIF_STYLE.PERPENDICULAR_SANS;
pub const DWRITE_PANOSE_SERIF_STYLE_FLARED = DWRITE_PANOSE_SERIF_STYLE.FLARED;
pub const DWRITE_PANOSE_SERIF_STYLE_ROUNDED = DWRITE_PANOSE_SERIF_STYLE.ROUNDED;
pub const DWRITE_PANOSE_SERIF_STYLE_SCRIPT = DWRITE_PANOSE_SERIF_STYLE.SCRIPT;
pub const DWRITE_PANOSE_SERIF_STYLE_PERP_SANS = DWRITE_PANOSE_SERIF_STYLE.PERPENDICULAR_SANS;
pub const DWRITE_PANOSE_SERIF_STYLE_BONE = DWRITE_PANOSE_SERIF_STYLE.OVAL;

pub const DWRITE_PANOSE_WEIGHT = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    VERY_LIGHT = 2,
    LIGHT = 3,
    THIN = 4,
    BOOK = 5,
    MEDIUM = 6,
    DEMI = 7,
    BOLD = 8,
    HEAVY = 9,
    BLACK = 10,
    EXTRA_BLACK = 11,
    pub const NORD = .EXTRA_BLACK;
};
pub const DWRITE_PANOSE_WEIGHT_ANY = DWRITE_PANOSE_WEIGHT.ANY;
pub const DWRITE_PANOSE_WEIGHT_NO_FIT = DWRITE_PANOSE_WEIGHT.NO_FIT;
pub const DWRITE_PANOSE_WEIGHT_VERY_LIGHT = DWRITE_PANOSE_WEIGHT.VERY_LIGHT;
pub const DWRITE_PANOSE_WEIGHT_LIGHT = DWRITE_PANOSE_WEIGHT.LIGHT;
pub const DWRITE_PANOSE_WEIGHT_THIN = DWRITE_PANOSE_WEIGHT.THIN;
pub const DWRITE_PANOSE_WEIGHT_BOOK = DWRITE_PANOSE_WEIGHT.BOOK;
pub const DWRITE_PANOSE_WEIGHT_MEDIUM = DWRITE_PANOSE_WEIGHT.MEDIUM;
pub const DWRITE_PANOSE_WEIGHT_DEMI = DWRITE_PANOSE_WEIGHT.DEMI;
pub const DWRITE_PANOSE_WEIGHT_BOLD = DWRITE_PANOSE_WEIGHT.BOLD;
pub const DWRITE_PANOSE_WEIGHT_HEAVY = DWRITE_PANOSE_WEIGHT.HEAVY;
pub const DWRITE_PANOSE_WEIGHT_BLACK = DWRITE_PANOSE_WEIGHT.BLACK;
pub const DWRITE_PANOSE_WEIGHT_EXTRA_BLACK = DWRITE_PANOSE_WEIGHT.EXTRA_BLACK;
pub const DWRITE_PANOSE_WEIGHT_NORD = DWRITE_PANOSE_WEIGHT.EXTRA_BLACK;

pub const DWRITE_PANOSE_PROPORTION = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    OLD_STYLE = 2,
    MODERN = 3,
    EVEN_WIDTH = 4,
    EXPANDED = 5,
    CONDENSED = 6,
    VERY_EXPANDED = 7,
    VERY_CONDENSED = 8,
    MONOSPACED = 9,
};
pub const DWRITE_PANOSE_PROPORTION_ANY = DWRITE_PANOSE_PROPORTION.ANY;
pub const DWRITE_PANOSE_PROPORTION_NO_FIT = DWRITE_PANOSE_PROPORTION.NO_FIT;
pub const DWRITE_PANOSE_PROPORTION_OLD_STYLE = DWRITE_PANOSE_PROPORTION.OLD_STYLE;
pub const DWRITE_PANOSE_PROPORTION_MODERN = DWRITE_PANOSE_PROPORTION.MODERN;
pub const DWRITE_PANOSE_PROPORTION_EVEN_WIDTH = DWRITE_PANOSE_PROPORTION.EVEN_WIDTH;
pub const DWRITE_PANOSE_PROPORTION_EXPANDED = DWRITE_PANOSE_PROPORTION.EXPANDED;
pub const DWRITE_PANOSE_PROPORTION_CONDENSED = DWRITE_PANOSE_PROPORTION.CONDENSED;
pub const DWRITE_PANOSE_PROPORTION_VERY_EXPANDED = DWRITE_PANOSE_PROPORTION.VERY_EXPANDED;
pub const DWRITE_PANOSE_PROPORTION_VERY_CONDENSED = DWRITE_PANOSE_PROPORTION.VERY_CONDENSED;
pub const DWRITE_PANOSE_PROPORTION_MONOSPACED = DWRITE_PANOSE_PROPORTION.MONOSPACED;

pub const DWRITE_PANOSE_CONTRAST = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    NONE = 2,
    VERY_LOW = 3,
    LOW = 4,
    MEDIUM_LOW = 5,
    MEDIUM = 6,
    MEDIUM_HIGH = 7,
    HIGH = 8,
    VERY_HIGH = 9,
    HORIZONTAL_LOW = 10,
    HORIZONTAL_MEDIUM = 11,
    HORIZONTAL_HIGH = 12,
    BROKEN = 13,
};
pub const DWRITE_PANOSE_CONTRAST_ANY = DWRITE_PANOSE_CONTRAST.ANY;
pub const DWRITE_PANOSE_CONTRAST_NO_FIT = DWRITE_PANOSE_CONTRAST.NO_FIT;
pub const DWRITE_PANOSE_CONTRAST_NONE = DWRITE_PANOSE_CONTRAST.NONE;
pub const DWRITE_PANOSE_CONTRAST_VERY_LOW = DWRITE_PANOSE_CONTRAST.VERY_LOW;
pub const DWRITE_PANOSE_CONTRAST_LOW = DWRITE_PANOSE_CONTRAST.LOW;
pub const DWRITE_PANOSE_CONTRAST_MEDIUM_LOW = DWRITE_PANOSE_CONTRAST.MEDIUM_LOW;
pub const DWRITE_PANOSE_CONTRAST_MEDIUM = DWRITE_PANOSE_CONTRAST.MEDIUM;
pub const DWRITE_PANOSE_CONTRAST_MEDIUM_HIGH = DWRITE_PANOSE_CONTRAST.MEDIUM_HIGH;
pub const DWRITE_PANOSE_CONTRAST_HIGH = DWRITE_PANOSE_CONTRAST.HIGH;
pub const DWRITE_PANOSE_CONTRAST_VERY_HIGH = DWRITE_PANOSE_CONTRAST.VERY_HIGH;
pub const DWRITE_PANOSE_CONTRAST_HORIZONTAL_LOW = DWRITE_PANOSE_CONTRAST.HORIZONTAL_LOW;
pub const DWRITE_PANOSE_CONTRAST_HORIZONTAL_MEDIUM = DWRITE_PANOSE_CONTRAST.HORIZONTAL_MEDIUM;
pub const DWRITE_PANOSE_CONTRAST_HORIZONTAL_HIGH = DWRITE_PANOSE_CONTRAST.HORIZONTAL_HIGH;
pub const DWRITE_PANOSE_CONTRAST_BROKEN = DWRITE_PANOSE_CONTRAST.BROKEN;

pub const DWRITE_PANOSE_STROKE_VARIATION = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    NO_VARIATION = 2,
    GRADUAL_DIAGONAL = 3,
    GRADUAL_TRANSITIONAL = 4,
    GRADUAL_VERTICAL = 5,
    GRADUAL_HORIZONTAL = 6,
    RAPID_VERTICAL = 7,
    RAPID_HORIZONTAL = 8,
    INSTANT_VERTICAL = 9,
    INSTANT_HORIZONTAL = 10,
};
pub const DWRITE_PANOSE_STROKE_VARIATION_ANY = DWRITE_PANOSE_STROKE_VARIATION.ANY;
pub const DWRITE_PANOSE_STROKE_VARIATION_NO_FIT = DWRITE_PANOSE_STROKE_VARIATION.NO_FIT;
pub const DWRITE_PANOSE_STROKE_VARIATION_NO_VARIATION = DWRITE_PANOSE_STROKE_VARIATION.NO_VARIATION;
pub const DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_DIAGONAL = DWRITE_PANOSE_STROKE_VARIATION.GRADUAL_DIAGONAL;
pub const DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_TRANSITIONAL = DWRITE_PANOSE_STROKE_VARIATION.GRADUAL_TRANSITIONAL;
pub const DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_VERTICAL = DWRITE_PANOSE_STROKE_VARIATION.GRADUAL_VERTICAL;
pub const DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_HORIZONTAL = DWRITE_PANOSE_STROKE_VARIATION.GRADUAL_HORIZONTAL;
pub const DWRITE_PANOSE_STROKE_VARIATION_RAPID_VERTICAL = DWRITE_PANOSE_STROKE_VARIATION.RAPID_VERTICAL;
pub const DWRITE_PANOSE_STROKE_VARIATION_RAPID_HORIZONTAL = DWRITE_PANOSE_STROKE_VARIATION.RAPID_HORIZONTAL;
pub const DWRITE_PANOSE_STROKE_VARIATION_INSTANT_VERTICAL = DWRITE_PANOSE_STROKE_VARIATION.INSTANT_VERTICAL;
pub const DWRITE_PANOSE_STROKE_VARIATION_INSTANT_HORIZONTAL = DWRITE_PANOSE_STROKE_VARIATION.INSTANT_HORIZONTAL;

pub const DWRITE_PANOSE_ARM_STYLE = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    STRAIGHT_ARMS_HORIZONTAL = 2,
    STRAIGHT_ARMS_WEDGE = 3,
    STRAIGHT_ARMS_VERTICAL = 4,
    STRAIGHT_ARMS_SINGLE_SERIF = 5,
    STRAIGHT_ARMS_DOUBLE_SERIF = 6,
    NONSTRAIGHT_ARMS_HORIZONTAL = 7,
    NONSTRAIGHT_ARMS_WEDGE = 8,
    NONSTRAIGHT_ARMS_VERTICAL = 9,
    NONSTRAIGHT_ARMS_SINGLE_SERIF = 10,
    NONSTRAIGHT_ARMS_DOUBLE_SERIF = 11,
    pub const STRAIGHT_ARMS_HORZ = .STRAIGHT_ARMS_HORIZONTAL;
    pub const STRAIGHT_ARMS_VERT = .STRAIGHT_ARMS_VERTICAL;
    pub const BENT_ARMS_HORZ = .NONSTRAIGHT_ARMS_HORIZONTAL;
    pub const BENT_ARMS_WEDGE = .NONSTRAIGHT_ARMS_WEDGE;
    pub const BENT_ARMS_VERT = .NONSTRAIGHT_ARMS_VERTICAL;
    pub const BENT_ARMS_SINGLE_SERIF = .NONSTRAIGHT_ARMS_SINGLE_SERIF;
    pub const BENT_ARMS_DOUBLE_SERIF = .NONSTRAIGHT_ARMS_DOUBLE_SERIF;
};
pub const DWRITE_PANOSE_ARM_STYLE_ANY = DWRITE_PANOSE_ARM_STYLE.ANY;
pub const DWRITE_PANOSE_ARM_STYLE_NO_FIT = DWRITE_PANOSE_ARM_STYLE.NO_FIT;
pub const DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_HORIZONTAL = DWRITE_PANOSE_ARM_STYLE.STRAIGHT_ARMS_HORIZONTAL;
pub const DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_WEDGE = DWRITE_PANOSE_ARM_STYLE.STRAIGHT_ARMS_WEDGE;
pub const DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_VERTICAL = DWRITE_PANOSE_ARM_STYLE.STRAIGHT_ARMS_VERTICAL;
pub const DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_SINGLE_SERIF = DWRITE_PANOSE_ARM_STYLE.STRAIGHT_ARMS_SINGLE_SERIF;
pub const DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_DOUBLE_SERIF = DWRITE_PANOSE_ARM_STYLE.STRAIGHT_ARMS_DOUBLE_SERIF;
pub const DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_HORIZONTAL = DWRITE_PANOSE_ARM_STYLE.NONSTRAIGHT_ARMS_HORIZONTAL;
pub const DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_WEDGE = DWRITE_PANOSE_ARM_STYLE.NONSTRAIGHT_ARMS_WEDGE;
pub const DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_VERTICAL = DWRITE_PANOSE_ARM_STYLE.NONSTRAIGHT_ARMS_VERTICAL;
pub const DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_SINGLE_SERIF = DWRITE_PANOSE_ARM_STYLE.NONSTRAIGHT_ARMS_SINGLE_SERIF;
pub const DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_DOUBLE_SERIF = DWRITE_PANOSE_ARM_STYLE.NONSTRAIGHT_ARMS_DOUBLE_SERIF;
pub const DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_HORZ = DWRITE_PANOSE_ARM_STYLE.STRAIGHT_ARMS_HORIZONTAL;
pub const DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_VERT = DWRITE_PANOSE_ARM_STYLE.STRAIGHT_ARMS_VERTICAL;
pub const DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_HORZ = DWRITE_PANOSE_ARM_STYLE.NONSTRAIGHT_ARMS_HORIZONTAL;
pub const DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_WEDGE = DWRITE_PANOSE_ARM_STYLE.NONSTRAIGHT_ARMS_WEDGE;
pub const DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_VERT = DWRITE_PANOSE_ARM_STYLE.NONSTRAIGHT_ARMS_VERTICAL;
pub const DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_SINGLE_SERIF = DWRITE_PANOSE_ARM_STYLE.NONSTRAIGHT_ARMS_SINGLE_SERIF;
pub const DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_DOUBLE_SERIF = DWRITE_PANOSE_ARM_STYLE.NONSTRAIGHT_ARMS_DOUBLE_SERIF;

pub const DWRITE_PANOSE_LETTERFORM = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    NORMAL_CONTACT = 2,
    NORMAL_WEIGHTED = 3,
    NORMAL_BOXED = 4,
    NORMAL_FLATTENED = 5,
    NORMAL_ROUNDED = 6,
    NORMAL_OFF_CENTER = 7,
    NORMAL_SQUARE = 8,
    OBLIQUE_CONTACT = 9,
    OBLIQUE_WEIGHTED = 10,
    OBLIQUE_BOXED = 11,
    OBLIQUE_FLATTENED = 12,
    OBLIQUE_ROUNDED = 13,
    OBLIQUE_OFF_CENTER = 14,
    OBLIQUE_SQUARE = 15,
};
pub const DWRITE_PANOSE_LETTERFORM_ANY = DWRITE_PANOSE_LETTERFORM.ANY;
pub const DWRITE_PANOSE_LETTERFORM_NO_FIT = DWRITE_PANOSE_LETTERFORM.NO_FIT;
pub const DWRITE_PANOSE_LETTERFORM_NORMAL_CONTACT = DWRITE_PANOSE_LETTERFORM.NORMAL_CONTACT;
pub const DWRITE_PANOSE_LETTERFORM_NORMAL_WEIGHTED = DWRITE_PANOSE_LETTERFORM.NORMAL_WEIGHTED;
pub const DWRITE_PANOSE_LETTERFORM_NORMAL_BOXED = DWRITE_PANOSE_LETTERFORM.NORMAL_BOXED;
pub const DWRITE_PANOSE_LETTERFORM_NORMAL_FLATTENED = DWRITE_PANOSE_LETTERFORM.NORMAL_FLATTENED;
pub const DWRITE_PANOSE_LETTERFORM_NORMAL_ROUNDED = DWRITE_PANOSE_LETTERFORM.NORMAL_ROUNDED;
pub const DWRITE_PANOSE_LETTERFORM_NORMAL_OFF_CENTER = DWRITE_PANOSE_LETTERFORM.NORMAL_OFF_CENTER;
pub const DWRITE_PANOSE_LETTERFORM_NORMAL_SQUARE = DWRITE_PANOSE_LETTERFORM.NORMAL_SQUARE;
pub const DWRITE_PANOSE_LETTERFORM_OBLIQUE_CONTACT = DWRITE_PANOSE_LETTERFORM.OBLIQUE_CONTACT;
pub const DWRITE_PANOSE_LETTERFORM_OBLIQUE_WEIGHTED = DWRITE_PANOSE_LETTERFORM.OBLIQUE_WEIGHTED;
pub const DWRITE_PANOSE_LETTERFORM_OBLIQUE_BOXED = DWRITE_PANOSE_LETTERFORM.OBLIQUE_BOXED;
pub const DWRITE_PANOSE_LETTERFORM_OBLIQUE_FLATTENED = DWRITE_PANOSE_LETTERFORM.OBLIQUE_FLATTENED;
pub const DWRITE_PANOSE_LETTERFORM_OBLIQUE_ROUNDED = DWRITE_PANOSE_LETTERFORM.OBLIQUE_ROUNDED;
pub const DWRITE_PANOSE_LETTERFORM_OBLIQUE_OFF_CENTER = DWRITE_PANOSE_LETTERFORM.OBLIQUE_OFF_CENTER;
pub const DWRITE_PANOSE_LETTERFORM_OBLIQUE_SQUARE = DWRITE_PANOSE_LETTERFORM.OBLIQUE_SQUARE;

pub const DWRITE_PANOSE_MIDLINE = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    STANDARD_TRIMMED = 2,
    STANDARD_POINTED = 3,
    STANDARD_SERIFED = 4,
    HIGH_TRIMMED = 5,
    HIGH_POINTED = 6,
    HIGH_SERIFED = 7,
    CONSTANT_TRIMMED = 8,
    CONSTANT_POINTED = 9,
    CONSTANT_SERIFED = 10,
    LOW_TRIMMED = 11,
    LOW_POINTED = 12,
    LOW_SERIFED = 13,
};
pub const DWRITE_PANOSE_MIDLINE_ANY = DWRITE_PANOSE_MIDLINE.ANY;
pub const DWRITE_PANOSE_MIDLINE_NO_FIT = DWRITE_PANOSE_MIDLINE.NO_FIT;
pub const DWRITE_PANOSE_MIDLINE_STANDARD_TRIMMED = DWRITE_PANOSE_MIDLINE.STANDARD_TRIMMED;
pub const DWRITE_PANOSE_MIDLINE_STANDARD_POINTED = DWRITE_PANOSE_MIDLINE.STANDARD_POINTED;
pub const DWRITE_PANOSE_MIDLINE_STANDARD_SERIFED = DWRITE_PANOSE_MIDLINE.STANDARD_SERIFED;
pub const DWRITE_PANOSE_MIDLINE_HIGH_TRIMMED = DWRITE_PANOSE_MIDLINE.HIGH_TRIMMED;
pub const DWRITE_PANOSE_MIDLINE_HIGH_POINTED = DWRITE_PANOSE_MIDLINE.HIGH_POINTED;
pub const DWRITE_PANOSE_MIDLINE_HIGH_SERIFED = DWRITE_PANOSE_MIDLINE.HIGH_SERIFED;
pub const DWRITE_PANOSE_MIDLINE_CONSTANT_TRIMMED = DWRITE_PANOSE_MIDLINE.CONSTANT_TRIMMED;
pub const DWRITE_PANOSE_MIDLINE_CONSTANT_POINTED = DWRITE_PANOSE_MIDLINE.CONSTANT_POINTED;
pub const DWRITE_PANOSE_MIDLINE_CONSTANT_SERIFED = DWRITE_PANOSE_MIDLINE.CONSTANT_SERIFED;
pub const DWRITE_PANOSE_MIDLINE_LOW_TRIMMED = DWRITE_PANOSE_MIDLINE.LOW_TRIMMED;
pub const DWRITE_PANOSE_MIDLINE_LOW_POINTED = DWRITE_PANOSE_MIDLINE.LOW_POINTED;
pub const DWRITE_PANOSE_MIDLINE_LOW_SERIFED = DWRITE_PANOSE_MIDLINE.LOW_SERIFED;

pub const DWRITE_PANOSE_XHEIGHT = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    CONSTANT_SMALL = 2,
    CONSTANT_STANDARD = 3,
    CONSTANT_LARGE = 4,
    DUCKING_SMALL = 5,
    DUCKING_STANDARD = 6,
    DUCKING_LARGE = 7,
    pub const CONSTANT_STD = .CONSTANT_STANDARD;
    pub const DUCKING_STD = .DUCKING_STANDARD;
};
pub const DWRITE_PANOSE_XHEIGHT_ANY = DWRITE_PANOSE_XHEIGHT.ANY;
pub const DWRITE_PANOSE_XHEIGHT_NO_FIT = DWRITE_PANOSE_XHEIGHT.NO_FIT;
pub const DWRITE_PANOSE_XHEIGHT_CONSTANT_SMALL = DWRITE_PANOSE_XHEIGHT.CONSTANT_SMALL;
pub const DWRITE_PANOSE_XHEIGHT_CONSTANT_STANDARD = DWRITE_PANOSE_XHEIGHT.CONSTANT_STANDARD;
pub const DWRITE_PANOSE_XHEIGHT_CONSTANT_LARGE = DWRITE_PANOSE_XHEIGHT.CONSTANT_LARGE;
pub const DWRITE_PANOSE_XHEIGHT_DUCKING_SMALL = DWRITE_PANOSE_XHEIGHT.DUCKING_SMALL;
pub const DWRITE_PANOSE_XHEIGHT_DUCKING_STANDARD = DWRITE_PANOSE_XHEIGHT.DUCKING_STANDARD;
pub const DWRITE_PANOSE_XHEIGHT_DUCKING_LARGE = DWRITE_PANOSE_XHEIGHT.DUCKING_LARGE;
pub const DWRITE_PANOSE_XHEIGHT_CONSTANT_STD = DWRITE_PANOSE_XHEIGHT.CONSTANT_STANDARD;
pub const DWRITE_PANOSE_XHEIGHT_DUCKING_STD = DWRITE_PANOSE_XHEIGHT.DUCKING_STANDARD;

pub const DWRITE_PANOSE_TOOL_KIND = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    FLAT_NIB = 2,
    PRESSURE_POINT = 3,
    ENGRAVED = 4,
    BALL = 5,
    BRUSH = 6,
    ROUGH = 7,
    FELT_PEN_BRUSH_TIP = 8,
    WILD_BRUSH = 9,
};
pub const DWRITE_PANOSE_TOOL_KIND_ANY = DWRITE_PANOSE_TOOL_KIND.ANY;
pub const DWRITE_PANOSE_TOOL_KIND_NO_FIT = DWRITE_PANOSE_TOOL_KIND.NO_FIT;
pub const DWRITE_PANOSE_TOOL_KIND_FLAT_NIB = DWRITE_PANOSE_TOOL_KIND.FLAT_NIB;
pub const DWRITE_PANOSE_TOOL_KIND_PRESSURE_POINT = DWRITE_PANOSE_TOOL_KIND.PRESSURE_POINT;
pub const DWRITE_PANOSE_TOOL_KIND_ENGRAVED = DWRITE_PANOSE_TOOL_KIND.ENGRAVED;
pub const DWRITE_PANOSE_TOOL_KIND_BALL = DWRITE_PANOSE_TOOL_KIND.BALL;
pub const DWRITE_PANOSE_TOOL_KIND_BRUSH = DWRITE_PANOSE_TOOL_KIND.BRUSH;
pub const DWRITE_PANOSE_TOOL_KIND_ROUGH = DWRITE_PANOSE_TOOL_KIND.ROUGH;
pub const DWRITE_PANOSE_TOOL_KIND_FELT_PEN_BRUSH_TIP = DWRITE_PANOSE_TOOL_KIND.FELT_PEN_BRUSH_TIP;
pub const DWRITE_PANOSE_TOOL_KIND_WILD_BRUSH = DWRITE_PANOSE_TOOL_KIND.WILD_BRUSH;

pub const DWRITE_PANOSE_SPACING = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    PROPORTIONAL_SPACED = 2,
    MONOSPACED = 3,
};
pub const DWRITE_PANOSE_SPACING_ANY = DWRITE_PANOSE_SPACING.ANY;
pub const DWRITE_PANOSE_SPACING_NO_FIT = DWRITE_PANOSE_SPACING.NO_FIT;
pub const DWRITE_PANOSE_SPACING_PROPORTIONAL_SPACED = DWRITE_PANOSE_SPACING.PROPORTIONAL_SPACED;
pub const DWRITE_PANOSE_SPACING_MONOSPACED = DWRITE_PANOSE_SPACING.MONOSPACED;

pub const DWRITE_PANOSE_ASPECT_RATIO = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    VERY_CONDENSED = 2,
    CONDENSED = 3,
    NORMAL = 4,
    EXPANDED = 5,
    VERY_EXPANDED = 6,
};
pub const DWRITE_PANOSE_ASPECT_RATIO_ANY = DWRITE_PANOSE_ASPECT_RATIO.ANY;
pub const DWRITE_PANOSE_ASPECT_RATIO_NO_FIT = DWRITE_PANOSE_ASPECT_RATIO.NO_FIT;
pub const DWRITE_PANOSE_ASPECT_RATIO_VERY_CONDENSED = DWRITE_PANOSE_ASPECT_RATIO.VERY_CONDENSED;
pub const DWRITE_PANOSE_ASPECT_RATIO_CONDENSED = DWRITE_PANOSE_ASPECT_RATIO.CONDENSED;
pub const DWRITE_PANOSE_ASPECT_RATIO_NORMAL = DWRITE_PANOSE_ASPECT_RATIO.NORMAL;
pub const DWRITE_PANOSE_ASPECT_RATIO_EXPANDED = DWRITE_PANOSE_ASPECT_RATIO.EXPANDED;
pub const DWRITE_PANOSE_ASPECT_RATIO_VERY_EXPANDED = DWRITE_PANOSE_ASPECT_RATIO.VERY_EXPANDED;

pub const DWRITE_PANOSE_SCRIPT_TOPOLOGY = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    ROMAN_DISCONNECTED = 2,
    ROMAN_TRAILING = 3,
    ROMAN_CONNECTED = 4,
    CURSIVE_DISCONNECTED = 5,
    CURSIVE_TRAILING = 6,
    CURSIVE_CONNECTED = 7,
    BLACKLETTER_DISCONNECTED = 8,
    BLACKLETTER_TRAILING = 9,
    BLACKLETTER_CONNECTED = 10,
};
pub const DWRITE_PANOSE_SCRIPT_TOPOLOGY_ANY = DWRITE_PANOSE_SCRIPT_TOPOLOGY.ANY;
pub const DWRITE_PANOSE_SCRIPT_TOPOLOGY_NO_FIT = DWRITE_PANOSE_SCRIPT_TOPOLOGY.NO_FIT;
pub const DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_DISCONNECTED = DWRITE_PANOSE_SCRIPT_TOPOLOGY.ROMAN_DISCONNECTED;
pub const DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_TRAILING = DWRITE_PANOSE_SCRIPT_TOPOLOGY.ROMAN_TRAILING;
pub const DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_CONNECTED = DWRITE_PANOSE_SCRIPT_TOPOLOGY.ROMAN_CONNECTED;
pub const DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_DISCONNECTED = DWRITE_PANOSE_SCRIPT_TOPOLOGY.CURSIVE_DISCONNECTED;
pub const DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_TRAILING = DWRITE_PANOSE_SCRIPT_TOPOLOGY.CURSIVE_TRAILING;
pub const DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_CONNECTED = DWRITE_PANOSE_SCRIPT_TOPOLOGY.CURSIVE_CONNECTED;
pub const DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_DISCONNECTED = DWRITE_PANOSE_SCRIPT_TOPOLOGY.BLACKLETTER_DISCONNECTED;
pub const DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_TRAILING = DWRITE_PANOSE_SCRIPT_TOPOLOGY.BLACKLETTER_TRAILING;
pub const DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_CONNECTED = DWRITE_PANOSE_SCRIPT_TOPOLOGY.BLACKLETTER_CONNECTED;

pub const DWRITE_PANOSE_SCRIPT_FORM = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    UPRIGHT_NO_WRAPPING = 2,
    UPRIGHT_SOME_WRAPPING = 3,
    UPRIGHT_MORE_WRAPPING = 4,
    UPRIGHT_EXTREME_WRAPPING = 5,
    OBLIQUE_NO_WRAPPING = 6,
    OBLIQUE_SOME_WRAPPING = 7,
    OBLIQUE_MORE_WRAPPING = 8,
    OBLIQUE_EXTREME_WRAPPING = 9,
    EXAGGERATED_NO_WRAPPING = 10,
    EXAGGERATED_SOME_WRAPPING = 11,
    EXAGGERATED_MORE_WRAPPING = 12,
    EXAGGERATED_EXTREME_WRAPPING = 13,
};
pub const DWRITE_PANOSE_SCRIPT_FORM_ANY = DWRITE_PANOSE_SCRIPT_FORM.ANY;
pub const DWRITE_PANOSE_SCRIPT_FORM_NO_FIT = DWRITE_PANOSE_SCRIPT_FORM.NO_FIT;
pub const DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_NO_WRAPPING = DWRITE_PANOSE_SCRIPT_FORM.UPRIGHT_NO_WRAPPING;
pub const DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_SOME_WRAPPING = DWRITE_PANOSE_SCRIPT_FORM.UPRIGHT_SOME_WRAPPING;
pub const DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_MORE_WRAPPING = DWRITE_PANOSE_SCRIPT_FORM.UPRIGHT_MORE_WRAPPING;
pub const DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_EXTREME_WRAPPING = DWRITE_PANOSE_SCRIPT_FORM.UPRIGHT_EXTREME_WRAPPING;
pub const DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_NO_WRAPPING = DWRITE_PANOSE_SCRIPT_FORM.OBLIQUE_NO_WRAPPING;
pub const DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_SOME_WRAPPING = DWRITE_PANOSE_SCRIPT_FORM.OBLIQUE_SOME_WRAPPING;
pub const DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_MORE_WRAPPING = DWRITE_PANOSE_SCRIPT_FORM.OBLIQUE_MORE_WRAPPING;
pub const DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_EXTREME_WRAPPING = DWRITE_PANOSE_SCRIPT_FORM.OBLIQUE_EXTREME_WRAPPING;
pub const DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_NO_WRAPPING = DWRITE_PANOSE_SCRIPT_FORM.EXAGGERATED_NO_WRAPPING;
pub const DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_SOME_WRAPPING = DWRITE_PANOSE_SCRIPT_FORM.EXAGGERATED_SOME_WRAPPING;
pub const DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_MORE_WRAPPING = DWRITE_PANOSE_SCRIPT_FORM.EXAGGERATED_MORE_WRAPPING;
pub const DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_EXTREME_WRAPPING = DWRITE_PANOSE_SCRIPT_FORM.EXAGGERATED_EXTREME_WRAPPING;

pub const DWRITE_PANOSE_FINIALS = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    NONE_NO_LOOPS = 2,
    NONE_CLOSED_LOOPS = 3,
    NONE_OPEN_LOOPS = 4,
    SHARP_NO_LOOPS = 5,
    SHARP_CLOSED_LOOPS = 6,
    SHARP_OPEN_LOOPS = 7,
    TAPERED_NO_LOOPS = 8,
    TAPERED_CLOSED_LOOPS = 9,
    TAPERED_OPEN_LOOPS = 10,
    ROUND_NO_LOOPS = 11,
    ROUND_CLOSED_LOOPS = 12,
    ROUND_OPEN_LOOPS = 13,
};
pub const DWRITE_PANOSE_FINIALS_ANY = DWRITE_PANOSE_FINIALS.ANY;
pub const DWRITE_PANOSE_FINIALS_NO_FIT = DWRITE_PANOSE_FINIALS.NO_FIT;
pub const DWRITE_PANOSE_FINIALS_NONE_NO_LOOPS = DWRITE_PANOSE_FINIALS.NONE_NO_LOOPS;
pub const DWRITE_PANOSE_FINIALS_NONE_CLOSED_LOOPS = DWRITE_PANOSE_FINIALS.NONE_CLOSED_LOOPS;
pub const DWRITE_PANOSE_FINIALS_NONE_OPEN_LOOPS = DWRITE_PANOSE_FINIALS.NONE_OPEN_LOOPS;
pub const DWRITE_PANOSE_FINIALS_SHARP_NO_LOOPS = DWRITE_PANOSE_FINIALS.SHARP_NO_LOOPS;
pub const DWRITE_PANOSE_FINIALS_SHARP_CLOSED_LOOPS = DWRITE_PANOSE_FINIALS.SHARP_CLOSED_LOOPS;
pub const DWRITE_PANOSE_FINIALS_SHARP_OPEN_LOOPS = DWRITE_PANOSE_FINIALS.SHARP_OPEN_LOOPS;
pub const DWRITE_PANOSE_FINIALS_TAPERED_NO_LOOPS = DWRITE_PANOSE_FINIALS.TAPERED_NO_LOOPS;
pub const DWRITE_PANOSE_FINIALS_TAPERED_CLOSED_LOOPS = DWRITE_PANOSE_FINIALS.TAPERED_CLOSED_LOOPS;
pub const DWRITE_PANOSE_FINIALS_TAPERED_OPEN_LOOPS = DWRITE_PANOSE_FINIALS.TAPERED_OPEN_LOOPS;
pub const DWRITE_PANOSE_FINIALS_ROUND_NO_LOOPS = DWRITE_PANOSE_FINIALS.ROUND_NO_LOOPS;
pub const DWRITE_PANOSE_FINIALS_ROUND_CLOSED_LOOPS = DWRITE_PANOSE_FINIALS.ROUND_CLOSED_LOOPS;
pub const DWRITE_PANOSE_FINIALS_ROUND_OPEN_LOOPS = DWRITE_PANOSE_FINIALS.ROUND_OPEN_LOOPS;

pub const DWRITE_PANOSE_XASCENT = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    VERY_LOW = 2,
    LOW = 3,
    MEDIUM = 4,
    HIGH = 5,
    VERY_HIGH = 6,
};
pub const DWRITE_PANOSE_XASCENT_ANY = DWRITE_PANOSE_XASCENT.ANY;
pub const DWRITE_PANOSE_XASCENT_NO_FIT = DWRITE_PANOSE_XASCENT.NO_FIT;
pub const DWRITE_PANOSE_XASCENT_VERY_LOW = DWRITE_PANOSE_XASCENT.VERY_LOW;
pub const DWRITE_PANOSE_XASCENT_LOW = DWRITE_PANOSE_XASCENT.LOW;
pub const DWRITE_PANOSE_XASCENT_MEDIUM = DWRITE_PANOSE_XASCENT.MEDIUM;
pub const DWRITE_PANOSE_XASCENT_HIGH = DWRITE_PANOSE_XASCENT.HIGH;
pub const DWRITE_PANOSE_XASCENT_VERY_HIGH = DWRITE_PANOSE_XASCENT.VERY_HIGH;

pub const DWRITE_PANOSE_DECORATIVE_CLASS = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    DERIVATIVE = 2,
    NONSTANDARD_TOPOLOGY = 3,
    NONSTANDARD_ELEMENTS = 4,
    NONSTANDARD_ASPECT = 5,
    INITIALS = 6,
    CARTOON = 7,
    PICTURE_STEMS = 8,
    ORNAMENTED = 9,
    TEXT_AND_BACKGROUND = 10,
    COLLAGE = 11,
    MONTAGE = 12,
};
pub const DWRITE_PANOSE_DECORATIVE_CLASS_ANY = DWRITE_PANOSE_DECORATIVE_CLASS.ANY;
pub const DWRITE_PANOSE_DECORATIVE_CLASS_NO_FIT = DWRITE_PANOSE_DECORATIVE_CLASS.NO_FIT;
pub const DWRITE_PANOSE_DECORATIVE_CLASS_DERIVATIVE = DWRITE_PANOSE_DECORATIVE_CLASS.DERIVATIVE;
pub const DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_TOPOLOGY = DWRITE_PANOSE_DECORATIVE_CLASS.NONSTANDARD_TOPOLOGY;
pub const DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_ELEMENTS = DWRITE_PANOSE_DECORATIVE_CLASS.NONSTANDARD_ELEMENTS;
pub const DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_ASPECT = DWRITE_PANOSE_DECORATIVE_CLASS.NONSTANDARD_ASPECT;
pub const DWRITE_PANOSE_DECORATIVE_CLASS_INITIALS = DWRITE_PANOSE_DECORATIVE_CLASS.INITIALS;
pub const DWRITE_PANOSE_DECORATIVE_CLASS_CARTOON = DWRITE_PANOSE_DECORATIVE_CLASS.CARTOON;
pub const DWRITE_PANOSE_DECORATIVE_CLASS_PICTURE_STEMS = DWRITE_PANOSE_DECORATIVE_CLASS.PICTURE_STEMS;
pub const DWRITE_PANOSE_DECORATIVE_CLASS_ORNAMENTED = DWRITE_PANOSE_DECORATIVE_CLASS.ORNAMENTED;
pub const DWRITE_PANOSE_DECORATIVE_CLASS_TEXT_AND_BACKGROUND = DWRITE_PANOSE_DECORATIVE_CLASS.TEXT_AND_BACKGROUND;
pub const DWRITE_PANOSE_DECORATIVE_CLASS_COLLAGE = DWRITE_PANOSE_DECORATIVE_CLASS.COLLAGE;
pub const DWRITE_PANOSE_DECORATIVE_CLASS_MONTAGE = DWRITE_PANOSE_DECORATIVE_CLASS.MONTAGE;

pub const DWRITE_PANOSE_ASPECT = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    SUPER_CONDENSED = 2,
    VERY_CONDENSED = 3,
    CONDENSED = 4,
    NORMAL = 5,
    EXTENDED = 6,
    VERY_EXTENDED = 7,
    SUPER_EXTENDED = 8,
    MONOSPACED = 9,
};
pub const DWRITE_PANOSE_ASPECT_ANY = DWRITE_PANOSE_ASPECT.ANY;
pub const DWRITE_PANOSE_ASPECT_NO_FIT = DWRITE_PANOSE_ASPECT.NO_FIT;
pub const DWRITE_PANOSE_ASPECT_SUPER_CONDENSED = DWRITE_PANOSE_ASPECT.SUPER_CONDENSED;
pub const DWRITE_PANOSE_ASPECT_VERY_CONDENSED = DWRITE_PANOSE_ASPECT.VERY_CONDENSED;
pub const DWRITE_PANOSE_ASPECT_CONDENSED = DWRITE_PANOSE_ASPECT.CONDENSED;
pub const DWRITE_PANOSE_ASPECT_NORMAL = DWRITE_PANOSE_ASPECT.NORMAL;
pub const DWRITE_PANOSE_ASPECT_EXTENDED = DWRITE_PANOSE_ASPECT.EXTENDED;
pub const DWRITE_PANOSE_ASPECT_VERY_EXTENDED = DWRITE_PANOSE_ASPECT.VERY_EXTENDED;
pub const DWRITE_PANOSE_ASPECT_SUPER_EXTENDED = DWRITE_PANOSE_ASPECT.SUPER_EXTENDED;
pub const DWRITE_PANOSE_ASPECT_MONOSPACED = DWRITE_PANOSE_ASPECT.MONOSPACED;

pub const DWRITE_PANOSE_FILL = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    STANDARD_SOLID_FILL = 2,
    NO_FILL = 3,
    PATTERNED_FILL = 4,
    COMPLEX_FILL = 5,
    SHAPED_FILL = 6,
    DRAWN_DISTRESSED = 7,
};
pub const DWRITE_PANOSE_FILL_ANY = DWRITE_PANOSE_FILL.ANY;
pub const DWRITE_PANOSE_FILL_NO_FIT = DWRITE_PANOSE_FILL.NO_FIT;
pub const DWRITE_PANOSE_FILL_STANDARD_SOLID_FILL = DWRITE_PANOSE_FILL.STANDARD_SOLID_FILL;
pub const DWRITE_PANOSE_FILL_NO_FILL = DWRITE_PANOSE_FILL.NO_FILL;
pub const DWRITE_PANOSE_FILL_PATTERNED_FILL = DWRITE_PANOSE_FILL.PATTERNED_FILL;
pub const DWRITE_PANOSE_FILL_COMPLEX_FILL = DWRITE_PANOSE_FILL.COMPLEX_FILL;
pub const DWRITE_PANOSE_FILL_SHAPED_FILL = DWRITE_PANOSE_FILL.SHAPED_FILL;
pub const DWRITE_PANOSE_FILL_DRAWN_DISTRESSED = DWRITE_PANOSE_FILL.DRAWN_DISTRESSED;

pub const DWRITE_PANOSE_LINING = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    NONE = 2,
    INLINE = 3,
    OUTLINE = 4,
    ENGRAVED = 5,
    SHADOW = 6,
    RELIEF = 7,
    BACKDROP = 8,
};
pub const DWRITE_PANOSE_LINING_ANY = DWRITE_PANOSE_LINING.ANY;
pub const DWRITE_PANOSE_LINING_NO_FIT = DWRITE_PANOSE_LINING.NO_FIT;
pub const DWRITE_PANOSE_LINING_NONE = DWRITE_PANOSE_LINING.NONE;
pub const DWRITE_PANOSE_LINING_INLINE = DWRITE_PANOSE_LINING.INLINE;
pub const DWRITE_PANOSE_LINING_OUTLINE = DWRITE_PANOSE_LINING.OUTLINE;
pub const DWRITE_PANOSE_LINING_ENGRAVED = DWRITE_PANOSE_LINING.ENGRAVED;
pub const DWRITE_PANOSE_LINING_SHADOW = DWRITE_PANOSE_LINING.SHADOW;
pub const DWRITE_PANOSE_LINING_RELIEF = DWRITE_PANOSE_LINING.RELIEF;
pub const DWRITE_PANOSE_LINING_BACKDROP = DWRITE_PANOSE_LINING.BACKDROP;

pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    STANDARD = 2,
    SQUARE = 3,
    MULTIPLE_SEGMENT = 4,
    ART_DECO = 5,
    UNEVEN_WEIGHTING = 6,
    DIVERSE_ARMS = 7,
    DIVERSE_FORMS = 8,
    LOMBARDIC_FORMS = 9,
    UPPER_CASE_IN_LOWER_CASE = 10,
    IMPLIED_TOPOLOGY = 11,
    HORSESHOE_E_AND_A = 12,
    CURSIVE = 13,
    BLACKLETTER = 14,
    SWASH_VARIANCE = 15,
};
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_ANY = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.ANY;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_NO_FIT = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.NO_FIT;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_STANDARD = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.STANDARD;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_SQUARE = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.SQUARE;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_MULTIPLE_SEGMENT = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.MULTIPLE_SEGMENT;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_ART_DECO = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.ART_DECO;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_UNEVEN_WEIGHTING = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.UNEVEN_WEIGHTING;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_DIVERSE_ARMS = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.DIVERSE_ARMS;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_DIVERSE_FORMS = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.DIVERSE_FORMS;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_LOMBARDIC_FORMS = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.LOMBARDIC_FORMS;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_UPPER_CASE_IN_LOWER_CASE = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.UPPER_CASE_IN_LOWER_CASE;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_IMPLIED_TOPOLOGY = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.IMPLIED_TOPOLOGY;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_HORSESHOE_E_AND_A = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.HORSESHOE_E_AND_A;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_CURSIVE = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.CURSIVE;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_BLACKLETTER = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.BLACKLETTER;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_SWASH_VARIANCE = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.SWASH_VARIANCE;

pub const DWRITE_PANOSE_CHARACTER_RANGES = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    EXTENDED_COLLECTION = 2,
    LITERALS = 3,
    NO_LOWER_CASE = 4,
    SMALL_CAPS = 5,
};
pub const DWRITE_PANOSE_CHARACTER_RANGES_ANY = DWRITE_PANOSE_CHARACTER_RANGES.ANY;
pub const DWRITE_PANOSE_CHARACTER_RANGES_NO_FIT = DWRITE_PANOSE_CHARACTER_RANGES.NO_FIT;
pub const DWRITE_PANOSE_CHARACTER_RANGES_EXTENDED_COLLECTION = DWRITE_PANOSE_CHARACTER_RANGES.EXTENDED_COLLECTION;
pub const DWRITE_PANOSE_CHARACTER_RANGES_LITERALS = DWRITE_PANOSE_CHARACTER_RANGES.LITERALS;
pub const DWRITE_PANOSE_CHARACTER_RANGES_NO_LOWER_CASE = DWRITE_PANOSE_CHARACTER_RANGES.NO_LOWER_CASE;
pub const DWRITE_PANOSE_CHARACTER_RANGES_SMALL_CAPS = DWRITE_PANOSE_CHARACTER_RANGES.SMALL_CAPS;

pub const DWRITE_PANOSE_SYMBOL_KIND = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    MONTAGES = 2,
    PICTURES = 3,
    SHAPES = 4,
    SCIENTIFIC = 5,
    MUSIC = 6,
    EXPERT = 7,
    PATTERNS = 8,
    BOARDERS = 9,
    ICONS = 10,
    LOGOS = 11,
    INDUSTRY_SPECIFIC = 12,
};
pub const DWRITE_PANOSE_SYMBOL_KIND_ANY = DWRITE_PANOSE_SYMBOL_KIND.ANY;
pub const DWRITE_PANOSE_SYMBOL_KIND_NO_FIT = DWRITE_PANOSE_SYMBOL_KIND.NO_FIT;
pub const DWRITE_PANOSE_SYMBOL_KIND_MONTAGES = DWRITE_PANOSE_SYMBOL_KIND.MONTAGES;
pub const DWRITE_PANOSE_SYMBOL_KIND_PICTURES = DWRITE_PANOSE_SYMBOL_KIND.PICTURES;
pub const DWRITE_PANOSE_SYMBOL_KIND_SHAPES = DWRITE_PANOSE_SYMBOL_KIND.SHAPES;
pub const DWRITE_PANOSE_SYMBOL_KIND_SCIENTIFIC = DWRITE_PANOSE_SYMBOL_KIND.SCIENTIFIC;
pub const DWRITE_PANOSE_SYMBOL_KIND_MUSIC = DWRITE_PANOSE_SYMBOL_KIND.MUSIC;
pub const DWRITE_PANOSE_SYMBOL_KIND_EXPERT = DWRITE_PANOSE_SYMBOL_KIND.EXPERT;
pub const DWRITE_PANOSE_SYMBOL_KIND_PATTERNS = DWRITE_PANOSE_SYMBOL_KIND.PATTERNS;
pub const DWRITE_PANOSE_SYMBOL_KIND_BOARDERS = DWRITE_PANOSE_SYMBOL_KIND.BOARDERS;
pub const DWRITE_PANOSE_SYMBOL_KIND_ICONS = DWRITE_PANOSE_SYMBOL_KIND.ICONS;
pub const DWRITE_PANOSE_SYMBOL_KIND_LOGOS = DWRITE_PANOSE_SYMBOL_KIND.LOGOS;
pub const DWRITE_PANOSE_SYMBOL_KIND_INDUSTRY_SPECIFIC = DWRITE_PANOSE_SYMBOL_KIND.INDUSTRY_SPECIFIC;

pub const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    NO_WIDTH = 2,
    EXCEPTIONALLY_WIDE = 3,
    SUPER_WIDE = 4,
    VERY_WIDE = 5,
    WIDE = 6,
    NORMAL = 7,
    NARROW = 8,
    VERY_NARROW = 9,
};
pub const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_ANY = DWRITE_PANOSE_SYMBOL_ASPECT_RATIO.ANY;
pub const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NO_FIT = DWRITE_PANOSE_SYMBOL_ASPECT_RATIO.NO_FIT;
pub const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NO_WIDTH = DWRITE_PANOSE_SYMBOL_ASPECT_RATIO.NO_WIDTH;
pub const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_EXCEPTIONALLY_WIDE = DWRITE_PANOSE_SYMBOL_ASPECT_RATIO.EXCEPTIONALLY_WIDE;
pub const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_SUPER_WIDE = DWRITE_PANOSE_SYMBOL_ASPECT_RATIO.SUPER_WIDE;
pub const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_VERY_WIDE = DWRITE_PANOSE_SYMBOL_ASPECT_RATIO.VERY_WIDE;
pub const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_WIDE = DWRITE_PANOSE_SYMBOL_ASPECT_RATIO.WIDE;
pub const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NORMAL = DWRITE_PANOSE_SYMBOL_ASPECT_RATIO.NORMAL;
pub const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NARROW = DWRITE_PANOSE_SYMBOL_ASPECT_RATIO.NARROW;
pub const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_VERY_NARROW = DWRITE_PANOSE_SYMBOL_ASPECT_RATIO.VERY_NARROW;

pub const DWRITE_OUTLINE_THRESHOLD = enum(i32) {
    NTIALIASED = 0,
    LIASED = 1,
};
pub const DWRITE_OUTLINE_THRESHOLD_ANTIALIASED = DWRITE_OUTLINE_THRESHOLD.NTIALIASED;
pub const DWRITE_OUTLINE_THRESHOLD_ALIASED = DWRITE_OUTLINE_THRESHOLD.LIASED;

pub const DWRITE_BASELINE = enum(i32) {
    DEFAULT = 0,
    ROMAN = 1,
    CENTRAL = 2,
    MATH = 3,
    HANGING = 4,
    IDEOGRAPHIC_BOTTOM = 5,
    IDEOGRAPHIC_TOP = 6,
    MINIMUM = 7,
    MAXIMUM = 8,
};
pub const DWRITE_BASELINE_DEFAULT = DWRITE_BASELINE.DEFAULT;
pub const DWRITE_BASELINE_ROMAN = DWRITE_BASELINE.ROMAN;
pub const DWRITE_BASELINE_CENTRAL = DWRITE_BASELINE.CENTRAL;
pub const DWRITE_BASELINE_MATH = DWRITE_BASELINE.MATH;
pub const DWRITE_BASELINE_HANGING = DWRITE_BASELINE.HANGING;
pub const DWRITE_BASELINE_IDEOGRAPHIC_BOTTOM = DWRITE_BASELINE.IDEOGRAPHIC_BOTTOM;
pub const DWRITE_BASELINE_IDEOGRAPHIC_TOP = DWRITE_BASELINE.IDEOGRAPHIC_TOP;
pub const DWRITE_BASELINE_MINIMUM = DWRITE_BASELINE.MINIMUM;
pub const DWRITE_BASELINE_MAXIMUM = DWRITE_BASELINE.MAXIMUM;

pub const DWRITE_VERTICAL_GLYPH_ORIENTATION = enum(i32) {
    DEFAULT = 0,
    STACKED = 1,
};
pub const DWRITE_VERTICAL_GLYPH_ORIENTATION_DEFAULT = DWRITE_VERTICAL_GLYPH_ORIENTATION.DEFAULT;
pub const DWRITE_VERTICAL_GLYPH_ORIENTATION_STACKED = DWRITE_VERTICAL_GLYPH_ORIENTATION.STACKED;

pub const DWRITE_GLYPH_ORIENTATION_ANGLE = enum(i32) {
    @"0_DEGREES" = 0,
    @"90_DEGREES" = 1,
    @"180_DEGREES" = 2,
    @"270_DEGREES" = 3,
};
pub const DWRITE_GLYPH_ORIENTATION_ANGLE_0_DEGREES = DWRITE_GLYPH_ORIENTATION_ANGLE.@"0_DEGREES";
pub const DWRITE_GLYPH_ORIENTATION_ANGLE_90_DEGREES = DWRITE_GLYPH_ORIENTATION_ANGLE.@"90_DEGREES";
pub const DWRITE_GLYPH_ORIENTATION_ANGLE_180_DEGREES = DWRITE_GLYPH_ORIENTATION_ANGLE.@"180_DEGREES";
pub const DWRITE_GLYPH_ORIENTATION_ANGLE_270_DEGREES = DWRITE_GLYPH_ORIENTATION_ANGLE.@"270_DEGREES";

pub const DWRITE_FONT_METRICS1 = extern struct {
    __AnonymousBase_DWrite_1_L627_C38: DWRITE_FONT_METRICS,
    glyphBoxLeft: i16,
    glyphBoxTop: i16,
    glyphBoxRight: i16,
    glyphBoxBottom: i16,
    subscriptPositionX: i16,
    subscriptPositionY: i16,
    subscriptSizeX: i16,
    subscriptSizeY: i16,
    superscriptPositionX: i16,
    superscriptPositionY: i16,
    superscriptSizeX: i16,
    superscriptSizeY: i16,
    hasTypographicMetrics: BOOL,
};

pub const DWRITE_CARET_METRICS = extern struct {
    slopeRise: i16,
    slopeRun: i16,
    offset: i16,
};

pub const DWRITE_PANOSE = extern union {
    values: [10]u8,
    familyKind: u8,
    text: extern struct {
        familyKind: u8,
        serifStyle: u8,
        weight: u8,
        proportion: u8,
        contrast: u8,
        strokeVariation: u8,
        armStyle: u8,
        letterform: u8,
        midline: u8,
        xHeight: u8,
    },
    script: extern struct {
        familyKind: u8,
        toolKind: u8,
        weight: u8,
        spacing: u8,
        aspectRatio: u8,
        contrast: u8,
        scriptTopology: u8,
        scriptForm: u8,
        finials: u8,
        xAscent: u8,
    },
    decorative: extern struct {
        familyKind: u8,
        decorativeClass: u8,
        weight: u8,
        aspect: u8,
        contrast: u8,
        serifVariant: u8,
        fill: u8,
        lining: u8,
        decorativeTopology: u8,
        characterRange: u8,
    },
    symbol: extern struct {
        familyKind: u8,
        symbolKind: u8,
        weight: u8,
        spacing: u8,
        aspectRatioAndContrast: u8,
        aspectRatio94: u8,
        aspectRatio119: u8,
        aspectRatio157: u8,
        aspectRatio163: u8,
        aspectRatio211: u8,
    },
};

pub const DWRITE_UNICODE_RANGE = extern struct {
    first: u32,
    last: u32,
};

pub const DWRITE_SCRIPT_PROPERTIES = extern struct {
    isoScriptCode: u32,
    isoScriptNumber: u32,
    clusterLookahead: u32,
    justificationCharacter: u32,
    _bitfield: u32,
};

pub const DWRITE_JUSTIFICATION_OPPORTUNITY = extern struct {
    expansionMinimum: f32,
    expansionMaximum: f32,
    compressionMaximum: f32,
    _bitfield: u32,
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDWriteFactory1_Value = Guid.initString("30572f99-dac6-41db-a16e-0486307e606a");
pub const IID_IDWriteFactory1 = &IID_IDWriteFactory1_Value;
pub const IDWriteFactory1 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFactory.VTable,
        GetEudcFontCollection: *const fn(
            self: *const IDWriteFactory1,
            fontCollection: **IDWriteFontCollection,
            checkForUpdates: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCustomRenderingParams: *const fn(
            self: *const IDWriteFactory1,
            gamma: f32,
            enhancedContrast: f32,
            enhancedContrastGrayscale: f32,
            clearTypeLevel: f32,
            pixelGeometry: DWRITE_PIXEL_GEOMETRY,
            renderingMode: DWRITE_RENDERING_MODE,
            renderingParams: **IDWriteRenderingParams1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteFactory: IDWriteFactory,
    IUnknown: IUnknown,
    pub fn GetEudcFontCollection(self: *const IDWriteFactory1, fontCollection: **IDWriteFontCollection, checkForUpdates: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.GetEudcFontCollection(self, fontCollection, checkForUpdates);
    }
    pub fn CreateCustomRenderingParams(self: *const IDWriteFactory1, gamma: f32, enhancedContrast: f32, enhancedContrastGrayscale: f32, clearTypeLevel: f32, pixelGeometry: DWRITE_PIXEL_GEOMETRY, renderingMode: DWRITE_RENDERING_MODE, renderingParams: **IDWriteRenderingParams1) callconv(.Inline) HRESULT {
        return self.vtable.CreateCustomRenderingParams(self, gamma, enhancedContrast, enhancedContrastGrayscale, clearTypeLevel, pixelGeometry, renderingMode, renderingParams);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDWriteFontFace1_Value = Guid.initString("a71efdb4-9fdb-4838-ad90-cfc3be8c3daf");
pub const IID_IDWriteFontFace1 = &IID_IDWriteFontFace1_Value;
pub const IDWriteFontFace1 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFontFace.VTable,
        GetMetrics: *const fn(
            self: *const IDWriteFontFace1,
            fontMetrics: ?*DWRITE_FONT_METRICS1,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetGdiCompatibleMetrics: *const fn(
            self: *const IDWriteFontFace1,
            emSize: f32,
            pixelsPerDip: f32,
            transform: ?*const DWRITE_MATRIX,
            fontMetrics: ?*DWRITE_FONT_METRICS1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCaretMetrics: *const fn(
            self: *const IDWriteFontFace1,
            caretMetrics: ?*DWRITE_CARET_METRICS,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetUnicodeRanges: *const fn(
            self: *const IDWriteFontFace1,
            maxRangeCount: u32,
            unicodeRanges: ?[*]DWRITE_UNICODE_RANGE,
            actualRangeCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsMonospacedFont: *const fn(
            self: *const IDWriteFontFace1,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetDesignGlyphAdvances: *const fn(
            self: *const IDWriteFontFace1,
            glyphCount: u32,
            glyphIndices: [*:0]const u16,
            glyphAdvances: [*]i32,
            isSideways: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGdiCompatibleGlyphAdvances: *const fn(
            self: *const IDWriteFontFace1,
            emSize: f32,
            pixelsPerDip: f32,
            transform: ?*const DWRITE_MATRIX,
            useGdiNatural: BOOL,
            isSideways: BOOL,
            glyphCount: u32,
            glyphIndices: [*:0]const u16,
            glyphAdvances: [*]i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKerningPairAdjustments: *const fn(
            self: *const IDWriteFontFace1,
            glyphCount: u32,
            glyphIndices: [*:0]const u16,
            glyphAdvanceAdjustments: [*]i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasKerningPairs: *const fn(
            self: *const IDWriteFontFace1,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetRecommendedRenderingMode: *const fn(
            self: *const IDWriteFontFace1,
            fontEmSize: f32,
            dpiX: f32,
            dpiY: f32,
            transform: ?*const DWRITE_MATRIX,
            isSideways: BOOL,
            outlineThreshold: DWRITE_OUTLINE_THRESHOLD,
            measuringMode: DWRITE_MEASURING_MODE,
            renderingMode: ?*DWRITE_RENDERING_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVerticalGlyphVariants: *const fn(
            self: *const IDWriteFontFace1,
            glyphCount: u32,
            nominalGlyphIndices: [*:0]const u16,
            verticalGlyphIndices: [*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasVerticalGlyphVariants: *const fn(
            self: *const IDWriteFontFace1,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
    };
    vtable: *const VTable,
    IDWriteFontFace: IDWriteFontFace,
    IUnknown: IUnknown,
    pub fn GetMetrics(self: *const IDWriteFontFace1, fontMetrics: ?*DWRITE_FONT_METRICS1) callconv(.Inline) void {
        return self.vtable.GetMetrics(self, fontMetrics);
    }
    pub fn GetGdiCompatibleMetrics(self: *const IDWriteFontFace1, emSize: f32, pixelsPerDip: f32, transform: ?*const DWRITE_MATRIX, fontMetrics: ?*DWRITE_FONT_METRICS1) callconv(.Inline) HRESULT {
        return self.vtable.GetGdiCompatibleMetrics(self, emSize, pixelsPerDip, transform, fontMetrics);
    }
    pub fn GetCaretMetrics(self: *const IDWriteFontFace1, caretMetrics: ?*DWRITE_CARET_METRICS) callconv(.Inline) void {
        return self.vtable.GetCaretMetrics(self, caretMetrics);
    }
    pub fn GetUnicodeRanges(self: *const IDWriteFontFace1, maxRangeCount: u32, unicodeRanges: ?[*]DWRITE_UNICODE_RANGE, actualRangeCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetUnicodeRanges(self, maxRangeCount, unicodeRanges, actualRangeCount);
    }
    pub fn IsMonospacedFont(self: *const IDWriteFontFace1) callconv(.Inline) BOOL {
        return self.vtable.IsMonospacedFont(self);
    }
    pub fn GetDesignGlyphAdvances(self: *const IDWriteFontFace1, glyphCount: u32, glyphIndices: [*:0]const u16, glyphAdvances: [*]i32, isSideways: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.GetDesignGlyphAdvances(self, glyphCount, glyphIndices, glyphAdvances, isSideways);
    }
    pub fn GetGdiCompatibleGlyphAdvances(self: *const IDWriteFontFace1, emSize: f32, pixelsPerDip: f32, transform: ?*const DWRITE_MATRIX, useGdiNatural: BOOL, isSideways: BOOL, glyphCount: u32, glyphIndices: [*:0]const u16, glyphAdvances: [*]i32) callconv(.Inline) HRESULT {
        return self.vtable.GetGdiCompatibleGlyphAdvances(self, emSize, pixelsPerDip, transform, useGdiNatural, isSideways, glyphCount, glyphIndices, glyphAdvances);
    }
    pub fn GetKerningPairAdjustments(self: *const IDWriteFontFace1, glyphCount: u32, glyphIndices: [*:0]const u16, glyphAdvanceAdjustments: [*]i32) callconv(.Inline) HRESULT {
        return self.vtable.GetKerningPairAdjustments(self, glyphCount, glyphIndices, glyphAdvanceAdjustments);
    }
    pub fn HasKerningPairs(self: *const IDWriteFontFace1) callconv(.Inline) BOOL {
        return self.vtable.HasKerningPairs(self);
    }
    pub fn GetRecommendedRenderingMode(self: *const IDWriteFontFace1, fontEmSize: f32, dpiX: f32, dpiY: f32, transform: ?*const DWRITE_MATRIX, isSideways: BOOL, outlineThreshold: DWRITE_OUTLINE_THRESHOLD, measuringMode: DWRITE_MEASURING_MODE, renderingMode: ?*DWRITE_RENDERING_MODE) callconv(.Inline) HRESULT {
        return self.vtable.GetRecommendedRenderingMode(self, fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingMode);
    }
    pub fn GetVerticalGlyphVariants(self: *const IDWriteFontFace1, glyphCount: u32, nominalGlyphIndices: [*:0]const u16, verticalGlyphIndices: [*:0]u16) callconv(.Inline) HRESULT {
        return self.vtable.GetVerticalGlyphVariants(self, glyphCount, nominalGlyphIndices, verticalGlyphIndices);
    }
    pub fn HasVerticalGlyphVariants(self: *const IDWriteFontFace1) callconv(.Inline) BOOL {
        return self.vtable.HasVerticalGlyphVariants(self);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDWriteFont1_Value = Guid.initString("acd16696-8c14-4f5d-877e-fe3fc1d32738");
pub const IID_IDWriteFont1 = &IID_IDWriteFont1_Value;
pub const IDWriteFont1 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFont.VTable,
        GetMetrics: *const fn(
            self: *const IDWriteFont1,
            fontMetrics: ?*DWRITE_FONT_METRICS1,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetPanose: *const fn(
            self: *const IDWriteFont1,
            panose: ?*DWRITE_PANOSE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetUnicodeRanges: *const fn(
            self: *const IDWriteFont1,
            maxRangeCount: u32,
            unicodeRanges: ?[*]DWRITE_UNICODE_RANGE,
            actualRangeCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsMonospacedFont: *const fn(
            self: *const IDWriteFont1,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
    };
    vtable: *const VTable,
    IDWriteFont: IDWriteFont,
    IUnknown: IUnknown,
    pub fn GetMetrics(self: *const IDWriteFont1, fontMetrics: ?*DWRITE_FONT_METRICS1) callconv(.Inline) void {
        return self.vtable.GetMetrics(self, fontMetrics);
    }
    pub fn GetPanose(self: *const IDWriteFont1, panose: ?*DWRITE_PANOSE) callconv(.Inline) void {
        return self.vtable.GetPanose(self, panose);
    }
    pub fn GetUnicodeRanges(self: *const IDWriteFont1, maxRangeCount: u32, unicodeRanges: ?[*]DWRITE_UNICODE_RANGE, actualRangeCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetUnicodeRanges(self, maxRangeCount, unicodeRanges, actualRangeCount);
    }
    pub fn IsMonospacedFont(self: *const IDWriteFont1) callconv(.Inline) BOOL {
        return self.vtable.IsMonospacedFont(self);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDWriteRenderingParams1_Value = Guid.initString("94413cf4-a6fc-4248-8b50-6674348fcad3");
pub const IID_IDWriteRenderingParams1 = &IID_IDWriteRenderingParams1_Value;
pub const IDWriteRenderingParams1 = extern union {
    pub const VTable = extern struct {
        base: IDWriteRenderingParams.VTable,
        GetGrayscaleEnhancedContrast: *const fn(
            self: *const IDWriteRenderingParams1,
        ) callconv(@import("std").os.windows.WINAPI) f32,
    };
    vtable: *const VTable,
    IDWriteRenderingParams: IDWriteRenderingParams,
    IUnknown: IUnknown,
    pub fn GetGrayscaleEnhancedContrast(self: *const IDWriteRenderingParams1) callconv(.Inline) f32 {
        return self.vtable.GetGrayscaleEnhancedContrast(self);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDWriteTextAnalyzer1_Value = Guid.initString("80dad800-e21f-4e83-96ce-bfcce500db7c");
pub const IID_IDWriteTextAnalyzer1 = &IID_IDWriteTextAnalyzer1_Value;
pub const IDWriteTextAnalyzer1 = extern union {
    pub const VTable = extern struct {
        base: IDWriteTextAnalyzer.VTable,
        ApplyCharacterSpacing: *const fn(
            self: *const IDWriteTextAnalyzer1,
            leadingSpacing: f32,
            trailingSpacing: f32,
            minimumAdvanceWidth: f32,
            textLength: u32,
            glyphCount: u32,
            clusterMap: [*:0]const u16,
            glyphAdvances: [*]const f32,
            glyphOffsets: [*]const DWRITE_GLYPH_OFFSET,
            glyphProperties: [*]const DWRITE_SHAPING_GLYPH_PROPERTIES,
            modifiedGlyphAdvances: [*]f32,
            modifiedGlyphOffsets: [*]DWRITE_GLYPH_OFFSET,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBaseline: *const fn(
            self: *const IDWriteTextAnalyzer1,
            fontFace: ?*IDWriteFontFace,
            baseline: DWRITE_BASELINE,
            isVertical: BOOL,
            isSimulationAllowed: BOOL,
            scriptAnalysis: DWRITE_SCRIPT_ANALYSIS,
            localeName: ?[*:0]const u16,
            baselineCoordinate: ?*i32,
            exists: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AnalyzeVerticalGlyphOrientation: *const fn(
            self: *const IDWriteTextAnalyzer1,
            analysisSource: ?*IDWriteTextAnalysisSource1,
            textPosition: u32,
            textLength: u32,
            analysisSink: ?*IDWriteTextAnalysisSink1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphOrientationTransform: *const fn(
            self: *const IDWriteTextAnalyzer1,
            glyphOrientationAngle: DWRITE_GLYPH_ORIENTATION_ANGLE,
            isSideways: BOOL,
            transform: ?*DWRITE_MATRIX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetScriptProperties: *const fn(
            self: *const IDWriteTextAnalyzer1,
            scriptAnalysis: DWRITE_SCRIPT_ANALYSIS,
            scriptProperties: ?*DWRITE_SCRIPT_PROPERTIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTextComplexity: *const fn(
            self: *const IDWriteTextAnalyzer1,
            textString: [*:0]const u16,
            textLength: u32,
            fontFace: ?*IDWriteFontFace,
            isTextSimple: ?*BOOL,
            textLengthRead: ?*u32,
            glyphIndices: ?[*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetJustificationOpportunities: *const fn(
            self: *const IDWriteTextAnalyzer1,
            fontFace: ?*IDWriteFontFace,
            fontEmSize: f32,
            scriptAnalysis: DWRITE_SCRIPT_ANALYSIS,
            textLength: u32,
            glyphCount: u32,
            textString: [*:0]const u16,
            clusterMap: [*:0]const u16,
            glyphProperties: [*]const DWRITE_SHAPING_GLYPH_PROPERTIES,
            justificationOpportunities: [*]DWRITE_JUSTIFICATION_OPPORTUNITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        JustifyGlyphAdvances: *const fn(
            self: *const IDWriteTextAnalyzer1,
            lineWidth: f32,
            glyphCount: u32,
            justificationOpportunities: [*]const DWRITE_JUSTIFICATION_OPPORTUNITY,
            glyphAdvances: [*]const f32,
            glyphOffsets: [*]const DWRITE_GLYPH_OFFSET,
            justifiedGlyphAdvances: [*]f32,
            justifiedGlyphOffsets: ?[*]DWRITE_GLYPH_OFFSET,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetJustifiedGlyphs: *const fn(
            self: *const IDWriteTextAnalyzer1,
            fontFace: ?*IDWriteFontFace,
            fontEmSize: f32,
            scriptAnalysis: DWRITE_SCRIPT_ANALYSIS,
            textLength: u32,
            glyphCount: u32,
            maxGlyphCount: u32,
            clusterMap: ?[*:0]const u16,
            glyphIndices: [*:0]const u16,
            glyphAdvances: [*]const f32,
            justifiedGlyphAdvances: [*]const f32,
            justifiedGlyphOffsets: [*]const DWRITE_GLYPH_OFFSET,
            glyphProperties: [*]const DWRITE_SHAPING_GLYPH_PROPERTIES,
            actualGlyphCount: ?*u32,
            modifiedClusterMap: ?[*:0]u16,
            modifiedGlyphIndices: [*:0]u16,
            modifiedGlyphAdvances: [*]f32,
            modifiedGlyphOffsets: [*]DWRITE_GLYPH_OFFSET,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteTextAnalyzer: IDWriteTextAnalyzer,
    IUnknown: IUnknown,
    pub fn ApplyCharacterSpacing(self: *const IDWriteTextAnalyzer1, leadingSpacing: f32, trailingSpacing: f32, minimumAdvanceWidth: f32, textLength: u32, glyphCount: u32, clusterMap: [*:0]const u16, glyphAdvances: [*]const f32, glyphOffsets: [*]const DWRITE_GLYPH_OFFSET, glyphProperties: [*]const DWRITE_SHAPING_GLYPH_PROPERTIES, modifiedGlyphAdvances: [*]f32, modifiedGlyphOffsets: [*]DWRITE_GLYPH_OFFSET) callconv(.Inline) HRESULT {
        return self.vtable.ApplyCharacterSpacing(self, leadingSpacing, trailingSpacing, minimumAdvanceWidth, textLength, glyphCount, clusterMap, glyphAdvances, glyphOffsets, glyphProperties, modifiedGlyphAdvances, modifiedGlyphOffsets);
    }
    pub fn GetBaseline(self: *const IDWriteTextAnalyzer1, fontFace: ?*IDWriteFontFace, baseline: DWRITE_BASELINE, isVertical: BOOL, isSimulationAllowed: BOOL, scriptAnalysis: DWRITE_SCRIPT_ANALYSIS, localeName: ?[*:0]const u16, baselineCoordinate: ?*i32, exists: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.GetBaseline(self, fontFace, baseline, isVertical, isSimulationAllowed, scriptAnalysis, localeName, baselineCoordinate, exists);
    }
    pub fn AnalyzeVerticalGlyphOrientation(self: *const IDWriteTextAnalyzer1, analysisSource: ?*IDWriteTextAnalysisSource1, textPosition: u32, textLength: u32, analysisSink: ?*IDWriteTextAnalysisSink1) callconv(.Inline) HRESULT {
        return self.vtable.AnalyzeVerticalGlyphOrientation(self, analysisSource, textPosition, textLength, analysisSink);
    }
    pub fn GetGlyphOrientationTransform(self: *const IDWriteTextAnalyzer1, glyphOrientationAngle: DWRITE_GLYPH_ORIENTATION_ANGLE, isSideways: BOOL, transform: ?*DWRITE_MATRIX) callconv(.Inline) HRESULT {
        return self.vtable.GetGlyphOrientationTransform(self, glyphOrientationAngle, isSideways, transform);
    }
    pub fn GetScriptProperties(self: *const IDWriteTextAnalyzer1, scriptAnalysis: DWRITE_SCRIPT_ANALYSIS, scriptProperties: ?*DWRITE_SCRIPT_PROPERTIES) callconv(.Inline) HRESULT {
        return self.vtable.GetScriptProperties(self, scriptAnalysis, scriptProperties);
    }
    pub fn GetTextComplexity(self: *const IDWriteTextAnalyzer1, textString: [*:0]const u16, textLength: u32, fontFace: ?*IDWriteFontFace, isTextSimple: ?*BOOL, textLengthRead: ?*u32, glyphIndices: ?[*:0]u16) callconv(.Inline) HRESULT {
        return self.vtable.GetTextComplexity(self, textString, textLength, fontFace, isTextSimple, textLengthRead, glyphIndices);
    }
    pub fn GetJustificationOpportunities(self: *const IDWriteTextAnalyzer1, fontFace: ?*IDWriteFontFace, fontEmSize: f32, scriptAnalysis: DWRITE_SCRIPT_ANALYSIS, textLength: u32, glyphCount: u32, textString: [*:0]const u16, clusterMap: [*:0]const u16, glyphProperties: [*]const DWRITE_SHAPING_GLYPH_PROPERTIES, justificationOpportunities: [*]DWRITE_JUSTIFICATION_OPPORTUNITY) callconv(.Inline) HRESULT {
        return self.vtable.GetJustificationOpportunities(self, fontFace, fontEmSize, scriptAnalysis, textLength, glyphCount, textString, clusterMap, glyphProperties, justificationOpportunities);
    }
    pub fn JustifyGlyphAdvances(self: *const IDWriteTextAnalyzer1, lineWidth: f32, glyphCount: u32, justificationOpportunities: [*]const DWRITE_JUSTIFICATION_OPPORTUNITY, glyphAdvances: [*]const f32, glyphOffsets: [*]const DWRITE_GLYPH_OFFSET, justifiedGlyphAdvances: [*]f32, justifiedGlyphOffsets: ?[*]DWRITE_GLYPH_OFFSET) callconv(.Inline) HRESULT {
        return self.vtable.JustifyGlyphAdvances(self, lineWidth, glyphCount, justificationOpportunities, glyphAdvances, glyphOffsets, justifiedGlyphAdvances, justifiedGlyphOffsets);
    }
    pub fn GetJustifiedGlyphs(self: *const IDWriteTextAnalyzer1, fontFace: ?*IDWriteFontFace, fontEmSize: f32, scriptAnalysis: DWRITE_SCRIPT_ANALYSIS, textLength: u32, glyphCount: u32, maxGlyphCount: u32, clusterMap: ?[*:0]const u16, glyphIndices: [*:0]const u16, glyphAdvances: [*]const f32, justifiedGlyphAdvances: [*]const f32, justifiedGlyphOffsets: [*]const DWRITE_GLYPH_OFFSET, glyphProperties: [*]const DWRITE_SHAPING_GLYPH_PROPERTIES, actualGlyphCount: ?*u32, modifiedClusterMap: ?[*:0]u16, modifiedGlyphIndices: [*:0]u16, modifiedGlyphAdvances: [*]f32, modifiedGlyphOffsets: [*]DWRITE_GLYPH_OFFSET) callconv(.Inline) HRESULT {
        return self.vtable.GetJustifiedGlyphs(self, fontFace, fontEmSize, scriptAnalysis, textLength, glyphCount, maxGlyphCount, clusterMap, glyphIndices, glyphAdvances, justifiedGlyphAdvances, justifiedGlyphOffsets, glyphProperties, actualGlyphCount, modifiedClusterMap, modifiedGlyphIndices, modifiedGlyphAdvances, modifiedGlyphOffsets);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDWriteTextAnalysisSource1_Value = Guid.initString("639cfad8-0fb4-4b21-a58a-067920120009");
pub const IID_IDWriteTextAnalysisSource1 = &IID_IDWriteTextAnalysisSource1_Value;
pub const IDWriteTextAnalysisSource1 = extern union {
    pub const VTable = extern struct {
        base: IDWriteTextAnalysisSource.VTable,
        GetVerticalGlyphOrientation: *const fn(
            self: *const IDWriteTextAnalysisSource1,
            textPosition: u32,
            textLength: ?*u32,
            glyphOrientation: ?*DWRITE_VERTICAL_GLYPH_ORIENTATION,
            bidiLevel: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteTextAnalysisSource: IDWriteTextAnalysisSource,
    IUnknown: IUnknown,
    pub fn GetVerticalGlyphOrientation(self: *const IDWriteTextAnalysisSource1, textPosition: u32, textLength: ?*u32, glyphOrientation: ?*DWRITE_VERTICAL_GLYPH_ORIENTATION, bidiLevel: ?*u8) callconv(.Inline) HRESULT {
        return self.vtable.GetVerticalGlyphOrientation(self, textPosition, textLength, glyphOrientation, bidiLevel);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDWriteTextAnalysisSink1_Value = Guid.initString("b0d941a0-85e7-4d8b-9fd3-5ced9934482a");
pub const IID_IDWriteTextAnalysisSink1 = &IID_IDWriteTextAnalysisSink1_Value;
pub const IDWriteTextAnalysisSink1 = extern union {
    pub const VTable = extern struct {
        base: IDWriteTextAnalysisSink.VTable,
        SetGlyphOrientation: *const fn(
            self: *const IDWriteTextAnalysisSink1,
            textPosition: u32,
            textLength: u32,
            glyphOrientationAngle: DWRITE_GLYPH_ORIENTATION_ANGLE,
            adjustedBidiLevel: u8,
            isSideways: BOOL,
            isRightToLeft: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteTextAnalysisSink: IDWriteTextAnalysisSink,
    IUnknown: IUnknown,
    pub fn SetGlyphOrientation(self: *const IDWriteTextAnalysisSink1, textPosition: u32, textLength: u32, glyphOrientationAngle: DWRITE_GLYPH_ORIENTATION_ANGLE, adjustedBidiLevel: u8, isSideways: BOOL, isRightToLeft: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetGlyphOrientation(self, textPosition, textLength, glyphOrientationAngle, adjustedBidiLevel, isSideways, isRightToLeft);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDWriteTextLayout1_Value = Guid.initString("9064d822-80a7-465c-a986-df65f78b8feb");
pub const IID_IDWriteTextLayout1 = &IID_IDWriteTextLayout1_Value;
pub const IDWriteTextLayout1 = extern union {
    pub const VTable = extern struct {
        base: IDWriteTextLayout.VTable,
        SetPairKerning: *const fn(
            self: *const IDWriteTextLayout1,
            isPairKerningEnabled: BOOL,
            textRange: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPairKerning: *const fn(
            self: *const IDWriteTextLayout1,
            currentPosition: u32,
            isPairKerningEnabled: ?*BOOL,
            textRange: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCharacterSpacing: *const fn(
            self: *const IDWriteTextLayout1,
            leadingSpacing: f32,
            trailingSpacing: f32,
            minimumAdvanceWidth: f32,
            textRange: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCharacterSpacing: *const fn(
            self: *const IDWriteTextLayout1,
            currentPosition: u32,
            leadingSpacing: ?*f32,
            trailingSpacing: ?*f32,
            minimumAdvanceWidth: ?*f32,
            textRange: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteTextLayout: IDWriteTextLayout,
    IDWriteTextFormat: IDWriteTextFormat,
    IUnknown: IUnknown,
    pub fn SetPairKerning(self: *const IDWriteTextLayout1, isPairKerningEnabled: BOOL, textRange: DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.SetPairKerning(self, isPairKerningEnabled, textRange);
    }
    pub fn GetPairKerning(self: *const IDWriteTextLayout1, currentPosition: u32, isPairKerningEnabled: ?*BOOL, textRange: ?*DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.GetPairKerning(self, currentPosition, isPairKerningEnabled, textRange);
    }
    pub fn SetCharacterSpacing(self: *const IDWriteTextLayout1, leadingSpacing: f32, trailingSpacing: f32, minimumAdvanceWidth: f32, textRange: DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.SetCharacterSpacing(self, leadingSpacing, trailingSpacing, minimumAdvanceWidth, textRange);
    }
    pub fn GetCharacterSpacing(self: *const IDWriteTextLayout1, currentPosition: u32, leadingSpacing: ?*f32, trailingSpacing: ?*f32, minimumAdvanceWidth: ?*f32, textRange: ?*DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.GetCharacterSpacing(self, currentPosition, leadingSpacing, trailingSpacing, minimumAdvanceWidth, textRange);
    }
};

pub const DWRITE_TEXT_ANTIALIAS_MODE = enum(i32) {
    CLEARTYPE = 0,
    GRAYSCALE = 1,
};
pub const DWRITE_TEXT_ANTIALIAS_MODE_CLEARTYPE = DWRITE_TEXT_ANTIALIAS_MODE.CLEARTYPE;
pub const DWRITE_TEXT_ANTIALIAS_MODE_GRAYSCALE = DWRITE_TEXT_ANTIALIAS_MODE.GRAYSCALE;

// TODO: this type is limited to platform 'windows8.0'
const IID_IDWriteBitmapRenderTarget1_Value = Guid.initString("791e8298-3ef3-4230-9880-c9bdecc42064");
pub const IID_IDWriteBitmapRenderTarget1 = &IID_IDWriteBitmapRenderTarget1_Value;
pub const IDWriteBitmapRenderTarget1 = extern union {
    pub const VTable = extern struct {
        base: IDWriteBitmapRenderTarget.VTable,
        GetTextAntialiasMode: *const fn(
            self: *const IDWriteBitmapRenderTarget1,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_TEXT_ANTIALIAS_MODE,
        SetTextAntialiasMode: *const fn(
            self: *const IDWriteBitmapRenderTarget1,
            antialiasMode: DWRITE_TEXT_ANTIALIAS_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteBitmapRenderTarget: IDWriteBitmapRenderTarget,
    IUnknown: IUnknown,
    pub fn GetTextAntialiasMode(self: *const IDWriteBitmapRenderTarget1) callconv(.Inline) DWRITE_TEXT_ANTIALIAS_MODE {
        return self.vtable.GetTextAntialiasMode(self);
    }
    pub fn SetTextAntialiasMode(self: *const IDWriteBitmapRenderTarget1, antialiasMode: DWRITE_TEXT_ANTIALIAS_MODE) callconv(.Inline) HRESULT {
        return self.vtable.SetTextAntialiasMode(self, antialiasMode);
    }
};

pub const DWRITE_OPTICAL_ALIGNMENT = enum(i32) {
    NE = 0,
    _SIDE_BEARINGS = 1,
};
pub const DWRITE_OPTICAL_ALIGNMENT_NONE = DWRITE_OPTICAL_ALIGNMENT.NE;
pub const DWRITE_OPTICAL_ALIGNMENT_NO_SIDE_BEARINGS = DWRITE_OPTICAL_ALIGNMENT._SIDE_BEARINGS;

pub const DWRITE_GRID_FIT_MODE = enum(i32) {
    DEFAULT = 0,
    DISABLED = 1,
    ENABLED = 2,
};
pub const DWRITE_GRID_FIT_MODE_DEFAULT = DWRITE_GRID_FIT_MODE.DEFAULT;
pub const DWRITE_GRID_FIT_MODE_DISABLED = DWRITE_GRID_FIT_MODE.DISABLED;
pub const DWRITE_GRID_FIT_MODE_ENABLED = DWRITE_GRID_FIT_MODE.ENABLED;

pub const DWRITE_TEXT_METRICS1 = extern struct {
    Base: DWRITE_TEXT_METRICS,
    heightIncludingTrailingWhitespace: f32,
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteTextRenderer1_Value = Guid.initString("d3e0e934-22a0-427e-aae4-7d9574b59db1");
pub const IID_IDWriteTextRenderer1 = &IID_IDWriteTextRenderer1_Value;
pub const IDWriteTextRenderer1 = extern union {
    pub const VTable = extern struct {
        base: IDWriteTextRenderer.VTable,
        DrawGlyphRun: *const fn(
            self: *const IDWriteTextRenderer1,
            clientDrawingContext: ?*anyopaque,
            baselineOriginX: f32,
            baselineOriginY: f32,
            orientationAngle: DWRITE_GLYPH_ORIENTATION_ANGLE,
            measuringMode: DWRITE_MEASURING_MODE,
            glyphRun: ?*const DWRITE_GLYPH_RUN,
            glyphRunDescription: ?*const DWRITE_GLYPH_RUN_DESCRIPTION,
            clientDrawingEffect: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawUnderline: *const fn(
            self: *const IDWriteTextRenderer1,
            clientDrawingContext: ?*anyopaque,
            baselineOriginX: f32,
            baselineOriginY: f32,
            orientationAngle: DWRITE_GLYPH_ORIENTATION_ANGLE,
            underline: ?*const DWRITE_UNDERLINE,
            clientDrawingEffect: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawStrikethrough: *const fn(
            self: *const IDWriteTextRenderer1,
            clientDrawingContext: ?*anyopaque,
            baselineOriginX: f32,
            baselineOriginY: f32,
            orientationAngle: DWRITE_GLYPH_ORIENTATION_ANGLE,
            strikethrough: ?*const DWRITE_STRIKETHROUGH,
            clientDrawingEffect: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawInlineObject: *const fn(
            self: *const IDWriteTextRenderer1,
            clientDrawingContext: ?*anyopaque,
            originX: f32,
            originY: f32,
            orientationAngle: DWRITE_GLYPH_ORIENTATION_ANGLE,
            inlineObject: ?*IDWriteInlineObject,
            isSideways: BOOL,
            isRightToLeft: BOOL,
            clientDrawingEffect: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteTextRenderer: IDWriteTextRenderer,
    IDWritePixelSnapping: IDWritePixelSnapping,
    IUnknown: IUnknown,
    pub fn DrawGlyphRun(self: *const IDWriteTextRenderer1, clientDrawingContext: ?*anyopaque, baselineOriginX: f32, baselineOriginY: f32, orientationAngle: DWRITE_GLYPH_ORIENTATION_ANGLE, measuringMode: DWRITE_MEASURING_MODE, glyphRun: ?*const DWRITE_GLYPH_RUN, glyphRunDescription: ?*const DWRITE_GLYPH_RUN_DESCRIPTION, clientDrawingEffect: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.DrawGlyphRun(self, clientDrawingContext, baselineOriginX, baselineOriginY, orientationAngle, measuringMode, glyphRun, glyphRunDescription, clientDrawingEffect);
    }
    pub fn DrawUnderline(self: *const IDWriteTextRenderer1, clientDrawingContext: ?*anyopaque, baselineOriginX: f32, baselineOriginY: f32, orientationAngle: DWRITE_GLYPH_ORIENTATION_ANGLE, underline: ?*const DWRITE_UNDERLINE, clientDrawingEffect: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.DrawUnderline(self, clientDrawingContext, baselineOriginX, baselineOriginY, orientationAngle, underline, clientDrawingEffect);
    }
    pub fn DrawStrikethrough(self: *const IDWriteTextRenderer1, clientDrawingContext: ?*anyopaque, baselineOriginX: f32, baselineOriginY: f32, orientationAngle: DWRITE_GLYPH_ORIENTATION_ANGLE, strikethrough: ?*const DWRITE_STRIKETHROUGH, clientDrawingEffect: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.DrawStrikethrough(self, clientDrawingContext, baselineOriginX, baselineOriginY, orientationAngle, strikethrough, clientDrawingEffect);
    }
    pub fn DrawInlineObject(self: *const IDWriteTextRenderer1, clientDrawingContext: ?*anyopaque, originX: f32, originY: f32, orientationAngle: DWRITE_GLYPH_ORIENTATION_ANGLE, inlineObject: ?*IDWriteInlineObject, isSideways: BOOL, isRightToLeft: BOOL, clientDrawingEffect: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.DrawInlineObject(self, clientDrawingContext, originX, originY, orientationAngle, inlineObject, isSideways, isRightToLeft, clientDrawingEffect);
    }
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteTextFormat1_Value = Guid.initString("5f174b49-0d8b-4cfb-8bca-f1cce9d06c67");
pub const IID_IDWriteTextFormat1 = &IID_IDWriteTextFormat1_Value;
pub const IDWriteTextFormat1 = extern union {
    pub const VTable = extern struct {
        base: IDWriteTextFormat.VTable,
        SetVerticalGlyphOrientation: *const fn(
            self: *const IDWriteTextFormat1,
            glyphOrientation: DWRITE_VERTICAL_GLYPH_ORIENTATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVerticalGlyphOrientation: *const fn(
            self: *const IDWriteTextFormat1,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_VERTICAL_GLYPH_ORIENTATION,
        SetLastLineWrapping: *const fn(
            self: *const IDWriteTextFormat1,
            isLastLineWrappingEnabled: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastLineWrapping: *const fn(
            self: *const IDWriteTextFormat1,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        SetOpticalAlignment: *const fn(
            self: *const IDWriteTextFormat1,
            opticalAlignment: DWRITE_OPTICAL_ALIGNMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOpticalAlignment: *const fn(
            self: *const IDWriteTextFormat1,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_OPTICAL_ALIGNMENT,
        SetFontFallback: *const fn(
            self: *const IDWriteTextFormat1,
            fontFallback: ?*IDWriteFontFallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFallback: *const fn(
            self: *const IDWriteTextFormat1,
            fontFallback: ?*?*IDWriteFontFallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteTextFormat: IDWriteTextFormat,
    IUnknown: IUnknown,
    pub fn SetVerticalGlyphOrientation(self: *const IDWriteTextFormat1, glyphOrientation: DWRITE_VERTICAL_GLYPH_ORIENTATION) callconv(.Inline) HRESULT {
        return self.vtable.SetVerticalGlyphOrientation(self, glyphOrientation);
    }
    pub fn GetVerticalGlyphOrientation(self: *const IDWriteTextFormat1) callconv(.Inline) DWRITE_VERTICAL_GLYPH_ORIENTATION {
        return self.vtable.GetVerticalGlyphOrientation(self);
    }
    pub fn SetLastLineWrapping(self: *const IDWriteTextFormat1, isLastLineWrappingEnabled: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetLastLineWrapping(self, isLastLineWrappingEnabled);
    }
    pub fn GetLastLineWrapping(self: *const IDWriteTextFormat1) callconv(.Inline) BOOL {
        return self.vtable.GetLastLineWrapping(self);
    }
    pub fn SetOpticalAlignment(self: *const IDWriteTextFormat1, opticalAlignment: DWRITE_OPTICAL_ALIGNMENT) callconv(.Inline) HRESULT {
        return self.vtable.SetOpticalAlignment(self, opticalAlignment);
    }
    pub fn GetOpticalAlignment(self: *const IDWriteTextFormat1) callconv(.Inline) DWRITE_OPTICAL_ALIGNMENT {
        return self.vtable.GetOpticalAlignment(self);
    }
    pub fn SetFontFallback(self: *const IDWriteTextFormat1, fontFallback: ?*IDWriteFontFallback) callconv(.Inline) HRESULT {
        return self.vtable.SetFontFallback(self, fontFallback);
    }
    pub fn GetFontFallback(self: *const IDWriteTextFormat1, fontFallback: ?*?*IDWriteFontFallback) callconv(.Inline) HRESULT {
        return self.vtable.GetFontFallback(self, fontFallback);
    }
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteTextLayout2_Value = Guid.initString("1093c18f-8d5e-43f0-b064-0917311b525e");
pub const IID_IDWriteTextLayout2 = &IID_IDWriteTextLayout2_Value;
pub const IDWriteTextLayout2 = extern union {
    pub const VTable = extern struct {
        base: IDWriteTextLayout1.VTable,
        GetMetrics: *const fn(
            self: *const IDWriteTextLayout2,
            textMetrics: ?*DWRITE_TEXT_METRICS1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVerticalGlyphOrientation: *const fn(
            self: *const IDWriteTextLayout2,
            glyphOrientation: DWRITE_VERTICAL_GLYPH_ORIENTATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVerticalGlyphOrientation: *const fn(
            self: *const IDWriteTextLayout2,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_VERTICAL_GLYPH_ORIENTATION,
        SetLastLineWrapping: *const fn(
            self: *const IDWriteTextLayout2,
            isLastLineWrappingEnabled: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastLineWrapping: *const fn(
            self: *const IDWriteTextLayout2,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        SetOpticalAlignment: *const fn(
            self: *const IDWriteTextLayout2,
            opticalAlignment: DWRITE_OPTICAL_ALIGNMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOpticalAlignment: *const fn(
            self: *const IDWriteTextLayout2,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_OPTICAL_ALIGNMENT,
        SetFontFallback: *const fn(
            self: *const IDWriteTextLayout2,
            fontFallback: ?*IDWriteFontFallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFallback: *const fn(
            self: *const IDWriteTextLayout2,
            fontFallback: ?*?*IDWriteFontFallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteTextLayout1: IDWriteTextLayout1,
    IDWriteTextLayout: IDWriteTextLayout,
    IDWriteTextFormat: IDWriteTextFormat,
    IUnknown: IUnknown,
    pub fn GetMetrics(self: *const IDWriteTextLayout2, textMetrics: ?*DWRITE_TEXT_METRICS1) callconv(.Inline) HRESULT {
        return self.vtable.GetMetrics(self, textMetrics);
    }
    pub fn SetVerticalGlyphOrientation(self: *const IDWriteTextLayout2, glyphOrientation: DWRITE_VERTICAL_GLYPH_ORIENTATION) callconv(.Inline) HRESULT {
        return self.vtable.SetVerticalGlyphOrientation(self, glyphOrientation);
    }
    pub fn GetVerticalGlyphOrientation(self: *const IDWriteTextLayout2) callconv(.Inline) DWRITE_VERTICAL_GLYPH_ORIENTATION {
        return self.vtable.GetVerticalGlyphOrientation(self);
    }
    pub fn SetLastLineWrapping(self: *const IDWriteTextLayout2, isLastLineWrappingEnabled: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetLastLineWrapping(self, isLastLineWrappingEnabled);
    }
    pub fn GetLastLineWrapping(self: *const IDWriteTextLayout2) callconv(.Inline) BOOL {
        return self.vtable.GetLastLineWrapping(self);
    }
    pub fn SetOpticalAlignment(self: *const IDWriteTextLayout2, opticalAlignment: DWRITE_OPTICAL_ALIGNMENT) callconv(.Inline) HRESULT {
        return self.vtable.SetOpticalAlignment(self, opticalAlignment);
    }
    pub fn GetOpticalAlignment(self: *const IDWriteTextLayout2) callconv(.Inline) DWRITE_OPTICAL_ALIGNMENT {
        return self.vtable.GetOpticalAlignment(self);
    }
    pub fn SetFontFallback(self: *const IDWriteTextLayout2, fontFallback: ?*IDWriteFontFallback) callconv(.Inline) HRESULT {
        return self.vtable.SetFontFallback(self, fontFallback);
    }
    pub fn GetFontFallback(self: *const IDWriteTextLayout2, fontFallback: ?*?*IDWriteFontFallback) callconv(.Inline) HRESULT {
        return self.vtable.GetFontFallback(self, fontFallback);
    }
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteTextAnalyzer2_Value = Guid.initString("553a9ff3-5693-4df7-b52b-74806f7f2eb9");
pub const IID_IDWriteTextAnalyzer2 = &IID_IDWriteTextAnalyzer2_Value;
pub const IDWriteTextAnalyzer2 = extern union {
    pub const VTable = extern struct {
        base: IDWriteTextAnalyzer1.VTable,
        GetGlyphOrientationTransform: *const fn(
            self: *const IDWriteTextAnalyzer2,
            glyphOrientationAngle: DWRITE_GLYPH_ORIENTATION_ANGLE,
            isSideways: BOOL,
            originX: f32,
            originY: f32,
            transform: ?*DWRITE_MATRIX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTypographicFeatures: *const fn(
            self: *const IDWriteTextAnalyzer2,
            fontFace: ?*IDWriteFontFace,
            scriptAnalysis: DWRITE_SCRIPT_ANALYSIS,
            localeName: ?[*:0]const u16,
            maxTagCount: u32,
            actualTagCount: ?*u32,
            tags: [*]DWRITE_FONT_FEATURE_TAG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckTypographicFeature: *const fn(
            self: *const IDWriteTextAnalyzer2,
            fontFace: ?*IDWriteFontFace,
            scriptAnalysis: DWRITE_SCRIPT_ANALYSIS,
            localeName: ?[*:0]const u16,
            featureTag: DWRITE_FONT_FEATURE_TAG,
            glyphCount: u32,
            glyphIndices: [*:0]const u16,
            featureApplies: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteTextAnalyzer1: IDWriteTextAnalyzer1,
    IDWriteTextAnalyzer: IDWriteTextAnalyzer,
    IUnknown: IUnknown,
    pub fn GetGlyphOrientationTransform(self: *const IDWriteTextAnalyzer2, glyphOrientationAngle: DWRITE_GLYPH_ORIENTATION_ANGLE, isSideways: BOOL, originX: f32, originY: f32, transform: ?*DWRITE_MATRIX) callconv(.Inline) HRESULT {
        return self.vtable.GetGlyphOrientationTransform(self, glyphOrientationAngle, isSideways, originX, originY, transform);
    }
    pub fn GetTypographicFeatures(self: *const IDWriteTextAnalyzer2, fontFace: ?*IDWriteFontFace, scriptAnalysis: DWRITE_SCRIPT_ANALYSIS, localeName: ?[*:0]const u16, maxTagCount: u32, actualTagCount: ?*u32, tags: [*]DWRITE_FONT_FEATURE_TAG) callconv(.Inline) HRESULT {
        return self.vtable.GetTypographicFeatures(self, fontFace, scriptAnalysis, localeName, maxTagCount, actualTagCount, tags);
    }
    pub fn CheckTypographicFeature(self: *const IDWriteTextAnalyzer2, fontFace: ?*IDWriteFontFace, scriptAnalysis: DWRITE_SCRIPT_ANALYSIS, localeName: ?[*:0]const u16, featureTag: DWRITE_FONT_FEATURE_TAG, glyphCount: u32, glyphIndices: [*:0]const u16, featureApplies: [*:0]u8) callconv(.Inline) HRESULT {
        return self.vtable.CheckTypographicFeature(self, fontFace, scriptAnalysis, localeName, featureTag, glyphCount, glyphIndices, featureApplies);
    }
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteFontFallback_Value = Guid.initString("efa008f9-f7a1-48bf-b05c-f224713cc0ff");
pub const IID_IDWriteFontFallback = &IID_IDWriteFontFallback_Value;
pub const IDWriteFontFallback = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        MapCharacters: *const fn(
            self: *const IDWriteFontFallback,
            analysisSource: ?*IDWriteTextAnalysisSource,
            textPosition: u32,
            textLength: u32,
            baseFontCollection: ?*IDWriteFontCollection,
            baseFamilyName: ?[*:0]const u16,
            baseWeight: DWRITE_FONT_WEIGHT,
            baseStyle: DWRITE_FONT_STYLE,
            baseStretch: DWRITE_FONT_STRETCH,
            mappedLength: ?*u32,
            mappedFont: ?**IDWriteFont,
            scale: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn MapCharacters(self: *const IDWriteFontFallback, analysisSource: ?*IDWriteTextAnalysisSource, textPosition: u32, textLength: u32, baseFontCollection: ?*IDWriteFontCollection, baseFamilyName: ?[*:0]const u16, baseWeight: DWRITE_FONT_WEIGHT, baseStyle: DWRITE_FONT_STYLE, baseStretch: DWRITE_FONT_STRETCH, mappedLength: ?*u32, mappedFont: ?**IDWriteFont, scale: ?*f32) callconv(.Inline) HRESULT {
        return self.vtable.MapCharacters(self, analysisSource, textPosition, textLength, baseFontCollection, baseFamilyName, baseWeight, baseStyle, baseStretch, mappedLength, mappedFont, scale);
    }
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteFontFallbackBuilder_Value = Guid.initString("fd882d06-8aba-4fb8-b849-8be8b73e14de");
pub const IID_IDWriteFontFallbackBuilder = &IID_IDWriteFontFallbackBuilder_Value;
pub const IDWriteFontFallbackBuilder = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddMapping: *const fn(
            self: *const IDWriteFontFallbackBuilder,
            ranges: [*]const DWRITE_UNICODE_RANGE,
            rangesCount: u32,
            targetFamilyNames: [*]const ?*const u16,
            targetFamilyNamesCount: u32,
            fontCollection: ?*IDWriteFontCollection,
            localeName: ?[*:0]const u16,
            baseFamilyName: ?[*:0]const u16,
            scale: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddMappings: *const fn(
            self: *const IDWriteFontFallbackBuilder,
            fontFallback: ?*IDWriteFontFallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontFallback: *const fn(
            self: *const IDWriteFontFallbackBuilder,
            fontFallback: **IDWriteFontFallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn AddMapping(self: *const IDWriteFontFallbackBuilder, ranges: [*]const DWRITE_UNICODE_RANGE, rangesCount: u32, targetFamilyNames: [*]const ?*const u16, targetFamilyNamesCount: u32, fontCollection: ?*IDWriteFontCollection, localeName: ?[*:0]const u16, baseFamilyName: ?[*:0]const u16, scale: f32) callconv(.Inline) HRESULT {
        return self.vtable.AddMapping(self, ranges, rangesCount, targetFamilyNames, targetFamilyNamesCount, fontCollection, localeName, baseFamilyName, scale);
    }
    pub fn AddMappings(self: *const IDWriteFontFallbackBuilder, fontFallback: ?*IDWriteFontFallback) callconv(.Inline) HRESULT {
        return self.vtable.AddMappings(self, fontFallback);
    }
    pub fn CreateFontFallback(self: *const IDWriteFontFallbackBuilder, fontFallback: **IDWriteFontFallback) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontFallback(self, fontFallback);
    }
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteFont2_Value = Guid.initString("29748ed6-8c9c-4a6a-be0b-d912e8538944");
pub const IID_IDWriteFont2 = &IID_IDWriteFont2_Value;
pub const IDWriteFont2 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFont1.VTable,
        IsColorFont: *const fn(
            self: *const IDWriteFont2,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
    };
    vtable: *const VTable,
    IDWriteFont1: IDWriteFont1,
    IDWriteFont: IDWriteFont,
    IUnknown: IUnknown,
    pub fn IsColorFont(self: *const IDWriteFont2) callconv(.Inline) BOOL {
        return self.vtable.IsColorFont(self);
    }
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteFontFace2_Value = Guid.initString("d8b768ff-64bc-4e66-982b-ec8e87f693f7");
pub const IID_IDWriteFontFace2 = &IID_IDWriteFontFace2_Value;
pub const IDWriteFontFace2 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFontFace1.VTable,
        IsColorFont: *const fn(
            self: *const IDWriteFontFace2,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetColorPaletteCount: *const fn(
            self: *const IDWriteFontFace2,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetPaletteEntryCount: *const fn(
            self: *const IDWriteFontFace2,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetPaletteEntries: *const fn(
            self: *const IDWriteFontFace2,
            colorPaletteIndex: u32,
            firstEntryIndex: u32,
            entryCount: u32,
            paletteEntries: [*]DWRITE_COLOR_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRecommendedRenderingMode: *const fn(
            self: *const IDWriteFontFace2,
            fontEmSize: f32,
            dpiX: f32,
            dpiY: f32,
            transform: ?*const DWRITE_MATRIX,
            isSideways: BOOL,
            outlineThreshold: DWRITE_OUTLINE_THRESHOLD,
            measuringMode: DWRITE_MEASURING_MODE,
            renderingParams: ?*IDWriteRenderingParams,
            renderingMode: ?*DWRITE_RENDERING_MODE,
            gridFitMode: ?*DWRITE_GRID_FIT_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteFontFace1: IDWriteFontFace1,
    IDWriteFontFace: IDWriteFontFace,
    IUnknown: IUnknown,
    pub fn IsColorFont(self: *const IDWriteFontFace2) callconv(.Inline) BOOL {
        return self.vtable.IsColorFont(self);
    }
    pub fn GetColorPaletteCount(self: *const IDWriteFontFace2) callconv(.Inline) u32 {
        return self.vtable.GetColorPaletteCount(self);
    }
    pub fn GetPaletteEntryCount(self: *const IDWriteFontFace2) callconv(.Inline) u32 {
        return self.vtable.GetPaletteEntryCount(self);
    }
    pub fn GetPaletteEntries(self: *const IDWriteFontFace2, colorPaletteIndex: u32, firstEntryIndex: u32, entryCount: u32, paletteEntries: [*]DWRITE_COLOR_F) callconv(.Inline) HRESULT {
        return self.vtable.GetPaletteEntries(self, colorPaletteIndex, firstEntryIndex, entryCount, paletteEntries);
    }
    pub fn GetRecommendedRenderingMode(self: *const IDWriteFontFace2, fontEmSize: f32, dpiX: f32, dpiY: f32, transform: ?*const DWRITE_MATRIX, isSideways: BOOL, outlineThreshold: DWRITE_OUTLINE_THRESHOLD, measuringMode: DWRITE_MEASURING_MODE, renderingParams: ?*IDWriteRenderingParams, renderingMode: ?*DWRITE_RENDERING_MODE, gridFitMode: ?*DWRITE_GRID_FIT_MODE) callconv(.Inline) HRESULT {
        return self.vtable.GetRecommendedRenderingMode(self, fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingParams, renderingMode, gridFitMode);
    }
};

pub const DWRITE_COLOR_GLYPH_RUN = extern struct {
    glyphRun: DWRITE_GLYPH_RUN,
    glyphRunDescription: ?*DWRITE_GLYPH_RUN_DESCRIPTION,
    baselineOriginX: f32,
    baselineOriginY: f32,
    runColor: DWRITE_COLOR_F,
    paletteIndex: u16,
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteColorGlyphRunEnumerator_Value = Guid.initString("d31fbe17-f157-41a2-8d24-cb779e0560e8");
pub const IID_IDWriteColorGlyphRunEnumerator = &IID_IDWriteColorGlyphRunEnumerator_Value;
pub const IDWriteColorGlyphRunEnumerator = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        MoveNext: *const fn(
            self: *const IDWriteColorGlyphRunEnumerator,
            hasRun: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentRun: *const fn(
            self: *const IDWriteColorGlyphRunEnumerator,
            colorGlyphRun: ?*const ?*DWRITE_COLOR_GLYPH_RUN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn MoveNext(self: *const IDWriteColorGlyphRunEnumerator, hasRun: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.MoveNext(self, hasRun);
    }
    pub fn GetCurrentRun(self: *const IDWriteColorGlyphRunEnumerator, colorGlyphRun: ?*const ?*DWRITE_COLOR_GLYPH_RUN) callconv(.Inline) HRESULT {
        return self.vtable.GetCurrentRun(self, colorGlyphRun);
    }
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteRenderingParams2_Value = Guid.initString("f9d711c3-9777-40ae-87e8-3e5af9bf0948");
pub const IID_IDWriteRenderingParams2 = &IID_IDWriteRenderingParams2_Value;
pub const IDWriteRenderingParams2 = extern union {
    pub const VTable = extern struct {
        base: IDWriteRenderingParams1.VTable,
        GetGridFitMode: *const fn(
            self: *const IDWriteRenderingParams2,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_GRID_FIT_MODE,
    };
    vtable: *const VTable,
    IDWriteRenderingParams1: IDWriteRenderingParams1,
    IDWriteRenderingParams: IDWriteRenderingParams,
    IUnknown: IUnknown,
    pub fn GetGridFitMode(self: *const IDWriteRenderingParams2) callconv(.Inline) DWRITE_GRID_FIT_MODE {
        return self.vtable.GetGridFitMode(self);
    }
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteFactory2_Value = Guid.initString("0439fc60-ca44-4994-8dee-3a9af7b732ec");
pub const IID_IDWriteFactory2 = &IID_IDWriteFactory2_Value;
pub const IDWriteFactory2 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFactory1.VTable,
        GetSystemFontFallback: *const fn(
            self: *const IDWriteFactory2,
            fontFallback: **IDWriteFontFallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontFallbackBuilder: *const fn(
            self: *const IDWriteFactory2,
            fontFallbackBuilder: **IDWriteFontFallbackBuilder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateColorGlyphRun: *const fn(
            self: *const IDWriteFactory2,
            baselineOriginX: f32,
            baselineOriginY: f32,
            glyphRun: ?*const DWRITE_GLYPH_RUN,
            glyphRunDescription: ?*const DWRITE_GLYPH_RUN_DESCRIPTION,
            measuringMode: DWRITE_MEASURING_MODE,
            worldToDeviceTransform: ?*const DWRITE_MATRIX,
            colorPaletteIndex: u32,
            colorLayers: **IDWriteColorGlyphRunEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCustomRenderingParams: *const fn(
            self: *const IDWriteFactory2,
            gamma: f32,
            enhancedContrast: f32,
            grayscaleEnhancedContrast: f32,
            clearTypeLevel: f32,
            pixelGeometry: DWRITE_PIXEL_GEOMETRY,
            renderingMode: DWRITE_RENDERING_MODE,
            gridFitMode: DWRITE_GRID_FIT_MODE,
            renderingParams: **IDWriteRenderingParams2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGlyphRunAnalysis: *const fn(
            self: *const IDWriteFactory2,
            glyphRun: ?*const DWRITE_GLYPH_RUN,
            transform: ?*const DWRITE_MATRIX,
            renderingMode: DWRITE_RENDERING_MODE,
            measuringMode: DWRITE_MEASURING_MODE,
            gridFitMode: DWRITE_GRID_FIT_MODE,
            antialiasMode: DWRITE_TEXT_ANTIALIAS_MODE,
            baselineOriginX: f32,
            baselineOriginY: f32,
            glyphRunAnalysis: **IDWriteGlyphRunAnalysis,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteFactory1: IDWriteFactory1,
    IDWriteFactory: IDWriteFactory,
    IUnknown: IUnknown,
    pub fn GetSystemFontFallback(self: *const IDWriteFactory2, fontFallback: **IDWriteFontFallback) callconv(.Inline) HRESULT {
        return self.vtable.GetSystemFontFallback(self, fontFallback);
    }
    pub fn CreateFontFallbackBuilder(self: *const IDWriteFactory2, fontFallbackBuilder: **IDWriteFontFallbackBuilder) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontFallbackBuilder(self, fontFallbackBuilder);
    }
    pub fn TranslateColorGlyphRun(self: *const IDWriteFactory2, baselineOriginX: f32, baselineOriginY: f32, glyphRun: ?*const DWRITE_GLYPH_RUN, glyphRunDescription: ?*const DWRITE_GLYPH_RUN_DESCRIPTION, measuringMode: DWRITE_MEASURING_MODE, worldToDeviceTransform: ?*const DWRITE_MATRIX, colorPaletteIndex: u32, colorLayers: **IDWriteColorGlyphRunEnumerator) callconv(.Inline) HRESULT {
        return self.vtable.TranslateColorGlyphRun(self, baselineOriginX, baselineOriginY, glyphRun, glyphRunDescription, measuringMode, worldToDeviceTransform, colorPaletteIndex, colorLayers);
    }
    pub fn CreateCustomRenderingParams(self: *const IDWriteFactory2, gamma: f32, enhancedContrast: f32, grayscaleEnhancedContrast: f32, clearTypeLevel: f32, pixelGeometry: DWRITE_PIXEL_GEOMETRY, renderingMode: DWRITE_RENDERING_MODE, gridFitMode: DWRITE_GRID_FIT_MODE, renderingParams: **IDWriteRenderingParams2) callconv(.Inline) HRESULT {
        return self.vtable.CreateCustomRenderingParams(self, gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams);
    }
    pub fn CreateGlyphRunAnalysis(self: *const IDWriteFactory2, glyphRun: ?*const DWRITE_GLYPH_RUN, transform: ?*const DWRITE_MATRIX, renderingMode: DWRITE_RENDERING_MODE, measuringMode: DWRITE_MEASURING_MODE, gridFitMode: DWRITE_GRID_FIT_MODE, antialiasMode: DWRITE_TEXT_ANTIALIAS_MODE, baselineOriginX: f32, baselineOriginY: f32, glyphRunAnalysis: **IDWriteGlyphRunAnalysis) callconv(.Inline) HRESULT {
        return self.vtable.CreateGlyphRunAnalysis(self, glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis);
    }
};

pub const DWRITE_FONT_PROPERTY_ID = enum(i32) {
    NONE = 0,
    WEIGHT_STRETCH_STYLE_FAMILY_NAME = 1,
    TYPOGRAPHIC_FAMILY_NAME = 2,
    WEIGHT_STRETCH_STYLE_FACE_NAME = 3,
    FULL_NAME = 4,
    WIN32_FAMILY_NAME = 5,
    POSTSCRIPT_NAME = 6,
    DESIGN_SCRIPT_LANGUAGE_TAG = 7,
    SUPPORTED_SCRIPT_LANGUAGE_TAG = 8,
    SEMANTIC_TAG = 9,
    WEIGHT = 10,
    STRETCH = 11,
    STYLE = 12,
    TYPOGRAPHIC_FACE_NAME = 13,
    TOTAL_RS3 = 14,
    pub const TOTAL = .TYPOGRAPHIC_FACE_NAME;
    pub const PREFERRED_FAMILY_NAME = .TYPOGRAPHIC_FAMILY_NAME;
    pub const FAMILY_NAME = .WEIGHT_STRETCH_STYLE_FAMILY_NAME;
    pub const FACE_NAME = .WEIGHT_STRETCH_STYLE_FACE_NAME;
};
pub const DWRITE_FONT_PROPERTY_ID_NONE = DWRITE_FONT_PROPERTY_ID.NONE;
pub const DWRITE_FONT_PROPERTY_ID_WEIGHT_STRETCH_STYLE_FAMILY_NAME = DWRITE_FONT_PROPERTY_ID.WEIGHT_STRETCH_STYLE_FAMILY_NAME;
pub const DWRITE_FONT_PROPERTY_ID_TYPOGRAPHIC_FAMILY_NAME = DWRITE_FONT_PROPERTY_ID.TYPOGRAPHIC_FAMILY_NAME;
pub const DWRITE_FONT_PROPERTY_ID_WEIGHT_STRETCH_STYLE_FACE_NAME = DWRITE_FONT_PROPERTY_ID.WEIGHT_STRETCH_STYLE_FACE_NAME;
pub const DWRITE_FONT_PROPERTY_ID_FULL_NAME = DWRITE_FONT_PROPERTY_ID.FULL_NAME;
pub const DWRITE_FONT_PROPERTY_ID_WIN32_FAMILY_NAME = DWRITE_FONT_PROPERTY_ID.WIN32_FAMILY_NAME;
pub const DWRITE_FONT_PROPERTY_ID_POSTSCRIPT_NAME = DWRITE_FONT_PROPERTY_ID.POSTSCRIPT_NAME;
pub const DWRITE_FONT_PROPERTY_ID_DESIGN_SCRIPT_LANGUAGE_TAG = DWRITE_FONT_PROPERTY_ID.DESIGN_SCRIPT_LANGUAGE_TAG;
pub const DWRITE_FONT_PROPERTY_ID_SUPPORTED_SCRIPT_LANGUAGE_TAG = DWRITE_FONT_PROPERTY_ID.SUPPORTED_SCRIPT_LANGUAGE_TAG;
pub const DWRITE_FONT_PROPERTY_ID_SEMANTIC_TAG = DWRITE_FONT_PROPERTY_ID.SEMANTIC_TAG;
pub const DWRITE_FONT_PROPERTY_ID_WEIGHT = DWRITE_FONT_PROPERTY_ID.WEIGHT;
pub const DWRITE_FONT_PROPERTY_ID_STRETCH = DWRITE_FONT_PROPERTY_ID.STRETCH;
pub const DWRITE_FONT_PROPERTY_ID_STYLE = DWRITE_FONT_PROPERTY_ID.STYLE;
pub const DWRITE_FONT_PROPERTY_ID_TYPOGRAPHIC_FACE_NAME = DWRITE_FONT_PROPERTY_ID.TYPOGRAPHIC_FACE_NAME;
pub const DWRITE_FONT_PROPERTY_ID_TOTAL = DWRITE_FONT_PROPERTY_ID.TYPOGRAPHIC_FACE_NAME;
pub const DWRITE_FONT_PROPERTY_ID_TOTAL_RS3 = DWRITE_FONT_PROPERTY_ID.TOTAL_RS3;
pub const DWRITE_FONT_PROPERTY_ID_PREFERRED_FAMILY_NAME = DWRITE_FONT_PROPERTY_ID.TYPOGRAPHIC_FAMILY_NAME;
pub const DWRITE_FONT_PROPERTY_ID_FAMILY_NAME = DWRITE_FONT_PROPERTY_ID.WEIGHT_STRETCH_STYLE_FAMILY_NAME;
pub const DWRITE_FONT_PROPERTY_ID_FACE_NAME = DWRITE_FONT_PROPERTY_ID.WEIGHT_STRETCH_STYLE_FACE_NAME;

pub const DWRITE_FONT_PROPERTY = extern struct {
    propertyId: DWRITE_FONT_PROPERTY_ID,
    propertyValue: ?[*:0]const u16,
    localeName: ?[*:0]const u16,
};

pub const DWRITE_LOCALITY = enum(i32) {
    REMOTE = 0,
    PARTIAL = 1,
    LOCAL = 2,
};
pub const DWRITE_LOCALITY_REMOTE = DWRITE_LOCALITY.REMOTE;
pub const DWRITE_LOCALITY_PARTIAL = DWRITE_LOCALITY.PARTIAL;
pub const DWRITE_LOCALITY_LOCAL = DWRITE_LOCALITY.LOCAL;

pub const DWRITE_RENDERING_MODE1 = enum(i32) {
    DEFAULT = 0,
    ALIASED = 1,
    GDI_CLASSIC = 2,
    GDI_NATURAL = 3,
    NATURAL = 4,
    NATURAL_SYMMETRIC = 5,
    OUTLINE = 6,
    NATURAL_SYMMETRIC_DOWNSAMPLED = 7,
};
pub const DWRITE_RENDERING_MODE1_DEFAULT = DWRITE_RENDERING_MODE1.DEFAULT;
pub const DWRITE_RENDERING_MODE1_ALIASED = DWRITE_RENDERING_MODE1.ALIASED;
pub const DWRITE_RENDERING_MODE1_GDI_CLASSIC = DWRITE_RENDERING_MODE1.GDI_CLASSIC;
pub const DWRITE_RENDERING_MODE1_GDI_NATURAL = DWRITE_RENDERING_MODE1.GDI_NATURAL;
pub const DWRITE_RENDERING_MODE1_NATURAL = DWRITE_RENDERING_MODE1.NATURAL;
pub const DWRITE_RENDERING_MODE1_NATURAL_SYMMETRIC = DWRITE_RENDERING_MODE1.NATURAL_SYMMETRIC;
pub const DWRITE_RENDERING_MODE1_OUTLINE = DWRITE_RENDERING_MODE1.OUTLINE;
pub const DWRITE_RENDERING_MODE1_NATURAL_SYMMETRIC_DOWNSAMPLED = DWRITE_RENDERING_MODE1.NATURAL_SYMMETRIC_DOWNSAMPLED;

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IDWriteRenderingParams3_Value = Guid.initString("b7924baa-391b-412a-8c5c-e44cc2d867dc");
pub const IID_IDWriteRenderingParams3 = &IID_IDWriteRenderingParams3_Value;
pub const IDWriteRenderingParams3 = extern union {
    pub const VTable = extern struct {
        base: IDWriteRenderingParams2.VTable,
        GetRenderingMode1: *const fn(
            self: *const IDWriteRenderingParams3,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_RENDERING_MODE1,
    };
    vtable: *const VTable,
    IDWriteRenderingParams2: IDWriteRenderingParams2,
    IDWriteRenderingParams1: IDWriteRenderingParams1,
    IDWriteRenderingParams: IDWriteRenderingParams,
    IUnknown: IUnknown,
    pub fn GetRenderingMode1(self: *const IDWriteRenderingParams3) callconv(.Inline) DWRITE_RENDERING_MODE1 {
        return self.vtable.GetRenderingMode1(self);
    }
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IDWriteFactory3_Value = Guid.initString("9a1b41c3-d3bb-466a-87fc-fe67556a3b65");
pub const IID_IDWriteFactory3 = &IID_IDWriteFactory3_Value;
pub const IDWriteFactory3 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFactory2.VTable,
        CreateGlyphRunAnalysis: *const fn(
            self: *const IDWriteFactory3,
            glyphRun: ?*const DWRITE_GLYPH_RUN,
            transform: ?*const DWRITE_MATRIX,
            renderingMode: DWRITE_RENDERING_MODE1,
            measuringMode: DWRITE_MEASURING_MODE,
            gridFitMode: DWRITE_GRID_FIT_MODE,
            antialiasMode: DWRITE_TEXT_ANTIALIAS_MODE,
            baselineOriginX: f32,
            baselineOriginY: f32,
            glyphRunAnalysis: **IDWriteGlyphRunAnalysis,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCustomRenderingParams: *const fn(
            self: *const IDWriteFactory3,
            gamma: f32,
            enhancedContrast: f32,
            grayscaleEnhancedContrast: f32,
            clearTypeLevel: f32,
            pixelGeometry: DWRITE_PIXEL_GEOMETRY,
            renderingMode: DWRITE_RENDERING_MODE1,
            gridFitMode: DWRITE_GRID_FIT_MODE,
            renderingParams: **IDWriteRenderingParams3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontFaceReference_TODO_A: *const fn(
            self: *const IDWriteFactory3,
            fontFile: ?*IDWriteFontFile,
            faceIndex: u32,
            fontSimulations: DWRITE_FONT_SIMULATIONS,
            fontFaceReference: **IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontFaceReference_TODO_B: *const fn(
            self: *const IDWriteFactory3,
            filePath: ?[*:0]const u16,
            lastWriteTime: ?*const FILETIME,
            faceIndex: u32,
            fontSimulations: DWRITE_FONT_SIMULATIONS,
            fontFaceReference: **IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSystemFontSet: *const fn(
            self: *const IDWriteFactory3,
            fontSet: **IDWriteFontSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontSetBuilder: *const fn(
            self: *const IDWriteFactory3,
            fontSetBuilder: **IDWriteFontSetBuilder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontCollectionFromFontSet: *const fn(
            self: *const IDWriteFactory3,
            fontSet: ?*IDWriteFontSet,
            fontCollection: **IDWriteFontCollection1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSystemFontCollection: *const fn(
            self: *const IDWriteFactory3,
            includeDownloadableFonts: BOOL,
            fontCollection: **IDWriteFontCollection1,
            checkForUpdates: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontDownloadQueue: *const fn(
            self: *const IDWriteFactory3,
            fontDownloadQueue: **IDWriteFontDownloadQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteFactory2: IDWriteFactory2,
    IDWriteFactory1: IDWriteFactory1,
    IDWriteFactory: IDWriteFactory,
    IUnknown: IUnknown,
    pub const CreateFontFaceReference = @compileError("COM method 'CreateFontFaceReference' must be called using one of the following overload names: CreateFontFaceReference_TODO_B, CreateFontFaceReference_TODO_A");
    pub fn CreateGlyphRunAnalysis(self: *const IDWriteFactory3, glyphRun: ?*const DWRITE_GLYPH_RUN, transform: ?*const DWRITE_MATRIX, renderingMode: DWRITE_RENDERING_MODE1, measuringMode: DWRITE_MEASURING_MODE, gridFitMode: DWRITE_GRID_FIT_MODE, antialiasMode: DWRITE_TEXT_ANTIALIAS_MODE, baselineOriginX: f32, baselineOriginY: f32, glyphRunAnalysis: **IDWriteGlyphRunAnalysis) callconv(.Inline) HRESULT {
        return self.vtable.CreateGlyphRunAnalysis(self, glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis);
    }
    pub fn CreateCustomRenderingParams(self: *const IDWriteFactory3, gamma: f32, enhancedContrast: f32, grayscaleEnhancedContrast: f32, clearTypeLevel: f32, pixelGeometry: DWRITE_PIXEL_GEOMETRY, renderingMode: DWRITE_RENDERING_MODE1, gridFitMode: DWRITE_GRID_FIT_MODE, renderingParams: **IDWriteRenderingParams3) callconv(.Inline) HRESULT {
        return self.vtable.CreateCustomRenderingParams(self, gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams);
    }
    pub fn CreateFontFaceReference_TODO_A(self: *const IDWriteFactory3, fontFile: ?*IDWriteFontFile, faceIndex: u32, fontSimulations: DWRITE_FONT_SIMULATIONS, fontFaceReference: **IDWriteFontFaceReference) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontFaceReference_TODO_A(self, fontFile, faceIndex, fontSimulations, fontFaceReference);
    }
    pub fn CreateFontFaceReference_TODO_B(self: *const IDWriteFactory3, filePath: ?[*:0]const u16, lastWriteTime: ?*const FILETIME, faceIndex: u32, fontSimulations: DWRITE_FONT_SIMULATIONS, fontFaceReference: **IDWriteFontFaceReference) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontFaceReference_TODO_B(self, filePath, lastWriteTime, faceIndex, fontSimulations, fontFaceReference);
    }
    pub fn GetSystemFontSet(self: *const IDWriteFactory3, fontSet: **IDWriteFontSet) callconv(.Inline) HRESULT {
        return self.vtable.GetSystemFontSet(self, fontSet);
    }
    pub fn CreateFontSetBuilder(self: *const IDWriteFactory3, fontSetBuilder: **IDWriteFontSetBuilder) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontSetBuilder(self, fontSetBuilder);
    }
    pub fn CreateFontCollectionFromFontSet(self: *const IDWriteFactory3, fontSet: ?*IDWriteFontSet, fontCollection: **IDWriteFontCollection1) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontCollectionFromFontSet(self, fontSet, fontCollection);
    }
    pub fn GetSystemFontCollection(self: *const IDWriteFactory3, includeDownloadableFonts: BOOL, fontCollection: **IDWriteFontCollection1, checkForUpdates: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.GetSystemFontCollection(self, includeDownloadableFonts, fontCollection, checkForUpdates);
    }
    pub fn GetFontDownloadQueue(self: *const IDWriteFactory3, fontDownloadQueue: **IDWriteFontDownloadQueue) callconv(.Inline) HRESULT {
        return self.vtable.GetFontDownloadQueue(self, fontDownloadQueue);
    }
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IDWriteFontSet_Value = Guid.initString("53585141-d9f8-4095-8321-d73cf6bd116b");
pub const IID_IDWriteFontSet = &IID_IDWriteFontSet_Value;
pub const IDWriteFontSet = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFontCount: *const fn(
            self: *const IDWriteFontSet,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetFontFaceReference: *const fn(
            self: *const IDWriteFontSet,
            listIndex: u32,
            fontFaceReference: **IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFontFaceReference: *const fn(
            self: *const IDWriteFontSet,
            fontFaceReference: ?*IDWriteFontFaceReference,
            listIndex: ?*u32,
            exists: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFontFace: *const fn(
            self: *const IDWriteFontSet,
            fontFace: ?*IDWriteFontFace,
            listIndex: ?*u32,
            exists: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyValues_TODO_A: *const fn(
            self: *const IDWriteFontSet,
            propertyID: DWRITE_FONT_PROPERTY_ID,
            values: **IDWriteStringList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyValues_TODO_B: *const fn(
            self: *const IDWriteFontSet,
            propertyID: DWRITE_FONT_PROPERTY_ID,
            preferredLocaleNames: ?[*:0]const u16,
            values: **IDWriteStringList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyValues_TODO_C: *const fn(
            self: *const IDWriteFontSet,
            listIndex: u32,
            propertyId: DWRITE_FONT_PROPERTY_ID,
            exists: ?*BOOL,
            values: ?**IDWriteLocalizedStrings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyOccurrenceCount: *const fn(
            self: *const IDWriteFontSet,
            property: ?*const DWRITE_FONT_PROPERTY,
            propertyOccurrenceCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMatchingFonts_TODO_A: *const fn(
            self: *const IDWriteFontSet,
            familyName: ?[*:0]const u16,
            fontWeight: DWRITE_FONT_WEIGHT,
            fontStretch: DWRITE_FONT_STRETCH,
            fontStyle: DWRITE_FONT_STYLE,
            filteredSet: **IDWriteFontSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMatchingFonts_TODO_B: *const fn(
            self: *const IDWriteFontSet,
            properties: [*]const DWRITE_FONT_PROPERTY,
            propertyCount: u32,
            filteredSet: **IDWriteFontSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub const GetPropertyValues = @compileError("COM method 'GetPropertyValues' must be called using one of the following overload names: GetPropertyValues_TODO_A, GetPropertyValues_TODO_C, GetPropertyValues_TODO_B");
    pub const GetMatchingFonts = @compileError("COM method 'GetMatchingFonts' must be called using one of the following overload names: GetMatchingFonts_TODO_A, GetMatchingFonts_TODO_B");
    pub fn GetFontCount(self: *const IDWriteFontSet) callconv(.Inline) u32 {
        return self.vtable.GetFontCount(self);
    }
    pub fn GetFontFaceReference(self: *const IDWriteFontSet, listIndex: u32, fontFaceReference: **IDWriteFontFaceReference) callconv(.Inline) HRESULT {
        return self.vtable.GetFontFaceReference(self, listIndex, fontFaceReference);
    }
    pub fn FindFontFaceReference(self: *const IDWriteFontSet, fontFaceReference: ?*IDWriteFontFaceReference, listIndex: ?*u32, exists: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.FindFontFaceReference(self, fontFaceReference, listIndex, exists);
    }
    pub fn FindFontFace(self: *const IDWriteFontSet, fontFace: ?*IDWriteFontFace, listIndex: ?*u32, exists: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.FindFontFace(self, fontFace, listIndex, exists);
    }
    pub fn GetPropertyValues_TODO_A(self: *const IDWriteFontSet, propertyID: DWRITE_FONT_PROPERTY_ID, values: **IDWriteStringList) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyValues_TODO_A(self, propertyID, values);
    }
    pub fn GetPropertyValues_TODO_B(self: *const IDWriteFontSet, propertyID: DWRITE_FONT_PROPERTY_ID, preferredLocaleNames: ?[*:0]const u16, values: **IDWriteStringList) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyValues_TODO_B(self, propertyID, preferredLocaleNames, values);
    }
    pub fn GetPropertyValues_TODO_C(self: *const IDWriteFontSet, listIndex: u32, propertyId: DWRITE_FONT_PROPERTY_ID, exists: ?*BOOL, values: ?**IDWriteLocalizedStrings) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyValues_TODO_C(self, listIndex, propertyId, exists, values);
    }
    pub fn GetPropertyOccurrenceCount(self: *const IDWriteFontSet, property: ?*const DWRITE_FONT_PROPERTY, propertyOccurrenceCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyOccurrenceCount(self, property, propertyOccurrenceCount);
    }
    pub fn GetMatchingFonts_TODO_A(self: *const IDWriteFontSet, familyName: ?[*:0]const u16, fontWeight: DWRITE_FONT_WEIGHT, fontStretch: DWRITE_FONT_STRETCH, fontStyle: DWRITE_FONT_STYLE, filteredSet: **IDWriteFontSet) callconv(.Inline) HRESULT {
        return self.vtable.GetMatchingFonts_TODO_A(self, familyName, fontWeight, fontStretch, fontStyle, filteredSet);
    }
    pub fn GetMatchingFonts_TODO_B(self: *const IDWriteFontSet, properties: [*]const DWRITE_FONT_PROPERTY, propertyCount: u32, filteredSet: **IDWriteFontSet) callconv(.Inline) HRESULT {
        return self.vtable.GetMatchingFonts_TODO_B(self, properties, propertyCount, filteredSet);
    }
};

const IID_IDWriteFontSetBuilder_Value = Guid.initString("2f642afe-9c68-4f40-b8be-457401afcb3d");
pub const IID_IDWriteFontSetBuilder = &IID_IDWriteFontSetBuilder_Value;
pub const IDWriteFontSetBuilder = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddFontFaceReference_TODO_A: *const fn(
            self: *const IDWriteFontSetBuilder,
            fontFaceReference: ?*IDWriteFontFaceReference,
            properties: [*]const DWRITE_FONT_PROPERTY,
            propertyCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFontFaceReference_TODO_B: *const fn(
            self: *const IDWriteFontSetBuilder,
            fontFaceReference: ?*IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFontSet: *const fn(
            self: *const IDWriteFontSetBuilder,
            fontSet: ?*IDWriteFontSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontSet: *const fn(
            self: *const IDWriteFontSetBuilder,
            fontSet: **IDWriteFontSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub const AddFontFaceReference = @compileError("COM method 'AddFontFaceReference' must be called using one of the following overload names: AddFontFaceReference_TODO_A, AddFontFaceReference_TODO_B");
    pub fn AddFontFaceReference_TODO_A(self: *const IDWriteFontSetBuilder, fontFaceReference: ?*IDWriteFontFaceReference, properties: [*]const DWRITE_FONT_PROPERTY, propertyCount: u32) callconv(.Inline) HRESULT {
        return self.vtable.AddFontFaceReference_TODO_A(self, fontFaceReference, properties, propertyCount);
    }
    pub fn AddFontFaceReference_TODO_B(self: *const IDWriteFontSetBuilder, fontFaceReference: ?*IDWriteFontFaceReference) callconv(.Inline) HRESULT {
        return self.vtable.AddFontFaceReference_TODO_B(self, fontFaceReference);
    }
    pub fn AddFontSet(self: *const IDWriteFontSetBuilder, fontSet: ?*IDWriteFontSet) callconv(.Inline) HRESULT {
        return self.vtable.AddFontSet(self, fontSet);
    }
    pub fn CreateFontSet(self: *const IDWriteFontSetBuilder, fontSet: **IDWriteFontSet) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontSet(self, fontSet);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteFontCollection1_Value = Guid.initString("53585141-d9f8-4095-8321-d73cf6bd116c");
pub const IID_IDWriteFontCollection1 = &IID_IDWriteFontCollection1_Value;
pub const IDWriteFontCollection1 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFontCollection.VTable,
        GetFontSet: *const fn(
            self: *const IDWriteFontCollection1,
            fontSet: **IDWriteFontSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFamily: *const fn(
            self: *const IDWriteFontCollection1,
            index: u32,
            fontFamily: **IDWriteFontFamily1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteFontCollection: IDWriteFontCollection,
    IUnknown: IUnknown,
    pub fn GetFontSet(self: *const IDWriteFontCollection1, fontSet: **IDWriteFontSet) callconv(.Inline) HRESULT {
        return self.vtable.GetFontSet(self, fontSet);
    }
    pub fn GetFontFamily(self: *const IDWriteFontCollection1, index: u32, fontFamily: **IDWriteFontFamily1) callconv(.Inline) HRESULT {
        return self.vtable.GetFontFamily(self, index, fontFamily);
    }
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IDWriteFontFamily1_Value = Guid.initString("da20d8ef-812a-4c43-9802-62ec4abd7adf");
pub const IID_IDWriteFontFamily1 = &IID_IDWriteFontFamily1_Value;
pub const IDWriteFontFamily1 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFontFamily.VTable,
        GetFontLocality: *const fn(
            self: *const IDWriteFontFamily1,
            listIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_LOCALITY,
        GetFont: *const fn(
            self: *const IDWriteFontFamily1,
            listIndex: u32,
            font: **IDWriteFont3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFaceReference: *const fn(
            self: *const IDWriteFontFamily1,
            listIndex: u32,
            fontFaceReference: **IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteFontFamily: IDWriteFontFamily,
    IDWriteFontList: IDWriteFontList,
    IUnknown: IUnknown,
    pub fn GetFontLocality(self: *const IDWriteFontFamily1, listIndex: u32) callconv(.Inline) DWRITE_LOCALITY {
        return self.vtable.GetFontLocality(self, listIndex);
    }
    pub fn GetFont(self: *const IDWriteFontFamily1, listIndex: u32, font: **IDWriteFont3) callconv(.Inline) HRESULT {
        return self.vtable.GetFont(self, listIndex, font);
    }
    pub fn GetFontFaceReference(self: *const IDWriteFontFamily1, listIndex: u32, fontFaceReference: **IDWriteFontFaceReference) callconv(.Inline) HRESULT {
        return self.vtable.GetFontFaceReference(self, listIndex, fontFaceReference);
    }
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IDWriteFontList1_Value = Guid.initString("da20d8ef-812a-4c43-9802-62ec4abd7ade");
pub const IID_IDWriteFontList1 = &IID_IDWriteFontList1_Value;
pub const IDWriteFontList1 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFontList.VTable,
        GetFontLocality: *const fn(
            self: *const IDWriteFontList1,
            listIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_LOCALITY,
        GetFont: *const fn(
            self: *const IDWriteFontList1,
            listIndex: u32,
            font: **IDWriteFont3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFaceReference: *const fn(
            self: *const IDWriteFontList1,
            listIndex: u32,
            fontFaceReference: **IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteFontList: IDWriteFontList,
    IUnknown: IUnknown,
    pub fn GetFontLocality(self: *const IDWriteFontList1, listIndex: u32) callconv(.Inline) DWRITE_LOCALITY {
        return self.vtable.GetFontLocality(self, listIndex);
    }
    pub fn GetFont(self: *const IDWriteFontList1, listIndex: u32, font: **IDWriteFont3) callconv(.Inline) HRESULT {
        return self.vtable.GetFont(self, listIndex, font);
    }
    pub fn GetFontFaceReference(self: *const IDWriteFontList1, listIndex: u32, fontFaceReference: **IDWriteFontFaceReference) callconv(.Inline) HRESULT {
        return self.vtable.GetFontFaceReference(self, listIndex, fontFaceReference);
    }
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IDWriteFontFaceReference_Value = Guid.initString("5e7fa7ca-dde3-424c-89f0-9fcd6fed58cd");
pub const IID_IDWriteFontFaceReference = &IID_IDWriteFontFaceReference_Value;
pub const IDWriteFontFaceReference = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateFontFace: *const fn(
            self: *const IDWriteFontFaceReference,
            fontFace: **IDWriteFontFace3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontFaceWithSimulations: *const fn(
            self: *const IDWriteFontFaceReference,
            fontFaceSimulationFlags: DWRITE_FONT_SIMULATIONS,
            fontFace: **IDWriteFontFace3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Equals: *const fn(
            self: *const IDWriteFontFaceReference,
            fontFaceReference: ?*IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetFontFaceIndex: *const fn(
            self: *const IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetSimulations: *const fn(
            self: *const IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_SIMULATIONS,
        GetFontFile: *const fn(
            self: *const IDWriteFontFaceReference,
            fontFile: **IDWriteFontFile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocalFileSize: *const fn(
            self: *const IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) u64,
        GetFileSize: *const fn(
            self: *const IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) u64,
        GetFileTime: *const fn(
            self: *const IDWriteFontFaceReference,
            lastWriteTime: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocality: *const fn(
            self: *const IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_LOCALITY,
        EnqueueFontDownloadRequest: *const fn(
            self: *const IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnqueueCharacterDownloadRequest: *const fn(
            self: *const IDWriteFontFaceReference,
            characters: [*:0]const u16,
            characterCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnqueueGlyphDownloadRequest: *const fn(
            self: *const IDWriteFontFaceReference,
            glyphIndices: [*:0]const u16,
            glyphCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnqueueFileFragmentDownloadRequest: *const fn(
            self: *const IDWriteFontFaceReference,
            fileOffset: u64,
            fragmentSize: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateFontFace(self: *const IDWriteFontFaceReference, fontFace: **IDWriteFontFace3) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontFace(self, fontFace);
    }
    pub fn CreateFontFaceWithSimulations(self: *const IDWriteFontFaceReference, fontFaceSimulationFlags: DWRITE_FONT_SIMULATIONS, fontFace: **IDWriteFontFace3) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontFaceWithSimulations(self, fontFaceSimulationFlags, fontFace);
    }
    pub fn Equals(self: *const IDWriteFontFaceReference, fontFaceReference: ?*IDWriteFontFaceReference) callconv(.Inline) BOOL {
        return self.vtable.Equals(self, fontFaceReference);
    }
    pub fn GetFontFaceIndex(self: *const IDWriteFontFaceReference) callconv(.Inline) u32 {
        return self.vtable.GetFontFaceIndex(self);
    }
    pub fn GetSimulations(self: *const IDWriteFontFaceReference) callconv(.Inline) DWRITE_FONT_SIMULATIONS {
        return self.vtable.GetSimulations(self);
    }
    pub fn GetFontFile(self: *const IDWriteFontFaceReference, fontFile: **IDWriteFontFile) callconv(.Inline) HRESULT {
        return self.vtable.GetFontFile(self, fontFile);
    }
    pub fn GetLocalFileSize(self: *const IDWriteFontFaceReference) callconv(.Inline) u64 {
        return self.vtable.GetLocalFileSize(self);
    }
    pub fn GetFileSize(self: *const IDWriteFontFaceReference) callconv(.Inline) u64 {
        return self.vtable.GetFileSize(self);
    }
    pub fn GetFileTime(self: *const IDWriteFontFaceReference, lastWriteTime: ?*FILETIME) callconv(.Inline) HRESULT {
        return self.vtable.GetFileTime(self, lastWriteTime);
    }
    pub fn GetLocality(self: *const IDWriteFontFaceReference) callconv(.Inline) DWRITE_LOCALITY {
        return self.vtable.GetLocality(self);
    }
    pub fn EnqueueFontDownloadRequest(self: *const IDWriteFontFaceReference) callconv(.Inline) HRESULT {
        return self.vtable.EnqueueFontDownloadRequest(self);
    }
    pub fn EnqueueCharacterDownloadRequest(self: *const IDWriteFontFaceReference, characters: [*:0]const u16, characterCount: u32) callconv(.Inline) HRESULT {
        return self.vtable.EnqueueCharacterDownloadRequest(self, characters, characterCount);
    }
    pub fn EnqueueGlyphDownloadRequest(self: *const IDWriteFontFaceReference, glyphIndices: [*:0]const u16, glyphCount: u32) callconv(.Inline) HRESULT {
        return self.vtable.EnqueueGlyphDownloadRequest(self, glyphIndices, glyphCount);
    }
    pub fn EnqueueFileFragmentDownloadRequest(self: *const IDWriteFontFaceReference, fileOffset: u64, fragmentSize: u64) callconv(.Inline) HRESULT {
        return self.vtable.EnqueueFileFragmentDownloadRequest(self, fileOffset, fragmentSize);
    }
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IDWriteFont3_Value = Guid.initString("29748ed6-8c9c-4a6a-be0b-d912e8538944");
pub const IID_IDWriteFont3 = &IID_IDWriteFont3_Value;
pub const IDWriteFont3 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFont2.VTable,
        CreateFontFace: *const fn(
            self: *const IDWriteFont3,
            fontFace: **IDWriteFontFace3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Equals: *const fn(
            self: *const IDWriteFont3,
            font: ?*IDWriteFont,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetFontFaceReference: *const fn(
            self: *const IDWriteFont3,
            fontFaceReference: **IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasCharacter: *const fn(
            self: *const IDWriteFont3,
            unicodeValue: u32,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetLocality: *const fn(
            self: *const IDWriteFont3,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_LOCALITY,
    };
    vtable: *const VTable,
    IDWriteFont2: IDWriteFont2,
    IDWriteFont1: IDWriteFont1,
    IDWriteFont: IDWriteFont,
    IUnknown: IUnknown,
    pub fn CreateFontFace(self: *const IDWriteFont3, fontFace: **IDWriteFontFace3) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontFace(self, fontFace);
    }
    pub fn Equals(self: *const IDWriteFont3, font: ?*IDWriteFont) callconv(.Inline) BOOL {
        return self.vtable.Equals(self, font);
    }
    pub fn GetFontFaceReference(self: *const IDWriteFont3, fontFaceReference: **IDWriteFontFaceReference) callconv(.Inline) HRESULT {
        return self.vtable.GetFontFaceReference(self, fontFaceReference);
    }
    pub fn HasCharacter(self: *const IDWriteFont3, unicodeValue: u32) callconv(.Inline) BOOL {
        return self.vtable.HasCharacter(self, unicodeValue);
    }
    pub fn GetLocality(self: *const IDWriteFont3) callconv(.Inline) DWRITE_LOCALITY {
        return self.vtable.GetLocality(self);
    }
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IDWriteFontFace3_Value = Guid.initString("d37d7598-09be-4222-a236-2081341cc1f2");
pub const IID_IDWriteFontFace3 = &IID_IDWriteFontFace3_Value;
pub const IDWriteFontFace3 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFontFace2.VTable,
        GetFontFaceReference: *const fn(
            self: *const IDWriteFontFace3,
            fontFaceReference: **IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPanose: *const fn(
            self: *const IDWriteFontFace3,
            panose: ?*DWRITE_PANOSE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetWeight: *const fn(
            self: *const IDWriteFontFace3,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_WEIGHT,
        GetStretch: *const fn(
            self: *const IDWriteFontFace3,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_STRETCH,
        GetStyle: *const fn(
            self: *const IDWriteFontFace3,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_STYLE,
        GetFamilyNames: *const fn(
            self: *const IDWriteFontFace3,
            names: **IDWriteLocalizedStrings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFaceNames: *const fn(
            self: *const IDWriteFontFace3,
            names: **IDWriteLocalizedStrings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInformationalStrings: *const fn(
            self: *const IDWriteFontFace3,
            informationalStringID: DWRITE_INFORMATIONAL_STRING_ID,
            informationalStrings: ?**IDWriteLocalizedStrings,
            exists: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasCharacter: *const fn(
            self: *const IDWriteFontFace3,
            unicodeValue: u32,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetRecommendedRenderingMode: *const fn(
            self: *const IDWriteFontFace3,
            fontEmSize: f32,
            dpiX: f32,
            dpiY: f32,
            transform: ?*const DWRITE_MATRIX,
            isSideways: BOOL,
            outlineThreshold: DWRITE_OUTLINE_THRESHOLD,
            measuringMode: DWRITE_MEASURING_MODE,
            renderingParams: ?*IDWriteRenderingParams,
            renderingMode: ?*DWRITE_RENDERING_MODE1,
            gridFitMode: ?*DWRITE_GRID_FIT_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsCharacterLocal: *const fn(
            self: *const IDWriteFontFace3,
            unicodeValue: u32,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        IsGlyphLocal: *const fn(
            self: *const IDWriteFontFace3,
            glyphId: u16,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        AreCharactersLocal: *const fn(
            self: *const IDWriteFontFace3,
            characters: [*:0]const u16,
            characterCount: u32,
            enqueueIfNotLocal: BOOL,
            isLocal: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AreGlyphsLocal: *const fn(
            self: *const IDWriteFontFace3,
            glyphIndices: [*:0]const u16,
            glyphCount: u32,
            enqueueIfNotLocal: BOOL,
            isLocal: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteFontFace2: IDWriteFontFace2,
    IDWriteFontFace1: IDWriteFontFace1,
    IDWriteFontFace: IDWriteFontFace,
    IUnknown: IUnknown,
    pub fn GetFontFaceReference(self: *const IDWriteFontFace3, fontFaceReference: **IDWriteFontFaceReference) callconv(.Inline) HRESULT {
        return self.vtable.GetFontFaceReference(self, fontFaceReference);
    }
    pub fn GetPanose(self: *const IDWriteFontFace3, panose: ?*DWRITE_PANOSE) callconv(.Inline) void {
        return self.vtable.GetPanose(self, panose);
    }
    pub fn GetWeight(self: *const IDWriteFontFace3) callconv(.Inline) DWRITE_FONT_WEIGHT {
        return self.vtable.GetWeight(self);
    }
    pub fn GetStretch(self: *const IDWriteFontFace3) callconv(.Inline) DWRITE_FONT_STRETCH {
        return self.vtable.GetStretch(self);
    }
    pub fn GetStyle(self: *const IDWriteFontFace3) callconv(.Inline) DWRITE_FONT_STYLE {
        return self.vtable.GetStyle(self);
    }
    pub fn GetFamilyNames(self: *const IDWriteFontFace3, names: **IDWriteLocalizedStrings) callconv(.Inline) HRESULT {
        return self.vtable.GetFamilyNames(self, names);
    }
    pub fn GetFaceNames(self: *const IDWriteFontFace3, names: **IDWriteLocalizedStrings) callconv(.Inline) HRESULT {
        return self.vtable.GetFaceNames(self, names);
    }
    pub fn GetInformationalStrings(self: *const IDWriteFontFace3, informationalStringID: DWRITE_INFORMATIONAL_STRING_ID, informationalStrings: ?**IDWriteLocalizedStrings, exists: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.GetInformationalStrings(self, informationalStringID, informationalStrings, exists);
    }
    pub fn HasCharacter(self: *const IDWriteFontFace3, unicodeValue: u32) callconv(.Inline) BOOL {
        return self.vtable.HasCharacter(self, unicodeValue);
    }
    pub fn GetRecommendedRenderingMode(self: *const IDWriteFontFace3, fontEmSize: f32, dpiX: f32, dpiY: f32, transform: ?*const DWRITE_MATRIX, isSideways: BOOL, outlineThreshold: DWRITE_OUTLINE_THRESHOLD, measuringMode: DWRITE_MEASURING_MODE, renderingParams: ?*IDWriteRenderingParams, renderingMode: ?*DWRITE_RENDERING_MODE1, gridFitMode: ?*DWRITE_GRID_FIT_MODE) callconv(.Inline) HRESULT {
        return self.vtable.GetRecommendedRenderingMode(self, fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingParams, renderingMode, gridFitMode);
    }
    pub fn IsCharacterLocal(self: *const IDWriteFontFace3, unicodeValue: u32) callconv(.Inline) BOOL {
        return self.vtable.IsCharacterLocal(self, unicodeValue);
    }
    pub fn IsGlyphLocal(self: *const IDWriteFontFace3, glyphId: u16) callconv(.Inline) BOOL {
        return self.vtable.IsGlyphLocal(self, glyphId);
    }
    pub fn AreCharactersLocal(self: *const IDWriteFontFace3, characters: [*:0]const u16, characterCount: u32, enqueueIfNotLocal: BOOL, isLocal: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.AreCharactersLocal(self, characters, characterCount, enqueueIfNotLocal, isLocal);
    }
    pub fn AreGlyphsLocal(self: *const IDWriteFontFace3, glyphIndices: [*:0]const u16, glyphCount: u32, enqueueIfNotLocal: BOOL, isLocal: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.AreGlyphsLocal(self, glyphIndices, glyphCount, enqueueIfNotLocal, isLocal);
    }
};

const IID_IDWriteStringList_Value = Guid.initString("cfee3140-1157-47ca-8b85-31bfcf3f2d0e");
pub const IID_IDWriteStringList = &IID_IDWriteStringList_Value;
pub const IDWriteStringList = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn(
            self: *const IDWriteStringList,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetLocaleNameLength: *const fn(
            self: *const IDWriteStringList,
            listIndex: u32,
            length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocaleName: *const fn(
            self: *const IDWriteStringList,
            listIndex: u32,
            localeName: [*:0]u16,
            size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringLength: *const fn(
            self: *const IDWriteStringList,
            listIndex: u32,
            length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetString: *const fn(
            self: *const IDWriteStringList,
            listIndex: u32,
            stringBuffer: [*:0]u16,
            stringBufferSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetCount(self: *const IDWriteStringList) callconv(.Inline) u32 {
        return self.vtable.GetCount(self);
    }
    pub fn GetLocaleNameLength(self: *const IDWriteStringList, listIndex: u32, length: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetLocaleNameLength(self, listIndex, length);
    }
    pub fn GetLocaleName(self: *const IDWriteStringList, listIndex: u32, localeName: [*:0]u16, size: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetLocaleName(self, listIndex, localeName, size);
    }
    pub fn GetStringLength(self: *const IDWriteStringList, listIndex: u32, length: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetStringLength(self, listIndex, length);
    }
    pub fn GetString(self: *const IDWriteStringList, listIndex: u32, stringBuffer: [*:0]u16, stringBufferSize: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetString(self, listIndex, stringBuffer, stringBufferSize);
    }
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteFontDownloadListener_Value = Guid.initString("b06fe5b9-43ec-4393-881b-dbe4dc72fda7");
pub const IID_IDWriteFontDownloadListener = &IID_IDWriteFontDownloadListener_Value;
pub const IDWriteFontDownloadListener = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DownloadCompleted: *const fn(
            self: *const IDWriteFontDownloadListener,
            downloadQueue: ?*IDWriteFontDownloadQueue,
            context: ?*IUnknown,
            downloadResult: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn DownloadCompleted(self: *const IDWriteFontDownloadListener, downloadQueue: ?*IDWriteFontDownloadQueue, context: ?*IUnknown, downloadResult: HRESULT) callconv(.Inline) void {
        return self.vtable.DownloadCompleted(self, downloadQueue, context, downloadResult);
    }
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteFontDownloadQueue_Value = Guid.initString("b71e6052-5aea-4fa3-832e-f60d431f7e91");
pub const IID_IDWriteFontDownloadQueue = &IID_IDWriteFontDownloadQueue_Value;
pub const IDWriteFontDownloadQueue = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddListener: *const fn(
            self: *const IDWriteFontDownloadQueue,
            listener: ?*IDWriteFontDownloadListener,
            token: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveListener: *const fn(
            self: *const IDWriteFontDownloadQueue,
            token: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsEmpty: *const fn(
            self: *const IDWriteFontDownloadQueue,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        BeginDownload: *const fn(
            self: *const IDWriteFontDownloadQueue,
            context: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelDownload: *const fn(
            self: *const IDWriteFontDownloadQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGenerationCount: *const fn(
            self: *const IDWriteFontDownloadQueue,
        ) callconv(@import("std").os.windows.WINAPI) u64,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn AddListener(self: *const IDWriteFontDownloadQueue, listener: ?*IDWriteFontDownloadListener, token: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.AddListener(self, listener, token);
    }
    pub fn RemoveListener(self: *const IDWriteFontDownloadQueue, token: u32) callconv(.Inline) HRESULT {
        return self.vtable.RemoveListener(self, token);
    }
    pub fn IsEmpty(self: *const IDWriteFontDownloadQueue) callconv(.Inline) BOOL {
        return self.vtable.IsEmpty(self);
    }
    pub fn BeginDownload(self: *const IDWriteFontDownloadQueue, context: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.BeginDownload(self, context);
    }
    pub fn CancelDownload(self: *const IDWriteFontDownloadQueue) callconv(.Inline) HRESULT {
        return self.vtable.CancelDownload(self);
    }
    pub fn GetGenerationCount(self: *const IDWriteFontDownloadQueue) callconv(.Inline) u64 {
        return self.vtable.GetGenerationCount(self);
    }
};

const IID_IDWriteGdiInterop1_Value = Guid.initString("4556be70-3abd-4f70-90be-421780a6f515");
pub const IID_IDWriteGdiInterop1 = &IID_IDWriteGdiInterop1_Value;
pub const IDWriteGdiInterop1 = extern union {
    pub const VTable = extern struct {
        base: IDWriteGdiInterop.VTable,
        CreateFontFromLOGFONT: *const fn(
            self: *const IDWriteGdiInterop1,
            logFont: ?*const LOGFONTW,
            fontCollection: ?*IDWriteFontCollection,
            font: **IDWriteFont,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontSignature_TODO_A: *const fn(
            self: *const IDWriteGdiInterop1,
            fontFace: ?*IDWriteFontFace,
            fontSignature: ?*FONTSIGNATURE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontSignature_TODO_B: *const fn(
            self: *const IDWriteGdiInterop1,
            font: ?*IDWriteFont,
            fontSignature: ?*FONTSIGNATURE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMatchingFontsByLOGFONT: *const fn(
            self: *const IDWriteGdiInterop1,
            logFont: ?*const LOGFONTA,
            fontSet: ?*IDWriteFontSet,
            filteredSet: **IDWriteFontSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteGdiInterop: IDWriteGdiInterop,
    IUnknown: IUnknown,
    pub const GetFontSignature = @compileError("COM method 'GetFontSignature' must be called using one of the following overload names: GetFontSignature_TODO_B, GetFontSignature_TODO_A");
    pub fn CreateFontFromLOGFONT(self: *const IDWriteGdiInterop1, logFont: ?*const LOGFONTW, fontCollection: ?*IDWriteFontCollection, font: **IDWriteFont) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontFromLOGFONT(self, logFont, fontCollection, font);
    }
    pub fn GetFontSignature_TODO_A(self: *const IDWriteGdiInterop1, fontFace: ?*IDWriteFontFace, fontSignature: ?*FONTSIGNATURE) callconv(.Inline) HRESULT {
        return self.vtable.GetFontSignature_TODO_A(self, fontFace, fontSignature);
    }
    pub fn GetFontSignature_TODO_B(self: *const IDWriteGdiInterop1, font: ?*IDWriteFont, fontSignature: ?*FONTSIGNATURE) callconv(.Inline) HRESULT {
        return self.vtable.GetFontSignature_TODO_B(self, font, fontSignature);
    }
    pub fn GetMatchingFontsByLOGFONT(self: *const IDWriteGdiInterop1, logFont: ?*const LOGFONTA, fontSet: ?*IDWriteFontSet, filteredSet: **IDWriteFontSet) callconv(.Inline) HRESULT {
        return self.vtable.GetMatchingFontsByLOGFONT(self, logFont, fontSet, filteredSet);
    }
};

pub const DWRITE_LINE_METRICS1 = extern struct {
    Base: DWRITE_LINE_METRICS,
    leadingBefore: f32,
    leadingAfter: f32,
};

pub const DWRITE_FONT_LINE_GAP_USAGE = enum(i32) {
    DEFAULT = 0,
    DISABLED = 1,
    ENABLED = 2,
};
pub const DWRITE_FONT_LINE_GAP_USAGE_DEFAULT = DWRITE_FONT_LINE_GAP_USAGE.DEFAULT;
pub const DWRITE_FONT_LINE_GAP_USAGE_DISABLED = DWRITE_FONT_LINE_GAP_USAGE.DISABLED;
pub const DWRITE_FONT_LINE_GAP_USAGE_ENABLED = DWRITE_FONT_LINE_GAP_USAGE.ENABLED;

pub const DWRITE_LINE_SPACING = extern struct {
    method: DWRITE_LINE_SPACING_METHOD,
    height: f32,
    baseline: f32,
    leadingBefore: f32,
    fontLineGapUsage: DWRITE_FONT_LINE_GAP_USAGE,
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteTextFormat2_Value = Guid.initString("f67e0edd-9e3d-4ecc-8c32-4183253dfe70");
pub const IID_IDWriteTextFormat2 = &IID_IDWriteTextFormat2_Value;
pub const IDWriteTextFormat2 = extern union {
    pub const VTable = extern struct {
        base: IDWriteTextFormat1.VTable,
        SetLineSpacing: *const fn(
            self: *const IDWriteTextFormat2,
            lineSpacingOptions: ?*const DWRITE_LINE_SPACING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLineSpacing: *const fn(
            self: *const IDWriteTextFormat2,
            lineSpacingOptions: ?*DWRITE_LINE_SPACING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteTextFormat1: IDWriteTextFormat1,
    IDWriteTextFormat: IDWriteTextFormat,
    IUnknown: IUnknown,
    pub fn SetLineSpacing(self: *const IDWriteTextFormat2, lineSpacingOptions: ?*const DWRITE_LINE_SPACING) callconv(.Inline) HRESULT {
        return self.vtable.SetLineSpacing(self, lineSpacingOptions);
    }
    pub fn GetLineSpacing(self: *const IDWriteTextFormat2, lineSpacingOptions: ?*DWRITE_LINE_SPACING) callconv(.Inline) HRESULT {
        return self.vtable.GetLineSpacing(self, lineSpacingOptions);
    }
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteTextLayout3_Value = Guid.initString("07ddcd52-020e-4de8-ac33-6c953d83f92d");
pub const IID_IDWriteTextLayout3 = &IID_IDWriteTextLayout3_Value;
pub const IDWriteTextLayout3 = extern union {
    pub const VTable = extern struct {
        base: IDWriteTextLayout2.VTable,
        InvalidateLayout: *const fn(
            self: *const IDWriteTextLayout3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLineSpacing: *const fn(
            self: *const IDWriteTextLayout3,
            lineSpacingOptions: ?*const DWRITE_LINE_SPACING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLineSpacing: *const fn(
            self: *const IDWriteTextLayout3,
            lineSpacingOptions: ?*DWRITE_LINE_SPACING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLineMetrics: *const fn(
            self: *const IDWriteTextLayout3,
            lineMetrics: ?[*]DWRITE_LINE_METRICS1,
            maxLineCount: u32,
            actualLineCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteTextLayout2: IDWriteTextLayout2,
    IDWriteTextLayout1: IDWriteTextLayout1,
    IDWriteTextLayout: IDWriteTextLayout,
    IDWriteTextFormat: IDWriteTextFormat,
    IUnknown: IUnknown,
    pub fn InvalidateLayout(self: *const IDWriteTextLayout3) callconv(.Inline) HRESULT {
        return self.vtable.InvalidateLayout(self);
    }
    pub fn SetLineSpacing(self: *const IDWriteTextLayout3, lineSpacingOptions: ?*const DWRITE_LINE_SPACING) callconv(.Inline) HRESULT {
        return self.vtable.SetLineSpacing(self, lineSpacingOptions);
    }
    pub fn GetLineSpacing(self: *const IDWriteTextLayout3, lineSpacingOptions: ?*DWRITE_LINE_SPACING) callconv(.Inline) HRESULT {
        return self.vtable.GetLineSpacing(self, lineSpacingOptions);
    }
    pub fn GetLineMetrics(self: *const IDWriteTextLayout3, lineMetrics: ?[*]DWRITE_LINE_METRICS1, maxLineCount: u32, actualLineCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetLineMetrics(self, lineMetrics, maxLineCount, actualLineCount);
    }
};

pub const DWRITE_COLOR_GLYPH_RUN1 = extern struct {
    Base: DWRITE_COLOR_GLYPH_RUN,
    glyphImageFormat: DWRITE_GLYPH_IMAGE_FORMATS,
    measuringMode: DWRITE_MEASURING_MODE,
};

pub const DWRITE_GLYPH_IMAGE_DATA = extern struct {
    imageData: ?*const anyopaque,
    imageDataSize: u32,
    uniqueDataId: u32,
    pixelsPerEm: u32,
    pixelSize: D2D_SIZE_U,
    horizontalLeftOrigin: POINT,
    horizontalRightOrigin: POINT,
    verticalTopOrigin: POINT,
    verticalBottomOrigin: POINT,
};

const IID_IDWriteColorGlyphRunEnumerator1_Value = Guid.initString("7c5f86da-c7a1-4f05-b8e1-55a179fe5a35");
pub const IID_IDWriteColorGlyphRunEnumerator1 = &IID_IDWriteColorGlyphRunEnumerator1_Value;
pub const IDWriteColorGlyphRunEnumerator1 = extern union {
    pub const VTable = extern struct {
        base: IDWriteColorGlyphRunEnumerator.VTable,
        GetCurrentRun: *const fn(
            self: *const IDWriteColorGlyphRunEnumerator1,
            colorGlyphRun: ?*const ?*DWRITE_COLOR_GLYPH_RUN1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteColorGlyphRunEnumerator: IDWriteColorGlyphRunEnumerator,
    IUnknown: IUnknown,
    pub fn GetCurrentRun(self: *const IDWriteColorGlyphRunEnumerator1, colorGlyphRun: ?*const ?*DWRITE_COLOR_GLYPH_RUN1) callconv(.Inline) HRESULT {
        return self.vtable.GetCurrentRun(self, colorGlyphRun);
    }
};

const IID_IDWriteFontFace4_Value = Guid.initString("27f2a904-4eb8-441d-9678-0563f53e3e2f");
pub const IID_IDWriteFontFace4 = &IID_IDWriteFontFace4_Value;
pub const IDWriteFontFace4 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFontFace3.VTable,
        GetGlyphImageFormats_TODO_A: *const fn(
            self: *const IDWriteFontFace4,
            glyphId: u16,
            pixelsPerEmFirst: u32,
            pixelsPerEmLast: u32,
            glyphImageFormats: ?*DWRITE_GLYPH_IMAGE_FORMATS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphImageFormats_TODO_B: *const fn(
            self: *const IDWriteFontFace4,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_GLYPH_IMAGE_FORMATS,
        GetGlyphImageData: *const fn(
            self: *const IDWriteFontFace4,
            glyphId: u16,
            pixelsPerEm: u32,
            glyphImageFormat: DWRITE_GLYPH_IMAGE_FORMATS,
            glyphData: ?*DWRITE_GLYPH_IMAGE_DATA,
            glyphDataContext: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseGlyphImageData: *const fn(
            self: *const IDWriteFontFace4,
            glyphDataContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    IDWriteFontFace3: IDWriteFontFace3,
    IDWriteFontFace2: IDWriteFontFace2,
    IDWriteFontFace1: IDWriteFontFace1,
    IDWriteFontFace: IDWriteFontFace,
    IUnknown: IUnknown,
    pub const GetGlyphImageFormats = @compileError("COM method 'GetGlyphImageFormats' must be called using one of the following overload names: GetGlyphImageFormats_TODO_A, GetGlyphImageFormats_TODO_B");
    pub fn GetGlyphImageFormats_TODO_A(self: *const IDWriteFontFace4, glyphId: u16, pixelsPerEmFirst: u32, pixelsPerEmLast: u32, glyphImageFormats: ?*DWRITE_GLYPH_IMAGE_FORMATS) callconv(.Inline) HRESULT {
        return self.vtable.GetGlyphImageFormats_TODO_A(self, glyphId, pixelsPerEmFirst, pixelsPerEmLast, glyphImageFormats);
    }
    pub fn GetGlyphImageFormats_TODO_B(self: *const IDWriteFontFace4) callconv(.Inline) DWRITE_GLYPH_IMAGE_FORMATS {
        return self.vtable.GetGlyphImageFormats_TODO_B(self);
    }
    pub fn GetGlyphImageData(self: *const IDWriteFontFace4, glyphId: u16, pixelsPerEm: u32, glyphImageFormat: DWRITE_GLYPH_IMAGE_FORMATS, glyphData: ?*DWRITE_GLYPH_IMAGE_DATA, glyphDataContext: ?*?*anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.GetGlyphImageData(self, glyphId, pixelsPerEm, glyphImageFormat, glyphData, glyphDataContext);
    }
    pub fn ReleaseGlyphImageData(self: *const IDWriteFontFace4, glyphDataContext: ?*anyopaque) callconv(.Inline) void {
        return self.vtable.ReleaseGlyphImageData(self, glyphDataContext);
    }
};

const IID_IDWriteFactory4_Value = Guid.initString("4b0b5bd3-0797-4549-8ac5-fe915cc53856");
pub const IID_IDWriteFactory4 = &IID_IDWriteFactory4_Value;
pub const IDWriteFactory4 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFactory3.VTable,
        TranslateColorGlyphRun: *const fn(
            self: *const IDWriteFactory4,
            baselineOrigin: D2D_POINT_2F,
            glyphRun: ?*const DWRITE_GLYPH_RUN,
            glyphRunDescription: ?*const DWRITE_GLYPH_RUN_DESCRIPTION,
            desiredGlyphImageFormats: DWRITE_GLYPH_IMAGE_FORMATS,
            measuringMode: DWRITE_MEASURING_MODE,
            worldAndDpiTransform: ?*const DWRITE_MATRIX,
            colorPaletteIndex: u32,
            colorLayers: **IDWriteColorGlyphRunEnumerator1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ComputeGlyphOrigins_TODO_A: *const fn(
            self: *const IDWriteFactory4,
            glyphRun: ?*const DWRITE_GLYPH_RUN,
            baselineOrigin: D2D_POINT_2F,
            glyphOrigins: ?*D2D_POINT_2F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ComputeGlyphOrigins_TODO_B: *const fn(
            self: *const IDWriteFactory4,
            glyphRun: ?*const DWRITE_GLYPH_RUN,
            measuringMode: DWRITE_MEASURING_MODE,
            baselineOrigin: D2D_POINT_2F,
            worldAndDpiTransform: ?*const DWRITE_MATRIX,
            glyphOrigins: ?*D2D_POINT_2F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteFactory3: IDWriteFactory3,
    IDWriteFactory2: IDWriteFactory2,
    IDWriteFactory1: IDWriteFactory1,
    IDWriteFactory: IDWriteFactory,
    IUnknown: IUnknown,
    pub const ComputeGlyphOrigins = @compileError("COM method 'ComputeGlyphOrigins' must be called using one of the following overload names: ComputeGlyphOrigins_TODO_B, ComputeGlyphOrigins_TODO_A");
    pub fn TranslateColorGlyphRun(self: *const IDWriteFactory4, baselineOrigin: D2D_POINT_2F, glyphRun: ?*const DWRITE_GLYPH_RUN, glyphRunDescription: ?*const DWRITE_GLYPH_RUN_DESCRIPTION, desiredGlyphImageFormats: DWRITE_GLYPH_IMAGE_FORMATS, measuringMode: DWRITE_MEASURING_MODE, worldAndDpiTransform: ?*const DWRITE_MATRIX, colorPaletteIndex: u32, colorLayers: **IDWriteColorGlyphRunEnumerator1) callconv(.Inline) HRESULT {
        return self.vtable.TranslateColorGlyphRun(self, baselineOrigin, glyphRun, glyphRunDescription, desiredGlyphImageFormats, measuringMode, worldAndDpiTransform, colorPaletteIndex, colorLayers);
    }
    pub fn ComputeGlyphOrigins_TODO_A(self: *const IDWriteFactory4, glyphRun: ?*const DWRITE_GLYPH_RUN, baselineOrigin: D2D_POINT_2F, glyphOrigins: ?*D2D_POINT_2F) callconv(.Inline) HRESULT {
        return self.vtable.ComputeGlyphOrigins_TODO_A(self, glyphRun, baselineOrigin, glyphOrigins);
    }
    pub fn ComputeGlyphOrigins_TODO_B(self: *const IDWriteFactory4, glyphRun: ?*const DWRITE_GLYPH_RUN, measuringMode: DWRITE_MEASURING_MODE, baselineOrigin: D2D_POINT_2F, worldAndDpiTransform: ?*const DWRITE_MATRIX, glyphOrigins: ?*D2D_POINT_2F) callconv(.Inline) HRESULT {
        return self.vtable.ComputeGlyphOrigins_TODO_B(self, glyphRun, measuringMode, baselineOrigin, worldAndDpiTransform, glyphOrigins);
    }
};

const IID_IDWriteFontSetBuilder1_Value = Guid.initString("3ff7715f-3cdc-4dc6-9b72-ec5621dccafd");
pub const IID_IDWriteFontSetBuilder1 = &IID_IDWriteFontSetBuilder1_Value;
pub const IDWriteFontSetBuilder1 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFontSetBuilder.VTable,
        AddFontFile: *const fn(
            self: *const IDWriteFontSetBuilder1,
            fontFile: ?*IDWriteFontFile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteFontSetBuilder: IDWriteFontSetBuilder,
    IUnknown: IUnknown,
    pub fn AddFontFile(self: *const IDWriteFontSetBuilder1, fontFile: ?*IDWriteFontFile) callconv(.Inline) HRESULT {
        return self.vtable.AddFontFile(self, fontFile);
    }
};

const IID_IDWriteAsyncResult_Value = Guid.initString("ce25f8fd-863b-4d13-9651-c1f88dc73fe2");
pub const IID_IDWriteAsyncResult = &IID_IDWriteAsyncResult_Value;
pub const IDWriteAsyncResult = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetWaitHandle: *const fn(
            self: *const IDWriteAsyncResult,
        ) callconv(@import("std").os.windows.WINAPI) ?HANDLE,
        GetResult: *const fn(
            self: *const IDWriteAsyncResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetWaitHandle(self: *const IDWriteAsyncResult) callconv(.Inline) ?HANDLE {
        return self.vtable.GetWaitHandle(self);
    }
    pub fn GetResult(self: *const IDWriteAsyncResult) callconv(.Inline) HRESULT {
        return self.vtable.GetResult(self);
    }
};

pub const DWRITE_FILE_FRAGMENT = extern struct {
    fileOffset: u64,
    fragmentSize: u64,
};

const IID_IDWriteRemoteFontFileStream_Value = Guid.initString("4db3757a-2c72-4ed9-b2b6-1ababe1aff9c");
pub const IID_IDWriteRemoteFontFileStream = &IID_IDWriteRemoteFontFileStream_Value;
pub const IDWriteRemoteFontFileStream = extern union {
    pub const VTable = extern struct {
        base: IDWriteFontFileStream.VTable,
        GetLocalFileSize: *const fn(
            self: *const IDWriteRemoteFontFileStream,
            localFileSize: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileFragmentLocality: *const fn(
            self: *const IDWriteRemoteFontFileStream,
            fileOffset: u64,
            fragmentSize: u64,
            isLocal: ?*BOOL,
            partialSize: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocality: *const fn(
            self: *const IDWriteRemoteFontFileStream,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_LOCALITY,
        BeginDownload: *const fn(
            self: *const IDWriteRemoteFontFileStream,
            downloadOperationID: ?*const Guid,
            fileFragments: [*]const DWRITE_FILE_FRAGMENT,
            fragmentCount: u32,
            asyncResult: ?**IDWriteAsyncResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteFontFileStream: IDWriteFontFileStream,
    IUnknown: IUnknown,
    pub fn GetLocalFileSize(self: *const IDWriteRemoteFontFileStream, localFileSize: ?*u64) callconv(.Inline) HRESULT {
        return self.vtable.GetLocalFileSize(self, localFileSize);
    }
    pub fn GetFileFragmentLocality(self: *const IDWriteRemoteFontFileStream, fileOffset: u64, fragmentSize: u64, isLocal: ?*BOOL, partialSize: ?*u64) callconv(.Inline) HRESULT {
        return self.vtable.GetFileFragmentLocality(self, fileOffset, fragmentSize, isLocal, partialSize);
    }
    pub fn GetLocality(self: *const IDWriteRemoteFontFileStream) callconv(.Inline) DWRITE_LOCALITY {
        return self.vtable.GetLocality(self);
    }
    pub fn BeginDownload(self: *const IDWriteRemoteFontFileStream, downloadOperationID: ?*const Guid, fileFragments: [*]const DWRITE_FILE_FRAGMENT, fragmentCount: u32, asyncResult: ?**IDWriteAsyncResult) callconv(.Inline) HRESULT {
        return self.vtable.BeginDownload(self, downloadOperationID, fileFragments, fragmentCount, asyncResult);
    }
};

pub const DWRITE_CONTAINER_TYPE = enum(i32) {
    UNKNOWN = 0,
    WOFF = 1,
    WOFF2 = 2,
};
pub const DWRITE_CONTAINER_TYPE_UNKNOWN = DWRITE_CONTAINER_TYPE.UNKNOWN;
pub const DWRITE_CONTAINER_TYPE_WOFF = DWRITE_CONTAINER_TYPE.WOFF;
pub const DWRITE_CONTAINER_TYPE_WOFF2 = DWRITE_CONTAINER_TYPE.WOFF2;

const IID_IDWriteRemoteFontFileLoader_Value = Guid.initString("68648c83-6ede-46c0-ab46-20083a887fde");
pub const IID_IDWriteRemoteFontFileLoader = &IID_IDWriteRemoteFontFileLoader_Value;
pub const IDWriteRemoteFontFileLoader = extern union {
    pub const VTable = extern struct {
        base: IDWriteFontFileLoader.VTable,
        CreateRemoteStreamFromKey: *const fn(
            self: *const IDWriteRemoteFontFileLoader,
            // TODO: what to do with BytesParamIndex 1?
            fontFileReferenceKey: ?*const anyopaque,
            fontFileReferenceKeySize: u32,
            fontFileStream: **IDWriteRemoteFontFileStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocalityFromKey: *const fn(
            self: *const IDWriteRemoteFontFileLoader,
            // TODO: what to do with BytesParamIndex 1?
            fontFileReferenceKey: ?*const anyopaque,
            fontFileReferenceKeySize: u32,
            locality: ?*DWRITE_LOCALITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontFileReferenceFromUrl: *const fn(
            self: *const IDWriteRemoteFontFileLoader,
            factory: ?*IDWriteFactory,
            baseUrl: ?[*:0]const u16,
            fontFileUrl: ?[*:0]const u16,
            fontFile: **IDWriteFontFile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteFontFileLoader: IDWriteFontFileLoader,
    IUnknown: IUnknown,
    pub fn CreateRemoteStreamFromKey(self: *const IDWriteRemoteFontFileLoader, fontFileReferenceKey: ?*const anyopaque, fontFileReferenceKeySize: u32, fontFileStream: **IDWriteRemoteFontFileStream) callconv(.Inline) HRESULT {
        return self.vtable.CreateRemoteStreamFromKey(self, fontFileReferenceKey, fontFileReferenceKeySize, fontFileStream);
    }
    pub fn GetLocalityFromKey(self: *const IDWriteRemoteFontFileLoader, fontFileReferenceKey: ?*const anyopaque, fontFileReferenceKeySize: u32, locality: ?*DWRITE_LOCALITY) callconv(.Inline) HRESULT {
        return self.vtable.GetLocalityFromKey(self, fontFileReferenceKey, fontFileReferenceKeySize, locality);
    }
    pub fn CreateFontFileReferenceFromUrl(self: *const IDWriteRemoteFontFileLoader, factory: ?*IDWriteFactory, baseUrl: ?[*:0]const u16, fontFileUrl: ?[*:0]const u16, fontFile: **IDWriteFontFile) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontFileReferenceFromUrl(self, factory, baseUrl, fontFileUrl, fontFile);
    }
};

const IID_IDWriteInMemoryFontFileLoader_Value = Guid.initString("dc102f47-a12d-4b1c-822d-9e117e33043f");
pub const IID_IDWriteInMemoryFontFileLoader = &IID_IDWriteInMemoryFontFileLoader_Value;
pub const IDWriteInMemoryFontFileLoader = extern union {
    pub const VTable = extern struct {
        base: IDWriteFontFileLoader.VTable,
        CreateInMemoryFontFileReference: *const fn(
            self: *const IDWriteInMemoryFontFileLoader,
            factory: ?*IDWriteFactory,
            // TODO: what to do with BytesParamIndex 2?
            fontData: ?*const anyopaque,
            fontDataSize: u32,
            ownerObject: ?*IUnknown,
            fontFile: **IDWriteFontFile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileCount: *const fn(
            self: *const IDWriteInMemoryFontFileLoader,
        ) callconv(@import("std").os.windows.WINAPI) u32,
    };
    vtable: *const VTable,
    IDWriteFontFileLoader: IDWriteFontFileLoader,
    IUnknown: IUnknown,
    pub fn CreateInMemoryFontFileReference(self: *const IDWriteInMemoryFontFileLoader, factory: ?*IDWriteFactory, fontData: ?*const anyopaque, fontDataSize: u32, ownerObject: ?*IUnknown, fontFile: **IDWriteFontFile) callconv(.Inline) HRESULT {
        return self.vtable.CreateInMemoryFontFileReference(self, factory, fontData, fontDataSize, ownerObject, fontFile);
    }
    pub fn GetFileCount(self: *const IDWriteInMemoryFontFileLoader) callconv(.Inline) u32 {
        return self.vtable.GetFileCount(self);
    }
};

const IID_IDWriteFactory5_Value = Guid.initString("958db99a-be2a-4f09-af7d-65189803d1d3");
pub const IID_IDWriteFactory5 = &IID_IDWriteFactory5_Value;
pub const IDWriteFactory5 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFactory4.VTable,
        CreateFontSetBuilder: *const fn(
            self: *const IDWriteFactory5,
            fontSetBuilder: **IDWriteFontSetBuilder1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInMemoryFontFileLoader: *const fn(
            self: *const IDWriteFactory5,
            newLoader: **IDWriteInMemoryFontFileLoader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateHttpFontFileLoader: *const fn(
            self: *const IDWriteFactory5,
            referrerUrl: ?[*:0]const u16,
            extraHeaders: ?[*:0]const u16,
            newLoader: **IDWriteRemoteFontFileLoader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AnalyzeContainerType: *const fn(
            self: *const IDWriteFactory5,
            // TODO: what to do with BytesParamIndex 1?
            fileData: ?*const anyopaque,
            fileDataSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_CONTAINER_TYPE,
        UnpackFontFile: *const fn(
            self: *const IDWriteFactory5,
            containerType: DWRITE_CONTAINER_TYPE,
            // TODO: what to do with BytesParamIndex 2?
            fileData: ?*const anyopaque,
            fileDataSize: u32,
            unpackedFontStream: **IDWriteFontFileStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteFactory4: IDWriteFactory4,
    IDWriteFactory3: IDWriteFactory3,
    IDWriteFactory2: IDWriteFactory2,
    IDWriteFactory1: IDWriteFactory1,
    IDWriteFactory: IDWriteFactory,
    IUnknown: IUnknown,
    pub fn CreateFontSetBuilder(self: *const IDWriteFactory5, fontSetBuilder: **IDWriteFontSetBuilder1) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontSetBuilder(self, fontSetBuilder);
    }
    pub fn CreateInMemoryFontFileLoader(self: *const IDWriteFactory5, newLoader: **IDWriteInMemoryFontFileLoader) callconv(.Inline) HRESULT {
        return self.vtable.CreateInMemoryFontFileLoader(self, newLoader);
    }
    pub fn CreateHttpFontFileLoader(self: *const IDWriteFactory5, referrerUrl: ?[*:0]const u16, extraHeaders: ?[*:0]const u16, newLoader: **IDWriteRemoteFontFileLoader) callconv(.Inline) HRESULT {
        return self.vtable.CreateHttpFontFileLoader(self, referrerUrl, extraHeaders, newLoader);
    }
    pub fn AnalyzeContainerType(self: *const IDWriteFactory5, fileData: ?*const anyopaque, fileDataSize: u32) callconv(.Inline) DWRITE_CONTAINER_TYPE {
        return self.vtable.AnalyzeContainerType(self, fileData, fileDataSize);
    }
    pub fn UnpackFontFile(self: *const IDWriteFactory5, containerType: DWRITE_CONTAINER_TYPE, fileData: ?*const anyopaque, fileDataSize: u32, unpackedFontStream: **IDWriteFontFileStream) callconv(.Inline) HRESULT {
        return self.vtable.UnpackFontFile(self, containerType, fileData, fileDataSize, unpackedFontStream);
    }
};

pub const DWRITE_FONT_AXIS_VALUE = extern struct {
    axisTag: DWRITE_FONT_AXIS_TAG,
    value: f32,
};

pub const DWRITE_FONT_AXIS_RANGE = extern struct {
    axisTag: DWRITE_FONT_AXIS_TAG,
    minValue: f32,
    maxValue: f32,
};

pub const DWRITE_FONT_FAMILY_MODEL = enum(i32) {
    TYPOGRAPHIC = 0,
    WEIGHT_STRETCH_STYLE = 1,
};
pub const DWRITE_FONT_FAMILY_MODEL_TYPOGRAPHIC = DWRITE_FONT_FAMILY_MODEL.TYPOGRAPHIC;
pub const DWRITE_FONT_FAMILY_MODEL_WEIGHT_STRETCH_STYLE = DWRITE_FONT_FAMILY_MODEL.WEIGHT_STRETCH_STYLE;

pub const DWRITE_AUTOMATIC_FONT_AXES = packed struct(u32) {
    OPTICAL_SIZE: u1 = 0,
    _1: u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const DWRITE_AUTOMATIC_FONT_AXES_NONE = DWRITE_AUTOMATIC_FONT_AXES{ };
pub const DWRITE_AUTOMATIC_FONT_AXES_OPTICAL_SIZE = DWRITE_AUTOMATIC_FONT_AXES{ .OPTICAL_SIZE = 1 };

pub const DWRITE_FONT_AXIS_ATTRIBUTES = packed struct(u32) {
    VARIABLE: u1 = 0,
    HIDDEN: u1 = 0,
    _2: u1 = 0,
    _3: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const DWRITE_FONT_AXIS_ATTRIBUTES_NONE = DWRITE_FONT_AXIS_ATTRIBUTES{ };
pub const DWRITE_FONT_AXIS_ATTRIBUTES_VARIABLE = DWRITE_FONT_AXIS_ATTRIBUTES{ .VARIABLE = 1 };
pub const DWRITE_FONT_AXIS_ATTRIBUTES_HIDDEN = DWRITE_FONT_AXIS_ATTRIBUTES{ .HIDDEN = 1 };

const IID_IDWriteFactory6_Value = Guid.initString("f3744d80-21f7-42eb-b35d-995bc72fc223");
pub const IID_IDWriteFactory6 = &IID_IDWriteFactory6_Value;
pub const IDWriteFactory6 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFactory5.VTable,
        CreateFontFaceReference: *const fn(
            self: *const IDWriteFactory6,
            fontFile: ?*IDWriteFontFile,
            faceIndex: u32,
            fontSimulations: DWRITE_FONT_SIMULATIONS,
            fontAxisValues: [*]const DWRITE_FONT_AXIS_VALUE,
            fontAxisValueCount: u32,
            fontFaceReference: **IDWriteFontFaceReference1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontResource: *const fn(
            self: *const IDWriteFactory6,
            fontFile: ?*IDWriteFontFile,
            faceIndex: u32,
            fontResource: **IDWriteFontResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSystemFontSet: *const fn(
            self: *const IDWriteFactory6,
            includeDownloadableFonts: BOOL,
            fontSet: **IDWriteFontSet1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSystemFontCollection: *const fn(
            self: *const IDWriteFactory6,
            includeDownloadableFonts: BOOL,
            fontFamilyModel: DWRITE_FONT_FAMILY_MODEL,
            fontCollection: **IDWriteFontCollection2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontCollectionFromFontSet: *const fn(
            self: *const IDWriteFactory6,
            fontSet: ?*IDWriteFontSet,
            fontFamilyModel: DWRITE_FONT_FAMILY_MODEL,
            fontCollection: **IDWriteFontCollection2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontSetBuilder: *const fn(
            self: *const IDWriteFactory6,
            fontSetBuilder: **IDWriteFontSetBuilder2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTextFormat: *const fn(
            self: *const IDWriteFactory6,
            fontFamilyName: ?[*:0]const u16,
            fontCollection: ?*IDWriteFontCollection,
            fontAxisValues: [*]const DWRITE_FONT_AXIS_VALUE,
            fontAxisValueCount: u32,
            fontSize: f32,
            localeName: ?[*:0]const u16,
            textFormat: **IDWriteTextFormat3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteFactory5: IDWriteFactory5,
    IDWriteFactory4: IDWriteFactory4,
    IDWriteFactory3: IDWriteFactory3,
    IDWriteFactory2: IDWriteFactory2,
    IDWriteFactory1: IDWriteFactory1,
    IDWriteFactory: IDWriteFactory,
    IUnknown: IUnknown,
    pub fn CreateFontFaceReference(self: *const IDWriteFactory6, fontFile: ?*IDWriteFontFile, faceIndex: u32, fontSimulations: DWRITE_FONT_SIMULATIONS, fontAxisValues: [*]const DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32, fontFaceReference: **IDWriteFontFaceReference1) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontFaceReference(self, fontFile, faceIndex, fontSimulations, fontAxisValues, fontAxisValueCount, fontFaceReference);
    }
    pub fn CreateFontResource(self: *const IDWriteFactory6, fontFile: ?*IDWriteFontFile, faceIndex: u32, fontResource: **IDWriteFontResource) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontResource(self, fontFile, faceIndex, fontResource);
    }
    pub fn GetSystemFontSet(self: *const IDWriteFactory6, includeDownloadableFonts: BOOL, fontSet: **IDWriteFontSet1) callconv(.Inline) HRESULT {
        return self.vtable.GetSystemFontSet(self, includeDownloadableFonts, fontSet);
    }
    pub fn GetSystemFontCollection(self: *const IDWriteFactory6, includeDownloadableFonts: BOOL, fontFamilyModel: DWRITE_FONT_FAMILY_MODEL, fontCollection: **IDWriteFontCollection2) callconv(.Inline) HRESULT {
        return self.vtable.GetSystemFontCollection(self, includeDownloadableFonts, fontFamilyModel, fontCollection);
    }
    pub fn CreateFontCollectionFromFontSet(self: *const IDWriteFactory6, fontSet: ?*IDWriteFontSet, fontFamilyModel: DWRITE_FONT_FAMILY_MODEL, fontCollection: **IDWriteFontCollection2) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontCollectionFromFontSet(self, fontSet, fontFamilyModel, fontCollection);
    }
    pub fn CreateFontSetBuilder(self: *const IDWriteFactory6, fontSetBuilder: **IDWriteFontSetBuilder2) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontSetBuilder(self, fontSetBuilder);
    }
    pub fn CreateTextFormat(self: *const IDWriteFactory6, fontFamilyName: ?[*:0]const u16, fontCollection: ?*IDWriteFontCollection, fontAxisValues: [*]const DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32, fontSize: f32, localeName: ?[*:0]const u16, textFormat: **IDWriteTextFormat3) callconv(.Inline) HRESULT {
        return self.vtable.CreateTextFormat(self, fontFamilyName, fontCollection, fontAxisValues, fontAxisValueCount, fontSize, localeName, textFormat);
    }
};

const IID_IDWriteFontFace5_Value = Guid.initString("98eff3a5-b667-479a-b145-e2fa5b9fdc29");
pub const IID_IDWriteFontFace5 = &IID_IDWriteFontFace5_Value;
pub const IDWriteFontFace5 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFontFace4.VTable,
        GetFontAxisValueCount: *const fn(
            self: *const IDWriteFontFace5,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetFontAxisValues: *const fn(
            self: *const IDWriteFontFace5,
            fontAxisValues: [*]DWRITE_FONT_AXIS_VALUE,
            fontAxisValueCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasVariations: *const fn(
            self: *const IDWriteFontFace5,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetFontResource: *const fn(
            self: *const IDWriteFontFace5,
            fontResource: **IDWriteFontResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Equals: *const fn(
            self: *const IDWriteFontFace5,
            fontFace: ?*IDWriteFontFace,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
    };
    vtable: *const VTable,
    IDWriteFontFace4: IDWriteFontFace4,
    IDWriteFontFace3: IDWriteFontFace3,
    IDWriteFontFace2: IDWriteFontFace2,
    IDWriteFontFace1: IDWriteFontFace1,
    IDWriteFontFace: IDWriteFontFace,
    IUnknown: IUnknown,
    pub fn GetFontAxisValueCount(self: *const IDWriteFontFace5) callconv(.Inline) u32 {
        return self.vtable.GetFontAxisValueCount(self);
    }
    pub fn GetFontAxisValues(self: *const IDWriteFontFace5, fontAxisValues: [*]DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetFontAxisValues(self, fontAxisValues, fontAxisValueCount);
    }
    pub fn HasVariations(self: *const IDWriteFontFace5) callconv(.Inline) BOOL {
        return self.vtable.HasVariations(self);
    }
    pub fn GetFontResource(self: *const IDWriteFontFace5, fontResource: **IDWriteFontResource) callconv(.Inline) HRESULT {
        return self.vtable.GetFontResource(self, fontResource);
    }
    pub fn Equals(self: *const IDWriteFontFace5, fontFace: ?*IDWriteFontFace) callconv(.Inline) BOOL {
        return self.vtable.Equals(self, fontFace);
    }
};

const IID_IDWriteFontResource_Value = Guid.initString("1f803a76-6871-48e8-987f-b975551c50f2");
pub const IID_IDWriteFontResource = &IID_IDWriteFontResource_Value;
pub const IDWriteFontResource = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFontFile: *const fn(
            self: *const IDWriteFontResource,
            fontFile: **IDWriteFontFile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFaceIndex: *const fn(
            self: *const IDWriteFontResource,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetFontAxisCount: *const fn(
            self: *const IDWriteFontResource,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetDefaultFontAxisValues: *const fn(
            self: *const IDWriteFontResource,
            fontAxisValues: [*]DWRITE_FONT_AXIS_VALUE,
            fontAxisValueCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontAxisRanges: *const fn(
            self: *const IDWriteFontResource,
            fontAxisRanges: [*]DWRITE_FONT_AXIS_RANGE,
            fontAxisRangeCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontAxisAttributes: *const fn(
            self: *const IDWriteFontResource,
            axisIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_AXIS_ATTRIBUTES,
        GetAxisNames: *const fn(
            self: *const IDWriteFontResource,
            axisIndex: u32,
            names: **IDWriteLocalizedStrings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAxisValueNameCount: *const fn(
            self: *const IDWriteFontResource,
            axisIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetAxisValueNames: *const fn(
            self: *const IDWriteFontResource,
            axisIndex: u32,
            axisValueIndex: u32,
            fontAxisRange: ?*DWRITE_FONT_AXIS_RANGE,
            names: **IDWriteLocalizedStrings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasVariations: *const fn(
            self: *const IDWriteFontResource,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        CreateFontFace: *const fn(
            self: *const IDWriteFontResource,
            fontSimulations: DWRITE_FONT_SIMULATIONS,
            fontAxisValues: [*]const DWRITE_FONT_AXIS_VALUE,
            fontAxisValueCount: u32,
            fontFace: **IDWriteFontFace5,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontFaceReference: *const fn(
            self: *const IDWriteFontResource,
            fontSimulations: DWRITE_FONT_SIMULATIONS,
            fontAxisValues: [*]const DWRITE_FONT_AXIS_VALUE,
            fontAxisValueCount: u32,
            fontFaceReference: **IDWriteFontFaceReference1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetFontFile(self: *const IDWriteFontResource, fontFile: **IDWriteFontFile) callconv(.Inline) HRESULT {
        return self.vtable.GetFontFile(self, fontFile);
    }
    pub fn GetFontFaceIndex(self: *const IDWriteFontResource) callconv(.Inline) u32 {
        return self.vtable.GetFontFaceIndex(self);
    }
    pub fn GetFontAxisCount(self: *const IDWriteFontResource) callconv(.Inline) u32 {
        return self.vtable.GetFontAxisCount(self);
    }
    pub fn GetDefaultFontAxisValues(self: *const IDWriteFontResource, fontAxisValues: [*]DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetDefaultFontAxisValues(self, fontAxisValues, fontAxisValueCount);
    }
    pub fn GetFontAxisRanges(self: *const IDWriteFontResource, fontAxisRanges: [*]DWRITE_FONT_AXIS_RANGE, fontAxisRangeCount: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetFontAxisRanges(self, fontAxisRanges, fontAxisRangeCount);
    }
    pub fn GetFontAxisAttributes(self: *const IDWriteFontResource, axisIndex: u32) callconv(.Inline) DWRITE_FONT_AXIS_ATTRIBUTES {
        return self.vtable.GetFontAxisAttributes(self, axisIndex);
    }
    pub fn GetAxisNames(self: *const IDWriteFontResource, axisIndex: u32, names: **IDWriteLocalizedStrings) callconv(.Inline) HRESULT {
        return self.vtable.GetAxisNames(self, axisIndex, names);
    }
    pub fn GetAxisValueNameCount(self: *const IDWriteFontResource, axisIndex: u32) callconv(.Inline) u32 {
        return self.vtable.GetAxisValueNameCount(self, axisIndex);
    }
    pub fn GetAxisValueNames(self: *const IDWriteFontResource, axisIndex: u32, axisValueIndex: u32, fontAxisRange: ?*DWRITE_FONT_AXIS_RANGE, names: **IDWriteLocalizedStrings) callconv(.Inline) HRESULT {
        return self.vtable.GetAxisValueNames(self, axisIndex, axisValueIndex, fontAxisRange, names);
    }
    pub fn HasVariations(self: *const IDWriteFontResource) callconv(.Inline) BOOL {
        return self.vtable.HasVariations(self);
    }
    pub fn CreateFontFace(self: *const IDWriteFontResource, fontSimulations: DWRITE_FONT_SIMULATIONS, fontAxisValues: [*]const DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32, fontFace: **IDWriteFontFace5) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontFace(self, fontSimulations, fontAxisValues, fontAxisValueCount, fontFace);
    }
    pub fn CreateFontFaceReference(self: *const IDWriteFontResource, fontSimulations: DWRITE_FONT_SIMULATIONS, fontAxisValues: [*]const DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32, fontFaceReference: **IDWriteFontFaceReference1) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontFaceReference(self, fontSimulations, fontAxisValues, fontAxisValueCount, fontFaceReference);
    }
};

const IID_IDWriteFontFaceReference1_Value = Guid.initString("c081fe77-2fd1-41ac-a5a3-34983c4ba61a");
pub const IID_IDWriteFontFaceReference1 = &IID_IDWriteFontFaceReference1_Value;
pub const IDWriteFontFaceReference1 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFontFaceReference.VTable,
        CreateFontFace: *const fn(
            self: *const IDWriteFontFaceReference1,
            fontFace: **IDWriteFontFace5,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontAxisValueCount: *const fn(
            self: *const IDWriteFontFaceReference1,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetFontAxisValues: *const fn(
            self: *const IDWriteFontFaceReference1,
            fontAxisValues: [*]DWRITE_FONT_AXIS_VALUE,
            fontAxisValueCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteFontFaceReference: IDWriteFontFaceReference,
    IUnknown: IUnknown,
    pub fn CreateFontFace(self: *const IDWriteFontFaceReference1, fontFace: **IDWriteFontFace5) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontFace(self, fontFace);
    }
    pub fn GetFontAxisValueCount(self: *const IDWriteFontFaceReference1) callconv(.Inline) u32 {
        return self.vtable.GetFontAxisValueCount(self);
    }
    pub fn GetFontAxisValues(self: *const IDWriteFontFaceReference1, fontAxisValues: [*]DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetFontAxisValues(self, fontAxisValues, fontAxisValueCount);
    }
};

const IID_IDWriteFontSetBuilder2_Value = Guid.initString("ee5ba612-b131-463c-8f4f-3189b9401e45");
pub const IID_IDWriteFontSetBuilder2 = &IID_IDWriteFontSetBuilder2_Value;
pub const IDWriteFontSetBuilder2 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFontSetBuilder1.VTable,
        AddFont: *const fn(
            self: *const IDWriteFontSetBuilder2,
            fontFile: ?*IDWriteFontFile,
            fontFaceIndex: u32,
            fontSimulations: DWRITE_FONT_SIMULATIONS,
            fontAxisValues: [*]const DWRITE_FONT_AXIS_VALUE,
            fontAxisValueCount: u32,
            fontAxisRanges: [*]const DWRITE_FONT_AXIS_RANGE,
            fontAxisRangeCount: u32,
            properties: [*]const DWRITE_FONT_PROPERTY,
            propertyCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFontFile: *const fn(
            self: *const IDWriteFontSetBuilder2,
            filePath: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteFontSetBuilder1: IDWriteFontSetBuilder1,
    IDWriteFontSetBuilder: IDWriteFontSetBuilder,
    IUnknown: IUnknown,
    pub fn AddFont(self: *const IDWriteFontSetBuilder2, fontFile: ?*IDWriteFontFile, fontFaceIndex: u32, fontSimulations: DWRITE_FONT_SIMULATIONS, fontAxisValues: [*]const DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32, fontAxisRanges: [*]const DWRITE_FONT_AXIS_RANGE, fontAxisRangeCount: u32, properties: [*]const DWRITE_FONT_PROPERTY, propertyCount: u32) callconv(.Inline) HRESULT {
        return self.vtable.AddFont(self, fontFile, fontFaceIndex, fontSimulations, fontAxisValues, fontAxisValueCount, fontAxisRanges, fontAxisRangeCount, properties, propertyCount);
    }
    pub fn AddFontFile(self: *const IDWriteFontSetBuilder2, filePath: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.AddFontFile(self, filePath);
    }
};

const IID_IDWriteFontSet1_Value = Guid.initString("7e9fda85-6c92-4053-bc47-7ae3530db4d3");
pub const IID_IDWriteFontSet1 = &IID_IDWriteFontSet1_Value;
pub const IDWriteFontSet1 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFontSet.VTable,
        GetMatchingFonts: *const fn(
            self: *const IDWriteFontSet1,
            fontProperty: ?*const DWRITE_FONT_PROPERTY,
            fontAxisValues: [*]const DWRITE_FONT_AXIS_VALUE,
            fontAxisValueCount: u32,
            matchingFonts: **IDWriteFontSet1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFirstFontResources: *const fn(
            self: *const IDWriteFontSet1,
            filteredFontSet: **IDWriteFontSet1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilteredFonts_TODO_A: *const fn(
            self: *const IDWriteFontSet1,
            indices: [*]const u32,
            indexCount: u32,
            filteredFontSet: **IDWriteFontSet1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilteredFonts_TODO_B: *const fn(
            self: *const IDWriteFontSet1,
            fontAxisRanges: [*]const DWRITE_FONT_AXIS_RANGE,
            fontAxisRangeCount: u32,
            selectAnyRange: BOOL,
            filteredFontSet: **IDWriteFontSet1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilteredFonts_TODO_C: *const fn(
            self: *const IDWriteFontSet1,
            properties: ?[*]const DWRITE_FONT_PROPERTY,
            propertyCount: u32,
            selectAnyProperty: BOOL,
            filteredFontSet: **IDWriteFontSet1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilteredFontIndices_TODO_A: *const fn(
            self: *const IDWriteFontSet1,
            fontAxisRanges: [*]const DWRITE_FONT_AXIS_RANGE,
            fontAxisRangeCount: u32,
            selectAnyRange: BOOL,
            indices: [*]u32,
            maxIndexCount: u32,
            actualIndexCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilteredFontIndices_TODO_C: *const fn(
            self: *const IDWriteFontSet1,
            properties: [*]const DWRITE_FONT_PROPERTY,
            propertyCount: u32,
            selectAnyProperty: BOOL,
            indices: [*]u32,
            maxIndexCount: u32,
            actualIndexCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontAxisRanges_TODO_A: *const fn(
            self: *const IDWriteFontSet1,
            listIndex: u32,
            fontAxisRanges: [*]DWRITE_FONT_AXIS_RANGE,
            maxFontAxisRangeCount: u32,
            actualFontAxisRangeCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontAxisRanges_TODO_B: *const fn(
            self: *const IDWriteFontSet1,
            fontAxisRanges: [*]DWRITE_FONT_AXIS_RANGE,
            maxFontAxisRangeCount: u32,
            actualFontAxisRangeCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFaceReference: *const fn(
            self: *const IDWriteFontSet1,
            listIndex: u32,
            fontFaceReference: **IDWriteFontFaceReference1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontResource: *const fn(
            self: *const IDWriteFontSet1,
            listIndex: u32,
            fontResource: **IDWriteFontResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontFace: *const fn(
            self: *const IDWriteFontSet1,
            listIndex: u32,
            fontFace: **IDWriteFontFace5,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontLocality: *const fn(
            self: *const IDWriteFontSet1,
            listIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_LOCALITY,
    };
    vtable: *const VTable,
    IDWriteFontSet: IDWriteFontSet,
    IUnknown: IUnknown,
    pub const GetFilteredFontIndices = @compileError("COM method 'GetFilteredFontIndices' must be called using one of the following overload names: GetFilteredFontIndices_TODO_C, GetFilteredFontIndices_TODO_A");
    pub const GetFontAxisRanges = @compileError("COM method 'GetFontAxisRanges' must be called using one of the following overload names: GetFontAxisRanges_TODO_B, GetFontAxisRanges_TODO_A");
    pub const GetFilteredFonts = @compileError("COM method 'GetFilteredFonts' must be called using one of the following overload names: GetFilteredFonts_TODO_B, GetFilteredFonts_TODO_C, GetFilteredFonts_TODO_A");
    pub fn GetMatchingFonts(self: *const IDWriteFontSet1, fontProperty: ?*const DWRITE_FONT_PROPERTY, fontAxisValues: [*]const DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32, matchingFonts: **IDWriteFontSet1) callconv(.Inline) HRESULT {
        return self.vtable.GetMatchingFonts(self, fontProperty, fontAxisValues, fontAxisValueCount, matchingFonts);
    }
    pub fn GetFirstFontResources(self: *const IDWriteFontSet1, filteredFontSet: **IDWriteFontSet1) callconv(.Inline) HRESULT {
        return self.vtable.GetFirstFontResources(self, filteredFontSet);
    }
    pub fn GetFilteredFonts_TODO_A(self: *const IDWriteFontSet1, indices: [*]const u32, indexCount: u32, filteredFontSet: **IDWriteFontSet1) callconv(.Inline) HRESULT {
        return self.vtable.GetFilteredFonts_TODO_A(self, indices, indexCount, filteredFontSet);
    }
    pub fn GetFilteredFonts_TODO_B(self: *const IDWriteFontSet1, fontAxisRanges: [*]const DWRITE_FONT_AXIS_RANGE, fontAxisRangeCount: u32, selectAnyRange: BOOL, filteredFontSet: **IDWriteFontSet1) callconv(.Inline) HRESULT {
        return self.vtable.GetFilteredFonts_TODO_B(self, fontAxisRanges, fontAxisRangeCount, selectAnyRange, filteredFontSet);
    }
    pub fn GetFilteredFonts_TODO_C(self: *const IDWriteFontSet1, properties: ?[*]const DWRITE_FONT_PROPERTY, propertyCount: u32, selectAnyProperty: BOOL, filteredFontSet: **IDWriteFontSet1) callconv(.Inline) HRESULT {
        return self.vtable.GetFilteredFonts_TODO_C(self, properties, propertyCount, selectAnyProperty, filteredFontSet);
    }
    pub fn GetFilteredFontIndices_TODO_A(self: *const IDWriteFontSet1, fontAxisRanges: [*]const DWRITE_FONT_AXIS_RANGE, fontAxisRangeCount: u32, selectAnyRange: BOOL, indices: [*]u32, maxIndexCount: u32, actualIndexCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetFilteredFontIndices_TODO_A(self, fontAxisRanges, fontAxisRangeCount, selectAnyRange, indices, maxIndexCount, actualIndexCount);
    }
    pub fn GetFilteredFontIndices_TODO_C(self: *const IDWriteFontSet1, properties: [*]const DWRITE_FONT_PROPERTY, propertyCount: u32, selectAnyProperty: BOOL, indices: [*]u32, maxIndexCount: u32, actualIndexCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetFilteredFontIndices_TODO_C(self, properties, propertyCount, selectAnyProperty, indices, maxIndexCount, actualIndexCount);
    }
    pub fn GetFontAxisRanges_TODO_A(self: *const IDWriteFontSet1, listIndex: u32, fontAxisRanges: [*]DWRITE_FONT_AXIS_RANGE, maxFontAxisRangeCount: u32, actualFontAxisRangeCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetFontAxisRanges_TODO_A(self, listIndex, fontAxisRanges, maxFontAxisRangeCount, actualFontAxisRangeCount);
    }
    pub fn GetFontAxisRanges_TODO_B(self: *const IDWriteFontSet1, fontAxisRanges: [*]DWRITE_FONT_AXIS_RANGE, maxFontAxisRangeCount: u32, actualFontAxisRangeCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetFontAxisRanges_TODO_B(self, fontAxisRanges, maxFontAxisRangeCount, actualFontAxisRangeCount);
    }
    pub fn GetFontFaceReference(self: *const IDWriteFontSet1, listIndex: u32, fontFaceReference: **IDWriteFontFaceReference1) callconv(.Inline) HRESULT {
        return self.vtable.GetFontFaceReference(self, listIndex, fontFaceReference);
    }
    pub fn CreateFontResource(self: *const IDWriteFontSet1, listIndex: u32, fontResource: **IDWriteFontResource) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontResource(self, listIndex, fontResource);
    }
    pub fn CreateFontFace(self: *const IDWriteFontSet1, listIndex: u32, fontFace: **IDWriteFontFace5) callconv(.Inline) HRESULT {
        return self.vtable.CreateFontFace(self, listIndex, fontFace);
    }
    pub fn GetFontLocality(self: *const IDWriteFontSet1, listIndex: u32) callconv(.Inline) DWRITE_LOCALITY {
        return self.vtable.GetFontLocality(self, listIndex);
    }
};

const IID_IDWriteFontList2_Value = Guid.initString("c0763a34-77af-445a-b735-08c37b0a5bf5");
pub const IID_IDWriteFontList2 = &IID_IDWriteFontList2_Value;
pub const IDWriteFontList2 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFontList1.VTable,
        GetFontSet: *const fn(
            self: *const IDWriteFontList2,
            fontSet: **IDWriteFontSet1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteFontList1: IDWriteFontList1,
    IDWriteFontList: IDWriteFontList,
    IUnknown: IUnknown,
    pub fn GetFontSet(self: *const IDWriteFontList2, fontSet: **IDWriteFontSet1) callconv(.Inline) HRESULT {
        return self.vtable.GetFontSet(self, fontSet);
    }
};

const IID_IDWriteFontFamily2_Value = Guid.initString("3ed49e77-a398-4261-b9cf-c126c2131ef3");
pub const IID_IDWriteFontFamily2 = &IID_IDWriteFontFamily2_Value;
pub const IDWriteFontFamily2 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFontFamily1.VTable,
        GetMatchingFonts: *const fn(
            self: *const IDWriteFontFamily2,
            fontAxisValues: [*]const DWRITE_FONT_AXIS_VALUE,
            fontAxisValueCount: u32,
            matchingFonts: **IDWriteFontList2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontSet: *const fn(
            self: *const IDWriteFontFamily2,
            fontSet: **IDWriteFontSet1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteFontFamily1: IDWriteFontFamily1,
    IDWriteFontFamily: IDWriteFontFamily,
    IDWriteFontList: IDWriteFontList,
    IUnknown: IUnknown,
    pub fn GetMatchingFonts(self: *const IDWriteFontFamily2, fontAxisValues: [*]const DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32, matchingFonts: **IDWriteFontList2) callconv(.Inline) HRESULT {
        return self.vtable.GetMatchingFonts(self, fontAxisValues, fontAxisValueCount, matchingFonts);
    }
    pub fn GetFontSet(self: *const IDWriteFontFamily2, fontSet: **IDWriteFontSet1) callconv(.Inline) HRESULT {
        return self.vtable.GetFontSet(self, fontSet);
    }
};

const IID_IDWriteFontCollection2_Value = Guid.initString("514039c6-4617-4064-bf8b-92ea83e506e0");
pub const IID_IDWriteFontCollection2 = &IID_IDWriteFontCollection2_Value;
pub const IDWriteFontCollection2 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFontCollection1.VTable,
        GetFontFamily: *const fn(
            self: *const IDWriteFontCollection2,
            index: u32,
            fontFamily: **IDWriteFontFamily2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMatchingFonts: *const fn(
            self: *const IDWriteFontCollection2,
            familyName: ?[*:0]const u16,
            fontAxisValues: [*]const DWRITE_FONT_AXIS_VALUE,
            fontAxisValueCount: u32,
            fontList: **IDWriteFontList2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFamilyModel: *const fn(
            self: *const IDWriteFontCollection2,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_FAMILY_MODEL,
        GetFontSet: *const fn(
            self: *const IDWriteFontCollection2,
            fontSet: **IDWriteFontSet1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteFontCollection1: IDWriteFontCollection1,
    IDWriteFontCollection: IDWriteFontCollection,
    IUnknown: IUnknown,
    pub fn GetFontFamily(self: *const IDWriteFontCollection2, index: u32, fontFamily: **IDWriteFontFamily2) callconv(.Inline) HRESULT {
        return self.vtable.GetFontFamily(self, index, fontFamily);
    }
    pub fn GetMatchingFonts(self: *const IDWriteFontCollection2, familyName: ?[*:0]const u16, fontAxisValues: [*]const DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32, fontList: **IDWriteFontList2) callconv(.Inline) HRESULT {
        return self.vtable.GetMatchingFonts(self, familyName, fontAxisValues, fontAxisValueCount, fontList);
    }
    pub fn GetFontFamilyModel(self: *const IDWriteFontCollection2) callconv(.Inline) DWRITE_FONT_FAMILY_MODEL {
        return self.vtable.GetFontFamilyModel(self);
    }
    pub fn GetFontSet(self: *const IDWriteFontCollection2, fontSet: **IDWriteFontSet1) callconv(.Inline) HRESULT {
        return self.vtable.GetFontSet(self, fontSet);
    }
};

const IID_IDWriteTextLayout4_Value = Guid.initString("05a9bf42-223f-4441-b5fb-8263685f55e9");
pub const IID_IDWriteTextLayout4 = &IID_IDWriteTextLayout4_Value;
pub const IDWriteTextLayout4 = extern union {
    pub const VTable = extern struct {
        base: IDWriteTextLayout3.VTable,
        SetFontAxisValues: *const fn(
            self: *const IDWriteTextLayout4,
            fontAxisValues: [*]const DWRITE_FONT_AXIS_VALUE,
            fontAxisValueCount: u32,
            textRange: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontAxisValueCount: *const fn(
            self: *const IDWriteTextLayout4,
            currentPosition: u32,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetFontAxisValues: *const fn(
            self: *const IDWriteTextLayout4,
            currentPosition: u32,
            fontAxisValues: [*]DWRITE_FONT_AXIS_VALUE,
            fontAxisValueCount: u32,
            textRange: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAutomaticFontAxes: *const fn(
            self: *const IDWriteTextLayout4,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_AUTOMATIC_FONT_AXES,
        SetAutomaticFontAxes: *const fn(
            self: *const IDWriteTextLayout4,
            automaticFontAxes: DWRITE_AUTOMATIC_FONT_AXES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteTextLayout3: IDWriteTextLayout3,
    IDWriteTextLayout2: IDWriteTextLayout2,
    IDWriteTextLayout1: IDWriteTextLayout1,
    IDWriteTextLayout: IDWriteTextLayout,
    IDWriteTextFormat: IDWriteTextFormat,
    IUnknown: IUnknown,
    pub fn SetFontAxisValues(self: *const IDWriteTextLayout4, fontAxisValues: [*]const DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32, textRange: DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.SetFontAxisValues(self, fontAxisValues, fontAxisValueCount, textRange);
    }
    pub fn GetFontAxisValueCount(self: *const IDWriteTextLayout4, currentPosition: u32) callconv(.Inline) u32 {
        return self.vtable.GetFontAxisValueCount(self, currentPosition);
    }
    pub fn GetFontAxisValues(self: *const IDWriteTextLayout4, currentPosition: u32, fontAxisValues: [*]DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32, textRange: ?*DWRITE_TEXT_RANGE) callconv(.Inline) HRESULT {
        return self.vtable.GetFontAxisValues(self, currentPosition, fontAxisValues, fontAxisValueCount, textRange);
    }
    pub fn GetAutomaticFontAxes(self: *const IDWriteTextLayout4) callconv(.Inline) DWRITE_AUTOMATIC_FONT_AXES {
        return self.vtable.GetAutomaticFontAxes(self);
    }
    pub fn SetAutomaticFontAxes(self: *const IDWriteTextLayout4, automaticFontAxes: DWRITE_AUTOMATIC_FONT_AXES) callconv(.Inline) HRESULT {
        return self.vtable.SetAutomaticFontAxes(self, automaticFontAxes);
    }
};

const IID_IDWriteTextFormat3_Value = Guid.initString("6d3b5641-e550-430d-a85b-b7bf48a93427");
pub const IID_IDWriteTextFormat3 = &IID_IDWriteTextFormat3_Value;
pub const IDWriteTextFormat3 = extern union {
    pub const VTable = extern struct {
        base: IDWriteTextFormat2.VTable,
        SetFontAxisValues: *const fn(
            self: *const IDWriteTextFormat3,
            fontAxisValues: [*]const DWRITE_FONT_AXIS_VALUE,
            fontAxisValueCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontAxisValueCount: *const fn(
            self: *const IDWriteTextFormat3,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetFontAxisValues: *const fn(
            self: *const IDWriteTextFormat3,
            fontAxisValues: [*]DWRITE_FONT_AXIS_VALUE,
            fontAxisValueCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAutomaticFontAxes: *const fn(
            self: *const IDWriteTextFormat3,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_AUTOMATIC_FONT_AXES,
        SetAutomaticFontAxes: *const fn(
            self: *const IDWriteTextFormat3,
            automaticFontAxes: DWRITE_AUTOMATIC_FONT_AXES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteTextFormat2: IDWriteTextFormat2,
    IDWriteTextFormat1: IDWriteTextFormat1,
    IDWriteTextFormat: IDWriteTextFormat,
    IUnknown: IUnknown,
    pub fn SetFontAxisValues(self: *const IDWriteTextFormat3, fontAxisValues: [*]const DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetFontAxisValues(self, fontAxisValues, fontAxisValueCount);
    }
    pub fn GetFontAxisValueCount(self: *const IDWriteTextFormat3) callconv(.Inline) u32 {
        return self.vtable.GetFontAxisValueCount(self);
    }
    pub fn GetFontAxisValues(self: *const IDWriteTextFormat3, fontAxisValues: [*]DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetFontAxisValues(self, fontAxisValues, fontAxisValueCount);
    }
    pub fn GetAutomaticFontAxes(self: *const IDWriteTextFormat3) callconv(.Inline) DWRITE_AUTOMATIC_FONT_AXES {
        return self.vtable.GetAutomaticFontAxes(self);
    }
    pub fn SetAutomaticFontAxes(self: *const IDWriteTextFormat3, automaticFontAxes: DWRITE_AUTOMATIC_FONT_AXES) callconv(.Inline) HRESULT {
        return self.vtable.SetAutomaticFontAxes(self, automaticFontAxes);
    }
};

const IID_IDWriteFontFallback1_Value = Guid.initString("2397599d-dd0d-4681-bd6a-f4f31eaade77");
pub const IID_IDWriteFontFallback1 = &IID_IDWriteFontFallback1_Value;
pub const IDWriteFontFallback1 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFontFallback.VTable,
        MapCharacters: *const fn(
            self: *const IDWriteFontFallback1,
            analysisSource: ?*IDWriteTextAnalysisSource,
            textPosition: u32,
            textLength: u32,
            baseFontCollection: ?*IDWriteFontCollection,
            baseFamilyName: ?[*:0]const u16,
            fontAxisValues: [*]const DWRITE_FONT_AXIS_VALUE,
            fontAxisValueCount: u32,
            mappedLength: ?*u32,
            scale: ?*f32,
            mappedFontFace: **IDWriteFontFace5,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteFontFallback: IDWriteFontFallback,
    IUnknown: IUnknown,
    pub fn MapCharacters(self: *const IDWriteFontFallback1, analysisSource: ?*IDWriteTextAnalysisSource, textPosition: u32, textLength: u32, baseFontCollection: ?*IDWriteFontCollection, baseFamilyName: ?[*:0]const u16, fontAxisValues: [*]const DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32, mappedLength: ?*u32, scale: ?*f32, mappedFontFace: **IDWriteFontFace5) callconv(.Inline) HRESULT {
        return self.vtable.MapCharacters(self, analysisSource, textPosition, textLength, baseFontCollection, baseFamilyName, fontAxisValues, fontAxisValueCount, mappedLength, scale, mappedFontFace);
    }
};

const IID_IDWriteFontSet2_Value = Guid.initString("dc7ead19-e54c-43af-b2da-4e2b79ba3f7f");
pub const IID_IDWriteFontSet2 = &IID_IDWriteFontSet2_Value;
pub const IDWriteFontSet2 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFontSet1.VTable,
        GetExpirationEvent: *const fn(
            self: *const IDWriteFontSet2,
        ) callconv(@import("std").os.windows.WINAPI) ?HANDLE,
    };
    vtable: *const VTable,
    IDWriteFontSet1: IDWriteFontSet1,
    IDWriteFontSet: IDWriteFontSet,
    IUnknown: IUnknown,
    pub fn GetExpirationEvent(self: *const IDWriteFontSet2) callconv(.Inline) ?HANDLE {
        return self.vtable.GetExpirationEvent(self);
    }
};

const IID_IDWriteFontCollection3_Value = Guid.initString("a4d055a6-f9e3-4e25-93b7-9e309f3af8e9");
pub const IID_IDWriteFontCollection3 = &IID_IDWriteFontCollection3_Value;
pub const IDWriteFontCollection3 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFontCollection2.VTable,
        GetExpirationEvent: *const fn(
            self: *const IDWriteFontCollection3,
        ) callconv(@import("std").os.windows.WINAPI) ?HANDLE,
    };
    vtable: *const VTable,
    IDWriteFontCollection2: IDWriteFontCollection2,
    IDWriteFontCollection1: IDWriteFontCollection1,
    IDWriteFontCollection: IDWriteFontCollection,
    IUnknown: IUnknown,
    pub fn GetExpirationEvent(self: *const IDWriteFontCollection3) callconv(.Inline) ?HANDLE {
        return self.vtable.GetExpirationEvent(self);
    }
};

const IID_IDWriteFactory7_Value = Guid.initString("35d0e0b3-9076-4d2e-a016-a91b568a06b4");
pub const IID_IDWriteFactory7 = &IID_IDWriteFactory7_Value;
pub const IDWriteFactory7 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFactory6.VTable,
        GetSystemFontSet: *const fn(
            self: *const IDWriteFactory7,
            includeDownloadableFonts: BOOL,
            fontSet: **IDWriteFontSet2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSystemFontCollection: *const fn(
            self: *const IDWriteFactory7,
            includeDownloadableFonts: BOOL,
            fontFamilyModel: DWRITE_FONT_FAMILY_MODEL,
            fontCollection: **IDWriteFontCollection3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteFactory6: IDWriteFactory6,
    IDWriteFactory5: IDWriteFactory5,
    IDWriteFactory4: IDWriteFactory4,
    IDWriteFactory3: IDWriteFactory3,
    IDWriteFactory2: IDWriteFactory2,
    IDWriteFactory1: IDWriteFactory1,
    IDWriteFactory: IDWriteFactory,
    IUnknown: IUnknown,
    pub fn GetSystemFontSet(self: *const IDWriteFactory7, includeDownloadableFonts: BOOL, fontSet: **IDWriteFontSet2) callconv(.Inline) HRESULT {
        return self.vtable.GetSystemFontSet(self, includeDownloadableFonts, fontSet);
    }
    pub fn GetSystemFontCollection(self: *const IDWriteFactory7, includeDownloadableFonts: BOOL, fontFamilyModel: DWRITE_FONT_FAMILY_MODEL, fontCollection: **IDWriteFontCollection3) callconv(.Inline) HRESULT {
        return self.vtable.GetSystemFontCollection(self, includeDownloadableFonts, fontFamilyModel, fontCollection);
    }
};

pub const DWRITE_FONT_SOURCE_TYPE = enum(i32) {
    UNKNOWN = 0,
    PER_MACHINE = 1,
    PER_USER = 2,
    APPX_PACKAGE = 3,
    REMOTE_FONT_PROVIDER = 4,
};
pub const DWRITE_FONT_SOURCE_TYPE_UNKNOWN = DWRITE_FONT_SOURCE_TYPE.UNKNOWN;
pub const DWRITE_FONT_SOURCE_TYPE_PER_MACHINE = DWRITE_FONT_SOURCE_TYPE.PER_MACHINE;
pub const DWRITE_FONT_SOURCE_TYPE_PER_USER = DWRITE_FONT_SOURCE_TYPE.PER_USER;
pub const DWRITE_FONT_SOURCE_TYPE_APPX_PACKAGE = DWRITE_FONT_SOURCE_TYPE.APPX_PACKAGE;
pub const DWRITE_FONT_SOURCE_TYPE_REMOTE_FONT_PROVIDER = DWRITE_FONT_SOURCE_TYPE.REMOTE_FONT_PROVIDER;

const IID_IDWriteFontSet3_Value = Guid.initString("7c073ef2-a7f4-4045-8c32-8ab8ae640f90");
pub const IID_IDWriteFontSet3 = &IID_IDWriteFontSet3_Value;
pub const IDWriteFontSet3 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFontSet2.VTable,
        GetFontSourceType: *const fn(
            self: *const IDWriteFontSet3,
            fontIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_SOURCE_TYPE,
        GetFontSourceNameLength: *const fn(
            self: *const IDWriteFontSet3,
            listIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetFontSourceName: *const fn(
            self: *const IDWriteFontSet3,
            listIndex: u32,
            stringBuffer: [*:0]u16,
            stringBufferSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteFontSet2: IDWriteFontSet2,
    IDWriteFontSet1: IDWriteFontSet1,
    IDWriteFontSet: IDWriteFontSet,
    IUnknown: IUnknown,
    pub fn GetFontSourceType(self: *const IDWriteFontSet3, fontIndex: u32) callconv(.Inline) DWRITE_FONT_SOURCE_TYPE {
        return self.vtable.GetFontSourceType(self, fontIndex);
    }
    pub fn GetFontSourceNameLength(self: *const IDWriteFontSet3, listIndex: u32) callconv(.Inline) u32 {
        return self.vtable.GetFontSourceNameLength(self, listIndex);
    }
    pub fn GetFontSourceName(self: *const IDWriteFontSet3, listIndex: u32, stringBuffer: [*:0]u16, stringBufferSize: u32) callconv(.Inline) HRESULT {
        return self.vtable.GetFontSourceName(self, listIndex, stringBuffer, stringBufferSize);
    }
};

const IID_IDWriteFontFace6_Value = Guid.initString("c4b1fe1b-6e84-47d5-b54c-a597981b06ad");
pub const IID_IDWriteFontFace6 = &IID_IDWriteFontFace6_Value;
pub const IDWriteFontFace6 = extern union {
    pub const VTable = extern struct {
        base: IDWriteFontFace5.VTable,
        GetFamilyNames: *const fn(
            self: *const IDWriteFontFace6,
            fontFamilyModel: DWRITE_FONT_FAMILY_MODEL,
            names: **IDWriteLocalizedStrings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFaceNames: *const fn(
            self: *const IDWriteFontFace6,
            fontFamilyModel: DWRITE_FONT_FAMILY_MODEL,
            names: **IDWriteLocalizedStrings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDWriteFontFace5: IDWriteFontFace5,
    IDWriteFontFace4: IDWriteFontFace4,
    IDWriteFontFace3: IDWriteFontFace3,
    IDWriteFontFace2: IDWriteFontFace2,
    IDWriteFontFace1: IDWriteFontFace1,
    IDWriteFontFace: IDWriteFontFace,
    IUnknown: IUnknown,
    pub fn GetFamilyNames(self: *const IDWriteFontFace6, fontFamilyModel: DWRITE_FONT_FAMILY_MODEL, names: **IDWriteLocalizedStrings) callconv(.Inline) HRESULT {
        return self.vtable.GetFamilyNames(self, fontFamilyModel, names);
    }
    pub fn GetFaceNames(self: *const IDWriteFontFace6, fontFamilyModel: DWRITE_FONT_FAMILY_MODEL, names: **IDWriteLocalizedStrings) callconv(.Inline) HRESULT {
        return self.vtable.GetFaceNames(self, fontFamilyModel, names);
    }
};


//--------------------------------------------------------------------------------
// Section: Functions (1)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.1'
pub extern "dwrite" fn DWriteCreateFactory(
    factoryType: DWRITE_FACTORY_TYPE,
    iid: ?*const Guid,
    factory: **IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (18)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const D2D_POINT_2F = @import("../graphics/direct2d/common.zig").D2D_POINT_2F;
const D2D_SIZE_U = @import("../graphics/direct2d/common.zig").D2D_SIZE_U;
const FILETIME = @import("../foundation.zig").FILETIME;
const FONTSIGNATURE = @import("../globalization.zig").FONTSIGNATURE;
const HANDLE = @import("../foundation.zig").HANDLE;
const HDC = @import("../graphics/gdi.zig").HDC;
const HMONITOR = @import("../graphics/gdi.zig").HMONITOR;
const HRESULT = @import("../foundation.zig").HRESULT;
const ID2D1SimplifiedGeometrySink = @import("../graphics/direct2d/common.zig").ID2D1SimplifiedGeometrySink;
const IUnknown = @import("../system/com.zig").IUnknown;
const LOGFONTA = @import("../graphics/gdi.zig").LOGFONTA;
const LOGFONTW = @import("../graphics/gdi.zig").LOGFONTW;
const POINT = @import("../foundation.zig").POINT;
const PWSTR = @import("../foundation.zig").PWSTR;
const RECT = @import("../foundation.zig").RECT;
const SIZE = @import("../foundation.zig").SIZE;

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
