//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (4)
//--------------------------------------------------------------------------------
pub const COMPOSITIONOBJECT_READ = @as(i32, 1);
pub const COMPOSITIONOBJECT_WRITE = @as(i32, 2);
pub const DCOMPOSITION_MAX_WAITFORCOMPOSITORCLOCK_OBJECTS = @as(u32, 32);
pub const COMPOSITION_STATS_MAX_TARGETS = @as(u32, 256);

//--------------------------------------------------------------------------------
// Section: Types (58)
//--------------------------------------------------------------------------------
pub const DCOMPOSITION_BITMAP_INTERPOLATION_MODE = enum(i32) {
    NEAREST_NEIGHBOR = 0,
    LINEAR = 1,
    INHERIT = -1,
};
pub const DCOMPOSITION_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR = DCOMPOSITION_BITMAP_INTERPOLATION_MODE.NEAREST_NEIGHBOR;
pub const DCOMPOSITION_BITMAP_INTERPOLATION_MODE_LINEAR = DCOMPOSITION_BITMAP_INTERPOLATION_MODE.LINEAR;
pub const DCOMPOSITION_BITMAP_INTERPOLATION_MODE_INHERIT = DCOMPOSITION_BITMAP_INTERPOLATION_MODE.INHERIT;

pub const DCOMPOSITION_BORDER_MODE = enum(i32) {
    SOFT = 0,
    HARD = 1,
    INHERIT = -1,
};
pub const DCOMPOSITION_BORDER_MODE_SOFT = DCOMPOSITION_BORDER_MODE.SOFT;
pub const DCOMPOSITION_BORDER_MODE_HARD = DCOMPOSITION_BORDER_MODE.HARD;
pub const DCOMPOSITION_BORDER_MODE_INHERIT = DCOMPOSITION_BORDER_MODE.INHERIT;

pub const DCOMPOSITION_COMPOSITE_MODE = enum(i32) {
    SOURCE_OVER = 0,
    DESTINATION_INVERT = 1,
    MIN_BLEND = 2,
    INHERIT = -1,
};
pub const DCOMPOSITION_COMPOSITE_MODE_SOURCE_OVER = DCOMPOSITION_COMPOSITE_MODE.SOURCE_OVER;
pub const DCOMPOSITION_COMPOSITE_MODE_DESTINATION_INVERT = DCOMPOSITION_COMPOSITE_MODE.DESTINATION_INVERT;
pub const DCOMPOSITION_COMPOSITE_MODE_MIN_BLEND = DCOMPOSITION_COMPOSITE_MODE.MIN_BLEND;
pub const DCOMPOSITION_COMPOSITE_MODE_INHERIT = DCOMPOSITION_COMPOSITE_MODE.INHERIT;

pub const DCOMPOSITION_BACKFACE_VISIBILITY = enum(i32) {
    VISIBLE = 0,
    HIDDEN = 1,
    INHERIT = -1,
};
pub const DCOMPOSITION_BACKFACE_VISIBILITY_VISIBLE = DCOMPOSITION_BACKFACE_VISIBILITY.VISIBLE;
pub const DCOMPOSITION_BACKFACE_VISIBILITY_HIDDEN = DCOMPOSITION_BACKFACE_VISIBILITY.HIDDEN;
pub const DCOMPOSITION_BACKFACE_VISIBILITY_INHERIT = DCOMPOSITION_BACKFACE_VISIBILITY.INHERIT;

pub const DCOMPOSITION_OPACITY_MODE = enum(i32) {
    LAYER = 0,
    MULTIPLY = 1,
    INHERIT = -1,
};
pub const DCOMPOSITION_OPACITY_MODE_LAYER = DCOMPOSITION_OPACITY_MODE.LAYER;
pub const DCOMPOSITION_OPACITY_MODE_MULTIPLY = DCOMPOSITION_OPACITY_MODE.MULTIPLY;
pub const DCOMPOSITION_OPACITY_MODE_INHERIT = DCOMPOSITION_OPACITY_MODE.INHERIT;

pub const DCOMPOSITION_DEPTH_MODE = enum(i32) {
    TREE = 0,
    SPATIAL = 1,
    SORTED = 3,
    INHERIT = -1,
};
pub const DCOMPOSITION_DEPTH_MODE_TREE = DCOMPOSITION_DEPTH_MODE.TREE;
pub const DCOMPOSITION_DEPTH_MODE_SPATIAL = DCOMPOSITION_DEPTH_MODE.SPATIAL;
pub const DCOMPOSITION_DEPTH_MODE_SORTED = DCOMPOSITION_DEPTH_MODE.SORTED;
pub const DCOMPOSITION_DEPTH_MODE_INHERIT = DCOMPOSITION_DEPTH_MODE.INHERIT;

pub const DCOMPOSITION_FRAME_STATISTICS = extern struct {
    lastFrameTime: LARGE_INTEGER,
    currentCompositionRate: DXGI_RATIONAL,
    currentTime: LARGE_INTEGER,
    timeFrequency: LARGE_INTEGER,
    nextEstimatedFrameTime: LARGE_INTEGER,
};

pub const COMPOSITION_FRAME_ID_TYPE = enum(i32) {
    REATED = 0,
    ONFIRMED = 1,
    OMPLETED = 2,
};
pub const COMPOSITION_FRAME_ID_CREATED = COMPOSITION_FRAME_ID_TYPE.REATED;
pub const COMPOSITION_FRAME_ID_CONFIRMED = COMPOSITION_FRAME_ID_TYPE.ONFIRMED;
pub const COMPOSITION_FRAME_ID_COMPLETED = COMPOSITION_FRAME_ID_TYPE.OMPLETED;

pub const COMPOSITION_FRAME_STATS = extern struct {
    startTime: u64,
    targetTime: u64,
    framePeriod: u64,
};

pub const COMPOSITION_TARGET_ID = extern struct {
    displayAdapterLuid: LUID,
    renderAdapterLuid: LUID,
    vidPnSourceId: u32,
    vidPnTargetId: u32,
    uniqueId: u32,
};

pub const COMPOSITION_STATS = extern struct {
    presentCount: u32,
    refreshCount: u32,
    virtualRefreshCount: u32,
    time: u64,
};

pub const COMPOSITION_TARGET_STATS = extern struct {
    outstandingPresents: u32,
    presentTime: u64,
    vblankDuration: u64,
    presentedStats: COMPOSITION_STATS,
    completedStats: COMPOSITION_STATS,
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionAnimation_Value = Guid.initString("cbfd91d9-51b2-45e4-b3de-d19ccfb863c5");
pub const IID_IDCompositionAnimation = &IID_IDCompositionAnimation_Value;
pub const IDCompositionAnimation = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Reset: *const fn(
            self: *const IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAbsoluteBeginTime: *const fn(
            self: *const IDCompositionAnimation,
            beginTime: LARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCubic: *const fn(
            self: *const IDCompositionAnimation,
            beginOffset: f64,
            constantCoefficient: f32,
            linearCoefficient: f32,
            quadraticCoefficient: f32,
            cubicCoefficient: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddSinusoidal: *const fn(
            self: *const IDCompositionAnimation,
            beginOffset: f64,
            bias: f32,
            amplitude: f32,
            frequency: f32,
            phase: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRepeat: *const fn(
            self: *const IDCompositionAnimation,
            beginOffset: f64,
            durationToRepeat: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        End: *const fn(
            self: *const IDCompositionAnimation,
            endOffset: f64,
            endValue: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Reset(self: *const IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn SetAbsoluteBeginTime(self: *const IDCompositionAnimation, beginTime: LARGE_INTEGER) callconv(.Inline) HRESULT {
        return self.vtable.SetAbsoluteBeginTime(self, beginTime);
    }
    pub fn AddCubic(self: *const IDCompositionAnimation, beginOffset: f64, constantCoefficient: f32, linearCoefficient: f32, quadraticCoefficient: f32, cubicCoefficient: f32) callconv(.Inline) HRESULT {
        return self.vtable.AddCubic(self, beginOffset, constantCoefficient, linearCoefficient, quadraticCoefficient, cubicCoefficient);
    }
    pub fn AddSinusoidal(self: *const IDCompositionAnimation, beginOffset: f64, bias: f32, amplitude: f32, frequency: f32, phase: f32) callconv(.Inline) HRESULT {
        return self.vtable.AddSinusoidal(self, beginOffset, bias, amplitude, frequency, phase);
    }
    pub fn AddRepeat(self: *const IDCompositionAnimation, beginOffset: f64, durationToRepeat: f64) callconv(.Inline) HRESULT {
        return self.vtable.AddRepeat(self, beginOffset, durationToRepeat);
    }
    pub fn End(self: *const IDCompositionAnimation, endOffset: f64, endValue: f32) callconv(.Inline) HRESULT {
        return self.vtable.End(self, endOffset, endValue);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionDevice_Value = Guid.initString("c37ea93a-e7aa-450d-b16f-9746cb0407f3");
pub const IID_IDCompositionDevice = &IID_IDCompositionDevice_Value;
pub const IDCompositionDevice = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Commit: *const fn(
            self: *const IDCompositionDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WaitForCommitCompletion: *const fn(
            self: *const IDCompositionDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFrameStatistics: *const fn(
            self: *const IDCompositionDevice,
            statistics: ?*DCOMPOSITION_FRAME_STATISTICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTargetForHwnd: *const fn(
            self: *const IDCompositionDevice,
            hwnd: ?HWND,
            topmost: BOOL,
            target: ?*?*IDCompositionTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVisual: *const fn(
            self: *const IDCompositionDevice,
            visual: ?*?*IDCompositionVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSurface: *const fn(
            self: *const IDCompositionDevice,
            width: u32,
            height: u32,
            pixelFormat: DXGI_FORMAT,
            alphaMode: DXGI_ALPHA_MODE,
            surface: ?*?*IDCompositionSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVirtualSurface: *const fn(
            self: *const IDCompositionDevice,
            initialWidth: u32,
            initialHeight: u32,
            pixelFormat: DXGI_FORMAT,
            alphaMode: DXGI_ALPHA_MODE,
            virtualSurface: ?*?*IDCompositionVirtualSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSurfaceFromHandle: *const fn(
            self: *const IDCompositionDevice,
            handle: ?HANDLE,
            surface: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSurfaceFromHwnd: *const fn(
            self: *const IDCompositionDevice,
            hwnd: ?HWND,
            surface: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTranslateTransform: *const fn(
            self: *const IDCompositionDevice,
            translateTransform: ?*?*IDCompositionTranslateTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateScaleTransform: *const fn(
            self: *const IDCompositionDevice,
            scaleTransform: ?*?*IDCompositionScaleTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRotateTransform: *const fn(
            self: *const IDCompositionDevice,
            rotateTransform: ?*?*IDCompositionRotateTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSkewTransform: *const fn(
            self: *const IDCompositionDevice,
            skewTransform: ?*?*IDCompositionSkewTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMatrixTransform: *const fn(
            self: *const IDCompositionDevice,
            matrixTransform: ?*?*IDCompositionMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTransformGroup: *const fn(
            self: *const IDCompositionDevice,
            transforms: [*]?*IDCompositionTransform,
            elements: u32,
            transformGroup: ?*?*IDCompositionTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTranslateTransform3D: *const fn(
            self: *const IDCompositionDevice,
            translateTransform3D: ?*?*IDCompositionTranslateTransform3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateScaleTransform3D: *const fn(
            self: *const IDCompositionDevice,
            scaleTransform3D: ?*?*IDCompositionScaleTransform3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRotateTransform3D: *const fn(
            self: *const IDCompositionDevice,
            rotateTransform3D: ?*?*IDCompositionRotateTransform3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMatrixTransform3D: *const fn(
            self: *const IDCompositionDevice,
            matrixTransform3D: ?*?*IDCompositionMatrixTransform3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTransform3DGroup: *const fn(
            self: *const IDCompositionDevice,
            transforms3D: [*]?*IDCompositionTransform3D,
            elements: u32,
            transform3DGroup: ?*?*IDCompositionTransform3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEffectGroup: *const fn(
            self: *const IDCompositionDevice,
            effectGroup: ?*?*IDCompositionEffectGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRectangleClip: *const fn(
            self: *const IDCompositionDevice,
            clip: ?*?*IDCompositionRectangleClip,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateAnimation: *const fn(
            self: *const IDCompositionDevice,
            animation: ?*?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckDeviceState: *const fn(
            self: *const IDCompositionDevice,
            pfValid: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Commit(self: *const IDCompositionDevice) callconv(.Inline) HRESULT {
        return self.vtable.Commit(self);
    }
    pub fn WaitForCommitCompletion(self: *const IDCompositionDevice) callconv(.Inline) HRESULT {
        return self.vtable.WaitForCommitCompletion(self);
    }
    pub fn GetFrameStatistics(self: *const IDCompositionDevice, statistics: ?*DCOMPOSITION_FRAME_STATISTICS) callconv(.Inline) HRESULT {
        return self.vtable.GetFrameStatistics(self, statistics);
    }
    pub fn CreateTargetForHwnd(self: *const IDCompositionDevice, hwnd: ?HWND, topmost: BOOL, target: ?*?*IDCompositionTarget) callconv(.Inline) HRESULT {
        return self.vtable.CreateTargetForHwnd(self, hwnd, topmost, target);
    }
    pub fn CreateVisual(self: *const IDCompositionDevice, visual: ?*?*IDCompositionVisual) callconv(.Inline) HRESULT {
        return self.vtable.CreateVisual(self, visual);
    }
    pub fn CreateSurface(self: *const IDCompositionDevice, width: u32, height: u32, pixelFormat: DXGI_FORMAT, alphaMode: DXGI_ALPHA_MODE, surface: ?*?*IDCompositionSurface) callconv(.Inline) HRESULT {
        return self.vtable.CreateSurface(self, width, height, pixelFormat, alphaMode, surface);
    }
    pub fn CreateVirtualSurface(self: *const IDCompositionDevice, initialWidth: u32, initialHeight: u32, pixelFormat: DXGI_FORMAT, alphaMode: DXGI_ALPHA_MODE, virtualSurface: ?*?*IDCompositionVirtualSurface) callconv(.Inline) HRESULT {
        return self.vtable.CreateVirtualSurface(self, initialWidth, initialHeight, pixelFormat, alphaMode, virtualSurface);
    }
    pub fn CreateSurfaceFromHandle(self: *const IDCompositionDevice, handle: ?HANDLE, surface: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.CreateSurfaceFromHandle(self, handle, surface);
    }
    pub fn CreateSurfaceFromHwnd(self: *const IDCompositionDevice, hwnd: ?HWND, surface: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.CreateSurfaceFromHwnd(self, hwnd, surface);
    }
    pub fn CreateTranslateTransform(self: *const IDCompositionDevice, translateTransform: ?*?*IDCompositionTranslateTransform) callconv(.Inline) HRESULT {
        return self.vtable.CreateTranslateTransform(self, translateTransform);
    }
    pub fn CreateScaleTransform(self: *const IDCompositionDevice, scaleTransform: ?*?*IDCompositionScaleTransform) callconv(.Inline) HRESULT {
        return self.vtable.CreateScaleTransform(self, scaleTransform);
    }
    pub fn CreateRotateTransform(self: *const IDCompositionDevice, rotateTransform: ?*?*IDCompositionRotateTransform) callconv(.Inline) HRESULT {
        return self.vtable.CreateRotateTransform(self, rotateTransform);
    }
    pub fn CreateSkewTransform(self: *const IDCompositionDevice, skewTransform: ?*?*IDCompositionSkewTransform) callconv(.Inline) HRESULT {
        return self.vtable.CreateSkewTransform(self, skewTransform);
    }
    pub fn CreateMatrixTransform(self: *const IDCompositionDevice, matrixTransform: ?*?*IDCompositionMatrixTransform) callconv(.Inline) HRESULT {
        return self.vtable.CreateMatrixTransform(self, matrixTransform);
    }
    pub fn CreateTransformGroup(self: *const IDCompositionDevice, transforms: [*]?*IDCompositionTransform, elements: u32, transformGroup: ?*?*IDCompositionTransform) callconv(.Inline) HRESULT {
        return self.vtable.CreateTransformGroup(self, transforms, elements, transformGroup);
    }
    pub fn CreateTranslateTransform3D(self: *const IDCompositionDevice, translateTransform3D: ?*?*IDCompositionTranslateTransform3D) callconv(.Inline) HRESULT {
        return self.vtable.CreateTranslateTransform3D(self, translateTransform3D);
    }
    pub fn CreateScaleTransform3D(self: *const IDCompositionDevice, scaleTransform3D: ?*?*IDCompositionScaleTransform3D) callconv(.Inline) HRESULT {
        return self.vtable.CreateScaleTransform3D(self, scaleTransform3D);
    }
    pub fn CreateRotateTransform3D(self: *const IDCompositionDevice, rotateTransform3D: ?*?*IDCompositionRotateTransform3D) callconv(.Inline) HRESULT {
        return self.vtable.CreateRotateTransform3D(self, rotateTransform3D);
    }
    pub fn CreateMatrixTransform3D(self: *const IDCompositionDevice, matrixTransform3D: ?*?*IDCompositionMatrixTransform3D) callconv(.Inline) HRESULT {
        return self.vtable.CreateMatrixTransform3D(self, matrixTransform3D);
    }
    pub fn CreateTransform3DGroup(self: *const IDCompositionDevice, transforms3D: [*]?*IDCompositionTransform3D, elements: u32, transform3DGroup: ?*?*IDCompositionTransform3D) callconv(.Inline) HRESULT {
        return self.vtable.CreateTransform3DGroup(self, transforms3D, elements, transform3DGroup);
    }
    pub fn CreateEffectGroup(self: *const IDCompositionDevice, effectGroup: ?*?*IDCompositionEffectGroup) callconv(.Inline) HRESULT {
        return self.vtable.CreateEffectGroup(self, effectGroup);
    }
    pub fn CreateRectangleClip(self: *const IDCompositionDevice, clip: ?*?*IDCompositionRectangleClip) callconv(.Inline) HRESULT {
        return self.vtable.CreateRectangleClip(self, clip);
    }
    pub fn CreateAnimation(self: *const IDCompositionDevice, animation: ?*?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.CreateAnimation(self, animation);
    }
    pub fn CheckDeviceState(self: *const IDCompositionDevice, pfValid: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.CheckDeviceState(self, pfValid);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionTarget_Value = Guid.initString("eacdd04c-117e-4e17-88f4-d1b12b0e3d89");
pub const IID_IDCompositionTarget = &IID_IDCompositionTarget_Value;
pub const IDCompositionTarget = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetRoot: *const fn(
            self: *const IDCompositionTarget,
            visual: ?*IDCompositionVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetRoot(self: *const IDCompositionTarget, visual: ?*IDCompositionVisual) callconv(.Inline) HRESULT {
        return self.vtable.SetRoot(self, visual);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionVisual_Value = Guid.initString("4d93059d-097b-4651-9a60-f0f25116e2f3");
pub const IID_IDCompositionVisual = &IID_IDCompositionVisual_Value;
pub const IDCompositionVisual = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetOffsetX_TODO_A: *const fn(
            self: *const IDCompositionVisual,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetX_TODO_B: *const fn(
            self: *const IDCompositionVisual,
            offsetX: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetY_TODO_A: *const fn(
            self: *const IDCompositionVisual,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetY_TODO_B: *const fn(
            self: *const IDCompositionVisual,
            offsetY: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransform_TODO_A: *const fn(
            self: *const IDCompositionVisual,
            transform: ?*IDCompositionTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransform_TODO_B: *const fn(
            self: *const IDCompositionVisual,
            matrix: ?*const D2D_MATRIX_3X2_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransformParent: *const fn(
            self: *const IDCompositionVisual,
            visual: ?*IDCompositionVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEffect: *const fn(
            self: *const IDCompositionVisual,
            effect: ?*IDCompositionEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBitmapInterpolationMode: *const fn(
            self: *const IDCompositionVisual,
            interpolationMode: DCOMPOSITION_BITMAP_INTERPOLATION_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBorderMode: *const fn(
            self: *const IDCompositionVisual,
            borderMode: DCOMPOSITION_BORDER_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClip_TODO_A: *const fn(
            self: *const IDCompositionVisual,
            clip: ?*IDCompositionClip,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClip_TODO_B: *const fn(
            self: *const IDCompositionVisual,
            rect: ?*const D2D_RECT_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContent: *const fn(
            self: *const IDCompositionVisual,
            content: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddVisual: *const fn(
            self: *const IDCompositionVisual,
            visual: ?*IDCompositionVisual,
            insertAbove: BOOL,
            referenceVisual: ?*IDCompositionVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveVisual: *const fn(
            self: *const IDCompositionVisual,
            visual: ?*IDCompositionVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllVisuals: *const fn(
            self: *const IDCompositionVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCompositeMode: *const fn(
            self: *const IDCompositionVisual,
            compositeMode: DCOMPOSITION_COMPOSITE_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub const SetOffsetY = @compileError("COM method 'SetOffsetY' must be called using one of the following overload names: SetOffsetY_TODO_B, SetOffsetY_TODO_A");
    pub const SetClip = @compileError("COM method 'SetClip' must be called using one of the following overload names: SetClip_TODO_B, SetClip_TODO_A");
    pub const SetTransform = @compileError("COM method 'SetTransform' must be called using one of the following overload names: SetTransform_TODO_A, SetTransform_TODO_B");
    pub const SetOffsetX = @compileError("COM method 'SetOffsetX' must be called using one of the following overload names: SetOffsetX_TODO_A, SetOffsetX_TODO_B");
    pub fn SetOffsetX_TODO_A(self: *const IDCompositionVisual, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetOffsetX_TODO_A(self, animation);
    }
    pub fn SetOffsetX_TODO_B(self: *const IDCompositionVisual, offsetX: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetOffsetX_TODO_B(self, offsetX);
    }
    pub fn SetOffsetY_TODO_A(self: *const IDCompositionVisual, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetOffsetY_TODO_A(self, animation);
    }
    pub fn SetOffsetY_TODO_B(self: *const IDCompositionVisual, offsetY: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetOffsetY_TODO_B(self, offsetY);
    }
    pub fn SetTransform_TODO_A(self: *const IDCompositionVisual, transform: ?*IDCompositionTransform) callconv(.Inline) HRESULT {
        return self.vtable.SetTransform_TODO_A(self, transform);
    }
    pub fn SetTransform_TODO_B(self: *const IDCompositionVisual, matrix: ?*const D2D_MATRIX_3X2_F) callconv(.Inline) HRESULT {
        return self.vtable.SetTransform_TODO_B(self, matrix);
    }
    pub fn SetTransformParent(self: *const IDCompositionVisual, visual: ?*IDCompositionVisual) callconv(.Inline) HRESULT {
        return self.vtable.SetTransformParent(self, visual);
    }
    pub fn SetEffect(self: *const IDCompositionVisual, effect: ?*IDCompositionEffect) callconv(.Inline) HRESULT {
        return self.vtable.SetEffect(self, effect);
    }
    pub fn SetBitmapInterpolationMode(self: *const IDCompositionVisual, interpolationMode: DCOMPOSITION_BITMAP_INTERPOLATION_MODE) callconv(.Inline) HRESULT {
        return self.vtable.SetBitmapInterpolationMode(self, interpolationMode);
    }
    pub fn SetBorderMode(self: *const IDCompositionVisual, borderMode: DCOMPOSITION_BORDER_MODE) callconv(.Inline) HRESULT {
        return self.vtable.SetBorderMode(self, borderMode);
    }
    pub fn SetClip_TODO_A(self: *const IDCompositionVisual, clip: ?*IDCompositionClip) callconv(.Inline) HRESULT {
        return self.vtable.SetClip_TODO_A(self, clip);
    }
    pub fn SetClip_TODO_B(self: *const IDCompositionVisual, rect: ?*const D2D_RECT_F) callconv(.Inline) HRESULT {
        return self.vtable.SetClip_TODO_B(self, rect);
    }
    pub fn SetContent(self: *const IDCompositionVisual, content: ?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.SetContent(self, content);
    }
    pub fn AddVisual(self: *const IDCompositionVisual, visual: ?*IDCompositionVisual, insertAbove: BOOL, referenceVisual: ?*IDCompositionVisual) callconv(.Inline) HRESULT {
        return self.vtable.AddVisual(self, visual, insertAbove, referenceVisual);
    }
    pub fn RemoveVisual(self: *const IDCompositionVisual, visual: ?*IDCompositionVisual) callconv(.Inline) HRESULT {
        return self.vtable.RemoveVisual(self, visual);
    }
    pub fn RemoveAllVisuals(self: *const IDCompositionVisual) callconv(.Inline) HRESULT {
        return self.vtable.RemoveAllVisuals(self);
    }
    pub fn SetCompositeMode(self: *const IDCompositionVisual, compositeMode: DCOMPOSITION_COMPOSITE_MODE) callconv(.Inline) HRESULT {
        return self.vtable.SetCompositeMode(self, compositeMode);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionEffect_Value = Guid.initString("ec81b08f-bfcb-4e8d-b193-a915587999e8");
pub const IID_IDCompositionEffect = &IID_IDCompositionEffect_Value;
pub const IDCompositionEffect = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionTransform3D_Value = Guid.initString("71185722-246b-41f2-aad1-0443f7f4bfc2");
pub const IID_IDCompositionTransform3D = &IID_IDCompositionTransform3D_Value;
pub const IDCompositionTransform3D = extern union {
    pub const VTable = extern struct {
        base: IDCompositionEffect.VTable,
    };
    vtable: *const VTable,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionTransform_Value = Guid.initString("fd55faa7-37e0-4c20-95d2-9be45bc33f55");
pub const IID_IDCompositionTransform = &IID_IDCompositionTransform_Value;
pub const IDCompositionTransform = extern union {
    pub const VTable = extern struct {
        base: IDCompositionTransform3D.VTable,
    };
    vtable: *const VTable,
    IDCompositionTransform3D: IDCompositionTransform3D,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionTranslateTransform_Value = Guid.initString("06791122-c6f0-417d-8323-269e987f5954");
pub const IID_IDCompositionTranslateTransform = &IID_IDCompositionTranslateTransform_Value;
pub const IDCompositionTranslateTransform = extern union {
    pub const VTable = extern struct {
        base: IDCompositionTransform.VTable,
        SetOffsetX_TODO_A: *const fn(
            self: *const IDCompositionTranslateTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetX_TODO_B: *const fn(
            self: *const IDCompositionTranslateTransform,
            offsetX: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetY_TODO_A: *const fn(
            self: *const IDCompositionTranslateTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetY_TODO_B: *const fn(
            self: *const IDCompositionTranslateTransform,
            offsetY: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionTransform: IDCompositionTransform,
    IDCompositionTransform3D: IDCompositionTransform3D,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
    pub const SetOffsetY = @compileError("COM method 'SetOffsetY' must be called using one of the following overload names: SetOffsetY_TODO_B, SetOffsetY_TODO_A");
    pub const SetOffsetX = @compileError("COM method 'SetOffsetX' must be called using one of the following overload names: SetOffsetX_TODO_A, SetOffsetX_TODO_B");
    pub fn SetOffsetX_TODO_A(self: *const IDCompositionTranslateTransform, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetOffsetX_TODO_A(self, animation);
    }
    pub fn SetOffsetX_TODO_B(self: *const IDCompositionTranslateTransform, offsetX: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetOffsetX_TODO_B(self, offsetX);
    }
    pub fn SetOffsetY_TODO_A(self: *const IDCompositionTranslateTransform, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetOffsetY_TODO_A(self, animation);
    }
    pub fn SetOffsetY_TODO_B(self: *const IDCompositionTranslateTransform, offsetY: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetOffsetY_TODO_B(self, offsetY);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionScaleTransform_Value = Guid.initString("71fde914-40ef-45ef-bd51-68b037c339f9");
pub const IID_IDCompositionScaleTransform = &IID_IDCompositionScaleTransform_Value;
pub const IDCompositionScaleTransform = extern union {
    pub const VTable = extern struct {
        base: IDCompositionTransform.VTable,
        SetScaleX_TODO_A: *const fn(
            self: *const IDCompositionScaleTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScaleX_TODO_B: *const fn(
            self: *const IDCompositionScaleTransform,
            scaleX: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScaleY_TODO_A: *const fn(
            self: *const IDCompositionScaleTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScaleY_TODO_B: *const fn(
            self: *const IDCompositionScaleTransform,
            scaleY: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterX_TODO_A: *const fn(
            self: *const IDCompositionScaleTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterX_TODO_B: *const fn(
            self: *const IDCompositionScaleTransform,
            centerX: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterY_TODO_A: *const fn(
            self: *const IDCompositionScaleTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterY_TODO_B: *const fn(
            self: *const IDCompositionScaleTransform,
            centerY: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionTransform: IDCompositionTransform,
    IDCompositionTransform3D: IDCompositionTransform3D,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
    pub const SetScaleY = @compileError("COM method 'SetScaleY' must be called using one of the following overload names: SetScaleY_TODO_B, SetScaleY_TODO_A");
    pub const SetCenterY = @compileError("COM method 'SetCenterY' must be called using one of the following overload names: SetCenterY_TODO_A, SetCenterY_TODO_B");
    pub const SetScaleX = @compileError("COM method 'SetScaleX' must be called using one of the following overload names: SetScaleX_TODO_A, SetScaleX_TODO_B");
    pub const SetCenterX = @compileError("COM method 'SetCenterX' must be called using one of the following overload names: SetCenterX_TODO_A, SetCenterX_TODO_B");
    pub fn SetScaleX_TODO_A(self: *const IDCompositionScaleTransform, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetScaleX_TODO_A(self, animation);
    }
    pub fn SetScaleX_TODO_B(self: *const IDCompositionScaleTransform, scaleX: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetScaleX_TODO_B(self, scaleX);
    }
    pub fn SetScaleY_TODO_A(self: *const IDCompositionScaleTransform, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetScaleY_TODO_A(self, animation);
    }
    pub fn SetScaleY_TODO_B(self: *const IDCompositionScaleTransform, scaleY: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetScaleY_TODO_B(self, scaleY);
    }
    pub fn SetCenterX_TODO_A(self: *const IDCompositionScaleTransform, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetCenterX_TODO_A(self, animation);
    }
    pub fn SetCenterX_TODO_B(self: *const IDCompositionScaleTransform, centerX: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetCenterX_TODO_B(self, centerX);
    }
    pub fn SetCenterY_TODO_A(self: *const IDCompositionScaleTransform, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetCenterY_TODO_A(self, animation);
    }
    pub fn SetCenterY_TODO_B(self: *const IDCompositionScaleTransform, centerY: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetCenterY_TODO_B(self, centerY);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionRotateTransform_Value = Guid.initString("641ed83c-ae96-46c5-90dc-32774cc5c6d5");
pub const IID_IDCompositionRotateTransform = &IID_IDCompositionRotateTransform_Value;
pub const IDCompositionRotateTransform = extern union {
    pub const VTable = extern struct {
        base: IDCompositionTransform.VTable,
        SetAngle_TODO_A: *const fn(
            self: *const IDCompositionRotateTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAngle_TODO_B: *const fn(
            self: *const IDCompositionRotateTransform,
            angle: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterX_TODO_A: *const fn(
            self: *const IDCompositionRotateTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterX_TODO_B: *const fn(
            self: *const IDCompositionRotateTransform,
            centerX: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterY_TODO_A: *const fn(
            self: *const IDCompositionRotateTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterY_TODO_B: *const fn(
            self: *const IDCompositionRotateTransform,
            centerY: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionTransform: IDCompositionTransform,
    IDCompositionTransform3D: IDCompositionTransform3D,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
    pub const SetAngle = @compileError("COM method 'SetAngle' must be called using one of the following overload names: SetAngle_TODO_A, SetAngle_TODO_B");
    pub const SetCenterY = @compileError("COM method 'SetCenterY' must be called using one of the following overload names: SetCenterY_TODO_A, SetCenterY_TODO_B");
    pub const SetCenterX = @compileError("COM method 'SetCenterX' must be called using one of the following overload names: SetCenterX_TODO_B, SetCenterX_TODO_A");
    pub fn SetAngle_TODO_A(self: *const IDCompositionRotateTransform, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetAngle_TODO_A(self, animation);
    }
    pub fn SetAngle_TODO_B(self: *const IDCompositionRotateTransform, angle: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetAngle_TODO_B(self, angle);
    }
    pub fn SetCenterX_TODO_A(self: *const IDCompositionRotateTransform, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetCenterX_TODO_A(self, animation);
    }
    pub fn SetCenterX_TODO_B(self: *const IDCompositionRotateTransform, centerX: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetCenterX_TODO_B(self, centerX);
    }
    pub fn SetCenterY_TODO_A(self: *const IDCompositionRotateTransform, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetCenterY_TODO_A(self, animation);
    }
    pub fn SetCenterY_TODO_B(self: *const IDCompositionRotateTransform, centerY: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetCenterY_TODO_B(self, centerY);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionSkewTransform_Value = Guid.initString("e57aa735-dcdb-4c72-9c61-0591f58889ee");
pub const IID_IDCompositionSkewTransform = &IID_IDCompositionSkewTransform_Value;
pub const IDCompositionSkewTransform = extern union {
    pub const VTable = extern struct {
        base: IDCompositionTransform.VTable,
        SetAngleX_TODO_A: *const fn(
            self: *const IDCompositionSkewTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAngleX_TODO_B: *const fn(
            self: *const IDCompositionSkewTransform,
            angleX: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAngleY_TODO_A: *const fn(
            self: *const IDCompositionSkewTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAngleY_TODO_B: *const fn(
            self: *const IDCompositionSkewTransform,
            angleY: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterX_TODO_A: *const fn(
            self: *const IDCompositionSkewTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterX_TODO_B: *const fn(
            self: *const IDCompositionSkewTransform,
            centerX: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterY_TODO_A: *const fn(
            self: *const IDCompositionSkewTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterY_TODO_B: *const fn(
            self: *const IDCompositionSkewTransform,
            centerY: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionTransform: IDCompositionTransform,
    IDCompositionTransform3D: IDCompositionTransform3D,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
    pub const SetAngleX = @compileError("COM method 'SetAngleX' must be called using one of the following overload names: SetAngleX_TODO_A, SetAngleX_TODO_B");
    pub const SetCenterY = @compileError("COM method 'SetCenterY' must be called using one of the following overload names: SetCenterY_TODO_A, SetCenterY_TODO_B");
    pub const SetCenterX = @compileError("COM method 'SetCenterX' must be called using one of the following overload names: SetCenterX_TODO_A, SetCenterX_TODO_B");
    pub const SetAngleY = @compileError("COM method 'SetAngleY' must be called using one of the following overload names: SetAngleY_TODO_B, SetAngleY_TODO_A");
    pub fn SetAngleX_TODO_A(self: *const IDCompositionSkewTransform, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetAngleX_TODO_A(self, animation);
    }
    pub fn SetAngleX_TODO_B(self: *const IDCompositionSkewTransform, angleX: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetAngleX_TODO_B(self, angleX);
    }
    pub fn SetAngleY_TODO_A(self: *const IDCompositionSkewTransform, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetAngleY_TODO_A(self, animation);
    }
    pub fn SetAngleY_TODO_B(self: *const IDCompositionSkewTransform, angleY: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetAngleY_TODO_B(self, angleY);
    }
    pub fn SetCenterX_TODO_A(self: *const IDCompositionSkewTransform, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetCenterX_TODO_A(self, animation);
    }
    pub fn SetCenterX_TODO_B(self: *const IDCompositionSkewTransform, centerX: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetCenterX_TODO_B(self, centerX);
    }
    pub fn SetCenterY_TODO_A(self: *const IDCompositionSkewTransform, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetCenterY_TODO_A(self, animation);
    }
    pub fn SetCenterY_TODO_B(self: *const IDCompositionSkewTransform, centerY: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetCenterY_TODO_B(self, centerY);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionMatrixTransform_Value = Guid.initString("16cdff07-c503-419c-83f2-0965c7af1fa6");
pub const IID_IDCompositionMatrixTransform = &IID_IDCompositionMatrixTransform_Value;
pub const IDCompositionMatrixTransform = extern union {
    pub const VTable = extern struct {
        base: IDCompositionTransform.VTable,
        SetMatrix: *const fn(
            self: *const IDCompositionMatrixTransform,
            matrix: ?*const D2D_MATRIX_3X2_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMatrixElement_TODO_A: *const fn(
            self: *const IDCompositionMatrixTransform,
            row: i32,
            column: i32,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMatrixElement_TODO_B: *const fn(
            self: *const IDCompositionMatrixTransform,
            row: i32,
            column: i32,
            value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionTransform: IDCompositionTransform,
    IDCompositionTransform3D: IDCompositionTransform3D,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
    pub const SetMatrixElement = @compileError("COM method 'SetMatrixElement' must be called using one of the following overload names: SetMatrixElement_TODO_B, SetMatrixElement_TODO_A");
    pub fn SetMatrix(self: *const IDCompositionMatrixTransform, matrix: ?*const D2D_MATRIX_3X2_F) callconv(.Inline) HRESULT {
        return self.vtable.SetMatrix(self, matrix);
    }
    pub fn SetMatrixElement_TODO_A(self: *const IDCompositionMatrixTransform, row: i32, column: i32, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetMatrixElement_TODO_A(self, row, column, animation);
    }
    pub fn SetMatrixElement_TODO_B(self: *const IDCompositionMatrixTransform, row: i32, column: i32, value: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetMatrixElement_TODO_B(self, row, column, value);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionEffectGroup_Value = Guid.initString("a7929a74-e6b2-4bd6-8b95-4040119ca34d");
pub const IID_IDCompositionEffectGroup = &IID_IDCompositionEffectGroup_Value;
pub const IDCompositionEffectGroup = extern union {
    pub const VTable = extern struct {
        base: IDCompositionEffect.VTable,
        SetOpacity_TODO_A: *const fn(
            self: *const IDCompositionEffectGroup,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOpacity_TODO_B: *const fn(
            self: *const IDCompositionEffectGroup,
            opacity: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransform3D: *const fn(
            self: *const IDCompositionEffectGroup,
            transform3D: ?*IDCompositionTransform3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
    pub const SetOpacity = @compileError("COM method 'SetOpacity' must be called using one of the following overload names: SetOpacity_TODO_A, SetOpacity_TODO_B");
    pub fn SetOpacity_TODO_A(self: *const IDCompositionEffectGroup, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetOpacity_TODO_A(self, animation);
    }
    pub fn SetOpacity_TODO_B(self: *const IDCompositionEffectGroup, opacity: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetOpacity_TODO_B(self, opacity);
    }
    pub fn SetTransform3D(self: *const IDCompositionEffectGroup, transform3D: ?*IDCompositionTransform3D) callconv(.Inline) HRESULT {
        return self.vtable.SetTransform3D(self, transform3D);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionTranslateTransform3D_Value = Guid.initString("91636d4b-9ba1-4532-aaf7-e3344994d788");
pub const IID_IDCompositionTranslateTransform3D = &IID_IDCompositionTranslateTransform3D_Value;
pub const IDCompositionTranslateTransform3D = extern union {
    pub const VTable = extern struct {
        base: IDCompositionTransform3D.VTable,
        SetOffsetX_TODO_A: *const fn(
            self: *const IDCompositionTranslateTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetX_TODO_B: *const fn(
            self: *const IDCompositionTranslateTransform3D,
            offsetX: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetY_TODO_A: *const fn(
            self: *const IDCompositionTranslateTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetY_TODO_B: *const fn(
            self: *const IDCompositionTranslateTransform3D,
            offsetY: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetZ_TODO_A: *const fn(
            self: *const IDCompositionTranslateTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetZ_TODO_B: *const fn(
            self: *const IDCompositionTranslateTransform3D,
            offsetZ: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionTransform3D: IDCompositionTransform3D,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
    pub const SetOffsetY = @compileError("COM method 'SetOffsetY' must be called using one of the following overload names: SetOffsetY_TODO_B, SetOffsetY_TODO_A");
    pub const SetOffsetZ = @compileError("COM method 'SetOffsetZ' must be called using one of the following overload names: SetOffsetZ_TODO_A, SetOffsetZ_TODO_B");
    pub const SetOffsetX = @compileError("COM method 'SetOffsetX' must be called using one of the following overload names: SetOffsetX_TODO_A, SetOffsetX_TODO_B");
    pub fn SetOffsetX_TODO_A(self: *const IDCompositionTranslateTransform3D, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetOffsetX_TODO_A(self, animation);
    }
    pub fn SetOffsetX_TODO_B(self: *const IDCompositionTranslateTransform3D, offsetX: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetOffsetX_TODO_B(self, offsetX);
    }
    pub fn SetOffsetY_TODO_A(self: *const IDCompositionTranslateTransform3D, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetOffsetY_TODO_A(self, animation);
    }
    pub fn SetOffsetY_TODO_B(self: *const IDCompositionTranslateTransform3D, offsetY: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetOffsetY_TODO_B(self, offsetY);
    }
    pub fn SetOffsetZ_TODO_A(self: *const IDCompositionTranslateTransform3D, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetOffsetZ_TODO_A(self, animation);
    }
    pub fn SetOffsetZ_TODO_B(self: *const IDCompositionTranslateTransform3D, offsetZ: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetOffsetZ_TODO_B(self, offsetZ);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionScaleTransform3D_Value = Guid.initString("2a9e9ead-364b-4b15-a7c4-a1997f78b389");
pub const IID_IDCompositionScaleTransform3D = &IID_IDCompositionScaleTransform3D_Value;
pub const IDCompositionScaleTransform3D = extern union {
    pub const VTable = extern struct {
        base: IDCompositionTransform3D.VTable,
        SetScaleX_TODO_A: *const fn(
            self: *const IDCompositionScaleTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScaleX_TODO_B: *const fn(
            self: *const IDCompositionScaleTransform3D,
            scaleX: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScaleY_TODO_A: *const fn(
            self: *const IDCompositionScaleTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScaleY_TODO_B: *const fn(
            self: *const IDCompositionScaleTransform3D,
            scaleY: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScaleZ_TODO_A: *const fn(
            self: *const IDCompositionScaleTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScaleZ_TODO_B: *const fn(
            self: *const IDCompositionScaleTransform3D,
            scaleZ: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterX_TODO_A: *const fn(
            self: *const IDCompositionScaleTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterX_TODO_B: *const fn(
            self: *const IDCompositionScaleTransform3D,
            centerX: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterY_TODO_A: *const fn(
            self: *const IDCompositionScaleTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterY_TODO_B: *const fn(
            self: *const IDCompositionScaleTransform3D,
            centerY: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterZ_TODO_A: *const fn(
            self: *const IDCompositionScaleTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterZ_TODO_B: *const fn(
            self: *const IDCompositionScaleTransform3D,
            centerZ: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionTransform3D: IDCompositionTransform3D,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
    pub const SetCenterZ = @compileError("COM method 'SetCenterZ' must be called using one of the following overload names: SetCenterZ_TODO_B, SetCenterZ_TODO_A");
    pub const SetScaleX = @compileError("COM method 'SetScaleX' must be called using one of the following overload names: SetScaleX_TODO_A, SetScaleX_TODO_B");
    pub const SetCenterX = @compileError("COM method 'SetCenterX' must be called using one of the following overload names: SetCenterX_TODO_A, SetCenterX_TODO_B");
    pub const SetScaleY = @compileError("COM method 'SetScaleY' must be called using one of the following overload names: SetScaleY_TODO_B, SetScaleY_TODO_A");
    pub const SetCenterY = @compileError("COM method 'SetCenterY' must be called using one of the following overload names: SetCenterY_TODO_A, SetCenterY_TODO_B");
    pub const SetScaleZ = @compileError("COM method 'SetScaleZ' must be called using one of the following overload names: SetScaleZ_TODO_A, SetScaleZ_TODO_B");
    pub fn SetScaleX_TODO_A(self: *const IDCompositionScaleTransform3D, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetScaleX_TODO_A(self, animation);
    }
    pub fn SetScaleX_TODO_B(self: *const IDCompositionScaleTransform3D, scaleX: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetScaleX_TODO_B(self, scaleX);
    }
    pub fn SetScaleY_TODO_A(self: *const IDCompositionScaleTransform3D, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetScaleY_TODO_A(self, animation);
    }
    pub fn SetScaleY_TODO_B(self: *const IDCompositionScaleTransform3D, scaleY: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetScaleY_TODO_B(self, scaleY);
    }
    pub fn SetScaleZ_TODO_A(self: *const IDCompositionScaleTransform3D, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetScaleZ_TODO_A(self, animation);
    }
    pub fn SetScaleZ_TODO_B(self: *const IDCompositionScaleTransform3D, scaleZ: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetScaleZ_TODO_B(self, scaleZ);
    }
    pub fn SetCenterX_TODO_A(self: *const IDCompositionScaleTransform3D, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetCenterX_TODO_A(self, animation);
    }
    pub fn SetCenterX_TODO_B(self: *const IDCompositionScaleTransform3D, centerX: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetCenterX_TODO_B(self, centerX);
    }
    pub fn SetCenterY_TODO_A(self: *const IDCompositionScaleTransform3D, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetCenterY_TODO_A(self, animation);
    }
    pub fn SetCenterY_TODO_B(self: *const IDCompositionScaleTransform3D, centerY: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetCenterY_TODO_B(self, centerY);
    }
    pub fn SetCenterZ_TODO_A(self: *const IDCompositionScaleTransform3D, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetCenterZ_TODO_A(self, animation);
    }
    pub fn SetCenterZ_TODO_B(self: *const IDCompositionScaleTransform3D, centerZ: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetCenterZ_TODO_B(self, centerZ);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionRotateTransform3D_Value = Guid.initString("d8f5b23f-d429-4a91-b55a-d2f45fd75b18");
pub const IID_IDCompositionRotateTransform3D = &IID_IDCompositionRotateTransform3D_Value;
pub const IDCompositionRotateTransform3D = extern union {
    pub const VTable = extern struct {
        base: IDCompositionTransform3D.VTable,
        SetAngle_TODO_A: *const fn(
            self: *const IDCompositionRotateTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAngle_TODO_B: *const fn(
            self: *const IDCompositionRotateTransform3D,
            angle: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAxisX_TODO_A: *const fn(
            self: *const IDCompositionRotateTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAxisX_TODO_B: *const fn(
            self: *const IDCompositionRotateTransform3D,
            axisX: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAxisY_TODO_A: *const fn(
            self: *const IDCompositionRotateTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAxisY_TODO_B: *const fn(
            self: *const IDCompositionRotateTransform3D,
            axisY: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAxisZ_TODO_A: *const fn(
            self: *const IDCompositionRotateTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAxisZ_TODO_B: *const fn(
            self: *const IDCompositionRotateTransform3D,
            axisZ: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterX_TODO_A: *const fn(
            self: *const IDCompositionRotateTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterX_TODO_B: *const fn(
            self: *const IDCompositionRotateTransform3D,
            centerX: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterY_TODO_A: *const fn(
            self: *const IDCompositionRotateTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterY_TODO_B: *const fn(
            self: *const IDCompositionRotateTransform3D,
            centerY: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterZ_TODO_A: *const fn(
            self: *const IDCompositionRotateTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterZ_TODO_B: *const fn(
            self: *const IDCompositionRotateTransform3D,
            centerZ: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionTransform3D: IDCompositionTransform3D,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
    pub const SetAxisZ = @compileError("COM method 'SetAxisZ' must be called using one of the following overload names: SetAxisZ_TODO_A, SetAxisZ_TODO_B");
    pub const SetCenterZ = @compileError("COM method 'SetCenterZ' must be called using one of the following overload names: SetCenterZ_TODO_A, SetCenterZ_TODO_B");
    pub const SetCenterX = @compileError("COM method 'SetCenterX' must be called using one of the following overload names: SetCenterX_TODO_A, SetCenterX_TODO_B");
    pub const SetAngle = @compileError("COM method 'SetAngle' must be called using one of the following overload names: SetAngle_TODO_A, SetAngle_TODO_B");
    pub const SetAxisX = @compileError("COM method 'SetAxisX' must be called using one of the following overload names: SetAxisX_TODO_B, SetAxisX_TODO_A");
    pub const SetAxisY = @compileError("COM method 'SetAxisY' must be called using one of the following overload names: SetAxisY_TODO_A, SetAxisY_TODO_B");
    pub const SetCenterY = @compileError("COM method 'SetCenterY' must be called using one of the following overload names: SetCenterY_TODO_B, SetCenterY_TODO_A");
    pub fn SetAngle_TODO_A(self: *const IDCompositionRotateTransform3D, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetAngle_TODO_A(self, animation);
    }
    pub fn SetAngle_TODO_B(self: *const IDCompositionRotateTransform3D, angle: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetAngle_TODO_B(self, angle);
    }
    pub fn SetAxisX_TODO_A(self: *const IDCompositionRotateTransform3D, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetAxisX_TODO_A(self, animation);
    }
    pub fn SetAxisX_TODO_B(self: *const IDCompositionRotateTransform3D, axisX: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetAxisX_TODO_B(self, axisX);
    }
    pub fn SetAxisY_TODO_A(self: *const IDCompositionRotateTransform3D, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetAxisY_TODO_A(self, animation);
    }
    pub fn SetAxisY_TODO_B(self: *const IDCompositionRotateTransform3D, axisY: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetAxisY_TODO_B(self, axisY);
    }
    pub fn SetAxisZ_TODO_A(self: *const IDCompositionRotateTransform3D, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetAxisZ_TODO_A(self, animation);
    }
    pub fn SetAxisZ_TODO_B(self: *const IDCompositionRotateTransform3D, axisZ: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetAxisZ_TODO_B(self, axisZ);
    }
    pub fn SetCenterX_TODO_A(self: *const IDCompositionRotateTransform3D, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetCenterX_TODO_A(self, animation);
    }
    pub fn SetCenterX_TODO_B(self: *const IDCompositionRotateTransform3D, centerX: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetCenterX_TODO_B(self, centerX);
    }
    pub fn SetCenterY_TODO_A(self: *const IDCompositionRotateTransform3D, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetCenterY_TODO_A(self, animation);
    }
    pub fn SetCenterY_TODO_B(self: *const IDCompositionRotateTransform3D, centerY: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetCenterY_TODO_B(self, centerY);
    }
    pub fn SetCenterZ_TODO_A(self: *const IDCompositionRotateTransform3D, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetCenterZ_TODO_A(self, animation);
    }
    pub fn SetCenterZ_TODO_B(self: *const IDCompositionRotateTransform3D, centerZ: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetCenterZ_TODO_B(self, centerZ);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionMatrixTransform3D_Value = Guid.initString("4b3363f0-643b-41b7-b6e0-ccf22d34467c");
pub const IID_IDCompositionMatrixTransform3D = &IID_IDCompositionMatrixTransform3D_Value;
pub const IDCompositionMatrixTransform3D = extern union {
    pub const VTable = extern struct {
        base: IDCompositionTransform3D.VTable,
        SetMatrix: *const fn(
            self: *const IDCompositionMatrixTransform3D,
            matrix: ?*const D3DMATRIX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMatrixElement_TODO_A: *const fn(
            self: *const IDCompositionMatrixTransform3D,
            row: i32,
            column: i32,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMatrixElement_TODO_B: *const fn(
            self: *const IDCompositionMatrixTransform3D,
            row: i32,
            column: i32,
            value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionTransform3D: IDCompositionTransform3D,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
    pub const SetMatrixElement = @compileError("COM method 'SetMatrixElement' must be called using one of the following overload names: SetMatrixElement_TODO_B, SetMatrixElement_TODO_A");
    pub fn SetMatrix(self: *const IDCompositionMatrixTransform3D, matrix: ?*const D3DMATRIX) callconv(.Inline) HRESULT {
        return self.vtable.SetMatrix(self, matrix);
    }
    pub fn SetMatrixElement_TODO_A(self: *const IDCompositionMatrixTransform3D, row: i32, column: i32, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetMatrixElement_TODO_A(self, row, column, animation);
    }
    pub fn SetMatrixElement_TODO_B(self: *const IDCompositionMatrixTransform3D, row: i32, column: i32, value: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetMatrixElement_TODO_B(self, row, column, value);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionClip_Value = Guid.initString("64ac3703-9d3f-45ec-a109-7cac0e7a13a7");
pub const IID_IDCompositionClip = &IID_IDCompositionClip_Value;
pub const IDCompositionClip = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionRectangleClip_Value = Guid.initString("9842ad7d-d9cf-4908-aed7-48b51da5e7c2");
pub const IID_IDCompositionRectangleClip = &IID_IDCompositionRectangleClip_Value;
pub const IDCompositionRectangleClip = extern union {
    pub const VTable = extern struct {
        base: IDCompositionClip.VTable,
        SetLeft_TODO_A: *const fn(
            self: *const IDCompositionRectangleClip,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLeft_TODO_B: *const fn(
            self: *const IDCompositionRectangleClip,
            left: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTop_TODO_A: *const fn(
            self: *const IDCompositionRectangleClip,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTop_TODO_B: *const fn(
            self: *const IDCompositionRectangleClip,
            top: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRight_TODO_A: *const fn(
            self: *const IDCompositionRectangleClip,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRight_TODO_B: *const fn(
            self: *const IDCompositionRectangleClip,
            right: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBottom_TODO_A: *const fn(
            self: *const IDCompositionRectangleClip,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBottom_TODO_B: *const fn(
            self: *const IDCompositionRectangleClip,
            bottom: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTopLeftRadiusX_TODO_A: *const fn(
            self: *const IDCompositionRectangleClip,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTopLeftRadiusX_TODO_B: *const fn(
            self: *const IDCompositionRectangleClip,
            radius: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTopLeftRadiusY_TODO_A: *const fn(
            self: *const IDCompositionRectangleClip,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTopLeftRadiusY_TODO_B: *const fn(
            self: *const IDCompositionRectangleClip,
            radius: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTopRightRadiusX_TODO_A: *const fn(
            self: *const IDCompositionRectangleClip,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTopRightRadiusX_TODO_B: *const fn(
            self: *const IDCompositionRectangleClip,
            radius: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTopRightRadiusY_TODO_A: *const fn(
            self: *const IDCompositionRectangleClip,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTopRightRadiusY_TODO_B: *const fn(
            self: *const IDCompositionRectangleClip,
            radius: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBottomLeftRadiusX_TODO_A: *const fn(
            self: *const IDCompositionRectangleClip,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBottomLeftRadiusX_TODO_B: *const fn(
            self: *const IDCompositionRectangleClip,
            radius: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBottomLeftRadiusY_TODO_A: *const fn(
            self: *const IDCompositionRectangleClip,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBottomLeftRadiusY_TODO_B: *const fn(
            self: *const IDCompositionRectangleClip,
            radius: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBottomRightRadiusX_TODO_A: *const fn(
            self: *const IDCompositionRectangleClip,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBottomRightRadiusX_TODO_B: *const fn(
            self: *const IDCompositionRectangleClip,
            radius: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBottomRightRadiusY_TODO_A: *const fn(
            self: *const IDCompositionRectangleClip,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBottomRightRadiusY_TODO_B: *const fn(
            self: *const IDCompositionRectangleClip,
            radius: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionClip: IDCompositionClip,
    IUnknown: IUnknown,
    pub const SetTop = @compileError("COM method 'SetTop' must be called using one of the following overload names: SetTop_TODO_B, SetTop_TODO_A");
    pub const SetBottomRightRadiusY = @compileError("COM method 'SetBottomRightRadiusY' must be called using one of the following overload names: SetBottomRightRadiusY_TODO_A, SetBottomRightRadiusY_TODO_B");
    pub const SetBottomRightRadiusX = @compileError("COM method 'SetBottomRightRadiusX' must be called using one of the following overload names: SetBottomRightRadiusX_TODO_B, SetBottomRightRadiusX_TODO_A");
    pub const SetTopRightRadiusY = @compileError("COM method 'SetTopRightRadiusY' must be called using one of the following overload names: SetTopRightRadiusY_TODO_B, SetTopRightRadiusY_TODO_A");
    pub const SetLeft = @compileError("COM method 'SetLeft' must be called using one of the following overload names: SetLeft_TODO_A, SetLeft_TODO_B");
    pub const SetTopLeftRadiusY = @compileError("COM method 'SetTopLeftRadiusY' must be called using one of the following overload names: SetTopLeftRadiusY_TODO_B, SetTopLeftRadiusY_TODO_A");
    pub const SetBottomLeftRadiusY = @compileError("COM method 'SetBottomLeftRadiusY' must be called using one of the following overload names: SetBottomLeftRadiusY_TODO_A, SetBottomLeftRadiusY_TODO_B");
    pub const SetBottom = @compileError("COM method 'SetBottom' must be called using one of the following overload names: SetBottom_TODO_A, SetBottom_TODO_B");
    pub const SetBottomLeftRadiusX = @compileError("COM method 'SetBottomLeftRadiusX' must be called using one of the following overload names: SetBottomLeftRadiusX_TODO_A, SetBottomLeftRadiusX_TODO_B");
    pub const SetRight = @compileError("COM method 'SetRight' must be called using one of the following overload names: SetRight_TODO_A, SetRight_TODO_B");
    pub const SetTopLeftRadiusX = @compileError("COM method 'SetTopLeftRadiusX' must be called using one of the following overload names: SetTopLeftRadiusX_TODO_A, SetTopLeftRadiusX_TODO_B");
    pub const SetTopRightRadiusX = @compileError("COM method 'SetTopRightRadiusX' must be called using one of the following overload names: SetTopRightRadiusX_TODO_A, SetTopRightRadiusX_TODO_B");
    pub fn SetLeft_TODO_A(self: *const IDCompositionRectangleClip, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetLeft_TODO_A(self, animation);
    }
    pub fn SetLeft_TODO_B(self: *const IDCompositionRectangleClip, left: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetLeft_TODO_B(self, left);
    }
    pub fn SetTop_TODO_A(self: *const IDCompositionRectangleClip, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetTop_TODO_A(self, animation);
    }
    pub fn SetTop_TODO_B(self: *const IDCompositionRectangleClip, top: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetTop_TODO_B(self, top);
    }
    pub fn SetRight_TODO_A(self: *const IDCompositionRectangleClip, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetRight_TODO_A(self, animation);
    }
    pub fn SetRight_TODO_B(self: *const IDCompositionRectangleClip, right: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetRight_TODO_B(self, right);
    }
    pub fn SetBottom_TODO_A(self: *const IDCompositionRectangleClip, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetBottom_TODO_A(self, animation);
    }
    pub fn SetBottom_TODO_B(self: *const IDCompositionRectangleClip, bottom: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetBottom_TODO_B(self, bottom);
    }
    pub fn SetTopLeftRadiusX_TODO_A(self: *const IDCompositionRectangleClip, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetTopLeftRadiusX_TODO_A(self, animation);
    }
    pub fn SetTopLeftRadiusX_TODO_B(self: *const IDCompositionRectangleClip, radius: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetTopLeftRadiusX_TODO_B(self, radius);
    }
    pub fn SetTopLeftRadiusY_TODO_A(self: *const IDCompositionRectangleClip, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetTopLeftRadiusY_TODO_A(self, animation);
    }
    pub fn SetTopLeftRadiusY_TODO_B(self: *const IDCompositionRectangleClip, radius: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetTopLeftRadiusY_TODO_B(self, radius);
    }
    pub fn SetTopRightRadiusX_TODO_A(self: *const IDCompositionRectangleClip, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetTopRightRadiusX_TODO_A(self, animation);
    }
    pub fn SetTopRightRadiusX_TODO_B(self: *const IDCompositionRectangleClip, radius: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetTopRightRadiusX_TODO_B(self, radius);
    }
    pub fn SetTopRightRadiusY_TODO_A(self: *const IDCompositionRectangleClip, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetTopRightRadiusY_TODO_A(self, animation);
    }
    pub fn SetTopRightRadiusY_TODO_B(self: *const IDCompositionRectangleClip, radius: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetTopRightRadiusY_TODO_B(self, radius);
    }
    pub fn SetBottomLeftRadiusX_TODO_A(self: *const IDCompositionRectangleClip, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetBottomLeftRadiusX_TODO_A(self, animation);
    }
    pub fn SetBottomLeftRadiusX_TODO_B(self: *const IDCompositionRectangleClip, radius: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetBottomLeftRadiusX_TODO_B(self, radius);
    }
    pub fn SetBottomLeftRadiusY_TODO_A(self: *const IDCompositionRectangleClip, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetBottomLeftRadiusY_TODO_A(self, animation);
    }
    pub fn SetBottomLeftRadiusY_TODO_B(self: *const IDCompositionRectangleClip, radius: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetBottomLeftRadiusY_TODO_B(self, radius);
    }
    pub fn SetBottomRightRadiusX_TODO_A(self: *const IDCompositionRectangleClip, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetBottomRightRadiusX_TODO_A(self, animation);
    }
    pub fn SetBottomRightRadiusX_TODO_B(self: *const IDCompositionRectangleClip, radius: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetBottomRightRadiusX_TODO_B(self, radius);
    }
    pub fn SetBottomRightRadiusY_TODO_A(self: *const IDCompositionRectangleClip, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetBottomRightRadiusY_TODO_A(self, animation);
    }
    pub fn SetBottomRightRadiusY_TODO_B(self: *const IDCompositionRectangleClip, radius: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetBottomRightRadiusY_TODO_B(self, radius);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionSurface_Value = Guid.initString("bb8a4953-2c99-4f5a-96f5-4819027fa3ac");
pub const IID_IDCompositionSurface = &IID_IDCompositionSurface_Value;
pub const IDCompositionSurface = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BeginDraw: *const fn(
            self: *const IDCompositionSurface,
            updateRect: ?*const RECT,
            iid: ?*const Guid,
            updateObject: ?*?*anyopaque,
            updateOffset: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndDraw: *const fn(
            self: *const IDCompositionSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SuspendDraw: *const fn(
            self: *const IDCompositionSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResumeDraw: *const fn(
            self: *const IDCompositionSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Scroll: *const fn(
            self: *const IDCompositionSurface,
            scrollRect: ?*const RECT,
            clipRect: ?*const RECT,
            offsetX: i32,
            offsetY: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn BeginDraw(self: *const IDCompositionSurface, updateRect: ?*const RECT, iid: ?*const Guid, updateObject: ?*?*anyopaque, updateOffset: ?*POINT) callconv(.Inline) HRESULT {
        return self.vtable.BeginDraw(self, updateRect, iid, updateObject, updateOffset);
    }
    pub fn EndDraw(self: *const IDCompositionSurface) callconv(.Inline) HRESULT {
        return self.vtable.EndDraw(self);
    }
    pub fn SuspendDraw(self: *const IDCompositionSurface) callconv(.Inline) HRESULT {
        return self.vtable.SuspendDraw(self);
    }
    pub fn ResumeDraw(self: *const IDCompositionSurface) callconv(.Inline) HRESULT {
        return self.vtable.ResumeDraw(self);
    }
    pub fn Scroll(self: *const IDCompositionSurface, scrollRect: ?*const RECT, clipRect: ?*const RECT, offsetX: i32, offsetY: i32) callconv(.Inline) HRESULT {
        return self.vtable.Scroll(self, scrollRect, clipRect, offsetX, offsetY);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionVirtualSurface_Value = Guid.initString("ae471c51-5f53-4a24-8d3e-d0c39c30b3f0");
pub const IID_IDCompositionVirtualSurface = &IID_IDCompositionVirtualSurface_Value;
pub const IDCompositionVirtualSurface = extern union {
    pub const VTable = extern struct {
        base: IDCompositionSurface.VTable,
        Resize: *const fn(
            self: *const IDCompositionVirtualSurface,
            width: u32,
            height: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Trim: *const fn(
            self: *const IDCompositionVirtualSurface,
            rectangles: ?[*]const RECT,
            count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionSurface: IDCompositionSurface,
    IUnknown: IUnknown,
    pub fn Resize(self: *const IDCompositionVirtualSurface, width: u32, height: u32) callconv(.Inline) HRESULT {
        return self.vtable.Resize(self, width, height);
    }
    pub fn Trim(self: *const IDCompositionVirtualSurface, rectangles: ?[*]const RECT, count: u32) callconv(.Inline) HRESULT {
        return self.vtable.Trim(self, rectangles, count);
    }
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDCompositionDevice2_Value = Guid.initString("75f6468d-1b8e-447c-9bc6-75fea80b5b25");
pub const IID_IDCompositionDevice2 = &IID_IDCompositionDevice2_Value;
pub const IDCompositionDevice2 = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Commit: *const fn(
            self: *const IDCompositionDevice2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WaitForCommitCompletion: *const fn(
            self: *const IDCompositionDevice2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFrameStatistics: *const fn(
            self: *const IDCompositionDevice2,
            statistics: ?*DCOMPOSITION_FRAME_STATISTICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVisual: *const fn(
            self: *const IDCompositionDevice2,
            visual: ?*?*IDCompositionVisual2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSurfaceFactory: *const fn(
            self: *const IDCompositionDevice2,
            renderingDevice: ?*IUnknown,
            surfaceFactory: ?*?*IDCompositionSurfaceFactory,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSurface: *const fn(
            self: *const IDCompositionDevice2,
            width: u32,
            height: u32,
            pixelFormat: DXGI_FORMAT,
            alphaMode: DXGI_ALPHA_MODE,
            surface: ?*?*IDCompositionSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVirtualSurface: *const fn(
            self: *const IDCompositionDevice2,
            initialWidth: u32,
            initialHeight: u32,
            pixelFormat: DXGI_FORMAT,
            alphaMode: DXGI_ALPHA_MODE,
            virtualSurface: ?*?*IDCompositionVirtualSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTranslateTransform: *const fn(
            self: *const IDCompositionDevice2,
            translateTransform: ?*?*IDCompositionTranslateTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateScaleTransform: *const fn(
            self: *const IDCompositionDevice2,
            scaleTransform: ?*?*IDCompositionScaleTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRotateTransform: *const fn(
            self: *const IDCompositionDevice2,
            rotateTransform: ?*?*IDCompositionRotateTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSkewTransform: *const fn(
            self: *const IDCompositionDevice2,
            skewTransform: ?*?*IDCompositionSkewTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMatrixTransform: *const fn(
            self: *const IDCompositionDevice2,
            matrixTransform: ?*?*IDCompositionMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTransformGroup: *const fn(
            self: *const IDCompositionDevice2,
            transforms: [*]?*IDCompositionTransform,
            elements: u32,
            transformGroup: ?*?*IDCompositionTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTranslateTransform3D: *const fn(
            self: *const IDCompositionDevice2,
            translateTransform3D: ?*?*IDCompositionTranslateTransform3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateScaleTransform3D: *const fn(
            self: *const IDCompositionDevice2,
            scaleTransform3D: ?*?*IDCompositionScaleTransform3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRotateTransform3D: *const fn(
            self: *const IDCompositionDevice2,
            rotateTransform3D: ?*?*IDCompositionRotateTransform3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMatrixTransform3D: *const fn(
            self: *const IDCompositionDevice2,
            matrixTransform3D: ?*?*IDCompositionMatrixTransform3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTransform3DGroup: *const fn(
            self: *const IDCompositionDevice2,
            transforms3D: [*]?*IDCompositionTransform3D,
            elements: u32,
            transform3DGroup: ?*?*IDCompositionTransform3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEffectGroup: *const fn(
            self: *const IDCompositionDevice2,
            effectGroup: ?*?*IDCompositionEffectGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRectangleClip: *const fn(
            self: *const IDCompositionDevice2,
            clip: ?*?*IDCompositionRectangleClip,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateAnimation: *const fn(
            self: *const IDCompositionDevice2,
            animation: ?*?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Commit(self: *const IDCompositionDevice2) callconv(.Inline) HRESULT {
        return self.vtable.Commit(self);
    }
    pub fn WaitForCommitCompletion(self: *const IDCompositionDevice2) callconv(.Inline) HRESULT {
        return self.vtable.WaitForCommitCompletion(self);
    }
    pub fn GetFrameStatistics(self: *const IDCompositionDevice2, statistics: ?*DCOMPOSITION_FRAME_STATISTICS) callconv(.Inline) HRESULT {
        return self.vtable.GetFrameStatistics(self, statistics);
    }
    pub fn CreateVisual(self: *const IDCompositionDevice2, visual: ?*?*IDCompositionVisual2) callconv(.Inline) HRESULT {
        return self.vtable.CreateVisual(self, visual);
    }
    pub fn CreateSurfaceFactory(self: *const IDCompositionDevice2, renderingDevice: ?*IUnknown, surfaceFactory: ?*?*IDCompositionSurfaceFactory) callconv(.Inline) HRESULT {
        return self.vtable.CreateSurfaceFactory(self, renderingDevice, surfaceFactory);
    }
    pub fn CreateSurface(self: *const IDCompositionDevice2, width: u32, height: u32, pixelFormat: DXGI_FORMAT, alphaMode: DXGI_ALPHA_MODE, surface: ?*?*IDCompositionSurface) callconv(.Inline) HRESULT {
        return self.vtable.CreateSurface(self, width, height, pixelFormat, alphaMode, surface);
    }
    pub fn CreateVirtualSurface(self: *const IDCompositionDevice2, initialWidth: u32, initialHeight: u32, pixelFormat: DXGI_FORMAT, alphaMode: DXGI_ALPHA_MODE, virtualSurface: ?*?*IDCompositionVirtualSurface) callconv(.Inline) HRESULT {
        return self.vtable.CreateVirtualSurface(self, initialWidth, initialHeight, pixelFormat, alphaMode, virtualSurface);
    }
    pub fn CreateTranslateTransform(self: *const IDCompositionDevice2, translateTransform: ?*?*IDCompositionTranslateTransform) callconv(.Inline) HRESULT {
        return self.vtable.CreateTranslateTransform(self, translateTransform);
    }
    pub fn CreateScaleTransform(self: *const IDCompositionDevice2, scaleTransform: ?*?*IDCompositionScaleTransform) callconv(.Inline) HRESULT {
        return self.vtable.CreateScaleTransform(self, scaleTransform);
    }
    pub fn CreateRotateTransform(self: *const IDCompositionDevice2, rotateTransform: ?*?*IDCompositionRotateTransform) callconv(.Inline) HRESULT {
        return self.vtable.CreateRotateTransform(self, rotateTransform);
    }
    pub fn CreateSkewTransform(self: *const IDCompositionDevice2, skewTransform: ?*?*IDCompositionSkewTransform) callconv(.Inline) HRESULT {
        return self.vtable.CreateSkewTransform(self, skewTransform);
    }
    pub fn CreateMatrixTransform(self: *const IDCompositionDevice2, matrixTransform: ?*?*IDCompositionMatrixTransform) callconv(.Inline) HRESULT {
        return self.vtable.CreateMatrixTransform(self, matrixTransform);
    }
    pub fn CreateTransformGroup(self: *const IDCompositionDevice2, transforms: [*]?*IDCompositionTransform, elements: u32, transformGroup: ?*?*IDCompositionTransform) callconv(.Inline) HRESULT {
        return self.vtable.CreateTransformGroup(self, transforms, elements, transformGroup);
    }
    pub fn CreateTranslateTransform3D(self: *const IDCompositionDevice2, translateTransform3D: ?*?*IDCompositionTranslateTransform3D) callconv(.Inline) HRESULT {
        return self.vtable.CreateTranslateTransform3D(self, translateTransform3D);
    }
    pub fn CreateScaleTransform3D(self: *const IDCompositionDevice2, scaleTransform3D: ?*?*IDCompositionScaleTransform3D) callconv(.Inline) HRESULT {
        return self.vtable.CreateScaleTransform3D(self, scaleTransform3D);
    }
    pub fn CreateRotateTransform3D(self: *const IDCompositionDevice2, rotateTransform3D: ?*?*IDCompositionRotateTransform3D) callconv(.Inline) HRESULT {
        return self.vtable.CreateRotateTransform3D(self, rotateTransform3D);
    }
    pub fn CreateMatrixTransform3D(self: *const IDCompositionDevice2, matrixTransform3D: ?*?*IDCompositionMatrixTransform3D) callconv(.Inline) HRESULT {
        return self.vtable.CreateMatrixTransform3D(self, matrixTransform3D);
    }
    pub fn CreateTransform3DGroup(self: *const IDCompositionDevice2, transforms3D: [*]?*IDCompositionTransform3D, elements: u32, transform3DGroup: ?*?*IDCompositionTransform3D) callconv(.Inline) HRESULT {
        return self.vtable.CreateTransform3DGroup(self, transforms3D, elements, transform3DGroup);
    }
    pub fn CreateEffectGroup(self: *const IDCompositionDevice2, effectGroup: ?*?*IDCompositionEffectGroup) callconv(.Inline) HRESULT {
        return self.vtable.CreateEffectGroup(self, effectGroup);
    }
    pub fn CreateRectangleClip(self: *const IDCompositionDevice2, clip: ?*?*IDCompositionRectangleClip) callconv(.Inline) HRESULT {
        return self.vtable.CreateRectangleClip(self, clip);
    }
    pub fn CreateAnimation(self: *const IDCompositionDevice2, animation: ?*?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.CreateAnimation(self, animation);
    }
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDCompositionDesktopDevice_Value = Guid.initString("5f4633fe-1e08-4cb8-8c75-ce24333f5602");
pub const IID_IDCompositionDesktopDevice = &IID_IDCompositionDesktopDevice_Value;
pub const IDCompositionDesktopDevice = extern union {
    pub const VTable = extern struct {
        base: IDCompositionDevice2.VTable,
        CreateTargetForHwnd: *const fn(
            self: *const IDCompositionDesktopDevice,
            hwnd: ?HWND,
            topmost: BOOL,
            target: ?*?*IDCompositionTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSurfaceFromHandle: *const fn(
            self: *const IDCompositionDesktopDevice,
            handle: ?HANDLE,
            surface: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSurfaceFromHwnd: *const fn(
            self: *const IDCompositionDesktopDevice,
            hwnd: ?HWND,
            surface: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionDevice2: IDCompositionDevice2,
    IUnknown: IUnknown,
    pub fn CreateTargetForHwnd(self: *const IDCompositionDesktopDevice, hwnd: ?HWND, topmost: BOOL, target: ?*?*IDCompositionTarget) callconv(.Inline) HRESULT {
        return self.vtable.CreateTargetForHwnd(self, hwnd, topmost, target);
    }
    pub fn CreateSurfaceFromHandle(self: *const IDCompositionDesktopDevice, handle: ?HANDLE, surface: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.CreateSurfaceFromHandle(self, handle, surface);
    }
    pub fn CreateSurfaceFromHwnd(self: *const IDCompositionDesktopDevice, hwnd: ?HWND, surface: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.CreateSurfaceFromHwnd(self, hwnd, surface);
    }
};

const IID_IDCompositionDeviceDebug_Value = Guid.initString("a1a3c64a-224f-4a81-9773-4f03a89d3c6c");
pub const IID_IDCompositionDeviceDebug = &IID_IDCompositionDeviceDebug_Value;
pub const IDCompositionDeviceDebug = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnableDebugCounters: *const fn(
            self: *const IDCompositionDeviceDebug,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisableDebugCounters: *const fn(
            self: *const IDCompositionDeviceDebug,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn EnableDebugCounters(self: *const IDCompositionDeviceDebug) callconv(.Inline) HRESULT {
        return self.vtable.EnableDebugCounters(self);
    }
    pub fn DisableDebugCounters(self: *const IDCompositionDeviceDebug) callconv(.Inline) HRESULT {
        return self.vtable.DisableDebugCounters(self);
    }
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDCompositionSurfaceFactory_Value = Guid.initString("e334bc12-3937-4e02-85eb-fcf4eb30d2c8");
pub const IID_IDCompositionSurfaceFactory = &IID_IDCompositionSurfaceFactory_Value;
pub const IDCompositionSurfaceFactory = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateSurface: *const fn(
            self: *const IDCompositionSurfaceFactory,
            width: u32,
            height: u32,
            pixelFormat: DXGI_FORMAT,
            alphaMode: DXGI_ALPHA_MODE,
            surface: ?*?*IDCompositionSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVirtualSurface: *const fn(
            self: *const IDCompositionSurfaceFactory,
            initialWidth: u32,
            initialHeight: u32,
            pixelFormat: DXGI_FORMAT,
            alphaMode: DXGI_ALPHA_MODE,
            virtualSurface: ?*?*IDCompositionVirtualSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateSurface(self: *const IDCompositionSurfaceFactory, width: u32, height: u32, pixelFormat: DXGI_FORMAT, alphaMode: DXGI_ALPHA_MODE, surface: ?*?*IDCompositionSurface) callconv(.Inline) HRESULT {
        return self.vtable.CreateSurface(self, width, height, pixelFormat, alphaMode, surface);
    }
    pub fn CreateVirtualSurface(self: *const IDCompositionSurfaceFactory, initialWidth: u32, initialHeight: u32, pixelFormat: DXGI_FORMAT, alphaMode: DXGI_ALPHA_MODE, virtualSurface: ?*?*IDCompositionVirtualSurface) callconv(.Inline) HRESULT {
        return self.vtable.CreateVirtualSurface(self, initialWidth, initialHeight, pixelFormat, alphaMode, virtualSurface);
    }
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDCompositionVisual2_Value = Guid.initString("e8de1639-4331-4b26-bc5f-6a321d347a85");
pub const IID_IDCompositionVisual2 = &IID_IDCompositionVisual2_Value;
pub const IDCompositionVisual2 = extern union {
    pub const VTable = extern struct {
        base: IDCompositionVisual.VTable,
        SetOpacityMode: *const fn(
            self: *const IDCompositionVisual2,
            mode: DCOMPOSITION_OPACITY_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBackFaceVisibility: *const fn(
            self: *const IDCompositionVisual2,
            visibility: DCOMPOSITION_BACKFACE_VISIBILITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionVisual: IDCompositionVisual,
    IUnknown: IUnknown,
    pub fn SetOpacityMode(self: *const IDCompositionVisual2, mode: DCOMPOSITION_OPACITY_MODE) callconv(.Inline) HRESULT {
        return self.vtable.SetOpacityMode(self, mode);
    }
    pub fn SetBackFaceVisibility(self: *const IDCompositionVisual2, visibility: DCOMPOSITION_BACKFACE_VISIBILITY) callconv(.Inline) HRESULT {
        return self.vtable.SetBackFaceVisibility(self, visibility);
    }
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDCompositionVisualDebug_Value = Guid.initString("fed2b808-5eb4-43a0-aea3-35f65280f91b");
pub const IID_IDCompositionVisualDebug = &IID_IDCompositionVisualDebug_Value;
pub const IDCompositionVisualDebug = extern union {
    pub const VTable = extern struct {
        base: IDCompositionVisual2.VTable,
        EnableHeatMap: *const fn(
            self: *const IDCompositionVisualDebug,
            color: ?*const D2D_COLOR_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisableHeatMap: *const fn(
            self: *const IDCompositionVisualDebug,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableRedrawRegions: *const fn(
            self: *const IDCompositionVisualDebug,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisableRedrawRegions: *const fn(
            self: *const IDCompositionVisualDebug,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionVisual2: IDCompositionVisual2,
    IDCompositionVisual: IDCompositionVisual,
    IUnknown: IUnknown,
    pub fn EnableHeatMap(self: *const IDCompositionVisualDebug, color: ?*const D2D_COLOR_F) callconv(.Inline) HRESULT {
        return self.vtable.EnableHeatMap(self, color);
    }
    pub fn DisableHeatMap(self: *const IDCompositionVisualDebug) callconv(.Inline) HRESULT {
        return self.vtable.DisableHeatMap(self);
    }
    pub fn EnableRedrawRegions(self: *const IDCompositionVisualDebug) callconv(.Inline) HRESULT {
        return self.vtable.EnableRedrawRegions(self);
    }
    pub fn DisableRedrawRegions(self: *const IDCompositionVisualDebug) callconv(.Inline) HRESULT {
        return self.vtable.DisableRedrawRegions(self);
    }
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDCompositionVisual3_Value = Guid.initString("2775f462-b6c1-4015-b0be-b3e7d6a4976d");
pub const IID_IDCompositionVisual3 = &IID_IDCompositionVisual3_Value;
pub const IDCompositionVisual3 = extern union {
    pub const VTable = extern struct {
        base: IDCompositionVisualDebug.VTable,
        SetDepthMode: *const fn(
            self: *const IDCompositionVisual3,
            mode: DCOMPOSITION_DEPTH_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetZ_TODO_A: *const fn(
            self: *const IDCompositionVisual3,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetZ_TODO_B: *const fn(
            self: *const IDCompositionVisual3,
            offsetZ: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOpacity_TODO_A: *const fn(
            self: *const IDCompositionVisual3,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOpacity_TODO_B: *const fn(
            self: *const IDCompositionVisual3,
            opacity: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransform_TODO_A: *const fn(
            self: *const IDCompositionVisual3,
            transform: ?*IDCompositionTransform3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransform_TODO_B: *const fn(
            self: *const IDCompositionVisual3,
            matrix: ?*const D2D_MATRIX_4X4_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVisible: *const fn(
            self: *const IDCompositionVisual3,
            visible: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionVisualDebug: IDCompositionVisualDebug,
    IDCompositionVisual2: IDCompositionVisual2,
    IDCompositionVisual: IDCompositionVisual,
    IUnknown: IUnknown,
    pub const SetTransform = @compileError("COM method 'SetTransform' must be called using one of the following overload names: SetTransform_TODO_B, SetTransform_TODO_A");
    pub const SetOffsetZ = @compileError("COM method 'SetOffsetZ' must be called using one of the following overload names: SetOffsetZ_TODO_B, SetOffsetZ_TODO_A");
    pub const SetOpacity = @compileError("COM method 'SetOpacity' must be called using one of the following overload names: SetOpacity_TODO_A, SetOpacity_TODO_B");
    pub fn SetDepthMode(self: *const IDCompositionVisual3, mode: DCOMPOSITION_DEPTH_MODE) callconv(.Inline) HRESULT {
        return self.vtable.SetDepthMode(self, mode);
    }
    pub fn SetOffsetZ_TODO_A(self: *const IDCompositionVisual3, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetOffsetZ_TODO_A(self, animation);
    }
    pub fn SetOffsetZ_TODO_B(self: *const IDCompositionVisual3, offsetZ: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetOffsetZ_TODO_B(self, offsetZ);
    }
    pub fn SetOpacity_TODO_A(self: *const IDCompositionVisual3, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetOpacity_TODO_A(self, animation);
    }
    pub fn SetOpacity_TODO_B(self: *const IDCompositionVisual3, opacity: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetOpacity_TODO_B(self, opacity);
    }
    pub fn SetTransform_TODO_A(self: *const IDCompositionVisual3, transform: ?*IDCompositionTransform3D) callconv(.Inline) HRESULT {
        return self.vtable.SetTransform_TODO_A(self, transform);
    }
    pub fn SetTransform_TODO_B(self: *const IDCompositionVisual3, matrix: ?*const D2D_MATRIX_4X4_F) callconv(.Inline) HRESULT {
        return self.vtable.SetTransform_TODO_B(self, matrix);
    }
    pub fn SetVisible(self: *const IDCompositionVisual3, visible: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetVisible(self, visible);
    }
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDCompositionDevice3_Value = Guid.initString("0987cb06-f916-48bf-8d35-ce7641781bd9");
pub const IID_IDCompositionDevice3 = &IID_IDCompositionDevice3_Value;
pub const IDCompositionDevice3 = extern union {
    pub const VTable = extern struct {
        base: IDCompositionDevice2.VTable,
        CreateGaussianBlurEffect: *const fn(
            self: *const IDCompositionDevice3,
            gaussianBlurEffect: ?*?*IDCompositionGaussianBlurEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBrightnessEffect: *const fn(
            self: *const IDCompositionDevice3,
            brightnessEffect: ?*?*IDCompositionBrightnessEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateColorMatrixEffect: *const fn(
            self: *const IDCompositionDevice3,
            colorMatrixEffect: ?*?*IDCompositionColorMatrixEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateShadowEffect: *const fn(
            self: *const IDCompositionDevice3,
            shadowEffect: ?*?*IDCompositionShadowEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateHueRotationEffect: *const fn(
            self: *const IDCompositionDevice3,
            hueRotationEffect: ?*?*IDCompositionHueRotationEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSaturationEffect: *const fn(
            self: *const IDCompositionDevice3,
            saturationEffect: ?*?*IDCompositionSaturationEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTurbulenceEffect: *const fn(
            self: *const IDCompositionDevice3,
            turbulenceEffect: ?*?*IDCompositionTurbulenceEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateLinearTransferEffect: *const fn(
            self: *const IDCompositionDevice3,
            linearTransferEffect: ?*?*IDCompositionLinearTransferEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTableTransferEffect: *const fn(
            self: *const IDCompositionDevice3,
            tableTransferEffect: ?*?*IDCompositionTableTransferEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCompositeEffect: *const fn(
            self: *const IDCompositionDevice3,
            compositeEffect: ?*?*IDCompositionCompositeEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBlendEffect: *const fn(
            self: *const IDCompositionDevice3,
            blendEffect: ?*?*IDCompositionBlendEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateArithmeticCompositeEffect: *const fn(
            self: *const IDCompositionDevice3,
            arithmeticCompositeEffect: ?*?*IDCompositionArithmeticCompositeEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateAffineTransform2DEffect: *const fn(
            self: *const IDCompositionDevice3,
            affineTransform2dEffect: ?*?*IDCompositionAffineTransform2DEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionDevice2: IDCompositionDevice2,
    IUnknown: IUnknown,
    pub fn CreateGaussianBlurEffect(self: *const IDCompositionDevice3, gaussianBlurEffect: ?*?*IDCompositionGaussianBlurEffect) callconv(.Inline) HRESULT {
        return self.vtable.CreateGaussianBlurEffect(self, gaussianBlurEffect);
    }
    pub fn CreateBrightnessEffect(self: *const IDCompositionDevice3, brightnessEffect: ?*?*IDCompositionBrightnessEffect) callconv(.Inline) HRESULT {
        return self.vtable.CreateBrightnessEffect(self, brightnessEffect);
    }
    pub fn CreateColorMatrixEffect(self: *const IDCompositionDevice3, colorMatrixEffect: ?*?*IDCompositionColorMatrixEffect) callconv(.Inline) HRESULT {
        return self.vtable.CreateColorMatrixEffect(self, colorMatrixEffect);
    }
    pub fn CreateShadowEffect(self: *const IDCompositionDevice3, shadowEffect: ?*?*IDCompositionShadowEffect) callconv(.Inline) HRESULT {
        return self.vtable.CreateShadowEffect(self, shadowEffect);
    }
    pub fn CreateHueRotationEffect(self: *const IDCompositionDevice3, hueRotationEffect: ?*?*IDCompositionHueRotationEffect) callconv(.Inline) HRESULT {
        return self.vtable.CreateHueRotationEffect(self, hueRotationEffect);
    }
    pub fn CreateSaturationEffect(self: *const IDCompositionDevice3, saturationEffect: ?*?*IDCompositionSaturationEffect) callconv(.Inline) HRESULT {
        return self.vtable.CreateSaturationEffect(self, saturationEffect);
    }
    pub fn CreateTurbulenceEffect(self: *const IDCompositionDevice3, turbulenceEffect: ?*?*IDCompositionTurbulenceEffect) callconv(.Inline) HRESULT {
        return self.vtable.CreateTurbulenceEffect(self, turbulenceEffect);
    }
    pub fn CreateLinearTransferEffect(self: *const IDCompositionDevice3, linearTransferEffect: ?*?*IDCompositionLinearTransferEffect) callconv(.Inline) HRESULT {
        return self.vtable.CreateLinearTransferEffect(self, linearTransferEffect);
    }
    pub fn CreateTableTransferEffect(self: *const IDCompositionDevice3, tableTransferEffect: ?*?*IDCompositionTableTransferEffect) callconv(.Inline) HRESULT {
        return self.vtable.CreateTableTransferEffect(self, tableTransferEffect);
    }
    pub fn CreateCompositeEffect(self: *const IDCompositionDevice3, compositeEffect: ?*?*IDCompositionCompositeEffect) callconv(.Inline) HRESULT {
        return self.vtable.CreateCompositeEffect(self, compositeEffect);
    }
    pub fn CreateBlendEffect(self: *const IDCompositionDevice3, blendEffect: ?*?*IDCompositionBlendEffect) callconv(.Inline) HRESULT {
        return self.vtable.CreateBlendEffect(self, blendEffect);
    }
    pub fn CreateArithmeticCompositeEffect(self: *const IDCompositionDevice3, arithmeticCompositeEffect: ?*?*IDCompositionArithmeticCompositeEffect) callconv(.Inline) HRESULT {
        return self.vtable.CreateArithmeticCompositeEffect(self, arithmeticCompositeEffect);
    }
    pub fn CreateAffineTransform2DEffect(self: *const IDCompositionDevice3, affineTransform2dEffect: ?*?*IDCompositionAffineTransform2DEffect) callconv(.Inline) HRESULT {
        return self.vtable.CreateAffineTransform2DEffect(self, affineTransform2dEffect);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionFilterEffect_Value = Guid.initString("30c421d5-8cb2-4e9f-b133-37be270d4ac2");
pub const IID_IDCompositionFilterEffect = &IID_IDCompositionFilterEffect_Value;
pub const IDCompositionFilterEffect = extern union {
    pub const VTable = extern struct {
        base: IDCompositionEffect.VTable,
        SetInput: *const fn(
            self: *const IDCompositionFilterEffect,
            index: u32,
            input: ?*IUnknown,
            flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
    pub fn SetInput(self: *const IDCompositionFilterEffect, index: u32, input: ?*IUnknown, flags: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetInput(self, index, input, flags);
    }
};

const IID_IDCompositionGaussianBlurEffect_Value = Guid.initString("45d4d0b7-1bd4-454e-8894-2bfa68443033");
pub const IID_IDCompositionGaussianBlurEffect = &IID_IDCompositionGaussianBlurEffect_Value;
pub const IDCompositionGaussianBlurEffect = extern union {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetStandardDeviation_TODO_A: *const fn(
            self: *const IDCompositionGaussianBlurEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStandardDeviation_TODO_B: *const fn(
            self: *const IDCompositionGaussianBlurEffect,
            amount: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBorderMode: *const fn(
            self: *const IDCompositionGaussianBlurEffect,
            mode: D2D1_BORDER_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionFilterEffect: IDCompositionFilterEffect,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
    pub const SetStandardDeviation = @compileError("COM method 'SetStandardDeviation' must be called using one of the following overload names: SetStandardDeviation_TODO_A, SetStandardDeviation_TODO_B");
    pub fn SetStandardDeviation_TODO_A(self: *const IDCompositionGaussianBlurEffect, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetStandardDeviation_TODO_A(self, animation);
    }
    pub fn SetStandardDeviation_TODO_B(self: *const IDCompositionGaussianBlurEffect, amount: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetStandardDeviation_TODO_B(self, amount);
    }
    pub fn SetBorderMode(self: *const IDCompositionGaussianBlurEffect, mode: D2D1_BORDER_MODE) callconv(.Inline) HRESULT {
        return self.vtable.SetBorderMode(self, mode);
    }
};

const IID_IDCompositionBrightnessEffect_Value = Guid.initString("6027496e-cb3a-49ab-934f-d798da4f7da6");
pub const IID_IDCompositionBrightnessEffect = &IID_IDCompositionBrightnessEffect_Value;
pub const IDCompositionBrightnessEffect = extern union {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetWhitePoint: *const fn(
            self: *const IDCompositionBrightnessEffect,
            whitePoint: ?*const D2D_VECTOR_2F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlackPoint: *const fn(
            self: *const IDCompositionBrightnessEffect,
            blackPoint: ?*const D2D_VECTOR_2F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWhitePointX_TODO_A: *const fn(
            self: *const IDCompositionBrightnessEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWhitePointX_TODO_B: *const fn(
            self: *const IDCompositionBrightnessEffect,
            whitePointX: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWhitePointY_TODO_A: *const fn(
            self: *const IDCompositionBrightnessEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWhitePointY_TODO_B: *const fn(
            self: *const IDCompositionBrightnessEffect,
            whitePointY: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlackPointX_TODO_A: *const fn(
            self: *const IDCompositionBrightnessEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlackPointX_TODO_B: *const fn(
            self: *const IDCompositionBrightnessEffect,
            blackPointX: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlackPointY_TODO_A: *const fn(
            self: *const IDCompositionBrightnessEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlackPointY_TODO_B: *const fn(
            self: *const IDCompositionBrightnessEffect,
            blackPointY: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionFilterEffect: IDCompositionFilterEffect,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
    pub const SetWhitePointY = @compileError("COM method 'SetWhitePointY' must be called using one of the following overload names: SetWhitePointY_TODO_A, SetWhitePointY_TODO_B");
    pub const SetBlackPointX = @compileError("COM method 'SetBlackPointX' must be called using one of the following overload names: SetBlackPointX_TODO_A, SetBlackPointX_TODO_B");
    pub const SetWhitePointX = @compileError("COM method 'SetWhitePointX' must be called using one of the following overload names: SetWhitePointX_TODO_B, SetWhitePointX_TODO_A");
    pub const SetBlackPointY = @compileError("COM method 'SetBlackPointY' must be called using one of the following overload names: SetBlackPointY_TODO_A, SetBlackPointY_TODO_B");
    pub fn SetWhitePoint(self: *const IDCompositionBrightnessEffect, whitePoint: ?*const D2D_VECTOR_2F) callconv(.Inline) HRESULT {
        return self.vtable.SetWhitePoint(self, whitePoint);
    }
    pub fn SetBlackPoint(self: *const IDCompositionBrightnessEffect, blackPoint: ?*const D2D_VECTOR_2F) callconv(.Inline) HRESULT {
        return self.vtable.SetBlackPoint(self, blackPoint);
    }
    pub fn SetWhitePointX_TODO_A(self: *const IDCompositionBrightnessEffect, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetWhitePointX_TODO_A(self, animation);
    }
    pub fn SetWhitePointX_TODO_B(self: *const IDCompositionBrightnessEffect, whitePointX: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetWhitePointX_TODO_B(self, whitePointX);
    }
    pub fn SetWhitePointY_TODO_A(self: *const IDCompositionBrightnessEffect, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetWhitePointY_TODO_A(self, animation);
    }
    pub fn SetWhitePointY_TODO_B(self: *const IDCompositionBrightnessEffect, whitePointY: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetWhitePointY_TODO_B(self, whitePointY);
    }
    pub fn SetBlackPointX_TODO_A(self: *const IDCompositionBrightnessEffect, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetBlackPointX_TODO_A(self, animation);
    }
    pub fn SetBlackPointX_TODO_B(self: *const IDCompositionBrightnessEffect, blackPointX: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetBlackPointX_TODO_B(self, blackPointX);
    }
    pub fn SetBlackPointY_TODO_A(self: *const IDCompositionBrightnessEffect, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetBlackPointY_TODO_A(self, animation);
    }
    pub fn SetBlackPointY_TODO_B(self: *const IDCompositionBrightnessEffect, blackPointY: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetBlackPointY_TODO_B(self, blackPointY);
    }
};

const IID_IDCompositionColorMatrixEffect_Value = Guid.initString("c1170a22-3ce2-4966-90d4-55408bfc84c4");
pub const IID_IDCompositionColorMatrixEffect = &IID_IDCompositionColorMatrixEffect_Value;
pub const IDCompositionColorMatrixEffect = extern union {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetMatrix: *const fn(
            self: *const IDCompositionColorMatrixEffect,
            matrix: ?*const D2D_MATRIX_5X4_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMatrixElement_TODO_A: *const fn(
            self: *const IDCompositionColorMatrixEffect,
            row: i32,
            column: i32,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMatrixElement_TODO_B: *const fn(
            self: *const IDCompositionColorMatrixEffect,
            row: i32,
            column: i32,
            value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlphaMode: *const fn(
            self: *const IDCompositionColorMatrixEffect,
            mode: D2D1_COLORMATRIX_ALPHA_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClampOutput: *const fn(
            self: *const IDCompositionColorMatrixEffect,
            clamp: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionFilterEffect: IDCompositionFilterEffect,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
    pub const SetMatrixElement = @compileError("COM method 'SetMatrixElement' must be called using one of the following overload names: SetMatrixElement_TODO_B, SetMatrixElement_TODO_A");
    pub fn SetMatrix(self: *const IDCompositionColorMatrixEffect, matrix: ?*const D2D_MATRIX_5X4_F) callconv(.Inline) HRESULT {
        return self.vtable.SetMatrix(self, matrix);
    }
    pub fn SetMatrixElement_TODO_A(self: *const IDCompositionColorMatrixEffect, row: i32, column: i32, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetMatrixElement_TODO_A(self, row, column, animation);
    }
    pub fn SetMatrixElement_TODO_B(self: *const IDCompositionColorMatrixEffect, row: i32, column: i32, value: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetMatrixElement_TODO_B(self, row, column, value);
    }
    pub fn SetAlphaMode(self: *const IDCompositionColorMatrixEffect, mode: D2D1_COLORMATRIX_ALPHA_MODE) callconv(.Inline) HRESULT {
        return self.vtable.SetAlphaMode(self, mode);
    }
    pub fn SetClampOutput(self: *const IDCompositionColorMatrixEffect, clamp: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetClampOutput(self, clamp);
    }
};

const IID_IDCompositionShadowEffect_Value = Guid.initString("4ad18ac0-cfd2-4c2f-bb62-96e54fdb6879");
pub const IID_IDCompositionShadowEffect = &IID_IDCompositionShadowEffect_Value;
pub const IDCompositionShadowEffect = extern union {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetStandardDeviation_TODO_A: *const fn(
            self: *const IDCompositionShadowEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStandardDeviation_TODO_B: *const fn(
            self: *const IDCompositionShadowEffect,
            amount: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColor: *const fn(
            self: *const IDCompositionShadowEffect,
            color: ?*const D2D_VECTOR_4F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRed_TODO_A: *const fn(
            self: *const IDCompositionShadowEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRed_TODO_B: *const fn(
            self: *const IDCompositionShadowEffect,
            amount: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGreen_TODO_A: *const fn(
            self: *const IDCompositionShadowEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGreen_TODO_B: *const fn(
            self: *const IDCompositionShadowEffect,
            amount: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlue_TODO_A: *const fn(
            self: *const IDCompositionShadowEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlue_TODO_B: *const fn(
            self: *const IDCompositionShadowEffect,
            amount: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlpha_TODO_A: *const fn(
            self: *const IDCompositionShadowEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlpha_TODO_B: *const fn(
            self: *const IDCompositionShadowEffect,
            amount: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionFilterEffect: IDCompositionFilterEffect,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
    pub const SetGreen = @compileError("COM method 'SetGreen' must be called using one of the following overload names: SetGreen_TODO_B, SetGreen_TODO_A");
    pub const SetBlue = @compileError("COM method 'SetBlue' must be called using one of the following overload names: SetBlue_TODO_B, SetBlue_TODO_A");
    pub const SetStandardDeviation = @compileError("COM method 'SetStandardDeviation' must be called using one of the following overload names: SetStandardDeviation_TODO_A, SetStandardDeviation_TODO_B");
    pub const SetRed = @compileError("COM method 'SetRed' must be called using one of the following overload names: SetRed_TODO_A, SetRed_TODO_B");
    pub const SetAlpha = @compileError("COM method 'SetAlpha' must be called using one of the following overload names: SetAlpha_TODO_A, SetAlpha_TODO_B");
    pub fn SetStandardDeviation_TODO_A(self: *const IDCompositionShadowEffect, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetStandardDeviation_TODO_A(self, animation);
    }
    pub fn SetStandardDeviation_TODO_B(self: *const IDCompositionShadowEffect, amount: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetStandardDeviation_TODO_B(self, amount);
    }
    pub fn SetColor(self: *const IDCompositionShadowEffect, color: ?*const D2D_VECTOR_4F) callconv(.Inline) HRESULT {
        return self.vtable.SetColor(self, color);
    }
    pub fn SetRed_TODO_A(self: *const IDCompositionShadowEffect, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetRed_TODO_A(self, animation);
    }
    pub fn SetRed_TODO_B(self: *const IDCompositionShadowEffect, amount: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetRed_TODO_B(self, amount);
    }
    pub fn SetGreen_TODO_A(self: *const IDCompositionShadowEffect, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetGreen_TODO_A(self, animation);
    }
    pub fn SetGreen_TODO_B(self: *const IDCompositionShadowEffect, amount: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetGreen_TODO_B(self, amount);
    }
    pub fn SetBlue_TODO_A(self: *const IDCompositionShadowEffect, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetBlue_TODO_A(self, animation);
    }
    pub fn SetBlue_TODO_B(self: *const IDCompositionShadowEffect, amount: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetBlue_TODO_B(self, amount);
    }
    pub fn SetAlpha_TODO_A(self: *const IDCompositionShadowEffect, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetAlpha_TODO_A(self, animation);
    }
    pub fn SetAlpha_TODO_B(self: *const IDCompositionShadowEffect, amount: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetAlpha_TODO_B(self, amount);
    }
};

const IID_IDCompositionHueRotationEffect_Value = Guid.initString("6db9f920-0770-4781-b0c6-381912f9d167");
pub const IID_IDCompositionHueRotationEffect = &IID_IDCompositionHueRotationEffect_Value;
pub const IDCompositionHueRotationEffect = extern union {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetAngle_TODO_A: *const fn(
            self: *const IDCompositionHueRotationEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAngle_TODO_B: *const fn(
            self: *const IDCompositionHueRotationEffect,
            amountDegrees: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionFilterEffect: IDCompositionFilterEffect,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
    pub const SetAngle = @compileError("COM method 'SetAngle' must be called using one of the following overload names: SetAngle_TODO_A, SetAngle_TODO_B");
    pub fn SetAngle_TODO_A(self: *const IDCompositionHueRotationEffect, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetAngle_TODO_A(self, animation);
    }
    pub fn SetAngle_TODO_B(self: *const IDCompositionHueRotationEffect, amountDegrees: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetAngle_TODO_B(self, amountDegrees);
    }
};

const IID_IDCompositionSaturationEffect_Value = Guid.initString("a08debda-3258-4fa4-9f16-9174d3fe93b1");
pub const IID_IDCompositionSaturationEffect = &IID_IDCompositionSaturationEffect_Value;
pub const IDCompositionSaturationEffect = extern union {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetSaturation_TODO_A: *const fn(
            self: *const IDCompositionSaturationEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSaturation_TODO_B: *const fn(
            self: *const IDCompositionSaturationEffect,
            ratio: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionFilterEffect: IDCompositionFilterEffect,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
    pub const SetSaturation = @compileError("COM method 'SetSaturation' must be called using one of the following overload names: SetSaturation_TODO_A, SetSaturation_TODO_B");
    pub fn SetSaturation_TODO_A(self: *const IDCompositionSaturationEffect, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetSaturation_TODO_A(self, animation);
    }
    pub fn SetSaturation_TODO_B(self: *const IDCompositionSaturationEffect, ratio: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetSaturation_TODO_B(self, ratio);
    }
};

const IID_IDCompositionTurbulenceEffect_Value = Guid.initString("a6a55bda-c09c-49f3-9193-a41922c89715");
pub const IID_IDCompositionTurbulenceEffect = &IID_IDCompositionTurbulenceEffect_Value;
pub const IDCompositionTurbulenceEffect = extern union {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetOffset: *const fn(
            self: *const IDCompositionTurbulenceEffect,
            offset: ?*const D2D_VECTOR_2F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBaseFrequency: *const fn(
            self: *const IDCompositionTurbulenceEffect,
            frequency: ?*const D2D_VECTOR_2F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSize: *const fn(
            self: *const IDCompositionTurbulenceEffect,
            size: ?*const D2D_VECTOR_2F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNumOctaves: *const fn(
            self: *const IDCompositionTurbulenceEffect,
            numOctaves: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSeed: *const fn(
            self: *const IDCompositionTurbulenceEffect,
            seed: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNoise: *const fn(
            self: *const IDCompositionTurbulenceEffect,
            noise: D2D1_TURBULENCE_NOISE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStitchable: *const fn(
            self: *const IDCompositionTurbulenceEffect,
            stitchable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionFilterEffect: IDCompositionFilterEffect,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
    pub fn SetOffset(self: *const IDCompositionTurbulenceEffect, offset: ?*const D2D_VECTOR_2F) callconv(.Inline) HRESULT {
        return self.vtable.SetOffset(self, offset);
    }
    pub fn SetBaseFrequency(self: *const IDCompositionTurbulenceEffect, frequency: ?*const D2D_VECTOR_2F) callconv(.Inline) HRESULT {
        return self.vtable.SetBaseFrequency(self, frequency);
    }
    pub fn SetSize(self: *const IDCompositionTurbulenceEffect, size: ?*const D2D_VECTOR_2F) callconv(.Inline) HRESULT {
        return self.vtable.SetSize(self, size);
    }
    pub fn SetNumOctaves(self: *const IDCompositionTurbulenceEffect, numOctaves: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetNumOctaves(self, numOctaves);
    }
    pub fn SetSeed(self: *const IDCompositionTurbulenceEffect, seed: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetSeed(self, seed);
    }
    pub fn SetNoise(self: *const IDCompositionTurbulenceEffect, noise: D2D1_TURBULENCE_NOISE) callconv(.Inline) HRESULT {
        return self.vtable.SetNoise(self, noise);
    }
    pub fn SetStitchable(self: *const IDCompositionTurbulenceEffect, stitchable: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetStitchable(self, stitchable);
    }
};

const IID_IDCompositionLinearTransferEffect_Value = Guid.initString("4305ee5b-c4a0-4c88-9385-67124e017683");
pub const IID_IDCompositionLinearTransferEffect = &IID_IDCompositionLinearTransferEffect_Value;
pub const IDCompositionLinearTransferEffect = extern union {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetRedYIntercept_TODO_A: *const fn(
            self: *const IDCompositionLinearTransferEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRedYIntercept_TODO_B: *const fn(
            self: *const IDCompositionLinearTransferEffect,
            redYIntercept: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRedSlope_TODO_A: *const fn(
            self: *const IDCompositionLinearTransferEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRedSlope_TODO_B: *const fn(
            self: *const IDCompositionLinearTransferEffect,
            redSlope: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRedDisable: *const fn(
            self: *const IDCompositionLinearTransferEffect,
            redDisable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGreenYIntercept_TODO_A: *const fn(
            self: *const IDCompositionLinearTransferEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGreenYIntercept_TODO_B: *const fn(
            self: *const IDCompositionLinearTransferEffect,
            greenYIntercept: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGreenSlope_TODO_A: *const fn(
            self: *const IDCompositionLinearTransferEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGreenSlope_TODO_B: *const fn(
            self: *const IDCompositionLinearTransferEffect,
            greenSlope: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGreenDisable: *const fn(
            self: *const IDCompositionLinearTransferEffect,
            greenDisable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlueYIntercept_TODO_A: *const fn(
            self: *const IDCompositionLinearTransferEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlueYIntercept_TODO_B: *const fn(
            self: *const IDCompositionLinearTransferEffect,
            blueYIntercept: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlueSlope_TODO_A: *const fn(
            self: *const IDCompositionLinearTransferEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlueSlope_TODO_B: *const fn(
            self: *const IDCompositionLinearTransferEffect,
            blueSlope: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlueDisable: *const fn(
            self: *const IDCompositionLinearTransferEffect,
            blueDisable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlphaYIntercept_TODO_A: *const fn(
            self: *const IDCompositionLinearTransferEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlphaYIntercept_TODO_B: *const fn(
            self: *const IDCompositionLinearTransferEffect,
            alphaYIntercept: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlphaSlope_TODO_A: *const fn(
            self: *const IDCompositionLinearTransferEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlphaSlope_TODO_B: *const fn(
            self: *const IDCompositionLinearTransferEffect,
            alphaSlope: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlphaDisable: *const fn(
            self: *const IDCompositionLinearTransferEffect,
            alphaDisable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClampOutput: *const fn(
            self: *const IDCompositionLinearTransferEffect,
            clampOutput: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionFilterEffect: IDCompositionFilterEffect,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
    pub const SetGreenYIntercept = @compileError("COM method 'SetGreenYIntercept' must be called using one of the following overload names: SetGreenYIntercept_TODO_B, SetGreenYIntercept_TODO_A");
    pub const SetRedYIntercept = @compileError("COM method 'SetRedYIntercept' must be called using one of the following overload names: SetRedYIntercept_TODO_A, SetRedYIntercept_TODO_B");
    pub const SetAlphaYIntercept = @compileError("COM method 'SetAlphaYIntercept' must be called using one of the following overload names: SetAlphaYIntercept_TODO_A, SetAlphaYIntercept_TODO_B");
    pub const SetGreenSlope = @compileError("COM method 'SetGreenSlope' must be called using one of the following overload names: SetGreenSlope_TODO_B, SetGreenSlope_TODO_A");
    pub const SetBlueSlope = @compileError("COM method 'SetBlueSlope' must be called using one of the following overload names: SetBlueSlope_TODO_A, SetBlueSlope_TODO_B");
    pub const SetAlphaSlope = @compileError("COM method 'SetAlphaSlope' must be called using one of the following overload names: SetAlphaSlope_TODO_B, SetAlphaSlope_TODO_A");
    pub const SetRedSlope = @compileError("COM method 'SetRedSlope' must be called using one of the following overload names: SetRedSlope_TODO_B, SetRedSlope_TODO_A");
    pub const SetBlueYIntercept = @compileError("COM method 'SetBlueYIntercept' must be called using one of the following overload names: SetBlueYIntercept_TODO_B, SetBlueYIntercept_TODO_A");
    pub fn SetRedYIntercept_TODO_A(self: *const IDCompositionLinearTransferEffect, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetRedYIntercept_TODO_A(self, animation);
    }
    pub fn SetRedYIntercept_TODO_B(self: *const IDCompositionLinearTransferEffect, redYIntercept: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetRedYIntercept_TODO_B(self, redYIntercept);
    }
    pub fn SetRedSlope_TODO_A(self: *const IDCompositionLinearTransferEffect, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetRedSlope_TODO_A(self, animation);
    }
    pub fn SetRedSlope_TODO_B(self: *const IDCompositionLinearTransferEffect, redSlope: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetRedSlope_TODO_B(self, redSlope);
    }
    pub fn SetRedDisable(self: *const IDCompositionLinearTransferEffect, redDisable: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetRedDisable(self, redDisable);
    }
    pub fn SetGreenYIntercept_TODO_A(self: *const IDCompositionLinearTransferEffect, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetGreenYIntercept_TODO_A(self, animation);
    }
    pub fn SetGreenYIntercept_TODO_B(self: *const IDCompositionLinearTransferEffect, greenYIntercept: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetGreenYIntercept_TODO_B(self, greenYIntercept);
    }
    pub fn SetGreenSlope_TODO_A(self: *const IDCompositionLinearTransferEffect, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetGreenSlope_TODO_A(self, animation);
    }
    pub fn SetGreenSlope_TODO_B(self: *const IDCompositionLinearTransferEffect, greenSlope: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetGreenSlope_TODO_B(self, greenSlope);
    }
    pub fn SetGreenDisable(self: *const IDCompositionLinearTransferEffect, greenDisable: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetGreenDisable(self, greenDisable);
    }
    pub fn SetBlueYIntercept_TODO_A(self: *const IDCompositionLinearTransferEffect, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetBlueYIntercept_TODO_A(self, animation);
    }
    pub fn SetBlueYIntercept_TODO_B(self: *const IDCompositionLinearTransferEffect, blueYIntercept: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetBlueYIntercept_TODO_B(self, blueYIntercept);
    }
    pub fn SetBlueSlope_TODO_A(self: *const IDCompositionLinearTransferEffect, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetBlueSlope_TODO_A(self, animation);
    }
    pub fn SetBlueSlope_TODO_B(self: *const IDCompositionLinearTransferEffect, blueSlope: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetBlueSlope_TODO_B(self, blueSlope);
    }
    pub fn SetBlueDisable(self: *const IDCompositionLinearTransferEffect, blueDisable: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetBlueDisable(self, blueDisable);
    }
    pub fn SetAlphaYIntercept_TODO_A(self: *const IDCompositionLinearTransferEffect, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetAlphaYIntercept_TODO_A(self, animation);
    }
    pub fn SetAlphaYIntercept_TODO_B(self: *const IDCompositionLinearTransferEffect, alphaYIntercept: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetAlphaYIntercept_TODO_B(self, alphaYIntercept);
    }
    pub fn SetAlphaSlope_TODO_A(self: *const IDCompositionLinearTransferEffect, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetAlphaSlope_TODO_A(self, animation);
    }
    pub fn SetAlphaSlope_TODO_B(self: *const IDCompositionLinearTransferEffect, alphaSlope: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetAlphaSlope_TODO_B(self, alphaSlope);
    }
    pub fn SetAlphaDisable(self: *const IDCompositionLinearTransferEffect, alphaDisable: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetAlphaDisable(self, alphaDisable);
    }
    pub fn SetClampOutput(self: *const IDCompositionLinearTransferEffect, clampOutput: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetClampOutput(self, clampOutput);
    }
};

const IID_IDCompositionTableTransferEffect_Value = Guid.initString("9b7e82e2-69c5-4eb4-a5f5-a7033f5132cd");
pub const IID_IDCompositionTableTransferEffect = &IID_IDCompositionTableTransferEffect_Value;
pub const IDCompositionTableTransferEffect = extern union {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetRedTable: *const fn(
            self: *const IDCompositionTableTransferEffect,
            tableValues: [*]const f32,
            count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGreenTable: *const fn(
            self: *const IDCompositionTableTransferEffect,
            tableValues: [*]const f32,
            count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlueTable: *const fn(
            self: *const IDCompositionTableTransferEffect,
            tableValues: [*]const f32,
            count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlphaTable: *const fn(
            self: *const IDCompositionTableTransferEffect,
            tableValues: [*]const f32,
            count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRedDisable: *const fn(
            self: *const IDCompositionTableTransferEffect,
            redDisable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGreenDisable: *const fn(
            self: *const IDCompositionTableTransferEffect,
            greenDisable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlueDisable: *const fn(
            self: *const IDCompositionTableTransferEffect,
            blueDisable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlphaDisable: *const fn(
            self: *const IDCompositionTableTransferEffect,
            alphaDisable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClampOutput: *const fn(
            self: *const IDCompositionTableTransferEffect,
            clampOutput: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRedTableValue_TODO_A: *const fn(
            self: *const IDCompositionTableTransferEffect,
            index: u32,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRedTableValue_TODO_B: *const fn(
            self: *const IDCompositionTableTransferEffect,
            index: u32,
            value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGreenTableValue_TODO_A: *const fn(
            self: *const IDCompositionTableTransferEffect,
            index: u32,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGreenTableValue_TODO_B: *const fn(
            self: *const IDCompositionTableTransferEffect,
            index: u32,
            value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlueTableValue_TODO_A: *const fn(
            self: *const IDCompositionTableTransferEffect,
            index: u32,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlueTableValue_TODO_B: *const fn(
            self: *const IDCompositionTableTransferEffect,
            index: u32,
            value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlphaTableValue_TODO_A: *const fn(
            self: *const IDCompositionTableTransferEffect,
            index: u32,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlphaTableValue_TODO_B: *const fn(
            self: *const IDCompositionTableTransferEffect,
            index: u32,
            value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionFilterEffect: IDCompositionFilterEffect,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
    pub const SetGreenTableValue = @compileError("COM method 'SetGreenTableValue' must be called using one of the following overload names: SetGreenTableValue_TODO_A, SetGreenTableValue_TODO_B");
    pub const SetRedTableValue = @compileError("COM method 'SetRedTableValue' must be called using one of the following overload names: SetRedTableValue_TODO_A, SetRedTableValue_TODO_B");
    pub const SetBlueTableValue = @compileError("COM method 'SetBlueTableValue' must be called using one of the following overload names: SetBlueTableValue_TODO_A, SetBlueTableValue_TODO_B");
    pub const SetAlphaTableValue = @compileError("COM method 'SetAlphaTableValue' must be called using one of the following overload names: SetAlphaTableValue_TODO_A, SetAlphaTableValue_TODO_B");
    pub fn SetRedTable(self: *const IDCompositionTableTransferEffect, tableValues: [*]const f32, count: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetRedTable(self, tableValues, count);
    }
    pub fn SetGreenTable(self: *const IDCompositionTableTransferEffect, tableValues: [*]const f32, count: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetGreenTable(self, tableValues, count);
    }
    pub fn SetBlueTable(self: *const IDCompositionTableTransferEffect, tableValues: [*]const f32, count: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetBlueTable(self, tableValues, count);
    }
    pub fn SetAlphaTable(self: *const IDCompositionTableTransferEffect, tableValues: [*]const f32, count: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetAlphaTable(self, tableValues, count);
    }
    pub fn SetRedDisable(self: *const IDCompositionTableTransferEffect, redDisable: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetRedDisable(self, redDisable);
    }
    pub fn SetGreenDisable(self: *const IDCompositionTableTransferEffect, greenDisable: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetGreenDisable(self, greenDisable);
    }
    pub fn SetBlueDisable(self: *const IDCompositionTableTransferEffect, blueDisable: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetBlueDisable(self, blueDisable);
    }
    pub fn SetAlphaDisable(self: *const IDCompositionTableTransferEffect, alphaDisable: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetAlphaDisable(self, alphaDisable);
    }
    pub fn SetClampOutput(self: *const IDCompositionTableTransferEffect, clampOutput: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetClampOutput(self, clampOutput);
    }
    pub fn SetRedTableValue_TODO_A(self: *const IDCompositionTableTransferEffect, index: u32, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetRedTableValue_TODO_A(self, index, animation);
    }
    pub fn SetRedTableValue_TODO_B(self: *const IDCompositionTableTransferEffect, index: u32, value: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetRedTableValue_TODO_B(self, index, value);
    }
    pub fn SetGreenTableValue_TODO_A(self: *const IDCompositionTableTransferEffect, index: u32, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetGreenTableValue_TODO_A(self, index, animation);
    }
    pub fn SetGreenTableValue_TODO_B(self: *const IDCompositionTableTransferEffect, index: u32, value: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetGreenTableValue_TODO_B(self, index, value);
    }
    pub fn SetBlueTableValue_TODO_A(self: *const IDCompositionTableTransferEffect, index: u32, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetBlueTableValue_TODO_A(self, index, animation);
    }
    pub fn SetBlueTableValue_TODO_B(self: *const IDCompositionTableTransferEffect, index: u32, value: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetBlueTableValue_TODO_B(self, index, value);
    }
    pub fn SetAlphaTableValue_TODO_A(self: *const IDCompositionTableTransferEffect, index: u32, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetAlphaTableValue_TODO_A(self, index, animation);
    }
    pub fn SetAlphaTableValue_TODO_B(self: *const IDCompositionTableTransferEffect, index: u32, value: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetAlphaTableValue_TODO_B(self, index, value);
    }
};

const IID_IDCompositionCompositeEffect_Value = Guid.initString("576616c0-a231-494d-a38d-00fd5ec4db46");
pub const IID_IDCompositionCompositeEffect = &IID_IDCompositionCompositeEffect_Value;
pub const IDCompositionCompositeEffect = extern union {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetMode: *const fn(
            self: *const IDCompositionCompositeEffect,
            mode: D2D1_COMPOSITE_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionFilterEffect: IDCompositionFilterEffect,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
    pub fn SetMode(self: *const IDCompositionCompositeEffect, mode: D2D1_COMPOSITE_MODE) callconv(.Inline) HRESULT {
        return self.vtable.SetMode(self, mode);
    }
};

const IID_IDCompositionBlendEffect_Value = Guid.initString("33ecdc0a-578a-4a11-9c14-0cb90517f9c5");
pub const IID_IDCompositionBlendEffect = &IID_IDCompositionBlendEffect_Value;
pub const IDCompositionBlendEffect = extern union {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetMode: *const fn(
            self: *const IDCompositionBlendEffect,
            mode: D2D1_BLEND_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionFilterEffect: IDCompositionFilterEffect,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
    pub fn SetMode(self: *const IDCompositionBlendEffect, mode: D2D1_BLEND_MODE) callconv(.Inline) HRESULT {
        return self.vtable.SetMode(self, mode);
    }
};

const IID_IDCompositionArithmeticCompositeEffect_Value = Guid.initString("3b67dfa8-e3dd-4e61-b640-46c2f3d739dc");
pub const IID_IDCompositionArithmeticCompositeEffect = &IID_IDCompositionArithmeticCompositeEffect_Value;
pub const IDCompositionArithmeticCompositeEffect = extern union {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetCoefficients: *const fn(
            self: *const IDCompositionArithmeticCompositeEffect,
            coefficients: ?*const D2D_VECTOR_4F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClampOutput: *const fn(
            self: *const IDCompositionArithmeticCompositeEffect,
            clampoutput: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCoefficient1_TODO_A: *const fn(
            self: *const IDCompositionArithmeticCompositeEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCoefficient1_TODO_B: *const fn(
            self: *const IDCompositionArithmeticCompositeEffect,
            Coeffcient1: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCoefficient2_TODO_A: *const fn(
            self: *const IDCompositionArithmeticCompositeEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCoefficient2_TODO_B: *const fn(
            self: *const IDCompositionArithmeticCompositeEffect,
            Coefficient2: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCoefficient3_TODO_A: *const fn(
            self: *const IDCompositionArithmeticCompositeEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCoefficient3_TODO_B: *const fn(
            self: *const IDCompositionArithmeticCompositeEffect,
            Coefficient3: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCoefficient4_TODO_A: *const fn(
            self: *const IDCompositionArithmeticCompositeEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCoefficient4_TODO_B: *const fn(
            self: *const IDCompositionArithmeticCompositeEffect,
            Coefficient4: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionFilterEffect: IDCompositionFilterEffect,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
    pub const SetCoefficient2 = @compileError("COM method 'SetCoefficient2' must be called using one of the following overload names: SetCoefficient2_TODO_A, SetCoefficient2_TODO_B");
    pub const SetCoefficient1 = @compileError("COM method 'SetCoefficient1' must be called using one of the following overload names: SetCoefficient1_TODO_B, SetCoefficient1_TODO_A");
    pub const SetCoefficient3 = @compileError("COM method 'SetCoefficient3' must be called using one of the following overload names: SetCoefficient3_TODO_A, SetCoefficient3_TODO_B");
    pub const SetCoefficient4 = @compileError("COM method 'SetCoefficient4' must be called using one of the following overload names: SetCoefficient4_TODO_A, SetCoefficient4_TODO_B");
    pub fn SetCoefficients(self: *const IDCompositionArithmeticCompositeEffect, coefficients: ?*const D2D_VECTOR_4F) callconv(.Inline) HRESULT {
        return self.vtable.SetCoefficients(self, coefficients);
    }
    pub fn SetClampOutput(self: *const IDCompositionArithmeticCompositeEffect, clampoutput: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetClampOutput(self, clampoutput);
    }
    pub fn SetCoefficient1_TODO_A(self: *const IDCompositionArithmeticCompositeEffect, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetCoefficient1_TODO_A(self, animation);
    }
    pub fn SetCoefficient1_TODO_B(self: *const IDCompositionArithmeticCompositeEffect, Coeffcient1: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetCoefficient1_TODO_B(self, Coeffcient1);
    }
    pub fn SetCoefficient2_TODO_A(self: *const IDCompositionArithmeticCompositeEffect, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetCoefficient2_TODO_A(self, animation);
    }
    pub fn SetCoefficient2_TODO_B(self: *const IDCompositionArithmeticCompositeEffect, Coefficient2: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetCoefficient2_TODO_B(self, Coefficient2);
    }
    pub fn SetCoefficient3_TODO_A(self: *const IDCompositionArithmeticCompositeEffect, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetCoefficient3_TODO_A(self, animation);
    }
    pub fn SetCoefficient3_TODO_B(self: *const IDCompositionArithmeticCompositeEffect, Coefficient3: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetCoefficient3_TODO_B(self, Coefficient3);
    }
    pub fn SetCoefficient4_TODO_A(self: *const IDCompositionArithmeticCompositeEffect, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetCoefficient4_TODO_A(self, animation);
    }
    pub fn SetCoefficient4_TODO_B(self: *const IDCompositionArithmeticCompositeEffect, Coefficient4: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetCoefficient4_TODO_B(self, Coefficient4);
    }
};

const IID_IDCompositionAffineTransform2DEffect_Value = Guid.initString("0b74b9e8-cdd6-492f-bbbc-5ed32157026d");
pub const IID_IDCompositionAffineTransform2DEffect = &IID_IDCompositionAffineTransform2DEffect_Value;
pub const IDCompositionAffineTransform2DEffect = extern union {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetInterpolationMode: *const fn(
            self: *const IDCompositionAffineTransform2DEffect,
            interpolationMode: D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBorderMode: *const fn(
            self: *const IDCompositionAffineTransform2DEffect,
            borderMode: D2D1_BORDER_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransformMatrix: *const fn(
            self: *const IDCompositionAffineTransform2DEffect,
            transformMatrix: ?*const D2D_MATRIX_3X2_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransformMatrixElement_TODO_A: *const fn(
            self: *const IDCompositionAffineTransform2DEffect,
            row: i32,
            column: i32,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransformMatrixElement_TODO_B: *const fn(
            self: *const IDCompositionAffineTransform2DEffect,
            row: i32,
            column: i32,
            value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSharpness_TODO_A: *const fn(
            self: *const IDCompositionAffineTransform2DEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSharpness_TODO_B: *const fn(
            self: *const IDCompositionAffineTransform2DEffect,
            sharpness: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDCompositionFilterEffect: IDCompositionFilterEffect,
    IDCompositionEffect: IDCompositionEffect,
    IUnknown: IUnknown,
    pub const SetSharpness = @compileError("COM method 'SetSharpness' must be called using one of the following overload names: SetSharpness_TODO_B, SetSharpness_TODO_A");
    pub const SetTransformMatrixElement = @compileError("COM method 'SetTransformMatrixElement' must be called using one of the following overload names: SetTransformMatrixElement_TODO_A, SetTransformMatrixElement_TODO_B");
    pub fn SetInterpolationMode(self: *const IDCompositionAffineTransform2DEffect, interpolationMode: D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE) callconv(.Inline) HRESULT {
        return self.vtable.SetInterpolationMode(self, interpolationMode);
    }
    pub fn SetBorderMode(self: *const IDCompositionAffineTransform2DEffect, borderMode: D2D1_BORDER_MODE) callconv(.Inline) HRESULT {
        return self.vtable.SetBorderMode(self, borderMode);
    }
    pub fn SetTransformMatrix(self: *const IDCompositionAffineTransform2DEffect, transformMatrix: ?*const D2D_MATRIX_3X2_F) callconv(.Inline) HRESULT {
        return self.vtable.SetTransformMatrix(self, transformMatrix);
    }
    pub fn SetTransformMatrixElement_TODO_A(self: *const IDCompositionAffineTransform2DEffect, row: i32, column: i32, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetTransformMatrixElement_TODO_A(self, row, column, animation);
    }
    pub fn SetTransformMatrixElement_TODO_B(self: *const IDCompositionAffineTransform2DEffect, row: i32, column: i32, value: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetTransformMatrixElement_TODO_B(self, row, column, value);
    }
    pub fn SetSharpness_TODO_A(self: *const IDCompositionAffineTransform2DEffect, animation: ?*IDCompositionAnimation) callconv(.Inline) HRESULT {
        return self.vtable.SetSharpness_TODO_A(self, animation);
    }
    pub fn SetSharpness_TODO_B(self: *const IDCompositionAffineTransform2DEffect, sharpness: f32) callconv(.Inline) HRESULT {
        return self.vtable.SetSharpness_TODO_B(self, sharpness);
    }
};

pub const DCompositionInkTrailPoint = extern struct {
    x: f32,
    y: f32,
    radius: f32,
};

const IID_IDCompositionDelegatedInkTrail_Value = Guid.initString("c2448e9b-547d-4057-8cf5-8144ede1c2da");
pub const IID_IDCompositionDelegatedInkTrail = &IID_IDCompositionDelegatedInkTrail_Value;
pub const IDCompositionDelegatedInkTrail = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddTrailPoints: *const fn(
            self: *const IDCompositionDelegatedInkTrail,
            inkPoints: [*]const DCompositionInkTrailPoint,
            inkPointsCount: u32,
            generationId: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddTrailPointsWithPrediction: *const fn(
            self: *const IDCompositionDelegatedInkTrail,
            inkPoints: [*]const DCompositionInkTrailPoint,
            inkPointsCount: u32,
            predictedInkPoints: [*]const DCompositionInkTrailPoint,
            predictedInkPointsCount: u32,
            generationId: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveTrailPoints: *const fn(
            self: *const IDCompositionDelegatedInkTrail,
            generationId: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartNewTrail: *const fn(
            self: *const IDCompositionDelegatedInkTrail,
            color: ?*const D2D_COLOR_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn AddTrailPoints(self: *const IDCompositionDelegatedInkTrail, inkPoints: [*]const DCompositionInkTrailPoint, inkPointsCount: u32, generationId: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.AddTrailPoints(self, inkPoints, inkPointsCount, generationId);
    }
    pub fn AddTrailPointsWithPrediction(self: *const IDCompositionDelegatedInkTrail, inkPoints: [*]const DCompositionInkTrailPoint, inkPointsCount: u32, predictedInkPoints: [*]const DCompositionInkTrailPoint, predictedInkPointsCount: u32, generationId: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.AddTrailPointsWithPrediction(self, inkPoints, inkPointsCount, predictedInkPoints, predictedInkPointsCount, generationId);
    }
    pub fn RemoveTrailPoints(self: *const IDCompositionDelegatedInkTrail, generationId: u32) callconv(.Inline) HRESULT {
        return self.vtable.RemoveTrailPoints(self, generationId);
    }
    pub fn StartNewTrail(self: *const IDCompositionDelegatedInkTrail, color: ?*const D2D_COLOR_F) callconv(.Inline) HRESULT {
        return self.vtable.StartNewTrail(self, color);
    }
};

const IID_IDCompositionInkTrailDevice_Value = Guid.initString("df0c7cec-cdeb-4d4a-b91c-721bf22f4e6c");
pub const IID_IDCompositionInkTrailDevice = &IID_IDCompositionInkTrailDevice_Value;
pub const IDCompositionInkTrailDevice = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateDelegatedInkTrail: *const fn(
            self: *const IDCompositionInkTrailDevice,
            inkTrail: ?*?*IDCompositionDelegatedInkTrail,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDelegatedInkTrailForSwapChain: *const fn(
            self: *const IDCompositionInkTrailDevice,
            swapChain: ?*IUnknown,
            inkTrail: ?*?*IDCompositionDelegatedInkTrail,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateDelegatedInkTrail(self: *const IDCompositionInkTrailDevice, inkTrail: ?*?*IDCompositionDelegatedInkTrail) callconv(.Inline) HRESULT {
        return self.vtable.CreateDelegatedInkTrail(self, inkTrail);
    }
    pub fn CreateDelegatedInkTrailForSwapChain(self: *const IDCompositionInkTrailDevice, swapChain: ?*IUnknown, inkTrail: ?*?*IDCompositionDelegatedInkTrail) callconv(.Inline) HRESULT {
        return self.vtable.CreateDelegatedInkTrailForSwapChain(self, swapChain, inkTrail);
    }
};


//--------------------------------------------------------------------------------
// Section: Functions (11)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows8.0'
pub extern "dcomp" fn DCompositionCreateDevice(
    dxgiDevice: ?*IDXGIDevice,
    iid: ?*const Guid,
    dcompositionDevice: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.1'
pub extern "dcomp" fn DCompositionCreateDevice2(
    renderingDevice: ?*IUnknown,
    iid: ?*const Guid,
    dcompositionDevice: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dcomp" fn DCompositionCreateDevice3(
    renderingDevice: ?*IUnknown,
    iid: ?*const Guid,
    dcompositionDevice: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "dcomp" fn DCompositionCreateSurfaceHandle(
    desiredAccess: u32,
    securityAttributes: ?*SECURITY_ATTRIBUTES,
    surfaceHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dcomp" fn DCompositionAttachMouseWheelToHwnd(
    visual: ?*IDCompositionVisual,
    hwnd: ?HWND,
    enable: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dcomp" fn DCompositionAttachMouseDragToHwnd(
    visual: ?*IDCompositionVisual,
    hwnd: ?HWND,
    enable: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dcomp" fn DCompositionGetFrameId(
    frameIdType: COMPOSITION_FRAME_ID_TYPE,
    frameId: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dcomp" fn DCompositionGetStatistics(
    frameId: u64,
    frameStats: ?*COMPOSITION_FRAME_STATS,
    targetIdCount: u32,
    targetIds: ?*COMPOSITION_TARGET_ID,
    actualTargetIdCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dcomp" fn DCompositionGetTargetStatistics(
    frameId: u64,
    targetId: ?*const COMPOSITION_TARGET_ID,
    targetStats: ?*COMPOSITION_TARGET_STATS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dcomp" fn DCompositionBoostCompositorClock(
    enable: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dcomp" fn DCompositionWaitForCompositorClock(
    count: u32,
    handles: ?[*]const ?HANDLE,
    timeoutInMs: u32,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (29)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE = @import("../graphics/direct2d/common.zig").D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE;
const D2D1_BLEND_MODE = @import("../graphics/direct2d/common.zig").D2D1_BLEND_MODE;
const D2D1_BORDER_MODE = @import("../graphics/direct2d/common.zig").D2D1_BORDER_MODE;
const D2D1_COLORMATRIX_ALPHA_MODE = @import("../graphics/direct2d/common.zig").D2D1_COLORMATRIX_ALPHA_MODE;
const D2D1_COMPOSITE_MODE = @import("../graphics/direct2d/common.zig").D2D1_COMPOSITE_MODE;
const D2D1_TURBULENCE_NOISE = @import("../graphics/direct2d/common.zig").D2D1_TURBULENCE_NOISE;
const D2D_COLOR_F = @import("../graphics/direct2d/common.zig").D2D_COLOR_F;
const D2D_MATRIX_3X2_F = @import("../graphics/direct2d/common.zig").D2D_MATRIX_3X2_F;
const D2D_MATRIX_4X4_F = @import("../graphics/direct2d/common.zig").D2D_MATRIX_4X4_F;
const D2D_MATRIX_5X4_F = @import("../graphics/direct2d/common.zig").D2D_MATRIX_5X4_F;
const D2D_RECT_F = @import("../graphics/direct2d/common.zig").D2D_RECT_F;
const D2D_VECTOR_2F = @import("../graphics/direct2d/common.zig").D2D_VECTOR_2F;
const D2D_VECTOR_4F = @import("../graphics/direct2d/common.zig").D2D_VECTOR_4F;
const D3DMATRIX = @import("../graphics/direct3d.zig").D3DMATRIX;
const DXGI_ALPHA_MODE = @import("../graphics/dxgi/common.zig").DXGI_ALPHA_MODE;
const DXGI_FORMAT = @import("../graphics/dxgi/common.zig").DXGI_FORMAT;
const DXGI_RATIONAL = @import("../graphics/dxgi/common.zig").DXGI_RATIONAL;
const HANDLE = @import("../foundation.zig").HANDLE;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IDXGIDevice = @import("../graphics/dxgi.zig").IDXGIDevice;
const IUnknown = @import("../system/com.zig").IUnknown;
const LARGE_INTEGER = @import("../foundation.zig").LARGE_INTEGER;
const LUID = @import("../foundation.zig").LUID;
const POINT = @import("../foundation.zig").POINT;
const RECT = @import("../foundation.zig").RECT;
const SECURITY_ATTRIBUTES = @import("../security.zig").SECURITY_ATTRIBUTES;

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
