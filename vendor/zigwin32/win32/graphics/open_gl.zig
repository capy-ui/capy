//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (703)
//--------------------------------------------------------------------------------
pub const GL_VERSION_1_1 = @as(u32, 1);
pub const GL_ACCUM = @as(u32, 256);
pub const GL_LOAD = @as(u32, 257);
pub const GL_RETURN = @as(u32, 258);
pub const GL_MULT = @as(u32, 259);
pub const GL_ADD = @as(u32, 260);
pub const GL_NEVER = @as(u32, 512);
pub const GL_LESS = @as(u32, 513);
pub const GL_EQUAL = @as(u32, 514);
pub const GL_LEQUAL = @as(u32, 515);
pub const GL_GREATER = @as(u32, 516);
pub const GL_NOTEQUAL = @as(u32, 517);
pub const GL_GEQUAL = @as(u32, 518);
pub const GL_ALWAYS = @as(u32, 519);
pub const GL_CURRENT_BIT = @as(u32, 1);
pub const GL_POINT_BIT = @as(u32, 2);
pub const GL_LINE_BIT = @as(u32, 4);
pub const GL_POLYGON_BIT = @as(u32, 8);
pub const GL_POLYGON_STIPPLE_BIT = @as(u32, 16);
pub const GL_PIXEL_MODE_BIT = @as(u32, 32);
pub const GL_LIGHTING_BIT = @as(u32, 64);
pub const GL_FOG_BIT = @as(u32, 128);
pub const GL_DEPTH_BUFFER_BIT = @as(u32, 256);
pub const GL_ACCUM_BUFFER_BIT = @as(u32, 512);
pub const GL_STENCIL_BUFFER_BIT = @as(u32, 1024);
pub const GL_VIEWPORT_BIT = @as(u32, 2048);
pub const GL_TRANSFORM_BIT = @as(u32, 4096);
pub const GL_ENABLE_BIT = @as(u32, 8192);
pub const GL_COLOR_BUFFER_BIT = @as(u32, 16384);
pub const GL_HINT_BIT = @as(u32, 32768);
pub const GL_EVAL_BIT = @as(u32, 65536);
pub const GL_LIST_BIT = @as(u32, 131072);
pub const GL_TEXTURE_BIT = @as(u32, 262144);
pub const GL_SCISSOR_BIT = @as(u32, 524288);
pub const GL_ALL_ATTRIB_BITS = @as(u32, 1048575);
pub const GL_POINTS = @as(u32, 0);
pub const GL_LINES = @as(u32, 1);
pub const GL_LINE_LOOP = @as(u32, 2);
pub const GL_LINE_STRIP = @as(u32, 3);
pub const GL_TRIANGLES = @as(u32, 4);
pub const GL_TRIANGLE_STRIP = @as(u32, 5);
pub const GL_TRIANGLE_FAN = @as(u32, 6);
pub const GL_QUADS = @as(u32, 7);
pub const GL_QUAD_STRIP = @as(u32, 8);
pub const GL_POLYGON = @as(u32, 9);
pub const GL_ZERO = @as(u32, 0);
pub const GL_ONE = @as(u32, 1);
pub const GL_SRC_COLOR = @as(u32, 768);
pub const GL_ONE_MINUS_SRC_COLOR = @as(u32, 769);
pub const GL_SRC_ALPHA = @as(u32, 770);
pub const GL_ONE_MINUS_SRC_ALPHA = @as(u32, 771);
pub const GL_DST_ALPHA = @as(u32, 772);
pub const GL_ONE_MINUS_DST_ALPHA = @as(u32, 773);
pub const GL_DST_COLOR = @as(u32, 774);
pub const GL_ONE_MINUS_DST_COLOR = @as(u32, 775);
pub const GL_SRC_ALPHA_SATURATE = @as(u32, 776);
pub const GL_TRUE = @as(u32, 1);
pub const GL_FALSE = @as(u32, 0);
pub const GL_CLIP_PLANE0 = @as(u32, 12288);
pub const GL_CLIP_PLANE1 = @as(u32, 12289);
pub const GL_CLIP_PLANE2 = @as(u32, 12290);
pub const GL_CLIP_PLANE3 = @as(u32, 12291);
pub const GL_CLIP_PLANE4 = @as(u32, 12292);
pub const GL_CLIP_PLANE5 = @as(u32, 12293);
pub const GL_BYTE = @as(u32, 5120);
pub const GL_UNSIGNED_BYTE = @as(u32, 5121);
pub const GL_SHORT = @as(u32, 5122);
pub const GL_UNSIGNED_SHORT = @as(u32, 5123);
pub const GL_INT = @as(u32, 5124);
pub const GL_UNSIGNED_INT = @as(u32, 5125);
pub const GL_FLOAT = @as(u32, 5126);
pub const GL_2_BYTES = @as(u32, 5127);
pub const GL_3_BYTES = @as(u32, 5128);
pub const GL_4_BYTES = @as(u32, 5129);
pub const GL_DOUBLE = @as(u32, 5130);
pub const GL_NONE = @as(u32, 0);
pub const GL_FRONT_LEFT = @as(u32, 1024);
pub const GL_FRONT_RIGHT = @as(u32, 1025);
pub const GL_BACK_LEFT = @as(u32, 1026);
pub const GL_BACK_RIGHT = @as(u32, 1027);
pub const GL_FRONT = @as(u32, 1028);
pub const GL_BACK = @as(u32, 1029);
pub const GL_LEFT = @as(u32, 1030);
pub const GL_RIGHT = @as(u32, 1031);
pub const GL_FRONT_AND_BACK = @as(u32, 1032);
pub const GL_AUX0 = @as(u32, 1033);
pub const GL_AUX1 = @as(u32, 1034);
pub const GL_AUX2 = @as(u32, 1035);
pub const GL_AUX3 = @as(u32, 1036);
pub const GL_NO_ERROR = @as(u32, 0);
pub const GL_INVALID_ENUM = @as(u32, 1280);
pub const GL_INVALID_VALUE = @as(u32, 1281);
pub const GL_INVALID_OPERATION = @as(u32, 1282);
pub const GL_STACK_OVERFLOW = @as(u32, 1283);
pub const GL_STACK_UNDERFLOW = @as(u32, 1284);
pub const GL_OUT_OF_MEMORY = @as(u32, 1285);
pub const GL_2D = @as(u32, 1536);
pub const GL_3D = @as(u32, 1537);
pub const GL_3D_COLOR = @as(u32, 1538);
pub const GL_3D_COLOR_TEXTURE = @as(u32, 1539);
pub const GL_4D_COLOR_TEXTURE = @as(u32, 1540);
pub const GL_PASS_THROUGH_TOKEN = @as(u32, 1792);
pub const GL_POINT_TOKEN = @as(u32, 1793);
pub const GL_LINE_TOKEN = @as(u32, 1794);
pub const GL_POLYGON_TOKEN = @as(u32, 1795);
pub const GL_BITMAP_TOKEN = @as(u32, 1796);
pub const GL_DRAW_PIXEL_TOKEN = @as(u32, 1797);
pub const GL_COPY_PIXEL_TOKEN = @as(u32, 1798);
pub const GL_LINE_RESET_TOKEN = @as(u32, 1799);
pub const GL_EXP = @as(u32, 2048);
pub const GL_EXP2 = @as(u32, 2049);
pub const GL_CW = @as(u32, 2304);
pub const GL_CCW = @as(u32, 2305);
pub const GL_COEFF = @as(u32, 2560);
pub const GL_ORDER = @as(u32, 2561);
pub const GL_DOMAIN = @as(u32, 2562);
pub const GL_CURRENT_COLOR = @as(u32, 2816);
pub const GL_CURRENT_INDEX = @as(u32, 2817);
pub const GL_CURRENT_NORMAL = @as(u32, 2818);
pub const GL_CURRENT_TEXTURE_COORDS = @as(u32, 2819);
pub const GL_CURRENT_RASTER_COLOR = @as(u32, 2820);
pub const GL_CURRENT_RASTER_INDEX = @as(u32, 2821);
pub const GL_CURRENT_RASTER_TEXTURE_COORDS = @as(u32, 2822);
pub const GL_CURRENT_RASTER_POSITION = @as(u32, 2823);
pub const GL_CURRENT_RASTER_POSITION_VALID = @as(u32, 2824);
pub const GL_CURRENT_RASTER_DISTANCE = @as(u32, 2825);
pub const GL_POINT_SMOOTH = @as(u32, 2832);
pub const GL_POINT_SIZE = @as(u32, 2833);
pub const GL_POINT_SIZE_RANGE = @as(u32, 2834);
pub const GL_POINT_SIZE_GRANULARITY = @as(u32, 2835);
pub const GL_LINE_SMOOTH = @as(u32, 2848);
pub const GL_LINE_WIDTH = @as(u32, 2849);
pub const GL_LINE_WIDTH_RANGE = @as(u32, 2850);
pub const GL_LINE_WIDTH_GRANULARITY = @as(u32, 2851);
pub const GL_LINE_STIPPLE = @as(u32, 2852);
pub const GL_LINE_STIPPLE_PATTERN = @as(u32, 2853);
pub const GL_LINE_STIPPLE_REPEAT = @as(u32, 2854);
pub const GL_LIST_MODE = @as(u32, 2864);
pub const GL_MAX_LIST_NESTING = @as(u32, 2865);
pub const GL_LIST_BASE = @as(u32, 2866);
pub const GL_LIST_INDEX = @as(u32, 2867);
pub const GL_POLYGON_MODE = @as(u32, 2880);
pub const GL_POLYGON_SMOOTH = @as(u32, 2881);
pub const GL_POLYGON_STIPPLE = @as(u32, 2882);
pub const GL_EDGE_FLAG = @as(u32, 2883);
pub const GL_CULL_FACE = @as(u32, 2884);
pub const GL_CULL_FACE_MODE = @as(u32, 2885);
pub const GL_FRONT_FACE = @as(u32, 2886);
pub const GL_LIGHTING = @as(u32, 2896);
pub const GL_LIGHT_MODEL_LOCAL_VIEWER = @as(u32, 2897);
pub const GL_LIGHT_MODEL_TWO_SIDE = @as(u32, 2898);
pub const GL_LIGHT_MODEL_AMBIENT = @as(u32, 2899);
pub const GL_SHADE_MODEL = @as(u32, 2900);
pub const GL_COLOR_MATERIAL_FACE = @as(u32, 2901);
pub const GL_COLOR_MATERIAL_PARAMETER = @as(u32, 2902);
pub const GL_COLOR_MATERIAL = @as(u32, 2903);
pub const GL_FOG = @as(u32, 2912);
pub const GL_FOG_INDEX = @as(u32, 2913);
pub const GL_FOG_DENSITY = @as(u32, 2914);
pub const GL_FOG_START = @as(u32, 2915);
pub const GL_FOG_END = @as(u32, 2916);
pub const GL_FOG_MODE = @as(u32, 2917);
pub const GL_FOG_COLOR = @as(u32, 2918);
pub const GL_DEPTH_RANGE = @as(u32, 2928);
pub const GL_DEPTH_TEST = @as(u32, 2929);
pub const GL_DEPTH_WRITEMASK = @as(u32, 2930);
pub const GL_DEPTH_CLEAR_VALUE = @as(u32, 2931);
pub const GL_DEPTH_FUNC = @as(u32, 2932);
pub const GL_ACCUM_CLEAR_VALUE = @as(u32, 2944);
pub const GL_STENCIL_TEST = @as(u32, 2960);
pub const GL_STENCIL_CLEAR_VALUE = @as(u32, 2961);
pub const GL_STENCIL_FUNC = @as(u32, 2962);
pub const GL_STENCIL_VALUE_MASK = @as(u32, 2963);
pub const GL_STENCIL_FAIL = @as(u32, 2964);
pub const GL_STENCIL_PASS_DEPTH_FAIL = @as(u32, 2965);
pub const GL_STENCIL_PASS_DEPTH_PASS = @as(u32, 2966);
pub const GL_STENCIL_REF = @as(u32, 2967);
pub const GL_STENCIL_WRITEMASK = @as(u32, 2968);
pub const GL_MATRIX_MODE = @as(u32, 2976);
pub const GL_NORMALIZE = @as(u32, 2977);
pub const GL_VIEWPORT = @as(u32, 2978);
pub const GL_MODELVIEW_STACK_DEPTH = @as(u32, 2979);
pub const GL_PROJECTION_STACK_DEPTH = @as(u32, 2980);
pub const GL_TEXTURE_STACK_DEPTH = @as(u32, 2981);
pub const GL_MODELVIEW_MATRIX = @as(u32, 2982);
pub const GL_PROJECTION_MATRIX = @as(u32, 2983);
pub const GL_TEXTURE_MATRIX = @as(u32, 2984);
pub const GL_ATTRIB_STACK_DEPTH = @as(u32, 2992);
pub const GL_CLIENT_ATTRIB_STACK_DEPTH = @as(u32, 2993);
pub const GL_ALPHA_TEST = @as(u32, 3008);
pub const GL_ALPHA_TEST_FUNC = @as(u32, 3009);
pub const GL_ALPHA_TEST_REF = @as(u32, 3010);
pub const GL_DITHER = @as(u32, 3024);
pub const GL_BLEND_DST = @as(u32, 3040);
pub const GL_BLEND_SRC = @as(u32, 3041);
pub const GL_BLEND = @as(u32, 3042);
pub const GL_LOGIC_OP_MODE = @as(u32, 3056);
pub const GL_INDEX_LOGIC_OP = @as(u32, 3057);
pub const GL_COLOR_LOGIC_OP = @as(u32, 3058);
pub const GL_AUX_BUFFERS = @as(u32, 3072);
pub const GL_DRAW_BUFFER = @as(u32, 3073);
pub const GL_READ_BUFFER = @as(u32, 3074);
pub const GL_SCISSOR_BOX = @as(u32, 3088);
pub const GL_SCISSOR_TEST = @as(u32, 3089);
pub const GL_INDEX_CLEAR_VALUE = @as(u32, 3104);
pub const GL_INDEX_WRITEMASK = @as(u32, 3105);
pub const GL_COLOR_CLEAR_VALUE = @as(u32, 3106);
pub const GL_COLOR_WRITEMASK = @as(u32, 3107);
pub const GL_INDEX_MODE = @as(u32, 3120);
pub const GL_RGBA_MODE = @as(u32, 3121);
pub const GL_DOUBLEBUFFER = @as(u32, 3122);
pub const GL_STEREO = @as(u32, 3123);
pub const GL_RENDER_MODE = @as(u32, 3136);
pub const GL_PERSPECTIVE_CORRECTION_HINT = @as(u32, 3152);
pub const GL_POINT_SMOOTH_HINT = @as(u32, 3153);
pub const GL_LINE_SMOOTH_HINT = @as(u32, 3154);
pub const GL_POLYGON_SMOOTH_HINT = @as(u32, 3155);
pub const GL_FOG_HINT = @as(u32, 3156);
pub const GL_TEXTURE_GEN_S = @as(u32, 3168);
pub const GL_TEXTURE_GEN_T = @as(u32, 3169);
pub const GL_TEXTURE_GEN_R = @as(u32, 3170);
pub const GL_TEXTURE_GEN_Q = @as(u32, 3171);
pub const GL_PIXEL_MAP_I_TO_I = @as(u32, 3184);
pub const GL_PIXEL_MAP_S_TO_S = @as(u32, 3185);
pub const GL_PIXEL_MAP_I_TO_R = @as(u32, 3186);
pub const GL_PIXEL_MAP_I_TO_G = @as(u32, 3187);
pub const GL_PIXEL_MAP_I_TO_B = @as(u32, 3188);
pub const GL_PIXEL_MAP_I_TO_A = @as(u32, 3189);
pub const GL_PIXEL_MAP_R_TO_R = @as(u32, 3190);
pub const GL_PIXEL_MAP_G_TO_G = @as(u32, 3191);
pub const GL_PIXEL_MAP_B_TO_B = @as(u32, 3192);
pub const GL_PIXEL_MAP_A_TO_A = @as(u32, 3193);
pub const GL_PIXEL_MAP_I_TO_I_SIZE = @as(u32, 3248);
pub const GL_PIXEL_MAP_S_TO_S_SIZE = @as(u32, 3249);
pub const GL_PIXEL_MAP_I_TO_R_SIZE = @as(u32, 3250);
pub const GL_PIXEL_MAP_I_TO_G_SIZE = @as(u32, 3251);
pub const GL_PIXEL_MAP_I_TO_B_SIZE = @as(u32, 3252);
pub const GL_PIXEL_MAP_I_TO_A_SIZE = @as(u32, 3253);
pub const GL_PIXEL_MAP_R_TO_R_SIZE = @as(u32, 3254);
pub const GL_PIXEL_MAP_G_TO_G_SIZE = @as(u32, 3255);
pub const GL_PIXEL_MAP_B_TO_B_SIZE = @as(u32, 3256);
pub const GL_PIXEL_MAP_A_TO_A_SIZE = @as(u32, 3257);
pub const GL_UNPACK_SWAP_BYTES = @as(u32, 3312);
pub const GL_UNPACK_LSB_FIRST = @as(u32, 3313);
pub const GL_UNPACK_ROW_LENGTH = @as(u32, 3314);
pub const GL_UNPACK_SKIP_ROWS = @as(u32, 3315);
pub const GL_UNPACK_SKIP_PIXELS = @as(u32, 3316);
pub const GL_UNPACK_ALIGNMENT = @as(u32, 3317);
pub const GL_PACK_SWAP_BYTES = @as(u32, 3328);
pub const GL_PACK_LSB_FIRST = @as(u32, 3329);
pub const GL_PACK_ROW_LENGTH = @as(u32, 3330);
pub const GL_PACK_SKIP_ROWS = @as(u32, 3331);
pub const GL_PACK_SKIP_PIXELS = @as(u32, 3332);
pub const GL_PACK_ALIGNMENT = @as(u32, 3333);
pub const GL_MAP_COLOR = @as(u32, 3344);
pub const GL_MAP_STENCIL = @as(u32, 3345);
pub const GL_INDEX_SHIFT = @as(u32, 3346);
pub const GL_INDEX_OFFSET = @as(u32, 3347);
pub const GL_RED_SCALE = @as(u32, 3348);
pub const GL_RED_BIAS = @as(u32, 3349);
pub const GL_ZOOM_X = @as(u32, 3350);
pub const GL_ZOOM_Y = @as(u32, 3351);
pub const GL_GREEN_SCALE = @as(u32, 3352);
pub const GL_GREEN_BIAS = @as(u32, 3353);
pub const GL_BLUE_SCALE = @as(u32, 3354);
pub const GL_BLUE_BIAS = @as(u32, 3355);
pub const GL_ALPHA_SCALE = @as(u32, 3356);
pub const GL_ALPHA_BIAS = @as(u32, 3357);
pub const GL_DEPTH_SCALE = @as(u32, 3358);
pub const GL_DEPTH_BIAS = @as(u32, 3359);
pub const GL_MAX_EVAL_ORDER = @as(u32, 3376);
pub const GL_MAX_LIGHTS = @as(u32, 3377);
pub const GL_MAX_CLIP_PLANES = @as(u32, 3378);
pub const GL_MAX_TEXTURE_SIZE = @as(u32, 3379);
pub const GL_MAX_PIXEL_MAP_TABLE = @as(u32, 3380);
pub const GL_MAX_ATTRIB_STACK_DEPTH = @as(u32, 3381);
pub const GL_MAX_MODELVIEW_STACK_DEPTH = @as(u32, 3382);
pub const GL_MAX_NAME_STACK_DEPTH = @as(u32, 3383);
pub const GL_MAX_PROJECTION_STACK_DEPTH = @as(u32, 3384);
pub const GL_MAX_TEXTURE_STACK_DEPTH = @as(u32, 3385);
pub const GL_MAX_VIEWPORT_DIMS = @as(u32, 3386);
pub const GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = @as(u32, 3387);
pub const GL_SUBPIXEL_BITS = @as(u32, 3408);
pub const GL_INDEX_BITS = @as(u32, 3409);
pub const GL_RED_BITS = @as(u32, 3410);
pub const GL_GREEN_BITS = @as(u32, 3411);
pub const GL_BLUE_BITS = @as(u32, 3412);
pub const GL_ALPHA_BITS = @as(u32, 3413);
pub const GL_DEPTH_BITS = @as(u32, 3414);
pub const GL_STENCIL_BITS = @as(u32, 3415);
pub const GL_ACCUM_RED_BITS = @as(u32, 3416);
pub const GL_ACCUM_GREEN_BITS = @as(u32, 3417);
pub const GL_ACCUM_BLUE_BITS = @as(u32, 3418);
pub const GL_ACCUM_ALPHA_BITS = @as(u32, 3419);
pub const GL_NAME_STACK_DEPTH = @as(u32, 3440);
pub const GL_AUTO_NORMAL = @as(u32, 3456);
pub const GL_MAP1_COLOR_4 = @as(u32, 3472);
pub const GL_MAP1_INDEX = @as(u32, 3473);
pub const GL_MAP1_NORMAL = @as(u32, 3474);
pub const GL_MAP1_TEXTURE_COORD_1 = @as(u32, 3475);
pub const GL_MAP1_TEXTURE_COORD_2 = @as(u32, 3476);
pub const GL_MAP1_TEXTURE_COORD_3 = @as(u32, 3477);
pub const GL_MAP1_TEXTURE_COORD_4 = @as(u32, 3478);
pub const GL_MAP1_VERTEX_3 = @as(u32, 3479);
pub const GL_MAP1_VERTEX_4 = @as(u32, 3480);
pub const GL_MAP2_COLOR_4 = @as(u32, 3504);
pub const GL_MAP2_INDEX = @as(u32, 3505);
pub const GL_MAP2_NORMAL = @as(u32, 3506);
pub const GL_MAP2_TEXTURE_COORD_1 = @as(u32, 3507);
pub const GL_MAP2_TEXTURE_COORD_2 = @as(u32, 3508);
pub const GL_MAP2_TEXTURE_COORD_3 = @as(u32, 3509);
pub const GL_MAP2_TEXTURE_COORD_4 = @as(u32, 3510);
pub const GL_MAP2_VERTEX_3 = @as(u32, 3511);
pub const GL_MAP2_VERTEX_4 = @as(u32, 3512);
pub const GL_MAP1_GRID_DOMAIN = @as(u32, 3536);
pub const GL_MAP1_GRID_SEGMENTS = @as(u32, 3537);
pub const GL_MAP2_GRID_DOMAIN = @as(u32, 3538);
pub const GL_MAP2_GRID_SEGMENTS = @as(u32, 3539);
pub const GL_TEXTURE_1D = @as(u32, 3552);
pub const GL_TEXTURE_2D = @as(u32, 3553);
pub const GL_FEEDBACK_BUFFER_POINTER = @as(u32, 3568);
pub const GL_FEEDBACK_BUFFER_SIZE = @as(u32, 3569);
pub const GL_FEEDBACK_BUFFER_TYPE = @as(u32, 3570);
pub const GL_SELECTION_BUFFER_POINTER = @as(u32, 3571);
pub const GL_SELECTION_BUFFER_SIZE = @as(u32, 3572);
pub const GL_TEXTURE_WIDTH = @as(u32, 4096);
pub const GL_TEXTURE_HEIGHT = @as(u32, 4097);
pub const GL_TEXTURE_INTERNAL_FORMAT = @as(u32, 4099);
pub const GL_TEXTURE_BORDER_COLOR = @as(u32, 4100);
pub const GL_TEXTURE_BORDER = @as(u32, 4101);
pub const GL_DONT_CARE = @as(u32, 4352);
pub const GL_FASTEST = @as(u32, 4353);
pub const GL_NICEST = @as(u32, 4354);
pub const GL_LIGHT0 = @as(u32, 16384);
pub const GL_LIGHT1 = @as(u32, 16385);
pub const GL_LIGHT2 = @as(u32, 16386);
pub const GL_LIGHT3 = @as(u32, 16387);
pub const GL_LIGHT4 = @as(u32, 16388);
pub const GL_LIGHT5 = @as(u32, 16389);
pub const GL_LIGHT6 = @as(u32, 16390);
pub const GL_LIGHT7 = @as(u32, 16391);
pub const GL_AMBIENT = @as(u32, 4608);
pub const GL_DIFFUSE = @as(u32, 4609);
pub const GL_SPECULAR = @as(u32, 4610);
pub const GL_POSITION = @as(u32, 4611);
pub const GL_SPOT_DIRECTION = @as(u32, 4612);
pub const GL_SPOT_EXPONENT = @as(u32, 4613);
pub const GL_SPOT_CUTOFF = @as(u32, 4614);
pub const GL_CONSTANT_ATTENUATION = @as(u32, 4615);
pub const GL_LINEAR_ATTENUATION = @as(u32, 4616);
pub const GL_QUADRATIC_ATTENUATION = @as(u32, 4617);
pub const GL_COMPILE = @as(u32, 4864);
pub const GL_COMPILE_AND_EXECUTE = @as(u32, 4865);
pub const GL_CLEAR = @as(u32, 5376);
pub const GL_AND = @as(u32, 5377);
pub const GL_AND_REVERSE = @as(u32, 5378);
pub const GL_COPY = @as(u32, 5379);
pub const GL_AND_INVERTED = @as(u32, 5380);
pub const GL_NOOP = @as(u32, 5381);
pub const GL_XOR = @as(u32, 5382);
pub const GL_OR = @as(u32, 5383);
pub const GL_NOR = @as(u32, 5384);
pub const GL_EQUIV = @as(u32, 5385);
pub const GL_INVERT = @as(u32, 5386);
pub const GL_OR_REVERSE = @as(u32, 5387);
pub const GL_COPY_INVERTED = @as(u32, 5388);
pub const GL_OR_INVERTED = @as(u32, 5389);
pub const GL_NAND = @as(u32, 5390);
pub const GL_SET = @as(u32, 5391);
pub const GL_EMISSION = @as(u32, 5632);
pub const GL_SHININESS = @as(u32, 5633);
pub const GL_AMBIENT_AND_DIFFUSE = @as(u32, 5634);
pub const GL_COLOR_INDEXES = @as(u32, 5635);
pub const GL_MODELVIEW = @as(u32, 5888);
pub const GL_PROJECTION = @as(u32, 5889);
pub const GL_TEXTURE = @as(u32, 5890);
pub const GL_COLOR = @as(u32, 6144);
pub const GL_DEPTH = @as(u32, 6145);
pub const GL_STENCIL = @as(u32, 6146);
pub const GL_COLOR_INDEX = @as(u32, 6400);
pub const GL_STENCIL_INDEX = @as(u32, 6401);
pub const GL_DEPTH_COMPONENT = @as(u32, 6402);
pub const GL_RED = @as(u32, 6403);
pub const GL_GREEN = @as(u32, 6404);
pub const GL_BLUE = @as(u32, 6405);
pub const GL_ALPHA = @as(u32, 6406);
pub const GL_RGB = @as(u32, 6407);
pub const GL_RGBA = @as(u32, 6408);
pub const GL_LUMINANCE = @as(u32, 6409);
pub const GL_LUMINANCE_ALPHA = @as(u32, 6410);
pub const GL_BITMAP = @as(u32, 6656);
pub const GL_POINT = @as(u32, 6912);
pub const GL_LINE = @as(u32, 6913);
pub const GL_FILL = @as(u32, 6914);
pub const GL_RENDER = @as(u32, 7168);
pub const GL_FEEDBACK = @as(u32, 7169);
pub const GL_SELECT = @as(u32, 7170);
pub const GL_FLAT = @as(u32, 7424);
pub const GL_SMOOTH = @as(u32, 7425);
pub const GL_KEEP = @as(u32, 7680);
pub const GL_REPLACE = @as(u32, 7681);
pub const GL_INCR = @as(u32, 7682);
pub const GL_DECR = @as(u32, 7683);
pub const GL_VENDOR = @as(u32, 7936);
pub const GL_RENDERER = @as(u32, 7937);
pub const GL_VERSION = @as(u32, 7938);
pub const GL_EXTENSIONS = @as(u32, 7939);
pub const GL_S = @as(u32, 8192);
pub const GL_T = @as(u32, 8193);
pub const GL_R = @as(u32, 8194);
pub const GL_Q = @as(u32, 8195);
pub const GL_MODULATE = @as(u32, 8448);
pub const GL_DECAL = @as(u32, 8449);
pub const GL_TEXTURE_ENV_MODE = @as(u32, 8704);
pub const GL_TEXTURE_ENV_COLOR = @as(u32, 8705);
pub const GL_TEXTURE_ENV = @as(u32, 8960);
pub const GL_EYE_LINEAR = @as(u32, 9216);
pub const GL_OBJECT_LINEAR = @as(u32, 9217);
pub const GL_SPHERE_MAP = @as(u32, 9218);
pub const GL_TEXTURE_GEN_MODE = @as(u32, 9472);
pub const GL_OBJECT_PLANE = @as(u32, 9473);
pub const GL_EYE_PLANE = @as(u32, 9474);
pub const GL_NEAREST = @as(u32, 9728);
pub const GL_LINEAR = @as(u32, 9729);
pub const GL_NEAREST_MIPMAP_NEAREST = @as(u32, 9984);
pub const GL_LINEAR_MIPMAP_NEAREST = @as(u32, 9985);
pub const GL_NEAREST_MIPMAP_LINEAR = @as(u32, 9986);
pub const GL_LINEAR_MIPMAP_LINEAR = @as(u32, 9987);
pub const GL_TEXTURE_MAG_FILTER = @as(u32, 10240);
pub const GL_TEXTURE_MIN_FILTER = @as(u32, 10241);
pub const GL_TEXTURE_WRAP_S = @as(u32, 10242);
pub const GL_TEXTURE_WRAP_T = @as(u32, 10243);
pub const GL_CLAMP = @as(u32, 10496);
pub const GL_REPEAT = @as(u32, 10497);
pub const GL_CLIENT_PIXEL_STORE_BIT = @as(u32, 1);
pub const GL_CLIENT_VERTEX_ARRAY_BIT = @as(u32, 2);
pub const GL_CLIENT_ALL_ATTRIB_BITS = @as(u32, 4294967295);
pub const GL_POLYGON_OFFSET_FACTOR = @as(u32, 32824);
pub const GL_POLYGON_OFFSET_UNITS = @as(u32, 10752);
pub const GL_POLYGON_OFFSET_POINT = @as(u32, 10753);
pub const GL_POLYGON_OFFSET_LINE = @as(u32, 10754);
pub const GL_POLYGON_OFFSET_FILL = @as(u32, 32823);
pub const GL_ALPHA4 = @as(u32, 32827);
pub const GL_ALPHA8 = @as(u32, 32828);
pub const GL_ALPHA12 = @as(u32, 32829);
pub const GL_ALPHA16 = @as(u32, 32830);
pub const GL_LUMINANCE4 = @as(u32, 32831);
pub const GL_LUMINANCE8 = @as(u32, 32832);
pub const GL_LUMINANCE12 = @as(u32, 32833);
pub const GL_LUMINANCE16 = @as(u32, 32834);
pub const GL_LUMINANCE4_ALPHA4 = @as(u32, 32835);
pub const GL_LUMINANCE6_ALPHA2 = @as(u32, 32836);
pub const GL_LUMINANCE8_ALPHA8 = @as(u32, 32837);
pub const GL_LUMINANCE12_ALPHA4 = @as(u32, 32838);
pub const GL_LUMINANCE12_ALPHA12 = @as(u32, 32839);
pub const GL_LUMINANCE16_ALPHA16 = @as(u32, 32840);
pub const GL_INTENSITY = @as(u32, 32841);
pub const GL_INTENSITY4 = @as(u32, 32842);
pub const GL_INTENSITY8 = @as(u32, 32843);
pub const GL_INTENSITY12 = @as(u32, 32844);
pub const GL_INTENSITY16 = @as(u32, 32845);
pub const GL_R3_G3_B2 = @as(u32, 10768);
pub const GL_RGB4 = @as(u32, 32847);
pub const GL_RGB5 = @as(u32, 32848);
pub const GL_RGB8 = @as(u32, 32849);
pub const GL_RGB10 = @as(u32, 32850);
pub const GL_RGB12 = @as(u32, 32851);
pub const GL_RGB16 = @as(u32, 32852);
pub const GL_RGBA2 = @as(u32, 32853);
pub const GL_RGBA4 = @as(u32, 32854);
pub const GL_RGB5_A1 = @as(u32, 32855);
pub const GL_RGBA8 = @as(u32, 32856);
pub const GL_RGB10_A2 = @as(u32, 32857);
pub const GL_RGBA12 = @as(u32, 32858);
pub const GL_RGBA16 = @as(u32, 32859);
pub const GL_TEXTURE_RED_SIZE = @as(u32, 32860);
pub const GL_TEXTURE_GREEN_SIZE = @as(u32, 32861);
pub const GL_TEXTURE_BLUE_SIZE = @as(u32, 32862);
pub const GL_TEXTURE_ALPHA_SIZE = @as(u32, 32863);
pub const GL_TEXTURE_LUMINANCE_SIZE = @as(u32, 32864);
pub const GL_TEXTURE_INTENSITY_SIZE = @as(u32, 32865);
pub const GL_PROXY_TEXTURE_1D = @as(u32, 32867);
pub const GL_PROXY_TEXTURE_2D = @as(u32, 32868);
pub const GL_TEXTURE_PRIORITY = @as(u32, 32870);
pub const GL_TEXTURE_RESIDENT = @as(u32, 32871);
pub const GL_TEXTURE_BINDING_1D = @as(u32, 32872);
pub const GL_TEXTURE_BINDING_2D = @as(u32, 32873);
pub const GL_VERTEX_ARRAY = @as(u32, 32884);
pub const GL_NORMAL_ARRAY = @as(u32, 32885);
pub const GL_COLOR_ARRAY = @as(u32, 32886);
pub const GL_INDEX_ARRAY = @as(u32, 32887);
pub const GL_TEXTURE_COORD_ARRAY = @as(u32, 32888);
pub const GL_EDGE_FLAG_ARRAY = @as(u32, 32889);
pub const GL_VERTEX_ARRAY_SIZE = @as(u32, 32890);
pub const GL_VERTEX_ARRAY_TYPE = @as(u32, 32891);
pub const GL_VERTEX_ARRAY_STRIDE = @as(u32, 32892);
pub const GL_NORMAL_ARRAY_TYPE = @as(u32, 32894);
pub const GL_NORMAL_ARRAY_STRIDE = @as(u32, 32895);
pub const GL_COLOR_ARRAY_SIZE = @as(u32, 32897);
pub const GL_COLOR_ARRAY_TYPE = @as(u32, 32898);
pub const GL_COLOR_ARRAY_STRIDE = @as(u32, 32899);
pub const GL_INDEX_ARRAY_TYPE = @as(u32, 32901);
pub const GL_INDEX_ARRAY_STRIDE = @as(u32, 32902);
pub const GL_TEXTURE_COORD_ARRAY_SIZE = @as(u32, 32904);
pub const GL_TEXTURE_COORD_ARRAY_TYPE = @as(u32, 32905);
pub const GL_TEXTURE_COORD_ARRAY_STRIDE = @as(u32, 32906);
pub const GL_EDGE_FLAG_ARRAY_STRIDE = @as(u32, 32908);
pub const GL_VERTEX_ARRAY_POINTER = @as(u32, 32910);
pub const GL_NORMAL_ARRAY_POINTER = @as(u32, 32911);
pub const GL_COLOR_ARRAY_POINTER = @as(u32, 32912);
pub const GL_INDEX_ARRAY_POINTER = @as(u32, 32913);
pub const GL_TEXTURE_COORD_ARRAY_POINTER = @as(u32, 32914);
pub const GL_EDGE_FLAG_ARRAY_POINTER = @as(u32, 32915);
pub const GL_V2F = @as(u32, 10784);
pub const GL_V3F = @as(u32, 10785);
pub const GL_C4UB_V2F = @as(u32, 10786);
pub const GL_C4UB_V3F = @as(u32, 10787);
pub const GL_C3F_V3F = @as(u32, 10788);
pub const GL_N3F_V3F = @as(u32, 10789);
pub const GL_C4F_N3F_V3F = @as(u32, 10790);
pub const GL_T2F_V3F = @as(u32, 10791);
pub const GL_T4F_V4F = @as(u32, 10792);
pub const GL_T2F_C4UB_V3F = @as(u32, 10793);
pub const GL_T2F_C3F_V3F = @as(u32, 10794);
pub const GL_T2F_N3F_V3F = @as(u32, 10795);
pub const GL_T2F_C4F_N3F_V3F = @as(u32, 10796);
pub const GL_T4F_C4F_N3F_V4F = @as(u32, 10797);
pub const GL_EXT_vertex_array = @as(u32, 1);
pub const GL_EXT_bgra = @as(u32, 1);
pub const GL_EXT_paletted_texture = @as(u32, 1);
pub const GL_WIN_swap_hint = @as(u32, 1);
pub const GL_WIN_draw_range_elements = @as(u32, 1);
pub const GL_VERTEX_ARRAY_EXT = @as(u32, 32884);
pub const GL_NORMAL_ARRAY_EXT = @as(u32, 32885);
pub const GL_COLOR_ARRAY_EXT = @as(u32, 32886);
pub const GL_INDEX_ARRAY_EXT = @as(u32, 32887);
pub const GL_TEXTURE_COORD_ARRAY_EXT = @as(u32, 32888);
pub const GL_EDGE_FLAG_ARRAY_EXT = @as(u32, 32889);
pub const GL_VERTEX_ARRAY_SIZE_EXT = @as(u32, 32890);
pub const GL_VERTEX_ARRAY_TYPE_EXT = @as(u32, 32891);
pub const GL_VERTEX_ARRAY_STRIDE_EXT = @as(u32, 32892);
pub const GL_VERTEX_ARRAY_COUNT_EXT = @as(u32, 32893);
pub const GL_NORMAL_ARRAY_TYPE_EXT = @as(u32, 32894);
pub const GL_NORMAL_ARRAY_STRIDE_EXT = @as(u32, 32895);
pub const GL_NORMAL_ARRAY_COUNT_EXT = @as(u32, 32896);
pub const GL_COLOR_ARRAY_SIZE_EXT = @as(u32, 32897);
pub const GL_COLOR_ARRAY_TYPE_EXT = @as(u32, 32898);
pub const GL_COLOR_ARRAY_STRIDE_EXT = @as(u32, 32899);
pub const GL_COLOR_ARRAY_COUNT_EXT = @as(u32, 32900);
pub const GL_INDEX_ARRAY_TYPE_EXT = @as(u32, 32901);
pub const GL_INDEX_ARRAY_STRIDE_EXT = @as(u32, 32902);
pub const GL_INDEX_ARRAY_COUNT_EXT = @as(u32, 32903);
pub const GL_TEXTURE_COORD_ARRAY_SIZE_EXT = @as(u32, 32904);
pub const GL_TEXTURE_COORD_ARRAY_TYPE_EXT = @as(u32, 32905);
pub const GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = @as(u32, 32906);
pub const GL_TEXTURE_COORD_ARRAY_COUNT_EXT = @as(u32, 32907);
pub const GL_EDGE_FLAG_ARRAY_STRIDE_EXT = @as(u32, 32908);
pub const GL_EDGE_FLAG_ARRAY_COUNT_EXT = @as(u32, 32909);
pub const GL_VERTEX_ARRAY_POINTER_EXT = @as(u32, 32910);
pub const GL_NORMAL_ARRAY_POINTER_EXT = @as(u32, 32911);
pub const GL_COLOR_ARRAY_POINTER_EXT = @as(u32, 32912);
pub const GL_INDEX_ARRAY_POINTER_EXT = @as(u32, 32913);
pub const GL_TEXTURE_COORD_ARRAY_POINTER_EXT = @as(u32, 32914);
pub const GL_EDGE_FLAG_ARRAY_POINTER_EXT = @as(u32, 32915);
pub const GL_DOUBLE_EXT = @as(u32, 5130);
pub const GL_BGR_EXT = @as(u32, 32992);
pub const GL_BGRA_EXT = @as(u32, 32993);
pub const GL_COLOR_TABLE_FORMAT_EXT = @as(u32, 32984);
pub const GL_COLOR_TABLE_WIDTH_EXT = @as(u32, 32985);
pub const GL_COLOR_TABLE_RED_SIZE_EXT = @as(u32, 32986);
pub const GL_COLOR_TABLE_GREEN_SIZE_EXT = @as(u32, 32987);
pub const GL_COLOR_TABLE_BLUE_SIZE_EXT = @as(u32, 32988);
pub const GL_COLOR_TABLE_ALPHA_SIZE_EXT = @as(u32, 32989);
pub const GL_COLOR_TABLE_LUMINANCE_SIZE_EXT = @as(u32, 32990);
pub const GL_COLOR_TABLE_INTENSITY_SIZE_EXT = @as(u32, 32991);
pub const GL_COLOR_INDEX1_EXT = @as(u32, 32994);
pub const GL_COLOR_INDEX2_EXT = @as(u32, 32995);
pub const GL_COLOR_INDEX4_EXT = @as(u32, 32996);
pub const GL_COLOR_INDEX8_EXT = @as(u32, 32997);
pub const GL_COLOR_INDEX12_EXT = @as(u32, 32998);
pub const GL_COLOR_INDEX16_EXT = @as(u32, 32999);
pub const GL_MAX_ELEMENTS_VERTICES_WIN = @as(u32, 33000);
pub const GL_MAX_ELEMENTS_INDICES_WIN = @as(u32, 33001);
pub const GL_PHONG_WIN = @as(u32, 33002);
pub const GL_PHONG_HINT_WIN = @as(u32, 33003);
pub const GL_FOG_SPECULAR_TEXTURE_WIN = @as(u32, 33004);
pub const GL_LOGIC_OP = @as(u32, 3057);
pub const GL_TEXTURE_COMPONENTS = @as(u32, 4099);
pub const GLU_VERSION_1_1 = @as(u32, 1);
pub const GLU_VERSION_1_2 = @as(u32, 1);
pub const GLU_INVALID_ENUM = @as(u32, 100900);
pub const GLU_INVALID_VALUE = @as(u32, 100901);
pub const GLU_OUT_OF_MEMORY = @as(u32, 100902);
pub const GLU_INCOMPATIBLE_GL_VERSION = @as(u32, 100903);
pub const GLU_VERSION = @as(u32, 100800);
pub const GLU_EXTENSIONS = @as(u32, 100801);
pub const GLU_TRUE = @as(u32, 1);
pub const GLU_FALSE = @as(u32, 0);
pub const GLU_SMOOTH = @as(u32, 100000);
pub const GLU_FLAT = @as(u32, 100001);
pub const GLU_NONE = @as(u32, 100002);
pub const GLU_POINT = @as(u32, 100010);
pub const GLU_LINE = @as(u32, 100011);
pub const GLU_FILL = @as(u32, 100012);
pub const GLU_SILHOUETTE = @as(u32, 100013);
pub const GLU_OUTSIDE = @as(u32, 100020);
pub const GLU_INSIDE = @as(u32, 100021);
pub const GLU_TESS_WINDING_RULE = @as(u32, 100140);
pub const GLU_TESS_BOUNDARY_ONLY = @as(u32, 100141);
pub const GLU_TESS_TOLERANCE = @as(u32, 100142);
pub const GLU_TESS_WINDING_ODD = @as(u32, 100130);
pub const GLU_TESS_WINDING_NONZERO = @as(u32, 100131);
pub const GLU_TESS_WINDING_POSITIVE = @as(u32, 100132);
pub const GLU_TESS_WINDING_NEGATIVE = @as(u32, 100133);
pub const GLU_TESS_WINDING_ABS_GEQ_TWO = @as(u32, 100134);
pub const GLU_TESS_BEGIN = @as(u32, 100100);
pub const GLU_TESS_VERTEX = @as(u32, 100101);
pub const GLU_TESS_END = @as(u32, 100102);
pub const GLU_TESS_ERROR = @as(u32, 100103);
pub const GLU_TESS_EDGE_FLAG = @as(u32, 100104);
pub const GLU_TESS_COMBINE = @as(u32, 100105);
pub const GLU_TESS_BEGIN_DATA = @as(u32, 100106);
pub const GLU_TESS_VERTEX_DATA = @as(u32, 100107);
pub const GLU_TESS_END_DATA = @as(u32, 100108);
pub const GLU_TESS_ERROR_DATA = @as(u32, 100109);
pub const GLU_TESS_EDGE_FLAG_DATA = @as(u32, 100110);
pub const GLU_TESS_COMBINE_DATA = @as(u32, 100111);
pub const GLU_TESS_ERROR1 = @as(u32, 100151);
pub const GLU_TESS_ERROR2 = @as(u32, 100152);
pub const GLU_TESS_ERROR3 = @as(u32, 100153);
pub const GLU_TESS_ERROR4 = @as(u32, 100154);
pub const GLU_TESS_ERROR5 = @as(u32, 100155);
pub const GLU_TESS_ERROR6 = @as(u32, 100156);
pub const GLU_TESS_ERROR7 = @as(u32, 100157);
pub const GLU_TESS_ERROR8 = @as(u32, 100158);
pub const GLU_TESS_MISSING_BEGIN_POLYGON = @as(u32, 100151);
pub const GLU_TESS_MISSING_BEGIN_CONTOUR = @as(u32, 100152);
pub const GLU_TESS_MISSING_END_POLYGON = @as(u32, 100153);
pub const GLU_TESS_MISSING_END_CONTOUR = @as(u32, 100154);
pub const GLU_TESS_COORD_TOO_LARGE = @as(u32, 100155);
pub const GLU_TESS_NEED_COMBINE_CALLBACK = @as(u32, 100156);
pub const GLU_AUTO_LOAD_MATRIX = @as(u32, 100200);
pub const GLU_CULLING = @as(u32, 100201);
pub const GLU_SAMPLING_TOLERANCE = @as(u32, 100203);
pub const GLU_DISPLAY_MODE = @as(u32, 100204);
pub const GLU_PARAMETRIC_TOLERANCE = @as(u32, 100202);
pub const GLU_SAMPLING_METHOD = @as(u32, 100205);
pub const GLU_U_STEP = @as(u32, 100206);
pub const GLU_V_STEP = @as(u32, 100207);
pub const GLU_PATH_LENGTH = @as(u32, 100215);
pub const GLU_PARAMETRIC_ERROR = @as(u32, 100216);
pub const GLU_DOMAIN_DISTANCE = @as(u32, 100217);
pub const GLU_MAP1_TRIM_2 = @as(u32, 100210);
pub const GLU_MAP1_TRIM_3 = @as(u32, 100211);
pub const GLU_OUTLINE_POLYGON = @as(u32, 100240);
pub const GLU_OUTLINE_PATCH = @as(u32, 100241);
pub const GLU_NURBS_ERROR1 = @as(u32, 100251);
pub const GLU_NURBS_ERROR2 = @as(u32, 100252);
pub const GLU_NURBS_ERROR3 = @as(u32, 100253);
pub const GLU_NURBS_ERROR4 = @as(u32, 100254);
pub const GLU_NURBS_ERROR5 = @as(u32, 100255);
pub const GLU_NURBS_ERROR6 = @as(u32, 100256);
pub const GLU_NURBS_ERROR7 = @as(u32, 100257);
pub const GLU_NURBS_ERROR8 = @as(u32, 100258);
pub const GLU_NURBS_ERROR9 = @as(u32, 100259);
pub const GLU_NURBS_ERROR10 = @as(u32, 100260);
pub const GLU_NURBS_ERROR11 = @as(u32, 100261);
pub const GLU_NURBS_ERROR12 = @as(u32, 100262);
pub const GLU_NURBS_ERROR13 = @as(u32, 100263);
pub const GLU_NURBS_ERROR14 = @as(u32, 100264);
pub const GLU_NURBS_ERROR15 = @as(u32, 100265);
pub const GLU_NURBS_ERROR16 = @as(u32, 100266);
pub const GLU_NURBS_ERROR17 = @as(u32, 100267);
pub const GLU_NURBS_ERROR18 = @as(u32, 100268);
pub const GLU_NURBS_ERROR19 = @as(u32, 100269);
pub const GLU_NURBS_ERROR20 = @as(u32, 100270);
pub const GLU_NURBS_ERROR21 = @as(u32, 100271);
pub const GLU_NURBS_ERROR22 = @as(u32, 100272);
pub const GLU_NURBS_ERROR23 = @as(u32, 100273);
pub const GLU_NURBS_ERROR24 = @as(u32, 100274);
pub const GLU_NURBS_ERROR25 = @as(u32, 100275);
pub const GLU_NURBS_ERROR26 = @as(u32, 100276);
pub const GLU_NURBS_ERROR27 = @as(u32, 100277);
pub const GLU_NURBS_ERROR28 = @as(u32, 100278);
pub const GLU_NURBS_ERROR29 = @as(u32, 100279);
pub const GLU_NURBS_ERROR30 = @as(u32, 100280);
pub const GLU_NURBS_ERROR31 = @as(u32, 100281);
pub const GLU_NURBS_ERROR32 = @as(u32, 100282);
pub const GLU_NURBS_ERROR33 = @as(u32, 100283);
pub const GLU_NURBS_ERROR34 = @as(u32, 100284);
pub const GLU_NURBS_ERROR35 = @as(u32, 100285);
pub const GLU_NURBS_ERROR36 = @as(u32, 100286);
pub const GLU_NURBS_ERROR37 = @as(u32, 100287);
pub const GLU_CW = @as(u32, 100120);
pub const GLU_CCW = @as(u32, 100121);
pub const GLU_INTERIOR = @as(u32, 100122);
pub const GLU_EXTERIOR = @as(u32, 100123);
pub const GLU_UNKNOWN = @as(u32, 100124);
pub const GLU_BEGIN = @as(u32, 100100);
pub const GLU_VERTEX = @as(u32, 100101);
pub const GLU_END = @as(u32, 100102);
pub const GLU_ERROR = @as(u32, 100103);
pub const GLU_EDGE_FLAG = @as(u32, 100104);

//--------------------------------------------------------------------------------
// Section: Types (43)
//--------------------------------------------------------------------------------
pub const PFD_PIXEL_TYPE = enum(i8) {
    RGBA = 0,
    COLORINDEX = 1,
};
pub const PFD_TYPE_RGBA = PFD_PIXEL_TYPE.RGBA;
pub const PFD_TYPE_COLORINDEX = PFD_PIXEL_TYPE.COLORINDEX;

pub const PFD_LAYER_TYPE = enum(i8) {
    UNDERLAY_PLANE = -1,
    MAIN_PLANE = 0,
    OVERLAY_PLANE = 1,
};
pub const PFD_UNDERLAY_PLANE = PFD_LAYER_TYPE.UNDERLAY_PLANE;
pub const PFD_MAIN_PLANE = PFD_LAYER_TYPE.MAIN_PLANE;
pub const PFD_OVERLAY_PLANE = PFD_LAYER_TYPE.OVERLAY_PLANE;

pub const PFD_FLAGS = packed struct(u32) {
    DOUBLEBUFFER: u1 = 0,
    STEREO: u1 = 0,
    DRAW_TO_WINDOW: u1 = 0,
    DRAW_TO_BITMAP: u1 = 0,
    SUPPORT_GDI: u1 = 0,
    SUPPORT_OPENGL: u1 = 0,
    GENERIC_FORMAT: u1 = 0,
    NEED_PALETTE: u1 = 0,
    NEED_SYSTEM_PALETTE: u1 = 0,
    SWAP_EXCHANGE: u1 = 0,
    SWAP_COPY: u1 = 0,
    SWAP_LAYER_BUFFERS: u1 = 0,
    GENERIC_ACCELERATED: u1 = 0,
    SUPPORT_DIRECTDRAW: u1 = 0,
    DIRECT3D_ACCELERATED: u1 = 0,
    SUPPORT_COMPOSITION: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    DEPTH_DONTCARE: u1 = 0,
    DOUBLEBUFFER_DONTCARE: u1 = 0,
    STEREO_DONTCARE: u1 = 0,
};
pub const PFD_DOUBLEBUFFER = PFD_FLAGS{ .DOUBLEBUFFER = 1 };
pub const PFD_STEREO = PFD_FLAGS{ .STEREO = 1 };
pub const PFD_DRAW_TO_WINDOW = PFD_FLAGS{ .DRAW_TO_WINDOW = 1 };
pub const PFD_DRAW_TO_BITMAP = PFD_FLAGS{ .DRAW_TO_BITMAP = 1 };
pub const PFD_SUPPORT_GDI = PFD_FLAGS{ .SUPPORT_GDI = 1 };
pub const PFD_SUPPORT_OPENGL = PFD_FLAGS{ .SUPPORT_OPENGL = 1 };
pub const PFD_GENERIC_FORMAT = PFD_FLAGS{ .GENERIC_FORMAT = 1 };
pub const PFD_NEED_PALETTE = PFD_FLAGS{ .NEED_PALETTE = 1 };
pub const PFD_NEED_SYSTEM_PALETTE = PFD_FLAGS{ .NEED_SYSTEM_PALETTE = 1 };
pub const PFD_SWAP_EXCHANGE = PFD_FLAGS{ .SWAP_EXCHANGE = 1 };
pub const PFD_SWAP_COPY = PFD_FLAGS{ .SWAP_COPY = 1 };
pub const PFD_SWAP_LAYER_BUFFERS = PFD_FLAGS{ .SWAP_LAYER_BUFFERS = 1 };
pub const PFD_GENERIC_ACCELERATED = PFD_FLAGS{ .GENERIC_ACCELERATED = 1 };
pub const PFD_SUPPORT_DIRECTDRAW = PFD_FLAGS{ .SUPPORT_DIRECTDRAW = 1 };
pub const PFD_DIRECT3D_ACCELERATED = PFD_FLAGS{ .DIRECT3D_ACCELERATED = 1 };
pub const PFD_SUPPORT_COMPOSITION = PFD_FLAGS{ .SUPPORT_COMPOSITION = 1 };
pub const PFD_DEPTH_DONTCARE = PFD_FLAGS{ .DEPTH_DONTCARE = 1 };
pub const PFD_DOUBLEBUFFER_DONTCARE = PFD_FLAGS{ .DOUBLEBUFFER_DONTCARE = 1 };
pub const PFD_STEREO_DONTCARE = PFD_FLAGS{ .STEREO_DONTCARE = 1 };

// TODO: this type has a FreeFunc 'wglDeleteContext', what can Zig do with this information?
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HGLRC = *opaque{};

pub const PIXELFORMATDESCRIPTOR = extern struct {
    nSize: u16,
    nVersion: u16,
    dwFlags: PFD_FLAGS,
    iPixelType: PFD_PIXEL_TYPE,
    cColorBits: u8,
    cRedBits: u8,
    cRedShift: u8,
    cGreenBits: u8,
    cGreenShift: u8,
    cBlueBits: u8,
    cBlueShift: u8,
    cAlphaBits: u8,
    cAlphaShift: u8,
    cAccumBits: u8,
    cAccumRedBits: u8,
    cAccumGreenBits: u8,
    cAccumBlueBits: u8,
    cAccumAlphaBits: u8,
    cDepthBits: u8,
    cStencilBits: u8,
    cAuxBuffers: u8,
    iLayerType: PFD_LAYER_TYPE,
    bReserved: u8,
    dwLayerMask: u32,
    dwVisibleMask: u32,
    dwDamageMask: u32,
};

pub const EMRPIXELFORMAT = extern struct {
    emr: EMR,
    pfd: PIXELFORMATDESCRIPTOR,
};

pub const POINTFLOAT = extern struct {
    x: f32,
    y: f32,
};

pub const GLYPHMETRICSFLOAT = extern struct {
    gmfBlackBoxX: f32,
    gmfBlackBoxY: f32,
    gmfptGlyphOrigin: POINTFLOAT,
    gmfCellIncX: f32,
    gmfCellIncY: f32,
};

pub const LAYERPLANEDESCRIPTOR = extern struct {
    nSize: u16,
    nVersion: u16,
    dwFlags: u32,
    iPixelType: u8,
    cColorBits: u8,
    cRedBits: u8,
    cRedShift: u8,
    cGreenBits: u8,
    cGreenShift: u8,
    cBlueBits: u8,
    cBlueShift: u8,
    cAlphaBits: u8,
    cAlphaShift: u8,
    cAccumBits: u8,
    cAccumRedBits: u8,
    cAccumGreenBits: u8,
    cAccumBlueBits: u8,
    cAccumAlphaBits: u8,
    cDepthBits: u8,
    cStencilBits: u8,
    cAuxBuffers: u8,
    iLayerPlane: u8,
    bReserved: u8,
    crTransparent: u32,
};

pub const PFNGLARRAYELEMENTEXTPROC = *const fn(
    i: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFNGLDRAWARRAYSEXTPROC = *const fn(
    mode: u32,
    first: i32,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFNGLVERTEXPOINTEREXTPROC = *const fn(
    size: i32,
    type: u32,
    stride: i32,
    count: i32,
    pointer: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFNGLNORMALPOINTEREXTPROC = *const fn(
    type: u32,
    stride: i32,
    count: i32,
    pointer: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFNGLCOLORPOINTEREXTPROC = *const fn(
    size: i32,
    type: u32,
    stride: i32,
    count: i32,
    pointer: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFNGLINDEXPOINTEREXTPROC = *const fn(
    type: u32,
    stride: i32,
    count: i32,
    pointer: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFNGLTEXCOORDPOINTEREXTPROC = *const fn(
    size: i32,
    type: u32,
    stride: i32,
    count: i32,
    pointer: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFNGLEDGEFLAGPOINTEREXTPROC = *const fn(
    stride: i32,
    count: i32,
    pointer: ?*const u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFNGLGETPOINTERVEXTPROC = *const fn(
    pname: u32,
    params: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFNGLARRAYELEMENTARRAYEXTPROC = *const fn(
    mode: u32,
    count: i32,
    pi: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFNGLDRAWRANGEELEMENTSWINPROC = *const fn(
    mode: u32,
    start: u32,
    end: u32,
    count: i32,
    type: u32,
    indices: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFNGLADDSWAPHINTRECTWINPROC = *const fn(
    x: i32,
    y: i32,
    width: i32,
    height: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFNGLCOLORTABLEEXTPROC = *const fn(
    target: u32,
    internalFormat: u32,
    width: i32,
    format: u32,
    type: u32,
    data: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFNGLCOLORSUBTABLEEXTPROC = *const fn(
    target: u32,
    start: i32,
    count: i32,
    format: u32,
    type: u32,
    data: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFNGLGETCOLORTABLEEXTPROC = *const fn(
    target: u32,
    format: u32,
    type: u32,
    data: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFNGLGETCOLORTABLEPARAMETERIVEXTPROC = *const fn(
    target: u32,
    pname: u32,
    params: ?*i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFNGLGETCOLORTABLEPARAMETERFVEXTPROC = *const fn(
    target: u32,
    pname: u32,
    params: ?*f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const GLUnurbs = extern struct {
    placeholder: usize, // TODO: why is this type empty?
};

pub const GLUquadric = extern struct {
    placeholder: usize, // TODO: why is this type empty?
};

pub const GLUtesselator = extern struct {
    placeholder: usize, // TODO: why is this type empty?
};

pub const GLUquadricErrorProc = *const fn(
    param0: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const GLUtessBeginProc = *const fn(
    param0: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const GLUtessEdgeFlagProc = *const fn(
    param0: u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub const GLUtessVertexProc = *const fn(
    param0: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const GLUtessEndProc = *const fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const GLUtessErrorProc = *const fn(
    param0: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const GLUtessCombineProc = *const fn(
    param0: ?*f64,
    param1: ?*?*anyopaque,
    param2: ?*f32,
    param3: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const GLUtessBeginDataProc = *const fn(
    param0: u32,
    param1: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const GLUtessEdgeFlagDataProc = *const fn(
    param0: u8,
    param1: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const GLUtessVertexDataProc = *const fn(
    param0: ?*anyopaque,
    param1: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const GLUtessEndDataProc = *const fn(
    param0: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const GLUtessErrorDataProc = *const fn(
    param0: u32,
    param1: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const GLUtessCombineDataProc = *const fn(
    param0: ?*f64,
    param1: ?*?*anyopaque,
    param2: ?*f32,
    param3: ?*?*anyopaque,
    param4: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const GLUnurbsErrorProc = *const fn(
    param0: u32,
) callconv(@import("std").os.windows.WINAPI) void;


//--------------------------------------------------------------------------------
// Section: Functions (412)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn ChoosePixelFormat(
    hdc: ?HDC,
    ppfd: ?*const PIXELFORMATDESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn DescribePixelFormat(
    hdc: ?HDC,
    iPixelFormat: PFD_PIXEL_TYPE,
    nBytes: u32,
    // TODO: what to do with BytesParamIndex 2?
    ppfd: ?*PIXELFORMATDESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn GetPixelFormat(
    hdc: ?HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn SetPixelFormat(
    hdc: ?HDC,
    format: i32,
    ppfd: ?*const PIXELFORMATDESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn GetEnhMetaFilePixelFormat(
    hemf: ?HENHMETAFILE,
    cbBuffer: u32,
    // TODO: what to do with BytesParamIndex 1?
    ppfd: ?*PIXELFORMATDESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "opengl32" fn wglCopyContext(
    param0: ?HGLRC,
    param1: ?HGLRC,
    param2: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "opengl32" fn wglCreateContext(
    param0: ?HDC,
) callconv(@import("std").os.windows.WINAPI) ?HGLRC;

// TODO: this type is limited to platform 'windows5.0'
pub extern "opengl32" fn wglCreateLayerContext(
    param0: ?HDC,
    param1: i32,
) callconv(@import("std").os.windows.WINAPI) ?HGLRC;

// TODO: this type is limited to platform 'windows5.0'
pub extern "opengl32" fn wglDeleteContext(
    param0: ?HGLRC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "opengl32" fn wglGetCurrentContext(
) callconv(@import("std").os.windows.WINAPI) ?HGLRC;

// TODO: this type is limited to platform 'windows5.0'
pub extern "opengl32" fn wglGetCurrentDC(
) callconv(@import("std").os.windows.WINAPI) ?HDC;

// TODO: this type is limited to platform 'windows5.0'
pub extern "opengl32" fn wglGetProcAddress(
    param0: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PROC;

// TODO: this type is limited to platform 'windows5.0'
pub extern "opengl32" fn wglMakeCurrent(
    param0: ?HDC,
    param1: ?HGLRC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "opengl32" fn wglShareLists(
    param0: ?HGLRC,
    param1: ?HGLRC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "opengl32" fn wglUseFontBitmapsA(
    param0: ?HDC,
    param1: u32,
    param2: u32,
    param3: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "opengl32" fn wglUseFontBitmapsW(
    param0: ?HDC,
    param1: u32,
    param2: u32,
    param3: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn SwapBuffers(
    param0: ?HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "opengl32" fn wglUseFontOutlinesA(
    param0: ?HDC,
    param1: u32,
    param2: u32,
    param3: u32,
    param4: f32,
    param5: f32,
    param6: i32,
    param7: ?*GLYPHMETRICSFLOAT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "opengl32" fn wglUseFontOutlinesW(
    param0: ?HDC,
    param1: u32,
    param2: u32,
    param3: u32,
    param4: f32,
    param5: f32,
    param6: i32,
    param7: ?*GLYPHMETRICSFLOAT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "opengl32" fn wglDescribeLayerPlane(
    param0: ?HDC,
    param1: i32,
    param2: i32,
    param3: u32,
    param4: ?*LAYERPLANEDESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "opengl32" fn wglSetLayerPaletteEntries(
    param0: ?HDC,
    param1: i32,
    param2: i32,
    param3: i32,
    param4: ?*const u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "opengl32" fn wglGetLayerPaletteEntries(
    param0: ?HDC,
    param1: i32,
    param2: i32,
    param3: i32,
    param4: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "opengl32" fn wglRealizeLayerPalette(
    param0: ?HDC,
    param1: i32,
    param2: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "opengl32" fn wglSwapLayerBuffers(
    param0: ?HDC,
    param1: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "opengl32" fn glAccum(
    op: u32,
    value: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glAlphaFunc(
    func: u32,
    ref: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glAreTexturesResident(
    n: i32,
    textures: ?*const u32,
    residences: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "opengl32" fn glArrayElement(
    i: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glBegin(
    mode: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glBindTexture(
    target: u32,
    texture: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glBitmap(
    width: i32,
    height: i32,
    xorig: f32,
    yorig: f32,
    xmove: f32,
    ymove: f32,
    bitmap: ?*const u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glBlendFunc(
    sfactor: u32,
    dfactor: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glCallList(
    list: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glCallLists(
    n: i32,
    type: u32,
    lists: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glClear(
    mask: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glClearAccum(
    red: f32,
    green: f32,
    blue: f32,
    alpha: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glClearColor(
    red: f32,
    green: f32,
    blue: f32,
    alpha: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glClearDepth(
    depth: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glClearIndex(
    c: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glClearStencil(
    s: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glClipPlane(
    plane: u32,
    equation: ?*const f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor3b(
    red: i8,
    green: i8,
    blue: i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor3bv(
    v: ?*const i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor3d(
    red: f64,
    green: f64,
    blue: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor3dv(
    v: ?*const f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor3f(
    red: f32,
    green: f32,
    blue: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor3fv(
    v: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor3i(
    red: i32,
    green: i32,
    blue: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor3iv(
    v: ?*const i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor3s(
    red: i16,
    green: i16,
    blue: i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor3sv(
    v: ?*const i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor3ub(
    red: u8,
    green: u8,
    blue: u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor3ubv(
    v: ?*const u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor3ui(
    red: u32,
    green: u32,
    blue: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor3uiv(
    v: ?*const u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor3us(
    red: u16,
    green: u16,
    blue: u16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor3usv(
    v: ?*const u16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor4b(
    red: i8,
    green: i8,
    blue: i8,
    alpha: i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor4bv(
    v: ?*const i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor4d(
    red: f64,
    green: f64,
    blue: f64,
    alpha: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor4dv(
    v: ?*const f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor4f(
    red: f32,
    green: f32,
    blue: f32,
    alpha: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor4fv(
    v: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor4i(
    red: i32,
    green: i32,
    blue: i32,
    alpha: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor4iv(
    v: ?*const i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor4s(
    red: i16,
    green: i16,
    blue: i16,
    alpha: i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor4sv(
    v: ?*const i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor4ub(
    red: u8,
    green: u8,
    blue: u8,
    alpha: u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor4ubv(
    v: ?*const u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor4ui(
    red: u32,
    green: u32,
    blue: u32,
    alpha: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor4uiv(
    v: ?*const u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor4us(
    red: u16,
    green: u16,
    blue: u16,
    alpha: u16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColor4usv(
    v: ?*const u16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColorMask(
    red: u8,
    green: u8,
    blue: u8,
    alpha: u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColorMaterial(
    face: u32,
    mode: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glColorPointer(
    size: i32,
    type: u32,
    stride: i32,
    pointer: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glCopyPixels(
    x: i32,
    y: i32,
    width: i32,
    height: i32,
    type: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glCopyTexImage1D(
    target: u32,
    level: i32,
    internalFormat: u32,
    x: i32,
    y: i32,
    width: i32,
    border: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glCopyTexImage2D(
    target: u32,
    level: i32,
    internalFormat: u32,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
    border: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glCopyTexSubImage1D(
    target: u32,
    level: i32,
    xoffset: i32,
    x: i32,
    y: i32,
    width: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glCopyTexSubImage2D(
    target: u32,
    level: i32,
    xoffset: i32,
    yoffset: i32,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glCullFace(
    mode: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glDeleteLists(
    list: u32,
    range: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glDeleteTextures(
    n: i32,
    textures: ?*const u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glDepthFunc(
    func: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glDepthMask(
    flag: u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glDepthRange(
    zNear: f64,
    zFar: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glDisable(
    cap: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glDisableClientState(
    array: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glDrawArrays(
    mode: u32,
    first: i32,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glDrawBuffer(
    mode: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glDrawElements(
    mode: u32,
    count: i32,
    type: u32,
    indices: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glDrawPixels(
    width: i32,
    height: i32,
    format: u32,
    type: u32,
    pixels: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glEdgeFlag(
    flag: u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glEdgeFlagPointer(
    stride: i32,
    pointer: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glEdgeFlagv(
    flag: ?*const u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glEnable(
    cap: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glEnableClientState(
    array: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glEnd(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glEndList(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glEvalCoord1d(
    u: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glEvalCoord1dv(
    u: ?*const f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glEvalCoord1f(
    u: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glEvalCoord1fv(
    u: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glEvalCoord2d(
    u: f64,
    v: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glEvalCoord2dv(
    u: ?*const f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glEvalCoord2f(
    u: f32,
    v: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glEvalCoord2fv(
    u: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glEvalMesh1(
    mode: u32,
    i1: i32,
    i2: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glEvalMesh2(
    mode: u32,
    i1: i32,
    i2: i32,
    j1: i32,
    j2: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glEvalPoint1(
    i: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glEvalPoint2(
    i: i32,
    j: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glFeedbackBuffer(
    size: i32,
    type: u32,
    buffer: ?*f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glFinish(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glFlush(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glFogf(
    pname: u32,
    param1: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glFogfv(
    pname: u32,
    params: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glFogi(
    pname: u32,
    param1: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glFogiv(
    pname: u32,
    params: ?*const i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glFrontFace(
    mode: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glFrustum(
    left: f64,
    right: f64,
    bottom: f64,
    top: f64,
    zNear: f64,
    zFar: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGenLists(
    range: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "opengl32" fn glGenTextures(
    n: i32,
    textures: ?*u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetBooleanv(
    pname: u32,
    params: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetClipPlane(
    plane: u32,
    equation: ?*f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetDoublev(
    pname: u32,
    params: ?*f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetError(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "opengl32" fn glGetFloatv(
    pname: u32,
    params: ?*f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetIntegerv(
    pname: u32,
    params: ?*i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetLightfv(
    light: u32,
    pname: u32,
    params: ?*f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetLightiv(
    light: u32,
    pname: u32,
    params: ?*i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetMapdv(
    target: u32,
    query: u32,
    v: ?*f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetMapfv(
    target: u32,
    query: u32,
    v: ?*f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetMapiv(
    target: u32,
    query: u32,
    v: ?*i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetMaterialfv(
    face: u32,
    pname: u32,
    params: ?*f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetMaterialiv(
    face: u32,
    pname: u32,
    params: ?*i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetPixelMapfv(
    map: u32,
    values: ?*f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetPixelMapuiv(
    map: u32,
    values: ?*u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetPixelMapusv(
    map: u32,
    values: ?*u16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetPointerv(
    pname: u32,
    params: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetPolygonStipple(
    mask: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetString(
    name: u32,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

pub extern "opengl32" fn glGetTexEnvfv(
    target: u32,
    pname: u32,
    params: ?*f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetTexEnviv(
    target: u32,
    pname: u32,
    params: ?*i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetTexGendv(
    coord: u32,
    pname: u32,
    params: ?*f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetTexGenfv(
    coord: u32,
    pname: u32,
    params: ?*f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetTexGeniv(
    coord: u32,
    pname: u32,
    params: ?*i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetTexImage(
    target: u32,
    level: i32,
    format: u32,
    type: u32,
    pixels: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetTexLevelParameterfv(
    target: u32,
    level: i32,
    pname: u32,
    params: ?*f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetTexLevelParameteriv(
    target: u32,
    level: i32,
    pname: u32,
    params: ?*i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetTexParameterfv(
    target: u32,
    pname: u32,
    params: ?*f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glGetTexParameteriv(
    target: u32,
    pname: u32,
    params: ?*i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glHint(
    target: u32,
    mode: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glIndexMask(
    mask: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glIndexPointer(
    type: u32,
    stride: i32,
    pointer: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glIndexd(
    c: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glIndexdv(
    c: ?*const f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glIndexf(
    c: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glIndexfv(
    c: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glIndexi(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glIndexiv(
    c: ?*const i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glIndexs(
    c: i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glIndexsv(
    c: ?*const i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glIndexub(
    c: u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glIndexubv(
    c: ?*const u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glInitNames(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glInterleavedArrays(
    format: u32,
    stride: i32,
    pointer: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glIsEnabled(
    cap: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "opengl32" fn glIsList(
    list: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "opengl32" fn glIsTexture(
    texture: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "opengl32" fn glLightModelf(
    pname: u32,
    param1: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glLightModelfv(
    pname: u32,
    params: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glLightModeli(
    pname: u32,
    param1: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glLightModeliv(
    pname: u32,
    params: ?*const i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glLightf(
    light: u32,
    pname: u32,
    param2: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glLightfv(
    light: u32,
    pname: u32,
    params: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glLighti(
    light: u32,
    pname: u32,
    param2: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glLightiv(
    light: u32,
    pname: u32,
    params: ?*const i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glLineStipple(
    factor: i32,
    pattern: u16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glLineWidth(
    width: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glListBase(
    base: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glLoadIdentity(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glLoadMatrixd(
    m: ?*const f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glLoadMatrixf(
    m: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glLoadName(
    name: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glLogicOp(
    opcode: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glMap1d(
    target: u32,
    u1: f64,
    u2: f64,
    stride: i32,
    order: i32,
    points: ?*const f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glMap1f(
    target: u32,
    u1: f32,
    u2: f32,
    stride: i32,
    order: i32,
    points: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glMap2d(
    target: u32,
    u1: f64,
    u2: f64,
    ustride: i32,
    uorder: i32,
    v1: f64,
    v2: f64,
    vstride: i32,
    vorder: i32,
    points: ?*const f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glMap2f(
    target: u32,
    u1: f32,
    u2: f32,
    ustride: i32,
    uorder: i32,
    v1: f32,
    v2: f32,
    vstride: i32,
    vorder: i32,
    points: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glMapGrid1d(
    un: i32,
    u1: f64,
    u2: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glMapGrid1f(
    un: i32,
    u1: f32,
    u2: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glMapGrid2d(
    un: i32,
    u1: f64,
    u2: f64,
    vn: i32,
    v1: f64,
    v2: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glMapGrid2f(
    un: i32,
    u1: f32,
    u2: f32,
    vn: i32,
    v1: f32,
    v2: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glMaterialf(
    face: u32,
    pname: u32,
    param2: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glMaterialfv(
    face: u32,
    pname: u32,
    params: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glMateriali(
    face: u32,
    pname: u32,
    param2: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glMaterialiv(
    face: u32,
    pname: u32,
    params: ?*const i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glMatrixMode(
    mode: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glMultMatrixd(
    m: ?*const f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glMultMatrixf(
    m: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glNewList(
    list: u32,
    mode: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glNormal3b(
    nx: i8,
    ny: i8,
    nz: i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glNormal3bv(
    v: ?*const i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glNormal3d(
    nx: f64,
    ny: f64,
    nz: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glNormal3dv(
    v: ?*const f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glNormal3f(
    nx: f32,
    ny: f32,
    nz: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glNormal3fv(
    v: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glNormal3i(
    nx: i32,
    ny: i32,
    nz: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glNormal3iv(
    v: ?*const i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glNormal3s(
    nx: i16,
    ny: i16,
    nz: i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glNormal3sv(
    v: ?*const i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glNormalPointer(
    type: u32,
    stride: i32,
    pointer: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glOrtho(
    left: f64,
    right: f64,
    bottom: f64,
    top: f64,
    zNear: f64,
    zFar: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glPassThrough(
    token: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glPixelMapfv(
    map: u32,
    mapsize: i32,
    values: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glPixelMapuiv(
    map: u32,
    mapsize: i32,
    values: ?*const u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glPixelMapusv(
    map: u32,
    mapsize: i32,
    values: ?*const u16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glPixelStoref(
    pname: u32,
    param1: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glPixelStorei(
    pname: u32,
    param1: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glPixelTransferf(
    pname: u32,
    param1: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glPixelTransferi(
    pname: u32,
    param1: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glPixelZoom(
    xfactor: f32,
    yfactor: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glPointSize(
    size: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glPolygonMode(
    face: u32,
    mode: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glPolygonOffset(
    factor: f32,
    units: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glPolygonStipple(
    mask: ?*const u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glPopAttrib(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glPopClientAttrib(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glPopMatrix(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glPopName(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glPrioritizeTextures(
    n: i32,
    textures: ?*const u32,
    priorities: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glPushAttrib(
    mask: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glPushClientAttrib(
    mask: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glPushMatrix(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glPushName(
    name: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRasterPos2d(
    x: f64,
    y: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRasterPos2dv(
    v: ?*const f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRasterPos2f(
    x: f32,
    y: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRasterPos2fv(
    v: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRasterPos2i(
    x: i32,
    y: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRasterPos2iv(
    v: ?*const i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRasterPos2s(
    x: i16,
    y: i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRasterPos2sv(
    v: ?*const i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRasterPos3d(
    x: f64,
    y: f64,
    z: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRasterPos3dv(
    v: ?*const f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRasterPos3f(
    x: f32,
    y: f32,
    z: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRasterPos3fv(
    v: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRasterPos3i(
    x: i32,
    y: i32,
    z: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRasterPos3iv(
    v: ?*const i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRasterPos3s(
    x: i16,
    y: i16,
    z: i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRasterPos3sv(
    v: ?*const i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRasterPos4d(
    x: f64,
    y: f64,
    z: f64,
    w: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRasterPos4dv(
    v: ?*const f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRasterPos4f(
    x: f32,
    y: f32,
    z: f32,
    w: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRasterPos4fv(
    v: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRasterPos4i(
    x: i32,
    y: i32,
    z: i32,
    w: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRasterPos4iv(
    v: ?*const i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRasterPos4s(
    x: i16,
    y: i16,
    z: i16,
    w: i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRasterPos4sv(
    v: ?*const i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glReadBuffer(
    mode: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glReadPixels(
    x: i32,
    y: i32,
    width: i32,
    height: i32,
    format: u32,
    type: u32,
    pixels: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRectd(
    x1: f64,
    y1: f64,
    x2: f64,
    y2: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRectdv(
    v1: ?*const f64,
    v2: ?*const f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRectf(
    x1: f32,
    y1: f32,
    x2: f32,
    y2: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRectfv(
    v1: ?*const f32,
    v2: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRecti(
    x1: i32,
    y1: i32,
    x2: i32,
    y2: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRectiv(
    v1: ?*const i32,
    v2: ?*const i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRects(
    x1: i16,
    y1: i16,
    x2: i16,
    y2: i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRectsv(
    v1: ?*const i16,
    v2: ?*const i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRenderMode(
    mode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "opengl32" fn glRotated(
    angle: f64,
    x: f64,
    y: f64,
    z: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glRotatef(
    angle: f32,
    x: f32,
    y: f32,
    z: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glScaled(
    x: f64,
    y: f64,
    z: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glScalef(
    x: f32,
    y: f32,
    z: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glScissor(
    x: i32,
    y: i32,
    width: i32,
    height: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glSelectBuffer(
    size: i32,
    buffer: ?*u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glShadeModel(
    mode: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glStencilFunc(
    func: u32,
    ref: i32,
    mask: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glStencilMask(
    mask: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glStencilOp(
    fail: u32,
    zfail: u32,
    zpass: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord1d(
    s: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord1dv(
    v: ?*const f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord1f(
    s: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord1fv(
    v: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord1i(
    s: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord1iv(
    v: ?*const i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord1s(
    s: i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord1sv(
    v: ?*const i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord2d(
    s: f64,
    t: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord2dv(
    v: ?*const f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord2f(
    s: f32,
    t: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord2fv(
    v: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord2i(
    s: i32,
    t: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord2iv(
    v: ?*const i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord2s(
    s: i16,
    t: i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord2sv(
    v: ?*const i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord3d(
    s: f64,
    t: f64,
    r: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord3dv(
    v: ?*const f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord3f(
    s: f32,
    t: f32,
    r: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord3fv(
    v: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord3i(
    s: i32,
    t: i32,
    r: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord3iv(
    v: ?*const i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord3s(
    s: i16,
    t: i16,
    r: i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord3sv(
    v: ?*const i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord4d(
    s: f64,
    t: f64,
    r: f64,
    q: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord4dv(
    v: ?*const f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord4f(
    s: f32,
    t: f32,
    r: f32,
    q: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord4fv(
    v: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord4i(
    s: i32,
    t: i32,
    r: i32,
    q: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord4iv(
    v: ?*const i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord4s(
    s: i16,
    t: i16,
    r: i16,
    q: i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoord4sv(
    v: ?*const i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexCoordPointer(
    size: i32,
    type: u32,
    stride: i32,
    pointer: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexEnvf(
    target: u32,
    pname: u32,
    param2: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexEnvfv(
    target: u32,
    pname: u32,
    params: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexEnvi(
    target: u32,
    pname: u32,
    param2: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexEnviv(
    target: u32,
    pname: u32,
    params: ?*const i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexGend(
    coord: u32,
    pname: u32,
    param2: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexGendv(
    coord: u32,
    pname: u32,
    params: ?*const f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexGenf(
    coord: u32,
    pname: u32,
    param2: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexGenfv(
    coord: u32,
    pname: u32,
    params: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexGeni(
    coord: u32,
    pname: u32,
    param2: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexGeniv(
    coord: u32,
    pname: u32,
    params: ?*const i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexImage1D(
    target: u32,
    level: i32,
    internalformat: i32,
    width: i32,
    border: i32,
    format: u32,
    type: u32,
    pixels: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexImage2D(
    target: u32,
    level: i32,
    internalformat: i32,
    width: i32,
    height: i32,
    border: i32,
    format: u32,
    type: u32,
    pixels: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexParameterf(
    target: u32,
    pname: u32,
    param2: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexParameterfv(
    target: u32,
    pname: u32,
    params: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexParameteri(
    target: u32,
    pname: u32,
    param2: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexParameteriv(
    target: u32,
    pname: u32,
    params: ?*const i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexSubImage1D(
    target: u32,
    level: i32,
    xoffset: i32,
    width: i32,
    format: u32,
    type: u32,
    pixels: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTexSubImage2D(
    target: u32,
    level: i32,
    xoffset: i32,
    yoffset: i32,
    width: i32,
    height: i32,
    format: u32,
    type: u32,
    pixels: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTranslated(
    x: f64,
    y: f64,
    z: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glTranslatef(
    x: f32,
    y: f32,
    z: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glVertex2d(
    x: f64,
    y: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glVertex2dv(
    v: ?*const f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glVertex2f(
    x: f32,
    y: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glVertex2fv(
    v: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glVertex2i(
    x: i32,
    y: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glVertex2iv(
    v: ?*const i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glVertex2s(
    x: i16,
    y: i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glVertex2sv(
    v: ?*const i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glVertex3d(
    x: f64,
    y: f64,
    z: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glVertex3dv(
    v: ?*const f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glVertex3f(
    x: f32,
    y: f32,
    z: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glVertex3fv(
    v: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glVertex3i(
    x: i32,
    y: i32,
    z: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glVertex3iv(
    v: ?*const i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glVertex3s(
    x: i16,
    y: i16,
    z: i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glVertex3sv(
    v: ?*const i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glVertex4d(
    x: f64,
    y: f64,
    z: f64,
    w: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glVertex4dv(
    v: ?*const f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glVertex4f(
    x: f32,
    y: f32,
    z: f32,
    w: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glVertex4fv(
    v: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glVertex4i(
    x: i32,
    y: i32,
    z: i32,
    w: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glVertex4iv(
    v: ?*const i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glVertex4s(
    x: i16,
    y: i16,
    z: i16,
    w: i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glVertex4sv(
    v: ?*const i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glVertexPointer(
    size: i32,
    type: u32,
    stride: i32,
    pointer: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "opengl32" fn glViewport(
    x: i32,
    y: i32,
    width: i32,
    height: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluErrorString(
    errCode: u32,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

pub extern "glu32" fn gluErrorUnicodeStringEXT(
    errCode: u32,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

pub extern "glu32" fn gluGetString(
    name: u32,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

pub extern "glu32" fn gluOrtho2D(
    left: f64,
    right: f64,
    bottom: f64,
    top: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluPerspective(
    fovy: f64,
    aspect: f64,
    zNear: f64,
    zFar: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluPickMatrix(
    x: f64,
    y: f64,
    width: f64,
    height: f64,
    viewport: ?*i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluLookAt(
    eyex: f64,
    eyey: f64,
    eyez: f64,
    centerx: f64,
    centery: f64,
    centerz: f64,
    upx: f64,
    upy: f64,
    upz: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluProject(
    objx: f64,
    objy: f64,
    objz: f64,
    modelMatrix: ?*const f64,
    projMatrix: ?*const f64,
    viewport: ?*const i32,
    winx: ?*f64,
    winy: ?*f64,
    winz: ?*f64,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "glu32" fn gluUnProject(
    winx: f64,
    winy: f64,
    winz: f64,
    modelMatrix: ?*const f64,
    projMatrix: ?*const f64,
    viewport: ?*const i32,
    objx: ?*f64,
    objy: ?*f64,
    objz: ?*f64,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "glu32" fn gluScaleImage(
    format: u32,
    widthin: i32,
    heightin: i32,
    typein: u32,
    datain: ?*const anyopaque,
    widthout: i32,
    heightout: i32,
    typeout: u32,
    dataout: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "glu32" fn gluBuild1DMipmaps(
    target: u32,
    components: i32,
    width: i32,
    format: u32,
    type: u32,
    data: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "glu32" fn gluBuild2DMipmaps(
    target: u32,
    components: i32,
    width: i32,
    height: i32,
    format: u32,
    type: u32,
    data: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "glu32" fn gluNewQuadric(
) callconv(@import("std").os.windows.WINAPI) ?*GLUquadric;

pub extern "glu32" fn gluDeleteQuadric(
    state: ?*GLUquadric,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluQuadricNormals(
    quadObject: ?*GLUquadric,
    normals: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluQuadricTexture(
    quadObject: ?*GLUquadric,
    textureCoords: u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluQuadricOrientation(
    quadObject: ?*GLUquadric,
    orientation: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluQuadricDrawStyle(
    quadObject: ?*GLUquadric,
    drawStyle: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluCylinder(
    qobj: ?*GLUquadric,
    baseRadius: f64,
    topRadius: f64,
    height: f64,
    slices: i32,
    stacks: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluDisk(
    qobj: ?*GLUquadric,
    innerRadius: f64,
    outerRadius: f64,
    slices: i32,
    loops: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluPartialDisk(
    qobj: ?*GLUquadric,
    innerRadius: f64,
    outerRadius: f64,
    slices: i32,
    loops: i32,
    startAngle: f64,
    sweepAngle: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluSphere(
    qobj: ?*GLUquadric,
    radius: f64,
    slices: i32,
    stacks: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluQuadricCallback(
    qobj: ?*GLUquadric,
    which: u32,
    @"fn": isize,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluNewTess(
) callconv(@import("std").os.windows.WINAPI) ?*GLUtesselator;

pub extern "glu32" fn gluDeleteTess(
    tess: ?*GLUtesselator,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluTessBeginPolygon(
    tess: ?*GLUtesselator,
    polygon_data: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluTessBeginContour(
    tess: ?*GLUtesselator,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluTessVertex(
    tess: ?*GLUtesselator,
    coords: ?*f64,
    data: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluTessEndContour(
    tess: ?*GLUtesselator,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluTessEndPolygon(
    tess: ?*GLUtesselator,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluTessProperty(
    tess: ?*GLUtesselator,
    which: u32,
    value: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluTessNormal(
    tess: ?*GLUtesselator,
    x: f64,
    y: f64,
    z: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluTessCallback(
    tess: ?*GLUtesselator,
    which: u32,
    @"fn": isize,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluGetTessProperty(
    tess: ?*GLUtesselator,
    which: u32,
    value: ?*f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluNewNurbsRenderer(
) callconv(@import("std").os.windows.WINAPI) ?*GLUnurbs;

pub extern "glu32" fn gluDeleteNurbsRenderer(
    nobj: ?*GLUnurbs,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluBeginSurface(
    nobj: ?*GLUnurbs,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluBeginCurve(
    nobj: ?*GLUnurbs,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluEndCurve(
    nobj: ?*GLUnurbs,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluEndSurface(
    nobj: ?*GLUnurbs,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluBeginTrim(
    nobj: ?*GLUnurbs,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluEndTrim(
    nobj: ?*GLUnurbs,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluPwlCurve(
    nobj: ?*GLUnurbs,
    count: i32,
    array: ?*f32,
    stride: i32,
    type: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluNurbsCurve(
    nobj: ?*GLUnurbs,
    nknots: i32,
    knot: ?*f32,
    stride: i32,
    ctlarray: ?*f32,
    order: i32,
    type: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluNurbsSurface(
    nobj: ?*GLUnurbs,
    sknot_count: i32,
    sknot: ?*f32,
    tknot_count: i32,
    tknot: ?*f32,
    s_stride: i32,
    t_stride: i32,
    ctlarray: ?*f32,
    sorder: i32,
    torder: i32,
    type: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluLoadSamplingMatrices(
    nobj: ?*GLUnurbs,
    modelMatrix: ?*const f32,
    projMatrix: ?*const f32,
    viewport: ?*const i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluNurbsProperty(
    nobj: ?*GLUnurbs,
    property: u32,
    value: f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluGetNurbsProperty(
    nobj: ?*GLUnurbs,
    property: u32,
    value: ?*f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluNurbsCallback(
    nobj: ?*GLUnurbs,
    which: u32,
    @"fn": isize,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluBeginPolygon(
    tess: ?*GLUtesselator,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluNextContour(
    tess: ?*GLUtesselator,
    type: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "glu32" fn gluEndPolygon(
    tess: ?*GLUtesselator,
) callconv(@import("std").os.windows.WINAPI) void;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (2)
//--------------------------------------------------------------------------------
pub const wglUseFontBitmaps = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().wglUseFontBitmapsA,
    .wide => @This().wglUseFontBitmapsW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'wglUseFontBitmaps' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const wglUseFontOutlines = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().wglUseFontOutlinesA,
    .wide => @This().wglUseFontOutlinesW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'wglUseFontOutlines' requires that UNICODE be set to true or false in the root module",
    ),
};
//--------------------------------------------------------------------------------
// Section: Imports (7)
//--------------------------------------------------------------------------------
const BOOL = @import("../foundation.zig").BOOL;
const EMR = @import("../graphics/gdi.zig").EMR;
const HDC = @import("../graphics/gdi.zig").HDC;
const HENHMETAFILE = @import("../graphics/gdi.zig").HENHMETAFILE;
const PROC = @import("../foundation.zig").PROC;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PFNGLARRAYELEMENTEXTPROC")) { _ = PFNGLARRAYELEMENTEXTPROC; }
    if (@hasDecl(@This(), "PFNGLDRAWARRAYSEXTPROC")) { _ = PFNGLDRAWARRAYSEXTPROC; }
    if (@hasDecl(@This(), "PFNGLVERTEXPOINTEREXTPROC")) { _ = PFNGLVERTEXPOINTEREXTPROC; }
    if (@hasDecl(@This(), "PFNGLNORMALPOINTEREXTPROC")) { _ = PFNGLNORMALPOINTEREXTPROC; }
    if (@hasDecl(@This(), "PFNGLCOLORPOINTEREXTPROC")) { _ = PFNGLCOLORPOINTEREXTPROC; }
    if (@hasDecl(@This(), "PFNGLINDEXPOINTEREXTPROC")) { _ = PFNGLINDEXPOINTEREXTPROC; }
    if (@hasDecl(@This(), "PFNGLTEXCOORDPOINTEREXTPROC")) { _ = PFNGLTEXCOORDPOINTEREXTPROC; }
    if (@hasDecl(@This(), "PFNGLEDGEFLAGPOINTEREXTPROC")) { _ = PFNGLEDGEFLAGPOINTEREXTPROC; }
    if (@hasDecl(@This(), "PFNGLGETPOINTERVEXTPROC")) { _ = PFNGLGETPOINTERVEXTPROC; }
    if (@hasDecl(@This(), "PFNGLARRAYELEMENTARRAYEXTPROC")) { _ = PFNGLARRAYELEMENTARRAYEXTPROC; }
    if (@hasDecl(@This(), "PFNGLDRAWRANGEELEMENTSWINPROC")) { _ = PFNGLDRAWRANGEELEMENTSWINPROC; }
    if (@hasDecl(@This(), "PFNGLADDSWAPHINTRECTWINPROC")) { _ = PFNGLADDSWAPHINTRECTWINPROC; }
    if (@hasDecl(@This(), "PFNGLCOLORTABLEEXTPROC")) { _ = PFNGLCOLORTABLEEXTPROC; }
    if (@hasDecl(@This(), "PFNGLCOLORSUBTABLEEXTPROC")) { _ = PFNGLCOLORSUBTABLEEXTPROC; }
    if (@hasDecl(@This(), "PFNGLGETCOLORTABLEEXTPROC")) { _ = PFNGLGETCOLORTABLEEXTPROC; }
    if (@hasDecl(@This(), "PFNGLGETCOLORTABLEPARAMETERIVEXTPROC")) { _ = PFNGLGETCOLORTABLEPARAMETERIVEXTPROC; }
    if (@hasDecl(@This(), "PFNGLGETCOLORTABLEPARAMETERFVEXTPROC")) { _ = PFNGLGETCOLORTABLEPARAMETERFVEXTPROC; }
    if (@hasDecl(@This(), "GLUquadricErrorProc")) { _ = GLUquadricErrorProc; }
    if (@hasDecl(@This(), "GLUtessBeginProc")) { _ = GLUtessBeginProc; }
    if (@hasDecl(@This(), "GLUtessEdgeFlagProc")) { _ = GLUtessEdgeFlagProc; }
    if (@hasDecl(@This(), "GLUtessVertexProc")) { _ = GLUtessVertexProc; }
    if (@hasDecl(@This(), "GLUtessEndProc")) { _ = GLUtessEndProc; }
    if (@hasDecl(@This(), "GLUtessErrorProc")) { _ = GLUtessErrorProc; }
    if (@hasDecl(@This(), "GLUtessCombineProc")) { _ = GLUtessCombineProc; }
    if (@hasDecl(@This(), "GLUtessBeginDataProc")) { _ = GLUtessBeginDataProc; }
    if (@hasDecl(@This(), "GLUtessEdgeFlagDataProc")) { _ = GLUtessEdgeFlagDataProc; }
    if (@hasDecl(@This(), "GLUtessVertexDataProc")) { _ = GLUtessVertexDataProc; }
    if (@hasDecl(@This(), "GLUtessEndDataProc")) { _ = GLUtessEndDataProc; }
    if (@hasDecl(@This(), "GLUtessErrorDataProc")) { _ = GLUtessErrorDataProc; }
    if (@hasDecl(@This(), "GLUtessCombineDataProc")) { _ = GLUtessCombineDataProc; }
    if (@hasDecl(@This(), "GLUnurbsErrorProc")) { _ = GLUnurbsErrorProc; }

    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
