//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (66)
//--------------------------------------------------------------------------------
pub const MENROLL_E_DEVICE_MESSAGE_FORMAT_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910783));
pub const MENROLL_E_DEVICE_AUTHENTICATION_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910782));
pub const MENROLL_E_DEVICE_AUTHORIZATION_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910781));
pub const MENROLL_E_DEVICE_CERTIFICATEREQUEST_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910780));
pub const MENROLL_E_DEVICE_CONFIGMGRSERVER_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910779));
pub const MENROLL_E_DEVICE_INTERNALSERVICE_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910778));
pub const MENROLL_E_DEVICE_INVALIDSECURITY_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910777));
pub const MENROLL_E_DEVICE_UNKNOWN_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910776));
pub const MENROLL_E_ENROLLMENT_IN_PROGRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910775));
pub const MENROLL_E_DEVICE_ALREADY_ENROLLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910774));
pub const MENROLL_E_DISCOVERY_SEC_CERT_DATE_INVALID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910771));
pub const MENROLL_E_PASSWORD_NEEDED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910770));
pub const MENROLL_E_WAB_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910769));
pub const MENROLL_E_CONNECTIVITY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910768));
pub const MENROLL_E_INVALIDSSLCERT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910766));
pub const MENROLL_E_DEVICEAPREACHED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910765));
pub const MENROLL_E_DEVICENOTSUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910764));
pub const MENROLL_E_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910763));
pub const MENROLL_E_NOTELIGIBLETORENEW = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910762));
pub const MENROLL_E_INMAINTENANCE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910761));
pub const MENROLL_E_USER_LICENSE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910760));
pub const MENROLL_E_ENROLLMENTDATAINVALID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910759));
pub const MENROLL_E_INSECUREREDIRECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910758));
pub const MENROLL_E_PLATFORM_WRONG_STATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910757));
pub const MENROLL_E_PLATFORM_LICENSE_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910756));
pub const MENROLL_E_PLATFORM_UNKNOWN_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910755));
pub const MENROLL_E_PROV_CSP_CERTSTORE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910754));
pub const MENROLL_E_PROV_CSP_W7 = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910753));
pub const MENROLL_E_PROV_CSP_DMCLIENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910752));
pub const MENROLL_E_PROV_CSP_PFW = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910751));
pub const MENROLL_E_PROV_CSP_MISC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910750));
pub const MENROLL_E_PROV_UNKNOWN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910749));
pub const MENROLL_E_PROV_SSLCERTNOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910748));
pub const MENROLL_E_PROV_CSP_APPMGMT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910747));
pub const MENROLL_E_DEVICE_MANAGEMENT_BLOCKED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910746));
pub const MENROLL_E_CERTPOLICY_PRIVATEKEYCREATION_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910745));
pub const MENROLL_E_CERTAUTH_FAILED_TO_FIND_CERT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910744));
pub const MENROLL_E_EMPTY_MESSAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910743));
pub const MENROLL_E_USER_CANCELLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910736));
pub const MENROLL_E_MDM_NOT_CONFIGURED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910735));
pub const MDM_REGISTRATION_FACILITY_CODE = @as(u32, 25);
pub const DEVICE_ENROLLER_FACILITY_CODE = @as(u32, 24);
pub const MREGISTER_E_DEVICE_MESSAGE_FORMAT_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145845247));
pub const MREGISTER_E_DEVICE_AUTHENTICATION_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145845246));
pub const MREGISTER_E_DEVICE_AUTHORIZATION_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145845245));
pub const MREGISTER_E_DEVICE_CERTIFCATEREQUEST_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145845244));
pub const MENROLL_E_DEVICE_CERTIFCATEREQUEST_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910780));
pub const MREGISTER_E_DEVICE_CONFIGMGRSERVER_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145845243));
pub const MREGISTER_E_DEVICE_INTERNALSERVICE_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145845242));
pub const MREGISTER_E_DEVICE_INVALIDSECURITY_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145845241));
pub const MREGISTER_E_DEVICE_UNKNOWN_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145845240));
pub const MREGISTER_E_REGISTRATION_IN_PROGRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145845239));
pub const MREGISTER_E_DEVICE_ALREADY_REGISTERED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145845238));
pub const MREGISTER_E_DEVICE_NOT_REGISTERED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145845237));
pub const MENROLL_E_DEVICE_NOT_ENROLLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910773));
pub const MREGISTER_E_DISCOVERY_REDIRECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145845236));
pub const MREGISTER_E_DEVICE_NOT_AD_REGISTERED_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145845235));
pub const MREGISTER_E_DISCOVERY_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145845234));
pub const MENROLL_E_DEVICECAPREACHED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910765));
pub const MENROLL_E_NOTSUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910763));
pub const MENROLL_E_USERLICENSE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910760));
pub const MENROLL_E_USER_CANCELED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145910742));
pub const DEVICEREGISTRATIONTYPE_MDM_ONLY = @as(u32, 0);
pub const DEVICEREGISTRATIONTYPE_MAM = @as(u32, 5);
pub const DEVICEREGISTRATIONTYPE_MDM_DEVICEWIDE_WITH_AAD = @as(u32, 6);
pub const DEVICEREGISTRATIONTYPE_MDM_USERSPECIFIC_WITH_AAD = @as(u32, 13);

//--------------------------------------------------------------------------------
// Section: Types (3)
//--------------------------------------------------------------------------------
pub const MANAGEMENT_SERVICE_INFO = extern struct {
    pszMDMServiceUri: ?PWSTR,
    pszAuthenticationUri: ?PWSTR,
};

pub const MANAGEMENT_REGISTRATION_INFO = extern struct {
    fDeviceRegisteredWithManagement: BOOL,
    dwDeviceRegistionKind: u32,
    pszUPN: ?PWSTR,
    pszMDMServiceUri: ?PWSTR,
};

pub const REGISTRATION_INFORMATION_CLASS = enum(i32) {
    DeviceRegistrationBasicInfo = 1,
    MaxDeviceInfoClass = 2,
};
pub const DeviceRegistrationBasicInfo = REGISTRATION_INFORMATION_CLASS.DeviceRegistrationBasicInfo;
pub const MaxDeviceInfoClass = REGISTRATION_INFORMATION_CLASS.MaxDeviceInfoClass;


//--------------------------------------------------------------------------------
// Section: Functions (18)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows8.1'
pub extern "mdmregistration" fn GetDeviceRegistrationInfo(
    DeviceInformationClass: REGISTRATION_INFORMATION_CLASS,
    ppDeviceRegistrationInfo: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.1'
pub extern "mdmregistration" fn IsDeviceRegisteredWithManagement(
    pfIsDeviceRegisteredWithManagement: ?*BOOL,
    cchUPN: u32,
    pszUPN: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.1'
pub extern "mdmregistration" fn IsManagementRegistrationAllowed(
    pfIsManagementRegistrationAllowed: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mdmregistration" fn IsMdmUxWithoutAadAllowed(
    isEnrollmentAllowed: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.1'
pub extern "mdmregistration" fn SetManagedExternally(
    IsManagedExternally: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.1'
pub extern "mdmregistration" fn DiscoverManagementService(
    pszUPN: ?[*:0]const u16,
    ppMgmtInfo: ?*?*MANAGEMENT_SERVICE_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.1'
pub extern "mdmregistration" fn RegisterDeviceWithManagementUsingAADCredentials(
    UserToken: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.1'
pub extern "mdmregistration" fn RegisterDeviceWithManagementUsingAADDeviceCredentials(
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mdmregistration" fn RegisterDeviceWithManagementUsingAADDeviceCredentials2(
    MDMApplicationID: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.1'
pub extern "mdmregistration" fn RegisterDeviceWithManagement(
    pszUPN: ?[*:0]const u16,
    ppszMDMServiceUri: ?[*:0]const u16,
    ppzsAccessToken: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.1'
pub extern "mdmregistration" fn UnregisterDeviceWithManagement(
    enrollmentID: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mdmregistration" fn GetDeviceManagementConfigInfo(
    providerID: ?[*:0]const u16,
    configStringBufferLength: ?*u32,
    configString: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mdmregistration" fn SetDeviceManagementConfigInfo(
    providerID: ?[*:0]const u16,
    configString: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.1'
pub extern "mdmregistration" fn GetManagementAppHyperlink(
    cchHyperlink: u32,
    pszHyperlink: [*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.1'
pub extern "mdmregistration" fn DiscoverManagementServiceEx(
    pszUPN: ?[*:0]const u16,
    pszDiscoveryServiceCandidate: ?[*:0]const u16,
    ppMgmtInfo: ?*?*MANAGEMENT_SERVICE_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mdmlocalmanagement" fn RegisterDeviceWithLocalManagement(
    alreadyRegistered: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mdmlocalmanagement" fn ApplyLocalManagementSyncML(
    syncMLRequest: ?[*:0]const u16,
    syncMLResult: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mdmlocalmanagement" fn UnregisterDeviceWithLocalManagement(
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (4)
//--------------------------------------------------------------------------------
const BOOL = @import("../foundation.zig").BOOL;
const HANDLE = @import("../foundation.zig").HANDLE;
const HRESULT = @import("../foundation.zig").HRESULT;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
