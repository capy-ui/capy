//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (4648)
//--------------------------------------------------------------------------------
pub const WM_CAP_START = @as(u32, 1024);
pub const MODM_USER = @as(u32, 16384);
pub const MIDM_USER = @as(u32, 16384);
pub const MODM_MAPPER = @as(u32, 8192);
pub const MIDM_MAPPER = @as(u32, 8192);
pub const MODM_INIT = @as(u32, 100);
pub const MIDM_INIT = @as(u32, 100);
pub const MODM_INIT_EX = @as(u32, 104);
pub const MIDM_INIT_EX = @as(u32, 104);
pub const DRV_MCI_FIRST = @as(u32, 2048);
pub const ACMDM_BASE = @as(u32, 24576);
pub const ICM_RESERVED = @as(u32, 20480);
pub const MCI_TEST = @as(i32, 32);
pub const MCI_CAPTURE = @as(u32, 2160);
pub const MCI_MONITOR = @as(u32, 2161);
pub const MCI_RESERVE = @as(u32, 2162);
pub const MCI_SETAUDIO = @as(u32, 2163);
pub const MCI_SIGNAL = @as(u32, 2165);
pub const MCI_SETVIDEO = @as(u32, 2166);
pub const MCI_QUALITY = @as(u32, 2167);
pub const MCI_LIST = @as(u32, 2168);
pub const MCI_UNDO = @as(u32, 2169);
pub const MCI_CONFIGURE = @as(u32, 2170);
pub const MCI_RESTORE = @as(u32, 2171);
pub const MCI_ON = @as(u32, 1);
pub const MCI_OFF = @as(u32, 0);
pub const MCI_DGV_FILE_MODE_SAVING = @as(u32, 1);
pub const MCI_DGV_FILE_MODE_LOADING = @as(u32, 2);
pub const MCI_DGV_FILE_MODE_EDITING = @as(u32, 3);
pub const MCI_DGV_FILE_MODE_IDLE = @as(u32, 4);
pub const MCI_ON_S = @as(i32, 32768);
pub const MCI_OFF_S = @as(i32, 32769);
pub const MCI_DGV_FILE_S = @as(i32, 32770);
pub const MCI_DGV_INPUT_S = @as(i32, 32771);
pub const MCI_DGV_FILE_MODE_SAVING_S = @as(i32, 32772);
pub const MCI_DGV_FILE_MODE_LOADING_S = @as(i32, 32773);
pub const MCI_DGV_FILE_MODE_EDITING_S = @as(i32, 32774);
pub const MCI_DGV_FILE_MODE_IDLE_S = @as(i32, 32775);
pub const MCI_DGV_SETVIDEO_SRC_NTSC_S = @as(i32, 32784);
pub const MCI_DGV_SETVIDEO_SRC_RGB_S = @as(i32, 32785);
pub const MCI_DGV_SETVIDEO_SRC_SVIDEO_S = @as(i32, 32786);
pub const MCI_DGV_SETVIDEO_SRC_PAL_S = @as(i32, 32787);
pub const MCI_DGV_SETVIDEO_SRC_SECAM_S = @as(i32, 32788);
pub const MCI_DGV_SETVIDEO_SRC_GENERIC_S = @as(i32, 32789);
pub const MCI_DGV_SETAUDIO_SRC_LEFT_S = @as(i32, 32800);
pub const MCI_DGV_SETAUDIO_SRC_RIGHT_S = @as(i32, 32801);
pub const MCI_DGV_SETAUDIO_SRC_AVERAGE_S = @as(i32, 32802);
pub const MCI_DGV_SETAUDIO_SRC_STEREO_S = @as(i32, 32803);
pub const MCIERR_DGV_DEVICE_LIMIT = @as(u32, 512);
pub const MCIERR_DGV_IOERR = @as(u32, 513);
pub const MCIERR_DGV_WORKSPACE_EMPTY = @as(u32, 514);
pub const MCIERR_DGV_DISK_FULL = @as(u32, 515);
pub const MCIERR_DGV_DEVICE_MEMORY_FULL = @as(u32, 516);
pub const MCIERR_DGV_BAD_CLIPBOARD_RANGE = @as(u32, 517);
pub const MCI_DGV_METHOD_PRE = @as(i32, 40960);
pub const MCI_DGV_METHOD_POST = @as(i32, 40961);
pub const MCI_DGV_METHOD_DIRECT = @as(i32, 40962);
pub const MCI_DGV_FF_AVSS = @as(i32, 16384);
pub const MCI_DGV_FF_AVI = @as(i32, 16385);
pub const MCI_DGV_FF_DIB = @as(i32, 16386);
pub const MCI_DGV_FF_RDIB = @as(i32, 16387);
pub const MCI_DGV_FF_JPEG = @as(i32, 16388);
pub const MCI_DGV_FF_RJPEG = @as(i32, 16389);
pub const MCI_DGV_FF_JFIF = @as(i32, 16390);
pub const MCI_DGV_FF_MPEG = @as(i32, 16391);
pub const MCI_DGV_GETDEVCAPS_CAN_LOCK = @as(i32, 16384);
pub const MCI_DGV_GETDEVCAPS_CAN_STRETCH = @as(i32, 16385);
pub const MCI_DGV_GETDEVCAPS_CAN_FREEZE = @as(i32, 16386);
pub const MCI_DGV_GETDEVCAPS_MAX_WINDOWS = @as(i32, 16387);
pub const MCI_DGV_GETDEVCAPS_CAN_REVERSE = @as(i32, 16388);
pub const MCI_DGV_GETDEVCAPS_HAS_STILL = @as(i32, 16389);
pub const MCI_DGV_GETDEVCAPS_PALETTES = @as(i32, 16390);
pub const MCI_DGV_GETDEVCAPS_CAN_STR_IN = @as(i32, 16392);
pub const MCI_DGV_GETDEVCAPS_CAN_TEST = @as(i32, 16393);
pub const MCI_DGV_GETDEVCAPS_MAXIMUM_RATE = @as(i32, 16394);
pub const MCI_DGV_GETDEVCAPS_MINIMUM_RATE = @as(i32, 16395);
pub const MCI_DGV_CAPTURE_AS = @as(i32, 65536);
pub const MCI_DGV_CAPTURE_AT = @as(i32, 131072);
pub const MCI_DGV_COPY_AT = @as(i32, 65536);
pub const MCI_DGV_COPY_AUDIO_STREAM = @as(i32, 131072);
pub const MCI_DGV_COPY_VIDEO_STREAM = @as(i32, 262144);
pub const MCI_DGV_CUE_INPUT = @as(i32, 65536);
pub const MCI_DGV_CUE_OUTPUT = @as(i32, 131072);
pub const MCI_DGV_CUE_NOSHOW = @as(i32, 262144);
pub const MCI_DGV_CUT_AT = @as(i32, 65536);
pub const MCI_DGV_CUT_AUDIO_STREAM = @as(i32, 131072);
pub const MCI_DGV_CUT_VIDEO_STREAM = @as(i32, 262144);
pub const MCI_DGV_DELETE_AT = @as(i32, 65536);
pub const MCI_DGV_DELETE_AUDIO_STREAM = @as(i32, 131072);
pub const MCI_DGV_DELETE_VIDEO_STREAM = @as(i32, 262144);
pub const MCI_DGV_FREEZE_AT = @as(i32, 65536);
pub const MCI_DGV_FREEZE_OUTSIDE = @as(i32, 131072);
pub const MCI_DGV_INFO_TEXT = @as(i32, 65536);
pub const MCI_DGV_INFO_ITEM = @as(i32, 131072);
pub const MCI_INFO_VERSION = @as(i32, 1024);
pub const MCI_DGV_INFO_USAGE = @as(i32, 16384);
pub const MCI_DGV_INFO_AUDIO_QUALITY = @as(i32, 16385);
pub const MCI_DGV_INFO_STILL_QUALITY = @as(i32, 16386);
pub const MCI_DGV_INFO_VIDEO_QUALITY = @as(i32, 16387);
pub const MCI_DGV_INFO_AUDIO_ALG = @as(i32, 16388);
pub const MCI_DGV_INFO_STILL_ALG = @as(i32, 16389);
pub const MCI_DGV_INFO_VIDEO_ALG = @as(i32, 16390);
pub const MCI_DGV_LIST_ITEM = @as(i32, 65536);
pub const MCI_DGV_LIST_COUNT = @as(i32, 131072);
pub const MCI_DGV_LIST_NUMBER = @as(i32, 262144);
pub const MCI_DGV_LIST_ALG = @as(i32, 524288);
pub const MCI_DGV_LIST_AUDIO_ALG = @as(i32, 16384);
pub const MCI_DGV_LIST_AUDIO_QUALITY = @as(i32, 16385);
pub const MCI_DGV_LIST_AUDIO_STREAM = @as(i32, 16386);
pub const MCI_DGV_LIST_STILL_ALG = @as(i32, 16387);
pub const MCI_DGV_LIST_STILL_QUALITY = @as(i32, 16388);
pub const MCI_DGV_LIST_VIDEO_ALG = @as(i32, 16389);
pub const MCI_DGV_LIST_VIDEO_QUALITY = @as(i32, 16390);
pub const MCI_DGV_LIST_VIDEO_STREAM = @as(i32, 16391);
pub const MCI_DGV_LIST_VIDEO_SOURCE = @as(i32, 16392);
pub const MCI_DGV_MONITOR_METHOD = @as(i32, 65536);
pub const MCI_DGV_MONITOR_SOURCE = @as(i32, 131072);
pub const MCI_DGV_MONITOR_INPUT = @as(i32, 16384);
pub const MCI_DGV_MONITOR_FILE = @as(i32, 16385);
pub const MCI_DGV_OPEN_WS = @as(i32, 65536);
pub const MCI_DGV_OPEN_PARENT = @as(i32, 131072);
pub const MCI_DGV_OPEN_NOSTATIC = @as(i32, 262144);
pub const MCI_DGV_OPEN_16BIT = @as(i32, 524288);
pub const MCI_DGV_OPEN_32BIT = @as(i32, 1048576);
pub const MCI_DGV_PASTE_AT = @as(i32, 65536);
pub const MCI_DGV_PASTE_AUDIO_STREAM = @as(i32, 131072);
pub const MCI_DGV_PASTE_VIDEO_STREAM = @as(i32, 262144);
pub const MCI_DGV_PASTE_INSERT = @as(i32, 524288);
pub const MCI_DGV_PASTE_OVERWRITE = @as(i32, 1048576);
pub const MCI_DGV_PLAY_REPEAT = @as(i32, 65536);
pub const MCI_DGV_PLAY_REVERSE = @as(i32, 131072);
pub const MCI_DGV_RECT = @as(i32, 65536);
pub const MCI_DGV_PUT_SOURCE = @as(i32, 131072);
pub const MCI_DGV_PUT_DESTINATION = @as(i32, 262144);
pub const MCI_DGV_PUT_FRAME = @as(i32, 524288);
pub const MCI_DGV_PUT_VIDEO = @as(i32, 1048576);
pub const MCI_DGV_PUT_WINDOW = @as(i32, 2097152);
pub const MCI_DGV_PUT_CLIENT = @as(i32, 4194304);
pub const MCI_QUALITY_ITEM = @as(i32, 65536);
pub const MCI_QUALITY_NAME = @as(i32, 131072);
pub const MCI_QUALITY_ALG = @as(i32, 262144);
pub const MCI_QUALITY_DIALOG = @as(i32, 524288);
pub const MCI_QUALITY_HANDLE = @as(i32, 1048576);
pub const MCI_QUALITY_ITEM_AUDIO = @as(i32, 16384);
pub const MCI_QUALITY_ITEM_STILL = @as(i32, 16385);
pub const MCI_QUALITY_ITEM_VIDEO = @as(i32, 16386);
pub const MCI_DGV_REALIZE_NORM = @as(i32, 65536);
pub const MCI_DGV_REALIZE_BKGD = @as(i32, 131072);
pub const MCI_DGV_RECORD_HOLD = @as(i32, 131072);
pub const MCI_DGV_RECORD_AUDIO_STREAM = @as(i32, 262144);
pub const MCI_DGV_RECORD_VIDEO_STREAM = @as(i32, 524288);
pub const MCI_DGV_RESERVE_IN = @as(i32, 65536);
pub const MCI_DGV_RESERVE_SIZE = @as(i32, 131072);
pub const MCI_DGV_RESTORE_FROM = @as(i32, 65536);
pub const MCI_DGV_RESTORE_AT = @as(i32, 131072);
pub const MCI_DGV_SAVE_ABORT = @as(i32, 131072);
pub const MCI_DGV_SAVE_KEEPRESERVE = @as(i32, 262144);
pub const MCI_DGV_SET_SEEK_EXACTLY = @as(i32, 65536);
pub const MCI_DGV_SET_SPEED = @as(i32, 131072);
pub const MCI_DGV_SET_STILL = @as(i32, 262144);
pub const MCI_DGV_SET_FILEFORMAT = @as(i32, 524288);
pub const MCI_DGV_SETAUDIO_OVER = @as(i32, 65536);
pub const MCI_DGV_SETAUDIO_CLOCKTIME = @as(i32, 131072);
pub const MCI_DGV_SETAUDIO_ALG = @as(i32, 262144);
pub const MCI_DGV_SETAUDIO_QUALITY = @as(i32, 524288);
pub const MCI_DGV_SETAUDIO_RECORD = @as(i32, 1048576);
pub const MCI_DGV_SETAUDIO_LEFT = @as(i32, 2097152);
pub const MCI_DGV_SETAUDIO_RIGHT = @as(i32, 4194304);
pub const MCI_DGV_SETAUDIO_ITEM = @as(i32, 8388608);
pub const MCI_DGV_SETAUDIO_VALUE = @as(i32, 16777216);
pub const MCI_DGV_SETAUDIO_INPUT = @as(i32, 33554432);
pub const MCI_DGV_SETAUDIO_OUTPUT = @as(i32, 67108864);
pub const MCI_DGV_SETAUDIO_TREBLE = @as(i32, 16384);
pub const MCI_DGV_SETAUDIO_BASS = @as(i32, 16385);
pub const MCI_DGV_SETAUDIO_VOLUME = @as(i32, 16386);
pub const MCI_DGV_SETAUDIO_STREAM = @as(i32, 16387);
pub const MCI_DGV_SETAUDIO_SOURCE = @as(i32, 16388);
pub const MCI_DGV_SETAUDIO_SAMPLESPERSEC = @as(i32, 16389);
pub const MCI_DGV_SETAUDIO_AVGBYTESPERSEC = @as(i32, 16390);
pub const MCI_DGV_SETAUDIO_BLOCKALIGN = @as(i32, 16391);
pub const MCI_DGV_SETAUDIO_BITSPERSAMPLE = @as(i32, 16392);
pub const MCI_DGV_SETAUDIO_SOURCE_STEREO = @as(i32, 0);
pub const MCI_DGV_SETAUDIO_SOURCE_LEFT = @as(i32, 1);
pub const MCI_DGV_SETAUDIO_SOURCE_RIGHT = @as(i32, 2);
pub const MCI_DGV_SETAUDIO_SOURCE_AVERAGE = @as(i32, 16384);
pub const MCI_DGV_SETVIDEO_QUALITY = @as(i32, 65536);
pub const MCI_DGV_SETVIDEO_ALG = @as(i32, 131072);
pub const MCI_DGV_SETVIDEO_CLOCKTIME = @as(i32, 262144);
pub const MCI_DGV_SETVIDEO_SRC_NUMBER = @as(i32, 524288);
pub const MCI_DGV_SETVIDEO_ITEM = @as(i32, 1048576);
pub const MCI_DGV_SETVIDEO_OVER = @as(i32, 2097152);
pub const MCI_DGV_SETVIDEO_RECORD = @as(i32, 4194304);
pub const MCI_DGV_SETVIDEO_STILL = @as(i32, 8388608);
pub const MCI_DGV_SETVIDEO_VALUE = @as(i32, 16777216);
pub const MCI_DGV_SETVIDEO_INPUT = @as(i32, 33554432);
pub const MCI_DGV_SETVIDEO_OUTPUT = @as(i32, 67108864);
pub const MCI_DGV_SETVIDEO_SRC_NTSC = @as(i32, 16384);
pub const MCI_DGV_SETVIDEO_SRC_RGB = @as(i32, 16385);
pub const MCI_DGV_SETVIDEO_SRC_SVIDEO = @as(i32, 16386);
pub const MCI_DGV_SETVIDEO_SRC_PAL = @as(i32, 16387);
pub const MCI_DGV_SETVIDEO_SRC_SECAM = @as(i32, 16388);
pub const MCI_DGV_SETVIDEO_SRC_GENERIC = @as(i32, 16389);
pub const MCI_DGV_SETVIDEO_BRIGHTNESS = @as(i32, 16384);
pub const MCI_DGV_SETVIDEO_COLOR = @as(i32, 16385);
pub const MCI_DGV_SETVIDEO_CONTRAST = @as(i32, 16386);
pub const MCI_DGV_SETVIDEO_TINT = @as(i32, 16387);
pub const MCI_DGV_SETVIDEO_SHARPNESS = @as(i32, 16388);
pub const MCI_DGV_SETVIDEO_GAMMA = @as(i32, 16389);
pub const MCI_DGV_SETVIDEO_STREAM = @as(i32, 16390);
pub const MCI_DGV_SETVIDEO_PALHANDLE = @as(i32, 16391);
pub const MCI_DGV_SETVIDEO_FRAME_RATE = @as(i32, 16392);
pub const MCI_DGV_SETVIDEO_SOURCE = @as(i32, 16393);
pub const MCI_DGV_SETVIDEO_KEY_INDEX = @as(i32, 16394);
pub const MCI_DGV_SETVIDEO_KEY_COLOR = @as(i32, 16395);
pub const MCI_DGV_SETVIDEO_BITSPERPEL = @as(i32, 16396);
pub const MCI_DGV_SIGNAL_AT = @as(i32, 65536);
pub const MCI_DGV_SIGNAL_EVERY = @as(i32, 131072);
pub const MCI_DGV_SIGNAL_USERVAL = @as(i32, 262144);
pub const MCI_DGV_SIGNAL_CANCEL = @as(i32, 524288);
pub const MCI_DGV_SIGNAL_POSITION = @as(i32, 1048576);
pub const MCI_DGV_STATUS_NOMINAL = @as(i32, 131072);
pub const MCI_DGV_STATUS_REFERENCE = @as(i32, 262144);
pub const MCI_DGV_STATUS_LEFT = @as(i32, 524288);
pub const MCI_DGV_STATUS_RIGHT = @as(i32, 1048576);
pub const MCI_DGV_STATUS_DISKSPACE = @as(i32, 2097152);
pub const MCI_DGV_STATUS_INPUT = @as(i32, 4194304);
pub const MCI_DGV_STATUS_OUTPUT = @as(i32, 8388608);
pub const MCI_DGV_STATUS_RECORD = @as(i32, 16777216);
pub const MCI_DGV_STATUS_AUDIO_INPUT = @as(i32, 16384);
pub const MCI_DGV_STATUS_HWND = @as(i32, 16385);
pub const MCI_DGV_STATUS_SPEED = @as(i32, 16387);
pub const MCI_DGV_STATUS_HPAL = @as(i32, 16388);
pub const MCI_DGV_STATUS_BRIGHTNESS = @as(i32, 16389);
pub const MCI_DGV_STATUS_COLOR = @as(i32, 16390);
pub const MCI_DGV_STATUS_CONTRAST = @as(i32, 16391);
pub const MCI_DGV_STATUS_FILEFORMAT = @as(i32, 16392);
pub const MCI_DGV_STATUS_AUDIO_SOURCE = @as(i32, 16393);
pub const MCI_DGV_STATUS_GAMMA = @as(i32, 16394);
pub const MCI_DGV_STATUS_MONITOR = @as(i32, 16395);
pub const MCI_DGV_STATUS_MONITOR_METHOD = @as(i32, 16396);
pub const MCI_DGV_STATUS_FRAME_RATE = @as(i32, 16398);
pub const MCI_DGV_STATUS_BASS = @as(i32, 16399);
pub const MCI_DGV_STATUS_SIZE = @as(i32, 16400);
pub const MCI_DGV_STATUS_SEEK_EXACTLY = @as(i32, 16401);
pub const MCI_DGV_STATUS_SHARPNESS = @as(i32, 16402);
pub const MCI_DGV_STATUS_SMPTE = @as(i32, 16403);
pub const MCI_DGV_STATUS_AUDIO = @as(i32, 16404);
pub const MCI_DGV_STATUS_TINT = @as(i32, 16405);
pub const MCI_DGV_STATUS_TREBLE = @as(i32, 16406);
pub const MCI_DGV_STATUS_UNSAVED = @as(i32, 16407);
pub const MCI_DGV_STATUS_VIDEO = @as(i32, 16408);
pub const MCI_DGV_STATUS_VOLUME = @as(i32, 16409);
pub const MCI_DGV_STATUS_AUDIO_RECORD = @as(i32, 16410);
pub const MCI_DGV_STATUS_VIDEO_SOURCE = @as(i32, 16411);
pub const MCI_DGV_STATUS_VIDEO_RECORD = @as(i32, 16412);
pub const MCI_DGV_STATUS_STILL_FILEFORMAT = @as(i32, 16413);
pub const MCI_DGV_STATUS_VIDEO_SRC_NUM = @as(i32, 16414);
pub const MCI_DGV_STATUS_FILE_MODE = @as(i32, 16415);
pub const MCI_DGV_STATUS_FILE_COMPLETION = @as(i32, 16416);
pub const MCI_DGV_STATUS_WINDOW_VISIBLE = @as(i32, 16417);
pub const MCI_DGV_STATUS_WINDOW_MINIMIZED = @as(i32, 16418);
pub const MCI_DGV_STATUS_WINDOW_MAXIMIZED = @as(i32, 16419);
pub const MCI_DGV_STATUS_KEY_INDEX = @as(i32, 16420);
pub const MCI_DGV_STATUS_KEY_COLOR = @as(i32, 16421);
pub const MCI_DGV_STATUS_PAUSE_MODE = @as(i32, 16422);
pub const MCI_DGV_STATUS_SAMPLESPERSEC = @as(i32, 16423);
pub const MCI_DGV_STATUS_AVGBYTESPERSEC = @as(i32, 16424);
pub const MCI_DGV_STATUS_BLOCKALIGN = @as(i32, 16425);
pub const MCI_DGV_STATUS_BITSPERSAMPLE = @as(i32, 16426);
pub const MCI_DGV_STATUS_BITSPERPEL = @as(i32, 16427);
pub const MCI_DGV_STATUS_FORWARD = @as(i32, 16428);
pub const MCI_DGV_STATUS_AUDIO_STREAM = @as(i32, 16429);
pub const MCI_DGV_STATUS_VIDEO_STREAM = @as(i32, 16430);
pub const MCI_DGV_STEP_REVERSE = @as(i32, 65536);
pub const MCI_DGV_STEP_FRAMES = @as(i32, 131072);
pub const MCI_DGV_STOP_HOLD = @as(i32, 65536);
pub const MCI_DGV_UPDATE_HDC = @as(i32, 131072);
pub const MCI_DGV_UPDATE_PAINT = @as(i32, 262144);
pub const MCI_DGV_WHERE_SOURCE = @as(i32, 131072);
pub const MCI_DGV_WHERE_DESTINATION = @as(i32, 262144);
pub const MCI_DGV_WHERE_FRAME = @as(i32, 524288);
pub const MCI_DGV_WHERE_VIDEO = @as(i32, 1048576);
pub const MCI_DGV_WHERE_WINDOW = @as(i32, 2097152);
pub const MCI_DGV_WHERE_MAX = @as(i32, 4194304);
pub const MCI_DGV_WINDOW_HWND = @as(i32, 65536);
pub const MCI_DGV_WINDOW_STATE = @as(i32, 262144);
pub const MCI_DGV_WINDOW_TEXT = @as(i32, 524288);
pub const MCI_DGV_WINDOW_DEFAULT = @as(i32, 0);
pub const MM_CREATIVE = @as(u32, 2);
pub const MM_MEDIAVISION = @as(u32, 3);
pub const MM_FUJITSU = @as(u32, 4);
pub const MM_PRAGMATRAX = @as(u32, 5);
pub const MM_CYRIX = @as(u32, 6);
pub const MM_PHILIPS_SPEECH_PROCESSING = @as(u32, 7);
pub const MM_NETXL = @as(u32, 8);
pub const MM_ZYXEL = @as(u32, 9);
pub const MM_BECUBED = @as(u32, 10);
pub const MM_AARDVARK = @as(u32, 11);
pub const MM_BINTEC = @as(u32, 12);
pub const MM_HEWLETT_PACKARD = @as(u32, 13);
pub const MM_ACULAB = @as(u32, 14);
pub const MM_FAITH = @as(u32, 15);
pub const MM_MITEL = @as(u32, 16);
pub const MM_QUANTUM3D = @as(u32, 17);
pub const MM_SNI = @as(u32, 18);
pub const MM_EMU = @as(u32, 19);
pub const MM_ARTISOFT = @as(u32, 20);
pub const MM_TURTLE_BEACH = @as(u32, 21);
pub const MM_IBM = @as(u32, 22);
pub const MM_VOCALTEC = @as(u32, 23);
pub const MM_ROLAND = @as(u32, 24);
pub const MM_DSP_SOLUTIONS = @as(u32, 25);
pub const MM_NEC = @as(u32, 26);
pub const MM_ATI = @as(u32, 27);
pub const MM_WANGLABS = @as(u32, 28);
pub const MM_TANDY = @as(u32, 29);
pub const MM_VOYETRA = @as(u32, 30);
pub const MM_ANTEX = @as(u32, 31);
pub const MM_ICL_PS = @as(u32, 32);
pub const MM_INTEL = @as(u32, 33);
pub const MM_GRAVIS = @as(u32, 34);
pub const MM_VAL = @as(u32, 35);
pub const MM_INTERACTIVE = @as(u32, 36);
pub const MM_YAMAHA = @as(u32, 37);
pub const MM_EVEREX = @as(u32, 38);
pub const MM_ECHO = @as(u32, 39);
pub const MM_SIERRA = @as(u32, 40);
pub const MM_CAT = @as(u32, 41);
pub const MM_APPS = @as(u32, 42);
pub const MM_DSP_GROUP = @as(u32, 43);
pub const MM_MELABS = @as(u32, 44);
pub const MM_COMPUTER_FRIENDS = @as(u32, 45);
pub const MM_ESS = @as(u32, 46);
pub const MM_AUDIOFILE = @as(u32, 47);
pub const MM_MOTOROLA = @as(u32, 48);
pub const MM_CANOPUS = @as(u32, 49);
pub const MM_EPSON = @as(u32, 50);
pub const MM_TRUEVISION = @as(u32, 51);
pub const MM_AZTECH = @as(u32, 52);
pub const MM_VIDEOLOGIC = @as(u32, 53);
pub const MM_SCALACS = @as(u32, 54);
pub const MM_KORG = @as(u32, 55);
pub const MM_APT = @as(u32, 56);
pub const MM_ICS = @as(u32, 57);
pub const MM_ITERATEDSYS = @as(u32, 58);
pub const MM_METHEUS = @as(u32, 59);
pub const MM_LOGITECH = @as(u32, 60);
pub const MM_WINNOV = @as(u32, 61);
pub const MM_NCR = @as(u32, 62);
pub const MM_EXAN = @as(u32, 63);
pub const MM_AST = @as(u32, 64);
pub const MM_WILLOWPOND = @as(u32, 65);
pub const MM_SONICFOUNDRY = @as(u32, 66);
pub const MM_VITEC = @as(u32, 67);
pub const MM_MOSCOM = @as(u32, 68);
pub const MM_SILICONSOFT = @as(u32, 69);
pub const MM_TERRATEC = @as(u32, 70);
pub const MM_MEDIASONIC = @as(u32, 71);
pub const MM_SANYO = @as(u32, 72);
pub const MM_SUPERMAC = @as(u32, 73);
pub const MM_AUDIOPT = @as(u32, 74);
pub const MM_NOGATECH = @as(u32, 75);
pub const MM_SPEECHCOMP = @as(u32, 76);
pub const MM_AHEAD = @as(u32, 77);
pub const MM_DOLBY = @as(u32, 78);
pub const MM_OKI = @as(u32, 79);
pub const MM_AURAVISION = @as(u32, 80);
pub const MM_OLIVETTI = @as(u32, 81);
pub const MM_IOMAGIC = @as(u32, 82);
pub const MM_MATSUSHITA = @as(u32, 83);
pub const MM_CONTROLRES = @as(u32, 84);
pub const MM_XEBEC = @as(u32, 85);
pub const MM_NEWMEDIA = @as(u32, 86);
pub const MM_NMS = @as(u32, 87);
pub const MM_LYRRUS = @as(u32, 88);
pub const MM_COMPUSIC = @as(u32, 89);
pub const MM_OPTI = @as(u32, 90);
pub const MM_ADLACC = @as(u32, 91);
pub const MM_COMPAQ = @as(u32, 92);
pub const MM_DIALOGIC = @as(u32, 93);
pub const MM_INSOFT = @as(u32, 94);
pub const MM_MPTUS = @as(u32, 95);
pub const MM_WEITEK = @as(u32, 96);
pub const MM_LERNOUT_AND_HAUSPIE = @as(u32, 97);
pub const MM_QCIAR = @as(u32, 98);
pub const MM_APPLE = @as(u32, 99);
pub const MM_DIGITAL = @as(u32, 100);
pub const MM_MOTU = @as(u32, 101);
pub const MM_WORKBIT = @as(u32, 102);
pub const MM_OSITECH = @as(u32, 103);
pub const MM_MIRO = @as(u32, 104);
pub const MM_CIRRUSLOGIC = @as(u32, 105);
pub const MM_ISOLUTION = @as(u32, 106);
pub const MM_HORIZONS = @as(u32, 107);
pub const MM_CONCEPTS = @as(u32, 108);
pub const MM_VTG = @as(u32, 109);
pub const MM_RADIUS = @as(u32, 110);
pub const MM_ROCKWELL = @as(u32, 111);
pub const MM_XYZ = @as(u32, 112);
pub const MM_OPCODE = @as(u32, 113);
pub const MM_VOXWARE = @as(u32, 114);
pub const MM_NORTHERN_TELECOM = @as(u32, 115);
pub const MM_APICOM = @as(u32, 116);
pub const MM_GRANDE = @as(u32, 117);
pub const MM_ADDX = @as(u32, 118);
pub const MM_WILDCAT = @as(u32, 119);
pub const MM_RHETOREX = @as(u32, 120);
pub const MM_BROOKTREE = @as(u32, 121);
pub const MM_ENSONIQ = @as(u32, 125);
pub const MM_FAST = @as(u32, 126);
pub const MM_NVIDIA = @as(u32, 127);
pub const MM_OKSORI = @as(u32, 128);
pub const MM_DIACOUSTICS = @as(u32, 129);
pub const MM_GULBRANSEN = @as(u32, 130);
pub const MM_KAY_ELEMETRICS = @as(u32, 131);
pub const MM_CRYSTAL = @as(u32, 132);
pub const MM_SPLASH_STUDIOS = @as(u32, 133);
pub const MM_QUARTERDECK = @as(u32, 134);
pub const MM_TDK = @as(u32, 135);
pub const MM_DIGITAL_AUDIO_LABS = @as(u32, 136);
pub const MM_SEERSYS = @as(u32, 137);
pub const MM_PICTURETEL = @as(u32, 138);
pub const MM_ATT_MICROELECTRONICS = @as(u32, 139);
pub const MM_OSPREY = @as(u32, 140);
pub const MM_MEDIATRIX = @as(u32, 141);
pub const MM_SOUNDESIGNS = @as(u32, 142);
pub const MM_ALDIGITAL = @as(u32, 143);
pub const MM_SPECTRUM_SIGNAL_PROCESSING = @as(u32, 144);
pub const MM_ECS = @as(u32, 145);
pub const MM_AMD = @as(u32, 146);
pub const MM_COREDYNAMICS = @as(u32, 147);
pub const MM_CANAM = @as(u32, 148);
pub const MM_SOFTSOUND = @as(u32, 149);
pub const MM_NORRIS = @as(u32, 150);
pub const MM_DDD = @as(u32, 151);
pub const MM_EUPHONICS = @as(u32, 152);
pub const MM_PRECEPT = @as(u32, 153);
pub const MM_CRYSTAL_NET = @as(u32, 154);
pub const MM_CHROMATIC = @as(u32, 155);
pub const MM_VOICEINFO = @as(u32, 156);
pub const MM_VIENNASYS = @as(u32, 157);
pub const MM_CONNECTIX = @as(u32, 158);
pub const MM_GADGETLABS = @as(u32, 159);
pub const MM_FRONTIER = @as(u32, 160);
pub const MM_VIONA = @as(u32, 161);
pub const MM_CASIO = @as(u32, 162);
pub const MM_DIAMONDMM = @as(u32, 163);
pub const MM_S3 = @as(u32, 164);
pub const MM_DVISION = @as(u32, 165);
pub const MM_NETSCAPE = @as(u32, 166);
pub const MM_SOUNDSPACE = @as(u32, 167);
pub const MM_VANKOEVERING = @as(u32, 168);
pub const MM_QTEAM = @as(u32, 169);
pub const MM_ZEFIRO = @as(u32, 170);
pub const MM_STUDER = @as(u32, 171);
pub const MM_FRAUNHOFER_IIS = @as(u32, 172);
pub const MM_QUICKNET = @as(u32, 173);
pub const MM_ALARIS = @as(u32, 174);
pub const MM_SICRESOURCE = @as(u32, 175);
pub const MM_NEOMAGIC = @as(u32, 176);
pub const MM_MERGING_TECHNOLOGIES = @as(u32, 177);
pub const MM_XIRLINK = @as(u32, 178);
pub const MM_COLORGRAPH = @as(u32, 179);
pub const MM_OTI = @as(u32, 180);
pub const MM_AUREAL = @as(u32, 181);
pub const MM_VIVO = @as(u32, 182);
pub const MM_SHARP = @as(u32, 183);
pub const MM_LUCENT = @as(u32, 184);
pub const MM_ATT = @as(u32, 185);
pub const MM_SUNCOM = @as(u32, 186);
pub const MM_SORVIS = @as(u32, 187);
pub const MM_INVISION = @as(u32, 188);
pub const MM_BERKOM = @as(u32, 189);
pub const MM_MARIAN = @as(u32, 190);
pub const MM_DPSINC = @as(u32, 191);
pub const MM_BCB = @as(u32, 192);
pub const MM_MOTIONPIXELS = @as(u32, 193);
pub const MM_QDESIGN = @as(u32, 194);
pub const MM_NMP = @as(u32, 195);
pub const MM_DATAFUSION = @as(u32, 196);
pub const MM_DUCK = @as(u32, 197);
pub const MM_FTR = @as(u32, 198);
pub const MM_BERCOS = @as(u32, 199);
pub const MM_ONLIVE = @as(u32, 200);
pub const MM_SIEMENS_SBC = @as(u32, 201);
pub const MM_TERALOGIC = @as(u32, 202);
pub const MM_PHONET = @as(u32, 203);
pub const MM_WINBOND = @as(u32, 204);
pub const MM_VIRTUALMUSIC = @as(u32, 205);
pub const MM_ENET = @as(u32, 206);
pub const MM_GUILLEMOT = @as(u32, 207);
pub const MM_EMAGIC = @as(u32, 208);
pub const MM_MWM = @as(u32, 209);
pub const MM_PACIFICRESEARCH = @as(u32, 210);
pub const MM_SIPROLAB = @as(u32, 211);
pub const MM_LYNX = @as(u32, 212);
pub const MM_SPECTRUM_PRODUCTIONS = @as(u32, 213);
pub const MM_DICTAPHONE = @as(u32, 214);
pub const MM_QUALCOMM = @as(u32, 215);
pub const MM_RZS = @as(u32, 216);
pub const MM_AUDIOSCIENCE = @as(u32, 217);
pub const MM_PINNACLE = @as(u32, 218);
pub const MM_EES = @as(u32, 219);
pub const MM_HAFTMANN = @as(u32, 220);
pub const MM_LUCID = @as(u32, 221);
pub const MM_HEADSPACE = @as(u32, 222);
pub const MM_UNISYS = @as(u32, 223);
pub const MM_LUMINOSITI = @as(u32, 224);
pub const MM_ACTIVEVOICE = @as(u32, 225);
pub const MM_DTS = @as(u32, 226);
pub const MM_DIGIGRAM = @as(u32, 227);
pub const MM_SOFTLAB_NSK = @as(u32, 228);
pub const MM_FORTEMEDIA = @as(u32, 229);
pub const MM_SONORUS = @as(u32, 230);
pub const MM_ARRAY = @as(u32, 231);
pub const MM_DATARAN = @as(u32, 232);
pub const MM_I_LINK = @as(u32, 233);
pub const MM_SELSIUS_SYSTEMS = @as(u32, 234);
pub const MM_ADMOS = @as(u32, 235);
pub const MM_LEXICON = @as(u32, 236);
pub const MM_SGI = @as(u32, 237);
pub const MM_IPI = @as(u32, 238);
pub const MM_ICE = @as(u32, 239);
pub const MM_VQST = @as(u32, 240);
pub const MM_ETEK = @as(u32, 241);
pub const MM_CS = @as(u32, 242);
pub const MM_ALESIS = @as(u32, 243);
pub const MM_INTERNET = @as(u32, 244);
pub const MM_SONY = @as(u32, 245);
pub const MM_HYPERACTIVE = @as(u32, 246);
pub const MM_UHER_INFORMATIC = @as(u32, 247);
pub const MM_SYDEC_NV = @as(u32, 248);
pub const MM_FLEXION = @as(u32, 249);
pub const MM_VIA = @as(u32, 250);
pub const MM_MICRONAS = @as(u32, 251);
pub const MM_ANALOGDEVICES = @as(u32, 252);
pub const MM_HP = @as(u32, 253);
pub const MM_MATROX_DIV = @as(u32, 254);
pub const MM_QUICKAUDIO = @as(u32, 255);
pub const MM_YOUCOM = @as(u32, 256);
pub const MM_RICHMOND = @as(u32, 257);
pub const MM_IODD = @as(u32, 258);
pub const MM_ICCC = @as(u32, 259);
pub const MM_3COM = @as(u32, 260);
pub const MM_MALDEN = @as(u32, 261);
pub const MM_3DFX = @as(u32, 262);
pub const MM_MINDMAKER = @as(u32, 263);
pub const MM_TELEKOL = @as(u32, 264);
pub const MM_ST_MICROELECTRONICS = @as(u32, 265);
pub const MM_ALGOVISION = @as(u32, 266);
pub const MM_UNMAPPED = @as(u32, 65535);
pub const MM_PID_UNMAPPED = @as(u32, 65535);
pub const MM_PCSPEAKER_WAVEOUT = @as(u32, 13);
pub const MM_MSFT_WSS_WAVEIN = @as(u32, 14);
pub const MM_MSFT_WSS_WAVEOUT = @as(u32, 15);
pub const MM_MSFT_WSS_FMSYNTH_STEREO = @as(u32, 16);
pub const MM_MSFT_WSS_MIXER = @as(u32, 17);
pub const MM_MSFT_WSS_OEM_WAVEIN = @as(u32, 18);
pub const MM_MSFT_WSS_OEM_WAVEOUT = @as(u32, 19);
pub const MM_MSFT_WSS_OEM_FMSYNTH_STEREO = @as(u32, 20);
pub const MM_MSFT_WSS_AUX = @as(u32, 21);
pub const MM_MSFT_WSS_OEM_AUX = @as(u32, 22);
pub const MM_MSFT_GENERIC_WAVEIN = @as(u32, 23);
pub const MM_MSFT_GENERIC_WAVEOUT = @as(u32, 24);
pub const MM_MSFT_GENERIC_MIDIIN = @as(u32, 25);
pub const MM_MSFT_GENERIC_MIDIOUT = @as(u32, 26);
pub const MM_MSFT_GENERIC_MIDISYNTH = @as(u32, 27);
pub const MM_MSFT_GENERIC_AUX_LINE = @as(u32, 28);
pub const MM_MSFT_GENERIC_AUX_MIC = @as(u32, 29);
pub const MM_MSFT_GENERIC_AUX_CD = @as(u32, 30);
pub const MM_MSFT_WSS_OEM_MIXER = @as(u32, 31);
pub const MM_MSFT_MSACM = @as(u32, 32);
pub const MM_MSFT_ACM_MSADPCM = @as(u32, 33);
pub const MM_MSFT_ACM_IMAADPCM = @as(u32, 34);
pub const MM_MSFT_ACM_MSFILTER = @as(u32, 35);
pub const MM_MSFT_ACM_GSM610 = @as(u32, 36);
pub const MM_MSFT_ACM_G711 = @as(u32, 37);
pub const MM_MSFT_ACM_PCM = @as(u32, 38);
pub const MM_WSS_SB16_WAVEIN = @as(u32, 39);
pub const MM_WSS_SB16_WAVEOUT = @as(u32, 40);
pub const MM_WSS_SB16_MIDIIN = @as(u32, 41);
pub const MM_WSS_SB16_MIDIOUT = @as(u32, 42);
pub const MM_WSS_SB16_SYNTH = @as(u32, 43);
pub const MM_WSS_SB16_AUX_LINE = @as(u32, 44);
pub const MM_WSS_SB16_AUX_CD = @as(u32, 45);
pub const MM_WSS_SB16_MIXER = @as(u32, 46);
pub const MM_WSS_SBPRO_WAVEIN = @as(u32, 47);
pub const MM_WSS_SBPRO_WAVEOUT = @as(u32, 48);
pub const MM_WSS_SBPRO_MIDIIN = @as(u32, 49);
pub const MM_WSS_SBPRO_MIDIOUT = @as(u32, 50);
pub const MM_WSS_SBPRO_SYNTH = @as(u32, 51);
pub const MM_WSS_SBPRO_AUX_LINE = @as(u32, 52);
pub const MM_WSS_SBPRO_AUX_CD = @as(u32, 53);
pub const MM_WSS_SBPRO_MIXER = @as(u32, 54);
pub const MM_MSFT_WSS_NT_WAVEIN = @as(u32, 55);
pub const MM_MSFT_WSS_NT_WAVEOUT = @as(u32, 56);
pub const MM_MSFT_WSS_NT_FMSYNTH_STEREO = @as(u32, 57);
pub const MM_MSFT_WSS_NT_MIXER = @as(u32, 58);
pub const MM_MSFT_WSS_NT_AUX = @as(u32, 59);
pub const MM_MSFT_SB16_WAVEIN = @as(u32, 60);
pub const MM_MSFT_SB16_WAVEOUT = @as(u32, 61);
pub const MM_MSFT_SB16_MIDIIN = @as(u32, 62);
pub const MM_MSFT_SB16_MIDIOUT = @as(u32, 63);
pub const MM_MSFT_SB16_SYNTH = @as(u32, 64);
pub const MM_MSFT_SB16_AUX_LINE = @as(u32, 65);
pub const MM_MSFT_SB16_AUX_CD = @as(u32, 66);
pub const MM_MSFT_SB16_MIXER = @as(u32, 67);
pub const MM_MSFT_SBPRO_WAVEIN = @as(u32, 68);
pub const MM_MSFT_SBPRO_WAVEOUT = @as(u32, 69);
pub const MM_MSFT_SBPRO_MIDIIN = @as(u32, 70);
pub const MM_MSFT_SBPRO_MIDIOUT = @as(u32, 71);
pub const MM_MSFT_SBPRO_SYNTH = @as(u32, 72);
pub const MM_MSFT_SBPRO_AUX_LINE = @as(u32, 73);
pub const MM_MSFT_SBPRO_AUX_CD = @as(u32, 74);
pub const MM_MSFT_SBPRO_MIXER = @as(u32, 75);
pub const MM_MSFT_MSOPL_SYNTH = @as(u32, 76);
pub const MM_MSFT_VMDMS_LINE_WAVEIN = @as(u32, 80);
pub const MM_MSFT_VMDMS_LINE_WAVEOUT = @as(u32, 81);
pub const MM_MSFT_VMDMS_HANDSET_WAVEIN = @as(u32, 82);
pub const MM_MSFT_VMDMS_HANDSET_WAVEOUT = @as(u32, 83);
pub const MM_MSFT_VMDMW_LINE_WAVEIN = @as(u32, 84);
pub const MM_MSFT_VMDMW_LINE_WAVEOUT = @as(u32, 85);
pub const MM_MSFT_VMDMW_HANDSET_WAVEIN = @as(u32, 86);
pub const MM_MSFT_VMDMW_HANDSET_WAVEOUT = @as(u32, 87);
pub const MM_MSFT_VMDMW_MIXER = @as(u32, 88);
pub const MM_MSFT_VMDM_GAME_WAVEOUT = @as(u32, 89);
pub const MM_MSFT_VMDM_GAME_WAVEIN = @as(u32, 90);
pub const MM_MSFT_ACM_MSNAUDIO = @as(u32, 91);
pub const MM_MSFT_ACM_MSG723 = @as(u32, 92);
pub const MM_MSFT_ACM_MSRT24 = @as(u32, 93);
pub const MM_MSFT_WDMAUDIO_WAVEOUT = @as(u32, 100);
pub const MM_MSFT_WDMAUDIO_WAVEIN = @as(u32, 101);
pub const MM_MSFT_WDMAUDIO_MIDIOUT = @as(u32, 102);
pub const MM_MSFT_WDMAUDIO_MIDIIN = @as(u32, 103);
pub const MM_MSFT_WDMAUDIO_MIXER = @as(u32, 104);
pub const MM_MSFT_WDMAUDIO_AUX = @as(u32, 105);
pub const MM_CREATIVE_SB15_WAVEIN = @as(u32, 1);
pub const MM_CREATIVE_SB20_WAVEIN = @as(u32, 2);
pub const MM_CREATIVE_SBPRO_WAVEIN = @as(u32, 3);
pub const MM_CREATIVE_SBP16_WAVEIN = @as(u32, 4);
pub const MM_CREATIVE_PHNBLST_WAVEIN = @as(u32, 5);
pub const MM_CREATIVE_SB15_WAVEOUT = @as(u32, 101);
pub const MM_CREATIVE_SB20_WAVEOUT = @as(u32, 102);
pub const MM_CREATIVE_SBPRO_WAVEOUT = @as(u32, 103);
pub const MM_CREATIVE_SBP16_WAVEOUT = @as(u32, 104);
pub const MM_CREATIVE_PHNBLST_WAVEOUT = @as(u32, 105);
pub const MM_CREATIVE_MIDIOUT = @as(u32, 201);
pub const MM_CREATIVE_MIDIIN = @as(u32, 202);
pub const MM_CREATIVE_FMSYNTH_MONO = @as(u32, 301);
pub const MM_CREATIVE_FMSYNTH_STEREO = @as(u32, 302);
pub const MM_CREATIVE_MIDI_AWE32 = @as(u32, 303);
pub const MM_CREATIVE_AUX_CD = @as(u32, 401);
pub const MM_CREATIVE_AUX_LINE = @as(u32, 402);
pub const MM_CREATIVE_AUX_MIC = @as(u32, 403);
pub const MM_CREATIVE_AUX_MASTER = @as(u32, 404);
pub const MM_CREATIVE_AUX_PCSPK = @as(u32, 405);
pub const MM_CREATIVE_AUX_WAVE = @as(u32, 406);
pub const MM_CREATIVE_AUX_MIDI = @as(u32, 407);
pub const MM_CREATIVE_SBPRO_MIXER = @as(u32, 408);
pub const MM_CREATIVE_SB16_MIXER = @as(u32, 409);
pub const MM_MEDIAVISION_PROAUDIO = @as(u32, 16);
pub const MM_PROAUD_MIDIOUT = @as(u32, 17);
pub const MM_PROAUD_MIDIIN = @as(u32, 18);
pub const MM_PROAUD_SYNTH = @as(u32, 19);
pub const MM_PROAUD_WAVEOUT = @as(u32, 20);
pub const MM_PROAUD_WAVEIN = @as(u32, 21);
pub const MM_PROAUD_MIXER = @as(u32, 22);
pub const MM_PROAUD_AUX = @as(u32, 23);
pub const MM_MEDIAVISION_THUNDER = @as(u32, 32);
pub const MM_THUNDER_SYNTH = @as(u32, 35);
pub const MM_THUNDER_WAVEOUT = @as(u32, 36);
pub const MM_THUNDER_WAVEIN = @as(u32, 37);
pub const MM_THUNDER_AUX = @as(u32, 39);
pub const MM_MEDIAVISION_TPORT = @as(u32, 64);
pub const MM_TPORT_WAVEOUT = @as(u32, 65);
pub const MM_TPORT_WAVEIN = @as(u32, 66);
pub const MM_TPORT_SYNTH = @as(u32, 67);
pub const MM_MEDIAVISION_PROAUDIO_PLUS = @as(u32, 80);
pub const MM_PROAUD_PLUS_MIDIOUT = @as(u32, 81);
pub const MM_PROAUD_PLUS_MIDIIN = @as(u32, 82);
pub const MM_PROAUD_PLUS_SYNTH = @as(u32, 83);
pub const MM_PROAUD_PLUS_WAVEOUT = @as(u32, 84);
pub const MM_PROAUD_PLUS_WAVEIN = @as(u32, 85);
pub const MM_PROAUD_PLUS_MIXER = @as(u32, 86);
pub const MM_PROAUD_PLUS_AUX = @as(u32, 87);
pub const MM_MEDIAVISION_PROAUDIO_16 = @as(u32, 96);
pub const MM_PROAUD_16_MIDIOUT = @as(u32, 97);
pub const MM_PROAUD_16_MIDIIN = @as(u32, 98);
pub const MM_PROAUD_16_SYNTH = @as(u32, 99);
pub const MM_PROAUD_16_WAVEOUT = @as(u32, 100);
pub const MM_PROAUD_16_WAVEIN = @as(u32, 101);
pub const MM_PROAUD_16_MIXER = @as(u32, 102);
pub const MM_PROAUD_16_AUX = @as(u32, 103);
pub const MM_MEDIAVISION_PROSTUDIO_16 = @as(u32, 96);
pub const MM_STUDIO_16_MIDIOUT = @as(u32, 97);
pub const MM_STUDIO_16_MIDIIN = @as(u32, 98);
pub const MM_STUDIO_16_SYNTH = @as(u32, 99);
pub const MM_STUDIO_16_WAVEOUT = @as(u32, 100);
pub const MM_STUDIO_16_WAVEIN = @as(u32, 101);
pub const MM_STUDIO_16_MIXER = @as(u32, 102);
pub const MM_STUDIO_16_AUX = @as(u32, 103);
pub const MM_MEDIAVISION_CDPC = @as(u32, 112);
pub const MM_CDPC_MIDIOUT = @as(u32, 113);
pub const MM_CDPC_MIDIIN = @as(u32, 114);
pub const MM_CDPC_SYNTH = @as(u32, 115);
pub const MM_CDPC_WAVEOUT = @as(u32, 116);
pub const MM_CDPC_WAVEIN = @as(u32, 117);
pub const MM_CDPC_MIXER = @as(u32, 118);
pub const MM_CDPC_AUX = @as(u32, 119);
pub const MM_MEDIAVISION_OPUS1208 = @as(u32, 128);
pub const MM_OPUS401_MIDIOUT = @as(u32, 129);
pub const MM_OPUS401_MIDIIN = @as(u32, 130);
pub const MM_OPUS1208_SYNTH = @as(u32, 131);
pub const MM_OPUS1208_WAVEOUT = @as(u32, 132);
pub const MM_OPUS1208_WAVEIN = @as(u32, 133);
pub const MM_OPUS1208_MIXER = @as(u32, 134);
pub const MM_OPUS1208_AUX = @as(u32, 135);
pub const MM_MEDIAVISION_OPUS1216 = @as(u32, 144);
pub const MM_OPUS1216_MIDIOUT = @as(u32, 145);
pub const MM_OPUS1216_MIDIIN = @as(u32, 146);
pub const MM_OPUS1216_SYNTH = @as(u32, 147);
pub const MM_OPUS1216_WAVEOUT = @as(u32, 148);
pub const MM_OPUS1216_WAVEIN = @as(u32, 149);
pub const MM_OPUS1216_MIXER = @as(u32, 150);
pub const MM_OPUS1216_AUX = @as(u32, 151);
pub const MM_CYRIX_XASYNTH = @as(u32, 1);
pub const MM_CYRIX_XAMIDIIN = @as(u32, 2);
pub const MM_CYRIX_XAMIDIOUT = @as(u32, 3);
pub const MM_CYRIX_XAWAVEIN = @as(u32, 4);
pub const MM_CYRIX_XAWAVEOUT = @as(u32, 5);
pub const MM_CYRIX_XAAUX = @as(u32, 6);
pub const MM_CYRIX_XAMIXER = @as(u32, 7);
pub const MM_PHILIPS_ACM_LPCBB = @as(u32, 1);
pub const MM_NETXL_XLVIDEO = @as(u32, 1);
pub const MM_ZYXEL_ACM_ADPCM = @as(u32, 1);
pub const MM_AARDVARK_STUDIO12_WAVEOUT = @as(u32, 1);
pub const MM_AARDVARK_STUDIO12_WAVEIN = @as(u32, 2);
pub const MM_AARDVARK_STUDIO88_WAVEOUT = @as(u32, 3);
pub const MM_AARDVARK_STUDIO88_WAVEIN = @as(u32, 4);
pub const MM_BINTEC_TAPI_WAVE = @as(u32, 1);
pub const MM_HEWLETT_PACKARD_CU_CODEC = @as(u32, 1);
pub const MM_MITEL_TALKTO_LINE_WAVEOUT = @as(u32, 100);
pub const MM_MITEL_TALKTO_LINE_WAVEIN = @as(u32, 101);
pub const MM_MITEL_TALKTO_HANDSET_WAVEOUT = @as(u32, 102);
pub const MM_MITEL_TALKTO_HANDSET_WAVEIN = @as(u32, 103);
pub const MM_MITEL_TALKTO_BRIDGED_WAVEOUT = @as(u32, 104);
pub const MM_MITEL_TALKTO_BRIDGED_WAVEIN = @as(u32, 105);
pub const MM_MITEL_MPA_HANDSET_WAVEOUT = @as(u32, 200);
pub const MM_MITEL_MPA_HANDSET_WAVEIN = @as(u32, 201);
pub const MM_MITEL_MPA_HANDSFREE_WAVEOUT = @as(u32, 202);
pub const MM_MITEL_MPA_HANDSFREE_WAVEIN = @as(u32, 203);
pub const MM_MITEL_MPA_LINE1_WAVEOUT = @as(u32, 204);
pub const MM_MITEL_MPA_LINE1_WAVEIN = @as(u32, 205);
pub const MM_MITEL_MPA_LINE2_WAVEOUT = @as(u32, 206);
pub const MM_MITEL_MPA_LINE2_WAVEIN = @as(u32, 207);
pub const MM_MITEL_MEDIAPATH_WAVEOUT = @as(u32, 300);
pub const MM_MITEL_MEDIAPATH_WAVEIN = @as(u32, 301);
pub const MM_SNI_ACM_G721 = @as(u32, 1);
pub const MM_EMU_APSSYNTH = @as(u32, 1);
pub const MM_EMU_APSMIDIIN = @as(u32, 2);
pub const MM_EMU_APSMIDIOUT = @as(u32, 3);
pub const MM_EMU_APSWAVEIN = @as(u32, 4);
pub const MM_EMU_APSWAVEOUT = @as(u32, 5);
pub const MM_ARTISOFT_SBWAVEIN = @as(u32, 1);
pub const MM_ARTISOFT_SBWAVEOUT = @as(u32, 2);
pub const MM_TBS_TROPEZ_WAVEIN = @as(u32, 37);
pub const MM_TBS_TROPEZ_WAVEOUT = @as(u32, 38);
pub const MM_TBS_TROPEZ_AUX1 = @as(u32, 39);
pub const MM_TBS_TROPEZ_AUX2 = @as(u32, 40);
pub const MM_TBS_TROPEZ_LINE = @as(u32, 41);
pub const MM_MMOTION_WAVEAUX = @as(u32, 1);
pub const MM_MMOTION_WAVEOUT = @as(u32, 2);
pub const MM_MMOTION_WAVEIN = @as(u32, 3);
pub const MM_IBM_PCMCIA_WAVEIN = @as(u32, 11);
pub const MM_IBM_PCMCIA_WAVEOUT = @as(u32, 12);
pub const MM_IBM_PCMCIA_SYNTH = @as(u32, 13);
pub const MM_IBM_PCMCIA_MIDIIN = @as(u32, 14);
pub const MM_IBM_PCMCIA_MIDIOUT = @as(u32, 15);
pub const MM_IBM_PCMCIA_AUX = @as(u32, 16);
pub const MM_IBM_THINKPAD200 = @as(u32, 17);
pub const MM_IBM_MWAVE_WAVEIN = @as(u32, 18);
pub const MM_IBM_MWAVE_WAVEOUT = @as(u32, 19);
pub const MM_IBM_MWAVE_MIXER = @as(u32, 20);
pub const MM_IBM_MWAVE_MIDIIN = @as(u32, 21);
pub const MM_IBM_MWAVE_MIDIOUT = @as(u32, 22);
pub const MM_IBM_MWAVE_AUX = @as(u32, 23);
pub const MM_IBM_WC_MIDIOUT = @as(u32, 30);
pub const MM_IBM_WC_WAVEOUT = @as(u32, 31);
pub const MM_IBM_WC_MIXEROUT = @as(u32, 33);
pub const MM_VOCALTEC_WAVEOUT = @as(u32, 1);
pub const MM_VOCALTEC_WAVEIN = @as(u32, 2);
pub const MM_ROLAND_RAP10_MIDIOUT = @as(u32, 10);
pub const MM_ROLAND_RAP10_MIDIIN = @as(u32, 11);
pub const MM_ROLAND_RAP10_SYNTH = @as(u32, 12);
pub const MM_ROLAND_RAP10_WAVEOUT = @as(u32, 13);
pub const MM_ROLAND_RAP10_WAVEIN = @as(u32, 14);
pub const MM_ROLAND_MPU401_MIDIOUT = @as(u32, 15);
pub const MM_ROLAND_MPU401_MIDIIN = @as(u32, 16);
pub const MM_ROLAND_SMPU_MIDIOUTA = @as(u32, 17);
pub const MM_ROLAND_SMPU_MIDIOUTB = @as(u32, 18);
pub const MM_ROLAND_SMPU_MIDIINA = @as(u32, 19);
pub const MM_ROLAND_SMPU_MIDIINB = @as(u32, 20);
pub const MM_ROLAND_SC7_MIDIOUT = @as(u32, 21);
pub const MM_ROLAND_SC7_MIDIIN = @as(u32, 22);
pub const MM_ROLAND_SERIAL_MIDIOUT = @as(u32, 23);
pub const MM_ROLAND_SERIAL_MIDIIN = @as(u32, 24);
pub const MM_ROLAND_SCP_MIDIOUT = @as(u32, 38);
pub const MM_ROLAND_SCP_MIDIIN = @as(u32, 39);
pub const MM_ROLAND_SCP_WAVEOUT = @as(u32, 40);
pub const MM_ROLAND_SCP_WAVEIN = @as(u32, 41);
pub const MM_ROLAND_SCP_MIXER = @as(u32, 42);
pub const MM_ROLAND_SCP_AUX = @as(u32, 48);
pub const MM_DSP_SOLUTIONS_WAVEOUT = @as(u32, 1);
pub const MM_DSP_SOLUTIONS_WAVEIN = @as(u32, 2);
pub const MM_DSP_SOLUTIONS_SYNTH = @as(u32, 3);
pub const MM_DSP_SOLUTIONS_AUX = @as(u32, 4);
pub const MM_NEC_73_86_SYNTH = @as(u32, 5);
pub const MM_NEC_73_86_WAVEOUT = @as(u32, 6);
pub const MM_NEC_73_86_WAVEIN = @as(u32, 7);
pub const MM_NEC_26_SYNTH = @as(u32, 9);
pub const MM_NEC_MPU401_MIDIOUT = @as(u32, 10);
pub const MM_NEC_MPU401_MIDIIN = @as(u32, 11);
pub const MM_NEC_JOYSTICK = @as(u32, 12);
pub const MM_WANGLABS_WAVEIN1 = @as(u32, 1);
pub const MM_WANGLABS_WAVEOUT1 = @as(u32, 2);
pub const MM_TANDY_VISWAVEIN = @as(u32, 1);
pub const MM_TANDY_VISWAVEOUT = @as(u32, 2);
pub const MM_TANDY_VISBIOSSYNTH = @as(u32, 3);
pub const MM_TANDY_SENS_MMAWAVEIN = @as(u32, 4);
pub const MM_TANDY_SENS_MMAWAVEOUT = @as(u32, 5);
pub const MM_TANDY_SENS_MMAMIDIIN = @as(u32, 6);
pub const MM_TANDY_SENS_MMAMIDIOUT = @as(u32, 7);
pub const MM_TANDY_SENS_VISWAVEOUT = @as(u32, 8);
pub const MM_TANDY_PSSJWAVEIN = @as(u32, 9);
pub const MM_TANDY_PSSJWAVEOUT = @as(u32, 10);
pub const MM_ANTEX_SX12_WAVEIN = @as(u32, 1);
pub const MM_ANTEX_SX12_WAVEOUT = @as(u32, 2);
pub const MM_ANTEX_SX15_WAVEIN = @as(u32, 3);
pub const MM_ANTEX_SX15_WAVEOUT = @as(u32, 4);
pub const MM_ANTEX_VP625_WAVEIN = @as(u32, 5);
pub const MM_ANTEX_VP625_WAVEOUT = @as(u32, 6);
pub const MM_ANTEX_AUDIOPORT22_WAVEIN = @as(u32, 7);
pub const MM_ANTEX_AUDIOPORT22_WAVEOUT = @as(u32, 8);
pub const MM_ANTEX_AUDIOPORT22_FEEDTHRU = @as(u32, 9);
pub const MM_INTELOPD_WAVEIN = @as(u32, 1);
pub const MM_INTELOPD_WAVEOUT = @as(u32, 101);
pub const MM_INTELOPD_AUX = @as(u32, 401);
pub const MM_INTEL_NSPMODEMLINEIN = @as(u32, 501);
pub const MM_INTEL_NSPMODEMLINEOUT = @as(u32, 502);
pub const MM_VAL_MICROKEY_AP_WAVEIN = @as(u32, 1);
pub const MM_VAL_MICROKEY_AP_WAVEOUT = @as(u32, 2);
pub const MM_INTERACTIVE_WAVEIN = @as(u32, 69);
pub const MM_INTERACTIVE_WAVEOUT = @as(u32, 69);
pub const MM_YAMAHA_GSS_SYNTH = @as(u32, 1);
pub const MM_YAMAHA_GSS_WAVEOUT = @as(u32, 2);
pub const MM_YAMAHA_GSS_WAVEIN = @as(u32, 3);
pub const MM_YAMAHA_GSS_MIDIOUT = @as(u32, 4);
pub const MM_YAMAHA_GSS_MIDIIN = @as(u32, 5);
pub const MM_YAMAHA_GSS_AUX = @as(u32, 6);
pub const MM_YAMAHA_SERIAL_MIDIOUT = @as(u32, 7);
pub const MM_YAMAHA_SERIAL_MIDIIN = @as(u32, 8);
pub const MM_YAMAHA_OPL3SA_WAVEOUT = @as(u32, 16);
pub const MM_YAMAHA_OPL3SA_WAVEIN = @as(u32, 17);
pub const MM_YAMAHA_OPL3SA_FMSYNTH = @as(u32, 18);
pub const MM_YAMAHA_OPL3SA_YSYNTH = @as(u32, 19);
pub const MM_YAMAHA_OPL3SA_MIDIOUT = @as(u32, 20);
pub const MM_YAMAHA_OPL3SA_MIDIIN = @as(u32, 21);
pub const MM_YAMAHA_OPL3SA_MIXER = @as(u32, 23);
pub const MM_YAMAHA_OPL3SA_JOYSTICK = @as(u32, 24);
pub const MM_YAMAHA_YMF724LEG_MIDIOUT = @as(u32, 25);
pub const MM_YAMAHA_YMF724LEG_MIDIIN = @as(u32, 26);
pub const MM_YAMAHA_YMF724_WAVEOUT = @as(u32, 27);
pub const MM_YAMAHA_YMF724_WAVEIN = @as(u32, 28);
pub const MM_YAMAHA_YMF724_MIDIOUT = @as(u32, 29);
pub const MM_YAMAHA_YMF724_AUX = @as(u32, 30);
pub const MM_YAMAHA_YMF724_MIXER = @as(u32, 31);
pub const MM_YAMAHA_YMF724LEG_FMSYNTH = @as(u32, 32);
pub const MM_YAMAHA_YMF724LEG_MIXER = @as(u32, 33);
pub const MM_YAMAHA_SXG_MIDIOUT = @as(u32, 34);
pub const MM_YAMAHA_SXG_WAVEOUT = @as(u32, 35);
pub const MM_YAMAHA_SXG_MIXER = @as(u32, 36);
pub const MM_YAMAHA_ACXG_WAVEIN = @as(u32, 37);
pub const MM_YAMAHA_ACXG_WAVEOUT = @as(u32, 38);
pub const MM_YAMAHA_ACXG_MIDIOUT = @as(u32, 39);
pub const MM_YAMAHA_ACXG_MIXER = @as(u32, 40);
pub const MM_YAMAHA_ACXG_AUX = @as(u32, 41);
pub const MM_EVEREX_CARRIER = @as(u32, 1);
pub const MM_ECHO_SYNTH = @as(u32, 1);
pub const MM_ECHO_WAVEOUT = @as(u32, 2);
pub const MM_ECHO_WAVEIN = @as(u32, 3);
pub const MM_ECHO_MIDIOUT = @as(u32, 4);
pub const MM_ECHO_MIDIIN = @as(u32, 5);
pub const MM_ECHO_AUX = @as(u32, 6);
pub const MM_SIERRA_ARIA_MIDIOUT = @as(u32, 20);
pub const MM_SIERRA_ARIA_MIDIIN = @as(u32, 21);
pub const MM_SIERRA_ARIA_SYNTH = @as(u32, 22);
pub const MM_SIERRA_ARIA_WAVEOUT = @as(u32, 23);
pub const MM_SIERRA_ARIA_WAVEIN = @as(u32, 24);
pub const MM_SIERRA_ARIA_AUX = @as(u32, 25);
pub const MM_SIERRA_ARIA_AUX2 = @as(u32, 32);
pub const MM_SIERRA_QUARTET_WAVEIN = @as(u32, 80);
pub const MM_SIERRA_QUARTET_WAVEOUT = @as(u32, 81);
pub const MM_SIERRA_QUARTET_MIDIIN = @as(u32, 82);
pub const MM_SIERRA_QUARTET_MIDIOUT = @as(u32, 83);
pub const MM_SIERRA_QUARTET_SYNTH = @as(u32, 84);
pub const MM_SIERRA_QUARTET_AUX_CD = @as(u32, 85);
pub const MM_SIERRA_QUARTET_AUX_LINE = @as(u32, 86);
pub const MM_SIERRA_QUARTET_AUX_MODEM = @as(u32, 87);
pub const MM_SIERRA_QUARTET_MIXER = @as(u32, 88);
pub const MM_CAT_WAVEOUT = @as(u32, 1);
pub const MM_DSP_GROUP_TRUESPEECH = @as(u32, 1);
pub const MM_MELABS_MIDI2GO = @as(u32, 1);
pub const MM_ESS_AMWAVEOUT = @as(u32, 1);
pub const MM_ESS_AMWAVEIN = @as(u32, 2);
pub const MM_ESS_AMAUX = @as(u32, 3);
pub const MM_ESS_AMSYNTH = @as(u32, 4);
pub const MM_ESS_AMMIDIOUT = @as(u32, 5);
pub const MM_ESS_AMMIDIIN = @as(u32, 6);
pub const MM_ESS_MIXER = @as(u32, 7);
pub const MM_ESS_AUX_CD = @as(u32, 8);
pub const MM_ESS_MPU401_MIDIOUT = @as(u32, 9);
pub const MM_ESS_MPU401_MIDIIN = @as(u32, 10);
pub const MM_ESS_ES488_WAVEOUT = @as(u32, 16);
pub const MM_ESS_ES488_WAVEIN = @as(u32, 17);
pub const MM_ESS_ES488_MIXER = @as(u32, 18);
pub const MM_ESS_ES688_WAVEOUT = @as(u32, 19);
pub const MM_ESS_ES688_WAVEIN = @as(u32, 20);
pub const MM_ESS_ES688_MIXER = @as(u32, 21);
pub const MM_ESS_ES1488_WAVEOUT = @as(u32, 22);
pub const MM_ESS_ES1488_WAVEIN = @as(u32, 23);
pub const MM_ESS_ES1488_MIXER = @as(u32, 24);
pub const MM_ESS_ES1688_WAVEOUT = @as(u32, 25);
pub const MM_ESS_ES1688_WAVEIN = @as(u32, 26);
pub const MM_ESS_ES1688_MIXER = @as(u32, 27);
pub const MM_ESS_ES1788_WAVEOUT = @as(u32, 28);
pub const MM_ESS_ES1788_WAVEIN = @as(u32, 29);
pub const MM_ESS_ES1788_MIXER = @as(u32, 30);
pub const MM_ESS_ES1888_WAVEOUT = @as(u32, 31);
pub const MM_ESS_ES1888_WAVEIN = @as(u32, 32);
pub const MM_ESS_ES1888_MIXER = @as(u32, 33);
pub const MM_ESS_ES1868_WAVEOUT = @as(u32, 34);
pub const MM_ESS_ES1868_WAVEIN = @as(u32, 35);
pub const MM_ESS_ES1868_MIXER = @as(u32, 36);
pub const MM_ESS_ES1878_WAVEOUT = @as(u32, 37);
pub const MM_ESS_ES1878_WAVEIN = @as(u32, 38);
pub const MM_ESS_ES1878_MIXER = @as(u32, 39);
pub const MM_CANOPUS_ACM_DVREX = @as(u32, 1);
pub const MM_EPS_FMSND = @as(u32, 1);
pub const MM_TRUEVISION_WAVEIN1 = @as(u32, 1);
pub const MM_TRUEVISION_WAVEOUT1 = @as(u32, 2);
pub const MM_AZTECH_MIDIOUT = @as(u32, 3);
pub const MM_AZTECH_MIDIIN = @as(u32, 4);
pub const MM_AZTECH_WAVEIN = @as(u32, 17);
pub const MM_AZTECH_WAVEOUT = @as(u32, 18);
pub const MM_AZTECH_FMSYNTH = @as(u32, 20);
pub const MM_AZTECH_MIXER = @as(u32, 21);
pub const MM_AZTECH_PRO16_WAVEIN = @as(u32, 33);
pub const MM_AZTECH_PRO16_WAVEOUT = @as(u32, 34);
pub const MM_AZTECH_PRO16_FMSYNTH = @as(u32, 38);
pub const MM_AZTECH_DSP16_WAVEIN = @as(u32, 65);
pub const MM_AZTECH_DSP16_WAVEOUT = @as(u32, 66);
pub const MM_AZTECH_DSP16_FMSYNTH = @as(u32, 68);
pub const MM_AZTECH_DSP16_WAVESYNTH = @as(u32, 70);
pub const MM_AZTECH_NOVA16_WAVEIN = @as(u32, 71);
pub const MM_AZTECH_NOVA16_WAVEOUT = @as(u32, 72);
pub const MM_AZTECH_NOVA16_MIXER = @as(u32, 73);
pub const MM_AZTECH_WASH16_WAVEIN = @as(u32, 74);
pub const MM_AZTECH_WASH16_WAVEOUT = @as(u32, 75);
pub const MM_AZTECH_WASH16_MIXER = @as(u32, 76);
pub const MM_AZTECH_AUX_CD = @as(u32, 401);
pub const MM_AZTECH_AUX_LINE = @as(u32, 402);
pub const MM_AZTECH_AUX_MIC = @as(u32, 403);
pub const MM_AZTECH_AUX = @as(u32, 404);
pub const MM_VIDEOLOGIC_MSWAVEIN = @as(u32, 1);
pub const MM_VIDEOLOGIC_MSWAVEOUT = @as(u32, 2);
pub const MM_KORG_PCIF_MIDIOUT = @as(u32, 1);
pub const MM_KORG_PCIF_MIDIIN = @as(u32, 2);
pub const MM_KORG_1212IO_MSWAVEIN = @as(u32, 3);
pub const MM_KORG_1212IO_MSWAVEOUT = @as(u32, 4);
pub const MM_APT_ACE100CD = @as(u32, 1);
pub const MM_ICS_WAVEDECK_WAVEOUT = @as(u32, 1);
pub const MM_ICS_WAVEDECK_WAVEIN = @as(u32, 2);
pub const MM_ICS_WAVEDECK_MIXER = @as(u32, 3);
pub const MM_ICS_WAVEDECK_AUX = @as(u32, 4);
pub const MM_ICS_WAVEDECK_SYNTH = @as(u32, 5);
pub const MM_ICS_WAVEDEC_SB_WAVEOUT = @as(u32, 6);
pub const MM_ICS_WAVEDEC_SB_WAVEIN = @as(u32, 7);
pub const MM_ICS_WAVEDEC_SB_FM_MIDIOUT = @as(u32, 8);
pub const MM_ICS_WAVEDEC_SB_MPU401_MIDIOUT = @as(u32, 9);
pub const MM_ICS_WAVEDEC_SB_MPU401_MIDIIN = @as(u32, 10);
pub const MM_ICS_WAVEDEC_SB_MIXER = @as(u32, 11);
pub const MM_ICS_WAVEDEC_SB_AUX = @as(u32, 12);
pub const MM_ICS_2115_LITE_MIDIOUT = @as(u32, 13);
pub const MM_ICS_2120_LITE_MIDIOUT = @as(u32, 14);
pub const MM_ITERATEDSYS_FUFCODEC = @as(u32, 1);
pub const MM_METHEUS_ZIPPER = @as(u32, 1);
pub const MM_WINNOV_CAVIAR_WAVEIN = @as(u32, 1);
pub const MM_WINNOV_CAVIAR_WAVEOUT = @as(u32, 2);
pub const MM_WINNOV_CAVIAR_VIDC = @as(u32, 3);
pub const MM_WINNOV_CAVIAR_CHAMPAGNE = @as(u32, 4);
pub const MM_WINNOV_CAVIAR_YUV8 = @as(u32, 5);
pub const MM_NCR_BA_WAVEIN = @as(u32, 1);
pub const MM_NCR_BA_WAVEOUT = @as(u32, 2);
pub const MM_NCR_BA_SYNTH = @as(u32, 3);
pub const MM_NCR_BA_AUX = @as(u32, 4);
pub const MM_NCR_BA_MIXER = @as(u32, 5);
pub const MM_AST_MODEMWAVE_WAVEIN = @as(u32, 13);
pub const MM_AST_MODEMWAVE_WAVEOUT = @as(u32, 14);
pub const MM_WILLOWPOND_FMSYNTH_STEREO = @as(u32, 20);
pub const MM_WILLOWPOND_MPU401 = @as(u32, 21);
pub const MM_WILLOWPOND_SNDPORT_WAVEIN = @as(u32, 100);
pub const MM_WILLOWPOND_SNDPORT_WAVEOUT = @as(u32, 101);
pub const MM_WILLOWPOND_SNDPORT_MIXER = @as(u32, 102);
pub const MM_WILLOWPOND_SNDPORT_AUX = @as(u32, 103);
pub const MM_WILLOWPOND_PH_WAVEIN = @as(u32, 104);
pub const MM_WILLOWPOND_PH_WAVEOUT = @as(u32, 105);
pub const MM_WILLOWPOND_PH_MIXER = @as(u32, 106);
pub const MM_WILLOWPOND_PH_AUX = @as(u32, 107);
pub const MM_WILLOPOND_SNDCOMM_WAVEIN = @as(u32, 108);
pub const MM_WILLOWPOND_SNDCOMM_WAVEOUT = @as(u32, 109);
pub const MM_WILLOWPOND_SNDCOMM_MIXER = @as(u32, 110);
pub const MM_WILLOWPOND_SNDCOMM_AUX = @as(u32, 111);
pub const MM_WILLOWPOND_GENERIC_WAVEIN = @as(u32, 112);
pub const MM_WILLOWPOND_GENERIC_WAVEOUT = @as(u32, 113);
pub const MM_WILLOWPOND_GENERIC_MIXER = @as(u32, 114);
pub const MM_WILLOWPOND_GENERIC_AUX = @as(u32, 115);
pub const MM_VITEC_VMAKER = @as(u32, 1);
pub const MM_VITEC_VMPRO = @as(u32, 2);
pub const MM_MOSCOM_VPC2400_IN = @as(u32, 1);
pub const MM_MOSCOM_VPC2400_OUT = @as(u32, 2);
pub const MM_SILICONSOFT_SC1_WAVEIN = @as(u32, 1);
pub const MM_SILICONSOFT_SC1_WAVEOUT = @as(u32, 2);
pub const MM_SILICONSOFT_SC2_WAVEIN = @as(u32, 3);
pub const MM_SILICONSOFT_SC2_WAVEOUT = @as(u32, 4);
pub const MM_SILICONSOFT_SOUNDJR2_WAVEOUT = @as(u32, 5);
pub const MM_SILICONSOFT_SOUNDJR2PR_WAVEIN = @as(u32, 6);
pub const MM_SILICONSOFT_SOUNDJR2PR_WAVEOUT = @as(u32, 7);
pub const MM_SILICONSOFT_SOUNDJR3_WAVEOUT = @as(u32, 8);
pub const MM_TTEWS_WAVEIN = @as(u32, 1);
pub const MM_TTEWS_WAVEOUT = @as(u32, 2);
pub const MM_TTEWS_MIDIIN = @as(u32, 3);
pub const MM_TTEWS_MIDIOUT = @as(u32, 4);
pub const MM_TTEWS_MIDISYNTH = @as(u32, 5);
pub const MM_TTEWS_MIDIMONITOR = @as(u32, 6);
pub const MM_TTEWS_VMIDIIN = @as(u32, 7);
pub const MM_TTEWS_VMIDIOUT = @as(u32, 8);
pub const MM_TTEWS_AUX = @as(u32, 9);
pub const MM_TTEWS_MIXER = @as(u32, 10);
pub const MM_MEDIASONIC_ACM_G723 = @as(u32, 1);
pub const MM_MEDIASONIC_ICOM = @as(u32, 2);
pub const MM_ICOM_WAVEIN = @as(u32, 3);
pub const MM_ICOM_WAVEOUT = @as(u32, 4);
pub const MM_ICOM_MIXER = @as(u32, 5);
pub const MM_ICOM_AUX = @as(u32, 6);
pub const MM_ICOM_LINE = @as(u32, 7);
pub const MM_SANYO_ACM_LD_ADPCM = @as(u32, 1);
pub const MM_AHEAD_MULTISOUND = @as(u32, 1);
pub const MM_AHEAD_SOUNDBLASTER = @as(u32, 2);
pub const MM_AHEAD_PROAUDIO = @as(u32, 3);
pub const MM_AHEAD_GENERIC = @as(u32, 4);
pub const MM_OLIVETTI_WAVEIN = @as(u32, 1);
pub const MM_OLIVETTI_WAVEOUT = @as(u32, 2);
pub const MM_OLIVETTI_MIXER = @as(u32, 3);
pub const MM_OLIVETTI_AUX = @as(u32, 4);
pub const MM_OLIVETTI_MIDIIN = @as(u32, 5);
pub const MM_OLIVETTI_MIDIOUT = @as(u32, 6);
pub const MM_OLIVETTI_SYNTH = @as(u32, 7);
pub const MM_OLIVETTI_JOYSTICK = @as(u32, 8);
pub const MM_OLIVETTI_ACM_GSM = @as(u32, 9);
pub const MM_OLIVETTI_ACM_ADPCM = @as(u32, 10);
pub const MM_OLIVETTI_ACM_CELP = @as(u32, 11);
pub const MM_OLIVETTI_ACM_SBC = @as(u32, 12);
pub const MM_OLIVETTI_ACM_OPR = @as(u32, 13);
pub const MM_IOMAGIC_TEMPO_WAVEOUT = @as(u32, 1);
pub const MM_IOMAGIC_TEMPO_WAVEIN = @as(u32, 2);
pub const MM_IOMAGIC_TEMPO_SYNTH = @as(u32, 3);
pub const MM_IOMAGIC_TEMPO_MIDIOUT = @as(u32, 4);
pub const MM_IOMAGIC_TEMPO_MXDOUT = @as(u32, 5);
pub const MM_IOMAGIC_TEMPO_AUXOUT = @as(u32, 6);
pub const MM_MATSUSHITA_WAVEIN = @as(u32, 1);
pub const MM_MATSUSHITA_WAVEOUT = @as(u32, 2);
pub const MM_MATSUSHITA_FMSYNTH_STEREO = @as(u32, 3);
pub const MM_MATSUSHITA_MIXER = @as(u32, 4);
pub const MM_MATSUSHITA_AUX = @as(u32, 5);
pub const MM_NEWMEDIA_WAVJAMMER = @as(u32, 1);
pub const MM_LYRRUS_BRIDGE_GUITAR = @as(u32, 1);
pub const MM_OPTI_M16_FMSYNTH_STEREO = @as(u32, 1);
pub const MM_OPTI_M16_MIDIIN = @as(u32, 2);
pub const MM_OPTI_M16_MIDIOUT = @as(u32, 3);
pub const MM_OPTI_M16_WAVEIN = @as(u32, 4);
pub const MM_OPTI_M16_WAVEOUT = @as(u32, 5);
pub const MM_OPTI_M16_MIXER = @as(u32, 6);
pub const MM_OPTI_M16_AUX = @as(u32, 7);
pub const MM_OPTI_P16_FMSYNTH_STEREO = @as(u32, 16);
pub const MM_OPTI_P16_MIDIIN = @as(u32, 17);
pub const MM_OPTI_P16_MIDIOUT = @as(u32, 18);
pub const MM_OPTI_P16_WAVEIN = @as(u32, 19);
pub const MM_OPTI_P16_WAVEOUT = @as(u32, 20);
pub const MM_OPTI_P16_MIXER = @as(u32, 21);
pub const MM_OPTI_P16_AUX = @as(u32, 22);
pub const MM_OPTI_M32_WAVEIN = @as(u32, 32);
pub const MM_OPTI_M32_WAVEOUT = @as(u32, 33);
pub const MM_OPTI_M32_MIDIIN = @as(u32, 34);
pub const MM_OPTI_M32_MIDIOUT = @as(u32, 35);
pub const MM_OPTI_M32_SYNTH_STEREO = @as(u32, 36);
pub const MM_OPTI_M32_MIXER = @as(u32, 37);
pub const MM_OPTI_M32_AUX = @as(u32, 38);
pub const MM_COMPAQ_BB_WAVEIN = @as(u32, 1);
pub const MM_COMPAQ_BB_WAVEOUT = @as(u32, 2);
pub const MM_COMPAQ_BB_WAVEAUX = @as(u32, 3);
pub const MM_MPTUS_SPWAVEOUT = @as(u32, 1);
pub const MM_LERNOUT_ANDHAUSPIE_LHCODECACM = @as(u32, 1);
pub const MM_DIGITAL_AV320_WAVEIN = @as(u32, 1);
pub const MM_DIGITAL_AV320_WAVEOUT = @as(u32, 2);
pub const MM_DIGITAL_ACM_G723 = @as(u32, 3);
pub const MM_DIGITAL_ICM_H263 = @as(u32, 4);
pub const MM_DIGITAL_ICM_H261 = @as(u32, 5);
pub const MM_MOTU_MTP_MIDIOUT_ALL = @as(u32, 100);
pub const MM_MOTU_MTP_MIDIIN_1 = @as(u32, 101);
pub const MM_MOTU_MTP_MIDIOUT_1 = @as(u32, 101);
pub const MM_MOTU_MTP_MIDIIN_2 = @as(u32, 102);
pub const MM_MOTU_MTP_MIDIOUT_2 = @as(u32, 102);
pub const MM_MOTU_MTP_MIDIIN_3 = @as(u32, 103);
pub const MM_MOTU_MTP_MIDIOUT_3 = @as(u32, 103);
pub const MM_MOTU_MTP_MIDIIN_4 = @as(u32, 104);
pub const MM_MOTU_MTP_MIDIOUT_4 = @as(u32, 104);
pub const MM_MOTU_MTP_MIDIIN_5 = @as(u32, 105);
pub const MM_MOTU_MTP_MIDIOUT_5 = @as(u32, 105);
pub const MM_MOTU_MTP_MIDIIN_6 = @as(u32, 106);
pub const MM_MOTU_MTP_MIDIOUT_6 = @as(u32, 106);
pub const MM_MOTU_MTP_MIDIIN_7 = @as(u32, 107);
pub const MM_MOTU_MTP_MIDIOUT_7 = @as(u32, 107);
pub const MM_MOTU_MTP_MIDIIN_8 = @as(u32, 108);
pub const MM_MOTU_MTP_MIDIOUT_8 = @as(u32, 108);
pub const MM_MOTU_MTPII_MIDIOUT_ALL = @as(u32, 200);
pub const MM_MOTU_MTPII_MIDIIN_SYNC = @as(u32, 200);
pub const MM_MOTU_MTPII_MIDIIN_1 = @as(u32, 201);
pub const MM_MOTU_MTPII_MIDIOUT_1 = @as(u32, 201);
pub const MM_MOTU_MTPII_MIDIIN_2 = @as(u32, 202);
pub const MM_MOTU_MTPII_MIDIOUT_2 = @as(u32, 202);
pub const MM_MOTU_MTPII_MIDIIN_3 = @as(u32, 203);
pub const MM_MOTU_MTPII_MIDIOUT_3 = @as(u32, 203);
pub const MM_MOTU_MTPII_MIDIIN_4 = @as(u32, 204);
pub const MM_MOTU_MTPII_MIDIOUT_4 = @as(u32, 204);
pub const MM_MOTU_MTPII_MIDIIN_5 = @as(u32, 205);
pub const MM_MOTU_MTPII_MIDIOUT_5 = @as(u32, 205);
pub const MM_MOTU_MTPII_MIDIIN_6 = @as(u32, 206);
pub const MM_MOTU_MTPII_MIDIOUT_6 = @as(u32, 206);
pub const MM_MOTU_MTPII_MIDIIN_7 = @as(u32, 207);
pub const MM_MOTU_MTPII_MIDIOUT_7 = @as(u32, 207);
pub const MM_MOTU_MTPII_MIDIIN_8 = @as(u32, 208);
pub const MM_MOTU_MTPII_MIDIOUT_8 = @as(u32, 208);
pub const MM_MOTU_MTPII_NET_MIDIIN_1 = @as(u32, 209);
pub const MM_MOTU_MTPII_NET_MIDIOUT_1 = @as(u32, 209);
pub const MM_MOTU_MTPII_NET_MIDIIN_2 = @as(u32, 210);
pub const MM_MOTU_MTPII_NET_MIDIOUT_2 = @as(u32, 210);
pub const MM_MOTU_MTPII_NET_MIDIIN_3 = @as(u32, 211);
pub const MM_MOTU_MTPII_NET_MIDIOUT_3 = @as(u32, 211);
pub const MM_MOTU_MTPII_NET_MIDIIN_4 = @as(u32, 212);
pub const MM_MOTU_MTPII_NET_MIDIOUT_4 = @as(u32, 212);
pub const MM_MOTU_MTPII_NET_MIDIIN_5 = @as(u32, 213);
pub const MM_MOTU_MTPII_NET_MIDIOUT_5 = @as(u32, 213);
pub const MM_MOTU_MTPII_NET_MIDIIN_6 = @as(u32, 214);
pub const MM_MOTU_MTPII_NET_MIDIOUT_6 = @as(u32, 214);
pub const MM_MOTU_MTPII_NET_MIDIIN_7 = @as(u32, 215);
pub const MM_MOTU_MTPII_NET_MIDIOUT_7 = @as(u32, 215);
pub const MM_MOTU_MTPII_NET_MIDIIN_8 = @as(u32, 216);
pub const MM_MOTU_MTPII_NET_MIDIOUT_8 = @as(u32, 216);
pub const MM_MOTU_MXP_MIDIIN_MIDIOUT_ALL = @as(u32, 300);
pub const MM_MOTU_MXP_MIDIIN_SYNC = @as(u32, 300);
pub const MM_MOTU_MXP_MIDIIN_MIDIIN_1 = @as(u32, 301);
pub const MM_MOTU_MXP_MIDIIN_MIDIOUT_1 = @as(u32, 301);
pub const MM_MOTU_MXP_MIDIIN_MIDIIN_2 = @as(u32, 302);
pub const MM_MOTU_MXP_MIDIIN_MIDIOUT_2 = @as(u32, 302);
pub const MM_MOTU_MXP_MIDIIN_MIDIIN_3 = @as(u32, 303);
pub const MM_MOTU_MXP_MIDIIN_MIDIOUT_3 = @as(u32, 303);
pub const MM_MOTU_MXP_MIDIIN_MIDIIN_4 = @as(u32, 304);
pub const MM_MOTU_MXP_MIDIIN_MIDIOUT_4 = @as(u32, 304);
pub const MM_MOTU_MXP_MIDIIN_MIDIIN_5 = @as(u32, 305);
pub const MM_MOTU_MXP_MIDIIN_MIDIOUT_5 = @as(u32, 305);
pub const MM_MOTU_MXP_MIDIIN_MIDIIN_6 = @as(u32, 306);
pub const MM_MOTU_MXP_MIDIIN_MIDIOUT_6 = @as(u32, 306);
pub const MM_MOTU_MXPMPU_MIDIOUT_ALL = @as(u32, 400);
pub const MM_MOTU_MXPMPU_MIDIIN_SYNC = @as(u32, 400);
pub const MM_MOTU_MXPMPU_MIDIIN_1 = @as(u32, 401);
pub const MM_MOTU_MXPMPU_MIDIOUT_1 = @as(u32, 401);
pub const MM_MOTU_MXPMPU_MIDIIN_2 = @as(u32, 402);
pub const MM_MOTU_MXPMPU_MIDIOUT_2 = @as(u32, 402);
pub const MM_MOTU_MXPMPU_MIDIIN_3 = @as(u32, 403);
pub const MM_MOTU_MXPMPU_MIDIOUT_3 = @as(u32, 403);
pub const MM_MOTU_MXPMPU_MIDIIN_4 = @as(u32, 404);
pub const MM_MOTU_MXPMPU_MIDIOUT_4 = @as(u32, 404);
pub const MM_MOTU_MXPMPU_MIDIIN_5 = @as(u32, 405);
pub const MM_MOTU_MXPMPU_MIDIOUT_5 = @as(u32, 405);
pub const MM_MOTU_MXPMPU_MIDIIN_6 = @as(u32, 406);
pub const MM_MOTU_MXPMPU_MIDIOUT_6 = @as(u32, 406);
pub const MM_MOTU_MXN_MIDIOUT_ALL = @as(u32, 500);
pub const MM_MOTU_MXN_MIDIIN_SYNC = @as(u32, 500);
pub const MM_MOTU_MXN_MIDIIN_1 = @as(u32, 501);
pub const MM_MOTU_MXN_MIDIOUT_1 = @as(u32, 501);
pub const MM_MOTU_MXN_MIDIIN_2 = @as(u32, 502);
pub const MM_MOTU_MXN_MIDIOUT_2 = @as(u32, 502);
pub const MM_MOTU_MXN_MIDIIN_3 = @as(u32, 503);
pub const MM_MOTU_MXN_MIDIOUT_3 = @as(u32, 503);
pub const MM_MOTU_MXN_MIDIIN_4 = @as(u32, 504);
pub const MM_MOTU_MXN_MIDIOUT_4 = @as(u32, 504);
pub const MM_MOTU_FLYER_MIDI_IN_SYNC = @as(u32, 600);
pub const MM_MOTU_FLYER_MIDI_IN_A = @as(u32, 601);
pub const MM_MOTU_FLYER_MIDI_OUT_A = @as(u32, 601);
pub const MM_MOTU_FLYER_MIDI_IN_B = @as(u32, 602);
pub const MM_MOTU_FLYER_MIDI_OUT_B = @as(u32, 602);
pub const MM_MOTU_PKX_MIDI_IN_SYNC = @as(u32, 700);
pub const MM_MOTU_PKX_MIDI_IN_A = @as(u32, 701);
pub const MM_MOTU_PKX_MIDI_OUT_A = @as(u32, 701);
pub const MM_MOTU_PKX_MIDI_IN_B = @as(u32, 702);
pub const MM_MOTU_PKX_MIDI_OUT_B = @as(u32, 702);
pub const MM_MOTU_DTX_MIDI_IN_SYNC = @as(u32, 800);
pub const MM_MOTU_DTX_MIDI_IN_A = @as(u32, 801);
pub const MM_MOTU_DTX_MIDI_OUT_A = @as(u32, 801);
pub const MM_MOTU_DTX_MIDI_IN_B = @as(u32, 802);
pub const MM_MOTU_DTX_MIDI_OUT_B = @as(u32, 802);
pub const MM_MOTU_MTPAV_MIDIOUT_ALL = @as(u32, 900);
pub const MM_MOTU_MTPAV_MIDIIN_SYNC = @as(u32, 900);
pub const MM_MOTU_MTPAV_MIDIIN_1 = @as(u32, 901);
pub const MM_MOTU_MTPAV_MIDIOUT_1 = @as(u32, 901);
pub const MM_MOTU_MTPAV_MIDIIN_2 = @as(u32, 902);
pub const MM_MOTU_MTPAV_MIDIOUT_2 = @as(u32, 902);
pub const MM_MOTU_MTPAV_MIDIIN_3 = @as(u32, 903);
pub const MM_MOTU_MTPAV_MIDIOUT_3 = @as(u32, 903);
pub const MM_MOTU_MTPAV_MIDIIN_4 = @as(u32, 904);
pub const MM_MOTU_MTPAV_MIDIOUT_4 = @as(u32, 904);
pub const MM_MOTU_MTPAV_MIDIIN_5 = @as(u32, 905);
pub const MM_MOTU_MTPAV_MIDIOUT_5 = @as(u32, 905);
pub const MM_MOTU_MTPAV_MIDIIN_6 = @as(u32, 906);
pub const MM_MOTU_MTPAV_MIDIOUT_6 = @as(u32, 906);
pub const MM_MOTU_MTPAV_MIDIIN_7 = @as(u32, 907);
pub const MM_MOTU_MTPAV_MIDIOUT_7 = @as(u32, 907);
pub const MM_MOTU_MTPAV_MIDIIN_8 = @as(u32, 908);
pub const MM_MOTU_MTPAV_MIDIOUT_8 = @as(u32, 908);
pub const MM_MOTU_MTPAV_NET_MIDIIN_1 = @as(u32, 909);
pub const MM_MOTU_MTPAV_NET_MIDIOUT_1 = @as(u32, 909);
pub const MM_MOTU_MTPAV_NET_MIDIIN_2 = @as(u32, 910);
pub const MM_MOTU_MTPAV_NET_MIDIOUT_2 = @as(u32, 910);
pub const MM_MOTU_MTPAV_NET_MIDIIN_3 = @as(u32, 911);
pub const MM_MOTU_MTPAV_NET_MIDIOUT_3 = @as(u32, 911);
pub const MM_MOTU_MTPAV_NET_MIDIIN_4 = @as(u32, 912);
pub const MM_MOTU_MTPAV_NET_MIDIOUT_4 = @as(u32, 912);
pub const MM_MOTU_MTPAV_NET_MIDIIN_5 = @as(u32, 913);
pub const MM_MOTU_MTPAV_NET_MIDIOUT_5 = @as(u32, 913);
pub const MM_MOTU_MTPAV_NET_MIDIIN_6 = @as(u32, 914);
pub const MM_MOTU_MTPAV_NET_MIDIOUT_6 = @as(u32, 914);
pub const MM_MOTU_MTPAV_NET_MIDIIN_7 = @as(u32, 915);
pub const MM_MOTU_MTPAV_NET_MIDIOUT_7 = @as(u32, 915);
pub const MM_MOTU_MTPAV_NET_MIDIIN_8 = @as(u32, 916);
pub const MM_MOTU_MTPAV_NET_MIDIOUT_8 = @as(u32, 916);
pub const MM_MOTU_MTPAV_MIDIIN_ADAT = @as(u32, 917);
pub const MM_MOTU_MTPAV_MIDIOUT_ADAT = @as(u32, 917);
pub const MM_MOTU_MXPXT_MIDIIN_SYNC = @as(u32, 1000);
pub const MM_MOTU_MXPXT_MIDIOUT_ALL = @as(u32, 1000);
pub const MM_MOTU_MXPXT_MIDIIN_1 = @as(u32, 1001);
pub const MM_MOTU_MXPXT_MIDIOUT_1 = @as(u32, 1001);
pub const MM_MOTU_MXPXT_MIDIOUT_2 = @as(u32, 1002);
pub const MM_MOTU_MXPXT_MIDIIN_2 = @as(u32, 1002);
pub const MM_MOTU_MXPXT_MIDIIN_3 = @as(u32, 1003);
pub const MM_MOTU_MXPXT_MIDIOUT_3 = @as(u32, 1003);
pub const MM_MOTU_MXPXT_MIDIIN_4 = @as(u32, 1004);
pub const MM_MOTU_MXPXT_MIDIOUT_4 = @as(u32, 1004);
pub const MM_MOTU_MXPXT_MIDIIN_5 = @as(u32, 1005);
pub const MM_MOTU_MXPXT_MIDIOUT_5 = @as(u32, 1005);
pub const MM_MOTU_MXPXT_MIDIOUT_6 = @as(u32, 1006);
pub const MM_MOTU_MXPXT_MIDIIN_6 = @as(u32, 1006);
pub const MM_MOTU_MXPXT_MIDIOUT_7 = @as(u32, 1007);
pub const MM_MOTU_MXPXT_MIDIIN_7 = @as(u32, 1007);
pub const MM_MOTU_MXPXT_MIDIOUT_8 = @as(u32, 1008);
pub const MM_MOTU_MXPXT_MIDIIN_8 = @as(u32, 1008);
pub const MM_WORKBIT_MIXER = @as(u32, 1);
pub const MM_WORKBIT_WAVEOUT = @as(u32, 2);
pub const MM_WORKBIT_WAVEIN = @as(u32, 3);
pub const MM_WORKBIT_MIDIIN = @as(u32, 4);
pub const MM_WORKBIT_MIDIOUT = @as(u32, 5);
pub const MM_WORKBIT_FMSYNTH = @as(u32, 6);
pub const MM_WORKBIT_AUX = @as(u32, 7);
pub const MM_WORKBIT_JOYSTICK = @as(u32, 8);
pub const MM_OSITECH_TRUMPCARD = @as(u32, 1);
pub const MM_MIRO_MOVIEPRO = @as(u32, 1);
pub const MM_MIRO_VIDEOD1 = @as(u32, 2);
pub const MM_MIRO_VIDEODC1TV = @as(u32, 3);
pub const MM_MIRO_VIDEOTD = @as(u32, 4);
pub const MM_MIRO_DC30_WAVEOUT = @as(u32, 5);
pub const MM_MIRO_DC30_WAVEIN = @as(u32, 6);
pub const MM_MIRO_DC30_MIX = @as(u32, 7);
pub const MM_ISOLUTION_PASCAL = @as(u32, 1);
pub const MM_VOICEMIXER = @as(u32, 1);
pub const ROCKWELL_WA1_WAVEIN = @as(u32, 100);
pub const ROCKWELL_WA1_WAVEOUT = @as(u32, 101);
pub const ROCKWELL_WA1_SYNTH = @as(u32, 102);
pub const ROCKWELL_WA1_MIXER = @as(u32, 103);
pub const ROCKWELL_WA1_MPU401_IN = @as(u32, 104);
pub const ROCKWELL_WA1_MPU401_OUT = @as(u32, 105);
pub const ROCKWELL_WA2_WAVEIN = @as(u32, 200);
pub const ROCKWELL_WA2_WAVEOUT = @as(u32, 201);
pub const ROCKWELL_WA2_SYNTH = @as(u32, 202);
pub const ROCKWELL_WA2_MIXER = @as(u32, 203);
pub const ROCKWELL_WA2_MPU401_IN = @as(u32, 204);
pub const ROCKWELL_WA2_MPU401_OUT = @as(u32, 205);
pub const MM_VOXWARE_CODEC = @as(u32, 1);
pub const MM_NORTEL_MPXAC_WAVEIN = @as(u32, 1);
pub const MM_NORTEL_MPXAC_WAVEOUT = @as(u32, 2);
pub const MM_ADDX_PCTV_DIGITALMIX = @as(u32, 1);
pub const MM_ADDX_PCTV_WAVEIN = @as(u32, 2);
pub const MM_ADDX_PCTV_WAVEOUT = @as(u32, 3);
pub const MM_ADDX_PCTV_MIXER = @as(u32, 4);
pub const MM_ADDX_PCTV_AUX_CD = @as(u32, 5);
pub const MM_ADDX_PCTV_AUX_LINE = @as(u32, 6);
pub const MM_WILDCAT_AUTOSCOREMIDIIN = @as(u32, 1);
pub const MM_RHETOREX_WAVEIN = @as(u32, 1);
pub const MM_RHETOREX_WAVEOUT = @as(u32, 2);
pub const MM_BTV_WAVEIN = @as(u32, 1);
pub const MM_BTV_WAVEOUT = @as(u32, 2);
pub const MM_BTV_MIDIIN = @as(u32, 3);
pub const MM_BTV_MIDIOUT = @as(u32, 4);
pub const MM_BTV_MIDISYNTH = @as(u32, 5);
pub const MM_BTV_AUX_LINE = @as(u32, 6);
pub const MM_BTV_AUX_MIC = @as(u32, 7);
pub const MM_BTV_AUX_CD = @as(u32, 8);
pub const MM_BTV_DIGITALIN = @as(u32, 9);
pub const MM_BTV_DIGITALOUT = @as(u32, 10);
pub const MM_BTV_MIDIWAVESTREAM = @as(u32, 11);
pub const MM_BTV_MIXER = @as(u32, 12);
pub const MM_ENSONIQ_SOUNDSCAPE = @as(u32, 16);
pub const MM_SOUNDSCAPE_WAVEOUT = @as(u32, 17);
pub const MM_SOUNDSCAPE_WAVEOUT_AUX = @as(u32, 18);
pub const MM_SOUNDSCAPE_WAVEIN = @as(u32, 19);
pub const MM_SOUNDSCAPE_MIDIOUT = @as(u32, 20);
pub const MM_SOUNDSCAPE_MIDIIN = @as(u32, 21);
pub const MM_SOUNDSCAPE_SYNTH = @as(u32, 22);
pub const MM_SOUNDSCAPE_MIXER = @as(u32, 23);
pub const MM_SOUNDSCAPE_AUX = @as(u32, 24);
pub const MM_NVIDIA_WAVEOUT = @as(u32, 1);
pub const MM_NVIDIA_WAVEIN = @as(u32, 2);
pub const MM_NVIDIA_MIDIOUT = @as(u32, 3);
pub const MM_NVIDIA_MIDIIN = @as(u32, 4);
pub const MM_NVIDIA_GAMEPORT = @as(u32, 5);
pub const MM_NVIDIA_MIXER = @as(u32, 6);
pub const MM_NVIDIA_AUX = @as(u32, 7);
pub const MM_OKSORI_BASE = @as(u32, 0);
pub const MM_OKSORI_OSR8_WAVEOUT = @as(u32, 1);
pub const MM_OKSORI_OSR8_WAVEIN = @as(u32, 2);
pub const MM_OKSORI_OSR16_WAVEOUT = @as(u32, 3);
pub const MM_OKSORI_OSR16_WAVEIN = @as(u32, 4);
pub const MM_OKSORI_FM_OPL4 = @as(u32, 5);
pub const MM_OKSORI_MIX_MASTER = @as(u32, 6);
pub const MM_OKSORI_MIX_WAVE = @as(u32, 7);
pub const MM_OKSORI_MIX_FM = @as(u32, 8);
pub const MM_OKSORI_MIX_LINE = @as(u32, 9);
pub const MM_OKSORI_MIX_CD = @as(u32, 10);
pub const MM_OKSORI_MIX_MIC = @as(u32, 11);
pub const MM_OKSORI_MIX_ECHO = @as(u32, 12);
pub const MM_OKSORI_MIX_AUX1 = @as(u32, 13);
pub const MM_OKSORI_MIX_LINE1 = @as(u32, 14);
pub const MM_OKSORI_EXT_MIC1 = @as(u32, 15);
pub const MM_OKSORI_EXT_MIC2 = @as(u32, 16);
pub const MM_OKSORI_MIDIOUT = @as(u32, 17);
pub const MM_OKSORI_MIDIIN = @as(u32, 18);
pub const MM_OKSORI_MPEG_CDVISION = @as(u32, 19);
pub const MM_DIACOUSTICS_DRUM_ACTION = @as(u32, 1);
pub const MM_KAY_ELEMETRICS_CSL = @as(u32, 17152);
pub const MM_KAY_ELEMETRICS_CSL_DAT = @as(u32, 17160);
pub const MM_KAY_ELEMETRICS_CSL_4CHANNEL = @as(u32, 17161);
pub const MM_CRYSTAL_CS4232_WAVEIN = @as(u32, 1);
pub const MM_CRYSTAL_CS4232_WAVEOUT = @as(u32, 2);
pub const MM_CRYSTAL_CS4232_WAVEMIXER = @as(u32, 3);
pub const MM_CRYSTAL_CS4232_WAVEAUX_AUX1 = @as(u32, 4);
pub const MM_CRYSTAL_CS4232_WAVEAUX_AUX2 = @as(u32, 5);
pub const MM_CRYSTAL_CS4232_WAVEAUX_LINE = @as(u32, 6);
pub const MM_CRYSTAL_CS4232_WAVEAUX_MONO = @as(u32, 7);
pub const MM_CRYSTAL_CS4232_WAVEAUX_MASTER = @as(u32, 8);
pub const MM_CRYSTAL_CS4232_MIDIIN = @as(u32, 9);
pub const MM_CRYSTAL_CS4232_MIDIOUT = @as(u32, 10);
pub const MM_CRYSTAL_CS4232_INPUTGAIN_AUX1 = @as(u32, 13);
pub const MM_CRYSTAL_CS4232_INPUTGAIN_LOOP = @as(u32, 14);
pub const MM_CRYSTAL_SOUND_FUSION_WAVEIN = @as(u32, 21);
pub const MM_CRYSTAL_SOUND_FUSION_WAVEOUT = @as(u32, 22);
pub const MM_CRYSTAL_SOUND_FUSION_MIXER = @as(u32, 23);
pub const MM_CRYSTAL_SOUND_FUSION_MIDIIN = @as(u32, 24);
pub const MM_CRYSTAL_SOUND_FUSION_MIDIOUT = @as(u32, 25);
pub const MM_CRYSTAL_SOUND_FUSION_JOYSTICK = @as(u32, 26);
pub const MM_QUARTERDECK_LHWAVEIN = @as(u32, 0);
pub const MM_QUARTERDECK_LHWAVEOUT = @as(u32, 1);
pub const MM_TDK_MW_MIDI_SYNTH = @as(u32, 1);
pub const MM_TDK_MW_MIDI_IN = @as(u32, 2);
pub const MM_TDK_MW_MIDI_OUT = @as(u32, 3);
pub const MM_TDK_MW_WAVE_IN = @as(u32, 4);
pub const MM_TDK_MW_WAVE_OUT = @as(u32, 5);
pub const MM_TDK_MW_AUX = @as(u32, 6);
pub const MM_TDK_MW_MIXER = @as(u32, 10);
pub const MM_TDK_MW_AUX_MASTER = @as(u32, 100);
pub const MM_TDK_MW_AUX_BASS = @as(u32, 101);
pub const MM_TDK_MW_AUX_TREBLE = @as(u32, 102);
pub const MM_TDK_MW_AUX_MIDI_VOL = @as(u32, 103);
pub const MM_TDK_MW_AUX_WAVE_VOL = @as(u32, 104);
pub const MM_TDK_MW_AUX_WAVE_RVB = @as(u32, 105);
pub const MM_TDK_MW_AUX_WAVE_CHR = @as(u32, 106);
pub const MM_TDK_MW_AUX_VOL = @as(u32, 107);
pub const MM_TDK_MW_AUX_RVB = @as(u32, 108);
pub const MM_TDK_MW_AUX_CHR = @as(u32, 109);
pub const MM_DIGITAL_AUDIO_LABS_TC = @as(u32, 1);
pub const MM_DIGITAL_AUDIO_LABS_DOC = @as(u32, 2);
pub const MM_DIGITAL_AUDIO_LABS_V8 = @as(u32, 16);
pub const MM_DIGITAL_AUDIO_LABS_CPRO = @as(u32, 17);
pub const MM_DIGITAL_AUDIO_LABS_VP = @as(u32, 18);
pub const MM_DIGITAL_AUDIO_LABS_CDLX = @as(u32, 19);
pub const MM_DIGITAL_AUDIO_LABS_CTDIF = @as(u32, 20);
pub const MM_SEERSYS_SEERSYNTH = @as(u32, 1);
pub const MM_SEERSYS_SEERWAVE = @as(u32, 2);
pub const MM_SEERSYS_SEERMIX = @as(u32, 3);
pub const MM_SEERSYS_WAVESYNTH = @as(u32, 4);
pub const MM_SEERSYS_WAVESYNTH_WG = @as(u32, 5);
pub const MM_SEERSYS_REALITY = @as(u32, 6);
pub const MM_OSPREY_1000WAVEIN = @as(u32, 1);
pub const MM_OSPREY_1000WAVEOUT = @as(u32, 2);
pub const MM_SOUNDESIGNS_WAVEIN = @as(u32, 1);
pub const MM_SOUNDESIGNS_WAVEOUT = @as(u32, 2);
pub const MM_SSP_SNDFESWAVEIN = @as(u32, 1);
pub const MM_SSP_SNDFESWAVEOUT = @as(u32, 2);
pub const MM_SSP_SNDFESMIDIIN = @as(u32, 3);
pub const MM_SSP_SNDFESMIDIOUT = @as(u32, 4);
pub const MM_SSP_SNDFESSYNTH = @as(u32, 5);
pub const MM_SSP_SNDFESMIX = @as(u32, 6);
pub const MM_SSP_SNDFESAUX = @as(u32, 7);
pub const MM_ECS_AADF_MIDI_IN = @as(u32, 10);
pub const MM_ECS_AADF_MIDI_OUT = @as(u32, 11);
pub const MM_ECS_AADF_WAVE2MIDI_IN = @as(u32, 12);
pub const MM_AMD_INTERWAVE_WAVEIN = @as(u32, 1);
pub const MM_AMD_INTERWAVE_WAVEOUT = @as(u32, 2);
pub const MM_AMD_INTERWAVE_SYNTH = @as(u32, 3);
pub const MM_AMD_INTERWAVE_MIXER1 = @as(u32, 4);
pub const MM_AMD_INTERWAVE_MIXER2 = @as(u32, 5);
pub const MM_AMD_INTERWAVE_JOYSTICK = @as(u32, 6);
pub const MM_AMD_INTERWAVE_EX_CD = @as(u32, 7);
pub const MM_AMD_INTERWAVE_MIDIIN = @as(u32, 8);
pub const MM_AMD_INTERWAVE_MIDIOUT = @as(u32, 9);
pub const MM_AMD_INTERWAVE_AUX1 = @as(u32, 10);
pub const MM_AMD_INTERWAVE_AUX2 = @as(u32, 11);
pub const MM_AMD_INTERWAVE_AUX_MIC = @as(u32, 12);
pub const MM_AMD_INTERWAVE_AUX_CD = @as(u32, 13);
pub const MM_AMD_INTERWAVE_MONO_IN = @as(u32, 14);
pub const MM_AMD_INTERWAVE_MONO_OUT = @as(u32, 15);
pub const MM_AMD_INTERWAVE_EX_TELEPHONY = @as(u32, 16);
pub const MM_AMD_INTERWAVE_WAVEOUT_BASE = @as(u32, 17);
pub const MM_AMD_INTERWAVE_WAVEOUT_TREBLE = @as(u32, 18);
pub const MM_AMD_INTERWAVE_STEREO_ENHANCED = @as(u32, 19);
pub const MM_COREDYNAMICS_DYNAMIXHR = @as(u32, 1);
pub const MM_COREDYNAMICS_DYNASONIX_SYNTH = @as(u32, 2);
pub const MM_COREDYNAMICS_DYNASONIX_MIDI_IN = @as(u32, 3);
pub const MM_COREDYNAMICS_DYNASONIX_MIDI_OUT = @as(u32, 4);
pub const MM_COREDYNAMICS_DYNASONIX_WAVE_IN = @as(u32, 5);
pub const MM_COREDYNAMICS_DYNASONIX_WAVE_OUT = @as(u32, 6);
pub const MM_COREDYNAMICS_DYNASONIX_AUDIO_IN = @as(u32, 7);
pub const MM_COREDYNAMICS_DYNASONIX_AUDIO_OUT = @as(u32, 8);
pub const MM_COREDYNAMICS_DYNAGRAFX_VGA = @as(u32, 9);
pub const MM_COREDYNAMICS_DYNAGRAFX_WAVE_IN = @as(u32, 10);
pub const MM_COREDYNAMICS_DYNAGRAFX_WAVE_OUT = @as(u32, 11);
pub const MM_CANAM_CBXWAVEOUT = @as(u32, 1);
pub const MM_CANAM_CBXWAVEIN = @as(u32, 2);
pub const MM_SOFTSOUND_CODEC = @as(u32, 1);
pub const MM_NORRIS_VOICELINK = @as(u32, 1);
pub const MM_DDD_MIDILINK_MIDIIN = @as(u32, 1);
pub const MM_DDD_MIDILINK_MIDIOUT = @as(u32, 2);
pub const MM_EUPHONICS_AUX_CD = @as(u32, 1);
pub const MM_EUPHONICS_AUX_LINE = @as(u32, 2);
pub const MM_EUPHONICS_AUX_MASTER = @as(u32, 3);
pub const MM_EUPHONICS_AUX_MIC = @as(u32, 4);
pub const MM_EUPHONICS_AUX_MIDI = @as(u32, 5);
pub const MM_EUPHONICS_AUX_WAVE = @as(u32, 6);
pub const MM_EUPHONICS_FMSYNTH_MONO = @as(u32, 7);
pub const MM_EUPHONICS_FMSYNTH_STEREO = @as(u32, 8);
pub const MM_EUPHONICS_MIDIIN = @as(u32, 9);
pub const MM_EUPHONICS_MIDIOUT = @as(u32, 10);
pub const MM_EUPHONICS_MIXER = @as(u32, 11);
pub const MM_EUPHONICS_WAVEIN = @as(u32, 12);
pub const MM_EUPHONICS_WAVEOUT = @as(u32, 13);
pub const MM_EUPHONICS_EUSYNTH = @as(u32, 14);
pub const CRYSTAL_NET_SFM_CODEC = @as(u32, 1);
pub const MM_CHROMATIC_M1 = @as(u32, 1);
pub const MM_CHROMATIC_M1_WAVEIN = @as(u32, 2);
pub const MM_CHROMATIC_M1_WAVEOUT = @as(u32, 3);
pub const MM_CHROMATIC_M1_FMSYNTH = @as(u32, 4);
pub const MM_CHROMATIC_M1_MIXER = @as(u32, 5);
pub const MM_CHROMATIC_M1_AUX = @as(u32, 6);
pub const MM_CHROMATIC_M1_AUX_CD = @as(u32, 7);
pub const MM_CHROMATIC_M1_MIDIIN = @as(u32, 8);
pub const MM_CHROMATIC_M1_MIDIOUT = @as(u32, 9);
pub const MM_CHROMATIC_M1_WTSYNTH = @as(u32, 16);
pub const MM_CHROMATIC_M1_MPEGWAVEIN = @as(u32, 17);
pub const MM_CHROMATIC_M1_MPEGWAVEOUT = @as(u32, 18);
pub const MM_CHROMATIC_M2 = @as(u32, 19);
pub const MM_CHROMATIC_M2_WAVEIN = @as(u32, 20);
pub const MM_CHROMATIC_M2_WAVEOUT = @as(u32, 21);
pub const MM_CHROMATIC_M2_FMSYNTH = @as(u32, 22);
pub const MM_CHROMATIC_M2_MIXER = @as(u32, 23);
pub const MM_CHROMATIC_M2_AUX = @as(u32, 24);
pub const MM_CHROMATIC_M2_AUX_CD = @as(u32, 25);
pub const MM_CHROMATIC_M2_MIDIIN = @as(u32, 32);
pub const MM_CHROMATIC_M2_MIDIOUT = @as(u32, 33);
pub const MM_CHROMATIC_M2_WTSYNTH = @as(u32, 34);
pub const MM_CHROMATIC_M2_MPEGWAVEIN = @as(u32, 35);
pub const MM_CHROMATIC_M2_MPEGWAVEOUT = @as(u32, 36);
pub const MM_VIENNASYS_TSP_WAVE_DRIVER = @as(u32, 1);
pub const MM_CONNECTIX_VIDEC_CODEC = @as(u32, 1);
pub const MM_GADGETLABS_WAVE44_WAVEIN = @as(u32, 1);
pub const MM_GADGETLABS_WAVE44_WAVEOUT = @as(u32, 2);
pub const MM_GADGETLABS_WAVE42_WAVEIN = @as(u32, 3);
pub const MM_GADGETLABS_WAVE42_WAVEOUT = @as(u32, 4);
pub const MM_GADGETLABS_WAVE4_MIDIIN = @as(u32, 5);
pub const MM_GADGETLABS_WAVE4_MIDIOUT = @as(u32, 6);
pub const MM_FRONTIER_WAVECENTER_MIDIIN = @as(u32, 1);
pub const MM_FRONTIER_WAVECENTER_MIDIOUT = @as(u32, 2);
pub const MM_FRONTIER_WAVECENTER_WAVEIN = @as(u32, 3);
pub const MM_FRONTIER_WAVECENTER_WAVEOUT = @as(u32, 4);
pub const MM_VIONA_QVINPCI_MIXER = @as(u32, 1);
pub const MM_VIONA_QVINPCI_WAVEIN = @as(u32, 2);
pub const MM_VIONAQVINPCI_WAVEOUT = @as(u32, 3);
pub const MM_VIONA_BUSTER_MIXER = @as(u32, 4);
pub const MM_VIONA_CINEMASTER_MIXER = @as(u32, 5);
pub const MM_VIONA_CONCERTO_MIXER = @as(u32, 6);
pub const MM_CASIO_WP150_MIDIOUT = @as(u32, 1);
pub const MM_CASIO_WP150_MIDIIN = @as(u32, 2);
pub const MM_CASIO_LSG_MIDIOUT = @as(u32, 3);
pub const MM_DIMD_PLATFORM = @as(u32, 0);
pub const MM_DIMD_DIRSOUND = @as(u32, 1);
pub const MM_DIMD_VIRTMPU = @as(u32, 2);
pub const MM_DIMD_VIRTSB = @as(u32, 3);
pub const MM_DIMD_VIRTJOY = @as(u32, 4);
pub const MM_DIMD_WAVEIN = @as(u32, 5);
pub const MM_DIMD_WAVEOUT = @as(u32, 6);
pub const MM_DIMD_MIDIIN = @as(u32, 7);
pub const MM_DIMD_MIDIOUT = @as(u32, 8);
pub const MM_DIMD_AUX_LINE = @as(u32, 9);
pub const MM_DIMD_MIXER = @as(u32, 10);
pub const MM_DIMD_WSS_WAVEIN = @as(u32, 14);
pub const MM_DIMD_WSS_WAVEOUT = @as(u32, 15);
pub const MM_DIMD_WSS_MIXER = @as(u32, 17);
pub const MM_DIMD_WSS_AUX = @as(u32, 21);
pub const MM_DIMD_WSS_SYNTH = @as(u32, 76);
pub const MM_S3_WAVEOUT = @as(u32, 1);
pub const MM_S3_WAVEIN = @as(u32, 2);
pub const MM_S3_MIDIOUT = @as(u32, 3);
pub const MM_S3_MIDIIN = @as(u32, 4);
pub const MM_S3_FMSYNTH = @as(u32, 5);
pub const MM_S3_MIXER = @as(u32, 6);
pub const MM_S3_AUX = @as(u32, 7);
pub const MM_VKC_MPU401_MIDIIN = @as(u32, 256);
pub const MM_VKC_SERIAL_MIDIIN = @as(u32, 257);
pub const MM_VKC_MPU401_MIDIOUT = @as(u32, 512);
pub const MM_VKC_SERIAL_MIDIOUT = @as(u32, 513);
pub const MM_ZEFIRO_ZA2 = @as(u32, 2);
pub const MM_FHGIIS_MPEGLAYER3_DECODE = @as(u32, 9);
pub const MM_FHGIIS_MPEGLAYER3 = @as(u32, 10);
pub const MM_FHGIIS_MPEGLAYER3_LITE = @as(u32, 10);
pub const MM_FHGIIS_MPEGLAYER3_BASIC = @as(u32, 11);
pub const MM_FHGIIS_MPEGLAYER3_ADVANCED = @as(u32, 12);
pub const MM_FHGIIS_MPEGLAYER3_PROFESSIONAL = @as(u32, 13);
pub const MM_FHGIIS_MPEGLAYER3_ADVANCEDPLUS = @as(u32, 14);
pub const MM_QUICKNET_PJWAVEIN = @as(u32, 1);
pub const MM_QUICKNET_PJWAVEOUT = @as(u32, 2);
pub const MM_SICRESOURCE_SSO3D = @as(u32, 2);
pub const MM_SICRESOURCE_SSOW3DI = @as(u32, 3);
pub const MM_NEOMAGIC_SYNTH = @as(u32, 1);
pub const MM_NEOMAGIC_WAVEOUT = @as(u32, 2);
pub const MM_NEOMAGIC_WAVEIN = @as(u32, 3);
pub const MM_NEOMAGIC_MIDIOUT = @as(u32, 4);
pub const MM_NEOMAGIC_MIDIIN = @as(u32, 5);
pub const MM_NEOMAGIC_AUX = @as(u32, 6);
pub const MM_NEOMAGIC_MW3DX_WAVEOUT = @as(u32, 10);
pub const MM_NEOMAGIC_MW3DX_WAVEIN = @as(u32, 11);
pub const MM_NEOMAGIC_MW3DX_MIDIOUT = @as(u32, 12);
pub const MM_NEOMAGIC_MW3DX_MIDIIN = @as(u32, 13);
pub const MM_NEOMAGIC_MW3DX_FMSYNTH = @as(u32, 14);
pub const MM_NEOMAGIC_MW3DX_GMSYNTH = @as(u32, 15);
pub const MM_NEOMAGIC_MW3DX_MIXER = @as(u32, 16);
pub const MM_NEOMAGIC_MW3DX_AUX = @as(u32, 17);
pub const MM_NEOMAGIC_MWAVE_WAVEOUT = @as(u32, 20);
pub const MM_NEOMAGIC_MWAVE_WAVEIN = @as(u32, 21);
pub const MM_NEOMAGIC_MWAVE_MIDIOUT = @as(u32, 22);
pub const MM_NEOMAGIC_MWAVE_MIDIIN = @as(u32, 23);
pub const MM_NEOMAGIC_MWAVE_MIXER = @as(u32, 24);
pub const MM_NEOMAGIC_MWAVE_AUX = @as(u32, 25);
pub const MM_MERGING_MPEGL3 = @as(u32, 1);
pub const MM_XIRLINK_VISIONLINK = @as(u32, 1);
pub const MM_OTI_611WAVEIN = @as(u32, 5);
pub const MM_OTI_611WAVEOUT = @as(u32, 6);
pub const MM_OTI_611MIXER = @as(u32, 7);
pub const MM_OTI_611MIDIN = @as(u32, 18);
pub const MM_OTI_611MIDIOUT = @as(u32, 19);
pub const MM_AUREAL_AU8820 = @as(u32, 16);
pub const MM_AU8820_SYNTH = @as(u32, 17);
pub const MM_AU8820_WAVEOUT = @as(u32, 18);
pub const MM_AU8820_WAVEIN = @as(u32, 19);
pub const MM_AU8820_MIXER = @as(u32, 20);
pub const MM_AU8820_AUX = @as(u32, 21);
pub const MM_AU8820_MIDIOUT = @as(u32, 22);
pub const MM_AU8820_MIDIIN = @as(u32, 23);
pub const MM_AUREAL_AU8830 = @as(u32, 32);
pub const MM_AU8830_SYNTH = @as(u32, 33);
pub const MM_AU8830_WAVEOUT = @as(u32, 34);
pub const MM_AU8830_WAVEIN = @as(u32, 35);
pub const MM_AU8830_MIXER = @as(u32, 36);
pub const MM_AU8830_AUX = @as(u32, 37);
pub const MM_AU8830_MIDIOUT = @as(u32, 38);
pub const MM_AU8830_MIDIIN = @as(u32, 39);
pub const MM_VIVO_AUDIO_CODEC = @as(u32, 1);
pub const MM_SHARP_MDC_MIDI_SYNTH = @as(u32, 1);
pub const MM_SHARP_MDC_MIDI_IN = @as(u32, 2);
pub const MM_SHARP_MDC_MIDI_OUT = @as(u32, 3);
pub const MM_SHARP_MDC_WAVE_IN = @as(u32, 4);
pub const MM_SHARP_MDC_WAVE_OUT = @as(u32, 5);
pub const MM_SHARP_MDC_AUX = @as(u32, 6);
pub const MM_SHARP_MDC_MIXER = @as(u32, 10);
pub const MM_SHARP_MDC_AUX_MASTER = @as(u32, 100);
pub const MM_SHARP_MDC_AUX_BASS = @as(u32, 101);
pub const MM_SHARP_MDC_AUX_TREBLE = @as(u32, 102);
pub const MM_SHARP_MDC_AUX_MIDI_VOL = @as(u32, 103);
pub const MM_SHARP_MDC_AUX_WAVE_VOL = @as(u32, 104);
pub const MM_SHARP_MDC_AUX_WAVE_RVB = @as(u32, 105);
pub const MM_SHARP_MDC_AUX_WAVE_CHR = @as(u32, 106);
pub const MM_SHARP_MDC_AUX_VOL = @as(u32, 107);
pub const MM_SHARP_MDC_AUX_RVB = @as(u32, 108);
pub const MM_SHARP_MDC_AUX_CHR = @as(u32, 109);
pub const MM_LUCENT_ACM_G723 = @as(u32, 0);
pub const MM_ATT_G729A = @as(u32, 1);
pub const MM_MARIAN_ARC44WAVEIN = @as(u32, 1);
pub const MM_MARIAN_ARC44WAVEOUT = @as(u32, 2);
pub const MM_MARIAN_PRODIF24WAVEIN = @as(u32, 3);
pub const MM_MARIAN_PRODIF24WAVEOUT = @as(u32, 4);
pub const MM_MARIAN_ARC88WAVEIN = @as(u32, 5);
pub const MM_MARIAN_ARC88WAVEOUT = @as(u32, 6);
pub const MM_BCB_NETBOARD_10 = @as(u32, 1);
pub const MM_BCB_TT75_10 = @as(u32, 2);
pub const MM_MOTIONPIXELS_MVI2 = @as(u32, 1);
pub const MM_QDESIGN_ACM_MPEG = @as(u32, 1);
pub const MM_QDESIGN_ACM_QDESIGN_MUSIC = @as(u32, 2);
pub const MM_NMP_CCP_WAVEIN = @as(u32, 1);
pub const MM_NMP_CCP_WAVEOUT = @as(u32, 2);
pub const MM_NMP_ACM_AMR = @as(u32, 10);
pub const MM_DF_ACM_G726 = @as(u32, 1);
pub const MM_DF_ACM_GSM610 = @as(u32, 2);
pub const MM_BERCOS_WAVEIN = @as(u32, 1);
pub const MM_BERCOS_MIXER = @as(u32, 2);
pub const MM_BERCOS_WAVEOUT = @as(u32, 3);
pub const MM_ONLIVE_MPCODEC = @as(u32, 1);
pub const MM_PHONET_PP_WAVEOUT = @as(u32, 1);
pub const MM_PHONET_PP_WAVEIN = @as(u32, 2);
pub const MM_PHONET_PP_MIXER = @as(u32, 3);
pub const MM_FTR_ENCODER_WAVEIN = @as(u32, 1);
pub const MM_FTR_ACM = @as(u32, 2);
pub const MM_ENET_T2000_LINEIN = @as(u32, 1);
pub const MM_ENET_T2000_LINEOUT = @as(u32, 2);
pub const MM_ENET_T2000_HANDSETIN = @as(u32, 3);
pub const MM_ENET_T2000_HANDSETOUT = @as(u32, 4);
pub const MM_EMAGIC_UNITOR8 = @as(u32, 1);
pub const MM_SIPROLAB_ACELPNET = @as(u32, 1);
pub const MM_DICTAPHONE_G726 = @as(u32, 1);
pub const MM_RZS_ACM_TUBGSM = @as(u32, 1);
pub const MM_EES_PCMIDI14 = @as(u32, 1);
pub const MM_EES_PCMIDI14_IN = @as(u32, 2);
pub const MM_EES_PCMIDI14_OUT1 = @as(u32, 3);
pub const MM_EES_PCMIDI14_OUT2 = @as(u32, 4);
pub const MM_EES_PCMIDI14_OUT3 = @as(u32, 5);
pub const MM_EES_PCMIDI14_OUT4 = @as(u32, 6);
pub const MM_HAFTMANN_LPTDAC2 = @as(u32, 1);
pub const MM_LUCID_PCI24WAVEIN = @as(u32, 1);
pub const MM_LUCID_PCI24WAVEOUT = @as(u32, 2);
pub const MM_HEADSPACE_HAESYNTH = @as(u32, 1);
pub const MM_HEADSPACE_HAEWAVEOUT = @as(u32, 2);
pub const MM_HEADSPACE_HAEWAVEIN = @as(u32, 3);
pub const MM_HEADSPACE_HAEMIXER = @as(u32, 4);
pub const MM_UNISYS_ACM_NAP = @as(u32, 1);
pub const MM_LUMINOSITI_SCWAVEIN = @as(u32, 1);
pub const MM_LUMINOSITI_SCWAVEOUT = @as(u32, 2);
pub const MM_LUMINOSITI_SCWAVEMIX = @as(u32, 3);
pub const MM_ACTIVEVOICE_ACM_VOXADPCM = @as(u32, 1);
pub const MM_DTS_DS = @as(u32, 1);
pub const MM_SOFTLAB_NSK_FRW_WAVEIN = @as(u32, 1);
pub const MM_SOFTLAB_NSK_FRW_WAVEOUT = @as(u32, 2);
pub const MM_SOFTLAB_NSK_FRW_MIXER = @as(u32, 3);
pub const MM_SOFTLAB_NSK_FRW_AUX = @as(u32, 4);
pub const MM_FORTEMEDIA_WAVEIN = @as(u32, 1);
pub const MM_FORTEMEDIA_WAVEOUT = @as(u32, 2);
pub const MM_FORTEMEDIA_FMSYNC = @as(u32, 3);
pub const MM_FORTEMEDIA_MIXER = @as(u32, 4);
pub const MM_FORTEMEDIA_AUX = @as(u32, 5);
pub const MM_SONORUS_STUDIO = @as(u32, 1);
pub const MM_I_LINK_VOICE_CODER = @as(u32, 1);
pub const MM_SELSIUS_SYSTEMS_RTPWAVEOUT = @as(u32, 1);
pub const MM_SELSIUS_SYSTEMS_RTPWAVEIN = @as(u32, 2);
pub const MM_ADMOS_FM_SYNTH = @as(u32, 1);
pub const MM_ADMOS_QS3AMIDIOUT = @as(u32, 2);
pub const MM_ADMOS_QS3AMIDIIN = @as(u32, 3);
pub const MM_ADMOS_QS3AWAVEOUT = @as(u32, 4);
pub const MM_ADMOS_QS3AWAVEIN = @as(u32, 5);
pub const MM_LEXICON_STUDIO_WAVE_OUT = @as(u32, 1);
pub const MM_LEXICON_STUDIO_WAVE_IN = @as(u32, 2);
pub const MM_SGI_320_WAVEIN = @as(u32, 1);
pub const MM_SGI_320_WAVEOUT = @as(u32, 2);
pub const MM_SGI_320_MIXER = @as(u32, 3);
pub const MM_SGI_540_WAVEIN = @as(u32, 4);
pub const MM_SGI_540_WAVEOUT = @as(u32, 5);
pub const MM_SGI_540_MIXER = @as(u32, 6);
pub const MM_SGI_RAD_ADATMONO1_WAVEIN = @as(u32, 7);
pub const MM_SGI_RAD_ADATMONO2_WAVEIN = @as(u32, 8);
pub const MM_SGI_RAD_ADATMONO3_WAVEIN = @as(u32, 9);
pub const MM_SGI_RAD_ADATMONO4_WAVEIN = @as(u32, 10);
pub const MM_SGI_RAD_ADATMONO5_WAVEIN = @as(u32, 11);
pub const MM_SGI_RAD_ADATMONO6_WAVEIN = @as(u32, 12);
pub const MM_SGI_RAD_ADATMONO7_WAVEIN = @as(u32, 13);
pub const MM_SGI_RAD_ADATMONO8_WAVEIN = @as(u32, 14);
pub const MM_SGI_RAD_ADATSTEREO12_WAVEIN = @as(u32, 15);
pub const MM_SGI_RAD_ADATSTEREO34_WAVEIN = @as(u32, 16);
pub const MM_SGI_RAD_ADATSTEREO56_WAVEIN = @as(u32, 17);
pub const MM_SGI_RAD_ADATSTEREO78_WAVEIN = @as(u32, 18);
pub const MM_SGI_RAD_ADAT8CHAN_WAVEIN = @as(u32, 19);
pub const MM_SGI_RAD_ADATMONO1_WAVEOUT = @as(u32, 20);
pub const MM_SGI_RAD_ADATMONO2_WAVEOUT = @as(u32, 21);
pub const MM_SGI_RAD_ADATMONO3_WAVEOUT = @as(u32, 22);
pub const MM_SGI_RAD_ADATMONO4_WAVEOUT = @as(u32, 23);
pub const MM_SGI_RAD_ADATMONO5_WAVEOUT = @as(u32, 24);
pub const MM_SGI_RAD_ADATMONO6_WAVEOUT = @as(u32, 25);
pub const MM_SGI_RAD_ADATMONO7_WAVEOUT = @as(u32, 26);
pub const MM_SGI_RAD_ADATMONO8_WAVEOUT = @as(u32, 27);
pub const MM_SGI_RAD_ADATSTEREO12_WAVEOUT = @as(u32, 28);
pub const MM_SGI_RAD_ADATSTEREO32_WAVEOUT = @as(u32, 29);
pub const MM_SGI_RAD_ADATSTEREO56_WAVEOUT = @as(u32, 30);
pub const MM_SGI_RAD_ADATSTEREO78_WAVEOUT = @as(u32, 31);
pub const MM_SGI_RAD_ADAT8CHAN_WAVEOUT = @as(u32, 32);
pub const MM_SGI_RAD_AESMONO1_WAVEIN = @as(u32, 33);
pub const MM_SGI_RAD_AESMONO2_WAVEIN = @as(u32, 34);
pub const MM_SGI_RAD_AESSTEREO_WAVEIN = @as(u32, 35);
pub const MM_SGI_RAD_AESMONO1_WAVEOUT = @as(u32, 36);
pub const MM_SGI_RAD_AESMONO2_WAVEOUT = @as(u32, 37);
pub const MM_SGI_RAD_AESSTEREO_WAVEOUT = @as(u32, 38);
pub const MM_IPI_ACM_HSX = @as(u32, 1);
pub const MM_IPI_ACM_RPELP = @as(u32, 2);
pub const MM_IPI_WF_ASSS = @as(u32, 3);
pub const MM_IPI_AT_WAVEOUT = @as(u32, 4);
pub const MM_IPI_AT_WAVEIN = @as(u32, 5);
pub const MM_IPI_AT_MIXER = @as(u32, 6);
pub const MM_ICE_WAVEOUT = @as(u32, 1);
pub const MM_ICE_WAVEIN = @as(u32, 2);
pub const MM_ICE_MTWAVEOUT = @as(u32, 3);
pub const MM_ICE_MTWAVEIN = @as(u32, 4);
pub const MM_ICE_MIDIOUT1 = @as(u32, 5);
pub const MM_ICE_MIDIIN1 = @as(u32, 6);
pub const MM_ICE_MIDIOUT2 = @as(u32, 7);
pub const MM_ICE_MIDIIN2 = @as(u32, 8);
pub const MM_ICE_SYNTH = @as(u32, 9);
pub const MM_ICE_MIXER = @as(u32, 10);
pub const MM_ICE_AUX = @as(u32, 11);
pub const MM_VQST_VQC1 = @as(u32, 1);
pub const MM_VQST_VQC2 = @as(u32, 2);
pub const MM_ETEK_KWIKMIDI_MIDIIN = @as(u32, 1);
pub const MM_ETEK_KWIKMIDI_MIDIOUT = @as(u32, 2);
pub const MM_INTERNET_SSW_MIDIOUT = @as(u32, 10);
pub const MM_INTERNET_SSW_MIDIIN = @as(u32, 11);
pub const MM_INTERNET_SSW_WAVEOUT = @as(u32, 12);
pub const MM_INTERNET_SSW_WAVEIN = @as(u32, 13);
pub const MM_SONY_ACM_SCX = @as(u32, 1);
pub const MM_UH_ACM_ADPCM = @as(u32, 1);
pub const MM_SYDEC_NV_WAVEIN = @as(u32, 1);
pub const MM_SYDEC_NV_WAVEOUT = @as(u32, 2);
pub const MM_FLEXION_X300_WAVEIN = @as(u32, 1);
pub const MM_FLEXION_X300_WAVEOUT = @as(u32, 2);
pub const MM_VIA_WAVEOUT = @as(u32, 1);
pub const MM_VIA_WAVEIN = @as(u32, 2);
pub const MM_VIA_MIXER = @as(u32, 3);
pub const MM_VIA_AUX = @as(u32, 4);
pub const MM_VIA_MPU401_MIDIOUT = @as(u32, 5);
pub const MM_VIA_MPU401_MIDIIN = @as(u32, 6);
pub const MM_VIA_SWFM_SYNTH = @as(u32, 7);
pub const MM_VIA_WDM_WAVEOUT = @as(u32, 8);
pub const MM_VIA_WDM_WAVEIN = @as(u32, 9);
pub const MM_VIA_WDM_MIXER = @as(u32, 10);
pub const MM_VIA_WDM_MPU401_MIDIOUT = @as(u32, 11);
pub const MM_VIA_WDM_MPU401_MIDIIN = @as(u32, 12);
pub const MM_MICRONAS_SC4 = @as(u32, 1);
pub const MM_MICRONAS_CLP833 = @as(u32, 2);
pub const MM_HP_WAVEOUT = @as(u32, 1);
pub const MM_HP_WAVEIN = @as(u32, 2);
pub const MM_QUICKAUDIO_MINIMIDI = @as(u32, 1);
pub const MM_QUICKAUDIO_MAXIMIDI = @as(u32, 2);
pub const MM_ICCC_UNA3_WAVEIN = @as(u32, 1);
pub const MM_ICCC_UNA3_WAVEOUT = @as(u32, 2);
pub const MM_ICCC_UNA3_AUX = @as(u32, 3);
pub const MM_ICCC_UNA3_MIXER = @as(u32, 4);
pub const MM_3COM_CB_MIXER = @as(u32, 1);
pub const MM_3COM_CB_WAVEIN = @as(u32, 2);
pub const MM_3COM_CB_WAVEOUT = @as(u32, 3);
pub const MM_MINDMAKER_GC_WAVEIN = @as(u32, 1);
pub const MM_MINDMAKER_GC_WAVEOUT = @as(u32, 2);
pub const MM_MINDMAKER_GC_MIXER = @as(u32, 3);
pub const MM_TELEKOL_WAVEOUT = @as(u32, 1);
pub const MM_TELEKOL_WAVEIN = @as(u32, 2);
pub const MM_ALGOVISION_VB80WAVEOUT = @as(u32, 1);
pub const MM_ALGOVISION_VB80WAVEIN = @as(u32, 2);
pub const MM_ALGOVISION_VB80MIXER = @as(u32, 3);
pub const MM_ALGOVISION_VB80AUX = @as(u32, 4);
pub const MM_ALGOVISION_VB80AUX2 = @as(u32, 5);
pub const WAVE_FORMAT_UNKNOWN = @as(u32, 0);
pub const WAVE_FORMAT_ADPCM = @as(u32, 2);
pub const WAVE_FORMAT_IEEE_FLOAT = @as(u32, 3);
pub const WAVE_FORMAT_VSELP = @as(u32, 4);
pub const WAVE_FORMAT_IBM_CVSD = @as(u32, 5);
pub const WAVE_FORMAT_ALAW = @as(u32, 6);
pub const WAVE_FORMAT_MULAW = @as(u32, 7);
pub const WAVE_FORMAT_DTS = @as(u32, 8);
pub const WAVE_FORMAT_DRM = @as(u32, 9);
pub const WAVE_FORMAT_WMAVOICE9 = @as(u32, 10);
pub const WAVE_FORMAT_WMAVOICE10 = @as(u32, 11);
pub const WAVE_FORMAT_OKI_ADPCM = @as(u32, 16);
pub const WAVE_FORMAT_DVI_ADPCM = @as(u32, 17);
pub const WAVE_FORMAT_IMA_ADPCM = @as(u32, 17);
pub const WAVE_FORMAT_MEDIASPACE_ADPCM = @as(u32, 18);
pub const WAVE_FORMAT_SIERRA_ADPCM = @as(u32, 19);
pub const WAVE_FORMAT_G723_ADPCM = @as(u32, 20);
pub const WAVE_FORMAT_DIGISTD = @as(u32, 21);
pub const WAVE_FORMAT_DIGIFIX = @as(u32, 22);
pub const WAVE_FORMAT_DIALOGIC_OKI_ADPCM = @as(u32, 23);
pub const WAVE_FORMAT_MEDIAVISION_ADPCM = @as(u32, 24);
pub const WAVE_FORMAT_CU_CODEC = @as(u32, 25);
pub const WAVE_FORMAT_HP_DYN_VOICE = @as(u32, 26);
pub const WAVE_FORMAT_YAMAHA_ADPCM = @as(u32, 32);
pub const WAVE_FORMAT_SONARC = @as(u32, 33);
pub const WAVE_FORMAT_DSPGROUP_TRUESPEECH = @as(u32, 34);
pub const WAVE_FORMAT_ECHOSC1 = @as(u32, 35);
pub const WAVE_FORMAT_AUDIOFILE_AF36 = @as(u32, 36);
pub const WAVE_FORMAT_APTX = @as(u32, 37);
pub const WAVE_FORMAT_AUDIOFILE_AF10 = @as(u32, 38);
pub const WAVE_FORMAT_PROSODY_1612 = @as(u32, 39);
pub const WAVE_FORMAT_LRC = @as(u32, 40);
pub const WAVE_FORMAT_DOLBY_AC2 = @as(u32, 48);
pub const WAVE_FORMAT_GSM610 = @as(u32, 49);
pub const WAVE_FORMAT_MSNAUDIO = @as(u32, 50);
pub const WAVE_FORMAT_ANTEX_ADPCME = @as(u32, 51);
pub const WAVE_FORMAT_CONTROL_RES_VQLPC = @as(u32, 52);
pub const WAVE_FORMAT_DIGIREAL = @as(u32, 53);
pub const WAVE_FORMAT_DIGIADPCM = @as(u32, 54);
pub const WAVE_FORMAT_CONTROL_RES_CR10 = @as(u32, 55);
pub const WAVE_FORMAT_NMS_VBXADPCM = @as(u32, 56);
pub const WAVE_FORMAT_CS_IMAADPCM = @as(u32, 57);
pub const WAVE_FORMAT_ECHOSC3 = @as(u32, 58);
pub const WAVE_FORMAT_ROCKWELL_ADPCM = @as(u32, 59);
pub const WAVE_FORMAT_ROCKWELL_DIGITALK = @as(u32, 60);
pub const WAVE_FORMAT_XEBEC = @as(u32, 61);
pub const WAVE_FORMAT_G721_ADPCM = @as(u32, 64);
pub const WAVE_FORMAT_G728_CELP = @as(u32, 65);
pub const WAVE_FORMAT_MSG723 = @as(u32, 66);
pub const WAVE_FORMAT_INTEL_G723_1 = @as(u32, 67);
pub const WAVE_FORMAT_INTEL_G729 = @as(u32, 68);
pub const WAVE_FORMAT_SHARP_G726 = @as(u32, 69);
pub const WAVE_FORMAT_MPEG = @as(u32, 80);
pub const WAVE_FORMAT_RT24 = @as(u32, 82);
pub const WAVE_FORMAT_PAC = @as(u32, 83);
pub const WAVE_FORMAT_MPEGLAYER3 = @as(u32, 85);
pub const WAVE_FORMAT_LUCENT_G723 = @as(u32, 89);
pub const WAVE_FORMAT_CIRRUS = @as(u32, 96);
pub const WAVE_FORMAT_ESPCM = @as(u32, 97);
pub const WAVE_FORMAT_VOXWARE = @as(u32, 98);
pub const WAVE_FORMAT_CANOPUS_ATRAC = @as(u32, 99);
pub const WAVE_FORMAT_G726_ADPCM = @as(u32, 100);
pub const WAVE_FORMAT_G722_ADPCM = @as(u32, 101);
pub const WAVE_FORMAT_DSAT = @as(u32, 102);
pub const WAVE_FORMAT_DSAT_DISPLAY = @as(u32, 103);
pub const WAVE_FORMAT_VOXWARE_BYTE_ALIGNED = @as(u32, 105);
pub const WAVE_FORMAT_VOXWARE_AC8 = @as(u32, 112);
pub const WAVE_FORMAT_VOXWARE_AC10 = @as(u32, 113);
pub const WAVE_FORMAT_VOXWARE_AC16 = @as(u32, 114);
pub const WAVE_FORMAT_VOXWARE_AC20 = @as(u32, 115);
pub const WAVE_FORMAT_VOXWARE_RT24 = @as(u32, 116);
pub const WAVE_FORMAT_VOXWARE_RT29 = @as(u32, 117);
pub const WAVE_FORMAT_VOXWARE_RT29HW = @as(u32, 118);
pub const WAVE_FORMAT_VOXWARE_VR12 = @as(u32, 119);
pub const WAVE_FORMAT_VOXWARE_VR18 = @as(u32, 120);
pub const WAVE_FORMAT_VOXWARE_TQ40 = @as(u32, 121);
pub const WAVE_FORMAT_VOXWARE_SC3 = @as(u32, 122);
pub const WAVE_FORMAT_VOXWARE_SC3_1 = @as(u32, 123);
pub const WAVE_FORMAT_SOFTSOUND = @as(u32, 128);
pub const WAVE_FORMAT_VOXWARE_TQ60 = @as(u32, 129);
pub const WAVE_FORMAT_MSRT24 = @as(u32, 130);
pub const WAVE_FORMAT_G729A = @as(u32, 131);
pub const WAVE_FORMAT_MVI_MVI2 = @as(u32, 132);
pub const WAVE_FORMAT_DF_G726 = @as(u32, 133);
pub const WAVE_FORMAT_DF_GSM610 = @as(u32, 134);
pub const WAVE_FORMAT_ISIAUDIO = @as(u32, 136);
pub const WAVE_FORMAT_ONLIVE = @as(u32, 137);
pub const WAVE_FORMAT_MULTITUDE_FT_SX20 = @as(u32, 138);
pub const WAVE_FORMAT_INFOCOM_ITS_G721_ADPCM = @as(u32, 139);
pub const WAVE_FORMAT_CONVEDIA_G729 = @as(u32, 140);
pub const WAVE_FORMAT_CONGRUENCY = @as(u32, 141);
pub const WAVE_FORMAT_SBC24 = @as(u32, 145);
pub const WAVE_FORMAT_DOLBY_AC3_SPDIF = @as(u32, 146);
pub const WAVE_FORMAT_MEDIASONIC_G723 = @as(u32, 147);
pub const WAVE_FORMAT_PROSODY_8KBPS = @as(u32, 148);
pub const WAVE_FORMAT_ZYXEL_ADPCM = @as(u32, 151);
pub const WAVE_FORMAT_PHILIPS_LPCBB = @as(u32, 152);
pub const WAVE_FORMAT_PACKED = @as(u32, 153);
pub const WAVE_FORMAT_MALDEN_PHONYTALK = @as(u32, 160);
pub const WAVE_FORMAT_RACAL_RECORDER_GSM = @as(u32, 161);
pub const WAVE_FORMAT_RACAL_RECORDER_G720_A = @as(u32, 162);
pub const WAVE_FORMAT_RACAL_RECORDER_G723_1 = @as(u32, 163);
pub const WAVE_FORMAT_RACAL_RECORDER_TETRA_ACELP = @as(u32, 164);
pub const WAVE_FORMAT_NEC_AAC = @as(u32, 176);
pub const WAVE_FORMAT_RAW_AAC1 = @as(u32, 255);
pub const WAVE_FORMAT_RHETOREX_ADPCM = @as(u32, 256);
pub const WAVE_FORMAT_IRAT = @as(u32, 257);
pub const WAVE_FORMAT_VIVO_G723 = @as(u32, 273);
pub const WAVE_FORMAT_VIVO_SIREN = @as(u32, 274);
pub const WAVE_FORMAT_PHILIPS_CELP = @as(u32, 288);
pub const WAVE_FORMAT_PHILIPS_GRUNDIG = @as(u32, 289);
pub const WAVE_FORMAT_DIGITAL_G723 = @as(u32, 291);
pub const WAVE_FORMAT_SANYO_LD_ADPCM = @as(u32, 293);
pub const WAVE_FORMAT_SIPROLAB_ACEPLNET = @as(u32, 304);
pub const WAVE_FORMAT_SIPROLAB_ACELP4800 = @as(u32, 305);
pub const WAVE_FORMAT_SIPROLAB_ACELP8V3 = @as(u32, 306);
pub const WAVE_FORMAT_SIPROLAB_G729 = @as(u32, 307);
pub const WAVE_FORMAT_SIPROLAB_G729A = @as(u32, 308);
pub const WAVE_FORMAT_SIPROLAB_KELVIN = @as(u32, 309);
pub const WAVE_FORMAT_VOICEAGE_AMR = @as(u32, 310);
pub const WAVE_FORMAT_G726ADPCM = @as(u32, 320);
pub const WAVE_FORMAT_DICTAPHONE_CELP68 = @as(u32, 321);
pub const WAVE_FORMAT_DICTAPHONE_CELP54 = @as(u32, 322);
pub const WAVE_FORMAT_QUALCOMM_PUREVOICE = @as(u32, 336);
pub const WAVE_FORMAT_QUALCOMM_HALFRATE = @as(u32, 337);
pub const WAVE_FORMAT_TUBGSM = @as(u32, 341);
pub const WAVE_FORMAT_MSAUDIO1 = @as(u32, 352);
pub const WAVE_FORMAT_WMAUDIO2 = @as(u32, 353);
pub const WAVE_FORMAT_WMAUDIO3 = @as(u32, 354);
pub const WAVE_FORMAT_WMAUDIO_LOSSLESS = @as(u32, 355);
pub const WAVE_FORMAT_WMASPDIF = @as(u32, 356);
pub const WAVE_FORMAT_UNISYS_NAP_ADPCM = @as(u32, 368);
pub const WAVE_FORMAT_UNISYS_NAP_ULAW = @as(u32, 369);
pub const WAVE_FORMAT_UNISYS_NAP_ALAW = @as(u32, 370);
pub const WAVE_FORMAT_UNISYS_NAP_16K = @as(u32, 371);
pub const WAVE_FORMAT_SYCOM_ACM_SYC008 = @as(u32, 372);
pub const WAVE_FORMAT_SYCOM_ACM_SYC701_G726L = @as(u32, 373);
pub const WAVE_FORMAT_SYCOM_ACM_SYC701_CELP54 = @as(u32, 374);
pub const WAVE_FORMAT_SYCOM_ACM_SYC701_CELP68 = @as(u32, 375);
pub const WAVE_FORMAT_KNOWLEDGE_ADVENTURE_ADPCM = @as(u32, 376);
pub const WAVE_FORMAT_FRAUNHOFER_IIS_MPEG2_AAC = @as(u32, 384);
pub const WAVE_FORMAT_DTS_DS = @as(u32, 400);
pub const WAVE_FORMAT_CREATIVE_ADPCM = @as(u32, 512);
pub const WAVE_FORMAT_CREATIVE_FASTSPEECH8 = @as(u32, 514);
pub const WAVE_FORMAT_CREATIVE_FASTSPEECH10 = @as(u32, 515);
pub const WAVE_FORMAT_UHER_ADPCM = @as(u32, 528);
pub const WAVE_FORMAT_ULEAD_DV_AUDIO = @as(u32, 533);
pub const WAVE_FORMAT_ULEAD_DV_AUDIO_1 = @as(u32, 534);
pub const WAVE_FORMAT_QUARTERDECK = @as(u32, 544);
pub const WAVE_FORMAT_ILINK_VC = @as(u32, 560);
pub const WAVE_FORMAT_RAW_SPORT = @as(u32, 576);
pub const WAVE_FORMAT_ESST_AC3 = @as(u32, 577);
pub const WAVE_FORMAT_GENERIC_PASSTHRU = @as(u32, 585);
pub const WAVE_FORMAT_IPI_HSX = @as(u32, 592);
pub const WAVE_FORMAT_IPI_RPELP = @as(u32, 593);
pub const WAVE_FORMAT_CS2 = @as(u32, 608);
pub const WAVE_FORMAT_SONY_SCX = @as(u32, 624);
pub const WAVE_FORMAT_SONY_SCY = @as(u32, 625);
pub const WAVE_FORMAT_SONY_ATRAC3 = @as(u32, 626);
pub const WAVE_FORMAT_SONY_SPC = @as(u32, 627);
pub const WAVE_FORMAT_TELUM_AUDIO = @as(u32, 640);
pub const WAVE_FORMAT_TELUM_IA_AUDIO = @as(u32, 641);
pub const WAVE_FORMAT_NORCOM_VOICE_SYSTEMS_ADPCM = @as(u32, 645);
pub const WAVE_FORMAT_FM_TOWNS_SND = @as(u32, 768);
pub const WAVE_FORMAT_MICRONAS = @as(u32, 848);
pub const WAVE_FORMAT_MICRONAS_CELP833 = @as(u32, 849);
pub const WAVE_FORMAT_BTV_DIGITAL = @as(u32, 1024);
pub const WAVE_FORMAT_INTEL_MUSIC_CODER = @as(u32, 1025);
pub const WAVE_FORMAT_INDEO_AUDIO = @as(u32, 1026);
pub const WAVE_FORMAT_QDESIGN_MUSIC = @as(u32, 1104);
pub const WAVE_FORMAT_ON2_VP7_AUDIO = @as(u32, 1280);
pub const WAVE_FORMAT_ON2_VP6_AUDIO = @as(u32, 1281);
pub const WAVE_FORMAT_VME_VMPCM = @as(u32, 1664);
pub const WAVE_FORMAT_TPC = @as(u32, 1665);
pub const WAVE_FORMAT_LIGHTWAVE_LOSSLESS = @as(u32, 2222);
pub const WAVE_FORMAT_OLIGSM = @as(u32, 4096);
pub const WAVE_FORMAT_OLIADPCM = @as(u32, 4097);
pub const WAVE_FORMAT_OLICELP = @as(u32, 4098);
pub const WAVE_FORMAT_OLISBC = @as(u32, 4099);
pub const WAVE_FORMAT_OLIOPR = @as(u32, 4100);
pub const WAVE_FORMAT_LH_CODEC = @as(u32, 4352);
pub const WAVE_FORMAT_LH_CODEC_CELP = @as(u32, 4353);
pub const WAVE_FORMAT_LH_CODEC_SBC8 = @as(u32, 4354);
pub const WAVE_FORMAT_LH_CODEC_SBC12 = @as(u32, 4355);
pub const WAVE_FORMAT_LH_CODEC_SBC16 = @as(u32, 4356);
pub const WAVE_FORMAT_NORRIS = @as(u32, 5120);
pub const WAVE_FORMAT_ISIAUDIO_2 = @as(u32, 5121);
pub const WAVE_FORMAT_SOUNDSPACE_MUSICOMPRESS = @as(u32, 5376);
pub const WAVE_FORMAT_MPEG_ADTS_AAC = @as(u32, 5632);
pub const WAVE_FORMAT_MPEG_RAW_AAC = @as(u32, 5633);
pub const WAVE_FORMAT_MPEG_LOAS = @as(u32, 5634);
pub const WAVE_FORMAT_NOKIA_MPEG_ADTS_AAC = @as(u32, 5640);
pub const WAVE_FORMAT_NOKIA_MPEG_RAW_AAC = @as(u32, 5641);
pub const WAVE_FORMAT_VODAFONE_MPEG_ADTS_AAC = @as(u32, 5642);
pub const WAVE_FORMAT_VODAFONE_MPEG_RAW_AAC = @as(u32, 5643);
pub const WAVE_FORMAT_MPEG_HEAAC = @as(u32, 5648);
pub const WAVE_FORMAT_VOXWARE_RT24_SPEECH = @as(u32, 6172);
pub const WAVE_FORMAT_SONICFOUNDRY_LOSSLESS = @as(u32, 6513);
pub const WAVE_FORMAT_INNINGS_TELECOM_ADPCM = @as(u32, 6521);
pub const WAVE_FORMAT_LUCENT_SX8300P = @as(u32, 7175);
pub const WAVE_FORMAT_LUCENT_SX5363S = @as(u32, 7180);
pub const WAVE_FORMAT_CUSEEME = @as(u32, 7939);
pub const WAVE_FORMAT_NTCSOFT_ALF2CM_ACM = @as(u32, 8132);
pub const WAVE_FORMAT_DVM = @as(u32, 8192);
pub const WAVE_FORMAT_DTS2 = @as(u32, 8193);
pub const WAVE_FORMAT_MAKEAVIS = @as(u32, 13075);
pub const WAVE_FORMAT_DIVIO_MPEG4_AAC = @as(u32, 16707);
pub const WAVE_FORMAT_NOKIA_ADAPTIVE_MULTIRATE = @as(u32, 16897);
pub const WAVE_FORMAT_DIVIO_G726 = @as(u32, 16963);
pub const WAVE_FORMAT_LEAD_SPEECH = @as(u32, 17228);
pub const WAVE_FORMAT_LEAD_VORBIS = @as(u32, 22092);
pub const WAVE_FORMAT_WAVPACK_AUDIO = @as(u32, 22358);
pub const WAVE_FORMAT_ALAC = @as(u32, 27745);
pub const WAVE_FORMAT_OGG_VORBIS_MODE_1 = @as(u32, 26447);
pub const WAVE_FORMAT_OGG_VORBIS_MODE_2 = @as(u32, 26448);
pub const WAVE_FORMAT_OGG_VORBIS_MODE_3 = @as(u32, 26449);
pub const WAVE_FORMAT_OGG_VORBIS_MODE_1_PLUS = @as(u32, 26479);
pub const WAVE_FORMAT_OGG_VORBIS_MODE_2_PLUS = @as(u32, 26480);
pub const WAVE_FORMAT_OGG_VORBIS_MODE_3_PLUS = @as(u32, 26481);
pub const WAVE_FORMAT_3COM_NBX = @as(u32, 28672);
pub const WAVE_FORMAT_OPUS = @as(u32, 28751);
pub const WAVE_FORMAT_FAAD_AAC = @as(u32, 28781);
pub const WAVE_FORMAT_AMR_NB = @as(u32, 29537);
pub const WAVE_FORMAT_AMR_WB = @as(u32, 29538);
pub const WAVE_FORMAT_AMR_WP = @as(u32, 29539);
pub const WAVE_FORMAT_GSM_AMR_CBR = @as(u32, 31265);
pub const WAVE_FORMAT_GSM_AMR_VBR_SID = @as(u32, 31266);
pub const WAVE_FORMAT_COMVERSE_INFOSYS_G723_1 = @as(u32, 41216);
pub const WAVE_FORMAT_COMVERSE_INFOSYS_AVQSBC = @as(u32, 41217);
pub const WAVE_FORMAT_COMVERSE_INFOSYS_SBC = @as(u32, 41218);
pub const WAVE_FORMAT_SYMBOL_G729_A = @as(u32, 41219);
pub const WAVE_FORMAT_VOICEAGE_AMR_WB = @as(u32, 41220);
pub const WAVE_FORMAT_INGENIENT_G726 = @as(u32, 41221);
pub const WAVE_FORMAT_MPEG4_AAC = @as(u32, 41222);
pub const WAVE_FORMAT_ENCORE_G726 = @as(u32, 41223);
pub const WAVE_FORMAT_ZOLL_ASAO = @as(u32, 41224);
pub const WAVE_FORMAT_SPEEX_VOICE = @as(u32, 41225);
pub const WAVE_FORMAT_VIANIX_MASC = @as(u32, 41226);
pub const WAVE_FORMAT_WM9_SPECTRUM_ANALYZER = @as(u32, 41227);
pub const WAVE_FORMAT_WMF_SPECTRUM_ANAYZER = @as(u32, 41228);
pub const WAVE_FORMAT_GSM_610 = @as(u32, 41229);
pub const WAVE_FORMAT_GSM_620 = @as(u32, 41230);
pub const WAVE_FORMAT_GSM_660 = @as(u32, 41231);
pub const WAVE_FORMAT_GSM_690 = @as(u32, 41232);
pub const WAVE_FORMAT_GSM_ADAPTIVE_MULTIRATE_WB = @as(u32, 41233);
pub const WAVE_FORMAT_POLYCOM_G722 = @as(u32, 41234);
pub const WAVE_FORMAT_POLYCOM_G728 = @as(u32, 41235);
pub const WAVE_FORMAT_POLYCOM_G729_A = @as(u32, 41236);
pub const WAVE_FORMAT_POLYCOM_SIREN = @as(u32, 41237);
pub const WAVE_FORMAT_GLOBAL_IP_ILBC = @as(u32, 41238);
pub const WAVE_FORMAT_RADIOTIME_TIME_SHIFT_RADIO = @as(u32, 41239);
pub const WAVE_FORMAT_NICE_ACA = @as(u32, 41240);
pub const WAVE_FORMAT_NICE_ADPCM = @as(u32, 41241);
pub const WAVE_FORMAT_VOCORD_G721 = @as(u32, 41242);
pub const WAVE_FORMAT_VOCORD_G726 = @as(u32, 41243);
pub const WAVE_FORMAT_VOCORD_G722_1 = @as(u32, 41244);
pub const WAVE_FORMAT_VOCORD_G728 = @as(u32, 41245);
pub const WAVE_FORMAT_VOCORD_G729 = @as(u32, 41246);
pub const WAVE_FORMAT_VOCORD_G729_A = @as(u32, 41247);
pub const WAVE_FORMAT_VOCORD_G723_1 = @as(u32, 41248);
pub const WAVE_FORMAT_VOCORD_LBC = @as(u32, 41249);
pub const WAVE_FORMAT_NICE_G728 = @as(u32, 41250);
pub const WAVE_FORMAT_FRACE_TELECOM_G729 = @as(u32, 41251);
pub const WAVE_FORMAT_CODIAN = @as(u32, 41252);
pub const WAVE_FORMAT_DOLBY_AC4 = @as(u32, 44096);
pub const WAVE_FORMAT_FLAC = @as(u32, 61868);
pub const WAVE_FORMAT_DEVELOPMENT = @as(u32, 65535);
pub const ACM_MPEG_LAYER1 = @as(u32, 1);
pub const ACM_MPEG_LAYER2 = @as(u32, 2);
pub const ACM_MPEG_LAYER3 = @as(u32, 4);
pub const ACM_MPEG_STEREO = @as(u32, 1);
pub const ACM_MPEG_JOINTSTEREO = @as(u32, 2);
pub const ACM_MPEG_DUALCHANNEL = @as(u32, 4);
pub const ACM_MPEG_SINGLECHANNEL = @as(u32, 8);
pub const ACM_MPEG_PRIVATEBIT = @as(u32, 1);
pub const ACM_MPEG_COPYRIGHT = @as(u32, 2);
pub const ACM_MPEG_ORIGINALHOME = @as(u32, 4);
pub const ACM_MPEG_PROTECTIONBIT = @as(u32, 8);
pub const ACM_MPEG_ID_MPEG1 = @as(u32, 16);
pub const MPEGLAYER3_WFX_EXTRA_BYTES = @as(u32, 12);
pub const MPEGLAYER3_ID_UNKNOWN = @as(u32, 0);
pub const MPEGLAYER3_ID_MPEG = @as(u32, 1);
pub const MPEGLAYER3_ID_CONSTANTFRAMESIZE = @as(u32, 2);
pub const MM_MSFT_ACM_WMAUDIO = @as(u32, 39);
pub const WMAUDIO_BITS_PER_SAMPLE = @as(u32, 16);
pub const WMAUDIO_MAX_CHANNELS = @as(u32, 2);
pub const MM_MSFT_ACM_MSAUDIO1 = @as(u32, 39);
pub const MSAUDIO1_BITS_PER_SAMPLE = @as(u32, 16);
pub const MSAUDIO1_MAX_CHANNELS = @as(u32, 2);
pub const MM_MSFT_ACM_WMAUDIO2 = @as(u32, 101);
pub const WMAUDIO2_BITS_PER_SAMPLE = @as(u32, 16);
pub const WMAUDIO2_MAX_CHANNELS = @as(u32, 2);
pub const WAVE_FILTER_UNKNOWN = @as(u32, 0);
pub const WAVE_FILTER_DEVELOPMENT = @as(u32, 65535);
pub const WAVE_FILTER_VOLUME = @as(u32, 1);
pub const WAVE_FILTER_ECHO = @as(u32, 2);
pub const JPEG_PROCESS_BASELINE = @as(u32, 0);
pub const AVIIF_CONTROLFRAME = @as(i32, 512);
pub const JIFMK_SOF0 = @as(u32, 65472);
pub const JIFMK_SOF1 = @as(u32, 65473);
pub const JIFMK_SOF2 = @as(u32, 65474);
pub const JIFMK_SOF3 = @as(u32, 65475);
pub const JIFMK_SOF5 = @as(u32, 65477);
pub const JIFMK_SOF6 = @as(u32, 65478);
pub const JIFMK_SOF7 = @as(u32, 65479);
pub const JIFMK_JPG = @as(u32, 65480);
pub const JIFMK_SOF9 = @as(u32, 65481);
pub const JIFMK_SOF10 = @as(u32, 65482);
pub const JIFMK_SOF11 = @as(u32, 65483);
pub const JIFMK_SOF13 = @as(u32, 65485);
pub const JIFMK_SOF14 = @as(u32, 65486);
pub const JIFMK_SOF15 = @as(u32, 65487);
pub const JIFMK_DHT = @as(u32, 65476);
pub const JIFMK_DAC = @as(u32, 65484);
pub const JIFMK_RST0 = @as(u32, 65488);
pub const JIFMK_RST1 = @as(u32, 65489);
pub const JIFMK_RST2 = @as(u32, 65490);
pub const JIFMK_RST3 = @as(u32, 65491);
pub const JIFMK_RST4 = @as(u32, 65492);
pub const JIFMK_RST5 = @as(u32, 65493);
pub const JIFMK_RST6 = @as(u32, 65494);
pub const JIFMK_RST7 = @as(u32, 65495);
pub const JIFMK_SOI = @as(u32, 65496);
pub const JIFMK_EOI = @as(u32, 65497);
pub const JIFMK_SOS = @as(u32, 65498);
pub const JIFMK_DQT = @as(u32, 65499);
pub const JIFMK_DNL = @as(u32, 65500);
pub const JIFMK_DRI = @as(u32, 65501);
pub const JIFMK_DHP = @as(u32, 65502);
pub const JIFMK_EXP = @as(u32, 65503);
pub const JIFMK_APP0 = @as(u32, 65504);
pub const JIFMK_APP1 = @as(u32, 65505);
pub const JIFMK_APP2 = @as(u32, 65506);
pub const JIFMK_APP3 = @as(u32, 65507);
pub const JIFMK_APP4 = @as(u32, 65508);
pub const JIFMK_APP5 = @as(u32, 65509);
pub const JIFMK_APP6 = @as(u32, 65510);
pub const JIFMK_APP7 = @as(u32, 65511);
pub const JIFMK_JPG0 = @as(u32, 65520);
pub const JIFMK_JPG1 = @as(u32, 65521);
pub const JIFMK_JPG2 = @as(u32, 65522);
pub const JIFMK_JPG3 = @as(u32, 65523);
pub const JIFMK_JPG4 = @as(u32, 65524);
pub const JIFMK_JPG5 = @as(u32, 65525);
pub const JIFMK_JPG6 = @as(u32, 65526);
pub const JIFMK_JPG7 = @as(u32, 65527);
pub const JIFMK_JPG8 = @as(u32, 65528);
pub const JIFMK_JPG9 = @as(u32, 65529);
pub const JIFMK_JPG10 = @as(u32, 65530);
pub const JIFMK_JPG11 = @as(u32, 65531);
pub const JIFMK_JPG12 = @as(u32, 65532);
pub const JIFMK_JPG13 = @as(u32, 65533);
pub const JIFMK_COM = @as(u32, 65534);
pub const JIFMK_TEM = @as(u32, 65281);
pub const JIFMK_RES = @as(u32, 65282);
pub const JIFMK_00 = @as(u32, 65280);
pub const JIFMK_FF = @as(u32, 65535);
pub const JPEG_Y = @as(u32, 1);
pub const JPEG_YCbCr = @as(u32, 2);
pub const JPEG_RGB = @as(u32, 3);
pub const MIXERCONTROL_CONTROLTYPE_SRS_MTS = @as(u32, 536936454);
pub const MIXERCONTROL_CONTROLTYPE_SRS_ONOFF = @as(u32, 536936455);
pub const MIXERCONTROL_CONTROLTYPE_SRS_SYNTHSELECT = @as(u32, 536936456);
pub const VP_COMMAND_GET = @as(u32, 1);
pub const VP_COMMAND_SET = @as(u32, 2);
pub const VP_FLAGS_TV_MODE = @as(u32, 1);
pub const VP_FLAGS_TV_STANDARD = @as(u32, 2);
pub const VP_FLAGS_FLICKER = @as(u32, 4);
pub const VP_FLAGS_OVERSCAN = @as(u32, 8);
pub const VP_FLAGS_MAX_UNSCALED = @as(u32, 16);
pub const VP_FLAGS_POSITION = @as(u32, 32);
pub const VP_FLAGS_BRIGHTNESS = @as(u32, 64);
pub const VP_FLAGS_CONTRAST = @as(u32, 128);
pub const VP_FLAGS_COPYPROTECT = @as(u32, 256);
pub const VP_MODE_WIN_GRAPHICS = @as(u32, 1);
pub const VP_MODE_TV_PLAYBACK = @as(u32, 2);
pub const VP_TV_STANDARD_NTSC_M = @as(u32, 1);
pub const VP_TV_STANDARD_NTSC_M_J = @as(u32, 2);
pub const VP_TV_STANDARD_PAL_B = @as(u32, 4);
pub const VP_TV_STANDARD_PAL_D = @as(u32, 8);
pub const VP_TV_STANDARD_PAL_H = @as(u32, 16);
pub const VP_TV_STANDARD_PAL_I = @as(u32, 32);
pub const VP_TV_STANDARD_PAL_M = @as(u32, 64);
pub const VP_TV_STANDARD_PAL_N = @as(u32, 128);
pub const VP_TV_STANDARD_SECAM_B = @as(u32, 256);
pub const VP_TV_STANDARD_SECAM_D = @as(u32, 512);
pub const VP_TV_STANDARD_SECAM_G = @as(u32, 1024);
pub const VP_TV_STANDARD_SECAM_H = @as(u32, 2048);
pub const VP_TV_STANDARD_SECAM_K = @as(u32, 4096);
pub const VP_TV_STANDARD_SECAM_K1 = @as(u32, 8192);
pub const VP_TV_STANDARD_SECAM_L = @as(u32, 16384);
pub const VP_TV_STANDARD_WIN_VGA = @as(u32, 32768);
pub const VP_TV_STANDARD_NTSC_433 = @as(u32, 65536);
pub const VP_TV_STANDARD_PAL_G = @as(u32, 131072);
pub const VP_TV_STANDARD_PAL_60 = @as(u32, 262144);
pub const VP_TV_STANDARD_SECAM_L1 = @as(u32, 524288);
pub const VP_CP_TYPE_APS_TRIGGER = @as(u32, 1);
pub const VP_CP_TYPE_MACROVISION = @as(u32, 2);
pub const VP_CP_CMD_ACTIVATE = @as(u32, 1);
pub const VP_CP_CMD_DEACTIVATE = @as(u32, 2);
pub const VP_CP_CMD_CHANGE = @as(u32, 4);
pub const ICVERSION = @as(u32, 260);
pub const BI_1632 = @as(u32, 842217009);
pub const ICERR_OK = @as(i32, 0);
pub const ICERR_DONTDRAW = @as(i32, 1);
pub const ICERR_NEWPALETTE = @as(i32, 2);
pub const ICERR_GOTOKEYFRAME = @as(i32, 3);
pub const ICERR_STOPDRAWING = @as(i32, 4);
pub const ICERR_UNSUPPORTED = @as(i32, -1);
pub const ICERR_BADFORMAT = @as(i32, -2);
pub const ICERR_MEMORY = @as(i32, -3);
pub const ICERR_INTERNAL = @as(i32, -4);
pub const ICERR_BADFLAGS = @as(i32, -5);
pub const ICERR_BADPARAM = @as(i32, -6);
pub const ICERR_BADSIZE = @as(i32, -7);
pub const ICERR_BADHANDLE = @as(i32, -8);
pub const ICERR_CANTUPDATE = @as(i32, -9);
pub const ICERR_ABORT = @as(i32, -10);
pub const ICERR_ERROR = @as(i32, -100);
pub const ICERR_BADBITDEPTH = @as(i32, -200);
pub const ICERR_BADIMAGESIZE = @as(i32, -201);
pub const ICERR_CUSTOM = @as(i32, -400);
pub const ICMODE_COMPRESS = @as(u32, 1);
pub const ICMODE_DECOMPRESS = @as(u32, 2);
pub const ICMODE_FASTDECOMPRESS = @as(u32, 3);
pub const ICMODE_QUERY = @as(u32, 4);
pub const ICMODE_FASTCOMPRESS = @as(u32, 5);
pub const ICMODE_DRAW = @as(u32, 8);
pub const ICMODE_INTERNALF_FUNCTION32 = @as(u32, 32768);
pub const ICMODE_INTERNALF_MASK = @as(u32, 32768);
pub const AVIIF_TWOCC = @as(i32, 2);
pub const ICQUALITY_LOW = @as(u32, 0);
pub const ICQUALITY_HIGH = @as(u32, 10000);
pub const ICQUALITY_DEFAULT = @as(i32, -1);
pub const ICM_USER = @as(u32, 16384);
pub const ICM_RESERVED_LOW = @as(u32, 20480);
pub const ICM_RESERVED_HIGH = @as(u32, 24576);
pub const ICM_GETSTATE = @as(u32, 20480);
pub const ICM_SETSTATE = @as(u32, 20481);
pub const ICM_GETINFO = @as(u32, 20482);
pub const ICM_CONFIGURE = @as(u32, 20490);
pub const ICM_ABOUT = @as(u32, 20491);
pub const ICM_GETERRORTEXT = @as(u32, 20492);
pub const ICM_GETFORMATNAME = @as(u32, 20500);
pub const ICM_ENUMFORMATS = @as(u32, 20501);
pub const ICM_GETDEFAULTQUALITY = @as(u32, 20510);
pub const ICM_GETQUALITY = @as(u32, 20511);
pub const ICM_SETQUALITY = @as(u32, 20512);
pub const ICM_SET = @as(u32, 20520);
pub const ICM_GET = @as(u32, 20521);
pub const ICM_COMPRESS_GET_FORMAT = @as(u32, 16388);
pub const ICM_COMPRESS_GET_SIZE = @as(u32, 16389);
pub const ICM_COMPRESS_QUERY = @as(u32, 16390);
pub const ICM_COMPRESS_BEGIN = @as(u32, 16391);
pub const ICM_COMPRESS = @as(u32, 16392);
pub const ICM_COMPRESS_END = @as(u32, 16393);
pub const ICM_DECOMPRESS_GET_FORMAT = @as(u32, 16394);
pub const ICM_DECOMPRESS_QUERY = @as(u32, 16395);
pub const ICM_DECOMPRESS_BEGIN = @as(u32, 16396);
pub const ICM_DECOMPRESS = @as(u32, 16397);
pub const ICM_DECOMPRESS_END = @as(u32, 16398);
pub const ICM_DECOMPRESS_SET_PALETTE = @as(u32, 16413);
pub const ICM_DECOMPRESS_GET_PALETTE = @as(u32, 16414);
pub const ICM_DRAW_QUERY = @as(u32, 16415);
pub const ICM_DRAW_BEGIN = @as(u32, 16399);
pub const ICM_DRAW_GET_PALETTE = @as(u32, 16400);
pub const ICM_DRAW_UPDATE = @as(u32, 16401);
pub const ICM_DRAW_START = @as(u32, 16402);
pub const ICM_DRAW_STOP = @as(u32, 16403);
pub const ICM_DRAW_BITS = @as(u32, 16404);
pub const ICM_DRAW_END = @as(u32, 16405);
pub const ICM_DRAW_GETTIME = @as(u32, 16416);
pub const ICM_DRAW = @as(u32, 16417);
pub const ICM_DRAW_WINDOW = @as(u32, 16418);
pub const ICM_DRAW_SETTIME = @as(u32, 16419);
pub const ICM_DRAW_REALIZE = @as(u32, 16420);
pub const ICM_DRAW_FLUSH = @as(u32, 16421);
pub const ICM_DRAW_RENDERBUFFER = @as(u32, 16422);
pub const ICM_DRAW_START_PLAY = @as(u32, 16423);
pub const ICM_DRAW_STOP_PLAY = @as(u32, 16424);
pub const ICM_DRAW_SUGGESTFORMAT = @as(u32, 16434);
pub const ICM_DRAW_CHANGEPALETTE = @as(u32, 16435);
pub const ICM_DRAW_IDLE = @as(u32, 16436);
pub const ICM_GETBUFFERSWANTED = @as(u32, 16425);
pub const ICM_GETDEFAULTKEYFRAMERATE = @as(u32, 16426);
pub const ICM_DECOMPRESSEX_BEGIN = @as(u32, 16444);
pub const ICM_DECOMPRESSEX_QUERY = @as(u32, 16445);
pub const ICM_DECOMPRESSEX = @as(u32, 16446);
pub const ICM_DECOMPRESSEX_END = @as(u32, 16447);
pub const ICM_COMPRESS_FRAMES_INFO = @as(u32, 16454);
pub const ICM_COMPRESS_FRAMES = @as(u32, 16455);
pub const ICM_SET_STATUS_PROC = @as(u32, 16456);
pub const VIDCF_QUALITY = @as(u32, 1);
pub const VIDCF_CRUNCH = @as(u32, 2);
pub const VIDCF_TEMPORAL = @as(u32, 4);
pub const VIDCF_COMPRESSFRAMES = @as(u32, 8);
pub const VIDCF_DRAW = @as(u32, 16);
pub const VIDCF_FASTTEMPORALC = @as(u32, 32);
pub const VIDCF_FASTTEMPORALD = @as(u32, 128);
pub const ICCOMPRESS_KEYFRAME = @as(i32, 1);
pub const ICCOMPRESSFRAMES_PADDING = @as(u32, 1);
pub const ICSTATUS_START = @as(u32, 0);
pub const ICSTATUS_STATUS = @as(u32, 1);
pub const ICSTATUS_END = @as(u32, 2);
pub const ICSTATUS_ERROR = @as(u32, 3);
pub const ICSTATUS_YIELD = @as(u32, 4);
pub const ICDECOMPRESS_HURRYUP = @as(i32, -2147483648);
pub const ICDECOMPRESS_UPDATE = @as(i32, 1073741824);
pub const ICDECOMPRESS_PREROLL = @as(i32, 536870912);
pub const ICDECOMPRESS_NULLFRAME = @as(i32, 268435456);
pub const ICDECOMPRESS_NOTKEYFRAME = @as(i32, 134217728);
pub const ICDRAW_QUERY = @as(i32, 1);
pub const ICDRAW_FULLSCREEN = @as(i32, 2);
pub const ICDRAW_HDC = @as(i32, 4);
pub const ICDRAW_ANIMATE = @as(i32, 8);
pub const ICDRAW_CONTINUE = @as(i32, 16);
pub const ICDRAW_MEMORYDC = @as(i32, 32);
pub const ICDRAW_UPDATING = @as(i32, 64);
pub const ICDRAW_RENDER = @as(i32, 128);
pub const ICDRAW_BUFFER = @as(i32, 256);
pub const ICDRAW_HURRYUP = @as(i32, -2147483648);
pub const ICDRAW_UPDATE = @as(i32, 1073741824);
pub const ICDRAW_PREROLL = @as(i32, 536870912);
pub const ICDRAW_NULLFRAME = @as(i32, 268435456);
pub const ICDRAW_NOTKEYFRAME = @as(i32, 134217728);
pub const ICINSTALL_UNICODE = @as(u32, 32768);
pub const ICINSTALL_FUNCTION = @as(u32, 1);
pub const ICINSTALL_DRIVER = @as(u32, 2);
pub const ICINSTALL_HDRV = @as(u32, 4);
pub const ICINSTALL_DRIVERW = @as(u32, 32770);
pub const ICMF_CONFIGURE_QUERY = @as(u32, 1);
pub const ICMF_ABOUT_QUERY = @as(u32, 1);
pub const ICMF_COMPVARS_VALID = @as(u32, 1);
pub const ICMF_CHOOSE_KEYFRAME = @as(u32, 1);
pub const ICMF_CHOOSE_DATARATE = @as(u32, 2);
pub const ICMF_CHOOSE_PREVIEW = @as(u32, 4);
pub const ICMF_CHOOSE_ALLCOMPRESSORS = @as(u32, 8);
pub const DDF_0001 = @as(u32, 1);
pub const DDF_UPDATE = @as(u32, 2);
pub const DDF_SAME_HDC = @as(u32, 4);
pub const DDF_SAME_DRAW = @as(u32, 8);
pub const DDF_DONTDRAW = @as(u32, 16);
pub const DDF_ANIMATE = @as(u32, 32);
pub const DDF_BUFFER = @as(u32, 64);
pub const DDF_JUSTDRAWIT = @as(u32, 128);
pub const DDF_FULLSCREEN = @as(u32, 256);
pub const DDF_BACKGROUNDPAL = @as(u32, 512);
pub const DDF_NOTKEYFRAME = @as(u32, 1024);
pub const DDF_HURRYUP = @as(u32, 2048);
pub const DDF_HALFTONE = @as(u32, 4096);
pub const DDF_2000 = @as(u32, 8192);
pub const DDF_PREROLL = @as(u32, 16);
pub const DDF_SAME_DIB = @as(u32, 8);
pub const DDF_SAME_SIZE = @as(u32, 8);
pub const PD_CAN_DRAW_DIB = @as(u32, 1);
pub const PD_CAN_STRETCHDIB = @as(u32, 2);
pub const PD_STRETCHDIB_1_1_OK = @as(u32, 4);
pub const PD_STRETCHDIB_1_2_OK = @as(u32, 8);
pub const PD_STRETCHDIB_1_N_OK = @as(u32, 16);
pub const AVIGETFRAMEF_BESTDISPLAYFMT = @as(u32, 1);
pub const AVISTREAMINFO_DISABLED = @as(u32, 1);
pub const AVISTREAMINFO_FORMATCHANGES = @as(u32, 65536);
pub const AVIFILEINFO_HASINDEX = @as(u32, 16);
pub const AVIFILEINFO_MUSTUSEINDEX = @as(u32, 32);
pub const AVIFILEINFO_ISINTERLEAVED = @as(u32, 256);
pub const AVIFILEINFO_WASCAPTUREFILE = @as(u32, 65536);
pub const AVIFILEINFO_COPYRIGHTED = @as(u32, 131072);
pub const AVIFILECAPS_CANREAD = @as(u32, 1);
pub const AVIFILECAPS_CANWRITE = @as(u32, 2);
pub const AVIFILECAPS_ALLKEYFRAMES = @as(u32, 16);
pub const AVIFILECAPS_NOCOMPRESSION = @as(u32, 32);
pub const AVICOMPRESSF_INTERLEAVE = @as(u32, 1);
pub const AVICOMPRESSF_DATARATE = @as(u32, 2);
pub const AVICOMPRESSF_KEYFRAMES = @as(u32, 4);
pub const AVICOMPRESSF_VALID = @as(u32, 8);
pub const CLSID_AVISimpleUnMarshal = Guid.initString("00020009-0000-0000-c000-000000000046");
pub const CLSID_AVIFile = Guid.initString("00020000-0000-0000-c000-000000000046");
pub const AVIFILEHANDLER_CANREAD = @as(u32, 1);
pub const AVIFILEHANDLER_CANWRITE = @as(u32, 2);
pub const AVIFILEHANDLER_CANACCEPTNONRGB = @as(u32, 4);
pub const AVISTREAMREAD_CONVENIENT = @as(i32, -1);
pub const FIND_DIR = @as(i32, 15);
pub const FIND_NEXT = @as(i32, 1);
pub const FIND_PREV = @as(i32, 4);
pub const FIND_FROM_START = @as(i32, 8);
pub const FIND_TYPE = @as(i32, 240);
pub const FIND_KEY = @as(i32, 16);
pub const FIND_ANY = @as(i32, 32);
pub const FIND_FORMAT = @as(i32, 64);
pub const FIND_RET = @as(i32, 61440);
pub const FIND_POS = @as(i32, 0);
pub const FIND_LENGTH = @as(i32, 4096);
pub const FIND_OFFSET = @as(i32, 8192);
pub const FIND_SIZE = @as(i32, 12288);
pub const FIND_INDEX = @as(i32, 16384);
pub const SEARCH_NEAREST = @as(i32, 4);
pub const SEARCH_BACKWARD = @as(i32, 4);
pub const SEARCH_FORWARD = @as(i32, 1);
pub const SEARCH_KEY = @as(i32, 16);
pub const SEARCH_ANY = @as(i32, 32);
pub const AVIERR_OK = @as(i32, 0);
pub const MCIWND_WINDOW_CLASS = "MCIWndClass";
pub const MCIWNDOPENF_NEW = @as(u32, 1);
pub const MCIWNDF_NOAUTOSIZEWINDOW = @as(u32, 1);
pub const MCIWNDF_NOPLAYBAR = @as(u32, 2);
pub const MCIWNDF_NOAUTOSIZEMOVIE = @as(u32, 4);
pub const MCIWNDF_NOMENU = @as(u32, 8);
pub const MCIWNDF_SHOWNAME = @as(u32, 16);
pub const MCIWNDF_SHOWPOS = @as(u32, 32);
pub const MCIWNDF_SHOWMODE = @as(u32, 64);
pub const MCIWNDF_SHOWALL = @as(u32, 112);
pub const MCIWNDF_NOTIFYMODE = @as(u32, 256);
pub const MCIWNDF_NOTIFYPOS = @as(u32, 512);
pub const MCIWNDF_NOTIFYSIZE = @as(u32, 1024);
pub const MCIWNDF_NOTIFYERROR = @as(u32, 4096);
pub const MCIWNDF_NOTIFYALL = @as(u32, 7936);
pub const MCIWNDF_NOTIFYANSI = @as(u32, 128);
pub const MCIWNDF_NOTIFYMEDIAA = @as(u32, 2176);
pub const MCIWNDF_NOTIFYMEDIAW = @as(u32, 2048);
pub const MCIWNDF_NOTIFYMEDIA = @as(u32, 2048);
pub const MCIWNDF_RECORD = @as(u32, 8192);
pub const MCIWNDF_NOERRORDLG = @as(u32, 16384);
pub const MCIWNDF_NOOPEN = @as(u32, 32768);
pub const MCIWNDM_GETDEVICEID = @as(u32, 1124);
pub const MCIWNDM_GETSTART = @as(u32, 1127);
pub const MCIWNDM_GETLENGTH = @as(u32, 1128);
pub const MCIWNDM_GETEND = @as(u32, 1129);
pub const MCIWNDM_EJECT = @as(u32, 1131);
pub const MCIWNDM_SETZOOM = @as(u32, 1132);
pub const MCIWNDM_GETZOOM = @as(u32, 1133);
pub const MCIWNDM_SETVOLUME = @as(u32, 1134);
pub const MCIWNDM_GETVOLUME = @as(u32, 1135);
pub const MCIWNDM_SETSPEED = @as(u32, 1136);
pub const MCIWNDM_GETSPEED = @as(u32, 1137);
pub const MCIWNDM_SETREPEAT = @as(u32, 1138);
pub const MCIWNDM_GETREPEAT = @as(u32, 1139);
pub const MCIWNDM_REALIZE = @as(u32, 1142);
pub const MCIWNDM_VALIDATEMEDIA = @as(u32, 1145);
pub const MCIWNDM_PLAYFROM = @as(u32, 1146);
pub const MCIWNDM_PLAYTO = @as(u32, 1147);
pub const MCIWNDM_GETPALETTE = @as(u32, 1150);
pub const MCIWNDM_SETPALETTE = @as(u32, 1151);
pub const MCIWNDM_SETTIMERS = @as(u32, 1153);
pub const MCIWNDM_SETACTIVETIMER = @as(u32, 1154);
pub const MCIWNDM_SETINACTIVETIMER = @as(u32, 1155);
pub const MCIWNDM_GETACTIVETIMER = @as(u32, 1156);
pub const MCIWNDM_GETINACTIVETIMER = @as(u32, 1157);
pub const MCIWNDM_CHANGESTYLES = @as(u32, 1159);
pub const MCIWNDM_GETSTYLES = @as(u32, 1160);
pub const MCIWNDM_GETALIAS = @as(u32, 1161);
pub const MCIWNDM_PLAYREVERSE = @as(u32, 1163);
pub const MCIWNDM_GET_SOURCE = @as(u32, 1164);
pub const MCIWNDM_PUT_SOURCE = @as(u32, 1165);
pub const MCIWNDM_GET_DEST = @as(u32, 1166);
pub const MCIWNDM_PUT_DEST = @as(u32, 1167);
pub const MCIWNDM_CAN_PLAY = @as(u32, 1168);
pub const MCIWNDM_CAN_WINDOW = @as(u32, 1169);
pub const MCIWNDM_CAN_RECORD = @as(u32, 1170);
pub const MCIWNDM_CAN_SAVE = @as(u32, 1171);
pub const MCIWNDM_CAN_EJECT = @as(u32, 1172);
pub const MCIWNDM_CAN_CONFIG = @as(u32, 1173);
pub const MCIWNDM_PALETTEKICK = @as(u32, 1174);
pub const MCIWNDM_OPENINTERFACE = @as(u32, 1175);
pub const MCIWNDM_SETOWNER = @as(u32, 1176);
pub const MCIWNDM_SENDSTRINGA = @as(u32, 1125);
pub const MCIWNDM_GETPOSITIONA = @as(u32, 1126);
pub const MCIWNDM_GETMODEA = @as(u32, 1130);
pub const MCIWNDM_SETTIMEFORMATA = @as(u32, 1143);
pub const MCIWNDM_GETTIMEFORMATA = @as(u32, 1144);
pub const MCIWNDM_GETFILENAMEA = @as(u32, 1148);
pub const MCIWNDM_GETDEVICEA = @as(u32, 1149);
pub const MCIWNDM_GETERRORA = @as(u32, 1152);
pub const MCIWNDM_NEWA = @as(u32, 1158);
pub const MCIWNDM_RETURNSTRINGA = @as(u32, 1162);
pub const MCIWNDM_OPENA = @as(u32, 1177);
pub const MCIWNDM_SENDSTRINGW = @as(u32, 1225);
pub const MCIWNDM_GETPOSITIONW = @as(u32, 1226);
pub const MCIWNDM_GETMODEW = @as(u32, 1230);
pub const MCIWNDM_SETTIMEFORMATW = @as(u32, 1243);
pub const MCIWNDM_GETTIMEFORMATW = @as(u32, 1244);
pub const MCIWNDM_GETFILENAMEW = @as(u32, 1248);
pub const MCIWNDM_GETDEVICEW = @as(u32, 1249);
pub const MCIWNDM_GETERRORW = @as(u32, 1252);
pub const MCIWNDM_NEWW = @as(u32, 1258);
pub const MCIWNDM_RETURNSTRINGW = @as(u32, 1262);
pub const MCIWNDM_OPENW = @as(u32, 1276);
pub const MCIWNDM_SENDSTRING = @as(u32, 1225);
pub const MCIWNDM_GETPOSITION = @as(u32, 1226);
pub const MCIWNDM_GETMODE = @as(u32, 1230);
pub const MCIWNDM_SETTIMEFORMAT = @as(u32, 1243);
pub const MCIWNDM_GETTIMEFORMAT = @as(u32, 1244);
pub const MCIWNDM_GETFILENAME = @as(u32, 1248);
pub const MCIWNDM_GETDEVICE = @as(u32, 1249);
pub const MCIWNDM_GETERROR = @as(u32, 1252);
pub const MCIWNDM_NEW = @as(u32, 1258);
pub const MCIWNDM_RETURNSTRING = @as(u32, 1262);
pub const MCIWNDM_OPEN = @as(u32, 1276);
pub const MCIWNDM_NOTIFYMODE = @as(u32, 1224);
pub const MCIWNDM_NOTIFYPOS = @as(u32, 1225);
pub const MCIWNDM_NOTIFYSIZE = @as(u32, 1226);
pub const MCIWNDM_NOTIFYMEDIA = @as(u32, 1227);
pub const MCIWNDM_NOTIFYERROR = @as(u32, 1229);
pub const MCIWND_START = @as(i32, -1);
pub const MCIWND_END = @as(i32, -2);
pub const MCI_OPEN = @as(u32, 2051);
pub const MCI_CLOSE = @as(u32, 2052);
pub const MCI_PLAY = @as(u32, 2054);
pub const MCI_SEEK = @as(u32, 2055);
pub const MCI_STOP = @as(u32, 2056);
pub const MCI_PAUSE = @as(u32, 2057);
pub const MCI_STEP = @as(u32, 2062);
pub const MCI_RECORD = @as(u32, 2063);
pub const MCI_SAVE = @as(u32, 2067);
pub const MCI_CUT = @as(u32, 2129);
pub const MCI_COPY = @as(u32, 2130);
pub const MCI_PASTE = @as(u32, 2131);
pub const MCI_RESUME = @as(u32, 2133);
pub const MCI_DELETE = @as(u32, 2134);
pub const MCI_MODE_NOT_READY = @as(u32, 524);
pub const MCI_MODE_STOP = @as(u32, 525);
pub const MCI_MODE_PLAY = @as(u32, 526);
pub const MCI_MODE_RECORD = @as(u32, 527);
pub const MCI_MODE_SEEK = @as(u32, 528);
pub const MCI_MODE_PAUSE = @as(u32, 529);
pub const MCI_MODE_OPEN = @as(u32, 530);
pub const DV_ERR_OK = @as(u32, 0);
pub const DV_ERR_BASE = @as(u32, 1);
pub const DV_ERR_NONSPECIFIC = @as(u32, 1);
pub const DV_ERR_BADFORMAT = @as(u32, 2);
pub const DV_ERR_STILLPLAYING = @as(u32, 3);
pub const DV_ERR_UNPREPARED = @as(u32, 4);
pub const DV_ERR_SYNC = @as(u32, 5);
pub const DV_ERR_TOOMANYCHANNELS = @as(u32, 6);
pub const DV_ERR_NOTDETECTED = @as(u32, 7);
pub const DV_ERR_BADINSTALL = @as(u32, 8);
pub const DV_ERR_CREATEPALETTE = @as(u32, 9);
pub const DV_ERR_SIZEFIELD = @as(u32, 10);
pub const DV_ERR_PARAM1 = @as(u32, 11);
pub const DV_ERR_PARAM2 = @as(u32, 12);
pub const DV_ERR_CONFIG1 = @as(u32, 13);
pub const DV_ERR_CONFIG2 = @as(u32, 14);
pub const DV_ERR_FLAGS = @as(u32, 15);
pub const DV_ERR_13 = @as(u32, 16);
pub const DV_ERR_NOTSUPPORTED = @as(u32, 17);
pub const DV_ERR_NOMEM = @as(u32, 18);
pub const DV_ERR_ALLOCATED = @as(u32, 19);
pub const DV_ERR_BADDEVICEID = @as(u32, 20);
pub const DV_ERR_INVALHANDLE = @as(u32, 21);
pub const DV_ERR_BADERRNUM = @as(u32, 22);
pub const DV_ERR_NO_BUFFERS = @as(u32, 23);
pub const DV_ERR_MEM_CONFLICT = @as(u32, 24);
pub const DV_ERR_IO_CONFLICT = @as(u32, 25);
pub const DV_ERR_DMA_CONFLICT = @as(u32, 26);
pub const DV_ERR_INT_CONFLICT = @as(u32, 27);
pub const DV_ERR_PROTECT_ONLY = @as(u32, 28);
pub const DV_ERR_LASTERROR = @as(u32, 28);
pub const DV_ERR_USER_MSG = @as(u32, 1001);
pub const DV_VM_OPEN = @as(u32, 976);
pub const DV_VM_CLOSE = @as(u32, 977);
pub const DV_VM_DATA = @as(u32, 978);
pub const DV_VM_ERROR = @as(u32, 979);
pub const VHDR_DONE = @as(u32, 1);
pub const VHDR_PREPARED = @as(u32, 2);
pub const VHDR_INQUEUE = @as(u32, 4);
pub const VHDR_KEYFRAME = @as(u32, 8);
pub const VHDR_VALID = @as(u32, 15);
pub const VCAPS_OVERLAY = @as(u32, 1);
pub const VCAPS_SRC_CAN_CLIP = @as(u32, 2);
pub const VCAPS_DST_CAN_CLIP = @as(u32, 4);
pub const VCAPS_CAN_SCALE = @as(u32, 8);
pub const VIDEO_EXTERNALIN = @as(u32, 1);
pub const VIDEO_EXTERNALOUT = @as(u32, 2);
pub const VIDEO_IN = @as(u32, 4);
pub const VIDEO_OUT = @as(u32, 8);
pub const VIDEO_DLG_QUERY = @as(u32, 16);
pub const VIDEO_CONFIGURE_QUERY = @as(u32, 32768);
pub const VIDEO_CONFIGURE_SET = @as(u32, 4096);
pub const VIDEO_CONFIGURE_GET = @as(u32, 8192);
pub const VIDEO_CONFIGURE_QUERYSIZE = @as(u32, 1);
pub const VIDEO_CONFIGURE_CURRENT = @as(u32, 16);
pub const VIDEO_CONFIGURE_NOMINAL = @as(u32, 32);
pub const VIDEO_CONFIGURE_MIN = @as(u32, 64);
pub const VIDEO_CONFIGURE_MAX = @as(u32, 128);
pub const DVM_USER = @as(u32, 16384);
pub const DVM_CONFIGURE_START = @as(u32, 4096);
pub const DVM_CONFIGURE_END = @as(u32, 8191);
pub const DVM_PALETTE = @as(u32, 4097);
pub const DVM_FORMAT = @as(u32, 4098);
pub const DVM_PALETTERGB555 = @as(u32, 4099);
pub const DVM_SRC_RECT = @as(u32, 4100);
pub const DVM_DST_RECT = @as(u32, 4101);
pub const WM_CAP_UNICODE_START = @as(u32, 1124);
pub const WM_CAP_GET_CAPSTREAMPTR = @as(u32, 1025);
pub const WM_CAP_SET_CALLBACK_ERRORW = @as(u32, 1126);
pub const WM_CAP_SET_CALLBACK_STATUSW = @as(u32, 1127);
pub const WM_CAP_SET_CALLBACK_ERRORA = @as(u32, 1026);
pub const WM_CAP_SET_CALLBACK_STATUSA = @as(u32, 1027);
pub const WM_CAP_SET_CALLBACK_ERROR = @as(u32, 1126);
pub const WM_CAP_SET_CALLBACK_STATUS = @as(u32, 1127);
pub const WM_CAP_SET_CALLBACK_YIELD = @as(u32, 1028);
pub const WM_CAP_SET_CALLBACK_FRAME = @as(u32, 1029);
pub const WM_CAP_SET_CALLBACK_VIDEOSTREAM = @as(u32, 1030);
pub const WM_CAP_SET_CALLBACK_WAVESTREAM = @as(u32, 1031);
pub const WM_CAP_GET_USER_DATA = @as(u32, 1032);
pub const WM_CAP_SET_USER_DATA = @as(u32, 1033);
pub const WM_CAP_DRIVER_CONNECT = @as(u32, 1034);
pub const WM_CAP_DRIVER_DISCONNECT = @as(u32, 1035);
pub const WM_CAP_DRIVER_GET_NAMEA = @as(u32, 1036);
pub const WM_CAP_DRIVER_GET_VERSIONA = @as(u32, 1037);
pub const WM_CAP_DRIVER_GET_NAMEW = @as(u32, 1136);
pub const WM_CAP_DRIVER_GET_VERSIONW = @as(u32, 1137);
pub const WM_CAP_DRIVER_GET_NAME = @as(u32, 1136);
pub const WM_CAP_DRIVER_GET_VERSION = @as(u32, 1137);
pub const WM_CAP_DRIVER_GET_CAPS = @as(u32, 1038);
pub const WM_CAP_FILE_SET_CAPTURE_FILEA = @as(u32, 1044);
pub const WM_CAP_FILE_GET_CAPTURE_FILEA = @as(u32, 1045);
pub const WM_CAP_FILE_SAVEASA = @as(u32, 1047);
pub const WM_CAP_FILE_SAVEDIBA = @as(u32, 1049);
pub const WM_CAP_FILE_SET_CAPTURE_FILEW = @as(u32, 1144);
pub const WM_CAP_FILE_GET_CAPTURE_FILEW = @as(u32, 1145);
pub const WM_CAP_FILE_SAVEASW = @as(u32, 1147);
pub const WM_CAP_FILE_SAVEDIBW = @as(u32, 1149);
pub const WM_CAP_FILE_SET_CAPTURE_FILE = @as(u32, 1144);
pub const WM_CAP_FILE_GET_CAPTURE_FILE = @as(u32, 1145);
pub const WM_CAP_FILE_SAVEAS = @as(u32, 1147);
pub const WM_CAP_FILE_SAVEDIB = @as(u32, 1149);
pub const WM_CAP_FILE_ALLOCATE = @as(u32, 1046);
pub const WM_CAP_FILE_SET_INFOCHUNK = @as(u32, 1048);
pub const WM_CAP_EDIT_COPY = @as(u32, 1054);
pub const WM_CAP_SET_AUDIOFORMAT = @as(u32, 1059);
pub const WM_CAP_GET_AUDIOFORMAT = @as(u32, 1060);
pub const WM_CAP_DLG_VIDEOFORMAT = @as(u32, 1065);
pub const WM_CAP_DLG_VIDEOSOURCE = @as(u32, 1066);
pub const WM_CAP_DLG_VIDEODISPLAY = @as(u32, 1067);
pub const WM_CAP_GET_VIDEOFORMAT = @as(u32, 1068);
pub const WM_CAP_SET_VIDEOFORMAT = @as(u32, 1069);
pub const WM_CAP_DLG_VIDEOCOMPRESSION = @as(u32, 1070);
pub const WM_CAP_SET_PREVIEW = @as(u32, 1074);
pub const WM_CAP_SET_OVERLAY = @as(u32, 1075);
pub const WM_CAP_SET_PREVIEWRATE = @as(u32, 1076);
pub const WM_CAP_SET_SCALE = @as(u32, 1077);
pub const WM_CAP_GET_STATUS = @as(u32, 1078);
pub const WM_CAP_SET_SCROLL = @as(u32, 1079);
pub const WM_CAP_GRAB_FRAME = @as(u32, 1084);
pub const WM_CAP_GRAB_FRAME_NOSTOP = @as(u32, 1085);
pub const WM_CAP_SEQUENCE = @as(u32, 1086);
pub const WM_CAP_SEQUENCE_NOFILE = @as(u32, 1087);
pub const WM_CAP_SET_SEQUENCE_SETUP = @as(u32, 1088);
pub const WM_CAP_GET_SEQUENCE_SETUP = @as(u32, 1089);
pub const WM_CAP_SET_MCI_DEVICEA = @as(u32, 1090);
pub const WM_CAP_GET_MCI_DEVICEA = @as(u32, 1091);
pub const WM_CAP_SET_MCI_DEVICEW = @as(u32, 1190);
pub const WM_CAP_GET_MCI_DEVICEW = @as(u32, 1191);
pub const WM_CAP_SET_MCI_DEVICE = @as(u32, 1190);
pub const WM_CAP_GET_MCI_DEVICE = @as(u32, 1191);
pub const WM_CAP_STOP = @as(u32, 1092);
pub const WM_CAP_ABORT = @as(u32, 1093);
pub const WM_CAP_SINGLE_FRAME_OPEN = @as(u32, 1094);
pub const WM_CAP_SINGLE_FRAME_CLOSE = @as(u32, 1095);
pub const WM_CAP_SINGLE_FRAME = @as(u32, 1096);
pub const WM_CAP_PAL_OPENA = @as(u32, 1104);
pub const WM_CAP_PAL_SAVEA = @as(u32, 1105);
pub const WM_CAP_PAL_OPENW = @as(u32, 1204);
pub const WM_CAP_PAL_SAVEW = @as(u32, 1205);
pub const WM_CAP_PAL_OPEN = @as(u32, 1204);
pub const WM_CAP_PAL_SAVE = @as(u32, 1205);
pub const WM_CAP_PAL_PASTE = @as(u32, 1106);
pub const WM_CAP_PAL_AUTOCREATE = @as(u32, 1107);
pub const WM_CAP_PAL_MANUALCREATE = @as(u32, 1108);
pub const WM_CAP_SET_CALLBACK_CAPCONTROL = @as(u32, 1109);
pub const WM_CAP_UNICODE_END = @as(u32, 1205);
pub const WM_CAP_END = @as(u32, 1205);
pub const AVSTREAMMASTER_AUDIO = @as(u32, 0);
pub const AVSTREAMMASTER_NONE = @as(u32, 1);
pub const CONTROLCALLBACK_PREROLL = @as(u32, 1);
pub const CONTROLCALLBACK_CAPTURING = @as(u32, 2);
pub const IDS_CAP_BEGIN = @as(u32, 300);
pub const IDS_CAP_END = @as(u32, 301);
pub const IDS_CAP_INFO = @as(u32, 401);
pub const IDS_CAP_OUTOFMEM = @as(u32, 402);
pub const IDS_CAP_FILEEXISTS = @as(u32, 403);
pub const IDS_CAP_ERRORPALOPEN = @as(u32, 404);
pub const IDS_CAP_ERRORPALSAVE = @as(u32, 405);
pub const IDS_CAP_ERRORDIBSAVE = @as(u32, 406);
pub const IDS_CAP_DEFAVIEXT = @as(u32, 407);
pub const IDS_CAP_DEFPALEXT = @as(u32, 408);
pub const IDS_CAP_CANTOPEN = @as(u32, 409);
pub const IDS_CAP_SEQ_MSGSTART = @as(u32, 410);
pub const IDS_CAP_SEQ_MSGSTOP = @as(u32, 411);
pub const IDS_CAP_VIDEDITERR = @as(u32, 412);
pub const IDS_CAP_READONLYFILE = @as(u32, 413);
pub const IDS_CAP_WRITEERROR = @as(u32, 414);
pub const IDS_CAP_NODISKSPACE = @as(u32, 415);
pub const IDS_CAP_SETFILESIZE = @as(u32, 416);
pub const IDS_CAP_SAVEASPERCENT = @as(u32, 417);
pub const IDS_CAP_DRIVER_ERROR = @as(u32, 418);
pub const IDS_CAP_WAVE_OPEN_ERROR = @as(u32, 419);
pub const IDS_CAP_WAVE_ALLOC_ERROR = @as(u32, 420);
pub const IDS_CAP_WAVE_PREPARE_ERROR = @as(u32, 421);
pub const IDS_CAP_WAVE_ADD_ERROR = @as(u32, 422);
pub const IDS_CAP_WAVE_SIZE_ERROR = @as(u32, 423);
pub const IDS_CAP_VIDEO_OPEN_ERROR = @as(u32, 424);
pub const IDS_CAP_VIDEO_ALLOC_ERROR = @as(u32, 425);
pub const IDS_CAP_VIDEO_PREPARE_ERROR = @as(u32, 426);
pub const IDS_CAP_VIDEO_ADD_ERROR = @as(u32, 427);
pub const IDS_CAP_VIDEO_SIZE_ERROR = @as(u32, 428);
pub const IDS_CAP_FILE_OPEN_ERROR = @as(u32, 429);
pub const IDS_CAP_FILE_WRITE_ERROR = @as(u32, 430);
pub const IDS_CAP_RECORDING_ERROR = @as(u32, 431);
pub const IDS_CAP_RECORDING_ERROR2 = @as(u32, 432);
pub const IDS_CAP_AVI_INIT_ERROR = @as(u32, 433);
pub const IDS_CAP_NO_FRAME_CAP_ERROR = @as(u32, 434);
pub const IDS_CAP_NO_PALETTE_WARN = @as(u32, 435);
pub const IDS_CAP_MCI_CONTROL_ERROR = @as(u32, 436);
pub const IDS_CAP_MCI_CANT_STEP_ERROR = @as(u32, 437);
pub const IDS_CAP_NO_AUDIO_CAP_ERROR = @as(u32, 438);
pub const IDS_CAP_AVI_DRAWDIB_ERROR = @as(u32, 439);
pub const IDS_CAP_COMPRESSOR_ERROR = @as(u32, 440);
pub const IDS_CAP_AUDIO_DROP_ERROR = @as(u32, 441);
pub const IDS_CAP_AUDIO_DROP_COMPERROR = @as(u32, 442);
pub const IDS_CAP_STAT_LIVE_MODE = @as(u32, 500);
pub const IDS_CAP_STAT_OVERLAY_MODE = @as(u32, 501);
pub const IDS_CAP_STAT_CAP_INIT = @as(u32, 502);
pub const IDS_CAP_STAT_CAP_FINI = @as(u32, 503);
pub const IDS_CAP_STAT_PALETTE_BUILD = @as(u32, 504);
pub const IDS_CAP_STAT_OPTPAL_BUILD = @as(u32, 505);
pub const IDS_CAP_STAT_I_FRAMES = @as(u32, 506);
pub const IDS_CAP_STAT_L_FRAMES = @as(u32, 507);
pub const IDS_CAP_STAT_CAP_L_FRAMES = @as(u32, 508);
pub const IDS_CAP_STAT_CAP_AUDIO = @as(u32, 509);
pub const IDS_CAP_STAT_VIDEOCURRENT = @as(u32, 510);
pub const IDS_CAP_STAT_VIDEOAUDIO = @as(u32, 511);
pub const IDS_CAP_STAT_VIDEOONLY = @as(u32, 512);
pub const IDS_CAP_STAT_FRAMESDROPPED = @as(u32, 513);
pub const JOYERR_NOERROR = @as(u32, 0);
pub const JOYERR_PARMS = @as(u32, 165);
pub const JOYERR_NOCANDO = @as(u32, 166);
pub const JOYERR_UNPLUGGED = @as(u32, 167);
pub const JOY_BUTTON1 = @as(u32, 1);
pub const JOY_BUTTON2 = @as(u32, 2);
pub const JOY_BUTTON3 = @as(u32, 4);
pub const JOY_BUTTON4 = @as(u32, 8);
pub const JOY_BUTTON1CHG = @as(u32, 256);
pub const JOY_BUTTON2CHG = @as(u32, 512);
pub const JOY_BUTTON3CHG = @as(u32, 1024);
pub const JOY_BUTTON4CHG = @as(u32, 2048);
pub const JOY_BUTTON5 = @as(i32, 16);
pub const JOY_BUTTON6 = @as(i32, 32);
pub const JOY_BUTTON7 = @as(i32, 64);
pub const JOY_BUTTON8 = @as(i32, 128);
pub const JOY_BUTTON9 = @as(i32, 256);
pub const JOY_BUTTON10 = @as(i32, 512);
pub const JOY_BUTTON11 = @as(i32, 1024);
pub const JOY_BUTTON12 = @as(i32, 2048);
pub const JOY_BUTTON13 = @as(i32, 4096);
pub const JOY_BUTTON14 = @as(i32, 8192);
pub const JOY_BUTTON15 = @as(i32, 16384);
pub const JOY_BUTTON16 = @as(i32, 32768);
pub const JOY_BUTTON17 = @as(i32, 65536);
pub const JOY_BUTTON18 = @as(i32, 131072);
pub const JOY_BUTTON19 = @as(i32, 262144);
pub const JOY_BUTTON20 = @as(i32, 524288);
pub const JOY_BUTTON21 = @as(i32, 1048576);
pub const JOY_BUTTON22 = @as(i32, 2097152);
pub const JOY_BUTTON23 = @as(i32, 4194304);
pub const JOY_BUTTON24 = @as(i32, 8388608);
pub const JOY_BUTTON25 = @as(i32, 16777216);
pub const JOY_BUTTON26 = @as(i32, 33554432);
pub const JOY_BUTTON27 = @as(i32, 67108864);
pub const JOY_BUTTON28 = @as(i32, 134217728);
pub const JOY_BUTTON29 = @as(i32, 268435456);
pub const JOY_BUTTON30 = @as(i32, 536870912);
pub const JOY_BUTTON31 = @as(i32, 1073741824);
pub const JOY_BUTTON32 = @as(i32, -2147483648);
pub const JOY_POVFORWARD = @as(u32, 0);
pub const JOY_POVRIGHT = @as(u32, 9000);
pub const JOY_POVBACKWARD = @as(u32, 18000);
pub const JOY_POVLEFT = @as(u32, 27000);
pub const JOY_RETURNX = @as(i32, 1);
pub const JOY_RETURNY = @as(i32, 2);
pub const JOY_RETURNZ = @as(i32, 4);
pub const JOY_RETURNR = @as(i32, 8);
pub const JOY_RETURNU = @as(i32, 16);
pub const JOY_RETURNV = @as(i32, 32);
pub const JOY_RETURNPOV = @as(i32, 64);
pub const JOY_RETURNBUTTONS = @as(i32, 128);
pub const JOY_RETURNRAWDATA = @as(i32, 256);
pub const JOY_RETURNPOVCTS = @as(i32, 512);
pub const JOY_RETURNCENTERED = @as(i32, 1024);
pub const JOY_USEDEADZONE = @as(i32, 2048);
pub const JOY_CAL_READALWAYS = @as(i32, 65536);
pub const JOY_CAL_READXYONLY = @as(i32, 131072);
pub const JOY_CAL_READ3 = @as(i32, 262144);
pub const JOY_CAL_READ4 = @as(i32, 524288);
pub const JOY_CAL_READXONLY = @as(i32, 1048576);
pub const JOY_CAL_READYONLY = @as(i32, 2097152);
pub const JOY_CAL_READ5 = @as(i32, 4194304);
pub const JOY_CAL_READ6 = @as(i32, 8388608);
pub const JOY_CAL_READZONLY = @as(i32, 16777216);
pub const JOY_CAL_READRONLY = @as(i32, 33554432);
pub const JOY_CAL_READUONLY = @as(i32, 67108864);
pub const JOY_CAL_READVONLY = @as(i32, 134217728);
pub const JOYSTICKID1 = @as(u32, 0);
pub const JOYSTICKID2 = @as(u32, 1);
pub const JOYCAPS_HASZ = @as(u32, 1);
pub const JOYCAPS_HASR = @as(u32, 2);
pub const JOYCAPS_HASU = @as(u32, 4);
pub const JOYCAPS_HASV = @as(u32, 8);
pub const JOYCAPS_HASPOV = @as(u32, 16);
pub const JOYCAPS_POV4DIR = @as(u32, 32);
pub const JOYCAPS_POVCTS = @as(u32, 64);
pub const DRV_LOAD = @as(u32, 1);
pub const DRV_ENABLE = @as(u32, 2);
pub const DRV_OPEN = @as(u32, 3);
pub const DRV_CLOSE = @as(u32, 4);
pub const DRV_DISABLE = @as(u32, 5);
pub const DRV_FREE = @as(u32, 6);
pub const DRV_CONFIGURE = @as(u32, 7);
pub const DRV_QUERYCONFIGURE = @as(u32, 8);
pub const DRV_INSTALL = @as(u32, 9);
pub const DRV_REMOVE = @as(u32, 10);
pub const DRV_RESERVED = @as(u32, 2048);
pub const DRV_USER = @as(u32, 16384);
pub const DRIVERS_SECTION = "DRIVERS32";
pub const MCI_SECTION = "MCI32";
pub const DCB_NOSWITCH = @as(u32, 8);
pub const DCB_TYPEMASK = @as(u32, 7);
pub const DCB_NULL = @as(u32, 0);
pub const DCB_WINDOW = @as(u32, 1);
pub const DCB_TASK = @as(u32, 2);
pub const DCB_FUNCTION = @as(u32, 3);
pub const DCB_EVENT = @as(u32, 5);
pub const DRVM_INIT = @as(u32, 100);
pub const DRVM_EXIT = @as(u32, 101);
pub const DRVM_DISABLE = @as(u32, 102);
pub const DRVM_ENABLE = @as(u32, 103);
pub const DRVM_INIT_EX = @as(u32, 104);
pub const DRVM_USER = @as(u32, 16384);
pub const DRVM_MAPPER_RECONFIGURE = @as(u32, 8193);
pub const DRVM_MAPPER_PREFERRED_GET = @as(u32, 8213);
pub const DRVM_MAPPER_CONSOLEVOICECOM_GET = @as(u32, 8215);
pub const DRV_QUERYDEVNODE = @as(u32, 2050);
pub const DRV_QUERYMAPPABLE = @as(u32, 2053);
pub const DRV_QUERYMODULE = @as(u32, 2057);
pub const DRV_PNPINSTALL = @as(u32, 2059);
pub const DRV_QUERYDEVICEINTERFACE = @as(u32, 2060);
pub const DRV_QUERYDEVICEINTERFACESIZE = @as(u32, 2061);
pub const DRV_QUERYSTRINGID = @as(u32, 2062);
pub const DRV_QUERYSTRINGIDSIZE = @as(u32, 2063);
pub const DRV_QUERYIDFROMSTRINGID = @as(u32, 2064);
pub const DRV_QUERYFUNCTIONINSTANCEID = @as(u32, 2065);
pub const DRV_QUERYFUNCTIONINSTANCEIDSIZE = @as(u32, 2066);
pub const DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY = @as(u32, 1);
pub const DRVM_IOCTL = @as(u32, 256);
pub const DRVM_ADD_THRU = @as(u32, 257);
pub const DRVM_REMOVE_THRU = @as(u32, 258);
pub const DRVM_IOCTL_LAST = @as(u32, 261);
pub const DRVM_IOCTL_CMD_USER = @as(i32, 0);
pub const DRVM_IOCTL_CMD_SYSTEM = @as(i32, -2147483648);
pub const VADMAD_Device_ID = @as(u32, 1092);
pub const WODM_INIT = @as(u32, 100);
pub const WIDM_INIT = @as(u32, 100);
pub const WODM_INIT_EX = @as(u32, 104);
pub const WIDM_INIT_EX = @as(u32, 104);
pub const WODM_GETNUMDEVS = @as(u32, 3);
pub const WODM_GETDEVCAPS = @as(u32, 4);
pub const WODM_OPEN = @as(u32, 5);
pub const WODM_CLOSE = @as(u32, 6);
pub const WODM_PREPARE = @as(u32, 7);
pub const WODM_UNPREPARE = @as(u32, 8);
pub const WODM_WRITE = @as(u32, 9);
pub const WODM_PAUSE = @as(u32, 10);
pub const WODM_RESTART = @as(u32, 11);
pub const WODM_RESET = @as(u32, 12);
pub const WODM_GETPOS = @as(u32, 13);
pub const WODM_GETPITCH = @as(u32, 14);
pub const WODM_SETPITCH = @as(u32, 15);
pub const WODM_GETVOLUME = @as(u32, 16);
pub const WODM_SETVOLUME = @as(u32, 17);
pub const WODM_GETPLAYBACKRATE = @as(u32, 18);
pub const WODM_SETPLAYBACKRATE = @as(u32, 19);
pub const WODM_BREAKLOOP = @as(u32, 20);
pub const WODM_PREFERRED = @as(u32, 21);
pub const WODM_BUSY = @as(u32, 21);
pub const WIDM_GETNUMDEVS = @as(u32, 50);
pub const WIDM_GETDEVCAPS = @as(u32, 51);
pub const WIDM_OPEN = @as(u32, 52);
pub const WIDM_CLOSE = @as(u32, 53);
pub const WIDM_PREPARE = @as(u32, 54);
pub const WIDM_UNPREPARE = @as(u32, 55);
pub const WIDM_ADDBUFFER = @as(u32, 56);
pub const WIDM_START = @as(u32, 57);
pub const WIDM_STOP = @as(u32, 58);
pub const WIDM_RESET = @as(u32, 59);
pub const WIDM_GETPOS = @as(u32, 60);
pub const WIDM_PREFERRED = @as(u32, 61);
pub const MIDI_IO_PACKED = @as(i32, 0);
pub const MIDI_IO_COOKED = @as(i32, 2);
pub const MODM_GETNUMDEVS = @as(u32, 1);
pub const MODM_GETDEVCAPS = @as(u32, 2);
pub const MODM_OPEN = @as(u32, 3);
pub const MODM_CLOSE = @as(u32, 4);
pub const MODM_PREPARE = @as(u32, 5);
pub const MODM_UNPREPARE = @as(u32, 6);
pub const MODM_DATA = @as(u32, 7);
pub const MODM_LONGDATA = @as(u32, 8);
pub const MODM_RESET = @as(u32, 9);
pub const MODM_GETVOLUME = @as(u32, 10);
pub const MODM_SETVOLUME = @as(u32, 11);
pub const MODM_CACHEPATCHES = @as(u32, 12);
pub const MODM_CACHEDRUMPATCHES = @as(u32, 13);
pub const MODM_STRMDATA = @as(u32, 14);
pub const MODM_GETPOS = @as(u32, 17);
pub const MODM_PAUSE = @as(u32, 18);
pub const MODM_RESTART = @as(u32, 19);
pub const MODM_STOP = @as(u32, 20);
pub const MODM_PROPERTIES = @as(u32, 21);
pub const MODM_PREFERRED = @as(u32, 22);
pub const MODM_RECONFIGURE = @as(u32, 18280);
pub const MIDM_GETNUMDEVS = @as(u32, 53);
pub const MIDM_GETDEVCAPS = @as(u32, 54);
pub const MIDM_OPEN = @as(u32, 55);
pub const MIDM_CLOSE = @as(u32, 56);
pub const MIDM_PREPARE = @as(u32, 57);
pub const MIDM_UNPREPARE = @as(u32, 58);
pub const MIDM_ADDBUFFER = @as(u32, 59);
pub const MIDM_START = @as(u32, 60);
pub const MIDM_STOP = @as(u32, 61);
pub const MIDM_RESET = @as(u32, 62);
pub const AUXM_INIT = @as(u32, 100);
pub const AUXM_INIT_EX = @as(u32, 104);
pub const AUXDM_GETNUMDEVS = @as(u32, 3);
pub const AUXDM_GETDEVCAPS = @as(u32, 4);
pub const AUXDM_GETVOLUME = @as(u32, 5);
pub const AUXDM_SETVOLUME = @as(u32, 6);
pub const MXDM_INIT = @as(u32, 100);
pub const MXDM_INIT_EX = @as(u32, 104);
pub const MXDM_USER = @as(u32, 16384);
pub const MXDM_BASE = @as(u32, 1);
pub const MXDM_GETNUMDEVS = @as(u32, 1);
pub const MXDM_GETDEVCAPS = @as(u32, 2);
pub const MXDM_OPEN = @as(u32, 3);
pub const MXDM_CLOSE = @as(u32, 4);
pub const MXDM_GETLINEINFO = @as(u32, 5);
pub const MXDM_GETLINECONTROLS = @as(u32, 6);
pub const MXDM_GETCONTROLDETAILS = @as(u32, 7);
pub const MXDM_SETCONTROLDETAILS = @as(u32, 8);
pub const TDD_KILLTIMEREVENT = @as(u32, 2048);
pub const TDD_SETTIMEREVENT = @as(u32, 2052);
pub const TDD_GETSYSTEMTIME = @as(u32, 2056);
pub const TDD_GETDEVCAPS = @as(u32, 2060);
pub const TDD_BEGINMINPERIOD = @as(u32, 2064);
pub const TDD_ENDMINPERIOD = @as(u32, 2068);
pub const JOY_CONFIGCHANGED_MSGSTRING = "MSJSTICK_VJOYD_MSGSTR";
pub const JDD_GETNUMDEVS = @as(u32, 2049);
pub const JDD_GETDEVCAPS = @as(u32, 2050);
pub const JDD_GETPOS = @as(u32, 2305);
pub const JDD_SETCALIBRATION = @as(u32, 2306);
pub const JDD_CONFIGCHANGED = @as(u32, 2307);
pub const JDD_GETPOSEX = @as(u32, 2308);
pub const MCI_OPEN_DRIVER = @as(u32, 2049);
pub const MCI_CLOSE_DRIVER = @as(u32, 2050);
pub const MCI_FALSE = @as(u32, 531);
pub const MCI_TRUE = @as(u32, 532);
pub const MCI_FORMAT_MILLISECONDS_S = @as(u32, 533);
pub const MCI_FORMAT_HMS_S = @as(u32, 534);
pub const MCI_FORMAT_MSF_S = @as(u32, 535);
pub const MCI_FORMAT_FRAMES_S = @as(u32, 536);
pub const MCI_FORMAT_SMPTE_24_S = @as(u32, 537);
pub const MCI_FORMAT_SMPTE_25_S = @as(u32, 538);
pub const MCI_FORMAT_SMPTE_30_S = @as(u32, 539);
pub const MCI_FORMAT_SMPTE_30DROP_S = @as(u32, 540);
pub const MCI_FORMAT_BYTES_S = @as(u32, 541);
pub const MCI_FORMAT_SAMPLES_S = @as(u32, 542);
pub const MCI_FORMAT_TMSF_S = @as(u32, 543);
pub const MCI_VD_FORMAT_TRACK_S = @as(u32, 1029);
pub const WAVE_FORMAT_PCM_S = @as(u32, 1152);
pub const WAVE_MAPPER_S = @as(u32, 1153);
pub const MCI_SEQ_MAPPER_S = @as(u32, 1221);
pub const MCI_SEQ_FILE_S = @as(u32, 1222);
pub const MCI_SEQ_MIDI_S = @as(u32, 1223);
pub const MCI_SEQ_SMPTE_S = @as(u32, 1224);
pub const MCI_SEQ_FORMAT_SONGPTR_S = @as(u32, 1225);
pub const MCI_SEQ_NONE_S = @as(u32, 1226);
pub const MIDIMAPPER_S = @as(u32, 1227);
pub const MCI_MAX_DEVICE_TYPE_LENGTH = @as(u32, 80);
pub const MCI_RESOURCE_RETURNED = @as(u32, 65536);
pub const MCI_COLONIZED3_RETURN = @as(u32, 131072);
pub const MCI_COLONIZED4_RETURN = @as(u32, 262144);
pub const MCI_INTEGER_RETURNED = @as(u32, 524288);
pub const MCI_RESOURCE_DRIVER = @as(u32, 1048576);
pub const MCI_COMMAND_HEAD = @as(u32, 0);
pub const MCI_STRING = @as(u32, 1);
pub const MCI_INTEGER = @as(u32, 2);
pub const MCI_END_COMMAND = @as(u32, 3);
pub const MCI_RETURN = @as(u32, 4);
pub const MCI_FLAG = @as(u32, 5);
pub const MCI_END_COMMAND_LIST = @as(u32, 6);
pub const MCI_RECT = @as(u32, 7);
pub const MCI_CONSTANT = @as(u32, 8);
pub const MCI_END_CONSTANT = @as(u32, 9);
pub const MCI_HWND = @as(u32, 10);
pub const MCI_HPAL = @as(u32, 11);
pub const MCI_HDC = @as(u32, 12);
pub const MCI_INTEGER64 = @as(u32, 13);
pub const TASKERR_NOTASKSUPPORT = @as(u32, 1);
pub const TASKERR_OUTOFMEMORY = @as(u32, 2);
pub const DRV_EXITSESSION = @as(u32, 11);
pub const DRV_POWER = @as(u32, 15);
pub const DRVCNF_CANCEL = @as(u32, 0);
pub const DRVCNF_OK = @as(u32, 1);
pub const DRVCNF_RESTART = @as(u32, 2);
pub const DRV_CANCEL = @as(u32, 0);
pub const DRV_OK = @as(u32, 1);
pub const DRV_RESTART = @as(u32, 2);
pub const DRV_MCI_LAST = @as(u32, 6143);
pub const MMIOERR_BASE = @as(u32, 256);
pub const MMIOERR_FILENOTFOUND = @as(u32, 257);
pub const MMIOERR_OUTOFMEMORY = @as(u32, 258);
pub const MMIOERR_CANNOTOPEN = @as(u32, 259);
pub const MMIOERR_CANNOTCLOSE = @as(u32, 260);
pub const MMIOERR_CANNOTREAD = @as(u32, 261);
pub const MMIOERR_CANNOTWRITE = @as(u32, 262);
pub const MMIOERR_CANNOTSEEK = @as(u32, 263);
pub const MMIOERR_CANNOTEXPAND = @as(u32, 264);
pub const MMIOERR_CHUNKNOTFOUND = @as(u32, 265);
pub const MMIOERR_UNBUFFERED = @as(u32, 266);
pub const MMIOERR_PATHNOTFOUND = @as(u32, 267);
pub const MMIOERR_ACCESSDENIED = @as(u32, 268);
pub const MMIOERR_SHARINGVIOLATION = @as(u32, 269);
pub const MMIOERR_NETWORKERROR = @as(u32, 270);
pub const MMIOERR_TOOMANYOPENFILES = @as(u32, 271);
pub const MMIOERR_INVALIDFILE = @as(u32, 272);
pub const MMIO_RWMODE = @as(u32, 3);
pub const MMIO_SHAREMODE = @as(u32, 112);
pub const MMIO_CREATE = @as(u32, 4096);
pub const MMIO_PARSE = @as(u32, 256);
pub const MMIO_DELETE = @as(u32, 512);
pub const MMIO_EXIST = @as(u32, 16384);
pub const MMIO_ALLOCBUF = @as(u32, 65536);
pub const MMIO_GETTEMP = @as(u32, 131072);
pub const MMIO_DIRTY = @as(u32, 268435456);
pub const MMIO_READ = @as(u32, 0);
pub const MMIO_WRITE = @as(u32, 1);
pub const MMIO_READWRITE = @as(u32, 2);
pub const MMIO_COMPAT = @as(u32, 0);
pub const MMIO_EXCLUSIVE = @as(u32, 16);
pub const MMIO_DENYWRITE = @as(u32, 32);
pub const MMIO_DENYREAD = @as(u32, 48);
pub const MMIO_DENYNONE = @as(u32, 64);
pub const MMIO_FHOPEN = @as(u32, 16);
pub const MMIO_EMPTYBUF = @as(u32, 16);
pub const MMIO_TOUPPER = @as(u32, 16);
pub const MMIO_INSTALLPROC = @as(u32, 65536);
pub const MMIO_GLOBALPROC = @as(u32, 268435456);
pub const MMIO_REMOVEPROC = @as(u32, 131072);
pub const MMIO_UNICODEPROC = @as(u32, 16777216);
pub const MMIO_FINDPROC = @as(u32, 262144);
pub const MMIO_FINDCHUNK = @as(u32, 16);
pub const MMIO_FINDRIFF = @as(u32, 32);
pub const MMIO_FINDLIST = @as(u32, 64);
pub const MMIO_CREATERIFF = @as(u32, 32);
pub const MMIO_CREATELIST = @as(u32, 64);
pub const MMIOM_READ = @as(u32, 0);
pub const MMIOM_WRITE = @as(u32, 1);
pub const MMIOM_SEEK = @as(u32, 2);
pub const MMIOM_OPEN = @as(u32, 3);
pub const MMIOM_CLOSE = @as(u32, 4);
pub const MMIOM_WRITEFLUSH = @as(u32, 5);
pub const MMIOM_RENAME = @as(u32, 6);
pub const MMIOM_USER = @as(u32, 32768);
pub const SEEK_SET = @as(u32, 0);
pub const SEEK_CUR = @as(u32, 1);
pub const SEEK_END = @as(u32, 2);
pub const MMIO_DEFAULTBUFFER = @as(u32, 8192);
pub const FACILITY_NS = @as(u32, 13);
pub const MCI_MCIAVI_PLAY_WINDOW = @as(i32, 16777216);
pub const MCI_MCIAVI_PLAY_FULLSCREEN = @as(i32, 33554432);
pub const MCI_MCIAVI_PLAY_FULLBY2 = @as(i32, 67108864);
pub const MCI_AVI_STATUS_FRAMES_SKIPPED = @as(i32, 32769);
pub const MCI_AVI_STATUS_LAST_PLAY_SPEED = @as(i32, 32770);
pub const MCI_AVI_STATUS_AUDIO_BREAKS = @as(i32, 32771);
pub const MCI_AVI_SETVIDEO_DRAW_PROCEDURE = @as(i32, 32768);
pub const MCI_AVI_SETVIDEO_PALETTE_COLOR = @as(i32, 33024);
pub const MCI_AVI_SETVIDEO_PALETTE_HALFTONE = @as(i32, 65535);
pub const MCIERR_AVI_OLDAVIFORMAT = @as(u32, 612);
pub const MCIERR_AVI_NOTINTERLEAVED = @as(u32, 613);
pub const MCIERR_AVI_NODISPDIB = @as(u32, 614);
pub const MCIERR_AVI_CANTPLAYFULLSCREEN = @as(u32, 615);
pub const MCIERR_AVI_TOOBIGFORVGA = @as(u32, 616);
pub const MCIERR_AVI_NOCOMPRESSOR = @as(u32, 617);
pub const MCIERR_AVI_DISPLAYERROR = @as(u32, 618);
pub const MCIERR_AVI_AUDIOERROR = @as(u32, 619);
pub const MCIERR_AVI_BADPALETTE = @as(u32, 620);
pub const DLG_ACMFORMATCHOOSE_ID = @as(u32, 70);
pub const IDD_ACMFORMATCHOOSE_BTN_HELP = @as(u32, 9);
pub const IDD_ACMFORMATCHOOSE_CMB_CUSTOM = @as(u32, 100);
pub const IDD_ACMFORMATCHOOSE_CMB_FORMATTAG = @as(u32, 101);
pub const IDD_ACMFORMATCHOOSE_CMB_FORMAT = @as(u32, 102);
pub const IDD_ACMFORMATCHOOSE_BTN_SETNAME = @as(u32, 103);
pub const IDD_ACMFORMATCHOOSE_BTN_DELNAME = @as(u32, 104);
pub const DLG_ACMFILTERCHOOSE_ID = @as(u32, 71);
pub const IDD_ACMFILTERCHOOSE_BTN_HELP = @as(u32, 9);
pub const IDD_ACMFILTERCHOOSE_CMB_CUSTOM = @as(u32, 100);
pub const IDD_ACMFILTERCHOOSE_CMB_FILTERTAG = @as(u32, 101);
pub const IDD_ACMFILTERCHOOSE_CMB_FILTER = @as(u32, 102);
pub const IDD_ACMFILTERCHOOSE_BTN_SETNAME = @as(u32, 103);
pub const IDD_ACMFILTERCHOOSE_BTN_DELNAME = @as(u32, 104);
pub const FACILITY_NS_WIN32 = @as(u32, 7);
pub const NS_S_CALLPENDING = @import("../zig.zig").typedConst(HRESULT, @as(i32, 851968));
pub const NS_S_CALLABORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 851969));
pub const NS_S_STREAM_TRUNCATED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 851970));
pub const NS_W_SERVER_BANDWIDTH_LIMIT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2146631677));
pub const NS_W_FILE_BANDWIDTH_LIMIT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2146631676));
pub const NS_E_NOCONNECTION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889851));
pub const NS_E_CANNOTCONNECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889850));
pub const NS_E_CANNOTDESTROYTITLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889849));
pub const NS_E_CANNOTRENAMETITLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889848));
pub const NS_E_CANNOTOFFLINEDISK = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889847));
pub const NS_E_CANNOTONLINEDISK = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889846));
pub const NS_E_NOREGISTEREDWALKER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889845));
pub const NS_E_NOFUNNEL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889844));
pub const NS_E_NO_LOCALPLAY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889843));
pub const NS_E_NETWORK_BUSY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889842));
pub const NS_E_TOO_MANY_SESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889841));
pub const NS_E_ALREADY_CONNECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889840));
pub const NS_E_INVALID_INDEX = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889839));
pub const NS_E_PROTOCOL_MISMATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889838));
pub const NS_E_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889837));
pub const NS_E_NET_WRITE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889836));
pub const NS_E_NET_READ = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889835));
pub const NS_E_DISK_WRITE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889834));
pub const NS_E_DISK_READ = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889833));
pub const NS_E_FILE_WRITE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889832));
pub const NS_E_FILE_READ = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889831));
pub const NS_E_FILE_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889830));
pub const NS_E_FILE_EXISTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889829));
pub const NS_E_INVALID_NAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889828));
pub const NS_E_FILE_OPEN_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889827));
pub const NS_E_FILE_ALLOCATION_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889826));
pub const NS_E_FILE_INIT_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889825));
pub const NS_E_FILE_PLAY_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889824));
pub const NS_E_SET_DISK_UID_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889823));
pub const NS_E_INDUCED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889822));
pub const NS_E_CCLINK_DOWN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889821));
pub const NS_E_INTERNAL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889820));
pub const NS_E_BUSY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889819));
pub const NS_E_UNRECOGNIZED_STREAM_TYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889818));
pub const NS_E_NETWORK_SERVICE_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889817));
pub const NS_E_NETWORK_RESOURCE_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889816));
pub const NS_E_CONNECTION_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889815));
pub const NS_E_SHUTDOWN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889814));
pub const NS_E_INVALID_REQUEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889813));
pub const NS_E_INSUFFICIENT_BANDWIDTH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889812));
pub const NS_E_NOT_REBUILDING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889811));
pub const NS_E_LATE_OPERATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889810));
pub const NS_E_INVALID_DATA = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889809));
pub const NS_E_FILE_BANDWIDTH_LIMIT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889808));
pub const NS_E_OPEN_FILE_LIMIT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889807));
pub const NS_E_BAD_CONTROL_DATA = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889806));
pub const NS_E_NO_STREAM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889805));
pub const NS_E_STREAM_END = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889804));
pub const NS_E_SERVER_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889803));
pub const NS_E_DUPLICATE_NAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889802));
pub const NS_E_DUPLICATE_ADDRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889801));
pub const NS_E_BAD_MULTICAST_ADDRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889800));
pub const NS_E_BAD_ADAPTER_ADDRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889799));
pub const NS_E_BAD_DELIVERY_MODE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889798));
pub const NS_E_INVALID_CHANNEL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889797));
pub const NS_E_INVALID_STREAM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889796));
pub const NS_E_INVALID_ARCHIVE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889795));
pub const NS_E_NOTITLES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889794));
pub const NS_E_INVALID_CLIENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889793));
pub const NS_E_INVALID_BLACKHOLE_ADDRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889792));
pub const NS_E_INCOMPATIBLE_FORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889791));
pub const NS_E_INVALID_KEY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889790));
pub const NS_E_INVALID_PORT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889789));
pub const NS_E_INVALID_TTL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889788));
pub const NS_E_STRIDE_REFUSED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889787));
pub const NS_E_MMSAUTOSERVER_CANTFINDWALKER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889786));
pub const NS_E_MAX_BITRATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889785));
pub const NS_E_LOGFILEPERIOD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889784));
pub const NS_E_MAX_CLIENTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889783));
pub const NS_E_LOG_FILE_SIZE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889782));
pub const NS_E_MAX_FILERATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889781));
pub const NS_E_WALKER_UNKNOWN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889780));
pub const NS_E_WALKER_SERVER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889779));
pub const NS_E_WALKER_USAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889778));
pub const NS_I_TIGER_START = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074593871));
pub const NS_E_TIGER_FAIL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889776));
pub const NS_I_CUB_START = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074593873));
pub const NS_I_CUB_RUNNING = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074593874));
pub const NS_E_CUB_FAIL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889773));
pub const NS_I_DISK_START = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074593876));
pub const NS_E_DISK_FAIL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889771));
pub const NS_I_DISK_REBUILD_STARTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074593878));
pub const NS_I_DISK_REBUILD_FINISHED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074593879));
pub const NS_I_DISK_REBUILD_ABORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074593880));
pub const NS_I_LIMIT_FUNNELS = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074593881));
pub const NS_I_START_DISK = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074593882));
pub const NS_I_STOP_DISK = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074593883));
pub const NS_I_STOP_CUB = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074593884));
pub const NS_I_KILL_USERSESSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074593885));
pub const NS_I_KILL_CONNECTION = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074593886));
pub const NS_I_REBUILD_DISK = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074593887));
pub const NS_W_UNKNOWN_EVENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2146631584));
pub const NS_E_MAX_FUNNELS_ALERT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889760));
pub const NS_E_ALLOCATE_FILE_FAIL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889759));
pub const NS_E_PAGING_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889758));
pub const NS_E_BAD_BLOCK0_VERSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889757));
pub const NS_E_BAD_DISK_UID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889756));
pub const NS_E_BAD_FSMAJOR_VERSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889755));
pub const NS_E_BAD_STAMPNUMBER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889754));
pub const NS_E_PARTIALLY_REBUILT_DISK = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889753));
pub const NS_E_ENACTPLAN_GIVEUP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889752));
pub const MCMADM_I_NO_EVENTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074593897));
pub const MCMADM_E_REGKEY_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889750));
pub const NS_E_NO_FORMATS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889749));
pub const NS_E_NO_REFERENCES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889748));
pub const NS_E_WAVE_OPEN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889747));
pub const NS_I_LOGGING_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074593902));
pub const NS_E_CANNOTCONNECTEVENTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889745));
pub const NS_I_LIMIT_BANDWIDTH = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074593904));
pub const NS_E_NO_DEVICE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889743));
pub const NS_E_NO_SPECIFIED_DEVICE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889742));
pub const NS_E_NOTHING_TO_DO = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072887823));
pub const NS_E_NO_MULTICAST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072887822));
pub const NS_E_MONITOR_GIVEUP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889656));
pub const NS_E_REMIRRORED_DISK = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889655));
pub const NS_E_INSUFFICIENT_DATA = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889654));
pub const NS_E_ASSERT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889653));
pub const NS_E_BAD_ADAPTER_NAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889652));
pub const NS_E_NOT_LICENSED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889651));
pub const NS_E_NO_SERVER_CONTACT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889650));
pub const NS_E_TOO_MANY_TITLES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889649));
pub const NS_E_TITLE_SIZE_EXCEEDED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889648));
pub const NS_E_UDP_DISABLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889647));
pub const NS_E_TCP_DISABLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889646));
pub const NS_E_HTTP_DISABLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889645));
pub const NS_E_LICENSE_EXPIRED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889644));
pub const NS_E_TITLE_BITRATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889643));
pub const NS_E_EMPTY_PROGRAM_NAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889642));
pub const NS_E_MISSING_CHANNEL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889641));
pub const NS_E_NO_CHANNELS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889640));
pub const NS_E_INVALID_INDEX2 = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889639));
pub const NS_E_CUB_FAIL_LINK = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889456));
pub const NS_I_CUB_UNFAIL_LINK = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074594193));
pub const NS_E_BAD_CUB_UID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889454));
pub const NS_I_RESTRIPE_START = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074594195));
pub const NS_I_RESTRIPE_DONE = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074594196));
pub const NS_E_GLITCH_MODE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889451));
pub const NS_I_RESTRIPE_DISK_OUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074594198));
pub const NS_I_RESTRIPE_CUB_OUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074594199));
pub const NS_I_DISK_STOP = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074594200));
pub const NS_I_CATATONIC_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2146631271));
pub const NS_I_CATATONIC_AUTO_UNFAIL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2146631270));
pub const NS_E_NO_MEDIA_PROTOCOL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072889445));
pub const NS_E_INVALID_INPUT_FORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886856));
pub const NS_E_MSAUDIO_NOT_INSTALLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886855));
pub const NS_E_UNEXPECTED_MSAUDIO_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886854));
pub const NS_E_INVALID_OUTPUT_FORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886853));
pub const NS_E_NOT_CONFIGURED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886852));
pub const NS_E_PROTECTED_CONTENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886851));
pub const NS_E_LICENSE_REQUIRED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886850));
pub const NS_E_TAMPERED_CONTENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886849));
pub const NS_E_LICENSE_OUTOFDATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886848));
pub const NS_E_LICENSE_INCORRECT_RIGHTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886847));
pub const NS_E_AUDIO_CODEC_NOT_INSTALLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886846));
pub const NS_E_AUDIO_CODEC_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886845));
pub const NS_E_VIDEO_CODEC_NOT_INSTALLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886844));
pub const NS_E_VIDEO_CODEC_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886843));
pub const NS_E_INVALIDPROFILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886842));
pub const NS_E_INCOMPATIBLE_VERSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886841));
pub const NS_S_REBUFFERING = @import("../zig.zig").typedConst(HRESULT, @as(i32, 854984));
pub const NS_S_DEGRADING_QUALITY = @import("../zig.zig").typedConst(HRESULT, @as(i32, 854985));
pub const NS_E_OFFLINE_MODE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886838));
pub const NS_E_NOT_CONNECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886837));
pub const NS_E_TOO_MUCH_DATA = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886836));
pub const NS_E_UNSUPPORTED_PROPERTY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886835));
pub const NS_E_8BIT_WAVE_UNSUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886834));
pub const NS_E_NO_MORE_SAMPLES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886833));
pub const NS_E_INVALID_SAMPLING_RATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886832));
pub const NS_E_MAX_PACKET_SIZE_TOO_SMALL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886831));
pub const NS_E_LATE_PACKET = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886830));
pub const NS_E_DUPLICATE_PACKET = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886829));
pub const NS_E_SDK_BUFFERTOOSMALL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886828));
pub const NS_E_INVALID_NUM_PASSES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886827));
pub const NS_E_ATTRIBUTE_READ_ONLY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886826));
pub const NS_E_ATTRIBUTE_NOT_ALLOWED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886825));
pub const NS_E_INVALID_EDL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886824));
pub const NS_E_DATA_UNIT_EXTENSION_TOO_LARGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886823));
pub const NS_E_CODEC_DMO_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886822));
pub const NS_S_TRANSCRYPTOR_EOF = @import("../zig.zig").typedConst(HRESULT, @as(i32, 855003));
pub const NS_E_FEATURE_DISABLED_BY_GROUP_POLICY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886820));
pub const NS_E_FEATURE_DISABLED_IN_SKU = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886819));
pub const NS_E_WMDRM_DEPRECATED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072886818));
pub const NS_E_NO_CD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885856));
pub const NS_E_CANT_READ_DIGITAL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885855));
pub const NS_E_DEVICE_DISCONNECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885854));
pub const NS_E_DEVICE_NOT_SUPPORT_FORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885853));
pub const NS_E_SLOW_READ_DIGITAL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885852));
pub const NS_E_MIXER_INVALID_LINE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885851));
pub const NS_E_MIXER_INVALID_CONTROL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885850));
pub const NS_E_MIXER_INVALID_VALUE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885849));
pub const NS_E_MIXER_UNKNOWN_MMRESULT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885848));
pub const NS_E_USER_STOP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885847));
pub const NS_E_MP3_FORMAT_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885846));
pub const NS_E_CD_READ_ERROR_NO_CORRECTION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885845));
pub const NS_E_CD_READ_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885844));
pub const NS_E_CD_SLOW_COPY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885843));
pub const NS_E_CD_COPYTO_CD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885842));
pub const NS_E_MIXER_NODRIVER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885841));
pub const NS_E_REDBOOK_ENABLED_WHILE_COPYING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885840));
pub const NS_E_CD_REFRESH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885839));
pub const NS_E_CD_DRIVER_PROBLEM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885838));
pub const NS_E_WONT_DO_DIGITAL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885837));
pub const NS_E_WMPXML_NOERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885836));
pub const NS_E_WMPXML_ENDOFDATA = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885835));
pub const NS_E_WMPXML_PARSEERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885834));
pub const NS_E_WMPXML_ATTRIBUTENOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885833));
pub const NS_E_WMPXML_PINOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885832));
pub const NS_E_WMPXML_EMPTYDOC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885831));
pub const NS_E_WMP_PATH_ALREADY_IN_LIBRARY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885830));
pub const NS_E_WMP_FILESCANALREADYSTARTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885826));
pub const NS_E_WMP_HME_INVALIDOBJECTID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885825));
pub const NS_E_WMP_MF_CODE_EXPIRED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885824));
pub const NS_E_WMP_HME_NOTSEARCHABLEFORITEMS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885823));
pub const NS_E_WMP_HME_STALEREQUEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885822));
pub const NS_E_WMP_ADDTOLIBRARY_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885817));
pub const NS_E_WMP_WINDOWSAPIFAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885816));
pub const NS_E_WMP_RECORDING_NOT_ALLOWED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885815));
pub const NS_E_DEVICE_NOT_READY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885814));
pub const NS_E_DAMAGED_FILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885813));
pub const NS_E_MPDB_GENERIC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885812));
pub const NS_E_FILE_FAILED_CHECKS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885811));
pub const NS_E_MEDIA_LIBRARY_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885810));
pub const NS_E_SHARING_VIOLATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885809));
pub const NS_E_NO_ERROR_STRING_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885808));
pub const NS_E_WMPOCX_NO_REMOTE_CORE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885807));
pub const NS_E_WMPOCX_NO_ACTIVE_CORE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885806));
pub const NS_E_WMPOCX_NOT_RUNNING_REMOTELY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885805));
pub const NS_E_WMPOCX_NO_REMOTE_WINDOW = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885804));
pub const NS_E_WMPOCX_ERRORMANAGERNOTAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885803));
pub const NS_E_PLUGIN_NOTSHUTDOWN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885802));
pub const NS_E_WMP_CANNOT_FIND_FOLDER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885801));
pub const NS_E_WMP_STREAMING_RECORDING_NOT_ALLOWED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885800));
pub const NS_E_WMP_PLUGINDLL_NOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885799));
pub const NS_E_NEED_TO_ASK_USER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885798));
pub const NS_E_WMPOCX_PLAYER_NOT_DOCKED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885797));
pub const NS_E_WMP_EXTERNAL_NOTREADY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885796));
pub const NS_E_WMP_MLS_STALE_DATA = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885795));
pub const NS_E_WMP_UI_SUBCONTROLSNOTSUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885794));
pub const NS_E_WMP_UI_VERSIONMISMATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885793));
pub const NS_E_WMP_UI_NOTATHEMEFILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885792));
pub const NS_E_WMP_UI_SUBELEMENTNOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885791));
pub const NS_E_WMP_UI_VERSIONPARSE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885790));
pub const NS_E_WMP_UI_VIEWIDNOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885789));
pub const NS_E_WMP_UI_PASSTHROUGH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885788));
pub const NS_E_WMP_UI_OBJECTNOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885787));
pub const NS_E_WMP_UI_SECONDHANDLER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885786));
pub const NS_E_WMP_UI_NOSKININZIP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885785));
pub const NS_S_WMP_UI_VERSIONMISMATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856040));
pub const NS_S_WMP_EXCEPTION = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856041));
pub const NS_E_WMP_URLDOWNLOADFAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885782));
pub const NS_E_WMPOCX_UNABLE_TO_LOAD_SKIN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885781));
pub const NS_E_WMP_INVALID_SKIN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885780));
pub const NS_E_WMP_SENDMAILFAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885779));
pub const NS_E_WMP_LOCKEDINSKINMODE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885778));
pub const NS_E_WMP_FAILED_TO_SAVE_FILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885777));
pub const NS_E_WMP_SAVEAS_READONLY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885776));
pub const NS_E_WMP_FAILED_TO_SAVE_PLAYLIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885775));
pub const NS_E_WMP_FAILED_TO_OPEN_WMD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885774));
pub const NS_E_WMP_CANT_PLAY_PROTECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885773));
pub const NS_E_SHARING_STATE_OUT_OF_SYNC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885772));
pub const NS_E_WMPOCX_REMOTE_PLAYER_ALREADY_RUNNING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885766));
pub const NS_E_WMP_RBC_JPGMAPPINGIMAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885756));
pub const NS_E_WMP_JPGTRANSPARENCY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885755));
pub const NS_E_WMP_INVALID_MAX_VAL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885751));
pub const NS_E_WMP_INVALID_MIN_VAL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885750));
pub const NS_E_WMP_CS_JPGPOSITIONIMAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885746));
pub const NS_E_WMP_CS_NOTEVENLYDIVISIBLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885745));
pub const NS_E_WMPZIP_NOTAZIPFILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885736));
pub const NS_E_WMPZIP_CORRUPT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885735));
pub const NS_E_WMPZIP_FILENOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885734));
pub const NS_E_WMP_IMAGE_FILETYPE_UNSUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885726));
pub const NS_E_WMP_IMAGE_INVALID_FORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885725));
pub const NS_E_WMP_GIF_UNEXPECTED_ENDOFFILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885724));
pub const NS_E_WMP_GIF_INVALID_FORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885723));
pub const NS_E_WMP_GIF_BAD_VERSION_NUMBER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885722));
pub const NS_E_WMP_GIF_NO_IMAGE_IN_FILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885721));
pub const NS_E_WMP_PNG_INVALIDFORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885720));
pub const NS_E_WMP_PNG_UNSUPPORTED_BITDEPTH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885719));
pub const NS_E_WMP_PNG_UNSUPPORTED_COMPRESSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885718));
pub const NS_E_WMP_PNG_UNSUPPORTED_FILTER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885717));
pub const NS_E_WMP_PNG_UNSUPPORTED_INTERLACE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885716));
pub const NS_E_WMP_PNG_UNSUPPORTED_BAD_CRC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885715));
pub const NS_E_WMP_BMP_INVALID_BITMASK = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885714));
pub const NS_E_WMP_BMP_TOPDOWN_DIB_UNSUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885713));
pub const NS_E_WMP_BMP_BITMAP_NOT_CREATED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885712));
pub const NS_E_WMP_BMP_COMPRESSION_UNSUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885711));
pub const NS_E_WMP_BMP_INVALID_FORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885710));
pub const NS_E_WMP_JPG_JERR_ARITHCODING_NOTIMPL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885709));
pub const NS_E_WMP_JPG_INVALID_FORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885708));
pub const NS_E_WMP_JPG_BAD_DCTSIZE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885707));
pub const NS_E_WMP_JPG_BAD_VERSION_NUMBER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885706));
pub const NS_E_WMP_JPG_BAD_PRECISION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885705));
pub const NS_E_WMP_JPG_CCIR601_NOTIMPL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885704));
pub const NS_E_WMP_JPG_NO_IMAGE_IN_FILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885703));
pub const NS_E_WMP_JPG_READ_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885702));
pub const NS_E_WMP_JPG_FRACT_SAMPLE_NOTIMPL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885701));
pub const NS_E_WMP_JPG_IMAGE_TOO_BIG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885700));
pub const NS_E_WMP_JPG_UNEXPECTED_ENDOFFILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885699));
pub const NS_E_WMP_JPG_SOF_UNSUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885698));
pub const NS_E_WMP_JPG_UNKNOWN_MARKER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885697));
pub const NS_S_WMP_LOADED_GIF_IMAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856128));
pub const NS_S_WMP_LOADED_PNG_IMAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856129));
pub const NS_S_WMP_LOADED_BMP_IMAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856130));
pub const NS_S_WMP_LOADED_JPG_IMAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856131));
pub const NS_E_WMP_FAILED_TO_OPEN_IMAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885692));
pub const NS_E_WMP_DAI_SONGTOOSHORT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885687));
pub const NS_E_WMG_RATEUNAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885686));
pub const NS_E_WMG_PLUGINUNAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885685));
pub const NS_E_WMG_CANNOTQUEUE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885684));
pub const NS_E_WMG_PREROLLLICENSEACQUISITIONNOTALLOWED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885683));
pub const NS_E_WMG_UNEXPECTEDPREROLLSTATUS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885682));
pub const NS_S_WMG_FORCE_DROP_FRAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856143));
pub const NS_E_WMG_INVALID_COPP_CERTIFICATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885679));
pub const NS_E_WMG_COPP_SECURITY_INVALID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885678));
pub const NS_E_WMG_COPP_UNSUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885677));
pub const NS_E_WMG_INVALIDSTATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885676));
pub const NS_E_WMG_SINKALREADYEXISTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885675));
pub const NS_E_WMG_NOSDKINTERFACE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885674));
pub const NS_E_WMG_NOTALLOUTPUTSRENDERED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885673));
pub const NS_E_WMG_FILETRANSFERNOTALLOWED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885672));
pub const NS_E_WMR_UNSUPPORTEDSTREAM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885671));
pub const NS_E_WMR_PINNOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885670));
pub const NS_E_WMR_WAITINGONFORMATSWITCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885669));
pub const NS_E_WMR_NOSOURCEFILTER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885668));
pub const NS_E_WMR_PINTYPENOMATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885667));
pub const NS_E_WMR_NOCALLBACKAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885666));
pub const NS_S_WMR_ALREADYRENDERED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856159));
pub const NS_S_WMR_PINTYPEPARTIALMATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856160));
pub const NS_S_WMR_PINTYPEFULLMATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856161));
pub const NS_E_WMR_SAMPLEPROPERTYNOTSET = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885662));
pub const NS_E_WMR_CANNOT_RENDER_BINARY_STREAM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885661));
pub const NS_E_WMG_LICENSE_TAMPERED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885660));
pub const NS_E_WMR_WILLNOT_RENDER_BINARY_STREAM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885659));
pub const NS_S_WMG_ADVISE_DROP_FRAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856166));
pub const NS_S_WMG_ADVISE_DROP_TO_KEYFRAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856167));
pub const NS_E_WMX_UNRECOGNIZED_PLAYLIST_FORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885656));
pub const NS_E_ASX_INVALIDFORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885655));
pub const NS_E_ASX_INVALIDVERSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885654));
pub const NS_E_ASX_INVALID_REPEAT_BLOCK = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885653));
pub const NS_E_ASX_NOTHING_TO_WRITE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885652));
pub const NS_E_URLLIST_INVALIDFORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885651));
pub const NS_E_WMX_ATTRIBUTE_DOES_NOT_EXIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885650));
pub const NS_E_WMX_ATTRIBUTE_ALREADY_EXISTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885649));
pub const NS_E_WMX_ATTRIBUTE_UNRETRIEVABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885648));
pub const NS_E_WMX_ITEM_DOES_NOT_EXIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885647));
pub const NS_E_WMX_ITEM_TYPE_ILLEGAL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885646));
pub const NS_E_WMX_ITEM_UNSETTABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885645));
pub const NS_E_WMX_PLAYLIST_EMPTY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885644));
pub const NS_E_MLS_SMARTPLAYLIST_FILTER_NOT_REGISTERED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885643));
pub const NS_E_WMX_INVALID_FORMAT_OVER_NESTING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885642));
pub const NS_E_WMPCORE_NOSOURCEURLSTRING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885636));
pub const NS_E_WMPCORE_COCREATEFAILEDFORGITOBJECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885635));
pub const NS_E_WMPCORE_FAILEDTOGETMARSHALLEDEVENTHANDLERINTERFACE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885634));
pub const NS_E_WMPCORE_BUFFERTOOSMALL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885633));
pub const NS_E_WMPCORE_UNAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885632));
pub const NS_E_WMPCORE_INVALIDPLAYLISTMODE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885631));
pub const NS_E_WMPCORE_ITEMNOTINPLAYLIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885626));
pub const NS_E_WMPCORE_PLAYLISTEMPTY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885625));
pub const NS_E_WMPCORE_NOBROWSER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885624));
pub const NS_E_WMPCORE_UNRECOGNIZED_MEDIA_URL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885623));
pub const NS_E_WMPCORE_GRAPH_NOT_IN_LIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885622));
pub const NS_E_WMPCORE_PLAYLIST_EMPTY_OR_SINGLE_MEDIA = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885621));
pub const NS_E_WMPCORE_ERRORSINKNOTREGISTERED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885620));
pub const NS_E_WMPCORE_ERRORMANAGERNOTAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885619));
pub const NS_E_WMPCORE_WEBHELPFAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885618));
pub const NS_E_WMPCORE_MEDIA_ERROR_RESUME_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885617));
pub const NS_E_WMPCORE_NO_REF_IN_ENTRY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885616));
pub const NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_NAME_EMPTY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885615));
pub const NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_NAME_ILLEGAL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885614));
pub const NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_VALUE_EMPTY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885613));
pub const NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_VALUE_ILLEGAL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885612));
pub const NS_E_WMPCORE_WMX_LIST_ITEM_ATTRIBUTE_NAME_EMPTY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885611));
pub const NS_E_WMPCORE_WMX_LIST_ITEM_ATTRIBUTE_NAME_ILLEGAL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885610));
pub const NS_E_WMPCORE_WMX_LIST_ITEM_ATTRIBUTE_VALUE_EMPTY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885609));
pub const NS_E_WMPCORE_LIST_ENTRY_NO_REF = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885608));
pub const NS_E_WMPCORE_MISNAMED_FILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885607));
pub const NS_E_WMPCORE_CODEC_NOT_TRUSTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885606));
pub const NS_E_WMPCORE_CODEC_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885605));
pub const NS_E_WMPCORE_CODEC_DOWNLOAD_NOT_ALLOWED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885604));
pub const NS_E_WMPCORE_ERROR_DOWNLOADING_PLAYLIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885603));
pub const NS_E_WMPCORE_FAILED_TO_BUILD_PLAYLIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885602));
pub const NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_NONE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885601));
pub const NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_EXHAUSTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885600));
pub const NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_NAME_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885599));
pub const NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_MORPH_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885598));
pub const NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_INIT_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885597));
pub const NS_E_WMPCORE_MEDIA_ALTERNATE_REF_EMPTY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885596));
pub const NS_E_WMPCORE_PLAYLIST_NO_EVENT_NAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885595));
pub const NS_E_WMPCORE_PLAYLIST_EVENT_ATTRIBUTE_ABSENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885594));
pub const NS_E_WMPCORE_PLAYLIST_EVENT_EMPTY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885593));
pub const NS_E_WMPCORE_PLAYLIST_STACK_EMPTY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885592));
pub const NS_E_WMPCORE_CURRENT_MEDIA_NOT_ACTIVE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885591));
pub const NS_E_WMPCORE_USER_CANCEL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885589));
pub const NS_E_WMPCORE_PLAYLIST_REPEAT_EMPTY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885588));
pub const NS_E_WMPCORE_PLAYLIST_REPEAT_START_MEDIA_NONE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885587));
pub const NS_E_WMPCORE_PLAYLIST_REPEAT_END_MEDIA_NONE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885586));
pub const NS_E_WMPCORE_INVALID_PLAYLIST_URL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885585));
pub const NS_E_WMPCORE_MISMATCHED_RUNTIME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885584));
pub const NS_E_WMPCORE_PLAYLIST_IMPORT_FAILED_NO_ITEMS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885583));
pub const NS_E_WMPCORE_VIDEO_TRANSFORM_FILTER_INSERTION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885582));
pub const NS_E_WMPCORE_MEDIA_UNAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885581));
pub const NS_E_WMPCORE_WMX_ENTRYREF_NO_REF = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885580));
pub const NS_E_WMPCORE_NO_PLAYABLE_MEDIA_IN_PLAYLIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885579));
pub const NS_E_WMPCORE_PLAYLIST_EMPTY_NESTED_PLAYLIST_SKIPPED_ITEMS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885578));
pub const NS_E_WMPCORE_BUSY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885577));
pub const NS_E_WMPCORE_MEDIA_CHILD_PLAYLIST_UNAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885576));
pub const NS_E_WMPCORE_MEDIA_NO_CHILD_PLAYLIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885575));
pub const NS_E_WMPCORE_FILE_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885574));
pub const NS_E_WMPCORE_TEMP_FILE_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885573));
pub const NS_E_WMDM_REVOKED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885572));
pub const NS_E_DDRAW_GENERIC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885571));
pub const NS_E_DISPLAY_MODE_CHANGE_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885570));
pub const NS_E_PLAYLIST_CONTAINS_ERRORS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885569));
pub const NS_E_CHANGING_PROXY_NAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885568));
pub const NS_E_CHANGING_PROXY_PORT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885567));
pub const NS_E_CHANGING_PROXY_EXCEPTIONLIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885566));
pub const NS_E_CHANGING_PROXYBYPASS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885565));
pub const NS_E_CHANGING_PROXY_PROTOCOL_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885564));
pub const NS_E_GRAPH_NOAUDIOLANGUAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885563));
pub const NS_E_GRAPH_NOAUDIOLANGUAGESELECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885562));
pub const NS_E_CORECD_NOTAMEDIACD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885561));
pub const NS_E_WMPCORE_MEDIA_URL_TOO_LONG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885560));
pub const NS_E_WMPFLASH_CANT_FIND_COM_SERVER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885559));
pub const NS_E_WMPFLASH_INCOMPATIBLEVERSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885558));
pub const NS_E_WMPOCXGRAPH_IE_DISALLOWS_ACTIVEX_CONTROLS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885557));
pub const NS_E_NEED_CORE_REFERENCE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885556));
pub const NS_E_MEDIACD_READ_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885555));
pub const NS_E_IE_DISALLOWS_ACTIVEX_CONTROLS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885554));
pub const NS_E_FLASH_PLAYBACK_NOT_ALLOWED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885553));
pub const NS_E_UNABLE_TO_CREATE_RIP_LOCATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885552));
pub const NS_E_WMPCORE_SOME_CODECS_MISSING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885551));
pub const NS_E_WMP_RIP_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885550));
pub const NS_E_WMP_FAILED_TO_RIP_TRACK = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885549));
pub const NS_E_WMP_ERASE_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885548));
pub const NS_E_WMP_FORMAT_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885547));
pub const NS_E_WMP_CANNOT_BURN_NON_LOCAL_FILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885546));
pub const NS_E_WMP_FILE_TYPE_CANNOT_BURN_TO_AUDIO_CD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885545));
pub const NS_E_WMP_FILE_DOES_NOT_FIT_ON_CD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885544));
pub const NS_E_WMP_FILE_NO_DURATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885543));
pub const NS_E_PDA_FAILED_TO_BURN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885542));
pub const NS_S_NEED_TO_BUY_BURN_RIGHTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856283));
pub const NS_E_FAILED_DOWNLOAD_ABORT_BURN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885540));
pub const NS_E_WMPCORE_DEVICE_DRIVERS_MISSING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885539));
pub const NS_S_WMPCORE_PLAYLISTCLEARABORT = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856318));
pub const NS_S_WMPCORE_PLAYLISTREMOVEITEMABORT = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856319));
pub const NS_S_WMPCORE_PLAYLIST_CREATION_PENDING = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856322));
pub const NS_S_WMPCORE_MEDIA_VALIDATION_PENDING = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856323));
pub const NS_S_WMPCORE_PLAYLIST_REPEAT_SECONDARY_SEGMENTS_IGNORED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856324));
pub const NS_S_WMPCORE_COMMAND_NOT_AVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856325));
pub const NS_S_WMPCORE_PLAYLIST_NAME_AUTO_GENERATED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856326));
pub const NS_S_WMPCORE_PLAYLIST_IMPORT_MISSING_ITEMS = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856327));
pub const NS_S_WMPCORE_PLAYLIST_COLLAPSED_TO_SINGLE_MEDIA = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856328));
pub const NS_S_WMPCORE_MEDIA_CHILD_PLAYLIST_OPEN_PENDING = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856329));
pub const NS_S_WMPCORE_MORE_NODES_AVAIABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856330));
pub const NS_E_WMPIM_USEROFFLINE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885466));
pub const NS_E_WMPIM_USERCANCELED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885465));
pub const NS_E_WMPIM_DIALUPFAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885464));
pub const NS_E_WINSOCK_ERROR_STRING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885463));
pub const NS_E_WMPBR_NOLISTENER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885456));
pub const NS_E_WMPBR_BACKUPCANCEL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885455));
pub const NS_E_WMPBR_RESTORECANCEL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885454));
pub const NS_E_WMPBR_ERRORWITHURL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885453));
pub const NS_E_WMPBR_NAMECOLLISION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885452));
pub const NS_S_WMPBR_SUCCESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856373));
pub const NS_S_WMPBR_PARTIALSUCCESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856374));
pub const NS_E_WMPBR_DRIVE_INVALID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885449));
pub const NS_E_WMPBR_BACKUPRESTOREFAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885448));
pub const NS_S_WMPEFFECT_TRANSPARENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856388));
pub const NS_S_WMPEFFECT_OPAQUE = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856389));
pub const NS_S_OPERATION_PENDING = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856398));
pub const NS_E_WMP_CONVERT_FILE_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885416));
pub const NS_E_WMP_CONVERT_NO_RIGHTS_ERRORURL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885415));
pub const NS_E_WMP_CONVERT_NO_RIGHTS_NOERRORURL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885414));
pub const NS_E_WMP_CONVERT_FILE_CORRUPT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885413));
pub const NS_E_WMP_CONVERT_PLUGIN_UNAVAILABLE_ERRORURL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885412));
pub const NS_E_WMP_CONVERT_PLUGIN_UNAVAILABLE_NOERRORURL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885411));
pub const NS_E_WMP_CONVERT_PLUGIN_UNKNOWN_FILE_OWNER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885410));
pub const NS_E_DVD_DISC_COPY_PROTECT_OUTPUT_NS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885408));
pub const NS_E_DVD_DISC_COPY_PROTECT_OUTPUT_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885407));
pub const NS_E_DVD_NO_SUBPICTURE_STREAM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885406));
pub const NS_E_DVD_COPY_PROTECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885405));
pub const NS_E_DVD_AUTHORING_PROBLEM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885404));
pub const NS_E_DVD_INVALID_DISC_REGION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885403));
pub const NS_E_DVD_COMPATIBLE_VIDEO_CARD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885402));
pub const NS_E_DVD_MACROVISION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885401));
pub const NS_E_DVD_SYSTEM_DECODER_REGION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885400));
pub const NS_E_DVD_DISC_DECODER_REGION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885399));
pub const NS_E_DVD_NO_VIDEO_STREAM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885398));
pub const NS_E_DVD_NO_AUDIO_STREAM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885397));
pub const NS_E_DVD_GRAPH_BUILDING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885396));
pub const NS_E_DVD_NO_DECODER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885395));
pub const NS_E_DVD_PARENTAL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885394));
pub const NS_E_DVD_CANNOT_JUMP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885393));
pub const NS_E_DVD_DEVICE_CONTENTION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885392));
pub const NS_E_DVD_NO_VIDEO_MEMORY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885391));
pub const NS_E_DVD_CANNOT_COPY_PROTECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885390));
pub const NS_E_DVD_REQUIRED_PROPERTY_NOT_SET = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885389));
pub const NS_E_DVD_INVALID_TITLE_CHAPTER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885388));
pub const NS_E_NO_CD_BURNER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885386));
pub const NS_E_DEVICE_IS_NOT_READY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885385));
pub const NS_E_PDA_UNSUPPORTED_FORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885384));
pub const NS_E_NO_PDA = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885383));
pub const NS_E_PDA_UNSPECIFIED_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885382));
pub const NS_E_MEMSTORAGE_BAD_DATA = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885381));
pub const NS_E_PDA_FAIL_SELECT_DEVICE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885380));
pub const NS_E_PDA_FAIL_READ_WAVE_FILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885379));
pub const NS_E_IMAPI_LOSSOFSTREAMING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885378));
pub const NS_E_PDA_DEVICE_FULL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885377));
pub const NS_E_FAIL_LAUNCH_ROXIO_PLUGIN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885376));
pub const NS_E_PDA_DEVICE_FULL_IN_SESSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885375));
pub const NS_E_IMAPI_MEDIUM_INVALIDTYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885374));
pub const NS_E_PDA_MANUALDEVICE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885373));
pub const NS_E_PDA_PARTNERSHIPNOTEXIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885372));
pub const NS_E_PDA_CANNOT_CREATE_ADDITIONAL_SYNC_RELATIONSHIP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885371));
pub const NS_E_PDA_NO_TRANSCODE_OF_DRM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885370));
pub const NS_E_PDA_TRANSCODECACHEFULL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885369));
pub const NS_E_PDA_TOO_MANY_FILE_COLLISIONS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885368));
pub const NS_E_PDA_CANNOT_TRANSCODE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885367));
pub const NS_E_PDA_TOO_MANY_FILES_IN_DIRECTORY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885366));
pub const NS_E_PROCESSINGSHOWSYNCWIZARD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885365));
pub const NS_E_PDA_TRANSCODE_NOT_PERMITTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885364));
pub const NS_E_PDA_INITIALIZINGDEVICES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885363));
pub const NS_E_PDA_OBSOLETE_SP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885362));
pub const NS_E_PDA_TITLE_COLLISION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885361));
pub const NS_E_PDA_DEVICESUPPORTDISABLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885360));
pub const NS_E_PDA_NO_LONGER_AVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885359));
pub const NS_E_PDA_ENCODER_NOT_RESPONDING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885358));
pub const NS_E_PDA_CANNOT_SYNC_FROM_LOCATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885357));
pub const NS_E_WMP_PROTOCOL_PROBLEM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885356));
pub const NS_E_WMP_NO_DISK_SPACE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885355));
pub const NS_E_WMP_LOGON_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885354));
pub const NS_E_WMP_CANNOT_FIND_FILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885353));
pub const NS_E_WMP_SERVER_INACCESSIBLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885352));
pub const NS_E_WMP_UNSUPPORTED_FORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885351));
pub const NS_E_WMP_DSHOW_UNSUPPORTED_FORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885350));
pub const NS_E_WMP_PLAYLIST_EXISTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885349));
pub const NS_E_WMP_NONMEDIA_FILES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885348));
pub const NS_E_WMP_INVALID_ASX = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885347));
pub const NS_E_WMP_ALREADY_IN_USE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885346));
pub const NS_E_WMP_IMAPI_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885345));
pub const NS_E_WMP_WMDM_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885344));
pub const NS_E_WMP_CODEC_NEEDED_WITH_4CC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885343));
pub const NS_E_WMP_CODEC_NEEDED_WITH_FORMATTAG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885342));
pub const NS_E_WMP_MSSAP_NOT_AVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885341));
pub const NS_E_WMP_WMDM_INTERFACEDEAD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885340));
pub const NS_E_WMP_WMDM_NOTCERTIFIED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885339));
pub const NS_E_WMP_WMDM_LICENSE_NOTEXIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885338));
pub const NS_E_WMP_WMDM_LICENSE_EXPIRED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885337));
pub const NS_E_WMP_WMDM_BUSY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885336));
pub const NS_E_WMP_WMDM_NORIGHTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885335));
pub const NS_E_WMP_WMDM_INCORRECT_RIGHTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885334));
pub const NS_E_WMP_IMAPI_GENERIC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885333));
pub const NS_E_WMP_IMAPI_DEVICE_NOTPRESENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885331));
pub const NS_E_WMP_IMAPI_DEVICE_BUSY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885330));
pub const NS_E_WMP_IMAPI_LOSS_OF_STREAMING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885329));
pub const NS_E_WMP_SERVER_UNAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885328));
pub const NS_E_WMP_FILE_OPEN_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885327));
pub const NS_E_WMP_VERIFY_ONLINE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885326));
pub const NS_E_WMP_SERVER_NOT_RESPONDING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885325));
pub const NS_E_WMP_DRM_CORRUPT_BACKUP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885324));
pub const NS_E_WMP_DRM_LICENSE_SERVER_UNAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885323));
pub const NS_E_WMP_NETWORK_FIREWALL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885322));
pub const NS_E_WMP_NO_REMOVABLE_MEDIA = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885321));
pub const NS_E_WMP_PROXY_CONNECT_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885320));
pub const NS_E_WMP_NEED_UPGRADE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885319));
pub const NS_E_WMP_AUDIO_HW_PROBLEM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885318));
pub const NS_E_WMP_INVALID_PROTOCOL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885317));
pub const NS_E_WMP_INVALID_LIBRARY_ADD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885316));
pub const NS_E_WMP_MMS_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885315));
pub const NS_E_WMP_NO_PROTOCOLS_SELECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885314));
pub const NS_E_WMP_GOFULLSCREEN_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885313));
pub const NS_E_WMP_NETWORK_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885312));
pub const NS_E_WMP_CONNECT_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885311));
pub const NS_E_WMP_MULTICAST_DISABLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885310));
pub const NS_E_WMP_SERVER_DNS_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885309));
pub const NS_E_WMP_PROXY_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885308));
pub const NS_E_WMP_TAMPERED_CONTENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885307));
pub const NS_E_WMP_OUTOFMEMORY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885306));
pub const NS_E_WMP_AUDIO_CODEC_NOT_INSTALLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885305));
pub const NS_E_WMP_VIDEO_CODEC_NOT_INSTALLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885304));
pub const NS_E_WMP_IMAPI_DEVICE_INVALIDTYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885303));
pub const NS_E_WMP_DRM_DRIVER_AUTH_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885302));
pub const NS_E_WMP_NETWORK_RESOURCE_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885301));
pub const NS_E_WMP_UPGRADE_APPLICATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885300));
pub const NS_E_WMP_UNKNOWN_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885299));
pub const NS_E_WMP_INVALID_KEY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885298));
pub const NS_E_WMP_CD_ANOTHER_USER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885297));
pub const NS_E_WMP_DRM_NEEDS_AUTHORIZATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885296));
pub const NS_E_WMP_BAD_DRIVER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885295));
pub const NS_E_WMP_ACCESS_DENIED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885294));
pub const NS_E_WMP_LICENSE_RESTRICTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885293));
pub const NS_E_WMP_INVALID_REQUEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885292));
pub const NS_E_WMP_CD_STASH_NO_SPACE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885291));
pub const NS_E_WMP_DRM_NEW_HARDWARE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885290));
pub const NS_E_WMP_DRM_INVALID_SIG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885289));
pub const NS_E_WMP_DRM_CANNOT_RESTORE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885288));
pub const NS_E_WMP_BURN_DISC_OVERFLOW = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885287));
pub const NS_E_WMP_DRM_GENERIC_LICENSE_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885286));
pub const NS_E_WMP_DRM_NO_SECURE_CLOCK = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885285));
pub const NS_E_WMP_DRM_NO_RIGHTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885284));
pub const NS_E_WMP_DRM_INDIV_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885283));
pub const NS_E_WMP_SERVER_NONEWCONNECTIONS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885282));
pub const NS_E_WMP_MULTIPLE_ERROR_IN_PLAYLIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885281));
pub const NS_E_WMP_IMAPI2_ERASE_FAIL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885280));
pub const NS_E_WMP_IMAPI2_ERASE_DEVICE_BUSY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885279));
pub const NS_E_WMP_DRM_COMPONENT_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885278));
pub const NS_E_WMP_DRM_NO_DEVICE_CERT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885277));
pub const NS_E_WMP_SERVER_SECURITY_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885276));
pub const NS_E_WMP_AUDIO_DEVICE_LOST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885275));
pub const NS_E_WMP_IMAPI_MEDIA_INCOMPATIBLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885274));
pub const NS_E_SYNCWIZ_DEVICE_FULL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885266));
pub const NS_E_SYNCWIZ_CANNOT_CHANGE_SETTINGS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885265));
pub const NS_E_TRANSCODE_DELETECACHEERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885264));
pub const NS_E_CD_NO_BUFFERS_READ = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885256));
pub const NS_E_CD_EMPTY_TRACK_QUEUE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885255));
pub const NS_E_CD_NO_READER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885254));
pub const NS_E_CD_ISRC_INVALID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885253));
pub const NS_E_CD_MEDIA_CATALOG_NUMBER_INVALID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885252));
pub const NS_E_SLOW_READ_DIGITAL_WITH_ERRORCORRECTION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885251));
pub const NS_E_CD_SPEEDDETECT_NOT_ENOUGH_READS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885250));
pub const NS_E_CD_QUEUEING_DISABLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885249));
pub const NS_E_WMP_DRM_ACQUIRING_LICENSE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885246));
pub const NS_E_WMP_DRM_LICENSE_EXPIRED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885245));
pub const NS_E_WMP_DRM_LICENSE_NOTACQUIRED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885244));
pub const NS_E_WMP_DRM_LICENSE_NOTENABLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885243));
pub const NS_E_WMP_DRM_LICENSE_UNUSABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885242));
pub const NS_E_WMP_DRM_LICENSE_CONTENT_REVOKED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885241));
pub const NS_E_WMP_DRM_LICENSE_NOSAP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885240));
pub const NS_E_WMP_DRM_UNABLE_TO_ACQUIRE_LICENSE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885239));
pub const NS_E_WMP_LICENSE_REQUIRED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885238));
pub const NS_E_WMP_PROTECTED_CONTENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885237));
pub const NS_E_WMP_POLICY_VALUE_NOT_CONFIGURED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885206));
pub const NS_E_PDA_CANNOT_SYNC_FROM_INTERNET = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885196));
pub const NS_E_PDA_CANNOT_SYNC_INVALID_PLAYLIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885195));
pub const NS_E_PDA_FAILED_TO_SYNCHRONIZE_FILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885194));
pub const NS_E_PDA_SYNC_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885193));
pub const NS_E_PDA_DELETE_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885192));
pub const NS_E_PDA_FAILED_TO_RETRIEVE_FILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885191));
pub const NS_E_PDA_DEVICE_NOT_RESPONDING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885190));
pub const NS_E_PDA_FAILED_TO_TRANSCODE_PHOTO = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885189));
pub const NS_E_PDA_FAILED_TO_ENCRYPT_TRANSCODED_FILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885188));
pub const NS_E_PDA_CANNOT_TRANSCODE_TO_AUDIO = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885187));
pub const NS_E_PDA_CANNOT_TRANSCODE_TO_VIDEO = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885186));
pub const NS_E_PDA_CANNOT_TRANSCODE_TO_IMAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885185));
pub const NS_E_PDA_RETRIEVED_FILE_FILENAME_TOO_LONG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885184));
pub const NS_E_PDA_CEWMDM_DRM_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885183));
pub const NS_E_INCOMPLETE_PLAYLIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885182));
pub const NS_E_PDA_SYNC_RUNNING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885181));
pub const NS_E_PDA_SYNC_LOGIN_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885180));
pub const NS_E_PDA_TRANSCODE_CODEC_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885179));
pub const NS_E_CANNOT_SYNC_DRM_TO_NON_JANUS_DEVICE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885178));
pub const NS_E_CANNOT_SYNC_PREVIOUS_SYNC_RUNNING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885177));
pub const NS_E_WMP_HWND_NOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885156));
pub const NS_E_BKGDOWNLOAD_WRONG_NO_FILES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885155));
pub const NS_E_BKGDOWNLOAD_COMPLETECANCELLEDJOB = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885154));
pub const NS_E_BKGDOWNLOAD_CANCELCOMPLETEDJOB = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885153));
pub const NS_E_BKGDOWNLOAD_NOJOBPOINTER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885152));
pub const NS_E_BKGDOWNLOAD_INVALIDJOBSIGNATURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885151));
pub const NS_E_BKGDOWNLOAD_FAILED_TO_CREATE_TEMPFILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885150));
pub const NS_E_BKGDOWNLOAD_PLUGIN_FAILEDINITIALIZE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885149));
pub const NS_E_BKGDOWNLOAD_PLUGIN_FAILEDTOMOVEFILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885148));
pub const NS_E_BKGDOWNLOAD_CALLFUNCFAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885147));
pub const NS_E_BKGDOWNLOAD_CALLFUNCTIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885146));
pub const NS_E_BKGDOWNLOAD_CALLFUNCENDED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885145));
pub const NS_E_BKGDOWNLOAD_WMDUNPACKFAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885144));
pub const NS_E_BKGDOWNLOAD_FAILEDINITIALIZE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885143));
pub const NS_E_INTERFACE_NOT_REGISTERED_IN_GIT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885142));
pub const NS_E_BKGDOWNLOAD_INVALID_FILE_NAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885141));
pub const NS_E_IMAGE_DOWNLOAD_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885106));
pub const NS_E_WMP_UDRM_NOUSERLIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885056));
pub const NS_E_WMP_DRM_NOT_ACQUIRING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885055));
pub const NS_E_WMP_BSTR_TOO_LONG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072885006));
pub const NS_E_WMP_AUTOPLAY_INVALID_STATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884996));
pub const NS_E_WMP_COMPONENT_REVOKED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884986));
pub const NS_E_CURL_NOTSAFE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884956));
pub const NS_E_CURL_INVALIDCHAR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884955));
pub const NS_E_CURL_INVALIDHOSTNAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884954));
pub const NS_E_CURL_INVALIDPATH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884953));
pub const NS_E_CURL_INVALIDSCHEME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884952));
pub const NS_E_CURL_INVALIDURL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884951));
pub const NS_E_CURL_CANTWALK = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884949));
pub const NS_E_CURL_INVALIDPORT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884948));
pub const NS_E_CURLHELPER_NOTADIRECTORY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884947));
pub const NS_E_CURLHELPER_NOTAFILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884946));
pub const NS_E_CURL_CANTDECODE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884945));
pub const NS_E_CURLHELPER_NOTRELATIVE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884944));
pub const NS_E_CURL_INVALIDBUFFERSIZE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884943));
pub const NS_E_SUBSCRIPTIONSERVICE_PLAYBACK_DISALLOWED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884906));
pub const NS_E_CANNOT_BUY_OR_DOWNLOAD_FROM_MULTIPLE_SERVICES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884905));
pub const NS_E_CANNOT_BUY_OR_DOWNLOAD_CONTENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884904));
pub const NS_S_TRACK_BUY_REQUIRES_ALBUM_PURCHASE = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856921));
pub const NS_E_NOT_CONTENT_PARTNER_TRACK = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884902));
pub const NS_E_TRACK_DOWNLOAD_REQUIRES_ALBUM_PURCHASE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884901));
pub const NS_E_TRACK_DOWNLOAD_REQUIRES_PURCHASE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884900));
pub const NS_E_TRACK_PURCHASE_MAXIMUM_EXCEEDED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884899));
pub const NS_S_NAVIGATION_COMPLETE_WITH_ERRORS = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856926));
pub const NS_E_SUBSCRIPTIONSERVICE_LOGIN_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884897));
pub const NS_E_SUBSCRIPTIONSERVICE_DOWNLOAD_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884896));
pub const NS_S_TRACK_ALREADY_DOWNLOADED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 856929));
pub const NS_E_CONTENT_PARTNER_STILL_INITIALIZING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884894));
pub const NS_E_OPEN_CONTAINING_FOLDER_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884893));
pub const NS_E_ADVANCEDEDIT_TOO_MANY_PICTURES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884886));
pub const NS_E_REDIRECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884856));
pub const NS_E_STALE_PRESENTATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884855));
pub const NS_E_NAMESPACE_WRONG_PERSIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884854));
pub const NS_E_NAMESPACE_WRONG_TYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884853));
pub const NS_E_NAMESPACE_NODE_CONFLICT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884852));
pub const NS_E_NAMESPACE_NODE_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884851));
pub const NS_E_NAMESPACE_BUFFER_TOO_SMALL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884850));
pub const NS_E_NAMESPACE_TOO_MANY_CALLBACKS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884849));
pub const NS_E_NAMESPACE_DUPLICATE_CALLBACK = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884848));
pub const NS_E_NAMESPACE_CALLBACK_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884847));
pub const NS_E_NAMESPACE_NAME_TOO_LONG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884846));
pub const NS_E_NAMESPACE_DUPLICATE_NAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884845));
pub const NS_E_NAMESPACE_EMPTY_NAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884844));
pub const NS_E_NAMESPACE_INDEX_TOO_LARGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884843));
pub const NS_E_NAMESPACE_BAD_NAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884842));
pub const NS_E_NAMESPACE_WRONG_SECURITY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884841));
pub const NS_E_CACHE_ARCHIVE_CONFLICT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884756));
pub const NS_E_CACHE_ORIGIN_SERVER_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884755));
pub const NS_E_CACHE_ORIGIN_SERVER_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884754));
pub const NS_E_CACHE_NOT_BROADCAST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884753));
pub const NS_E_CACHE_CANNOT_BE_CACHED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884752));
pub const NS_E_CACHE_NOT_MODIFIED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884751));
pub const NS_E_CANNOT_REMOVE_PUBLISHING_POINT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884656));
pub const NS_E_CANNOT_REMOVE_PLUGIN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884655));
pub const NS_E_WRONG_PUBLISHING_POINT_TYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884654));
pub const NS_E_UNSUPPORTED_LOAD_TYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884653));
pub const NS_E_INVALID_PLUGIN_LOAD_TYPE_CONFIGURATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884652));
pub const NS_E_INVALID_PUBLISHING_POINT_NAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884651));
pub const NS_E_TOO_MANY_MULTICAST_SINKS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884650));
pub const NS_E_PUBLISHING_POINT_INVALID_REQUEST_WHILE_STARTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884649));
pub const NS_E_MULTICAST_PLUGIN_NOT_ENABLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884648));
pub const NS_E_INVALID_OPERATING_SYSTEM_VERSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884647));
pub const NS_E_PUBLISHING_POINT_REMOVED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884646));
pub const NS_E_INVALID_PUSH_PUBLISHING_POINT_START_REQUEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884645));
pub const NS_E_UNSUPPORTED_LANGUAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884644));
pub const NS_E_WRONG_OS_VERSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884643));
pub const NS_E_PUBLISHING_POINT_STOPPED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884642));
pub const NS_E_PLAYLIST_ENTRY_ALREADY_PLAYING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884556));
pub const NS_E_EMPTY_PLAYLIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884555));
pub const NS_E_PLAYLIST_PARSE_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884554));
pub const NS_E_PLAYLIST_UNSUPPORTED_ENTRY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884553));
pub const NS_E_PLAYLIST_ENTRY_NOT_IN_PLAYLIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884552));
pub const NS_E_PLAYLIST_ENTRY_SEEK = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884551));
pub const NS_E_PLAYLIST_RECURSIVE_PLAYLISTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884550));
pub const NS_E_PLAYLIST_TOO_MANY_NESTED_PLAYLISTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884549));
pub const NS_E_PLAYLIST_SHUTDOWN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884548));
pub const NS_E_PLAYLIST_END_RECEDING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884547));
pub const NS_I_PLAYLIST_CHANGE_RECEDING = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074599102));
pub const NS_E_DATAPATH_NO_SINK = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884456));
pub const NS_S_PUBLISHING_POINT_STARTED_WITH_FAILED_SINKS = @import("../zig.zig").typedConst(HRESULT, @as(i32, 857369));
pub const NS_E_INVALID_PUSH_TEMPLATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884454));
pub const NS_E_INVALID_PUSH_PUBLISHING_POINT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884453));
pub const NS_E_CRITICAL_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884452));
pub const NS_E_NO_NEW_CONNECTIONS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884451));
pub const NS_E_WSX_INVALID_VERSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884450));
pub const NS_E_HEADER_MISMATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884449));
pub const NS_E_PUSH_DUPLICATE_PUBLISHING_POINT_NAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884448));
pub const NS_E_NO_SCRIPT_ENGINE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884356));
pub const NS_E_PLUGIN_ERROR_REPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884355));
pub const NS_E_SOURCE_PLUGIN_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884354));
pub const NS_E_PLAYLIST_PLUGIN_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884353));
pub const NS_E_DATA_SOURCE_ENUMERATION_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884352));
pub const NS_E_MEDIA_PARSER_INVALID_FORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884351));
pub const NS_E_SCRIPT_DEBUGGER_NOT_INSTALLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884350));
pub const NS_E_FEATURE_REQUIRES_ENTERPRISE_SERVER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884349));
pub const NS_E_WIZARD_RUNNING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884348));
pub const NS_E_INVALID_LOG_URL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884347));
pub const NS_E_INVALID_MTU_RANGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884346));
pub const NS_E_INVALID_PLAY_STATISTICS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884345));
pub const NS_E_LOG_NEED_TO_BE_SKIPPED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884344));
pub const NS_E_HTTP_TEXT_DATACONTAINER_SIZE_LIMIT_EXCEEDED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884343));
pub const NS_E_PORT_IN_USE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884342));
pub const NS_E_PORT_IN_USE_HTTP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884341));
pub const NS_E_HTTP_TEXT_DATACONTAINER_INVALID_SERVER_RESPONSE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884340));
pub const NS_E_ARCHIVE_REACH_QUOTA = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884339));
pub const NS_E_ARCHIVE_ABORT_DUE_TO_BCAST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884338));
pub const NS_E_ARCHIVE_GAP_DETECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884337));
pub const NS_E_AUTHORIZATION_FILE_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072884336));
pub const NS_E_BAD_MARKIN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882856));
pub const NS_E_BAD_MARKOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882855));
pub const NS_E_NOMATCHING_MEDIASOURCE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882854));
pub const NS_E_UNSUPPORTED_SOURCETYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882853));
pub const NS_E_TOO_MANY_AUDIO = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882852));
pub const NS_E_TOO_MANY_VIDEO = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882851));
pub const NS_E_NOMATCHING_ELEMENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882850));
pub const NS_E_MISMATCHED_MEDIACONTENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882849));
pub const NS_E_CANNOT_DELETE_ACTIVE_SOURCEGROUP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882848));
pub const NS_E_AUDIODEVICE_BUSY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882847));
pub const NS_E_AUDIODEVICE_UNEXPECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882846));
pub const NS_E_AUDIODEVICE_BADFORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882845));
pub const NS_E_VIDEODEVICE_BUSY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882844));
pub const NS_E_VIDEODEVICE_UNEXPECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882843));
pub const NS_E_INVALIDCALL_WHILE_ENCODER_RUNNING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882842));
pub const NS_E_NO_PROFILE_IN_SOURCEGROUP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882841));
pub const NS_E_VIDEODRIVER_UNSTABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882840));
pub const NS_E_VIDCAPSTARTFAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882839));
pub const NS_E_VIDSOURCECOMPRESSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882838));
pub const NS_E_VIDSOURCESIZE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882837));
pub const NS_E_ICMQUERYFORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882836));
pub const NS_E_VIDCAPCREATEWINDOW = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882835));
pub const NS_E_VIDCAPDRVINUSE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882834));
pub const NS_E_NO_MEDIAFORMAT_IN_SOURCE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882833));
pub const NS_E_NO_VALID_OUTPUT_STREAM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882832));
pub const NS_E_NO_VALID_SOURCE_PLUGIN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882831));
pub const NS_E_NO_ACTIVE_SOURCEGROUP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882830));
pub const NS_E_NO_SCRIPT_STREAM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882829));
pub const NS_E_INVALIDCALL_WHILE_ARCHIVAL_RUNNING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882828));
pub const NS_E_INVALIDPACKETSIZE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882827));
pub const NS_E_PLUGIN_CLSID_INVALID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882826));
pub const NS_E_UNSUPPORTED_ARCHIVETYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882825));
pub const NS_E_UNSUPPORTED_ARCHIVEOPERATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882824));
pub const NS_E_ARCHIVE_FILENAME_NOTSET = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882823));
pub const NS_E_SOURCEGROUP_NOTPREPARED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882822));
pub const NS_E_PROFILE_MISMATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882821));
pub const NS_E_INCORRECTCLIPSETTINGS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882820));
pub const NS_E_NOSTATSAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882819));
pub const NS_E_NOTARCHIVING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882818));
pub const NS_E_INVALIDCALL_WHILE_ENCODER_STOPPED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882817));
pub const NS_E_NOSOURCEGROUPS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882816));
pub const NS_E_INVALIDINPUTFPS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882815));
pub const NS_E_NO_DATAVIEW_SUPPORT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882814));
pub const NS_E_CODEC_UNAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882813));
pub const NS_E_ARCHIVE_SAME_AS_INPUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882812));
pub const NS_E_SOURCE_NOTSPECIFIED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882811));
pub const NS_E_NO_REALTIME_TIMECOMPRESSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882810));
pub const NS_E_UNSUPPORTED_ENCODER_DEVICE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882809));
pub const NS_E_UNEXPECTED_DISPLAY_SETTINGS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882808));
pub const NS_E_NO_AUDIODATA = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882807));
pub const NS_E_INPUTSOURCE_PROBLEM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882806));
pub const NS_E_WME_VERSION_MISMATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882805));
pub const NS_E_NO_REALTIME_PREPROCESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882804));
pub const NS_E_NO_REPEAT_PREPROCESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882803));
pub const NS_E_CANNOT_PAUSE_LIVEBROADCAST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882802));
pub const NS_E_DRM_PROFILE_NOT_SET = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882801));
pub const NS_E_DUPLICATE_DRMPROFILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882800));
pub const NS_E_INVALID_DEVICE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882799));
pub const NS_E_SPEECHEDL_ON_NON_MIXEDMODE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882798));
pub const NS_E_DRM_PASSWORD_TOO_LONG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882797));
pub const NS_E_DEVCONTROL_FAILED_SEEK = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882796));
pub const NS_E_INTERLACE_REQUIRE_SAMESIZE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882795));
pub const NS_E_TOO_MANY_DEVICECONTROL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882794));
pub const NS_E_NO_MULTIPASS_FOR_LIVEDEVICE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882793));
pub const NS_E_MISSING_AUDIENCE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882792));
pub const NS_E_AUDIENCE_CONTENTTYPE_MISMATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882791));
pub const NS_E_MISSING_SOURCE_INDEX = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882790));
pub const NS_E_NUM_LANGUAGE_MISMATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882789));
pub const NS_E_LANGUAGE_MISMATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882788));
pub const NS_E_VBRMODE_MISMATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882787));
pub const NS_E_INVALID_INPUT_AUDIENCE_INDEX = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882786));
pub const NS_E_INVALID_INPUT_LANGUAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882785));
pub const NS_E_INVALID_INPUT_STREAM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882784));
pub const NS_E_EXPECT_MONO_WAV_INPUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882783));
pub const NS_E_INPUT_WAVFORMAT_MISMATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882782));
pub const NS_E_RECORDQ_DISK_FULL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882781));
pub const NS_E_NO_PAL_INVERSE_TELECINE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882780));
pub const NS_E_ACTIVE_SG_DEVICE_DISCONNECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882779));
pub const NS_E_ACTIVE_SG_DEVICE_CONTROL_DISCONNECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882778));
pub const NS_E_NO_FRAMES_SUBMITTED_TO_ANALYZER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882777));
pub const NS_E_INPUT_DOESNOT_SUPPORT_SMPTE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882776));
pub const NS_E_NO_SMPTE_WITH_MULTIPLE_SOURCEGROUPS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882775));
pub const NS_E_BAD_CONTENTEDL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882774));
pub const NS_E_INTERLACEMODE_MISMATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882773));
pub const NS_E_NONSQUAREPIXELMODE_MISMATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882772));
pub const NS_E_SMPTEMODE_MISMATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882771));
pub const NS_E_END_OF_TAPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882770));
pub const NS_E_NO_MEDIA_IN_AUDIENCE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882769));
pub const NS_E_NO_AUDIENCES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882768));
pub const NS_E_NO_AUDIO_COMPAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882767));
pub const NS_E_INVALID_VBR_COMPAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882766));
pub const NS_E_NO_PROFILE_NAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882765));
pub const NS_E_INVALID_VBR_WITH_UNCOMP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882764));
pub const NS_E_MULTIPLE_VBR_AUDIENCES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882763));
pub const NS_E_UNCOMP_COMP_COMBINATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882762));
pub const NS_E_MULTIPLE_AUDIO_CODECS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882761));
pub const NS_E_MULTIPLE_AUDIO_FORMATS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882760));
pub const NS_E_AUDIO_BITRATE_STEPDOWN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882759));
pub const NS_E_INVALID_AUDIO_PEAKRATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882758));
pub const NS_E_INVALID_AUDIO_PEAKRATE_2 = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882757));
pub const NS_E_INVALID_AUDIO_BUFFERMAX = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882756));
pub const NS_E_MULTIPLE_VIDEO_CODECS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882755));
pub const NS_E_MULTIPLE_VIDEO_SIZES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882754));
pub const NS_E_INVALID_VIDEO_BITRATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882753));
pub const NS_E_VIDEO_BITRATE_STEPDOWN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882752));
pub const NS_E_INVALID_VIDEO_PEAKRATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882751));
pub const NS_E_INVALID_VIDEO_PEAKRATE_2 = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882750));
pub const NS_E_INVALID_VIDEO_WIDTH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882749));
pub const NS_E_INVALID_VIDEO_HEIGHT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882748));
pub const NS_E_INVALID_VIDEO_FPS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882747));
pub const NS_E_INVALID_VIDEO_KEYFRAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882746));
pub const NS_E_INVALID_VIDEO_IQUALITY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882745));
pub const NS_E_INVALID_VIDEO_CQUALITY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882744));
pub const NS_E_INVALID_VIDEO_BUFFER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882743));
pub const NS_E_INVALID_VIDEO_BUFFERMAX = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882742));
pub const NS_E_INVALID_VIDEO_BUFFERMAX_2 = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882741));
pub const NS_E_INVALID_VIDEO_WIDTH_ALIGN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882740));
pub const NS_E_INVALID_VIDEO_HEIGHT_ALIGN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882739));
pub const NS_E_MULTIPLE_SCRIPT_BITRATES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882738));
pub const NS_E_INVALID_SCRIPT_BITRATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882737));
pub const NS_E_MULTIPLE_FILE_BITRATES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882736));
pub const NS_E_INVALID_FILE_BITRATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882735));
pub const NS_E_SAME_AS_INPUT_COMBINATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882734));
pub const NS_E_SOURCE_CANNOT_LOOP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882733));
pub const NS_E_INVALID_FOLDDOWN_COEFFICIENTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882732));
pub const NS_E_DRMPROFILE_NOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882731));
pub const NS_E_INVALID_TIMECODE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882730));
pub const NS_E_NO_AUDIO_TIMECOMPRESSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882729));
pub const NS_E_NO_TWOPASS_TIMECOMPRESSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882728));
pub const NS_E_TIMECODE_REQUIRES_VIDEOSTREAM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882727));
pub const NS_E_NO_MBR_WITH_TIMECODE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882726));
pub const NS_E_INVALID_INTERLACEMODE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882725));
pub const NS_E_INVALID_INTERLACE_COMPAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882724));
pub const NS_E_INVALID_NONSQUAREPIXEL_COMPAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882723));
pub const NS_E_INVALID_SOURCE_WITH_DEVICE_CONTROL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882722));
pub const NS_E_CANNOT_GENERATE_BROADCAST_INFO_FOR_QUALITYVBR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882721));
pub const NS_E_EXCEED_MAX_DRM_PROFILE_LIMIT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882720));
pub const NS_E_DEVICECONTROL_UNSTABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882719));
pub const NS_E_INVALID_PIXEL_ASPECT_RATIO = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882718));
pub const NS_E_AUDIENCE__LANGUAGE_CONTENTTYPE_MISMATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882717));
pub const NS_E_INVALID_PROFILE_CONTENTTYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882716));
pub const NS_E_TRANSFORM_PLUGIN_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882715));
pub const NS_E_TRANSFORM_PLUGIN_INVALID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882714));
pub const NS_E_EDL_REQUIRED_FOR_DEVICE_MULTIPASS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882713));
pub const NS_E_INVALID_VIDEO_WIDTH_FOR_INTERLACED_ENCODING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882712));
pub const NS_E_MARKIN_UNSUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072882711));
pub const NS_E_DRM_INVALID_APPLICATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879855));
pub const NS_E_DRM_LICENSE_STORE_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879854));
pub const NS_E_DRM_SECURE_STORE_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879853));
pub const NS_E_DRM_LICENSE_STORE_SAVE_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879852));
pub const NS_E_DRM_SECURE_STORE_UNLOCK_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879851));
pub const NS_E_DRM_INVALID_CONTENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879850));
pub const NS_E_DRM_UNABLE_TO_OPEN_LICENSE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879849));
pub const NS_E_DRM_INVALID_LICENSE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879848));
pub const NS_E_DRM_INVALID_MACHINE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879847));
pub const NS_E_DRM_ENUM_LICENSE_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879845));
pub const NS_E_DRM_INVALID_LICENSE_REQUEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879844));
pub const NS_E_DRM_UNABLE_TO_INITIALIZE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879843));
pub const NS_E_DRM_UNABLE_TO_ACQUIRE_LICENSE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879842));
pub const NS_E_DRM_INVALID_LICENSE_ACQUIRED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879841));
pub const NS_E_DRM_NO_RIGHTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879840));
pub const NS_E_DRM_KEY_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879839));
pub const NS_E_DRM_ENCRYPT_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879838));
pub const NS_E_DRM_DECRYPT_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879837));
pub const NS_E_DRM_LICENSE_INVALID_XML = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879835));
pub const NS_S_DRM_LICENSE_ACQUIRED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 861990));
pub const NS_S_DRM_INDIVIDUALIZED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 861991));
pub const NS_E_DRM_NEEDS_INDIVIDUALIZATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879832));
pub const NS_E_DRM_ALREADY_INDIVIDUALIZED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879831));
pub const NS_E_DRM_ACTION_NOT_QUERIED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879830));
pub const NS_E_DRM_ACQUIRING_LICENSE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879829));
pub const NS_E_DRM_INDIVIDUALIZING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879828));
pub const NS_E_BACKUP_RESTORE_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879827));
pub const NS_E_BACKUP_RESTORE_BAD_REQUEST_ID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879826));
pub const NS_E_DRM_PARAMETERS_MISMATCHED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879825));
pub const NS_E_DRM_UNABLE_TO_CREATE_LICENSE_OBJECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879824));
pub const NS_E_DRM_UNABLE_TO_CREATE_INDI_OBJECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879823));
pub const NS_E_DRM_UNABLE_TO_CREATE_ENCRYPT_OBJECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879822));
pub const NS_E_DRM_UNABLE_TO_CREATE_DECRYPT_OBJECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879821));
pub const NS_E_DRM_UNABLE_TO_CREATE_PROPERTIES_OBJECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879820));
pub const NS_E_DRM_UNABLE_TO_CREATE_BACKUP_OBJECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879819));
pub const NS_E_DRM_INDIVIDUALIZE_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879818));
pub const NS_E_DRM_LICENSE_OPEN_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879817));
pub const NS_E_DRM_LICENSE_CLOSE_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879816));
pub const NS_E_DRM_GET_LICENSE_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879815));
pub const NS_E_DRM_QUERY_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879814));
pub const NS_E_DRM_REPORT_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879813));
pub const NS_E_DRM_GET_LICENSESTRING_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879812));
pub const NS_E_DRM_GET_CONTENTSTRING_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879811));
pub const NS_E_DRM_MONITOR_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879810));
pub const NS_E_DRM_UNABLE_TO_SET_PARAMETER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879809));
pub const NS_E_DRM_INVALID_APPDATA = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879808));
pub const NS_E_DRM_INVALID_APPDATA_VERSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879807));
pub const NS_E_DRM_BACKUP_EXISTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879806));
pub const NS_E_DRM_BACKUP_CORRUPT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879805));
pub const NS_E_DRM_BACKUPRESTORE_BUSY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879804));
pub const NS_E_BACKUP_RESTORE_BAD_DATA = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879803));
pub const NS_S_DRM_MONITOR_CANCELLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 862022));
pub const NS_S_DRM_ACQUIRE_CANCELLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 862023));
pub const NS_E_DRM_LICENSE_UNUSABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879800));
pub const NS_E_DRM_INVALID_PROPERTY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879799));
pub const NS_E_DRM_SECURE_STORE_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879798));
pub const NS_E_DRM_CACHED_CONTENT_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879797));
pub const NS_E_DRM_INDIVIDUALIZATION_INCOMPLETE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879796));
pub const NS_E_DRM_DRIVER_AUTH_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879795));
pub const NS_E_DRM_NEED_UPGRADE_MSSAP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879794));
pub const NS_E_DRM_REOPEN_CONTENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879793));
pub const NS_E_DRM_DRIVER_DIGIOUT_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879792));
pub const NS_E_DRM_INVALID_SECURESTORE_PASSWORD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879791));
pub const NS_E_DRM_APPCERT_REVOKED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879790));
pub const NS_E_DRM_RESTORE_FRAUD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879789));
pub const NS_E_DRM_HARDWARE_INCONSISTENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879788));
pub const NS_E_DRM_SDMI_TRIGGER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879787));
pub const NS_E_DRM_SDMI_NOMORECOPIES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879786));
pub const NS_E_DRM_UNABLE_TO_CREATE_HEADER_OBJECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879785));
pub const NS_E_DRM_UNABLE_TO_CREATE_KEYS_OBJECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879784));
pub const NS_E_DRM_LICENSE_NOTACQUIRED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879783));
pub const NS_E_DRM_UNABLE_TO_CREATE_CODING_OBJECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879782));
pub const NS_E_DRM_UNABLE_TO_CREATE_STATE_DATA_OBJECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879781));
pub const NS_E_DRM_BUFFER_TOO_SMALL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879780));
pub const NS_E_DRM_UNSUPPORTED_PROPERTY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879779));
pub const NS_E_DRM_ERROR_BAD_NET_RESP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879778));
pub const NS_E_DRM_STORE_NOTALLSTORED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879777));
pub const NS_E_DRM_SECURITY_COMPONENT_SIGNATURE_INVALID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879776));
pub const NS_E_DRM_INVALID_DATA = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879775));
pub const NS_E_DRM_POLICY_DISABLE_ONLINE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879774));
pub const NS_E_DRM_UNABLE_TO_CREATE_AUTHENTICATION_OBJECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879773));
pub const NS_E_DRM_NOT_CONFIGURED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879772));
pub const NS_E_DRM_DEVICE_ACTIVATION_CANCELED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879771));
pub const NS_E_BACKUP_RESTORE_TOO_MANY_RESETS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879770));
pub const NS_E_DRM_DEBUGGING_NOT_ALLOWED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879769));
pub const NS_E_DRM_OPERATION_CANCELED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879768));
pub const NS_E_DRM_RESTRICTIONS_NOT_RETRIEVED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879767));
pub const NS_E_DRM_UNABLE_TO_CREATE_PLAYLIST_OBJECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879766));
pub const NS_E_DRM_UNABLE_TO_CREATE_PLAYLIST_BURN_OBJECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879765));
pub const NS_E_DRM_UNABLE_TO_CREATE_DEVICE_REGISTRATION_OBJECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879764));
pub const NS_E_DRM_UNABLE_TO_CREATE_METERING_OBJECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879763));
pub const NS_S_DRM_BURNABLE_TRACK = @import("../zig.zig").typedConst(HRESULT, @as(i32, 862062));
pub const NS_S_DRM_BURNABLE_TRACK_WITH_PLAYLIST_RESTRICTION = @import("../zig.zig").typedConst(HRESULT, @as(i32, 862063));
pub const NS_E_DRM_TRACK_EXCEEDED_PLAYLIST_RESTICTION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879760));
pub const NS_E_DRM_TRACK_EXCEEDED_TRACKBURN_RESTRICTION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879759));
pub const NS_E_DRM_UNABLE_TO_GET_DEVICE_CERT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879758));
pub const NS_E_DRM_UNABLE_TO_GET_SECURE_CLOCK = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879757));
pub const NS_E_DRM_UNABLE_TO_SET_SECURE_CLOCK = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879756));
pub const NS_E_DRM_UNABLE_TO_GET_SECURE_CLOCK_FROM_SERVER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879755));
pub const NS_E_DRM_POLICY_METERING_DISABLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879754));
pub const NS_E_DRM_TRANSFER_CHAINED_LICENSES_UNSUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879753));
pub const NS_E_DRM_SDK_VERSIONMISMATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879752));
pub const NS_E_DRM_LIC_NEEDS_DEVICE_CLOCK_SET = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879751));
pub const NS_E_LICENSE_HEADER_MISSING_URL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879750));
pub const NS_E_DEVICE_NOT_WMDRM_DEVICE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879749));
pub const NS_E_DRM_INVALID_APPCERT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879748));
pub const NS_E_DRM_PROTOCOL_FORCEFUL_TERMINATION_ON_PETITION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879747));
pub const NS_E_DRM_PROTOCOL_FORCEFUL_TERMINATION_ON_CHALLENGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879746));
pub const NS_E_DRM_CHECKPOINT_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879745));
pub const NS_E_DRM_BB_UNABLE_TO_INITIALIZE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879744));
pub const NS_E_DRM_UNABLE_TO_LOAD_HARDWARE_ID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879743));
pub const NS_E_DRM_UNABLE_TO_OPEN_DATA_STORE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879742));
pub const NS_E_DRM_DATASTORE_CORRUPT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879741));
pub const NS_E_DRM_UNABLE_TO_CREATE_INMEMORYSTORE_OBJECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879740));
pub const NS_E_DRM_STUBLIB_REQUIRED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879739));
pub const NS_E_DRM_UNABLE_TO_CREATE_CERTIFICATE_OBJECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879738));
pub const NS_E_DRM_MIGRATION_TARGET_NOT_ONLINE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879737));
pub const NS_E_DRM_INVALID_MIGRATION_IMAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879736));
pub const NS_E_DRM_MIGRATION_TARGET_STATES_CORRUPTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879735));
pub const NS_E_DRM_MIGRATION_IMPORTER_NOT_AVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879734));
pub const NS_DRM_E_MIGRATION_UPGRADE_WITH_DIFF_SID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879733));
pub const NS_DRM_E_MIGRATION_SOURCE_MACHINE_IN_USE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879732));
pub const NS_DRM_E_MIGRATION_TARGET_MACHINE_LESS_THAN_LH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879731));
pub const NS_DRM_E_MIGRATION_IMAGE_ALREADY_EXISTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879730));
pub const NS_E_DRM_HARDWAREID_MISMATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879729));
pub const NS_E_INVALID_DRMV2CLT_STUBLIB = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879728));
pub const NS_E_DRM_MIGRATION_INVALID_LEGACYV2_DATA = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879727));
pub const NS_E_DRM_MIGRATION_LICENSE_ALREADY_EXISTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879726));
pub const NS_E_DRM_MIGRATION_INVALID_LEGACYV2_SST_PASSWORD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879725));
pub const NS_E_DRM_MIGRATION_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879724));
pub const NS_E_DRM_UNABLE_TO_CREATE_MIGRATION_IMPORTER_OBJECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879723));
pub const NS_E_DRM_CHECKPOINT_MISMATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879722));
pub const NS_E_DRM_CHECKPOINT_CORRUPT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879721));
pub const NS_E_REG_FLUSH_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879720));
pub const NS_E_HDS_KEY_MISMATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879719));
pub const NS_E_DRM_MIGRATION_OPERATION_CANCELLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879718));
pub const NS_E_DRM_MIGRATION_OBJECT_IN_USE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879717));
pub const NS_E_DRM_MALFORMED_CONTENT_HEADER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879716));
pub const NS_E_DRM_LICENSE_EXPIRED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879656));
pub const NS_E_DRM_LICENSE_NOTENABLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879655));
pub const NS_E_DRM_LICENSE_APPSECLOW = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879654));
pub const NS_E_DRM_STORE_NEEDINDI = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879653));
pub const NS_E_DRM_STORE_NOTALLOWED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879652));
pub const NS_E_DRM_LICENSE_APP_NOTALLOWED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879651));
pub const NS_S_DRM_NEEDS_INDIVIDUALIZATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, 862174));
pub const NS_E_DRM_LICENSE_CERT_EXPIRED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879649));
pub const NS_E_DRM_LICENSE_SECLOW = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879648));
pub const NS_E_DRM_LICENSE_CONTENT_REVOKED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879647));
pub const NS_E_DRM_DEVICE_NOT_REGISTERED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879646));
pub const NS_E_DRM_LICENSE_NOSAP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879606));
pub const NS_E_DRM_LICENSE_NOSVP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879605));
pub const NS_E_DRM_LICENSE_NOWDM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879604));
pub const NS_E_DRM_LICENSE_NOTRUSTEDCODEC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879603));
pub const NS_E_DRM_SOURCEID_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879602));
pub const NS_E_DRM_NEEDS_UPGRADE_TEMPFILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879555));
pub const NS_E_DRM_NEED_UPGRADE_PD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879554));
pub const NS_E_DRM_SIGNATURE_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879553));
pub const NS_E_DRM_LICENSE_SERVER_INFO_MISSING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879552));
pub const NS_E_DRM_BUSY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879551));
pub const NS_E_DRM_PD_TOO_MANY_DEVICES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879550));
pub const NS_E_DRM_INDIV_FRAUD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879549));
pub const NS_E_DRM_INDIV_NO_CABS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879548));
pub const NS_E_DRM_INDIV_SERVICE_UNAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879547));
pub const NS_E_DRM_RESTORE_SERVICE_UNAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879546));
pub const NS_E_DRM_CLIENT_CODE_EXPIRED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879545));
pub const NS_E_DRM_NO_UPLINK_LICENSE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879544));
pub const NS_E_DRM_INVALID_KID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879543));
pub const NS_E_DRM_LICENSE_INITIALIZATION_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879542));
pub const NS_E_DRM_CHAIN_TOO_LONG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879540));
pub const NS_E_DRM_UNSUPPORTED_ALGORITHM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879539));
pub const NS_E_DRM_LICENSE_DELETION_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879538));
pub const NS_E_DRM_INVALID_CERTIFICATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879456));
pub const NS_E_DRM_CERTIFICATE_REVOKED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879455));
pub const NS_E_DRM_LICENSE_UNAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879454));
pub const NS_E_DRM_DEVICE_LIMIT_REACHED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879453));
pub const NS_E_DRM_UNABLE_TO_VERIFY_PROXIMITY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879452));
pub const NS_E_DRM_MUST_REGISTER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879451));
pub const NS_E_DRM_MUST_APPROVE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879450));
pub const NS_E_DRM_MUST_REVALIDATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879449));
pub const NS_E_DRM_INVALID_PROXIMITY_RESPONSE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879448));
pub const NS_E_DRM_INVALID_SESSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879447));
pub const NS_E_DRM_DEVICE_NOT_OPEN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879446));
pub const NS_E_DRM_DEVICE_ALREADY_REGISTERED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879445));
pub const NS_E_DRM_UNSUPPORTED_PROTOCOL_VERSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879444));
pub const NS_E_DRM_UNSUPPORTED_ACTION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879443));
pub const NS_E_DRM_CERTIFICATE_SECURITY_LEVEL_INADEQUATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879442));
pub const NS_E_DRM_UNABLE_TO_OPEN_PORT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879441));
pub const NS_E_DRM_BAD_REQUEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879440));
pub const NS_E_DRM_INVALID_CRL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879439));
pub const NS_E_DRM_ATTRIBUTE_TOO_LONG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879438));
pub const NS_E_DRM_EXPIRED_LICENSEBLOB = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879437));
pub const NS_E_DRM_INVALID_LICENSEBLOB = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879436));
pub const NS_E_DRM_INCLUSION_LIST_REQUIRED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879435));
pub const NS_E_DRM_DRMV2CLT_REVOKED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879434));
pub const NS_E_DRM_RIV_TOO_SMALL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879433));
pub const NS_E_OUTPUT_PROTECTION_LEVEL_UNSUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879356));
pub const NS_E_COMPRESSED_DIGITAL_VIDEO_PROTECTION_LEVEL_UNSUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879355));
pub const NS_E_UNCOMPRESSED_DIGITAL_VIDEO_PROTECTION_LEVEL_UNSUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879354));
pub const NS_E_ANALOG_VIDEO_PROTECTION_LEVEL_UNSUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879353));
pub const NS_E_COMPRESSED_DIGITAL_AUDIO_PROTECTION_LEVEL_UNSUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879352));
pub const NS_E_UNCOMPRESSED_DIGITAL_AUDIO_PROTECTION_LEVEL_UNSUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879351));
pub const NS_E_OUTPUT_PROTECTION_SCHEME_UNSUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072879350));
pub const NS_S_REBOOT_RECOMMENDED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 862968));
pub const NS_S_REBOOT_REQUIRED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 862969));
pub const NS_E_REBOOT_RECOMMENDED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072878854));
pub const NS_E_REBOOT_REQUIRED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072878853));
pub const NS_E_SETUP_INCOMPLETE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072878852));
pub const NS_E_SETUP_DRM_MIGRATION_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072878851));
pub const NS_E_SETUP_IGNORABLE_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072878850));
pub const NS_E_SETUP_DRM_MIGRATION_FAILED_AND_IGNORABLE_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072878849));
pub const NS_E_SETUP_BLOCKED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072878848));
pub const NS_E_UNKNOWN_PROTOCOL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877856));
pub const NS_E_REDIRECT_TO_PROXY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877855));
pub const NS_E_INTERNAL_SERVER_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877854));
pub const NS_E_BAD_REQUEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877853));
pub const NS_E_ERROR_FROM_PROXY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877852));
pub const NS_E_PROXY_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877851));
pub const NS_E_SERVER_UNAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877850));
pub const NS_E_REFUSED_BY_SERVER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877849));
pub const NS_E_INCOMPATIBLE_SERVER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877848));
pub const NS_E_MULTICAST_DISABLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877847));
pub const NS_E_INVALID_REDIRECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877846));
pub const NS_E_ALL_PROTOCOLS_DISABLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877845));
pub const NS_E_MSBD_NO_LONGER_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877844));
pub const NS_E_PROXY_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877843));
pub const NS_E_CANNOT_CONNECT_TO_PROXY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877842));
pub const NS_E_SERVER_DNS_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877841));
pub const NS_E_PROXY_DNS_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877840));
pub const NS_E_CLOSED_ON_SUSPEND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877839));
pub const NS_E_CANNOT_READ_PLAYLIST_FROM_MEDIASERVER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877838));
pub const NS_E_SESSION_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877837));
pub const NS_E_REQUIRE_STREAMING_CLIENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877836));
pub const NS_E_PLAYLIST_ENTRY_HAS_CHANGED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877835));
pub const NS_E_PROXY_ACCESSDENIED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877834));
pub const NS_E_PROXY_SOURCE_ACCESSDENIED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877833));
pub const NS_E_NETWORK_SINK_WRITE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877832));
pub const NS_E_FIREWALL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877831));
pub const NS_E_MMS_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877830));
pub const NS_E_SERVER_ACCESSDENIED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877829));
pub const NS_E_RESOURCE_GONE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877828));
pub const NS_E_NO_EXISTING_PACKETIZER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877827));
pub const NS_E_BAD_SYNTAX_IN_SERVER_RESPONSE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877826));
pub const NS_I_RECONNECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074605823));
pub const NS_E_RESET_SOCKET_CONNECTION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877824));
pub const NS_I_NOLOG_STOP = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074605825));
pub const NS_E_TOO_MANY_HOPS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877822));
pub const NS_I_EXISTING_PACKETIZER = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074605827));
pub const NS_I_MANUAL_PROXY = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1074605828));
pub const NS_E_TOO_MUCH_DATA_FROM_SERVER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877819));
pub const NS_E_CONNECT_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877818));
pub const NS_E_PROXY_CONNECT_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877817));
pub const NS_E_SESSION_INVALID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877816));
pub const NS_S_EOSRECEDING = @import("../zig.zig").typedConst(HRESULT, @as(i32, 864009));
pub const NS_E_PACKETSINK_UNKNOWN_FEC_STREAM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877814));
pub const NS_E_PUSH_CANNOTCONNECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877813));
pub const NS_E_INCOMPATIBLE_PUSH_SERVER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072877812));
pub const NS_S_CHANGENOTICE = @import("../zig.zig").typedConst(HRESULT, @as(i32, 864013));
pub const NS_E_END_OF_PLAYLIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072876856));
pub const NS_E_USE_FILE_SOURCE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072876855));
pub const NS_E_PROPERTY_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072876854));
pub const NS_E_PROPERTY_READ_ONLY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072876852));
pub const NS_E_TABLE_KEY_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072876851));
pub const NS_E_INVALID_QUERY_OPERATOR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072876849));
pub const NS_E_INVALID_QUERY_PROPERTY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072876848));
pub const NS_E_PROPERTY_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072876846));
pub const NS_E_SCHEMA_CLASSIFY_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072876844));
pub const NS_E_METADATA_FORMAT_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072876843));
pub const NS_E_METADATA_NO_EDITING_CAPABILITY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072876842));
pub const NS_E_METADATA_CANNOT_SET_LOCALE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072876841));
pub const NS_E_METADATA_LANGUAGE_NOT_SUPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072876840));
pub const NS_E_METADATA_NO_RFC1766_NAME_FOR_LOCALE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072876839));
pub const NS_E_METADATA_NOT_AVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072876838));
pub const NS_E_METADATA_CACHE_DATA_NOT_AVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072876837));
pub const NS_E_METADATA_INVALID_DOCUMENT_TYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072876836));
pub const NS_E_METADATA_IDENTIFIER_NOT_AVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072876835));
pub const NS_E_METADATA_CANNOT_RETRIEVE_FROM_OFFLINE_CACHE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072876834));
pub const VFW_HIDE_SETTINGS_PAGE = @as(u32, 1);
pub const VFW_HIDE_VIDEOSRC_PAGE = @as(u32, 2);
pub const VFW_HIDE_CAMERACONTROL_PAGE = @as(u32, 4);
pub const VFW_OEM_ADD_PAGE = @as(u32, 2147483648);
pub const VFW_USE_DEVICE_HANDLE = @as(u32, 1);
pub const VFW_USE_STREAM_HANDLE = @as(u32, 2);
pub const VFW_QUERY_DEV_CHANGED = @as(u32, 256);
pub const TARGET_DEVICE_FRIENDLY_NAME = "TargetDeviceFriendlyName";
pub const TARGET_DEVICE_OPEN_EXCLUSIVELY = "TargetDeviceOpenExclusively";
pub const MCIERR_INVALID_DEVICE_ID = @as(u32, 257);
pub const MCIERR_UNRECOGNIZED_KEYWORD = @as(u32, 259);
pub const MCIERR_UNRECOGNIZED_COMMAND = @as(u32, 261);
pub const MCIERR_HARDWARE = @as(u32, 262);
pub const MCIERR_INVALID_DEVICE_NAME = @as(u32, 263);
pub const MCIERR_OUT_OF_MEMORY = @as(u32, 264);
pub const MCIERR_DEVICE_OPEN = @as(u32, 265);
pub const MCIERR_CANNOT_LOAD_DRIVER = @as(u32, 266);
pub const MCIERR_MISSING_COMMAND_STRING = @as(u32, 267);
pub const MCIERR_PARAM_OVERFLOW = @as(u32, 268);
pub const MCIERR_MISSING_STRING_ARGUMENT = @as(u32, 269);
pub const MCIERR_BAD_INTEGER = @as(u32, 270);
pub const MCIERR_PARSER_INTERNAL = @as(u32, 271);
pub const MCIERR_DRIVER_INTERNAL = @as(u32, 272);
pub const MCIERR_MISSING_PARAMETER = @as(u32, 273);
pub const MCIERR_UNSUPPORTED_FUNCTION = @as(u32, 274);
pub const MCIERR_FILE_NOT_FOUND = @as(u32, 275);
pub const MCIERR_DEVICE_NOT_READY = @as(u32, 276);
pub const MCIERR_INTERNAL = @as(u32, 277);
pub const MCIERR_DRIVER = @as(u32, 278);
pub const MCIERR_CANNOT_USE_ALL = @as(u32, 279);
pub const MCIERR_MULTIPLE = @as(u32, 280);
pub const MCIERR_EXTENSION_NOT_FOUND = @as(u32, 281);
pub const MCIERR_OUTOFRANGE = @as(u32, 282);
pub const MCIERR_FLAGS_NOT_COMPATIBLE = @as(u32, 284);
pub const MCIERR_FILE_NOT_SAVED = @as(u32, 286);
pub const MCIERR_DEVICE_TYPE_REQUIRED = @as(u32, 287);
pub const MCIERR_DEVICE_LOCKED = @as(u32, 288);
pub const MCIERR_DUPLICATE_ALIAS = @as(u32, 289);
pub const MCIERR_BAD_CONSTANT = @as(u32, 290);
pub const MCIERR_MUST_USE_SHAREABLE = @as(u32, 291);
pub const MCIERR_MISSING_DEVICE_NAME = @as(u32, 292);
pub const MCIERR_BAD_TIME_FORMAT = @as(u32, 293);
pub const MCIERR_NO_CLOSING_QUOTE = @as(u32, 294);
pub const MCIERR_DUPLICATE_FLAGS = @as(u32, 295);
pub const MCIERR_INVALID_FILE = @as(u32, 296);
pub const MCIERR_NULL_PARAMETER_BLOCK = @as(u32, 297);
pub const MCIERR_UNNAMED_RESOURCE = @as(u32, 298);
pub const MCIERR_NEW_REQUIRES_ALIAS = @as(u32, 299);
pub const MCIERR_NOTIFY_ON_AUTO_OPEN = @as(u32, 300);
pub const MCIERR_NO_ELEMENT_ALLOWED = @as(u32, 301);
pub const MCIERR_NONAPPLICABLE_FUNCTION = @as(u32, 302);
pub const MCIERR_ILLEGAL_FOR_AUTO_OPEN = @as(u32, 303);
pub const MCIERR_FILENAME_REQUIRED = @as(u32, 304);
pub const MCIERR_EXTRA_CHARACTERS = @as(u32, 305);
pub const MCIERR_DEVICE_NOT_INSTALLED = @as(u32, 306);
pub const MCIERR_GET_CD = @as(u32, 307);
pub const MCIERR_SET_CD = @as(u32, 308);
pub const MCIERR_SET_DRIVE = @as(u32, 309);
pub const MCIERR_DEVICE_LENGTH = @as(u32, 310);
pub const MCIERR_DEVICE_ORD_LENGTH = @as(u32, 311);
pub const MCIERR_NO_INTEGER = @as(u32, 312);
pub const MCIERR_WAVE_OUTPUTSINUSE = @as(u32, 320);
pub const MCIERR_WAVE_SETOUTPUTINUSE = @as(u32, 321);
pub const MCIERR_WAVE_INPUTSINUSE = @as(u32, 322);
pub const MCIERR_WAVE_SETINPUTINUSE = @as(u32, 323);
pub const MCIERR_WAVE_OUTPUTUNSPECIFIED = @as(u32, 324);
pub const MCIERR_WAVE_INPUTUNSPECIFIED = @as(u32, 325);
pub const MCIERR_WAVE_OUTPUTSUNSUITABLE = @as(u32, 326);
pub const MCIERR_WAVE_SETOUTPUTUNSUITABLE = @as(u32, 327);
pub const MCIERR_WAVE_INPUTSUNSUITABLE = @as(u32, 328);
pub const MCIERR_WAVE_SETINPUTUNSUITABLE = @as(u32, 329);
pub const MCIERR_SEQ_DIV_INCOMPATIBLE = @as(u32, 336);
pub const MCIERR_SEQ_PORT_INUSE = @as(u32, 337);
pub const MCIERR_SEQ_PORT_NONEXISTENT = @as(u32, 338);
pub const MCIERR_SEQ_PORT_MAPNODEVICE = @as(u32, 339);
pub const MCIERR_SEQ_PORT_MISCERROR = @as(u32, 340);
pub const MCIERR_SEQ_TIMER = @as(u32, 341);
pub const MCIERR_SEQ_PORTUNSPECIFIED = @as(u32, 342);
pub const MCIERR_SEQ_NOMIDIPRESENT = @as(u32, 343);
pub const MCIERR_NO_WINDOW = @as(u32, 346);
pub const MCIERR_CREATEWINDOW = @as(u32, 347);
pub const MCIERR_FILE_READ = @as(u32, 348);
pub const MCIERR_FILE_WRITE = @as(u32, 349);
pub const MCIERR_NO_IDENTITY = @as(u32, 350);
pub const MCIERR_CUSTOM_DRIVER_BASE = @as(u32, 512);
pub const MCI_FIRST = @as(u32, 2048);
pub const MCI_ESCAPE = @as(u32, 2053);
pub const MCI_INFO = @as(u32, 2058);
pub const MCI_GETDEVCAPS = @as(u32, 2059);
pub const MCI_SPIN = @as(u32, 2060);
pub const MCI_SET = @as(u32, 2061);
pub const MCI_SYSINFO = @as(u32, 2064);
pub const MCI_BREAK = @as(u32, 2065);
pub const MCI_STATUS = @as(u32, 2068);
pub const MCI_CUE = @as(u32, 2096);
pub const MCI_REALIZE = @as(u32, 2112);
pub const MCI_WINDOW = @as(u32, 2113);
pub const MCI_PUT = @as(u32, 2114);
pub const MCI_WHERE = @as(u32, 2115);
pub const MCI_FREEZE = @as(u32, 2116);
pub const MCI_UNFREEZE = @as(u32, 2117);
pub const MCI_LOAD = @as(u32, 2128);
pub const MCI_UPDATE = @as(u32, 2132);
pub const MCI_USER_MESSAGES = @as(u32, 3072);
pub const MCI_LAST = @as(u32, 4095);
pub const MCI_DEVTYPE_VCR = @as(u32, 513);
pub const MCI_DEVTYPE_VIDEODISC = @as(u32, 514);
pub const MCI_DEVTYPE_OVERLAY = @as(u32, 515);
pub const MCI_DEVTYPE_CD_AUDIO = @as(u32, 516);
pub const MCI_DEVTYPE_DAT = @as(u32, 517);
pub const MCI_DEVTYPE_SCANNER = @as(u32, 518);
pub const MCI_DEVTYPE_ANIMATION = @as(u32, 519);
pub const MCI_DEVTYPE_DIGITAL_VIDEO = @as(u32, 520);
pub const MCI_DEVTYPE_OTHER = @as(u32, 521);
pub const MCI_DEVTYPE_WAVEFORM_AUDIO = @as(u32, 522);
pub const MCI_DEVTYPE_SEQUENCER = @as(u32, 523);
pub const MCI_DEVTYPE_FIRST = @as(u32, 513);
pub const MCI_DEVTYPE_LAST = @as(u32, 523);
pub const MCI_DEVTYPE_FIRST_USER = @as(u32, 4096);
pub const MCI_FORMAT_MILLISECONDS = @as(u32, 0);
pub const MCI_FORMAT_HMS = @as(u32, 1);
pub const MCI_FORMAT_MSF = @as(u32, 2);
pub const MCI_FORMAT_FRAMES = @as(u32, 3);
pub const MCI_FORMAT_SMPTE_24 = @as(u32, 4);
pub const MCI_FORMAT_SMPTE_25 = @as(u32, 5);
pub const MCI_FORMAT_SMPTE_30 = @as(u32, 6);
pub const MCI_FORMAT_SMPTE_30DROP = @as(u32, 7);
pub const MCI_FORMAT_BYTES = @as(u32, 8);
pub const MCI_FORMAT_SAMPLES = @as(u32, 9);
pub const MCI_FORMAT_TMSF = @as(u32, 10);
pub const MCI_NOTIFY_SUCCESSFUL = @as(u32, 1);
pub const MCI_NOTIFY_SUPERSEDED = @as(u32, 2);
pub const MCI_NOTIFY_ABORTED = @as(u32, 4);
pub const MCI_NOTIFY_FAILURE = @as(u32, 8);
pub const MCI_NOTIFY = @as(i32, 1);
pub const MCI_WAIT = @as(i32, 2);
pub const MCI_FROM = @as(i32, 4);
pub const MCI_TO = @as(i32, 8);
pub const MCI_TRACK = @as(i32, 16);
pub const MCI_OPEN_SHAREABLE = @as(i32, 256);
pub const MCI_OPEN_ELEMENT = @as(i32, 512);
pub const MCI_OPEN_ALIAS = @as(i32, 1024);
pub const MCI_OPEN_ELEMENT_ID = @as(i32, 2048);
pub const MCI_OPEN_TYPE_ID = @as(i32, 4096);
pub const MCI_OPEN_TYPE = @as(i32, 8192);
pub const MCI_SEEK_TO_START = @as(i32, 256);
pub const MCI_SEEK_TO_END = @as(i32, 512);
pub const MCI_STATUS_ITEM = @as(i32, 256);
pub const MCI_STATUS_START = @as(i32, 512);
pub const MCI_STATUS_LENGTH = @as(i32, 1);
pub const MCI_STATUS_POSITION = @as(i32, 2);
pub const MCI_STATUS_NUMBER_OF_TRACKS = @as(i32, 3);
pub const MCI_STATUS_MODE = @as(i32, 4);
pub const MCI_STATUS_MEDIA_PRESENT = @as(i32, 5);
pub const MCI_STATUS_TIME_FORMAT = @as(i32, 6);
pub const MCI_STATUS_READY = @as(i32, 7);
pub const MCI_STATUS_CURRENT_TRACK = @as(i32, 8);
pub const MCI_INFO_PRODUCT = @as(i32, 256);
pub const MCI_INFO_FILE = @as(i32, 512);
pub const MCI_INFO_MEDIA_UPC = @as(i32, 1024);
pub const MCI_INFO_MEDIA_IDENTITY = @as(i32, 2048);
pub const MCI_INFO_NAME = @as(i32, 4096);
pub const MCI_INFO_COPYRIGHT = @as(i32, 8192);
pub const MCI_GETDEVCAPS_ITEM = @as(i32, 256);
pub const MCI_GETDEVCAPS_CAN_RECORD = @as(i32, 1);
pub const MCI_GETDEVCAPS_HAS_AUDIO = @as(i32, 2);
pub const MCI_GETDEVCAPS_HAS_VIDEO = @as(i32, 3);
pub const MCI_GETDEVCAPS_DEVICE_TYPE = @as(i32, 4);
pub const MCI_GETDEVCAPS_USES_FILES = @as(i32, 5);
pub const MCI_GETDEVCAPS_COMPOUND_DEVICE = @as(i32, 6);
pub const MCI_GETDEVCAPS_CAN_EJECT = @as(i32, 7);
pub const MCI_GETDEVCAPS_CAN_PLAY = @as(i32, 8);
pub const MCI_GETDEVCAPS_CAN_SAVE = @as(i32, 9);
pub const MCI_SYSINFO_QUANTITY = @as(i32, 256);
pub const MCI_SYSINFO_OPEN = @as(i32, 512);
pub const MCI_SYSINFO_NAME = @as(i32, 1024);
pub const MCI_SYSINFO_INSTALLNAME = @as(i32, 2048);
pub const MCI_SET_DOOR_OPEN = @as(i32, 256);
pub const MCI_SET_DOOR_CLOSED = @as(i32, 512);
pub const MCI_SET_TIME_FORMAT = @as(i32, 1024);
pub const MCI_SET_AUDIO = @as(i32, 2048);
pub const MCI_SET_VIDEO = @as(i32, 4096);
pub const MCI_SET_ON = @as(i32, 8192);
pub const MCI_SET_OFF = @as(i32, 16384);
pub const MCI_SET_AUDIO_ALL = @as(i32, 0);
pub const MCI_SET_AUDIO_LEFT = @as(i32, 1);
pub const MCI_SET_AUDIO_RIGHT = @as(i32, 2);
pub const MCI_BREAK_KEY = @as(i32, 256);
pub const MCI_BREAK_HWND = @as(i32, 512);
pub const MCI_BREAK_OFF = @as(i32, 1024);
pub const MCI_RECORD_INSERT = @as(i32, 256);
pub const MCI_RECORD_OVERWRITE = @as(i32, 512);
pub const MCI_SAVE_FILE = @as(i32, 256);
pub const MCI_LOAD_FILE = @as(i32, 256);
pub const MCI_VD_MODE_PARK = @as(u32, 1025);
pub const MCI_VD_MEDIA_CLV = @as(u32, 1026);
pub const MCI_VD_MEDIA_CAV = @as(u32, 1027);
pub const MCI_VD_MEDIA_OTHER = @as(u32, 1028);
pub const MCI_VD_FORMAT_TRACK = @as(u32, 16385);
pub const MCI_VD_PLAY_REVERSE = @as(i32, 65536);
pub const MCI_VD_PLAY_FAST = @as(i32, 131072);
pub const MCI_VD_PLAY_SPEED = @as(i32, 262144);
pub const MCI_VD_PLAY_SCAN = @as(i32, 524288);
pub const MCI_VD_PLAY_SLOW = @as(i32, 1048576);
pub const MCI_VD_SEEK_REVERSE = @as(i32, 65536);
pub const MCI_VD_STATUS_SPEED = @as(i32, 16386);
pub const MCI_VD_STATUS_FORWARD = @as(i32, 16387);
pub const MCI_VD_STATUS_MEDIA_TYPE = @as(i32, 16388);
pub const MCI_VD_STATUS_SIDE = @as(i32, 16389);
pub const MCI_VD_STATUS_DISC_SIZE = @as(i32, 16390);
pub const MCI_VD_GETDEVCAPS_CLV = @as(i32, 65536);
pub const MCI_VD_GETDEVCAPS_CAV = @as(i32, 131072);
pub const MCI_VD_SPIN_UP = @as(i32, 65536);
pub const MCI_VD_SPIN_DOWN = @as(i32, 131072);
pub const MCI_VD_GETDEVCAPS_CAN_REVERSE = @as(i32, 16386);
pub const MCI_VD_GETDEVCAPS_FAST_RATE = @as(i32, 16387);
pub const MCI_VD_GETDEVCAPS_SLOW_RATE = @as(i32, 16388);
pub const MCI_VD_GETDEVCAPS_NORMAL_RATE = @as(i32, 16389);
pub const MCI_VD_STEP_FRAMES = @as(i32, 65536);
pub const MCI_VD_STEP_REVERSE = @as(i32, 131072);
pub const MCI_VD_ESCAPE_STRING = @as(i32, 256);
pub const MCI_CDA_STATUS_TYPE_TRACK = @as(i32, 16385);
pub const MCI_CDA_TRACK_AUDIO = @as(u32, 1088);
pub const MCI_CDA_TRACK_OTHER = @as(u32, 1089);
pub const MCI_WAVE_PCM = @as(u32, 1152);
pub const MCI_WAVE_MAPPER = @as(u32, 1153);
pub const MCI_WAVE_OPEN_BUFFER = @as(i32, 65536);
pub const MCI_WAVE_SET_FORMATTAG = @as(i32, 65536);
pub const MCI_WAVE_SET_CHANNELS = @as(i32, 131072);
pub const MCI_WAVE_SET_SAMPLESPERSEC = @as(i32, 262144);
pub const MCI_WAVE_SET_AVGBYTESPERSEC = @as(i32, 524288);
pub const MCI_WAVE_SET_BLOCKALIGN = @as(i32, 1048576);
pub const MCI_WAVE_SET_BITSPERSAMPLE = @as(i32, 2097152);
pub const MCI_WAVE_INPUT = @as(i32, 4194304);
pub const MCI_WAVE_OUTPUT = @as(i32, 8388608);
pub const MCI_WAVE_STATUS_FORMATTAG = @as(i32, 16385);
pub const MCI_WAVE_STATUS_CHANNELS = @as(i32, 16386);
pub const MCI_WAVE_STATUS_SAMPLESPERSEC = @as(i32, 16387);
pub const MCI_WAVE_STATUS_AVGBYTESPERSEC = @as(i32, 16388);
pub const MCI_WAVE_STATUS_BLOCKALIGN = @as(i32, 16389);
pub const MCI_WAVE_STATUS_BITSPERSAMPLE = @as(i32, 16390);
pub const MCI_WAVE_STATUS_LEVEL = @as(i32, 16391);
pub const MCI_WAVE_SET_ANYINPUT = @as(i32, 67108864);
pub const MCI_WAVE_SET_ANYOUTPUT = @as(i32, 134217728);
pub const MCI_WAVE_GETDEVCAPS_INPUTS = @as(i32, 16385);
pub const MCI_WAVE_GETDEVCAPS_OUTPUTS = @as(i32, 16386);
pub const MCI_SEQ_FORMAT_SONGPTR = @as(u32, 16385);
pub const MCI_SEQ_FILE = @as(u32, 16386);
pub const MCI_SEQ_MIDI = @as(u32, 16387);
pub const MCI_SEQ_SMPTE = @as(u32, 16388);
pub const MCI_SEQ_NONE = @as(u32, 65533);
pub const MCI_SEQ_MAPPER = @as(u32, 65535);
pub const MCI_SEQ_STATUS_TEMPO = @as(i32, 16386);
pub const MCI_SEQ_STATUS_PORT = @as(i32, 16387);
pub const MCI_SEQ_STATUS_SLAVE = @as(i32, 16391);
pub const MCI_SEQ_STATUS_MASTER = @as(i32, 16392);
pub const MCI_SEQ_STATUS_OFFSET = @as(i32, 16393);
pub const MCI_SEQ_STATUS_DIVTYPE = @as(i32, 16394);
pub const MCI_SEQ_STATUS_NAME = @as(i32, 16395);
pub const MCI_SEQ_STATUS_COPYRIGHT = @as(i32, 16396);
pub const MCI_SEQ_SET_TEMPO = @as(i32, 65536);
pub const MCI_SEQ_SET_PORT = @as(i32, 131072);
pub const MCI_SEQ_SET_SLAVE = @as(i32, 262144);
pub const MCI_SEQ_SET_MASTER = @as(i32, 524288);
pub const MCI_SEQ_SET_OFFSET = @as(i32, 16777216);
pub const MCI_ANIM_OPEN_WS = @as(i32, 65536);
pub const MCI_ANIM_OPEN_PARENT = @as(i32, 131072);
pub const MCI_ANIM_OPEN_NOSTATIC = @as(i32, 262144);
pub const MCI_ANIM_PLAY_SPEED = @as(i32, 65536);
pub const MCI_ANIM_PLAY_REVERSE = @as(i32, 131072);
pub const MCI_ANIM_PLAY_FAST = @as(i32, 262144);
pub const MCI_ANIM_PLAY_SLOW = @as(i32, 524288);
pub const MCI_ANIM_PLAY_SCAN = @as(i32, 1048576);
pub const MCI_ANIM_STEP_REVERSE = @as(i32, 65536);
pub const MCI_ANIM_STEP_FRAMES = @as(i32, 131072);
pub const MCI_ANIM_STATUS_SPEED = @as(i32, 16385);
pub const MCI_ANIM_STATUS_FORWARD = @as(i32, 16386);
pub const MCI_ANIM_STATUS_HWND = @as(i32, 16387);
pub const MCI_ANIM_STATUS_HPAL = @as(i32, 16388);
pub const MCI_ANIM_STATUS_STRETCH = @as(i32, 16389);
pub const MCI_ANIM_INFO_TEXT = @as(i32, 65536);
pub const MCI_ANIM_GETDEVCAPS_CAN_REVERSE = @as(i32, 16385);
pub const MCI_ANIM_GETDEVCAPS_FAST_RATE = @as(i32, 16386);
pub const MCI_ANIM_GETDEVCAPS_SLOW_RATE = @as(i32, 16387);
pub const MCI_ANIM_GETDEVCAPS_NORMAL_RATE = @as(i32, 16388);
pub const MCI_ANIM_GETDEVCAPS_PALETTES = @as(i32, 16390);
pub const MCI_ANIM_GETDEVCAPS_CAN_STRETCH = @as(i32, 16391);
pub const MCI_ANIM_GETDEVCAPS_MAX_WINDOWS = @as(i32, 16392);
pub const MCI_ANIM_REALIZE_NORM = @as(i32, 65536);
pub const MCI_ANIM_REALIZE_BKGD = @as(i32, 131072);
pub const MCI_ANIM_WINDOW_HWND = @as(i32, 65536);
pub const MCI_ANIM_WINDOW_STATE = @as(i32, 262144);
pub const MCI_ANIM_WINDOW_TEXT = @as(i32, 524288);
pub const MCI_ANIM_WINDOW_ENABLE_STRETCH = @as(i32, 1048576);
pub const MCI_ANIM_WINDOW_DISABLE_STRETCH = @as(i32, 2097152);
pub const MCI_ANIM_WINDOW_DEFAULT = @as(i32, 0);
pub const MCI_ANIM_RECT = @as(i32, 65536);
pub const MCI_ANIM_PUT_SOURCE = @as(i32, 131072);
pub const MCI_ANIM_PUT_DESTINATION = @as(i32, 262144);
pub const MCI_ANIM_WHERE_SOURCE = @as(i32, 131072);
pub const MCI_ANIM_WHERE_DESTINATION = @as(i32, 262144);
pub const MCI_ANIM_UPDATE_HDC = @as(i32, 131072);
pub const MCI_OVLY_OPEN_WS = @as(i32, 65536);
pub const MCI_OVLY_OPEN_PARENT = @as(i32, 131072);
pub const MCI_OVLY_STATUS_HWND = @as(i32, 16385);
pub const MCI_OVLY_STATUS_STRETCH = @as(i32, 16386);
pub const MCI_OVLY_INFO_TEXT = @as(i32, 65536);
pub const MCI_OVLY_GETDEVCAPS_CAN_STRETCH = @as(i32, 16385);
pub const MCI_OVLY_GETDEVCAPS_CAN_FREEZE = @as(i32, 16386);
pub const MCI_OVLY_GETDEVCAPS_MAX_WINDOWS = @as(i32, 16387);
pub const MCI_OVLY_WINDOW_HWND = @as(i32, 65536);
pub const MCI_OVLY_WINDOW_STATE = @as(i32, 262144);
pub const MCI_OVLY_WINDOW_TEXT = @as(i32, 524288);
pub const MCI_OVLY_WINDOW_ENABLE_STRETCH = @as(i32, 1048576);
pub const MCI_OVLY_WINDOW_DISABLE_STRETCH = @as(i32, 2097152);
pub const MCI_OVLY_WINDOW_DEFAULT = @as(i32, 0);
pub const MCI_OVLY_RECT = @as(i32, 65536);
pub const MCI_OVLY_PUT_SOURCE = @as(i32, 131072);
pub const MCI_OVLY_PUT_DESTINATION = @as(i32, 262144);
pub const MCI_OVLY_PUT_FRAME = @as(i32, 524288);
pub const MCI_OVLY_PUT_VIDEO = @as(i32, 1048576);
pub const MCI_OVLY_WHERE_SOURCE = @as(i32, 131072);
pub const MCI_OVLY_WHERE_DESTINATION = @as(i32, 262144);
pub const MCI_OVLY_WHERE_FRAME = @as(i32, 524288);
pub const MCI_OVLY_WHERE_VIDEO = @as(i32, 1048576);

//--------------------------------------------------------------------------------
// Section: Types (190)
//--------------------------------------------------------------------------------
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HMMIO = *opaque{};

// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HDRVR = *opaque{};

// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HIC = *opaque{};

// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HVIDEO = *opaque{};

const CLSID_KSDATAFORMAT_SUBTYPE_IEEE_FLOAT_Value = Guid.initString("00000003-0000-0010-8000-00aa00389b71");
pub const CLSID_KSDATAFORMAT_SUBTYPE_IEEE_FLOAT = &CLSID_KSDATAFORMAT_SUBTYPE_IEEE_FLOAT_Value;

pub const ADPCMCOEFSET = extern struct {
    iCoef1: i16 align(1),
    iCoef2: i16 align(1),
};

pub const ADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
    wSamplesPerBlock: u16 align(1),
    wNumCoef: u16 align(1),
    aCoef: [1]ADPCMCOEFSET align(1),
};

pub const DRMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
    wReserved: u16 align(1),
    ulContentId: u32 align(1),
    wfxSecure: WAVEFORMATEX align(1),
};

pub const DVIADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
    wSamplesPerBlock: u16 align(1),
};

pub const IMAADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
    wSamplesPerBlock: u16 align(1),
};

pub const MEDIASPACEADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
    wRevision: u16 align(1),
};

pub const SIERRAADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
    wRevision: u16 align(1),
};

pub const G723_ADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
    cbExtraSize: u16 align(1),
    nAuxBlockSize: u16 align(1),
};

pub const DIGISTDWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
};

pub const DIGIFIXWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
};

pub const DIALOGICOKIADPCMWAVEFORMAT = extern struct {
    ewf: WAVEFORMATEX align(1),
};

pub const YAMAHA_ADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
};

pub const SONARCWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
    wCompType: u16 align(1),
};

pub const TRUESPEECHWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
    wRevision: u16 align(1),
    nSamplesPerBlock: u16 align(1),
    abReserved: [28]u8 align(1),
};

pub const ECHOSC1WAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
};

pub const AUDIOFILE_AF36WAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
};

pub const APTXWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
};

pub const AUDIOFILE_AF10WAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
};

pub const DOLBYAC2WAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
    nAuxBitsCode: u16 align(1),
};

pub const GSM610WAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
    wSamplesPerBlock: u16 align(1),
};

pub const ADPCMEWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
    wSamplesPerBlock: u16 align(1),
};

pub const CONTRESVQLPCWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
    wSamplesPerBlock: u16 align(1),
};

pub const DIGIREALWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
    wSamplesPerBlock: u16 align(1),
};

pub const DIGIADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
    wSamplesPerBlock: u16 align(1),
};

pub const CONTRESCR10WAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
    wSamplesPerBlock: u16 align(1),
};

pub const NMS_VBXADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
    wSamplesPerBlock: u16 align(1),
};

pub const G721_ADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
    nAuxBlockSize: u16 align(1),
};

pub const MSAUDIO1WAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
    wSamplesPerBlock: u16 align(1),
    wEncodeOptions: u16 align(1),
};

pub const WMAUDIO2WAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
    dwSamplesPerBlock: u32 align(1),
    wEncodeOptions: u16 align(1),
    dwSuperBlockAlign: u32 align(1),
};

pub const WMAUDIO3WAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
    wValidBitsPerSample: u16 align(1),
    dwChannelMask: u32 align(1),
    dwReserved1: u32 align(1),
    dwReserved2: u32 align(1),
    wEncodeOptions: u16 align(1),
    wReserved3: u16 align(1),
};

pub const CREATIVEADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
    wRevision: u16 align(1),
};

pub const CREATIVEFASTSPEECH8WAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
    wRevision: u16 align(1),
};

pub const CREATIVEFASTSPEECH10WAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
    wRevision: u16 align(1),
};

pub const FMTOWNS_SND_WAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
    wRevision: u16 align(1),
};

pub const OLIGSMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
};

pub const OLIADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
};

pub const OLICELPWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
};

pub const OLISBCWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
};

pub const OLIOPRWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
};

pub const CSIMAADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX align(1),
};

pub const s_RIFFWAVE_inst = extern struct {
    bUnshiftedNote: u8,
    chFineTune: CHAR,
    chGain: CHAR,
    bLowNote: u8,
    bHighNote: u8,
    bLowVelocity: u8,
    bHighVelocity: u8,
};

pub const EXBMINFOHEADER = extern struct {
    bmi: BITMAPINFOHEADER align(1),
    biExtDataOffset: u32 align(1),
};

pub const JPEGINFOHEADER = extern struct {
    JPEGSize: u32 align(1),
    JPEGProcess: u32 align(1),
    JPEGColorSpaceID: u32 align(1),
    JPEGBitsPerSample: u32 align(1),
    JPEGHSubSampling: u32 align(1),
    JPEGVSubSampling: u32 align(1),
};

pub const YIELDPROC = *const fn(
    mciId: u32,
    dwYieldData: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const MCI_GENERIC_PARMS = extern struct {
    dwCallback: usize align(1),
};

pub const MCI_OPEN_PARMSA = extern struct {
    dwCallback: usize align(1),
    wDeviceID: u32 align(1),
    lpstrDeviceType: ?[*:0]const u8 align(1),
    lpstrElementName: ?[*:0]const u8 align(1),
    lpstrAlias: ?[*:0]const u8 align(1),
};

pub const MCI_OPEN_PARMSW = extern struct {
    dwCallback: usize align(1),
    wDeviceID: u32 align(1),
    lpstrDeviceType: ?[*:0]const u16 align(1),
    lpstrElementName: ?[*:0]const u16 align(1),
    lpstrAlias: ?[*:0]const u16 align(1),
};

pub const MCI_PLAY_PARMS = extern struct {
    dwCallback: usize align(1),
    dwFrom: u32 align(1),
    dwTo: u32 align(1),
};

pub const MCI_SEEK_PARMS = extern struct {
    dwCallback: usize align(1),
    dwTo: u32 align(1),
};

pub const MCI_STATUS_PARMS = extern struct {
    dwCallback: usize align(1),
    dwReturn: usize align(1),
    dwItem: u32 align(1),
    dwTrack: u32 align(1),
};

pub const MCI_INFO_PARMSA = extern struct {
    dwCallback: usize align(1),
    lpstrReturn: ?PSTR align(1),
    dwRetSize: u32 align(1),
};

pub const MCI_INFO_PARMSW = extern struct {
    dwCallback: usize align(1),
    lpstrReturn: ?PWSTR align(1),
    dwRetSize: u32 align(1),
};

pub const MCI_GETDEVCAPS_PARMS = extern struct {
    dwCallback: usize align(1),
    dwReturn: u32 align(1),
    dwItem: u32 align(1),
};

pub const MCI_SYSINFO_PARMSA = extern struct {
    dwCallback: usize align(1),
    lpstrReturn: ?PSTR align(1),
    dwRetSize: u32 align(1),
    dwNumber: u32 align(1),
    wDeviceType: u32 align(1),
};

pub const MCI_SYSINFO_PARMSW = extern struct {
    dwCallback: usize align(1),
    lpstrReturn: ?PWSTR align(1),
    dwRetSize: u32 align(1),
    dwNumber: u32 align(1),
    wDeviceType: u32 align(1),
};

pub const MCI_SET_PARMS = extern struct {
    dwCallback: usize align(1),
    dwTimeFormat: u32 align(1),
    dwAudio: u32 align(1),
};

pub const MCI_BREAK_PARMS = extern struct {
    dwCallback: usize align(1),
    nVirtKey: i32 align(1),
    hwndBreak: ?HWND align(1),
};

pub const MCI_SAVE_PARMSA = extern struct {
    dwCallback: usize align(1),
    lpfilename: ?[*:0]const u8 align(1),
};

pub const MCI_SAVE_PARMSW = extern struct {
    dwCallback: usize align(1),
    lpfilename: ?[*:0]const u16 align(1),
};

pub const MCI_LOAD_PARMSA = extern struct {
    dwCallback: usize align(1),
    lpfilename: ?[*:0]const u8 align(1),
};

pub const MCI_LOAD_PARMSW = extern struct {
    dwCallback: usize align(1),
    lpfilename: ?[*:0]const u16 align(1),
};

pub const MCI_RECORD_PARMS = extern struct {
    dwCallback: usize align(1),
    dwFrom: u32 align(1),
    dwTo: u32 align(1),
};

pub const MCI_VD_PLAY_PARMS = extern struct {
    dwCallback: usize align(1),
    dwFrom: u32 align(1),
    dwTo: u32 align(1),
    dwSpeed: u32 align(1),
};

pub const MCI_VD_STEP_PARMS = extern struct {
    dwCallback: usize align(1),
    dwFrames: u32 align(1),
};

pub const MCI_VD_ESCAPE_PARMSA = extern struct {
    dwCallback: usize align(1),
    lpstrCommand: ?[*:0]const u8 align(1),
};

pub const MCI_VD_ESCAPE_PARMSW = extern struct {
    dwCallback: usize align(1),
    lpstrCommand: ?[*:0]const u16 align(1),
};

pub const MCI_WAVE_OPEN_PARMSA = extern struct {
    dwCallback: usize align(1),
    wDeviceID: u32 align(1),
    lpstrDeviceType: ?[*:0]const u8 align(1),
    lpstrElementName: ?[*:0]const u8 align(1),
    lpstrAlias: ?[*:0]const u8 align(1),
    dwBufferSeconds: u32 align(1),
};

pub const MCI_WAVE_OPEN_PARMSW = extern struct {
    dwCallback: usize align(1),
    wDeviceID: u32 align(1),
    lpstrDeviceType: ?[*:0]const u16 align(1),
    lpstrElementName: ?[*:0]const u16 align(1),
    lpstrAlias: ?[*:0]const u16 align(1),
    dwBufferSeconds: u32 align(1),
};

pub const MCI_WAVE_DELETE_PARMS = extern struct {
    dwCallback: usize align(1),
    dwFrom: u32 align(1),
    dwTo: u32 align(1),
};

pub const MCI_WAVE_SET_PARMS = extern struct {
    dwCallback: usize align(1),
    dwTimeFormat: u32 align(1),
    dwAudio: u32 align(1),
    wInput: u32 align(1),
    wOutput: u32 align(1),
    wFormatTag: u16 align(1),
    wReserved2: u16 align(1),
    nChannels: u16 align(1),
    wReserved3: u16 align(1),
    nSamplesPerSec: u32 align(1),
    nAvgBytesPerSec: u32 align(1),
    nBlockAlign: u16 align(1),
    wReserved4: u16 align(1),
    wBitsPerSample: u16 align(1),
    wReserved5: u16 align(1),
};

pub const MCI_SEQ_SET_PARMS = extern struct {
    dwCallback: usize align(1),
    dwTimeFormat: u32 align(1),
    dwAudio: u32 align(1),
    dwTempo: u32 align(1),
    dwPort: u32 align(1),
    dwSlave: u32 align(1),
    dwMaster: u32 align(1),
    dwOffset: u32 align(1),
};

pub const MCI_ANIM_OPEN_PARMSA = extern struct {
    dwCallback: usize align(1),
    wDeviceID: u32 align(1),
    lpstrDeviceType: ?[*:0]const u8 align(1),
    lpstrElementName: ?[*:0]const u8 align(1),
    lpstrAlias: ?[*:0]const u8 align(1),
    dwStyle: u32 align(1),
    hWndParent: ?HWND align(1),
};

pub const MCI_ANIM_OPEN_PARMSW = extern struct {
    dwCallback: usize align(1),
    wDeviceID: u32 align(1),
    lpstrDeviceType: ?[*:0]const u16 align(1),
    lpstrElementName: ?[*:0]const u16 align(1),
    lpstrAlias: ?[*:0]const u16 align(1),
    dwStyle: u32 align(1),
    hWndParent: ?HWND align(1),
};

pub const MCI_ANIM_PLAY_PARMS = extern struct {
    dwCallback: usize align(1),
    dwFrom: u32 align(1),
    dwTo: u32 align(1),
    dwSpeed: u32 align(1),
};

pub const MCI_ANIM_STEP_PARMS = extern struct {
    dwCallback: usize align(1),
    dwFrames: u32 align(1),
};

pub const MCI_ANIM_WINDOW_PARMSA = extern struct {
    dwCallback: usize align(1),
    hWnd: ?HWND align(1),
    nCmdShow: u32 align(1),
    lpstrText: ?[*:0]const u8 align(1),
};

pub const MCI_ANIM_WINDOW_PARMSW = extern struct {
    dwCallback: usize align(1),
    hWnd: ?HWND align(1),
    nCmdShow: u32 align(1),
    lpstrText: ?[*:0]const u16 align(1),
};

pub const MCI_ANIM_RECT_PARMS = extern struct {
    dwCallback: usize align(1),
    rc: RECT align(1),
};

pub const MCI_ANIM_UPDATE_PARMS = extern struct {
    dwCallback: usize align(1),
    rc: RECT align(1),
    hDC: ?HDC align(1),
};

pub const MCI_OVLY_OPEN_PARMSA = extern struct {
    dwCallback: usize align(1),
    wDeviceID: u32 align(1),
    lpstrDeviceType: ?[*:0]const u8 align(1),
    lpstrElementName: ?[*:0]const u8 align(1),
    lpstrAlias: ?[*:0]const u8 align(1),
    dwStyle: u32 align(1),
    hWndParent: ?HWND align(1),
};

pub const MCI_OVLY_OPEN_PARMSW = extern struct {
    dwCallback: usize align(1),
    wDeviceID: u32 align(1),
    lpstrDeviceType: ?[*:0]const u16 align(1),
    lpstrElementName: ?[*:0]const u16 align(1),
    lpstrAlias: ?[*:0]const u16 align(1),
    dwStyle: u32 align(1),
    hWndParent: ?HWND align(1),
};

pub const MCI_OVLY_WINDOW_PARMSA = extern struct {
    dwCallback: usize align(1),
    hWnd: ?HWND align(1),
    nCmdShow: u32 align(1),
    lpstrText: ?[*:0]const u8 align(1),
};

pub const MCI_OVLY_WINDOW_PARMSW = extern struct {
    dwCallback: usize align(1),
    hWnd: ?HWND align(1),
    nCmdShow: u32 align(1),
    lpstrText: ?[*:0]const u16 align(1),
};

pub const MCI_OVLY_RECT_PARMS = extern struct {
    dwCallback: usize align(1),
    rc: RECT align(1),
};

pub const MCI_OVLY_SAVE_PARMSA = extern struct {
    dwCallback: usize align(1),
    lpfilename: ?[*:0]const u8 align(1),
    rc: RECT align(1),
};

pub const MCI_OVLY_SAVE_PARMSW = extern struct {
    dwCallback: usize align(1),
    lpfilename: ?[*:0]const u16 align(1),
    rc: RECT align(1),
};

pub const MCI_OVLY_LOAD_PARMSA = extern struct {
    dwCallback: usize align(1),
    lpfilename: ?[*:0]const u8 align(1),
    rc: RECT align(1),
};

pub const MCI_OVLY_LOAD_PARMSW = extern struct {
    dwCallback: usize align(1),
    lpfilename: ?[*:0]const u16 align(1),
    rc: RECT align(1),
};

pub const DRVCONFIGINFOEX = extern struct {
    dwDCISize: u32 align(1),
    lpszDCISectionName: ?[*:0]const u16 align(1),
    lpszDCIAliasName: ?[*:0]const u16 align(1),
    dnDevNode: u32 align(1),
};

pub const DRVCONFIGINFO = extern struct {
    dwDCISize: u32 align(1),
    lpszDCISectionName: ?[*:0]const u16 align(1),
    lpszDCIAliasName: ?[*:0]const u16 align(1),
};

pub const DRIVERPROC = *const fn(
    param0: usize,
    param1: ?HDRVR,
    param2: u32,
    param3: LPARAM,
    param4: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const DRIVERMSGPROC = *const fn(
    param0: u32,
    param1: u32,
    param2: usize,
    param3: usize,
    param4: usize,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const LPMMIOPROC = *const fn(
    lpmmioinfo: ?PSTR,
    uMsg: u32,
    lParam1: LPARAM,
    lParam2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const MMIOINFO = extern struct {
    dwFlags: u32 align(1),
    fccIOProc: u32 align(1),
    pIOProc: ?LPMMIOPROC align(1),
    wErrorRet: u32 align(1),
    htask: ?HTASK align(1),
    cchBuffer: i32 align(1),
    pchBuffer: ?*i8 align(1),
    pchNext: ?*i8 align(1),
    pchEndRead: ?*i8 align(1),
    pchEndWrite: ?*i8 align(1),
    lBufOffset: i32 align(1),
    lDiskOffset: i32 align(1),
    adwInfo: [3]u32 align(1),
    dwReserved1: u32 align(1),
    dwReserved2: u32 align(1),
    hmmio: ?HMMIO align(1),
};

pub const MMCKINFO = extern struct {
    ckid: u32 align(1),
    cksize: u32 align(1),
    fccType: u32 align(1),
    dwDataOffset: u32 align(1),
    dwFlags: u32 align(1),
};

pub const JOYCAPSA = extern struct {
    wMid: u16 align(1),
    wPid: u16 align(1),
    szPname: [32]CHAR align(1),
    wXmin: u32 align(1),
    wXmax: u32 align(1),
    wYmin: u32 align(1),
    wYmax: u32 align(1),
    wZmin: u32 align(1),
    wZmax: u32 align(1),
    wNumButtons: u32 align(1),
    wPeriodMin: u32 align(1),
    wPeriodMax: u32 align(1),
    wRmin: u32 align(1),
    wRmax: u32 align(1),
    wUmin: u32 align(1),
    wUmax: u32 align(1),
    wVmin: u32 align(1),
    wVmax: u32 align(1),
    wCaps: u32 align(1),
    wMaxAxes: u32 align(1),
    wNumAxes: u32 align(1),
    wMaxButtons: u32 align(1),
    szRegKey: [32]CHAR align(1),
    szOEMVxD: [260]CHAR align(1),
};

pub const JOYCAPSW = extern struct {
    wMid: u16 align(1),
    wPid: u16 align(1),
    szPname: [32]u16 align(1),
    wXmin: u32 align(1),
    wXmax: u32 align(1),
    wYmin: u32 align(1),
    wYmax: u32 align(1),
    wZmin: u32 align(1),
    wZmax: u32 align(1),
    wNumButtons: u32 align(1),
    wPeriodMin: u32 align(1),
    wPeriodMax: u32 align(1),
    wRmin: u32 align(1),
    wRmax: u32 align(1),
    wUmin: u32 align(1),
    wUmax: u32 align(1),
    wVmin: u32 align(1),
    wVmax: u32 align(1),
    wCaps: u32 align(1),
    wMaxAxes: u32 align(1),
    wNumAxes: u32 align(1),
    wMaxButtons: u32 align(1),
    szRegKey: [32]u16 align(1),
    szOEMVxD: [260]u16 align(1),
};

pub const JOYCAPS2A = extern struct {
    wMid: u16 align(1),
    wPid: u16 align(1),
    szPname: [32]CHAR align(1),
    wXmin: u32 align(1),
    wXmax: u32 align(1),
    wYmin: u32 align(1),
    wYmax: u32 align(1),
    wZmin: u32 align(1),
    wZmax: u32 align(1),
    wNumButtons: u32 align(1),
    wPeriodMin: u32 align(1),
    wPeriodMax: u32 align(1),
    wRmin: u32 align(1),
    wRmax: u32 align(1),
    wUmin: u32 align(1),
    wUmax: u32 align(1),
    wVmin: u32 align(1),
    wVmax: u32 align(1),
    wCaps: u32 align(1),
    wMaxAxes: u32 align(1),
    wNumAxes: u32 align(1),
    wMaxButtons: u32 align(1),
    szRegKey: [32]CHAR align(1),
    szOEMVxD: [260]CHAR align(1),
    ManufacturerGuid: Guid align(1),
    ProductGuid: Guid align(1),
    NameGuid: Guid align(1),
};

pub const JOYCAPS2W = extern struct {
    wMid: u16 align(1),
    wPid: u16 align(1),
    szPname: [32]u16 align(1),
    wXmin: u32 align(1),
    wXmax: u32 align(1),
    wYmin: u32 align(1),
    wYmax: u32 align(1),
    wZmin: u32 align(1),
    wZmax: u32 align(1),
    wNumButtons: u32 align(1),
    wPeriodMin: u32 align(1),
    wPeriodMax: u32 align(1),
    wRmin: u32 align(1),
    wRmax: u32 align(1),
    wUmin: u32 align(1),
    wUmax: u32 align(1),
    wVmin: u32 align(1),
    wVmax: u32 align(1),
    wCaps: u32 align(1),
    wMaxAxes: u32 align(1),
    wNumAxes: u32 align(1),
    wMaxButtons: u32 align(1),
    szRegKey: [32]u16 align(1),
    szOEMVxD: [260]u16 align(1),
    ManufacturerGuid: Guid align(1),
    ProductGuid: Guid align(1),
    NameGuid: Guid align(1),
};

pub const JOYINFO = extern struct {
    wXpos: u32 align(1),
    wYpos: u32 align(1),
    wZpos: u32 align(1),
    wButtons: u32 align(1),
};

pub const JOYINFOEX = extern struct {
    dwSize: u32 align(1),
    dwFlags: u32 align(1),
    dwXpos: u32 align(1),
    dwYpos: u32 align(1),
    dwZpos: u32 align(1),
    dwRpos: u32 align(1),
    dwUpos: u32 align(1),
    dwVpos: u32 align(1),
    dwButtons: u32 align(1),
    dwButtonNumber: u32 align(1),
    dwPOV: u32 align(1),
    dwReserved1: u32 align(1),
    dwReserved2: u32 align(1),
};

pub const MCI_DGV_RECT_PARMS = extern struct {
    dwCallback: usize align(1),
    rc: RECT align(1),
};

pub const MCI_DGV_CAPTURE_PARMSA = extern struct {
    dwCallback: usize align(1),
    lpstrFileName: ?PSTR align(1),
    rc: RECT align(1),
};

pub const MCI_DGV_CAPTURE_PARMSW = extern struct {
    dwCallback: usize align(1),
    lpstrFileName: ?PWSTR align(1),
    rc: RECT align(1),
};

pub const MCI_DGV_COPY_PARMS = extern struct {
    dwCallback: usize align(1),
    dwFrom: u32 align(1),
    dwTo: u32 align(1),
    rc: RECT align(1),
    dwAudioStream: u32 align(1),
    dwVideoStream: u32 align(1),
};

pub const MCI_DGV_CUE_PARMS = extern struct {
    dwCallback: usize align(1),
    dwTo: u32 align(1),
};

pub const MCI_DGV_CUT_PARMS = extern struct {
    dwCallback: usize align(1),
    dwFrom: u32 align(1),
    dwTo: u32 align(1),
    rc: RECT align(1),
    dwAudioStream: u32 align(1),
    dwVideoStream: u32 align(1),
};

pub const MCI_DGV_DELETE_PARMS = extern struct {
    dwCallback: usize align(1),
    dwFrom: u32 align(1),
    dwTo: u32 align(1),
    rc: RECT align(1),
    dwAudioStream: u32 align(1),
    dwVideoStream: u32 align(1),
};

pub const MCI_DGV_INFO_PARMSA = extern struct {
    dwCallback: usize align(1),
    lpstrReturn: ?PSTR align(1),
    dwRetSize: u32 align(1),
    dwItem: u32 align(1),
};

pub const MCI_DGV_INFO_PARMSW = extern struct {
    dwCallback: usize align(1),
    lpstrReturn: ?PWSTR align(1),
    dwRetSize: u32 align(1),
    dwItem: u32 align(1),
};

pub const MCI_DGV_LIST_PARMSA = extern struct {
    dwCallback: usize align(1),
    lpstrReturn: ?PSTR align(1),
    dwLength: u32 align(1),
    dwNumber: u32 align(1),
    dwItem: u32 align(1),
    lpstrAlgorithm: ?PSTR align(1),
};

pub const MCI_DGV_LIST_PARMSW = extern struct {
    dwCallback: usize align(1),
    lpstrReturn: ?PWSTR align(1),
    dwLength: u32 align(1),
    dwNumber: u32 align(1),
    dwItem: u32 align(1),
    lpstrAlgorithm: ?PWSTR align(1),
};

pub const MCI_DGV_MONITOR_PARMS = extern struct {
    dwCallback: usize align(1),
    dwSource: u32 align(1),
    dwMethod: u32 align(1),
};

pub const MCI_DGV_OPEN_PARMSA = extern struct {
    dwCallback: usize align(1),
    wDeviceID: u32 align(1),
    lpstrDeviceType: ?PSTR align(1),
    lpstrElementName: ?PSTR align(1),
    lpstrAlias: ?PSTR align(1),
    dwStyle: u32 align(1),
    hWndParent: ?HWND align(1),
};

pub const MCI_DGV_OPEN_PARMSW = extern struct {
    dwCallback: usize align(1),
    wDeviceID: u32 align(1),
    lpstrDeviceType: ?PWSTR align(1),
    lpstrElementName: ?PWSTR align(1),
    lpstrAlias: ?PWSTR align(1),
    dwStyle: u32 align(1),
    hWndParent: ?HWND align(1),
};

pub const MCI_DGV_PASTE_PARMS = extern struct {
    dwCallback: usize align(1),
    dwTo: u32 align(1),
    rc: RECT align(1),
    dwAudioStream: u32 align(1),
    dwVideoStream: u32 align(1),
};

pub const MCI_DGV_QUALITY_PARMSA = extern struct {
    dwCallback: usize align(1),
    dwItem: u32 align(1),
    lpstrName: ?PSTR align(1),
    lpstrAlgorithm: u32 align(1),
    dwHandle: u32 align(1),
};

pub const MCI_DGV_QUALITY_PARMSW = extern struct {
    dwCallback: usize align(1),
    dwItem: u32 align(1),
    lpstrName: ?PWSTR align(1),
    lpstrAlgorithm: u32 align(1),
    dwHandle: u32 align(1),
};

pub const MCI_DGV_RECORD_PARMS = extern struct {
    dwCallback: usize align(1),
    dwFrom: u32 align(1),
    dwTo: u32 align(1),
    rc: RECT align(1),
    dwAudioStream: u32 align(1),
    dwVideoStream: u32 align(1),
};

pub const MCI_DGV_RESERVE_PARMSA = extern struct {
    dwCallback: usize align(1),
    lpstrPath: ?PSTR align(1),
    dwSize: u32 align(1),
};

pub const MCI_DGV_RESERVE_PARMSW = extern struct {
    dwCallback: usize align(1),
    lpstrPath: ?PWSTR align(1),
    dwSize: u32 align(1),
};

pub const MCI_DGV_RESTORE_PARMSA = extern struct {
    dwCallback: usize align(1),
    lpstrFileName: ?PSTR align(1),
    rc: RECT align(1),
};

pub const MCI_DGV_RESTORE_PARMSW = extern struct {
    dwCallback: usize align(1),
    lpstrFileName: ?PWSTR align(1),
    rc: RECT align(1),
};

pub const MCI_DGV_SAVE_PARMSA = extern struct {
    dwCallback: usize align(1),
    lpstrFileName: ?PSTR align(1),
    rc: RECT align(1),
};

pub const MCI_DGV_SAVE_PARMSW = extern struct {
    dwCallback: usize align(1),
    lpstrFileName: ?PWSTR align(1),
    rc: RECT align(1),
};

pub const MCI_DGV_SET_PARMS = extern struct {
    dwCallback: usize align(1),
    dwTimeFormat: u32 align(1),
    dwAudio: u32 align(1),
    dwFileFormat: u32 align(1),
    dwSpeed: u32 align(1),
};

pub const MCI_DGV_SETAUDIO_PARMSA = extern struct {
    dwCallback: usize align(1),
    dwItem: u32 align(1),
    dwValue: u32 align(1),
    dwOver: u32 align(1),
    lpstrAlgorithm: ?PSTR align(1),
    lpstrQuality: ?PSTR align(1),
};

pub const MCI_DGV_SETAUDIO_PARMSW = extern struct {
    dwCallback: usize align(1),
    dwItem: u32 align(1),
    dwValue: u32 align(1),
    dwOver: u32 align(1),
    lpstrAlgorithm: ?PWSTR align(1),
    lpstrQuality: ?PWSTR align(1),
};

pub const MCI_DGV_SIGNAL_PARMS = extern struct {
    dwCallback: usize align(1),
    dwPosition: u32 align(1),
    dwPeriod: u32 align(1),
    dwUserParm: u32 align(1),
};

pub const MCI_DGV_SETVIDEO_PARMSA = extern struct {
    dwCallback: usize align(1),
    dwItem: u32 align(1),
    dwValue: u32 align(1),
    dwOver: u32 align(1),
    lpstrAlgorithm: ?PSTR align(1),
    lpstrQuality: ?PSTR align(1),
    dwSourceNumber: u32 align(1),
};

pub const MCI_DGV_SETVIDEO_PARMSW = extern struct {
    dwCallback: usize align(1),
    dwItem: u32 align(1),
    dwValue: u32 align(1),
    dwOver: u32 align(1),
    lpstrAlgorithm: ?PWSTR align(1),
    lpstrQuality: ?PWSTR align(1),
    dwSourceNumber: u32 align(1),
};

pub const MCI_DGV_STATUS_PARMSA = extern struct {
    dwCallback: usize align(1),
    dwReturn: usize align(1),
    dwItem: u32 align(1),
    dwTrack: u32 align(1),
    lpstrDrive: ?PSTR align(1),
    dwReference: u32 align(1),
};

pub const MCI_DGV_STATUS_PARMSW = extern struct {
    dwCallback: usize align(1),
    dwReturn: usize align(1),
    dwItem: u32 align(1),
    dwTrack: u32 align(1),
    lpstrDrive: ?PWSTR align(1),
    dwReference: u32 align(1),
};

pub const MCI_DGV_STEP_PARMS = extern struct {
    dwCallback: usize align(1),
    dwFrames: u32 align(1),
};

pub const MCI_DGV_UPDATE_PARMS = extern struct {
    dwCallback: usize align(1),
    rc: RECT align(1),
    hDC: ?HDC align(1),
};

pub const MCI_DGV_WINDOW_PARMSA = extern struct {
    dwCallback: usize align(1),
    hWnd: ?HWND align(1),
    nCmdShow: u32 align(1),
    lpstrText: ?PSTR align(1),
};

pub const MCI_DGV_WINDOW_PARMSW = extern struct {
    dwCallback: usize align(1),
    hWnd: ?HWND align(1),
    nCmdShow: u32 align(1),
    lpstrText: ?PWSTR align(1),
};

pub const ICOPEN = extern struct {
    dwSize: u32,
    fccType: u32,
    fccHandler: u32,
    dwVersion: u32,
    dwFlags: u32,
    dwError: LRESULT,
    pV1Reserved: ?*anyopaque,
    pV2Reserved: ?*anyopaque,
    dnDevNode: u32,
};

pub const ICINFO = extern struct {
    dwSize: u32,
    fccType: u32,
    fccHandler: u32,
    dwFlags: u32,
    dwVersion: u32,
    dwVersionICM: u32,
    szName: [16]u16,
    szDescription: [128]u16,
    szDriver: [128]u16,
};

pub const ICCOMPRESS = extern struct {
    dwFlags: u32,
    lpbiOutput: ?*BITMAPINFOHEADER,
    lpOutput: ?*anyopaque,
    lpbiInput: ?*BITMAPINFOHEADER,
    lpInput: ?*anyopaque,
    lpckid: ?*u32,
    lpdwFlags: ?*u32,
    lFrameNum: i32,
    dwFrameSize: u32,
    dwQuality: u32,
    lpbiPrev: ?*BITMAPINFOHEADER,
    lpPrev: ?*anyopaque,
};

pub const ICCOMPRESSFRAMES = extern struct {
    dwFlags: u32,
    lpbiOutput: ?*BITMAPINFOHEADER,
    lOutput: LPARAM,
    lpbiInput: ?*BITMAPINFOHEADER,
    lInput: LPARAM,
    lStartFrame: i32,
    lFrameCount: i32,
    lQuality: i32,
    lDataRate: i32,
    lKeyRate: i32,
    dwRate: u32,
    dwScale: u32,
    dwOverheadPerFrame: u32,
    dwReserved2: u32,
    GetData: isize,
    PutData: isize,
};

pub const ICSETSTATUSPROC = extern struct {
    dwFlags: u32,
    lParam: LPARAM,
    Status: isize,
};

pub const ICDECOMPRESS = extern struct {
    dwFlags: u32,
    lpbiInput: ?*BITMAPINFOHEADER,
    lpInput: ?*anyopaque,
    lpbiOutput: ?*BITMAPINFOHEADER,
    lpOutput: ?*anyopaque,
    ckid: u32,
};

pub const ICDECOMPRESSEX = extern struct {
    dwFlags: u32,
    lpbiSrc: ?*BITMAPINFOHEADER,
    lpSrc: ?*anyopaque,
    lpbiDst: ?*BITMAPINFOHEADER,
    lpDst: ?*anyopaque,
    xDst: i32,
    yDst: i32,
    dxDst: i32,
    dyDst: i32,
    xSrc: i32,
    ySrc: i32,
    dxSrc: i32,
    dySrc: i32,
};

pub const ICDRAWBEGIN = extern struct {
    dwFlags: u32,
    hpal: ?HPALETTE,
    hwnd: ?HWND,
    hdc: ?HDC,
    xDst: i32,
    yDst: i32,
    dxDst: i32,
    dyDst: i32,
    lpbi: ?*BITMAPINFOHEADER,
    xSrc: i32,
    ySrc: i32,
    dxSrc: i32,
    dySrc: i32,
    dwRate: u32,
    dwScale: u32,
};

pub const ICDRAW = extern struct {
    dwFlags: u32,
    lpFormat: ?*anyopaque,
    lpData: ?*anyopaque,
    cbData: u32,
    lTime: i32,
};

pub const ICDRAWSUGGEST = extern struct {
    lpbiIn: ?*BITMAPINFOHEADER,
    lpbiSuggest: ?*BITMAPINFOHEADER,
    dxSrc: i32,
    dySrc: i32,
    dxDst: i32,
    dyDst: i32,
    hicDecompressor: ?HIC,
};

pub const ICPALETTE = extern struct {
    dwFlags: u32,
    iStart: i32,
    iLen: i32,
    lppe: ?*PALETTEENTRY,
};

pub const COMPVARS = extern struct {
    cbSize: i32,
    dwFlags: u32,
    hic: ?HIC,
    fccType: u32,
    fccHandler: u32,
    lpbiIn: ?*BITMAPINFO,
    lpbiOut: ?*BITMAPINFO,
    lpBitsOut: ?*anyopaque,
    lpBitsPrev: ?*anyopaque,
    lFrame: i32,
    lKey: i32,
    lDataRate: i32,
    lQ: i32,
    lKeyCount: i32,
    lpState: ?*anyopaque,
    cbState: i32,
};

pub const DRAWDIBTIME = extern struct {
    timeCount: i32,
    timeDraw: i32,
    timeDecompress: i32,
    timeDither: i32,
    timeStretch: i32,
    timeBlt: i32,
    timeSetDIBits: i32,
};

pub const AVISTREAMINFOW = extern struct {
    fccType: u32,
    fccHandler: u32,
    dwFlags: u32,
    dwCaps: u32,
    wPriority: u16,
    wLanguage: u16,
    dwScale: u32,
    dwRate: u32,
    dwStart: u32,
    dwLength: u32,
    dwInitialFrames: u32,
    dwSuggestedBufferSize: u32,
    dwQuality: u32,
    dwSampleSize: u32,
    rcFrame: RECT,
    dwEditCount: u32,
    dwFormatChangeCount: u32,
    szName: [64]u16,
};

pub const AVISTREAMINFOA = extern struct {
    fccType: u32,
    fccHandler: u32,
    dwFlags: u32,
    dwCaps: u32,
    wPriority: u16,
    wLanguage: u16,
    dwScale: u32,
    dwRate: u32,
    dwStart: u32,
    dwLength: u32,
    dwInitialFrames: u32,
    dwSuggestedBufferSize: u32,
    dwQuality: u32,
    dwSampleSize: u32,
    rcFrame: RECT,
    dwEditCount: u32,
    dwFormatChangeCount: u32,
    szName: [64]CHAR,
};

pub const AVIFILEINFOW = extern struct {
    dwMaxBytesPerSec: u32,
    dwFlags: u32,
    dwCaps: u32,
    dwStreams: u32,
    dwSuggestedBufferSize: u32,
    dwWidth: u32,
    dwHeight: u32,
    dwScale: u32,
    dwRate: u32,
    dwLength: u32,
    dwEditCount: u32,
    szFileType: [64]u16,
};

pub const AVIFILEINFOA = extern struct {
    dwMaxBytesPerSec: u32,
    dwFlags: u32,
    dwCaps: u32,
    dwStreams: u32,
    dwSuggestedBufferSize: u32,
    dwWidth: u32,
    dwHeight: u32,
    dwScale: u32,
    dwRate: u32,
    dwLength: u32,
    dwEditCount: u32,
    szFileType: [64]CHAR,
};

pub const AVISAVECALLBACK = *const fn(
    param0: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const AVICOMPRESSOPTIONS = extern struct {
    fccType: u32,
    fccHandler: u32,
    dwKeyFrameEvery: u32,
    dwQuality: u32,
    dwBytesPerSecond: u32,
    dwFlags: u32,
    lpFormat: ?*anyopaque,
    cbFormat: u32,
    lpParms: ?*anyopaque,
    cbParms: u32,
    dwInterleaveEvery: u32,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IAVIStream_Value = Guid.initString("00020021-0000-0000-c000-000000000046");
pub const IID_IAVIStream = &IID_IAVIStream_Value;
pub const IAVIStream = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: *const fn(
            self: *const IAVIStream,
            lParam1: LPARAM,
            lParam2: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Info: *const fn(
            self: *const IAVIStream,
            // TODO: what to do with BytesParamIndex 1?
            psi: ?*AVISTREAMINFOW,
            lSize: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindSample: *const fn(
            self: *const IAVIStream,
            lPos: i32,
            lFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) i32,
        ReadFormat: *const fn(
            self: *const IAVIStream,
            lPos: i32,
            // TODO: what to do with BytesParamIndex 2?
            lpFormat: ?*anyopaque,
            lpcbFormat: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFormat: *const fn(
            self: *const IAVIStream,
            lPos: i32,
            // TODO: what to do with BytesParamIndex 2?
            lpFormat: ?*anyopaque,
            cbFormat: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Read: *const fn(
            self: *const IAVIStream,
            lStart: i32,
            lSamples: i32,
            // TODO: what to do with BytesParamIndex 3?
            lpBuffer: ?*anyopaque,
            cbBuffer: i32,
            plBytes: ?*i32,
            plSamples: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Write: *const fn(
            self: *const IAVIStream,
            lStart: i32,
            lSamples: i32,
            // TODO: what to do with BytesParamIndex 3?
            lpBuffer: ?*anyopaque,
            cbBuffer: i32,
            dwFlags: u32,
            plSampWritten: ?*i32,
            plBytesWritten: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn(
            self: *const IAVIStream,
            lStart: i32,
            lSamples: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadData: *const fn(
            self: *const IAVIStream,
            fcc: u32,
            // TODO: what to do with BytesParamIndex 2?
            lp: ?*anyopaque,
            lpcb: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteData: *const fn(
            self: *const IAVIStream,
            fcc: u32,
            // TODO: what to do with BytesParamIndex 2?
            lp: ?*anyopaque,
            cb: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInfo: *const fn(
            self: *const IAVIStream,
            // TODO: what to do with BytesParamIndex 1?
            lpInfo: ?*AVISTREAMINFOW,
            cbInfo: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Create(self: *const IAVIStream, lParam1: LPARAM, lParam2: LPARAM) callconv(.Inline) HRESULT {
        return self.vtable.Create(self, lParam1, lParam2);
    }
    pub fn Info(self: *const IAVIStream, psi: ?*AVISTREAMINFOW, lSize: i32) callconv(.Inline) HRESULT {
        return self.vtable.Info(self, psi, lSize);
    }
    pub fn FindSample(self: *const IAVIStream, lPos: i32, lFlags: i32) callconv(.Inline) i32 {
        return self.vtable.FindSample(self, lPos, lFlags);
    }
    pub fn ReadFormat(self: *const IAVIStream, lPos: i32, lpFormat: ?*anyopaque, lpcbFormat: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.ReadFormat(self, lPos, lpFormat, lpcbFormat);
    }
    pub fn SetFormat(self: *const IAVIStream, lPos: i32, lpFormat: ?*anyopaque, cbFormat: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetFormat(self, lPos, lpFormat, cbFormat);
    }
    pub fn Read(self: *const IAVIStream, lStart: i32, lSamples: i32, lpBuffer: ?*anyopaque, cbBuffer: i32, plBytes: ?*i32, plSamples: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.Read(self, lStart, lSamples, lpBuffer, cbBuffer, plBytes, plSamples);
    }
    pub fn Write(self: *const IAVIStream, lStart: i32, lSamples: i32, lpBuffer: ?*anyopaque, cbBuffer: i32, dwFlags: u32, plSampWritten: ?*i32, plBytesWritten: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.Write(self, lStart, lSamples, lpBuffer, cbBuffer, dwFlags, plSampWritten, plBytesWritten);
    }
    pub fn Delete(self: *const IAVIStream, lStart: i32, lSamples: i32) callconv(.Inline) HRESULT {
        return self.vtable.Delete(self, lStart, lSamples);
    }
    pub fn ReadData(self: *const IAVIStream, fcc: u32, lp: ?*anyopaque, lpcb: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.ReadData(self, fcc, lp, lpcb);
    }
    pub fn WriteData(self: *const IAVIStream, fcc: u32, lp: ?*anyopaque, cb: i32) callconv(.Inline) HRESULT {
        return self.vtable.WriteData(self, fcc, lp, cb);
    }
    pub fn SetInfo(self: *const IAVIStream, lpInfo: ?*AVISTREAMINFOW, cbInfo: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetInfo(self, lpInfo, cbInfo);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IAVIStreaming_Value = Guid.initString("00020022-0000-0000-c000-000000000046");
pub const IID_IAVIStreaming = &IID_IAVIStreaming_Value;
pub const IAVIStreaming = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Begin: *const fn(
            self: *const IAVIStreaming,
            lStart: i32,
            lEnd: i32,
            lRate: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        End: *const fn(
            self: *const IAVIStreaming,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Begin(self: *const IAVIStreaming, lStart: i32, lEnd: i32, lRate: i32) callconv(.Inline) HRESULT {
        return self.vtable.Begin(self, lStart, lEnd, lRate);
    }
    pub fn End(self: *const IAVIStreaming) callconv(.Inline) HRESULT {
        return self.vtable.End(self);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IAVIEditStream_Value = Guid.initString("00020024-0000-0000-c000-000000000046");
pub const IID_IAVIEditStream = &IID_IAVIEditStream_Value;
pub const IAVIEditStream = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Cut: *const fn(
            self: *const IAVIEditStream,
            plStart: ?*i32,
            plLength: ?*i32,
            ppResult: ?*?*IAVIStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Copy: *const fn(
            self: *const IAVIEditStream,
            plStart: ?*i32,
            plLength: ?*i32,
            ppResult: ?*?*IAVIStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Paste: *const fn(
            self: *const IAVIEditStream,
            plPos: ?*i32,
            plLength: ?*i32,
            pstream: ?*IAVIStream,
            lStart: i32,
            lEnd: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IAVIEditStream,
            ppResult: ?*?*IAVIStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInfo: *const fn(
            self: *const IAVIEditStream,
            // TODO: what to do with BytesParamIndex 1?
            lpInfo: ?*AVISTREAMINFOW,
            cbInfo: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Cut(self: *const IAVIEditStream, plStart: ?*i32, plLength: ?*i32, ppResult: ?*?*IAVIStream) callconv(.Inline) HRESULT {
        return self.vtable.Cut(self, plStart, plLength, ppResult);
    }
    pub fn Copy(self: *const IAVIEditStream, plStart: ?*i32, plLength: ?*i32, ppResult: ?*?*IAVIStream) callconv(.Inline) HRESULT {
        return self.vtable.Copy(self, plStart, plLength, ppResult);
    }
    pub fn Paste(self: *const IAVIEditStream, plPos: ?*i32, plLength: ?*i32, pstream: ?*IAVIStream, lStart: i32, lEnd: i32) callconv(.Inline) HRESULT {
        return self.vtable.Paste(self, plPos, plLength, pstream, lStart, lEnd);
    }
    pub fn Clone(self: *const IAVIEditStream, ppResult: ?*?*IAVIStream) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppResult);
    }
    pub fn SetInfo(self: *const IAVIEditStream, lpInfo: ?*AVISTREAMINFOW, cbInfo: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetInfo(self, lpInfo, cbInfo);
    }
};

const IID_IAVIPersistFile_Value = Guid.initString("00020025-0000-0000-c000-000000000046");
pub const IID_IAVIPersistFile = &IID_IAVIPersistFile_Value;
pub const IAVIPersistFile = extern union {
    pub const VTable = extern struct {
        base: IPersistFile.VTable,
        Reserved1: *const fn(
            self: *const IAVIPersistFile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IPersistFile: IPersistFile,
    IPersist: IPersist,
    IUnknown: IUnknown,
    pub fn Reserved1(self: *const IAVIPersistFile) callconv(.Inline) HRESULT {
        return self.vtable.Reserved1(self);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IAVIFile_Value = Guid.initString("00020020-0000-0000-c000-000000000046");
pub const IID_IAVIFile = &IID_IAVIFile_Value;
pub const IAVIFile = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Info: *const fn(
            self: *const IAVIFile,
            // TODO: what to do with BytesParamIndex 1?
            pfi: ?*AVIFILEINFOW,
            lSize: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStream: *const fn(
            self: *const IAVIFile,
            ppStream: ?*?*IAVIStream,
            fccType: u32,
            lParam: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateStream: *const fn(
            self: *const IAVIFile,
            ppStream: ?*?*IAVIStream,
            psi: ?*AVISTREAMINFOW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteData: *const fn(
            self: *const IAVIFile,
            ckid: u32,
            // TODO: what to do with BytesParamIndex 2?
            lpData: ?*anyopaque,
            cbData: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadData: *const fn(
            self: *const IAVIFile,
            ckid: u32,
            // TODO: what to do with BytesParamIndex 2?
            lpData: ?*anyopaque,
            lpcbData: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndRecord: *const fn(
            self: *const IAVIFile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteStream: *const fn(
            self: *const IAVIFile,
            fccType: u32,
            lParam: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Info(self: *const IAVIFile, pfi: ?*AVIFILEINFOW, lSize: i32) callconv(.Inline) HRESULT {
        return self.vtable.Info(self, pfi, lSize);
    }
    pub fn GetStream(self: *const IAVIFile, ppStream: ?*?*IAVIStream, fccType: u32, lParam: i32) callconv(.Inline) HRESULT {
        return self.vtable.GetStream(self, ppStream, fccType, lParam);
    }
    pub fn CreateStream(self: *const IAVIFile, ppStream: ?*?*IAVIStream, psi: ?*AVISTREAMINFOW) callconv(.Inline) HRESULT {
        return self.vtable.CreateStream(self, ppStream, psi);
    }
    pub fn WriteData(self: *const IAVIFile, ckid: u32, lpData: ?*anyopaque, cbData: i32) callconv(.Inline) HRESULT {
        return self.vtable.WriteData(self, ckid, lpData, cbData);
    }
    pub fn ReadData(self: *const IAVIFile, ckid: u32, lpData: ?*anyopaque, lpcbData: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.ReadData(self, ckid, lpData, lpcbData);
    }
    pub fn EndRecord(self: *const IAVIFile) callconv(.Inline) HRESULT {
        return self.vtable.EndRecord(self);
    }
    pub fn DeleteStream(self: *const IAVIFile, fccType: u32, lParam: i32) callconv(.Inline) HRESULT {
        return self.vtable.DeleteStream(self, fccType, lParam);
    }
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IGetFrame_Value = Guid.initString("00020023-0000-0000-c000-000000000046");
pub const IID_IGetFrame = &IID_IGetFrame_Value;
pub const IGetFrame = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFrame: *const fn(
            self: *const IGetFrame,
            lPos: i32,
        ) callconv(@import("std").os.windows.WINAPI) ?*anyopaque,
        Begin: *const fn(
            self: *const IGetFrame,
            lStart: i32,
            lEnd: i32,
            lRate: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        End: *const fn(
            self: *const IGetFrame,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFormat: *const fn(
            self: *const IGetFrame,
            lpbi: ?*BITMAPINFOHEADER,
            lpBits: ?*anyopaque,
            x: i32,
            y: i32,
            dx: i32,
            dy: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetFrame(self: *const IGetFrame, lPos: i32) callconv(.Inline) ?*anyopaque {
        return self.vtable.GetFrame(self, lPos);
    }
    pub fn Begin(self: *const IGetFrame, lStart: i32, lEnd: i32, lRate: i32) callconv(.Inline) HRESULT {
        return self.vtable.Begin(self, lStart, lEnd, lRate);
    }
    pub fn End(self: *const IGetFrame) callconv(.Inline) HRESULT {
        return self.vtable.End(self);
    }
    pub fn SetFormat(self: *const IGetFrame, lpbi: ?*BITMAPINFOHEADER, lpBits: ?*anyopaque, x: i32, y: i32, dx: i32, dy: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetFormat(self, lpbi, lpBits, x, y, dx, dy);
    }
};

pub const VIDEOHDR = extern struct {
    lpData: ?*u8,
    dwBufferLength: u32,
    dwBytesUsed: u32,
    dwTimeCaptured: u32,
    dwUser: usize,
    dwFlags: u32,
    dwReserved: [4]usize,
};

pub const CHANNEL_CAPS = extern struct {
    dwFlags: u32,
    dwSrcRectXMod: u32,
    dwSrcRectYMod: u32,
    dwSrcRectWidthMod: u32,
    dwSrcRectHeightMod: u32,
    dwDstRectXMod: u32,
    dwDstRectYMod: u32,
    dwDstRectWidthMod: u32,
    dwDstRectHeightMod: u32,
};

pub const CAPDRIVERCAPS = extern struct {
    wDeviceIndex: u32,
    fHasOverlay: BOOL,
    fHasDlgVideoSource: BOOL,
    fHasDlgVideoFormat: BOOL,
    fHasDlgVideoDisplay: BOOL,
    fCaptureInitialized: BOOL,
    fDriverSuppliesPalettes: BOOL,
    hVideoIn: ?HANDLE,
    hVideoOut: ?HANDLE,
    hVideoExtIn: ?HANDLE,
    hVideoExtOut: ?HANDLE,
};

pub const CAPSTATUS = extern struct {
    uiImageWidth: u32,
    uiImageHeight: u32,
    fLiveWindow: BOOL,
    fOverlayWindow: BOOL,
    fScale: BOOL,
    ptScroll: POINT,
    fUsingDefaultPalette: BOOL,
    fAudioHardware: BOOL,
    fCapFileExists: BOOL,
    dwCurrentVideoFrame: u32,
    dwCurrentVideoFramesDropped: u32,
    dwCurrentWaveSamples: u32,
    dwCurrentTimeElapsedMS: u32,
    hPalCurrent: ?HPALETTE,
    fCapturingNow: BOOL,
    dwReturn: u32,
    wNumVideoAllocated: u32,
    wNumAudioAllocated: u32,
};

pub const CAPTUREPARMS = extern struct {
    dwRequestMicroSecPerFrame: u32,
    fMakeUserHitOKToCapture: BOOL,
    wPercentDropForError: u32,
    fYield: BOOL,
    dwIndexSize: u32,
    wChunkGranularity: u32,
    fUsingDOSMemory: BOOL,
    wNumVideoRequested: u32,
    fCaptureAudio: BOOL,
    wNumAudioRequested: u32,
    vKeyAbort: u32,
    fAbortLeftMouse: BOOL,
    fAbortRightMouse: BOOL,
    fLimitEnabled: BOOL,
    wTimeLimit: u32,
    fMCIControl: BOOL,
    fStepMCIDevice: BOOL,
    dwMCIStartTime: u32,
    dwMCIStopTime: u32,
    fStepCaptureAt2x: BOOL,
    wStepCaptureAverageFrames: u32,
    dwAudioBufferSize: u32,
    fDisableWriteCache: BOOL,
    AVStreamMaster: u32,
};

pub const CAPINFOCHUNK = extern struct {
    fccInfoID: u32,
    lpData: ?*anyopaque,
    cbData: i32,
};

pub const CAPYIELDCALLBACK = *const fn(
    hWnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const CAPSTATUSCALLBACKW = *const fn(
    hWnd: ?HWND,
    nID: i32,
    lpsz: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const CAPERRORCALLBACKW = *const fn(
    hWnd: ?HWND,
    nID: i32,
    lpsz: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const CAPSTATUSCALLBACKA = *const fn(
    hWnd: ?HWND,
    nID: i32,
    lpsz: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const CAPERRORCALLBACKA = *const fn(
    hWnd: ?HWND,
    nID: i32,
    lpsz: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const CAPVIDEOCALLBACK = *const fn(
    hWnd: ?HWND,
    lpVHdr: ?*VIDEOHDR,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const CAPWAVECALLBACK = *const fn(
    hWnd: ?HWND,
    lpWHdr: ?*WAVEHDR,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const CAPCONTROLCALLBACK = *const fn(
    hWnd: ?HWND,
    nState: i32,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const DRVM_IOCTL_DATA = extern struct {
    dwSize: u32 align(1),
    dwCmd: u32 align(1),
};

pub const WAVEOPENDESC = extern struct {
    hWave: ?HWAVE align(1),
    lpFormat: ?*WAVEFORMAT align(1),
    dwCallback: usize align(1),
    dwInstance: usize align(1),
    uMappedDeviceID: u32 align(1),
    dnDevNode: usize align(1),
};

pub const MIDIOPENSTRMID = extern struct {
    dwStreamID: u32 align(1),
    uDeviceID: u32 align(1),
};

pub const MIXEROPENDESC = extern struct {
    hmx: ?HMIXER align(1),
    pReserved0: ?*anyopaque align(1),
    dwCallback: usize align(1),
    dwInstance: usize align(1),
    dnDevNode: usize align(1),
};

pub const TIMEREVENT = extern struct {
    wDelay: u16 align(1),
    wResolution: u16 align(1),
    lpFunction: ?LPTIMECALLBACK align(1),
    dwUser: u32 align(1),
    wFlags: u16 align(1),
    wReserved1: u16 align(1),
};

pub const MCI_OPEN_DRIVER_PARMS = extern struct {
    wDeviceID: u32 align(1),
    lpstrParams: ?[*:0]const u16 align(1),
    wCustomCommandTable: u32 align(1),
    wType: u32 align(1),
};

pub const LPTASKCALLBACK = *const fn(
    dwInst: usize,
) callconv(@import("std").os.windows.WINAPI) void;

pub const VFWWDMExtensionProc = *const fn(
    pfnDeviceIoControl: ?*anyopaque,
    pfnAddPropertyPage: ?LPFNSVADDPROPSHEETPAGE,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const LPFNEXTDEVIO = *const fn(
    lParam: LPARAM,
    dwFlags: u32,
    dwIoControlCode: u32,
    lpInBuffer: ?*anyopaque,
    nInBufferSize: u32,
    lpOutBuffer: ?*anyopaque,
    nOutBufferSize: u32,
    lpBytesReturned: ?*u32,
    lpOverlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Functions (170)
//--------------------------------------------------------------------------------
pub extern "winmm" fn mciSendCommandA(
    mciId: u32,
    uMsg: u32,
    dwParam1: usize,
    dwParam2: usize,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winmm" fn mciSendCommandW(
    mciId: u32,
    uMsg: u32,
    dwParam1: usize,
    dwParam2: usize,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winmm" fn mciSendStringA(
    lpstrCommand: ?[*:0]const u8,
    lpstrReturnString: ?[*:0]u8,
    uReturnLength: u32,
    hwndCallback: ?HWND,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winmm" fn mciSendStringW(
    lpstrCommand: ?[*:0]const u16,
    lpstrReturnString: ?[*:0]u16,
    uReturnLength: u32,
    hwndCallback: ?HWND,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winmm" fn mciGetDeviceIDA(
    pszDevice: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winmm" fn mciGetDeviceIDW(
    pszDevice: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winmm" fn mciGetDeviceIDFromElementIDA(
    dwElementID: u32,
    lpstrType: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winmm" fn mciGetDeviceIDFromElementIDW(
    dwElementID: u32,
    lpstrType: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winmm" fn mciGetErrorStringA(
    mcierr: u32,
    pszText: [*:0]u8,
    cchText: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winmm" fn mciGetErrorStringW(
    mcierr: u32,
    pszText: [*:0]u16,
    cchText: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winmm" fn mciSetYieldProc(
    mciId: u32,
    fpYieldProc: ?YIELDPROC,
    dwYieldData: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winmm" fn mciGetCreatorTask(
    mciId: u32,
) callconv(@import("std").os.windows.WINAPI) ?HTASK;

pub extern "winmm" fn mciGetYieldProc(
    mciId: u32,
    pdwYieldData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) ?YIELDPROC;

pub extern "winmm" fn mciGetDriverData(
    wDeviceID: u32,
) callconv(@import("std").os.windows.WINAPI) usize;

pub extern "winmm" fn mciLoadCommandResource(
    hInstance: ?HANDLE,
    lpResName: ?[*:0]const u16,
    wType: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winmm" fn mciSetDriverData(
    wDeviceID: u32,
    dwData: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winmm" fn mciDriverYield(
    wDeviceID: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winmm" fn mciDriverNotify(
    hwndCallback: ?HANDLE,
    wDeviceID: u32,
    uStatus: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winmm" fn mciFreeCommandResource(
    wTable: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn CloseDriver(
    hDriver: ?HDRVR,
    lParam1: LPARAM,
    lParam2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn OpenDriver(
    szDriverName: ?[*:0]const u16,
    szSectionName: ?[*:0]const u16,
    lParam2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?HDRVR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn SendDriverMessage(
    hDriver: ?HDRVR,
    message: u32,
    lParam1: LPARAM,
    lParam2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn DrvGetModuleHandle(
    hDriver: ?HDRVR,
) callconv(@import("std").os.windows.WINAPI) ?HINSTANCE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn GetDriverModuleHandle(
    hDriver: ?HDRVR,
) callconv(@import("std").os.windows.WINAPI) ?HINSTANCE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn DefDriverProc(
    dwDriverIdentifier: usize,
    hdrvr: ?HDRVR,
    uMsg: u32,
    lParam1: LPARAM,
    lParam2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn DriverCallback(
    dwCallback: usize,
    dwFlags: u32,
    hDevice: ?HDRVR,
    dwMsg: u32,
    dwUser: usize,
    dwParam1: usize,
    dwParam2: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.1'
pub extern "api-ms-win-mm-misc-l1-1-1" fn sndOpenSound(
    EventName: ?[*:0]const u16,
    AppName: ?[*:0]const u16,
    Flags: i32,
    FileHandle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "winmm" fn mmDrvInstall(
    hDriver: ?HDRVR,
    wszDrvEntry: ?[*:0]const u16,
    drvMessage: ?DRIVERMSGPROC,
    wFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn mmioStringToFOURCCA(
    sz: ?[*:0]const u8,
    uFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn mmioStringToFOURCCW(
    sz: ?[*:0]const u16,
    uFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn mmioInstallIOProcA(
    fccIOProc: u32,
    pIOProc: ?LPMMIOPROC,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) ?LPMMIOPROC;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn mmioInstallIOProcW(
    fccIOProc: u32,
    pIOProc: ?LPMMIOPROC,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) ?LPMMIOPROC;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn mmioOpenA(
    pszFileName: ?*[128]u8,
    pmmioinfo: ?*MMIOINFO,
    fdwOpen: u32,
) callconv(@import("std").os.windows.WINAPI) ?HMMIO;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn mmioOpenW(
    pszFileName: ?*[128]u16,
    pmmioinfo: ?*MMIOINFO,
    fdwOpen: u32,
) callconv(@import("std").os.windows.WINAPI) ?HMMIO;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn mmioRenameA(
    pszFileName: ?[*:0]const u8,
    pszNewFileName: ?[*:0]const u8,
    pmmioinfo: ?*MMIOINFO,
    fdwRename: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn mmioRenameW(
    pszFileName: ?[*:0]const u16,
    pszNewFileName: ?[*:0]const u16,
    pmmioinfo: ?*MMIOINFO,
    fdwRename: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn mmioClose(
    hmmio: ?HMMIO,
    fuClose: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn mmioRead(
    hmmio: ?HMMIO,
    // TODO: what to do with BytesParamIndex 2?
    pch: ?*i8,
    cch: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn mmioWrite(
    hmmio: ?HMMIO,
    // TODO: what to do with BytesParamIndex 2?
    pch: ?[*:0]const u8,
    cch: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn mmioSeek(
    hmmio: ?HMMIO,
    lOffset: i32,
    iOrigin: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn mmioGetInfo(
    hmmio: ?HMMIO,
    pmmioinfo: ?*MMIOINFO,
    fuInfo: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn mmioSetInfo(
    hmmio: ?HMMIO,
    pmmioinfo: ?*MMIOINFO,
    fuInfo: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn mmioSetBuffer(
    hmmio: ?HMMIO,
    pchBuffer: ?[*:0]u8,
    cchBuffer: i32,
    fuBuffer: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn mmioFlush(
    hmmio: ?HMMIO,
    fuFlush: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn mmioAdvance(
    hmmio: ?HMMIO,
    pmmioinfo: ?*MMIOINFO,
    fuAdvance: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn mmioSendMessage(
    hmmio: ?HMMIO,
    uMsg: u32,
    lParam1: LPARAM,
    lParam2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn mmioDescend(
    hmmio: ?HMMIO,
    pmmcki: ?*MMCKINFO,
    pmmckiParent: ?*const MMCKINFO,
    fuDescend: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn mmioAscend(
    hmmio: ?HMMIO,
    pmmcki: ?*MMCKINFO,
    fuAscend: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn mmioCreateChunk(
    hmmio: ?HMMIO,
    pmmcki: ?*MMCKINFO,
    fuCreate: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn joyGetPosEx(
    uJoyID: u32,
    pji: ?*JOYINFOEX,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn joyGetNumDevs(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winmm" fn joyGetDevCapsA(
    uJoyID: usize,
    // TODO: what to do with BytesParamIndex 2?
    pjc: ?*JOYCAPSA,
    cbjc: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn joyGetDevCapsW(
    uJoyID: usize,
    // TODO: what to do with BytesParamIndex 2?
    pjc: ?*JOYCAPSW,
    cbjc: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn joyGetPos(
    uJoyID: u32,
    pji: ?*JOYINFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn joyGetThreshold(
    uJoyID: u32,
    puThreshold: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn joyReleaseCapture(
    uJoyID: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn joySetCapture(
    hwnd: ?HWND,
    uJoyID: u32,
    uPeriod: u32,
    fChanged: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winmm" fn joySetThreshold(
    uJoyID: u32,
    uThreshold: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "msvfw32" fn VideoForWindowsVersion(
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn ICInfo(
    fccType: u32,
    fccHandler: u32,
    lpicinfo: ?*ICINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn ICInstall(
    fccType: u32,
    fccHandler: u32,
    lParam: LPARAM,
    szDesc: ?PSTR,
    wFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn ICRemove(
    fccType: u32,
    fccHandler: u32,
    wFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn ICGetInfo(
    hic: ?HIC,
    // TODO: what to do with BytesParamIndex 2?
    picinfo: ?*ICINFO,
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn ICOpen(
    fccType: u32,
    fccHandler: u32,
    wMode: u32,
) callconv(@import("std").os.windows.WINAPI) ?HIC;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn ICOpenFunction(
    fccType: u32,
    fccHandler: u32,
    wMode: u32,
    lpfnHandler: ?FARPROC,
) callconv(@import("std").os.windows.WINAPI) ?HIC;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn ICClose(
    hic: ?HIC,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn ICSendMessage(
    hic: ?HIC,
    msg: u32,
    dw1: usize,
    dw2: usize,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn ICCompress(
    hic: ?HIC,
    dwFlags: u32,
    lpbiOutput: ?*BITMAPINFOHEADER,
    lpData: ?*anyopaque,
    lpbiInput: ?*BITMAPINFOHEADER,
    lpBits: ?*anyopaque,
    lpckid: ?*u32,
    lpdwFlags: ?*u32,
    lFrameNum: i32,
    dwFrameSize: u32,
    dwQuality: u32,
    lpbiPrev: ?*BITMAPINFOHEADER,
    lpPrev: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn ICDecompress(
    hic: ?HIC,
    dwFlags: u32,
    lpbiFormat: ?*BITMAPINFOHEADER,
    lpData: ?*anyopaque,
    lpbi: ?*BITMAPINFOHEADER,
    lpBits: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn ICDrawBegin(
    hic: ?HIC,
    dwFlags: u32,
    hpal: ?HPALETTE,
    hwnd: ?HWND,
    hdc: ?HDC,
    xDst: i32,
    yDst: i32,
    dxDst: i32,
    dyDst: i32,
    lpbi: ?*BITMAPINFOHEADER,
    xSrc: i32,
    ySrc: i32,
    dxSrc: i32,
    dySrc: i32,
    dwRate: u32,
    dwScale: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn ICDraw(
    hic: ?HIC,
    dwFlags: u32,
    lpFormat: ?*anyopaque,
    // TODO: what to do with BytesParamIndex 4?
    lpData: ?*anyopaque,
    cbData: u32,
    lTime: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn ICLocate(
    fccType: u32,
    fccHandler: u32,
    lpbiIn: ?*BITMAPINFOHEADER,
    lpbiOut: ?*BITMAPINFOHEADER,
    wFlags: u16,
) callconv(@import("std").os.windows.WINAPI) ?HIC;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn ICGetDisplayFormat(
    hic: ?HIC,
    lpbiIn: ?*BITMAPINFOHEADER,
    lpbiOut: ?*BITMAPINFOHEADER,
    BitDepth: i32,
    dx: i32,
    dy: i32,
) callconv(@import("std").os.windows.WINAPI) ?HIC;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn ICImageCompress(
    hic: ?HIC,
    uiFlags: u32,
    lpbiIn: ?*BITMAPINFO,
    lpBits: ?*anyopaque,
    lpbiOut: ?*BITMAPINFO,
    lQuality: i32,
    plSize: ?*i32,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn ICImageDecompress(
    hic: ?HIC,
    uiFlags: u32,
    lpbiIn: ?*BITMAPINFO,
    lpBits: ?*anyopaque,
    lpbiOut: ?*BITMAPINFO,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn ICCompressorChoose(
    hwnd: ?HWND,
    uiFlags: u32,
    pvIn: ?*anyopaque,
    lpData: ?*anyopaque,
    pc: ?*COMPVARS,
    lpszTitle: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn ICSeqCompressFrameStart(
    pc: ?*COMPVARS,
    lpbiIn: ?*BITMAPINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn ICSeqCompressFrameEnd(
    pc: ?*COMPVARS,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn ICSeqCompressFrame(
    pc: ?*COMPVARS,
    uiFlags: u32,
    lpBits: ?*anyopaque,
    pfKey: ?*BOOL,
    plSize: ?*i32,
) callconv(@import("std").os.windows.WINAPI) ?*anyopaque;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn ICCompressorFree(
    pc: ?*COMPVARS,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn DrawDibOpen(
) callconv(@import("std").os.windows.WINAPI) isize;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn DrawDibClose(
    hdd: isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn DrawDibGetBuffer(
    hdd: isize,
    lpbi: ?*BITMAPINFOHEADER,
    dwSize: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*anyopaque;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn DrawDibGetPalette(
    hdd: isize,
) callconv(@import("std").os.windows.WINAPI) ?HPALETTE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn DrawDibSetPalette(
    hdd: isize,
    hpal: ?HPALETTE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn DrawDibChangePalette(
    hdd: isize,
    iStart: i32,
    iLen: i32,
    lppe: [*]PALETTEENTRY,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn DrawDibRealize(
    hdd: isize,
    hdc: ?HDC,
    fBackground: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn DrawDibStart(
    hdd: isize,
    rate: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn DrawDibStop(
    hdd: isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn DrawDibBegin(
    hdd: isize,
    hdc: ?HDC,
    dxDst: i32,
    dyDst: i32,
    lpbi: ?*BITMAPINFOHEADER,
    dxSrc: i32,
    dySrc: i32,
    wFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn DrawDibDraw(
    hdd: isize,
    hdc: ?HDC,
    xDst: i32,
    yDst: i32,
    dxDst: i32,
    dyDst: i32,
    lpbi: ?*BITMAPINFOHEADER,
    lpBits: ?*anyopaque,
    xSrc: i32,
    ySrc: i32,
    dxSrc: i32,
    dySrc: i32,
    wFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn DrawDibEnd(
    hdd: isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn DrawDibTime(
    hdd: isize,
    lpddtime: ?*DRAWDIBTIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn DrawDibProfileDisplay(
    lpbi: ?*BITMAPINFOHEADER,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIFileInit(
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIFileExit(
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIFileAddRef(
    pfile: ?*IAVIFile,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIFileRelease(
    pfile: ?*IAVIFile,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIFileOpenA(
    ppfile: ?*?*IAVIFile,
    szFile: ?[*:0]const u8,
    uMode: u32,
    lpHandler: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIFileOpenW(
    ppfile: ?*?*IAVIFile,
    szFile: ?[*:0]const u16,
    uMode: u32,
    lpHandler: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIFileInfoW(
    pfile: ?*IAVIFile,
    // TODO: what to do with BytesParamIndex 2?
    pfi: ?*AVIFILEINFOW,
    lSize: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIFileInfoA(
    pfile: ?*IAVIFile,
    // TODO: what to do with BytesParamIndex 2?
    pfi: ?*AVIFILEINFOA,
    lSize: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIFileGetStream(
    pfile: ?*IAVIFile,
    ppavi: ?*?*IAVIStream,
    fccType: u32,
    lParam: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIFileCreateStreamW(
    pfile: ?*IAVIFile,
    ppavi: ?*?*IAVIStream,
    psi: ?*AVISTREAMINFOW,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIFileCreateStreamA(
    pfile: ?*IAVIFile,
    ppavi: ?*?*IAVIStream,
    psi: ?*AVISTREAMINFOA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIFileWriteData(
    pfile: ?*IAVIFile,
    ckid: u32,
    // TODO: what to do with BytesParamIndex 3?
    lpData: ?*anyopaque,
    cbData: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIFileReadData(
    pfile: ?*IAVIFile,
    ckid: u32,
    // TODO: what to do with BytesParamIndex 3?
    lpData: ?*anyopaque,
    lpcbData: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIFileEndRecord(
    pfile: ?*IAVIFile,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIStreamAddRef(
    pavi: ?*IAVIStream,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIStreamRelease(
    pavi: ?*IAVIStream,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIStreamInfoW(
    pavi: ?*IAVIStream,
    // TODO: what to do with BytesParamIndex 2?
    psi: ?*AVISTREAMINFOW,
    lSize: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIStreamInfoA(
    pavi: ?*IAVIStream,
    // TODO: what to do with BytesParamIndex 2?
    psi: ?*AVISTREAMINFOA,
    lSize: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIStreamFindSample(
    pavi: ?*IAVIStream,
    lPos: i32,
    lFlags: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIStreamReadFormat(
    pavi: ?*IAVIStream,
    lPos: i32,
    // TODO: what to do with BytesParamIndex 3?
    lpFormat: ?*anyopaque,
    lpcbFormat: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIStreamSetFormat(
    pavi: ?*IAVIStream,
    lPos: i32,
    // TODO: what to do with BytesParamIndex 3?
    lpFormat: ?*anyopaque,
    cbFormat: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIStreamReadData(
    pavi: ?*IAVIStream,
    fcc: u32,
    // TODO: what to do with BytesParamIndex 3?
    lp: ?*anyopaque,
    lpcb: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIStreamWriteData(
    pavi: ?*IAVIStream,
    fcc: u32,
    // TODO: what to do with BytesParamIndex 3?
    lp: ?*anyopaque,
    cb: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIStreamRead(
    pavi: ?*IAVIStream,
    lStart: i32,
    lSamples: i32,
    // TODO: what to do with BytesParamIndex 4?
    lpBuffer: ?*anyopaque,
    cbBuffer: i32,
    plBytes: ?*i32,
    plSamples: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIStreamWrite(
    pavi: ?*IAVIStream,
    lStart: i32,
    lSamples: i32,
    // TODO: what to do with BytesParamIndex 4?
    lpBuffer: ?*anyopaque,
    cbBuffer: i32,
    dwFlags: u32,
    plSampWritten: ?*i32,
    plBytesWritten: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIStreamStart(
    pavi: ?*IAVIStream,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIStreamLength(
    pavi: ?*IAVIStream,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIStreamTimeToSample(
    pavi: ?*IAVIStream,
    lTime: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIStreamSampleToTime(
    pavi: ?*IAVIStream,
    lSample: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIStreamBeginStreaming(
    pavi: ?*IAVIStream,
    lStart: i32,
    lEnd: i32,
    lRate: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIStreamEndStreaming(
    pavi: ?*IAVIStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIStreamGetFrameOpen(
    pavi: ?*IAVIStream,
    lpbiWanted: ?*BITMAPINFOHEADER,
) callconv(@import("std").os.windows.WINAPI) ?*IGetFrame;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIStreamGetFrame(
    pg: ?*IGetFrame,
    lPos: i32,
) callconv(@import("std").os.windows.WINAPI) ?*anyopaque;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIStreamGetFrameClose(
    pg: ?*IGetFrame,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIStreamOpenFromFileA(
    ppavi: ?*?*IAVIStream,
    szFile: ?[*:0]const u8,
    fccType: u32,
    lParam: i32,
    mode: u32,
    pclsidHandler: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIStreamOpenFromFileW(
    ppavi: ?*?*IAVIStream,
    szFile: ?[*:0]const u16,
    fccType: u32,
    lParam: i32,
    mode: u32,
    pclsidHandler: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIStreamCreate(
    ppavi: ?*?*IAVIStream,
    lParam1: i32,
    lParam2: i32,
    pclsidHandler: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIMakeCompressedStream(
    ppsCompressed: ?*?*IAVIStream,
    ppsSource: ?*IAVIStream,
    lpOptions: ?*AVICOMPRESSOPTIONS,
    pclsidHandler: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVISaveA(
    szFile: ?[*:0]const u8,
    pclsidHandler: ?*Guid,
    lpfnCallback: ?AVISAVECALLBACK,
    nStreams: i32,
    pfile: ?*IAVIStream,
    lpOptions: ?*AVICOMPRESSOPTIONS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVISaveVA(
    szFile: ?[*:0]const u8,
    pclsidHandler: ?*Guid,
    lpfnCallback: ?AVISAVECALLBACK,
    nStreams: i32,
    ppavi: [*]?*IAVIStream,
    plpOptions: [*]?*AVICOMPRESSOPTIONS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVISaveW(
    szFile: ?[*:0]const u16,
    pclsidHandler: ?*Guid,
    lpfnCallback: ?AVISAVECALLBACK,
    nStreams: i32,
    pfile: ?*IAVIStream,
    lpOptions: ?*AVICOMPRESSOPTIONS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVISaveVW(
    szFile: ?[*:0]const u16,
    pclsidHandler: ?*Guid,
    lpfnCallback: ?AVISAVECALLBACK,
    nStreams: i32,
    ppavi: [*]?*IAVIStream,
    plpOptions: [*]?*AVICOMPRESSOPTIONS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVISaveOptions(
    hwnd: ?HWND,
    uiFlags: u32,
    nStreams: i32,
    ppavi: [*]?*IAVIStream,
    plpOptions: [*]?*AVICOMPRESSOPTIONS,
) callconv(@import("std").os.windows.WINAPI) isize;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVISaveOptionsFree(
    nStreams: i32,
    plpOptions: [*]?*AVICOMPRESSOPTIONS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIBuildFilterW(
    lpszFilter: [*:0]u16,
    cbFilter: i32,
    fSaving: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIBuildFilterA(
    lpszFilter: [*:0]u8,
    cbFilter: i32,
    fSaving: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIMakeFileFromStreams(
    ppfile: ?*?*IAVIFile,
    nStreams: i32,
    papStreams: [*]?*IAVIStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIMakeStreamFromClipboard(
    cfFormat: u32,
    hGlobal: ?HANDLE,
    ppstream: ?*?*IAVIStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIPutFileOnClipboard(
    pf: ?*IAVIFile,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIGetFromClipboard(
    lppf: ?*?*IAVIFile,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn AVIClearClipboard(
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn CreateEditableStream(
    ppsEditable: ?*?*IAVIStream,
    psSource: ?*IAVIStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn EditStreamCut(
    pavi: ?*IAVIStream,
    plStart: ?*i32,
    plLength: ?*i32,
    ppResult: ?*?*IAVIStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn EditStreamCopy(
    pavi: ?*IAVIStream,
    plStart: ?*i32,
    plLength: ?*i32,
    ppResult: ?*?*IAVIStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn EditStreamPaste(
    pavi: ?*IAVIStream,
    plPos: ?*i32,
    plLength: ?*i32,
    pstream: ?*IAVIStream,
    lStart: i32,
    lEnd: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn EditStreamClone(
    pavi: ?*IAVIStream,
    ppResult: ?*?*IAVIStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn EditStreamSetNameA(
    pavi: ?*IAVIStream,
    lpszName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn EditStreamSetNameW(
    pavi: ?*IAVIStream,
    lpszName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn EditStreamSetInfoW(
    pavi: ?*IAVIStream,
    // TODO: what to do with BytesParamIndex 2?
    lpInfo: ?*AVISTREAMINFOW,
    cbInfo: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avifil32" fn EditStreamSetInfoA(
    pavi: ?*IAVIStream,
    // TODO: what to do with BytesParamIndex 2?
    lpInfo: ?*AVISTREAMINFOA,
    cbInfo: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn MCIWndCreateA(
    hwndParent: ?HWND,
    hInstance: ?HINSTANCE,
    dwStyle: u32,
    szFile: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn MCIWndCreateW(
    hwndParent: ?HWND,
    hInstance: ?HINSTANCE,
    dwStyle: u32,
    szFile: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn MCIWndRegisterClass(
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avicap32" fn capCreateCaptureWindowA(
    lpszWindowName: ?[*:0]const u8,
    dwStyle: u32,
    x: i32,
    y: i32,
    nWidth: i32,
    nHeight: i32,
    hwndParent: ?HWND,
    nID: i32,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avicap32" fn capGetDriverDescriptionA(
    wDriverIndex: u32,
    lpszName: [*:0]u8,
    cbName: i32,
    lpszVer: [*:0]u8,
    cbVer: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avicap32" fn capCreateCaptureWindowW(
    lpszWindowName: ?[*:0]const u16,
    dwStyle: u32,
    x: i32,
    y: i32,
    nWidth: i32,
    nHeight: i32,
    hwndParent: ?HWND,
    nID: i32,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "avicap32" fn capGetDriverDescriptionW(
    wDriverIndex: u32,
    lpszName: [*:0]u16,
    cbName: i32,
    lpszVer: [*:0]u16,
    cbVer: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn GetOpenFileNamePreviewA(
    lpofn: ?*OPENFILENAMEA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn GetSaveFileNamePreviewA(
    lpofn: ?*OPENFILENAMEA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn GetOpenFileNamePreviewW(
    lpofn: ?*OPENFILENAMEW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "msvfw32" fn GetSaveFileNamePreviewW(
    lpofn: ?*OPENFILENAMEW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winmm" fn mmTaskCreate(
    lpfn: ?LPTASKCALLBACK,
    lph: ?*?HANDLE,
    dwInst: usize,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winmm" fn mmTaskBlock(
    h: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "winmm" fn mmTaskSignal(
    h: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winmm" fn mmTaskYield(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "winmm" fn mmGetCurrentTask(
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (56)
//--------------------------------------------------------------------------------
pub const MCI_OPEN_PARMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCI_OPEN_PARMSA,
    .wide => @This().MCI_OPEN_PARMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCI_OPEN_PARMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MCI_INFO_PARMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCI_INFO_PARMSA,
    .wide => @This().MCI_INFO_PARMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCI_INFO_PARMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MCI_SYSINFO_PARMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCI_SYSINFO_PARMSA,
    .wide => @This().MCI_SYSINFO_PARMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCI_SYSINFO_PARMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MCI_SAVE_PARMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCI_SAVE_PARMSA,
    .wide => @This().MCI_SAVE_PARMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCI_SAVE_PARMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MCI_LOAD_PARMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCI_LOAD_PARMSA,
    .wide => @This().MCI_LOAD_PARMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCI_LOAD_PARMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MCI_VD_ESCAPE_PARMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCI_VD_ESCAPE_PARMSA,
    .wide => @This().MCI_VD_ESCAPE_PARMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCI_VD_ESCAPE_PARMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MCI_WAVE_OPEN_PARMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCI_WAVE_OPEN_PARMSA,
    .wide => @This().MCI_WAVE_OPEN_PARMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCI_WAVE_OPEN_PARMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MCI_ANIM_OPEN_PARMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCI_ANIM_OPEN_PARMSA,
    .wide => @This().MCI_ANIM_OPEN_PARMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCI_ANIM_OPEN_PARMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MCI_ANIM_WINDOW_PARMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCI_ANIM_WINDOW_PARMSA,
    .wide => @This().MCI_ANIM_WINDOW_PARMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCI_ANIM_WINDOW_PARMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MCI_OVLY_OPEN_PARMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCI_OVLY_OPEN_PARMSA,
    .wide => @This().MCI_OVLY_OPEN_PARMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCI_OVLY_OPEN_PARMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MCI_OVLY_WINDOW_PARMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCI_OVLY_WINDOW_PARMSA,
    .wide => @This().MCI_OVLY_WINDOW_PARMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCI_OVLY_WINDOW_PARMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MCI_OVLY_SAVE_PARMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCI_OVLY_SAVE_PARMSA,
    .wide => @This().MCI_OVLY_SAVE_PARMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCI_OVLY_SAVE_PARMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MCI_OVLY_LOAD_PARMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCI_OVLY_LOAD_PARMSA,
    .wide => @This().MCI_OVLY_LOAD_PARMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCI_OVLY_LOAD_PARMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const JOYCAPS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().JOYCAPSA,
    .wide => @This().JOYCAPSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'JOYCAPS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const JOYCAPS2 = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().JOYCAPS2A,
    .wide => @This().JOYCAPS2W,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'JOYCAPS2' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MCI_DGV_CAPTURE_PARMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCI_DGV_CAPTURE_PARMSA,
    .wide => @This().MCI_DGV_CAPTURE_PARMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCI_DGV_CAPTURE_PARMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MCI_DGV_INFO_PARMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCI_DGV_INFO_PARMSA,
    .wide => @This().MCI_DGV_INFO_PARMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCI_DGV_INFO_PARMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MCI_DGV_LIST_PARMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCI_DGV_LIST_PARMSA,
    .wide => @This().MCI_DGV_LIST_PARMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCI_DGV_LIST_PARMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MCI_DGV_OPEN_PARMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCI_DGV_OPEN_PARMSA,
    .wide => @This().MCI_DGV_OPEN_PARMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCI_DGV_OPEN_PARMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MCI_DGV_QUALITY_PARMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCI_DGV_QUALITY_PARMSA,
    .wide => @This().MCI_DGV_QUALITY_PARMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCI_DGV_QUALITY_PARMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MCI_DGV_RESERVE_PARMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCI_DGV_RESERVE_PARMSA,
    .wide => @This().MCI_DGV_RESERVE_PARMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCI_DGV_RESERVE_PARMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MCI_DGV_RESTORE_PARMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCI_DGV_RESTORE_PARMSA,
    .wide => @This().MCI_DGV_RESTORE_PARMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCI_DGV_RESTORE_PARMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MCI_DGV_SAVE_PARMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCI_DGV_SAVE_PARMSA,
    .wide => @This().MCI_DGV_SAVE_PARMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCI_DGV_SAVE_PARMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MCI_DGV_SETAUDIO_PARMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCI_DGV_SETAUDIO_PARMSA,
    .wide => @This().MCI_DGV_SETAUDIO_PARMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCI_DGV_SETAUDIO_PARMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MCI_DGV_SETVIDEO_PARMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCI_DGV_SETVIDEO_PARMSA,
    .wide => @This().MCI_DGV_SETVIDEO_PARMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCI_DGV_SETVIDEO_PARMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MCI_DGV_STATUS_PARMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCI_DGV_STATUS_PARMSA,
    .wide => @This().MCI_DGV_STATUS_PARMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCI_DGV_STATUS_PARMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MCI_DGV_WINDOW_PARMS = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCI_DGV_WINDOW_PARMSA,
    .wide => @This().MCI_DGV_WINDOW_PARMSW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCI_DGV_WINDOW_PARMS' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const AVISTREAMINFO = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().AVISTREAMINFOA,
    .wide => @This().AVISTREAMINFOW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'AVISTREAMINFO' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const AVIFILEINFO = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().AVIFILEINFOA,
    .wide => @This().AVIFILEINFOW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'AVIFILEINFO' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CAPSTATUSCALLBACK = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().CAPSTATUSCALLBACKA,
    .wide => @This().CAPSTATUSCALLBACKW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CAPSTATUSCALLBACK' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const CAPERRORCALLBACK = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().CAPERRORCALLBACKA,
    .wide => @This().CAPERRORCALLBACKW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'CAPERRORCALLBACK' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const mciSendCommand = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().mciSendCommandA,
    .wide => @This().mciSendCommandW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'mciSendCommand' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const mciSendString = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().mciSendStringA,
    .wide => @This().mciSendStringW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'mciSendString' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const mciGetDeviceID = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().mciGetDeviceIDA,
    .wide => @This().mciGetDeviceIDW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'mciGetDeviceID' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const mciGetDeviceIDFromElementID = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().mciGetDeviceIDFromElementIDA,
    .wide => @This().mciGetDeviceIDFromElementIDW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'mciGetDeviceIDFromElementID' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const mciGetErrorString = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().mciGetErrorStringA,
    .wide => @This().mciGetErrorStringW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'mciGetErrorString' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const mmioStringToFOURCC = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().mmioStringToFOURCCA,
    .wide => @This().mmioStringToFOURCCW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'mmioStringToFOURCC' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const mmioInstallIOProc = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().mmioInstallIOProcA,
    .wide => @This().mmioInstallIOProcW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'mmioInstallIOProc' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const mmioOpen = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().mmioOpenA,
    .wide => @This().mmioOpenW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'mmioOpen' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const mmioRename = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().mmioRenameA,
    .wide => @This().mmioRenameW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'mmioRename' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const joyGetDevCaps = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().joyGetDevCapsA,
    .wide => @This().joyGetDevCapsW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'joyGetDevCaps' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const AVIFileOpen = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().AVIFileOpenA,
    .wide => @This().AVIFileOpenW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'AVIFileOpen' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const AVIFileInfo = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().AVIFileInfoA,
    .wide => @This().AVIFileInfoW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'AVIFileInfo' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const AVIFileCreateStream = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().AVIFileCreateStreamA,
    .wide => @This().AVIFileCreateStreamW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'AVIFileCreateStream' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const AVIStreamInfo = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().AVIStreamInfoA,
    .wide => @This().AVIStreamInfoW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'AVIStreamInfo' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const AVIStreamOpenFromFile = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().AVIStreamOpenFromFileA,
    .wide => @This().AVIStreamOpenFromFileW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'AVIStreamOpenFromFile' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const AVISave = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().AVISaveA,
    .wide => @This().AVISaveW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'AVISave' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const AVISaveV = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().AVISaveVA,
    .wide => @This().AVISaveVW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'AVISaveV' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const AVIBuildFilter = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().AVIBuildFilterA,
    .wide => @This().AVIBuildFilterW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'AVIBuildFilter' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const EditStreamSetName = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().EditStreamSetNameA,
    .wide => @This().EditStreamSetNameW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'EditStreamSetName' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const EditStreamSetInfo = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().EditStreamSetInfoA,
    .wide => @This().EditStreamSetInfoW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'EditStreamSetInfo' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const MCIWndCreate = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().MCIWndCreateA,
    .wide => @This().MCIWndCreateW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'MCIWndCreate' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const capCreateCaptureWindow = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().capCreateCaptureWindowA,
    .wide => @This().capCreateCaptureWindowW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'capCreateCaptureWindow' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const capGetDriverDescription = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().capGetDriverDescriptionA,
    .wide => @This().capGetDriverDescriptionW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'capGetDriverDescription' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetOpenFileNamePreview = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetOpenFileNamePreviewA,
    .wide => @This().GetOpenFileNamePreviewW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetOpenFileNamePreview' requires that UNICODE be set to true or false in the root module",
    ),
};
pub const GetSaveFileNamePreview = switch (@import("../zig.zig").unicode_mode) {
    .ansi => @This().GetSaveFileNamePreviewA,
    .wide => @This().GetSaveFileNamePreviewW,
    .unspecified => if (@import("builtin").is_test) void else @compileError(
        "'GetSaveFileNamePreview' requires that UNICODE be set to true or false in the root module",
    ),
};
//--------------------------------------------------------------------------------
// Section: Imports (33)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BITMAPINFO = @import("../graphics/gdi.zig").BITMAPINFO;
const BITMAPINFOHEADER = @import("../graphics/gdi.zig").BITMAPINFOHEADER;
const BOOL = @import("../foundation.zig").BOOL;
const CHAR = @import("../foundation.zig").CHAR;
const FARPROC = @import("../foundation.zig").FARPROC;
const HANDLE = @import("../foundation.zig").HANDLE;
const HDC = @import("../graphics/gdi.zig").HDC;
const HINSTANCE = @import("../foundation.zig").HINSTANCE;
const HMIXER = @import("../media/audio.zig").HMIXER;
const HPALETTE = @import("../graphics/gdi.zig").HPALETTE;
const HRESULT = @import("../foundation.zig").HRESULT;
const HTASK = @import("../media.zig").HTASK;
const HWAVE = @import("../media/audio.zig").HWAVE;
const HWND = @import("../foundation.zig").HWND;
const IPersist = @import("../system/com.zig").IPersist;
const IPersistFile = @import("../system/com.zig").IPersistFile;
const IUnknown = @import("../system/com.zig").IUnknown;
const LPARAM = @import("../foundation.zig").LPARAM;
const LPFNSVADDPROPSHEETPAGE = @import("../ui/controls.zig").LPFNSVADDPROPSHEETPAGE;
const LPTIMECALLBACK = @import("../media.zig").LPTIMECALLBACK;
const LRESULT = @import("../foundation.zig").LRESULT;
const OPENFILENAMEA = @import("../ui/controls/dialogs.zig").OPENFILENAMEA;
const OPENFILENAMEW = @import("../ui/controls/dialogs.zig").OPENFILENAMEW;
const OVERLAPPED = @import("../system/io.zig").OVERLAPPED;
const PALETTEENTRY = @import("../graphics/gdi.zig").PALETTEENTRY;
const POINT = @import("../foundation.zig").POINT;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;
const RECT = @import("../foundation.zig").RECT;
const WAVEFORMAT = @import("../media/audio.zig").WAVEFORMAT;
const WAVEFORMATEX = @import("../media/audio.zig").WAVEFORMATEX;
const WAVEHDR = @import("../media/audio.zig").WAVEHDR;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "YIELDPROC")) { _ = YIELDPROC; }
    if (@hasDecl(@This(), "DRIVERPROC")) { _ = DRIVERPROC; }
    if (@hasDecl(@This(), "DRIVERMSGPROC")) { _ = DRIVERMSGPROC; }
    if (@hasDecl(@This(), "LPMMIOPROC")) { _ = LPMMIOPROC; }
    if (@hasDecl(@This(), "AVISAVECALLBACK")) { _ = AVISAVECALLBACK; }
    if (@hasDecl(@This(), "CAPYIELDCALLBACK")) { _ = CAPYIELDCALLBACK; }
    if (@hasDecl(@This(), "CAPSTATUSCALLBACKW")) { _ = CAPSTATUSCALLBACKW; }
    if (@hasDecl(@This(), "CAPERRORCALLBACKW")) { _ = CAPERRORCALLBACKW; }
    if (@hasDecl(@This(), "CAPSTATUSCALLBACKA")) { _ = CAPSTATUSCALLBACKA; }
    if (@hasDecl(@This(), "CAPERRORCALLBACKA")) { _ = CAPERRORCALLBACKA; }
    if (@hasDecl(@This(), "CAPVIDEOCALLBACK")) { _ = CAPVIDEOCALLBACK; }
    if (@hasDecl(@This(), "CAPWAVECALLBACK")) { _ = CAPWAVECALLBACK; }
    if (@hasDecl(@This(), "CAPCONTROLCALLBACK")) { _ = CAPCONTROLCALLBACK; }
    if (@hasDecl(@This(), "LPTASKCALLBACK")) { _ = LPTASKCALLBACK; }
    if (@hasDecl(@This(), "VFWWDMExtensionProc")) { _ = VFWWDMExtensionProc; }
    if (@hasDecl(@This(), "LPFNEXTDEVIO")) { _ = LPFNEXTDEVIO; }

    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
