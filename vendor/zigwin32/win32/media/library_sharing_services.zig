//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (7)
//--------------------------------------------------------------------------------
const CLSID_WindowsMediaLibrarySharingServices_Value = Guid.initString("ad581b00-7b64-4e59-a38d-d2c5bf51ddb3");
pub const CLSID_WindowsMediaLibrarySharingServices = &CLSID_WindowsMediaLibrarySharingServices_Value;

pub const WindowsMediaLibrarySharingDeviceAuthorizationStatus = enum(i32) {
    UNKNOWN = 0,
    ALLOWED = 1,
    DENIED = 2,
};
pub const DEVICE_AUTHORIZATION_UNKNOWN = WindowsMediaLibrarySharingDeviceAuthorizationStatus.UNKNOWN;
pub const DEVICE_AUTHORIZATION_ALLOWED = WindowsMediaLibrarySharingDeviceAuthorizationStatus.ALLOWED;
pub const DEVICE_AUTHORIZATION_DENIED = WindowsMediaLibrarySharingDeviceAuthorizationStatus.DENIED;

// TODO: this type is limited to platform 'windows6.1'
const IID_IWindowsMediaLibrarySharingDeviceProperty_Value = Guid.initString("81e26927-7a7d-40a7-81d4-bddc02960e3e");
pub const IID_IWindowsMediaLibrarySharingDeviceProperty = &IID_IWindowsMediaLibrarySharingDeviceProperty_Value;
pub const IWindowsMediaLibrarySharingDeviceProperty = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn(
            self: *const IWindowsMediaLibrarySharingDeviceProperty,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn(
            self: *const IWindowsMediaLibrarySharingDeviceProperty,
            value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Name(self: *const IWindowsMediaLibrarySharingDeviceProperty, name: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Name(self, name);
    }
    pub fn get_Value(self: *const IWindowsMediaLibrarySharingDeviceProperty, value: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Value(self, value);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IWindowsMediaLibrarySharingDeviceProperties_Value = Guid.initString("c4623214-6b06-40c5-a623-b2ff4c076bfd");
pub const IID_IWindowsMediaLibrarySharingDeviceProperties = &IID_IWindowsMediaLibrarySharingDeviceProperties_Value;
pub const IWindowsMediaLibrarySharingDeviceProperties = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Item: *const fn(
            self: *const IWindowsMediaLibrarySharingDeviceProperties,
            index: i32,
            property: ?*?*IWindowsMediaLibrarySharingDeviceProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IWindowsMediaLibrarySharingDeviceProperties,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn(
            self: *const IWindowsMediaLibrarySharingDeviceProperties,
            name: ?BSTR,
            property: ?*?*IWindowsMediaLibrarySharingDeviceProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Item(self: *const IWindowsMediaLibrarySharingDeviceProperties, index: i32, property: ?*?*IWindowsMediaLibrarySharingDeviceProperty) callconv(.Inline) HRESULT {
        return self.vtable.get_Item(self, index, property);
    }
    pub fn get_Count(self: *const IWindowsMediaLibrarySharingDeviceProperties, count: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, count);
    }
    pub fn GetProperty(self: *const IWindowsMediaLibrarySharingDeviceProperties, name: ?BSTR, property: ?*?*IWindowsMediaLibrarySharingDeviceProperty) callconv(.Inline) HRESULT {
        return self.vtable.GetProperty(self, name, property);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IWindowsMediaLibrarySharingDevice_Value = Guid.initString("3dccc293-4fd9-4191-a25b-8e57c5d27bd4");
pub const IID_IWindowsMediaLibrarySharingDevice = &IID_IWindowsMediaLibrarySharingDevice_Value;
pub const IWindowsMediaLibrarySharingDevice = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DeviceID: *const fn(
            self: *const IWindowsMediaLibrarySharingDevice,
            deviceID: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Authorization: *const fn(
            self: *const IWindowsMediaLibrarySharingDevice,
            authorization: ?*WindowsMediaLibrarySharingDeviceAuthorizationStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Authorization: *const fn(
            self: *const IWindowsMediaLibrarySharingDevice,
            authorization: WindowsMediaLibrarySharingDeviceAuthorizationStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn(
            self: *const IWindowsMediaLibrarySharingDevice,
            deviceProperties: ?*?*IWindowsMediaLibrarySharingDeviceProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_DeviceID(self: *const IWindowsMediaLibrarySharingDevice, deviceID: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_DeviceID(self, deviceID);
    }
    pub fn get_Authorization(self: *const IWindowsMediaLibrarySharingDevice, authorization: ?*WindowsMediaLibrarySharingDeviceAuthorizationStatus) callconv(.Inline) HRESULT {
        return self.vtable.get_Authorization(self, authorization);
    }
    pub fn put_Authorization(self: *const IWindowsMediaLibrarySharingDevice, authorization: WindowsMediaLibrarySharingDeviceAuthorizationStatus) callconv(.Inline) HRESULT {
        return self.vtable.put_Authorization(self, authorization);
    }
    pub fn get_Properties(self: *const IWindowsMediaLibrarySharingDevice, deviceProperties: ?*?*IWindowsMediaLibrarySharingDeviceProperties) callconv(.Inline) HRESULT {
        return self.vtable.get_Properties(self, deviceProperties);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IWindowsMediaLibrarySharingDevices_Value = Guid.initString("1803f9d6-fe6d-4546-bf5b-992fe8ec12d1");
pub const IID_IWindowsMediaLibrarySharingDevices = &IID_IWindowsMediaLibrarySharingDevices_Value;
pub const IWindowsMediaLibrarySharingDevices = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Item: *const fn(
            self: *const IWindowsMediaLibrarySharingDevices,
            index: i32,
            device: ?*?*IWindowsMediaLibrarySharingDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IWindowsMediaLibrarySharingDevices,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDevice: *const fn(
            self: *const IWindowsMediaLibrarySharingDevices,
            deviceID: ?BSTR,
            device: ?*?*IWindowsMediaLibrarySharingDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Item(self: *const IWindowsMediaLibrarySharingDevices, index: i32, device: ?*?*IWindowsMediaLibrarySharingDevice) callconv(.Inline) HRESULT {
        return self.vtable.get_Item(self, index, device);
    }
    pub fn get_Count(self: *const IWindowsMediaLibrarySharingDevices, count: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, count);
    }
    pub fn GetDevice(self: *const IWindowsMediaLibrarySharingDevices, deviceID: ?BSTR, device: ?*?*IWindowsMediaLibrarySharingDevice) callconv(.Inline) HRESULT {
        return self.vtable.GetDevice(self, deviceID, device);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IWindowsMediaLibrarySharingServices_Value = Guid.initString("01f5f85e-0a81-40da-a7c8-21ef3af8440c");
pub const IID_IWindowsMediaLibrarySharingServices = &IID_IWindowsMediaLibrarySharingServices_Value;
pub const IWindowsMediaLibrarySharingServices = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        showShareMediaCPL: *const fn(
            self: *const IWindowsMediaLibrarySharingServices,
            device: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_userHomeMediaSharingState: *const fn(
            self: *const IWindowsMediaLibrarySharingServices,
            sharingEnabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_userHomeMediaSharingState: *const fn(
            self: *const IWindowsMediaLibrarySharingServices,
            sharingEnabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_userHomeMediaSharingLibraryName: *const fn(
            self: *const IWindowsMediaLibrarySharingServices,
            libraryName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_userHomeMediaSharingLibraryName: *const fn(
            self: *const IWindowsMediaLibrarySharingServices,
            libraryName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_computerHomeMediaSharingAllowedState: *const fn(
            self: *const IWindowsMediaLibrarySharingServices,
            sharingAllowed: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_computerHomeMediaSharingAllowedState: *const fn(
            self: *const IWindowsMediaLibrarySharingServices,
            sharingAllowed: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_userInternetMediaSharingState: *const fn(
            self: *const IWindowsMediaLibrarySharingServices,
            sharingEnabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_userInternetMediaSharingState: *const fn(
            self: *const IWindowsMediaLibrarySharingServices,
            sharingEnabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_computerInternetMediaSharingAllowedState: *const fn(
            self: *const IWindowsMediaLibrarySharingServices,
            sharingAllowed: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_computerInternetMediaSharingAllowedState: *const fn(
            self: *const IWindowsMediaLibrarySharingServices,
            sharingAllowed: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_internetMediaSharingSecurityGroup: *const fn(
            self: *const IWindowsMediaLibrarySharingServices,
            securityGroup: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_internetMediaSharingSecurityGroup: *const fn(
            self: *const IWindowsMediaLibrarySharingServices,
            securityGroup: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_allowSharingToAllDevices: *const fn(
            self: *const IWindowsMediaLibrarySharingServices,
            sharingEnabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_allowSharingToAllDevices: *const fn(
            self: *const IWindowsMediaLibrarySharingServices,
            sharingEnabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setDefaultAuthorization: *const fn(
            self: *const IWindowsMediaLibrarySharingServices,
            MACAddresses: ?BSTR,
            friendlyName: ?BSTR,
            authorization: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setAuthorizationState: *const fn(
            self: *const IWindowsMediaLibrarySharingServices,
            MACAddress: ?BSTR,
            authorizationState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getAllDevices: *const fn(
            self: *const IWindowsMediaLibrarySharingServices,
            devices: ?*?*IWindowsMediaLibrarySharingDevices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_customSettingsApplied: *const fn(
            self: *const IWindowsMediaLibrarySharingServices,
            customSettingsApplied: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn showShareMediaCPL(self: *const IWindowsMediaLibrarySharingServices, device: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.showShareMediaCPL(self, device);
    }
    pub fn get_userHomeMediaSharingState(self: *const IWindowsMediaLibrarySharingServices, sharingEnabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_userHomeMediaSharingState(self, sharingEnabled);
    }
    pub fn put_userHomeMediaSharingState(self: *const IWindowsMediaLibrarySharingServices, sharingEnabled: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_userHomeMediaSharingState(self, sharingEnabled);
    }
    pub fn get_userHomeMediaSharingLibraryName(self: *const IWindowsMediaLibrarySharingServices, libraryName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_userHomeMediaSharingLibraryName(self, libraryName);
    }
    pub fn put_userHomeMediaSharingLibraryName(self: *const IWindowsMediaLibrarySharingServices, libraryName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_userHomeMediaSharingLibraryName(self, libraryName);
    }
    pub fn get_computerHomeMediaSharingAllowedState(self: *const IWindowsMediaLibrarySharingServices, sharingAllowed: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_computerHomeMediaSharingAllowedState(self, sharingAllowed);
    }
    pub fn put_computerHomeMediaSharingAllowedState(self: *const IWindowsMediaLibrarySharingServices, sharingAllowed: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_computerHomeMediaSharingAllowedState(self, sharingAllowed);
    }
    pub fn get_userInternetMediaSharingState(self: *const IWindowsMediaLibrarySharingServices, sharingEnabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_userInternetMediaSharingState(self, sharingEnabled);
    }
    pub fn put_userInternetMediaSharingState(self: *const IWindowsMediaLibrarySharingServices, sharingEnabled: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_userInternetMediaSharingState(self, sharingEnabled);
    }
    pub fn get_computerInternetMediaSharingAllowedState(self: *const IWindowsMediaLibrarySharingServices, sharingAllowed: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_computerInternetMediaSharingAllowedState(self, sharingAllowed);
    }
    pub fn put_computerInternetMediaSharingAllowedState(self: *const IWindowsMediaLibrarySharingServices, sharingAllowed: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_computerInternetMediaSharingAllowedState(self, sharingAllowed);
    }
    pub fn get_internetMediaSharingSecurityGroup(self: *const IWindowsMediaLibrarySharingServices, securityGroup: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_internetMediaSharingSecurityGroup(self, securityGroup);
    }
    pub fn put_internetMediaSharingSecurityGroup(self: *const IWindowsMediaLibrarySharingServices, securityGroup: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_internetMediaSharingSecurityGroup(self, securityGroup);
    }
    pub fn get_allowSharingToAllDevices(self: *const IWindowsMediaLibrarySharingServices, sharingEnabled: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_allowSharingToAllDevices(self, sharingEnabled);
    }
    pub fn put_allowSharingToAllDevices(self: *const IWindowsMediaLibrarySharingServices, sharingEnabled: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_allowSharingToAllDevices(self, sharingEnabled);
    }
    pub fn setDefaultAuthorization(self: *const IWindowsMediaLibrarySharingServices, MACAddresses: ?BSTR, friendlyName: ?BSTR, authorization: i16) callconv(.Inline) HRESULT {
        return self.vtable.setDefaultAuthorization(self, MACAddresses, friendlyName, authorization);
    }
    pub fn setAuthorizationState(self: *const IWindowsMediaLibrarySharingServices, MACAddress: ?BSTR, authorizationState: i16) callconv(.Inline) HRESULT {
        return self.vtable.setAuthorizationState(self, MACAddress, authorizationState);
    }
    pub fn getAllDevices(self: *const IWindowsMediaLibrarySharingServices, devices: ?*?*IWindowsMediaLibrarySharingDevices) callconv(.Inline) HRESULT {
        return self.vtable.getAllDevices(self, devices);
    }
    pub fn get_customSettingsApplied(self: *const IWindowsMediaLibrarySharingServices, customSettingsApplied: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_customSettingsApplied(self, customSettingsApplied);
    }
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (6)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BSTR = @import("../foundation.zig").BSTR;
const HRESULT = @import("../foundation.zig").HRESULT;
const IDispatch = @import("../system/com.zig").IDispatch;
const IUnknown = @import("../system/com.zig").IUnknown;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
