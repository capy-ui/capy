//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (38)
//--------------------------------------------------------------------------------
pub const PKEY_PhotoAcquire_RelativePathname = PROPERTYKEY { .fmtid = Guid.initString("00f23377-7ac6-4b7a-8443-345e731fa57a"), .pid = 2 };
pub const PKEY_PhotoAcquire_FinalFilename = PROPERTYKEY { .fmtid = Guid.initString("00f23377-7ac6-4b7a-8443-345e731fa57a"), .pid = 3 };
pub const PKEY_PhotoAcquire_GroupTag = PROPERTYKEY { .fmtid = Guid.initString("00f23377-7ac6-4b7a-8443-345e731fa57a"), .pid = 4 };
pub const PKEY_PhotoAcquire_TransferResult = PROPERTYKEY { .fmtid = Guid.initString("00f23377-7ac6-4b7a-8443-345e731fa57a"), .pid = 5 };
pub const PKEY_PhotoAcquire_OriginalFilename = PROPERTYKEY { .fmtid = Guid.initString("00f23377-7ac6-4b7a-8443-345e731fa57a"), .pid = 6 };
pub const PKEY_PhotoAcquire_CameraSequenceNumber = PROPERTYKEY { .fmtid = Guid.initString("00f23377-7ac6-4b7a-8443-345e731fa57a"), .pid = 7 };
pub const PKEY_PhotoAcquire_IntermediateFile = PROPERTYKEY { .fmtid = Guid.initString("00f23377-7ac6-4b7a-8443-345e731fa57a"), .pid = 8 };
pub const PKEY_PhotoAcquire_SkipImport = PROPERTYKEY { .fmtid = Guid.initString("00f23377-7ac6-4b7a-8443-345e731fa57a"), .pid = 9 };
pub const PKEY_PhotoAcquire_DuplicateDetectionID = PROPERTYKEY { .fmtid = Guid.initString("00f23377-7ac6-4b7a-8443-345e731fa57a"), .pid = 10 };
pub const PROGRESS_INDETERMINATE = @as(i32, -1);
pub const PHOTOACQ_ERROR_RESTART_REQUIRED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147180543));
pub const PHOTOACQ_RUN_DEFAULT = @as(u32, 0);
pub const PHOTOACQ_NO_GALLERY_LAUNCH = @as(u32, 1);
pub const PHOTOACQ_DISABLE_AUTO_ROTATE = @as(u32, 2);
pub const PHOTOACQ_DISABLE_PLUGINS = @as(u32, 4);
pub const PHOTOACQ_DISABLE_GROUP_TAG_PROMPT = @as(u32, 8);
pub const PHOTOACQ_DISABLE_DB_INTEGRATION = @as(u32, 16);
pub const PHOTOACQ_DELETE_AFTER_ACQUIRE = @as(u32, 32);
pub const PHOTOACQ_DISABLE_DUPLICATE_DETECTION = @as(u32, 64);
pub const PHOTOACQ_ENABLE_THUMBNAIL_CACHING = @as(u32, 128);
pub const PHOTOACQ_DISABLE_METADATA_WRITE = @as(u32, 256);
pub const PHOTOACQ_DISABLE_THUMBNAIL_PROGRESS = @as(u32, 512);
pub const PHOTOACQ_DISABLE_SETTINGS_LINK = @as(u32, 1024);
pub const PHOTOACQ_ABORT_ON_SETTINGS_UPDATE = @as(u32, 2048);
pub const PHOTOACQ_IMPORT_VIDEO_AS_MULTIPLE_FILES = @as(u32, 4096);
pub const DSF_WPD_DEVICES = @as(u32, 1);
pub const DSF_WIA_CAMERAS = @as(u32, 2);
pub const DSF_WIA_SCANNERS = @as(u32, 4);
pub const DSF_STI_DEVICES = @as(u32, 8);
pub const DSF_TWAIN_DEVICES = @as(u32, 16);
pub const DSF_FS_DEVICES = @as(u32, 32);
pub const DSF_DV_DEVICES = @as(u32, 64);
pub const DSF_ALL_DEVICES = @as(u32, 65535);
pub const DSF_CPL_MODE = @as(u32, 65536);
pub const DSF_SHOW_OFFLINE = @as(u32, 131072);
pub const PAPS_PRESAVE = @as(u32, 0);
pub const PAPS_POSTSAVE = @as(u32, 1);
pub const PAPS_CLEANUP = @as(u32, 2);

//--------------------------------------------------------------------------------
// Section: Types (23)
//--------------------------------------------------------------------------------
const CLSID_PhotoAcquire_Value = Guid.initString("00f26e02-e9f2-4a9f-9fdd-5a962fb26a98");
pub const CLSID_PhotoAcquire = &CLSID_PhotoAcquire_Value;

const CLSID_PhotoAcquireAutoPlayDropTarget_Value = Guid.initString("00f20eb5-8fd6-4d9d-b75e-36801766c8f1");
pub const CLSID_PhotoAcquireAutoPlayDropTarget = &CLSID_PhotoAcquireAutoPlayDropTarget_Value;

const CLSID_PhotoAcquireAutoPlayHWEventHandler_Value = Guid.initString("00f2b433-44e4-4d88-b2b0-2698a0a91dba");
pub const CLSID_PhotoAcquireAutoPlayHWEventHandler = &CLSID_PhotoAcquireAutoPlayHWEventHandler_Value;

const CLSID_PhotoAcquireOptionsDialog_Value = Guid.initString("00f210a1-62f0-438b-9f7e-9618d72a1831");
pub const CLSID_PhotoAcquireOptionsDialog = &CLSID_PhotoAcquireOptionsDialog_Value;

const CLSID_PhotoProgressDialog_Value = Guid.initString("00f24ca0-748f-4e8a-894f-0e0357c6799f");
pub const CLSID_PhotoProgressDialog = &CLSID_PhotoProgressDialog_Value;

const CLSID_PhotoAcquireDeviceSelectionDialog_Value = Guid.initString("00f29a34-b8a1-482c-bcf8-3ac7b0fe8f62");
pub const CLSID_PhotoAcquireDeviceSelectionDialog = &CLSID_PhotoAcquireDeviceSelectionDialog_Value;

const IID_IPhotoAcquireItem_Value = Guid.initString("00f21c97-28bf-4c02-b842-5e4e90139a30");
pub const IID_IPhotoAcquireItem = &IID_IPhotoAcquireItem_Value;
pub const IPhotoAcquireItem = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetItemName: *const fn(
            self: *const IPhotoAcquireItem,
            pbstrItemName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetThumbnail: *const fn(
            self: *const IPhotoAcquireItem,
            sizeThumbnail: SIZE,
            phbmpThumbnail: ?*?HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn(
            self: *const IPhotoAcquireItem,
            key: ?*const PROPERTYKEY,
            pv: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn(
            self: *const IPhotoAcquireItem,
            key: ?*const PROPERTYKEY,
            pv: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStream: *const fn(
            self: *const IPhotoAcquireItem,
            ppStream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanDelete: *const fn(
            self: *const IPhotoAcquireItem,
            pfCanDelete: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn(
            self: *const IPhotoAcquireItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSubItemCount: *const fn(
            self: *const IPhotoAcquireItem,
            pnCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSubItemAt: *const fn(
            self: *const IPhotoAcquireItem,
            nItemIndex: u32,
            ppPhotoAcquireItem: ?*?*IPhotoAcquireItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetItemName(self: *const IPhotoAcquireItem, pbstrItemName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetItemName(self, pbstrItemName);
    }
    pub fn GetThumbnail(self: *const IPhotoAcquireItem, sizeThumbnail: SIZE, phbmpThumbnail: ?*?HBITMAP) callconv(.Inline) HRESULT {
        return self.vtable.GetThumbnail(self, sizeThumbnail, phbmpThumbnail);
    }
    pub fn GetProperty(self: *const IPhotoAcquireItem, key: ?*const PROPERTYKEY, pv: ?*PROPVARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetProperty(self, key, pv);
    }
    pub fn SetProperty(self: *const IPhotoAcquireItem, key: ?*const PROPERTYKEY, pv: ?*const PROPVARIANT) callconv(.Inline) HRESULT {
        return self.vtable.SetProperty(self, key, pv);
    }
    pub fn GetStream(self: *const IPhotoAcquireItem, ppStream: ?*?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.GetStream(self, ppStream);
    }
    pub fn CanDelete(self: *const IPhotoAcquireItem, pfCanDelete: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.CanDelete(self, pfCanDelete);
    }
    pub fn Delete(self: *const IPhotoAcquireItem) callconv(.Inline) HRESULT {
        return self.vtable.Delete(self);
    }
    pub fn GetSubItemCount(self: *const IPhotoAcquireItem, pnCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetSubItemCount(self, pnCount);
    }
    pub fn GetSubItemAt(self: *const IPhotoAcquireItem, nItemIndex: u32, ppPhotoAcquireItem: ?*?*IPhotoAcquireItem) callconv(.Inline) HRESULT {
        return self.vtable.GetSubItemAt(self, nItemIndex, ppPhotoAcquireItem);
    }
};

pub const USER_INPUT_STRING_TYPE = enum(i32) {
    DEFAULT = 0,
    PATH_ELEMENT = 1,
};
pub const USER_INPUT_DEFAULT = USER_INPUT_STRING_TYPE.DEFAULT;
pub const USER_INPUT_PATH_ELEMENT = USER_INPUT_STRING_TYPE.PATH_ELEMENT;

const IID_IUserInputString_Value = Guid.initString("00f243a1-205b-45ba-ae26-abbc53aa7a6f");
pub const IID_IUserInputString = &IID_IUserInputString_Value;
pub const IUserInputString = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSubmitButtonText: *const fn(
            self: *const IUserInputString,
            pbstrSubmitButtonText: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrompt: *const fn(
            self: *const IUserInputString,
            pbstrPromptTitle: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringId: *const fn(
            self: *const IUserInputString,
            pbstrStringId: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringType: *const fn(
            self: *const IUserInputString,
            pnStringType: ?*USER_INPUT_STRING_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTooltipText: *const fn(
            self: *const IUserInputString,
            pbstrTooltipText: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxLength: *const fn(
            self: *const IUserInputString,
            pcchMaxLength: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefault: *const fn(
            self: *const IUserInputString,
            pbstrDefault: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMruCount: *const fn(
            self: *const IUserInputString,
            pnMruCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMruEntryAt: *const fn(
            self: *const IUserInputString,
            nIndex: u32,
            pbstrMruEntry: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetImage: *const fn(
            self: *const IUserInputString,
            nSize: u32,
            phBitmap: ?*?HBITMAP,
            phIcon: ?*?HICON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetSubmitButtonText(self: *const IUserInputString, pbstrSubmitButtonText: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetSubmitButtonText(self, pbstrSubmitButtonText);
    }
    pub fn GetPrompt(self: *const IUserInputString, pbstrPromptTitle: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetPrompt(self, pbstrPromptTitle);
    }
    pub fn GetStringId(self: *const IUserInputString, pbstrStringId: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetStringId(self, pbstrStringId);
    }
    pub fn GetStringType(self: *const IUserInputString, pnStringType: ?*USER_INPUT_STRING_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.GetStringType(self, pnStringType);
    }
    pub fn GetTooltipText(self: *const IUserInputString, pbstrTooltipText: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetTooltipText(self, pbstrTooltipText);
    }
    pub fn GetMaxLength(self: *const IUserInputString, pcchMaxLength: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetMaxLength(self, pcchMaxLength);
    }
    pub fn GetDefault(self: *const IUserInputString, pbstrDefault: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetDefault(self, pbstrDefault);
    }
    pub fn GetMruCount(self: *const IUserInputString, pnMruCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetMruCount(self, pnMruCount);
    }
    pub fn GetMruEntryAt(self: *const IUserInputString, nIndex: u32, pbstrMruEntry: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetMruEntryAt(self, nIndex, pbstrMruEntry);
    }
    pub fn GetImage(self: *const IUserInputString, nSize: u32, phBitmap: ?*?HBITMAP, phIcon: ?*?HICON) callconv(.Inline) HRESULT {
        return self.vtable.GetImage(self, nSize, phBitmap, phIcon);
    }
};

pub const ERROR_ADVISE_MESSAGE_TYPE = enum(i32) {
    SKIPRETRYCANCEL = 0,
    RETRYCANCEL = 1,
    YESNO = 2,
    OK = 3,
};
pub const PHOTOACQUIRE_ERROR_SKIPRETRYCANCEL = ERROR_ADVISE_MESSAGE_TYPE.SKIPRETRYCANCEL;
pub const PHOTOACQUIRE_ERROR_RETRYCANCEL = ERROR_ADVISE_MESSAGE_TYPE.RETRYCANCEL;
pub const PHOTOACQUIRE_ERROR_YESNO = ERROR_ADVISE_MESSAGE_TYPE.YESNO;
pub const PHOTOACQUIRE_ERROR_OK = ERROR_ADVISE_MESSAGE_TYPE.OK;

pub const ERROR_ADVISE_RESULT = enum(i32) {
    YES = 0,
    NO = 1,
    OK = 2,
    SKIP = 3,
    SKIP_ALL = 4,
    RETRY = 5,
    ABORT = 6,
};
pub const PHOTOACQUIRE_RESULT_YES = ERROR_ADVISE_RESULT.YES;
pub const PHOTOACQUIRE_RESULT_NO = ERROR_ADVISE_RESULT.NO;
pub const PHOTOACQUIRE_RESULT_OK = ERROR_ADVISE_RESULT.OK;
pub const PHOTOACQUIRE_RESULT_SKIP = ERROR_ADVISE_RESULT.SKIP;
pub const PHOTOACQUIRE_RESULT_SKIP_ALL = ERROR_ADVISE_RESULT.SKIP_ALL;
pub const PHOTOACQUIRE_RESULT_RETRY = ERROR_ADVISE_RESULT.RETRY;
pub const PHOTOACQUIRE_RESULT_ABORT = ERROR_ADVISE_RESULT.ABORT;

const IID_IPhotoAcquireProgressCB_Value = Guid.initString("00f2ce1e-935e-4248-892c-130f32c45cb4");
pub const IID_IPhotoAcquireProgressCB = &IID_IPhotoAcquireProgressCB_Value;
pub const IPhotoAcquireProgressCB = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Cancelled: *const fn(
            self: *const IPhotoAcquireProgressCB,
            pfCancelled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartEnumeration: *const fn(
            self: *const IPhotoAcquireProgressCB,
            pPhotoAcquireSource: ?*IPhotoAcquireSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FoundItem: *const fn(
            self: *const IPhotoAcquireProgressCB,
            pPhotoAcquireItem: ?*IPhotoAcquireItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndEnumeration: *const fn(
            self: *const IPhotoAcquireProgressCB,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartTransfer: *const fn(
            self: *const IPhotoAcquireProgressCB,
            pPhotoAcquireSource: ?*IPhotoAcquireSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartItemTransfer: *const fn(
            self: *const IPhotoAcquireProgressCB,
            nItemIndex: u32,
            pPhotoAcquireItem: ?*IPhotoAcquireItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DirectoryCreated: *const fn(
            self: *const IPhotoAcquireProgressCB,
            pszDirectory: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateTransferPercent: *const fn(
            self: *const IPhotoAcquireProgressCB,
            fOverall: BOOL,
            nPercent: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndItemTransfer: *const fn(
            self: *const IPhotoAcquireProgressCB,
            nItemIndex: u32,
            pPhotoAcquireItem: ?*IPhotoAcquireItem,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndTransfer: *const fn(
            self: *const IPhotoAcquireProgressCB,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartDelete: *const fn(
            self: *const IPhotoAcquireProgressCB,
            pPhotoAcquireSource: ?*IPhotoAcquireSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartItemDelete: *const fn(
            self: *const IPhotoAcquireProgressCB,
            nItemIndex: u32,
            pPhotoAcquireItem: ?*IPhotoAcquireItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateDeletePercent: *const fn(
            self: *const IPhotoAcquireProgressCB,
            nPercent: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndItemDelete: *const fn(
            self: *const IPhotoAcquireProgressCB,
            nItemIndex: u32,
            pPhotoAcquireItem: ?*IPhotoAcquireItem,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndDelete: *const fn(
            self: *const IPhotoAcquireProgressCB,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndSession: *const fn(
            self: *const IPhotoAcquireProgressCB,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeleteAfterAcquire: *const fn(
            self: *const IPhotoAcquireProgressCB,
            pfDeleteAfterAcquire: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ErrorAdvise: *const fn(
            self: *const IPhotoAcquireProgressCB,
            hr: HRESULT,
            pszErrorMessage: ?[*:0]const u16,
            nMessageType: ERROR_ADVISE_MESSAGE_TYPE,
            pnErrorAdviseResult: ?*ERROR_ADVISE_RESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUserInput: *const fn(
            self: *const IPhotoAcquireProgressCB,
            riidType: ?*const Guid,
            pUnknown: ?*IUnknown,
            pPropVarResult: ?*PROPVARIANT,
            pPropVarDefault: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Cancelled(self: *const IPhotoAcquireProgressCB, pfCancelled: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.Cancelled(self, pfCancelled);
    }
    pub fn StartEnumeration(self: *const IPhotoAcquireProgressCB, pPhotoAcquireSource: ?*IPhotoAcquireSource) callconv(.Inline) HRESULT {
        return self.vtable.StartEnumeration(self, pPhotoAcquireSource);
    }
    pub fn FoundItem(self: *const IPhotoAcquireProgressCB, pPhotoAcquireItem: ?*IPhotoAcquireItem) callconv(.Inline) HRESULT {
        return self.vtable.FoundItem(self, pPhotoAcquireItem);
    }
    pub fn EndEnumeration(self: *const IPhotoAcquireProgressCB, hr: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.EndEnumeration(self, hr);
    }
    pub fn StartTransfer(self: *const IPhotoAcquireProgressCB, pPhotoAcquireSource: ?*IPhotoAcquireSource) callconv(.Inline) HRESULT {
        return self.vtable.StartTransfer(self, pPhotoAcquireSource);
    }
    pub fn StartItemTransfer(self: *const IPhotoAcquireProgressCB, nItemIndex: u32, pPhotoAcquireItem: ?*IPhotoAcquireItem) callconv(.Inline) HRESULT {
        return self.vtable.StartItemTransfer(self, nItemIndex, pPhotoAcquireItem);
    }
    pub fn DirectoryCreated(self: *const IPhotoAcquireProgressCB, pszDirectory: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.DirectoryCreated(self, pszDirectory);
    }
    pub fn UpdateTransferPercent(self: *const IPhotoAcquireProgressCB, fOverall: BOOL, nPercent: u32) callconv(.Inline) HRESULT {
        return self.vtable.UpdateTransferPercent(self, fOverall, nPercent);
    }
    pub fn EndItemTransfer(self: *const IPhotoAcquireProgressCB, nItemIndex: u32, pPhotoAcquireItem: ?*IPhotoAcquireItem, hr: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.EndItemTransfer(self, nItemIndex, pPhotoAcquireItem, hr);
    }
    pub fn EndTransfer(self: *const IPhotoAcquireProgressCB, hr: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.EndTransfer(self, hr);
    }
    pub fn StartDelete(self: *const IPhotoAcquireProgressCB, pPhotoAcquireSource: ?*IPhotoAcquireSource) callconv(.Inline) HRESULT {
        return self.vtable.StartDelete(self, pPhotoAcquireSource);
    }
    pub fn StartItemDelete(self: *const IPhotoAcquireProgressCB, nItemIndex: u32, pPhotoAcquireItem: ?*IPhotoAcquireItem) callconv(.Inline) HRESULT {
        return self.vtable.StartItemDelete(self, nItemIndex, pPhotoAcquireItem);
    }
    pub fn UpdateDeletePercent(self: *const IPhotoAcquireProgressCB, nPercent: u32) callconv(.Inline) HRESULT {
        return self.vtable.UpdateDeletePercent(self, nPercent);
    }
    pub fn EndItemDelete(self: *const IPhotoAcquireProgressCB, nItemIndex: u32, pPhotoAcquireItem: ?*IPhotoAcquireItem, hr: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.EndItemDelete(self, nItemIndex, pPhotoAcquireItem, hr);
    }
    pub fn EndDelete(self: *const IPhotoAcquireProgressCB, hr: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.EndDelete(self, hr);
    }
    pub fn EndSession(self: *const IPhotoAcquireProgressCB, hr: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.EndSession(self, hr);
    }
    pub fn GetDeleteAfterAcquire(self: *const IPhotoAcquireProgressCB, pfDeleteAfterAcquire: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.GetDeleteAfterAcquire(self, pfDeleteAfterAcquire);
    }
    pub fn ErrorAdvise(self: *const IPhotoAcquireProgressCB, hr: HRESULT, pszErrorMessage: ?[*:0]const u16, nMessageType: ERROR_ADVISE_MESSAGE_TYPE, pnErrorAdviseResult: ?*ERROR_ADVISE_RESULT) callconv(.Inline) HRESULT {
        return self.vtable.ErrorAdvise(self, hr, pszErrorMessage, nMessageType, pnErrorAdviseResult);
    }
    pub fn GetUserInput(self: *const IPhotoAcquireProgressCB, riidType: ?*const Guid, pUnknown: ?*IUnknown, pPropVarResult: ?*PROPVARIANT, pPropVarDefault: ?*const PROPVARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetUserInput(self, riidType, pUnknown, pPropVarResult, pPropVarDefault);
    }
};

const IID_IPhotoProgressActionCB_Value = Guid.initString("00f242d0-b206-4e7d-b4c1-4755bcbb9c9f");
pub const IID_IPhotoProgressActionCB = &IID_IPhotoProgressActionCB_Value;
pub const IPhotoProgressActionCB = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DoAction: *const fn(
            self: *const IPhotoProgressActionCB,
            hWndParent: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn DoAction(self: *const IPhotoProgressActionCB, hWndParent: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.DoAction(self, hWndParent);
    }
};

pub const PROGRESS_DIALOG_IMAGE_TYPE = enum(i32) {
    ICON_SMALL = 0,
    ICON_LARGE = 1,
    ICON_THUMBNAIL = 2,
    BITMAP_THUMBNAIL = 3,
};
pub const PROGRESS_DIALOG_ICON_SMALL = PROGRESS_DIALOG_IMAGE_TYPE.ICON_SMALL;
pub const PROGRESS_DIALOG_ICON_LARGE = PROGRESS_DIALOG_IMAGE_TYPE.ICON_LARGE;
pub const PROGRESS_DIALOG_ICON_THUMBNAIL = PROGRESS_DIALOG_IMAGE_TYPE.ICON_THUMBNAIL;
pub const PROGRESS_DIALOG_BITMAP_THUMBNAIL = PROGRESS_DIALOG_IMAGE_TYPE.BITMAP_THUMBNAIL;

pub const PROGRESS_DIALOG_CHECKBOX_ID = enum(i32) {
    T = 0,
};
pub const PROGRESS_DIALOG_CHECKBOX_ID_DEFAULT = PROGRESS_DIALOG_CHECKBOX_ID.T;

const IID_IPhotoProgressDialog_Value = Guid.initString("00f246f9-0750-4f08-9381-2cd8e906a4ae");
pub const IID_IPhotoProgressDialog = &IID_IPhotoProgressDialog_Value;
pub const IPhotoProgressDialog = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: *const fn(
            self: *const IPhotoProgressDialog,
            hwndParent: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWindow: *const fn(
            self: *const IPhotoProgressDialog,
            phwndProgressDialog: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Destroy: *const fn(
            self: *const IPhotoProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTitle: *const fn(
            self: *const IPhotoProgressDialog,
            pszTitle: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowCheckbox: *const fn(
            self: *const IPhotoProgressDialog,
            nCheckboxId: PROGRESS_DIALOG_CHECKBOX_ID,
            fShow: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCheckboxText: *const fn(
            self: *const IPhotoProgressDialog,
            nCheckboxId: PROGRESS_DIALOG_CHECKBOX_ID,
            pszCheckboxText: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCheckboxCheck: *const fn(
            self: *const IPhotoProgressDialog,
            nCheckboxId: PROGRESS_DIALOG_CHECKBOX_ID,
            fChecked: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCheckboxTooltip: *const fn(
            self: *const IPhotoProgressDialog,
            nCheckboxId: PROGRESS_DIALOG_CHECKBOX_ID,
            pszCheckboxTooltipText: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsCheckboxChecked: *const fn(
            self: *const IPhotoProgressDialog,
            nCheckboxId: PROGRESS_DIALOG_CHECKBOX_ID,
            pfChecked: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCaption: *const fn(
            self: *const IPhotoProgressDialog,
            pszTitle: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetImage: *const fn(
            self: *const IPhotoProgressDialog,
            nImageType: PROGRESS_DIALOG_IMAGE_TYPE,
            hIcon: ?HICON,
            hBitmap: ?HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPercentComplete: *const fn(
            self: *const IPhotoProgressDialog,
            nPercent: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProgressText: *const fn(
            self: *const IPhotoProgressDialog,
            pszProgressText: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActionLinkCallback: *const fn(
            self: *const IPhotoProgressDialog,
            pPhotoProgressActionCB: ?*IPhotoProgressActionCB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActionLinkText: *const fn(
            self: *const IPhotoProgressDialog,
            pszCaption: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowActionLink: *const fn(
            self: *const IPhotoProgressDialog,
            fShow: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsCancelled: *const fn(
            self: *const IPhotoProgressDialog,
            pfCancelled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUserInput: *const fn(
            self: *const IPhotoProgressDialog,
            riidType: ?*const Guid,
            pUnknown: ?*IUnknown,
            pPropVarResult: ?*PROPVARIANT,
            pPropVarDefault: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Create(self: *const IPhotoProgressDialog, hwndParent: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.Create(self, hwndParent);
    }
    pub fn GetWindow(self: *const IPhotoProgressDialog, phwndProgressDialog: ?*?HWND) callconv(.Inline) HRESULT {
        return self.vtable.GetWindow(self, phwndProgressDialog);
    }
    pub fn Destroy(self: *const IPhotoProgressDialog) callconv(.Inline) HRESULT {
        return self.vtable.Destroy(self);
    }
    pub fn SetTitle(self: *const IPhotoProgressDialog, pszTitle: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetTitle(self, pszTitle);
    }
    pub fn ShowCheckbox(self: *const IPhotoProgressDialog, nCheckboxId: PROGRESS_DIALOG_CHECKBOX_ID, fShow: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.ShowCheckbox(self, nCheckboxId, fShow);
    }
    pub fn SetCheckboxText(self: *const IPhotoProgressDialog, nCheckboxId: PROGRESS_DIALOG_CHECKBOX_ID, pszCheckboxText: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetCheckboxText(self, nCheckboxId, pszCheckboxText);
    }
    pub fn SetCheckboxCheck(self: *const IPhotoProgressDialog, nCheckboxId: PROGRESS_DIALOG_CHECKBOX_ID, fChecked: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetCheckboxCheck(self, nCheckboxId, fChecked);
    }
    pub fn SetCheckboxTooltip(self: *const IPhotoProgressDialog, nCheckboxId: PROGRESS_DIALOG_CHECKBOX_ID, pszCheckboxTooltipText: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetCheckboxTooltip(self, nCheckboxId, pszCheckboxTooltipText);
    }
    pub fn IsCheckboxChecked(self: *const IPhotoProgressDialog, nCheckboxId: PROGRESS_DIALOG_CHECKBOX_ID, pfChecked: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.IsCheckboxChecked(self, nCheckboxId, pfChecked);
    }
    pub fn SetCaption(self: *const IPhotoProgressDialog, pszTitle: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetCaption(self, pszTitle);
    }
    pub fn SetImage(self: *const IPhotoProgressDialog, nImageType: PROGRESS_DIALOG_IMAGE_TYPE, hIcon: ?HICON, hBitmap: ?HBITMAP) callconv(.Inline) HRESULT {
        return self.vtable.SetImage(self, nImageType, hIcon, hBitmap);
    }
    pub fn SetPercentComplete(self: *const IPhotoProgressDialog, nPercent: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetPercentComplete(self, nPercent);
    }
    pub fn SetProgressText(self: *const IPhotoProgressDialog, pszProgressText: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetProgressText(self, pszProgressText);
    }
    pub fn SetActionLinkCallback(self: *const IPhotoProgressDialog, pPhotoProgressActionCB: ?*IPhotoProgressActionCB) callconv(.Inline) HRESULT {
        return self.vtable.SetActionLinkCallback(self, pPhotoProgressActionCB);
    }
    pub fn SetActionLinkText(self: *const IPhotoProgressDialog, pszCaption: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetActionLinkText(self, pszCaption);
    }
    pub fn ShowActionLink(self: *const IPhotoProgressDialog, fShow: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.ShowActionLink(self, fShow);
    }
    pub fn IsCancelled(self: *const IPhotoProgressDialog, pfCancelled: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.IsCancelled(self, pfCancelled);
    }
    pub fn GetUserInput(self: *const IPhotoProgressDialog, riidType: ?*const Guid, pUnknown: ?*IUnknown, pPropVarResult: ?*PROPVARIANT, pPropVarDefault: ?*const PROPVARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetUserInput(self, riidType, pUnknown, pPropVarResult, pPropVarDefault);
    }
};

const IID_IPhotoAcquireSource_Value = Guid.initString("00f2c703-8613-4282-a53b-6ec59c5883ac");
pub const IID_IPhotoAcquireSource = &IID_IPhotoAcquireSource_Value;
pub const IPhotoAcquireSource = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFriendlyName: *const fn(
            self: *const IPhotoAcquireSource,
            pbstrFriendlyName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceIcons: *const fn(
            self: *const IPhotoAcquireSource,
            nSize: u32,
            phLargeIcon: ?*?HICON,
            phSmallIcon: ?*?HICON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeItemList: *const fn(
            self: *const IPhotoAcquireSource,
            fForceEnumeration: BOOL,
            pPhotoAcquireProgressCB: ?*IPhotoAcquireProgressCB,
            pnItemCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemCount: *const fn(
            self: *const IPhotoAcquireSource,
            pnItemCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemAt: *const fn(
            self: *const IPhotoAcquireSource,
            nIndex: u32,
            ppPhotoAcquireItem: ?*?*IPhotoAcquireItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPhotoAcquireSettings: *const fn(
            self: *const IPhotoAcquireSource,
            ppPhotoAcquireSettings: ?*?*IPhotoAcquireSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceId: *const fn(
            self: *const IPhotoAcquireSource,
            pbstrDeviceId: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindToObject: *const fn(
            self: *const IPhotoAcquireSource,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetFriendlyName(self: *const IPhotoAcquireSource, pbstrFriendlyName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetFriendlyName(self, pbstrFriendlyName);
    }
    pub fn GetDeviceIcons(self: *const IPhotoAcquireSource, nSize: u32, phLargeIcon: ?*?HICON, phSmallIcon: ?*?HICON) callconv(.Inline) HRESULT {
        return self.vtable.GetDeviceIcons(self, nSize, phLargeIcon, phSmallIcon);
    }
    pub fn InitializeItemList(self: *const IPhotoAcquireSource, fForceEnumeration: BOOL, pPhotoAcquireProgressCB: ?*IPhotoAcquireProgressCB, pnItemCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.InitializeItemList(self, fForceEnumeration, pPhotoAcquireProgressCB, pnItemCount);
    }
    pub fn GetItemCount(self: *const IPhotoAcquireSource, pnItemCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetItemCount(self, pnItemCount);
    }
    pub fn GetItemAt(self: *const IPhotoAcquireSource, nIndex: u32, ppPhotoAcquireItem: ?*?*IPhotoAcquireItem) callconv(.Inline) HRESULT {
        return self.vtable.GetItemAt(self, nIndex, ppPhotoAcquireItem);
    }
    pub fn GetPhotoAcquireSettings(self: *const IPhotoAcquireSource, ppPhotoAcquireSettings: ?*?*IPhotoAcquireSettings) callconv(.Inline) HRESULT {
        return self.vtable.GetPhotoAcquireSettings(self, ppPhotoAcquireSettings);
    }
    pub fn GetDeviceId(self: *const IPhotoAcquireSource, pbstrDeviceId: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetDeviceId(self, pbstrDeviceId);
    }
    pub fn BindToObject(self: *const IPhotoAcquireSource, riid: ?*const Guid, ppv: ?*?*anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.BindToObject(self, riid, ppv);
    }
};

const IID_IPhotoAcquire_Value = Guid.initString("00f23353-e31b-4955-a8ad-ca5ebf31e2ce");
pub const IID_IPhotoAcquire = &IID_IPhotoAcquire_Value;
pub const IPhotoAcquire = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreatePhotoSource: *const fn(
            self: *const IPhotoAcquire,
            pszDevice: ?[*:0]const u16,
            ppPhotoAcquireSource: ?*?*IPhotoAcquireSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Acquire: *const fn(
            self: *const IPhotoAcquire,
            pPhotoAcquireSource: ?*IPhotoAcquireSource,
            fShowProgress: BOOL,
            hWndParent: ?HWND,
            pszApplicationName: ?[*:0]const u16,
            pPhotoAcquireProgressCB: ?*IPhotoAcquireProgressCB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumResults: *const fn(
            self: *const IPhotoAcquire,
            ppEnumFilePaths: ?*?*IEnumString,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreatePhotoSource(self: *const IPhotoAcquire, pszDevice: ?[*:0]const u16, ppPhotoAcquireSource: ?*?*IPhotoAcquireSource) callconv(.Inline) HRESULT {
        return self.vtable.CreatePhotoSource(self, pszDevice, ppPhotoAcquireSource);
    }
    pub fn Acquire(self: *const IPhotoAcquire, pPhotoAcquireSource: ?*IPhotoAcquireSource, fShowProgress: BOOL, hWndParent: ?HWND, pszApplicationName: ?[*:0]const u16, pPhotoAcquireProgressCB: ?*IPhotoAcquireProgressCB) callconv(.Inline) HRESULT {
        return self.vtable.Acquire(self, pPhotoAcquireSource, fShowProgress, hWndParent, pszApplicationName, pPhotoAcquireProgressCB);
    }
    pub fn EnumResults(self: *const IPhotoAcquire, ppEnumFilePaths: ?*?*IEnumString) callconv(.Inline) HRESULT {
        return self.vtable.EnumResults(self, ppEnumFilePaths);
    }
};

const IID_IPhotoAcquireSettings_Value = Guid.initString("00f2b868-dd67-487c-9553-049240767e91");
pub const IID_IPhotoAcquireSettings = &IID_IPhotoAcquireSettings_Value;
pub const IPhotoAcquireSettings = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InitializeFromRegistry: *const fn(
            self: *const IPhotoAcquireSettings,
            pszRegistryKey: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFlags: *const fn(
            self: *const IPhotoAcquireSettings,
            dwPhotoAcquireFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOutputFilenameTemplate: *const fn(
            self: *const IPhotoAcquireSettings,
            pszTemplate: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSequencePaddingWidth: *const fn(
            self: *const IPhotoAcquireSettings,
            dwWidth: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSequenceZeroPadding: *const fn(
            self: *const IPhotoAcquireSettings,
            fZeroPad: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGroupTag: *const fn(
            self: *const IPhotoAcquireSettings,
            pszGroupTag: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAcquisitionTime: *const fn(
            self: *const IPhotoAcquireSettings,
            pftAcquisitionTime: ?*const FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: *const fn(
            self: *const IPhotoAcquireSettings,
            pdwPhotoAcquireFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputFilenameTemplate: *const fn(
            self: *const IPhotoAcquireSettings,
            pbstrTemplate: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSequencePaddingWidth: *const fn(
            self: *const IPhotoAcquireSettings,
            pdwWidth: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSequenceZeroPadding: *const fn(
            self: *const IPhotoAcquireSettings,
            pfZeroPad: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGroupTag: *const fn(
            self: *const IPhotoAcquireSettings,
            pbstrGroupTag: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAcquisitionTime: *const fn(
            self: *const IPhotoAcquireSettings,
            pftAcquisitionTime: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn InitializeFromRegistry(self: *const IPhotoAcquireSettings, pszRegistryKey: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromRegistry(self, pszRegistryKey);
    }
    pub fn SetFlags(self: *const IPhotoAcquireSettings, dwPhotoAcquireFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetFlags(self, dwPhotoAcquireFlags);
    }
    pub fn SetOutputFilenameTemplate(self: *const IPhotoAcquireSettings, pszTemplate: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetOutputFilenameTemplate(self, pszTemplate);
    }
    pub fn SetSequencePaddingWidth(self: *const IPhotoAcquireSettings, dwWidth: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetSequencePaddingWidth(self, dwWidth);
    }
    pub fn SetSequenceZeroPadding(self: *const IPhotoAcquireSettings, fZeroPad: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.SetSequenceZeroPadding(self, fZeroPad);
    }
    pub fn SetGroupTag(self: *const IPhotoAcquireSettings, pszGroupTag: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetGroupTag(self, pszGroupTag);
    }
    pub fn SetAcquisitionTime(self: *const IPhotoAcquireSettings, pftAcquisitionTime: ?*const FILETIME) callconv(.Inline) HRESULT {
        return self.vtable.SetAcquisitionTime(self, pftAcquisitionTime);
    }
    pub fn GetFlags(self: *const IPhotoAcquireSettings, pdwPhotoAcquireFlags: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetFlags(self, pdwPhotoAcquireFlags);
    }
    pub fn GetOutputFilenameTemplate(self: *const IPhotoAcquireSettings, pbstrTemplate: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetOutputFilenameTemplate(self, pbstrTemplate);
    }
    pub fn GetSequencePaddingWidth(self: *const IPhotoAcquireSettings, pdwWidth: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetSequencePaddingWidth(self, pdwWidth);
    }
    pub fn GetSequenceZeroPadding(self: *const IPhotoAcquireSettings, pfZeroPad: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.GetSequenceZeroPadding(self, pfZeroPad);
    }
    pub fn GetGroupTag(self: *const IPhotoAcquireSettings, pbstrGroupTag: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetGroupTag(self, pbstrGroupTag);
    }
    pub fn GetAcquisitionTime(self: *const IPhotoAcquireSettings, pftAcquisitionTime: ?*FILETIME) callconv(.Inline) HRESULT {
        return self.vtable.GetAcquisitionTime(self, pftAcquisitionTime);
    }
};

const IID_IPhotoAcquireOptionsDialog_Value = Guid.initString("00f2b3ee-bf64-47ee-89f4-4dedd79643f2");
pub const IID_IPhotoAcquireOptionsDialog = &IID_IPhotoAcquireOptionsDialog_Value;
pub const IPhotoAcquireOptionsDialog = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn(
            self: *const IPhotoAcquireOptionsDialog,
            pszRegistryRoot: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: *const fn(
            self: *const IPhotoAcquireOptionsDialog,
            hWndParent: ?HWND,
            phWndDialog: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Destroy: *const fn(
            self: *const IPhotoAcquireOptionsDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoModal: *const fn(
            self: *const IPhotoAcquireOptionsDialog,
            hWndParent: ?HWND,
            ppnReturnCode: ?*isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveData: *const fn(
            self: *const IPhotoAcquireOptionsDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IPhotoAcquireOptionsDialog, pszRegistryRoot: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, pszRegistryRoot);
    }
    pub fn Create(self: *const IPhotoAcquireOptionsDialog, hWndParent: ?HWND, phWndDialog: ?*?HWND) callconv(.Inline) HRESULT {
        return self.vtable.Create(self, hWndParent, phWndDialog);
    }
    pub fn Destroy(self: *const IPhotoAcquireOptionsDialog) callconv(.Inline) HRESULT {
        return self.vtable.Destroy(self);
    }
    pub fn DoModal(self: *const IPhotoAcquireOptionsDialog, hWndParent: ?HWND, ppnReturnCode: ?*isize) callconv(.Inline) HRESULT {
        return self.vtable.DoModal(self, hWndParent, ppnReturnCode);
    }
    pub fn SaveData(self: *const IPhotoAcquireOptionsDialog) callconv(.Inline) HRESULT {
        return self.vtable.SaveData(self);
    }
};

pub const DEVICE_SELECTION_DEVICE_TYPE = enum(i32) {
    T_UNKNOWN_DEVICE = 0,
    T_WPD_DEVICE = 1,
    T_WIA_DEVICE = 2,
    T_STI_DEVICE = 3,
    F_TWAIN_DEVICE = 4,
    T_FS_DEVICE = 5,
    T_DV_DEVICE = 6,
};
pub const DST_UNKNOWN_DEVICE = DEVICE_SELECTION_DEVICE_TYPE.T_UNKNOWN_DEVICE;
pub const DST_WPD_DEVICE = DEVICE_SELECTION_DEVICE_TYPE.T_WPD_DEVICE;
pub const DST_WIA_DEVICE = DEVICE_SELECTION_DEVICE_TYPE.T_WIA_DEVICE;
pub const DST_STI_DEVICE = DEVICE_SELECTION_DEVICE_TYPE.T_STI_DEVICE;
pub const DSF_TWAIN_DEVICE = DEVICE_SELECTION_DEVICE_TYPE.F_TWAIN_DEVICE;
pub const DST_FS_DEVICE = DEVICE_SELECTION_DEVICE_TYPE.T_FS_DEVICE;
pub const DST_DV_DEVICE = DEVICE_SELECTION_DEVICE_TYPE.T_DV_DEVICE;

const IID_IPhotoAcquireDeviceSelectionDialog_Value = Guid.initString("00f28837-55dd-4f37-aaf5-6855a9640467");
pub const IID_IPhotoAcquireDeviceSelectionDialog = &IID_IPhotoAcquireDeviceSelectionDialog_Value;
pub const IPhotoAcquireDeviceSelectionDialog = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetTitle: *const fn(
            self: *const IPhotoAcquireDeviceSelectionDialog,
            pszTitle: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSubmitButtonText: *const fn(
            self: *const IPhotoAcquireDeviceSelectionDialog,
            pszSubmitButtonText: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoModal: *const fn(
            self: *const IPhotoAcquireDeviceSelectionDialog,
            hWndParent: ?HWND,
            dwDeviceFlags: u32,
            pbstrDeviceId: ?*?BSTR,
            pnDeviceType: ?*DEVICE_SELECTION_DEVICE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn SetTitle(self: *const IPhotoAcquireDeviceSelectionDialog, pszTitle: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetTitle(self, pszTitle);
    }
    pub fn SetSubmitButtonText(self: *const IPhotoAcquireDeviceSelectionDialog, pszSubmitButtonText: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetSubmitButtonText(self, pszSubmitButtonText);
    }
    pub fn DoModal(self: *const IPhotoAcquireDeviceSelectionDialog, hWndParent: ?HWND, dwDeviceFlags: u32, pbstrDeviceId: ?*?BSTR, pnDeviceType: ?*DEVICE_SELECTION_DEVICE_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.DoModal(self, hWndParent, dwDeviceFlags, pbstrDeviceId, pnDeviceType);
    }
};

const IID_IPhotoAcquirePlugin_Value = Guid.initString("00f2dceb-ecb8-4f77-8e47-e7a987c83dd0");
pub const IID_IPhotoAcquirePlugin = &IID_IPhotoAcquirePlugin_Value;
pub const IPhotoAcquirePlugin = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn(
            self: *const IPhotoAcquirePlugin,
            pPhotoAcquireSource: ?*IPhotoAcquireSource,
            pPhotoAcquireProgressCB: ?*IPhotoAcquireProgressCB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProcessItem: *const fn(
            self: *const IPhotoAcquirePlugin,
            dwAcquireStage: u32,
            pPhotoAcquireItem: ?*IPhotoAcquireItem,
            pOriginalItemStream: ?*IStream,
            pszFinalFilename: ?[*:0]const u16,
            pPropertyStore: ?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TransferComplete: *const fn(
            self: *const IPhotoAcquirePlugin,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisplayConfigureDialog: *const fn(
            self: *const IPhotoAcquirePlugin,
            hWndParent: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IPhotoAcquirePlugin, pPhotoAcquireSource: ?*IPhotoAcquireSource, pPhotoAcquireProgressCB: ?*IPhotoAcquireProgressCB) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, pPhotoAcquireSource, pPhotoAcquireProgressCB);
    }
    pub fn ProcessItem(self: *const IPhotoAcquirePlugin, dwAcquireStage: u32, pPhotoAcquireItem: ?*IPhotoAcquireItem, pOriginalItemStream: ?*IStream, pszFinalFilename: ?[*:0]const u16, pPropertyStore: ?*IPropertyStore) callconv(.Inline) HRESULT {
        return self.vtable.ProcessItem(self, dwAcquireStage, pPhotoAcquireItem, pOriginalItemStream, pszFinalFilename, pPropertyStore);
    }
    pub fn TransferComplete(self: *const IPhotoAcquirePlugin, hr: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.TransferComplete(self, hr);
    }
    pub fn DisplayConfigureDialog(self: *const IPhotoAcquirePlugin, hWndParent: ?HWND) callconv(.Inline) HRESULT {
        return self.vtable.DisplayConfigureDialog(self, hWndParent);
    }
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (16)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const FILETIME = @import("../foundation.zig").FILETIME;
const HBITMAP = @import("../graphics/gdi.zig").HBITMAP;
const HICON = @import("../ui/windows_and_messaging.zig").HICON;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IEnumString = @import("../system/com.zig").IEnumString;
const IPropertyStore = @import("../ui/shell/properties_system.zig").IPropertyStore;
const IStream = @import("../system/com.zig").IStream;
const IUnknown = @import("../system/com.zig").IUnknown;
const PROPERTYKEY = @import("../ui/shell/properties_system.zig").PROPERTYKEY;
const PROPVARIANT = @import("../system/com/structured_storage.zig").PROPVARIANT;
const PWSTR = @import("../foundation.zig").PWSTR;
const SIZE = @import("../foundation.zig").SIZE;

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
