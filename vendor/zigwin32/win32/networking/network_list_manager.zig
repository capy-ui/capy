//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (15)
//--------------------------------------------------------------------------------
pub const NA_DomainAuthenticationFailed = "NA_DomainAuthenticationFailed";
pub const NA_NetworkClass = "NA_NetworkClass";
pub const NA_NameSetByPolicy = "NA_NameSetByPolicy";
pub const NA_IconSetByPolicy = "NA_IconSetByPolicy";
pub const NA_DescriptionSetByPolicy = "NA_DescriptionSetByPolicy";
pub const NA_CategorySetByPolicy = "NA_CategorySetByPolicy";
pub const NA_NameReadOnly = "NA_NameReadOnly";
pub const NA_IconReadOnly = "NA_IconReadOnly";
pub const NA_DescriptionReadOnly = "NA_DescriptionReadOnly";
pub const NA_CategoryReadOnly = "NA_CategoryReadOnly";
pub const NA_AllowMerge = "NA_AllowMerge";
pub const NA_InternetConnectivityV4 = "NA_InternetConnectivityV4";
pub const NA_InternetConnectivityV6 = "NA_InternetConnectivityV6";
pub const NLM_MAX_ADDRESS_LIST_SIZE = @as(u32, 10);
pub const NLM_UNKNOWN_DATAPLAN_STATUS = @as(u32, 4294967295);

//--------------------------------------------------------------------------------
// Section: Types (26)
//--------------------------------------------------------------------------------
const CLSID_NetworkListManager_Value = Guid.initString("dcb00c01-570f-4a9b-8d69-199fdba5723b");
pub const CLSID_NetworkListManager = &CLSID_NetworkListManager_Value;

pub const NLM_CONNECTION_COST = enum(i32) {
    UNKNOWN = 0,
    UNRESTRICTED = 1,
    FIXED = 2,
    VARIABLE = 4,
    OVERDATALIMIT = 65536,
    CONGESTED = 131072,
    ROAMING = 262144,
    APPROACHINGDATALIMIT = 524288,
};
pub const NLM_CONNECTION_COST_UNKNOWN = NLM_CONNECTION_COST.UNKNOWN;
pub const NLM_CONNECTION_COST_UNRESTRICTED = NLM_CONNECTION_COST.UNRESTRICTED;
pub const NLM_CONNECTION_COST_FIXED = NLM_CONNECTION_COST.FIXED;
pub const NLM_CONNECTION_COST_VARIABLE = NLM_CONNECTION_COST.VARIABLE;
pub const NLM_CONNECTION_COST_OVERDATALIMIT = NLM_CONNECTION_COST.OVERDATALIMIT;
pub const NLM_CONNECTION_COST_CONGESTED = NLM_CONNECTION_COST.CONGESTED;
pub const NLM_CONNECTION_COST_ROAMING = NLM_CONNECTION_COST.ROAMING;
pub const NLM_CONNECTION_COST_APPROACHINGDATALIMIT = NLM_CONNECTION_COST.APPROACHINGDATALIMIT;

pub const NLM_USAGE_DATA = extern struct {
    UsageInMegabytes: u32,
    LastSyncTime: FILETIME,
};

pub const NLM_DATAPLAN_STATUS = extern struct {
    InterfaceGuid: Guid,
    UsageData: NLM_USAGE_DATA,
    DataLimitInMegabytes: u32,
    InboundBandwidthInKbps: u32,
    OutboundBandwidthInKbps: u32,
    NextBillingCycle: FILETIME,
    MaxTransferSizeInMegabytes: u32,
    Reserved: u32,
};

pub const NLM_SOCKADDR = extern struct {
    data: [128]u8,
};

pub const NLM_NETWORK_CLASS = enum(i32) {
    IDENTIFYING = 1,
    IDENTIFIED = 2,
    UNIDENTIFIED = 3,
};
pub const NLM_NETWORK_IDENTIFYING = NLM_NETWORK_CLASS.IDENTIFYING;
pub const NLM_NETWORK_IDENTIFIED = NLM_NETWORK_CLASS.IDENTIFIED;
pub const NLM_NETWORK_UNIDENTIFIED = NLM_NETWORK_CLASS.UNIDENTIFIED;

pub const NLM_SIMULATED_PROFILE_INFO = extern struct {
    ProfileName: [256]u16,
    cost: NLM_CONNECTION_COST,
    UsageInMegabytes: u32,
    DataLimitInMegabytes: u32,
};

pub const NLM_INTERNET_CONNECTIVITY = enum(i32) {
    WEBHIJACK = 1,
    PROXIED = 2,
    CORPORATE = 4,
};
pub const NLM_INTERNET_CONNECTIVITY_WEBHIJACK = NLM_INTERNET_CONNECTIVITY.WEBHIJACK;
pub const NLM_INTERNET_CONNECTIVITY_PROXIED = NLM_INTERNET_CONNECTIVITY.PROXIED;
pub const NLM_INTERNET_CONNECTIVITY_CORPORATE = NLM_INTERNET_CONNECTIVITY.CORPORATE;

pub const NLM_CONNECTIVITY = enum(i32) {
    DISCONNECTED = 0,
    IPV4_NOTRAFFIC = 1,
    IPV6_NOTRAFFIC = 2,
    IPV4_SUBNET = 16,
    IPV4_LOCALNETWORK = 32,
    IPV4_INTERNET = 64,
    IPV6_SUBNET = 256,
    IPV6_LOCALNETWORK = 512,
    IPV6_INTERNET = 1024,
};
pub const NLM_CONNECTIVITY_DISCONNECTED = NLM_CONNECTIVITY.DISCONNECTED;
pub const NLM_CONNECTIVITY_IPV4_NOTRAFFIC = NLM_CONNECTIVITY.IPV4_NOTRAFFIC;
pub const NLM_CONNECTIVITY_IPV6_NOTRAFFIC = NLM_CONNECTIVITY.IPV6_NOTRAFFIC;
pub const NLM_CONNECTIVITY_IPV4_SUBNET = NLM_CONNECTIVITY.IPV4_SUBNET;
pub const NLM_CONNECTIVITY_IPV4_LOCALNETWORK = NLM_CONNECTIVITY.IPV4_LOCALNETWORK;
pub const NLM_CONNECTIVITY_IPV4_INTERNET = NLM_CONNECTIVITY.IPV4_INTERNET;
pub const NLM_CONNECTIVITY_IPV6_SUBNET = NLM_CONNECTIVITY.IPV6_SUBNET;
pub const NLM_CONNECTIVITY_IPV6_LOCALNETWORK = NLM_CONNECTIVITY.IPV6_LOCALNETWORK;
pub const NLM_CONNECTIVITY_IPV6_INTERNET = NLM_CONNECTIVITY.IPV6_INTERNET;

pub const NLM_DOMAIN_TYPE = enum(i32) {
    NON_DOMAIN_NETWORK = 0,
    DOMAIN_NETWORK = 1,
    DOMAIN_AUTHENTICATED = 2,
};
pub const NLM_DOMAIN_TYPE_NON_DOMAIN_NETWORK = NLM_DOMAIN_TYPE.NON_DOMAIN_NETWORK;
pub const NLM_DOMAIN_TYPE_DOMAIN_NETWORK = NLM_DOMAIN_TYPE.DOMAIN_NETWORK;
pub const NLM_DOMAIN_TYPE_DOMAIN_AUTHENTICATED = NLM_DOMAIN_TYPE.DOMAIN_AUTHENTICATED;

pub const NLM_ENUM_NETWORK = enum(i32) {
    CONNECTED = 1,
    DISCONNECTED = 2,
    ALL = 3,
};
pub const NLM_ENUM_NETWORK_CONNECTED = NLM_ENUM_NETWORK.CONNECTED;
pub const NLM_ENUM_NETWORK_DISCONNECTED = NLM_ENUM_NETWORK.DISCONNECTED;
pub const NLM_ENUM_NETWORK_ALL = NLM_ENUM_NETWORK.ALL;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetworkListManager_Value = Guid.initString("dcb00000-570f-4a9b-8d69-199fdba5723b");
pub const IID_INetworkListManager = &IID_INetworkListManager_Value;
pub const INetworkListManager = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetNetworks: *const fn(
            self: *const INetworkListManager,
            Flags: NLM_ENUM_NETWORK,
            ppEnumNetwork: ?*?*IEnumNetworks,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetwork: *const fn(
            self: *const INetworkListManager,
            gdNetworkId: Guid,
            ppNetwork: ?*?*INetwork,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetworkConnections: *const fn(
            self: *const INetworkListManager,
            ppEnum: ?*?*IEnumNetworkConnections,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetworkConnection: *const fn(
            self: *const INetworkListManager,
            gdNetworkConnectionId: Guid,
            ppNetworkConnection: ?*?*INetworkConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsConnectedToInternet: *const fn(
            self: *const INetworkListManager,
            pbIsConnected: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsConnected: *const fn(
            self: *const INetworkListManager,
            pbIsConnected: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnectivity: *const fn(
            self: *const INetworkListManager,
            pConnectivity: ?*NLM_CONNECTIVITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSimulatedProfileInfo: *const fn(
            self: *const INetworkListManager,
            pSimulatedInfo: ?*NLM_SIMULATED_PROFILE_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearSimulatedProfileInfo: *const fn(
            self: *const INetworkListManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GetNetworks(self: *const INetworkListManager, Flags: NLM_ENUM_NETWORK, ppEnumNetwork: ?*?*IEnumNetworks) callconv(.Inline) HRESULT {
        return self.vtable.GetNetworks(self, Flags, ppEnumNetwork);
    }
    pub fn GetNetwork(self: *const INetworkListManager, gdNetworkId: Guid, ppNetwork: ?*?*INetwork) callconv(.Inline) HRESULT {
        return self.vtable.GetNetwork(self, gdNetworkId, ppNetwork);
    }
    pub fn GetNetworkConnections(self: *const INetworkListManager, ppEnum: ?*?*IEnumNetworkConnections) callconv(.Inline) HRESULT {
        return self.vtable.GetNetworkConnections(self, ppEnum);
    }
    pub fn GetNetworkConnection(self: *const INetworkListManager, gdNetworkConnectionId: Guid, ppNetworkConnection: ?*?*INetworkConnection) callconv(.Inline) HRESULT {
        return self.vtable.GetNetworkConnection(self, gdNetworkConnectionId, ppNetworkConnection);
    }
    pub fn get_IsConnectedToInternet(self: *const INetworkListManager, pbIsConnected: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsConnectedToInternet(self, pbIsConnected);
    }
    pub fn get_IsConnected(self: *const INetworkListManager, pbIsConnected: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsConnected(self, pbIsConnected);
    }
    pub fn GetConnectivity(self: *const INetworkListManager, pConnectivity: ?*NLM_CONNECTIVITY) callconv(.Inline) HRESULT {
        return self.vtable.GetConnectivity(self, pConnectivity);
    }
    pub fn SetSimulatedProfileInfo(self: *const INetworkListManager, pSimulatedInfo: ?*NLM_SIMULATED_PROFILE_INFO) callconv(.Inline) HRESULT {
        return self.vtable.SetSimulatedProfileInfo(self, pSimulatedInfo);
    }
    pub fn ClearSimulatedProfileInfo(self: *const INetworkListManager) callconv(.Inline) HRESULT {
        return self.vtable.ClearSimulatedProfileInfo(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetworkListManagerEvents_Value = Guid.initString("dcb00001-570f-4a9b-8d69-199fdba5723b");
pub const IID_INetworkListManagerEvents = &IID_INetworkListManagerEvents_Value;
pub const INetworkListManagerEvents = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ConnectivityChanged: *const fn(
            self: *const INetworkListManagerEvents,
            newConnectivity: NLM_CONNECTIVITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn ConnectivityChanged(self: *const INetworkListManagerEvents, newConnectivity: NLM_CONNECTIVITY) callconv(.Inline) HRESULT {
        return self.vtable.ConnectivityChanged(self, newConnectivity);
    }
};

pub const NLM_NETWORK_CATEGORY = enum(i32) {
    PUBLIC = 0,
    PRIVATE = 1,
    DOMAIN_AUTHENTICATED = 2,
};
pub const NLM_NETWORK_CATEGORY_PUBLIC = NLM_NETWORK_CATEGORY.PUBLIC;
pub const NLM_NETWORK_CATEGORY_PRIVATE = NLM_NETWORK_CATEGORY.PRIVATE;
pub const NLM_NETWORK_CATEGORY_DOMAIN_AUTHENTICATED = NLM_NETWORK_CATEGORY.DOMAIN_AUTHENTICATED;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetwork_Value = Guid.initString("dcb00002-570f-4a9b-8d69-199fdba5723b");
pub const IID_INetwork = &IID_INetwork_Value;
pub const INetwork = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetName: *const fn(
            self: *const INetwork,
            pszNetworkName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetName: *const fn(
            self: *const INetwork,
            szNetworkNewName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: *const fn(
            self: *const INetwork,
            pszDescription: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDescription: *const fn(
            self: *const INetwork,
            szDescription: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetworkId: *const fn(
            self: *const INetwork,
            pgdGuidNetworkId: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDomainType: *const fn(
            self: *const INetwork,
            pNetworkType: ?*NLM_DOMAIN_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetworkConnections: *const fn(
            self: *const INetwork,
            ppEnumNetworkConnection: ?*?*IEnumNetworkConnections,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTimeCreatedAndConnected: *const fn(
            self: *const INetwork,
            pdwLowDateTimeCreated: ?*u32,
            pdwHighDateTimeCreated: ?*u32,
            pdwLowDateTimeConnected: ?*u32,
            pdwHighDateTimeConnected: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsConnectedToInternet: *const fn(
            self: *const INetwork,
            pbIsConnected: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsConnected: *const fn(
            self: *const INetwork,
            pbIsConnected: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnectivity: *const fn(
            self: *const INetwork,
            pConnectivity: ?*NLM_CONNECTIVITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCategory: *const fn(
            self: *const INetwork,
            pCategory: ?*NLM_NETWORK_CATEGORY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCategory: *const fn(
            self: *const INetwork,
            NewCategory: NLM_NETWORK_CATEGORY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GetName(self: *const INetwork, pszNetworkName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetName(self, pszNetworkName);
    }
    pub fn SetName(self: *const INetwork, szNetworkNewName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.SetName(self, szNetworkNewName);
    }
    pub fn GetDescription(self: *const INetwork, pszDescription: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetDescription(self, pszDescription);
    }
    pub fn SetDescription(self: *const INetwork, szDescription: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.SetDescription(self, szDescription);
    }
    pub fn GetNetworkId(self: *const INetwork, pgdGuidNetworkId: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetNetworkId(self, pgdGuidNetworkId);
    }
    pub fn GetDomainType(self: *const INetwork, pNetworkType: ?*NLM_DOMAIN_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.GetDomainType(self, pNetworkType);
    }
    pub fn GetNetworkConnections(self: *const INetwork, ppEnumNetworkConnection: ?*?*IEnumNetworkConnections) callconv(.Inline) HRESULT {
        return self.vtable.GetNetworkConnections(self, ppEnumNetworkConnection);
    }
    pub fn GetTimeCreatedAndConnected(self: *const INetwork, pdwLowDateTimeCreated: ?*u32, pdwHighDateTimeCreated: ?*u32, pdwLowDateTimeConnected: ?*u32, pdwHighDateTimeConnected: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetTimeCreatedAndConnected(self, pdwLowDateTimeCreated, pdwHighDateTimeCreated, pdwLowDateTimeConnected, pdwHighDateTimeConnected);
    }
    pub fn get_IsConnectedToInternet(self: *const INetwork, pbIsConnected: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsConnectedToInternet(self, pbIsConnected);
    }
    pub fn get_IsConnected(self: *const INetwork, pbIsConnected: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsConnected(self, pbIsConnected);
    }
    pub fn GetConnectivity(self: *const INetwork, pConnectivity: ?*NLM_CONNECTIVITY) callconv(.Inline) HRESULT {
        return self.vtable.GetConnectivity(self, pConnectivity);
    }
    pub fn GetCategory(self: *const INetwork, pCategory: ?*NLM_NETWORK_CATEGORY) callconv(.Inline) HRESULT {
        return self.vtable.GetCategory(self, pCategory);
    }
    pub fn SetCategory(self: *const INetwork, NewCategory: NLM_NETWORK_CATEGORY) callconv(.Inline) HRESULT {
        return self.vtable.SetCategory(self, NewCategory);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumNetworks_Value = Guid.initString("dcb00003-570f-4a9b-8d69-199fdba5723b");
pub const IID_IEnumNetworks = &IID_IEnumNetworks_Value;
pub const IEnumNetworks = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const IEnumNetworks,
            ppEnumVar: ?*?*IEnumVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: *const fn(
            self: *const IEnumNetworks,
            celt: u32,
            rgelt: [*]?*INetwork,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumNetworks,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumNetworks,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumNetworks,
            ppEnumNetwork: ?*?*IEnumNetworks,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get__NewEnum(self: *const IEnumNetworks, ppEnumVar: ?*?*IEnumVARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, ppEnumVar);
    }
    pub fn Next(self: *const IEnumNetworks, celt: u32, rgelt: [*]?*INetwork, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, celt, rgelt, pceltFetched);
    }
    pub fn Skip(self: *const IEnumNetworks, celt: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumNetworks) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumNetworks, ppEnumNetwork: ?*?*IEnumNetworks) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppEnumNetwork);
    }
};

pub const NLM_NETWORK_PROPERTY_CHANGE = enum(i32) {
    CONNECTION = 1,
    DESCRIPTION = 2,
    NAME = 4,
    ICON = 8,
    CATEGORY_VALUE = 16,
};
pub const NLM_NETWORK_PROPERTY_CHANGE_CONNECTION = NLM_NETWORK_PROPERTY_CHANGE.CONNECTION;
pub const NLM_NETWORK_PROPERTY_CHANGE_DESCRIPTION = NLM_NETWORK_PROPERTY_CHANGE.DESCRIPTION;
pub const NLM_NETWORK_PROPERTY_CHANGE_NAME = NLM_NETWORK_PROPERTY_CHANGE.NAME;
pub const NLM_NETWORK_PROPERTY_CHANGE_ICON = NLM_NETWORK_PROPERTY_CHANGE.ICON;
pub const NLM_NETWORK_PROPERTY_CHANGE_CATEGORY_VALUE = NLM_NETWORK_PROPERTY_CHANGE.CATEGORY_VALUE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetworkEvents_Value = Guid.initString("dcb00004-570f-4a9b-8d69-199fdba5723b");
pub const IID_INetworkEvents = &IID_INetworkEvents_Value;
pub const INetworkEvents = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        NetworkAdded: *const fn(
            self: *const INetworkEvents,
            networkId: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NetworkDeleted: *const fn(
            self: *const INetworkEvents,
            networkId: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NetworkConnectivityChanged: *const fn(
            self: *const INetworkEvents,
            networkId: Guid,
            newConnectivity: NLM_CONNECTIVITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NetworkPropertyChanged: *const fn(
            self: *const INetworkEvents,
            networkId: Guid,
            flags: NLM_NETWORK_PROPERTY_CHANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn NetworkAdded(self: *const INetworkEvents, networkId: Guid) callconv(.Inline) HRESULT {
        return self.vtable.NetworkAdded(self, networkId);
    }
    pub fn NetworkDeleted(self: *const INetworkEvents, networkId: Guid) callconv(.Inline) HRESULT {
        return self.vtable.NetworkDeleted(self, networkId);
    }
    pub fn NetworkConnectivityChanged(self: *const INetworkEvents, networkId: Guid, newConnectivity: NLM_CONNECTIVITY) callconv(.Inline) HRESULT {
        return self.vtable.NetworkConnectivityChanged(self, networkId, newConnectivity);
    }
    pub fn NetworkPropertyChanged(self: *const INetworkEvents, networkId: Guid, flags: NLM_NETWORK_PROPERTY_CHANGE) callconv(.Inline) HRESULT {
        return self.vtable.NetworkPropertyChanged(self, networkId, flags);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetworkConnection_Value = Guid.initString("dcb00005-570f-4a9b-8d69-199fdba5723b");
pub const IID_INetworkConnection = &IID_INetworkConnection_Value;
pub const INetworkConnection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetNetwork: *const fn(
            self: *const INetworkConnection,
            ppNetwork: ?*?*INetwork,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsConnectedToInternet: *const fn(
            self: *const INetworkConnection,
            pbIsConnected: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsConnected: *const fn(
            self: *const INetworkConnection,
            pbIsConnected: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnectivity: *const fn(
            self: *const INetworkConnection,
            pConnectivity: ?*NLM_CONNECTIVITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnectionId: *const fn(
            self: *const INetworkConnection,
            pgdConnectionId: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAdapterId: *const fn(
            self: *const INetworkConnection,
            pgdAdapterId: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDomainType: *const fn(
            self: *const INetworkConnection,
            pDomainType: ?*NLM_DOMAIN_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GetNetwork(self: *const INetworkConnection, ppNetwork: ?*?*INetwork) callconv(.Inline) HRESULT {
        return self.vtable.GetNetwork(self, ppNetwork);
    }
    pub fn get_IsConnectedToInternet(self: *const INetworkConnection, pbIsConnected: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsConnectedToInternet(self, pbIsConnected);
    }
    pub fn get_IsConnected(self: *const INetworkConnection, pbIsConnected: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsConnected(self, pbIsConnected);
    }
    pub fn GetConnectivity(self: *const INetworkConnection, pConnectivity: ?*NLM_CONNECTIVITY) callconv(.Inline) HRESULT {
        return self.vtable.GetConnectivity(self, pConnectivity);
    }
    pub fn GetConnectionId(self: *const INetworkConnection, pgdConnectionId: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetConnectionId(self, pgdConnectionId);
    }
    pub fn GetAdapterId(self: *const INetworkConnection, pgdAdapterId: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.GetAdapterId(self, pgdAdapterId);
    }
    pub fn GetDomainType(self: *const INetworkConnection, pDomainType: ?*NLM_DOMAIN_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.GetDomainType(self, pDomainType);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumNetworkConnections_Value = Guid.initString("dcb00006-570f-4a9b-8d69-199fdba5723b");
pub const IID_IEnumNetworkConnections = &IID_IEnumNetworkConnections_Value;
pub const IEnumNetworkConnections = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const IEnumNetworkConnections,
            ppEnumVar: ?*?*IEnumVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: *const fn(
            self: *const IEnumNetworkConnections,
            celt: u32,
            rgelt: [*]?*INetworkConnection,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumNetworkConnections,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumNetworkConnections,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumNetworkConnections,
            ppEnumNetwork: ?*?*IEnumNetworkConnections,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get__NewEnum(self: *const IEnumNetworkConnections, ppEnumVar: ?*?*IEnumVARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, ppEnumVar);
    }
    pub fn Next(self: *const IEnumNetworkConnections, celt: u32, rgelt: [*]?*INetworkConnection, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, celt, rgelt, pceltFetched);
    }
    pub fn Skip(self: *const IEnumNetworkConnections, celt: u32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumNetworkConnections) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumNetworkConnections, ppEnumNetwork: ?*?*IEnumNetworkConnections) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppEnumNetwork);
    }
};

pub const NLM_CONNECTION_PROPERTY_CHANGE = enum(i32) {
    N = 1,
};
pub const NLM_CONNECTION_PROPERTY_CHANGE_AUTHENTICATION = NLM_CONNECTION_PROPERTY_CHANGE.N;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetworkConnectionEvents_Value = Guid.initString("dcb00007-570f-4a9b-8d69-199fdba5723b");
pub const IID_INetworkConnectionEvents = &IID_INetworkConnectionEvents_Value;
pub const INetworkConnectionEvents = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        NetworkConnectionConnectivityChanged: *const fn(
            self: *const INetworkConnectionEvents,
            connectionId: Guid,
            newConnectivity: NLM_CONNECTIVITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NetworkConnectionPropertyChanged: *const fn(
            self: *const INetworkConnectionEvents,
            connectionId: Guid,
            flags: NLM_CONNECTION_PROPERTY_CHANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn NetworkConnectionConnectivityChanged(self: *const INetworkConnectionEvents, connectionId: Guid, newConnectivity: NLM_CONNECTIVITY) callconv(.Inline) HRESULT {
        return self.vtable.NetworkConnectionConnectivityChanged(self, connectionId, newConnectivity);
    }
    pub fn NetworkConnectionPropertyChanged(self: *const INetworkConnectionEvents, connectionId: Guid, flags: NLM_CONNECTION_PROPERTY_CHANGE) callconv(.Inline) HRESULT {
        return self.vtable.NetworkConnectionPropertyChanged(self, connectionId, flags);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_INetworkCostManager_Value = Guid.initString("dcb00008-570f-4a9b-8d69-199fdba5723b");
pub const IID_INetworkCostManager = &IID_INetworkCostManager_Value;
pub const INetworkCostManager = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCost: *const fn(
            self: *const INetworkCostManager,
            pCost: ?*u32,
            pDestIPAddr: ?*NLM_SOCKADDR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDataPlanStatus: *const fn(
            self: *const INetworkCostManager,
            pDataPlanStatus: ?*NLM_DATAPLAN_STATUS,
            pDestIPAddr: ?*NLM_SOCKADDR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDestinationAddresses: *const fn(
            self: *const INetworkCostManager,
            length: u32,
            pDestIPAddrList: [*]NLM_SOCKADDR,
            bAppend: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetCost(self: *const INetworkCostManager, pCost: ?*u32, pDestIPAddr: ?*NLM_SOCKADDR) callconv(.Inline) HRESULT {
        return self.vtable.GetCost(self, pCost, pDestIPAddr);
    }
    pub fn GetDataPlanStatus(self: *const INetworkCostManager, pDataPlanStatus: ?*NLM_DATAPLAN_STATUS, pDestIPAddr: ?*NLM_SOCKADDR) callconv(.Inline) HRESULT {
        return self.vtable.GetDataPlanStatus(self, pDataPlanStatus, pDestIPAddr);
    }
    pub fn SetDestinationAddresses(self: *const INetworkCostManager, length: u32, pDestIPAddrList: [*]NLM_SOCKADDR, bAppend: i16) callconv(.Inline) HRESULT {
        return self.vtable.SetDestinationAddresses(self, length, pDestIPAddrList, bAppend);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_INetworkCostManagerEvents_Value = Guid.initString("dcb00009-570f-4a9b-8d69-199fdba5723b");
pub const IID_INetworkCostManagerEvents = &IID_INetworkCostManagerEvents_Value;
pub const INetworkCostManagerEvents = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CostChanged: *const fn(
            self: *const INetworkCostManagerEvents,
            newCost: u32,
            pDestAddr: ?*NLM_SOCKADDR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DataPlanStatusChanged: *const fn(
            self: *const INetworkCostManagerEvents,
            pDestAddr: ?*NLM_SOCKADDR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CostChanged(self: *const INetworkCostManagerEvents, newCost: u32, pDestAddr: ?*NLM_SOCKADDR) callconv(.Inline) HRESULT {
        return self.vtable.CostChanged(self, newCost, pDestAddr);
    }
    pub fn DataPlanStatusChanged(self: *const INetworkCostManagerEvents, pDestAddr: ?*NLM_SOCKADDR) callconv(.Inline) HRESULT {
        return self.vtable.DataPlanStatusChanged(self, pDestAddr);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_INetworkConnectionCost_Value = Guid.initString("dcb0000a-570f-4a9b-8d69-199fdba5723b");
pub const IID_INetworkConnectionCost = &IID_INetworkConnectionCost_Value;
pub const INetworkConnectionCost = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCost: *const fn(
            self: *const INetworkConnectionCost,
            pCost: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDataPlanStatus: *const fn(
            self: *const INetworkConnectionCost,
            pDataPlanStatus: ?*NLM_DATAPLAN_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetCost(self: *const INetworkConnectionCost, pCost: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetCost(self, pCost);
    }
    pub fn GetDataPlanStatus(self: *const INetworkConnectionCost, pDataPlanStatus: ?*NLM_DATAPLAN_STATUS) callconv(.Inline) HRESULT {
        return self.vtable.GetDataPlanStatus(self, pDataPlanStatus);
    }
};

// TODO: this type is limited to platform 'windows8.0'
const IID_INetworkConnectionCostEvents_Value = Guid.initString("dcb0000b-570f-4a9b-8d69-199fdba5723b");
pub const IID_INetworkConnectionCostEvents = &IID_INetworkConnectionCostEvents_Value;
pub const INetworkConnectionCostEvents = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ConnectionCostChanged: *const fn(
            self: *const INetworkConnectionCostEvents,
            connectionId: Guid,
            newCost: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConnectionDataPlanStatusChanged: *const fn(
            self: *const INetworkConnectionCostEvents,
            connectionId: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn ConnectionCostChanged(self: *const INetworkConnectionCostEvents, connectionId: Guid, newCost: u32) callconv(.Inline) HRESULT {
        return self.vtable.ConnectionCostChanged(self, connectionId, newCost);
    }
    pub fn ConnectionDataPlanStatusChanged(self: *const INetworkConnectionCostEvents, connectionId: Guid) callconv(.Inline) HRESULT {
        return self.vtable.ConnectionDataPlanStatusChanged(self, connectionId);
    }
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (7)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BSTR = @import("../foundation.zig").BSTR;
const FILETIME = @import("../foundation.zig").FILETIME;
const HRESULT = @import("../foundation.zig").HRESULT;
const IDispatch = @import("../system/com.zig").IDispatch;
const IEnumVARIANT = @import("../system/ole.zig").IEnumVARIANT;
const IUnknown = @import("../system/com.zig").IUnknown;

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
