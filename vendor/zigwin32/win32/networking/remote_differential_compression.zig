//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (24)
//--------------------------------------------------------------------------------
pub const RDCE_TABLE_FULL = @as(u32, 2147745793);
pub const RDCE_TABLE_CORRUPT = @as(u32, 2147745794);
pub const MSRDC_SIGNATURE_HASHSIZE = @as(u32, 16);
pub const SimilarityFileIdMinSize = @as(u32, 4);
pub const SimilarityFileIdMaxSize = @as(u32, 32);
pub const MSRDC_VERSION = @as(u32, 65536);
pub const MSRDC_MINIMUM_COMPATIBLE_APP_VERSION = @as(u32, 65536);
pub const MSRDC_MINIMUM_DEPTH = @as(u32, 1);
pub const MSRDC_MAXIMUM_DEPTH = @as(u32, 8);
pub const MSRDC_MINIMUM_COMPAREBUFFER = @as(u32, 100000);
pub const MSRDC_MAXIMUM_COMPAREBUFFER = @as(u32, 1073741824);
pub const MSRDC_DEFAULT_COMPAREBUFFER = @as(u32, 3200000);
pub const MSRDC_MINIMUM_INPUTBUFFERSIZE = @as(u32, 1024);
pub const MSRDC_MINIMUM_HORIZONSIZE = @as(u32, 128);
pub const MSRDC_MAXIMUM_HORIZONSIZE = @as(u32, 16384);
pub const MSRDC_MINIMUM_HASHWINDOWSIZE = @as(u32, 2);
pub const MSRDC_MAXIMUM_HASHWINDOWSIZE = @as(u32, 96);
pub const MSRDC_DEFAULT_HASHWINDOWSIZE_1 = @as(u32, 48);
pub const MSRDC_DEFAULT_HORIZONSIZE_1 = @as(u32, 1024);
pub const MSRDC_DEFAULT_HASHWINDOWSIZE_N = @as(u32, 2);
pub const MSRDC_DEFAULT_HORIZONSIZE_N = @as(u32, 128);
pub const MSRDC_MAXIMUM_TRAITVALUE = @as(u32, 63);
pub const MSRDC_MINIMUM_MATCHESREQUIRED = @as(u32, 1);
pub const MSRDC_MAXIMUM_MATCHESREQUIRED = @as(u32, 16);

//--------------------------------------------------------------------------------
// Section: Types (48)
//--------------------------------------------------------------------------------
const CLSID_RdcLibrary_Value = Guid.initString("96236a85-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_RdcLibrary = &CLSID_RdcLibrary_Value;

const CLSID_RdcGeneratorParameters_Value = Guid.initString("96236a86-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_RdcGeneratorParameters = &CLSID_RdcGeneratorParameters_Value;

const CLSID_RdcGeneratorFilterMaxParameters_Value = Guid.initString("96236a87-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_RdcGeneratorFilterMaxParameters = &CLSID_RdcGeneratorFilterMaxParameters_Value;

const CLSID_RdcGenerator_Value = Guid.initString("96236a88-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_RdcGenerator = &CLSID_RdcGenerator_Value;

const CLSID_RdcFileReader_Value = Guid.initString("96236a89-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_RdcFileReader = &CLSID_RdcFileReader_Value;

const CLSID_RdcSignatureReader_Value = Guid.initString("96236a8a-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_RdcSignatureReader = &CLSID_RdcSignatureReader_Value;

const CLSID_RdcComparator_Value = Guid.initString("96236a8b-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_RdcComparator = &CLSID_RdcComparator_Value;

const CLSID_SimilarityReportProgress_Value = Guid.initString("96236a8d-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_SimilarityReportProgress = &CLSID_SimilarityReportProgress_Value;

const CLSID_SimilarityTableDumpState_Value = Guid.initString("96236a8e-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_SimilarityTableDumpState = &CLSID_SimilarityTableDumpState_Value;

const CLSID_SimilarityTraitsTable_Value = Guid.initString("96236a8f-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_SimilarityTraitsTable = &CLSID_SimilarityTraitsTable_Value;

const CLSID_SimilarityFileIdTable_Value = Guid.initString("96236a90-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_SimilarityFileIdTable = &CLSID_SimilarityFileIdTable_Value;

const CLSID_Similarity_Value = Guid.initString("96236a91-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_Similarity = &CLSID_Similarity_Value;

const CLSID_RdcSimilarityGenerator_Value = Guid.initString("96236a92-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_RdcSimilarityGenerator = &CLSID_RdcSimilarityGenerator_Value;

const CLSID_FindSimilarResults_Value = Guid.initString("96236a93-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_FindSimilarResults = &CLSID_FindSimilarResults_Value;

const CLSID_SimilarityTraitsMapping_Value = Guid.initString("96236a94-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_SimilarityTraitsMapping = &CLSID_SimilarityTraitsMapping_Value;

const CLSID_SimilarityTraitsMappedView_Value = Guid.initString("96236a95-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_SimilarityTraitsMappedView = &CLSID_SimilarityTraitsMappedView_Value;

pub const RDC_ErrorCode = enum(i32) {
    NoError = 0,
    HeaderVersionNewer = 1,
    HeaderVersionOlder = 2,
    HeaderMissingOrCorrupt = 3,
    HeaderWrongType = 4,
    DataMissingOrCorrupt = 5,
    DataTooManyRecords = 6,
    FileChecksumMismatch = 7,
    ApplicationError = 8,
    Aborted = 9,
    Win32Error = 10,
};
pub const RDC_NoError = RDC_ErrorCode.NoError;
pub const RDC_HeaderVersionNewer = RDC_ErrorCode.HeaderVersionNewer;
pub const RDC_HeaderVersionOlder = RDC_ErrorCode.HeaderVersionOlder;
pub const RDC_HeaderMissingOrCorrupt = RDC_ErrorCode.HeaderMissingOrCorrupt;
pub const RDC_HeaderWrongType = RDC_ErrorCode.HeaderWrongType;
pub const RDC_DataMissingOrCorrupt = RDC_ErrorCode.DataMissingOrCorrupt;
pub const RDC_DataTooManyRecords = RDC_ErrorCode.DataTooManyRecords;
pub const RDC_FileChecksumMismatch = RDC_ErrorCode.FileChecksumMismatch;
pub const RDC_ApplicationError = RDC_ErrorCode.ApplicationError;
pub const RDC_Aborted = RDC_ErrorCode.Aborted;
pub const RDC_Win32Error = RDC_ErrorCode.Win32Error;

pub const GeneratorParametersType = enum(i32) {
    Unused = 0,
    FilterMax = 1,
};
pub const RDCGENTYPE_Unused = GeneratorParametersType.Unused;
pub const RDCGENTYPE_FilterMax = GeneratorParametersType.FilterMax;

pub const RdcNeedType = enum(i32) {
    SOURCE = 0,
    TARGET = 1,
    SEED = 2,
    SEED_MAX = 255,
};
pub const RDCNEED_SOURCE = RdcNeedType.SOURCE;
pub const RDCNEED_TARGET = RdcNeedType.TARGET;
pub const RDCNEED_SEED = RdcNeedType.SEED;
pub const RDCNEED_SEED_MAX = RdcNeedType.SEED_MAX;

pub const RdcNeed = extern struct {
    m_BlockType: RdcNeedType,
    m_FileOffset: u64,
    m_BlockLength: u64,
};

pub const RdcBufferPointer = extern struct {
    m_Size: u32,
    m_Used: u32,
    m_Data: ?*u8,
};

pub const RdcNeedPointer = extern struct {
    m_Size: u32,
    m_Used: u32,
    m_Data: ?*RdcNeed,
};

pub const RdcSignature = extern struct {
    m_Signature: [16]u8,
    m_BlockLength: u16,
};

pub const RdcSignaturePointer = extern struct {
    m_Size: u32,
    m_Used: u32,
    m_Data: ?*RdcSignature,
};

pub const RdcCreatedTables = enum(i32) {
    InvalidOrUnknown = 0,
    Existing = 1,
    New = 2,
};
pub const RDCTABLE_InvalidOrUnknown = RdcCreatedTables.InvalidOrUnknown;
pub const RDCTABLE_Existing = RdcCreatedTables.Existing;
pub const RDCTABLE_New = RdcCreatedTables.New;

pub const RdcMappingAccessMode = enum(i32) {
    Undefined = 0,
    ReadOnly = 1,
    ReadWrite = 2,
};
pub const RDCMAPPING_Undefined = RdcMappingAccessMode.Undefined;
pub const RDCMAPPING_ReadOnly = RdcMappingAccessMode.ReadOnly;
pub const RDCMAPPING_ReadWrite = RdcMappingAccessMode.ReadWrite;

pub const SimilarityMappedViewInfo = extern struct {
    m_Data: ?*u8,
    m_Length: u32,
};

pub const SimilarityData = extern struct {
    m_Data: [16]u8,
};

pub const FindSimilarFileIndexResults = extern struct {
    m_FileIndex: u32,
    m_MatchCount: u32,
};

pub const SimilarityDumpData = extern struct {
    m_FileIndex: u32,
    m_Data: SimilarityData,
};

pub const SimilarityFileId = extern struct {
    m_FileId: [32]u8,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRdcGeneratorParameters_Value = Guid.initString("96236a71-9dbc-11da-9e3f-0011114ae311");
pub const IID_IRdcGeneratorParameters = &IID_IRdcGeneratorParameters_Value;
pub const IRdcGeneratorParameters = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetGeneratorParametersType: *const fn(
            self: *const IRdcGeneratorParameters,
            parametersType: ?*GeneratorParametersType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParametersVersion: *const fn(
            self: *const IRdcGeneratorParameters,
            currentVersion: ?*u32,
            minimumCompatibleAppVersion: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSerializeSize: *const fn(
            self: *const IRdcGeneratorParameters,
            size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Serialize: *const fn(
            self: *const IRdcGeneratorParameters,
            size: u32,
            parametersBlob: ?*u8,
            bytesWritten: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetGeneratorParametersType(self: *const IRdcGeneratorParameters, parametersType: ?*GeneratorParametersType) callconv(.Inline) HRESULT {
        return self.vtable.GetGeneratorParametersType(self, parametersType);
    }
    pub fn GetParametersVersion(self: *const IRdcGeneratorParameters, currentVersion: ?*u32, minimumCompatibleAppVersion: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetParametersVersion(self, currentVersion, minimumCompatibleAppVersion);
    }
    pub fn GetSerializeSize(self: *const IRdcGeneratorParameters, size: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetSerializeSize(self, size);
    }
    pub fn Serialize(self: *const IRdcGeneratorParameters, size: u32, parametersBlob: ?*u8, bytesWritten: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Serialize(self, size, parametersBlob, bytesWritten);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRdcGeneratorFilterMaxParameters_Value = Guid.initString("96236a72-9dbc-11da-9e3f-0011114ae311");
pub const IID_IRdcGeneratorFilterMaxParameters = &IID_IRdcGeneratorFilterMaxParameters_Value;
pub const IRdcGeneratorFilterMaxParameters = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetHorizonSize: *const fn(
            self: *const IRdcGeneratorFilterMaxParameters,
            horizonSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHorizonSize: *const fn(
            self: *const IRdcGeneratorFilterMaxParameters,
            horizonSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHashWindowSize: *const fn(
            self: *const IRdcGeneratorFilterMaxParameters,
            hashWindowSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHashWindowSize: *const fn(
            self: *const IRdcGeneratorFilterMaxParameters,
            hashWindowSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetHorizonSize(self: *const IRdcGeneratorFilterMaxParameters, horizonSize: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetHorizonSize(self, horizonSize);
    }
    pub fn SetHorizonSize(self: *const IRdcGeneratorFilterMaxParameters, horizonSize: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetHorizonSize(self, horizonSize);
    }
    pub fn GetHashWindowSize(self: *const IRdcGeneratorFilterMaxParameters, hashWindowSize: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetHashWindowSize(self, hashWindowSize);
    }
    pub fn SetHashWindowSize(self: *const IRdcGeneratorFilterMaxParameters, hashWindowSize: u32) callconv(.Inline) HRESULT {
        return self.vtable.SetHashWindowSize(self, hashWindowSize);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRdcGenerator_Value = Guid.initString("96236a73-9dbc-11da-9e3f-0011114ae311");
pub const IID_IRdcGenerator = &IID_IRdcGenerator_Value;
pub const IRdcGenerator = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetGeneratorParameters: *const fn(
            self: *const IRdcGenerator,
            level: u32,
            iGeneratorParameters: ?*?*IRdcGeneratorParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Process: *const fn(
            self: *const IRdcGenerator,
            endOfInput: BOOL,
            endOfOutput: ?*BOOL,
            inputBuffer: ?*RdcBufferPointer,
            depth: u32,
            outputBuffers: [*]?*RdcBufferPointer,
            rdc_ErrorCode: ?*RDC_ErrorCode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetGeneratorParameters(self: *const IRdcGenerator, level: u32, iGeneratorParameters: ?*?*IRdcGeneratorParameters) callconv(.Inline) HRESULT {
        return self.vtable.GetGeneratorParameters(self, level, iGeneratorParameters);
    }
    pub fn Process(self: *const IRdcGenerator, endOfInput: BOOL, endOfOutput: ?*BOOL, inputBuffer: ?*RdcBufferPointer, depth: u32, outputBuffers: [*]?*RdcBufferPointer, rdc_ErrorCode: ?*RDC_ErrorCode) callconv(.Inline) HRESULT {
        return self.vtable.Process(self, endOfInput, endOfOutput, inputBuffer, depth, outputBuffers, rdc_ErrorCode);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRdcFileReader_Value = Guid.initString("96236a74-9dbc-11da-9e3f-0011114ae311");
pub const IID_IRdcFileReader = &IID_IRdcFileReader_Value;
pub const IRdcFileReader = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFileSize: *const fn(
            self: *const IRdcFileReader,
            fileSize: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Read: *const fn(
            self: *const IRdcFileReader,
            offsetFileStart: u64,
            bytesToRead: u32,
            bytesActuallyRead: ?*u32,
            buffer: ?*u8,
            eof: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilePosition: *const fn(
            self: *const IRdcFileReader,
            offsetFromStart: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetFileSize(self: *const IRdcFileReader, fileSize: ?*u64) callconv(.Inline) HRESULT {
        return self.vtable.GetFileSize(self, fileSize);
    }
    pub fn Read(self: *const IRdcFileReader, offsetFileStart: u64, bytesToRead: u32, bytesActuallyRead: ?*u32, buffer: ?*u8, eof: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.Read(self, offsetFileStart, bytesToRead, bytesActuallyRead, buffer, eof);
    }
    pub fn GetFilePosition(self: *const IRdcFileReader, offsetFromStart: ?*u64) callconv(.Inline) HRESULT {
        return self.vtable.GetFilePosition(self, offsetFromStart);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRdcFileWriter_Value = Guid.initString("96236a75-9dbc-11da-9e3f-0011114ae311");
pub const IID_IRdcFileWriter = &IID_IRdcFileWriter_Value;
pub const IRdcFileWriter = extern union {
    pub const VTable = extern struct {
        base: IRdcFileReader.VTable,
        Write: *const fn(
            self: *const IRdcFileWriter,
            offsetFileStart: u64,
            bytesToWrite: u32,
            buffer: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Truncate: *const fn(
            self: *const IRdcFileWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteOnClose: *const fn(
            self: *const IRdcFileWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IRdcFileReader: IRdcFileReader,
    IUnknown: IUnknown,
    pub fn Write(self: *const IRdcFileWriter, offsetFileStart: u64, bytesToWrite: u32, buffer: ?*u8) callconv(.Inline) HRESULT {
        return self.vtable.Write(self, offsetFileStart, bytesToWrite, buffer);
    }
    pub fn Truncate(self: *const IRdcFileWriter) callconv(.Inline) HRESULT {
        return self.vtable.Truncate(self);
    }
    pub fn DeleteOnClose(self: *const IRdcFileWriter) callconv(.Inline) HRESULT {
        return self.vtable.DeleteOnClose(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRdcSignatureReader_Value = Guid.initString("96236a76-9dbc-11da-9e3f-0011114ae311");
pub const IID_IRdcSignatureReader = &IID_IRdcSignatureReader_Value;
pub const IRdcSignatureReader = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ReadHeader: *const fn(
            self: *const IRdcSignatureReader,
            rdc_ErrorCode: ?*RDC_ErrorCode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadSignatures: *const fn(
            self: *const IRdcSignatureReader,
            rdcSignaturePointer: ?*RdcSignaturePointer,
            endOfOutput: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn ReadHeader(self: *const IRdcSignatureReader, rdc_ErrorCode: ?*RDC_ErrorCode) callconv(.Inline) HRESULT {
        return self.vtable.ReadHeader(self, rdc_ErrorCode);
    }
    pub fn ReadSignatures(self: *const IRdcSignatureReader, rdcSignaturePointer: ?*RdcSignaturePointer, endOfOutput: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.ReadSignatures(self, rdcSignaturePointer, endOfOutput);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRdcComparator_Value = Guid.initString("96236a77-9dbc-11da-9e3f-0011114ae311");
pub const IID_IRdcComparator = &IID_IRdcComparator_Value;
pub const IRdcComparator = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Process: *const fn(
            self: *const IRdcComparator,
            endOfInput: BOOL,
            endOfOutput: ?*BOOL,
            inputBuffer: ?*RdcBufferPointer,
            outputBuffer: ?*RdcNeedPointer,
            rdc_ErrorCode: ?*RDC_ErrorCode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Process(self: *const IRdcComparator, endOfInput: BOOL, endOfOutput: ?*BOOL, inputBuffer: ?*RdcBufferPointer, outputBuffer: ?*RdcNeedPointer, rdc_ErrorCode: ?*RDC_ErrorCode) callconv(.Inline) HRESULT {
        return self.vtable.Process(self, endOfInput, endOfOutput, inputBuffer, outputBuffer, rdc_ErrorCode);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRdcLibrary_Value = Guid.initString("96236a78-9dbc-11da-9e3f-0011114ae311");
pub const IID_IRdcLibrary = &IID_IRdcLibrary_Value;
pub const IRdcLibrary = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ComputeDefaultRecursionDepth: *const fn(
            self: *const IRdcLibrary,
            fileSize: u64,
            depth: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGeneratorParameters: *const fn(
            self: *const IRdcLibrary,
            parametersType: GeneratorParametersType,
            level: u32,
            iGeneratorParameters: ?*?*IRdcGeneratorParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenGeneratorParameters: *const fn(
            self: *const IRdcLibrary,
            size: u32,
            parametersBlob: ?*const u8,
            iGeneratorParameters: ?*?*IRdcGeneratorParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGenerator: *const fn(
            self: *const IRdcLibrary,
            depth: u32,
            iGeneratorParametersArray: [*]?*IRdcGeneratorParameters,
            iGenerator: ?*?*IRdcGenerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateComparator: *const fn(
            self: *const IRdcLibrary,
            iSeedSignaturesFile: ?*IRdcFileReader,
            comparatorBufferSize: u32,
            iComparator: ?*?*IRdcComparator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSignatureReader: *const fn(
            self: *const IRdcLibrary,
            iFileReader: ?*IRdcFileReader,
            iSignatureReader: ?*?*IRdcSignatureReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRDCVersion: *const fn(
            self: *const IRdcLibrary,
            currentVersion: ?*u32,
            minimumCompatibleAppVersion: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn ComputeDefaultRecursionDepth(self: *const IRdcLibrary, fileSize: u64, depth: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.ComputeDefaultRecursionDepth(self, fileSize, depth);
    }
    pub fn CreateGeneratorParameters(self: *const IRdcLibrary, parametersType: GeneratorParametersType, level: u32, iGeneratorParameters: ?*?*IRdcGeneratorParameters) callconv(.Inline) HRESULT {
        return self.vtable.CreateGeneratorParameters(self, parametersType, level, iGeneratorParameters);
    }
    pub fn OpenGeneratorParameters(self: *const IRdcLibrary, size: u32, parametersBlob: ?*const u8, iGeneratorParameters: ?*?*IRdcGeneratorParameters) callconv(.Inline) HRESULT {
        return self.vtable.OpenGeneratorParameters(self, size, parametersBlob, iGeneratorParameters);
    }
    pub fn CreateGenerator(self: *const IRdcLibrary, depth: u32, iGeneratorParametersArray: [*]?*IRdcGeneratorParameters, iGenerator: ?*?*IRdcGenerator) callconv(.Inline) HRESULT {
        return self.vtable.CreateGenerator(self, depth, iGeneratorParametersArray, iGenerator);
    }
    pub fn CreateComparator(self: *const IRdcLibrary, iSeedSignaturesFile: ?*IRdcFileReader, comparatorBufferSize: u32, iComparator: ?*?*IRdcComparator) callconv(.Inline) HRESULT {
        return self.vtable.CreateComparator(self, iSeedSignaturesFile, comparatorBufferSize, iComparator);
    }
    pub fn CreateSignatureReader(self: *const IRdcLibrary, iFileReader: ?*IRdcFileReader, iSignatureReader: ?*?*IRdcSignatureReader) callconv(.Inline) HRESULT {
        return self.vtable.CreateSignatureReader(self, iFileReader, iSignatureReader);
    }
    pub fn GetRDCVersion(self: *const IRdcLibrary, currentVersion: ?*u32, minimumCompatibleAppVersion: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetRDCVersion(self, currentVersion, minimumCompatibleAppVersion);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISimilarityReportProgress_Value = Guid.initString("96236a7a-9dbc-11da-9e3f-0011114ae311");
pub const IID_ISimilarityReportProgress = &IID_ISimilarityReportProgress_Value;
pub const ISimilarityReportProgress = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ReportProgress: *const fn(
            self: *const ISimilarityReportProgress,
            percentCompleted: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn ReportProgress(self: *const ISimilarityReportProgress, percentCompleted: u32) callconv(.Inline) HRESULT {
        return self.vtable.ReportProgress(self, percentCompleted);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISimilarityTableDumpState_Value = Guid.initString("96236a7b-9dbc-11da-9e3f-0011114ae311");
pub const IID_ISimilarityTableDumpState = &IID_ISimilarityTableDumpState_Value;
pub const ISimilarityTableDumpState = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNextData: *const fn(
            self: *const ISimilarityTableDumpState,
            resultsSize: u32,
            resultsUsed: ?*u32,
            eof: ?*BOOL,
            results: ?*SimilarityDumpData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetNextData(self: *const ISimilarityTableDumpState, resultsSize: u32, resultsUsed: ?*u32, eof: ?*BOOL, results: ?*SimilarityDumpData) callconv(.Inline) HRESULT {
        return self.vtable.GetNextData(self, resultsSize, resultsUsed, eof, results);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISimilarityTraitsMappedView_Value = Guid.initString("96236a7c-9dbc-11da-9e3f-0011114ae311");
pub const IID_ISimilarityTraitsMappedView = &IID_ISimilarityTraitsMappedView_Value;
pub const ISimilarityTraitsMappedView = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Flush: *const fn(
            self: *const ISimilarityTraitsMappedView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unmap: *const fn(
            self: *const ISimilarityTraitsMappedView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Get: *const fn(
            self: *const ISimilarityTraitsMappedView,
            index: u64,
            dirty: BOOL,
            numElements: u32,
            viewInfo: ?*SimilarityMappedViewInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetView: *const fn(
            self: *const ISimilarityTraitsMappedView,
            mappedPageBegin: ?*const ?*u8,
            mappedPageEnd: ?*const ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Flush(self: *const ISimilarityTraitsMappedView) callconv(.Inline) HRESULT {
        return self.vtable.Flush(self);
    }
    pub fn Unmap(self: *const ISimilarityTraitsMappedView) callconv(.Inline) HRESULT {
        return self.vtable.Unmap(self);
    }
    pub fn Get(self: *const ISimilarityTraitsMappedView, index: u64, dirty: BOOL, numElements: u32, viewInfo: ?*SimilarityMappedViewInfo) callconv(.Inline) HRESULT {
        return self.vtable.Get(self, index, dirty, numElements, viewInfo);
    }
    pub fn GetView(self: *const ISimilarityTraitsMappedView, mappedPageBegin: ?*const ?*u8, mappedPageEnd: ?*const ?*u8) callconv(.Inline) void {
        return self.vtable.GetView(self, mappedPageBegin, mappedPageEnd);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISimilarityTraitsMapping_Value = Guid.initString("96236a7d-9dbc-11da-9e3f-0011114ae311");
pub const IID_ISimilarityTraitsMapping = &IID_ISimilarityTraitsMapping_Value;
pub const ISimilarityTraitsMapping = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CloseMapping: *const fn(
            self: *const ISimilarityTraitsMapping,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetFileSize: *const fn(
            self: *const ISimilarityTraitsMapping,
            fileSize: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileSize: *const fn(
            self: *const ISimilarityTraitsMapping,
            fileSize: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenMapping: *const fn(
            self: *const ISimilarityTraitsMapping,
            accessMode: RdcMappingAccessMode,
            begin: u64,
            end: u64,
            actualEnd: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResizeMapping: *const fn(
            self: *const ISimilarityTraitsMapping,
            accessMode: RdcMappingAccessMode,
            begin: u64,
            end: u64,
            actualEnd: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPageSize: *const fn(
            self: *const ISimilarityTraitsMapping,
            pageSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CreateView: *const fn(
            self: *const ISimilarityTraitsMapping,
            minimumMappedPages: u32,
            accessMode: RdcMappingAccessMode,
            mappedView: ?*?*ISimilarityTraitsMappedView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CloseMapping(self: *const ISimilarityTraitsMapping) callconv(.Inline) void {
        return self.vtable.CloseMapping(self);
    }
    pub fn SetFileSize(self: *const ISimilarityTraitsMapping, fileSize: u64) callconv(.Inline) HRESULT {
        return self.vtable.SetFileSize(self, fileSize);
    }
    pub fn GetFileSize(self: *const ISimilarityTraitsMapping, fileSize: ?*u64) callconv(.Inline) HRESULT {
        return self.vtable.GetFileSize(self, fileSize);
    }
    pub fn OpenMapping(self: *const ISimilarityTraitsMapping, accessMode: RdcMappingAccessMode, begin: u64, end: u64, actualEnd: ?*u64) callconv(.Inline) HRESULT {
        return self.vtable.OpenMapping(self, accessMode, begin, end, actualEnd);
    }
    pub fn ResizeMapping(self: *const ISimilarityTraitsMapping, accessMode: RdcMappingAccessMode, begin: u64, end: u64, actualEnd: ?*u64) callconv(.Inline) HRESULT {
        return self.vtable.ResizeMapping(self, accessMode, begin, end, actualEnd);
    }
    pub fn GetPageSize(self: *const ISimilarityTraitsMapping, pageSize: ?*u32) callconv(.Inline) void {
        return self.vtable.GetPageSize(self, pageSize);
    }
    pub fn CreateView(self: *const ISimilarityTraitsMapping, minimumMappedPages: u32, accessMode: RdcMappingAccessMode, mappedView: ?*?*ISimilarityTraitsMappedView) callconv(.Inline) HRESULT {
        return self.vtable.CreateView(self, minimumMappedPages, accessMode, mappedView);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISimilarityTraitsTable_Value = Guid.initString("96236a7e-9dbc-11da-9e3f-0011114ae311");
pub const IID_ISimilarityTraitsTable = &IID_ISimilarityTraitsTable_Value;
pub const ISimilarityTraitsTable = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateTable: *const fn(
            self: *const ISimilarityTraitsTable,
            path: ?PWSTR,
            truncate: BOOL,
            securityDescriptor: ?*u8,
            isNew: ?*RdcCreatedTables,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTableIndirect: *const fn(
            self: *const ISimilarityTraitsTable,
            mapping: ?*ISimilarityTraitsMapping,
            truncate: BOOL,
            isNew: ?*RdcCreatedTables,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloseTable: *const fn(
            self: *const ISimilarityTraitsTable,
            isValid: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: *const fn(
            self: *const ISimilarityTraitsTable,
            data: ?*SimilarityData,
            fileIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindSimilarFileIndex: *const fn(
            self: *const ISimilarityTraitsTable,
            similarityData: ?*SimilarityData,
            numberOfMatchesRequired: u16,
            findSimilarFileIndexResults: ?*FindSimilarFileIndexResults,
            resultsSize: u32,
            resultsUsed: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginDump: *const fn(
            self: *const ISimilarityTraitsTable,
            similarityTableDumpState: ?*?*ISimilarityTableDumpState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastIndex: *const fn(
            self: *const ISimilarityTraitsTable,
            fileIndex: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateTable(self: *const ISimilarityTraitsTable, path: ?PWSTR, truncate: BOOL, securityDescriptor: ?*u8, isNew: ?*RdcCreatedTables) callconv(.Inline) HRESULT {
        return self.vtable.CreateTable(self, path, truncate, securityDescriptor, isNew);
    }
    pub fn CreateTableIndirect(self: *const ISimilarityTraitsTable, mapping: ?*ISimilarityTraitsMapping, truncate: BOOL, isNew: ?*RdcCreatedTables) callconv(.Inline) HRESULT {
        return self.vtable.CreateTableIndirect(self, mapping, truncate, isNew);
    }
    pub fn CloseTable(self: *const ISimilarityTraitsTable, isValid: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.CloseTable(self, isValid);
    }
    pub fn Append(self: *const ISimilarityTraitsTable, data: ?*SimilarityData, fileIndex: u32) callconv(.Inline) HRESULT {
        return self.vtable.Append(self, data, fileIndex);
    }
    pub fn FindSimilarFileIndex(self: *const ISimilarityTraitsTable, similarityData: ?*SimilarityData, numberOfMatchesRequired: u16, findSimilarFileIndexResults: ?*FindSimilarFileIndexResults, resultsSize: u32, resultsUsed: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.FindSimilarFileIndex(self, similarityData, numberOfMatchesRequired, findSimilarFileIndexResults, resultsSize, resultsUsed);
    }
    pub fn BeginDump(self: *const ISimilarityTraitsTable, similarityTableDumpState: ?*?*ISimilarityTableDumpState) callconv(.Inline) HRESULT {
        return self.vtable.BeginDump(self, similarityTableDumpState);
    }
    pub fn GetLastIndex(self: *const ISimilarityTraitsTable, fileIndex: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetLastIndex(self, fileIndex);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISimilarityFileIdTable_Value = Guid.initString("96236a7f-9dbc-11da-9e3f-0011114ae311");
pub const IID_ISimilarityFileIdTable = &IID_ISimilarityFileIdTable_Value;
pub const ISimilarityFileIdTable = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateTable: *const fn(
            self: *const ISimilarityFileIdTable,
            path: ?PWSTR,
            truncate: BOOL,
            securityDescriptor: ?*u8,
            recordSize: u32,
            isNew: ?*RdcCreatedTables,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTableIndirect: *const fn(
            self: *const ISimilarityFileIdTable,
            fileIdFile: ?*IRdcFileWriter,
            truncate: BOOL,
            recordSize: u32,
            isNew: ?*RdcCreatedTables,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloseTable: *const fn(
            self: *const ISimilarityFileIdTable,
            isValid: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: *const fn(
            self: *const ISimilarityFileIdTable,
            similarityFileId: ?*SimilarityFileId,
            similarityFileIndex: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Lookup: *const fn(
            self: *const ISimilarityFileIdTable,
            similarityFileIndex: u32,
            similarityFileId: ?*SimilarityFileId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Invalidate: *const fn(
            self: *const ISimilarityFileIdTable,
            similarityFileIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRecordCount: *const fn(
            self: *const ISimilarityFileIdTable,
            recordCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateTable(self: *const ISimilarityFileIdTable, path: ?PWSTR, truncate: BOOL, securityDescriptor: ?*u8, recordSize: u32, isNew: ?*RdcCreatedTables) callconv(.Inline) HRESULT {
        return self.vtable.CreateTable(self, path, truncate, securityDescriptor, recordSize, isNew);
    }
    pub fn CreateTableIndirect(self: *const ISimilarityFileIdTable, fileIdFile: ?*IRdcFileWriter, truncate: BOOL, recordSize: u32, isNew: ?*RdcCreatedTables) callconv(.Inline) HRESULT {
        return self.vtable.CreateTableIndirect(self, fileIdFile, truncate, recordSize, isNew);
    }
    pub fn CloseTable(self: *const ISimilarityFileIdTable, isValid: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.CloseTable(self, isValid);
    }
    pub fn Append(self: *const ISimilarityFileIdTable, similarityFileId: ?*SimilarityFileId, similarityFileIndex: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.Append(self, similarityFileId, similarityFileIndex);
    }
    pub fn Lookup(self: *const ISimilarityFileIdTable, similarityFileIndex: u32, similarityFileId: ?*SimilarityFileId) callconv(.Inline) HRESULT {
        return self.vtable.Lookup(self, similarityFileIndex, similarityFileId);
    }
    pub fn Invalidate(self: *const ISimilarityFileIdTable, similarityFileIndex: u32) callconv(.Inline) HRESULT {
        return self.vtable.Invalidate(self, similarityFileIndex);
    }
    pub fn GetRecordCount(self: *const ISimilarityFileIdTable, recordCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetRecordCount(self, recordCount);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRdcSimilarityGenerator_Value = Guid.initString("96236a80-9dbc-11da-9e3f-0011114ae311");
pub const IID_IRdcSimilarityGenerator = &IID_IRdcSimilarityGenerator_Value;
pub const IRdcSimilarityGenerator = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnableSimilarity: *const fn(
            self: *const IRdcSimilarityGenerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Results: *const fn(
            self: *const IRdcSimilarityGenerator,
            similarityData: ?*SimilarityData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn EnableSimilarity(self: *const IRdcSimilarityGenerator) callconv(.Inline) HRESULT {
        return self.vtable.EnableSimilarity(self);
    }
    pub fn Results(self: *const IRdcSimilarityGenerator, similarityData: ?*SimilarityData) callconv(.Inline) HRESULT {
        return self.vtable.Results(self, similarityData);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFindSimilarResults_Value = Guid.initString("96236a81-9dbc-11da-9e3f-0011114ae311");
pub const IID_IFindSimilarResults = &IID_IFindSimilarResults_Value;
pub const IFindSimilarResults = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSize: *const fn(
            self: *const IFindSimilarResults,
            size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextFileId: *const fn(
            self: *const IFindSimilarResults,
            numTraitsMatched: ?*u32,
            similarityFileId: ?*SimilarityFileId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn GetSize(self: *const IFindSimilarResults, size: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetSize(self, size);
    }
    pub fn GetNextFileId(self: *const IFindSimilarResults, numTraitsMatched: ?*u32, similarityFileId: ?*SimilarityFileId) callconv(.Inline) HRESULT {
        return self.vtable.GetNextFileId(self, numTraitsMatched, similarityFileId);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISimilarity_Value = Guid.initString("96236a83-9dbc-11da-9e3f-0011114ae311");
pub const IID_ISimilarity = &IID_ISimilarity_Value;
pub const ISimilarity = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateTable: *const fn(
            self: *const ISimilarity,
            path: ?PWSTR,
            truncate: BOOL,
            securityDescriptor: ?*u8,
            recordSize: u32,
            isNew: ?*RdcCreatedTables,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTableIndirect: *const fn(
            self: *const ISimilarity,
            mapping: ?*ISimilarityTraitsMapping,
            fileIdFile: ?*IRdcFileWriter,
            truncate: BOOL,
            recordSize: u32,
            isNew: ?*RdcCreatedTables,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloseTable: *const fn(
            self: *const ISimilarity,
            isValid: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: *const fn(
            self: *const ISimilarity,
            similarityFileId: ?*SimilarityFileId,
            similarityData: ?*SimilarityData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindSimilarFileId: *const fn(
            self: *const ISimilarity,
            similarityData: ?*SimilarityData,
            numberOfMatchesRequired: u16,
            resultsSize: u32,
            findSimilarResults: ?*?*IFindSimilarResults,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyAndSwap: *const fn(
            self: *const ISimilarity,
            newSimilarityTables: ?*ISimilarity,
            reportProgress: ?*ISimilarityReportProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRecordCount: *const fn(
            self: *const ISimilarity,
            recordCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn CreateTable(self: *const ISimilarity, path: ?PWSTR, truncate: BOOL, securityDescriptor: ?*u8, recordSize: u32, isNew: ?*RdcCreatedTables) callconv(.Inline) HRESULT {
        return self.vtable.CreateTable(self, path, truncate, securityDescriptor, recordSize, isNew);
    }
    pub fn CreateTableIndirect(self: *const ISimilarity, mapping: ?*ISimilarityTraitsMapping, fileIdFile: ?*IRdcFileWriter, truncate: BOOL, recordSize: u32, isNew: ?*RdcCreatedTables) callconv(.Inline) HRESULT {
        return self.vtable.CreateTableIndirect(self, mapping, fileIdFile, truncate, recordSize, isNew);
    }
    pub fn CloseTable(self: *const ISimilarity, isValid: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.CloseTable(self, isValid);
    }
    pub fn Append(self: *const ISimilarity, similarityFileId: ?*SimilarityFileId, similarityData: ?*SimilarityData) callconv(.Inline) HRESULT {
        return self.vtable.Append(self, similarityFileId, similarityData);
    }
    pub fn FindSimilarFileId(self: *const ISimilarity, similarityData: ?*SimilarityData, numberOfMatchesRequired: u16, resultsSize: u32, findSimilarResults: ?*?*IFindSimilarResults) callconv(.Inline) HRESULT {
        return self.vtable.FindSimilarFileId(self, similarityData, numberOfMatchesRequired, resultsSize, findSimilarResults);
    }
    pub fn CopyAndSwap(self: *const ISimilarity, newSimilarityTables: ?*ISimilarity, reportProgress: ?*ISimilarityReportProgress) callconv(.Inline) HRESULT {
        return self.vtable.CopyAndSwap(self, newSimilarityTables, reportProgress);
    }
    pub fn GetRecordCount(self: *const ISimilarity, recordCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetRecordCount(self, recordCount);
    }
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (5)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const HRESULT = @import("../foundation.zig").HRESULT;
const IUnknown = @import("../system/com.zig").IUnknown;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
