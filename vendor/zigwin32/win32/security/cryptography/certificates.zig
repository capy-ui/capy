//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (977)
//--------------------------------------------------------------------------------
pub const wszREGKEYNOSYSTEMCERTSVCPATH = "CurrentControlSet\\Services\\CertSvc";
pub const wszREGKEYCERTSVCPATH = "SYSTEM\\CurrentControlSet\\Services\\CertSvc";
pub const CA_DISP_INCOMPLETE = @as(u32, 0);
pub const CA_DISP_ERROR = @as(u32, 1);
pub const CA_DISP_REVOKED = @as(u32, 2);
pub const CA_DISP_VALID = @as(u32, 3);
pub const CA_DISP_INVALID = @as(u32, 4);
pub const CA_DISP_UNDER_SUBMISSION = @as(u32, 5);
pub const KRA_DISP_EXPIRED = @as(u32, 0);
pub const KRA_DISP_NOTFOUND = @as(u32, 1);
pub const KRA_DISP_REVOKED = @as(u32, 2);
pub const KRA_DISP_VALID = @as(u32, 3);
pub const KRA_DISP_INVALID = @as(u32, 4);
pub const KRA_DISP_UNTRUSTED = @as(u32, 5);
pub const KRA_DISP_NOTLOADED = @as(u32, 6);
pub const CA_ACCESS_MASKROLES = @as(u32, 255);
pub const CA_CRL_BASE = @as(u32, 1);
pub const CA_CRL_DELTA = @as(u32, 2);
pub const CA_CRL_REPUBLISH = @as(u32, 16);
pub const ICF_ALLOWFOREIGN = @as(u32, 65536);
pub const ICF_EXISTINGROW = @as(u32, 131072);
pub const IKF_OVERWRITE = @as(u32, 65536);
pub const wszOCSPCAPROP_CACERTIFICATE = "CACertificate";
pub const wszOCSPCAPROP_HASHALGORITHMID = "HashAlgorithmId";
pub const wszOCSPCAPROP_SIGNINGFLAGS = "SigningFlags";
pub const wszOCSPCAPROP_REMINDERDURATION = "ReminderDuration";
pub const wszOCSPCAPROP_SIGNINGCERTIFICATE = "SigningCertificate";
pub const wszOCSPCAPROP_CSPNAME = "CSPName";
pub const wszOCSPCAPROP_KEYSPEC = "KeySpec";
pub const wszOCSPCAPROP_ERRORCODE = "ErrorCode";
pub const wszOCSPCAPROP_PROVIDERCLSID = "ProviderCLSID";
pub const wszOCSPCAPROP_PROVIDERPROPERTIES = "Provider";
pub const wszOCSPCAPROP_LOCALREVOCATIONINFORMATION = "LocalRevocationInformation";
pub const wszOCSPCAPROP_SIGNINGCERTIFICATETEMPLATE = "SigningCertificateTemplate";
pub const wszOCSPCAPROP_CACONFIG = "CAConfig";
pub const wszOCSPPROP_LOGLEVEL = "LogLevel";
pub const wszOCSPPROP_DEBUG = "Debug";
pub const wszOCSPPROP_AUDITFILTER = "AuditFilter";
pub const wszOCSPPROP_ARRAYCONTROLLER = "ArrayController";
pub const wszOCSPPROP_ARRAYMEMBERS = "ArrayMembers";
pub const wszOCSPPROP_ENROLLPOLLINTERVAL = "EnrollPollInterval";
pub const wszOCSPISAPIPROP_VIRTUALROOTNAME = "VirtualRootName";
pub const wszOCSPISAPIPROP_NUMOFTHREADS = "NumOfThreads";
pub const wszOCSPISAPIPROP_NUMOFBACKENDCONNECTIONS = "NumOfBackendConnections";
pub const wszOCSPISAPIPROP_REFRESHRATE = "RefreshRate";
pub const wszOCSPISAPIPROP_MAXNUMOFCACHEENTRIES = "MaxNumOfCacheEntries";
pub const wszOCSPISAPIPROP_MAXAGE = "MaxAge";
pub const wszOCSPISAPIPROP_DEBUG = "ISAPIDebug";
pub const wszOCSPCOMMONPROP_REQFLAGS = "RequestFlags";
pub const wszOCSPCOMMONPROP_MAXINCOMINGMESSAGESIZE = "MaxIncomingMessageSize";
pub const wszOCSPCOMMONPROP_MAXNUMOFREQUESTENTRIES = "MaxNumOfRequestEntries";
pub const wszOCSPREVPROP_CRLURLTIMEOUT = "CrlUrlTimeOut";
pub const wszOCSPREVPROP_BASECRLURLS = "BaseCrlUrls";
pub const wszOCSPREVPROP_SERIALNUMBERSDIRS = "IssuedSerialNumbersDirectories";
pub const wszOCSPREVPROP_BASECRL = "BaseCrl";
pub const wszOCSPREVPROP_DELTACRLURLS = "DeltaCrlUrls";
pub const wszOCSPREVPROP_DELTACRL = "DeltaCrl";
pub const wszOCSPREVPROP_REFRESHTIMEOUT = "RefreshTimeOut";
pub const wszOCSPREVPROP_ERRORCODE = "RevocationErrorCode";
pub const szBACKUPANNOTATION = "Cert Server Backup Interface";
pub const szRESTOREANNOTATION = "Cert Server Restore Interface";
pub const CSBACKUP_TYPE_MASK = @as(u32, 3);
pub const CSRESTORE_TYPE_FULL = @as(u32, 1);
pub const CSRESTORE_TYPE_ONLINE = @as(u32, 2);
pub const CSRESTORE_TYPE_CATCHUP = @as(u32, 4);
pub const CSRESTORE_TYPE_MASK = @as(u32, 5);
pub const CSBACKUP_DISABLE_INCREMENTAL = @as(u32, 4294967295);
pub const CSBFT_DIRECTORY = @as(u32, 128);
pub const CSBFT_DATABASE_DIRECTORY = @as(u32, 64);
pub const CSBFT_LOG_DIRECTORY = @as(u32, 32);
pub const CSCONTROL_SHUTDOWN = @as(u64, 1);
pub const CSCONTROL_SUSPEND = @as(u64, 2);
pub const CSCONTROL_RESTART = @as(u64, 3);
pub const wszCONFIG_COMMONNAME = "CommonName";
pub const wszCONFIG_ORGUNIT = "OrgUnit";
pub const wszCONFIG_ORGANIZATION = "Organization";
pub const wszCONFIG_LOCALITY = "Locality";
pub const wszCONFIG_STATE = "State";
pub const wszCONFIG_COUNTRY = "Country";
pub const wszCONFIG_CONFIG = "Config";
pub const wszCONFIG_EXCHANGECERTIFICATE = "ExchangeCertificate";
pub const wszCONFIG_SIGNATURECERTIFICATE = "SignatureCertificate";
pub const wszCONFIG_DESCRIPTION = "Description";
pub const wszCONFIG_COMMENT = "Comment";
pub const wszCONFIG_SERVER = "Server";
pub const wszCONFIG_AUTHORITY = "Authority";
pub const wszCONFIG_SANITIZEDNAME = "SanitizedName";
pub const wszCONFIG_SHORTNAME = "ShortName";
pub const wszCONFIG_SANITIZEDSHORTNAME = "SanitizedShortName";
pub const wszCONFIG_FLAGS = "Flags";
pub const wszCONFIG_WEBENROLLMENTSERVERS = "WebEnrollmentServers";
pub const CAIF_DSENTRY = @as(u32, 1);
pub const CAIF_SHAREDFOLDERENTRY = @as(u32, 2);
pub const CAIF_REGISTRY = @as(u32, 4);
pub const CAIF_LOCAL = @as(u32, 8);
pub const CAIF_REGISTRYPARENT = @as(u32, 16);
pub const CR_IN_ENCODEANY = @as(u32, 255);
pub const CR_IN_ENCODEMASK = @as(u32, 255);
pub const CR_IN_FORMATANY = @as(u32, 0);
pub const CR_IN_PKCS10 = @as(u32, 256);
pub const CR_IN_KEYGEN = @as(u32, 512);
pub const CR_IN_PKCS7 = @as(u32, 768);
pub const CR_IN_CMC = @as(u32, 1024);
pub const CR_IN_CHALLENGERESPONSE = @as(u32, 1280);
pub const CR_IN_SIGNEDCERTIFICATETIMESTAMPLIST = @as(u32, 1536);
pub const CR_IN_FORMATMASK = @as(u32, 65280);
pub const CR_IN_SCEP = @as(u32, 65536);
pub const CR_IN_RPC = @as(u32, 131072);
pub const CR_IN_HTTP = @as(u32, 196608);
pub const CR_IN_FULLRESPONSE = @as(u32, 262144);
pub const CR_IN_CRLS = @as(u32, 524288);
pub const CR_IN_MACHINE = @as(u32, 1048576);
pub const CR_IN_ROBO = @as(u32, 2097152);
pub const CR_IN_CLIENTIDNONE = @as(u32, 4194304);
pub const CR_IN_CONNECTONLY = @as(u32, 8388608);
pub const CR_IN_RETURNCHALLENGE = @as(u32, 16777216);
pub const CR_IN_SCEPPOST = @as(u32, 33554432);
pub const CR_IN_CERTIFICATETRANSPARENCY = @as(u32, 67108864);
pub const CR_DISP_REVOKED = @as(u32, 6);
pub const CR_OUT_BASE64REQUESTHEADER = @as(u32, 3);
pub const CR_OUT_HEX = @as(u32, 4);
pub const CR_OUT_HEXASCII = @as(u32, 5);
pub const CR_OUT_BASE64X509CRLHEADER = @as(u32, 9);
pub const CR_OUT_HEXADDR = @as(u32, 10);
pub const CR_OUT_HEXASCIIADDR = @as(u32, 11);
pub const CR_OUT_HEXRAW = @as(u32, 12);
pub const CR_OUT_ENCODEMASK = @as(u32, 255);
pub const CR_OUT_CHAIN = @as(u32, 256);
pub const CR_OUT_CRLS = @as(u32, 512);
pub const CR_OUT_NOCRLF = @as(u32, 1073741824);
pub const CR_OUT_NOCR = @as(u32, 2147483648);
pub const CR_GEMT_DEFAULT = @as(u32, 0);
pub const CR_GEMT_HRESULT_STRING = @as(u32, 1);
pub const CR_GEMT_HTTP_ERROR = @as(u32, 2);
pub const CR_PROP_NONE = @as(u32, 0);
pub const CR_PROP_FILEVERSION = @as(u32, 1);
pub const CR_PROP_PRODUCTVERSION = @as(u32, 2);
pub const CR_PROP_EXITCOUNT = @as(u32, 3);
pub const CR_PROP_EXITDESCRIPTION = @as(u32, 4);
pub const CR_PROP_POLICYDESCRIPTION = @as(u32, 5);
pub const CR_PROP_CANAME = @as(u32, 6);
pub const CR_PROP_SANITIZEDCANAME = @as(u32, 7);
pub const CR_PROP_SHAREDFOLDER = @as(u32, 8);
pub const CR_PROP_PARENTCA = @as(u32, 9);
pub const CR_PROP_CATYPE = @as(u32, 10);
pub const CR_PROP_CASIGCERTCOUNT = @as(u32, 11);
pub const CR_PROP_CASIGCERT = @as(u32, 12);
pub const CR_PROP_CASIGCERTCHAIN = @as(u32, 13);
pub const CR_PROP_CAXCHGCERTCOUNT = @as(u32, 14);
pub const CR_PROP_CAXCHGCERT = @as(u32, 15);
pub const CR_PROP_CAXCHGCERTCHAIN = @as(u32, 16);
pub const CR_PROP_BASECRL = @as(u32, 17);
pub const CR_PROP_DELTACRL = @as(u32, 18);
pub const CR_PROP_CACERTSTATE = @as(u32, 19);
pub const CR_PROP_CRLSTATE = @as(u32, 20);
pub const CR_PROP_CAPROPIDMAX = @as(u32, 21);
pub const CR_PROP_DNSNAME = @as(u32, 22);
pub const CR_PROP_ROLESEPARATIONENABLED = @as(u32, 23);
pub const CR_PROP_KRACERTUSEDCOUNT = @as(u32, 24);
pub const CR_PROP_KRACERTCOUNT = @as(u32, 25);
pub const CR_PROP_KRACERT = @as(u32, 26);
pub const CR_PROP_KRACERTSTATE = @as(u32, 27);
pub const CR_PROP_ADVANCEDSERVER = @as(u32, 28);
pub const CR_PROP_TEMPLATES = @as(u32, 29);
pub const CR_PROP_BASECRLPUBLISHSTATUS = @as(u32, 30);
pub const CR_PROP_DELTACRLPUBLISHSTATUS = @as(u32, 31);
pub const CR_PROP_CASIGCERTCRLCHAIN = @as(u32, 32);
pub const CR_PROP_CAXCHGCERTCRLCHAIN = @as(u32, 33);
pub const CR_PROP_CACERTSTATUSCODE = @as(u32, 34);
pub const CR_PROP_CAFORWARDCROSSCERT = @as(u32, 35);
pub const CR_PROP_CABACKWARDCROSSCERT = @as(u32, 36);
pub const CR_PROP_CAFORWARDCROSSCERTSTATE = @as(u32, 37);
pub const CR_PROP_CABACKWARDCROSSCERTSTATE = @as(u32, 38);
pub const CR_PROP_CACERTVERSION = @as(u32, 39);
pub const CR_PROP_SANITIZEDCASHORTNAME = @as(u32, 40);
pub const CR_PROP_CERTCDPURLS = @as(u32, 41);
pub const CR_PROP_CERTAIAURLS = @as(u32, 42);
pub const CR_PROP_CERTAIAOCSPURLS = @as(u32, 43);
pub const CR_PROP_LOCALENAME = @as(u32, 44);
pub const CR_PROP_SUBJECTTEMPLATE_OIDS = @as(u32, 45);
pub const CR_PROP_SCEPSERVERCERTS = @as(u32, 1000);
pub const CR_PROP_SCEPSERVERCAPABILITIES = @as(u32, 1001);
pub const CR_PROP_SCEPSERVERCERTSCHAIN = @as(u32, 1002);
pub const CR_PROP_SCEPMIN = @as(u32, 1000);
pub const CR_PROP_SCEPMAX = @as(u32, 1002);
pub const FR_PROP_CLAIMCHALLENGE = @as(u32, 22);
pub const EAN_NAMEOBJECTID = @as(u32, 2147483648);
pub const EANR_SUPPRESS_IA5CONVERSION = @as(u32, 2147483648);
pub const CERTENROLL_INDEX_BASE = @as(u32, 0);
pub const EXITEVENT_INVALID = @as(u32, 0);
pub const EXITEVENT_STARTUP = @as(u32, 128);
pub const EXITEVENT_CERTIMPORTED = @as(u32, 512);
pub const ENUMEXT_OBJECTID = @as(u32, 1);
pub const CMM_REFRESHONLY = @as(u32, 1);
pub const CMM_READONLY = @as(u32, 2);
pub const DBG_CERTSRV = @as(u32, 1);
pub const wszSERVICE_NAME = "CertSvc";
pub const wszREGKEYBASE = "SYSTEM\\CurrentControlSet\\Services\\CertSvc";
pub const wszREGKEYCONFIG = "Configuration";
pub const wszREGACTIVE = "Active";
pub const wszREGDIRECTORY = "ConfigurationDirectory";
pub const wszREGDBDIRECTORY = "DBDirectory";
pub const wszREGDBLOGDIRECTORY = "DBLogDirectory";
pub const wszREGDBSYSDIRECTORY = "DBSystemDirectory";
pub const wszREGDBTEMPDIRECTORY = "DBTempDirectory";
pub const wszREGDBSESSIONCOUNT = "DBSessionCount";
pub const wszREGDBMAXREADSESSIONCOUNT = "DBMaxReadSessionCount";
pub const wszREGDBFLAGS = "DBFlags";
pub const wszREGDBLASTFULLBACKUP = "DBLastFullBackup";
pub const wszREGDBLASTINCREMENTALBACKUP = "DBLastIncrementalBackup";
pub const wszREGDBLASTRECOVERY = "DBLastRecovery";
pub const wszREGWEBCLIENTCAMACHINE = "WebClientCAMachine";
pub const wszREGVERSION = "Version";
pub const wszREGWEBCLIENTCANAME = "WebClientCAName";
pub const wszREGWEBCLIENTCATYPE = "WebClientCAType";
pub const wszREGLDAPFLAGS = "LDAPFlags";
pub const wszREGCERTSRVDEBUG = "Debug";
pub const DBSESSIONCOUNTDEFAULT = @as(u32, 100);
pub const DBFLAGS_READONLY = @as(u32, 1);
pub const DBFLAGS_CREATEIFNEEDED = @as(u32, 2);
pub const DBFLAGS_CIRCULARLOGGING = @as(u32, 4);
pub const DBFLAGS_LAZYFLUSH = @as(u32, 8);
pub const DBFLAGS_MAXCACHESIZEX100 = @as(u32, 16);
pub const DBFLAGS_CHECKPOINTDEPTH60MB = @as(u32, 32);
pub const DBFLAGS_LOGBUFFERSLARGE = @as(u32, 64);
pub const DBFLAGS_LOGBUFFERSHUGE = @as(u32, 128);
pub const DBFLAGS_LOGFILESIZE16MB = @as(u32, 256);
pub const DBFLAGS_MULTITHREADTRANSACTIONS = @as(u32, 512);
pub const DBFLAGS_DISABLESNAPSHOTBACKUP = @as(u32, 1024);
pub const DBFLAGS_ENABLEVOLATILEREQUESTS = @as(u32, 2048);
pub const LDAPF_SSLENABLE = @as(u32, 1);
pub const LDAPF_SIGNDISABLE = @as(u32, 2);
pub const CSVER_MAJOR_WIN2K = @as(u32, 1);
pub const CSVER_MINOR_WIN2K = @as(u32, 1);
pub const CSVER_MAJOR_WHISTLER = @as(u32, 2);
pub const CSVER_MINOR_WHISTLER_BETA2 = @as(u32, 1);
pub const CSVER_MINOR_WHISTLER_BETA3 = @as(u32, 2);
pub const CSVER_MAJOR_LONGHORN = @as(u32, 3);
pub const CSVER_MINOR_LONGHORN_BETA1 = @as(u32, 1);
pub const CSVER_MAJOR_WIN7 = @as(u32, 4);
pub const CSVER_MINOR_WIN7 = @as(u32, 1);
pub const CSVER_MAJOR_WIN8 = @as(u32, 5);
pub const CSVER_MINOR_WIN8 = @as(u32, 1);
pub const CSVER_MAJOR_WINBLUE = @as(u32, 6);
pub const CSVER_MINOR_WINBLUE = @as(u32, 1);
pub const CSVER_MAJOR_THRESHOLD = @as(u32, 7);
pub const CSVER_MINOR_THRESHOLD = @as(u32, 1);
pub const CSVER_MAJOR = @as(u32, 7);
pub const CSVER_MINOR = @as(u32, 1);
pub const wszREGKEYRESTOREINPROGRESS = "RestoreInProgress";
pub const wszREGKEYDBPARAMETERS = "DBParameters";
pub const wszREGCADESCRIPTION = "CADescription";
pub const wszREGCACERTHASH = "CACertHash";
pub const wszREGCASERIALNUMBER = "CACertSerialNumber";
pub const wszREGCAXCHGCERTHASH = "CAXchgCertHash";
pub const wszREGKRACERTHASH = "KRACertHash";
pub const wszREGKRACERTCOUNT = "KRACertCount";
pub const wszREGKRAFLAGS = "KRAFlags";
pub const wszREGCATYPE = "CAType";
pub const wszREGCERTENROLLCOMPATIBLE = "CertEnrollCompatible";
pub const wszREGENFORCEX500NAMELENGTHS = "EnforceX500NameLengths";
pub const wszREGCOMMONNAME = "CommonName";
pub const wszREGCLOCKSKEWMINUTES = "ClockSkewMinutes";
pub const wszREGCRLNEXTPUBLISH = "CRLNextPublish";
pub const wszREGCRLPERIODSTRING = "CRLPeriod";
pub const wszREGCRLPERIODCOUNT = "CRLPeriodUnits";
pub const wszREGCRLOVERLAPPERIODSTRING = "CRLOverlapPeriod";
pub const wszREGCRLOVERLAPPERIODCOUNT = "CRLOverlapUnits";
pub const wszREGCRLDELTANEXTPUBLISH = "CRLDeltaNextPublish";
pub const wszREGCRLDELTAPERIODSTRING = "CRLDeltaPeriod";
pub const wszREGCRLDELTAPERIODCOUNT = "CRLDeltaPeriodUnits";
pub const wszREGCRLDELTAOVERLAPPERIODSTRING = "CRLDeltaOverlapPeriod";
pub const wszREGCRLDELTAOVERLAPPERIODCOUNT = "CRLDeltaOverlapUnits";
pub const wszREGCRLPUBLICATIONURLS = "CRLPublicationURLs";
pub const wszREGCACERTPUBLICATIONURLS = "CACertPublicationURLs";
pub const wszREGCAXCHGVALIDITYPERIODSTRING = "CAXchgValidityPeriod";
pub const wszREGCAXCHGVALIDITYPERIODCOUNT = "CAXchgValidityPeriodUnits";
pub const wszREGCAXCHGOVERLAPPERIODSTRING = "CAXchgOverlapPeriod";
pub const wszREGCAXCHGOVERLAPPERIODCOUNT = "CAXchgOverlapPeriodUnits";
pub const wszREGCRLPATH_OLD = "CRLPath";
pub const wszREGCRLEDITFLAGS = "CRLEditFlags";
pub const wszREGCRLFLAGS = "CRLFlags";
pub const wszREGCRLATTEMPTREPUBLISH = "CRLAttemptRepublish";
pub const wszREGENABLED = "Enabled";
pub const wszREGFORCETELETEX = "ForceTeletex";
pub const wszREGLOGLEVEL = "LogLevel";
pub const wszREGHIGHSERIAL = "HighSerial";
pub const wszREGPOLICYFLAGS = "PolicyFlags";
pub const wszREGNAMESEPARATOR = "SubjectNameSeparator";
pub const wszREGSUBJECTTEMPLATE = "SubjectTemplate";
pub const wszREGCAUSEDS = "UseDS";
pub const wszREGVALIDITYPERIODSTRING = "ValidityPeriod";
pub const wszREGVALIDITYPERIODCOUNT = "ValidityPeriodUnits";
pub const wszREGPARENTCAMACHINE = "ParentCAMachine";
pub const wszREGPARENTCANAME = "ParentCAName";
pub const wszREGREQUESTFILENAME = "RequestFileName";
pub const wszREGREQUESTID = "RequestId";
pub const wszREGREQUESTKEYCONTAINER = "RequestKeyContainer";
pub const wszREGREQUESTKEYINDEX = "RequestKeyIndex";
pub const wszREGCASERVERNAME = "CAServerName";
pub const wszREGCACERTFILENAME = "CACertFileName";
pub const wszREGCASECURITY = "Security";
pub const wszREGAUDITFILTER = "AuditFilter";
pub const wszREGOFFICERRIGHTS = "OfficerRights";
pub const wszENROLLMENTAGENTRIGHTS = "EnrollmentAgentRights";
pub const wszREGMAXINCOMINGMESSAGESIZE = "MaxIncomingMessageSize";
pub const wszREGMAXINCOMINGALLOCSIZE = "MaxIncomingAllocSize";
pub const wszREGROLESEPARATIONENABLED = "RoleSeparationEnabled";
pub const wszREGALTERNATEPUBLISHDOMAINS = "AlternatePublishDomains";
pub const wszREGSETUPSTATUS = "SetupStatus";
pub const wszREGINTERFACEFLAGS = "InterfaceFlags";
pub const wszREGDSCONFIGDN = "DSConfigDN";
pub const wszREGDSDOMAINDN = "DSDomainDN";
pub const wszREGVIEWAGEMINUTES = "ViewAgeMinutes";
pub const wszREGVIEWIDLEMINUTES = "ViewIdleMinutes";
pub const wszREGEKPUBLISTDIRECTORIES = "EndorsementKeyListDirectories";
pub const wszCERTIFICATETRANSPARENCYFLAGS = "CertificateTransparencyFlags";
pub const wszREGMAXSCTLISTSIZE = "MaxSCTListSize";
pub const wszREGCERTIFICATETRANSPARENCYINFOOID = "CTInformationExtensionOid";
pub const wszREGPROCESSINGFLAGS = "ProcessingFlags";
pub const wszREGUSEDEFINEDCACERTINREQ = "UseDefinedCACertInRequest";
pub const wszREGENABLEDEKUFORDEFINEDCACERT = "EnabledEKUForDefinedCACert";
pub const wszREGEKUOIDSFORPUBLISHEXPIREDCERTINCRL = "EKUOIDsForPublishExpiredCertInCRL";
pub const wszCRTFILENAMEEXT = ".crt";
pub const wszPFXFILENAMEEXT = ".p12";
pub const wszDATFILENAMEEXT = ".dat";
pub const wszLOGFILENAMEEXT = ".log";
pub const wszDBFILENAMEEXT = ".edb";
pub const szDBBASENAMEPARM = "edb";
pub const wszLOGPATH = "CertLog";
pub const wszDBBACKUPSUBDIR = "DataBase";
pub const wszDBBACKUPCERTBACKDAT = "certbkxp.dat";
pub const CCLOCKSKEWMINUTESDEFAULT = @as(u32, 10);
pub const CVIEWAGEMINUTESDEFAULT = @as(u32, 16);
pub const dwVALIDITYPERIODCOUNTDEFAULT_ROOT = @as(u32, 5);
pub const dwVALIDITYPERIODCOUNTDEFAULT_ENTERPRISE = @as(u32, 2);
pub const dwVALIDITYPERIODCOUNTDEFAULT_STANDALONE = @as(u32, 1);
pub const dwCAXCHGVALIDITYPERIODCOUNTDEFAULT = @as(u32, 1);
pub const dwCAXCHGOVERLAPPERIODCOUNTDEFAULT = @as(u32, 1);
pub const dwCRLPERIODCOUNTDEFAULT = @as(u32, 1);
pub const dwCRLOVERLAPPERIODCOUNTDEFAULT = @as(u32, 0);
pub const dwCRLDELTAPERIODCOUNTDEFAULT = @as(u32, 1);
pub const dwCRLDELTAOVERLAPPERIODCOUNTDEFAULT = @as(u32, 0);
pub const SETUP_SERVER_FLAG = @as(u32, 1);
pub const SETUP_CLIENT_FLAG = @as(u32, 2);
pub const SETUP_SUSPEND_FLAG = @as(u32, 4);
pub const SETUP_REQUEST_FLAG = @as(u32, 8);
pub const SETUP_ONLINE_FLAG = @as(u32, 16);
pub const SETUP_DENIED_FLAG = @as(u32, 32);
pub const SETUP_CREATEDB_FLAG = @as(u32, 64);
pub const SETUP_ATTEMPT_VROOT_CREATE = @as(u32, 128);
pub const SETUP_FORCECRL_FLAG = @as(u32, 256);
pub const SETUP_UPDATE_CAOBJECT_SVRTYPE = @as(u32, 512);
pub const SETUP_SERVER_UPGRADED_FLAG = @as(u32, 1024);
pub const SETUP_W2K_SECURITY_NOT_UPGRADED_FLAG = @as(u32, 2048);
pub const SETUP_SECURITY_CHANGED = @as(u32, 4096);
pub const SETUP_DCOM_SECURITY_UPDATED_FLAG = @as(u32, 8192);
pub const SETUP_SERVER_IS_UP_TO_DATE_FLAG = @as(u32, 16384);
pub const CRLF_DELTA_USE_OLDEST_UNEXPIRED_BASE = @as(u32, 1);
pub const CRLF_DELETE_EXPIRED_CRLS = @as(u32, 2);
pub const CRLF_CRLNUMBER_CRITICAL = @as(u32, 4);
pub const CRLF_REVCHECK_IGNORE_OFFLINE = @as(u32, 8);
pub const CRLF_IGNORE_INVALID_POLICIES = @as(u32, 16);
pub const CRLF_REBUILD_MODIFIED_SUBJECT_ONLY = @as(u32, 32);
pub const CRLF_SAVE_FAILED_CERTS = @as(u32, 64);
pub const CRLF_IGNORE_UNKNOWN_CMC_ATTRIBUTES = @as(u32, 128);
pub const CRLF_IGNORE_CROSS_CERT_TRUST_ERROR = @as(u32, 256);
pub const CRLF_PUBLISH_EXPIRED_CERT_CRLS = @as(u32, 512);
pub const CRLF_ENFORCE_ENROLLMENT_AGENT = @as(u32, 1024);
pub const CRLF_DISABLE_RDN_REORDER = @as(u32, 2048);
pub const CRLF_DISABLE_ROOT_CROSS_CERTS = @as(u32, 4096);
pub const CRLF_LOG_FULL_RESPONSE = @as(u32, 8192);
pub const CRLF_USE_XCHG_CERT_TEMPLATE = @as(u32, 16384);
pub const CRLF_USE_CROSS_CERT_TEMPLATE = @as(u32, 32768);
pub const CRLF_ALLOW_REQUEST_ATTRIBUTE_SUBJECT = @as(u32, 65536);
pub const CRLF_REVCHECK_IGNORE_NOREVCHECK = @as(u32, 131072);
pub const CRLF_PRESERVE_EXPIRED_CA_CERTS = @as(u32, 262144);
pub const CRLF_PRESERVE_REVOKED_CA_CERTS = @as(u32, 524288);
pub const CRLF_DISABLE_CHAIN_VERIFICATION = @as(u32, 1048576);
pub const CRLF_BUILD_ROOTCA_CRLENTRIES_BASEDONKEY = @as(u32, 2097152);
pub const KRAF_ENABLEFOREIGN = @as(u32, 1);
pub const KRAF_SAVEBADREQUESTKEY = @as(u32, 2);
pub const KRAF_ENABLEARCHIVEALL = @as(u32, 4);
pub const KRAF_DISABLEUSEDEFAULTPROVIDER = @as(u32, 8);
pub const IF_LOCKICERTREQUEST = @as(u32, 1);
pub const IF_NOREMOTEICERTREQUEST = @as(u32, 2);
pub const IF_NOLOCALICERTREQUEST = @as(u32, 4);
pub const IF_NORPCICERTREQUEST = @as(u32, 8);
pub const IF_NOREMOTEICERTADMIN = @as(u32, 16);
pub const IF_NOLOCALICERTADMIN = @as(u32, 32);
pub const IF_NOREMOTEICERTADMINBACKUP = @as(u32, 64);
pub const IF_NOLOCALICERTADMINBACKUP = @as(u32, 128);
pub const IF_NOSNAPSHOTBACKUP = @as(u32, 256);
pub const IF_ENFORCEENCRYPTICERTREQUEST = @as(u32, 512);
pub const IF_ENFORCEENCRYPTICERTADMIN = @as(u32, 1024);
pub const IF_ENABLEEXITKEYRETRIEVAL = @as(u32, 2048);
pub const IF_ENABLEADMINASAUDITOR = @as(u32, 4096);
pub const PROCFLG_NONE = @as(u32, 0);
pub const PROCFLG_ENFORCEGOODKEYS = @as(u32, 1);
pub const CSURL_SERVERPUBLISH = @as(u32, 1);
pub const CSURL_ADDTOCERTCDP = @as(u32, 2);
pub const CSURL_ADDTOFRESHESTCRL = @as(u32, 4);
pub const CSURL_ADDTOCRLCDP = @as(u32, 8);
pub const CSURL_PUBLISHRETRY = @as(u32, 16);
pub const CSURL_ADDTOCERTOCSP = @as(u32, 32);
pub const CSURL_SERVERPUBLISHDELTA = @as(u32, 64);
pub const CSURL_ADDTOIDP = @as(u32, 128);
pub const wszREGKEYCSP = "CSP";
pub const wszREGKEYENCRYPTIONCSP = "EncryptionCSP";
pub const wszREGKEYEXITMODULES = "ExitModules";
pub const wszREGKEYPOLICYMODULES = "PolicyModules";
pub const wszSECUREDATTRIBUTES = "SignedAttributes";
pub const wszzDEFAULTSIGNEDATTRIBUTES = "RequesterName\x00";
pub const wszREGBACKUPLOGDIRECTORY = "BackupLogDirectory";
pub const wszREGCHECKPOINTFILE = "CheckPointFile";
pub const wszREGHIGHLOGNUMBER = "HighLogNumber";
pub const wszREGLOWLOGNUMBER = "LowLogNumber";
pub const wszREGLOGPATH = "LogPath";
pub const wszREGRESTOREMAPCOUNT = "RestoreMapCount";
pub const wszREGRESTOREMAP = "RestoreMap";
pub const wszREGDATABASERECOVERED = "DatabaseRecovered";
pub const wszREGRESTORESTATUS = "RestoreStatus";
pub const wszREGB2ICERTMANAGEMODULE = "ICertManageModule";
pub const wszREGSP4DEFAULTCONFIGURATION = "DefaultConfiguration";
pub const wszREGSP4KEYSETNAME = "KeySetName";
pub const wszREGSP4SUBJECTNAMESEPARATOR = "SubjectNameSeparator";
pub const wszREGSP4NAMES = "Names";
pub const wszREGSP4QUERIES = "Queries";
pub const wszREGNETSCAPECERTTYPE = "NetscapeCertType";
pub const wszNETSCAPEREVOCATIONTYPE = "Netscape";
pub const wszREGPROVIDERTYPE = "ProviderType";
pub const wszREGPROVIDER = "Provider";
pub const wszHASHALGORITHM = "HashAlgorithm";
pub const wszENCRYPTIONALGORITHM = "EncryptionAlgorithm";
pub const wszMACHINEKEYSET = "MachineKeyset";
pub const wszREGKEYSIZE = "KeySize";
pub const wszREGSYMMETRICKEYSIZE = "SymmetricKeySize";
pub const wszCNGPUBLICKEYALGORITHM = "CNGPublicKeyAlgorithm";
pub const wszCNGHASHALGORITHM = "CNGHashAlgorithm";
pub const wszCNGENCRYPTIONALGORITHM = "CNGEncryptionAlgorithm";
pub const wszREGALTERNATESIGNATUREALGORITHM = "AlternateSignatureAlgorithm";
pub const szNAMESEPARATORDEFAULT = "\n";
pub const wszPERIODYEARS = "Years";
pub const wszPERIODMONTHS = "Months";
pub const wszPERIODWEEKS = "Weeks";
pub const wszPERIODDAYS = "Days";
pub const wszPERIODHOURS = "Hours";
pub const wszPERIODMINUTES = "Minutes";
pub const wszPERIODSECONDS = "Seconds";
pub const wszREGISSUERCERTURLFLAGS = "IssuerCertURLFlags";
pub const wszREGEDITFLAGS = "EditFlags";
pub const wszREGUPNMAP = "UPNMap";
pub const wszREGSUBJECTALTNAME = "SubjectAltName";
pub const wszREGSUBJECTALTNAME2 = "SubjectAltName2";
pub const wszREGREQUESTDISPOSITION = "RequestDisposition";
pub const wszREGCAPATHLENGTH = "CAPathLength";
pub const wszREGREVOCATIONTYPE = "RevocationType";
pub const wszREGLDAPREVOCATIONCRLURL_OLD = "LDAPRevocationCRLURL";
pub const wszREGREVOCATIONCRLURL_OLD = "RevocationCRLURL";
pub const wszREGFTPREVOCATIONCRLURL_OLD = "FTPRevocationCRLURL";
pub const wszREGFILEREVOCATIONCRLURL_OLD = "FileRevocationCRLURL";
pub const wszREGREVOCATIONURL = "RevocationURL";
pub const wszREGLDAPISSUERCERTURL_OLD = "LDAPIssuerCertURL";
pub const wszREGISSUERCERTURL_OLD = "IssuerCertURL";
pub const wszREGFTPISSUERCERTURL_OLD = "FTPIssuerCertURL";
pub const wszREGFILEISSUERCERTURL_OLD = "FileIssuerCertURL";
pub const wszREGENABLEREQUESTEXTENSIONLIST = "EnableRequestExtensionList";
pub const wszREGENABLEENROLLEEREQUESTEXTENSIONLIST = "EnableEnrolleeRequestExtensionList";
pub const wszREGDISABLEEXTENSIONLIST = "DisableExtensionList";
pub const wszREGEKUOIDSFORVOLATILEREQUESTS = "EKUOIDsforVolatileRequests";
pub const wszREGLDAPSESSIONOPTIONS = "LDAPSessionOptions";
pub const wszLDAPSESSIONOPTIONVALUE = "LDAPSessionOptionValue";
pub const wszREGDEFAULTSMIME = "DefaultSMIME";
pub const CAPATHLENGTH_INFINITE = @as(u32, 4294967295);
pub const REQDISP_PENDING = @as(u32, 0);
pub const REQDISP_ISSUE = @as(u32, 1);
pub const REQDISP_DENY = @as(u32, 2);
pub const REQDISP_USEREQUESTATTRIBUTE = @as(u32, 3);
pub const REQDISP_MASK = @as(u32, 255);
pub const REQDISP_PENDINGFIRST = @as(u32, 256);
pub const REQDISP_DEFAULT_ENTERPRISE = @as(u32, 1);
pub const REVEXT_CDPLDAPURL_OLD = @as(u32, 1);
pub const REVEXT_CDPHTTPURL_OLD = @as(u32, 2);
pub const REVEXT_CDPFTPURL_OLD = @as(u32, 4);
pub const REVEXT_CDPFILEURL_OLD = @as(u32, 8);
pub const REVEXT_CDPURLMASK_OLD = @as(u32, 255);
pub const REVEXT_CDPENABLE = @as(u32, 256);
pub const REVEXT_ASPENABLE = @as(u32, 512);
pub const REVEXT_DEFAULT_NODS = @as(u32, 256);
pub const REVEXT_DEFAULT_DS = @as(u32, 256);
pub const ISSCERT_LDAPURL_OLD = @as(u32, 1);
pub const ISSCERT_HTTPURL_OLD = @as(u32, 2);
pub const ISSCERT_FTPURL_OLD = @as(u32, 4);
pub const ISSCERT_FILEURL_OLD = @as(u32, 8);
pub const ISSCERT_URLMASK_OLD = @as(u32, 255);
pub const ISSCERT_ENABLE = @as(u32, 256);
pub const ISSCERT_DEFAULT_NODS = @as(u32, 256);
pub const ISSCERT_DEFAULT_DS = @as(u32, 256);
pub const EDITF_ENABLEREQUESTEXTENSIONS = @as(u32, 1);
pub const EDITF_REQUESTEXTENSIONLIST = @as(u32, 2);
pub const EDITF_DISABLEEXTENSIONLIST = @as(u32, 4);
pub const EDITF_ADDOLDKEYUSAGE = @as(u32, 8);
pub const EDITF_ADDOLDCERTTYPE = @as(u32, 16);
pub const EDITF_ATTRIBUTEENDDATE = @as(u32, 32);
pub const EDITF_BASICCONSTRAINTSCRITICAL = @as(u32, 64);
pub const EDITF_BASICCONSTRAINTSCA = @as(u32, 128);
pub const EDITF_ENABLEAKIKEYID = @as(u32, 256);
pub const EDITF_ATTRIBUTECA = @as(u32, 512);
pub const EDITF_IGNOREREQUESTERGROUP = @as(u32, 1024);
pub const EDITF_ENABLEAKIISSUERNAME = @as(u32, 2048);
pub const EDITF_ENABLEAKIISSUERSERIAL = @as(u32, 4096);
pub const EDITF_ENABLEAKICRITICAL = @as(u32, 8192);
pub const EDITF_SERVERUPGRADED = @as(u32, 16384);
pub const EDITF_ATTRIBUTEEKU = @as(u32, 32768);
pub const EDITF_ENABLEDEFAULTSMIME = @as(u32, 65536);
pub const EDITF_EMAILOPTIONAL = @as(u32, 131072);
pub const EDITF_ATTRIBUTESUBJECTALTNAME2 = @as(u32, 262144);
pub const EDITF_ENABLELDAPREFERRALS = @as(u32, 524288);
pub const EDITF_ENABLECHASECLIENTDC = @as(u32, 1048576);
pub const EDITF_AUDITCERTTEMPLATELOAD = @as(u32, 2097152);
pub const EDITF_DISABLEOLDOSCNUPN = @as(u32, 4194304);
pub const EDITF_DISABLELDAPPACKAGELIST = @as(u32, 8388608);
pub const EDITF_ENABLEUPNMAP = @as(u32, 16777216);
pub const EDITF_ENABLEOCSPREVNOCHECK = @as(u32, 33554432);
pub const EDITF_ENABLERENEWONBEHALFOF = @as(u32, 67108864);
pub const EDITF_ENABLEKEYENCIPHERMENTCACERT = @as(u32, 134217728);
pub const wszREGLDAPREVOCATIONDN_OLD = "LDAPRevocationDN";
pub const wszREGLDAPREVOCATIONDNTEMPLATE_OLD = "LDAPRevocationDNTemplate";
pub const wszCRLPUBLISHRETRYCOUNT = "CRLPublishRetryCount";
pub const wszREGCERTPUBLISHFLAGS = "PublishCertFlags";
pub const EXITPUB_FILE = @as(u32, 1);
pub const EXITPUB_ACTIVEDIRECTORY = @as(u32, 2);
pub const EXITPUB_REMOVEOLDCERTS = @as(u32, 16);
pub const EXITPUB_DEFAULT_ENTERPRISE = @as(u32, 2);
pub const EXITPUB_DEFAULT_STANDALONE = @as(u32, 1);
pub const wszCLASS_CERTADMIN = "CertificateAuthority.Admin";
pub const wszCLASS_CERTCONFIG = "CertificateAuthority.Config";
pub const wszCLASS_CERTGETCONFIG = "CertificateAuthority.GetConfig";
pub const wszCLASS_CERTENCODE = "CertificateAuthority.Encode";
pub const wszCLASS_CERTDBMEM = "CertificateAuthority.DBMem";
pub const wszCLASS_CERTREQUEST = "CertificateAuthority.Request";
pub const wszCLASS_CERTSERVEREXIT = "CertificateAuthority.ServerExit";
pub const wszCLASS_CERTSERVERPOLICY = "CertificateAuthority.ServerPolicy";
pub const wszCLASS_CERTVIEW = "CertificateAuthority.View";
pub const wszMICROSOFTCERTMODULE_PREFIX = "CertificateAuthority_MicrosoftDefault";
pub const wszCERTMANAGE_SUFFIX = "Manage";
pub const wszCERTEXITMODULE_POSTFIX = ".Exit";
pub const wszCERTPOLICYMODULE_POSTFIX = ".Policy";
pub const wszCAPOLICYFILE = "CAPolicy.inf";
pub const wszINFSECTION_CDP = "CRLDistributionPoint";
pub const wszINFSECTION_AIA = "AuthorityInformationAccess";
pub const wszINFSECTION_EKU = "EnhancedKeyUsageExtension";
pub const wszINFSECTION_CCDP = "CrossCertificateDistributionPointsExtension";
pub const wszINFSECTION_CERTSERVER = "certsrv_server";
pub const wszINFKEY_RENEWALKEYLENGTH = "RenewalKeyLength";
pub const wszINFKEY_RENEWALVALIDITYPERIODSTRING = "RenewalValidityPeriod";
pub const wszINFKEY_RENEWALVALIDITYPERIODCOUNT = "RenewalValidityPeriodUnits";
pub const wszINFKEY_UTF8 = "UTF8";
pub const wszINFKEY_CRLPERIODSTRING = "CRLPeriod";
pub const wszINFKEY_CRLPERIODCOUNT = "CRLPeriodUnits";
pub const wszINFKEY_CRLDELTAPERIODSTRING = "CRLDeltaPeriod";
pub const wszINFKEY_CRLDELTAPERIODCOUNT = "CRLDeltaPeriodUnits";
pub const wszINFKEY_LOADDEFAULTTEMPLATES = "LoadDefaultTemplates";
pub const wszINFKEY_ENABLEKEYCOUNTING = "EnableKeyCounting";
pub const wszINFKEY_FORCEUTF8 = "ForceUTF8";
pub const wszINFKEY_ALTERNATESIGNATUREALGORITHM = "AlternateSignatureAlgorithm";
pub const wszINFKEY_SHOWALLCSPS = "ShowAllCSPs";
pub const wszINFKEY_CRITICAL = "Critical";
pub const wszINFKEY_EMPTY = "Empty";
pub const wszINFKEY_CCDPSYNCDELTATIME = "SyncDeltaTime";
pub const wszINFSECTION_CAPOLICY = "CAPolicy";
pub const wszINFSECTION_POLICYSTATEMENT = "PolicyStatementExtension";
pub const wszINFSECTION_APPLICATIONPOLICYSTATEMENT = "ApplicationPolicyStatementExtension";
pub const wszINFKEY_POLICIES = "Policies";
pub const wszINFKEY_OID = "OID";
pub const wszINFKEY_NOTICE = "Notice";
pub const wszINFKEY_FLAGS = "Flags";
pub const wszINFSECTION_REQUESTATTRIBUTES = "RequestAttributes";
pub const wszINFSECTION_NAMECONSTRAINTS = "NameConstraintsExtension";
pub const wszINFKEY_INCLUDE = "Include";
pub const wszINFKEY_EXCLUDE = "Exclude";
pub const wszINFKEY_SUBTREE = "SubTree";
pub const wszINFKEY_UPN = "UPN";
pub const wszINFKEY_EMAIL = "EMail";
pub const wszINFKEY_DNS = "DNS";
pub const wszINFKEY_DIRECTORYNAME = "DirectoryName";
pub const wszINFKEY_URL = "URL";
pub const wszINFKEY_IPADDRESS = "IPAddress";
pub const wszINFKEY_REGISTEREDID = "RegisteredId";
pub const wszINFKEY_OTHERNAME = "OtherName";
pub const wszINFSECTION_POLICYMAPPINGS = "PolicyMappingsExtension";
pub const wszINFSECTION_APPLICATIONPOLICYMAPPINGS = "ApplicationPolicyMappingsExtension";
pub const wszINFSECTION_POLICYCONSTRAINTS = "PolicyConstraintsExtension";
pub const wszINFSECTION_APPLICATIONPOLICYCONSTRAINTS = "ApplicationPolicyConstraintsExtension";
pub const wszINFKEY_REQUIREEXPLICITPOLICY = "RequireExplicitPolicy";
pub const wszINFKEY_INHIBITPOLICYMAPPING = "InhibitPolicyMapping";
pub const wszINFSECTION_BASICCONSTRAINTS = "BasicConstraintsExtension";
pub const wszINFKEY_PATHLENGTH = "PathLength";
pub const wszINFSECTION_EXTENSIONS = "Extensions";
pub const wszINFSECTION_PROPERTIES = "Properties";
pub const wszINFKEY_CONTINUE = "_continue_";
pub const wszINFSECTION_NEWREQUEST = "NewRequest";
pub const wszINFKEY_SUBJECT = "Subject";
pub const wszINFKEY_SUBJECTNAMEFLAGS = "SubjectNameFlags";
pub const wszINFKEY_X500NAMEFLAGS = "X500NameFlags";
pub const wszINFKEY_EXPORTABLE = "Exportable";
pub const wszINFKEY_EXPORTABLEENCRYPTED = "ExportableEncrypted";
pub const wszINFKEY_HASHALGORITHM = "HashAlgorithm";
pub const wszINFKEY_KEYALGORITHM = "KeyAlgorithm";
pub const wszINFKEY_KEYALGORITHMPARMETERS = "KeyAlgorithmParameters";
pub const wszINFKEY_KEYCONTAINER = "KeyContainer";
pub const wszINFKEY_READERNAME = "ReaderName";
pub const wszINFKEY_KEYLENGTH = "KeyLength";
pub const wszINFKEY_LEGACYKEYSPEC = "KeySpec";
pub const wszINFKEY_KEYUSAGEEXTENSION = "KeyUsage";
pub const wszINFKEY_KEYUSAGEPROPERTY = "KeyUsageProperty";
pub const wszINFKEY_MACHINEKEYSET = "MachineKeySet";
pub const wszINFKEY_PRIVATEKEYARCHIVE = "PrivateKeyArchive";
pub const wszINFKEY_ENCRYPTIONALGORITHM = "EncryptionAlgorithm";
pub const wszINFKEY_ENCRYPTIONLENGTH = "EncryptionLength";
pub const wszINFKEY_PROVIDERNAME = "ProviderName";
pub const wszINFKEY_PROVIDERTYPE = "ProviderType";
pub const wszINFKEY_RENEWALCERT = "RenewalCert";
pub const wszINFKEY_REQUESTTYPE = "RequestType";
pub const wszINFKEY_SECURITYDESCRIPTOR = "SecurityDescriptor";
pub const wszINFKEY_SILENT = "Silent";
pub const wszINFKEY_SMIME = "SMIME";
pub const wszINFKEY_SUPPRESSDEFAULTS = "SuppressDefaults";
pub const wszINFKEY_USEEXISTINGKEY = "UseExistingKeySet";
pub const wszINFKEY_USERPROTECTED = "UserProtected";
pub const wszINFKEY_KEYPROTECTION = "KeyProtection";
pub const wszINFKEY_UICONTEXTMESSAGE = "UIContextMessage";
pub const wszINFKEY_FRIENDLYNAME = "FriendlyName";
pub const wszINFKEY_NOTBEFORE = "NotBefore";
pub const wszINFKEY_NOTAFTER = "NotAfter";
pub const wszINFKEY_ATTESTPRIVATEKEY = "AttestPrivateKey";
pub const wszINFKEY_PUBLICKEY = "PublicKey";
pub const wszINFKEY_PUBLICKEYPARAMETERS = "PublicKeyParameters";
pub const wszINFKEY_ECCKEYPARAMETERS = "EccKeyParameters";
pub const wszINFKEY_ECCKEYPARAMETERS_P = "EccKeyParameters_P";
pub const wszINFKEY_ECCKEYPARAMETERS_A = "EccKeyParameters_A";
pub const wszINFKEY_ECCKEYPARAMETERS_B = "EccKeyParameters_B";
pub const wszINFKEY_ECCKEYPARAMETERS_SEED = "EccKeyParameters_Seed";
pub const wszINFKEY_ECCKEYPARAMETERS_BASE = "EccKeyParameters_Base";
pub const wszINFKEY_ECCKEYPARAMETERS_ORDER = "EccKeyParameters_Order";
pub const wszINFKEY_ECCKEYPARAMETERS_COFACTOR = "EccKeyParameters_Cofactor";
pub const wszINFKEY_ECCKEYPARAMETERSTYPE = "EccKeyParametersType";
pub const wszINFKEY_SERIALNUMBER = "SerialNumber";
pub const wszINFKEY_CATHUMBPRINT = "CAThumbprint";
pub const wszINFKEY_CACERTS = "CACerts";
pub const wszINFKEY_CACAPABILITIES = "CACapabilities";
pub const wszINFKEY_CHALLENGEPASSWORD = "ChallengePassword";
pub const wszINFVALUE_REQUESTTYPE_PKCS10 = "PKCS10";
pub const wszINFVALUE_REQUESTTYPE_PKCS7 = "PKCS7";
pub const wszINFVALUE_REQUESTTYPE_CMC = "CMC";
pub const wszINFVALUE_REQUESTTYPE_CERT = "Cert";
pub const wszINFVALUE_REQUESTTYPE_SCEP = "SCEP";
pub const wszINFVALUE_ENDORSEMENTKEY = "EndorsementKey";
pub const wszREGEXITSMTPKEY = "SMTP";
pub const wszREGEXITSMTPTEMPLATES = "Templates";
pub const wszREGEXITSMTPEVENTFILTER = "EventFilter";
pub const wszREGEXITSMTPSERVER = "SMTPServer";
pub const wszREGEXITSMTPAUTHENTICATE = "SMTPAuthenticate";
pub const wszREGEXITDENIEDKEY = "Denied";
pub const wszREGEXITISSUEDKEY = "Issued";
pub const wszREGEXITPENDINGKEY = "Pending";
pub const wszREGEXITREVOKEDKEY = "Revoked";
pub const wszREGEXITCRLISSUEDKEY = "CRLIssued";
pub const wszREGEXITSHUTDOWNKEY = "Shutdown";
pub const wszREGEXITSTARTUPKEY = "Startup";
pub const wszREGEXITIMPORTEDKEY = "Imported";
pub const wszREGEXITSMTPFROM = "From";
pub const wszREGEXITSMTPTO = "To";
pub const wszREGEXITSMTPCC = "Cc";
pub const wszREGEXITTITLEFORMAT = "TitleFormat";
pub const wszREGEXITTITLEARG = "TitleArg";
pub const wszREGEXITBODYFORMAT = "BodyFormat";
pub const wszREGEXITBODYARG = "BodyArg";
pub const wszREGEXITPROPNOTFOUND = "???";
pub const wszREGKEYENROLLMENT = "Software\\Microsoft\\Cryptography\\AutoEnrollment";
pub const wszREGKEYGROUPPOLICYENROLLMENT = "Software\\Policies\\Microsoft\\Cryptography\\AutoEnrollment";
pub const wszREGMAXPENDINGREQUESTDAYS = "MaxPendingRequestDays";
pub const wszREGAELOGLEVEL_OLD = "AEEventLogLevel";
pub const wszREGENROLLFLAGS = "EnrollFlags";
pub const wszREGVERIFYFLAGS = "VerifyFlags";
pub const wszREGUNICODE = "Unicode";
pub const wszREGAIKCLOUDCAURL = "AIKCloudCAURL";
pub const wszREGAIKKEYALGORITHM = "AIKKeyAlgorithm";
pub const wszREGAIKKEYLENGTH = "AIKKeyLength";
pub const wszREGPRESERVESCEPDUMMYCERTS = "PreserveSCEPDummyCerts";
pub const wszREGALLPROVIDERS = "All";
pub const TP_MACHINEPOLICY = @as(u32, 1);
pub const wszREGKEYREPAIR = "KeyRepair";
pub const KR_ENABLE_MACHINE = @as(u32, 1);
pub const KR_ENABLE_USER = @as(u32, 2);
pub const wszPROPDISTINGUISHEDNAME = "DistinguishedName";
pub const wszPROPRAWNAME = "RawName";
pub const wszPROPCOUNTRY = "Country";
pub const wszPROPORGANIZATION = "Organization";
pub const wszPROPORGUNIT = "OrgUnit";
pub const wszPROPCOMMONNAME = "CommonName";
pub const wszPROPLOCALITY = "Locality";
pub const wszPROPSTATE = "State";
pub const wszPROPTITLE = "Title";
pub const wszPROPGIVENNAME = "GivenName";
pub const wszPROPINITIALS = "Initials";
pub const wszPROPSURNAME = "SurName";
pub const wszPROPDOMAINCOMPONENT = "DomainComponent";
pub const wszPROPEMAIL = "EMail";
pub const wszPROPSTREETADDRESS = "StreetAddress";
pub const wszPROPUNSTRUCTUREDNAME = "UnstructuredName";
pub const wszPROPUNSTRUCTUREDADDRESS = "UnstructuredAddress";
pub const wszPROPDEVICESERIALNUMBER = "DeviceSerialNumber";
pub const wszPROPSUBJECTDOT = "Subject.";
pub const wszPROPREQUESTDOT = "Request.";
pub const wszPROPREQUESTREQUESTID = "RequestID";
pub const wszPROPREQUESTRAWREQUEST = "RawRequest";
pub const wszPROPREQUESTRAWARCHIVEDKEY = "RawArchivedKey";
pub const wszPROPREQUESTARCHIVEDKEY = "ArchivedKey";
pub const wszPROPREQUESTKEYRECOVERYHASHES = "KeyRecoveryHashes";
pub const wszPROPREQUESTRAWOLDCERTIFICATE = "RawOldCertificate";
pub const wszPROPREQUESTATTRIBUTES = "RequestAttributes";
pub const wszPROPREQUESTTYPE = "RequestType";
pub const wszPROPREQUESTFLAGS = "RequestFlags";
pub const wszPROPREQUESTSTATUSCODE = "StatusCode";
pub const wszPROPREQUESTDISPOSITION = "Disposition";
pub const wszPROPREQUESTDISPOSITIONMESSAGE = "DispositionMessage";
pub const wszPROPREQUESTSUBMITTEDWHEN = "SubmittedWhen";
pub const wszPROPREQUESTRESOLVEDWHEN = "ResolvedWhen";
pub const wszPROPREQUESTREVOKEDWHEN = "RevokedWhen";
pub const wszPROPREQUESTREVOKEDEFFECTIVEWHEN = "RevokedEffectiveWhen";
pub const wszPROPREQUESTREVOKEDREASON = "RevokedReason";
pub const wszPROPREQUESTERNAME = "RequesterName";
pub const wszPROPCALLERNAME = "CallerName";
pub const wszPROPSIGNERPOLICIES = "SignerPolicies";
pub const wszPROPSIGNERAPPLICATIONPOLICIES = "SignerApplicationPolicies";
pub const wszPROPOFFICER = "Officer";
pub const wszPROPPUBLISHEXPIREDCERTINCRL = "PublishExpiredCertInCRL";
pub const wszPROPREQUESTERNAMEFROMOLDCERTIFICATE = "RequesterNameFromOldCertificate";
pub const wszPROPATTESTATIONCHALLENGE = "AttestationChallenge";
pub const wszPROPENDORSEMENTKEYHASH = "EndorsementKeyHash";
pub const wszPROPENDORSEMENTCERTIFICATEHASH = "EndorsementCertificateHash";
pub const wszPROPRAWPRECERTIFICATE = "RawPrecertificate";
pub const wszPROPCHALLENGE = "Challenge";
pub const wszPROPEXPECTEDCHALLENGE = "ExpectedChallenge";
pub const wszPROPDISPOSITION = "Disposition";
pub const wszPROPDISPOSITIONDENY = "Deny";
pub const wszPROPDISPOSITIONPENDING = "Pending";
pub const wszPROPVALIDITYPERIODSTRING = "ValidityPeriod";
pub const wszPROPVALIDITYPERIODCOUNT = "ValidityPeriodUnits";
pub const wszPROPEXPIRATIONDATE = "ExpirationDate";
pub const wszPROPCERTTYPE = "CertType";
pub const wszPROPCERTTEMPLATE = "CertificateTemplate";
pub const wszPROPCERTUSAGE = "CertificateUsage";
pub const wszPROPREQUESTOSVERSION = "RequestOSVersion";
pub const wszPROPREQUESTCSPPROVIDER = "RequestCSPProvider";
pub const wszPROPEXITCERTFILE = "CertFile";
pub const wszPROPCLIENTBROWSERMACHINE = "cbm";
pub const wszPROPCERTCLIENTMACHINE = "ccm";
pub const wszPROPCLIENTDCDNS = "cdc";
pub const wszPROPREQUESTMACHINEDNS = "rmd";
pub const wszPROPSUBJECTALTNAME2 = "san";
pub const wszPROPDNS = "dns";
pub const wszPROPDN = "dn";
pub const wszPROPURL = "url";
pub const wszPROPIPADDRESS = "ipaddress";
pub const wszPROPGUID = "guid";
pub const wszPROPOID = "oid";
pub const wszPROPUPN = "upn";
pub const szPROPASNTAG = "{asn}";
pub const wszPROPCRITICALTAG = "{critical}";
pub const wszPROPUTF8TAG = "{utf8}";
pub const wszPROPOCTETTAG = "{octet}";
pub const wszPROPHEXTAG = "{hex}";
pub const wszPROPTEXTTAG = "{text}";
pub const wszPROPDECIMALTAG = "{decimal}";
pub const wszPROPFILETAG = "{file}";
pub const wszAT_EKCERTINF = "@EKCert";
pub const wszAT_TESTROOT = "@TestRoot";
pub const wszPROPCATYPE = "CAType";
pub const wszPROPSANITIZEDCANAME = "SanitizedCAName";
pub const wszPROPSANITIZEDSHORTNAME = "SanitizedShortName";
pub const wszPROPMACHINEDNSNAME = "MachineDNSName";
pub const wszPROPMODULEREGLOC = "ModuleRegistryLocation";
pub const wszPROPUSEDS = "fUseDS";
pub const wszPROPDELTACRLSDISABLED = "fDeltaCRLsDisabled";
pub const wszPROPSERVERUPGRADED = "fServerUpgraded";
pub const wszPROPCONFIGDN = "ConfigDN";
pub const wszPROPDOMAINDN = "DomainDN";
pub const wszPROPLOGLEVEL = "LogLevel";
pub const wszPROPSESSIONCOUNT = "SessionCount";
pub const wszPROPTEMPLATECHANGESEQUENCENUMBER = "TemplateChangeSequenceNumber";
pub const wszPROPVOLATILEMODE = "VolatileMode";
pub const wszLOCALIZEDTIMEPERIODUNITS = "LocalizedTimePeriodUnits";
pub const wszPROPREQUESTERCAACCESS = "RequesterCAAccess";
pub const wszPROPUSERDN = "UserDN";
pub const wszPROPKEYARCHIVED = "KeyArchived";
pub const wszPROPCERTCOUNT = "CertCount";
pub const wszPROPRAWCACERTIFICATE = "RawCACertificate";
pub const wszPROPCERTSTATE = "CertState";
pub const wszPROPCERTSUFFIX = "CertSuffix";
pub const wszPROPRAWCRL = "RawCRL";
pub const wszPROPRAWDELTACRL = "RawDeltaCRL";
pub const wszPROPCRLINDEX = "CRLIndex";
pub const wszPROPCRLSTATE = "CRLState";
pub const wszPROPCRLSUFFIX = "CRLSuffix";
pub const wszPROPEVENTLOGTERSE = "EventLogTerse";
pub const wszPROPEVENTLOGERROR = "EventLogError";
pub const wszPROPEVENTLOGWARNING = "EventLogWarning";
pub const wszPROPEVENTLOGVERBOSE = "EventLogVerbose";
pub const wszPROPEVENTLOGEXHAUSTIVE = "EventLogExhaustive";
pub const wszPROPDCNAME = "DCName";
pub const wszPROPCROSSFOREST = "CrossForest";
pub const wszPROPREQUESTERSAMNAME = "RequesterSAMName";
pub const wszPROPREQUESTERUPN = "RequesterUPN";
pub const wszPROPREQUESTERDN = "RequesterDN";
pub const wszPROPSEAUDITID = "SEAuditId";
pub const wszPROPSEAUDITFILTER = "SEAuditFilter";
pub const wszPROPCERTIFICATEREQUESTID = "RequestID";
pub const wszPROPRAWCERTIFICATE = "RawCertificate";
pub const wszPROPCERTIFICATEHASH = "CertificateHash";
pub const wszPROPCERTIFICATETEMPLATE = "CertificateTemplate";
pub const wszPROPCERTIFICATEENROLLMENTFLAGS = "EnrollmentFlags";
pub const wszPROPCERTIFICATEGENERALFLAGS = "GeneralFlags";
pub const wszPROPCERTIFICATEPRIVATEKEYFLAGS = "PrivatekeyFlags";
pub const wszPROPCERTIFICATESERIALNUMBER = "SerialNumber";
pub const wszPROPCERTIFICATENOTBEFOREDATE = "NotBefore";
pub const wszPROPCERTIFICATENOTAFTERDATE = "NotAfter";
pub const wszPROPCERTIFICATESUBJECTKEYIDENTIFIER = "SubjectKeyIdentifier";
pub const wszPROPCERTIFICATERAWPUBLICKEY = "RawPublicKey";
pub const wszPROPCERTIFICATEPUBLICKEYLENGTH = "PublicKeyLength";
pub const wszPROPCERTIFICATEPUBLICKEYALGORITHM = "PublicKeyAlgorithm";
pub const wszPROPCERTIFICATERAWPUBLICKEYALGORITHMPARAMETERS = "RawPublicKeyAlgorithmParameters";
pub const wszPROPCERTIFICATEUPN = "UPN";
pub const wszPROPCERTIFICATETYPE = "CertificateType";
pub const wszPROPCERTIFICATERAWSMIMECAPABILITIES = "RawSMIMECapabilities";
pub const wszPROPNAMETYPE = "NameType";
pub const EXTENSION_CRITICAL_FLAG = @as(u32, 1);
pub const EXTENSION_DISABLE_FLAG = @as(u32, 2);
pub const EXTENSION_DELETE_FLAG = @as(u32, 4);
pub const EXTENSION_POLICY_MASK = @as(u32, 65535);
pub const EXTENSION_ORIGIN_REQUEST = @as(u32, 65536);
pub const EXTENSION_ORIGIN_POLICY = @as(u32, 131072);
pub const EXTENSION_ORIGIN_ADMIN = @as(u32, 196608);
pub const EXTENSION_ORIGIN_SERVER = @as(u32, 262144);
pub const EXTENSION_ORIGIN_RENEWALCERT = @as(u32, 327680);
pub const EXTENSION_ORIGIN_IMPORTEDCERT = @as(u32, 393216);
pub const EXTENSION_ORIGIN_PKCS7 = @as(u32, 458752);
pub const EXTENSION_ORIGIN_CMC = @as(u32, 524288);
pub const EXTENSION_ORIGIN_CACERT = @as(u32, 589824);
pub const EXTENSION_ORIGIN_MASK = @as(u32, 983040);
pub const wszPROPEXTREQUESTID = "ExtensionRequestId";
pub const wszPROPEXTNAME = "ExtensionName";
pub const wszPROPEXTFLAGS = "ExtensionFlags";
pub const wszPROPEXTRAWVALUE = "ExtensionRawValue";
pub const wszPROPATTRIBREQUESTID = "AttributeRequestId";
pub const wszPROPATTRIBNAME = "AttributeName";
pub const wszPROPATTRIBVALUE = "AttributeValue";
pub const wszPROPCRLROWID = "CRLRowId";
pub const wszPROPCRLNUMBER = "CRLNumber";
pub const wszPROPCRLMINBASE = "CRLMinBase";
pub const wszPROPCRLNAMEID = "CRLNameId";
pub const wszPROPCRLCOUNT = "CRLCount";
pub const wszPROPCRLTHISUPDATE = "CRLThisUpdate";
pub const wszPROPCRLNEXTUPDATE = "CRLNextUpdate";
pub const wszPROPCRLTHISPUBLISH = "CRLThisPublish";
pub const wszPROPCRLNEXTPUBLISH = "CRLNextPublish";
pub const wszPROPCRLEFFECTIVE = "CRLEffective";
pub const wszPROPCRLPROPAGATIONCOMPLETE = "CRLPropagationComplete";
pub const wszPROPCRLLASTPUBLISHED = "CRLLastPublished";
pub const wszPROPCRLPUBLISHATTEMPTS = "CRLPublishAttempts";
pub const wszPROPCRLPUBLISHFLAGS = "CRLPublishFlags";
pub const wszPROPCRLPUBLISHSTATUSCODE = "CRLPublishStatusCode";
pub const wszPROPCRLPUBLISHERROR = "CRLPublishError";
pub const wszPROPCRLRAWCRL = "CRLRawCRL";
pub const CPF_BASE = @as(u32, 1);
pub const CPF_DELTA = @as(u32, 2);
pub const CPF_COMPLETE = @as(u32, 4);
pub const CPF_SHADOW = @as(u32, 8);
pub const CPF_CASTORE_ERROR = @as(u32, 16);
pub const CPF_BADURL_ERROR = @as(u32, 32);
pub const CPF_MANUAL = @as(u32, 64);
pub const CPF_SIGNATURE_ERROR = @as(u32, 128);
pub const CPF_LDAP_ERROR = @as(u32, 256);
pub const CPF_FILE_ERROR = @as(u32, 512);
pub const CPF_FTP_ERROR = @as(u32, 1024);
pub const CPF_HTTP_ERROR = @as(u32, 2048);
pub const CPF_POSTPONED_BASE_LDAP_ERROR = @as(u32, 4096);
pub const CPF_POSTPONED_BASE_FILE_ERROR = @as(u32, 8192);
pub const PROPTYPE_MASK = @as(u32, 255);
pub const PROPCALLER_SERVER = @as(u32, 256);
pub const PROPCALLER_POLICY = @as(u32, 512);
pub const PROPCALLER_EXIT = @as(u32, 768);
pub const PROPCALLER_ADMIN = @as(u32, 1024);
pub const PROPCALLER_REQUEST = @as(u32, 1280);
pub const PROPCALLER_MASK = @as(u32, 3840);
pub const PROPFLAGS_INDEXED = @as(u32, 65536);
pub const CR_FLG_FORCETELETEX = @as(u32, 1);
pub const CR_FLG_RENEWAL = @as(u32, 2);
pub const CR_FLG_FORCEUTF8 = @as(u32, 4);
pub const CR_FLG_CAXCHGCERT = @as(u32, 8);
pub const CR_FLG_ENROLLONBEHALFOF = @as(u32, 16);
pub const CR_FLG_SUBJECTUNMODIFIED = @as(u32, 32);
pub const CR_FLG_VALIDENCRYPTEDKEYHASH = @as(u32, 64);
pub const CR_FLG_CACROSSCERT = @as(u32, 128);
pub const CR_FLG_ENFORCEUTF8 = @as(u32, 256);
pub const CR_FLG_DEFINEDCACERT = @as(u32, 512);
pub const CR_FLG_CHALLENGEPENDING = @as(u32, 1024);
pub const CR_FLG_CHALLENGESATISFIED = @as(u32, 2048);
pub const CR_FLG_TRUSTONUSE = @as(u32, 4096);
pub const CR_FLG_TRUSTEKCERT = @as(u32, 8192);
pub const CR_FLG_TRUSTEKKEY = @as(u32, 16384);
pub const CR_FLG_PUBLISHERROR = @as(u32, 2147483648);
pub const DB_DISP_ACTIVE = @as(u32, 8);
pub const DB_DISP_PENDING = @as(u32, 9);
pub const DB_DISP_QUEUE_MAX = @as(u32, 9);
pub const DB_DISP_FOREIGN = @as(u32, 12);
pub const DB_DISP_CA_CERT = @as(u32, 15);
pub const DB_DISP_CA_CERT_CHAIN = @as(u32, 16);
pub const DB_DISP_KRA_CERT = @as(u32, 17);
pub const DB_DISP_LOG_MIN = @as(u32, 20);
pub const DB_DISP_ISSUED = @as(u32, 20);
pub const DB_DISP_REVOKED = @as(u32, 21);
pub const DB_DISP_LOG_FAILED_MIN = @as(u32, 30);
pub const DB_DISP_ERROR = @as(u32, 30);
pub const DB_DISP_DENIED = @as(u32, 31);
pub const VR_PENDING = @as(u32, 0);
pub const VR_INSTANT_OK = @as(u32, 1);
pub const VR_INSTANT_BAD = @as(u32, 2);
pub const wszCERT_TYPE = "RequestType";
pub const wszCERT_TYPE_CLIENT = "Client";
pub const wszCERT_TYPE_SERVER = "Server";
pub const wszCERT_TYPE_CODESIGN = "CodeSign";
pub const wszCERT_TYPE_CUSTOMER = "SetCustomer";
pub const wszCERT_TYPE_MERCHANT = "SetMerchant";
pub const wszCERT_TYPE_PAYMENT = "SetPayment";
pub const wszCERT_VERSION = "Version";
pub const wszCERT_VERSION_1 = "1";
pub const wszCERT_VERSION_2 = "2";
pub const wszCERT_VERSION_3 = "3";
pub const CV_OUT_HEXRAW = @as(u32, 12);
pub const CV_OUT_ENCODEMASK = @as(u32, 255);
pub const CV_OUT_NOCRLF = @as(u32, 1073741824);
pub const CV_OUT_NOCR = @as(u32, 2147483648);
pub const CVR_SEEK_NONE = @as(u32, 0);
pub const CVR_SEEK_MASK = @as(u32, 255);
pub const CVR_SEEK_NODELTA = @as(u32, 4096);
pub const CVR_SORT_NONE = @as(u32, 0);
pub const CVR_SORT_ASCEND = @as(u32, 1);
pub const CVR_SORT_DESCEND = @as(u32, 2);
pub const CV_COLUMN_EXTENSION_DEFAULT = @as(i32, -4);
pub const CV_COLUMN_ATTRIBUTE_DEFAULT = @as(i32, -5);
pub const CV_COLUMN_CRL_DEFAULT = @as(i32, -6);
pub const CV_COLUMN_LOG_REVOKED_DEFAULT = @as(i32, -7);
pub const CVRC_TABLE_MASK = @as(u32, 61440);
pub const CVRC_TABLE_SHIFT = @as(u32, 12);
pub const CRYPT_ENUM_ALL_PROVIDERS = @as(u32, 1);
pub const XEPR_ENUM_FIRST = @as(i32, -1);
pub const XEPR_DATE = @as(u32, 5);
pub const XEPR_TEMPLATENAME = @as(u32, 6);
pub const XEPR_VERSION = @as(u32, 7);
pub const XEPR_V1TEMPLATENAME = @as(u32, 9);
pub const XEPR_V2TEMPLATEOID = @as(u32, 16);
pub const XEKL_KEYSIZE_DEFAULT = @as(u32, 4);
pub const XECP_STRING_PROPERTY = @as(u32, 1);
pub const XECI_DISABLE = @as(u32, 0);
pub const XECI_XENROLL = @as(u32, 1);
pub const XECI_AUTOENROLL = @as(u32, 2);
pub const XECI_REQWIZARD = @as(u32, 3);
pub const XECI_CERTREQ = @as(u32, 4);
pub const wszCMM_PROP_NAME = "Name";
pub const wszCMM_PROP_DESCRIPTION = "Description";
pub const wszCMM_PROP_COPYRIGHT = "Copyright";
pub const wszCMM_PROP_FILEVER = "File Version";
pub const wszCMM_PROP_PRODUCTVER = "Product Version";
pub const wszCMM_PROP_DISPLAY_HWND = "HWND";
pub const wszCMM_PROP_ISMULTITHREADED = "IsMultiThreaded";

//--------------------------------------------------------------------------------
// Section: Types (344)
//--------------------------------------------------------------------------------
pub const CERT_VIEW_COLUMN_INDEX = enum(i32) {
    LOG_DEFAULT = -2,
    LOG_FAILED_DEFAULT = -3,
    QUEUE_DEFAULT = -1,
};
pub const CV_COLUMN_LOG_DEFAULT = CERT_VIEW_COLUMN_INDEX.LOG_DEFAULT;
pub const CV_COLUMN_LOG_FAILED_DEFAULT = CERT_VIEW_COLUMN_INDEX.LOG_FAILED_DEFAULT;
pub const CV_COLUMN_QUEUE_DEFAULT = CERT_VIEW_COLUMN_INDEX.QUEUE_DEFAULT;

pub const CERT_DELETE_ROW_FLAGS = enum(u32) {
    EXPIRED = 1,
    REQUEST_LAST_CHANGED = 2,
};
pub const CDR_EXPIRED = CERT_DELETE_ROW_FLAGS.EXPIRED;
pub const CDR_REQUEST_LAST_CHANGED = CERT_DELETE_ROW_FLAGS.REQUEST_LAST_CHANGED;

pub const FULL_RESPONSE_PROPERTY_ID = enum(u32) {
    NONE = 0,
    FULLRESPONSE = 1,
    STATUSINFOCOUNT = 2,
    BODYPARTSTRING = 3,
    STATUS = 4,
    STATUSSTRING = 5,
    OTHERINFOCHOICE = 6,
    FAILINFO = 7,
    PENDINFOTOKEN = 8,
    PENDINFOTIME = 9,
    ISSUEDCERTIFICATEHASH = 10,
    ISSUEDCERTIFICATE = 11,
    ISSUEDCERTIFICATECHAIN = 12,
    ISSUEDCERTIFICATECRLCHAIN = 13,
    ENCRYPTEDKEYHASH = 14,
    FULLRESPONSENOPKCS7 = 15,
    CAEXCHANGECERTIFICATEHASH = 16,
    CAEXCHANGECERTIFICATE = 17,
    CAEXCHANGECERTIFICATECHAIN = 18,
    CAEXCHANGECERTIFICATECRLCHAIN = 19,
    ATTESTATIONCHALLENGE = 20,
    ATTESTATIONPROVIDERNAME = 21,
};
pub const FR_PROP_NONE = FULL_RESPONSE_PROPERTY_ID.NONE;
pub const FR_PROP_FULLRESPONSE = FULL_RESPONSE_PROPERTY_ID.FULLRESPONSE;
pub const FR_PROP_STATUSINFOCOUNT = FULL_RESPONSE_PROPERTY_ID.STATUSINFOCOUNT;
pub const FR_PROP_BODYPARTSTRING = FULL_RESPONSE_PROPERTY_ID.BODYPARTSTRING;
pub const FR_PROP_STATUS = FULL_RESPONSE_PROPERTY_ID.STATUS;
pub const FR_PROP_STATUSSTRING = FULL_RESPONSE_PROPERTY_ID.STATUSSTRING;
pub const FR_PROP_OTHERINFOCHOICE = FULL_RESPONSE_PROPERTY_ID.OTHERINFOCHOICE;
pub const FR_PROP_FAILINFO = FULL_RESPONSE_PROPERTY_ID.FAILINFO;
pub const FR_PROP_PENDINFOTOKEN = FULL_RESPONSE_PROPERTY_ID.PENDINFOTOKEN;
pub const FR_PROP_PENDINFOTIME = FULL_RESPONSE_PROPERTY_ID.PENDINFOTIME;
pub const FR_PROP_ISSUEDCERTIFICATEHASH = FULL_RESPONSE_PROPERTY_ID.ISSUEDCERTIFICATEHASH;
pub const FR_PROP_ISSUEDCERTIFICATE = FULL_RESPONSE_PROPERTY_ID.ISSUEDCERTIFICATE;
pub const FR_PROP_ISSUEDCERTIFICATECHAIN = FULL_RESPONSE_PROPERTY_ID.ISSUEDCERTIFICATECHAIN;
pub const FR_PROP_ISSUEDCERTIFICATECRLCHAIN = FULL_RESPONSE_PROPERTY_ID.ISSUEDCERTIFICATECRLCHAIN;
pub const FR_PROP_ENCRYPTEDKEYHASH = FULL_RESPONSE_PROPERTY_ID.ENCRYPTEDKEYHASH;
pub const FR_PROP_FULLRESPONSENOPKCS7 = FULL_RESPONSE_PROPERTY_ID.FULLRESPONSENOPKCS7;
pub const FR_PROP_CAEXCHANGECERTIFICATEHASH = FULL_RESPONSE_PROPERTY_ID.CAEXCHANGECERTIFICATEHASH;
pub const FR_PROP_CAEXCHANGECERTIFICATE = FULL_RESPONSE_PROPERTY_ID.CAEXCHANGECERTIFICATE;
pub const FR_PROP_CAEXCHANGECERTIFICATECHAIN = FULL_RESPONSE_PROPERTY_ID.CAEXCHANGECERTIFICATECHAIN;
pub const FR_PROP_CAEXCHANGECERTIFICATECRLCHAIN = FULL_RESPONSE_PROPERTY_ID.CAEXCHANGECERTIFICATECRLCHAIN;
pub const FR_PROP_ATTESTATIONCHALLENGE = FULL_RESPONSE_PROPERTY_ID.ATTESTATIONCHALLENGE;
pub const FR_PROP_ATTESTATIONPROVIDERNAME = FULL_RESPONSE_PROPERTY_ID.ATTESTATIONPROVIDERNAME;

pub const CVRC_COLUMN = enum(u32) {
    SCHEMA = 0,
    RESULT = 1,
    VALUE = 2,
    MASK = 4095,
};
pub const CVRC_COLUMN_SCHEMA = CVRC_COLUMN.SCHEMA;
pub const CVRC_COLUMN_RESULT = CVRC_COLUMN.RESULT;
pub const CVRC_COLUMN_VALUE = CVRC_COLUMN.VALUE;
pub const CVRC_COLUMN_MASK = CVRC_COLUMN.MASK;

pub const CERT_IMPORT_FLAGS = enum(u32) {
    ASE64HEADER = 0,
    ASE64 = 1,
    INARY = 2,
};
pub const CR_IN_BASE64HEADER = CERT_IMPORT_FLAGS.ASE64HEADER;
pub const CR_IN_BASE64 = CERT_IMPORT_FLAGS.ASE64;
pub const CR_IN_BINARY = CERT_IMPORT_FLAGS.INARY;

pub const CERT_GET_CONFIG_FLAGS = enum(u32) {
    DEFAULTCONFIG = 0,
    FIRSTCONFIG = 2,
    LOCALACTIVECONFIG = 4,
    LOCALCONFIG = 3,
    UIPICKCONFIG = 1,
    UIPICKCONFIGSKIPLOCALCA = 5,
};
pub const CC_DEFAULTCONFIG = CERT_GET_CONFIG_FLAGS.DEFAULTCONFIG;
pub const CC_FIRSTCONFIG = CERT_GET_CONFIG_FLAGS.FIRSTCONFIG;
pub const CC_LOCALACTIVECONFIG = CERT_GET_CONFIG_FLAGS.LOCALACTIVECONFIG;
pub const CC_LOCALCONFIG = CERT_GET_CONFIG_FLAGS.LOCALCONFIG;
pub const CC_UIPICKCONFIG = CERT_GET_CONFIG_FLAGS.UIPICKCONFIG;
pub const CC_UIPICKCONFIGSKIPLOCALCA = CERT_GET_CONFIG_FLAGS.UIPICKCONFIGSKIPLOCALCA;

pub const ENUM_CERT_COLUMN_VALUE_FLAGS = enum(u32) {
    BASE64 = 1,
    BASE64HEADER = 0,
    BASE64REQUESTHEADER = 3,
    BASE64X509CRLHEADER = 9,
    BINARY = 2,
    HEX = 4,
    HEXADDR = 10,
    HEXASCII = 5,
    HEXASCIIADDR = 11,
};
pub const CV_OUT_BASE64 = ENUM_CERT_COLUMN_VALUE_FLAGS.BASE64;
pub const CV_OUT_BASE64HEADER = ENUM_CERT_COLUMN_VALUE_FLAGS.BASE64HEADER;
pub const CV_OUT_BASE64REQUESTHEADER = ENUM_CERT_COLUMN_VALUE_FLAGS.BASE64REQUESTHEADER;
pub const CV_OUT_BASE64X509CRLHEADER = ENUM_CERT_COLUMN_VALUE_FLAGS.BASE64X509CRLHEADER;
pub const CV_OUT_BINARY = ENUM_CERT_COLUMN_VALUE_FLAGS.BINARY;
pub const CV_OUT_HEX = ENUM_CERT_COLUMN_VALUE_FLAGS.HEX;
pub const CV_OUT_HEXADDR = ENUM_CERT_COLUMN_VALUE_FLAGS.HEXADDR;
pub const CV_OUT_HEXASCII = ENUM_CERT_COLUMN_VALUE_FLAGS.HEXASCII;
pub const CV_OUT_HEXASCIIADDR = ENUM_CERT_COLUMN_VALUE_FLAGS.HEXASCIIADDR;

pub const PENDING_REQUEST_DESIRED_PROPERTY = enum(u32) {
    CADNS = 1,
    CAFRIENDLYNAME = 3,
    CANAME = 2,
    HASH = 8,
    REQUESTID = 4,
};
pub const XEPR_CADNS = PENDING_REQUEST_DESIRED_PROPERTY.CADNS;
pub const XEPR_CAFRIENDLYNAME = PENDING_REQUEST_DESIRED_PROPERTY.CAFRIENDLYNAME;
pub const XEPR_CANAME = PENDING_REQUEST_DESIRED_PROPERTY.CANAME;
pub const XEPR_HASH = PENDING_REQUEST_DESIRED_PROPERTY.HASH;
pub const XEPR_REQUESTID = PENDING_REQUEST_DESIRED_PROPERTY.REQUESTID;

pub const CERTADMIN_GET_ROLES_FLAGS = packed struct(u32) {
    ADMIN: u1 = 0,
    OFFICER: u1 = 0,
    AUDITOR: u1 = 0,
    OPERATOR: u1 = 0,
    _4: u1 = 0,
    _5: u1 = 0,
    _6: u1 = 0,
    _7: u1 = 0,
    READ: u1 = 0,
    ENROLL: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const CA_ACCESS_ADMIN = CERTADMIN_GET_ROLES_FLAGS{ .ADMIN = 1 };
pub const CA_ACCESS_AUDITOR = CERTADMIN_GET_ROLES_FLAGS{ .AUDITOR = 1 };
pub const CA_ACCESS_ENROLL = CERTADMIN_GET_ROLES_FLAGS{ .ENROLL = 1 };
pub const CA_ACCESS_OFFICER = CERTADMIN_GET_ROLES_FLAGS{ .OFFICER = 1 };
pub const CA_ACCESS_OPERATOR = CERTADMIN_GET_ROLES_FLAGS{ .OPERATOR = 1 };
pub const CA_ACCESS_READ = CERTADMIN_GET_ROLES_FLAGS{ .READ = 1 };

pub const CR_DISP = enum(u32) {
    DENIED = 2,
    ERROR = 1,
    INCOMPLETE = 0,
    ISSUED = 3,
    ISSUED_OUT_OF_BAND = 4,
    UNDER_SUBMISSION = 5,
};
pub const CR_DISP_DENIED = CR_DISP.DENIED;
pub const CR_DISP_ERROR = CR_DISP.ERROR;
pub const CR_DISP_INCOMPLETE = CR_DISP.INCOMPLETE;
pub const CR_DISP_ISSUED = CR_DISP.ISSUED;
pub const CR_DISP_ISSUED_OUT_OF_BAND = CR_DISP.ISSUED_OUT_OF_BAND;
pub const CR_DISP_UNDER_SUBMISSION = CR_DISP.UNDER_SUBMISSION;

pub const XEKL_KEYSIZE = enum(u32) {
    MIN = 1,
    MAX = 2,
    INC = 3,
};
pub const XEKL_KEYSIZE_MIN = XEKL_KEYSIZE.MIN;
pub const XEKL_KEYSIZE_MAX = XEKL_KEYSIZE.MAX;
pub const XEKL_KEYSIZE_INC = XEKL_KEYSIZE.INC;

pub const CERT_CREATE_REQUEST_FLAGS = enum(u32) {
    CMC = 3,
    PKCS10_V1_5 = 4,
    PKCS10_V2_0 = 1,
    PKCS7 = 2,
};
pub const XECR_CMC = CERT_CREATE_REQUEST_FLAGS.CMC;
pub const XECR_PKCS10_V1_5 = CERT_CREATE_REQUEST_FLAGS.PKCS10_V1_5;
pub const XECR_PKCS10_V2_0 = CERT_CREATE_REQUEST_FLAGS.PKCS10_V2_0;
pub const XECR_PKCS7 = CERT_CREATE_REQUEST_FLAGS.PKCS7;

pub const CERT_EXIT_EVENT_MASK = packed struct(u32) {
    CERTISSUED: u1 = 0,
    CERTPENDING: u1 = 0,
    CERTDENIED: u1 = 0,
    CERTREVOKED: u1 = 0,
    CERTRETRIEVEPENDING: u1 = 0,
    CRLISSUED: u1 = 0,
    SHUTDOWN: u1 = 0,
    _7: u1 = 0,
    _8: u1 = 0,
    _9: u1 = 0,
    _10: u1 = 0,
    _11: u1 = 0,
    _12: u1 = 0,
    _13: u1 = 0,
    _14: u1 = 0,
    _15: u1 = 0,
    _16: u1 = 0,
    _17: u1 = 0,
    _18: u1 = 0,
    _19: u1 = 0,
    _20: u1 = 0,
    _21: u1 = 0,
    _22: u1 = 0,
    _23: u1 = 0,
    _24: u1 = 0,
    _25: u1 = 0,
    _26: u1 = 0,
    _27: u1 = 0,
    _28: u1 = 0,
    _29: u1 = 0,
    _30: u1 = 0,
    _31: u1 = 0,
};
pub const EXITEVENT_CERTDENIED = CERT_EXIT_EVENT_MASK{ .CERTDENIED = 1 };
pub const EXITEVENT_CERTISSUED = CERT_EXIT_EVENT_MASK{ .CERTISSUED = 1 };
pub const EXITEVENT_CERTPENDING = CERT_EXIT_EVENT_MASK{ .CERTPENDING = 1 };
pub const EXITEVENT_CERTRETRIEVEPENDING = CERT_EXIT_EVENT_MASK{ .CERTRETRIEVEPENDING = 1 };
pub const EXITEVENT_CERTREVOKED = CERT_EXIT_EVENT_MASK{ .CERTREVOKED = 1 };
pub const EXITEVENT_CRLISSUED = CERT_EXIT_EVENT_MASK{ .CRLISSUED = 1 };
pub const EXITEVENT_SHUTDOWN = CERT_EXIT_EVENT_MASK{ .SHUTDOWN = 1 };

pub const ADDED_CERT_TYPE = enum(u32) {
    @"1" = 1,
    @"2" = 2,
};
pub const XECT_EXTENSION_V1 = ADDED_CERT_TYPE.@"1";
pub const XECT_EXTENSION_V2 = ADDED_CERT_TYPE.@"2";

pub const CVRC_TABLE = enum(u32) {
    ATTRIBUTES = 16384,
    CRL = 20480,
    EXTENSIONS = 12288,
    REQCERT = 0,
};
pub const CVRC_TABLE_ATTRIBUTES = CVRC_TABLE.ATTRIBUTES;
pub const CVRC_TABLE_CRL = CVRC_TABLE.CRL;
pub const CVRC_TABLE_EXTENSIONS = CVRC_TABLE.EXTENSIONS;
pub const CVRC_TABLE_REQCERT = CVRC_TABLE.REQCERT;

pub const CERT_PROPERTY_TYPE = enum(u32) {
    BINARY = 3,
    DATE = 2,
    LONG = 1,
    STRING = 4,
};
pub const PROPTYPE_BINARY = CERT_PROPERTY_TYPE.BINARY;
pub const PROPTYPE_DATE = CERT_PROPERTY_TYPE.DATE;
pub const PROPTYPE_LONG = CERT_PROPERTY_TYPE.LONG;
pub const PROPTYPE_STRING = CERT_PROPERTY_TYPE.STRING;

pub const CERT_ALT_NAME = enum(u32) {
    RFC822_NAME = 2,
    DNS_NAME = 3,
    URL = 7,
    REGISTERED_ID = 9,
    DIRECTORY_NAME = 5,
    IP_ADDRESS = 8,
    OTHER_NAME = 1,
};
pub const CERT_ALT_NAME_RFC822_NAME = CERT_ALT_NAME.RFC822_NAME;
pub const CERT_ALT_NAME_DNS_NAME = CERT_ALT_NAME.DNS_NAME;
pub const CERT_ALT_NAME_URL = CERT_ALT_NAME.URL;
pub const CERT_ALT_NAME_REGISTERED_ID = CERT_ALT_NAME.REGISTERED_ID;
pub const CERT_ALT_NAME_DIRECTORY_NAME = CERT_ALT_NAME.DIRECTORY_NAME;
pub const CERT_ALT_NAME_IP_ADDRESS = CERT_ALT_NAME.IP_ADDRESS;
pub const CERT_ALT_NAME_OTHER_NAME = CERT_ALT_NAME.OTHER_NAME;

pub const CSBACKUP_TYPE = enum(u32) {
    FULL = 1,
    LOGS_ONLY = 2,
};
pub const CSBACKUP_TYPE_FULL = CSBACKUP_TYPE.FULL;
pub const CSBACKUP_TYPE_LOGS_ONLY = CSBACKUP_TYPE.LOGS_ONLY;

pub const XEKL_KEYSPEC = enum(u32) {
    KEYX = 1,
    SIG = 2,
};
pub const XEKL_KEYSPEC_KEYX = XEKL_KEYSPEC.KEYX;
pub const XEKL_KEYSPEC_SIG = XEKL_KEYSPEC.SIG;

pub const CERT_REQUEST_OUT_TYPE = enum(u32) {
    ASE64HEADER = 0,
    ASE64 = 1,
    INARY = 2,
};
pub const CR_OUT_BASE64HEADER = CERT_REQUEST_OUT_TYPE.ASE64HEADER;
pub const CR_OUT_BASE64 = CERT_REQUEST_OUT_TYPE.ASE64;
pub const CR_OUT_BINARY = CERT_REQUEST_OUT_TYPE.INARY;

pub const CERT_VIEW_SEEK_OPERATOR_FLAGS = enum(u32) {
    EQ = 1,
    LE = 4,
    LT = 2,
    GE = 8,
    GT = 16,
};
pub const CVR_SEEK_EQ = CERT_VIEW_SEEK_OPERATOR_FLAGS.EQ;
pub const CVR_SEEK_LE = CERT_VIEW_SEEK_OPERATOR_FLAGS.LE;
pub const CVR_SEEK_LT = CERT_VIEW_SEEK_OPERATOR_FLAGS.LT;
pub const CVR_SEEK_GE = CERT_VIEW_SEEK_OPERATOR_FLAGS.GE;
pub const CVR_SEEK_GT = CERT_VIEW_SEEK_OPERATOR_FLAGS.GT;

const CLSID_CCertAdmin_Value = Guid.initString("37eabaf0-7fb6-11d0-8817-00a0c903b83c");
pub const CLSID_CCertAdmin = &CLSID_CCertAdmin_Value;

const CLSID_CCertView_Value = Guid.initString("a12d0f7a-1e84-11d1-9bd6-00c04fb683fa");
pub const CLSID_CCertView = &CLSID_CCertView_Value;

const CLSID_OCSPPropertyCollection_Value = Guid.initString("f935a528-ba8a-4dd9-ba79-f283275cb2de");
pub const CLSID_OCSPPropertyCollection = &CLSID_OCSPPropertyCollection_Value;

const CLSID_OCSPAdmin_Value = Guid.initString("d3f73511-92c9-47cb-8ff2-8d891a7c4de4");
pub const CLSID_OCSPAdmin = &CLSID_OCSPAdmin_Value;

// TODO: this type is limited to platform 'windowsServer2003'
const IID_IEnumCERTVIEWCOLUMN_Value = Guid.initString("9c735be2-57a5-11d1-9bdb-00c04fb683fa");
pub const IID_IEnumCERTVIEWCOLUMN = &IID_IEnumCERTVIEWCOLUMN_Value;
pub const IEnumCERTVIEWCOLUMN = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Next: *const fn(
            self: *const IEnumCERTVIEWCOLUMN,
            pIndex: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn(
            self: *const IEnumCERTVIEWCOLUMN,
            pstrOut: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayName: *const fn(
            self: *const IEnumCERTVIEWCOLUMN,
            pstrOut: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetType: *const fn(
            self: *const IEnumCERTVIEWCOLUMN,
            pType: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsIndexed: *const fn(
            self: *const IEnumCERTVIEWCOLUMN,
            pIndexed: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxLength: *const fn(
            self: *const IEnumCERTVIEWCOLUMN,
            pMaxLength: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn(
            self: *const IEnumCERTVIEWCOLUMN,
            Flags: ENUM_CERT_COLUMN_VALUE_FLAGS,
            pvarValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumCERTVIEWCOLUMN,
            celt: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumCERTVIEWCOLUMN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumCERTVIEWCOLUMN,
            ppenum: ?*?*IEnumCERTVIEWCOLUMN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumCERTVIEWCOLUMN, pIndex: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, pIndex);
    }
    pub fn GetName(self: *const IEnumCERTVIEWCOLUMN, pstrOut: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetName(self, pstrOut);
    }
    pub fn GetDisplayName(self: *const IEnumCERTVIEWCOLUMN, pstrOut: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetDisplayName(self, pstrOut);
    }
    pub fn GetType(self: *const IEnumCERTVIEWCOLUMN, pType: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetType(self, pType);
    }
    pub fn IsIndexed(self: *const IEnumCERTVIEWCOLUMN, pIndexed: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.IsIndexed(self, pIndexed);
    }
    pub fn GetMaxLength(self: *const IEnumCERTVIEWCOLUMN, pMaxLength: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetMaxLength(self, pMaxLength);
    }
    pub fn GetValue(self: *const IEnumCERTVIEWCOLUMN, Flags: ENUM_CERT_COLUMN_VALUE_FLAGS, pvarValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetValue(self, Flags, pvarValue);
    }
    pub fn Skip(self: *const IEnumCERTVIEWCOLUMN, celt: i32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumCERTVIEWCOLUMN) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumCERTVIEWCOLUMN, ppenum: ?*?*IEnumCERTVIEWCOLUMN) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppenum);
    }
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_IEnumCERTVIEWATTRIBUTE_Value = Guid.initString("e77db656-7653-11d1-9bde-00c04fb683fa");
pub const IID_IEnumCERTVIEWATTRIBUTE = &IID_IEnumCERTVIEWATTRIBUTE_Value;
pub const IEnumCERTVIEWATTRIBUTE = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Next: *const fn(
            self: *const IEnumCERTVIEWATTRIBUTE,
            pIndex: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn(
            self: *const IEnumCERTVIEWATTRIBUTE,
            pstrOut: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn(
            self: *const IEnumCERTVIEWATTRIBUTE,
            pstrOut: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumCERTVIEWATTRIBUTE,
            celt: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumCERTVIEWATTRIBUTE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumCERTVIEWATTRIBUTE,
            ppenum: ?*?*IEnumCERTVIEWATTRIBUTE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumCERTVIEWATTRIBUTE, pIndex: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, pIndex);
    }
    pub fn GetName(self: *const IEnumCERTVIEWATTRIBUTE, pstrOut: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetName(self, pstrOut);
    }
    pub fn GetValue(self: *const IEnumCERTVIEWATTRIBUTE, pstrOut: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetValue(self, pstrOut);
    }
    pub fn Skip(self: *const IEnumCERTVIEWATTRIBUTE, celt: i32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumCERTVIEWATTRIBUTE) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumCERTVIEWATTRIBUTE, ppenum: ?*?*IEnumCERTVIEWATTRIBUTE) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppenum);
    }
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_IEnumCERTVIEWEXTENSION_Value = Guid.initString("e7dd1466-7653-11d1-9bde-00c04fb683fa");
pub const IID_IEnumCERTVIEWEXTENSION = &IID_IEnumCERTVIEWEXTENSION_Value;
pub const IEnumCERTVIEWEXTENSION = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Next: *const fn(
            self: *const IEnumCERTVIEWEXTENSION,
            pIndex: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn(
            self: *const IEnumCERTVIEWEXTENSION,
            pstrOut: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: *const fn(
            self: *const IEnumCERTVIEWEXTENSION,
            pFlags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn(
            self: *const IEnumCERTVIEWEXTENSION,
            Type: CERT_PROPERTY_TYPE,
            Flags: ENUM_CERT_COLUMN_VALUE_FLAGS,
            pvarValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumCERTVIEWEXTENSION,
            celt: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumCERTVIEWEXTENSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumCERTVIEWEXTENSION,
            ppenum: ?*?*IEnumCERTVIEWEXTENSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumCERTVIEWEXTENSION, pIndex: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, pIndex);
    }
    pub fn GetName(self: *const IEnumCERTVIEWEXTENSION, pstrOut: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetName(self, pstrOut);
    }
    pub fn GetFlags(self: *const IEnumCERTVIEWEXTENSION, pFlags: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetFlags(self, pFlags);
    }
    pub fn GetValue(self: *const IEnumCERTVIEWEXTENSION, Type: CERT_PROPERTY_TYPE, Flags: ENUM_CERT_COLUMN_VALUE_FLAGS, pvarValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetValue(self, Type, Flags, pvarValue);
    }
    pub fn Skip(self: *const IEnumCERTVIEWEXTENSION, celt: i32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumCERTVIEWEXTENSION) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumCERTVIEWEXTENSION, ppenum: ?*?*IEnumCERTVIEWEXTENSION) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppenum);
    }
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_IEnumCERTVIEWROW_Value = Guid.initString("d1157f4c-5af2-11d1-9bdc-00c04fb683fa");
pub const IID_IEnumCERTVIEWROW = &IID_IEnumCERTVIEWROW_Value;
pub const IEnumCERTVIEWROW = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Next: *const fn(
            self: *const IEnumCERTVIEWROW,
            pIndex: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumCertViewColumn: *const fn(
            self: *const IEnumCERTVIEWROW,
            ppenum: ?*?*IEnumCERTVIEWCOLUMN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumCertViewAttribute: *const fn(
            self: *const IEnumCERTVIEWROW,
            Flags: i32,
            ppenum: ?*?*IEnumCERTVIEWATTRIBUTE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumCertViewExtension: *const fn(
            self: *const IEnumCERTVIEWROW,
            Flags: i32,
            ppenum: ?*?*IEnumCERTVIEWEXTENSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn(
            self: *const IEnumCERTVIEWROW,
            celt: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnumCERTVIEWROW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn(
            self: *const IEnumCERTVIEWROW,
            ppenum: ?*?*IEnumCERTVIEWROW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxIndex: *const fn(
            self: *const IEnumCERTVIEWROW,
            pIndex: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Next(self: *const IEnumCERTVIEWROW, pIndex: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, pIndex);
    }
    pub fn EnumCertViewColumn(self: *const IEnumCERTVIEWROW, ppenum: ?*?*IEnumCERTVIEWCOLUMN) callconv(.Inline) HRESULT {
        return self.vtable.EnumCertViewColumn(self, ppenum);
    }
    pub fn EnumCertViewAttribute(self: *const IEnumCERTVIEWROW, Flags: i32, ppenum: ?*?*IEnumCERTVIEWATTRIBUTE) callconv(.Inline) HRESULT {
        return self.vtable.EnumCertViewAttribute(self, Flags, ppenum);
    }
    pub fn EnumCertViewExtension(self: *const IEnumCERTVIEWROW, Flags: i32, ppenum: ?*?*IEnumCERTVIEWEXTENSION) callconv(.Inline) HRESULT {
        return self.vtable.EnumCertViewExtension(self, Flags, ppenum);
    }
    pub fn Skip(self: *const IEnumCERTVIEWROW, celt: i32) callconv(.Inline) HRESULT {
        return self.vtable.Skip(self, celt);
    }
    pub fn Reset(self: *const IEnumCERTVIEWROW) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Clone(self: *const IEnumCERTVIEWROW, ppenum: ?*?*IEnumCERTVIEWROW) callconv(.Inline) HRESULT {
        return self.vtable.Clone(self, ppenum);
    }
    pub fn GetMaxIndex(self: *const IEnumCERTVIEWROW, pIndex: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetMaxIndex(self, pIndex);
    }
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertView_Value = Guid.initString("c3fac344-1e84-11d1-9bd6-00c04fb683fa");
pub const IID_ICertView = &IID_ICertView_Value;
pub const ICertView = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        OpenConnection: *const fn(
            self: *const ICertView,
            strConfig: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumCertViewColumn: *const fn(
            self: *const ICertView,
            fResultColumn: CVRC_COLUMN,
            ppenum: ?*?*IEnumCERTVIEWCOLUMN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnCount: *const fn(
            self: *const ICertView,
            fResultColumn: CVRC_COLUMN,
            pcColumn: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnIndex: *const fn(
            self: *const ICertView,
            fResultColumn: CVRC_COLUMN,
            strColumnName: ?BSTR,
            pColumnIndex: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetResultColumnCount: *const fn(
            self: *const ICertView,
            cResultColumn: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetResultColumn: *const fn(
            self: *const ICertView,
            ColumnIndex: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRestriction: *const fn(
            self: *const ICertView,
            ColumnIndex: CERT_VIEW_COLUMN_INDEX,
            SeekOperator: CERT_VIEW_SEEK_OPERATOR_FLAGS,
            SortOrder: i32,
            pvarValue: ?*const VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenView: *const fn(
            self: *const ICertView,
            ppenum: ?*?*IEnumCERTVIEWROW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn OpenConnection(self: *const ICertView, strConfig: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.OpenConnection(self, strConfig);
    }
    pub fn EnumCertViewColumn(self: *const ICertView, fResultColumn: CVRC_COLUMN, ppenum: ?*?*IEnumCERTVIEWCOLUMN) callconv(.Inline) HRESULT {
        return self.vtable.EnumCertViewColumn(self, fResultColumn, ppenum);
    }
    pub fn GetColumnCount(self: *const ICertView, fResultColumn: CVRC_COLUMN, pcColumn: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetColumnCount(self, fResultColumn, pcColumn);
    }
    pub fn GetColumnIndex(self: *const ICertView, fResultColumn: CVRC_COLUMN, strColumnName: ?BSTR, pColumnIndex: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetColumnIndex(self, fResultColumn, strColumnName, pColumnIndex);
    }
    pub fn SetResultColumnCount(self: *const ICertView, cResultColumn: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetResultColumnCount(self, cResultColumn);
    }
    pub fn SetResultColumn(self: *const ICertView, ColumnIndex: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetResultColumn(self, ColumnIndex);
    }
    pub fn SetRestriction(self: *const ICertView, ColumnIndex: CERT_VIEW_COLUMN_INDEX, SeekOperator: CERT_VIEW_SEEK_OPERATOR_FLAGS, SortOrder: i32, pvarValue: ?*const VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.SetRestriction(self, ColumnIndex, SeekOperator, SortOrder, pvarValue);
    }
    pub fn OpenView(self: *const ICertView, ppenum: ?*?*IEnumCERTVIEWROW) callconv(.Inline) HRESULT {
        return self.vtable.OpenView(self, ppenum);
    }
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertView2_Value = Guid.initString("d594b282-8851-4b61-9c66-3edadf848863");
pub const IID_ICertView2 = &IID_ICertView2_Value;
pub const ICertView2 = extern union {
    pub const VTable = extern struct {
        base: ICertView.VTable,
        SetTable: *const fn(
            self: *const ICertView2,
            Table: CVRC_TABLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertView: ICertView,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn SetTable(self: *const ICertView2, Table: CVRC_TABLE) callconv(.Inline) HRESULT {
        return self.vtable.SetTable(self, Table);
    }
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertAdmin_Value = Guid.initString("34df6950-7fb6-11d0-8817-00a0c903b83c");
pub const IID_ICertAdmin = &IID_ICertAdmin_Value;
pub const ICertAdmin = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        IsValidCertificate: *const fn(
            self: *const ICertAdmin,
            strConfig: ?BSTR,
            strSerialNumber: ?BSTR,
            pDisposition: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRevocationReason: *const fn(
            self: *const ICertAdmin,
            pReason: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RevokeCertificate: *const fn(
            self: *const ICertAdmin,
            strConfig: ?BSTR,
            strSerialNumber: ?BSTR,
            Reason: i32,
            Date: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRequestAttributes: *const fn(
            self: *const ICertAdmin,
            strConfig: ?BSTR,
            RequestId: i32,
            strAttributes: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCertificateExtension: *const fn(
            self: *const ICertAdmin,
            strConfig: ?BSTR,
            RequestId: i32,
            strExtensionName: ?BSTR,
            Type: CERT_PROPERTY_TYPE,
            Flags: i32,
            pvarValue: ?*const VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DenyRequest: *const fn(
            self: *const ICertAdmin,
            strConfig: ?BSTR,
            RequestId: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResubmitRequest: *const fn(
            self: *const ICertAdmin,
            strConfig: ?BSTR,
            RequestId: i32,
            pDisposition: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PublishCRL: *const fn(
            self: *const ICertAdmin,
            strConfig: ?BSTR,
            Date: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCRL: *const fn(
            self: *const ICertAdmin,
            strConfig: ?BSTR,
            Flags: i32,
            pstrCRL: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportCertificate: *const fn(
            self: *const ICertAdmin,
            strConfig: ?BSTR,
            strCertificate: ?BSTR,
            Flags: CERT_IMPORT_FLAGS,
            pRequestId: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn IsValidCertificate(self: *const ICertAdmin, strConfig: ?BSTR, strSerialNumber: ?BSTR, pDisposition: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.IsValidCertificate(self, strConfig, strSerialNumber, pDisposition);
    }
    pub fn GetRevocationReason(self: *const ICertAdmin, pReason: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetRevocationReason(self, pReason);
    }
    pub fn RevokeCertificate(self: *const ICertAdmin, strConfig: ?BSTR, strSerialNumber: ?BSTR, Reason: i32, Date: f64) callconv(.Inline) HRESULT {
        return self.vtable.RevokeCertificate(self, strConfig, strSerialNumber, Reason, Date);
    }
    pub fn SetRequestAttributes(self: *const ICertAdmin, strConfig: ?BSTR, RequestId: i32, strAttributes: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.SetRequestAttributes(self, strConfig, RequestId, strAttributes);
    }
    pub fn SetCertificateExtension(self: *const ICertAdmin, strConfig: ?BSTR, RequestId: i32, strExtensionName: ?BSTR, Type: CERT_PROPERTY_TYPE, Flags: i32, pvarValue: ?*const VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.SetCertificateExtension(self, strConfig, RequestId, strExtensionName, Type, Flags, pvarValue);
    }
    pub fn DenyRequest(self: *const ICertAdmin, strConfig: ?BSTR, RequestId: i32) callconv(.Inline) HRESULT {
        return self.vtable.DenyRequest(self, strConfig, RequestId);
    }
    pub fn ResubmitRequest(self: *const ICertAdmin, strConfig: ?BSTR, RequestId: i32, pDisposition: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.ResubmitRequest(self, strConfig, RequestId, pDisposition);
    }
    pub fn PublishCRL(self: *const ICertAdmin, strConfig: ?BSTR, Date: f64) callconv(.Inline) HRESULT {
        return self.vtable.PublishCRL(self, strConfig, Date);
    }
    pub fn GetCRL(self: *const ICertAdmin, strConfig: ?BSTR, Flags: i32, pstrCRL: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetCRL(self, strConfig, Flags, pstrCRL);
    }
    pub fn ImportCertificate(self: *const ICertAdmin, strConfig: ?BSTR, strCertificate: ?BSTR, Flags: CERT_IMPORT_FLAGS, pRequestId: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.ImportCertificate(self, strConfig, strCertificate, Flags, pRequestId);
    }
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertAdmin2_Value = Guid.initString("f7c3ac41-b8ce-4fb4-aa58-3d1dc0e36b39");
pub const IID_ICertAdmin2 = &IID_ICertAdmin2_Value;
pub const ICertAdmin2 = extern union {
    pub const VTable = extern struct {
        base: ICertAdmin.VTable,
        PublishCRLs: *const fn(
            self: *const ICertAdmin2,
            strConfig: ?BSTR,
            Date: f64,
            CRLFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAProperty: *const fn(
            self: *const ICertAdmin2,
            strConfig: ?BSTR,
            PropId: i32,
            PropIndex: i32,
            PropType: i32,
            Flags: i32,
            pvarPropertyValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCAProperty: *const fn(
            self: *const ICertAdmin2,
            strConfig: ?BSTR,
            PropId: i32,
            PropIndex: i32,
            PropType: CERT_PROPERTY_TYPE,
            pvarPropertyValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAPropertyFlags: *const fn(
            self: *const ICertAdmin2,
            strConfig: ?BSTR,
            PropId: i32,
            pPropFlags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAPropertyDisplayName: *const fn(
            self: *const ICertAdmin2,
            strConfig: ?BSTR,
            PropId: i32,
            pstrDisplayName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetArchivedKey: *const fn(
            self: *const ICertAdmin2,
            strConfig: ?BSTR,
            RequestId: i32,
            Flags: i32,
            pstrArchivedKey: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConfigEntry: *const fn(
            self: *const ICertAdmin2,
            strConfig: ?BSTR,
            strNodePath: ?BSTR,
            strEntryName: ?BSTR,
            pvarEntry: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConfigEntry: *const fn(
            self: *const ICertAdmin2,
            strConfig: ?BSTR,
            strNodePath: ?BSTR,
            strEntryName: ?BSTR,
            pvarEntry: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportKey: *const fn(
            self: *const ICertAdmin2,
            strConfig: ?BSTR,
            RequestId: i32,
            strCertHash: ?BSTR,
            Flags: CERT_IMPORT_FLAGS,
            strKey: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMyRoles: *const fn(
            self: *const ICertAdmin2,
            strConfig: ?BSTR,
            pRoles: ?*CERTADMIN_GET_ROLES_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteRow: *const fn(
            self: *const ICertAdmin2,
            strConfig: ?BSTR,
            Flags: CERT_DELETE_ROW_FLAGS,
            Date: f64,
            Table: CVRC_TABLE,
            RowId: i32,
            pcDeleted: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertAdmin: ICertAdmin,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn PublishCRLs(self: *const ICertAdmin2, strConfig: ?BSTR, Date: f64, CRLFlags: i32) callconv(.Inline) HRESULT {
        return self.vtable.PublishCRLs(self, strConfig, Date, CRLFlags);
    }
    pub fn GetCAProperty(self: *const ICertAdmin2, strConfig: ?BSTR, PropId: i32, PropIndex: i32, PropType: i32, Flags: i32, pvarPropertyValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetCAProperty(self, strConfig, PropId, PropIndex, PropType, Flags, pvarPropertyValue);
    }
    pub fn SetCAProperty(self: *const ICertAdmin2, strConfig: ?BSTR, PropId: i32, PropIndex: i32, PropType: CERT_PROPERTY_TYPE, pvarPropertyValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.SetCAProperty(self, strConfig, PropId, PropIndex, PropType, pvarPropertyValue);
    }
    pub fn GetCAPropertyFlags(self: *const ICertAdmin2, strConfig: ?BSTR, PropId: i32, pPropFlags: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCAPropertyFlags(self, strConfig, PropId, pPropFlags);
    }
    pub fn GetCAPropertyDisplayName(self: *const ICertAdmin2, strConfig: ?BSTR, PropId: i32, pstrDisplayName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetCAPropertyDisplayName(self, strConfig, PropId, pstrDisplayName);
    }
    pub fn GetArchivedKey(self: *const ICertAdmin2, strConfig: ?BSTR, RequestId: i32, Flags: i32, pstrArchivedKey: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetArchivedKey(self, strConfig, RequestId, Flags, pstrArchivedKey);
    }
    pub fn GetConfigEntry(self: *const ICertAdmin2, strConfig: ?BSTR, strNodePath: ?BSTR, strEntryName: ?BSTR, pvarEntry: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetConfigEntry(self, strConfig, strNodePath, strEntryName, pvarEntry);
    }
    pub fn SetConfigEntry(self: *const ICertAdmin2, strConfig: ?BSTR, strNodePath: ?BSTR, strEntryName: ?BSTR, pvarEntry: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.SetConfigEntry(self, strConfig, strNodePath, strEntryName, pvarEntry);
    }
    pub fn ImportKey(self: *const ICertAdmin2, strConfig: ?BSTR, RequestId: i32, strCertHash: ?BSTR, Flags: CERT_IMPORT_FLAGS, strKey: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.ImportKey(self, strConfig, RequestId, strCertHash, Flags, strKey);
    }
    pub fn GetMyRoles(self: *const ICertAdmin2, strConfig: ?BSTR, pRoles: ?*CERTADMIN_GET_ROLES_FLAGS) callconv(.Inline) HRESULT {
        return self.vtable.GetMyRoles(self, strConfig, pRoles);
    }
    pub fn DeleteRow(self: *const ICertAdmin2, strConfig: ?BSTR, Flags: CERT_DELETE_ROW_FLAGS, Date: f64, Table: CVRC_TABLE, RowId: i32, pcDeleted: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.DeleteRow(self, strConfig, Flags, Date, Table, RowId, pcDeleted);
    }
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IOCSPProperty_Value = Guid.initString("66fb7839-5f04-4c25-ad18-9ff1a8376ee0");
pub const IID_IOCSPProperty = &IID_IOCSPProperty_Value;
pub const IOCSPProperty = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn(
            self: *const IOCSPProperty,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn(
            self: *const IOCSPProperty,
            pVal: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Value: *const fn(
            self: *const IOCSPProperty,
            newVal: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Modified: *const fn(
            self: *const IOCSPProperty,
            pVal: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Name(self: *const IOCSPProperty, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Name(self, pVal);
    }
    pub fn get_Value(self: *const IOCSPProperty, pVal: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Value(self, pVal);
    }
    pub fn put_Value(self: *const IOCSPProperty, newVal: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_Value(self, newVal);
    }
    pub fn get_Modified(self: *const IOCSPProperty, pVal: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Modified(self, pVal);
    }
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IOCSPPropertyCollection_Value = Guid.initString("2597c18d-54e6-4b74-9fa9-a6bfda99cbbe");
pub const IID_IOCSPPropertyCollection = &IID_IOCSPPropertyCollection_Value;
pub const IOCSPPropertyCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const IOCSPPropertyCollection,
            ppVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: *const fn(
            self: *const IOCSPPropertyCollection,
            Index: i32,
            pVal: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IOCSPPropertyCollection,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ItemByName: *const fn(
            self: *const IOCSPPropertyCollection,
            bstrPropName: ?BSTR,
            pVal: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateProperty: *const fn(
            self: *const IOCSPPropertyCollection,
            bstrPropName: ?BSTR,
            pVarPropValue: ?*const VARIANT,
            ppVal: ?*?*IOCSPProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteProperty: *const fn(
            self: *const IOCSPPropertyCollection,
            bstrPropName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromProperties: *const fn(
            self: *const IOCSPPropertyCollection,
            pVarProperties: ?*const VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllProperties: *const fn(
            self: *const IOCSPPropertyCollection,
            pVarProperties: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get__NewEnum(self: *const IOCSPPropertyCollection, ppVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, ppVal);
    }
    pub fn get_Item(self: *const IOCSPPropertyCollection, Index: i32, pVal: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Item(self, Index, pVal);
    }
    pub fn get_Count(self: *const IOCSPPropertyCollection, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
    pub fn get_ItemByName(self: *const IOCSPPropertyCollection, bstrPropName: ?BSTR, pVal: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByName(self, bstrPropName, pVal);
    }
    pub fn CreateProperty(self: *const IOCSPPropertyCollection, bstrPropName: ?BSTR, pVarPropValue: ?*const VARIANT, ppVal: ?*?*IOCSPProperty) callconv(.Inline) HRESULT {
        return self.vtable.CreateProperty(self, bstrPropName, pVarPropValue, ppVal);
    }
    pub fn DeleteProperty(self: *const IOCSPPropertyCollection, bstrPropName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.DeleteProperty(self, bstrPropName);
    }
    pub fn InitializeFromProperties(self: *const IOCSPPropertyCollection, pVarProperties: ?*const VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromProperties(self, pVarProperties);
    }
    pub fn GetAllProperties(self: *const IOCSPPropertyCollection, pVarProperties: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetAllProperties(self, pVarProperties);
    }
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IOCSPCAConfiguration_Value = Guid.initString("aec92b40-3d46-433f-87d1-b84d5c1e790d");
pub const IID_IOCSPCAConfiguration = &IID_IOCSPCAConfiguration_Value;
pub const IOCSPCAConfiguration = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Identifier: *const fn(
            self: *const IOCSPCAConfiguration,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CACertificate: *const fn(
            self: *const IOCSPCAConfiguration,
            pVal: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HashAlgorithm: *const fn(
            self: *const IOCSPCAConfiguration,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HashAlgorithm: *const fn(
            self: *const IOCSPCAConfiguration,
            newVal: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SigningFlags: *const fn(
            self: *const IOCSPCAConfiguration,
            pVal: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SigningFlags: *const fn(
            self: *const IOCSPCAConfiguration,
            newVal: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SigningCertificate: *const fn(
            self: *const IOCSPCAConfiguration,
            pVal: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SigningCertificate: *const fn(
            self: *const IOCSPCAConfiguration,
            newVal: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReminderDuration: *const fn(
            self: *const IOCSPCAConfiguration,
            pVal: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReminderDuration: *const fn(
            self: *const IOCSPCAConfiguration,
            newVal: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ErrorCode: *const fn(
            self: *const IOCSPCAConfiguration,
            pVal: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CSPName: *const fn(
            self: *const IOCSPCAConfiguration,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeySpec: *const fn(
            self: *const IOCSPCAConfiguration,
            pVal: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderCLSID: *const fn(
            self: *const IOCSPCAConfiguration,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProviderCLSID: *const fn(
            self: *const IOCSPCAConfiguration,
            newVal: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderProperties: *const fn(
            self: *const IOCSPCAConfiguration,
            pVal: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProviderProperties: *const fn(
            self: *const IOCSPCAConfiguration,
            newVal: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Modified: *const fn(
            self: *const IOCSPCAConfiguration,
            pVal: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalRevocationInformation: *const fn(
            self: *const IOCSPCAConfiguration,
            pVal: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LocalRevocationInformation: *const fn(
            self: *const IOCSPCAConfiguration,
            newVal: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SigningCertificateTemplate: *const fn(
            self: *const IOCSPCAConfiguration,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SigningCertificateTemplate: *const fn(
            self: *const IOCSPCAConfiguration,
            newVal: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CAConfig: *const fn(
            self: *const IOCSPCAConfiguration,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CAConfig: *const fn(
            self: *const IOCSPCAConfiguration,
            newVal: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Identifier(self: *const IOCSPCAConfiguration, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Identifier(self, pVal);
    }
    pub fn get_CACertificate(self: *const IOCSPCAConfiguration, pVal: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_CACertificate(self, pVal);
    }
    pub fn get_HashAlgorithm(self: *const IOCSPCAConfiguration, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_HashAlgorithm(self, pVal);
    }
    pub fn put_HashAlgorithm(self: *const IOCSPCAConfiguration, newVal: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_HashAlgorithm(self, newVal);
    }
    pub fn get_SigningFlags(self: *const IOCSPCAConfiguration, pVal: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_SigningFlags(self, pVal);
    }
    pub fn put_SigningFlags(self: *const IOCSPCAConfiguration, newVal: u32) callconv(.Inline) HRESULT {
        return self.vtable.put_SigningFlags(self, newVal);
    }
    pub fn get_SigningCertificate(self: *const IOCSPCAConfiguration, pVal: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_SigningCertificate(self, pVal);
    }
    pub fn put_SigningCertificate(self: *const IOCSPCAConfiguration, newVal: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_SigningCertificate(self, newVal);
    }
    pub fn get_ReminderDuration(self: *const IOCSPCAConfiguration, pVal: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_ReminderDuration(self, pVal);
    }
    pub fn put_ReminderDuration(self: *const IOCSPCAConfiguration, newVal: u32) callconv(.Inline) HRESULT {
        return self.vtable.put_ReminderDuration(self, newVal);
    }
    pub fn get_ErrorCode(self: *const IOCSPCAConfiguration, pVal: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_ErrorCode(self, pVal);
    }
    pub fn get_CSPName(self: *const IOCSPCAConfiguration, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_CSPName(self, pVal);
    }
    pub fn get_KeySpec(self: *const IOCSPCAConfiguration, pVal: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_KeySpec(self, pVal);
    }
    pub fn get_ProviderCLSID(self: *const IOCSPCAConfiguration, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ProviderCLSID(self, pVal);
    }
    pub fn put_ProviderCLSID(self: *const IOCSPCAConfiguration, newVal: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ProviderCLSID(self, newVal);
    }
    pub fn get_ProviderProperties(self: *const IOCSPCAConfiguration, pVal: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_ProviderProperties(self, pVal);
    }
    pub fn put_ProviderProperties(self: *const IOCSPCAConfiguration, newVal: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_ProviderProperties(self, newVal);
    }
    pub fn get_Modified(self: *const IOCSPCAConfiguration, pVal: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Modified(self, pVal);
    }
    pub fn get_LocalRevocationInformation(self: *const IOCSPCAConfiguration, pVal: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_LocalRevocationInformation(self, pVal);
    }
    pub fn put_LocalRevocationInformation(self: *const IOCSPCAConfiguration, newVal: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_LocalRevocationInformation(self, newVal);
    }
    pub fn get_SigningCertificateTemplate(self: *const IOCSPCAConfiguration, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_SigningCertificateTemplate(self, pVal);
    }
    pub fn put_SigningCertificateTemplate(self: *const IOCSPCAConfiguration, newVal: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_SigningCertificateTemplate(self, newVal);
    }
    pub fn get_CAConfig(self: *const IOCSPCAConfiguration, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_CAConfig(self, pVal);
    }
    pub fn put_CAConfig(self: *const IOCSPCAConfiguration, newVal: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_CAConfig(self, newVal);
    }
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IOCSPCAConfigurationCollection_Value = Guid.initString("2bebea0b-5ece-4f28-a91c-86b4bb20f0d3");
pub const IID_IOCSPCAConfigurationCollection = &IID_IOCSPCAConfigurationCollection_Value;
pub const IOCSPCAConfigurationCollection = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const IOCSPCAConfigurationCollection,
            pVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: *const fn(
            self: *const IOCSPCAConfigurationCollection,
            Index: i32,
            pVal: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IOCSPCAConfigurationCollection,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ItemByName: *const fn(
            self: *const IOCSPCAConfigurationCollection,
            bstrIdentifier: ?BSTR,
            pVal: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCAConfiguration: *const fn(
            self: *const IOCSPCAConfigurationCollection,
            bstrIdentifier: ?BSTR,
            varCACert: VARIANT,
            ppVal: ?*?*IOCSPCAConfiguration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteCAConfiguration: *const fn(
            self: *const IOCSPCAConfigurationCollection,
            bstrIdentifier: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get__NewEnum(self: *const IOCSPCAConfigurationCollection, pVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, pVal);
    }
    pub fn get_Item(self: *const IOCSPCAConfigurationCollection, Index: i32, pVal: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Item(self, Index, pVal);
    }
    pub fn get_Count(self: *const IOCSPCAConfigurationCollection, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
    pub fn get_ItemByName(self: *const IOCSPCAConfigurationCollection, bstrIdentifier: ?BSTR, pVal: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByName(self, bstrIdentifier, pVal);
    }
    pub fn CreateCAConfiguration(self: *const IOCSPCAConfigurationCollection, bstrIdentifier: ?BSTR, varCACert: VARIANT, ppVal: ?*?*IOCSPCAConfiguration) callconv(.Inline) HRESULT {
        return self.vtable.CreateCAConfiguration(self, bstrIdentifier, varCACert, ppVal);
    }
    pub fn DeleteCAConfiguration(self: *const IOCSPCAConfigurationCollection, bstrIdentifier: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.DeleteCAConfiguration(self, bstrIdentifier);
    }
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IOCSPAdmin_Value = Guid.initString("322e830d-67db-4fe9-9577-4596d9f09294");
pub const IID_IOCSPAdmin = &IID_IOCSPAdmin_Value;
pub const IOCSPAdmin = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OCSPServiceProperties: *const fn(
            self: *const IOCSPAdmin,
            ppVal: ?*?*IOCSPPropertyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OCSPCAConfigurationCollection: *const fn(
            self: *const IOCSPAdmin,
            pVal: ?*?*IOCSPCAConfigurationCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConfiguration: *const fn(
            self: *const IOCSPAdmin,
            bstrServerName: ?BSTR,
            bForce: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConfiguration: *const fn(
            self: *const IOCSPAdmin,
            bstrServerName: ?BSTR,
            bForce: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMyRoles: *const fn(
            self: *const IOCSPAdmin,
            bstrServerName: ?BSTR,
            pRoles: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Ping: *const fn(
            self: *const IOCSPAdmin,
            bstrServerName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSecurity: *const fn(
            self: *const IOCSPAdmin,
            bstrServerName: ?BSTR,
            bstrVal: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSecurity: *const fn(
            self: *const IOCSPAdmin,
            bstrServerName: ?BSTR,
            pVal: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSigningCertificates: *const fn(
            self: *const IOCSPAdmin,
            bstrServerName: ?BSTR,
            pCACertVar: ?*const VARIANT,
            pVal: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHashAlgorithms: *const fn(
            self: *const IOCSPAdmin,
            bstrServerName: ?BSTR,
            bstrCAId: ?BSTR,
            pVal: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_OCSPServiceProperties(self: *const IOCSPAdmin, ppVal: ?*?*IOCSPPropertyCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_OCSPServiceProperties(self, ppVal);
    }
    pub fn get_OCSPCAConfigurationCollection(self: *const IOCSPAdmin, pVal: ?*?*IOCSPCAConfigurationCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_OCSPCAConfigurationCollection(self, pVal);
    }
    pub fn GetConfiguration(self: *const IOCSPAdmin, bstrServerName: ?BSTR, bForce: i16) callconv(.Inline) HRESULT {
        return self.vtable.GetConfiguration(self, bstrServerName, bForce);
    }
    pub fn SetConfiguration(self: *const IOCSPAdmin, bstrServerName: ?BSTR, bForce: i16) callconv(.Inline) HRESULT {
        return self.vtable.SetConfiguration(self, bstrServerName, bForce);
    }
    pub fn GetMyRoles(self: *const IOCSPAdmin, bstrServerName: ?BSTR, pRoles: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetMyRoles(self, bstrServerName, pRoles);
    }
    pub fn Ping(self: *const IOCSPAdmin, bstrServerName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Ping(self, bstrServerName);
    }
    pub fn SetSecurity(self: *const IOCSPAdmin, bstrServerName: ?BSTR, bstrVal: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.SetSecurity(self, bstrServerName, bstrVal);
    }
    pub fn GetSecurity(self: *const IOCSPAdmin, bstrServerName: ?BSTR, pVal: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetSecurity(self, bstrServerName, pVal);
    }
    pub fn GetSigningCertificates(self: *const IOCSPAdmin, bstrServerName: ?BSTR, pCACertVar: ?*const VARIANT, pVal: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetSigningCertificates(self, bstrServerName, pCACertVar, pVal);
    }
    pub fn GetHashAlgorithms(self: *const IOCSPAdmin, bstrServerName: ?BSTR, bstrCAId: ?BSTR, pVal: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetHashAlgorithms(self, bstrServerName, bstrCAId, pVal);
    }
};

pub const OCSPSigningFlag = enum(i32) {
    SILENT = 1,
    USE_CACERT = 2,
    ALLOW_SIGNINGCERT_AUTORENEWAL = 4,
    FORCE_SIGNINGCERT_ISSUER_ISCA = 8,
    AUTODISCOVER_SIGNINGCERT = 16,
    MANUAL_ASSIGN_SIGNINGCERT = 32,
    RESPONDER_ID_KEYHASH = 64,
    RESPONDER_ID_NAME = 128,
    ALLOW_NONCE_EXTENSION = 256,
    ALLOW_SIGNINGCERT_AUTOENROLLMENT = 512,
};
pub const OCSP_SF_SILENT = OCSPSigningFlag.SILENT;
pub const OCSP_SF_USE_CACERT = OCSPSigningFlag.USE_CACERT;
pub const OCSP_SF_ALLOW_SIGNINGCERT_AUTORENEWAL = OCSPSigningFlag.ALLOW_SIGNINGCERT_AUTORENEWAL;
pub const OCSP_SF_FORCE_SIGNINGCERT_ISSUER_ISCA = OCSPSigningFlag.FORCE_SIGNINGCERT_ISSUER_ISCA;
pub const OCSP_SF_AUTODISCOVER_SIGNINGCERT = OCSPSigningFlag.AUTODISCOVER_SIGNINGCERT;
pub const OCSP_SF_MANUAL_ASSIGN_SIGNINGCERT = OCSPSigningFlag.MANUAL_ASSIGN_SIGNINGCERT;
pub const OCSP_SF_RESPONDER_ID_KEYHASH = OCSPSigningFlag.RESPONDER_ID_KEYHASH;
pub const OCSP_SF_RESPONDER_ID_NAME = OCSPSigningFlag.RESPONDER_ID_NAME;
pub const OCSP_SF_ALLOW_NONCE_EXTENSION = OCSPSigningFlag.ALLOW_NONCE_EXTENSION;
pub const OCSP_SF_ALLOW_SIGNINGCERT_AUTOENROLLMENT = OCSPSigningFlag.ALLOW_SIGNINGCERT_AUTOENROLLMENT;

pub const OCSPRequestFlag = enum(i32) {
    S = 1,
};
pub const OCSP_RF_REJECT_SIGNED_REQUESTS = OCSPRequestFlag.S;

pub const CSEDB_RSTMAPW = extern struct {
    pwszDatabaseName: ?PWSTR,
    pwszNewDatabaseName: ?PWSTR,
};

pub const FNCERTSRVISSERVERONLINEW = *const fn(
    pwszServerName: ?[*:0]const u16,
    pfServerOnline: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPGETDYNAMICFILELISTW = *const fn(
    hbc: ?*anyopaque,
    ppwszzFileList: ?*?*u16,
    pcbSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPPREPAREW = *const fn(
    pwszServerName: ?[*:0]const u16,
    grbitJet: u32,
    dwBackupFlags: u32,
    phbc: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPGETDATABASENAMESW = *const fn(
    hbc: ?*anyopaque,
    ppwszzAttachmentInformation: ?*?*u16,
    pcbSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPOPENFILEW = *const fn(
    hbc: ?*anyopaque,
    pwszAttachmentName: ?[*:0]const u16,
    cbReadHintSize: u32,
    pliFileSize: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPREAD = *const fn(
    hbc: ?*anyopaque,
    pvBuffer: ?*anyopaque,
    cbBuffer: u32,
    pcbRead: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPCLOSE = *const fn(
    hbc: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPGETBACKUPLOGSW = *const fn(
    hbc: ?*anyopaque,
    ppwszzBackupLogFiles: ?*?*u16,
    pcbSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPTRUNCATELOGS = *const fn(
    hbc: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPEND = *const fn(
    hbc: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPFREE = *const fn(
    pv: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FNCERTSRVRESTOREGETDATABASELOCATIONSW = *const fn(
    hbc: ?*anyopaque,
    ppwszzDatabaseLocationList: ?*?*u16,
    pcbSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVRESTOREPREPAREW = *const fn(
    pwszServerName: ?[*:0]const u16,
    dwRestoreFlags: u32,
    phbc: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVRESTOREREGISTERW = *const fn(
    hbc: ?*anyopaque,
    pwszCheckPointFilePath: ?[*:0]const u16,
    pwszLogPath: ?[*:0]const u16,
    rgrstmap: ?*CSEDB_RSTMAPW,
    crstmap: i32,
    pwszBackupLogPath: ?[*:0]const u16,
    genLow: u32,
    genHigh: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVRESTOREREGISTERCOMPLETE = *const fn(
    hbc: ?*anyopaque,
    hrRestoreState: HRESULT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVRESTOREEND = *const fn(
    hbc: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVSERVERCONTROLW = *const fn(
    pwszServerName: ?[*:0]const u16,
    dwControlFlags: u32,
    pcbOut: ?*u32,
    ppbOut: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

const CLSID_CCertGetConfig_Value = Guid.initString("c6cc49b0-ce17-11d0-8833-00a0c903b83c");
pub const CLSID_CCertGetConfig = &CLSID_CCertGetConfig_Value;

const CLSID_CCertConfig_Value = Guid.initString("372fce38-4324-11d0-8810-00a0c903b83c");
pub const CLSID_CCertConfig = &CLSID_CCertConfig_Value;

const CLSID_CCertRequest_Value = Guid.initString("98aff3f0-5524-11d0-8812-00a0c903b83c");
pub const CLSID_CCertRequest = &CLSID_CCertRequest_Value;

const CLSID_CCertServerPolicy_Value = Guid.initString("aa000926-ffbe-11cf-8800-00a0c903b83c");
pub const CLSID_CCertServerPolicy = &CLSID_CCertServerPolicy_Value;

const CLSID_CCertServerExit_Value = Guid.initString("4c4a5e40-732c-11d0-8816-00a0c903b83c");
pub const CLSID_CCertServerExit = &CLSID_CCertServerExit_Value;

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertServerPolicy_Value = Guid.initString("aa000922-ffbe-11cf-8800-00a0c903b83c");
pub const IID_ICertServerPolicy = &IID_ICertServerPolicy_Value;
pub const ICertServerPolicy = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        SetContext: *const fn(
            self: *const ICertServerPolicy,
            Context: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestProperty: *const fn(
            self: *const ICertServerPolicy,
            strPropertyName: ?BSTR,
            PropertyType: i32,
            pvarPropertyValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestAttribute: *const fn(
            self: *const ICertServerPolicy,
            strAttributeName: ?BSTR,
            pstrAttributeValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateProperty: *const fn(
            self: *const ICertServerPolicy,
            strPropertyName: ?BSTR,
            PropertyType: CERT_PROPERTY_TYPE,
            pvarPropertyValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCertificateProperty: *const fn(
            self: *const ICertServerPolicy,
            strPropertyName: ?BSTR,
            PropertyType: i32,
            pvarPropertyValue: ?*const VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateExtension: *const fn(
            self: *const ICertServerPolicy,
            strExtensionName: ?BSTR,
            Type: CERT_PROPERTY_TYPE,
            pvarValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateExtensionFlags: *const fn(
            self: *const ICertServerPolicy,
            pExtFlags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCertificateExtension: *const fn(
            self: *const ICertServerPolicy,
            strExtensionName: ?BSTR,
            Type: i32,
            ExtFlags: i32,
            pvarValue: ?*const VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateExtensionsSetup: *const fn(
            self: *const ICertServerPolicy,
            Flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateExtensions: *const fn(
            self: *const ICertServerPolicy,
            pstrExtensionName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateExtensionsClose: *const fn(
            self: *const ICertServerPolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateAttributesSetup: *const fn(
            self: *const ICertServerPolicy,
            Flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateAttributes: *const fn(
            self: *const ICertServerPolicy,
            pstrAttributeName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateAttributesClose: *const fn(
            self: *const ICertServerPolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn SetContext(self: *const ICertServerPolicy, Context: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetContext(self, Context);
    }
    pub fn GetRequestProperty(self: *const ICertServerPolicy, strPropertyName: ?BSTR, PropertyType: i32, pvarPropertyValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetRequestProperty(self, strPropertyName, PropertyType, pvarPropertyValue);
    }
    pub fn GetRequestAttribute(self: *const ICertServerPolicy, strAttributeName: ?BSTR, pstrAttributeValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetRequestAttribute(self, strAttributeName, pstrAttributeValue);
    }
    pub fn GetCertificateProperty(self: *const ICertServerPolicy, strPropertyName: ?BSTR, PropertyType: CERT_PROPERTY_TYPE, pvarPropertyValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetCertificateProperty(self, strPropertyName, PropertyType, pvarPropertyValue);
    }
    pub fn SetCertificateProperty(self: *const ICertServerPolicy, strPropertyName: ?BSTR, PropertyType: i32, pvarPropertyValue: ?*const VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.SetCertificateProperty(self, strPropertyName, PropertyType, pvarPropertyValue);
    }
    pub fn GetCertificateExtension(self: *const ICertServerPolicy, strExtensionName: ?BSTR, Type: CERT_PROPERTY_TYPE, pvarValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetCertificateExtension(self, strExtensionName, Type, pvarValue);
    }
    pub fn GetCertificateExtensionFlags(self: *const ICertServerPolicy, pExtFlags: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCertificateExtensionFlags(self, pExtFlags);
    }
    pub fn SetCertificateExtension(self: *const ICertServerPolicy, strExtensionName: ?BSTR, Type: i32, ExtFlags: i32, pvarValue: ?*const VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.SetCertificateExtension(self, strExtensionName, Type, ExtFlags, pvarValue);
    }
    pub fn EnumerateExtensionsSetup(self: *const ICertServerPolicy, Flags: i32) callconv(.Inline) HRESULT {
        return self.vtable.EnumerateExtensionsSetup(self, Flags);
    }
    pub fn EnumerateExtensions(self: *const ICertServerPolicy, pstrExtensionName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.EnumerateExtensions(self, pstrExtensionName);
    }
    pub fn EnumerateExtensionsClose(self: *const ICertServerPolicy) callconv(.Inline) HRESULT {
        return self.vtable.EnumerateExtensionsClose(self);
    }
    pub fn EnumerateAttributesSetup(self: *const ICertServerPolicy, Flags: i32) callconv(.Inline) HRESULT {
        return self.vtable.EnumerateAttributesSetup(self, Flags);
    }
    pub fn EnumerateAttributes(self: *const ICertServerPolicy, pstrAttributeName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.EnumerateAttributes(self, pstrAttributeName);
    }
    pub fn EnumerateAttributesClose(self: *const ICertServerPolicy) callconv(.Inline) HRESULT {
        return self.vtable.EnumerateAttributesClose(self);
    }
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertServerExit_Value = Guid.initString("4ba9eb90-732c-11d0-8816-00a0c903b83c");
pub const IID_ICertServerExit = &IID_ICertServerExit_Value;
pub const ICertServerExit = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        SetContext: *const fn(
            self: *const ICertServerExit,
            Context: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestProperty: *const fn(
            self: *const ICertServerExit,
            strPropertyName: ?BSTR,
            PropertyType: i32,
            pvarPropertyValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestAttribute: *const fn(
            self: *const ICertServerExit,
            strAttributeName: ?BSTR,
            pstrAttributeValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateProperty: *const fn(
            self: *const ICertServerExit,
            strPropertyName: ?BSTR,
            PropertyType: i32,
            pvarPropertyValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateExtension: *const fn(
            self: *const ICertServerExit,
            strExtensionName: ?BSTR,
            Type: i32,
            pvarValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateExtensionFlags: *const fn(
            self: *const ICertServerExit,
            pExtFlags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateExtensionsSetup: *const fn(
            self: *const ICertServerExit,
            Flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateExtensions: *const fn(
            self: *const ICertServerExit,
            pstrExtensionName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateExtensionsClose: *const fn(
            self: *const ICertServerExit,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateAttributesSetup: *const fn(
            self: *const ICertServerExit,
            Flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateAttributes: *const fn(
            self: *const ICertServerExit,
            pstrAttributeName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateAttributesClose: *const fn(
            self: *const ICertServerExit,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn SetContext(self: *const ICertServerExit, Context: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetContext(self, Context);
    }
    pub fn GetRequestProperty(self: *const ICertServerExit, strPropertyName: ?BSTR, PropertyType: i32, pvarPropertyValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetRequestProperty(self, strPropertyName, PropertyType, pvarPropertyValue);
    }
    pub fn GetRequestAttribute(self: *const ICertServerExit, strAttributeName: ?BSTR, pstrAttributeValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetRequestAttribute(self, strAttributeName, pstrAttributeValue);
    }
    pub fn GetCertificateProperty(self: *const ICertServerExit, strPropertyName: ?BSTR, PropertyType: i32, pvarPropertyValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetCertificateProperty(self, strPropertyName, PropertyType, pvarPropertyValue);
    }
    pub fn GetCertificateExtension(self: *const ICertServerExit, strExtensionName: ?BSTR, Type: i32, pvarValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetCertificateExtension(self, strExtensionName, Type, pvarValue);
    }
    pub fn GetCertificateExtensionFlags(self: *const ICertServerExit, pExtFlags: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCertificateExtensionFlags(self, pExtFlags);
    }
    pub fn EnumerateExtensionsSetup(self: *const ICertServerExit, Flags: i32) callconv(.Inline) HRESULT {
        return self.vtable.EnumerateExtensionsSetup(self, Flags);
    }
    pub fn EnumerateExtensions(self: *const ICertServerExit, pstrExtensionName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.EnumerateExtensions(self, pstrExtensionName);
    }
    pub fn EnumerateExtensionsClose(self: *const ICertServerExit) callconv(.Inline) HRESULT {
        return self.vtable.EnumerateExtensionsClose(self);
    }
    pub fn EnumerateAttributesSetup(self: *const ICertServerExit, Flags: i32) callconv(.Inline) HRESULT {
        return self.vtable.EnumerateAttributesSetup(self, Flags);
    }
    pub fn EnumerateAttributes(self: *const ICertServerExit, pstrAttributeName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.EnumerateAttributes(self, pstrAttributeName);
    }
    pub fn EnumerateAttributesClose(self: *const ICertServerExit) callconv(.Inline) HRESULT {
        return self.vtable.EnumerateAttributesClose(self);
    }
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertGetConfig_Value = Guid.initString("c7ea09c0-ce17-11d0-8833-00a0c903b83c");
pub const IID_ICertGetConfig = &IID_ICertGetConfig_Value;
pub const ICertGetConfig = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetConfig: *const fn(
            self: *const ICertGetConfig,
            Flags: CERT_GET_CONFIG_FLAGS,
            pstrOut: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GetConfig(self: *const ICertGetConfig, Flags: CERT_GET_CONFIG_FLAGS, pstrOut: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetConfig(self, Flags, pstrOut);
    }
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertConfig_Value = Guid.initString("372fce34-4324-11d0-8810-00a0c903b83c");
pub const IID_ICertConfig = &IID_ICertConfig_Value;
pub const ICertConfig = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Reset: *const fn(
            self: *const ICertConfig,
            Index: i32,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: *const fn(
            self: *const ICertConfig,
            pIndex: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetField: *const fn(
            self: *const ICertConfig,
            strFieldName: ?BSTR,
            pstrOut: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConfig: *const fn(
            self: *const ICertConfig,
            Flags: i32,
            pstrOut: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Reset(self: *const ICertConfig, Index: i32, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self, Index, pCount);
    }
    pub fn Next(self: *const ICertConfig, pIndex: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.Next(self, pIndex);
    }
    pub fn GetField(self: *const ICertConfig, strFieldName: ?BSTR, pstrOut: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetField(self, strFieldName, pstrOut);
    }
    pub fn GetConfig(self: *const ICertConfig, Flags: i32, pstrOut: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetConfig(self, Flags, pstrOut);
    }
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertConfig2_Value = Guid.initString("7a18edde-7e78-4163-8ded-78e2c9cee924");
pub const IID_ICertConfig2 = &IID_ICertConfig2_Value;
pub const ICertConfig2 = extern union {
    pub const VTable = extern struct {
        base: ICertConfig.VTable,
        SetSharedFolder: *const fn(
            self: *const ICertConfig2,
            strSharedFolder: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertConfig: ICertConfig,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn SetSharedFolder(self: *const ICertConfig2, strSharedFolder: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.SetSharedFolder(self, strSharedFolder);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ICertRequest_Value = Guid.initString("014e4840-5523-11d0-8812-00a0c903b83c");
pub const IID_ICertRequest = &IID_ICertRequest_Value;
pub const ICertRequest = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Submit: *const fn(
            self: *const ICertRequest,
            Flags: i32,
            strRequest: ?BSTR,
            strAttributes: ?BSTR,
            strConfig: ?BSTR,
            pDisposition: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RetrievePending: *const fn(
            self: *const ICertRequest,
            RequestId: i32,
            strConfig: ?BSTR,
            pDisposition: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastStatus: *const fn(
            self: *const ICertRequest,
            pStatus: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestId: *const fn(
            self: *const ICertRequest,
            pRequestId: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDispositionMessage: *const fn(
            self: *const ICertRequest,
            pstrDispositionMessage: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCACertificate: *const fn(
            self: *const ICertRequest,
            fExchangeCertificate: i32,
            strConfig: ?BSTR,
            Flags: i32,
            pstrCertificate: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificate: *const fn(
            self: *const ICertRequest,
            Flags: i32,
            pstrCertificate: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Submit(self: *const ICertRequest, Flags: i32, strRequest: ?BSTR, strAttributes: ?BSTR, strConfig: ?BSTR, pDisposition: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.Submit(self, Flags, strRequest, strAttributes, strConfig, pDisposition);
    }
    pub fn RetrievePending(self: *const ICertRequest, RequestId: i32, strConfig: ?BSTR, pDisposition: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.RetrievePending(self, RequestId, strConfig, pDisposition);
    }
    pub fn GetLastStatus(self: *const ICertRequest, pStatus: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetLastStatus(self, pStatus);
    }
    pub fn GetRequestId(self: *const ICertRequest, pRequestId: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetRequestId(self, pRequestId);
    }
    pub fn GetDispositionMessage(self: *const ICertRequest, pstrDispositionMessage: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetDispositionMessage(self, pstrDispositionMessage);
    }
    pub fn GetCACertificate(self: *const ICertRequest, fExchangeCertificate: i32, strConfig: ?BSTR, Flags: i32, pstrCertificate: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetCACertificate(self, fExchangeCertificate, strConfig, Flags, pstrCertificate);
    }
    pub fn GetCertificate(self: *const ICertRequest, Flags: i32, pstrCertificate: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetCertificate(self, Flags, pstrCertificate);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ICertRequest2_Value = Guid.initString("a4772988-4a85-4fa9-824e-b5cf5c16405a");
pub const IID_ICertRequest2 = &IID_ICertRequest2_Value;
pub const ICertRequest2 = extern union {
    pub const VTable = extern struct {
        base: ICertRequest.VTable,
        GetIssuedCertificate: *const fn(
            self: *const ICertRequest2,
            strConfig: ?BSTR,
            RequestId: i32,
            strSerialNumber: ?BSTR,
            pDisposition: ?*CR_DISP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetErrorMessageText: *const fn(
            self: *const ICertRequest2,
            hrMessage: i32,
            Flags: i32,
            pstrErrorMessageText: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAProperty: *const fn(
            self: *const ICertRequest2,
            strConfig: ?BSTR,
            PropId: i32,
            PropIndex: i32,
            PropType: i32,
            Flags: i32,
            pvarPropertyValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAPropertyFlags: *const fn(
            self: *const ICertRequest2,
            strConfig: ?BSTR,
            PropId: i32,
            pPropFlags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAPropertyDisplayName: *const fn(
            self: *const ICertRequest2,
            strConfig: ?BSTR,
            PropId: i32,
            pstrDisplayName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFullResponseProperty: *const fn(
            self: *const ICertRequest2,
            PropId: FULL_RESPONSE_PROPERTY_ID,
            PropIndex: i32,
            PropType: CERT_PROPERTY_TYPE,
            Flags: CERT_REQUEST_OUT_TYPE,
            pvarPropertyValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertRequest: ICertRequest,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GetIssuedCertificate(self: *const ICertRequest2, strConfig: ?BSTR, RequestId: i32, strSerialNumber: ?BSTR, pDisposition: ?*CR_DISP) callconv(.Inline) HRESULT {
        return self.vtable.GetIssuedCertificate(self, strConfig, RequestId, strSerialNumber, pDisposition);
    }
    pub fn GetErrorMessageText(self: *const ICertRequest2, hrMessage: i32, Flags: i32, pstrErrorMessageText: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetErrorMessageText(self, hrMessage, Flags, pstrErrorMessageText);
    }
    pub fn GetCAProperty(self: *const ICertRequest2, strConfig: ?BSTR, PropId: i32, PropIndex: i32, PropType: i32, Flags: i32, pvarPropertyValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetCAProperty(self, strConfig, PropId, PropIndex, PropType, Flags, pvarPropertyValue);
    }
    pub fn GetCAPropertyFlags(self: *const ICertRequest2, strConfig: ?BSTR, PropId: i32, pPropFlags: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCAPropertyFlags(self, strConfig, PropId, pPropFlags);
    }
    pub fn GetCAPropertyDisplayName(self: *const ICertRequest2, strConfig: ?BSTR, PropId: i32, pstrDisplayName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetCAPropertyDisplayName(self, strConfig, PropId, pstrDisplayName);
    }
    pub fn GetFullResponseProperty(self: *const ICertRequest2, PropId: FULL_RESPONSE_PROPERTY_ID, PropIndex: i32, PropType: CERT_PROPERTY_TYPE, Flags: CERT_REQUEST_OUT_TYPE, pvarPropertyValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetFullResponseProperty(self, PropId, PropIndex, PropType, Flags, pvarPropertyValue);
    }
};

pub const X509EnrollmentAuthFlags = enum(i32) {
    None = 0,
    Anonymous = 1,
    Kerberos = 2,
    Username = 4,
    Certificate = 8,
};
pub const X509AuthNone = X509EnrollmentAuthFlags.None;
pub const X509AuthAnonymous = X509EnrollmentAuthFlags.Anonymous;
pub const X509AuthKerberos = X509EnrollmentAuthFlags.Kerberos;
pub const X509AuthUsername = X509EnrollmentAuthFlags.Username;
pub const X509AuthCertificate = X509EnrollmentAuthFlags.Certificate;

// TODO: this type is limited to platform 'windows6.1'
const IID_ICertRequest3_Value = Guid.initString("afc8f92b-33a2-4861-bf36-2933b7cd67b3");
pub const IID_ICertRequest3 = &IID_ICertRequest3_Value;
pub const ICertRequest3 = extern union {
    pub const VTable = extern struct {
        base: ICertRequest2.VTable,
        SetCredential: *const fn(
            self: *const ICertRequest3,
            hWnd: i32,
            AuthType: X509EnrollmentAuthFlags,
            strCredential: ?BSTR,
            strPassword: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestIdString: *const fn(
            self: *const ICertRequest3,
            pstrRequestId: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIssuedCertificate2: *const fn(
            self: *const ICertRequest3,
            strConfig: ?BSTR,
            strRequestId: ?BSTR,
            strSerialNumber: ?BSTR,
            pDisposition: ?*CR_DISP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRefreshPolicy: *const fn(
            self: *const ICertRequest3,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertRequest2: ICertRequest2,
    ICertRequest: ICertRequest,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn SetCredential(self: *const ICertRequest3, hWnd: i32, AuthType: X509EnrollmentAuthFlags, strCredential: ?BSTR, strPassword: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.SetCredential(self, hWnd, AuthType, strCredential, strPassword);
    }
    pub fn GetRequestIdString(self: *const ICertRequest3, pstrRequestId: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetRequestIdString(self, pstrRequestId);
    }
    pub fn GetIssuedCertificate2(self: *const ICertRequest3, strConfig: ?BSTR, strRequestId: ?BSTR, strSerialNumber: ?BSTR, pDisposition: ?*CR_DISP) callconv(.Inline) HRESULT {
        return self.vtable.GetIssuedCertificate2(self, strConfig, strRequestId, strSerialNumber, pDisposition);
    }
    pub fn GetRefreshPolicy(self: *const ICertRequest3, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.GetRefreshPolicy(self, pValue);
    }
};

const CLSID_CCertEncodeStringArray_Value = Guid.initString("19a76fe0-7494-11d0-8816-00a0c903b83c");
pub const CLSID_CCertEncodeStringArray = &CLSID_CCertEncodeStringArray_Value;

const CLSID_CCertEncodeLongArray_Value = Guid.initString("4e0680a0-a0a2-11d0-8821-00a0c903b83c");
pub const CLSID_CCertEncodeLongArray = &CLSID_CCertEncodeLongArray_Value;

const CLSID_CCertEncodeDateArray_Value = Guid.initString("301f77b0-a470-11d0-8821-00a0c903b83c");
pub const CLSID_CCertEncodeDateArray = &CLSID_CCertEncodeDateArray_Value;

const CLSID_CCertEncodeCRLDistInfo_Value = Guid.initString("01fa60a0-bbff-11d0-8825-00a0c903b83c");
pub const CLSID_CCertEncodeCRLDistInfo = &CLSID_CCertEncodeCRLDistInfo_Value;

const CLSID_CCertEncodeAltName_Value = Guid.initString("1cfc4cda-1271-11d1-9bd4-00c04fb683fa");
pub const CLSID_CCertEncodeAltName = &CLSID_CCertEncodeAltName_Value;

const CLSID_CCertEncodeBitString_Value = Guid.initString("6d6b3cd8-1278-11d1-9bd4-00c04fb683fa");
pub const CLSID_CCertEncodeBitString = &CLSID_CCertEncodeBitString_Value;

const CLSID_CObjectId_Value = Guid.initString("884e2000-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CObjectId = &CLSID_CObjectId_Value;

const CLSID_CObjectIds_Value = Guid.initString("884e2001-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CObjectIds = &CLSID_CObjectIds_Value;

const CLSID_CBinaryConverter_Value = Guid.initString("884e2002-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CBinaryConverter = &CLSID_CBinaryConverter_Value;

const CLSID_CX500DistinguishedName_Value = Guid.initString("884e2003-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX500DistinguishedName = &CLSID_CX500DistinguishedName_Value;

const CLSID_CCspInformation_Value = Guid.initString("884e2007-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCspInformation = &CLSID_CCspInformation_Value;

const CLSID_CCspInformations_Value = Guid.initString("884e2008-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCspInformations = &CLSID_CCspInformations_Value;

const CLSID_CCspStatus_Value = Guid.initString("884e2009-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCspStatus = &CLSID_CCspStatus_Value;

const CLSID_CX509PublicKey_Value = Guid.initString("884e200b-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509PublicKey = &CLSID_CX509PublicKey_Value;

const CLSID_CX509PrivateKey_Value = Guid.initString("884e200c-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509PrivateKey = &CLSID_CX509PrivateKey_Value;

const CLSID_CX509EndorsementKey_Value = Guid.initString("11a25a1d-b9a3-4edd-af83-3b59adbed361");
pub const CLSID_CX509EndorsementKey = &CLSID_CX509EndorsementKey_Value;

const CLSID_CX509Extension_Value = Guid.initString("884e200d-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509Extension = &CLSID_CX509Extension_Value;

const CLSID_CX509Extensions_Value = Guid.initString("884e200e-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509Extensions = &CLSID_CX509Extensions_Value;

const CLSID_CX509ExtensionKeyUsage_Value = Guid.initString("884e200f-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509ExtensionKeyUsage = &CLSID_CX509ExtensionKeyUsage_Value;

const CLSID_CX509ExtensionEnhancedKeyUsage_Value = Guid.initString("884e2010-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509ExtensionEnhancedKeyUsage = &CLSID_CX509ExtensionEnhancedKeyUsage_Value;

const CLSID_CX509ExtensionTemplateName_Value = Guid.initString("884e2011-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509ExtensionTemplateName = &CLSID_CX509ExtensionTemplateName_Value;

const CLSID_CX509ExtensionTemplate_Value = Guid.initString("884e2012-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509ExtensionTemplate = &CLSID_CX509ExtensionTemplate_Value;

const CLSID_CAlternativeName_Value = Guid.initString("884e2013-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CAlternativeName = &CLSID_CAlternativeName_Value;

const CLSID_CAlternativeNames_Value = Guid.initString("884e2014-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CAlternativeNames = &CLSID_CAlternativeNames_Value;

const CLSID_CX509ExtensionAlternativeNames_Value = Guid.initString("884e2015-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509ExtensionAlternativeNames = &CLSID_CX509ExtensionAlternativeNames_Value;

const CLSID_CX509ExtensionBasicConstraints_Value = Guid.initString("884e2016-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509ExtensionBasicConstraints = &CLSID_CX509ExtensionBasicConstraints_Value;

const CLSID_CX509ExtensionSubjectKeyIdentifier_Value = Guid.initString("884e2017-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509ExtensionSubjectKeyIdentifier = &CLSID_CX509ExtensionSubjectKeyIdentifier_Value;

const CLSID_CX509ExtensionAuthorityKeyIdentifier_Value = Guid.initString("884e2018-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509ExtensionAuthorityKeyIdentifier = &CLSID_CX509ExtensionAuthorityKeyIdentifier_Value;

const CLSID_CSmimeCapability_Value = Guid.initString("884e2019-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CSmimeCapability = &CLSID_CSmimeCapability_Value;

const CLSID_CSmimeCapabilities_Value = Guid.initString("884e201a-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CSmimeCapabilities = &CLSID_CSmimeCapabilities_Value;

const CLSID_CX509ExtensionSmimeCapabilities_Value = Guid.initString("884e201b-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509ExtensionSmimeCapabilities = &CLSID_CX509ExtensionSmimeCapabilities_Value;

const CLSID_CPolicyQualifier_Value = Guid.initString("884e201c-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CPolicyQualifier = &CLSID_CPolicyQualifier_Value;

const CLSID_CPolicyQualifiers_Value = Guid.initString("884e201d-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CPolicyQualifiers = &CLSID_CPolicyQualifiers_Value;

const CLSID_CCertificatePolicy_Value = Guid.initString("884e201e-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertificatePolicy = &CLSID_CCertificatePolicy_Value;

const CLSID_CCertificatePolicies_Value = Guid.initString("884e201f-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertificatePolicies = &CLSID_CCertificatePolicies_Value;

const CLSID_CX509ExtensionCertificatePolicies_Value = Guid.initString("884e2020-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509ExtensionCertificatePolicies = &CLSID_CX509ExtensionCertificatePolicies_Value;

const CLSID_CX509ExtensionMSApplicationPolicies_Value = Guid.initString("884e2021-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509ExtensionMSApplicationPolicies = &CLSID_CX509ExtensionMSApplicationPolicies_Value;

const CLSID_CX509Attribute_Value = Guid.initString("884e2022-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509Attribute = &CLSID_CX509Attribute_Value;

const CLSID_CX509Attributes_Value = Guid.initString("884e2023-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509Attributes = &CLSID_CX509Attributes_Value;

const CLSID_CX509AttributeExtensions_Value = Guid.initString("884e2024-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509AttributeExtensions = &CLSID_CX509AttributeExtensions_Value;

const CLSID_CX509AttributeClientId_Value = Guid.initString("884e2025-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509AttributeClientId = &CLSID_CX509AttributeClientId_Value;

const CLSID_CX509AttributeRenewalCertificate_Value = Guid.initString("884e2026-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509AttributeRenewalCertificate = &CLSID_CX509AttributeRenewalCertificate_Value;

const CLSID_CX509AttributeArchiveKey_Value = Guid.initString("884e2027-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509AttributeArchiveKey = &CLSID_CX509AttributeArchiveKey_Value;

const CLSID_CX509AttributeArchiveKeyHash_Value = Guid.initString("884e2028-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509AttributeArchiveKeyHash = &CLSID_CX509AttributeArchiveKeyHash_Value;

const CLSID_CX509AttributeOSVersion_Value = Guid.initString("884e202a-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509AttributeOSVersion = &CLSID_CX509AttributeOSVersion_Value;

const CLSID_CX509AttributeCspProvider_Value = Guid.initString("884e202b-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509AttributeCspProvider = &CLSID_CX509AttributeCspProvider_Value;

const CLSID_CCryptAttribute_Value = Guid.initString("884e202c-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCryptAttribute = &CLSID_CCryptAttribute_Value;

const CLSID_CCryptAttributes_Value = Guid.initString("884e202d-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCryptAttributes = &CLSID_CCryptAttributes_Value;

const CLSID_CCertProperty_Value = Guid.initString("884e202e-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertProperty = &CLSID_CCertProperty_Value;

const CLSID_CCertProperties_Value = Guid.initString("884e202f-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertProperties = &CLSID_CCertProperties_Value;

const CLSID_CCertPropertyFriendlyName_Value = Guid.initString("884e2030-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertPropertyFriendlyName = &CLSID_CCertPropertyFriendlyName_Value;

const CLSID_CCertPropertyDescription_Value = Guid.initString("884e2031-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertPropertyDescription = &CLSID_CCertPropertyDescription_Value;

const CLSID_CCertPropertyAutoEnroll_Value = Guid.initString("884e2032-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertPropertyAutoEnroll = &CLSID_CCertPropertyAutoEnroll_Value;

const CLSID_CCertPropertyRequestOriginator_Value = Guid.initString("884e2033-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertPropertyRequestOriginator = &CLSID_CCertPropertyRequestOriginator_Value;

const CLSID_CCertPropertySHA1Hash_Value = Guid.initString("884e2034-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertPropertySHA1Hash = &CLSID_CCertPropertySHA1Hash_Value;

const CLSID_CCertPropertyKeyProvInfo_Value = Guid.initString("884e2036-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertPropertyKeyProvInfo = &CLSID_CCertPropertyKeyProvInfo_Value;

const CLSID_CCertPropertyArchived_Value = Guid.initString("884e2037-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertPropertyArchived = &CLSID_CCertPropertyArchived_Value;

const CLSID_CCertPropertyBackedUp_Value = Guid.initString("884e2038-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertPropertyBackedUp = &CLSID_CCertPropertyBackedUp_Value;

const CLSID_CCertPropertyEnrollment_Value = Guid.initString("884e2039-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertPropertyEnrollment = &CLSID_CCertPropertyEnrollment_Value;

const CLSID_CCertPropertyRenewal_Value = Guid.initString("884e203a-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertPropertyRenewal = &CLSID_CCertPropertyRenewal_Value;

const CLSID_CCertPropertyArchivedKeyHash_Value = Guid.initString("884e203b-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertPropertyArchivedKeyHash = &CLSID_CCertPropertyArchivedKeyHash_Value;

const CLSID_CCertPropertyEnrollmentPolicyServer_Value = Guid.initString("884e204c-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertPropertyEnrollmentPolicyServer = &CLSID_CCertPropertyEnrollmentPolicyServer_Value;

const CLSID_CSignerCertificate_Value = Guid.initString("884e203d-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CSignerCertificate = &CLSID_CSignerCertificate_Value;

const CLSID_CX509NameValuePair_Value = Guid.initString("884e203f-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509NameValuePair = &CLSID_CX509NameValuePair_Value;

const CLSID_CCertificateAttestationChallenge_Value = Guid.initString("1362ada1-eb60-456a-b6e1-118050db741b");
pub const CLSID_CCertificateAttestationChallenge = &CLSID_CCertificateAttestationChallenge_Value;

const CLSID_CX509CertificateRequestPkcs10_Value = Guid.initString("884e2042-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509CertificateRequestPkcs10 = &CLSID_CX509CertificateRequestPkcs10_Value;

const CLSID_CX509CertificateRequestCertificate_Value = Guid.initString("884e2043-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509CertificateRequestCertificate = &CLSID_CX509CertificateRequestCertificate_Value;

const CLSID_CX509CertificateRequestPkcs7_Value = Guid.initString("884e2044-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509CertificateRequestPkcs7 = &CLSID_CX509CertificateRequestPkcs7_Value;

const CLSID_CX509CertificateRequestCmc_Value = Guid.initString("884e2045-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509CertificateRequestCmc = &CLSID_CX509CertificateRequestCmc_Value;

const CLSID_CX509Enrollment_Value = Guid.initString("884e2046-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509Enrollment = &CLSID_CX509Enrollment_Value;

const CLSID_CX509EnrollmentWebClassFactory_Value = Guid.initString("884e2049-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509EnrollmentWebClassFactory = &CLSID_CX509EnrollmentWebClassFactory_Value;

const CLSID_CX509EnrollmentHelper_Value = Guid.initString("884e2050-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509EnrollmentHelper = &CLSID_CX509EnrollmentHelper_Value;

const CLSID_CX509MachineEnrollmentFactory_Value = Guid.initString("884e2051-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509MachineEnrollmentFactory = &CLSID_CX509MachineEnrollmentFactory_Value;

const CLSID_CX509EnrollmentPolicyActiveDirectory_Value = Guid.initString("91f39027-217f-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509EnrollmentPolicyActiveDirectory = &CLSID_CX509EnrollmentPolicyActiveDirectory_Value;

const CLSID_CX509EnrollmentPolicyWebService_Value = Guid.initString("91f39028-217f-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509EnrollmentPolicyWebService = &CLSID_CX509EnrollmentPolicyWebService_Value;

const CLSID_CX509PolicyServerListManager_Value = Guid.initString("91f39029-217f-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509PolicyServerListManager = &CLSID_CX509PolicyServerListManager_Value;

const CLSID_CX509PolicyServerUrl_Value = Guid.initString("91f3902a-217f-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509PolicyServerUrl = &CLSID_CX509PolicyServerUrl_Value;

const CLSID_CX509CertificateTemplateADWritable_Value = Guid.initString("8336e323-2e6a-4a04-937c-548f681839b3");
pub const CLSID_CX509CertificateTemplateADWritable = &CLSID_CX509CertificateTemplateADWritable_Value;

const CLSID_CX509CertificateRevocationListEntry_Value = Guid.initString("884e205e-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509CertificateRevocationListEntry = &CLSID_CX509CertificateRevocationListEntry_Value;

const CLSID_CX509CertificateRevocationListEntries_Value = Guid.initString("884e205f-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509CertificateRevocationListEntries = &CLSID_CX509CertificateRevocationListEntries_Value;

const CLSID_CX509CertificateRevocationList_Value = Guid.initString("884e2060-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509CertificateRevocationList = &CLSID_CX509CertificateRevocationList_Value;

const CLSID_CX509SCEPEnrollment_Value = Guid.initString("884e2061-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509SCEPEnrollment = &CLSID_CX509SCEPEnrollment_Value;

const CLSID_CX509SCEPEnrollmentHelper_Value = Guid.initString("884e2062-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509SCEPEnrollmentHelper = &CLSID_CX509SCEPEnrollmentHelper_Value;

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertManageModule_Value = Guid.initString("e7d7ad42-bd3d-11d1-9a4d-00c04fc297eb");
pub const IID_ICertManageModule = &IID_ICertManageModule_Value;
pub const ICertManageModule = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetProperty: *const fn(
            self: *const ICertManageModule,
            strConfig: ?BSTR,
            strStorageLocation: ?BSTR,
            strPropertyName: ?BSTR,
            Flags: i32,
            pvarProperty: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn(
            self: *const ICertManageModule,
            strConfig: ?BSTR,
            strStorageLocation: ?BSTR,
            strPropertyName: ?BSTR,
            Flags: i32,
            pvarProperty: ?*const VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Configure: *const fn(
            self: *const ICertManageModule,
            strConfig: ?BSTR,
            strStorageLocation: ?BSTR,
            Flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GetProperty(self: *const ICertManageModule, strConfig: ?BSTR, strStorageLocation: ?BSTR, strPropertyName: ?BSTR, Flags: i32, pvarProperty: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.GetProperty(self, strConfig, strStorageLocation, strPropertyName, Flags, pvarProperty);
    }
    pub fn SetProperty(self: *const ICertManageModule, strConfig: ?BSTR, strStorageLocation: ?BSTR, strPropertyName: ?BSTR, Flags: i32, pvarProperty: ?*const VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.SetProperty(self, strConfig, strStorageLocation, strPropertyName, Flags, pvarProperty);
    }
    pub fn Configure(self: *const ICertManageModule, strConfig: ?BSTR, strStorageLocation: ?BSTR, Flags: i32) callconv(.Inline) HRESULT {
        return self.vtable.Configure(self, strConfig, strStorageLocation, Flags);
    }
};

pub const CERTTRANSBLOB = extern struct {
    cb: u32,
    pb: ?*u8,
};

pub const CERTVIEWRESTRICTION = extern struct {
    ColumnIndex: u32,
    SeekOperator: i32,
    SortOrder: i32,
    pbValue: ?*u8,
    cbValue: u32,
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertPolicy_Value = Guid.initString("38bb5a00-7636-11d0-b413-00a0c91bbf8c");
pub const IID_ICertPolicy = &IID_ICertPolicy_Value;
pub const ICertPolicy = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn(
            self: *const ICertPolicy,
            strConfig: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        VerifyRequest: *const fn(
            self: *const ICertPolicy,
            strConfig: ?BSTR,
            Context: i32,
            bNewRequest: i32,
            Flags: i32,
            pDisposition: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: *const fn(
            self: *const ICertPolicy,
            pstrDescription: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShutDown: *const fn(
            self: *const ICertPolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const ICertPolicy, strConfig: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, strConfig);
    }
    pub fn VerifyRequest(self: *const ICertPolicy, strConfig: ?BSTR, Context: i32, bNewRequest: i32, Flags: i32, pDisposition: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.VerifyRequest(self, strConfig, Context, bNewRequest, Flags, pDisposition);
    }
    pub fn GetDescription(self: *const ICertPolicy, pstrDescription: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetDescription(self, pstrDescription);
    }
    pub fn ShutDown(self: *const ICertPolicy) callconv(.Inline) HRESULT {
        return self.vtable.ShutDown(self);
    }
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertPolicy2_Value = Guid.initString("3db4910e-8001-4bf1-aa1b-f43a808317a0");
pub const IID_ICertPolicy2 = &IID_ICertPolicy2_Value;
pub const ICertPolicy2 = extern union {
    pub const VTable = extern struct {
        base: ICertPolicy.VTable,
        GetManageModule: *const fn(
            self: *const ICertPolicy2,
            ppManageModule: ?*?*ICertManageModule,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertPolicy: ICertPolicy,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GetManageModule(self: *const ICertPolicy2, ppManageModule: ?*?*ICertManageModule) callconv(.Inline) HRESULT {
        return self.vtable.GetManageModule(self, ppManageModule);
    }
};

pub const X509SCEPMessageType = enum(i32) {
    Unknown = -1,
    CertResponse = 3,
    PKCSRequest = 19,
    GetCertInitial = 20,
    GetCert = 21,
    GetCRL = 22,
    ClaimChallengeAnswer = 41,
};
pub const SCEPMessageUnknown = X509SCEPMessageType.Unknown;
pub const SCEPMessageCertResponse = X509SCEPMessageType.CertResponse;
pub const SCEPMessagePKCSRequest = X509SCEPMessageType.PKCSRequest;
pub const SCEPMessageGetCertInitial = X509SCEPMessageType.GetCertInitial;
pub const SCEPMessageGetCert = X509SCEPMessageType.GetCert;
pub const SCEPMessageGetCRL = X509SCEPMessageType.GetCRL;
pub const SCEPMessageClaimChallengeAnswer = X509SCEPMessageType.ClaimChallengeAnswer;

pub const X509SCEPDisposition = enum(i32) {
    Unknown = -1,
    Success = 0,
    Failure = 2,
    Pending = 3,
    PendingChallenge = 11,
};
pub const SCEPDispositionUnknown = X509SCEPDisposition.Unknown;
pub const SCEPDispositionSuccess = X509SCEPDisposition.Success;
pub const SCEPDispositionFailure = X509SCEPDisposition.Failure;
pub const SCEPDispositionPending = X509SCEPDisposition.Pending;
pub const SCEPDispositionPendingChallenge = X509SCEPDisposition.PendingChallenge;

pub const X509SCEPFailInfo = enum(i32) {
    Unknown = -1,
    BadAlgorithm = 0,
    BadMessageCheck = 1,
    BadRequest = 2,
    BadTime = 3,
    BadCertId = 4,
};
pub const SCEPFailUnknown = X509SCEPFailInfo.Unknown;
pub const SCEPFailBadAlgorithm = X509SCEPFailInfo.BadAlgorithm;
pub const SCEPFailBadMessageCheck = X509SCEPFailInfo.BadMessageCheck;
pub const SCEPFailBadRequest = X509SCEPFailInfo.BadRequest;
pub const SCEPFailBadTime = X509SCEPFailInfo.BadTime;
pub const SCEPFailBadCertId = X509SCEPFailInfo.BadCertId;

const IID_INDESPolicy_Value = Guid.initString("13ca515d-431d-46cc-8c2e-1da269bbd625");
pub const IID_INDESPolicy = &IID_INDESPolicy_Value;
pub const INDESPolicy = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn(
            self: *const INDESPolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Uninitialize: *const fn(
            self: *const INDESPolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GenerateChallenge: *const fn(
            self: *const INDESPolicy,
            pwszTemplate: ?[*:0]const u16,
            pwszParams: ?[*:0]const u16,
            ppwszResponse: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        VerifyRequest: *const fn(
            self: *const INDESPolicy,
            pctbRequest: ?*CERTTRANSBLOB,
            pctbSigningCertEncoded: ?*CERTTRANSBLOB,
            pwszTemplate: ?[*:0]const u16,
            pwszTransactionId: ?[*:0]const u16,
            pfVerified: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Notify: *const fn(
            self: *const INDESPolicy,
            pwszChallenge: ?[*:0]const u16,
            pwszTransactionId: ?[*:0]const u16,
            disposition: X509SCEPDisposition,
            lastHResult: i32,
            pctbIssuedCertEncoded: ?*CERTTRANSBLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const INDESPolicy) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self);
    }
    pub fn Uninitialize(self: *const INDESPolicy) callconv(.Inline) HRESULT {
        return self.vtable.Uninitialize(self);
    }
    pub fn GenerateChallenge(self: *const INDESPolicy, pwszTemplate: ?[*:0]const u16, pwszParams: ?[*:0]const u16, ppwszResponse: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GenerateChallenge(self, pwszTemplate, pwszParams, ppwszResponse);
    }
    pub fn VerifyRequest(self: *const INDESPolicy, pctbRequest: ?*CERTTRANSBLOB, pctbSigningCertEncoded: ?*CERTTRANSBLOB, pwszTemplate: ?[*:0]const u16, pwszTransactionId: ?[*:0]const u16, pfVerified: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.VerifyRequest(self, pctbRequest, pctbSigningCertEncoded, pwszTemplate, pwszTransactionId, pfVerified);
    }
    pub fn Notify(self: *const INDESPolicy, pwszChallenge: ?[*:0]const u16, pwszTransactionId: ?[*:0]const u16, disposition: X509SCEPDisposition, lastHResult: i32, pctbIssuedCertEncoded: ?*CERTTRANSBLOB) callconv(.Inline) HRESULT {
        return self.vtable.Notify(self, pwszChallenge, pwszTransactionId, disposition, lastHResult, pctbIssuedCertEncoded);
    }
};

pub const CERTENROLL_OBJECTID = enum(i32) {
    _NONE = 0,
    _RSA = 1,
    _PKCS = 2,
    _RSA_HASH = 3,
    _RSA_ENCRYPT = 4,
    _PKCS_1 = 5,
    _PKCS_2 = 6,
    _PKCS_3 = 7,
    _PKCS_4 = 8,
    _PKCS_5 = 9,
    _PKCS_6 = 10,
    _PKCS_7 = 11,
    _PKCS_8 = 12,
    _PKCS_9 = 13,
    _PKCS_10 = 14,
    _PKCS_12 = 15,
    _RSA_RSA = 16,
    _RSA_MD2RSA = 17,
    _RSA_MD4RSA = 18,
    _RSA_MD5RSA = 19,
    _RSA_SHA1RSA = 20,
    _RSA_SETOAEP_RSA = 21,
    _RSA_DH = 22,
    _RSA_data = 23,
    _RSA_signedData = 24,
    _RSA_envelopedData = 25,
    _RSA_signEnvData = 26,
    _RSA_digestedData = 27,
    _RSA_hashedData = 28,
    _RSA_encryptedData = 29,
    _RSA_emailAddr = 30,
    _RSA_unstructName = 31,
    _RSA_contentType = 32,
    _RSA_messageDigest = 33,
    _RSA_signingTime = 34,
    _RSA_counterSign = 35,
    _RSA_challengePwd = 36,
    _RSA_unstructAddr = 37,
    _RSA_extCertAttrs = 38,
    _RSA_certExtensions = 39,
    _RSA_SMIMECapabilities = 40,
    _RSA_preferSignedData = 41,
    _RSA_SMIMEalg = 42,
    _RSA_SMIMEalgESDH = 43,
    _RSA_SMIMEalgCMS3DESwrap = 44,
    _RSA_SMIMEalgCMSRC2wrap = 45,
    _RSA_MD2 = 46,
    _RSA_MD4 = 47,
    _RSA_MD5 = 48,
    _RSA_RC2CBC = 49,
    _RSA_RC4 = 50,
    _RSA_DES_EDE3_CBC = 51,
    _RSA_RC5_CBCPad = 52,
    _ANSI_X942 = 53,
    _ANSI_X942_DH = 54,
    _X957 = 55,
    _X957_DSA = 56,
    _X957_SHA1DSA = 57,
    _DS = 58,
    _DSALG = 59,
    _DSALG_CRPT = 60,
    _DSALG_HASH = 61,
    _DSALG_SIGN = 62,
    _DSALG_RSA = 63,
    _OIW = 64,
    _OIWSEC = 65,
    _OIWSEC_md4RSA = 66,
    _OIWSEC_md5RSA = 67,
    _OIWSEC_md4RSA2 = 68,
    _OIWSEC_desECB = 69,
    _OIWSEC_desCBC = 70,
    _OIWSEC_desOFB = 71,
    _OIWSEC_desCFB = 72,
    _OIWSEC_desMAC = 73,
    _OIWSEC_rsaSign = 74,
    _OIWSEC_dsa = 75,
    _OIWSEC_shaDSA = 76,
    _OIWSEC_mdc2RSA = 77,
    _OIWSEC_shaRSA = 78,
    _OIWSEC_dhCommMod = 79,
    _OIWSEC_desEDE = 80,
    _OIWSEC_sha = 81,
    _OIWSEC_mdc2 = 82,
    _OIWSEC_dsaComm = 83,
    _OIWSEC_dsaCommSHA = 84,
    _OIWSEC_rsaXchg = 85,
    _OIWSEC_keyHashSeal = 86,
    _OIWSEC_md2RSASign = 87,
    _OIWSEC_md5RSASign = 88,
    _OIWSEC_sha1 = 89,
    _OIWSEC_dsaSHA1 = 90,
    _OIWSEC_dsaCommSHA1 = 91,
    _OIWSEC_sha1RSASign = 92,
    _OIWDIR = 93,
    _OIWDIR_CRPT = 94,
    _OIWDIR_HASH = 95,
    _OIWDIR_SIGN = 96,
    _OIWDIR_md2 = 97,
    _OIWDIR_md2RSA = 98,
    _INFOSEC = 99,
    _INFOSEC_sdnsSignature = 100,
    _INFOSEC_mosaicSignature = 101,
    _INFOSEC_sdnsConfidentiality = 102,
    _INFOSEC_mosaicConfidentiality = 103,
    _INFOSEC_sdnsIntegrity = 104,
    _INFOSEC_mosaicIntegrity = 105,
    _INFOSEC_sdnsTokenProtection = 106,
    _INFOSEC_mosaicTokenProtection = 107,
    _INFOSEC_sdnsKeyManagement = 108,
    _INFOSEC_mosaicKeyManagement = 109,
    _INFOSEC_sdnsKMandSig = 110,
    _INFOSEC_mosaicKMandSig = 111,
    _INFOSEC_SuiteASignature = 112,
    _INFOSEC_SuiteAConfidentiality = 113,
    _INFOSEC_SuiteAIntegrity = 114,
    _INFOSEC_SuiteATokenProtection = 115,
    _INFOSEC_SuiteAKeyManagement = 116,
    _INFOSEC_SuiteAKMandSig = 117,
    _INFOSEC_mosaicUpdatedSig = 118,
    _INFOSEC_mosaicKMandUpdSig = 119,
    _INFOSEC_mosaicUpdatedInteg = 120,
    _COMMON_NAME = 121,
    _SUR_NAME = 122,
    _DEVICE_SERIAL_NUMBER = 123,
    _COUNTRY_NAME = 124,
    _LOCALITY_NAME = 125,
    _STATE_OR_PROVINCE_NAME = 126,
    _STREET_ADDRESS = 127,
    _ORGANIZATION_NAME = 128,
    _ORGANIZATIONAL_UNIT_NAME = 129,
    _TITLE = 130,
    _DESCRIPTION = 131,
    _SEARCH_GUIDE = 132,
    _BUSINESS_CATEGORY = 133,
    _POSTAL_ADDRESS = 134,
    _POSTAL_CODE = 135,
    _POST_OFFICE_BOX = 136,
    _PHYSICAL_DELIVERY_OFFICE_NAME = 137,
    _TELEPHONE_NUMBER = 138,
    _TELEX_NUMBER = 139,
    _TELETEXT_TERMINAL_IDENTIFIER = 140,
    _FACSIMILE_TELEPHONE_NUMBER = 141,
    _X21_ADDRESS = 142,
    _INTERNATIONAL_ISDN_NUMBER = 143,
    _REGISTERED_ADDRESS = 144,
    _DESTINATION_INDICATOR = 145,
    _PREFERRED_DELIVERY_METHOD = 146,
    _PRESENTATION_ADDRESS = 147,
    _SUPPORTED_APPLICATION_CONTEXT = 148,
    _MEMBER = 149,
    _OWNER = 150,
    _ROLE_OCCUPANT = 151,
    _SEE_ALSO = 152,
    _USER_PASSWORD = 153,
    _USER_CERTIFICATE = 154,
    _CA_CERTIFICATE = 155,
    _AUTHORITY_REVOCATION_LIST = 156,
    _CERTIFICATE_REVOCATION_LIST = 157,
    _CROSS_CERTIFICATE_PAIR = 158,
    _GIVEN_NAME = 159,
    _INITIALS = 160,
    _DN_QUALIFIER = 161,
    _DOMAIN_COMPONENT = 162,
    _PKCS_12_FRIENDLY_NAME_ATTR = 163,
    _PKCS_12_LOCAL_KEY_ID = 164,
    _PKCS_12_KEY_PROVIDER_NAME_ATTR = 165,
    _LOCAL_MACHINE_KEYSET = 166,
    _PKCS_12_EXTENDED_ATTRIBUTES = 167,
    _KEYID_RDN = 168,
    _AUTHORITY_KEY_IDENTIFIER = 169,
    _KEY_ATTRIBUTES = 170,
    _CERT_POLICIES_95 = 171,
    _KEY_USAGE_RESTRICTION = 172,
    _SUBJECT_ALT_NAME = 173,
    _ISSUER_ALT_NAME = 174,
    _BASIC_CONSTRAINTS = 175,
    _KEY_USAGE = 176,
    _PRIVATEKEY_USAGE_PERIOD = 177,
    _BASIC_CONSTRAINTS2 = 178,
    _CERT_POLICIES = 179,
    _ANY_CERT_POLICY = 180,
    _AUTHORITY_KEY_IDENTIFIER2 = 181,
    _SUBJECT_KEY_IDENTIFIER = 182,
    _SUBJECT_ALT_NAME2 = 183,
    _ISSUER_ALT_NAME2 = 184,
    _CRL_REASON_CODE = 185,
    _REASON_CODE_HOLD = 186,
    _CRL_DIST_POINTS = 187,
    _ENHANCED_KEY_USAGE = 188,
    _CRL_NUMBER = 189,
    _DELTA_CRL_INDICATOR = 190,
    _ISSUING_DIST_POINT = 191,
    _FRESHEST_CRL = 192,
    _NAME_CONSTRAINTS = 193,
    _POLICY_MAPPINGS = 194,
    _LEGACY_POLICY_MAPPINGS = 195,
    _POLICY_CONSTRAINTS = 196,
    _RENEWAL_CERTIFICATE = 197,
    _ENROLLMENT_NAME_VALUE_PAIR = 198,
    _ENROLLMENT_CSP_PROVIDER = 199,
    _OS_VERSION = 200,
    _ENROLLMENT_AGENT = 201,
    _PKIX = 202,
    _PKIX_PE = 203,
    _AUTHORITY_INFO_ACCESS = 204,
    _BIOMETRIC_EXT = 205,
    _LOGOTYPE_EXT = 206,
    _CERT_EXTENSIONS = 207,
    _NEXT_UPDATE_LOCATION = 208,
    _REMOVE_CERTIFICATE = 209,
    _CROSS_CERT_DIST_POINTS = 210,
    _CTL = 211,
    _SORTED_CTL = 212,
    _SERIALIZED = 213,
    _NT_PRINCIPAL_NAME = 214,
    _PRODUCT_UPDATE = 215,
    _ANY_APPLICATION_POLICY = 216,
    _AUTO_ENROLL_CTL_USAGE = 217,
    _ENROLL_CERTTYPE_EXTENSION = 218,
    _CERT_MANIFOLD = 219,
    _CERTSRV_CA_VERSION = 220,
    _CERTSRV_PREVIOUS_CERT_HASH = 221,
    _CRL_VIRTUAL_BASE = 222,
    _CRL_NEXT_PUBLISH = 223,
    _KP_CA_EXCHANGE = 224,
    _KP_KEY_RECOVERY_AGENT = 225,
    _CERTIFICATE_TEMPLATE = 226,
    _ENTERPRISE_OID_ROOT = 227,
    _RDN_DUMMY_SIGNER = 228,
    _APPLICATION_CERT_POLICIES = 229,
    _APPLICATION_POLICY_MAPPINGS = 230,
    _APPLICATION_POLICY_CONSTRAINTS = 231,
    _ARCHIVED_KEY_ATTR = 232,
    _CRL_SELF_CDP = 233,
    _REQUIRE_CERT_CHAIN_POLICY = 234,
    _ARCHIVED_KEY_CERT_HASH = 235,
    _ISSUED_CERT_HASH = 236,
    _DS_EMAIL_REPLICATION = 237,
    _REQUEST_CLIENT_INFO = 238,
    _ENCRYPTED_KEY_HASH = 239,
    _CERTSRV_CROSSCA_VERSION = 240,
    _NTDS_REPLICATION = 241,
    _SUBJECT_DIR_ATTRS = 242,
    _PKIX_KP = 243,
    _PKIX_KP_SERVER_AUTH = 244,
    _PKIX_KP_CLIENT_AUTH = 245,
    _PKIX_KP_CODE_SIGNING = 246,
    _PKIX_KP_EMAIL_PROTECTION = 247,
    _PKIX_KP_IPSEC_END_SYSTEM = 248,
    _PKIX_KP_IPSEC_TUNNEL = 249,
    _PKIX_KP_IPSEC_USER = 250,
    _PKIX_KP_TIMESTAMP_SIGNING = 251,
    _PKIX_KP_OCSP_SIGNING = 252,
    _PKIX_OCSP_NOCHECK = 253,
    _IPSEC_KP_IKE_INTERMEDIATE = 254,
    _KP_CTL_USAGE_SIGNING = 255,
    _KP_TIME_STAMP_SIGNING = 256,
    _SERVER_GATED_CRYPTO = 257,
    _SGC_NETSCAPE = 258,
    _KP_EFS = 259,
    _EFS_RECOVERY = 260,
    _WHQL_CRYPTO = 261,
    _NT5_CRYPTO = 262,
    _OEM_WHQL_CRYPTO = 263,
    _EMBEDDED_NT_CRYPTO = 264,
    _ROOT_LIST_SIGNER = 265,
    _KP_QUALIFIED_SUBORDINATION = 266,
    _KP_KEY_RECOVERY = 267,
    _KP_DOCUMENT_SIGNING = 268,
    _KP_LIFETIME_SIGNING = 269,
    _KP_MOBILE_DEVICE_SOFTWARE = 270,
    _KP_SMART_DISPLAY = 271,
    _KP_CSP_SIGNATURE = 272,
    _DRM = 273,
    _DRM_INDIVIDUALIZATION = 274,
    _LICENSES = 275,
    _LICENSE_SERVER = 276,
    _KP_SMARTCARD_LOGON = 277,
    _YESNO_TRUST_ATTR = 278,
    _PKIX_POLICY_QUALIFIER_CPS = 279,
    _PKIX_POLICY_QUALIFIER_USERNOTICE = 280,
    _CERT_POLICIES_95_QUALIFIER1 = 281,
    _PKIX_ACC_DESCR = 282,
    _PKIX_OCSP = 283,
    _PKIX_CA_ISSUERS = 284,
    _VERISIGN_PRIVATE_6_9 = 285,
    _VERISIGN_ONSITE_JURISDICTION_HASH = 286,
    _VERISIGN_BITSTRING_6_13 = 287,
    _VERISIGN_ISS_STRONG_CRYPTO = 288,
    _NETSCAPE = 289,
    _NETSCAPE_CERT_EXTENSION = 290,
    _NETSCAPE_CERT_TYPE = 291,
    _NETSCAPE_BASE_URL = 292,
    _NETSCAPE_REVOCATION_URL = 293,
    _NETSCAPE_CA_REVOCATION_URL = 294,
    _NETSCAPE_CERT_RENEWAL_URL = 295,
    _NETSCAPE_CA_POLICY_URL = 296,
    _NETSCAPE_SSL_SERVER_NAME = 297,
    _NETSCAPE_COMMENT = 298,
    _NETSCAPE_DATA_TYPE = 299,
    _NETSCAPE_CERT_SEQUENCE = 300,
    _CT_PKI_DATA = 301,
    _CT_PKI_RESPONSE = 302,
    _PKIX_NO_SIGNATURE = 303,
    _CMC = 304,
    _CMC_STATUS_INFO = 305,
    _CMC_IDENTIFICATION = 306,
    _CMC_IDENTITY_PROOF = 307,
    _CMC_DATA_RETURN = 308,
    _CMC_TRANSACTION_ID = 309,
    _CMC_SENDER_NONCE = 310,
    _CMC_RECIPIENT_NONCE = 311,
    _CMC_ADD_EXTENSIONS = 312,
    _CMC_ENCRYPTED_POP = 313,
    _CMC_DECRYPTED_POP = 314,
    _CMC_LRA_POP_WITNESS = 315,
    _CMC_GET_CERT = 316,
    _CMC_GET_CRL = 317,
    _CMC_REVOKE_REQUEST = 318,
    _CMC_REG_INFO = 319,
    _CMC_RESPONSE_INFO = 320,
    _CMC_QUERY_PENDING = 321,
    _CMC_ID_POP_LINK_RANDOM = 322,
    _CMC_ID_POP_LINK_WITNESS = 323,
    _CMC_ID_CONFIRM_CERT_ACCEPTANCE = 324,
    _CMC_ADD_ATTRIBUTES = 325,
    _LOYALTY_OTHER_LOGOTYPE = 326,
    _BACKGROUND_OTHER_LOGOTYPE = 327,
    _PKIX_OCSP_BASIC_SIGNED_RESPONSE = 328,
    _PKCS_7_DATA = 329,
    _PKCS_7_SIGNED = 330,
    _PKCS_7_ENVELOPED = 331,
    _PKCS_7_SIGNEDANDENVELOPED = 332,
    _PKCS_7_DIGESTED = 333,
    _PKCS_7_ENCRYPTED = 334,
    _PKCS_9_CONTENT_TYPE = 335,
    _PKCS_9_MESSAGE_DIGEST = 336,
    _CERT_PROP_ID_PREFIX = 337,
    _CERT_KEY_IDENTIFIER_PROP_ID = 338,
    _CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = 339,
    _CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = 340,
    _CERT_MD5_HASH_PROP_ID = 341,
    _RSA_SHA256RSA = 342,
    _RSA_SHA384RSA = 343,
    _RSA_SHA512RSA = 344,
    _NIST_sha256 = 345,
    _NIST_sha384 = 346,
    _NIST_sha512 = 347,
    _RSA_MGF1 = 348,
    _ECC_PUBLIC_KEY = 349,
    _ECDSA_SHA1 = 350,
    _ECDSA_SPECIFIED = 351,
    _ANY_ENHANCED_KEY_USAGE = 352,
    _RSA_SSA_PSS = 353,
    _ATTR_SUPPORTED_ALGORITHMS = 355,
    _ATTR_TPM_SECURITY_ASSERTIONS = 356,
    _ATTR_TPM_SPECIFICATION = 357,
    _CERT_DISALLOWED_FILETIME_PROP_ID = 358,
    _CERT_SIGNATURE_HASH_PROP_ID = 359,
    _CERT_STRONG_KEY_OS_1 = 360,
    _CERT_STRONG_KEY_OS_CURRENT = 361,
    _CERT_STRONG_KEY_OS_PREFIX = 362,
    _CERT_STRONG_SIGN_OS_1 = 363,
    _CERT_STRONG_SIGN_OS_CURRENT = 364,
    _CERT_STRONG_SIGN_OS_PREFIX = 365,
    _DH_SINGLE_PASS_STDDH_SHA1_KDF = 366,
    _DH_SINGLE_PASS_STDDH_SHA256_KDF = 367,
    _DH_SINGLE_PASS_STDDH_SHA384_KDF = 368,
    _DISALLOWED_HASH = 369,
    _DISALLOWED_LIST = 370,
    _ECC_CURVE_P256 = 371,
    _ECC_CURVE_P384 = 372,
    _ECC_CURVE_P521 = 373,
    _ECDSA_SHA256 = 374,
    _ECDSA_SHA384 = 375,
    _ECDSA_SHA512 = 376,
    _ENROLL_CAXCHGCERT_HASH = 377,
    _ENROLL_EK_INFO = 378,
    _ENROLL_EKPUB_CHALLENGE = 379,
    _ENROLL_EKVERIFYCERT = 380,
    _ENROLL_EKVERIFYCREDS = 381,
    _ENROLL_EKVERIFYKEY = 382,
    _EV_RDN_COUNTRY = 383,
    _EV_RDN_LOCALE = 384,
    _EV_RDN_STATE_OR_PROVINCE = 385,
    _INHIBIT_ANY_POLICY = 386,
    _INTERNATIONALIZED_EMAIL_ADDRESS = 387,
    _KP_KERNEL_MODE_CODE_SIGNING = 388,
    _KP_KERNEL_MODE_HAL_EXTENSION_SIGNING = 389,
    _KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING = 390,
    _KP_TPM_AIK_CERTIFICATE = 391,
    _KP_TPM_EK_CERTIFICATE = 392,
    _KP_TPM_PLATFORM_CERTIFICATE = 393,
    _NIST_AES128_CBC = 394,
    _NIST_AES128_WRAP = 395,
    _NIST_AES192_CBC = 396,
    _NIST_AES192_WRAP = 397,
    _NIST_AES256_CBC = 398,
    _NIST_AES256_WRAP = 399,
    _PKCS_12_PbeIds = 400,
    _PKCS_12_pbeWithSHA1And128BitRC2 = 401,
    _PKCS_12_pbeWithSHA1And128BitRC4 = 402,
    _PKCS_12_pbeWithSHA1And2KeyTripleDES = 403,
    _PKCS_12_pbeWithSHA1And3KeyTripleDES = 404,
    _PKCS_12_pbeWithSHA1And40BitRC2 = 405,
    _PKCS_12_pbeWithSHA1And40BitRC4 = 406,
    _PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID = 407,
    _PKINIT_KP_KDC = 408,
    _PKIX_CA_REPOSITORY = 409,
    _PKIX_OCSP_NONCE = 410,
    _PKIX_TIME_STAMPING = 411,
    _QC_EU_COMPLIANCE = 412,
    _QC_SSCD = 413,
    _QC_STATEMENTS_EXT = 414,
    _RDN_TPM_MANUFACTURER = 415,
    _RDN_TPM_MODEL = 416,
    _RDN_TPM_VERSION = 417,
    _REVOKED_LIST_SIGNER = 418,
    _RFC3161_counterSign = 419,
    _ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION = 420,
    _ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION = 421,
    _ROOT_PROGRAM_FLAGS = 422,
    _ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL = 423,
    _RSA_PSPECIFIED = 424,
    _RSAES_OAEP = 425,
    _SUBJECT_INFO_ACCESS = 426,
    _TIMESTAMP_TOKEN = 427,
    _ENROLL_SCEP_ERROR = 428,
    Verisign_MessageType = 429,
    Verisign_PkiStatus = 430,
    Verisign_FailInfo = 431,
    Verisign_SenderNonce = 432,
    Verisign_RecipientNonce = 433,
    Verisign_TransactionID = 434,
    _ENROLL_ATTESTATION_CHALLENGE = 435,
    _ENROLL_ATTESTATION_STATEMENT = 436,
    _ENROLL_ENCRYPTION_ALGORITHM = 437,
    _ENROLL_KSP_NAME = 438,
};
pub const XCN_OID_NONE = CERTENROLL_OBJECTID._NONE;
pub const XCN_OID_RSA = CERTENROLL_OBJECTID._RSA;
pub const XCN_OID_PKCS = CERTENROLL_OBJECTID._PKCS;
pub const XCN_OID_RSA_HASH = CERTENROLL_OBJECTID._RSA_HASH;
pub const XCN_OID_RSA_ENCRYPT = CERTENROLL_OBJECTID._RSA_ENCRYPT;
pub const XCN_OID_PKCS_1 = CERTENROLL_OBJECTID._PKCS_1;
pub const XCN_OID_PKCS_2 = CERTENROLL_OBJECTID._PKCS_2;
pub const XCN_OID_PKCS_3 = CERTENROLL_OBJECTID._PKCS_3;
pub const XCN_OID_PKCS_4 = CERTENROLL_OBJECTID._PKCS_4;
pub const XCN_OID_PKCS_5 = CERTENROLL_OBJECTID._PKCS_5;
pub const XCN_OID_PKCS_6 = CERTENROLL_OBJECTID._PKCS_6;
pub const XCN_OID_PKCS_7 = CERTENROLL_OBJECTID._PKCS_7;
pub const XCN_OID_PKCS_8 = CERTENROLL_OBJECTID._PKCS_8;
pub const XCN_OID_PKCS_9 = CERTENROLL_OBJECTID._PKCS_9;
pub const XCN_OID_PKCS_10 = CERTENROLL_OBJECTID._PKCS_10;
pub const XCN_OID_PKCS_12 = CERTENROLL_OBJECTID._PKCS_12;
pub const XCN_OID_RSA_RSA = CERTENROLL_OBJECTID._RSA_RSA;
pub const XCN_OID_RSA_MD2RSA = CERTENROLL_OBJECTID._RSA_MD2RSA;
pub const XCN_OID_RSA_MD4RSA = CERTENROLL_OBJECTID._RSA_MD4RSA;
pub const XCN_OID_RSA_MD5RSA = CERTENROLL_OBJECTID._RSA_MD5RSA;
pub const XCN_OID_RSA_SHA1RSA = CERTENROLL_OBJECTID._RSA_SHA1RSA;
pub const XCN_OID_RSA_SETOAEP_RSA = CERTENROLL_OBJECTID._RSA_SETOAEP_RSA;
pub const XCN_OID_RSA_DH = CERTENROLL_OBJECTID._RSA_DH;
pub const XCN_OID_RSA_data = CERTENROLL_OBJECTID._RSA_data;
pub const XCN_OID_RSA_signedData = CERTENROLL_OBJECTID._RSA_signedData;
pub const XCN_OID_RSA_envelopedData = CERTENROLL_OBJECTID._RSA_envelopedData;
pub const XCN_OID_RSA_signEnvData = CERTENROLL_OBJECTID._RSA_signEnvData;
pub const XCN_OID_RSA_digestedData = CERTENROLL_OBJECTID._RSA_digestedData;
pub const XCN_OID_RSA_hashedData = CERTENROLL_OBJECTID._RSA_hashedData;
pub const XCN_OID_RSA_encryptedData = CERTENROLL_OBJECTID._RSA_encryptedData;
pub const XCN_OID_RSA_emailAddr = CERTENROLL_OBJECTID._RSA_emailAddr;
pub const XCN_OID_RSA_unstructName = CERTENROLL_OBJECTID._RSA_unstructName;
pub const XCN_OID_RSA_contentType = CERTENROLL_OBJECTID._RSA_contentType;
pub const XCN_OID_RSA_messageDigest = CERTENROLL_OBJECTID._RSA_messageDigest;
pub const XCN_OID_RSA_signingTime = CERTENROLL_OBJECTID._RSA_signingTime;
pub const XCN_OID_RSA_counterSign = CERTENROLL_OBJECTID._RSA_counterSign;
pub const XCN_OID_RSA_challengePwd = CERTENROLL_OBJECTID._RSA_challengePwd;
pub const XCN_OID_RSA_unstructAddr = CERTENROLL_OBJECTID._RSA_unstructAddr;
pub const XCN_OID_RSA_extCertAttrs = CERTENROLL_OBJECTID._RSA_extCertAttrs;
pub const XCN_OID_RSA_certExtensions = CERTENROLL_OBJECTID._RSA_certExtensions;
pub const XCN_OID_RSA_SMIMECapabilities = CERTENROLL_OBJECTID._RSA_SMIMECapabilities;
pub const XCN_OID_RSA_preferSignedData = CERTENROLL_OBJECTID._RSA_preferSignedData;
pub const XCN_OID_RSA_SMIMEalg = CERTENROLL_OBJECTID._RSA_SMIMEalg;
pub const XCN_OID_RSA_SMIMEalgESDH = CERTENROLL_OBJECTID._RSA_SMIMEalgESDH;
pub const XCN_OID_RSA_SMIMEalgCMS3DESwrap = CERTENROLL_OBJECTID._RSA_SMIMEalgCMS3DESwrap;
pub const XCN_OID_RSA_SMIMEalgCMSRC2wrap = CERTENROLL_OBJECTID._RSA_SMIMEalgCMSRC2wrap;
pub const XCN_OID_RSA_MD2 = CERTENROLL_OBJECTID._RSA_MD2;
pub const XCN_OID_RSA_MD4 = CERTENROLL_OBJECTID._RSA_MD4;
pub const XCN_OID_RSA_MD5 = CERTENROLL_OBJECTID._RSA_MD5;
pub const XCN_OID_RSA_RC2CBC = CERTENROLL_OBJECTID._RSA_RC2CBC;
pub const XCN_OID_RSA_RC4 = CERTENROLL_OBJECTID._RSA_RC4;
pub const XCN_OID_RSA_DES_EDE3_CBC = CERTENROLL_OBJECTID._RSA_DES_EDE3_CBC;
pub const XCN_OID_RSA_RC5_CBCPad = CERTENROLL_OBJECTID._RSA_RC5_CBCPad;
pub const XCN_OID_ANSI_X942 = CERTENROLL_OBJECTID._ANSI_X942;
pub const XCN_OID_ANSI_X942_DH = CERTENROLL_OBJECTID._ANSI_X942_DH;
pub const XCN_OID_X957 = CERTENROLL_OBJECTID._X957;
pub const XCN_OID_X957_DSA = CERTENROLL_OBJECTID._X957_DSA;
pub const XCN_OID_X957_SHA1DSA = CERTENROLL_OBJECTID._X957_SHA1DSA;
pub const XCN_OID_DS = CERTENROLL_OBJECTID._DS;
pub const XCN_OID_DSALG = CERTENROLL_OBJECTID._DSALG;
pub const XCN_OID_DSALG_CRPT = CERTENROLL_OBJECTID._DSALG_CRPT;
pub const XCN_OID_DSALG_HASH = CERTENROLL_OBJECTID._DSALG_HASH;
pub const XCN_OID_DSALG_SIGN = CERTENROLL_OBJECTID._DSALG_SIGN;
pub const XCN_OID_DSALG_RSA = CERTENROLL_OBJECTID._DSALG_RSA;
pub const XCN_OID_OIW = CERTENROLL_OBJECTID._OIW;
pub const XCN_OID_OIWSEC = CERTENROLL_OBJECTID._OIWSEC;
pub const XCN_OID_OIWSEC_md4RSA = CERTENROLL_OBJECTID._OIWSEC_md4RSA;
pub const XCN_OID_OIWSEC_md5RSA = CERTENROLL_OBJECTID._OIWSEC_md5RSA;
pub const XCN_OID_OIWSEC_md4RSA2 = CERTENROLL_OBJECTID._OIWSEC_md4RSA2;
pub const XCN_OID_OIWSEC_desECB = CERTENROLL_OBJECTID._OIWSEC_desECB;
pub const XCN_OID_OIWSEC_desCBC = CERTENROLL_OBJECTID._OIWSEC_desCBC;
pub const XCN_OID_OIWSEC_desOFB = CERTENROLL_OBJECTID._OIWSEC_desOFB;
pub const XCN_OID_OIWSEC_desCFB = CERTENROLL_OBJECTID._OIWSEC_desCFB;
pub const XCN_OID_OIWSEC_desMAC = CERTENROLL_OBJECTID._OIWSEC_desMAC;
pub const XCN_OID_OIWSEC_rsaSign = CERTENROLL_OBJECTID._OIWSEC_rsaSign;
pub const XCN_OID_OIWSEC_dsa = CERTENROLL_OBJECTID._OIWSEC_dsa;
pub const XCN_OID_OIWSEC_shaDSA = CERTENROLL_OBJECTID._OIWSEC_shaDSA;
pub const XCN_OID_OIWSEC_mdc2RSA = CERTENROLL_OBJECTID._OIWSEC_mdc2RSA;
pub const XCN_OID_OIWSEC_shaRSA = CERTENROLL_OBJECTID._OIWSEC_shaRSA;
pub const XCN_OID_OIWSEC_dhCommMod = CERTENROLL_OBJECTID._OIWSEC_dhCommMod;
pub const XCN_OID_OIWSEC_desEDE = CERTENROLL_OBJECTID._OIWSEC_desEDE;
pub const XCN_OID_OIWSEC_sha = CERTENROLL_OBJECTID._OIWSEC_sha;
pub const XCN_OID_OIWSEC_mdc2 = CERTENROLL_OBJECTID._OIWSEC_mdc2;
pub const XCN_OID_OIWSEC_dsaComm = CERTENROLL_OBJECTID._OIWSEC_dsaComm;
pub const XCN_OID_OIWSEC_dsaCommSHA = CERTENROLL_OBJECTID._OIWSEC_dsaCommSHA;
pub const XCN_OID_OIWSEC_rsaXchg = CERTENROLL_OBJECTID._OIWSEC_rsaXchg;
pub const XCN_OID_OIWSEC_keyHashSeal = CERTENROLL_OBJECTID._OIWSEC_keyHashSeal;
pub const XCN_OID_OIWSEC_md2RSASign = CERTENROLL_OBJECTID._OIWSEC_md2RSASign;
pub const XCN_OID_OIWSEC_md5RSASign = CERTENROLL_OBJECTID._OIWSEC_md5RSASign;
pub const XCN_OID_OIWSEC_sha1 = CERTENROLL_OBJECTID._OIWSEC_sha1;
pub const XCN_OID_OIWSEC_dsaSHA1 = CERTENROLL_OBJECTID._OIWSEC_dsaSHA1;
pub const XCN_OID_OIWSEC_dsaCommSHA1 = CERTENROLL_OBJECTID._OIWSEC_dsaCommSHA1;
pub const XCN_OID_OIWSEC_sha1RSASign = CERTENROLL_OBJECTID._OIWSEC_sha1RSASign;
pub const XCN_OID_OIWDIR = CERTENROLL_OBJECTID._OIWDIR;
pub const XCN_OID_OIWDIR_CRPT = CERTENROLL_OBJECTID._OIWDIR_CRPT;
pub const XCN_OID_OIWDIR_HASH = CERTENROLL_OBJECTID._OIWDIR_HASH;
pub const XCN_OID_OIWDIR_SIGN = CERTENROLL_OBJECTID._OIWDIR_SIGN;
pub const XCN_OID_OIWDIR_md2 = CERTENROLL_OBJECTID._OIWDIR_md2;
pub const XCN_OID_OIWDIR_md2RSA = CERTENROLL_OBJECTID._OIWDIR_md2RSA;
pub const XCN_OID_INFOSEC = CERTENROLL_OBJECTID._INFOSEC;
pub const XCN_OID_INFOSEC_sdnsSignature = CERTENROLL_OBJECTID._INFOSEC_sdnsSignature;
pub const XCN_OID_INFOSEC_mosaicSignature = CERTENROLL_OBJECTID._INFOSEC_mosaicSignature;
pub const XCN_OID_INFOSEC_sdnsConfidentiality = CERTENROLL_OBJECTID._INFOSEC_sdnsConfidentiality;
pub const XCN_OID_INFOSEC_mosaicConfidentiality = CERTENROLL_OBJECTID._INFOSEC_mosaicConfidentiality;
pub const XCN_OID_INFOSEC_sdnsIntegrity = CERTENROLL_OBJECTID._INFOSEC_sdnsIntegrity;
pub const XCN_OID_INFOSEC_mosaicIntegrity = CERTENROLL_OBJECTID._INFOSEC_mosaicIntegrity;
pub const XCN_OID_INFOSEC_sdnsTokenProtection = CERTENROLL_OBJECTID._INFOSEC_sdnsTokenProtection;
pub const XCN_OID_INFOSEC_mosaicTokenProtection = CERTENROLL_OBJECTID._INFOSEC_mosaicTokenProtection;
pub const XCN_OID_INFOSEC_sdnsKeyManagement = CERTENROLL_OBJECTID._INFOSEC_sdnsKeyManagement;
pub const XCN_OID_INFOSEC_mosaicKeyManagement = CERTENROLL_OBJECTID._INFOSEC_mosaicKeyManagement;
pub const XCN_OID_INFOSEC_sdnsKMandSig = CERTENROLL_OBJECTID._INFOSEC_sdnsKMandSig;
pub const XCN_OID_INFOSEC_mosaicKMandSig = CERTENROLL_OBJECTID._INFOSEC_mosaicKMandSig;
pub const XCN_OID_INFOSEC_SuiteASignature = CERTENROLL_OBJECTID._INFOSEC_SuiteASignature;
pub const XCN_OID_INFOSEC_SuiteAConfidentiality = CERTENROLL_OBJECTID._INFOSEC_SuiteAConfidentiality;
pub const XCN_OID_INFOSEC_SuiteAIntegrity = CERTENROLL_OBJECTID._INFOSEC_SuiteAIntegrity;
pub const XCN_OID_INFOSEC_SuiteATokenProtection = CERTENROLL_OBJECTID._INFOSEC_SuiteATokenProtection;
pub const XCN_OID_INFOSEC_SuiteAKeyManagement = CERTENROLL_OBJECTID._INFOSEC_SuiteAKeyManagement;
pub const XCN_OID_INFOSEC_SuiteAKMandSig = CERTENROLL_OBJECTID._INFOSEC_SuiteAKMandSig;
pub const XCN_OID_INFOSEC_mosaicUpdatedSig = CERTENROLL_OBJECTID._INFOSEC_mosaicUpdatedSig;
pub const XCN_OID_INFOSEC_mosaicKMandUpdSig = CERTENROLL_OBJECTID._INFOSEC_mosaicKMandUpdSig;
pub const XCN_OID_INFOSEC_mosaicUpdatedInteg = CERTENROLL_OBJECTID._INFOSEC_mosaicUpdatedInteg;
pub const XCN_OID_COMMON_NAME = CERTENROLL_OBJECTID._COMMON_NAME;
pub const XCN_OID_SUR_NAME = CERTENROLL_OBJECTID._SUR_NAME;
pub const XCN_OID_DEVICE_SERIAL_NUMBER = CERTENROLL_OBJECTID._DEVICE_SERIAL_NUMBER;
pub const XCN_OID_COUNTRY_NAME = CERTENROLL_OBJECTID._COUNTRY_NAME;
pub const XCN_OID_LOCALITY_NAME = CERTENROLL_OBJECTID._LOCALITY_NAME;
pub const XCN_OID_STATE_OR_PROVINCE_NAME = CERTENROLL_OBJECTID._STATE_OR_PROVINCE_NAME;
pub const XCN_OID_STREET_ADDRESS = CERTENROLL_OBJECTID._STREET_ADDRESS;
pub const XCN_OID_ORGANIZATION_NAME = CERTENROLL_OBJECTID._ORGANIZATION_NAME;
pub const XCN_OID_ORGANIZATIONAL_UNIT_NAME = CERTENROLL_OBJECTID._ORGANIZATIONAL_UNIT_NAME;
pub const XCN_OID_TITLE = CERTENROLL_OBJECTID._TITLE;
pub const XCN_OID_DESCRIPTION = CERTENROLL_OBJECTID._DESCRIPTION;
pub const XCN_OID_SEARCH_GUIDE = CERTENROLL_OBJECTID._SEARCH_GUIDE;
pub const XCN_OID_BUSINESS_CATEGORY = CERTENROLL_OBJECTID._BUSINESS_CATEGORY;
pub const XCN_OID_POSTAL_ADDRESS = CERTENROLL_OBJECTID._POSTAL_ADDRESS;
pub const XCN_OID_POSTAL_CODE = CERTENROLL_OBJECTID._POSTAL_CODE;
pub const XCN_OID_POST_OFFICE_BOX = CERTENROLL_OBJECTID._POST_OFFICE_BOX;
pub const XCN_OID_PHYSICAL_DELIVERY_OFFICE_NAME = CERTENROLL_OBJECTID._PHYSICAL_DELIVERY_OFFICE_NAME;
pub const XCN_OID_TELEPHONE_NUMBER = CERTENROLL_OBJECTID._TELEPHONE_NUMBER;
pub const XCN_OID_TELEX_NUMBER = CERTENROLL_OBJECTID._TELEX_NUMBER;
pub const XCN_OID_TELETEXT_TERMINAL_IDENTIFIER = CERTENROLL_OBJECTID._TELETEXT_TERMINAL_IDENTIFIER;
pub const XCN_OID_FACSIMILE_TELEPHONE_NUMBER = CERTENROLL_OBJECTID._FACSIMILE_TELEPHONE_NUMBER;
pub const XCN_OID_X21_ADDRESS = CERTENROLL_OBJECTID._X21_ADDRESS;
pub const XCN_OID_INTERNATIONAL_ISDN_NUMBER = CERTENROLL_OBJECTID._INTERNATIONAL_ISDN_NUMBER;
pub const XCN_OID_REGISTERED_ADDRESS = CERTENROLL_OBJECTID._REGISTERED_ADDRESS;
pub const XCN_OID_DESTINATION_INDICATOR = CERTENROLL_OBJECTID._DESTINATION_INDICATOR;
pub const XCN_OID_PREFERRED_DELIVERY_METHOD = CERTENROLL_OBJECTID._PREFERRED_DELIVERY_METHOD;
pub const XCN_OID_PRESENTATION_ADDRESS = CERTENROLL_OBJECTID._PRESENTATION_ADDRESS;
pub const XCN_OID_SUPPORTED_APPLICATION_CONTEXT = CERTENROLL_OBJECTID._SUPPORTED_APPLICATION_CONTEXT;
pub const XCN_OID_MEMBER = CERTENROLL_OBJECTID._MEMBER;
pub const XCN_OID_OWNER = CERTENROLL_OBJECTID._OWNER;
pub const XCN_OID_ROLE_OCCUPANT = CERTENROLL_OBJECTID._ROLE_OCCUPANT;
pub const XCN_OID_SEE_ALSO = CERTENROLL_OBJECTID._SEE_ALSO;
pub const XCN_OID_USER_PASSWORD = CERTENROLL_OBJECTID._USER_PASSWORD;
pub const XCN_OID_USER_CERTIFICATE = CERTENROLL_OBJECTID._USER_CERTIFICATE;
pub const XCN_OID_CA_CERTIFICATE = CERTENROLL_OBJECTID._CA_CERTIFICATE;
pub const XCN_OID_AUTHORITY_REVOCATION_LIST = CERTENROLL_OBJECTID._AUTHORITY_REVOCATION_LIST;
pub const XCN_OID_CERTIFICATE_REVOCATION_LIST = CERTENROLL_OBJECTID._CERTIFICATE_REVOCATION_LIST;
pub const XCN_OID_CROSS_CERTIFICATE_PAIR = CERTENROLL_OBJECTID._CROSS_CERTIFICATE_PAIR;
pub const XCN_OID_GIVEN_NAME = CERTENROLL_OBJECTID._GIVEN_NAME;
pub const XCN_OID_INITIALS = CERTENROLL_OBJECTID._INITIALS;
pub const XCN_OID_DN_QUALIFIER = CERTENROLL_OBJECTID._DN_QUALIFIER;
pub const XCN_OID_DOMAIN_COMPONENT = CERTENROLL_OBJECTID._DOMAIN_COMPONENT;
pub const XCN_OID_PKCS_12_FRIENDLY_NAME_ATTR = CERTENROLL_OBJECTID._PKCS_12_FRIENDLY_NAME_ATTR;
pub const XCN_OID_PKCS_12_LOCAL_KEY_ID = CERTENROLL_OBJECTID._PKCS_12_LOCAL_KEY_ID;
pub const XCN_OID_PKCS_12_KEY_PROVIDER_NAME_ATTR = CERTENROLL_OBJECTID._PKCS_12_KEY_PROVIDER_NAME_ATTR;
pub const XCN_OID_LOCAL_MACHINE_KEYSET = CERTENROLL_OBJECTID._LOCAL_MACHINE_KEYSET;
pub const XCN_OID_PKCS_12_EXTENDED_ATTRIBUTES = CERTENROLL_OBJECTID._PKCS_12_EXTENDED_ATTRIBUTES;
pub const XCN_OID_KEYID_RDN = CERTENROLL_OBJECTID._KEYID_RDN;
pub const XCN_OID_AUTHORITY_KEY_IDENTIFIER = CERTENROLL_OBJECTID._AUTHORITY_KEY_IDENTIFIER;
pub const XCN_OID_KEY_ATTRIBUTES = CERTENROLL_OBJECTID._KEY_ATTRIBUTES;
pub const XCN_OID_CERT_POLICIES_95 = CERTENROLL_OBJECTID._CERT_POLICIES_95;
pub const XCN_OID_KEY_USAGE_RESTRICTION = CERTENROLL_OBJECTID._KEY_USAGE_RESTRICTION;
pub const XCN_OID_SUBJECT_ALT_NAME = CERTENROLL_OBJECTID._SUBJECT_ALT_NAME;
pub const XCN_OID_ISSUER_ALT_NAME = CERTENROLL_OBJECTID._ISSUER_ALT_NAME;
pub const XCN_OID_BASIC_CONSTRAINTS = CERTENROLL_OBJECTID._BASIC_CONSTRAINTS;
pub const XCN_OID_KEY_USAGE = CERTENROLL_OBJECTID._KEY_USAGE;
pub const XCN_OID_PRIVATEKEY_USAGE_PERIOD = CERTENROLL_OBJECTID._PRIVATEKEY_USAGE_PERIOD;
pub const XCN_OID_BASIC_CONSTRAINTS2 = CERTENROLL_OBJECTID._BASIC_CONSTRAINTS2;
pub const XCN_OID_CERT_POLICIES = CERTENROLL_OBJECTID._CERT_POLICIES;
pub const XCN_OID_ANY_CERT_POLICY = CERTENROLL_OBJECTID._ANY_CERT_POLICY;
pub const XCN_OID_AUTHORITY_KEY_IDENTIFIER2 = CERTENROLL_OBJECTID._AUTHORITY_KEY_IDENTIFIER2;
pub const XCN_OID_SUBJECT_KEY_IDENTIFIER = CERTENROLL_OBJECTID._SUBJECT_KEY_IDENTIFIER;
pub const XCN_OID_SUBJECT_ALT_NAME2 = CERTENROLL_OBJECTID._SUBJECT_ALT_NAME2;
pub const XCN_OID_ISSUER_ALT_NAME2 = CERTENROLL_OBJECTID._ISSUER_ALT_NAME2;
pub const XCN_OID_CRL_REASON_CODE = CERTENROLL_OBJECTID._CRL_REASON_CODE;
pub const XCN_OID_REASON_CODE_HOLD = CERTENROLL_OBJECTID._REASON_CODE_HOLD;
pub const XCN_OID_CRL_DIST_POINTS = CERTENROLL_OBJECTID._CRL_DIST_POINTS;
pub const XCN_OID_ENHANCED_KEY_USAGE = CERTENROLL_OBJECTID._ENHANCED_KEY_USAGE;
pub const XCN_OID_CRL_NUMBER = CERTENROLL_OBJECTID._CRL_NUMBER;
pub const XCN_OID_DELTA_CRL_INDICATOR = CERTENROLL_OBJECTID._DELTA_CRL_INDICATOR;
pub const XCN_OID_ISSUING_DIST_POINT = CERTENROLL_OBJECTID._ISSUING_DIST_POINT;
pub const XCN_OID_FRESHEST_CRL = CERTENROLL_OBJECTID._FRESHEST_CRL;
pub const XCN_OID_NAME_CONSTRAINTS = CERTENROLL_OBJECTID._NAME_CONSTRAINTS;
pub const XCN_OID_POLICY_MAPPINGS = CERTENROLL_OBJECTID._POLICY_MAPPINGS;
pub const XCN_OID_LEGACY_POLICY_MAPPINGS = CERTENROLL_OBJECTID._LEGACY_POLICY_MAPPINGS;
pub const XCN_OID_POLICY_CONSTRAINTS = CERTENROLL_OBJECTID._POLICY_CONSTRAINTS;
pub const XCN_OID_RENEWAL_CERTIFICATE = CERTENROLL_OBJECTID._RENEWAL_CERTIFICATE;
pub const XCN_OID_ENROLLMENT_NAME_VALUE_PAIR = CERTENROLL_OBJECTID._ENROLLMENT_NAME_VALUE_PAIR;
pub const XCN_OID_ENROLLMENT_CSP_PROVIDER = CERTENROLL_OBJECTID._ENROLLMENT_CSP_PROVIDER;
pub const XCN_OID_OS_VERSION = CERTENROLL_OBJECTID._OS_VERSION;
pub const XCN_OID_ENROLLMENT_AGENT = CERTENROLL_OBJECTID._ENROLLMENT_AGENT;
pub const XCN_OID_PKIX = CERTENROLL_OBJECTID._PKIX;
pub const XCN_OID_PKIX_PE = CERTENROLL_OBJECTID._PKIX_PE;
pub const XCN_OID_AUTHORITY_INFO_ACCESS = CERTENROLL_OBJECTID._AUTHORITY_INFO_ACCESS;
pub const XCN_OID_BIOMETRIC_EXT = CERTENROLL_OBJECTID._BIOMETRIC_EXT;
pub const XCN_OID_LOGOTYPE_EXT = CERTENROLL_OBJECTID._LOGOTYPE_EXT;
pub const XCN_OID_CERT_EXTENSIONS = CERTENROLL_OBJECTID._CERT_EXTENSIONS;
pub const XCN_OID_NEXT_UPDATE_LOCATION = CERTENROLL_OBJECTID._NEXT_UPDATE_LOCATION;
pub const XCN_OID_REMOVE_CERTIFICATE = CERTENROLL_OBJECTID._REMOVE_CERTIFICATE;
pub const XCN_OID_CROSS_CERT_DIST_POINTS = CERTENROLL_OBJECTID._CROSS_CERT_DIST_POINTS;
pub const XCN_OID_CTL = CERTENROLL_OBJECTID._CTL;
pub const XCN_OID_SORTED_CTL = CERTENROLL_OBJECTID._SORTED_CTL;
pub const XCN_OID_SERIALIZED = CERTENROLL_OBJECTID._SERIALIZED;
pub const XCN_OID_NT_PRINCIPAL_NAME = CERTENROLL_OBJECTID._NT_PRINCIPAL_NAME;
pub const XCN_OID_PRODUCT_UPDATE = CERTENROLL_OBJECTID._PRODUCT_UPDATE;
pub const XCN_OID_ANY_APPLICATION_POLICY = CERTENROLL_OBJECTID._ANY_APPLICATION_POLICY;
pub const XCN_OID_AUTO_ENROLL_CTL_USAGE = CERTENROLL_OBJECTID._AUTO_ENROLL_CTL_USAGE;
pub const XCN_OID_ENROLL_CERTTYPE_EXTENSION = CERTENROLL_OBJECTID._ENROLL_CERTTYPE_EXTENSION;
pub const XCN_OID_CERT_MANIFOLD = CERTENROLL_OBJECTID._CERT_MANIFOLD;
pub const XCN_OID_CERTSRV_CA_VERSION = CERTENROLL_OBJECTID._CERTSRV_CA_VERSION;
pub const XCN_OID_CERTSRV_PREVIOUS_CERT_HASH = CERTENROLL_OBJECTID._CERTSRV_PREVIOUS_CERT_HASH;
pub const XCN_OID_CRL_VIRTUAL_BASE = CERTENROLL_OBJECTID._CRL_VIRTUAL_BASE;
pub const XCN_OID_CRL_NEXT_PUBLISH = CERTENROLL_OBJECTID._CRL_NEXT_PUBLISH;
pub const XCN_OID_KP_CA_EXCHANGE = CERTENROLL_OBJECTID._KP_CA_EXCHANGE;
pub const XCN_OID_KP_KEY_RECOVERY_AGENT = CERTENROLL_OBJECTID._KP_KEY_RECOVERY_AGENT;
pub const XCN_OID_CERTIFICATE_TEMPLATE = CERTENROLL_OBJECTID._CERTIFICATE_TEMPLATE;
pub const XCN_OID_ENTERPRISE_OID_ROOT = CERTENROLL_OBJECTID._ENTERPRISE_OID_ROOT;
pub const XCN_OID_RDN_DUMMY_SIGNER = CERTENROLL_OBJECTID._RDN_DUMMY_SIGNER;
pub const XCN_OID_APPLICATION_CERT_POLICIES = CERTENROLL_OBJECTID._APPLICATION_CERT_POLICIES;
pub const XCN_OID_APPLICATION_POLICY_MAPPINGS = CERTENROLL_OBJECTID._APPLICATION_POLICY_MAPPINGS;
pub const XCN_OID_APPLICATION_POLICY_CONSTRAINTS = CERTENROLL_OBJECTID._APPLICATION_POLICY_CONSTRAINTS;
pub const XCN_OID_ARCHIVED_KEY_ATTR = CERTENROLL_OBJECTID._ARCHIVED_KEY_ATTR;
pub const XCN_OID_CRL_SELF_CDP = CERTENROLL_OBJECTID._CRL_SELF_CDP;
pub const XCN_OID_REQUIRE_CERT_CHAIN_POLICY = CERTENROLL_OBJECTID._REQUIRE_CERT_CHAIN_POLICY;
pub const XCN_OID_ARCHIVED_KEY_CERT_HASH = CERTENROLL_OBJECTID._ARCHIVED_KEY_CERT_HASH;
pub const XCN_OID_ISSUED_CERT_HASH = CERTENROLL_OBJECTID._ISSUED_CERT_HASH;
pub const XCN_OID_DS_EMAIL_REPLICATION = CERTENROLL_OBJECTID._DS_EMAIL_REPLICATION;
pub const XCN_OID_REQUEST_CLIENT_INFO = CERTENROLL_OBJECTID._REQUEST_CLIENT_INFO;
pub const XCN_OID_ENCRYPTED_KEY_HASH = CERTENROLL_OBJECTID._ENCRYPTED_KEY_HASH;
pub const XCN_OID_CERTSRV_CROSSCA_VERSION = CERTENROLL_OBJECTID._CERTSRV_CROSSCA_VERSION;
pub const XCN_OID_NTDS_REPLICATION = CERTENROLL_OBJECTID._NTDS_REPLICATION;
pub const XCN_OID_SUBJECT_DIR_ATTRS = CERTENROLL_OBJECTID._SUBJECT_DIR_ATTRS;
pub const XCN_OID_PKIX_KP = CERTENROLL_OBJECTID._PKIX_KP;
pub const XCN_OID_PKIX_KP_SERVER_AUTH = CERTENROLL_OBJECTID._PKIX_KP_SERVER_AUTH;
pub const XCN_OID_PKIX_KP_CLIENT_AUTH = CERTENROLL_OBJECTID._PKIX_KP_CLIENT_AUTH;
pub const XCN_OID_PKIX_KP_CODE_SIGNING = CERTENROLL_OBJECTID._PKIX_KP_CODE_SIGNING;
pub const XCN_OID_PKIX_KP_EMAIL_PROTECTION = CERTENROLL_OBJECTID._PKIX_KP_EMAIL_PROTECTION;
pub const XCN_OID_PKIX_KP_IPSEC_END_SYSTEM = CERTENROLL_OBJECTID._PKIX_KP_IPSEC_END_SYSTEM;
pub const XCN_OID_PKIX_KP_IPSEC_TUNNEL = CERTENROLL_OBJECTID._PKIX_KP_IPSEC_TUNNEL;
pub const XCN_OID_PKIX_KP_IPSEC_USER = CERTENROLL_OBJECTID._PKIX_KP_IPSEC_USER;
pub const XCN_OID_PKIX_KP_TIMESTAMP_SIGNING = CERTENROLL_OBJECTID._PKIX_KP_TIMESTAMP_SIGNING;
pub const XCN_OID_PKIX_KP_OCSP_SIGNING = CERTENROLL_OBJECTID._PKIX_KP_OCSP_SIGNING;
pub const XCN_OID_PKIX_OCSP_NOCHECK = CERTENROLL_OBJECTID._PKIX_OCSP_NOCHECK;
pub const XCN_OID_IPSEC_KP_IKE_INTERMEDIATE = CERTENROLL_OBJECTID._IPSEC_KP_IKE_INTERMEDIATE;
pub const XCN_OID_KP_CTL_USAGE_SIGNING = CERTENROLL_OBJECTID._KP_CTL_USAGE_SIGNING;
pub const XCN_OID_KP_TIME_STAMP_SIGNING = CERTENROLL_OBJECTID._KP_TIME_STAMP_SIGNING;
pub const XCN_OID_SERVER_GATED_CRYPTO = CERTENROLL_OBJECTID._SERVER_GATED_CRYPTO;
pub const XCN_OID_SGC_NETSCAPE = CERTENROLL_OBJECTID._SGC_NETSCAPE;
pub const XCN_OID_KP_EFS = CERTENROLL_OBJECTID._KP_EFS;
pub const XCN_OID_EFS_RECOVERY = CERTENROLL_OBJECTID._EFS_RECOVERY;
pub const XCN_OID_WHQL_CRYPTO = CERTENROLL_OBJECTID._WHQL_CRYPTO;
pub const XCN_OID_NT5_CRYPTO = CERTENROLL_OBJECTID._NT5_CRYPTO;
pub const XCN_OID_OEM_WHQL_CRYPTO = CERTENROLL_OBJECTID._OEM_WHQL_CRYPTO;
pub const XCN_OID_EMBEDDED_NT_CRYPTO = CERTENROLL_OBJECTID._EMBEDDED_NT_CRYPTO;
pub const XCN_OID_ROOT_LIST_SIGNER = CERTENROLL_OBJECTID._ROOT_LIST_SIGNER;
pub const XCN_OID_KP_QUALIFIED_SUBORDINATION = CERTENROLL_OBJECTID._KP_QUALIFIED_SUBORDINATION;
pub const XCN_OID_KP_KEY_RECOVERY = CERTENROLL_OBJECTID._KP_KEY_RECOVERY;
pub const XCN_OID_KP_DOCUMENT_SIGNING = CERTENROLL_OBJECTID._KP_DOCUMENT_SIGNING;
pub const XCN_OID_KP_LIFETIME_SIGNING = CERTENROLL_OBJECTID._KP_LIFETIME_SIGNING;
pub const XCN_OID_KP_MOBILE_DEVICE_SOFTWARE = CERTENROLL_OBJECTID._KP_MOBILE_DEVICE_SOFTWARE;
pub const XCN_OID_KP_SMART_DISPLAY = CERTENROLL_OBJECTID._KP_SMART_DISPLAY;
pub const XCN_OID_KP_CSP_SIGNATURE = CERTENROLL_OBJECTID._KP_CSP_SIGNATURE;
pub const XCN_OID_DRM = CERTENROLL_OBJECTID._DRM;
pub const XCN_OID_DRM_INDIVIDUALIZATION = CERTENROLL_OBJECTID._DRM_INDIVIDUALIZATION;
pub const XCN_OID_LICENSES = CERTENROLL_OBJECTID._LICENSES;
pub const XCN_OID_LICENSE_SERVER = CERTENROLL_OBJECTID._LICENSE_SERVER;
pub const XCN_OID_KP_SMARTCARD_LOGON = CERTENROLL_OBJECTID._KP_SMARTCARD_LOGON;
pub const XCN_OID_YESNO_TRUST_ATTR = CERTENROLL_OBJECTID._YESNO_TRUST_ATTR;
pub const XCN_OID_PKIX_POLICY_QUALIFIER_CPS = CERTENROLL_OBJECTID._PKIX_POLICY_QUALIFIER_CPS;
pub const XCN_OID_PKIX_POLICY_QUALIFIER_USERNOTICE = CERTENROLL_OBJECTID._PKIX_POLICY_QUALIFIER_USERNOTICE;
pub const XCN_OID_CERT_POLICIES_95_QUALIFIER1 = CERTENROLL_OBJECTID._CERT_POLICIES_95_QUALIFIER1;
pub const XCN_OID_PKIX_ACC_DESCR = CERTENROLL_OBJECTID._PKIX_ACC_DESCR;
pub const XCN_OID_PKIX_OCSP = CERTENROLL_OBJECTID._PKIX_OCSP;
pub const XCN_OID_PKIX_CA_ISSUERS = CERTENROLL_OBJECTID._PKIX_CA_ISSUERS;
pub const XCN_OID_VERISIGN_PRIVATE_6_9 = CERTENROLL_OBJECTID._VERISIGN_PRIVATE_6_9;
pub const XCN_OID_VERISIGN_ONSITE_JURISDICTION_HASH = CERTENROLL_OBJECTID._VERISIGN_ONSITE_JURISDICTION_HASH;
pub const XCN_OID_VERISIGN_BITSTRING_6_13 = CERTENROLL_OBJECTID._VERISIGN_BITSTRING_6_13;
pub const XCN_OID_VERISIGN_ISS_STRONG_CRYPTO = CERTENROLL_OBJECTID._VERISIGN_ISS_STRONG_CRYPTO;
pub const XCN_OID_NETSCAPE = CERTENROLL_OBJECTID._NETSCAPE;
pub const XCN_OID_NETSCAPE_CERT_EXTENSION = CERTENROLL_OBJECTID._NETSCAPE_CERT_EXTENSION;
pub const XCN_OID_NETSCAPE_CERT_TYPE = CERTENROLL_OBJECTID._NETSCAPE_CERT_TYPE;
pub const XCN_OID_NETSCAPE_BASE_URL = CERTENROLL_OBJECTID._NETSCAPE_BASE_URL;
pub const XCN_OID_NETSCAPE_REVOCATION_URL = CERTENROLL_OBJECTID._NETSCAPE_REVOCATION_URL;
pub const XCN_OID_NETSCAPE_CA_REVOCATION_URL = CERTENROLL_OBJECTID._NETSCAPE_CA_REVOCATION_URL;
pub const XCN_OID_NETSCAPE_CERT_RENEWAL_URL = CERTENROLL_OBJECTID._NETSCAPE_CERT_RENEWAL_URL;
pub const XCN_OID_NETSCAPE_CA_POLICY_URL = CERTENROLL_OBJECTID._NETSCAPE_CA_POLICY_URL;
pub const XCN_OID_NETSCAPE_SSL_SERVER_NAME = CERTENROLL_OBJECTID._NETSCAPE_SSL_SERVER_NAME;
pub const XCN_OID_NETSCAPE_COMMENT = CERTENROLL_OBJECTID._NETSCAPE_COMMENT;
pub const XCN_OID_NETSCAPE_DATA_TYPE = CERTENROLL_OBJECTID._NETSCAPE_DATA_TYPE;
pub const XCN_OID_NETSCAPE_CERT_SEQUENCE = CERTENROLL_OBJECTID._NETSCAPE_CERT_SEQUENCE;
pub const XCN_OID_CT_PKI_DATA = CERTENROLL_OBJECTID._CT_PKI_DATA;
pub const XCN_OID_CT_PKI_RESPONSE = CERTENROLL_OBJECTID._CT_PKI_RESPONSE;
pub const XCN_OID_PKIX_NO_SIGNATURE = CERTENROLL_OBJECTID._PKIX_NO_SIGNATURE;
pub const XCN_OID_CMC = CERTENROLL_OBJECTID._CMC;
pub const XCN_OID_CMC_STATUS_INFO = CERTENROLL_OBJECTID._CMC_STATUS_INFO;
pub const XCN_OID_CMC_IDENTIFICATION = CERTENROLL_OBJECTID._CMC_IDENTIFICATION;
pub const XCN_OID_CMC_IDENTITY_PROOF = CERTENROLL_OBJECTID._CMC_IDENTITY_PROOF;
pub const XCN_OID_CMC_DATA_RETURN = CERTENROLL_OBJECTID._CMC_DATA_RETURN;
pub const XCN_OID_CMC_TRANSACTION_ID = CERTENROLL_OBJECTID._CMC_TRANSACTION_ID;
pub const XCN_OID_CMC_SENDER_NONCE = CERTENROLL_OBJECTID._CMC_SENDER_NONCE;
pub const XCN_OID_CMC_RECIPIENT_NONCE = CERTENROLL_OBJECTID._CMC_RECIPIENT_NONCE;
pub const XCN_OID_CMC_ADD_EXTENSIONS = CERTENROLL_OBJECTID._CMC_ADD_EXTENSIONS;
pub const XCN_OID_CMC_ENCRYPTED_POP = CERTENROLL_OBJECTID._CMC_ENCRYPTED_POP;
pub const XCN_OID_CMC_DECRYPTED_POP = CERTENROLL_OBJECTID._CMC_DECRYPTED_POP;
pub const XCN_OID_CMC_LRA_POP_WITNESS = CERTENROLL_OBJECTID._CMC_LRA_POP_WITNESS;
pub const XCN_OID_CMC_GET_CERT = CERTENROLL_OBJECTID._CMC_GET_CERT;
pub const XCN_OID_CMC_GET_CRL = CERTENROLL_OBJECTID._CMC_GET_CRL;
pub const XCN_OID_CMC_REVOKE_REQUEST = CERTENROLL_OBJECTID._CMC_REVOKE_REQUEST;
pub const XCN_OID_CMC_REG_INFO = CERTENROLL_OBJECTID._CMC_REG_INFO;
pub const XCN_OID_CMC_RESPONSE_INFO = CERTENROLL_OBJECTID._CMC_RESPONSE_INFO;
pub const XCN_OID_CMC_QUERY_PENDING = CERTENROLL_OBJECTID._CMC_QUERY_PENDING;
pub const XCN_OID_CMC_ID_POP_LINK_RANDOM = CERTENROLL_OBJECTID._CMC_ID_POP_LINK_RANDOM;
pub const XCN_OID_CMC_ID_POP_LINK_WITNESS = CERTENROLL_OBJECTID._CMC_ID_POP_LINK_WITNESS;
pub const XCN_OID_CMC_ID_CONFIRM_CERT_ACCEPTANCE = CERTENROLL_OBJECTID._CMC_ID_CONFIRM_CERT_ACCEPTANCE;
pub const XCN_OID_CMC_ADD_ATTRIBUTES = CERTENROLL_OBJECTID._CMC_ADD_ATTRIBUTES;
pub const XCN_OID_LOYALTY_OTHER_LOGOTYPE = CERTENROLL_OBJECTID._LOYALTY_OTHER_LOGOTYPE;
pub const XCN_OID_BACKGROUND_OTHER_LOGOTYPE = CERTENROLL_OBJECTID._BACKGROUND_OTHER_LOGOTYPE;
pub const XCN_OID_PKIX_OCSP_BASIC_SIGNED_RESPONSE = CERTENROLL_OBJECTID._PKIX_OCSP_BASIC_SIGNED_RESPONSE;
pub const XCN_OID_PKCS_7_DATA = CERTENROLL_OBJECTID._PKCS_7_DATA;
pub const XCN_OID_PKCS_7_SIGNED = CERTENROLL_OBJECTID._PKCS_7_SIGNED;
pub const XCN_OID_PKCS_7_ENVELOPED = CERTENROLL_OBJECTID._PKCS_7_ENVELOPED;
pub const XCN_OID_PKCS_7_SIGNEDANDENVELOPED = CERTENROLL_OBJECTID._PKCS_7_SIGNEDANDENVELOPED;
pub const XCN_OID_PKCS_7_DIGESTED = CERTENROLL_OBJECTID._PKCS_7_DIGESTED;
pub const XCN_OID_PKCS_7_ENCRYPTED = CERTENROLL_OBJECTID._PKCS_7_ENCRYPTED;
pub const XCN_OID_PKCS_9_CONTENT_TYPE = CERTENROLL_OBJECTID._PKCS_9_CONTENT_TYPE;
pub const XCN_OID_PKCS_9_MESSAGE_DIGEST = CERTENROLL_OBJECTID._PKCS_9_MESSAGE_DIGEST;
pub const XCN_OID_CERT_PROP_ID_PREFIX = CERTENROLL_OBJECTID._CERT_PROP_ID_PREFIX;
pub const XCN_OID_CERT_KEY_IDENTIFIER_PROP_ID = CERTENROLL_OBJECTID._CERT_KEY_IDENTIFIER_PROP_ID;
pub const XCN_OID_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = CERTENROLL_OBJECTID._CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID;
pub const XCN_OID_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = CERTENROLL_OBJECTID._CERT_SUBJECT_NAME_MD5_HASH_PROP_ID;
pub const XCN_OID_CERT_MD5_HASH_PROP_ID = CERTENROLL_OBJECTID._CERT_MD5_HASH_PROP_ID;
pub const XCN_OID_RSA_SHA256RSA = CERTENROLL_OBJECTID._RSA_SHA256RSA;
pub const XCN_OID_RSA_SHA384RSA = CERTENROLL_OBJECTID._RSA_SHA384RSA;
pub const XCN_OID_RSA_SHA512RSA = CERTENROLL_OBJECTID._RSA_SHA512RSA;
pub const XCN_OID_NIST_sha256 = CERTENROLL_OBJECTID._NIST_sha256;
pub const XCN_OID_NIST_sha384 = CERTENROLL_OBJECTID._NIST_sha384;
pub const XCN_OID_NIST_sha512 = CERTENROLL_OBJECTID._NIST_sha512;
pub const XCN_OID_RSA_MGF1 = CERTENROLL_OBJECTID._RSA_MGF1;
pub const XCN_OID_ECC_PUBLIC_KEY = CERTENROLL_OBJECTID._ECC_PUBLIC_KEY;
pub const XCN_OID_ECDSA_SHA1 = CERTENROLL_OBJECTID._ECDSA_SHA1;
pub const XCN_OID_ECDSA_SPECIFIED = CERTENROLL_OBJECTID._ECDSA_SPECIFIED;
pub const XCN_OID_ANY_ENHANCED_KEY_USAGE = CERTENROLL_OBJECTID._ANY_ENHANCED_KEY_USAGE;
pub const XCN_OID_RSA_SSA_PSS = CERTENROLL_OBJECTID._RSA_SSA_PSS;
pub const XCN_OID_ATTR_SUPPORTED_ALGORITHMS = CERTENROLL_OBJECTID._ATTR_SUPPORTED_ALGORITHMS;
pub const XCN_OID_ATTR_TPM_SECURITY_ASSERTIONS = CERTENROLL_OBJECTID._ATTR_TPM_SECURITY_ASSERTIONS;
pub const XCN_OID_ATTR_TPM_SPECIFICATION = CERTENROLL_OBJECTID._ATTR_TPM_SPECIFICATION;
pub const XCN_OID_CERT_DISALLOWED_FILETIME_PROP_ID = CERTENROLL_OBJECTID._CERT_DISALLOWED_FILETIME_PROP_ID;
pub const XCN_OID_CERT_SIGNATURE_HASH_PROP_ID = CERTENROLL_OBJECTID._CERT_SIGNATURE_HASH_PROP_ID;
pub const XCN_OID_CERT_STRONG_KEY_OS_1 = CERTENROLL_OBJECTID._CERT_STRONG_KEY_OS_1;
pub const XCN_OID_CERT_STRONG_KEY_OS_CURRENT = CERTENROLL_OBJECTID._CERT_STRONG_KEY_OS_CURRENT;
pub const XCN_OID_CERT_STRONG_KEY_OS_PREFIX = CERTENROLL_OBJECTID._CERT_STRONG_KEY_OS_PREFIX;
pub const XCN_OID_CERT_STRONG_SIGN_OS_1 = CERTENROLL_OBJECTID._CERT_STRONG_SIGN_OS_1;
pub const XCN_OID_CERT_STRONG_SIGN_OS_CURRENT = CERTENROLL_OBJECTID._CERT_STRONG_SIGN_OS_CURRENT;
pub const XCN_OID_CERT_STRONG_SIGN_OS_PREFIX = CERTENROLL_OBJECTID._CERT_STRONG_SIGN_OS_PREFIX;
pub const XCN_OID_DH_SINGLE_PASS_STDDH_SHA1_KDF = CERTENROLL_OBJECTID._DH_SINGLE_PASS_STDDH_SHA1_KDF;
pub const XCN_OID_DH_SINGLE_PASS_STDDH_SHA256_KDF = CERTENROLL_OBJECTID._DH_SINGLE_PASS_STDDH_SHA256_KDF;
pub const XCN_OID_DH_SINGLE_PASS_STDDH_SHA384_KDF = CERTENROLL_OBJECTID._DH_SINGLE_PASS_STDDH_SHA384_KDF;
pub const XCN_OID_DISALLOWED_HASH = CERTENROLL_OBJECTID._DISALLOWED_HASH;
pub const XCN_OID_DISALLOWED_LIST = CERTENROLL_OBJECTID._DISALLOWED_LIST;
pub const XCN_OID_ECC_CURVE_P256 = CERTENROLL_OBJECTID._ECC_CURVE_P256;
pub const XCN_OID_ECC_CURVE_P384 = CERTENROLL_OBJECTID._ECC_CURVE_P384;
pub const XCN_OID_ECC_CURVE_P521 = CERTENROLL_OBJECTID._ECC_CURVE_P521;
pub const XCN_OID_ECDSA_SHA256 = CERTENROLL_OBJECTID._ECDSA_SHA256;
pub const XCN_OID_ECDSA_SHA384 = CERTENROLL_OBJECTID._ECDSA_SHA384;
pub const XCN_OID_ECDSA_SHA512 = CERTENROLL_OBJECTID._ECDSA_SHA512;
pub const XCN_OID_ENROLL_CAXCHGCERT_HASH = CERTENROLL_OBJECTID._ENROLL_CAXCHGCERT_HASH;
pub const XCN_OID_ENROLL_EK_INFO = CERTENROLL_OBJECTID._ENROLL_EK_INFO;
pub const XCN_OID_ENROLL_EKPUB_CHALLENGE = CERTENROLL_OBJECTID._ENROLL_EKPUB_CHALLENGE;
pub const XCN_OID_ENROLL_EKVERIFYCERT = CERTENROLL_OBJECTID._ENROLL_EKVERIFYCERT;
pub const XCN_OID_ENROLL_EKVERIFYCREDS = CERTENROLL_OBJECTID._ENROLL_EKVERIFYCREDS;
pub const XCN_OID_ENROLL_EKVERIFYKEY = CERTENROLL_OBJECTID._ENROLL_EKVERIFYKEY;
pub const XCN_OID_EV_RDN_COUNTRY = CERTENROLL_OBJECTID._EV_RDN_COUNTRY;
pub const XCN_OID_EV_RDN_LOCALE = CERTENROLL_OBJECTID._EV_RDN_LOCALE;
pub const XCN_OID_EV_RDN_STATE_OR_PROVINCE = CERTENROLL_OBJECTID._EV_RDN_STATE_OR_PROVINCE;
pub const XCN_OID_INHIBIT_ANY_POLICY = CERTENROLL_OBJECTID._INHIBIT_ANY_POLICY;
pub const XCN_OID_INTERNATIONALIZED_EMAIL_ADDRESS = CERTENROLL_OBJECTID._INTERNATIONALIZED_EMAIL_ADDRESS;
pub const XCN_OID_KP_KERNEL_MODE_CODE_SIGNING = CERTENROLL_OBJECTID._KP_KERNEL_MODE_CODE_SIGNING;
pub const XCN_OID_KP_KERNEL_MODE_HAL_EXTENSION_SIGNING = CERTENROLL_OBJECTID._KP_KERNEL_MODE_HAL_EXTENSION_SIGNING;
pub const XCN_OID_KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING = CERTENROLL_OBJECTID._KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING;
pub const XCN_OID_KP_TPM_AIK_CERTIFICATE = CERTENROLL_OBJECTID._KP_TPM_AIK_CERTIFICATE;
pub const XCN_OID_KP_TPM_EK_CERTIFICATE = CERTENROLL_OBJECTID._KP_TPM_EK_CERTIFICATE;
pub const XCN_OID_KP_TPM_PLATFORM_CERTIFICATE = CERTENROLL_OBJECTID._KP_TPM_PLATFORM_CERTIFICATE;
pub const XCN_OID_NIST_AES128_CBC = CERTENROLL_OBJECTID._NIST_AES128_CBC;
pub const XCN_OID_NIST_AES128_WRAP = CERTENROLL_OBJECTID._NIST_AES128_WRAP;
pub const XCN_OID_NIST_AES192_CBC = CERTENROLL_OBJECTID._NIST_AES192_CBC;
pub const XCN_OID_NIST_AES192_WRAP = CERTENROLL_OBJECTID._NIST_AES192_WRAP;
pub const XCN_OID_NIST_AES256_CBC = CERTENROLL_OBJECTID._NIST_AES256_CBC;
pub const XCN_OID_NIST_AES256_WRAP = CERTENROLL_OBJECTID._NIST_AES256_WRAP;
pub const XCN_OID_PKCS_12_PbeIds = CERTENROLL_OBJECTID._PKCS_12_PbeIds;
pub const XCN_OID_PKCS_12_pbeWithSHA1And128BitRC2 = CERTENROLL_OBJECTID._PKCS_12_pbeWithSHA1And128BitRC2;
pub const XCN_OID_PKCS_12_pbeWithSHA1And128BitRC4 = CERTENROLL_OBJECTID._PKCS_12_pbeWithSHA1And128BitRC4;
pub const XCN_OID_PKCS_12_pbeWithSHA1And2KeyTripleDES = CERTENROLL_OBJECTID._PKCS_12_pbeWithSHA1And2KeyTripleDES;
pub const XCN_OID_PKCS_12_pbeWithSHA1And3KeyTripleDES = CERTENROLL_OBJECTID._PKCS_12_pbeWithSHA1And3KeyTripleDES;
pub const XCN_OID_PKCS_12_pbeWithSHA1And40BitRC2 = CERTENROLL_OBJECTID._PKCS_12_pbeWithSHA1And40BitRC2;
pub const XCN_OID_PKCS_12_pbeWithSHA1And40BitRC4 = CERTENROLL_OBJECTID._PKCS_12_pbeWithSHA1And40BitRC4;
pub const XCN_OID_PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID = CERTENROLL_OBJECTID._PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID;
pub const XCN_OID_PKINIT_KP_KDC = CERTENROLL_OBJECTID._PKINIT_KP_KDC;
pub const XCN_OID_PKIX_CA_REPOSITORY = CERTENROLL_OBJECTID._PKIX_CA_REPOSITORY;
pub const XCN_OID_PKIX_OCSP_NONCE = CERTENROLL_OBJECTID._PKIX_OCSP_NONCE;
pub const XCN_OID_PKIX_TIME_STAMPING = CERTENROLL_OBJECTID._PKIX_TIME_STAMPING;
pub const XCN_OID_QC_EU_COMPLIANCE = CERTENROLL_OBJECTID._QC_EU_COMPLIANCE;
pub const XCN_OID_QC_SSCD = CERTENROLL_OBJECTID._QC_SSCD;
pub const XCN_OID_QC_STATEMENTS_EXT = CERTENROLL_OBJECTID._QC_STATEMENTS_EXT;
pub const XCN_OID_RDN_TPM_MANUFACTURER = CERTENROLL_OBJECTID._RDN_TPM_MANUFACTURER;
pub const XCN_OID_RDN_TPM_MODEL = CERTENROLL_OBJECTID._RDN_TPM_MODEL;
pub const XCN_OID_RDN_TPM_VERSION = CERTENROLL_OBJECTID._RDN_TPM_VERSION;
pub const XCN_OID_REVOKED_LIST_SIGNER = CERTENROLL_OBJECTID._REVOKED_LIST_SIGNER;
pub const XCN_OID_RFC3161_counterSign = CERTENROLL_OBJECTID._RFC3161_counterSign;
pub const XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION = CERTENROLL_OBJECTID._ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION;
pub const XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION = CERTENROLL_OBJECTID._ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION;
pub const XCN_OID_ROOT_PROGRAM_FLAGS = CERTENROLL_OBJECTID._ROOT_PROGRAM_FLAGS;
pub const XCN_OID_ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL = CERTENROLL_OBJECTID._ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL;
pub const XCN_OID_RSA_PSPECIFIED = CERTENROLL_OBJECTID._RSA_PSPECIFIED;
pub const XCN_OID_RSAES_OAEP = CERTENROLL_OBJECTID._RSAES_OAEP;
pub const XCN_OID_SUBJECT_INFO_ACCESS = CERTENROLL_OBJECTID._SUBJECT_INFO_ACCESS;
pub const XCN_OID_TIMESTAMP_TOKEN = CERTENROLL_OBJECTID._TIMESTAMP_TOKEN;
pub const XCN_OID_ENROLL_SCEP_ERROR = CERTENROLL_OBJECTID._ENROLL_SCEP_ERROR;
pub const XCN_OIDVerisign_MessageType = CERTENROLL_OBJECTID.Verisign_MessageType;
pub const XCN_OIDVerisign_PkiStatus = CERTENROLL_OBJECTID.Verisign_PkiStatus;
pub const XCN_OIDVerisign_FailInfo = CERTENROLL_OBJECTID.Verisign_FailInfo;
pub const XCN_OIDVerisign_SenderNonce = CERTENROLL_OBJECTID.Verisign_SenderNonce;
pub const XCN_OIDVerisign_RecipientNonce = CERTENROLL_OBJECTID.Verisign_RecipientNonce;
pub const XCN_OIDVerisign_TransactionID = CERTENROLL_OBJECTID.Verisign_TransactionID;
pub const XCN_OID_ENROLL_ATTESTATION_CHALLENGE = CERTENROLL_OBJECTID._ENROLL_ATTESTATION_CHALLENGE;
pub const XCN_OID_ENROLL_ATTESTATION_STATEMENT = CERTENROLL_OBJECTID._ENROLL_ATTESTATION_STATEMENT;
pub const XCN_OID_ENROLL_ENCRYPTION_ALGORITHM = CERTENROLL_OBJECTID._ENROLL_ENCRYPTION_ALGORITHM;
pub const XCN_OID_ENROLL_KSP_NAME = CERTENROLL_OBJECTID._ENROLL_KSP_NAME;

pub const WebSecurityLevel = enum(i32) {
    Unsafe = 0,
    Safe = 1,
};
pub const LevelUnsafe = WebSecurityLevel.Unsafe;
pub const LevelSafe = WebSecurityLevel.Safe;

pub const EncodingType = enum(i32) {
    BASE64HEADER = 0,
    BASE64 = 1,
    BINARY = 2,
    BASE64REQUESTHEADER = 3,
    HEX = 4,
    HEXASCII = 5,
    BASE64_ANY = 6,
    ANY = 7,
    HEX_ANY = 8,
    BASE64X509CRLHEADER = 9,
    HEXADDR = 10,
    HEXASCIIADDR = 11,
    HEXRAW = 12,
    BASE64URI = 13,
    ENCODEMASK = 255,
    CHAIN = 256,
    TEXT = 512,
    PERCENTESCAPE = 134217728,
    HASHDATA = 268435456,
    STRICT = 536870912,
    NOCRLF = 1073741824,
    NOCR = -2147483648,
};
pub const XCN_CRYPT_STRING_BASE64HEADER = EncodingType.BASE64HEADER;
pub const XCN_CRYPT_STRING_BASE64 = EncodingType.BASE64;
pub const XCN_CRYPT_STRING_BINARY = EncodingType.BINARY;
pub const XCN_CRYPT_STRING_BASE64REQUESTHEADER = EncodingType.BASE64REQUESTHEADER;
pub const XCN_CRYPT_STRING_HEX = EncodingType.HEX;
pub const XCN_CRYPT_STRING_HEXASCII = EncodingType.HEXASCII;
pub const XCN_CRYPT_STRING_BASE64_ANY = EncodingType.BASE64_ANY;
pub const XCN_CRYPT_STRING_ANY = EncodingType.ANY;
pub const XCN_CRYPT_STRING_HEX_ANY = EncodingType.HEX_ANY;
pub const XCN_CRYPT_STRING_BASE64X509CRLHEADER = EncodingType.BASE64X509CRLHEADER;
pub const XCN_CRYPT_STRING_HEXADDR = EncodingType.HEXADDR;
pub const XCN_CRYPT_STRING_HEXASCIIADDR = EncodingType.HEXASCIIADDR;
pub const XCN_CRYPT_STRING_HEXRAW = EncodingType.HEXRAW;
pub const XCN_CRYPT_STRING_BASE64URI = EncodingType.BASE64URI;
pub const XCN_CRYPT_STRING_ENCODEMASK = EncodingType.ENCODEMASK;
pub const XCN_CRYPT_STRING_CHAIN = EncodingType.CHAIN;
pub const XCN_CRYPT_STRING_TEXT = EncodingType.TEXT;
pub const XCN_CRYPT_STRING_PERCENTESCAPE = EncodingType.PERCENTESCAPE;
pub const XCN_CRYPT_STRING_HASHDATA = EncodingType.HASHDATA;
pub const XCN_CRYPT_STRING_STRICT = EncodingType.STRICT;
pub const XCN_CRYPT_STRING_NOCRLF = EncodingType.NOCRLF;
pub const XCN_CRYPT_STRING_NOCR = EncodingType.NOCR;

pub const PFXExportOptions = enum(i32) {
    EEOnly = 0,
    ChainNoRoot = 1,
    ChainWithRoot = 2,
};
pub const PFXExportEEOnly = PFXExportOptions.EEOnly;
pub const PFXExportChainNoRoot = PFXExportOptions.ChainNoRoot;
pub const PFXExportChainWithRoot = PFXExportOptions.ChainWithRoot;

pub const ObjectIdGroupId = enum(i32) {
    ANY_GROUP_ID = 0,
    HASH_ALG_OID_GROUP_ID = 1,
    ENCRYPT_ALG_OID_GROUP_ID = 2,
    PUBKEY_ALG_OID_GROUP_ID = 3,
    SIGN_ALG_OID_GROUP_ID = 4,
    RDN_ATTR_OID_GROUP_ID = 5,
    EXT_OR_ATTR_OID_GROUP_ID = 6,
    ENHKEY_USAGE_OID_GROUP_ID = 7,
    POLICY_OID_GROUP_ID = 8,
    TEMPLATE_OID_GROUP_ID = 9,
    KDF_OID_GROUP_ID = 10,
    GROUP_ID_MASK = 65535,
    OID_PREFER_CNG_ALGID_FLAG = 1073741824,
    OID_DISABLE_SEARCH_DS_FLAG = -2147483648,
    OID_INFO_OID_GROUP_BIT_LEN_MASK = 268369920,
    OID_INFO_OID_GROUP_BIT_LEN_SHIFT = 16,
    pub const LAST_OID_GROUP_ID = .KDF_OID_GROUP_ID;
    pub const FIRST_ALG_OID_GROUP_ID = .HASH_ALG_OID_GROUP_ID;
    pub const LAST_ALG_OID_GROUP_ID = .SIGN_ALG_OID_GROUP_ID;
    pub const KEY_LENGTH_MASK = .OID_INFO_OID_GROUP_BIT_LEN_MASK;
};
pub const XCN_CRYPT_ANY_GROUP_ID = ObjectIdGroupId.ANY_GROUP_ID;
pub const XCN_CRYPT_HASH_ALG_OID_GROUP_ID = ObjectIdGroupId.HASH_ALG_OID_GROUP_ID;
pub const XCN_CRYPT_ENCRYPT_ALG_OID_GROUP_ID = ObjectIdGroupId.ENCRYPT_ALG_OID_GROUP_ID;
pub const XCN_CRYPT_PUBKEY_ALG_OID_GROUP_ID = ObjectIdGroupId.PUBKEY_ALG_OID_GROUP_ID;
pub const XCN_CRYPT_SIGN_ALG_OID_GROUP_ID = ObjectIdGroupId.SIGN_ALG_OID_GROUP_ID;
pub const XCN_CRYPT_RDN_ATTR_OID_GROUP_ID = ObjectIdGroupId.RDN_ATTR_OID_GROUP_ID;
pub const XCN_CRYPT_EXT_OR_ATTR_OID_GROUP_ID = ObjectIdGroupId.EXT_OR_ATTR_OID_GROUP_ID;
pub const XCN_CRYPT_ENHKEY_USAGE_OID_GROUP_ID = ObjectIdGroupId.ENHKEY_USAGE_OID_GROUP_ID;
pub const XCN_CRYPT_POLICY_OID_GROUP_ID = ObjectIdGroupId.POLICY_OID_GROUP_ID;
pub const XCN_CRYPT_TEMPLATE_OID_GROUP_ID = ObjectIdGroupId.TEMPLATE_OID_GROUP_ID;
pub const XCN_CRYPT_KDF_OID_GROUP_ID = ObjectIdGroupId.KDF_OID_GROUP_ID;
pub const XCN_CRYPT_LAST_OID_GROUP_ID = ObjectIdGroupId.KDF_OID_GROUP_ID;
pub const XCN_CRYPT_FIRST_ALG_OID_GROUP_ID = ObjectIdGroupId.HASH_ALG_OID_GROUP_ID;
pub const XCN_CRYPT_LAST_ALG_OID_GROUP_ID = ObjectIdGroupId.SIGN_ALG_OID_GROUP_ID;
pub const XCN_CRYPT_GROUP_ID_MASK = ObjectIdGroupId.GROUP_ID_MASK;
pub const XCN_CRYPT_OID_PREFER_CNG_ALGID_FLAG = ObjectIdGroupId.OID_PREFER_CNG_ALGID_FLAG;
pub const XCN_CRYPT_OID_DISABLE_SEARCH_DS_FLAG = ObjectIdGroupId.OID_DISABLE_SEARCH_DS_FLAG;
pub const XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK = ObjectIdGroupId.OID_INFO_OID_GROUP_BIT_LEN_MASK;
pub const XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT = ObjectIdGroupId.OID_INFO_OID_GROUP_BIT_LEN_SHIFT;
pub const XCN_CRYPT_KEY_LENGTH_MASK = ObjectIdGroupId.OID_INFO_OID_GROUP_BIT_LEN_MASK;

pub const ObjectIdPublicKeyFlags = enum(i32) {
    ANY = 0,
    SIGN_KEY_FLAG = -2147483648,
    ENCRYPT_KEY_FLAG = 1073741824,
};
pub const XCN_CRYPT_OID_INFO_PUBKEY_ANY = ObjectIdPublicKeyFlags.ANY;
pub const XCN_CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG = ObjectIdPublicKeyFlags.SIGN_KEY_FLAG;
pub const XCN_CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG = ObjectIdPublicKeyFlags.ENCRYPT_KEY_FLAG;

pub const AlgorithmFlags = enum(i32) {
    None = 0,
    Wrap = 1,
};
pub const AlgorithmFlagsNone = AlgorithmFlags.None;
pub const AlgorithmFlagsWrap = AlgorithmFlags.Wrap;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IObjectId_Value = Guid.initString("728ab300-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IObjectId = &IID_IObjectId_Value;
pub const IObjectId = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        InitializeFromName: *const fn(
            self: *const IObjectId,
            Name: CERTENROLL_OBJECTID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromValue: *const fn(
            self: *const IObjectId,
            strValue: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromAlgorithmName: *const fn(
            self: *const IObjectId,
            GroupId: ObjectIdGroupId,
            KeyFlags: ObjectIdPublicKeyFlags,
            AlgFlags: AlgorithmFlags,
            strAlgorithmName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn(
            self: *const IObjectId,
            pValue: ?*CERTENROLL_OBJECTID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FriendlyName: *const fn(
            self: *const IObjectId,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FriendlyName: *const fn(
            self: *const IObjectId,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn(
            self: *const IObjectId,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAlgorithmName: *const fn(
            self: *const IObjectId,
            GroupId: ObjectIdGroupId,
            KeyFlags: ObjectIdPublicKeyFlags,
            pstrAlgorithmName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeFromName(self: *const IObjectId, Name: CERTENROLL_OBJECTID) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromName(self, Name);
    }
    pub fn InitializeFromValue(self: *const IObjectId, strValue: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromValue(self, strValue);
    }
    pub fn InitializeFromAlgorithmName(self: *const IObjectId, GroupId: ObjectIdGroupId, KeyFlags: ObjectIdPublicKeyFlags, AlgFlags: AlgorithmFlags, strAlgorithmName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromAlgorithmName(self, GroupId, KeyFlags, AlgFlags, strAlgorithmName);
    }
    pub fn get_Name(self: *const IObjectId, pValue: ?*CERTENROLL_OBJECTID) callconv(.Inline) HRESULT {
        return self.vtable.get_Name(self, pValue);
    }
    pub fn get_FriendlyName(self: *const IObjectId, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_FriendlyName(self, pValue);
    }
    pub fn put_FriendlyName(self: *const IObjectId, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_FriendlyName(self, Value);
    }
    pub fn get_Value(self: *const IObjectId, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Value(self, pValue);
    }
    pub fn GetAlgorithmName(self: *const IObjectId, GroupId: ObjectIdGroupId, KeyFlags: ObjectIdPublicKeyFlags, pstrAlgorithmName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetAlgorithmName(self, GroupId, KeyFlags, pstrAlgorithmName);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IObjectIds_Value = Guid.initString("728ab301-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IObjectIds = &IID_IObjectIds_Value;
pub const IObjectIds = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: *const fn(
            self: *const IObjectIds,
            Index: i32,
            pVal: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IObjectIds,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const IObjectIds,
            pVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const IObjectIds,
            pVal: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const IObjectIds,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn(
            self: *const IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRange: *const fn(
            self: *const IObjectIds,
            pValue: ?*IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ItemByIndex(self: *const IObjectIds, Index: i32, pVal: ?*?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByIndex(self, Index, pVal);
    }
    pub fn get_Count(self: *const IObjectIds, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
    pub fn get__NewEnum(self: *const IObjectIds, pVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, pVal);
    }
    pub fn Add(self: *const IObjectIds, pVal: ?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, pVal);
    }
    pub fn Remove(self: *const IObjectIds, Index: i32) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, Index);
    }
    pub fn Clear(self: *const IObjectIds) callconv(.Inline) HRESULT {
        return self.vtable.Clear(self);
    }
    pub fn AddRange(self: *const IObjectIds, pValue: ?*IObjectIds) callconv(.Inline) HRESULT {
        return self.vtable.AddRange(self, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IBinaryConverter_Value = Guid.initString("728ab302-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IBinaryConverter = &IID_IBinaryConverter_Value;
pub const IBinaryConverter = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        StringToString: *const fn(
            self: *const IBinaryConverter,
            strEncodedIn: ?BSTR,
            EncodingIn: EncodingType,
            Encoding: EncodingType,
            pstrEncoded: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        VariantByteArrayToString: *const fn(
            self: *const IBinaryConverter,
            pvarByteArray: ?*VARIANT,
            Encoding: EncodingType,
            pstrEncoded: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StringToVariantByteArray: *const fn(
            self: *const IBinaryConverter,
            strEncoded: ?BSTR,
            Encoding: EncodingType,
            pvarByteArray: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn StringToString(self: *const IBinaryConverter, strEncodedIn: ?BSTR, EncodingIn: EncodingType, Encoding: EncodingType, pstrEncoded: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.StringToString(self, strEncodedIn, EncodingIn, Encoding, pstrEncoded);
    }
    pub fn VariantByteArrayToString(self: *const IBinaryConverter, pvarByteArray: ?*VARIANT, Encoding: EncodingType, pstrEncoded: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.VariantByteArrayToString(self, pvarByteArray, Encoding, pstrEncoded);
    }
    pub fn StringToVariantByteArray(self: *const IBinaryConverter, strEncoded: ?BSTR, Encoding: EncodingType, pvarByteArray: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.StringToVariantByteArray(self, strEncoded, Encoding, pvarByteArray);
    }
};

const IID_IBinaryConverter2_Value = Guid.initString("8d7928b4-4e17-428d-9a17-728df00d1b2b");
pub const IID_IBinaryConverter2 = &IID_IBinaryConverter2_Value;
pub const IBinaryConverter2 = extern union {
    pub const VTable = extern struct {
        base: IBinaryConverter.VTable,
        StringArrayToVariantArray: *const fn(
            self: *const IBinaryConverter2,
            pvarStringArray: ?*VARIANT,
            pvarVariantArray: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        VariantArrayToStringArray: *const fn(
            self: *const IBinaryConverter2,
            pvarVariantArray: ?*VARIANT,
            pvarStringArray: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IBinaryConverter: IBinaryConverter,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn StringArrayToVariantArray(self: *const IBinaryConverter2, pvarStringArray: ?*VARIANT, pvarVariantArray: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.StringArrayToVariantArray(self, pvarStringArray, pvarVariantArray);
    }
    pub fn VariantArrayToStringArray(self: *const IBinaryConverter2, pvarVariantArray: ?*VARIANT, pvarStringArray: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.VariantArrayToStringArray(self, pvarVariantArray, pvarStringArray);
    }
};

pub const X500NameFlags = enum(i32) {
    NAME_STR_NONE = 0,
    SIMPLE_NAME_STR = 1,
    OID_NAME_STR = 2,
    X500_NAME_STR = 3,
    XML_NAME_STR = 4,
    NAME_STR_SEMICOLON_FLAG = 1073741824,
    NAME_STR_NO_PLUS_FLAG = 536870912,
    NAME_STR_NO_QUOTING_FLAG = 268435456,
    NAME_STR_CRLF_FLAG = 134217728,
    NAME_STR_COMMA_FLAG = 67108864,
    NAME_STR_REVERSE_FLAG = 33554432,
    NAME_STR_FORWARD_FLAG = 16777216,
    NAME_STR_AMBIGUOUS_SEPARATOR_FLAGS = 1275068416,
    NAME_STR_DISABLE_IE4_UTF8_FLAG = 65536,
    NAME_STR_ENABLE_T61_UNICODE_FLAG = 131072,
    NAME_STR_ENABLE_UTF8_UNICODE_FLAG = 262144,
    NAME_STR_FORCE_UTF8_DIR_STR_FLAG = 524288,
    NAME_STR_DISABLE_UTF8_DIR_STR_FLAG = 1048576,
    NAME_STR_ENABLE_PUNYCODE_FLAG = 2097152,
    NAME_STR_DS_ESCAPED = 8388608,
};
pub const XCN_CERT_NAME_STR_NONE = X500NameFlags.NAME_STR_NONE;
pub const XCN_CERT_SIMPLE_NAME_STR = X500NameFlags.SIMPLE_NAME_STR;
pub const XCN_CERT_OID_NAME_STR = X500NameFlags.OID_NAME_STR;
pub const XCN_CERT_X500_NAME_STR = X500NameFlags.X500_NAME_STR;
pub const XCN_CERT_XML_NAME_STR = X500NameFlags.XML_NAME_STR;
pub const XCN_CERT_NAME_STR_SEMICOLON_FLAG = X500NameFlags.NAME_STR_SEMICOLON_FLAG;
pub const XCN_CERT_NAME_STR_NO_PLUS_FLAG = X500NameFlags.NAME_STR_NO_PLUS_FLAG;
pub const XCN_CERT_NAME_STR_NO_QUOTING_FLAG = X500NameFlags.NAME_STR_NO_QUOTING_FLAG;
pub const XCN_CERT_NAME_STR_CRLF_FLAG = X500NameFlags.NAME_STR_CRLF_FLAG;
pub const XCN_CERT_NAME_STR_COMMA_FLAG = X500NameFlags.NAME_STR_COMMA_FLAG;
pub const XCN_CERT_NAME_STR_REVERSE_FLAG = X500NameFlags.NAME_STR_REVERSE_FLAG;
pub const XCN_CERT_NAME_STR_FORWARD_FLAG = X500NameFlags.NAME_STR_FORWARD_FLAG;
pub const XCN_CERT_NAME_STR_AMBIGUOUS_SEPARATOR_FLAGS = X500NameFlags.NAME_STR_AMBIGUOUS_SEPARATOR_FLAGS;
pub const XCN_CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG = X500NameFlags.NAME_STR_DISABLE_IE4_UTF8_FLAG;
pub const XCN_CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG = X500NameFlags.NAME_STR_ENABLE_T61_UNICODE_FLAG;
pub const XCN_CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG = X500NameFlags.NAME_STR_ENABLE_UTF8_UNICODE_FLAG;
pub const XCN_CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG = X500NameFlags.NAME_STR_FORCE_UTF8_DIR_STR_FLAG;
pub const XCN_CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG = X500NameFlags.NAME_STR_DISABLE_UTF8_DIR_STR_FLAG;
pub const XCN_CERT_NAME_STR_ENABLE_PUNYCODE_FLAG = X500NameFlags.NAME_STR_ENABLE_PUNYCODE_FLAG;
pub const XCN_CERT_NAME_STR_DS_ESCAPED = X500NameFlags.NAME_STR_DS_ESCAPED;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX500DistinguishedName_Value = Guid.initString("728ab303-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX500DistinguishedName = &IID_IX500DistinguishedName_Value;
pub const IX500DistinguishedName = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Decode: *const fn(
            self: *const IX500DistinguishedName,
            strEncodedName: ?BSTR,
            Encoding: EncodingType,
            NameFlags: X500NameFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: *const fn(
            self: *const IX500DistinguishedName,
            strName: ?BSTR,
            NameFlags: X500NameFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn(
            self: *const IX500DistinguishedName,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EncodedName: *const fn(
            self: *const IX500DistinguishedName,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Decode(self: *const IX500DistinguishedName, strEncodedName: ?BSTR, Encoding: EncodingType, NameFlags: X500NameFlags) callconv(.Inline) HRESULT {
        return self.vtable.Decode(self, strEncodedName, Encoding, NameFlags);
    }
    pub fn Encode(self: *const IX500DistinguishedName, strName: ?BSTR, NameFlags: X500NameFlags) callconv(.Inline) HRESULT {
        return self.vtable.Encode(self, strName, NameFlags);
    }
    pub fn get_Name(self: *const IX500DistinguishedName, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Name(self, pValue);
    }
    pub fn get_EncodedName(self: *const IX500DistinguishedName, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_EncodedName(self, Encoding, pValue);
    }
};

pub const X509CertificateEnrollmentContext = enum(i32) {
    None = 0,
    User = 1,
    Machine = 2,
    AdministratorForceMachine = 3,
};
pub const ContextNone = X509CertificateEnrollmentContext.None;
pub const ContextUser = X509CertificateEnrollmentContext.User;
pub const ContextMachine = X509CertificateEnrollmentContext.Machine;
pub const ContextAdministratorForceMachine = X509CertificateEnrollmentContext.AdministratorForceMachine;

pub const EnrollmentEnrollStatus = enum(i32) {
    ed = 1,
    Pended = 2,
    UIDeferredEnrollmentRequired = 4,
    Error = 16,
    Unknown = 32,
    Skipped = 64,
    Denied = 256,
};
pub const Enrolled = EnrollmentEnrollStatus.ed;
pub const EnrollPended = EnrollmentEnrollStatus.Pended;
pub const EnrollUIDeferredEnrollmentRequired = EnrollmentEnrollStatus.UIDeferredEnrollmentRequired;
pub const EnrollError = EnrollmentEnrollStatus.Error;
pub const EnrollUnknown = EnrollmentEnrollStatus.Unknown;
pub const EnrollSkipped = EnrollmentEnrollStatus.Skipped;
pub const EnrollDenied = EnrollmentEnrollStatus.Denied;

pub const EnrollmentSelectionStatus = enum(i32) {
    No = 0,
    Yes = 1,
};
pub const SelectedNo = EnrollmentSelectionStatus.No;
pub const SelectedYes = EnrollmentSelectionStatus.Yes;

pub const EnrollmentDisplayStatus = enum(i32) {
    No = 0,
    Yes = 1,
};
pub const DisplayNo = EnrollmentDisplayStatus.No;
pub const DisplayYes = EnrollmentDisplayStatus.Yes;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509EnrollmentStatus_Value = Guid.initString("728ab304-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509EnrollmentStatus = &IID_IX509EnrollmentStatus_Value;
pub const IX509EnrollmentStatus = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        AppendText: *const fn(
            self: *const IX509EnrollmentStatus,
            strText: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Text: *const fn(
            self: *const IX509EnrollmentStatus,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Text: *const fn(
            self: *const IX509EnrollmentStatus,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Selected: *const fn(
            self: *const IX509EnrollmentStatus,
            pValue: ?*EnrollmentSelectionStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Selected: *const fn(
            self: *const IX509EnrollmentStatus,
            Value: EnrollmentSelectionStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Display: *const fn(
            self: *const IX509EnrollmentStatus,
            pValue: ?*EnrollmentDisplayStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Display: *const fn(
            self: *const IX509EnrollmentStatus,
            Value: EnrollmentDisplayStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn(
            self: *const IX509EnrollmentStatus,
            pValue: ?*EnrollmentEnrollStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Status: *const fn(
            self: *const IX509EnrollmentStatus,
            Value: EnrollmentEnrollStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Error: *const fn(
            self: *const IX509EnrollmentStatus,
            pValue: ?*HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Error: *const fn(
            self: *const IX509EnrollmentStatus,
            Value: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ErrorText: *const fn(
            self: *const IX509EnrollmentStatus,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn AppendText(self: *const IX509EnrollmentStatus, strText: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.AppendText(self, strText);
    }
    pub fn get_Text(self: *const IX509EnrollmentStatus, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Text(self, pValue);
    }
    pub fn put_Text(self: *const IX509EnrollmentStatus, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Text(self, Value);
    }
    pub fn get_Selected(self: *const IX509EnrollmentStatus, pValue: ?*EnrollmentSelectionStatus) callconv(.Inline) HRESULT {
        return self.vtable.get_Selected(self, pValue);
    }
    pub fn put_Selected(self: *const IX509EnrollmentStatus, Value: EnrollmentSelectionStatus) callconv(.Inline) HRESULT {
        return self.vtable.put_Selected(self, Value);
    }
    pub fn get_Display(self: *const IX509EnrollmentStatus, pValue: ?*EnrollmentDisplayStatus) callconv(.Inline) HRESULT {
        return self.vtable.get_Display(self, pValue);
    }
    pub fn put_Display(self: *const IX509EnrollmentStatus, Value: EnrollmentDisplayStatus) callconv(.Inline) HRESULT {
        return self.vtable.put_Display(self, Value);
    }
    pub fn get_Status(self: *const IX509EnrollmentStatus, pValue: ?*EnrollmentEnrollStatus) callconv(.Inline) HRESULT {
        return self.vtable.get_Status(self, pValue);
    }
    pub fn put_Status(self: *const IX509EnrollmentStatus, Value: EnrollmentEnrollStatus) callconv(.Inline) HRESULT {
        return self.vtable.put_Status(self, Value);
    }
    pub fn get_Error(self: *const IX509EnrollmentStatus, pValue: ?*HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.get_Error(self, pValue);
    }
    pub fn put_Error(self: *const IX509EnrollmentStatus, Value: HRESULT) callconv(.Inline) HRESULT {
        return self.vtable.put_Error(self, Value);
    }
    pub fn get_ErrorText(self: *const IX509EnrollmentStatus, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ErrorText(self, pValue);
    }
};

pub const X509ProviderType = enum(i32) {
    NONE = 0,
    RSA_FULL = 1,
    RSA_SIG = 2,
    DSS = 3,
    FORTEZZA = 4,
    MS_EXCHANGE = 5,
    SSL = 6,
    RSA_SCHANNEL = 12,
    DSS_DH = 13,
    EC_ECDSA_SIG = 14,
    EC_ECNRA_SIG = 15,
    EC_ECDSA_FULL = 16,
    EC_ECNRA_FULL = 17,
    DH_SCHANNEL = 18,
    SPYRUS_LYNKS = 20,
    RNG = 21,
    INTEL_SEC = 22,
    REPLACE_OWF = 23,
    RSA_AES = 24,
};
pub const XCN_PROV_NONE = X509ProviderType.NONE;
pub const XCN_PROV_RSA_FULL = X509ProviderType.RSA_FULL;
pub const XCN_PROV_RSA_SIG = X509ProviderType.RSA_SIG;
pub const XCN_PROV_DSS = X509ProviderType.DSS;
pub const XCN_PROV_FORTEZZA = X509ProviderType.FORTEZZA;
pub const XCN_PROV_MS_EXCHANGE = X509ProviderType.MS_EXCHANGE;
pub const XCN_PROV_SSL = X509ProviderType.SSL;
pub const XCN_PROV_RSA_SCHANNEL = X509ProviderType.RSA_SCHANNEL;
pub const XCN_PROV_DSS_DH = X509ProviderType.DSS_DH;
pub const XCN_PROV_EC_ECDSA_SIG = X509ProviderType.EC_ECDSA_SIG;
pub const XCN_PROV_EC_ECNRA_SIG = X509ProviderType.EC_ECNRA_SIG;
pub const XCN_PROV_EC_ECDSA_FULL = X509ProviderType.EC_ECDSA_FULL;
pub const XCN_PROV_EC_ECNRA_FULL = X509ProviderType.EC_ECNRA_FULL;
pub const XCN_PROV_DH_SCHANNEL = X509ProviderType.DH_SCHANNEL;
pub const XCN_PROV_SPYRUS_LYNKS = X509ProviderType.SPYRUS_LYNKS;
pub const XCN_PROV_RNG = X509ProviderType.RNG;
pub const XCN_PROV_INTEL_SEC = X509ProviderType.INTEL_SEC;
pub const XCN_PROV_REPLACE_OWF = X509ProviderType.REPLACE_OWF;
pub const XCN_PROV_RSA_AES = X509ProviderType.RSA_AES;

pub const AlgorithmType = enum(i32) {
    UNKNOWN_INTERFACE = 0,
    CIPHER_INTERFACE = 1,
    HASH_INTERFACE = 2,
    ASYMMETRIC_ENCRYPTION_INTERFACE = 3,
    SIGNATURE_INTERFACE = 5,
    SECRET_AGREEMENT_INTERFACE = 4,
    RNG_INTERFACE = 6,
    KEY_DERIVATION_INTERFACE = 7,
};
pub const XCN_BCRYPT_UNKNOWN_INTERFACE = AlgorithmType.UNKNOWN_INTERFACE;
pub const XCN_BCRYPT_CIPHER_INTERFACE = AlgorithmType.CIPHER_INTERFACE;
pub const XCN_BCRYPT_HASH_INTERFACE = AlgorithmType.HASH_INTERFACE;
pub const XCN_BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = AlgorithmType.ASYMMETRIC_ENCRYPTION_INTERFACE;
pub const XCN_BCRYPT_SIGNATURE_INTERFACE = AlgorithmType.SIGNATURE_INTERFACE;
pub const XCN_BCRYPT_SECRET_AGREEMENT_INTERFACE = AlgorithmType.SECRET_AGREEMENT_INTERFACE;
pub const XCN_BCRYPT_RNG_INTERFACE = AlgorithmType.RNG_INTERFACE;
pub const XCN_BCRYPT_KEY_DERIVATION_INTERFACE = AlgorithmType.KEY_DERIVATION_INTERFACE;

pub const AlgorithmOperationFlags = enum(i32) {
    NO_OPERATION = 0,
    CIPHER_OPERATION = 1,
    HASH_OPERATION = 2,
    ASYMMETRIC_ENCRYPTION_OPERATION = 4,
    SECRET_AGREEMENT_OPERATION = 8,
    SIGNATURE_OPERATION = 16,
    RNG_OPERATION = 32,
    KEY_DERIVATION_OPERATION = 64,
    ANY_ASYMMETRIC_OPERATION = 28,
    PREFER_SIGNATURE_ONLY_OPERATION = 2097152,
    PREFER_NON_SIGNATURE_OPERATION = 4194304,
    EXACT_MATCH_OPERATION = 8388608,
    PREFERENCE_MASK_OPERATION = 14680064,
};
pub const XCN_NCRYPT_NO_OPERATION = AlgorithmOperationFlags.NO_OPERATION;
pub const XCN_NCRYPT_CIPHER_OPERATION = AlgorithmOperationFlags.CIPHER_OPERATION;
pub const XCN_NCRYPT_HASH_OPERATION = AlgorithmOperationFlags.HASH_OPERATION;
pub const XCN_NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = AlgorithmOperationFlags.ASYMMETRIC_ENCRYPTION_OPERATION;
pub const XCN_NCRYPT_SECRET_AGREEMENT_OPERATION = AlgorithmOperationFlags.SECRET_AGREEMENT_OPERATION;
pub const XCN_NCRYPT_SIGNATURE_OPERATION = AlgorithmOperationFlags.SIGNATURE_OPERATION;
pub const XCN_NCRYPT_RNG_OPERATION = AlgorithmOperationFlags.RNG_OPERATION;
pub const XCN_NCRYPT_KEY_DERIVATION_OPERATION = AlgorithmOperationFlags.KEY_DERIVATION_OPERATION;
pub const XCN_NCRYPT_ANY_ASYMMETRIC_OPERATION = AlgorithmOperationFlags.ANY_ASYMMETRIC_OPERATION;
pub const XCN_NCRYPT_PREFER_SIGNATURE_ONLY_OPERATION = AlgorithmOperationFlags.PREFER_SIGNATURE_ONLY_OPERATION;
pub const XCN_NCRYPT_PREFER_NON_SIGNATURE_OPERATION = AlgorithmOperationFlags.PREFER_NON_SIGNATURE_OPERATION;
pub const XCN_NCRYPT_EXACT_MATCH_OPERATION = AlgorithmOperationFlags.EXACT_MATCH_OPERATION;
pub const XCN_NCRYPT_PREFERENCE_MASK_OPERATION = AlgorithmOperationFlags.PREFERENCE_MASK_OPERATION;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICspAlgorithm_Value = Guid.initString("728ab305-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICspAlgorithm = &IID_ICspAlgorithm_Value;
pub const ICspAlgorithm = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetAlgorithmOid: *const fn(
            self: *const ICspAlgorithm,
            Length: i32,
            AlgFlags: AlgorithmFlags,
            ppValue: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DefaultLength: *const fn(
            self: *const ICspAlgorithm,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IncrementLength: *const fn(
            self: *const ICspAlgorithm,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LongName: *const fn(
            self: *const ICspAlgorithm,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Valid: *const fn(
            self: *const ICspAlgorithm,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxLength: *const fn(
            self: *const ICspAlgorithm,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinLength: *const fn(
            self: *const ICspAlgorithm,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn(
            self: *const ICspAlgorithm,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn(
            self: *const ICspAlgorithm,
            pValue: ?*AlgorithmType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Operations: *const fn(
            self: *const ICspAlgorithm,
            pValue: ?*AlgorithmOperationFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GetAlgorithmOid(self: *const ICspAlgorithm, Length: i32, AlgFlags: AlgorithmFlags, ppValue: ?*?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.GetAlgorithmOid(self, Length, AlgFlags, ppValue);
    }
    pub fn get_DefaultLength(self: *const ICspAlgorithm, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_DefaultLength(self, pValue);
    }
    pub fn get_IncrementLength(self: *const ICspAlgorithm, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_IncrementLength(self, pValue);
    }
    pub fn get_LongName(self: *const ICspAlgorithm, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_LongName(self, pValue);
    }
    pub fn get_Valid(self: *const ICspAlgorithm, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Valid(self, pValue);
    }
    pub fn get_MaxLength(self: *const ICspAlgorithm, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_MaxLength(self, pValue);
    }
    pub fn get_MinLength(self: *const ICspAlgorithm, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_MinLength(self, pValue);
    }
    pub fn get_Name(self: *const ICspAlgorithm, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Name(self, pValue);
    }
    pub fn get_Type(self: *const ICspAlgorithm, pValue: ?*AlgorithmType) callconv(.Inline) HRESULT {
        return self.vtable.get_Type(self, pValue);
    }
    pub fn get_Operations(self: *const ICspAlgorithm, pValue: ?*AlgorithmOperationFlags) callconv(.Inline) HRESULT {
        return self.vtable.get_Operations(self, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICspAlgorithms_Value = Guid.initString("728ab306-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICspAlgorithms = &IID_ICspAlgorithms_Value;
pub const ICspAlgorithms = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: *const fn(
            self: *const ICspAlgorithms,
            Index: i32,
            pVal: ?*?*ICspAlgorithm,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const ICspAlgorithms,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const ICspAlgorithms,
            pVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const ICspAlgorithms,
            pVal: ?*ICspAlgorithm,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const ICspAlgorithms,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn(
            self: *const ICspAlgorithms,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ItemByName: *const fn(
            self: *const ICspAlgorithms,
            strName: ?BSTR,
            ppValue: ?*?*ICspAlgorithm,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IndexByObjectId: *const fn(
            self: *const ICspAlgorithms,
            pObjectId: ?*IObjectId,
            pIndex: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ItemByIndex(self: *const ICspAlgorithms, Index: i32, pVal: ?*?*ICspAlgorithm) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByIndex(self, Index, pVal);
    }
    pub fn get_Count(self: *const ICspAlgorithms, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
    pub fn get__NewEnum(self: *const ICspAlgorithms, pVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, pVal);
    }
    pub fn Add(self: *const ICspAlgorithms, pVal: ?*ICspAlgorithm) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, pVal);
    }
    pub fn Remove(self: *const ICspAlgorithms, Index: i32) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, Index);
    }
    pub fn Clear(self: *const ICspAlgorithms) callconv(.Inline) HRESULT {
        return self.vtable.Clear(self);
    }
    pub fn get_ItemByName(self: *const ICspAlgorithms, strName: ?BSTR, ppValue: ?*?*ICspAlgorithm) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByName(self, strName, ppValue);
    }
    pub fn get_IndexByObjectId(self: *const ICspAlgorithms, pObjectId: ?*IObjectId, pIndex: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_IndexByObjectId(self, pObjectId, pIndex);
    }
};

pub const X509KeySpec = enum(i32) {
    NONE = 0,
    KEYEXCHANGE = 1,
    SIGNATURE = 2,
};
pub const XCN_AT_NONE = X509KeySpec.NONE;
pub const XCN_AT_KEYEXCHANGE = X509KeySpec.KEYEXCHANGE;
pub const XCN_AT_SIGNATURE = X509KeySpec.SIGNATURE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICspInformation_Value = Guid.initString("728ab307-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICspInformation = &IID_ICspInformation_Value;
pub const ICspInformation = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        InitializeFromName: *const fn(
            self: *const ICspInformation,
            strName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromType: *const fn(
            self: *const ICspInformation,
            Type: X509ProviderType,
            pAlgorithm: ?*IObjectId,
            MachineContext: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CspAlgorithms: *const fn(
            self: *const ICspInformation,
            ppValue: ?*?*ICspAlgorithms,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HasHardwareRandomNumberGenerator: *const fn(
            self: *const ICspInformation,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsHardwareDevice: *const fn(
            self: *const ICspInformation,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsRemovable: *const fn(
            self: *const ICspInformation,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsSoftwareDevice: *const fn(
            self: *const ICspInformation,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Valid: *const fn(
            self: *const ICspInformation,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxKeyContainerNameLength: *const fn(
            self: *const ICspInformation,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn(
            self: *const ICspInformation,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn(
            self: *const ICspInformation,
            pValue: ?*X509ProviderType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Version: *const fn(
            self: *const ICspInformation,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeySpec: *const fn(
            self: *const ICspInformation,
            pValue: ?*X509KeySpec,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsSmartCard: *const fn(
            self: *const ICspInformation,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultSecurityDescriptor: *const fn(
            self: *const ICspInformation,
            MachineContext: i16,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LegacyCsp: *const fn(
            self: *const ICspInformation,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCspStatusFromOperations: *const fn(
            self: *const ICspInformation,
            pAlgorithm: ?*IObjectId,
            Operations: AlgorithmOperationFlags,
            ppValue: ?*?*ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeFromName(self: *const ICspInformation, strName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromName(self, strName);
    }
    pub fn InitializeFromType(self: *const ICspInformation, Type: X509ProviderType, pAlgorithm: ?*IObjectId, MachineContext: i16) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromType(self, Type, pAlgorithm, MachineContext);
    }
    pub fn get_CspAlgorithms(self: *const ICspInformation, ppValue: ?*?*ICspAlgorithms) callconv(.Inline) HRESULT {
        return self.vtable.get_CspAlgorithms(self, ppValue);
    }
    pub fn get_HasHardwareRandomNumberGenerator(self: *const ICspInformation, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_HasHardwareRandomNumberGenerator(self, pValue);
    }
    pub fn get_IsHardwareDevice(self: *const ICspInformation, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsHardwareDevice(self, pValue);
    }
    pub fn get_IsRemovable(self: *const ICspInformation, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsRemovable(self, pValue);
    }
    pub fn get_IsSoftwareDevice(self: *const ICspInformation, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsSoftwareDevice(self, pValue);
    }
    pub fn get_Valid(self: *const ICspInformation, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Valid(self, pValue);
    }
    pub fn get_MaxKeyContainerNameLength(self: *const ICspInformation, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_MaxKeyContainerNameLength(self, pValue);
    }
    pub fn get_Name(self: *const ICspInformation, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Name(self, pValue);
    }
    pub fn get_Type(self: *const ICspInformation, pValue: ?*X509ProviderType) callconv(.Inline) HRESULT {
        return self.vtable.get_Type(self, pValue);
    }
    pub fn get_Version(self: *const ICspInformation, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Version(self, pValue);
    }
    pub fn get_KeySpec(self: *const ICspInformation, pValue: ?*X509KeySpec) callconv(.Inline) HRESULT {
        return self.vtable.get_KeySpec(self, pValue);
    }
    pub fn get_IsSmartCard(self: *const ICspInformation, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsSmartCard(self, pValue);
    }
    pub fn GetDefaultSecurityDescriptor(self: *const ICspInformation, MachineContext: i16, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetDefaultSecurityDescriptor(self, MachineContext, pValue);
    }
    pub fn get_LegacyCsp(self: *const ICspInformation, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_LegacyCsp(self, pValue);
    }
    pub fn GetCspStatusFromOperations(self: *const ICspInformation, pAlgorithm: ?*IObjectId, Operations: AlgorithmOperationFlags, ppValue: ?*?*ICspStatus) callconv(.Inline) HRESULT {
        return self.vtable.GetCspStatusFromOperations(self, pAlgorithm, Operations, ppValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICspInformations_Value = Guid.initString("728ab308-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICspInformations = &IID_ICspInformations_Value;
pub const ICspInformations = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: *const fn(
            self: *const ICspInformations,
            Index: i32,
            pVal: ?*?*ICspInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const ICspInformations,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const ICspInformations,
            pVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const ICspInformations,
            pVal: ?*ICspInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const ICspInformations,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn(
            self: *const ICspInformations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAvailableCsps: *const fn(
            self: *const ICspInformations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ItemByName: *const fn(
            self: *const ICspInformations,
            strName: ?BSTR,
            ppCspInformation: ?*?*ICspInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCspStatusFromProviderName: *const fn(
            self: *const ICspInformations,
            strProviderName: ?BSTR,
            LegacyKeySpec: X509KeySpec,
            ppValue: ?*?*ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCspStatusesFromOperations: *const fn(
            self: *const ICspInformations,
            Operations: AlgorithmOperationFlags,
            pCspInformation: ?*ICspInformation,
            ppValue: ?*?*ICspStatuses,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEncryptionCspAlgorithms: *const fn(
            self: *const ICspInformations,
            pCspInformation: ?*ICspInformation,
            ppValue: ?*?*ICspAlgorithms,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHashAlgorithms: *const fn(
            self: *const ICspInformations,
            pCspInformation: ?*ICspInformation,
            ppValue: ?*?*IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ItemByIndex(self: *const ICspInformations, Index: i32, pVal: ?*?*ICspInformation) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByIndex(self, Index, pVal);
    }
    pub fn get_Count(self: *const ICspInformations, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
    pub fn get__NewEnum(self: *const ICspInformations, pVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, pVal);
    }
    pub fn Add(self: *const ICspInformations, pVal: ?*ICspInformation) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, pVal);
    }
    pub fn Remove(self: *const ICspInformations, Index: i32) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, Index);
    }
    pub fn Clear(self: *const ICspInformations) callconv(.Inline) HRESULT {
        return self.vtable.Clear(self);
    }
    pub fn AddAvailableCsps(self: *const ICspInformations) callconv(.Inline) HRESULT {
        return self.vtable.AddAvailableCsps(self);
    }
    pub fn get_ItemByName(self: *const ICspInformations, strName: ?BSTR, ppCspInformation: ?*?*ICspInformation) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByName(self, strName, ppCspInformation);
    }
    pub fn GetCspStatusFromProviderName(self: *const ICspInformations, strProviderName: ?BSTR, LegacyKeySpec: X509KeySpec, ppValue: ?*?*ICspStatus) callconv(.Inline) HRESULT {
        return self.vtable.GetCspStatusFromProviderName(self, strProviderName, LegacyKeySpec, ppValue);
    }
    pub fn GetCspStatusesFromOperations(self: *const ICspInformations, Operations: AlgorithmOperationFlags, pCspInformation: ?*ICspInformation, ppValue: ?*?*ICspStatuses) callconv(.Inline) HRESULT {
        return self.vtable.GetCspStatusesFromOperations(self, Operations, pCspInformation, ppValue);
    }
    pub fn GetEncryptionCspAlgorithms(self: *const ICspInformations, pCspInformation: ?*ICspInformation, ppValue: ?*?*ICspAlgorithms) callconv(.Inline) HRESULT {
        return self.vtable.GetEncryptionCspAlgorithms(self, pCspInformation, ppValue);
    }
    pub fn GetHashAlgorithms(self: *const ICspInformations, pCspInformation: ?*ICspInformation, ppValue: ?*?*IObjectIds) callconv(.Inline) HRESULT {
        return self.vtable.GetHashAlgorithms(self, pCspInformation, ppValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICspStatus_Value = Guid.initString("728ab309-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICspStatus = &IID_ICspStatus_Value;
pub const ICspStatus = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn(
            self: *const ICspStatus,
            pCsp: ?*ICspInformation,
            pAlgorithm: ?*ICspAlgorithm,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Ordinal: *const fn(
            self: *const ICspStatus,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Ordinal: *const fn(
            self: *const ICspStatus,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CspAlgorithm: *const fn(
            self: *const ICspStatus,
            ppValue: ?*?*ICspAlgorithm,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CspInformation: *const fn(
            self: *const ICspStatus,
            ppValue: ?*?*ICspInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnrollmentStatus: *const fn(
            self: *const ICspStatus,
            ppValue: ?*?*IX509EnrollmentStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayName: *const fn(
            self: *const ICspStatus,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const ICspStatus, pCsp: ?*ICspInformation, pAlgorithm: ?*ICspAlgorithm) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, pCsp, pAlgorithm);
    }
    pub fn get_Ordinal(self: *const ICspStatus, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Ordinal(self, pValue);
    }
    pub fn put_Ordinal(self: *const ICspStatus, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Ordinal(self, Value);
    }
    pub fn get_CspAlgorithm(self: *const ICspStatus, ppValue: ?*?*ICspAlgorithm) callconv(.Inline) HRESULT {
        return self.vtable.get_CspAlgorithm(self, ppValue);
    }
    pub fn get_CspInformation(self: *const ICspStatus, ppValue: ?*?*ICspInformation) callconv(.Inline) HRESULT {
        return self.vtable.get_CspInformation(self, ppValue);
    }
    pub fn get_EnrollmentStatus(self: *const ICspStatus, ppValue: ?*?*IX509EnrollmentStatus) callconv(.Inline) HRESULT {
        return self.vtable.get_EnrollmentStatus(self, ppValue);
    }
    pub fn get_DisplayName(self: *const ICspStatus, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_DisplayName(self, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICspStatuses_Value = Guid.initString("728ab30a-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICspStatuses = &IID_ICspStatuses_Value;
pub const ICspStatuses = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: *const fn(
            self: *const ICspStatuses,
            Index: i32,
            pVal: ?*?*ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const ICspStatuses,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const ICspStatuses,
            pVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const ICspStatuses,
            pVal: ?*ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const ICspStatuses,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn(
            self: *const ICspStatuses,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ItemByName: *const fn(
            self: *const ICspStatuses,
            strCspName: ?BSTR,
            strAlgorithmName: ?BSTR,
            ppValue: ?*?*ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ItemByOrdinal: *const fn(
            self: *const ICspStatuses,
            Ordinal: i32,
            ppValue: ?*?*ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ItemByOperations: *const fn(
            self: *const ICspStatuses,
            strCspName: ?BSTR,
            strAlgorithmName: ?BSTR,
            Operations: AlgorithmOperationFlags,
            ppValue: ?*?*ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ItemByProvider: *const fn(
            self: *const ICspStatuses,
            pCspStatus: ?*ICspStatus,
            ppValue: ?*?*ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ItemByIndex(self: *const ICspStatuses, Index: i32, pVal: ?*?*ICspStatus) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByIndex(self, Index, pVal);
    }
    pub fn get_Count(self: *const ICspStatuses, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
    pub fn get__NewEnum(self: *const ICspStatuses, pVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, pVal);
    }
    pub fn Add(self: *const ICspStatuses, pVal: ?*ICspStatus) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, pVal);
    }
    pub fn Remove(self: *const ICspStatuses, Index: i32) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, Index);
    }
    pub fn Clear(self: *const ICspStatuses) callconv(.Inline) HRESULT {
        return self.vtable.Clear(self);
    }
    pub fn get_ItemByName(self: *const ICspStatuses, strCspName: ?BSTR, strAlgorithmName: ?BSTR, ppValue: ?*?*ICspStatus) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByName(self, strCspName, strAlgorithmName, ppValue);
    }
    pub fn get_ItemByOrdinal(self: *const ICspStatuses, Ordinal: i32, ppValue: ?*?*ICspStatus) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByOrdinal(self, Ordinal, ppValue);
    }
    pub fn get_ItemByOperations(self: *const ICspStatuses, strCspName: ?BSTR, strAlgorithmName: ?BSTR, Operations: AlgorithmOperationFlags, ppValue: ?*?*ICspStatus) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByOperations(self, strCspName, strAlgorithmName, Operations, ppValue);
    }
    pub fn get_ItemByProvider(self: *const ICspStatuses, pCspStatus: ?*ICspStatus, ppValue: ?*?*ICspStatus) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByProvider(self, pCspStatus, ppValue);
    }
};

pub const KeyIdentifierHashAlgorithm = enum(i32) {
    Default = 0,
    Sha1 = 1,
    CapiSha1 = 2,
    Sha256 = 3,
    HPKP = 5,
};
pub const SKIHashDefault = KeyIdentifierHashAlgorithm.Default;
pub const SKIHashSha1 = KeyIdentifierHashAlgorithm.Sha1;
pub const SKIHashCapiSha1 = KeyIdentifierHashAlgorithm.CapiSha1;
pub const SKIHashSha256 = KeyIdentifierHashAlgorithm.Sha256;
pub const SKIHashHPKP = KeyIdentifierHashAlgorithm.HPKP;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509PublicKey_Value = Guid.initString("728ab30b-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509PublicKey = &IID_IX509PublicKey_Value;
pub const IX509PublicKey = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn(
            self: *const IX509PublicKey,
            pObjectId: ?*IObjectId,
            strEncodedKey: ?BSTR,
            strEncodedParameters: ?BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromEncodedPublicKeyInfo: *const fn(
            self: *const IX509PublicKey,
            strEncodedPublicKeyInfo: ?BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Algorithm: *const fn(
            self: *const IX509PublicKey,
            ppValue: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Length: *const fn(
            self: *const IX509PublicKey,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EncodedKey: *const fn(
            self: *const IX509PublicKey,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EncodedParameters: *const fn(
            self: *const IX509PublicKey,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ComputeKeyIdentifier: *const fn(
            self: *const IX509PublicKey,
            Algorithm: KeyIdentifierHashAlgorithm,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IX509PublicKey, pObjectId: ?*IObjectId, strEncodedKey: ?BSTR, strEncodedParameters: ?BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, pObjectId, strEncodedKey, strEncodedParameters, Encoding);
    }
    pub fn InitializeFromEncodedPublicKeyInfo(self: *const IX509PublicKey, strEncodedPublicKeyInfo: ?BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromEncodedPublicKeyInfo(self, strEncodedPublicKeyInfo, Encoding);
    }
    pub fn get_Algorithm(self: *const IX509PublicKey, ppValue: ?*?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.get_Algorithm(self, ppValue);
    }
    pub fn get_Length(self: *const IX509PublicKey, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Length(self, pValue);
    }
    pub fn get_EncodedKey(self: *const IX509PublicKey, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_EncodedKey(self, Encoding, pValue);
    }
    pub fn get_EncodedParameters(self: *const IX509PublicKey, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_EncodedParameters(self, Encoding, pValue);
    }
    pub fn ComputeKeyIdentifier(self: *const IX509PublicKey, Algorithm: KeyIdentifierHashAlgorithm, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.ComputeKeyIdentifier(self, Algorithm, Encoding, pValue);
    }
};

pub const X509PrivateKeyExportFlags = enum(i32) {
    EXPORT_NONE = 0,
    EXPORT_FLAG = 1,
    PLAINTEXT_EXPORT_FLAG = 2,
    ARCHIVING_FLAG = 4,
    PLAINTEXT_ARCHIVING_FLAG = 8,
};
pub const XCN_NCRYPT_ALLOW_EXPORT_NONE = X509PrivateKeyExportFlags.EXPORT_NONE;
pub const XCN_NCRYPT_ALLOW_EXPORT_FLAG = X509PrivateKeyExportFlags.EXPORT_FLAG;
pub const XCN_NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG = X509PrivateKeyExportFlags.PLAINTEXT_EXPORT_FLAG;
pub const XCN_NCRYPT_ALLOW_ARCHIVING_FLAG = X509PrivateKeyExportFlags.ARCHIVING_FLAG;
pub const XCN_NCRYPT_ALLOW_PLAINTEXT_ARCHIVING_FLAG = X509PrivateKeyExportFlags.PLAINTEXT_ARCHIVING_FLAG;

pub const X509PrivateKeyUsageFlags = enum(i32) {
    USAGES_NONE = 0,
    DECRYPT_FLAG = 1,
    SIGNING_FLAG = 2,
    KEY_AGREEMENT_FLAG = 4,
    KEY_IMPORT_FLAG = 8,
    ALL_USAGES = 16777215,
};
pub const XCN_NCRYPT_ALLOW_USAGES_NONE = X509PrivateKeyUsageFlags.USAGES_NONE;
pub const XCN_NCRYPT_ALLOW_DECRYPT_FLAG = X509PrivateKeyUsageFlags.DECRYPT_FLAG;
pub const XCN_NCRYPT_ALLOW_SIGNING_FLAG = X509PrivateKeyUsageFlags.SIGNING_FLAG;
pub const XCN_NCRYPT_ALLOW_KEY_AGREEMENT_FLAG = X509PrivateKeyUsageFlags.KEY_AGREEMENT_FLAG;
pub const XCN_NCRYPT_ALLOW_KEY_IMPORT_FLAG = X509PrivateKeyUsageFlags.KEY_IMPORT_FLAG;
pub const XCN_NCRYPT_ALLOW_ALL_USAGES = X509PrivateKeyUsageFlags.ALL_USAGES;

pub const X509PrivateKeyProtection = enum(i32) {
    NO_PROTECTION_FLAG = 0,
    PROTECT_KEY_FLAG = 1,
    FORCE_HIGH_PROTECTION_FLAG = 2,
    FINGERPRINT_PROTECTION_FLAG = 4,
    APPCONTAINER_ACCESS_MEDIUM_FLAG = 8,
};
pub const XCN_NCRYPT_UI_NO_PROTECTION_FLAG = X509PrivateKeyProtection.NO_PROTECTION_FLAG;
pub const XCN_NCRYPT_UI_PROTECT_KEY_FLAG = X509PrivateKeyProtection.PROTECT_KEY_FLAG;
pub const XCN_NCRYPT_UI_FORCE_HIGH_PROTECTION_FLAG = X509PrivateKeyProtection.FORCE_HIGH_PROTECTION_FLAG;
pub const XCN_NCRYPT_UI_FINGERPRINT_PROTECTION_FLAG = X509PrivateKeyProtection.FINGERPRINT_PROTECTION_FLAG;
pub const XCN_NCRYPT_UI_APPCONTAINER_ACCESS_MEDIUM_FLAG = X509PrivateKeyProtection.APPCONTAINER_ACCESS_MEDIUM_FLAG;

pub const X509PrivateKeyVerify = enum(i32) {
    None = 0,
    Silent = 1,
    SmartCardNone = 2,
    SmartCardSilent = 3,
    AllowUI = 4,
};
pub const VerifyNone = X509PrivateKeyVerify.None;
pub const VerifySilent = X509PrivateKeyVerify.Silent;
pub const VerifySmartCardNone = X509PrivateKeyVerify.SmartCardNone;
pub const VerifySmartCardSilent = X509PrivateKeyVerify.SmartCardSilent;
pub const VerifyAllowUI = X509PrivateKeyVerify.AllowUI;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509PrivateKey_Value = Guid.initString("728ab30c-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509PrivateKey = &IID_IX509PrivateKey_Value;
pub const IX509PrivateKey = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Open: *const fn(
            self: *const IX509PrivateKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: *const fn(
            self: *const IX509PrivateKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn(
            self: *const IX509PrivateKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn(
            self: *const IX509PrivateKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Verify: *const fn(
            self: *const IX509PrivateKey,
            VerifyType: X509PrivateKeyVerify,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Import: *const fn(
            self: *const IX509PrivateKey,
            strExportType: ?BSTR,
            strEncodedKey: ?BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Export: *const fn(
            self: *const IX509PrivateKey,
            strExportType: ?BSTR,
            Encoding: EncodingType,
            pstrEncodedKey: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExportPublicKey: *const fn(
            self: *const IX509PrivateKey,
            ppPublicKey: ?*?*IX509PublicKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ContainerName: *const fn(
            self: *const IX509PrivateKey,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ContainerName: *const fn(
            self: *const IX509PrivateKey,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ContainerNamePrefix: *const fn(
            self: *const IX509PrivateKey,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ContainerNamePrefix: *const fn(
            self: *const IX509PrivateKey,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReaderName: *const fn(
            self: *const IX509PrivateKey,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReaderName: *const fn(
            self: *const IX509PrivateKey,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CspInformations: *const fn(
            self: *const IX509PrivateKey,
            ppValue: ?*?*ICspInformations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CspInformations: *const fn(
            self: *const IX509PrivateKey,
            pValue: ?*ICspInformations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CspStatus: *const fn(
            self: *const IX509PrivateKey,
            ppValue: ?*?*ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CspStatus: *const fn(
            self: *const IX509PrivateKey,
            pValue: ?*ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderName: *const fn(
            self: *const IX509PrivateKey,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProviderName: *const fn(
            self: *const IX509PrivateKey,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderType: *const fn(
            self: *const IX509PrivateKey,
            pValue: ?*X509ProviderType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProviderType: *const fn(
            self: *const IX509PrivateKey,
            Value: X509ProviderType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LegacyCsp: *const fn(
            self: *const IX509PrivateKey,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LegacyCsp: *const fn(
            self: *const IX509PrivateKey,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Algorithm: *const fn(
            self: *const IX509PrivateKey,
            ppValue: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Algorithm: *const fn(
            self: *const IX509PrivateKey,
            pValue: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeySpec: *const fn(
            self: *const IX509PrivateKey,
            pValue: ?*X509KeySpec,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_KeySpec: *const fn(
            self: *const IX509PrivateKey,
            Value: X509KeySpec,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Length: *const fn(
            self: *const IX509PrivateKey,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Length: *const fn(
            self: *const IX509PrivateKey,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExportPolicy: *const fn(
            self: *const IX509PrivateKey,
            pValue: ?*X509PrivateKeyExportFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ExportPolicy: *const fn(
            self: *const IX509PrivateKey,
            Value: X509PrivateKeyExportFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeyUsage: *const fn(
            self: *const IX509PrivateKey,
            pValue: ?*X509PrivateKeyUsageFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_KeyUsage: *const fn(
            self: *const IX509PrivateKey,
            Value: X509PrivateKeyUsageFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeyProtection: *const fn(
            self: *const IX509PrivateKey,
            pValue: ?*X509PrivateKeyProtection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_KeyProtection: *const fn(
            self: *const IX509PrivateKey,
            Value: X509PrivateKeyProtection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MachineContext: *const fn(
            self: *const IX509PrivateKey,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MachineContext: *const fn(
            self: *const IX509PrivateKey,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SecurityDescriptor: *const fn(
            self: *const IX509PrivateKey,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SecurityDescriptor: *const fn(
            self: *const IX509PrivateKey,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Certificate: *const fn(
            self: *const IX509PrivateKey,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Certificate: *const fn(
            self: *const IX509PrivateKey,
            Encoding: EncodingType,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UniqueContainerName: *const fn(
            self: *const IX509PrivateKey,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Opened: *const fn(
            self: *const IX509PrivateKey,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DefaultContainer: *const fn(
            self: *const IX509PrivateKey,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Existing: *const fn(
            self: *const IX509PrivateKey,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Existing: *const fn(
            self: *const IX509PrivateKey,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Silent: *const fn(
            self: *const IX509PrivateKey,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Silent: *const fn(
            self: *const IX509PrivateKey,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ParentWindow: *const fn(
            self: *const IX509PrivateKey,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ParentWindow: *const fn(
            self: *const IX509PrivateKey,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UIContextMessage: *const fn(
            self: *const IX509PrivateKey,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UIContextMessage: *const fn(
            self: *const IX509PrivateKey,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Pin: *const fn(
            self: *const IX509PrivateKey,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FriendlyName: *const fn(
            self: *const IX509PrivateKey,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FriendlyName: *const fn(
            self: *const IX509PrivateKey,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn(
            self: *const IX509PrivateKey,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn(
            self: *const IX509PrivateKey,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Open(self: *const IX509PrivateKey) callconv(.Inline) HRESULT {
        return self.vtable.Open(self);
    }
    pub fn Create(self: *const IX509PrivateKey) callconv(.Inline) HRESULT {
        return self.vtable.Create(self);
    }
    pub fn Close(self: *const IX509PrivateKey) callconv(.Inline) HRESULT {
        return self.vtable.Close(self);
    }
    pub fn Delete(self: *const IX509PrivateKey) callconv(.Inline) HRESULT {
        return self.vtable.Delete(self);
    }
    pub fn Verify(self: *const IX509PrivateKey, VerifyType: X509PrivateKeyVerify) callconv(.Inline) HRESULT {
        return self.vtable.Verify(self, VerifyType);
    }
    pub fn Import(self: *const IX509PrivateKey, strExportType: ?BSTR, strEncodedKey: ?BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
        return self.vtable.Import(self, strExportType, strEncodedKey, Encoding);
    }
    pub fn Export(self: *const IX509PrivateKey, strExportType: ?BSTR, Encoding: EncodingType, pstrEncodedKey: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Export(self, strExportType, Encoding, pstrEncodedKey);
    }
    pub fn ExportPublicKey(self: *const IX509PrivateKey, ppPublicKey: ?*?*IX509PublicKey) callconv(.Inline) HRESULT {
        return self.vtable.ExportPublicKey(self, ppPublicKey);
    }
    pub fn get_ContainerName(self: *const IX509PrivateKey, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ContainerName(self, pValue);
    }
    pub fn put_ContainerName(self: *const IX509PrivateKey, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ContainerName(self, Value);
    }
    pub fn get_ContainerNamePrefix(self: *const IX509PrivateKey, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ContainerNamePrefix(self, pValue);
    }
    pub fn put_ContainerNamePrefix(self: *const IX509PrivateKey, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ContainerNamePrefix(self, Value);
    }
    pub fn get_ReaderName(self: *const IX509PrivateKey, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ReaderName(self, pValue);
    }
    pub fn put_ReaderName(self: *const IX509PrivateKey, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ReaderName(self, Value);
    }
    pub fn get_CspInformations(self: *const IX509PrivateKey, ppValue: ?*?*ICspInformations) callconv(.Inline) HRESULT {
        return self.vtable.get_CspInformations(self, ppValue);
    }
    pub fn put_CspInformations(self: *const IX509PrivateKey, pValue: ?*ICspInformations) callconv(.Inline) HRESULT {
        return self.vtable.put_CspInformations(self, pValue);
    }
    pub fn get_CspStatus(self: *const IX509PrivateKey, ppValue: ?*?*ICspStatus) callconv(.Inline) HRESULT {
        return self.vtable.get_CspStatus(self, ppValue);
    }
    pub fn put_CspStatus(self: *const IX509PrivateKey, pValue: ?*ICspStatus) callconv(.Inline) HRESULT {
        return self.vtable.put_CspStatus(self, pValue);
    }
    pub fn get_ProviderName(self: *const IX509PrivateKey, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ProviderName(self, pValue);
    }
    pub fn put_ProviderName(self: *const IX509PrivateKey, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ProviderName(self, Value);
    }
    pub fn get_ProviderType(self: *const IX509PrivateKey, pValue: ?*X509ProviderType) callconv(.Inline) HRESULT {
        return self.vtable.get_ProviderType(self, pValue);
    }
    pub fn put_ProviderType(self: *const IX509PrivateKey, Value: X509ProviderType) callconv(.Inline) HRESULT {
        return self.vtable.put_ProviderType(self, Value);
    }
    pub fn get_LegacyCsp(self: *const IX509PrivateKey, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_LegacyCsp(self, pValue);
    }
    pub fn put_LegacyCsp(self: *const IX509PrivateKey, Value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_LegacyCsp(self, Value);
    }
    pub fn get_Algorithm(self: *const IX509PrivateKey, ppValue: ?*?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.get_Algorithm(self, ppValue);
    }
    pub fn put_Algorithm(self: *const IX509PrivateKey, pValue: ?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.put_Algorithm(self, pValue);
    }
    pub fn get_KeySpec(self: *const IX509PrivateKey, pValue: ?*X509KeySpec) callconv(.Inline) HRESULT {
        return self.vtable.get_KeySpec(self, pValue);
    }
    pub fn put_KeySpec(self: *const IX509PrivateKey, Value: X509KeySpec) callconv(.Inline) HRESULT {
        return self.vtable.put_KeySpec(self, Value);
    }
    pub fn get_Length(self: *const IX509PrivateKey, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Length(self, pValue);
    }
    pub fn put_Length(self: *const IX509PrivateKey, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_Length(self, Value);
    }
    pub fn get_ExportPolicy(self: *const IX509PrivateKey, pValue: ?*X509PrivateKeyExportFlags) callconv(.Inline) HRESULT {
        return self.vtable.get_ExportPolicy(self, pValue);
    }
    pub fn put_ExportPolicy(self: *const IX509PrivateKey, Value: X509PrivateKeyExportFlags) callconv(.Inline) HRESULT {
        return self.vtable.put_ExportPolicy(self, Value);
    }
    pub fn get_KeyUsage(self: *const IX509PrivateKey, pValue: ?*X509PrivateKeyUsageFlags) callconv(.Inline) HRESULT {
        return self.vtable.get_KeyUsage(self, pValue);
    }
    pub fn put_KeyUsage(self: *const IX509PrivateKey, Value: X509PrivateKeyUsageFlags) callconv(.Inline) HRESULT {
        return self.vtable.put_KeyUsage(self, Value);
    }
    pub fn get_KeyProtection(self: *const IX509PrivateKey, pValue: ?*X509PrivateKeyProtection) callconv(.Inline) HRESULT {
        return self.vtable.get_KeyProtection(self, pValue);
    }
    pub fn put_KeyProtection(self: *const IX509PrivateKey, Value: X509PrivateKeyProtection) callconv(.Inline) HRESULT {
        return self.vtable.put_KeyProtection(self, Value);
    }
    pub fn get_MachineContext(self: *const IX509PrivateKey, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_MachineContext(self, pValue);
    }
    pub fn put_MachineContext(self: *const IX509PrivateKey, Value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_MachineContext(self, Value);
    }
    pub fn get_SecurityDescriptor(self: *const IX509PrivateKey, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_SecurityDescriptor(self, pValue);
    }
    pub fn put_SecurityDescriptor(self: *const IX509PrivateKey, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_SecurityDescriptor(self, Value);
    }
    pub fn get_Certificate(self: *const IX509PrivateKey, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Certificate(self, Encoding, pValue);
    }
    pub fn put_Certificate(self: *const IX509PrivateKey, Encoding: EncodingType, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Certificate(self, Encoding, Value);
    }
    pub fn get_UniqueContainerName(self: *const IX509PrivateKey, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_UniqueContainerName(self, pValue);
    }
    pub fn get_Opened(self: *const IX509PrivateKey, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Opened(self, pValue);
    }
    pub fn get_DefaultContainer(self: *const IX509PrivateKey, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_DefaultContainer(self, pValue);
    }
    pub fn get_Existing(self: *const IX509PrivateKey, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Existing(self, pValue);
    }
    pub fn put_Existing(self: *const IX509PrivateKey, Value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_Existing(self, Value);
    }
    pub fn get_Silent(self: *const IX509PrivateKey, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Silent(self, pValue);
    }
    pub fn put_Silent(self: *const IX509PrivateKey, Value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_Silent(self, Value);
    }
    pub fn get_ParentWindow(self: *const IX509PrivateKey, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ParentWindow(self, pValue);
    }
    pub fn put_ParentWindow(self: *const IX509PrivateKey, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_ParentWindow(self, Value);
    }
    pub fn get_UIContextMessage(self: *const IX509PrivateKey, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_UIContextMessage(self, pValue);
    }
    pub fn put_UIContextMessage(self: *const IX509PrivateKey, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_UIContextMessage(self, Value);
    }
    pub fn put_Pin(self: *const IX509PrivateKey, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Pin(self, Value);
    }
    pub fn get_FriendlyName(self: *const IX509PrivateKey, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_FriendlyName(self, pValue);
    }
    pub fn put_FriendlyName(self: *const IX509PrivateKey, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_FriendlyName(self, Value);
    }
    pub fn get_Description(self: *const IX509PrivateKey, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Description(self, pValue);
    }
    pub fn put_Description(self: *const IX509PrivateKey, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Description(self, Value);
    }
};

pub const X509HardwareKeyUsageFlags = enum(i32) {
    PCP_NONE = 0,
    TPM12_PROVIDER = 65536,
    PCP_SIGNATURE_KEY = 1,
    PCP_ENCRYPTION_KEY = 2,
    PCP_GENERIC_KEY = 3,
    PCP_STORAGE_KEY = 4,
    PCP_IDENTITY_KEY = 8,
};
pub const XCN_NCRYPT_PCP_NONE = X509HardwareKeyUsageFlags.PCP_NONE;
pub const XCN_NCRYPT_TPM12_PROVIDER = X509HardwareKeyUsageFlags.TPM12_PROVIDER;
pub const XCN_NCRYPT_PCP_SIGNATURE_KEY = X509HardwareKeyUsageFlags.PCP_SIGNATURE_KEY;
pub const XCN_NCRYPT_PCP_ENCRYPTION_KEY = X509HardwareKeyUsageFlags.PCP_ENCRYPTION_KEY;
pub const XCN_NCRYPT_PCP_GENERIC_KEY = X509HardwareKeyUsageFlags.PCP_GENERIC_KEY;
pub const XCN_NCRYPT_PCP_STORAGE_KEY = X509HardwareKeyUsageFlags.PCP_STORAGE_KEY;
pub const XCN_NCRYPT_PCP_IDENTITY_KEY = X509HardwareKeyUsageFlags.PCP_IDENTITY_KEY;

pub const X509KeyParametersExportType = enum(i32) {
    NONE = 0,
    NAME_FOR_ENCODE_FLAG = 536870912,
    PARAMETERS_FOR_ENCODE_FLAG = 268435456,
};
pub const XCN_CRYPT_OID_USE_CURVE_NONE = X509KeyParametersExportType.NONE;
pub const XCN_CRYPT_OID_USE_CURVE_NAME_FOR_ENCODE_FLAG = X509KeyParametersExportType.NAME_FOR_ENCODE_FLAG;
pub const XCN_CRYPT_OID_USE_CURVE_PARAMETERS_FOR_ENCODE_FLAG = X509KeyParametersExportType.PARAMETERS_FOR_ENCODE_FLAG;

const IID_IX509PrivateKey2_Value = Guid.initString("728ab362-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509PrivateKey2 = &IID_IX509PrivateKey2_Value;
pub const IX509PrivateKey2 = extern union {
    pub const VTable = extern struct {
        base: IX509PrivateKey.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HardwareKeyUsage: *const fn(
            self: *const IX509PrivateKey2,
            pValue: ?*X509HardwareKeyUsageFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HardwareKeyUsage: *const fn(
            self: *const IX509PrivateKey2,
            Value: X509HardwareKeyUsageFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AlternateStorageLocation: *const fn(
            self: *const IX509PrivateKey2,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AlternateStorageLocation: *const fn(
            self: *const IX509PrivateKey2,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AlgorithmName: *const fn(
            self: *const IX509PrivateKey2,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AlgorithmName: *const fn(
            self: *const IX509PrivateKey2,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AlgorithmParameters: *const fn(
            self: *const IX509PrivateKey2,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AlgorithmParameters: *const fn(
            self: *const IX509PrivateKey2,
            Encoding: EncodingType,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ParametersExportType: *const fn(
            self: *const IX509PrivateKey2,
            pValue: ?*X509KeyParametersExportType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ParametersExportType: *const fn(
            self: *const IX509PrivateKey2,
            Value: X509KeyParametersExportType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509PrivateKey: IX509PrivateKey,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_HardwareKeyUsage(self: *const IX509PrivateKey2, pValue: ?*X509HardwareKeyUsageFlags) callconv(.Inline) HRESULT {
        return self.vtable.get_HardwareKeyUsage(self, pValue);
    }
    pub fn put_HardwareKeyUsage(self: *const IX509PrivateKey2, Value: X509HardwareKeyUsageFlags) callconv(.Inline) HRESULT {
        return self.vtable.put_HardwareKeyUsage(self, Value);
    }
    pub fn get_AlternateStorageLocation(self: *const IX509PrivateKey2, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_AlternateStorageLocation(self, pValue);
    }
    pub fn put_AlternateStorageLocation(self: *const IX509PrivateKey2, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_AlternateStorageLocation(self, Value);
    }
    pub fn get_AlgorithmName(self: *const IX509PrivateKey2, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_AlgorithmName(self, pValue);
    }
    pub fn put_AlgorithmName(self: *const IX509PrivateKey2, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_AlgorithmName(self, Value);
    }
    pub fn get_AlgorithmParameters(self: *const IX509PrivateKey2, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_AlgorithmParameters(self, Encoding, pValue);
    }
    pub fn put_AlgorithmParameters(self: *const IX509PrivateKey2, Encoding: EncodingType, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_AlgorithmParameters(self, Encoding, Value);
    }
    pub fn get_ParametersExportType(self: *const IX509PrivateKey2, pValue: ?*X509KeyParametersExportType) callconv(.Inline) HRESULT {
        return self.vtable.get_ParametersExportType(self, pValue);
    }
    pub fn put_ParametersExportType(self: *const IX509PrivateKey2, Value: X509KeyParametersExportType) callconv(.Inline) HRESULT {
        return self.vtable.put_ParametersExportType(self, Value);
    }
};

const IID_IX509EndorsementKey_Value = Guid.initString("b11cd855-f4c4-4fc6-b710-4422237f09e9");
pub const IID_IX509EndorsementKey = &IID_IX509EndorsementKey_Value;
pub const IX509EndorsementKey = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderName: *const fn(
            self: *const IX509EndorsementKey,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProviderName: *const fn(
            self: *const IX509EndorsementKey,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Length: *const fn(
            self: *const IX509EndorsementKey,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Opened: *const fn(
            self: *const IX509EndorsementKey,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCertificate: *const fn(
            self: *const IX509EndorsementKey,
            Encoding: EncodingType,
            strCertificate: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveCertificate: *const fn(
            self: *const IX509EndorsementKey,
            Encoding: EncodingType,
            strCertificate: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateByIndex: *const fn(
            self: *const IX509EndorsementKey,
            ManufacturerOnly: i16,
            dwIndex: i32,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateCount: *const fn(
            self: *const IX509EndorsementKey,
            ManufacturerOnly: i16,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExportPublicKey: *const fn(
            self: *const IX509EndorsementKey,
            ppPublicKey: ?*?*IX509PublicKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Open: *const fn(
            self: *const IX509EndorsementKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn(
            self: *const IX509EndorsementKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ProviderName(self: *const IX509EndorsementKey, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ProviderName(self, pValue);
    }
    pub fn put_ProviderName(self: *const IX509EndorsementKey, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ProviderName(self, Value);
    }
    pub fn get_Length(self: *const IX509EndorsementKey, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Length(self, pValue);
    }
    pub fn get_Opened(self: *const IX509EndorsementKey, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Opened(self, pValue);
    }
    pub fn AddCertificate(self: *const IX509EndorsementKey, Encoding: EncodingType, strCertificate: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.AddCertificate(self, Encoding, strCertificate);
    }
    pub fn RemoveCertificate(self: *const IX509EndorsementKey, Encoding: EncodingType, strCertificate: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.RemoveCertificate(self, Encoding, strCertificate);
    }
    pub fn GetCertificateByIndex(self: *const IX509EndorsementKey, ManufacturerOnly: i16, dwIndex: i32, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetCertificateByIndex(self, ManufacturerOnly, dwIndex, Encoding, pValue);
    }
    pub fn GetCertificateCount(self: *const IX509EndorsementKey, ManufacturerOnly: i16, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCertificateCount(self, ManufacturerOnly, pCount);
    }
    pub fn ExportPublicKey(self: *const IX509EndorsementKey, ppPublicKey: ?*?*IX509PublicKey) callconv(.Inline) HRESULT {
        return self.vtable.ExportPublicKey(self, ppPublicKey);
    }
    pub fn Open(self: *const IX509EndorsementKey) callconv(.Inline) HRESULT {
        return self.vtable.Open(self);
    }
    pub fn Close(self: *const IX509EndorsementKey) callconv(.Inline) HRESULT {
        return self.vtable.Close(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509Extension_Value = Guid.initString("728ab30d-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509Extension = &IID_IX509Extension_Value;
pub const IX509Extension = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn(
            self: *const IX509Extension,
            pObjectId: ?*IObjectId,
            Encoding: EncodingType,
            strEncodedData: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectId: *const fn(
            self: *const IX509Extension,
            ppValue: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RawData: *const fn(
            self: *const IX509Extension,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Critical: *const fn(
            self: *const IX509Extension,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Critical: *const fn(
            self: *const IX509Extension,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IX509Extension, pObjectId: ?*IObjectId, Encoding: EncodingType, strEncodedData: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, pObjectId, Encoding, strEncodedData);
    }
    pub fn get_ObjectId(self: *const IX509Extension, ppValue: ?*?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.get_ObjectId(self, ppValue);
    }
    pub fn get_RawData(self: *const IX509Extension, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RawData(self, Encoding, pValue);
    }
    pub fn get_Critical(self: *const IX509Extension, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Critical(self, pValue);
    }
    pub fn put_Critical(self: *const IX509Extension, Value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_Critical(self, Value);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509Extensions_Value = Guid.initString("728ab30e-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509Extensions = &IID_IX509Extensions_Value;
pub const IX509Extensions = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: *const fn(
            self: *const IX509Extensions,
            Index: i32,
            pVal: ?*?*IX509Extension,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IX509Extensions,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const IX509Extensions,
            pVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const IX509Extensions,
            pVal: ?*IX509Extension,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const IX509Extensions,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn(
            self: *const IX509Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IndexByObjectId: *const fn(
            self: *const IX509Extensions,
            pObjectId: ?*IObjectId,
            pIndex: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRange: *const fn(
            self: *const IX509Extensions,
            pValue: ?*IX509Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ItemByIndex(self: *const IX509Extensions, Index: i32, pVal: ?*?*IX509Extension) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByIndex(self, Index, pVal);
    }
    pub fn get_Count(self: *const IX509Extensions, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
    pub fn get__NewEnum(self: *const IX509Extensions, pVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, pVal);
    }
    pub fn Add(self: *const IX509Extensions, pVal: ?*IX509Extension) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, pVal);
    }
    pub fn Remove(self: *const IX509Extensions, Index: i32) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, Index);
    }
    pub fn Clear(self: *const IX509Extensions) callconv(.Inline) HRESULT {
        return self.vtable.Clear(self);
    }
    pub fn get_IndexByObjectId(self: *const IX509Extensions, pObjectId: ?*IObjectId, pIndex: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_IndexByObjectId(self, pObjectId, pIndex);
    }
    pub fn AddRange(self: *const IX509Extensions, pValue: ?*IX509Extensions) callconv(.Inline) HRESULT {
        return self.vtable.AddRange(self, pValue);
    }
};

pub const X509KeyUsageFlags = enum(i32) {
    NO_KEY_USAGE = 0,
    DIGITAL_SIGNATURE_KEY_USAGE = 128,
    NON_REPUDIATION_KEY_USAGE = 64,
    KEY_ENCIPHERMENT_KEY_USAGE = 32,
    DATA_ENCIPHERMENT_KEY_USAGE = 16,
    KEY_AGREEMENT_KEY_USAGE = 8,
    KEY_CERT_SIGN_KEY_USAGE = 4,
    OFFLINE_CRL_SIGN_KEY_USAGE = 2,
    ENCIPHER_ONLY_KEY_USAGE = 1,
    DECIPHER_ONLY_KEY_USAGE = 32768,
    pub const CRL_SIGN_KEY_USAGE = .OFFLINE_CRL_SIGN_KEY_USAGE;
};
pub const XCN_CERT_NO_KEY_USAGE = X509KeyUsageFlags.NO_KEY_USAGE;
pub const XCN_CERT_DIGITAL_SIGNATURE_KEY_USAGE = X509KeyUsageFlags.DIGITAL_SIGNATURE_KEY_USAGE;
pub const XCN_CERT_NON_REPUDIATION_KEY_USAGE = X509KeyUsageFlags.NON_REPUDIATION_KEY_USAGE;
pub const XCN_CERT_KEY_ENCIPHERMENT_KEY_USAGE = X509KeyUsageFlags.KEY_ENCIPHERMENT_KEY_USAGE;
pub const XCN_CERT_DATA_ENCIPHERMENT_KEY_USAGE = X509KeyUsageFlags.DATA_ENCIPHERMENT_KEY_USAGE;
pub const XCN_CERT_KEY_AGREEMENT_KEY_USAGE = X509KeyUsageFlags.KEY_AGREEMENT_KEY_USAGE;
pub const XCN_CERT_KEY_CERT_SIGN_KEY_USAGE = X509KeyUsageFlags.KEY_CERT_SIGN_KEY_USAGE;
pub const XCN_CERT_OFFLINE_CRL_SIGN_KEY_USAGE = X509KeyUsageFlags.OFFLINE_CRL_SIGN_KEY_USAGE;
pub const XCN_CERT_CRL_SIGN_KEY_USAGE = X509KeyUsageFlags.OFFLINE_CRL_SIGN_KEY_USAGE;
pub const XCN_CERT_ENCIPHER_ONLY_KEY_USAGE = X509KeyUsageFlags.ENCIPHER_ONLY_KEY_USAGE;
pub const XCN_CERT_DECIPHER_ONLY_KEY_USAGE = X509KeyUsageFlags.DECIPHER_ONLY_KEY_USAGE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509ExtensionKeyUsage_Value = Guid.initString("728ab30f-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509ExtensionKeyUsage = &IID_IX509ExtensionKeyUsage_Value;
pub const IX509ExtensionKeyUsage = extern union {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: *const fn(
            self: *const IX509ExtensionKeyUsage,
            UsageFlags: X509KeyUsageFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn(
            self: *const IX509ExtensionKeyUsage,
            Encoding: EncodingType,
            strEncodedData: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeyUsage: *const fn(
            self: *const IX509ExtensionKeyUsage,
            pValue: ?*X509KeyUsageFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509Extension: IX509Extension,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeEncode(self: *const IX509ExtensionKeyUsage, UsageFlags: X509KeyUsageFlags) callconv(.Inline) HRESULT {
        return self.vtable.InitializeEncode(self, UsageFlags);
    }
    pub fn InitializeDecode(self: *const IX509ExtensionKeyUsage, Encoding: EncodingType, strEncodedData: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeDecode(self, Encoding, strEncodedData);
    }
    pub fn get_KeyUsage(self: *const IX509ExtensionKeyUsage, pValue: ?*X509KeyUsageFlags) callconv(.Inline) HRESULT {
        return self.vtable.get_KeyUsage(self, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509ExtensionEnhancedKeyUsage_Value = Guid.initString("728ab310-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509ExtensionEnhancedKeyUsage = &IID_IX509ExtensionEnhancedKeyUsage_Value;
pub const IX509ExtensionEnhancedKeyUsage = extern union {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: *const fn(
            self: *const IX509ExtensionEnhancedKeyUsage,
            pValue: ?*IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn(
            self: *const IX509ExtensionEnhancedKeyUsage,
            Encoding: EncodingType,
            strEncodedData: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnhancedKeyUsage: *const fn(
            self: *const IX509ExtensionEnhancedKeyUsage,
            ppValue: ?*?*IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509Extension: IX509Extension,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeEncode(self: *const IX509ExtensionEnhancedKeyUsage, pValue: ?*IObjectIds) callconv(.Inline) HRESULT {
        return self.vtable.InitializeEncode(self, pValue);
    }
    pub fn InitializeDecode(self: *const IX509ExtensionEnhancedKeyUsage, Encoding: EncodingType, strEncodedData: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeDecode(self, Encoding, strEncodedData);
    }
    pub fn get_EnhancedKeyUsage(self: *const IX509ExtensionEnhancedKeyUsage, ppValue: ?*?*IObjectIds) callconv(.Inline) HRESULT {
        return self.vtable.get_EnhancedKeyUsage(self, ppValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509ExtensionTemplateName_Value = Guid.initString("728ab311-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509ExtensionTemplateName = &IID_IX509ExtensionTemplateName_Value;
pub const IX509ExtensionTemplateName = extern union {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: *const fn(
            self: *const IX509ExtensionTemplateName,
            strTemplateName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn(
            self: *const IX509ExtensionTemplateName,
            Encoding: EncodingType,
            strEncodedData: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TemplateName: *const fn(
            self: *const IX509ExtensionTemplateName,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509Extension: IX509Extension,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeEncode(self: *const IX509ExtensionTemplateName, strTemplateName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeEncode(self, strTemplateName);
    }
    pub fn InitializeDecode(self: *const IX509ExtensionTemplateName, Encoding: EncodingType, strEncodedData: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeDecode(self, Encoding, strEncodedData);
    }
    pub fn get_TemplateName(self: *const IX509ExtensionTemplateName, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_TemplateName(self, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509ExtensionTemplate_Value = Guid.initString("728ab312-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509ExtensionTemplate = &IID_IX509ExtensionTemplate_Value;
pub const IX509ExtensionTemplate = extern union {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: *const fn(
            self: *const IX509ExtensionTemplate,
            pTemplateOid: ?*IObjectId,
            MajorVersion: i32,
            MinorVersion: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn(
            self: *const IX509ExtensionTemplate,
            Encoding: EncodingType,
            strEncodedData: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TemplateOid: *const fn(
            self: *const IX509ExtensionTemplate,
            ppValue: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MajorVersion: *const fn(
            self: *const IX509ExtensionTemplate,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinorVersion: *const fn(
            self: *const IX509ExtensionTemplate,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509Extension: IX509Extension,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeEncode(self: *const IX509ExtensionTemplate, pTemplateOid: ?*IObjectId, MajorVersion: i32, MinorVersion: i32) callconv(.Inline) HRESULT {
        return self.vtable.InitializeEncode(self, pTemplateOid, MajorVersion, MinorVersion);
    }
    pub fn InitializeDecode(self: *const IX509ExtensionTemplate, Encoding: EncodingType, strEncodedData: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeDecode(self, Encoding, strEncodedData);
    }
    pub fn get_TemplateOid(self: *const IX509ExtensionTemplate, ppValue: ?*?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.get_TemplateOid(self, ppValue);
    }
    pub fn get_MajorVersion(self: *const IX509ExtensionTemplate, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_MajorVersion(self, pValue);
    }
    pub fn get_MinorVersion(self: *const IX509ExtensionTemplate, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_MinorVersion(self, pValue);
    }
};

pub const AlternativeNameType = enum(i32) {
    UNKNOWN = 0,
    OTHER_NAME = 1,
    RFC822_NAME = 2,
    DNS_NAME = 3,
    X400_ADDRESS = 4,
    DIRECTORY_NAME = 5,
    EDI_PARTY_NAME = 6,
    URL = 7,
    IP_ADDRESS = 8,
    REGISTERED_ID = 9,
    GUID = 10,
    USER_PRINCIPLE_NAME = 11,
};
pub const XCN_CERT_ALT_NAME_UNKNOWN = AlternativeNameType.UNKNOWN;
pub const XCN_CERT_ALT_NAME_OTHER_NAME = AlternativeNameType.OTHER_NAME;
pub const XCN_CERT_ALT_NAME_RFC822_NAME = AlternativeNameType.RFC822_NAME;
pub const XCN_CERT_ALT_NAME_DNS_NAME = AlternativeNameType.DNS_NAME;
pub const XCN_CERT_ALT_NAME_X400_ADDRESS = AlternativeNameType.X400_ADDRESS;
pub const XCN_CERT_ALT_NAME_DIRECTORY_NAME = AlternativeNameType.DIRECTORY_NAME;
pub const XCN_CERT_ALT_NAME_EDI_PARTY_NAME = AlternativeNameType.EDI_PARTY_NAME;
pub const XCN_CERT_ALT_NAME_URL = AlternativeNameType.URL;
pub const XCN_CERT_ALT_NAME_IP_ADDRESS = AlternativeNameType.IP_ADDRESS;
pub const XCN_CERT_ALT_NAME_REGISTERED_ID = AlternativeNameType.REGISTERED_ID;
pub const XCN_CERT_ALT_NAME_GUID = AlternativeNameType.GUID;
pub const XCN_CERT_ALT_NAME_USER_PRINCIPLE_NAME = AlternativeNameType.USER_PRINCIPLE_NAME;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAlternativeName_Value = Guid.initString("728ab313-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IAlternativeName = &IID_IAlternativeName_Value;
pub const IAlternativeName = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        InitializeFromString: *const fn(
            self: *const IAlternativeName,
            Type: AlternativeNameType,
            strValue: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromRawData: *const fn(
            self: *const IAlternativeName,
            Type: AlternativeNameType,
            Encoding: EncodingType,
            strRawData: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromOtherName: *const fn(
            self: *const IAlternativeName,
            pObjectId: ?*IObjectId,
            Encoding: EncodingType,
            strRawData: ?BSTR,
            ToBeWrapped: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn(
            self: *const IAlternativeName,
            pValue: ?*AlternativeNameType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StrValue: *const fn(
            self: *const IAlternativeName,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectId: *const fn(
            self: *const IAlternativeName,
            ppValue: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RawData: *const fn(
            self: *const IAlternativeName,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeFromString(self: *const IAlternativeName, Type: AlternativeNameType, strValue: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromString(self, Type, strValue);
    }
    pub fn InitializeFromRawData(self: *const IAlternativeName, Type: AlternativeNameType, Encoding: EncodingType, strRawData: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromRawData(self, Type, Encoding, strRawData);
    }
    pub fn InitializeFromOtherName(self: *const IAlternativeName, pObjectId: ?*IObjectId, Encoding: EncodingType, strRawData: ?BSTR, ToBeWrapped: i16) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromOtherName(self, pObjectId, Encoding, strRawData, ToBeWrapped);
    }
    pub fn get_Type(self: *const IAlternativeName, pValue: ?*AlternativeNameType) callconv(.Inline) HRESULT {
        return self.vtable.get_Type(self, pValue);
    }
    pub fn get_StrValue(self: *const IAlternativeName, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_StrValue(self, pValue);
    }
    pub fn get_ObjectId(self: *const IAlternativeName, ppValue: ?*?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.get_ObjectId(self, ppValue);
    }
    pub fn get_RawData(self: *const IAlternativeName, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RawData(self, Encoding, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAlternativeNames_Value = Guid.initString("728ab314-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IAlternativeNames = &IID_IAlternativeNames_Value;
pub const IAlternativeNames = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: *const fn(
            self: *const IAlternativeNames,
            Index: i32,
            pVal: ?*?*IAlternativeName,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IAlternativeNames,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const IAlternativeNames,
            pVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const IAlternativeNames,
            pVal: ?*IAlternativeName,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const IAlternativeNames,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn(
            self: *const IAlternativeNames,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ItemByIndex(self: *const IAlternativeNames, Index: i32, pVal: ?*?*IAlternativeName) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByIndex(self, Index, pVal);
    }
    pub fn get_Count(self: *const IAlternativeNames, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
    pub fn get__NewEnum(self: *const IAlternativeNames, pVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, pVal);
    }
    pub fn Add(self: *const IAlternativeNames, pVal: ?*IAlternativeName) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, pVal);
    }
    pub fn Remove(self: *const IAlternativeNames, Index: i32) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, Index);
    }
    pub fn Clear(self: *const IAlternativeNames) callconv(.Inline) HRESULT {
        return self.vtable.Clear(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509ExtensionAlternativeNames_Value = Guid.initString("728ab315-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509ExtensionAlternativeNames = &IID_IX509ExtensionAlternativeNames_Value;
pub const IX509ExtensionAlternativeNames = extern union {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: *const fn(
            self: *const IX509ExtensionAlternativeNames,
            pValue: ?*IAlternativeNames,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn(
            self: *const IX509ExtensionAlternativeNames,
            Encoding: EncodingType,
            strEncodedData: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AlternativeNames: *const fn(
            self: *const IX509ExtensionAlternativeNames,
            ppValue: ?*?*IAlternativeNames,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509Extension: IX509Extension,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeEncode(self: *const IX509ExtensionAlternativeNames, pValue: ?*IAlternativeNames) callconv(.Inline) HRESULT {
        return self.vtable.InitializeEncode(self, pValue);
    }
    pub fn InitializeDecode(self: *const IX509ExtensionAlternativeNames, Encoding: EncodingType, strEncodedData: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeDecode(self, Encoding, strEncodedData);
    }
    pub fn get_AlternativeNames(self: *const IX509ExtensionAlternativeNames, ppValue: ?*?*IAlternativeNames) callconv(.Inline) HRESULT {
        return self.vtable.get_AlternativeNames(self, ppValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509ExtensionBasicConstraints_Value = Guid.initString("728ab316-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509ExtensionBasicConstraints = &IID_IX509ExtensionBasicConstraints_Value;
pub const IX509ExtensionBasicConstraints = extern union {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: *const fn(
            self: *const IX509ExtensionBasicConstraints,
            IsCA: i16,
            PathLenConstraint: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn(
            self: *const IX509ExtensionBasicConstraints,
            Encoding: EncodingType,
            strEncodedData: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsCA: *const fn(
            self: *const IX509ExtensionBasicConstraints,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PathLenConstraint: *const fn(
            self: *const IX509ExtensionBasicConstraints,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509Extension: IX509Extension,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeEncode(self: *const IX509ExtensionBasicConstraints, IsCA: i16, PathLenConstraint: i32) callconv(.Inline) HRESULT {
        return self.vtable.InitializeEncode(self, IsCA, PathLenConstraint);
    }
    pub fn InitializeDecode(self: *const IX509ExtensionBasicConstraints, Encoding: EncodingType, strEncodedData: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeDecode(self, Encoding, strEncodedData);
    }
    pub fn get_IsCA(self: *const IX509ExtensionBasicConstraints, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_IsCA(self, pValue);
    }
    pub fn get_PathLenConstraint(self: *const IX509ExtensionBasicConstraints, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_PathLenConstraint(self, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509ExtensionSubjectKeyIdentifier_Value = Guid.initString("728ab317-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509ExtensionSubjectKeyIdentifier = &IID_IX509ExtensionSubjectKeyIdentifier_Value;
pub const IX509ExtensionSubjectKeyIdentifier = extern union {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: *const fn(
            self: *const IX509ExtensionSubjectKeyIdentifier,
            Encoding: EncodingType,
            strKeyIdentifier: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn(
            self: *const IX509ExtensionSubjectKeyIdentifier,
            Encoding: EncodingType,
            strEncodedData: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SubjectKeyIdentifier: *const fn(
            self: *const IX509ExtensionSubjectKeyIdentifier,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509Extension: IX509Extension,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeEncode(self: *const IX509ExtensionSubjectKeyIdentifier, Encoding: EncodingType, strKeyIdentifier: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeEncode(self, Encoding, strKeyIdentifier);
    }
    pub fn InitializeDecode(self: *const IX509ExtensionSubjectKeyIdentifier, Encoding: EncodingType, strEncodedData: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeDecode(self, Encoding, strEncodedData);
    }
    pub fn get_SubjectKeyIdentifier(self: *const IX509ExtensionSubjectKeyIdentifier, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_SubjectKeyIdentifier(self, Encoding, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509ExtensionAuthorityKeyIdentifier_Value = Guid.initString("728ab318-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509ExtensionAuthorityKeyIdentifier = &IID_IX509ExtensionAuthorityKeyIdentifier_Value;
pub const IX509ExtensionAuthorityKeyIdentifier = extern union {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: *const fn(
            self: *const IX509ExtensionAuthorityKeyIdentifier,
            Encoding: EncodingType,
            strKeyIdentifier: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn(
            self: *const IX509ExtensionAuthorityKeyIdentifier,
            Encoding: EncodingType,
            strEncodedData: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AuthorityKeyIdentifier: *const fn(
            self: *const IX509ExtensionAuthorityKeyIdentifier,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509Extension: IX509Extension,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeEncode(self: *const IX509ExtensionAuthorityKeyIdentifier, Encoding: EncodingType, strKeyIdentifier: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeEncode(self, Encoding, strKeyIdentifier);
    }
    pub fn InitializeDecode(self: *const IX509ExtensionAuthorityKeyIdentifier, Encoding: EncodingType, strEncodedData: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeDecode(self, Encoding, strEncodedData);
    }
    pub fn get_AuthorityKeyIdentifier(self: *const IX509ExtensionAuthorityKeyIdentifier, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_AuthorityKeyIdentifier(self, Encoding, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISmimeCapability_Value = Guid.initString("728ab319-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ISmimeCapability = &IID_ISmimeCapability_Value;
pub const ISmimeCapability = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn(
            self: *const ISmimeCapability,
            pObjectId: ?*IObjectId,
            BitCount: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectId: *const fn(
            self: *const ISmimeCapability,
            ppValue: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BitCount: *const fn(
            self: *const ISmimeCapability,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const ISmimeCapability, pObjectId: ?*IObjectId, BitCount: i32) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, pObjectId, BitCount);
    }
    pub fn get_ObjectId(self: *const ISmimeCapability, ppValue: ?*?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.get_ObjectId(self, ppValue);
    }
    pub fn get_BitCount(self: *const ISmimeCapability, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_BitCount(self, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISmimeCapabilities_Value = Guid.initString("728ab31a-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ISmimeCapabilities = &IID_ISmimeCapabilities_Value;
pub const ISmimeCapabilities = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: *const fn(
            self: *const ISmimeCapabilities,
            Index: i32,
            pVal: ?*?*ISmimeCapability,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const ISmimeCapabilities,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const ISmimeCapabilities,
            pVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const ISmimeCapabilities,
            pVal: ?*ISmimeCapability,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const ISmimeCapabilities,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn(
            self: *const ISmimeCapabilities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFromCsp: *const fn(
            self: *const ISmimeCapabilities,
            pValue: ?*ICspInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAvailableSmimeCapabilities: *const fn(
            self: *const ISmimeCapabilities,
            MachineContext: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ItemByIndex(self: *const ISmimeCapabilities, Index: i32, pVal: ?*?*ISmimeCapability) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByIndex(self, Index, pVal);
    }
    pub fn get_Count(self: *const ISmimeCapabilities, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
    pub fn get__NewEnum(self: *const ISmimeCapabilities, pVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, pVal);
    }
    pub fn Add(self: *const ISmimeCapabilities, pVal: ?*ISmimeCapability) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, pVal);
    }
    pub fn Remove(self: *const ISmimeCapabilities, Index: i32) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, Index);
    }
    pub fn Clear(self: *const ISmimeCapabilities) callconv(.Inline) HRESULT {
        return self.vtable.Clear(self);
    }
    pub fn AddFromCsp(self: *const ISmimeCapabilities, pValue: ?*ICspInformation) callconv(.Inline) HRESULT {
        return self.vtable.AddFromCsp(self, pValue);
    }
    pub fn AddAvailableSmimeCapabilities(self: *const ISmimeCapabilities, MachineContext: i16) callconv(.Inline) HRESULT {
        return self.vtable.AddAvailableSmimeCapabilities(self, MachineContext);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509ExtensionSmimeCapabilities_Value = Guid.initString("728ab31b-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509ExtensionSmimeCapabilities = &IID_IX509ExtensionSmimeCapabilities_Value;
pub const IX509ExtensionSmimeCapabilities = extern union {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: *const fn(
            self: *const IX509ExtensionSmimeCapabilities,
            pValue: ?*ISmimeCapabilities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn(
            self: *const IX509ExtensionSmimeCapabilities,
            Encoding: EncodingType,
            strEncodedData: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SmimeCapabilities: *const fn(
            self: *const IX509ExtensionSmimeCapabilities,
            ppValue: ?*?*ISmimeCapabilities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509Extension: IX509Extension,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeEncode(self: *const IX509ExtensionSmimeCapabilities, pValue: ?*ISmimeCapabilities) callconv(.Inline) HRESULT {
        return self.vtable.InitializeEncode(self, pValue);
    }
    pub fn InitializeDecode(self: *const IX509ExtensionSmimeCapabilities, Encoding: EncodingType, strEncodedData: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeDecode(self, Encoding, strEncodedData);
    }
    pub fn get_SmimeCapabilities(self: *const IX509ExtensionSmimeCapabilities, ppValue: ?*?*ISmimeCapabilities) callconv(.Inline) HRESULT {
        return self.vtable.get_SmimeCapabilities(self, ppValue);
    }
};

pub const PolicyQualifierType = enum(i32) {
    Unknown = 0,
    Url = 1,
    UserNotice = 2,
    Flags = 3,
};
pub const PolicyQualifierTypeUnknown = PolicyQualifierType.Unknown;
pub const PolicyQualifierTypeUrl = PolicyQualifierType.Url;
pub const PolicyQualifierTypeUserNotice = PolicyQualifierType.UserNotice;
pub const PolicyQualifierTypeFlags = PolicyQualifierType.Flags;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPolicyQualifier_Value = Guid.initString("728ab31c-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IPolicyQualifier = &IID_IPolicyQualifier_Value;
pub const IPolicyQualifier = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        InitializeEncode: *const fn(
            self: *const IPolicyQualifier,
            strQualifier: ?BSTR,
            Type: PolicyQualifierType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectId: *const fn(
            self: *const IPolicyQualifier,
            ppValue: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Qualifier: *const fn(
            self: *const IPolicyQualifier,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn(
            self: *const IPolicyQualifier,
            pValue: ?*PolicyQualifierType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RawData: *const fn(
            self: *const IPolicyQualifier,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeEncode(self: *const IPolicyQualifier, strQualifier: ?BSTR, Type: PolicyQualifierType) callconv(.Inline) HRESULT {
        return self.vtable.InitializeEncode(self, strQualifier, Type);
    }
    pub fn get_ObjectId(self: *const IPolicyQualifier, ppValue: ?*?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.get_ObjectId(self, ppValue);
    }
    pub fn get_Qualifier(self: *const IPolicyQualifier, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Qualifier(self, pValue);
    }
    pub fn get_Type(self: *const IPolicyQualifier, pValue: ?*PolicyQualifierType) callconv(.Inline) HRESULT {
        return self.vtable.get_Type(self, pValue);
    }
    pub fn get_RawData(self: *const IPolicyQualifier, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RawData(self, Encoding, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPolicyQualifiers_Value = Guid.initString("728ab31d-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IPolicyQualifiers = &IID_IPolicyQualifiers_Value;
pub const IPolicyQualifiers = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: *const fn(
            self: *const IPolicyQualifiers,
            Index: i32,
            pVal: ?*?*IPolicyQualifier,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IPolicyQualifiers,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const IPolicyQualifiers,
            pVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const IPolicyQualifiers,
            pVal: ?*IPolicyQualifier,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const IPolicyQualifiers,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn(
            self: *const IPolicyQualifiers,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ItemByIndex(self: *const IPolicyQualifiers, Index: i32, pVal: ?*?*IPolicyQualifier) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByIndex(self, Index, pVal);
    }
    pub fn get_Count(self: *const IPolicyQualifiers, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
    pub fn get__NewEnum(self: *const IPolicyQualifiers, pVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, pVal);
    }
    pub fn Add(self: *const IPolicyQualifiers, pVal: ?*IPolicyQualifier) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, pVal);
    }
    pub fn Remove(self: *const IPolicyQualifiers, Index: i32) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, Index);
    }
    pub fn Clear(self: *const IPolicyQualifiers) callconv(.Inline) HRESULT {
        return self.vtable.Clear(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertificatePolicy_Value = Guid.initString("728ab31e-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertificatePolicy = &IID_ICertificatePolicy_Value;
pub const ICertificatePolicy = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn(
            self: *const ICertificatePolicy,
            pValue: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectId: *const fn(
            self: *const ICertificatePolicy,
            ppValue: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PolicyQualifiers: *const fn(
            self: *const ICertificatePolicy,
            ppValue: ?*?*IPolicyQualifiers,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const ICertificatePolicy, pValue: ?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, pValue);
    }
    pub fn get_ObjectId(self: *const ICertificatePolicy, ppValue: ?*?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.get_ObjectId(self, ppValue);
    }
    pub fn get_PolicyQualifiers(self: *const ICertificatePolicy, ppValue: ?*?*IPolicyQualifiers) callconv(.Inline) HRESULT {
        return self.vtable.get_PolicyQualifiers(self, ppValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertificatePolicies_Value = Guid.initString("728ab31f-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertificatePolicies = &IID_ICertificatePolicies_Value;
pub const ICertificatePolicies = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: *const fn(
            self: *const ICertificatePolicies,
            Index: i32,
            pVal: ?*?*ICertificatePolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const ICertificatePolicies,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const ICertificatePolicies,
            pVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const ICertificatePolicies,
            pVal: ?*ICertificatePolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const ICertificatePolicies,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn(
            self: *const ICertificatePolicies,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ItemByIndex(self: *const ICertificatePolicies, Index: i32, pVal: ?*?*ICertificatePolicy) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByIndex(self, Index, pVal);
    }
    pub fn get_Count(self: *const ICertificatePolicies, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
    pub fn get__NewEnum(self: *const ICertificatePolicies, pVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, pVal);
    }
    pub fn Add(self: *const ICertificatePolicies, pVal: ?*ICertificatePolicy) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, pVal);
    }
    pub fn Remove(self: *const ICertificatePolicies, Index: i32) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, Index);
    }
    pub fn Clear(self: *const ICertificatePolicies) callconv(.Inline) HRESULT {
        return self.vtable.Clear(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509ExtensionCertificatePolicies_Value = Guid.initString("728ab320-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509ExtensionCertificatePolicies = &IID_IX509ExtensionCertificatePolicies_Value;
pub const IX509ExtensionCertificatePolicies = extern union {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: *const fn(
            self: *const IX509ExtensionCertificatePolicies,
            pValue: ?*ICertificatePolicies,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn(
            self: *const IX509ExtensionCertificatePolicies,
            Encoding: EncodingType,
            strEncodedData: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Policies: *const fn(
            self: *const IX509ExtensionCertificatePolicies,
            ppValue: ?*?*ICertificatePolicies,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509Extension: IX509Extension,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeEncode(self: *const IX509ExtensionCertificatePolicies, pValue: ?*ICertificatePolicies) callconv(.Inline) HRESULT {
        return self.vtable.InitializeEncode(self, pValue);
    }
    pub fn InitializeDecode(self: *const IX509ExtensionCertificatePolicies, Encoding: EncodingType, strEncodedData: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeDecode(self, Encoding, strEncodedData);
    }
    pub fn get_Policies(self: *const IX509ExtensionCertificatePolicies, ppValue: ?*?*ICertificatePolicies) callconv(.Inline) HRESULT {
        return self.vtable.get_Policies(self, ppValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509ExtensionMSApplicationPolicies_Value = Guid.initString("728ab321-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509ExtensionMSApplicationPolicies = &IID_IX509ExtensionMSApplicationPolicies_Value;
pub const IX509ExtensionMSApplicationPolicies = extern union {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: *const fn(
            self: *const IX509ExtensionMSApplicationPolicies,
            pValue: ?*ICertificatePolicies,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn(
            self: *const IX509ExtensionMSApplicationPolicies,
            Encoding: EncodingType,
            strEncodedData: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Policies: *const fn(
            self: *const IX509ExtensionMSApplicationPolicies,
            ppValue: ?*?*ICertificatePolicies,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509Extension: IX509Extension,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeEncode(self: *const IX509ExtensionMSApplicationPolicies, pValue: ?*ICertificatePolicies) callconv(.Inline) HRESULT {
        return self.vtable.InitializeEncode(self, pValue);
    }
    pub fn InitializeDecode(self: *const IX509ExtensionMSApplicationPolicies, Encoding: EncodingType, strEncodedData: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeDecode(self, Encoding, strEncodedData);
    }
    pub fn get_Policies(self: *const IX509ExtensionMSApplicationPolicies, ppValue: ?*?*ICertificatePolicies) callconv(.Inline) HRESULT {
        return self.vtable.get_Policies(self, ppValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509Attribute_Value = Guid.initString("728ab322-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509Attribute = &IID_IX509Attribute_Value;
pub const IX509Attribute = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn(
            self: *const IX509Attribute,
            pObjectId: ?*IObjectId,
            Encoding: EncodingType,
            strEncodedData: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectId: *const fn(
            self: *const IX509Attribute,
            ppValue: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RawData: *const fn(
            self: *const IX509Attribute,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IX509Attribute, pObjectId: ?*IObjectId, Encoding: EncodingType, strEncodedData: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, pObjectId, Encoding, strEncodedData);
    }
    pub fn get_ObjectId(self: *const IX509Attribute, ppValue: ?*?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.get_ObjectId(self, ppValue);
    }
    pub fn get_RawData(self: *const IX509Attribute, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RawData(self, Encoding, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509Attributes_Value = Guid.initString("728ab323-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509Attributes = &IID_IX509Attributes_Value;
pub const IX509Attributes = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: *const fn(
            self: *const IX509Attributes,
            Index: i32,
            pVal: ?*?*IX509Attribute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IX509Attributes,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const IX509Attributes,
            pVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const IX509Attributes,
            pVal: ?*IX509Attribute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const IX509Attributes,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn(
            self: *const IX509Attributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ItemByIndex(self: *const IX509Attributes, Index: i32, pVal: ?*?*IX509Attribute) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByIndex(self, Index, pVal);
    }
    pub fn get_Count(self: *const IX509Attributes, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
    pub fn get__NewEnum(self: *const IX509Attributes, pVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, pVal);
    }
    pub fn Add(self: *const IX509Attributes, pVal: ?*IX509Attribute) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, pVal);
    }
    pub fn Remove(self: *const IX509Attributes, Index: i32) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, Index);
    }
    pub fn Clear(self: *const IX509Attributes) callconv(.Inline) HRESULT {
        return self.vtable.Clear(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509AttributeExtensions_Value = Guid.initString("728ab324-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509AttributeExtensions = &IID_IX509AttributeExtensions_Value;
pub const IX509AttributeExtensions = extern union {
    pub const VTable = extern struct {
        base: IX509Attribute.VTable,
        InitializeEncode: *const fn(
            self: *const IX509AttributeExtensions,
            pExtensions: ?*IX509Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn(
            self: *const IX509AttributeExtensions,
            Encoding: EncodingType,
            strEncodedData: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_X509Extensions: *const fn(
            self: *const IX509AttributeExtensions,
            ppValue: ?*?*IX509Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509Attribute: IX509Attribute,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeEncode(self: *const IX509AttributeExtensions, pExtensions: ?*IX509Extensions) callconv(.Inline) HRESULT {
        return self.vtable.InitializeEncode(self, pExtensions);
    }
    pub fn InitializeDecode(self: *const IX509AttributeExtensions, Encoding: EncodingType, strEncodedData: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeDecode(self, Encoding, strEncodedData);
    }
    pub fn get_X509Extensions(self: *const IX509AttributeExtensions, ppValue: ?*?*IX509Extensions) callconv(.Inline) HRESULT {
        return self.vtable.get_X509Extensions(self, ppValue);
    }
};

pub const RequestClientInfoClientId = enum(i32) {
    None = 0,
    XEnroll2003 = 1,
    AutoEnroll2003 = 2,
    Wizard2003 = 3,
    CertReq2003 = 4,
    DefaultRequest = 5,
    AutoEnroll = 6,
    RequestWizard = 7,
    EOBO = 8,
    CertReq = 9,
    Test = 10,
    WinRT = 11,
    UserStart = 1000,
};
pub const ClientIdNone = RequestClientInfoClientId.None;
pub const ClientIdXEnroll2003 = RequestClientInfoClientId.XEnroll2003;
pub const ClientIdAutoEnroll2003 = RequestClientInfoClientId.AutoEnroll2003;
pub const ClientIdWizard2003 = RequestClientInfoClientId.Wizard2003;
pub const ClientIdCertReq2003 = RequestClientInfoClientId.CertReq2003;
pub const ClientIdDefaultRequest = RequestClientInfoClientId.DefaultRequest;
pub const ClientIdAutoEnroll = RequestClientInfoClientId.AutoEnroll;
pub const ClientIdRequestWizard = RequestClientInfoClientId.RequestWizard;
pub const ClientIdEOBO = RequestClientInfoClientId.EOBO;
pub const ClientIdCertReq = RequestClientInfoClientId.CertReq;
pub const ClientIdTest = RequestClientInfoClientId.Test;
pub const ClientIdWinRT = RequestClientInfoClientId.WinRT;
pub const ClientIdUserStart = RequestClientInfoClientId.UserStart;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509AttributeClientId_Value = Guid.initString("728ab325-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509AttributeClientId = &IID_IX509AttributeClientId_Value;
pub const IX509AttributeClientId = extern union {
    pub const VTable = extern struct {
        base: IX509Attribute.VTable,
        InitializeEncode: *const fn(
            self: *const IX509AttributeClientId,
            ClientId: RequestClientInfoClientId,
            strMachineDnsName: ?BSTR,
            strUserSamName: ?BSTR,
            strProcessName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn(
            self: *const IX509AttributeClientId,
            Encoding: EncodingType,
            strEncodedData: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClientId: *const fn(
            self: *const IX509AttributeClientId,
            pValue: ?*RequestClientInfoClientId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MachineDnsName: *const fn(
            self: *const IX509AttributeClientId,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserSamName: *const fn(
            self: *const IX509AttributeClientId,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProcessName: *const fn(
            self: *const IX509AttributeClientId,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509Attribute: IX509Attribute,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeEncode(self: *const IX509AttributeClientId, ClientId: RequestClientInfoClientId, strMachineDnsName: ?BSTR, strUserSamName: ?BSTR, strProcessName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeEncode(self, ClientId, strMachineDnsName, strUserSamName, strProcessName);
    }
    pub fn InitializeDecode(self: *const IX509AttributeClientId, Encoding: EncodingType, strEncodedData: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeDecode(self, Encoding, strEncodedData);
    }
    pub fn get_ClientId(self: *const IX509AttributeClientId, pValue: ?*RequestClientInfoClientId) callconv(.Inline) HRESULT {
        return self.vtable.get_ClientId(self, pValue);
    }
    pub fn get_MachineDnsName(self: *const IX509AttributeClientId, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_MachineDnsName(self, pValue);
    }
    pub fn get_UserSamName(self: *const IX509AttributeClientId, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_UserSamName(self, pValue);
    }
    pub fn get_ProcessName(self: *const IX509AttributeClientId, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ProcessName(self, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509AttributeRenewalCertificate_Value = Guid.initString("728ab326-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509AttributeRenewalCertificate = &IID_IX509AttributeRenewalCertificate_Value;
pub const IX509AttributeRenewalCertificate = extern union {
    pub const VTable = extern struct {
        base: IX509Attribute.VTable,
        InitializeEncode: *const fn(
            self: *const IX509AttributeRenewalCertificate,
            Encoding: EncodingType,
            strCert: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn(
            self: *const IX509AttributeRenewalCertificate,
            Encoding: EncodingType,
            strEncodedData: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RenewalCertificate: *const fn(
            self: *const IX509AttributeRenewalCertificate,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509Attribute: IX509Attribute,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeEncode(self: *const IX509AttributeRenewalCertificate, Encoding: EncodingType, strCert: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeEncode(self, Encoding, strCert);
    }
    pub fn InitializeDecode(self: *const IX509AttributeRenewalCertificate, Encoding: EncodingType, strEncodedData: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeDecode(self, Encoding, strEncodedData);
    }
    pub fn get_RenewalCertificate(self: *const IX509AttributeRenewalCertificate, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RenewalCertificate(self, Encoding, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509AttributeArchiveKey_Value = Guid.initString("728ab327-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509AttributeArchiveKey = &IID_IX509AttributeArchiveKey_Value;
pub const IX509AttributeArchiveKey = extern union {
    pub const VTable = extern struct {
        base: IX509Attribute.VTable,
        InitializeEncode: *const fn(
            self: *const IX509AttributeArchiveKey,
            pKey: ?*IX509PrivateKey,
            Encoding: EncodingType,
            strCAXCert: ?BSTR,
            pAlgorithm: ?*IObjectId,
            EncryptionStrength: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn(
            self: *const IX509AttributeArchiveKey,
            Encoding: EncodingType,
            strEncodedData: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EncryptedKeyBlob: *const fn(
            self: *const IX509AttributeArchiveKey,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncryptionAlgorithm: *const fn(
            self: *const IX509AttributeArchiveKey,
            ppValue: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncryptionStrength: *const fn(
            self: *const IX509AttributeArchiveKey,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509Attribute: IX509Attribute,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeEncode(self: *const IX509AttributeArchiveKey, pKey: ?*IX509PrivateKey, Encoding: EncodingType, strCAXCert: ?BSTR, pAlgorithm: ?*IObjectId, EncryptionStrength: i32) callconv(.Inline) HRESULT {
        return self.vtable.InitializeEncode(self, pKey, Encoding, strCAXCert, pAlgorithm, EncryptionStrength);
    }
    pub fn InitializeDecode(self: *const IX509AttributeArchiveKey, Encoding: EncodingType, strEncodedData: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeDecode(self, Encoding, strEncodedData);
    }
    pub fn get_EncryptedKeyBlob(self: *const IX509AttributeArchiveKey, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_EncryptedKeyBlob(self, Encoding, pValue);
    }
    pub fn get_EncryptionAlgorithm(self: *const IX509AttributeArchiveKey, ppValue: ?*?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.get_EncryptionAlgorithm(self, ppValue);
    }
    pub fn get_EncryptionStrength(self: *const IX509AttributeArchiveKey, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_EncryptionStrength(self, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509AttributeArchiveKeyHash_Value = Guid.initString("728ab328-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509AttributeArchiveKeyHash = &IID_IX509AttributeArchiveKeyHash_Value;
pub const IX509AttributeArchiveKeyHash = extern union {
    pub const VTable = extern struct {
        base: IX509Attribute.VTable,
        InitializeEncodeFromEncryptedKeyBlob: *const fn(
            self: *const IX509AttributeArchiveKeyHash,
            Encoding: EncodingType,
            strEncryptedKeyBlob: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn(
            self: *const IX509AttributeArchiveKeyHash,
            Encoding: EncodingType,
            strEncodedData: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EncryptedKeyHashBlob: *const fn(
            self: *const IX509AttributeArchiveKeyHash,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509Attribute: IX509Attribute,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeEncodeFromEncryptedKeyBlob(self: *const IX509AttributeArchiveKeyHash, Encoding: EncodingType, strEncryptedKeyBlob: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeEncodeFromEncryptedKeyBlob(self, Encoding, strEncryptedKeyBlob);
    }
    pub fn InitializeDecode(self: *const IX509AttributeArchiveKeyHash, Encoding: EncodingType, strEncodedData: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeDecode(self, Encoding, strEncodedData);
    }
    pub fn get_EncryptedKeyHashBlob(self: *const IX509AttributeArchiveKeyHash, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_EncryptedKeyHashBlob(self, Encoding, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509AttributeOSVersion_Value = Guid.initString("728ab32a-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509AttributeOSVersion = &IID_IX509AttributeOSVersion_Value;
pub const IX509AttributeOSVersion = extern union {
    pub const VTable = extern struct {
        base: IX509Attribute.VTable,
        InitializeEncode: *const fn(
            self: *const IX509AttributeOSVersion,
            strOSVersion: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn(
            self: *const IX509AttributeOSVersion,
            Encoding: EncodingType,
            strEncodedData: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OSVersion: *const fn(
            self: *const IX509AttributeOSVersion,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509Attribute: IX509Attribute,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeEncode(self: *const IX509AttributeOSVersion, strOSVersion: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeEncode(self, strOSVersion);
    }
    pub fn InitializeDecode(self: *const IX509AttributeOSVersion, Encoding: EncodingType, strEncodedData: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeDecode(self, Encoding, strEncodedData);
    }
    pub fn get_OSVersion(self: *const IX509AttributeOSVersion, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_OSVersion(self, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509AttributeCspProvider_Value = Guid.initString("728ab32b-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509AttributeCspProvider = &IID_IX509AttributeCspProvider_Value;
pub const IX509AttributeCspProvider = extern union {
    pub const VTable = extern struct {
        base: IX509Attribute.VTable,
        InitializeEncode: *const fn(
            self: *const IX509AttributeCspProvider,
            KeySpec: X509KeySpec,
            strProviderName: ?BSTR,
            Encoding: EncodingType,
            strSignature: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn(
            self: *const IX509AttributeCspProvider,
            Encoding: EncodingType,
            strEncodedData: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeySpec: *const fn(
            self: *const IX509AttributeCspProvider,
            pValue: ?*X509KeySpec,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderName: *const fn(
            self: *const IX509AttributeCspProvider,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Signature: *const fn(
            self: *const IX509AttributeCspProvider,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509Attribute: IX509Attribute,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeEncode(self: *const IX509AttributeCspProvider, KeySpec: X509KeySpec, strProviderName: ?BSTR, Encoding: EncodingType, strSignature: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeEncode(self, KeySpec, strProviderName, Encoding, strSignature);
    }
    pub fn InitializeDecode(self: *const IX509AttributeCspProvider, Encoding: EncodingType, strEncodedData: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeDecode(self, Encoding, strEncodedData);
    }
    pub fn get_KeySpec(self: *const IX509AttributeCspProvider, pValue: ?*X509KeySpec) callconv(.Inline) HRESULT {
        return self.vtable.get_KeySpec(self, pValue);
    }
    pub fn get_ProviderName(self: *const IX509AttributeCspProvider, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ProviderName(self, pValue);
    }
    pub fn get_Signature(self: *const IX509AttributeCspProvider, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Signature(self, Encoding, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICryptAttribute_Value = Guid.initString("728ab32c-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICryptAttribute = &IID_ICryptAttribute_Value;
pub const ICryptAttribute = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        InitializeFromObjectId: *const fn(
            self: *const ICryptAttribute,
            pObjectId: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromValues: *const fn(
            self: *const ICryptAttribute,
            pAttributes: ?*IX509Attributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectId: *const fn(
            self: *const ICryptAttribute,
            ppValue: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Values: *const fn(
            self: *const ICryptAttribute,
            ppValue: ?*?*IX509Attributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeFromObjectId(self: *const ICryptAttribute, pObjectId: ?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromObjectId(self, pObjectId);
    }
    pub fn InitializeFromValues(self: *const ICryptAttribute, pAttributes: ?*IX509Attributes) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromValues(self, pAttributes);
    }
    pub fn get_ObjectId(self: *const ICryptAttribute, ppValue: ?*?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.get_ObjectId(self, ppValue);
    }
    pub fn get_Values(self: *const ICryptAttribute, ppValue: ?*?*IX509Attributes) callconv(.Inline) HRESULT {
        return self.vtable.get_Values(self, ppValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICryptAttributes_Value = Guid.initString("728ab32d-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICryptAttributes = &IID_ICryptAttributes_Value;
pub const ICryptAttributes = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: *const fn(
            self: *const ICryptAttributes,
            Index: i32,
            pVal: ?*?*ICryptAttribute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const ICryptAttributes,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const ICryptAttributes,
            pVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const ICryptAttributes,
            pVal: ?*ICryptAttribute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const ICryptAttributes,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn(
            self: *const ICryptAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IndexByObjectId: *const fn(
            self: *const ICryptAttributes,
            pObjectId: ?*IObjectId,
            pIndex: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRange: *const fn(
            self: *const ICryptAttributes,
            pValue: ?*ICryptAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ItemByIndex(self: *const ICryptAttributes, Index: i32, pVal: ?*?*ICryptAttribute) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByIndex(self, Index, pVal);
    }
    pub fn get_Count(self: *const ICryptAttributes, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
    pub fn get__NewEnum(self: *const ICryptAttributes, pVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, pVal);
    }
    pub fn Add(self: *const ICryptAttributes, pVal: ?*ICryptAttribute) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, pVal);
    }
    pub fn Remove(self: *const ICryptAttributes, Index: i32) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, Index);
    }
    pub fn Clear(self: *const ICryptAttributes) callconv(.Inline) HRESULT {
        return self.vtable.Clear(self);
    }
    pub fn get_IndexByObjectId(self: *const ICryptAttributes, pObjectId: ?*IObjectId, pIndex: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_IndexByObjectId(self, pObjectId, pIndex);
    }
    pub fn AddRange(self: *const ICryptAttributes, pValue: ?*ICryptAttributes) callconv(.Inline) HRESULT {
        return self.vtable.AddRange(self, pValue);
    }
};

pub const CERTENROLL_PROPERTYID = enum(i32) {
    PROPERTYID_NONE = 0,
    CERT_KEY_PROV_HANDLE_PROP_ID = 1,
    CERT_KEY_PROV_INFO_PROP_ID = 2,
    CERT_SHA1_HASH_PROP_ID = 3,
    CERT_MD5_HASH_PROP_ID = 4,
    CERT_KEY_CONTEXT_PROP_ID = 5,
    CERT_KEY_SPEC_PROP_ID = 6,
    CERT_IE30_RESERVED_PROP_ID = 7,
    CERT_PUBKEY_HASH_RESERVED_PROP_ID = 8,
    CERT_ENHKEY_USAGE_PROP_ID = 9,
    CERT_NEXT_UPDATE_LOCATION_PROP_ID = 10,
    CERT_FRIENDLY_NAME_PROP_ID = 11,
    CERT_PVK_FILE_PROP_ID = 12,
    CERT_DESCRIPTION_PROP_ID = 13,
    CERT_ACCESS_STATE_PROP_ID = 14,
    CERT_SIGNATURE_HASH_PROP_ID = 15,
    CERT_SMART_CARD_DATA_PROP_ID = 16,
    CERT_EFS_PROP_ID = 17,
    CERT_FORTEZZA_DATA_PROP_ID = 18,
    CERT_ARCHIVED_PROP_ID = 19,
    CERT_KEY_IDENTIFIER_PROP_ID = 20,
    CERT_AUTO_ENROLL_PROP_ID = 21,
    CERT_PUBKEY_ALG_PARA_PROP_ID = 22,
    CERT_CROSS_CERT_DIST_POINTS_PROP_ID = 23,
    CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID = 24,
    CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID = 25,
    CERT_ENROLLMENT_PROP_ID = 26,
    CERT_DATE_STAMP_PROP_ID = 27,
    CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = 28,
    CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = 29,
    CERT_EXTENDED_ERROR_INFO_PROP_ID = 30,
    CERT_RENEWAL_PROP_ID = 64,
    CERT_ARCHIVED_KEY_HASH_PROP_ID = 65,
    CERT_AUTO_ENROLL_RETRY_PROP_ID = 66,
    CERT_AIA_URL_RETRIEVED_PROP_ID = 67,
    CERT_AUTHORITY_INFO_ACCESS_PROP_ID = 68,
    CERT_BACKED_UP_PROP_ID = 69,
    CERT_OCSP_RESPONSE_PROP_ID = 70,
    CERT_REQUEST_ORIGINATOR_PROP_ID = 71,
    CERT_SOURCE_LOCATION_PROP_ID = 72,
    CERT_SOURCE_URL_PROP_ID = 73,
    CERT_NEW_KEY_PROP_ID = 74,
    CERT_OCSP_CACHE_PREFIX_PROP_ID = 75,
    CERT_SMART_CARD_ROOT_INFO_PROP_ID = 76,
    CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID = 77,
    CERT_NCRYPT_KEY_HANDLE_PROP_ID = 78,
    CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID = 79,
    CERT_SUBJECT_INFO_ACCESS_PROP_ID = 80,
    CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 81,
    CERT_CA_DISABLE_CRL_PROP_ID = 82,
    CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID = 83,
    CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID = 84,
    CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 85,
    CERT_SUBJECT_DISABLE_CRL_PROP_ID = 86,
    CERT_CEP_PROP_ID = 87,
    CERT_SIGN_HASH_CNG_ALG_PROP_ID = 89,
    CERT_SCARD_PIN_ID_PROP_ID = 90,
    CERT_SCARD_PIN_INFO_PROP_ID = 91,
    CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID = 92,
    CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 93,
    CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID = 94,
    CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID = 95,
    CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 96,
    CERT_NO_EXPIRE_NOTIFICATION_PROP_ID = 97,
    CERT_AUTH_ROOT_SHA256_HASH_PROP_ID = 98,
    CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID = 99,
    CERT_HCRYPTPROV_TRANSFER_PROP_ID = 100,
    CERT_SMART_CARD_READER_PROP_ID = 101,
    CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID = 102,
    CERT_KEY_REPAIR_ATTEMPTED_PROP_ID = 103,
    CERT_DISALLOWED_FILETIME_PROP_ID = 104,
    CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID = 105,
    CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID = 106,
    CERT_SHA256_HASH_PROP_ID = 107,
    CERT_SCEP_SERVER_CERTS_PROP_ID = 108,
    CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID = 109,
    CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID = 110,
    CERT_SCEP_CA_CERT_PROP_ID = 111,
    CERT_SCEP_SIGNER_CERT_PROP_ID = 112,
    CERT_SCEP_NONCE_PROP_ID = 113,
    CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID = 114,
    CERT_SCEP_FLAGS_PROP_ID = 115,
    CERT_SCEP_GUID_PROP_ID = 116,
    CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID = 117,
    CERT_ISOLATED_KEY_PROP_ID = 118,
    CERT_SERIAL_CHAIN_PROP_ID = 119,
    CERT_KEY_CLASSIFICATION_PROP_ID = 120,
    CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID = 122,
    CERT_NONCOMPLIANT_ROOT_URL_PROP_ID = 123,
    CERT_PIN_SHA256_HASH_PROP_ID = 124,
    CERT_CLR_DELETE_KEY_PROP_ID = 125,
    CERT_NOT_BEFORE_FILETIME_PROP_ID = 126,
    CERT_CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID = 127,
    CERT_FIRST_RESERVED_PROP_ID = 128,
    CERT_LAST_RESERVED_PROP_ID = 32767,
    CERT_FIRST_USER_PROP_ID = 32768,
    CERT_LAST_USER_PROP_ID = 65535,
    CERT_STORE_LOCALIZED_NAME_PROP_ID = 4096,
    pub const CERT_HASH_PROP_ID = .CERT_SHA1_HASH_PROP_ID;
    pub const CERT_CTL_USAGE_PROP_ID = .CERT_ENHKEY_USAGE_PROP_ID;
};
pub const XCN_PROPERTYID_NONE = CERTENROLL_PROPERTYID.PROPERTYID_NONE;
pub const XCN_CERT_KEY_PROV_HANDLE_PROP_ID = CERTENROLL_PROPERTYID.CERT_KEY_PROV_HANDLE_PROP_ID;
pub const XCN_CERT_KEY_PROV_INFO_PROP_ID = CERTENROLL_PROPERTYID.CERT_KEY_PROV_INFO_PROP_ID;
pub const XCN_CERT_SHA1_HASH_PROP_ID = CERTENROLL_PROPERTYID.CERT_SHA1_HASH_PROP_ID;
pub const XCN_CERT_MD5_HASH_PROP_ID = CERTENROLL_PROPERTYID.CERT_MD5_HASH_PROP_ID;
pub const XCN_CERT_HASH_PROP_ID = CERTENROLL_PROPERTYID.CERT_SHA1_HASH_PROP_ID;
pub const XCN_CERT_KEY_CONTEXT_PROP_ID = CERTENROLL_PROPERTYID.CERT_KEY_CONTEXT_PROP_ID;
pub const XCN_CERT_KEY_SPEC_PROP_ID = CERTENROLL_PROPERTYID.CERT_KEY_SPEC_PROP_ID;
pub const XCN_CERT_IE30_RESERVED_PROP_ID = CERTENROLL_PROPERTYID.CERT_IE30_RESERVED_PROP_ID;
pub const XCN_CERT_PUBKEY_HASH_RESERVED_PROP_ID = CERTENROLL_PROPERTYID.CERT_PUBKEY_HASH_RESERVED_PROP_ID;
pub const XCN_CERT_ENHKEY_USAGE_PROP_ID = CERTENROLL_PROPERTYID.CERT_ENHKEY_USAGE_PROP_ID;
pub const XCN_CERT_CTL_USAGE_PROP_ID = CERTENROLL_PROPERTYID.CERT_ENHKEY_USAGE_PROP_ID;
pub const XCN_CERT_NEXT_UPDATE_LOCATION_PROP_ID = CERTENROLL_PROPERTYID.CERT_NEXT_UPDATE_LOCATION_PROP_ID;
pub const XCN_CERT_FRIENDLY_NAME_PROP_ID = CERTENROLL_PROPERTYID.CERT_FRIENDLY_NAME_PROP_ID;
pub const XCN_CERT_PVK_FILE_PROP_ID = CERTENROLL_PROPERTYID.CERT_PVK_FILE_PROP_ID;
pub const XCN_CERT_DESCRIPTION_PROP_ID = CERTENROLL_PROPERTYID.CERT_DESCRIPTION_PROP_ID;
pub const XCN_CERT_ACCESS_STATE_PROP_ID = CERTENROLL_PROPERTYID.CERT_ACCESS_STATE_PROP_ID;
pub const XCN_CERT_SIGNATURE_HASH_PROP_ID = CERTENROLL_PROPERTYID.CERT_SIGNATURE_HASH_PROP_ID;
pub const XCN_CERT_SMART_CARD_DATA_PROP_ID = CERTENROLL_PROPERTYID.CERT_SMART_CARD_DATA_PROP_ID;
pub const XCN_CERT_EFS_PROP_ID = CERTENROLL_PROPERTYID.CERT_EFS_PROP_ID;
pub const XCN_CERT_FORTEZZA_DATA_PROP_ID = CERTENROLL_PROPERTYID.CERT_FORTEZZA_DATA_PROP_ID;
pub const XCN_CERT_ARCHIVED_PROP_ID = CERTENROLL_PROPERTYID.CERT_ARCHIVED_PROP_ID;
pub const XCN_CERT_KEY_IDENTIFIER_PROP_ID = CERTENROLL_PROPERTYID.CERT_KEY_IDENTIFIER_PROP_ID;
pub const XCN_CERT_AUTO_ENROLL_PROP_ID = CERTENROLL_PROPERTYID.CERT_AUTO_ENROLL_PROP_ID;
pub const XCN_CERT_PUBKEY_ALG_PARA_PROP_ID = CERTENROLL_PROPERTYID.CERT_PUBKEY_ALG_PARA_PROP_ID;
pub const XCN_CERT_CROSS_CERT_DIST_POINTS_PROP_ID = CERTENROLL_PROPERTYID.CERT_CROSS_CERT_DIST_POINTS_PROP_ID;
pub const XCN_CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID = CERTENROLL_PROPERTYID.CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID;
pub const XCN_CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID = CERTENROLL_PROPERTYID.CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID;
pub const XCN_CERT_ENROLLMENT_PROP_ID = CERTENROLL_PROPERTYID.CERT_ENROLLMENT_PROP_ID;
pub const XCN_CERT_DATE_STAMP_PROP_ID = CERTENROLL_PROPERTYID.CERT_DATE_STAMP_PROP_ID;
pub const XCN_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = CERTENROLL_PROPERTYID.CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID;
pub const XCN_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = CERTENROLL_PROPERTYID.CERT_SUBJECT_NAME_MD5_HASH_PROP_ID;
pub const XCN_CERT_EXTENDED_ERROR_INFO_PROP_ID = CERTENROLL_PROPERTYID.CERT_EXTENDED_ERROR_INFO_PROP_ID;
pub const XCN_CERT_RENEWAL_PROP_ID = CERTENROLL_PROPERTYID.CERT_RENEWAL_PROP_ID;
pub const XCN_CERT_ARCHIVED_KEY_HASH_PROP_ID = CERTENROLL_PROPERTYID.CERT_ARCHIVED_KEY_HASH_PROP_ID;
pub const XCN_CERT_AUTO_ENROLL_RETRY_PROP_ID = CERTENROLL_PROPERTYID.CERT_AUTO_ENROLL_RETRY_PROP_ID;
pub const XCN_CERT_AIA_URL_RETRIEVED_PROP_ID = CERTENROLL_PROPERTYID.CERT_AIA_URL_RETRIEVED_PROP_ID;
pub const XCN_CERT_AUTHORITY_INFO_ACCESS_PROP_ID = CERTENROLL_PROPERTYID.CERT_AUTHORITY_INFO_ACCESS_PROP_ID;
pub const XCN_CERT_BACKED_UP_PROP_ID = CERTENROLL_PROPERTYID.CERT_BACKED_UP_PROP_ID;
pub const XCN_CERT_OCSP_RESPONSE_PROP_ID = CERTENROLL_PROPERTYID.CERT_OCSP_RESPONSE_PROP_ID;
pub const XCN_CERT_REQUEST_ORIGINATOR_PROP_ID = CERTENROLL_PROPERTYID.CERT_REQUEST_ORIGINATOR_PROP_ID;
pub const XCN_CERT_SOURCE_LOCATION_PROP_ID = CERTENROLL_PROPERTYID.CERT_SOURCE_LOCATION_PROP_ID;
pub const XCN_CERT_SOURCE_URL_PROP_ID = CERTENROLL_PROPERTYID.CERT_SOURCE_URL_PROP_ID;
pub const XCN_CERT_NEW_KEY_PROP_ID = CERTENROLL_PROPERTYID.CERT_NEW_KEY_PROP_ID;
pub const XCN_CERT_OCSP_CACHE_PREFIX_PROP_ID = CERTENROLL_PROPERTYID.CERT_OCSP_CACHE_PREFIX_PROP_ID;
pub const XCN_CERT_SMART_CARD_ROOT_INFO_PROP_ID = CERTENROLL_PROPERTYID.CERT_SMART_CARD_ROOT_INFO_PROP_ID;
pub const XCN_CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID = CERTENROLL_PROPERTYID.CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID;
pub const XCN_CERT_NCRYPT_KEY_HANDLE_PROP_ID = CERTENROLL_PROPERTYID.CERT_NCRYPT_KEY_HANDLE_PROP_ID;
pub const XCN_CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID = CERTENROLL_PROPERTYID.CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID;
pub const XCN_CERT_SUBJECT_INFO_ACCESS_PROP_ID = CERTENROLL_PROPERTYID.CERT_SUBJECT_INFO_ACCESS_PROP_ID;
pub const XCN_CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = CERTENROLL_PROPERTYID.CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID;
pub const XCN_CERT_CA_DISABLE_CRL_PROP_ID = CERTENROLL_PROPERTYID.CERT_CA_DISABLE_CRL_PROP_ID;
pub const XCN_CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID = CERTENROLL_PROPERTYID.CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID;
pub const XCN_CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID = CERTENROLL_PROPERTYID.CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID;
pub const XCN_CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = CERTENROLL_PROPERTYID.CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID;
pub const XCN_CERT_SUBJECT_DISABLE_CRL_PROP_ID = CERTENROLL_PROPERTYID.CERT_SUBJECT_DISABLE_CRL_PROP_ID;
pub const XCN_CERT_CEP_PROP_ID = CERTENROLL_PROPERTYID.CERT_CEP_PROP_ID;
pub const XCN_CERT_SIGN_HASH_CNG_ALG_PROP_ID = CERTENROLL_PROPERTYID.CERT_SIGN_HASH_CNG_ALG_PROP_ID;
pub const XCN_CERT_SCARD_PIN_ID_PROP_ID = CERTENROLL_PROPERTYID.CERT_SCARD_PIN_ID_PROP_ID;
pub const XCN_CERT_SCARD_PIN_INFO_PROP_ID = CERTENROLL_PROPERTYID.CERT_SCARD_PIN_INFO_PROP_ID;
pub const XCN_CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID = CERTENROLL_PROPERTYID.CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID;
pub const XCN_CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = CERTENROLL_PROPERTYID.CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID;
pub const XCN_CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID = CERTENROLL_PROPERTYID.CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID;
pub const XCN_CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID = CERTENROLL_PROPERTYID.CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID;
pub const XCN_CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = CERTENROLL_PROPERTYID.CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID;
pub const XCN_CERT_NO_EXPIRE_NOTIFICATION_PROP_ID = CERTENROLL_PROPERTYID.CERT_NO_EXPIRE_NOTIFICATION_PROP_ID;
pub const XCN_CERT_AUTH_ROOT_SHA256_HASH_PROP_ID = CERTENROLL_PROPERTYID.CERT_AUTH_ROOT_SHA256_HASH_PROP_ID;
pub const XCN_CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID = CERTENROLL_PROPERTYID.CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID;
pub const XCN_CERT_HCRYPTPROV_TRANSFER_PROP_ID = CERTENROLL_PROPERTYID.CERT_HCRYPTPROV_TRANSFER_PROP_ID;
pub const XCN_CERT_SMART_CARD_READER_PROP_ID = CERTENROLL_PROPERTYID.CERT_SMART_CARD_READER_PROP_ID;
pub const XCN_CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID = CERTENROLL_PROPERTYID.CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID;
pub const XCN_CERT_KEY_REPAIR_ATTEMPTED_PROP_ID = CERTENROLL_PROPERTYID.CERT_KEY_REPAIR_ATTEMPTED_PROP_ID;
pub const XCN_CERT_DISALLOWED_FILETIME_PROP_ID = CERTENROLL_PROPERTYID.CERT_DISALLOWED_FILETIME_PROP_ID;
pub const XCN_CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID = CERTENROLL_PROPERTYID.CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID;
pub const XCN_CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID = CERTENROLL_PROPERTYID.CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID;
pub const XCN_CERT_SHA256_HASH_PROP_ID = CERTENROLL_PROPERTYID.CERT_SHA256_HASH_PROP_ID;
pub const XCN_CERT_SCEP_SERVER_CERTS_PROP_ID = CERTENROLL_PROPERTYID.CERT_SCEP_SERVER_CERTS_PROP_ID;
pub const XCN_CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID = CERTENROLL_PROPERTYID.CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID;
pub const XCN_CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID = CERTENROLL_PROPERTYID.CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID;
pub const XCN_CERT_SCEP_CA_CERT_PROP_ID = CERTENROLL_PROPERTYID.CERT_SCEP_CA_CERT_PROP_ID;
pub const XCN_CERT_SCEP_SIGNER_CERT_PROP_ID = CERTENROLL_PROPERTYID.CERT_SCEP_SIGNER_CERT_PROP_ID;
pub const XCN_CERT_SCEP_NONCE_PROP_ID = CERTENROLL_PROPERTYID.CERT_SCEP_NONCE_PROP_ID;
pub const XCN_CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID = CERTENROLL_PROPERTYID.CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID;
pub const XCN_CERT_SCEP_FLAGS_PROP_ID = CERTENROLL_PROPERTYID.CERT_SCEP_FLAGS_PROP_ID;
pub const XCN_CERT_SCEP_GUID_PROP_ID = CERTENROLL_PROPERTYID.CERT_SCEP_GUID_PROP_ID;
pub const XCN_CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID = CERTENROLL_PROPERTYID.CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID;
pub const XCN_CERT_ISOLATED_KEY_PROP_ID = CERTENROLL_PROPERTYID.CERT_ISOLATED_KEY_PROP_ID;
pub const XCN_CERT_SERIAL_CHAIN_PROP_ID = CERTENROLL_PROPERTYID.CERT_SERIAL_CHAIN_PROP_ID;
pub const XCN_CERT_KEY_CLASSIFICATION_PROP_ID = CERTENROLL_PROPERTYID.CERT_KEY_CLASSIFICATION_PROP_ID;
pub const XCN_CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID = CERTENROLL_PROPERTYID.CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID;
pub const XCN_CERT_NONCOMPLIANT_ROOT_URL_PROP_ID = CERTENROLL_PROPERTYID.CERT_NONCOMPLIANT_ROOT_URL_PROP_ID;
pub const XCN_CERT_PIN_SHA256_HASH_PROP_ID = CERTENROLL_PROPERTYID.CERT_PIN_SHA256_HASH_PROP_ID;
pub const XCN_CERT_CLR_DELETE_KEY_PROP_ID = CERTENROLL_PROPERTYID.CERT_CLR_DELETE_KEY_PROP_ID;
pub const XCN_CERT_NOT_BEFORE_FILETIME_PROP_ID = CERTENROLL_PROPERTYID.CERT_NOT_BEFORE_FILETIME_PROP_ID;
pub const XCN_CERT_CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID = CERTENROLL_PROPERTYID.CERT_CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID;
pub const XCN_CERT_FIRST_RESERVED_PROP_ID = CERTENROLL_PROPERTYID.CERT_FIRST_RESERVED_PROP_ID;
pub const XCN_CERT_LAST_RESERVED_PROP_ID = CERTENROLL_PROPERTYID.CERT_LAST_RESERVED_PROP_ID;
pub const XCN_CERT_FIRST_USER_PROP_ID = CERTENROLL_PROPERTYID.CERT_FIRST_USER_PROP_ID;
pub const XCN_CERT_LAST_USER_PROP_ID = CERTENROLL_PROPERTYID.CERT_LAST_USER_PROP_ID;
pub const XCN_CERT_STORE_LOCALIZED_NAME_PROP_ID = CERTENROLL_PROPERTYID.CERT_STORE_LOCALIZED_NAME_PROP_ID;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertProperty_Value = Guid.initString("728ab32e-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertProperty = &IID_ICertProperty_Value;
pub const ICertProperty = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        InitializeFromCertificate: *const fn(
            self: *const ICertProperty,
            MachineContext: i16,
            Encoding: EncodingType,
            strCertificate: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn(
            self: *const ICertProperty,
            Encoding: EncodingType,
            strEncodedData: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PropertyId: *const fn(
            self: *const ICertProperty,
            pValue: ?*CERTENROLL_PROPERTYID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PropertyId: *const fn(
            self: *const ICertProperty,
            Value: CERTENROLL_PROPERTYID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RawData: *const fn(
            self: *const ICertProperty,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveFromCertificate: *const fn(
            self: *const ICertProperty,
            MachineContext: i16,
            Encoding: EncodingType,
            strCertificate: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValueOnCertificate: *const fn(
            self: *const ICertProperty,
            MachineContext: i16,
            Encoding: EncodingType,
            strCertificate: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeFromCertificate(self: *const ICertProperty, MachineContext: i16, Encoding: EncodingType, strCertificate: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromCertificate(self, MachineContext, Encoding, strCertificate);
    }
    pub fn InitializeDecode(self: *const ICertProperty, Encoding: EncodingType, strEncodedData: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeDecode(self, Encoding, strEncodedData);
    }
    pub fn get_PropertyId(self: *const ICertProperty, pValue: ?*CERTENROLL_PROPERTYID) callconv(.Inline) HRESULT {
        return self.vtable.get_PropertyId(self, pValue);
    }
    pub fn put_PropertyId(self: *const ICertProperty, Value: CERTENROLL_PROPERTYID) callconv(.Inline) HRESULT {
        return self.vtable.put_PropertyId(self, Value);
    }
    pub fn get_RawData(self: *const ICertProperty, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RawData(self, Encoding, pValue);
    }
    pub fn RemoveFromCertificate(self: *const ICertProperty, MachineContext: i16, Encoding: EncodingType, strCertificate: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.RemoveFromCertificate(self, MachineContext, Encoding, strCertificate);
    }
    pub fn SetValueOnCertificate(self: *const ICertProperty, MachineContext: i16, Encoding: EncodingType, strCertificate: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.SetValueOnCertificate(self, MachineContext, Encoding, strCertificate);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertProperties_Value = Guid.initString("728ab32f-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertProperties = &IID_ICertProperties_Value;
pub const ICertProperties = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: *const fn(
            self: *const ICertProperties,
            Index: i32,
            pVal: ?*?*ICertProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const ICertProperties,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const ICertProperties,
            pVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const ICertProperties,
            pVal: ?*ICertProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const ICertProperties,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn(
            self: *const ICertProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromCertificate: *const fn(
            self: *const ICertProperties,
            MachineContext: i16,
            Encoding: EncodingType,
            strCertificate: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ItemByIndex(self: *const ICertProperties, Index: i32, pVal: ?*?*ICertProperty) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByIndex(self, Index, pVal);
    }
    pub fn get_Count(self: *const ICertProperties, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
    pub fn get__NewEnum(self: *const ICertProperties, pVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, pVal);
    }
    pub fn Add(self: *const ICertProperties, pVal: ?*ICertProperty) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, pVal);
    }
    pub fn Remove(self: *const ICertProperties, Index: i32) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, Index);
    }
    pub fn Clear(self: *const ICertProperties) callconv(.Inline) HRESULT {
        return self.vtable.Clear(self);
    }
    pub fn InitializeFromCertificate(self: *const ICertProperties, MachineContext: i16, Encoding: EncodingType, strCertificate: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromCertificate(self, MachineContext, Encoding, strCertificate);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertPropertyFriendlyName_Value = Guid.initString("728ab330-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertPropertyFriendlyName = &IID_ICertPropertyFriendlyName_Value;
pub const ICertPropertyFriendlyName = extern union {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: *const fn(
            self: *const ICertPropertyFriendlyName,
            strFriendlyName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FriendlyName: *const fn(
            self: *const ICertPropertyFriendlyName,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertProperty: ICertProperty,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const ICertPropertyFriendlyName, strFriendlyName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, strFriendlyName);
    }
    pub fn get_FriendlyName(self: *const ICertPropertyFriendlyName, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_FriendlyName(self, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertPropertyDescription_Value = Guid.initString("728ab331-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertPropertyDescription = &IID_ICertPropertyDescription_Value;
pub const ICertPropertyDescription = extern union {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: *const fn(
            self: *const ICertPropertyDescription,
            strDescription: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn(
            self: *const ICertPropertyDescription,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertProperty: ICertProperty,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const ICertPropertyDescription, strDescription: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, strDescription);
    }
    pub fn get_Description(self: *const ICertPropertyDescription, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Description(self, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertPropertyAutoEnroll_Value = Guid.initString("728ab332-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertPropertyAutoEnroll = &IID_ICertPropertyAutoEnroll_Value;
pub const ICertPropertyAutoEnroll = extern union {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: *const fn(
            self: *const ICertPropertyAutoEnroll,
            strTemplateName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TemplateName: *const fn(
            self: *const ICertPropertyAutoEnroll,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertProperty: ICertProperty,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const ICertPropertyAutoEnroll, strTemplateName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, strTemplateName);
    }
    pub fn get_TemplateName(self: *const ICertPropertyAutoEnroll, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_TemplateName(self, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertPropertyRequestOriginator_Value = Guid.initString("728ab333-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertPropertyRequestOriginator = &IID_ICertPropertyRequestOriginator_Value;
pub const ICertPropertyRequestOriginator = extern union {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: *const fn(
            self: *const ICertPropertyRequestOriginator,
            strRequestOriginator: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromLocalRequestOriginator: *const fn(
            self: *const ICertPropertyRequestOriginator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestOriginator: *const fn(
            self: *const ICertPropertyRequestOriginator,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertProperty: ICertProperty,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const ICertPropertyRequestOriginator, strRequestOriginator: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, strRequestOriginator);
    }
    pub fn InitializeFromLocalRequestOriginator(self: *const ICertPropertyRequestOriginator) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromLocalRequestOriginator(self);
    }
    pub fn get_RequestOriginator(self: *const ICertPropertyRequestOriginator, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RequestOriginator(self, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertPropertySHA1Hash_Value = Guid.initString("728ab334-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertPropertySHA1Hash = &IID_ICertPropertySHA1Hash_Value;
pub const ICertPropertySHA1Hash = extern union {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: *const fn(
            self: *const ICertPropertySHA1Hash,
            Encoding: EncodingType,
            strRenewalValue: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SHA1Hash: *const fn(
            self: *const ICertPropertySHA1Hash,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertProperty: ICertProperty,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const ICertPropertySHA1Hash, Encoding: EncodingType, strRenewalValue: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, Encoding, strRenewalValue);
    }
    pub fn get_SHA1Hash(self: *const ICertPropertySHA1Hash, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_SHA1Hash(self, Encoding, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertPropertyKeyProvInfo_Value = Guid.initString("728ab336-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertPropertyKeyProvInfo = &IID_ICertPropertyKeyProvInfo_Value;
pub const ICertPropertyKeyProvInfo = extern union {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: *const fn(
            self: *const ICertPropertyKeyProvInfo,
            pValue: ?*IX509PrivateKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivateKey: *const fn(
            self: *const ICertPropertyKeyProvInfo,
            ppValue: ?*?*IX509PrivateKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertProperty: ICertProperty,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const ICertPropertyKeyProvInfo, pValue: ?*IX509PrivateKey) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, pValue);
    }
    pub fn get_PrivateKey(self: *const ICertPropertyKeyProvInfo, ppValue: ?*?*IX509PrivateKey) callconv(.Inline) HRESULT {
        return self.vtable.get_PrivateKey(self, ppValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertPropertyArchived_Value = Guid.initString("728ab337-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertPropertyArchived = &IID_ICertPropertyArchived_Value;
pub const ICertPropertyArchived = extern union {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: *const fn(
            self: *const ICertPropertyArchived,
            ArchivedValue: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Archived: *const fn(
            self: *const ICertPropertyArchived,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertProperty: ICertProperty,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const ICertPropertyArchived, ArchivedValue: i16) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, ArchivedValue);
    }
    pub fn get_Archived(self: *const ICertPropertyArchived, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Archived(self, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertPropertyBackedUp_Value = Guid.initString("728ab338-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertPropertyBackedUp = &IID_ICertPropertyBackedUp_Value;
pub const ICertPropertyBackedUp = extern union {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        InitializeFromCurrentTime: *const fn(
            self: *const ICertPropertyBackedUp,
            BackedUpValue: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: *const fn(
            self: *const ICertPropertyBackedUp,
            BackedUpValue: i16,
            Date: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BackedUpValue: *const fn(
            self: *const ICertPropertyBackedUp,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BackedUpTime: *const fn(
            self: *const ICertPropertyBackedUp,
            pDate: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertProperty: ICertProperty,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeFromCurrentTime(self: *const ICertPropertyBackedUp, BackedUpValue: i16) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromCurrentTime(self, BackedUpValue);
    }
    pub fn Initialize(self: *const ICertPropertyBackedUp, BackedUpValue: i16, Date: f64) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, BackedUpValue, Date);
    }
    pub fn get_BackedUpValue(self: *const ICertPropertyBackedUp, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_BackedUpValue(self, pValue);
    }
    pub fn get_BackedUpTime(self: *const ICertPropertyBackedUp, pDate: ?*f64) callconv(.Inline) HRESULT {
        return self.vtable.get_BackedUpTime(self, pDate);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertPropertyEnrollment_Value = Guid.initString("728ab339-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertPropertyEnrollment = &IID_ICertPropertyEnrollment_Value;
pub const ICertPropertyEnrollment = extern union {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: *const fn(
            self: *const ICertPropertyEnrollment,
            RequestId: i32,
            strCADnsName: ?BSTR,
            strCAName: ?BSTR,
            strFriendlyName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestId: *const fn(
            self: *const ICertPropertyEnrollment,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CADnsName: *const fn(
            self: *const ICertPropertyEnrollment,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CAName: *const fn(
            self: *const ICertPropertyEnrollment,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FriendlyName: *const fn(
            self: *const ICertPropertyEnrollment,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertProperty: ICertProperty,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const ICertPropertyEnrollment, RequestId: i32, strCADnsName: ?BSTR, strCAName: ?BSTR, strFriendlyName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, RequestId, strCADnsName, strCAName, strFriendlyName);
    }
    pub fn get_RequestId(self: *const ICertPropertyEnrollment, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_RequestId(self, pValue);
    }
    pub fn get_CADnsName(self: *const ICertPropertyEnrollment, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_CADnsName(self, pValue);
    }
    pub fn get_CAName(self: *const ICertPropertyEnrollment, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_CAName(self, pValue);
    }
    pub fn get_FriendlyName(self: *const ICertPropertyEnrollment, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_FriendlyName(self, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertPropertyRenewal_Value = Guid.initString("728ab33a-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertPropertyRenewal = &IID_ICertPropertyRenewal_Value;
pub const ICertPropertyRenewal = extern union {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: *const fn(
            self: *const ICertPropertyRenewal,
            Encoding: EncodingType,
            strRenewalValue: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromCertificateHash: *const fn(
            self: *const ICertPropertyRenewal,
            MachineContext: i16,
            Encoding: EncodingType,
            strCertificate: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Renewal: *const fn(
            self: *const ICertPropertyRenewal,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertProperty: ICertProperty,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const ICertPropertyRenewal, Encoding: EncodingType, strRenewalValue: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, Encoding, strRenewalValue);
    }
    pub fn InitializeFromCertificateHash(self: *const ICertPropertyRenewal, MachineContext: i16, Encoding: EncodingType, strCertificate: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromCertificateHash(self, MachineContext, Encoding, strCertificate);
    }
    pub fn get_Renewal(self: *const ICertPropertyRenewal, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Renewal(self, Encoding, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertPropertyArchivedKeyHash_Value = Guid.initString("728ab33b-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertPropertyArchivedKeyHash = &IID_ICertPropertyArchivedKeyHash_Value;
pub const ICertPropertyArchivedKeyHash = extern union {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: *const fn(
            self: *const ICertPropertyArchivedKeyHash,
            Encoding: EncodingType,
            strArchivedKeyHashValue: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ArchivedKeyHash: *const fn(
            self: *const ICertPropertyArchivedKeyHash,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertProperty: ICertProperty,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const ICertPropertyArchivedKeyHash, Encoding: EncodingType, strArchivedKeyHashValue: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, Encoding, strArchivedKeyHashValue);
    }
    pub fn get_ArchivedKeyHash(self: *const ICertPropertyArchivedKeyHash, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ArchivedKeyHash(self, Encoding, pValue);
    }
};

pub const EnrollmentPolicyServerPropertyFlags = enum(i32) {
    None = 0,
    PolicyServer = 1,
};
pub const DefaultNone = EnrollmentPolicyServerPropertyFlags.None;
pub const DefaultPolicyServer = EnrollmentPolicyServerPropertyFlags.PolicyServer;

pub const PolicyServerUrlFlags = enum(i32) {
    None = 0,
    LocationGroupPolicy = 1,
    LocationRegistry = 2,
    UseClientId = 4,
    AutoEnrollmentEnabled = 16,
    AllowUnTrustedCA = 32,
};
pub const PsfNone = PolicyServerUrlFlags.None;
pub const PsfLocationGroupPolicy = PolicyServerUrlFlags.LocationGroupPolicy;
pub const PsfLocationRegistry = PolicyServerUrlFlags.LocationRegistry;
pub const PsfUseClientId = PolicyServerUrlFlags.UseClientId;
pub const PsfAutoEnrollmentEnabled = PolicyServerUrlFlags.AutoEnrollmentEnabled;
pub const PsfAllowUnTrustedCA = PolicyServerUrlFlags.AllowUnTrustedCA;

// TODO: this type is limited to platform 'windows6.1'
const IID_ICertPropertyEnrollmentPolicyServer_Value = Guid.initString("728ab34a-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertPropertyEnrollmentPolicyServer = &IID_ICertPropertyEnrollmentPolicyServer_Value;
pub const ICertPropertyEnrollmentPolicyServer = extern union {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: *const fn(
            self: *const ICertPropertyEnrollmentPolicyServer,
            PropertyFlags: EnrollmentPolicyServerPropertyFlags,
            AuthFlags: X509EnrollmentAuthFlags,
            EnrollmentServerAuthFlags: X509EnrollmentAuthFlags,
            UrlFlags: PolicyServerUrlFlags,
            strRequestId: ?BSTR,
            strUrl: ?BSTR,
            strId: ?BSTR,
            strEnrollmentServerUrl: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicyServerUrl: *const fn(
            self: *const ICertPropertyEnrollmentPolicyServer,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicyServerId: *const fn(
            self: *const ICertPropertyEnrollmentPolicyServer,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnrollmentServerUrl: *const fn(
            self: *const ICertPropertyEnrollmentPolicyServer,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestIdString: *const fn(
            self: *const ICertPropertyEnrollmentPolicyServer,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyFlags: *const fn(
            self: *const ICertPropertyEnrollmentPolicyServer,
            pValue: ?*EnrollmentPolicyServerPropertyFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUrlFlags: *const fn(
            self: *const ICertPropertyEnrollmentPolicyServer,
            pValue: ?*PolicyServerUrlFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAuthentication: *const fn(
            self: *const ICertPropertyEnrollmentPolicyServer,
            pValue: ?*X509EnrollmentAuthFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnrollmentServerAuthentication: *const fn(
            self: *const ICertPropertyEnrollmentPolicyServer,
            pValue: ?*X509EnrollmentAuthFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertProperty: ICertProperty,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const ICertPropertyEnrollmentPolicyServer, PropertyFlags: EnrollmentPolicyServerPropertyFlags, AuthFlags: X509EnrollmentAuthFlags, EnrollmentServerAuthFlags: X509EnrollmentAuthFlags, UrlFlags: PolicyServerUrlFlags, strRequestId: ?BSTR, strUrl: ?BSTR, strId: ?BSTR, strEnrollmentServerUrl: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, PropertyFlags, AuthFlags, EnrollmentServerAuthFlags, UrlFlags, strRequestId, strUrl, strId, strEnrollmentServerUrl);
    }
    pub fn GetPolicyServerUrl(self: *const ICertPropertyEnrollmentPolicyServer, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetPolicyServerUrl(self, pValue);
    }
    pub fn GetPolicyServerId(self: *const ICertPropertyEnrollmentPolicyServer, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetPolicyServerId(self, pValue);
    }
    pub fn GetEnrollmentServerUrl(self: *const ICertPropertyEnrollmentPolicyServer, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetEnrollmentServerUrl(self, pValue);
    }
    pub fn GetRequestIdString(self: *const ICertPropertyEnrollmentPolicyServer, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetRequestIdString(self, pValue);
    }
    pub fn GetPropertyFlags(self: *const ICertPropertyEnrollmentPolicyServer, pValue: ?*EnrollmentPolicyServerPropertyFlags) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyFlags(self, pValue);
    }
    pub fn GetUrlFlags(self: *const ICertPropertyEnrollmentPolicyServer, pValue: ?*PolicyServerUrlFlags) callconv(.Inline) HRESULT {
        return self.vtable.GetUrlFlags(self, pValue);
    }
    pub fn GetAuthentication(self: *const ICertPropertyEnrollmentPolicyServer, pValue: ?*X509EnrollmentAuthFlags) callconv(.Inline) HRESULT {
        return self.vtable.GetAuthentication(self, pValue);
    }
    pub fn GetEnrollmentServerAuthentication(self: *const ICertPropertyEnrollmentPolicyServer, pValue: ?*X509EnrollmentAuthFlags) callconv(.Inline) HRESULT {
        return self.vtable.GetEnrollmentServerAuthentication(self, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509SignatureInformation_Value = Guid.initString("728ab33c-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509SignatureInformation = &IID_IX509SignatureInformation_Value;
pub const IX509SignatureInformation = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HashAlgorithm: *const fn(
            self: *const IX509SignatureInformation,
            ppValue: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HashAlgorithm: *const fn(
            self: *const IX509SignatureInformation,
            pValue: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PublicKeyAlgorithm: *const fn(
            self: *const IX509SignatureInformation,
            ppValue: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PublicKeyAlgorithm: *const fn(
            self: *const IX509SignatureInformation,
            pValue: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Parameters: *const fn(
            self: *const IX509SignatureInformation,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Parameters: *const fn(
            self: *const IX509SignatureInformation,
            Encoding: EncodingType,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AlternateSignatureAlgorithm: *const fn(
            self: *const IX509SignatureInformation,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AlternateSignatureAlgorithm: *const fn(
            self: *const IX509SignatureInformation,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AlternateSignatureAlgorithmSet: *const fn(
            self: *const IX509SignatureInformation,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NullSigned: *const fn(
            self: *const IX509SignatureInformation,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NullSigned: *const fn(
            self: *const IX509SignatureInformation,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignatureAlgorithm: *const fn(
            self: *const IX509SignatureInformation,
            Pkcs7Signature: i16,
            SignatureKey: i16,
            ppValue: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultValues: *const fn(
            self: *const IX509SignatureInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_HashAlgorithm(self: *const IX509SignatureInformation, ppValue: ?*?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.get_HashAlgorithm(self, ppValue);
    }
    pub fn put_HashAlgorithm(self: *const IX509SignatureInformation, pValue: ?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.put_HashAlgorithm(self, pValue);
    }
    pub fn get_PublicKeyAlgorithm(self: *const IX509SignatureInformation, ppValue: ?*?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.get_PublicKeyAlgorithm(self, ppValue);
    }
    pub fn put_PublicKeyAlgorithm(self: *const IX509SignatureInformation, pValue: ?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.put_PublicKeyAlgorithm(self, pValue);
    }
    pub fn get_Parameters(self: *const IX509SignatureInformation, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Parameters(self, Encoding, pValue);
    }
    pub fn put_Parameters(self: *const IX509SignatureInformation, Encoding: EncodingType, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Parameters(self, Encoding, Value);
    }
    pub fn get_AlternateSignatureAlgorithm(self: *const IX509SignatureInformation, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_AlternateSignatureAlgorithm(self, pValue);
    }
    pub fn put_AlternateSignatureAlgorithm(self: *const IX509SignatureInformation, Value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_AlternateSignatureAlgorithm(self, Value);
    }
    pub fn get_AlternateSignatureAlgorithmSet(self: *const IX509SignatureInformation, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_AlternateSignatureAlgorithmSet(self, pValue);
    }
    pub fn get_NullSigned(self: *const IX509SignatureInformation, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_NullSigned(self, pValue);
    }
    pub fn put_NullSigned(self: *const IX509SignatureInformation, Value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_NullSigned(self, Value);
    }
    pub fn GetSignatureAlgorithm(self: *const IX509SignatureInformation, Pkcs7Signature: i16, SignatureKey: i16, ppValue: ?*?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.GetSignatureAlgorithm(self, Pkcs7Signature, SignatureKey, ppValue);
    }
    pub fn SetDefaultValues(self: *const IX509SignatureInformation) callconv(.Inline) HRESULT {
        return self.vtable.SetDefaultValues(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISignerCertificate_Value = Guid.initString("728ab33d-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ISignerCertificate = &IID_ISignerCertificate_Value;
pub const ISignerCertificate = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn(
            self: *const ISignerCertificate,
            MachineContext: i16,
            VerifyType: X509PrivateKeyVerify,
            Encoding: EncodingType,
            strCertificate: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Certificate: *const fn(
            self: *const ISignerCertificate,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivateKey: *const fn(
            self: *const ISignerCertificate,
            ppValue: ?*?*IX509PrivateKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Silent: *const fn(
            self: *const ISignerCertificate,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Silent: *const fn(
            self: *const ISignerCertificate,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ParentWindow: *const fn(
            self: *const ISignerCertificate,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ParentWindow: *const fn(
            self: *const ISignerCertificate,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UIContextMessage: *const fn(
            self: *const ISignerCertificate,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UIContextMessage: *const fn(
            self: *const ISignerCertificate,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Pin: *const fn(
            self: *const ISignerCertificate,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SignatureInformation: *const fn(
            self: *const ISignerCertificate,
            ppValue: ?*?*IX509SignatureInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const ISignerCertificate, MachineContext: i16, VerifyType: X509PrivateKeyVerify, Encoding: EncodingType, strCertificate: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, MachineContext, VerifyType, Encoding, strCertificate);
    }
    pub fn get_Certificate(self: *const ISignerCertificate, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Certificate(self, Encoding, pValue);
    }
    pub fn get_PrivateKey(self: *const ISignerCertificate, ppValue: ?*?*IX509PrivateKey) callconv(.Inline) HRESULT {
        return self.vtable.get_PrivateKey(self, ppValue);
    }
    pub fn get_Silent(self: *const ISignerCertificate, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Silent(self, pValue);
    }
    pub fn put_Silent(self: *const ISignerCertificate, Value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_Silent(self, Value);
    }
    pub fn get_ParentWindow(self: *const ISignerCertificate, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ParentWindow(self, pValue);
    }
    pub fn put_ParentWindow(self: *const ISignerCertificate, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_ParentWindow(self, Value);
    }
    pub fn get_UIContextMessage(self: *const ISignerCertificate, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_UIContextMessage(self, pValue);
    }
    pub fn put_UIContextMessage(self: *const ISignerCertificate, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_UIContextMessage(self, Value);
    }
    pub fn put_Pin(self: *const ISignerCertificate, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Pin(self, Value);
    }
    pub fn get_SignatureInformation(self: *const ISignerCertificate, ppValue: ?*?*IX509SignatureInformation) callconv(.Inline) HRESULT {
        return self.vtable.get_SignatureInformation(self, ppValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISignerCertificates_Value = Guid.initString("728ab33e-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ISignerCertificates = &IID_ISignerCertificates_Value;
pub const ISignerCertificates = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: *const fn(
            self: *const ISignerCertificates,
            Index: i32,
            pVal: ?*?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const ISignerCertificates,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const ISignerCertificates,
            pVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const ISignerCertificates,
            pVal: ?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const ISignerCertificates,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn(
            self: *const ISignerCertificates,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Find: *const fn(
            self: *const ISignerCertificates,
            pSignerCert: ?*ISignerCertificate,
            piSignerCert: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ItemByIndex(self: *const ISignerCertificates, Index: i32, pVal: ?*?*ISignerCertificate) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByIndex(self, Index, pVal);
    }
    pub fn get_Count(self: *const ISignerCertificates, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
    pub fn get__NewEnum(self: *const ISignerCertificates, pVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, pVal);
    }
    pub fn Add(self: *const ISignerCertificates, pVal: ?*ISignerCertificate) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, pVal);
    }
    pub fn Remove(self: *const ISignerCertificates, Index: i32) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, Index);
    }
    pub fn Clear(self: *const ISignerCertificates) callconv(.Inline) HRESULT {
        return self.vtable.Clear(self);
    }
    pub fn Find(self: *const ISignerCertificates, pSignerCert: ?*ISignerCertificate, piSignerCert: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.Find(self, pSignerCert, piSignerCert);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509NameValuePair_Value = Guid.initString("728ab33f-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509NameValuePair = &IID_IX509NameValuePair_Value;
pub const IX509NameValuePair = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn(
            self: *const IX509NameValuePair,
            strName: ?BSTR,
            strValue: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn(
            self: *const IX509NameValuePair,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn(
            self: *const IX509NameValuePair,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IX509NameValuePair, strName: ?BSTR, strValue: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, strName, strValue);
    }
    pub fn get_Value(self: *const IX509NameValuePair, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Value(self, pValue);
    }
    pub fn get_Name(self: *const IX509NameValuePair, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Name(self, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509NameValuePairs_Value = Guid.initString("728ab340-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509NameValuePairs = &IID_IX509NameValuePairs_Value;
pub const IX509NameValuePairs = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: *const fn(
            self: *const IX509NameValuePairs,
            Index: i32,
            pVal: ?*?*IX509NameValuePair,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IX509NameValuePairs,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const IX509NameValuePairs,
            pVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const IX509NameValuePairs,
            pVal: ?*IX509NameValuePair,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const IX509NameValuePairs,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn(
            self: *const IX509NameValuePairs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ItemByIndex(self: *const IX509NameValuePairs, Index: i32, pVal: ?*?*IX509NameValuePair) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByIndex(self, Index, pVal);
    }
    pub fn get_Count(self: *const IX509NameValuePairs, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
    pub fn get__NewEnum(self: *const IX509NameValuePairs, pVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, pVal);
    }
    pub fn Add(self: *const IX509NameValuePairs, pVal: ?*IX509NameValuePair) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, pVal);
    }
    pub fn Remove(self: *const IX509NameValuePairs, Index: i32) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, Index);
    }
    pub fn Clear(self: *const IX509NameValuePairs) callconv(.Inline) HRESULT {
        return self.vtable.Clear(self);
    }
};

pub const EnrollmentTemplateProperty = enum(i32) {
    CommonName = 1,
    FriendlyName = 2,
    EKUs = 3,
    CryptoProviders = 4,
    MajorRevision = 5,
    Description = 6,
    KeySpec = 7,
    SchemaVersion = 8,
    MinorRevision = 9,
    RASignatureCount = 10,
    MinimumKeySize = 11,
    OID = 12,
    Supersede = 13,
    RACertificatePolicies = 14,
    RAEKUs = 15,
    CertificatePolicies = 16,
    V1ApplicationPolicy = 17,
    AsymmetricAlgorithm = 18,
    KeySecurityDescriptor = 19,
    SymmetricAlgorithm = 20,
    SymmetricKeyLength = 21,
    HashAlgorithm = 22,
    KeyUsage = 23,
    EnrollmentFlags = 24,
    SubjectNameFlags = 25,
    PrivateKeyFlags = 26,
    GeneralFlags = 27,
    SecurityDescriptor = 28,
    Extensions = 29,
    ValidityPeriod = 30,
    RenewalPeriod = 31,
};
pub const TemplatePropCommonName = EnrollmentTemplateProperty.CommonName;
pub const TemplatePropFriendlyName = EnrollmentTemplateProperty.FriendlyName;
pub const TemplatePropEKUs = EnrollmentTemplateProperty.EKUs;
pub const TemplatePropCryptoProviders = EnrollmentTemplateProperty.CryptoProviders;
pub const TemplatePropMajorRevision = EnrollmentTemplateProperty.MajorRevision;
pub const TemplatePropDescription = EnrollmentTemplateProperty.Description;
pub const TemplatePropKeySpec = EnrollmentTemplateProperty.KeySpec;
pub const TemplatePropSchemaVersion = EnrollmentTemplateProperty.SchemaVersion;
pub const TemplatePropMinorRevision = EnrollmentTemplateProperty.MinorRevision;
pub const TemplatePropRASignatureCount = EnrollmentTemplateProperty.RASignatureCount;
pub const TemplatePropMinimumKeySize = EnrollmentTemplateProperty.MinimumKeySize;
pub const TemplatePropOID = EnrollmentTemplateProperty.OID;
pub const TemplatePropSupersede = EnrollmentTemplateProperty.Supersede;
pub const TemplatePropRACertificatePolicies = EnrollmentTemplateProperty.RACertificatePolicies;
pub const TemplatePropRAEKUs = EnrollmentTemplateProperty.RAEKUs;
pub const TemplatePropCertificatePolicies = EnrollmentTemplateProperty.CertificatePolicies;
pub const TemplatePropV1ApplicationPolicy = EnrollmentTemplateProperty.V1ApplicationPolicy;
pub const TemplatePropAsymmetricAlgorithm = EnrollmentTemplateProperty.AsymmetricAlgorithm;
pub const TemplatePropKeySecurityDescriptor = EnrollmentTemplateProperty.KeySecurityDescriptor;
pub const TemplatePropSymmetricAlgorithm = EnrollmentTemplateProperty.SymmetricAlgorithm;
pub const TemplatePropSymmetricKeyLength = EnrollmentTemplateProperty.SymmetricKeyLength;
pub const TemplatePropHashAlgorithm = EnrollmentTemplateProperty.HashAlgorithm;
pub const TemplatePropKeyUsage = EnrollmentTemplateProperty.KeyUsage;
pub const TemplatePropEnrollmentFlags = EnrollmentTemplateProperty.EnrollmentFlags;
pub const TemplatePropSubjectNameFlags = EnrollmentTemplateProperty.SubjectNameFlags;
pub const TemplatePropPrivateKeyFlags = EnrollmentTemplateProperty.PrivateKeyFlags;
pub const TemplatePropGeneralFlags = EnrollmentTemplateProperty.GeneralFlags;
pub const TemplatePropSecurityDescriptor = EnrollmentTemplateProperty.SecurityDescriptor;
pub const TemplatePropExtensions = EnrollmentTemplateProperty.Extensions;
pub const TemplatePropValidityPeriod = EnrollmentTemplateProperty.ValidityPeriod;
pub const TemplatePropRenewalPeriod = EnrollmentTemplateProperty.RenewalPeriod;

// TODO: this type is limited to platform 'windows6.1'
const IID_IX509CertificateTemplate_Value = Guid.initString("54244a13-555a-4e22-896d-1b0e52f76406");
pub const IID_IX509CertificateTemplate = &IID_IX509CertificateTemplate_Value;
pub const IX509CertificateTemplate = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Property: *const fn(
            self: *const IX509CertificateTemplate,
            property: EnrollmentTemplateProperty,
            pValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Property(self: *const IX509CertificateTemplate, property: EnrollmentTemplateProperty, pValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Property(self, property, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IX509CertificateTemplates_Value = Guid.initString("13b79003-2181-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateTemplates = &IID_IX509CertificateTemplates_Value;
pub const IX509CertificateTemplates = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: *const fn(
            self: *const IX509CertificateTemplates,
            Index: i32,
            pVal: ?*?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IX509CertificateTemplates,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const IX509CertificateTemplates,
            pVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const IX509CertificateTemplates,
            pVal: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const IX509CertificateTemplates,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn(
            self: *const IX509CertificateTemplates,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ItemByName: *const fn(
            self: *const IX509CertificateTemplates,
            bstrName: ?BSTR,
            ppValue: ?*?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ItemByOid: *const fn(
            self: *const IX509CertificateTemplates,
            pOid: ?*IObjectId,
            ppValue: ?*?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ItemByIndex(self: *const IX509CertificateTemplates, Index: i32, pVal: ?*?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByIndex(self, Index, pVal);
    }
    pub fn get_Count(self: *const IX509CertificateTemplates, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
    pub fn get__NewEnum(self: *const IX509CertificateTemplates, pVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, pVal);
    }
    pub fn Add(self: *const IX509CertificateTemplates, pVal: ?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, pVal);
    }
    pub fn Remove(self: *const IX509CertificateTemplates, Index: i32) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, Index);
    }
    pub fn Clear(self: *const IX509CertificateTemplates) callconv(.Inline) HRESULT {
        return self.vtable.Clear(self);
    }
    pub fn get_ItemByName(self: *const IX509CertificateTemplates, bstrName: ?BSTR, ppValue: ?*?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByName(self, bstrName, ppValue);
    }
    pub fn get_ItemByOid(self: *const IX509CertificateTemplates, pOid: ?*IObjectId, ppValue: ?*?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByOid(self, pOid, ppValue);
    }
};

pub const CommitTemplateFlags = enum(i32) {
    SaveTemplateGenerateOID = 1,
    SaveTemplateUseCurrentOID = 2,
    SaveTemplateOverwrite = 3,
    DeleteTemplate = 4,
};
pub const CommitFlagSaveTemplateGenerateOID = CommitTemplateFlags.SaveTemplateGenerateOID;
pub const CommitFlagSaveTemplateUseCurrentOID = CommitTemplateFlags.SaveTemplateUseCurrentOID;
pub const CommitFlagSaveTemplateOverwrite = CommitTemplateFlags.SaveTemplateOverwrite;
pub const CommitFlagDeleteTemplate = CommitTemplateFlags.DeleteTemplate;

// TODO: this type is limited to platform 'windows6.1'
const IID_IX509CertificateTemplateWritable_Value = Guid.initString("f49466a7-395a-4e9e-b6e7-32b331600dc0");
pub const IID_IX509CertificateTemplateWritable = &IID_IX509CertificateTemplateWritable_Value;
pub const IX509CertificateTemplateWritable = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn(
            self: *const IX509CertificateTemplateWritable,
            pValue: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: *const fn(
            self: *const IX509CertificateTemplateWritable,
            commitFlags: CommitTemplateFlags,
            strServerContext: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Property: *const fn(
            self: *const IX509CertificateTemplateWritable,
            property: EnrollmentTemplateProperty,
            pValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Property: *const fn(
            self: *const IX509CertificateTemplateWritable,
            property: EnrollmentTemplateProperty,
            value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Template: *const fn(
            self: *const IX509CertificateTemplateWritable,
            ppValue: ?*?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IX509CertificateTemplateWritable, pValue: ?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, pValue);
    }
    pub fn Commit(self: *const IX509CertificateTemplateWritable, commitFlags: CommitTemplateFlags, strServerContext: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Commit(self, commitFlags, strServerContext);
    }
    pub fn get_Property(self: *const IX509CertificateTemplateWritable, property: EnrollmentTemplateProperty, pValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Property(self, property, pValue);
    }
    pub fn put_Property(self: *const IX509CertificateTemplateWritable, property: EnrollmentTemplateProperty, value: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.put_Property(self, property, value);
    }
    pub fn get_Template(self: *const IX509CertificateTemplateWritable, ppValue: ?*?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
        return self.vtable.get_Template(self, ppValue);
    }
};

pub const EnrollmentCAProperty = enum(i32) {
    CommonName = 1,
    DistinguishedName = 2,
    SanitizedName = 3,
    SanitizedShortName = 4,
    DNSName = 5,
    CertificateTypes = 6,
    Certificate = 7,
    Description = 8,
    WebServers = 9,
    SiteName = 10,
    Security = 11,
    RenewalOnly = 12,
};
pub const CAPropCommonName = EnrollmentCAProperty.CommonName;
pub const CAPropDistinguishedName = EnrollmentCAProperty.DistinguishedName;
pub const CAPropSanitizedName = EnrollmentCAProperty.SanitizedName;
pub const CAPropSanitizedShortName = EnrollmentCAProperty.SanitizedShortName;
pub const CAPropDNSName = EnrollmentCAProperty.DNSName;
pub const CAPropCertificateTypes = EnrollmentCAProperty.CertificateTypes;
pub const CAPropCertificate = EnrollmentCAProperty.Certificate;
pub const CAPropDescription = EnrollmentCAProperty.Description;
pub const CAPropWebServers = EnrollmentCAProperty.WebServers;
pub const CAPropSiteName = EnrollmentCAProperty.SiteName;
pub const CAPropSecurity = EnrollmentCAProperty.Security;
pub const CAPropRenewalOnly = EnrollmentCAProperty.RenewalOnly;

// TODO: this type is limited to platform 'windows6.1'
const IID_ICertificationAuthority_Value = Guid.initString("835d1f61-1e95-4bc8-b4d3-976c42b968f7");
pub const IID_ICertificationAuthority = &IID_ICertificationAuthority_Value;
pub const ICertificationAuthority = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Property: *const fn(
            self: *const ICertificationAuthority,
            property: EnrollmentCAProperty,
            pValue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_Property(self: *const ICertificationAuthority, property: EnrollmentCAProperty, pValue: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.get_Property(self, property, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ICertificationAuthorities_Value = Guid.initString("13b79005-2181-11da-b2a4-000e7bbb2b09");
pub const IID_ICertificationAuthorities = &IID_ICertificationAuthorities_Value;
pub const ICertificationAuthorities = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: *const fn(
            self: *const ICertificationAuthorities,
            Index: i32,
            pVal: ?*?*ICertificationAuthority,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const ICertificationAuthorities,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const ICertificationAuthorities,
            pVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const ICertificationAuthorities,
            pVal: ?*ICertificationAuthority,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const ICertificationAuthorities,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn(
            self: *const ICertificationAuthorities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ComputeSiteCosts: *const fn(
            self: *const ICertificationAuthorities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ItemByName: *const fn(
            self: *const ICertificationAuthorities,
            strName: ?BSTR,
            ppValue: ?*?*ICertificationAuthority,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ItemByIndex(self: *const ICertificationAuthorities, Index: i32, pVal: ?*?*ICertificationAuthority) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByIndex(self, Index, pVal);
    }
    pub fn get_Count(self: *const ICertificationAuthorities, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
    pub fn get__NewEnum(self: *const ICertificationAuthorities, pVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, pVal);
    }
    pub fn Add(self: *const ICertificationAuthorities, pVal: ?*ICertificationAuthority) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, pVal);
    }
    pub fn Remove(self: *const ICertificationAuthorities, Index: i32) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, Index);
    }
    pub fn Clear(self: *const ICertificationAuthorities) callconv(.Inline) HRESULT {
        return self.vtable.Clear(self);
    }
    pub fn ComputeSiteCosts(self: *const ICertificationAuthorities) callconv(.Inline) HRESULT {
        return self.vtable.ComputeSiteCosts(self);
    }
    pub fn get_ItemByName(self: *const ICertificationAuthorities, strName: ?BSTR, ppValue: ?*?*ICertificationAuthority) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByName(self, strName, ppValue);
    }
};

pub const X509EnrollmentPolicyLoadOption = enum(i32) {
    Default = 0,
    CacheOnly = 1,
    Reload = 2,
    RegisterForADChanges = 4,
};
pub const LoadOptionDefault = X509EnrollmentPolicyLoadOption.Default;
pub const LoadOptionCacheOnly = X509EnrollmentPolicyLoadOption.CacheOnly;
pub const LoadOptionReload = X509EnrollmentPolicyLoadOption.Reload;
pub const LoadOptionRegisterForADChanges = X509EnrollmentPolicyLoadOption.RegisterForADChanges;

pub const EnrollmentPolicyFlags = enum(i32) {
    GroupPolicyList = 2,
    UserServerList = 4,
};
pub const DisableGroupPolicyList = EnrollmentPolicyFlags.GroupPolicyList;
pub const DisableUserServerList = EnrollmentPolicyFlags.UserServerList;

pub const PolicyServerUrlPropertyID = enum(i32) {
    PolicyID = 0,
    FriendlyName = 1,
};
pub const PsPolicyID = PolicyServerUrlPropertyID.PolicyID;
pub const PsFriendlyName = PolicyServerUrlPropertyID.FriendlyName;

pub const X509EnrollmentPolicyExportFlags = enum(i32) {
    Templates = 1,
    OIDs = 2,
    CAs = 4,
};
pub const ExportTemplates = X509EnrollmentPolicyExportFlags.Templates;
pub const ExportOIDs = X509EnrollmentPolicyExportFlags.OIDs;
pub const ExportCAs = X509EnrollmentPolicyExportFlags.CAs;

// TODO: this type is limited to platform 'windows6.1'
const IID_IX509EnrollmentPolicyServer_Value = Guid.initString("13b79026-2181-11da-b2a4-000e7bbb2b09");
pub const IID_IX509EnrollmentPolicyServer = &IID_IX509EnrollmentPolicyServer_Value;
pub const IX509EnrollmentPolicyServer = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn(
            self: *const IX509EnrollmentPolicyServer,
            bstrPolicyServerUrl: ?BSTR,
            bstrPolicyServerId: ?BSTR,
            authFlags: X509EnrollmentAuthFlags,
            fIsUnTrusted: i16,
            context: X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadPolicy: *const fn(
            self: *const IX509EnrollmentPolicyServer,
            option: X509EnrollmentPolicyLoadOption,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTemplates: *const fn(
            self: *const IX509EnrollmentPolicyServer,
            pTemplates: ?*?*IX509CertificateTemplates,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAsForTemplate: *const fn(
            self: *const IX509EnrollmentPolicyServer,
            pTemplate: ?*IX509CertificateTemplate,
            ppCAs: ?*?*ICertificationAuthorities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAs: *const fn(
            self: *const IX509EnrollmentPolicyServer,
            ppCAs: ?*?*ICertificationAuthorities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Validate: *const fn(
            self: *const IX509EnrollmentPolicyServer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCustomOids: *const fn(
            self: *const IX509EnrollmentPolicyServer,
            ppObjectIds: ?*?*IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextUpdateTime: *const fn(
            self: *const IX509EnrollmentPolicyServer,
            pDate: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastUpdateTime: *const fn(
            self: *const IX509EnrollmentPolicyServer,
            pDate: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicyServerUrl: *const fn(
            self: *const IX509EnrollmentPolicyServer,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicyServerId: *const fn(
            self: *const IX509EnrollmentPolicyServer,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFriendlyName: *const fn(
            self: *const IX509EnrollmentPolicyServer,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIsDefaultCEP: *const fn(
            self: *const IX509EnrollmentPolicyServer,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUseClientId: *const fn(
            self: *const IX509EnrollmentPolicyServer,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllowUnTrustedCA: *const fn(
            self: *const IX509EnrollmentPolicyServer,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCachePath: *const fn(
            self: *const IX509EnrollmentPolicyServer,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCacheDir: *const fn(
            self: *const IX509EnrollmentPolicyServer,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAuthFlags: *const fn(
            self: *const IX509EnrollmentPolicyServer,
            pValue: ?*X509EnrollmentAuthFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCredential: *const fn(
            self: *const IX509EnrollmentPolicyServer,
            hWndParent: i32,
            flag: X509EnrollmentAuthFlags,
            strCredential: ?BSTR,
            strPassword: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryChanges: *const fn(
            self: *const IX509EnrollmentPolicyServer,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeImport: *const fn(
            self: *const IX509EnrollmentPolicyServer,
            val: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Export: *const fn(
            self: *const IX509EnrollmentPolicyServer,
            exportFlags: X509EnrollmentPolicyExportFlags,
            pVal: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Cost: *const fn(
            self: *const IX509EnrollmentPolicyServer,
            pValue: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Cost: *const fn(
            self: *const IX509EnrollmentPolicyServer,
            value: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IX509EnrollmentPolicyServer, bstrPolicyServerUrl: ?BSTR, bstrPolicyServerId: ?BSTR, authFlags: X509EnrollmentAuthFlags, fIsUnTrusted: i16, context: X509CertificateEnrollmentContext) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, bstrPolicyServerUrl, bstrPolicyServerId, authFlags, fIsUnTrusted, context);
    }
    pub fn LoadPolicy(self: *const IX509EnrollmentPolicyServer, option: X509EnrollmentPolicyLoadOption) callconv(.Inline) HRESULT {
        return self.vtable.LoadPolicy(self, option);
    }
    pub fn GetTemplates(self: *const IX509EnrollmentPolicyServer, pTemplates: ?*?*IX509CertificateTemplates) callconv(.Inline) HRESULT {
        return self.vtable.GetTemplates(self, pTemplates);
    }
    pub fn GetCAsForTemplate(self: *const IX509EnrollmentPolicyServer, pTemplate: ?*IX509CertificateTemplate, ppCAs: ?*?*ICertificationAuthorities) callconv(.Inline) HRESULT {
        return self.vtable.GetCAsForTemplate(self, pTemplate, ppCAs);
    }
    pub fn GetCAs(self: *const IX509EnrollmentPolicyServer, ppCAs: ?*?*ICertificationAuthorities) callconv(.Inline) HRESULT {
        return self.vtable.GetCAs(self, ppCAs);
    }
    pub fn Validate(self: *const IX509EnrollmentPolicyServer) callconv(.Inline) HRESULT {
        return self.vtable.Validate(self);
    }
    pub fn GetCustomOids(self: *const IX509EnrollmentPolicyServer, ppObjectIds: ?*?*IObjectIds) callconv(.Inline) HRESULT {
        return self.vtable.GetCustomOids(self, ppObjectIds);
    }
    pub fn GetNextUpdateTime(self: *const IX509EnrollmentPolicyServer, pDate: ?*f64) callconv(.Inline) HRESULT {
        return self.vtable.GetNextUpdateTime(self, pDate);
    }
    pub fn GetLastUpdateTime(self: *const IX509EnrollmentPolicyServer, pDate: ?*f64) callconv(.Inline) HRESULT {
        return self.vtable.GetLastUpdateTime(self, pDate);
    }
    pub fn GetPolicyServerUrl(self: *const IX509EnrollmentPolicyServer, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetPolicyServerUrl(self, pValue);
    }
    pub fn GetPolicyServerId(self: *const IX509EnrollmentPolicyServer, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetPolicyServerId(self, pValue);
    }
    pub fn GetFriendlyName(self: *const IX509EnrollmentPolicyServer, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetFriendlyName(self, pValue);
    }
    pub fn GetIsDefaultCEP(self: *const IX509EnrollmentPolicyServer, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.GetIsDefaultCEP(self, pValue);
    }
    pub fn GetUseClientId(self: *const IX509EnrollmentPolicyServer, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.GetUseClientId(self, pValue);
    }
    pub fn GetAllowUnTrustedCA(self: *const IX509EnrollmentPolicyServer, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.GetAllowUnTrustedCA(self, pValue);
    }
    pub fn GetCachePath(self: *const IX509EnrollmentPolicyServer, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetCachePath(self, pValue);
    }
    pub fn GetCacheDir(self: *const IX509EnrollmentPolicyServer, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetCacheDir(self, pValue);
    }
    pub fn GetAuthFlags(self: *const IX509EnrollmentPolicyServer, pValue: ?*X509EnrollmentAuthFlags) callconv(.Inline) HRESULT {
        return self.vtable.GetAuthFlags(self, pValue);
    }
    pub fn SetCredential(self: *const IX509EnrollmentPolicyServer, hWndParent: i32, flag: X509EnrollmentAuthFlags, strCredential: ?BSTR, strPassword: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.SetCredential(self, hWndParent, flag, strCredential, strPassword);
    }
    pub fn QueryChanges(self: *const IX509EnrollmentPolicyServer, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.QueryChanges(self, pValue);
    }
    pub fn InitializeImport(self: *const IX509EnrollmentPolicyServer, val: VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.InitializeImport(self, val);
    }
    pub fn Export(self: *const IX509EnrollmentPolicyServer, exportFlags: X509EnrollmentPolicyExportFlags, pVal: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.Export(self, exportFlags, pVal);
    }
    pub fn get_Cost(self: *const IX509EnrollmentPolicyServer, pValue: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_Cost(self, pValue);
    }
    pub fn put_Cost(self: *const IX509EnrollmentPolicyServer, value: u32) callconv(.Inline) HRESULT {
        return self.vtable.put_Cost(self, value);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IX509PolicyServerUrl_Value = Guid.initString("884e204a-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509PolicyServerUrl = &IID_IX509PolicyServerUrl_Value;
pub const IX509PolicyServerUrl = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn(
            self: *const IX509PolicyServerUrl,
            context: X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Url: *const fn(
            self: *const IX509PolicyServerUrl,
            ppValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Url: *const fn(
            self: *const IX509PolicyServerUrl,
            pValue: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Default: *const fn(
            self: *const IX509PolicyServerUrl,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Default: *const fn(
            self: *const IX509PolicyServerUrl,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Flags: *const fn(
            self: *const IX509PolicyServerUrl,
            pValue: ?*PolicyServerUrlFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Flags: *const fn(
            self: *const IX509PolicyServerUrl,
            Flags: PolicyServerUrlFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthFlags: *const fn(
            self: *const IX509PolicyServerUrl,
            pValue: ?*X509EnrollmentAuthFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuthFlags: *const fn(
            self: *const IX509PolicyServerUrl,
            Flags: X509EnrollmentAuthFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Cost: *const fn(
            self: *const IX509PolicyServerUrl,
            pValue: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Cost: *const fn(
            self: *const IX509PolicyServerUrl,
            value: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringProperty: *const fn(
            self: *const IX509PolicyServerUrl,
            propertyId: PolicyServerUrlPropertyID,
            ppValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStringProperty: *const fn(
            self: *const IX509PolicyServerUrl,
            propertyId: PolicyServerUrlPropertyID,
            pValue: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateRegistry: *const fn(
            self: *const IX509PolicyServerUrl,
            context: X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveFromRegistry: *const fn(
            self: *const IX509PolicyServerUrl,
            context: X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IX509PolicyServerUrl, context: X509CertificateEnrollmentContext) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, context);
    }
    pub fn get_Url(self: *const IX509PolicyServerUrl, ppValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Url(self, ppValue);
    }
    pub fn put_Url(self: *const IX509PolicyServerUrl, pValue: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_Url(self, pValue);
    }
    pub fn get_Default(self: *const IX509PolicyServerUrl, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Default(self, pValue);
    }
    pub fn put_Default(self: *const IX509PolicyServerUrl, value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_Default(self, value);
    }
    pub fn get_Flags(self: *const IX509PolicyServerUrl, pValue: ?*PolicyServerUrlFlags) callconv(.Inline) HRESULT {
        return self.vtable.get_Flags(self, pValue);
    }
    pub fn put_Flags(self: *const IX509PolicyServerUrl, Flags: PolicyServerUrlFlags) callconv(.Inline) HRESULT {
        return self.vtable.put_Flags(self, Flags);
    }
    pub fn get_AuthFlags(self: *const IX509PolicyServerUrl, pValue: ?*X509EnrollmentAuthFlags) callconv(.Inline) HRESULT {
        return self.vtable.get_AuthFlags(self, pValue);
    }
    pub fn put_AuthFlags(self: *const IX509PolicyServerUrl, Flags: X509EnrollmentAuthFlags) callconv(.Inline) HRESULT {
        return self.vtable.put_AuthFlags(self, Flags);
    }
    pub fn get_Cost(self: *const IX509PolicyServerUrl, pValue: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_Cost(self, pValue);
    }
    pub fn put_Cost(self: *const IX509PolicyServerUrl, value: u32) callconv(.Inline) HRESULT {
        return self.vtable.put_Cost(self, value);
    }
    pub fn GetStringProperty(self: *const IX509PolicyServerUrl, propertyId: PolicyServerUrlPropertyID, ppValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetStringProperty(self, propertyId, ppValue);
    }
    pub fn SetStringProperty(self: *const IX509PolicyServerUrl, propertyId: PolicyServerUrlPropertyID, pValue: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.SetStringProperty(self, propertyId, pValue);
    }
    pub fn UpdateRegistry(self: *const IX509PolicyServerUrl, context: X509CertificateEnrollmentContext) callconv(.Inline) HRESULT {
        return self.vtable.UpdateRegistry(self, context);
    }
    pub fn RemoveFromRegistry(self: *const IX509PolicyServerUrl, context: X509CertificateEnrollmentContext) callconv(.Inline) HRESULT {
        return self.vtable.RemoveFromRegistry(self, context);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509PolicyServerListManager_Value = Guid.initString("884e204b-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509PolicyServerListManager = &IID_IX509PolicyServerListManager_Value;
pub const IX509PolicyServerListManager = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: *const fn(
            self: *const IX509PolicyServerListManager,
            Index: i32,
            pVal: ?*?*IX509PolicyServerUrl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IX509PolicyServerListManager,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const IX509PolicyServerListManager,
            pVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const IX509PolicyServerListManager,
            pVal: ?*IX509PolicyServerUrl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const IX509PolicyServerListManager,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn(
            self: *const IX509PolicyServerListManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: *const fn(
            self: *const IX509PolicyServerListManager,
            context: X509CertificateEnrollmentContext,
            Flags: PolicyServerUrlFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ItemByIndex(self: *const IX509PolicyServerListManager, Index: i32, pVal: ?*?*IX509PolicyServerUrl) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByIndex(self, Index, pVal);
    }
    pub fn get_Count(self: *const IX509PolicyServerListManager, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
    pub fn get__NewEnum(self: *const IX509PolicyServerListManager, pVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, pVal);
    }
    pub fn Add(self: *const IX509PolicyServerListManager, pVal: ?*IX509PolicyServerUrl) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, pVal);
    }
    pub fn Remove(self: *const IX509PolicyServerListManager, Index: i32) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, Index);
    }
    pub fn Clear(self: *const IX509PolicyServerListManager) callconv(.Inline) HRESULT {
        return self.vtable.Clear(self);
    }
    pub fn Initialize(self: *const IX509PolicyServerListManager, context: X509CertificateEnrollmentContext, Flags: PolicyServerUrlFlags) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, context, Flags);
    }
};

pub const X509RequestType = enum(i32) {
    Any = 0,
    Pkcs10 = 1,
    Pkcs7 = 2,
    Cmc = 3,
    Certificate = 4,
};
pub const TypeAny = X509RequestType.Any;
pub const TypePkcs10 = X509RequestType.Pkcs10;
pub const TypePkcs7 = X509RequestType.Pkcs7;
pub const TypeCmc = X509RequestType.Cmc;
pub const TypeCertificate = X509RequestType.Certificate;

pub const X509RequestInheritOptions = enum(i32) {
    Default = 0,
    NewDefaultKey = 1,
    NewSimilarKey = 2,
    PrivateKey = 3,
    PublicKey = 4,
    KeyMask = 15,
    None = 16,
    RenewalCertificateFlag = 32,
    TemplateFlag = 64,
    SubjectFlag = 128,
    ExtensionsFlag = 256,
    SubjectAltNameFlag = 512,
    ValidityPeriodFlag = 1024,
    Reserved80000000 = -2147483648,
};
pub const InheritDefault = X509RequestInheritOptions.Default;
pub const InheritNewDefaultKey = X509RequestInheritOptions.NewDefaultKey;
pub const InheritNewSimilarKey = X509RequestInheritOptions.NewSimilarKey;
pub const InheritPrivateKey = X509RequestInheritOptions.PrivateKey;
pub const InheritPublicKey = X509RequestInheritOptions.PublicKey;
pub const InheritKeyMask = X509RequestInheritOptions.KeyMask;
pub const InheritNone = X509RequestInheritOptions.None;
pub const InheritRenewalCertificateFlag = X509RequestInheritOptions.RenewalCertificateFlag;
pub const InheritTemplateFlag = X509RequestInheritOptions.TemplateFlag;
pub const InheritSubjectFlag = X509RequestInheritOptions.SubjectFlag;
pub const InheritExtensionsFlag = X509RequestInheritOptions.ExtensionsFlag;
pub const InheritSubjectAltNameFlag = X509RequestInheritOptions.SubjectAltNameFlag;
pub const InheritValidityPeriodFlag = X509RequestInheritOptions.ValidityPeriodFlag;
pub const InheritReserved80000000 = X509RequestInheritOptions.Reserved80000000;

pub const InnerRequestLevel = enum(i32) {
    Innermost = 0,
    Next = 1,
};
pub const LevelInnermost = InnerRequestLevel.Innermost;
pub const LevelNext = InnerRequestLevel.Next;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509CertificateRequest_Value = Guid.initString("728ab341-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRequest = &IID_IX509CertificateRequest_Value;
pub const IX509CertificateRequest = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn(
            self: *const IX509CertificateRequest,
            Context: X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: *const fn(
            self: *const IX509CertificateRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetForEncode: *const fn(
            self: *const IX509CertificateRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInnerRequest: *const fn(
            self: *const IX509CertificateRequest,
            Level: InnerRequestLevel,
            ppValue: ?*?*IX509CertificateRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn(
            self: *const IX509CertificateRequest,
            pValue: ?*X509RequestType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnrollmentContext: *const fn(
            self: *const IX509CertificateRequest,
            pValue: ?*X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Silent: *const fn(
            self: *const IX509CertificateRequest,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Silent: *const fn(
            self: *const IX509CertificateRequest,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ParentWindow: *const fn(
            self: *const IX509CertificateRequest,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ParentWindow: *const fn(
            self: *const IX509CertificateRequest,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UIContextMessage: *const fn(
            self: *const IX509CertificateRequest,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UIContextMessage: *const fn(
            self: *const IX509CertificateRequest,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SuppressDefaults: *const fn(
            self: *const IX509CertificateRequest,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SuppressDefaults: *const fn(
            self: *const IX509CertificateRequest,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RenewalCertificate: *const fn(
            self: *const IX509CertificateRequest,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_RenewalCertificate: *const fn(
            self: *const IX509CertificateRequest,
            Encoding: EncodingType,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClientId: *const fn(
            self: *const IX509CertificateRequest,
            pValue: ?*RequestClientInfoClientId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ClientId: *const fn(
            self: *const IX509CertificateRequest,
            Value: RequestClientInfoClientId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CspInformations: *const fn(
            self: *const IX509CertificateRequest,
            ppValue: ?*?*ICspInformations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CspInformations: *const fn(
            self: *const IX509CertificateRequest,
            pValue: ?*ICspInformations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HashAlgorithm: *const fn(
            self: *const IX509CertificateRequest,
            ppValue: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HashAlgorithm: *const fn(
            self: *const IX509CertificateRequest,
            pValue: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AlternateSignatureAlgorithm: *const fn(
            self: *const IX509CertificateRequest,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AlternateSignatureAlgorithm: *const fn(
            self: *const IX509CertificateRequest,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RawData: *const fn(
            self: *const IX509CertificateRequest,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IX509CertificateRequest, Context: X509CertificateEnrollmentContext) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, Context);
    }
    pub fn Encode(self: *const IX509CertificateRequest) callconv(.Inline) HRESULT {
        return self.vtable.Encode(self);
    }
    pub fn ResetForEncode(self: *const IX509CertificateRequest) callconv(.Inline) HRESULT {
        return self.vtable.ResetForEncode(self);
    }
    pub fn GetInnerRequest(self: *const IX509CertificateRequest, Level: InnerRequestLevel, ppValue: ?*?*IX509CertificateRequest) callconv(.Inline) HRESULT {
        return self.vtable.GetInnerRequest(self, Level, ppValue);
    }
    pub fn get_Type(self: *const IX509CertificateRequest, pValue: ?*X509RequestType) callconv(.Inline) HRESULT {
        return self.vtable.get_Type(self, pValue);
    }
    pub fn get_EnrollmentContext(self: *const IX509CertificateRequest, pValue: ?*X509CertificateEnrollmentContext) callconv(.Inline) HRESULT {
        return self.vtable.get_EnrollmentContext(self, pValue);
    }
    pub fn get_Silent(self: *const IX509CertificateRequest, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Silent(self, pValue);
    }
    pub fn put_Silent(self: *const IX509CertificateRequest, Value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_Silent(self, Value);
    }
    pub fn get_ParentWindow(self: *const IX509CertificateRequest, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ParentWindow(self, pValue);
    }
    pub fn put_ParentWindow(self: *const IX509CertificateRequest, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_ParentWindow(self, Value);
    }
    pub fn get_UIContextMessage(self: *const IX509CertificateRequest, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_UIContextMessage(self, pValue);
    }
    pub fn put_UIContextMessage(self: *const IX509CertificateRequest, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_UIContextMessage(self, Value);
    }
    pub fn get_SuppressDefaults(self: *const IX509CertificateRequest, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_SuppressDefaults(self, pValue);
    }
    pub fn put_SuppressDefaults(self: *const IX509CertificateRequest, Value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_SuppressDefaults(self, Value);
    }
    pub fn get_RenewalCertificate(self: *const IX509CertificateRequest, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RenewalCertificate(self, Encoding, pValue);
    }
    pub fn put_RenewalCertificate(self: *const IX509CertificateRequest, Encoding: EncodingType, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_RenewalCertificate(self, Encoding, Value);
    }
    pub fn get_ClientId(self: *const IX509CertificateRequest, pValue: ?*RequestClientInfoClientId) callconv(.Inline) HRESULT {
        return self.vtable.get_ClientId(self, pValue);
    }
    pub fn put_ClientId(self: *const IX509CertificateRequest, Value: RequestClientInfoClientId) callconv(.Inline) HRESULT {
        return self.vtable.put_ClientId(self, Value);
    }
    pub fn get_CspInformations(self: *const IX509CertificateRequest, ppValue: ?*?*ICspInformations) callconv(.Inline) HRESULT {
        return self.vtable.get_CspInformations(self, ppValue);
    }
    pub fn put_CspInformations(self: *const IX509CertificateRequest, pValue: ?*ICspInformations) callconv(.Inline) HRESULT {
        return self.vtable.put_CspInformations(self, pValue);
    }
    pub fn get_HashAlgorithm(self: *const IX509CertificateRequest, ppValue: ?*?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.get_HashAlgorithm(self, ppValue);
    }
    pub fn put_HashAlgorithm(self: *const IX509CertificateRequest, pValue: ?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.put_HashAlgorithm(self, pValue);
    }
    pub fn get_AlternateSignatureAlgorithm(self: *const IX509CertificateRequest, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_AlternateSignatureAlgorithm(self, pValue);
    }
    pub fn put_AlternateSignatureAlgorithm(self: *const IX509CertificateRequest, Value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_AlternateSignatureAlgorithm(self, Value);
    }
    pub fn get_RawData(self: *const IX509CertificateRequest, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RawData(self, Encoding, pValue);
    }
};

pub const Pkcs10AllowedSignatureTypes = enum(i32) {
    KeySignature = 1,
    NullSignature = 2,
};
pub const AllowedKeySignature = Pkcs10AllowedSignatureTypes.KeySignature;
pub const AllowedNullSignature = Pkcs10AllowedSignatureTypes.NullSignature;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509CertificateRequestPkcs10_Value = Guid.initString("728ab342-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRequestPkcs10 = &IID_IX509CertificateRequestPkcs10_Value;
pub const IX509CertificateRequestPkcs10 = extern union {
    pub const VTable = extern struct {
        base: IX509CertificateRequest.VTable,
        InitializeFromTemplateName: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            Context: X509CertificateEnrollmentContext,
            strTemplateName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromPrivateKey: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            Context: X509CertificateEnrollmentContext,
            pPrivateKey: ?*IX509PrivateKey,
            strTemplateName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromPublicKey: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            Context: X509CertificateEnrollmentContext,
            pPublicKey: ?*IX509PublicKey,
            strTemplateName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromCertificate: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            Context: X509CertificateEnrollmentContext,
            strCertificate: ?BSTR,
            Encoding: EncodingType,
            InheritOptions: X509RequestInheritOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            strEncodedData: ?BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckSignature: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            AllowedSignatureTypes: Pkcs10AllowedSignatureTypes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSmartCard: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TemplateObjectId: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            ppValue: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PublicKey: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            ppValue: ?*?*IX509PublicKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivateKey: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            ppValue: ?*?*IX509PrivateKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NullSigned: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReuseKey: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_OldCertificate: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Subject: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            ppValue: ?*?*IX500DistinguishedName,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Subject: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            pValue: ?*IX500DistinguishedName,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CspStatuses: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            ppValue: ?*?*ICspStatuses,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SmimeCapabilities: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SmimeCapabilities: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SignatureInformation: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            ppValue: ?*?*IX509SignatureInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeyContainerNamePrefix: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_KeyContainerNamePrefix: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CryptAttributes: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            ppValue: ?*?*ICryptAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_X509Extensions: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            ppValue: ?*?*IX509Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CriticalExtensions: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            ppValue: ?*?*IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SuppressOids: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            ppValue: ?*?*IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RawDataToBeSigned: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Signature: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCspStatuses: *const fn(
            self: *const IX509CertificateRequestPkcs10,
            KeySpec: X509KeySpec,
            ppCspStatuses: ?*?*ICspStatuses,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509CertificateRequest: IX509CertificateRequest,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeFromTemplateName(self: *const IX509CertificateRequestPkcs10, Context: X509CertificateEnrollmentContext, strTemplateName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromTemplateName(self, Context, strTemplateName);
    }
    pub fn InitializeFromPrivateKey(self: *const IX509CertificateRequestPkcs10, Context: X509CertificateEnrollmentContext, pPrivateKey: ?*IX509PrivateKey, strTemplateName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromPrivateKey(self, Context, pPrivateKey, strTemplateName);
    }
    pub fn InitializeFromPublicKey(self: *const IX509CertificateRequestPkcs10, Context: X509CertificateEnrollmentContext, pPublicKey: ?*IX509PublicKey, strTemplateName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromPublicKey(self, Context, pPublicKey, strTemplateName);
    }
    pub fn InitializeFromCertificate(self: *const IX509CertificateRequestPkcs10, Context: X509CertificateEnrollmentContext, strCertificate: ?BSTR, Encoding: EncodingType, InheritOptions: X509RequestInheritOptions) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromCertificate(self, Context, strCertificate, Encoding, InheritOptions);
    }
    pub fn InitializeDecode(self: *const IX509CertificateRequestPkcs10, strEncodedData: ?BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
        return self.vtable.InitializeDecode(self, strEncodedData, Encoding);
    }
    pub fn CheckSignature(self: *const IX509CertificateRequestPkcs10, AllowedSignatureTypes: Pkcs10AllowedSignatureTypes) callconv(.Inline) HRESULT {
        return self.vtable.CheckSignature(self, AllowedSignatureTypes);
    }
    pub fn IsSmartCard(self: *const IX509CertificateRequestPkcs10, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.IsSmartCard(self, pValue);
    }
    pub fn get_TemplateObjectId(self: *const IX509CertificateRequestPkcs10, ppValue: ?*?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.get_TemplateObjectId(self, ppValue);
    }
    pub fn get_PublicKey(self: *const IX509CertificateRequestPkcs10, ppValue: ?*?*IX509PublicKey) callconv(.Inline) HRESULT {
        return self.vtable.get_PublicKey(self, ppValue);
    }
    pub fn get_PrivateKey(self: *const IX509CertificateRequestPkcs10, ppValue: ?*?*IX509PrivateKey) callconv(.Inline) HRESULT {
        return self.vtable.get_PrivateKey(self, ppValue);
    }
    pub fn get_NullSigned(self: *const IX509CertificateRequestPkcs10, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_NullSigned(self, pValue);
    }
    pub fn get_ReuseKey(self: *const IX509CertificateRequestPkcs10, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_ReuseKey(self, pValue);
    }
    pub fn get_OldCertificate(self: *const IX509CertificateRequestPkcs10, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_OldCertificate(self, Encoding, pValue);
    }
    pub fn get_Subject(self: *const IX509CertificateRequestPkcs10, ppValue: ?*?*IX500DistinguishedName) callconv(.Inline) HRESULT {
        return self.vtable.get_Subject(self, ppValue);
    }
    pub fn put_Subject(self: *const IX509CertificateRequestPkcs10, pValue: ?*IX500DistinguishedName) callconv(.Inline) HRESULT {
        return self.vtable.put_Subject(self, pValue);
    }
    pub fn get_CspStatuses(self: *const IX509CertificateRequestPkcs10, ppValue: ?*?*ICspStatuses) callconv(.Inline) HRESULT {
        return self.vtable.get_CspStatuses(self, ppValue);
    }
    pub fn get_SmimeCapabilities(self: *const IX509CertificateRequestPkcs10, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_SmimeCapabilities(self, pValue);
    }
    pub fn put_SmimeCapabilities(self: *const IX509CertificateRequestPkcs10, Value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_SmimeCapabilities(self, Value);
    }
    pub fn get_SignatureInformation(self: *const IX509CertificateRequestPkcs10, ppValue: ?*?*IX509SignatureInformation) callconv(.Inline) HRESULT {
        return self.vtable.get_SignatureInformation(self, ppValue);
    }
    pub fn get_KeyContainerNamePrefix(self: *const IX509CertificateRequestPkcs10, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_KeyContainerNamePrefix(self, pValue);
    }
    pub fn put_KeyContainerNamePrefix(self: *const IX509CertificateRequestPkcs10, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_KeyContainerNamePrefix(self, Value);
    }
    pub fn get_CryptAttributes(self: *const IX509CertificateRequestPkcs10, ppValue: ?*?*ICryptAttributes) callconv(.Inline) HRESULT {
        return self.vtable.get_CryptAttributes(self, ppValue);
    }
    pub fn get_X509Extensions(self: *const IX509CertificateRequestPkcs10, ppValue: ?*?*IX509Extensions) callconv(.Inline) HRESULT {
        return self.vtable.get_X509Extensions(self, ppValue);
    }
    pub fn get_CriticalExtensions(self: *const IX509CertificateRequestPkcs10, ppValue: ?*?*IObjectIds) callconv(.Inline) HRESULT {
        return self.vtable.get_CriticalExtensions(self, ppValue);
    }
    pub fn get_SuppressOids(self: *const IX509CertificateRequestPkcs10, ppValue: ?*?*IObjectIds) callconv(.Inline) HRESULT {
        return self.vtable.get_SuppressOids(self, ppValue);
    }
    pub fn get_RawDataToBeSigned(self: *const IX509CertificateRequestPkcs10, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RawDataToBeSigned(self, Encoding, pValue);
    }
    pub fn get_Signature(self: *const IX509CertificateRequestPkcs10, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Signature(self, Encoding, pValue);
    }
    pub fn GetCspStatuses(self: *const IX509CertificateRequestPkcs10, KeySpec: X509KeySpec, ppCspStatuses: ?*?*ICspStatuses) callconv(.Inline) HRESULT {
        return self.vtable.GetCspStatuses(self, KeySpec, ppCspStatuses);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IX509CertificateRequestPkcs10V2_Value = Guid.initString("728ab35b-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRequestPkcs10V2 = &IID_IX509CertificateRequestPkcs10V2_Value;
pub const IX509CertificateRequestPkcs10V2 = extern union {
    pub const VTable = extern struct {
        base: IX509CertificateRequestPkcs10.VTable,
        InitializeFromTemplate: *const fn(
            self: *const IX509CertificateRequestPkcs10V2,
            context: X509CertificateEnrollmentContext,
            pPolicyServer: ?*IX509EnrollmentPolicyServer,
            pTemplate: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromPrivateKeyTemplate: *const fn(
            self: *const IX509CertificateRequestPkcs10V2,
            Context: X509CertificateEnrollmentContext,
            pPrivateKey: ?*IX509PrivateKey,
            pPolicyServer: ?*IX509EnrollmentPolicyServer,
            pTemplate: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromPublicKeyTemplate: *const fn(
            self: *const IX509CertificateRequestPkcs10V2,
            Context: X509CertificateEnrollmentContext,
            pPublicKey: ?*IX509PublicKey,
            pPolicyServer: ?*IX509EnrollmentPolicyServer,
            pTemplate: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PolicyServer: *const fn(
            self: *const IX509CertificateRequestPkcs10V2,
            ppPolicyServer: ?*?*IX509EnrollmentPolicyServer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Template: *const fn(
            self: *const IX509CertificateRequestPkcs10V2,
            ppTemplate: ?*?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509CertificateRequestPkcs10: IX509CertificateRequestPkcs10,
    IX509CertificateRequest: IX509CertificateRequest,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeFromTemplate(self: *const IX509CertificateRequestPkcs10V2, context: X509CertificateEnrollmentContext, pPolicyServer: ?*IX509EnrollmentPolicyServer, pTemplate: ?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromTemplate(self, context, pPolicyServer, pTemplate);
    }
    pub fn InitializeFromPrivateKeyTemplate(self: *const IX509CertificateRequestPkcs10V2, Context: X509CertificateEnrollmentContext, pPrivateKey: ?*IX509PrivateKey, pPolicyServer: ?*IX509EnrollmentPolicyServer, pTemplate: ?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromPrivateKeyTemplate(self, Context, pPrivateKey, pPolicyServer, pTemplate);
    }
    pub fn InitializeFromPublicKeyTemplate(self: *const IX509CertificateRequestPkcs10V2, Context: X509CertificateEnrollmentContext, pPublicKey: ?*IX509PublicKey, pPolicyServer: ?*IX509EnrollmentPolicyServer, pTemplate: ?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromPublicKeyTemplate(self, Context, pPublicKey, pPolicyServer, pTemplate);
    }
    pub fn get_PolicyServer(self: *const IX509CertificateRequestPkcs10V2, ppPolicyServer: ?*?*IX509EnrollmentPolicyServer) callconv(.Inline) HRESULT {
        return self.vtable.get_PolicyServer(self, ppPolicyServer);
    }
    pub fn get_Template(self: *const IX509CertificateRequestPkcs10V2, ppTemplate: ?*?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
        return self.vtable.get_Template(self, ppTemplate);
    }
};

const IID_IX509CertificateRequestPkcs10V3_Value = Guid.initString("54ea9942-3d66-4530-b76e-7c9170d3ec52");
pub const IID_IX509CertificateRequestPkcs10V3 = &IID_IX509CertificateRequestPkcs10V3_Value;
pub const IX509CertificateRequestPkcs10V3 = extern union {
    pub const VTable = extern struct {
        base: IX509CertificateRequestPkcs10V2.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AttestPrivateKey: *const fn(
            self: *const IX509CertificateRequestPkcs10V3,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AttestPrivateKey: *const fn(
            self: *const IX509CertificateRequestPkcs10V3,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AttestationEncryptionCertificate: *const fn(
            self: *const IX509CertificateRequestPkcs10V3,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AttestationEncryptionCertificate: *const fn(
            self: *const IX509CertificateRequestPkcs10V3,
            Encoding: EncodingType,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncryptionAlgorithm: *const fn(
            self: *const IX509CertificateRequestPkcs10V3,
            ppValue: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EncryptionAlgorithm: *const fn(
            self: *const IX509CertificateRequestPkcs10V3,
            pValue: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncryptionStrength: *const fn(
            self: *const IX509CertificateRequestPkcs10V3,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EncryptionStrength: *const fn(
            self: *const IX509CertificateRequestPkcs10V3,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ChallengePassword: *const fn(
            self: *const IX509CertificateRequestPkcs10V3,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ChallengePassword: *const fn(
            self: *const IX509CertificateRequestPkcs10V3,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NameValuePairs: *const fn(
            self: *const IX509CertificateRequestPkcs10V3,
            ppValue: ?*?*IX509NameValuePairs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509CertificateRequestPkcs10V2: IX509CertificateRequestPkcs10V2,
    IX509CertificateRequestPkcs10: IX509CertificateRequestPkcs10,
    IX509CertificateRequest: IX509CertificateRequest,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_AttestPrivateKey(self: *const IX509CertificateRequestPkcs10V3, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_AttestPrivateKey(self, pValue);
    }
    pub fn put_AttestPrivateKey(self: *const IX509CertificateRequestPkcs10V3, Value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_AttestPrivateKey(self, Value);
    }
    pub fn get_AttestationEncryptionCertificate(self: *const IX509CertificateRequestPkcs10V3, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_AttestationEncryptionCertificate(self, Encoding, pValue);
    }
    pub fn put_AttestationEncryptionCertificate(self: *const IX509CertificateRequestPkcs10V3, Encoding: EncodingType, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_AttestationEncryptionCertificate(self, Encoding, Value);
    }
    pub fn get_EncryptionAlgorithm(self: *const IX509CertificateRequestPkcs10V3, ppValue: ?*?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.get_EncryptionAlgorithm(self, ppValue);
    }
    pub fn put_EncryptionAlgorithm(self: *const IX509CertificateRequestPkcs10V3, pValue: ?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.put_EncryptionAlgorithm(self, pValue);
    }
    pub fn get_EncryptionStrength(self: *const IX509CertificateRequestPkcs10V3, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_EncryptionStrength(self, pValue);
    }
    pub fn put_EncryptionStrength(self: *const IX509CertificateRequestPkcs10V3, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_EncryptionStrength(self, Value);
    }
    pub fn get_ChallengePassword(self: *const IX509CertificateRequestPkcs10V3, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ChallengePassword(self, pValue);
    }
    pub fn put_ChallengePassword(self: *const IX509CertificateRequestPkcs10V3, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ChallengePassword(self, Value);
    }
    pub fn get_NameValuePairs(self: *const IX509CertificateRequestPkcs10V3, ppValue: ?*?*IX509NameValuePairs) callconv(.Inline) HRESULT {
        return self.vtable.get_NameValuePairs(self, ppValue);
    }
};

pub const KeyAttestationClaimType = enum(i32) {
    NONE = 0,
    AUTHORITY_AND_SUBJECT = 3,
    AUTHORITY_ONLY = 1,
    SUBJECT_ONLY = 2,
    UNKNOWN = 4096,
};
pub const XCN_NCRYPT_CLAIM_NONE = KeyAttestationClaimType.NONE;
pub const XCN_NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT = KeyAttestationClaimType.AUTHORITY_AND_SUBJECT;
pub const XCN_NCRYPT_CLAIM_AUTHORITY_ONLY = KeyAttestationClaimType.AUTHORITY_ONLY;
pub const XCN_NCRYPT_CLAIM_SUBJECT_ONLY = KeyAttestationClaimType.SUBJECT_ONLY;
pub const XCN_NCRYPT_CLAIM_UNKNOWN = KeyAttestationClaimType.UNKNOWN;

const IID_IX509CertificateRequestPkcs10V4_Value = Guid.initString("728ab363-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRequestPkcs10V4 = &IID_IX509CertificateRequestPkcs10V4_Value;
pub const IX509CertificateRequestPkcs10V4 = extern union {
    pub const VTable = extern struct {
        base: IX509CertificateRequestPkcs10V3.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClaimType: *const fn(
            self: *const IX509CertificateRequestPkcs10V4,
            pValue: ?*KeyAttestationClaimType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ClaimType: *const fn(
            self: *const IX509CertificateRequestPkcs10V4,
            Value: KeyAttestationClaimType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AttestPrivateKeyPreferred: *const fn(
            self: *const IX509CertificateRequestPkcs10V4,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AttestPrivateKeyPreferred: *const fn(
            self: *const IX509CertificateRequestPkcs10V4,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509CertificateRequestPkcs10V3: IX509CertificateRequestPkcs10V3,
    IX509CertificateRequestPkcs10V2: IX509CertificateRequestPkcs10V2,
    IX509CertificateRequestPkcs10: IX509CertificateRequestPkcs10,
    IX509CertificateRequest: IX509CertificateRequest,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ClaimType(self: *const IX509CertificateRequestPkcs10V4, pValue: ?*KeyAttestationClaimType) callconv(.Inline) HRESULT {
        return self.vtable.get_ClaimType(self, pValue);
    }
    pub fn put_ClaimType(self: *const IX509CertificateRequestPkcs10V4, Value: KeyAttestationClaimType) callconv(.Inline) HRESULT {
        return self.vtable.put_ClaimType(self, Value);
    }
    pub fn get_AttestPrivateKeyPreferred(self: *const IX509CertificateRequestPkcs10V4, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_AttestPrivateKeyPreferred(self, pValue);
    }
    pub fn put_AttestPrivateKeyPreferred(self: *const IX509CertificateRequestPkcs10V4, Value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_AttestPrivateKeyPreferred(self, Value);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509CertificateRequestCertificate_Value = Guid.initString("728ab343-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRequestCertificate = &IID_IX509CertificateRequestCertificate_Value;
pub const IX509CertificateRequestCertificate = extern union {
    pub const VTable = extern struct {
        base: IX509CertificateRequestPkcs10.VTable,
        CheckPublicKeySignature: *const fn(
            self: *const IX509CertificateRequestCertificate,
            pPublicKey: ?*IX509PublicKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Issuer: *const fn(
            self: *const IX509CertificateRequestCertificate,
            ppValue: ?*?*IX500DistinguishedName,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Issuer: *const fn(
            self: *const IX509CertificateRequestCertificate,
            pValue: ?*IX500DistinguishedName,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NotBefore: *const fn(
            self: *const IX509CertificateRequestCertificate,
            pValue: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NotBefore: *const fn(
            self: *const IX509CertificateRequestCertificate,
            Value: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NotAfter: *const fn(
            self: *const IX509CertificateRequestCertificate,
            pValue: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NotAfter: *const fn(
            self: *const IX509CertificateRequestCertificate,
            Value: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SerialNumber: *const fn(
            self: *const IX509CertificateRequestCertificate,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SerialNumber: *const fn(
            self: *const IX509CertificateRequestCertificate,
            Encoding: EncodingType,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SignerCertificate: *const fn(
            self: *const IX509CertificateRequestCertificate,
            ppValue: ?*?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SignerCertificate: *const fn(
            self: *const IX509CertificateRequestCertificate,
            pValue: ?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509CertificateRequestPkcs10: IX509CertificateRequestPkcs10,
    IX509CertificateRequest: IX509CertificateRequest,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn CheckPublicKeySignature(self: *const IX509CertificateRequestCertificate, pPublicKey: ?*IX509PublicKey) callconv(.Inline) HRESULT {
        return self.vtable.CheckPublicKeySignature(self, pPublicKey);
    }
    pub fn get_Issuer(self: *const IX509CertificateRequestCertificate, ppValue: ?*?*IX500DistinguishedName) callconv(.Inline) HRESULT {
        return self.vtable.get_Issuer(self, ppValue);
    }
    pub fn put_Issuer(self: *const IX509CertificateRequestCertificate, pValue: ?*IX500DistinguishedName) callconv(.Inline) HRESULT {
        return self.vtable.put_Issuer(self, pValue);
    }
    pub fn get_NotBefore(self: *const IX509CertificateRequestCertificate, pValue: ?*f64) callconv(.Inline) HRESULT {
        return self.vtable.get_NotBefore(self, pValue);
    }
    pub fn put_NotBefore(self: *const IX509CertificateRequestCertificate, Value: f64) callconv(.Inline) HRESULT {
        return self.vtable.put_NotBefore(self, Value);
    }
    pub fn get_NotAfter(self: *const IX509CertificateRequestCertificate, pValue: ?*f64) callconv(.Inline) HRESULT {
        return self.vtable.get_NotAfter(self, pValue);
    }
    pub fn put_NotAfter(self: *const IX509CertificateRequestCertificate, Value: f64) callconv(.Inline) HRESULT {
        return self.vtable.put_NotAfter(self, Value);
    }
    pub fn get_SerialNumber(self: *const IX509CertificateRequestCertificate, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_SerialNumber(self, Encoding, pValue);
    }
    pub fn put_SerialNumber(self: *const IX509CertificateRequestCertificate, Encoding: EncodingType, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_SerialNumber(self, Encoding, Value);
    }
    pub fn get_SignerCertificate(self: *const IX509CertificateRequestCertificate, ppValue: ?*?*ISignerCertificate) callconv(.Inline) HRESULT {
        return self.vtable.get_SignerCertificate(self, ppValue);
    }
    pub fn put_SignerCertificate(self: *const IX509CertificateRequestCertificate, pValue: ?*ISignerCertificate) callconv(.Inline) HRESULT {
        return self.vtable.put_SignerCertificate(self, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IX509CertificateRequestCertificate2_Value = Guid.initString("728ab35a-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRequestCertificate2 = &IID_IX509CertificateRequestCertificate2_Value;
pub const IX509CertificateRequestCertificate2 = extern union {
    pub const VTable = extern struct {
        base: IX509CertificateRequestCertificate.VTable,
        InitializeFromTemplate: *const fn(
            self: *const IX509CertificateRequestCertificate2,
            context: X509CertificateEnrollmentContext,
            pPolicyServer: ?*IX509EnrollmentPolicyServer,
            pTemplate: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromPrivateKeyTemplate: *const fn(
            self: *const IX509CertificateRequestCertificate2,
            Context: X509CertificateEnrollmentContext,
            pPrivateKey: ?*IX509PrivateKey,
            pPolicyServer: ?*IX509EnrollmentPolicyServer,
            pTemplate: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PolicyServer: *const fn(
            self: *const IX509CertificateRequestCertificate2,
            ppPolicyServer: ?*?*IX509EnrollmentPolicyServer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Template: *const fn(
            self: *const IX509CertificateRequestCertificate2,
            ppTemplate: ?*?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509CertificateRequestCertificate: IX509CertificateRequestCertificate,
    IX509CertificateRequestPkcs10: IX509CertificateRequestPkcs10,
    IX509CertificateRequest: IX509CertificateRequest,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeFromTemplate(self: *const IX509CertificateRequestCertificate2, context: X509CertificateEnrollmentContext, pPolicyServer: ?*IX509EnrollmentPolicyServer, pTemplate: ?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromTemplate(self, context, pPolicyServer, pTemplate);
    }
    pub fn InitializeFromPrivateKeyTemplate(self: *const IX509CertificateRequestCertificate2, Context: X509CertificateEnrollmentContext, pPrivateKey: ?*IX509PrivateKey, pPolicyServer: ?*IX509EnrollmentPolicyServer, pTemplate: ?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromPrivateKeyTemplate(self, Context, pPrivateKey, pPolicyServer, pTemplate);
    }
    pub fn get_PolicyServer(self: *const IX509CertificateRequestCertificate2, ppPolicyServer: ?*?*IX509EnrollmentPolicyServer) callconv(.Inline) HRESULT {
        return self.vtable.get_PolicyServer(self, ppPolicyServer);
    }
    pub fn get_Template(self: *const IX509CertificateRequestCertificate2, ppTemplate: ?*?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
        return self.vtable.get_Template(self, ppTemplate);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509CertificateRequestPkcs7_Value = Guid.initString("728ab344-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRequestPkcs7 = &IID_IX509CertificateRequestPkcs7_Value;
pub const IX509CertificateRequestPkcs7 = extern union {
    pub const VTable = extern struct {
        base: IX509CertificateRequest.VTable,
        InitializeFromTemplateName: *const fn(
            self: *const IX509CertificateRequestPkcs7,
            Context: X509CertificateEnrollmentContext,
            strTemplateName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromCertificate: *const fn(
            self: *const IX509CertificateRequestPkcs7,
            Context: X509CertificateEnrollmentContext,
            RenewalRequest: i16,
            strCertificate: ?BSTR,
            Encoding: EncodingType,
            InheritOptions: X509RequestInheritOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromInnerRequest: *const fn(
            self: *const IX509CertificateRequestPkcs7,
            pInnerRequest: ?*IX509CertificateRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn(
            self: *const IX509CertificateRequestPkcs7,
            strEncodedData: ?BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequesterName: *const fn(
            self: *const IX509CertificateRequestPkcs7,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RequesterName: *const fn(
            self: *const IX509CertificateRequestPkcs7,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SignerCertificate: *const fn(
            self: *const IX509CertificateRequestPkcs7,
            ppValue: ?*?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SignerCertificate: *const fn(
            self: *const IX509CertificateRequestPkcs7,
            pValue: ?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509CertificateRequest: IX509CertificateRequest,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeFromTemplateName(self: *const IX509CertificateRequestPkcs7, Context: X509CertificateEnrollmentContext, strTemplateName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromTemplateName(self, Context, strTemplateName);
    }
    pub fn InitializeFromCertificate(self: *const IX509CertificateRequestPkcs7, Context: X509CertificateEnrollmentContext, RenewalRequest: i16, strCertificate: ?BSTR, Encoding: EncodingType, InheritOptions: X509RequestInheritOptions) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromCertificate(self, Context, RenewalRequest, strCertificate, Encoding, InheritOptions);
    }
    pub fn InitializeFromInnerRequest(self: *const IX509CertificateRequestPkcs7, pInnerRequest: ?*IX509CertificateRequest) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromInnerRequest(self, pInnerRequest);
    }
    pub fn InitializeDecode(self: *const IX509CertificateRequestPkcs7, strEncodedData: ?BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
        return self.vtable.InitializeDecode(self, strEncodedData, Encoding);
    }
    pub fn get_RequesterName(self: *const IX509CertificateRequestPkcs7, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RequesterName(self, pValue);
    }
    pub fn put_RequesterName(self: *const IX509CertificateRequestPkcs7, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_RequesterName(self, Value);
    }
    pub fn get_SignerCertificate(self: *const IX509CertificateRequestPkcs7, ppValue: ?*?*ISignerCertificate) callconv(.Inline) HRESULT {
        return self.vtable.get_SignerCertificate(self, ppValue);
    }
    pub fn put_SignerCertificate(self: *const IX509CertificateRequestPkcs7, pValue: ?*ISignerCertificate) callconv(.Inline) HRESULT {
        return self.vtable.put_SignerCertificate(self, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IX509CertificateRequestPkcs7V2_Value = Guid.initString("728ab35c-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRequestPkcs7V2 = &IID_IX509CertificateRequestPkcs7V2_Value;
pub const IX509CertificateRequestPkcs7V2 = extern union {
    pub const VTable = extern struct {
        base: IX509CertificateRequestPkcs7.VTable,
        InitializeFromTemplate: *const fn(
            self: *const IX509CertificateRequestPkcs7V2,
            context: X509CertificateEnrollmentContext,
            pPolicyServer: ?*IX509EnrollmentPolicyServer,
            pTemplate: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PolicyServer: *const fn(
            self: *const IX509CertificateRequestPkcs7V2,
            ppPolicyServer: ?*?*IX509EnrollmentPolicyServer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Template: *const fn(
            self: *const IX509CertificateRequestPkcs7V2,
            ppTemplate: ?*?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckCertificateSignature: *const fn(
            self: *const IX509CertificateRequestPkcs7V2,
            ValidateCertificateChain: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509CertificateRequestPkcs7: IX509CertificateRequestPkcs7,
    IX509CertificateRequest: IX509CertificateRequest,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeFromTemplate(self: *const IX509CertificateRequestPkcs7V2, context: X509CertificateEnrollmentContext, pPolicyServer: ?*IX509EnrollmentPolicyServer, pTemplate: ?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromTemplate(self, context, pPolicyServer, pTemplate);
    }
    pub fn get_PolicyServer(self: *const IX509CertificateRequestPkcs7V2, ppPolicyServer: ?*?*IX509EnrollmentPolicyServer) callconv(.Inline) HRESULT {
        return self.vtable.get_PolicyServer(self, ppPolicyServer);
    }
    pub fn get_Template(self: *const IX509CertificateRequestPkcs7V2, ppTemplate: ?*?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
        return self.vtable.get_Template(self, ppTemplate);
    }
    pub fn CheckCertificateSignature(self: *const IX509CertificateRequestPkcs7V2, ValidateCertificateChain: i16) callconv(.Inline) HRESULT {
        return self.vtable.CheckCertificateSignature(self, ValidateCertificateChain);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509CertificateRequestCmc_Value = Guid.initString("728ab345-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRequestCmc = &IID_IX509CertificateRequestCmc_Value;
pub const IX509CertificateRequestCmc = extern union {
    pub const VTable = extern struct {
        base: IX509CertificateRequestPkcs7.VTable,
        InitializeFromInnerRequestTemplateName: *const fn(
            self: *const IX509CertificateRequestCmc,
            pInnerRequest: ?*IX509CertificateRequest,
            strTemplateName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TemplateObjectId: *const fn(
            self: *const IX509CertificateRequestCmc,
            ppValue: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NullSigned: *const fn(
            self: *const IX509CertificateRequestCmc,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CryptAttributes: *const fn(
            self: *const IX509CertificateRequestCmc,
            ppValue: ?*?*ICryptAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NameValuePairs: *const fn(
            self: *const IX509CertificateRequestCmc,
            ppValue: ?*?*IX509NameValuePairs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_X509Extensions: *const fn(
            self: *const IX509CertificateRequestCmc,
            ppValue: ?*?*IX509Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CriticalExtensions: *const fn(
            self: *const IX509CertificateRequestCmc,
            ppValue: ?*?*IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SuppressOids: *const fn(
            self: *const IX509CertificateRequestCmc,
            ppValue: ?*?*IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransactionId: *const fn(
            self: *const IX509CertificateRequestCmc,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TransactionId: *const fn(
            self: *const IX509CertificateRequestCmc,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SenderNonce: *const fn(
            self: *const IX509CertificateRequestCmc,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SenderNonce: *const fn(
            self: *const IX509CertificateRequestCmc,
            Encoding: EncodingType,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SignatureInformation: *const fn(
            self: *const IX509CertificateRequestCmc,
            ppValue: ?*?*IX509SignatureInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ArchivePrivateKey: *const fn(
            self: *const IX509CertificateRequestCmc,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ArchivePrivateKey: *const fn(
            self: *const IX509CertificateRequestCmc,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_KeyArchivalCertificate: *const fn(
            self: *const IX509CertificateRequestCmc,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_KeyArchivalCertificate: *const fn(
            self: *const IX509CertificateRequestCmc,
            Encoding: EncodingType,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncryptionAlgorithm: *const fn(
            self: *const IX509CertificateRequestCmc,
            ppValue: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EncryptionAlgorithm: *const fn(
            self: *const IX509CertificateRequestCmc,
            pValue: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncryptionStrength: *const fn(
            self: *const IX509CertificateRequestCmc,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EncryptionStrength: *const fn(
            self: *const IX509CertificateRequestCmc,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EncryptedKeyHash: *const fn(
            self: *const IX509CertificateRequestCmc,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SignerCertificates: *const fn(
            self: *const IX509CertificateRequestCmc,
            ppValue: ?*?*ISignerCertificates,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509CertificateRequestPkcs7: IX509CertificateRequestPkcs7,
    IX509CertificateRequest: IX509CertificateRequest,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeFromInnerRequestTemplateName(self: *const IX509CertificateRequestCmc, pInnerRequest: ?*IX509CertificateRequest, strTemplateName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromInnerRequestTemplateName(self, pInnerRequest, strTemplateName);
    }
    pub fn get_TemplateObjectId(self: *const IX509CertificateRequestCmc, ppValue: ?*?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.get_TemplateObjectId(self, ppValue);
    }
    pub fn get_NullSigned(self: *const IX509CertificateRequestCmc, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_NullSigned(self, pValue);
    }
    pub fn get_CryptAttributes(self: *const IX509CertificateRequestCmc, ppValue: ?*?*ICryptAttributes) callconv(.Inline) HRESULT {
        return self.vtable.get_CryptAttributes(self, ppValue);
    }
    pub fn get_NameValuePairs(self: *const IX509CertificateRequestCmc, ppValue: ?*?*IX509NameValuePairs) callconv(.Inline) HRESULT {
        return self.vtable.get_NameValuePairs(self, ppValue);
    }
    pub fn get_X509Extensions(self: *const IX509CertificateRequestCmc, ppValue: ?*?*IX509Extensions) callconv(.Inline) HRESULT {
        return self.vtable.get_X509Extensions(self, ppValue);
    }
    pub fn get_CriticalExtensions(self: *const IX509CertificateRequestCmc, ppValue: ?*?*IObjectIds) callconv(.Inline) HRESULT {
        return self.vtable.get_CriticalExtensions(self, ppValue);
    }
    pub fn get_SuppressOids(self: *const IX509CertificateRequestCmc, ppValue: ?*?*IObjectIds) callconv(.Inline) HRESULT {
        return self.vtable.get_SuppressOids(self, ppValue);
    }
    pub fn get_TransactionId(self: *const IX509CertificateRequestCmc, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_TransactionId(self, pValue);
    }
    pub fn put_TransactionId(self: *const IX509CertificateRequestCmc, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_TransactionId(self, Value);
    }
    pub fn get_SenderNonce(self: *const IX509CertificateRequestCmc, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_SenderNonce(self, Encoding, pValue);
    }
    pub fn put_SenderNonce(self: *const IX509CertificateRequestCmc, Encoding: EncodingType, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_SenderNonce(self, Encoding, Value);
    }
    pub fn get_SignatureInformation(self: *const IX509CertificateRequestCmc, ppValue: ?*?*IX509SignatureInformation) callconv(.Inline) HRESULT {
        return self.vtable.get_SignatureInformation(self, ppValue);
    }
    pub fn get_ArchivePrivateKey(self: *const IX509CertificateRequestCmc, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_ArchivePrivateKey(self, pValue);
    }
    pub fn put_ArchivePrivateKey(self: *const IX509CertificateRequestCmc, Value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_ArchivePrivateKey(self, Value);
    }
    pub fn get_KeyArchivalCertificate(self: *const IX509CertificateRequestCmc, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_KeyArchivalCertificate(self, Encoding, pValue);
    }
    pub fn put_KeyArchivalCertificate(self: *const IX509CertificateRequestCmc, Encoding: EncodingType, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_KeyArchivalCertificate(self, Encoding, Value);
    }
    pub fn get_EncryptionAlgorithm(self: *const IX509CertificateRequestCmc, ppValue: ?*?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.get_EncryptionAlgorithm(self, ppValue);
    }
    pub fn put_EncryptionAlgorithm(self: *const IX509CertificateRequestCmc, pValue: ?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.put_EncryptionAlgorithm(self, pValue);
    }
    pub fn get_EncryptionStrength(self: *const IX509CertificateRequestCmc, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_EncryptionStrength(self, pValue);
    }
    pub fn put_EncryptionStrength(self: *const IX509CertificateRequestCmc, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_EncryptionStrength(self, Value);
    }
    pub fn get_EncryptedKeyHash(self: *const IX509CertificateRequestCmc, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_EncryptedKeyHash(self, Encoding, pValue);
    }
    pub fn get_SignerCertificates(self: *const IX509CertificateRequestCmc, ppValue: ?*?*ISignerCertificates) callconv(.Inline) HRESULT {
        return self.vtable.get_SignerCertificates(self, ppValue);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IX509CertificateRequestCmc2_Value = Guid.initString("728ab35d-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRequestCmc2 = &IID_IX509CertificateRequestCmc2_Value;
pub const IX509CertificateRequestCmc2 = extern union {
    pub const VTable = extern struct {
        base: IX509CertificateRequestCmc.VTable,
        InitializeFromTemplate: *const fn(
            self: *const IX509CertificateRequestCmc2,
            context: X509CertificateEnrollmentContext,
            pPolicyServer: ?*IX509EnrollmentPolicyServer,
            pTemplate: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromInnerRequestTemplate: *const fn(
            self: *const IX509CertificateRequestCmc2,
            pInnerRequest: ?*IX509CertificateRequest,
            pPolicyServer: ?*IX509EnrollmentPolicyServer,
            pTemplate: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PolicyServer: *const fn(
            self: *const IX509CertificateRequestCmc2,
            ppPolicyServer: ?*?*IX509EnrollmentPolicyServer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Template: *const fn(
            self: *const IX509CertificateRequestCmc2,
            ppTemplate: ?*?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckSignature: *const fn(
            self: *const IX509CertificateRequestCmc2,
            AllowedSignatureTypes: Pkcs10AllowedSignatureTypes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckCertificateSignature: *const fn(
            self: *const IX509CertificateRequestCmc2,
            pSignerCertificate: ?*ISignerCertificate,
            ValidateCertificateChain: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509CertificateRequestCmc: IX509CertificateRequestCmc,
    IX509CertificateRequestPkcs7: IX509CertificateRequestPkcs7,
    IX509CertificateRequest: IX509CertificateRequest,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeFromTemplate(self: *const IX509CertificateRequestCmc2, context: X509CertificateEnrollmentContext, pPolicyServer: ?*IX509EnrollmentPolicyServer, pTemplate: ?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromTemplate(self, context, pPolicyServer, pTemplate);
    }
    pub fn InitializeFromInnerRequestTemplate(self: *const IX509CertificateRequestCmc2, pInnerRequest: ?*IX509CertificateRequest, pPolicyServer: ?*IX509EnrollmentPolicyServer, pTemplate: ?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromInnerRequestTemplate(self, pInnerRequest, pPolicyServer, pTemplate);
    }
    pub fn get_PolicyServer(self: *const IX509CertificateRequestCmc2, ppPolicyServer: ?*?*IX509EnrollmentPolicyServer) callconv(.Inline) HRESULT {
        return self.vtable.get_PolicyServer(self, ppPolicyServer);
    }
    pub fn get_Template(self: *const IX509CertificateRequestCmc2, ppTemplate: ?*?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
        return self.vtable.get_Template(self, ppTemplate);
    }
    pub fn CheckSignature(self: *const IX509CertificateRequestCmc2, AllowedSignatureTypes: Pkcs10AllowedSignatureTypes) callconv(.Inline) HRESULT {
        return self.vtable.CheckSignature(self, AllowedSignatureTypes);
    }
    pub fn CheckCertificateSignature(self: *const IX509CertificateRequestCmc2, pSignerCertificate: ?*ISignerCertificate, ValidateCertificateChain: i16) callconv(.Inline) HRESULT {
        return self.vtable.CheckCertificateSignature(self, pSignerCertificate, ValidateCertificateChain);
    }
};

pub const InstallResponseRestrictionFlags = enum(i32) {
    None = 0,
    NoOutstandingRequest = 1,
    UntrustedCertificate = 2,
    UntrustedRoot = 4,
};
pub const AllowNone = InstallResponseRestrictionFlags.None;
pub const AllowNoOutstandingRequest = InstallResponseRestrictionFlags.NoOutstandingRequest;
pub const AllowUntrustedCertificate = InstallResponseRestrictionFlags.UntrustedCertificate;
pub const AllowUntrustedRoot = InstallResponseRestrictionFlags.UntrustedRoot;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509Enrollment_Value = Guid.initString("728ab346-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509Enrollment = &IID_IX509Enrollment_Value;
pub const IX509Enrollment = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn(
            self: *const IX509Enrollment,
            Context: X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromTemplateName: *const fn(
            self: *const IX509Enrollment,
            Context: X509CertificateEnrollmentContext,
            strTemplateName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromRequest: *const fn(
            self: *const IX509Enrollment,
            pRequest: ?*IX509CertificateRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRequest: *const fn(
            self: *const IX509Enrollment,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enroll: *const fn(
            self: *const IX509Enrollment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallResponse: *const fn(
            self: *const IX509Enrollment,
            Restrictions: InstallResponseRestrictionFlags,
            strResponse: ?BSTR,
            Encoding: EncodingType,
            strPassword: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePFX: *const fn(
            self: *const IX509Enrollment,
            strPassword: ?BSTR,
            ExportOptions: PFXExportOptions,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Request: *const fn(
            self: *const IX509Enrollment,
            pValue: ?*?*IX509CertificateRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Silent: *const fn(
            self: *const IX509Enrollment,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Silent: *const fn(
            self: *const IX509Enrollment,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ParentWindow: *const fn(
            self: *const IX509Enrollment,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ParentWindow: *const fn(
            self: *const IX509Enrollment,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NameValuePairs: *const fn(
            self: *const IX509Enrollment,
            ppValue: ?*?*IX509NameValuePairs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnrollmentContext: *const fn(
            self: *const IX509Enrollment,
            pValue: ?*X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn(
            self: *const IX509Enrollment,
            ppValue: ?*?*IX509EnrollmentStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Certificate: *const fn(
            self: *const IX509Enrollment,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Response: *const fn(
            self: *const IX509Enrollment,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CertificateFriendlyName: *const fn(
            self: *const IX509Enrollment,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CertificateFriendlyName: *const fn(
            self: *const IX509Enrollment,
            strValue: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CertificateDescription: *const fn(
            self: *const IX509Enrollment,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CertificateDescription: *const fn(
            self: *const IX509Enrollment,
            strValue: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestId: *const fn(
            self: *const IX509Enrollment,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CAConfigString: *const fn(
            self: *const IX509Enrollment,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IX509Enrollment, Context: X509CertificateEnrollmentContext) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, Context);
    }
    pub fn InitializeFromTemplateName(self: *const IX509Enrollment, Context: X509CertificateEnrollmentContext, strTemplateName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromTemplateName(self, Context, strTemplateName);
    }
    pub fn InitializeFromRequest(self: *const IX509Enrollment, pRequest: ?*IX509CertificateRequest) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromRequest(self, pRequest);
    }
    pub fn CreateRequest(self: *const IX509Enrollment, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.CreateRequest(self, Encoding, pValue);
    }
    pub fn Enroll(self: *const IX509Enrollment) callconv(.Inline) HRESULT {
        return self.vtable.Enroll(self);
    }
    pub fn InstallResponse(self: *const IX509Enrollment, Restrictions: InstallResponseRestrictionFlags, strResponse: ?BSTR, Encoding: EncodingType, strPassword: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InstallResponse(self, Restrictions, strResponse, Encoding, strPassword);
    }
    pub fn CreatePFX(self: *const IX509Enrollment, strPassword: ?BSTR, ExportOptions: PFXExportOptions, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.CreatePFX(self, strPassword, ExportOptions, Encoding, pValue);
    }
    pub fn get_Request(self: *const IX509Enrollment, pValue: ?*?*IX509CertificateRequest) callconv(.Inline) HRESULT {
        return self.vtable.get_Request(self, pValue);
    }
    pub fn get_Silent(self: *const IX509Enrollment, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Silent(self, pValue);
    }
    pub fn put_Silent(self: *const IX509Enrollment, Value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_Silent(self, Value);
    }
    pub fn get_ParentWindow(self: *const IX509Enrollment, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ParentWindow(self, pValue);
    }
    pub fn put_ParentWindow(self: *const IX509Enrollment, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_ParentWindow(self, Value);
    }
    pub fn get_NameValuePairs(self: *const IX509Enrollment, ppValue: ?*?*IX509NameValuePairs) callconv(.Inline) HRESULT {
        return self.vtable.get_NameValuePairs(self, ppValue);
    }
    pub fn get_EnrollmentContext(self: *const IX509Enrollment, pValue: ?*X509CertificateEnrollmentContext) callconv(.Inline) HRESULT {
        return self.vtable.get_EnrollmentContext(self, pValue);
    }
    pub fn get_Status(self: *const IX509Enrollment, ppValue: ?*?*IX509EnrollmentStatus) callconv(.Inline) HRESULT {
        return self.vtable.get_Status(self, ppValue);
    }
    pub fn get_Certificate(self: *const IX509Enrollment, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Certificate(self, Encoding, pValue);
    }
    pub fn get_Response(self: *const IX509Enrollment, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Response(self, Encoding, pValue);
    }
    pub fn get_CertificateFriendlyName(self: *const IX509Enrollment, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_CertificateFriendlyName(self, pValue);
    }
    pub fn put_CertificateFriendlyName(self: *const IX509Enrollment, strValue: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_CertificateFriendlyName(self, strValue);
    }
    pub fn get_CertificateDescription(self: *const IX509Enrollment, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_CertificateDescription(self, pValue);
    }
    pub fn put_CertificateDescription(self: *const IX509Enrollment, strValue: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_CertificateDescription(self, strValue);
    }
    pub fn get_RequestId(self: *const IX509Enrollment, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_RequestId(self, pValue);
    }
    pub fn get_CAConfigString(self: *const IX509Enrollment, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_CAConfigString(self, pValue);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IX509Enrollment2_Value = Guid.initString("728ab350-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509Enrollment2 = &IID_IX509Enrollment2_Value;
pub const IX509Enrollment2 = extern union {
    pub const VTable = extern struct {
        base: IX509Enrollment.VTable,
        InitializeFromTemplate: *const fn(
            self: *const IX509Enrollment2,
            context: X509CertificateEnrollmentContext,
            pPolicyServer: ?*IX509EnrollmentPolicyServer,
            pTemplate: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallResponse2: *const fn(
            self: *const IX509Enrollment2,
            Restrictions: InstallResponseRestrictionFlags,
            strResponse: ?BSTR,
            Encoding: EncodingType,
            strPassword: ?BSTR,
            strEnrollmentPolicyServerUrl: ?BSTR,
            strEnrollmentPolicyServerID: ?BSTR,
            EnrollmentPolicyServerFlags: PolicyServerUrlFlags,
            authFlags: X509EnrollmentAuthFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PolicyServer: *const fn(
            self: *const IX509Enrollment2,
            ppPolicyServer: ?*?*IX509EnrollmentPolicyServer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Template: *const fn(
            self: *const IX509Enrollment2,
            ppTemplate: ?*?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestIdString: *const fn(
            self: *const IX509Enrollment2,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509Enrollment: IX509Enrollment,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InitializeFromTemplate(self: *const IX509Enrollment2, context: X509CertificateEnrollmentContext, pPolicyServer: ?*IX509EnrollmentPolicyServer, pTemplate: ?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
        return self.vtable.InitializeFromTemplate(self, context, pPolicyServer, pTemplate);
    }
    pub fn InstallResponse2(self: *const IX509Enrollment2, Restrictions: InstallResponseRestrictionFlags, strResponse: ?BSTR, Encoding: EncodingType, strPassword: ?BSTR, strEnrollmentPolicyServerUrl: ?BSTR, strEnrollmentPolicyServerID: ?BSTR, EnrollmentPolicyServerFlags: PolicyServerUrlFlags, authFlags: X509EnrollmentAuthFlags) callconv(.Inline) HRESULT {
        return self.vtable.InstallResponse2(self, Restrictions, strResponse, Encoding, strPassword, strEnrollmentPolicyServerUrl, strEnrollmentPolicyServerID, EnrollmentPolicyServerFlags, authFlags);
    }
    pub fn get_PolicyServer(self: *const IX509Enrollment2, ppPolicyServer: ?*?*IX509EnrollmentPolicyServer) callconv(.Inline) HRESULT {
        return self.vtable.get_PolicyServer(self, ppPolicyServer);
    }
    pub fn get_Template(self: *const IX509Enrollment2, ppTemplate: ?*?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
        return self.vtable.get_Template(self, ppTemplate);
    }
    pub fn get_RequestIdString(self: *const IX509Enrollment2, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RequestIdString(self, pValue);
    }
};

pub const WebEnrollmentFlags = enum(i32) {
    t = 1,
};
pub const EnrollPrompt = WebEnrollmentFlags.t;

// TODO: this type is limited to platform 'windows6.1'
const IID_IX509EnrollmentHelper_Value = Guid.initString("728ab351-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509EnrollmentHelper = &IID_IX509EnrollmentHelper_Value;
pub const IX509EnrollmentHelper = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        AddPolicyServer: *const fn(
            self: *const IX509EnrollmentHelper,
            strEnrollmentPolicyServerURI: ?BSTR,
            strEnrollmentPolicyID: ?BSTR,
            EnrollmentPolicyServerFlags: PolicyServerUrlFlags,
            authFlags: X509EnrollmentAuthFlags,
            strCredential: ?BSTR,
            strPassword: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddEnrollmentServer: *const fn(
            self: *const IX509EnrollmentHelper,
            strEnrollmentServerURI: ?BSTR,
            authFlags: X509EnrollmentAuthFlags,
            strCredential: ?BSTR,
            strPassword: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enroll: *const fn(
            self: *const IX509EnrollmentHelper,
            strEnrollmentPolicyServerURI: ?BSTR,
            strTemplateName: ?BSTR,
            Encoding: EncodingType,
            enrollFlags: WebEnrollmentFlags,
            pstrCertificate: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: *const fn(
            self: *const IX509EnrollmentHelper,
            Context: X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn AddPolicyServer(self: *const IX509EnrollmentHelper, strEnrollmentPolicyServerURI: ?BSTR, strEnrollmentPolicyID: ?BSTR, EnrollmentPolicyServerFlags: PolicyServerUrlFlags, authFlags: X509EnrollmentAuthFlags, strCredential: ?BSTR, strPassword: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.AddPolicyServer(self, strEnrollmentPolicyServerURI, strEnrollmentPolicyID, EnrollmentPolicyServerFlags, authFlags, strCredential, strPassword);
    }
    pub fn AddEnrollmentServer(self: *const IX509EnrollmentHelper, strEnrollmentServerURI: ?BSTR, authFlags: X509EnrollmentAuthFlags, strCredential: ?BSTR, strPassword: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.AddEnrollmentServer(self, strEnrollmentServerURI, authFlags, strCredential, strPassword);
    }
    pub fn Enroll(self: *const IX509EnrollmentHelper, strEnrollmentPolicyServerURI: ?BSTR, strTemplateName: ?BSTR, Encoding: EncodingType, enrollFlags: WebEnrollmentFlags, pstrCertificate: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Enroll(self, strEnrollmentPolicyServerURI, strTemplateName, Encoding, enrollFlags, pstrCertificate);
    }
    pub fn Initialize(self: *const IX509EnrollmentHelper, Context: X509CertificateEnrollmentContext) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, Context);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509EnrollmentWebClassFactory_Value = Guid.initString("728ab349-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509EnrollmentWebClassFactory = &IID_IX509EnrollmentWebClassFactory_Value;
pub const IX509EnrollmentWebClassFactory = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        CreateObject: *const fn(
            self: *const IX509EnrollmentWebClassFactory,
            strProgID: ?BSTR,
            ppIUnknown: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn CreateObject(self: *const IX509EnrollmentWebClassFactory, strProgID: ?BSTR, ppIUnknown: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.CreateObject(self, strProgID, ppIUnknown);
    }
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IX509MachineEnrollmentFactory_Value = Guid.initString("728ab352-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509MachineEnrollmentFactory = &IID_IX509MachineEnrollmentFactory_Value;
pub const IX509MachineEnrollmentFactory = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        CreateObject: *const fn(
            self: *const IX509MachineEnrollmentFactory,
            strProgID: ?BSTR,
            ppIHelper: ?*?*IX509EnrollmentHelper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn CreateObject(self: *const IX509MachineEnrollmentFactory, strProgID: ?BSTR, ppIHelper: ?*?*IX509EnrollmentHelper) callconv(.Inline) HRESULT {
        return self.vtable.CreateObject(self, strProgID, ppIHelper);
    }
};

pub const CRLRevocationReason = enum(i32) {
    UNSPECIFIED = 0,
    KEY_COMPROMISE = 1,
    CA_COMPROMISE = 2,
    AFFILIATION_CHANGED = 3,
    SUPERSEDED = 4,
    CESSATION_OF_OPERATION = 5,
    CERTIFICATE_HOLD = 6,
    REMOVE_FROM_CRL = 8,
    PRIVILEGE_WITHDRAWN = 9,
    AA_COMPROMISE = 10,
};
pub const XCN_CRL_REASON_UNSPECIFIED = CRLRevocationReason.UNSPECIFIED;
pub const XCN_CRL_REASON_KEY_COMPROMISE = CRLRevocationReason.KEY_COMPROMISE;
pub const XCN_CRL_REASON_CA_COMPROMISE = CRLRevocationReason.CA_COMPROMISE;
pub const XCN_CRL_REASON_AFFILIATION_CHANGED = CRLRevocationReason.AFFILIATION_CHANGED;
pub const XCN_CRL_REASON_SUPERSEDED = CRLRevocationReason.SUPERSEDED;
pub const XCN_CRL_REASON_CESSATION_OF_OPERATION = CRLRevocationReason.CESSATION_OF_OPERATION;
pub const XCN_CRL_REASON_CERTIFICATE_HOLD = CRLRevocationReason.CERTIFICATE_HOLD;
pub const XCN_CRL_REASON_REMOVE_FROM_CRL = CRLRevocationReason.REMOVE_FROM_CRL;
pub const XCN_CRL_REASON_PRIVILEGE_WITHDRAWN = CRLRevocationReason.PRIVILEGE_WITHDRAWN;
pub const XCN_CRL_REASON_AA_COMPROMISE = CRLRevocationReason.AA_COMPROMISE;

const IID_IX509CertificateRevocationListEntry_Value = Guid.initString("728ab35e-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRevocationListEntry = &IID_IX509CertificateRevocationListEntry_Value;
pub const IX509CertificateRevocationListEntry = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn(
            self: *const IX509CertificateRevocationListEntry,
            Encoding: EncodingType,
            SerialNumber: ?BSTR,
            RevocationDate: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SerialNumber: *const fn(
            self: *const IX509CertificateRevocationListEntry,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RevocationDate: *const fn(
            self: *const IX509CertificateRevocationListEntry,
            pValue: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RevocationReason: *const fn(
            self: *const IX509CertificateRevocationListEntry,
            pValue: ?*CRLRevocationReason,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RevocationReason: *const fn(
            self: *const IX509CertificateRevocationListEntry,
            Value: CRLRevocationReason,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_X509Extensions: *const fn(
            self: *const IX509CertificateRevocationListEntry,
            ppValue: ?*?*IX509Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CriticalExtensions: *const fn(
            self: *const IX509CertificateRevocationListEntry,
            ppValue: ?*?*IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IX509CertificateRevocationListEntry, Encoding: EncodingType, SerialNumber: ?BSTR, RevocationDate: f64) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, Encoding, SerialNumber, RevocationDate);
    }
    pub fn get_SerialNumber(self: *const IX509CertificateRevocationListEntry, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_SerialNumber(self, Encoding, pValue);
    }
    pub fn get_RevocationDate(self: *const IX509CertificateRevocationListEntry, pValue: ?*f64) callconv(.Inline) HRESULT {
        return self.vtable.get_RevocationDate(self, pValue);
    }
    pub fn get_RevocationReason(self: *const IX509CertificateRevocationListEntry, pValue: ?*CRLRevocationReason) callconv(.Inline) HRESULT {
        return self.vtable.get_RevocationReason(self, pValue);
    }
    pub fn put_RevocationReason(self: *const IX509CertificateRevocationListEntry, Value: CRLRevocationReason) callconv(.Inline) HRESULT {
        return self.vtable.put_RevocationReason(self, Value);
    }
    pub fn get_X509Extensions(self: *const IX509CertificateRevocationListEntry, ppValue: ?*?*IX509Extensions) callconv(.Inline) HRESULT {
        return self.vtable.get_X509Extensions(self, ppValue);
    }
    pub fn get_CriticalExtensions(self: *const IX509CertificateRevocationListEntry, ppValue: ?*?*IObjectIds) callconv(.Inline) HRESULT {
        return self.vtable.get_CriticalExtensions(self, ppValue);
    }
};

const IID_IX509CertificateRevocationListEntries_Value = Guid.initString("728ab35f-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRevocationListEntries = &IID_IX509CertificateRevocationListEntries_Value;
pub const IX509CertificateRevocationListEntries = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: *const fn(
            self: *const IX509CertificateRevocationListEntries,
            Index: i32,
            pVal: ?*?*IX509CertificateRevocationListEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IX509CertificateRevocationListEntries,
            pVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn(
            self: *const IX509CertificateRevocationListEntries,
            pVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const IX509CertificateRevocationListEntries,
            pVal: ?*IX509CertificateRevocationListEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const IX509CertificateRevocationListEntries,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn(
            self: *const IX509CertificateRevocationListEntries,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IndexBySerialNumber: *const fn(
            self: *const IX509CertificateRevocationListEntries,
            Encoding: EncodingType,
            SerialNumber: ?BSTR,
            pIndex: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRange: *const fn(
            self: *const IX509CertificateRevocationListEntries,
            pValue: ?*IX509CertificateRevocationListEntries,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn get_ItemByIndex(self: *const IX509CertificateRevocationListEntries, Index: i32, pVal: ?*?*IX509CertificateRevocationListEntry) callconv(.Inline) HRESULT {
        return self.vtable.get_ItemByIndex(self, Index, pVal);
    }
    pub fn get_Count(self: *const IX509CertificateRevocationListEntries, pVal: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pVal);
    }
    pub fn get__NewEnum(self: *const IX509CertificateRevocationListEntries, pVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
        return self.vtable.get__NewEnum(self, pVal);
    }
    pub fn Add(self: *const IX509CertificateRevocationListEntries, pVal: ?*IX509CertificateRevocationListEntry) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, pVal);
    }
    pub fn Remove(self: *const IX509CertificateRevocationListEntries, Index: i32) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, Index);
    }
    pub fn Clear(self: *const IX509CertificateRevocationListEntries) callconv(.Inline) HRESULT {
        return self.vtable.Clear(self);
    }
    pub fn get_IndexBySerialNumber(self: *const IX509CertificateRevocationListEntries, Encoding: EncodingType, SerialNumber: ?BSTR, pIndex: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_IndexBySerialNumber(self, Encoding, SerialNumber, pIndex);
    }
    pub fn AddRange(self: *const IX509CertificateRevocationListEntries, pValue: ?*IX509CertificateRevocationListEntries) callconv(.Inline) HRESULT {
        return self.vtable.AddRange(self, pValue);
    }
};

const IID_IX509CertificateRevocationList_Value = Guid.initString("728ab360-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRevocationList = &IID_IX509CertificateRevocationList_Value;
pub const IX509CertificateRevocationList = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn(
            self: *const IX509CertificateRevocationList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn(
            self: *const IX509CertificateRevocationList,
            strEncodedData: ?BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: *const fn(
            self: *const IX509CertificateRevocationList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetForEncode: *const fn(
            self: *const IX509CertificateRevocationList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckPublicKeySignature: *const fn(
            self: *const IX509CertificateRevocationList,
            pPublicKey: ?*IX509PublicKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckSignature: *const fn(
            self: *const IX509CertificateRevocationList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Issuer: *const fn(
            self: *const IX509CertificateRevocationList,
            ppValue: ?*?*IX500DistinguishedName,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Issuer: *const fn(
            self: *const IX509CertificateRevocationList,
            pValue: ?*IX500DistinguishedName,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ThisUpdate: *const fn(
            self: *const IX509CertificateRevocationList,
            pValue: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ThisUpdate: *const fn(
            self: *const IX509CertificateRevocationList,
            Value: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NextUpdate: *const fn(
            self: *const IX509CertificateRevocationList,
            pValue: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NextUpdate: *const fn(
            self: *const IX509CertificateRevocationList,
            Value: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_X509CRLEntries: *const fn(
            self: *const IX509CertificateRevocationList,
            ppValue: ?*?*IX509CertificateRevocationListEntries,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_X509Extensions: *const fn(
            self: *const IX509CertificateRevocationList,
            ppValue: ?*?*IX509Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CriticalExtensions: *const fn(
            self: *const IX509CertificateRevocationList,
            ppValue: ?*?*IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SignerCertificate: *const fn(
            self: *const IX509CertificateRevocationList,
            ppValue: ?*?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SignerCertificate: *const fn(
            self: *const IX509CertificateRevocationList,
            pValue: ?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CRLNumber: *const fn(
            self: *const IX509CertificateRevocationList,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CRLNumber: *const fn(
            self: *const IX509CertificateRevocationList,
            Encoding: EncodingType,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CAVersion: *const fn(
            self: *const IX509CertificateRevocationList,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CAVersion: *const fn(
            self: *const IX509CertificateRevocationList,
            pValue: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BaseCRL: *const fn(
            self: *const IX509CertificateRevocationList,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NullSigned: *const fn(
            self: *const IX509CertificateRevocationList,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HashAlgorithm: *const fn(
            self: *const IX509CertificateRevocationList,
            ppValue: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HashAlgorithm: *const fn(
            self: *const IX509CertificateRevocationList,
            pValue: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AlternateSignatureAlgorithm: *const fn(
            self: *const IX509CertificateRevocationList,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AlternateSignatureAlgorithm: *const fn(
            self: *const IX509CertificateRevocationList,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SignatureInformation: *const fn(
            self: *const IX509CertificateRevocationList,
            ppValue: ?*?*IX509SignatureInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RawData: *const fn(
            self: *const IX509CertificateRevocationList,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RawDataToBeSigned: *const fn(
            self: *const IX509CertificateRevocationList,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Signature: *const fn(
            self: *const IX509CertificateRevocationList,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IX509CertificateRevocationList) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self);
    }
    pub fn InitializeDecode(self: *const IX509CertificateRevocationList, strEncodedData: ?BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
        return self.vtable.InitializeDecode(self, strEncodedData, Encoding);
    }
    pub fn Encode(self: *const IX509CertificateRevocationList) callconv(.Inline) HRESULT {
        return self.vtable.Encode(self);
    }
    pub fn ResetForEncode(self: *const IX509CertificateRevocationList) callconv(.Inline) HRESULT {
        return self.vtable.ResetForEncode(self);
    }
    pub fn CheckPublicKeySignature(self: *const IX509CertificateRevocationList, pPublicKey: ?*IX509PublicKey) callconv(.Inline) HRESULT {
        return self.vtable.CheckPublicKeySignature(self, pPublicKey);
    }
    pub fn CheckSignature(self: *const IX509CertificateRevocationList) callconv(.Inline) HRESULT {
        return self.vtable.CheckSignature(self);
    }
    pub fn get_Issuer(self: *const IX509CertificateRevocationList, ppValue: ?*?*IX500DistinguishedName) callconv(.Inline) HRESULT {
        return self.vtable.get_Issuer(self, ppValue);
    }
    pub fn put_Issuer(self: *const IX509CertificateRevocationList, pValue: ?*IX500DistinguishedName) callconv(.Inline) HRESULT {
        return self.vtable.put_Issuer(self, pValue);
    }
    pub fn get_ThisUpdate(self: *const IX509CertificateRevocationList, pValue: ?*f64) callconv(.Inline) HRESULT {
        return self.vtable.get_ThisUpdate(self, pValue);
    }
    pub fn put_ThisUpdate(self: *const IX509CertificateRevocationList, Value: f64) callconv(.Inline) HRESULT {
        return self.vtable.put_ThisUpdate(self, Value);
    }
    pub fn get_NextUpdate(self: *const IX509CertificateRevocationList, pValue: ?*f64) callconv(.Inline) HRESULT {
        return self.vtable.get_NextUpdate(self, pValue);
    }
    pub fn put_NextUpdate(self: *const IX509CertificateRevocationList, Value: f64) callconv(.Inline) HRESULT {
        return self.vtable.put_NextUpdate(self, Value);
    }
    pub fn get_X509CRLEntries(self: *const IX509CertificateRevocationList, ppValue: ?*?*IX509CertificateRevocationListEntries) callconv(.Inline) HRESULT {
        return self.vtable.get_X509CRLEntries(self, ppValue);
    }
    pub fn get_X509Extensions(self: *const IX509CertificateRevocationList, ppValue: ?*?*IX509Extensions) callconv(.Inline) HRESULT {
        return self.vtable.get_X509Extensions(self, ppValue);
    }
    pub fn get_CriticalExtensions(self: *const IX509CertificateRevocationList, ppValue: ?*?*IObjectIds) callconv(.Inline) HRESULT {
        return self.vtable.get_CriticalExtensions(self, ppValue);
    }
    pub fn get_SignerCertificate(self: *const IX509CertificateRevocationList, ppValue: ?*?*ISignerCertificate) callconv(.Inline) HRESULT {
        return self.vtable.get_SignerCertificate(self, ppValue);
    }
    pub fn put_SignerCertificate(self: *const IX509CertificateRevocationList, pValue: ?*ISignerCertificate) callconv(.Inline) HRESULT {
        return self.vtable.put_SignerCertificate(self, pValue);
    }
    pub fn get_CRLNumber(self: *const IX509CertificateRevocationList, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_CRLNumber(self, Encoding, pValue);
    }
    pub fn put_CRLNumber(self: *const IX509CertificateRevocationList, Encoding: EncodingType, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_CRLNumber(self, Encoding, Value);
    }
    pub fn get_CAVersion(self: *const IX509CertificateRevocationList, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_CAVersion(self, pValue);
    }
    pub fn put_CAVersion(self: *const IX509CertificateRevocationList, pValue: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_CAVersion(self, pValue);
    }
    pub fn get_BaseCRL(self: *const IX509CertificateRevocationList, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_BaseCRL(self, pValue);
    }
    pub fn get_NullSigned(self: *const IX509CertificateRevocationList, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_NullSigned(self, pValue);
    }
    pub fn get_HashAlgorithm(self: *const IX509CertificateRevocationList, ppValue: ?*?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.get_HashAlgorithm(self, ppValue);
    }
    pub fn put_HashAlgorithm(self: *const IX509CertificateRevocationList, pValue: ?*IObjectId) callconv(.Inline) HRESULT {
        return self.vtable.put_HashAlgorithm(self, pValue);
    }
    pub fn get_AlternateSignatureAlgorithm(self: *const IX509CertificateRevocationList, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_AlternateSignatureAlgorithm(self, pValue);
    }
    pub fn put_AlternateSignatureAlgorithm(self: *const IX509CertificateRevocationList, Value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_AlternateSignatureAlgorithm(self, Value);
    }
    pub fn get_SignatureInformation(self: *const IX509CertificateRevocationList, ppValue: ?*?*IX509SignatureInformation) callconv(.Inline) HRESULT {
        return self.vtable.get_SignatureInformation(self, ppValue);
    }
    pub fn get_RawData(self: *const IX509CertificateRevocationList, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RawData(self, Encoding, pValue);
    }
    pub fn get_RawDataToBeSigned(self: *const IX509CertificateRevocationList, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RawDataToBeSigned(self, Encoding, pValue);
    }
    pub fn get_Signature(self: *const IX509CertificateRevocationList, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Signature(self, Encoding, pValue);
    }
};

const IID_ICertificateAttestationChallenge_Value = Guid.initString("6f175a7c-4a3a-40ae-9dba-592fd6bbf9b8");
pub const IID_ICertificateAttestationChallenge = &IID_ICertificateAttestationChallenge_Value;
pub const ICertificateAttestationChallenge = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn(
            self: *const ICertificateAttestationChallenge,
            Encoding: EncodingType,
            strPendingFullCmcResponseWithChallenge: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DecryptChallenge: *const fn(
            self: *const ICertificateAttestationChallenge,
            Encoding: EncodingType,
            pstrEnvelopedPkcs7ReencryptedToCA: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestID: *const fn(
            self: *const ICertificateAttestationChallenge,
            pstrRequestID: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const ICertificateAttestationChallenge, Encoding: EncodingType, strPendingFullCmcResponseWithChallenge: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, Encoding, strPendingFullCmcResponseWithChallenge);
    }
    pub fn DecryptChallenge(self: *const ICertificateAttestationChallenge, Encoding: EncodingType, pstrEnvelopedPkcs7ReencryptedToCA: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.DecryptChallenge(self, Encoding, pstrEnvelopedPkcs7ReencryptedToCA);
    }
    pub fn get_RequestID(self: *const ICertificateAttestationChallenge, pstrRequestID: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RequestID(self, pstrRequestID);
    }
};

const IID_ICertificateAttestationChallenge2_Value = Guid.initString("4631334d-e266-47d6-bd79-be53cb2e2753");
pub const IID_ICertificateAttestationChallenge2 = &IID_ICertificateAttestationChallenge2_Value;
pub const ICertificateAttestationChallenge2 = extern union {
    pub const VTable = extern struct {
        base: ICertificateAttestationChallenge.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_KeyContainerName: *const fn(
            self: *const ICertificateAttestationChallenge2,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_KeyBlob: *const fn(
            self: *const ICertificateAttestationChallenge2,
            Encoding: EncodingType,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertificateAttestationChallenge: ICertificateAttestationChallenge,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_KeyContainerName(self: *const ICertificateAttestationChallenge2, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_KeyContainerName(self, Value);
    }
    pub fn put_KeyBlob(self: *const ICertificateAttestationChallenge2, Encoding: EncodingType, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_KeyBlob(self, Encoding, Value);
    }
};

const IID_IX509SCEPEnrollment_Value = Guid.initString("728ab361-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509SCEPEnrollment = &IID_IX509SCEPEnrollment_Value;
pub const IX509SCEPEnrollment = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn(
            self: *const IX509SCEPEnrollment,
            pRequest: ?*IX509CertificateRequestPkcs10,
            strThumbprint: ?BSTR,
            ThumprintEncoding: EncodingType,
            strServerCertificates: ?BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeForPending: *const fn(
            self: *const IX509SCEPEnrollment,
            Context: X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRequestMessage: *const fn(
            self: *const IX509SCEPEnrollment,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRetrievePendingMessage: *const fn(
            self: *const IX509SCEPEnrollment,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRetrieveCertificateMessage: *const fn(
            self: *const IX509SCEPEnrollment,
            Context: X509CertificateEnrollmentContext,
            strIssuer: ?BSTR,
            IssuerEncoding: EncodingType,
            strSerialNumber: ?BSTR,
            SerialNumberEncoding: EncodingType,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProcessResponseMessage: *const fn(
            self: *const IX509SCEPEnrollment,
            strResponse: ?BSTR,
            Encoding: EncodingType,
            pDisposition: ?*X509SCEPDisposition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ServerCapabilities: *const fn(
            self: *const IX509SCEPEnrollment,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FailInfo: *const fn(
            self: *const IX509SCEPEnrollment,
            pValue: ?*X509SCEPFailInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SignerCertificate: *const fn(
            self: *const IX509SCEPEnrollment,
            ppValue: ?*?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SignerCertificate: *const fn(
            self: *const IX509SCEPEnrollment,
            pValue: ?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OldCertificate: *const fn(
            self: *const IX509SCEPEnrollment,
            ppValue: ?*?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OldCertificate: *const fn(
            self: *const IX509SCEPEnrollment,
            pValue: ?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_TransactionId: *const fn(
            self: *const IX509SCEPEnrollment,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_TransactionId: *const fn(
            self: *const IX509SCEPEnrollment,
            Encoding: EncodingType,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Request: *const fn(
            self: *const IX509SCEPEnrollment,
            ppValue: ?*?*IX509CertificateRequestPkcs10,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CertificateFriendlyName: *const fn(
            self: *const IX509SCEPEnrollment,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CertificateFriendlyName: *const fn(
            self: *const IX509SCEPEnrollment,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn(
            self: *const IX509SCEPEnrollment,
            ppValue: ?*?*IX509EnrollmentStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Certificate: *const fn(
            self: *const IX509SCEPEnrollment,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Silent: *const fn(
            self: *const IX509SCEPEnrollment,
            pValue: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Silent: *const fn(
            self: *const IX509SCEPEnrollment,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteRequest: *const fn(
            self: *const IX509SCEPEnrollment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IX509SCEPEnrollment, pRequest: ?*IX509CertificateRequestPkcs10, strThumbprint: ?BSTR, ThumprintEncoding: EncodingType, strServerCertificates: ?BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, pRequest, strThumbprint, ThumprintEncoding, strServerCertificates, Encoding);
    }
    pub fn InitializeForPending(self: *const IX509SCEPEnrollment, Context: X509CertificateEnrollmentContext) callconv(.Inline) HRESULT {
        return self.vtable.InitializeForPending(self, Context);
    }
    pub fn CreateRequestMessage(self: *const IX509SCEPEnrollment, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.CreateRequestMessage(self, Encoding, pValue);
    }
    pub fn CreateRetrievePendingMessage(self: *const IX509SCEPEnrollment, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.CreateRetrievePendingMessage(self, Encoding, pValue);
    }
    pub fn CreateRetrieveCertificateMessage(self: *const IX509SCEPEnrollment, Context: X509CertificateEnrollmentContext, strIssuer: ?BSTR, IssuerEncoding: EncodingType, strSerialNumber: ?BSTR, SerialNumberEncoding: EncodingType, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.CreateRetrieveCertificateMessage(self, Context, strIssuer, IssuerEncoding, strSerialNumber, SerialNumberEncoding, Encoding, pValue);
    }
    pub fn ProcessResponseMessage(self: *const IX509SCEPEnrollment, strResponse: ?BSTR, Encoding: EncodingType, pDisposition: ?*X509SCEPDisposition) callconv(.Inline) HRESULT {
        return self.vtable.ProcessResponseMessage(self, strResponse, Encoding, pDisposition);
    }
    pub fn put_ServerCapabilities(self: *const IX509SCEPEnrollment, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ServerCapabilities(self, Value);
    }
    pub fn get_FailInfo(self: *const IX509SCEPEnrollment, pValue: ?*X509SCEPFailInfo) callconv(.Inline) HRESULT {
        return self.vtable.get_FailInfo(self, pValue);
    }
    pub fn get_SignerCertificate(self: *const IX509SCEPEnrollment, ppValue: ?*?*ISignerCertificate) callconv(.Inline) HRESULT {
        return self.vtable.get_SignerCertificate(self, ppValue);
    }
    pub fn put_SignerCertificate(self: *const IX509SCEPEnrollment, pValue: ?*ISignerCertificate) callconv(.Inline) HRESULT {
        return self.vtable.put_SignerCertificate(self, pValue);
    }
    pub fn get_OldCertificate(self: *const IX509SCEPEnrollment, ppValue: ?*?*ISignerCertificate) callconv(.Inline) HRESULT {
        return self.vtable.get_OldCertificate(self, ppValue);
    }
    pub fn put_OldCertificate(self: *const IX509SCEPEnrollment, pValue: ?*ISignerCertificate) callconv(.Inline) HRESULT {
        return self.vtable.put_OldCertificate(self, pValue);
    }
    pub fn get_TransactionId(self: *const IX509SCEPEnrollment, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_TransactionId(self, Encoding, pValue);
    }
    pub fn put_TransactionId(self: *const IX509SCEPEnrollment, Encoding: EncodingType, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_TransactionId(self, Encoding, Value);
    }
    pub fn get_Request(self: *const IX509SCEPEnrollment, ppValue: ?*?*IX509CertificateRequestPkcs10) callconv(.Inline) HRESULT {
        return self.vtable.get_Request(self, ppValue);
    }
    pub fn get_CertificateFriendlyName(self: *const IX509SCEPEnrollment, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_CertificateFriendlyName(self, pValue);
    }
    pub fn put_CertificateFriendlyName(self: *const IX509SCEPEnrollment, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_CertificateFriendlyName(self, Value);
    }
    pub fn get_Status(self: *const IX509SCEPEnrollment, ppValue: ?*?*IX509EnrollmentStatus) callconv(.Inline) HRESULT {
        return self.vtable.get_Status(self, ppValue);
    }
    pub fn get_Certificate(self: *const IX509SCEPEnrollment, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Certificate(self, Encoding, pValue);
    }
    pub fn get_Silent(self: *const IX509SCEPEnrollment, pValue: ?*i16) callconv(.Inline) HRESULT {
        return self.vtable.get_Silent(self, pValue);
    }
    pub fn put_Silent(self: *const IX509SCEPEnrollment, Value: i16) callconv(.Inline) HRESULT {
        return self.vtable.put_Silent(self, Value);
    }
    pub fn DeleteRequest(self: *const IX509SCEPEnrollment) callconv(.Inline) HRESULT {
        return self.vtable.DeleteRequest(self);
    }
};

pub const X509SCEPProcessMessageFlags = enum(i32) {
    Default = 0,
    SkipCertInstall = 1,
};
pub const SCEPProcessDefault = X509SCEPProcessMessageFlags.Default;
pub const SCEPProcessSkipCertInstall = X509SCEPProcessMessageFlags.SkipCertInstall;

pub const DelayRetryAction = enum(i32) {
    Unknown = 0,
    None = 1,
    Short = 2,
    Long = 3,
    Success = 4,
    PastSuccess = 5,
};
pub const DelayRetryUnknown = DelayRetryAction.Unknown;
pub const DelayRetryNone = DelayRetryAction.None;
pub const DelayRetryShort = DelayRetryAction.Short;
pub const DelayRetryLong = DelayRetryAction.Long;
pub const DelayRetrySuccess = DelayRetryAction.Success;
pub const DelayRetryPastSuccess = DelayRetryAction.PastSuccess;

const IID_IX509SCEPEnrollment2_Value = Guid.initString("728ab364-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509SCEPEnrollment2 = &IID_IX509SCEPEnrollment2_Value;
pub const IX509SCEPEnrollment2 = extern union {
    pub const VTable = extern struct {
        base: IX509SCEPEnrollment.VTable,
        CreateChallengeAnswerMessage: *const fn(
            self: *const IX509SCEPEnrollment2,
            Encoding: EncodingType,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProcessResponseMessage2: *const fn(
            self: *const IX509SCEPEnrollment2,
            Flags: X509SCEPProcessMessageFlags,
            strResponse: ?BSTR,
            Encoding: EncodingType,
            pDisposition: ?*X509SCEPDisposition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResultMessageText: *const fn(
            self: *const IX509SCEPEnrollment2,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DelayRetry: *const fn(
            self: *const IX509SCEPEnrollment2,
            pValue: ?*DelayRetryAction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ActivityId: *const fn(
            self: *const IX509SCEPEnrollment2,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ActivityId: *const fn(
            self: *const IX509SCEPEnrollment2,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IX509SCEPEnrollment: IX509SCEPEnrollment,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn CreateChallengeAnswerMessage(self: *const IX509SCEPEnrollment2, Encoding: EncodingType, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.CreateChallengeAnswerMessage(self, Encoding, pValue);
    }
    pub fn ProcessResponseMessage2(self: *const IX509SCEPEnrollment2, Flags: X509SCEPProcessMessageFlags, strResponse: ?BSTR, Encoding: EncodingType, pDisposition: ?*X509SCEPDisposition) callconv(.Inline) HRESULT {
        return self.vtable.ProcessResponseMessage2(self, Flags, strResponse, Encoding, pDisposition);
    }
    pub fn get_ResultMessageText(self: *const IX509SCEPEnrollment2, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ResultMessageText(self, pValue);
    }
    pub fn get_DelayRetry(self: *const IX509SCEPEnrollment2, pValue: ?*DelayRetryAction) callconv(.Inline) HRESULT {
        return self.vtable.get_DelayRetry(self, pValue);
    }
    pub fn get_ActivityId(self: *const IX509SCEPEnrollment2, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ActivityId(self, pValue);
    }
    pub fn put_ActivityId(self: *const IX509SCEPEnrollment2, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ActivityId(self, Value);
    }
};

const IID_IX509SCEPEnrollmentHelper_Value = Guid.initString("728ab365-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509SCEPEnrollmentHelper = &IID_IX509SCEPEnrollmentHelper_Value;
pub const IX509SCEPEnrollmentHelper = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn(
            self: *const IX509SCEPEnrollmentHelper,
            strServerUrl: ?BSTR,
            strRequestHeaders: ?BSTR,
            pRequest: ?*IX509CertificateRequestPkcs10,
            strCACertificateThumbprint: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeForPending: *const fn(
            self: *const IX509SCEPEnrollmentHelper,
            strServerUrl: ?BSTR,
            strRequestHeaders: ?BSTR,
            Context: X509CertificateEnrollmentContext,
            strTransactionId: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enroll: *const fn(
            self: *const IX509SCEPEnrollmentHelper,
            ProcessFlags: X509SCEPProcessMessageFlags,
            pDisposition: ?*X509SCEPDisposition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FetchPending: *const fn(
            self: *const IX509SCEPEnrollmentHelper,
            ProcessFlags: X509SCEPProcessMessageFlags,
            pDisposition: ?*X509SCEPDisposition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_X509SCEPEnrollment: *const fn(
            self: *const IX509SCEPEnrollmentHelper,
            ppValue: ?*?*IX509SCEPEnrollment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResultMessageText: *const fn(
            self: *const IX509SCEPEnrollmentHelper,
            pValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const IX509SCEPEnrollmentHelper, strServerUrl: ?BSTR, strRequestHeaders: ?BSTR, pRequest: ?*IX509CertificateRequestPkcs10, strCACertificateThumbprint: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, strServerUrl, strRequestHeaders, pRequest, strCACertificateThumbprint);
    }
    pub fn InitializeForPending(self: *const IX509SCEPEnrollmentHelper, strServerUrl: ?BSTR, strRequestHeaders: ?BSTR, Context: X509CertificateEnrollmentContext, strTransactionId: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InitializeForPending(self, strServerUrl, strRequestHeaders, Context, strTransactionId);
    }
    pub fn Enroll(self: *const IX509SCEPEnrollmentHelper, ProcessFlags: X509SCEPProcessMessageFlags, pDisposition: ?*X509SCEPDisposition) callconv(.Inline) HRESULT {
        return self.vtable.Enroll(self, ProcessFlags, pDisposition);
    }
    pub fn FetchPending(self: *const IX509SCEPEnrollmentHelper, ProcessFlags: X509SCEPProcessMessageFlags, pDisposition: ?*X509SCEPDisposition) callconv(.Inline) HRESULT {
        return self.vtable.FetchPending(self, ProcessFlags, pDisposition);
    }
    pub fn get_X509SCEPEnrollment(self: *const IX509SCEPEnrollmentHelper, ppValue: ?*?*IX509SCEPEnrollment) callconv(.Inline) HRESULT {
        return self.vtable.get_X509SCEPEnrollment(self, ppValue);
    }
    pub fn get_ResultMessageText(self: *const IX509SCEPEnrollmentHelper, pValue: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ResultMessageText(self, pValue);
    }
};

pub const X509CertificateTemplateGeneralFlag = enum(i32) {
    MachineType = 64,
    CA = 128,
    CrossCA = 2048,
    Default = 65536,
    Modified = 131072,
    DonotPersist = 4096,
};
pub const GeneralMachineType = X509CertificateTemplateGeneralFlag.MachineType;
pub const GeneralCA = X509CertificateTemplateGeneralFlag.CA;
pub const GeneralCrossCA = X509CertificateTemplateGeneralFlag.CrossCA;
pub const GeneralDefault = X509CertificateTemplateGeneralFlag.Default;
pub const GeneralModified = X509CertificateTemplateGeneralFlag.Modified;
pub const GeneralDonotPersist = X509CertificateTemplateGeneralFlag.DonotPersist;

pub const X509CertificateTemplateEnrollmentFlag = enum(i32) {
    IncludeSymmetricAlgorithms = 1,
    PendAllRequests = 2,
    PublishToKRAContainer = 4,
    PublishToDS = 8,
    AutoEnrollmentCheckUserDSCertificate = 16,
    AutoEnrollment = 32,
    DomainAuthenticationNotRequired = 128,
    PreviousApprovalValidateReenrollment = 64,
    UserInteractionRequired = 256,
    AddTemplateName = 512,
    RemoveInvalidCertificateFromPersonalStore = 1024,
    AllowEnrollOnBehalfOf = 2048,
    AddOCSPNoCheck = 4096,
    ReuseKeyOnFullSmartCard = 8192,
    NoRevocationInfoInCerts = 16384,
    IncludeBasicConstraintsForEECerts = 32768,
    PreviousApprovalKeyBasedValidateReenrollment = 65536,
    CertificateIssuancePoliciesFromRequest = 131072,
    SkipAutoRenewal = 262144,
};
pub const EnrollmentIncludeSymmetricAlgorithms = X509CertificateTemplateEnrollmentFlag.IncludeSymmetricAlgorithms;
pub const EnrollmentPendAllRequests = X509CertificateTemplateEnrollmentFlag.PendAllRequests;
pub const EnrollmentPublishToKRAContainer = X509CertificateTemplateEnrollmentFlag.PublishToKRAContainer;
pub const EnrollmentPublishToDS = X509CertificateTemplateEnrollmentFlag.PublishToDS;
pub const EnrollmentAutoEnrollmentCheckUserDSCertificate = X509CertificateTemplateEnrollmentFlag.AutoEnrollmentCheckUserDSCertificate;
pub const EnrollmentAutoEnrollment = X509CertificateTemplateEnrollmentFlag.AutoEnrollment;
pub const EnrollmentDomainAuthenticationNotRequired = X509CertificateTemplateEnrollmentFlag.DomainAuthenticationNotRequired;
pub const EnrollmentPreviousApprovalValidateReenrollment = X509CertificateTemplateEnrollmentFlag.PreviousApprovalValidateReenrollment;
pub const EnrollmentUserInteractionRequired = X509CertificateTemplateEnrollmentFlag.UserInteractionRequired;
pub const EnrollmentAddTemplateName = X509CertificateTemplateEnrollmentFlag.AddTemplateName;
pub const EnrollmentRemoveInvalidCertificateFromPersonalStore = X509CertificateTemplateEnrollmentFlag.RemoveInvalidCertificateFromPersonalStore;
pub const EnrollmentAllowEnrollOnBehalfOf = X509CertificateTemplateEnrollmentFlag.AllowEnrollOnBehalfOf;
pub const EnrollmentAddOCSPNoCheck = X509CertificateTemplateEnrollmentFlag.AddOCSPNoCheck;
pub const EnrollmentReuseKeyOnFullSmartCard = X509CertificateTemplateEnrollmentFlag.ReuseKeyOnFullSmartCard;
pub const EnrollmentNoRevocationInfoInCerts = X509CertificateTemplateEnrollmentFlag.NoRevocationInfoInCerts;
pub const EnrollmentIncludeBasicConstraintsForEECerts = X509CertificateTemplateEnrollmentFlag.IncludeBasicConstraintsForEECerts;
pub const EnrollmentPreviousApprovalKeyBasedValidateReenrollment = X509CertificateTemplateEnrollmentFlag.PreviousApprovalKeyBasedValidateReenrollment;
pub const EnrollmentCertificateIssuancePoliciesFromRequest = X509CertificateTemplateEnrollmentFlag.CertificateIssuancePoliciesFromRequest;
pub const EnrollmentSkipAutoRenewal = X509CertificateTemplateEnrollmentFlag.SkipAutoRenewal;

pub const X509CertificateTemplateSubjectNameFlag = enum(i32) {
    NameEnrolleeSupplies = 1,
    NameRequireDirectoryPath = -2147483648,
    NameRequireCommonName = 1073741824,
    NameRequireEmail = 536870912,
    NameRequireDNS = 268435456,
    NameAndAlternativeNameOldCertSupplies = 8,
    AlternativeNameEnrolleeSupplies = 65536,
    AlternativeNameRequireDirectoryGUID = 16777216,
    AlternativeNameRequireUPN = 33554432,
    AlternativeNameRequireEmail = 67108864,
    AlternativeNameRequireSPN = 8388608,
    AlternativeNameRequireDNS = 134217728,
    AlternativeNameRequireDomainDNS = 4194304,
};
pub const SubjectNameEnrolleeSupplies = X509CertificateTemplateSubjectNameFlag.NameEnrolleeSupplies;
pub const SubjectNameRequireDirectoryPath = X509CertificateTemplateSubjectNameFlag.NameRequireDirectoryPath;
pub const SubjectNameRequireCommonName = X509CertificateTemplateSubjectNameFlag.NameRequireCommonName;
pub const SubjectNameRequireEmail = X509CertificateTemplateSubjectNameFlag.NameRequireEmail;
pub const SubjectNameRequireDNS = X509CertificateTemplateSubjectNameFlag.NameRequireDNS;
pub const SubjectNameAndAlternativeNameOldCertSupplies = X509CertificateTemplateSubjectNameFlag.NameAndAlternativeNameOldCertSupplies;
pub const SubjectAlternativeNameEnrolleeSupplies = X509CertificateTemplateSubjectNameFlag.AlternativeNameEnrolleeSupplies;
pub const SubjectAlternativeNameRequireDirectoryGUID = X509CertificateTemplateSubjectNameFlag.AlternativeNameRequireDirectoryGUID;
pub const SubjectAlternativeNameRequireUPN = X509CertificateTemplateSubjectNameFlag.AlternativeNameRequireUPN;
pub const SubjectAlternativeNameRequireEmail = X509CertificateTemplateSubjectNameFlag.AlternativeNameRequireEmail;
pub const SubjectAlternativeNameRequireSPN = X509CertificateTemplateSubjectNameFlag.AlternativeNameRequireSPN;
pub const SubjectAlternativeNameRequireDNS = X509CertificateTemplateSubjectNameFlag.AlternativeNameRequireDNS;
pub const SubjectAlternativeNameRequireDomainDNS = X509CertificateTemplateSubjectNameFlag.AlternativeNameRequireDomainDNS;

pub const X509CertificateTemplatePrivateKeyFlag = enum(i32) {
    RequireArchival = 1,
    Exportable = 16,
    RequireStrongKeyProtection = 32,
    RequireAlternateSignatureAlgorithm = 64,
    RequireSameKeyRenewal = 128,
    UseLegacyProvider = 256,
    EKTrustOnUse = 512,
    EKValidateCert = 1024,
    EKValidateKey = 2048,
    AttestNone = 0,
    AttestPreferred = 4096,
    AttestRequired = 8192,
    AttestMask = 12288,
    AttestWithoutPolicy = 16384,
    ServerVersionMask = 983040,
    HelloKspKey = 1048576,
    HelloLogonKey = 2097152,
    ClientVersionMask = 251658240,
    ClientVersionShift = 24,
    pub const ServerVersionShift = .Exportable;
};
pub const PrivateKeyRequireArchival = X509CertificateTemplatePrivateKeyFlag.RequireArchival;
pub const PrivateKeyExportable = X509CertificateTemplatePrivateKeyFlag.Exportable;
pub const PrivateKeyRequireStrongKeyProtection = X509CertificateTemplatePrivateKeyFlag.RequireStrongKeyProtection;
pub const PrivateKeyRequireAlternateSignatureAlgorithm = X509CertificateTemplatePrivateKeyFlag.RequireAlternateSignatureAlgorithm;
pub const PrivateKeyRequireSameKeyRenewal = X509CertificateTemplatePrivateKeyFlag.RequireSameKeyRenewal;
pub const PrivateKeyUseLegacyProvider = X509CertificateTemplatePrivateKeyFlag.UseLegacyProvider;
pub const PrivateKeyEKTrustOnUse = X509CertificateTemplatePrivateKeyFlag.EKTrustOnUse;
pub const PrivateKeyEKValidateCert = X509CertificateTemplatePrivateKeyFlag.EKValidateCert;
pub const PrivateKeyEKValidateKey = X509CertificateTemplatePrivateKeyFlag.EKValidateKey;
pub const PrivateKeyAttestNone = X509CertificateTemplatePrivateKeyFlag.AttestNone;
pub const PrivateKeyAttestPreferred = X509CertificateTemplatePrivateKeyFlag.AttestPreferred;
pub const PrivateKeyAttestRequired = X509CertificateTemplatePrivateKeyFlag.AttestRequired;
pub const PrivateKeyAttestMask = X509CertificateTemplatePrivateKeyFlag.AttestMask;
pub const PrivateKeyAttestWithoutPolicy = X509CertificateTemplatePrivateKeyFlag.AttestWithoutPolicy;
pub const PrivateKeyServerVersionMask = X509CertificateTemplatePrivateKeyFlag.ServerVersionMask;
pub const PrivateKeyServerVersionShift = X509CertificateTemplatePrivateKeyFlag.Exportable;
pub const PrivateKeyHelloKspKey = X509CertificateTemplatePrivateKeyFlag.HelloKspKey;
pub const PrivateKeyHelloLogonKey = X509CertificateTemplatePrivateKeyFlag.HelloLogonKey;
pub const PrivateKeyClientVersionMask = X509CertificateTemplatePrivateKeyFlag.ClientVersionMask;
pub const PrivateKeyClientVersionShift = X509CertificateTemplatePrivateKeyFlag.ClientVersionShift;

pub const ImportPFXFlags = enum(i32) {
    None = 0,
    MachineContext = 1,
    ForceOverwrite = 2,
    Silent = 4,
    SaveProperties = 8,
    Exportable = 16,
    ExportableEncrypted = 32,
    NoUserProtected = 64,
    UserProtected = 128,
    UserProtectedHigh = 256,
    InstallCertificate = 512,
    InstallChain = 1024,
    InstallChainAndRoot = 2048,
};
pub const ImportNone = ImportPFXFlags.None;
pub const ImportMachineContext = ImportPFXFlags.MachineContext;
pub const ImportForceOverwrite = ImportPFXFlags.ForceOverwrite;
pub const ImportSilent = ImportPFXFlags.Silent;
pub const ImportSaveProperties = ImportPFXFlags.SaveProperties;
pub const ImportExportable = ImportPFXFlags.Exportable;
pub const ImportExportableEncrypted = ImportPFXFlags.ExportableEncrypted;
pub const ImportNoUserProtected = ImportPFXFlags.NoUserProtected;
pub const ImportUserProtected = ImportPFXFlags.UserProtected;
pub const ImportUserProtectedHigh = ImportPFXFlags.UserProtectedHigh;
pub const ImportInstallCertificate = ImportPFXFlags.InstallCertificate;
pub const ImportInstallChain = ImportPFXFlags.InstallChain;
pub const ImportInstallChainAndRoot = ImportPFXFlags.InstallChainAndRoot;

pub const FNIMPORTPFXTOPROVIDER = *const fn(
    hWndParent: ?HWND,
    // TODO: what to do with BytesParamIndex 2?
    pbPFX: ?*const u8,
    cbPFX: u32,
    ImportFlags: ImportPFXFlags,
    pwszPassword: ?[*:0]const u16,
    pwszProviderName: ?[*:0]const u16,
    pwszReaderName: ?[*:0]const u16,
    pwszContainerNamePrefix: ?[*:0]const u16,
    pwszPin: ?[*:0]const u16,
    pwszFriendlyName: ?[*:0]const u16,
    pcCertOut: ?*u32,
    prgpCertOut: ?*?*?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNIMPORTPFXTOPROVIDERFREEDATA = *const fn(
    cCert: u32,
    rgpCert: ?[*]?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertEncodeStringArray_Value = Guid.initString("12a88820-7494-11d0-8816-00a0c903b83c");
pub const IID_ICertEncodeStringArray = &IID_ICertEncodeStringArray_Value;
pub const ICertEncodeStringArray = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Decode: *const fn(
            self: *const ICertEncodeStringArray,
            strBinary: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringType: *const fn(
            self: *const ICertEncodeStringArray,
            pStringType: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn(
            self: *const ICertEncodeStringArray,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn(
            self: *const ICertEncodeStringArray,
            Index: i32,
            pstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const ICertEncodeStringArray,
            Count: i32,
            StringType: CERT_RDN_ATTR_VALUE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValue: *const fn(
            self: *const ICertEncodeStringArray,
            Index: i32,
            str: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: *const fn(
            self: *const ICertEncodeStringArray,
            pstrBinary: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Decode(self: *const ICertEncodeStringArray, strBinary: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Decode(self, strBinary);
    }
    pub fn GetStringType(self: *const ICertEncodeStringArray, pStringType: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetStringType(self, pStringType);
    }
    pub fn GetCount(self: *const ICertEncodeStringArray, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCount(self, pCount);
    }
    pub fn GetValue(self: *const ICertEncodeStringArray, Index: i32, pstr: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetValue(self, Index, pstr);
    }
    pub fn Reset(self: *const ICertEncodeStringArray, Count: i32, StringType: CERT_RDN_ATTR_VALUE_TYPE) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self, Count, StringType);
    }
    pub fn SetValue(self: *const ICertEncodeStringArray, Index: i32, str: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.SetValue(self, Index, str);
    }
    pub fn Encode(self: *const ICertEncodeStringArray, pstrBinary: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Encode(self, pstrBinary);
    }
};

const IID_ICertEncodeStringArray2_Value = Guid.initString("9c680d93-9b7d-4e95-9018-4ffe10ba5ada");
pub const IID_ICertEncodeStringArray2 = &IID_ICertEncodeStringArray2_Value;
pub const ICertEncodeStringArray2 = extern union {
    pub const VTable = extern struct {
        base: ICertEncodeStringArray.VTable,
        DecodeBlob: *const fn(
            self: *const ICertEncodeStringArray2,
            strEncodedData: ?BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EncodeBlob: *const fn(
            self: *const ICertEncodeStringArray2,
            Encoding: EncodingType,
            pstrEncodedData: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertEncodeStringArray: ICertEncodeStringArray,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn DecodeBlob(self: *const ICertEncodeStringArray2, strEncodedData: ?BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
        return self.vtable.DecodeBlob(self, strEncodedData, Encoding);
    }
    pub fn EncodeBlob(self: *const ICertEncodeStringArray2, Encoding: EncodingType, pstrEncodedData: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.EncodeBlob(self, Encoding, pstrEncodedData);
    }
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertEncodeLongArray_Value = Guid.initString("15e2f230-a0a2-11d0-8821-00a0c903b83c");
pub const IID_ICertEncodeLongArray = &IID_ICertEncodeLongArray_Value;
pub const ICertEncodeLongArray = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Decode: *const fn(
            self: *const ICertEncodeLongArray,
            strBinary: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn(
            self: *const ICertEncodeLongArray,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn(
            self: *const ICertEncodeLongArray,
            Index: i32,
            pValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const ICertEncodeLongArray,
            Count: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValue: *const fn(
            self: *const ICertEncodeLongArray,
            Index: i32,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: *const fn(
            self: *const ICertEncodeLongArray,
            pstrBinary: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Decode(self: *const ICertEncodeLongArray, strBinary: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Decode(self, strBinary);
    }
    pub fn GetCount(self: *const ICertEncodeLongArray, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCount(self, pCount);
    }
    pub fn GetValue(self: *const ICertEncodeLongArray, Index: i32, pValue: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetValue(self, Index, pValue);
    }
    pub fn Reset(self: *const ICertEncodeLongArray, Count: i32) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self, Count);
    }
    pub fn SetValue(self: *const ICertEncodeLongArray, Index: i32, Value: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetValue(self, Index, Value);
    }
    pub fn Encode(self: *const ICertEncodeLongArray, pstrBinary: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Encode(self, pstrBinary);
    }
};

const IID_ICertEncodeLongArray2_Value = Guid.initString("4efde84a-bd9b-4fc2-a108-c347d478840f");
pub const IID_ICertEncodeLongArray2 = &IID_ICertEncodeLongArray2_Value;
pub const ICertEncodeLongArray2 = extern union {
    pub const VTable = extern struct {
        base: ICertEncodeLongArray.VTable,
        DecodeBlob: *const fn(
            self: *const ICertEncodeLongArray2,
            strEncodedData: ?BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EncodeBlob: *const fn(
            self: *const ICertEncodeLongArray2,
            Encoding: EncodingType,
            pstrEncodedData: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertEncodeLongArray: ICertEncodeLongArray,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn DecodeBlob(self: *const ICertEncodeLongArray2, strEncodedData: ?BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
        return self.vtable.DecodeBlob(self, strEncodedData, Encoding);
    }
    pub fn EncodeBlob(self: *const ICertEncodeLongArray2, Encoding: EncodingType, pstrEncodedData: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.EncodeBlob(self, Encoding, pstrEncodedData);
    }
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertEncodeDateArray_Value = Guid.initString("2f9469a0-a470-11d0-8821-00a0c903b83c");
pub const IID_ICertEncodeDateArray = &IID_ICertEncodeDateArray_Value;
pub const ICertEncodeDateArray = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Decode: *const fn(
            self: *const ICertEncodeDateArray,
            strBinary: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn(
            self: *const ICertEncodeDateArray,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn(
            self: *const ICertEncodeDateArray,
            Index: i32,
            pValue: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const ICertEncodeDateArray,
            Count: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValue: *const fn(
            self: *const ICertEncodeDateArray,
            Index: i32,
            Value: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: *const fn(
            self: *const ICertEncodeDateArray,
            pstrBinary: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Decode(self: *const ICertEncodeDateArray, strBinary: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Decode(self, strBinary);
    }
    pub fn GetCount(self: *const ICertEncodeDateArray, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetCount(self, pCount);
    }
    pub fn GetValue(self: *const ICertEncodeDateArray, Index: i32, pValue: ?*f64) callconv(.Inline) HRESULT {
        return self.vtable.GetValue(self, Index, pValue);
    }
    pub fn Reset(self: *const ICertEncodeDateArray, Count: i32) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self, Count);
    }
    pub fn SetValue(self: *const ICertEncodeDateArray, Index: i32, Value: f64) callconv(.Inline) HRESULT {
        return self.vtable.SetValue(self, Index, Value);
    }
    pub fn Encode(self: *const ICertEncodeDateArray, pstrBinary: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Encode(self, pstrBinary);
    }
};

const IID_ICertEncodeDateArray2_Value = Guid.initString("99a4edb5-2b8e-448d-bf95-bba8d7789dc8");
pub const IID_ICertEncodeDateArray2 = &IID_ICertEncodeDateArray2_Value;
pub const ICertEncodeDateArray2 = extern union {
    pub const VTable = extern struct {
        base: ICertEncodeDateArray.VTable,
        DecodeBlob: *const fn(
            self: *const ICertEncodeDateArray2,
            strEncodedData: ?BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EncodeBlob: *const fn(
            self: *const ICertEncodeDateArray2,
            Encoding: EncodingType,
            pstrEncodedData: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertEncodeDateArray: ICertEncodeDateArray,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn DecodeBlob(self: *const ICertEncodeDateArray2, strEncodedData: ?BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
        return self.vtable.DecodeBlob(self, strEncodedData, Encoding);
    }
    pub fn EncodeBlob(self: *const ICertEncodeDateArray2, Encoding: EncodingType, pstrEncodedData: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.EncodeBlob(self, Encoding, pstrEncodedData);
    }
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertEncodeCRLDistInfo_Value = Guid.initString("01958640-bbff-11d0-8825-00a0c903b83c");
pub const IID_ICertEncodeCRLDistInfo = &IID_ICertEncodeCRLDistInfo_Value;
pub const ICertEncodeCRLDistInfo = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Decode: *const fn(
            self: *const ICertEncodeCRLDistInfo,
            strBinary: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDistPointCount: *const fn(
            self: *const ICertEncodeCRLDistInfo,
            pDistPointCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNameCount: *const fn(
            self: *const ICertEncodeCRLDistInfo,
            DistPointIndex: i32,
            pNameCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNameChoice: *const fn(
            self: *const ICertEncodeCRLDistInfo,
            DistPointIndex: i32,
            NameIndex: i32,
            pNameChoice: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn(
            self: *const ICertEncodeCRLDistInfo,
            DistPointIndex: i32,
            NameIndex: i32,
            pstrName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const ICertEncodeCRLDistInfo,
            DistPointCount: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNameCount: *const fn(
            self: *const ICertEncodeCRLDistInfo,
            DistPointIndex: i32,
            NameCount: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNameEntry: *const fn(
            self: *const ICertEncodeCRLDistInfo,
            DistPointIndex: i32,
            NameIndex: i32,
            NameChoice: CERT_ALT_NAME,
            strName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: *const fn(
            self: *const ICertEncodeCRLDistInfo,
            pstrBinary: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Decode(self: *const ICertEncodeCRLDistInfo, strBinary: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Decode(self, strBinary);
    }
    pub fn GetDistPointCount(self: *const ICertEncodeCRLDistInfo, pDistPointCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetDistPointCount(self, pDistPointCount);
    }
    pub fn GetNameCount(self: *const ICertEncodeCRLDistInfo, DistPointIndex: i32, pNameCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetNameCount(self, DistPointIndex, pNameCount);
    }
    pub fn GetNameChoice(self: *const ICertEncodeCRLDistInfo, DistPointIndex: i32, NameIndex: i32, pNameChoice: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetNameChoice(self, DistPointIndex, NameIndex, pNameChoice);
    }
    pub fn GetName(self: *const ICertEncodeCRLDistInfo, DistPointIndex: i32, NameIndex: i32, pstrName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetName(self, DistPointIndex, NameIndex, pstrName);
    }
    pub fn Reset(self: *const ICertEncodeCRLDistInfo, DistPointCount: i32) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self, DistPointCount);
    }
    pub fn SetNameCount(self: *const ICertEncodeCRLDistInfo, DistPointIndex: i32, NameCount: i32) callconv(.Inline) HRESULT {
        return self.vtable.SetNameCount(self, DistPointIndex, NameCount);
    }
    pub fn SetNameEntry(self: *const ICertEncodeCRLDistInfo, DistPointIndex: i32, NameIndex: i32, NameChoice: CERT_ALT_NAME, strName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.SetNameEntry(self, DistPointIndex, NameIndex, NameChoice, strName);
    }
    pub fn Encode(self: *const ICertEncodeCRLDistInfo, pstrBinary: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Encode(self, pstrBinary);
    }
};

const IID_ICertEncodeCRLDistInfo2_Value = Guid.initString("b4275d4b-3e30-446f-ad36-09d03120b078");
pub const IID_ICertEncodeCRLDistInfo2 = &IID_ICertEncodeCRLDistInfo2_Value;
pub const ICertEncodeCRLDistInfo2 = extern union {
    pub const VTable = extern struct {
        base: ICertEncodeCRLDistInfo.VTable,
        DecodeBlob: *const fn(
            self: *const ICertEncodeCRLDistInfo2,
            strEncodedData: ?BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EncodeBlob: *const fn(
            self: *const ICertEncodeCRLDistInfo2,
            Encoding: EncodingType,
            pstrEncodedData: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertEncodeCRLDistInfo: ICertEncodeCRLDistInfo,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn DecodeBlob(self: *const ICertEncodeCRLDistInfo2, strEncodedData: ?BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
        return self.vtable.DecodeBlob(self, strEncodedData, Encoding);
    }
    pub fn EncodeBlob(self: *const ICertEncodeCRLDistInfo2, Encoding: EncodingType, pstrEncodedData: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.EncodeBlob(self, Encoding, pstrEncodedData);
    }
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertEncodeAltName_Value = Guid.initString("1c9a8c70-1271-11d1-9bd4-00c04fb683fa");
pub const IID_ICertEncodeAltName = &IID_ICertEncodeAltName_Value;
pub const ICertEncodeAltName = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Decode: *const fn(
            self: *const ICertEncodeAltName,
            strBinary: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNameCount: *const fn(
            self: *const ICertEncodeAltName,
            pNameCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNameChoice: *const fn(
            self: *const ICertEncodeAltName,
            NameIndex: i32,
            pNameChoice: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn(
            self: *const ICertEncodeAltName,
            NameIndex: i32,
            pstrName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const ICertEncodeAltName,
            NameCount: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNameEntry: *const fn(
            self: *const ICertEncodeAltName,
            NameIndex: i32,
            NameChoice: CERT_ALT_NAME,
            strName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: *const fn(
            self: *const ICertEncodeAltName,
            pstrBinary: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Decode(self: *const ICertEncodeAltName, strBinary: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Decode(self, strBinary);
    }
    pub fn GetNameCount(self: *const ICertEncodeAltName, pNameCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetNameCount(self, pNameCount);
    }
    pub fn GetNameChoice(self: *const ICertEncodeAltName, NameIndex: i32, pNameChoice: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetNameChoice(self, NameIndex, pNameChoice);
    }
    pub fn GetName(self: *const ICertEncodeAltName, NameIndex: i32, pstrName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetName(self, NameIndex, pstrName);
    }
    pub fn Reset(self: *const ICertEncodeAltName, NameCount: i32) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self, NameCount);
    }
    pub fn SetNameEntry(self: *const ICertEncodeAltName, NameIndex: i32, NameChoice: CERT_ALT_NAME, strName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.SetNameEntry(self, NameIndex, NameChoice, strName);
    }
    pub fn Encode(self: *const ICertEncodeAltName, pstrBinary: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Encode(self, pstrBinary);
    }
};

const IID_ICertEncodeAltName2_Value = Guid.initString("f67fe177-5ef1-4535-b4ce-29df15e2e0c3");
pub const IID_ICertEncodeAltName2 = &IID_ICertEncodeAltName2_Value;
pub const ICertEncodeAltName2 = extern union {
    pub const VTable = extern struct {
        base: ICertEncodeAltName.VTable,
        DecodeBlob: *const fn(
            self: *const ICertEncodeAltName2,
            strEncodedData: ?BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EncodeBlob: *const fn(
            self: *const ICertEncodeAltName2,
            Encoding: EncodingType,
            pstrEncodedData: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNameBlob: *const fn(
            self: *const ICertEncodeAltName2,
            NameIndex: i32,
            Encoding: EncodingType,
            pstrName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNameEntryBlob: *const fn(
            self: *const ICertEncodeAltName2,
            NameIndex: i32,
            NameChoice: i32,
            strName: ?BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertEncodeAltName: ICertEncodeAltName,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn DecodeBlob(self: *const ICertEncodeAltName2, strEncodedData: ?BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
        return self.vtable.DecodeBlob(self, strEncodedData, Encoding);
    }
    pub fn EncodeBlob(self: *const ICertEncodeAltName2, Encoding: EncodingType, pstrEncodedData: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.EncodeBlob(self, Encoding, pstrEncodedData);
    }
    pub fn GetNameBlob(self: *const ICertEncodeAltName2, NameIndex: i32, Encoding: EncodingType, pstrName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetNameBlob(self, NameIndex, Encoding, pstrName);
    }
    pub fn SetNameEntryBlob(self: *const ICertEncodeAltName2, NameIndex: i32, NameChoice: i32, strName: ?BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
        return self.vtable.SetNameEntryBlob(self, NameIndex, NameChoice, strName, Encoding);
    }
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertEncodeBitString_Value = Guid.initString("6db525be-1278-11d1-9bd4-00c04fb683fa");
pub const IID_ICertEncodeBitString = &IID_ICertEncodeBitString_Value;
pub const ICertEncodeBitString = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Decode: *const fn(
            self: *const ICertEncodeBitString,
            strBinary: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBitCount: *const fn(
            self: *const ICertEncodeBitString,
            pBitCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBitString: *const fn(
            self: *const ICertEncodeBitString,
            pstrBitString: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: *const fn(
            self: *const ICertEncodeBitString,
            BitCount: i32,
            strBitString: ?BSTR,
            pstrBinary: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Decode(self: *const ICertEncodeBitString, strBinary: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Decode(self, strBinary);
    }
    pub fn GetBitCount(self: *const ICertEncodeBitString, pBitCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetBitCount(self, pBitCount);
    }
    pub fn GetBitString(self: *const ICertEncodeBitString, pstrBitString: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetBitString(self, pstrBitString);
    }
    pub fn Encode(self: *const ICertEncodeBitString, BitCount: i32, strBitString: ?BSTR, pstrBinary: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.Encode(self, BitCount, strBitString, pstrBinary);
    }
};

const IID_ICertEncodeBitString2_Value = Guid.initString("e070d6e7-23ef-4dd2-8242-ebd9c928cb30");
pub const IID_ICertEncodeBitString2 = &IID_ICertEncodeBitString2_Value;
pub const ICertEncodeBitString2 = extern union {
    pub const VTable = extern struct {
        base: ICertEncodeBitString.VTable,
        DecodeBlob: *const fn(
            self: *const ICertEncodeBitString2,
            strEncodedData: ?BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EncodeBlob: *const fn(
            self: *const ICertEncodeBitString2,
            BitCount: i32,
            strBitString: ?BSTR,
            EncodingIn: EncodingType,
            Encoding: EncodingType,
            pstrEncodedData: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBitStringBlob: *const fn(
            self: *const ICertEncodeBitString2,
            Encoding: EncodingType,
            pstrBitString: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertEncodeBitString: ICertEncodeBitString,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn DecodeBlob(self: *const ICertEncodeBitString2, strEncodedData: ?BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
        return self.vtable.DecodeBlob(self, strEncodedData, Encoding);
    }
    pub fn EncodeBlob(self: *const ICertEncodeBitString2, BitCount: i32, strBitString: ?BSTR, EncodingIn: EncodingType, Encoding: EncodingType, pstrEncodedData: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.EncodeBlob(self, BitCount, strBitString, EncodingIn, Encoding, pstrEncodedData);
    }
    pub fn GetBitStringBlob(self: *const ICertEncodeBitString2, Encoding: EncodingType, pstrBitString: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetBitStringBlob(self, Encoding, pstrBitString);
    }
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertExit_Value = Guid.initString("e19ae1a0-7364-11d0-8816-00a0c903b83c");
pub const IID_ICertExit = &IID_ICertExit_Value;
pub const ICertExit = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn(
            self: *const ICertExit,
            strConfig: ?BSTR,
            pEventMask: ?*CERT_EXIT_EVENT_MASK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Notify: *const fn(
            self: *const ICertExit,
            ExitEvent: i32,
            Context: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: *const fn(
            self: *const ICertExit,
            pstrDescription: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn Initialize(self: *const ICertExit, strConfig: ?BSTR, pEventMask: ?*CERT_EXIT_EVENT_MASK) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, strConfig, pEventMask);
    }
    pub fn Notify(self: *const ICertExit, ExitEvent: i32, Context: i32) callconv(.Inline) HRESULT {
        return self.vtable.Notify(self, ExitEvent, Context);
    }
    pub fn GetDescription(self: *const ICertExit, pstrDescription: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetDescription(self, pstrDescription);
    }
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertExit2_Value = Guid.initString("0abf484b-d049-464d-a7ed-552e7529b0ff");
pub const IID_ICertExit2 = &IID_ICertExit2_Value;
pub const ICertExit2 = extern union {
    pub const VTable = extern struct {
        base: ICertExit.VTable,
        GetManageModule: *const fn(
            self: *const ICertExit2,
            ppManageModule: ?*?*ICertManageModule,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertExit: ICertExit,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn GetManageModule(self: *const ICertExit2, ppManageModule: ?*?*ICertManageModule) callconv(.Inline) HRESULT {
        return self.vtable.GetManageModule(self, ppManageModule);
    }
};

pub const ENUM_CATYPES = enum(i32) {
    ENTERPRISE_ROOTCA = 0,
    ENTERPRISE_SUBCA = 1,
    STANDALONE_ROOTCA = 3,
    STANDALONE_SUBCA = 4,
    UNKNOWN_CA = 5,
};
pub const ENUM_ENTERPRISE_ROOTCA = ENUM_CATYPES.ENTERPRISE_ROOTCA;
pub const ENUM_ENTERPRISE_SUBCA = ENUM_CATYPES.ENTERPRISE_SUBCA;
pub const ENUM_STANDALONE_ROOTCA = ENUM_CATYPES.STANDALONE_ROOTCA;
pub const ENUM_STANDALONE_SUBCA = ENUM_CATYPES.STANDALONE_SUBCA;
pub const ENUM_UNKNOWN_CA = ENUM_CATYPES.UNKNOWN_CA;

pub const CAINFO = extern struct {
    cbSize: u32,
    CAType: ENUM_CATYPES,
    cCASignatureCerts: u32,
    cCAExchangeCerts: u32,
    cExitModules: u32,
    lPropIdMax: i32,
    lRoleSeparationEnabled: i32,
    cKRACertUsedCount: u32,
    cKRACertCount: u32,
    fAdvancedServer: u32,
};

const CLSID_CEnroll2_Value = Guid.initString("127698e4-e730-4e5c-a2b1-21490a70c8a1");
pub const CLSID_CEnroll2 = &CLSID_CEnroll2_Value;

const CLSID_CEnroll_Value = Guid.initString("43f8f289-7a20-11d0-8f06-00c04fc295e1");
pub const CLSID_CEnroll = &CLSID_CEnroll_Value;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ICEnroll_Value = Guid.initString("43f8f288-7a20-11d0-8f06-00c04fc295e1");
pub const IID_ICEnroll = &IID_ICEnroll_Value;
pub const ICEnroll = extern union {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        createFilePKCS10: *const fn(
            self: *const ICEnroll,
            DNName: ?BSTR,
            Usage: ?BSTR,
            wszPKCS10FileName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        acceptFilePKCS7: *const fn(
            self: *const ICEnroll,
            wszPKCS7FileName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createPKCS10: *const fn(
            self: *const ICEnroll,
            DNName: ?BSTR,
            Usage: ?BSTR,
            pPKCS10: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        acceptPKCS7: *const fn(
            self: *const ICEnroll,
            PKCS7: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getCertFromPKCS7: *const fn(
            self: *const ICEnroll,
            wszPKCS7: ?BSTR,
            pbstrCert: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        enumProviders: *const fn(
            self: *const ICEnroll,
            dwIndex: i32,
            dwFlags: i32,
            pbstrProvName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        enumContainers: *const fn(
            self: *const ICEnroll,
            dwIndex: i32,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        freeRequestInfo: *const fn(
            self: *const ICEnroll,
            PKCS7OrPKCS10: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MyStoreName: *const fn(
            self: *const ICEnroll,
            pbstrName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MyStoreName: *const fn(
            self: *const ICEnroll,
            bstrName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MyStoreType: *const fn(
            self: *const ICEnroll,
            pbstrType: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MyStoreType: *const fn(
            self: *const ICEnroll,
            bstrType: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MyStoreFlags: *const fn(
            self: *const ICEnroll,
            pdwFlags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MyStoreFlags: *const fn(
            self: *const ICEnroll,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CAStoreName: *const fn(
            self: *const ICEnroll,
            pbstrName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CAStoreName: *const fn(
            self: *const ICEnroll,
            bstrName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CAStoreType: *const fn(
            self: *const ICEnroll,
            pbstrType: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CAStoreType: *const fn(
            self: *const ICEnroll,
            bstrType: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CAStoreFlags: *const fn(
            self: *const ICEnroll,
            pdwFlags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CAStoreFlags: *const fn(
            self: *const ICEnroll,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RootStoreName: *const fn(
            self: *const ICEnroll,
            pbstrName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RootStoreName: *const fn(
            self: *const ICEnroll,
            bstrName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RootStoreType: *const fn(
            self: *const ICEnroll,
            pbstrType: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RootStoreType: *const fn(
            self: *const ICEnroll,
            bstrType: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RootStoreFlags: *const fn(
            self: *const ICEnroll,
            pdwFlags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RootStoreFlags: *const fn(
            self: *const ICEnroll,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestStoreName: *const fn(
            self: *const ICEnroll,
            pbstrName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RequestStoreName: *const fn(
            self: *const ICEnroll,
            bstrName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestStoreType: *const fn(
            self: *const ICEnroll,
            pbstrType: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RequestStoreType: *const fn(
            self: *const ICEnroll,
            bstrType: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestStoreFlags: *const fn(
            self: *const ICEnroll,
            pdwFlags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RequestStoreFlags: *const fn(
            self: *const ICEnroll,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ContainerName: *const fn(
            self: *const ICEnroll,
            pbstrContainer: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ContainerName: *const fn(
            self: *const ICEnroll,
            bstrContainer: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderName: *const fn(
            self: *const ICEnroll,
            pbstrProvider: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProviderName: *const fn(
            self: *const ICEnroll,
            bstrProvider: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderType: *const fn(
            self: *const ICEnroll,
            pdwType: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProviderType: *const fn(
            self: *const ICEnroll,
            dwType: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeySpec: *const fn(
            self: *const ICEnroll,
            pdw: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_KeySpec: *const fn(
            self: *const ICEnroll,
            dw: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderFlags: *const fn(
            self: *const ICEnroll,
            pdwFlags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProviderFlags: *const fn(
            self: *const ICEnroll,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UseExistingKeySet: *const fn(
            self: *const ICEnroll,
            fUseExistingKeys: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UseExistingKeySet: *const fn(
            self: *const ICEnroll,
            fUseExistingKeys: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GenKeyFlags: *const fn(
            self: *const ICEnroll,
            pdwFlags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GenKeyFlags: *const fn(
            self: *const ICEnroll,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DeleteRequestCert: *const fn(
            self: *const ICEnroll,
            fDelete: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DeleteRequestCert: *const fn(
            self: *const ICEnroll,
            fDelete: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WriteCertToCSP: *const fn(
            self: *const ICEnroll,
            fBool: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_WriteCertToCSP: *const fn(
            self: *const ICEnroll,
            fBool: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SPCFileName: *const fn(
            self: *const ICEnroll,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SPCFileName: *const fn(
            self: *const ICEnroll,
            bstr: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PVKFileName: *const fn(
            self: *const ICEnroll,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PVKFileName: *const fn(
            self: *const ICEnroll,
            bstr: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HashAlgorithm: *const fn(
            self: *const ICEnroll,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HashAlgorithm: *const fn(
            self: *const ICEnroll,
            bstr: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn createFilePKCS10(self: *const ICEnroll, DNName: ?BSTR, Usage: ?BSTR, wszPKCS10FileName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.createFilePKCS10(self, DNName, Usage, wszPKCS10FileName);
    }
    pub fn acceptFilePKCS7(self: *const ICEnroll, wszPKCS7FileName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.acceptFilePKCS7(self, wszPKCS7FileName);
    }
    pub fn createPKCS10(self: *const ICEnroll, DNName: ?BSTR, Usage: ?BSTR, pPKCS10: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.createPKCS10(self, DNName, Usage, pPKCS10);
    }
    pub fn acceptPKCS7(self: *const ICEnroll, PKCS7: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.acceptPKCS7(self, PKCS7);
    }
    pub fn getCertFromPKCS7(self: *const ICEnroll, wszPKCS7: ?BSTR, pbstrCert: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.getCertFromPKCS7(self, wszPKCS7, pbstrCert);
    }
    pub fn enumProviders(self: *const ICEnroll, dwIndex: i32, dwFlags: i32, pbstrProvName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.enumProviders(self, dwIndex, dwFlags, pbstrProvName);
    }
    pub fn enumContainers(self: *const ICEnroll, dwIndex: i32, pbstr: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.enumContainers(self, dwIndex, pbstr);
    }
    pub fn freeRequestInfo(self: *const ICEnroll, PKCS7OrPKCS10: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.freeRequestInfo(self, PKCS7OrPKCS10);
    }
    pub fn get_MyStoreName(self: *const ICEnroll, pbstrName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_MyStoreName(self, pbstrName);
    }
    pub fn put_MyStoreName(self: *const ICEnroll, bstrName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_MyStoreName(self, bstrName);
    }
    pub fn get_MyStoreType(self: *const ICEnroll, pbstrType: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_MyStoreType(self, pbstrType);
    }
    pub fn put_MyStoreType(self: *const ICEnroll, bstrType: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_MyStoreType(self, bstrType);
    }
    pub fn get_MyStoreFlags(self: *const ICEnroll, pdwFlags: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_MyStoreFlags(self, pdwFlags);
    }
    pub fn put_MyStoreFlags(self: *const ICEnroll, dwFlags: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_MyStoreFlags(self, dwFlags);
    }
    pub fn get_CAStoreName(self: *const ICEnroll, pbstrName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_CAStoreName(self, pbstrName);
    }
    pub fn put_CAStoreName(self: *const ICEnroll, bstrName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_CAStoreName(self, bstrName);
    }
    pub fn get_CAStoreType(self: *const ICEnroll, pbstrType: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_CAStoreType(self, pbstrType);
    }
    pub fn put_CAStoreType(self: *const ICEnroll, bstrType: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_CAStoreType(self, bstrType);
    }
    pub fn get_CAStoreFlags(self: *const ICEnroll, pdwFlags: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_CAStoreFlags(self, pdwFlags);
    }
    pub fn put_CAStoreFlags(self: *const ICEnroll, dwFlags: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_CAStoreFlags(self, dwFlags);
    }
    pub fn get_RootStoreName(self: *const ICEnroll, pbstrName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RootStoreName(self, pbstrName);
    }
    pub fn put_RootStoreName(self: *const ICEnroll, bstrName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_RootStoreName(self, bstrName);
    }
    pub fn get_RootStoreType(self: *const ICEnroll, pbstrType: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RootStoreType(self, pbstrType);
    }
    pub fn put_RootStoreType(self: *const ICEnroll, bstrType: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_RootStoreType(self, bstrType);
    }
    pub fn get_RootStoreFlags(self: *const ICEnroll, pdwFlags: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_RootStoreFlags(self, pdwFlags);
    }
    pub fn put_RootStoreFlags(self: *const ICEnroll, dwFlags: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_RootStoreFlags(self, dwFlags);
    }
    pub fn get_RequestStoreName(self: *const ICEnroll, pbstrName: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RequestStoreName(self, pbstrName);
    }
    pub fn put_RequestStoreName(self: *const ICEnroll, bstrName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_RequestStoreName(self, bstrName);
    }
    pub fn get_RequestStoreType(self: *const ICEnroll, pbstrType: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RequestStoreType(self, pbstrType);
    }
    pub fn put_RequestStoreType(self: *const ICEnroll, bstrType: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_RequestStoreType(self, bstrType);
    }
    pub fn get_RequestStoreFlags(self: *const ICEnroll, pdwFlags: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_RequestStoreFlags(self, pdwFlags);
    }
    pub fn put_RequestStoreFlags(self: *const ICEnroll, dwFlags: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_RequestStoreFlags(self, dwFlags);
    }
    pub fn get_ContainerName(self: *const ICEnroll, pbstrContainer: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ContainerName(self, pbstrContainer);
    }
    pub fn put_ContainerName(self: *const ICEnroll, bstrContainer: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ContainerName(self, bstrContainer);
    }
    pub fn get_ProviderName(self: *const ICEnroll, pbstrProvider: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ProviderName(self, pbstrProvider);
    }
    pub fn put_ProviderName(self: *const ICEnroll, bstrProvider: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ProviderName(self, bstrProvider);
    }
    pub fn get_ProviderType(self: *const ICEnroll, pdwType: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ProviderType(self, pdwType);
    }
    pub fn put_ProviderType(self: *const ICEnroll, dwType: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_ProviderType(self, dwType);
    }
    pub fn get_KeySpec(self: *const ICEnroll, pdw: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_KeySpec(self, pdw);
    }
    pub fn put_KeySpec(self: *const ICEnroll, dw: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_KeySpec(self, dw);
    }
    pub fn get_ProviderFlags(self: *const ICEnroll, pdwFlags: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ProviderFlags(self, pdwFlags);
    }
    pub fn put_ProviderFlags(self: *const ICEnroll, dwFlags: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_ProviderFlags(self, dwFlags);
    }
    pub fn get_UseExistingKeySet(self: *const ICEnroll, fUseExistingKeys: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.get_UseExistingKeySet(self, fUseExistingKeys);
    }
    pub fn put_UseExistingKeySet(self: *const ICEnroll, fUseExistingKeys: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.put_UseExistingKeySet(self, fUseExistingKeys);
    }
    pub fn get_GenKeyFlags(self: *const ICEnroll, pdwFlags: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_GenKeyFlags(self, pdwFlags);
    }
    pub fn put_GenKeyFlags(self: *const ICEnroll, dwFlags: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_GenKeyFlags(self, dwFlags);
    }
    pub fn get_DeleteRequestCert(self: *const ICEnroll, fDelete: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.get_DeleteRequestCert(self, fDelete);
    }
    pub fn put_DeleteRequestCert(self: *const ICEnroll, fDelete: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.put_DeleteRequestCert(self, fDelete);
    }
    pub fn get_WriteCertToCSP(self: *const ICEnroll, fBool: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.get_WriteCertToCSP(self, fBool);
    }
    pub fn put_WriteCertToCSP(self: *const ICEnroll, fBool: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.put_WriteCertToCSP(self, fBool);
    }
    pub fn get_SPCFileName(self: *const ICEnroll, pbstr: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_SPCFileName(self, pbstr);
    }
    pub fn put_SPCFileName(self: *const ICEnroll, bstr: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_SPCFileName(self, bstr);
    }
    pub fn get_PVKFileName(self: *const ICEnroll, pbstr: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_PVKFileName(self, pbstr);
    }
    pub fn put_PVKFileName(self: *const ICEnroll, bstr: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_PVKFileName(self, bstr);
    }
    pub fn get_HashAlgorithm(self: *const ICEnroll, pbstr: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_HashAlgorithm(self, pbstr);
    }
    pub fn put_HashAlgorithm(self: *const ICEnroll, bstr: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_HashAlgorithm(self, bstr);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ICEnroll2_Value = Guid.initString("704ca730-c90b-11d1-9bec-00c04fc295e1");
pub const IID_ICEnroll2 = &IID_ICEnroll2_Value;
pub const ICEnroll2 = extern union {
    pub const VTable = extern struct {
        base: ICEnroll.VTable,
        addCertTypeToRequest: *const fn(
            self: *const ICEnroll2,
            CertType: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addNameValuePairToSignature: *const fn(
            self: *const ICEnroll2,
            Name: ?BSTR,
            Value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WriteCertToUserDS: *const fn(
            self: *const ICEnroll2,
            fBool: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_WriteCertToUserDS: *const fn(
            self: *const ICEnroll2,
            fBool: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnableT61DNEncoding: *const fn(
            self: *const ICEnroll2,
            fBool: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EnableT61DNEncoding: *const fn(
            self: *const ICEnroll2,
            fBool: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICEnroll: ICEnroll,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn addCertTypeToRequest(self: *const ICEnroll2, CertType: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.addCertTypeToRequest(self, CertType);
    }
    pub fn addNameValuePairToSignature(self: *const ICEnroll2, Name: ?BSTR, Value: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.addNameValuePairToSignature(self, Name, Value);
    }
    pub fn get_WriteCertToUserDS(self: *const ICEnroll2, fBool: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.get_WriteCertToUserDS(self, fBool);
    }
    pub fn put_WriteCertToUserDS(self: *const ICEnroll2, fBool: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.put_WriteCertToUserDS(self, fBool);
    }
    pub fn get_EnableT61DNEncoding(self: *const ICEnroll2, fBool: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.get_EnableT61DNEncoding(self, fBool);
    }
    pub fn put_EnableT61DNEncoding(self: *const ICEnroll2, fBool: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.put_EnableT61DNEncoding(self, fBool);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ICEnroll3_Value = Guid.initString("c28c2d95-b7de-11d2-a421-00c04f79fe8e");
pub const IID_ICEnroll3 = &IID_ICEnroll3_Value;
pub const ICEnroll3 = extern union {
    pub const VTable = extern struct {
        base: ICEnroll2.VTable,
        InstallPKCS7: *const fn(
            self: *const ICEnroll3,
            PKCS7: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const ICEnroll3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedKeySpec: *const fn(
            self: *const ICEnroll3,
            pdwKeySpec: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyLen: *const fn(
            self: *const ICEnroll3,
            fMin: BOOL,
            fExchange: BOOL,
            pdwKeySize: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumAlgs: *const fn(
            self: *const ICEnroll3,
            dwIndex: i32,
            algClass: i32,
            pdwAlgID: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAlgName: *const fn(
            self: *const ICEnroll3,
            algID: i32,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReuseHardwareKeyIfUnableToGenNew: *const fn(
            self: *const ICEnroll3,
            fReuseHardwareKeyIfUnableToGenNew: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReuseHardwareKeyIfUnableToGenNew: *const fn(
            self: *const ICEnroll3,
            fReuseHardwareKeyIfUnableToGenNew: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HashAlgID: *const fn(
            self: *const ICEnroll3,
            hashAlgID: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HashAlgID: *const fn(
            self: *const ICEnroll3,
            hashAlgID: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LimitExchangeKeyToEncipherment: *const fn(
            self: *const ICEnroll3,
            fLimitExchangeKeyToEncipherment: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LimitExchangeKeyToEncipherment: *const fn(
            self: *const ICEnroll3,
            fLimitExchangeKeyToEncipherment: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EnableSMIMECapabilities: *const fn(
            self: *const ICEnroll3,
            fEnableSMIMECapabilities: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnableSMIMECapabilities: *const fn(
            self: *const ICEnroll3,
            fEnableSMIMECapabilities: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICEnroll2: ICEnroll2,
    ICEnroll: ICEnroll,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn InstallPKCS7(self: *const ICEnroll3, PKCS7: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.InstallPKCS7(self, PKCS7);
    }
    pub fn Reset(self: *const ICEnroll3) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn GetSupportedKeySpec(self: *const ICEnroll3, pdwKeySpec: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetSupportedKeySpec(self, pdwKeySpec);
    }
    pub fn GetKeyLen(self: *const ICEnroll3, fMin: BOOL, fExchange: BOOL, pdwKeySize: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetKeyLen(self, fMin, fExchange, pdwKeySize);
    }
    pub fn EnumAlgs(self: *const ICEnroll3, dwIndex: i32, algClass: i32, pdwAlgID: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.EnumAlgs(self, dwIndex, algClass, pdwAlgID);
    }
    pub fn GetAlgName(self: *const ICEnroll3, algID: i32, pbstr: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetAlgName(self, algID, pbstr);
    }
    pub fn put_ReuseHardwareKeyIfUnableToGenNew(self: *const ICEnroll3, fReuseHardwareKeyIfUnableToGenNew: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.put_ReuseHardwareKeyIfUnableToGenNew(self, fReuseHardwareKeyIfUnableToGenNew);
    }
    pub fn get_ReuseHardwareKeyIfUnableToGenNew(self: *const ICEnroll3, fReuseHardwareKeyIfUnableToGenNew: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.get_ReuseHardwareKeyIfUnableToGenNew(self, fReuseHardwareKeyIfUnableToGenNew);
    }
    pub fn put_HashAlgID(self: *const ICEnroll3, hashAlgID: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_HashAlgID(self, hashAlgID);
    }
    pub fn get_HashAlgID(self: *const ICEnroll3, hashAlgID: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_HashAlgID(self, hashAlgID);
    }
    pub fn put_LimitExchangeKeyToEncipherment(self: *const ICEnroll3, fLimitExchangeKeyToEncipherment: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.put_LimitExchangeKeyToEncipherment(self, fLimitExchangeKeyToEncipherment);
    }
    pub fn get_LimitExchangeKeyToEncipherment(self: *const ICEnroll3, fLimitExchangeKeyToEncipherment: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.get_LimitExchangeKeyToEncipherment(self, fLimitExchangeKeyToEncipherment);
    }
    pub fn put_EnableSMIMECapabilities(self: *const ICEnroll3, fEnableSMIMECapabilities: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.put_EnableSMIMECapabilities(self, fEnableSMIMECapabilities);
    }
    pub fn get_EnableSMIMECapabilities(self: *const ICEnroll3, fEnableSMIMECapabilities: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.get_EnableSMIMECapabilities(self, fEnableSMIMECapabilities);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ICEnroll4_Value = Guid.initString("c1f1188a-2eb5-4a80-841b-7e729a356d90");
pub const IID_ICEnroll4 = &IID_ICEnroll4_Value;
pub const ICEnroll4 = extern union {
    pub const VTable = extern struct {
        base: ICEnroll3.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrivateKeyArchiveCertificate: *const fn(
            self: *const ICEnroll4,
            bstrCert: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivateKeyArchiveCertificate: *const fn(
            self: *const ICEnroll4,
            pbstrCert: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ThumbPrint: *const fn(
            self: *const ICEnroll4,
            bstrThumbPrint: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ThumbPrint: *const fn(
            self: *const ICEnroll4,
            pbstrThumbPrint: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        binaryToString: *const fn(
            self: *const ICEnroll4,
            Flags: i32,
            strBinary: ?BSTR,
            pstrEncoded: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        stringToBinary: *const fn(
            self: *const ICEnroll4,
            Flags: i32,
            strEncoded: ?BSTR,
            pstrBinary: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addExtensionToRequest: *const fn(
            self: *const ICEnroll4,
            Flags: i32,
            strName: ?BSTR,
            strValue: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addAttributeToRequest: *const fn(
            self: *const ICEnroll4,
            Flags: i32,
            strName: ?BSTR,
            strValue: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addNameValuePairToRequest: *const fn(
            self: *const ICEnroll4,
            Flags: i32,
            strName: ?BSTR,
            strValue: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        resetExtensions: *const fn(
            self: *const ICEnroll4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        resetAttributes: *const fn(
            self: *const ICEnroll4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createRequest: *const fn(
            self: *const ICEnroll4,
            Flags: CERT_CREATE_REQUEST_FLAGS,
            strDNName: ?BSTR,
            Usage: ?BSTR,
            pstrRequest: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createFileRequest: *const fn(
            self: *const ICEnroll4,
            Flags: CERT_CREATE_REQUEST_FLAGS,
            strDNName: ?BSTR,
            strUsage: ?BSTR,
            strRequestFileName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        acceptResponse: *const fn(
            self: *const ICEnroll4,
            strResponse: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        acceptFileResponse: *const fn(
            self: *const ICEnroll4,
            strResponseFileName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getCertFromResponse: *const fn(
            self: *const ICEnroll4,
            strResponse: ?BSTR,
            pstrCert: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getCertFromFileResponse: *const fn(
            self: *const ICEnroll4,
            strResponseFileName: ?BSTR,
            pstrCert: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createPFX: *const fn(
            self: *const ICEnroll4,
            strPassword: ?BSTR,
            pstrPFX: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createFilePFX: *const fn(
            self: *const ICEnroll4,
            strPassword: ?BSTR,
            strPFXFileName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setPendingRequestInfo: *const fn(
            self: *const ICEnroll4,
            lRequestID: i32,
            strCADNS: ?BSTR,
            strCAName: ?BSTR,
            strFriendlyName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        enumPendingRequest: *const fn(
            self: *const ICEnroll4,
            lIndex: i32,
            lDesiredProperty: PENDING_REQUEST_DESIRED_PROPERTY,
            pvarProperty: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removePendingRequest: *const fn(
            self: *const ICEnroll4,
            strThumbprint: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyLenEx: *const fn(
            self: *const ICEnroll4,
            lSizeSpec: XEKL_KEYSIZE,
            lKeySpec: XEKL_KEYSPEC,
            pdwKeySize: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallPKCS7Ex: *const fn(
            self: *const ICEnroll4,
            PKCS7: ?BSTR,
            plCertInstalled: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addCertTypeToRequestEx: *const fn(
            self: *const ICEnroll4,
            lType: ADDED_CERT_TYPE,
            bstrOIDOrName: ?BSTR,
            lMajorVersion: i32,
            fMinorVersion: BOOL,
            lMinorVersion: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getProviderType: *const fn(
            self: *const ICEnroll4,
            strProvName: ?BSTR,
            plProvType: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SignerCertificate: *const fn(
            self: *const ICEnroll4,
            bstrCert: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ClientId: *const fn(
            self: *const ICEnroll4,
            lClientId: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClientId: *const fn(
            self: *const ICEnroll4,
            plClientId: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addBlobPropertyToCertificate: *const fn(
            self: *const ICEnroll4,
            lPropertyId: i32,
            lReserved: i32,
            bstrProperty: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        resetBlobProperties: *const fn(
            self: *const ICEnroll4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IncludeSubjectKeyID: *const fn(
            self: *const ICEnroll4,
            fInclude: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IncludeSubjectKeyID: *const fn(
            self: *const ICEnroll4,
            pfInclude: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICEnroll3: ICEnroll3,
    ICEnroll2: ICEnroll2,
    ICEnroll: ICEnroll,
    IDispatch: IDispatch,
    IUnknown: IUnknown,
    pub fn put_PrivateKeyArchiveCertificate(self: *const ICEnroll4, bstrCert: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_PrivateKeyArchiveCertificate(self, bstrCert);
    }
    pub fn get_PrivateKeyArchiveCertificate(self: *const ICEnroll4, pbstrCert: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_PrivateKeyArchiveCertificate(self, pbstrCert);
    }
    pub fn put_ThumbPrint(self: *const ICEnroll4, bstrThumbPrint: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ThumbPrint(self, bstrThumbPrint);
    }
    pub fn get_ThumbPrint(self: *const ICEnroll4, pbstrThumbPrint: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ThumbPrint(self, pbstrThumbPrint);
    }
    pub fn binaryToString(self: *const ICEnroll4, Flags: i32, strBinary: ?BSTR, pstrEncoded: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.binaryToString(self, Flags, strBinary, pstrEncoded);
    }
    pub fn stringToBinary(self: *const ICEnroll4, Flags: i32, strEncoded: ?BSTR, pstrBinary: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.stringToBinary(self, Flags, strEncoded, pstrBinary);
    }
    pub fn addExtensionToRequest(self: *const ICEnroll4, Flags: i32, strName: ?BSTR, strValue: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.addExtensionToRequest(self, Flags, strName, strValue);
    }
    pub fn addAttributeToRequest(self: *const ICEnroll4, Flags: i32, strName: ?BSTR, strValue: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.addAttributeToRequest(self, Flags, strName, strValue);
    }
    pub fn addNameValuePairToRequest(self: *const ICEnroll4, Flags: i32, strName: ?BSTR, strValue: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.addNameValuePairToRequest(self, Flags, strName, strValue);
    }
    pub fn resetExtensions(self: *const ICEnroll4) callconv(.Inline) HRESULT {
        return self.vtable.resetExtensions(self);
    }
    pub fn resetAttributes(self: *const ICEnroll4) callconv(.Inline) HRESULT {
        return self.vtable.resetAttributes(self);
    }
    pub fn createRequest(self: *const ICEnroll4, Flags: CERT_CREATE_REQUEST_FLAGS, strDNName: ?BSTR, Usage: ?BSTR, pstrRequest: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.createRequest(self, Flags, strDNName, Usage, pstrRequest);
    }
    pub fn createFileRequest(self: *const ICEnroll4, Flags: CERT_CREATE_REQUEST_FLAGS, strDNName: ?BSTR, strUsage: ?BSTR, strRequestFileName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.createFileRequest(self, Flags, strDNName, strUsage, strRequestFileName);
    }
    pub fn acceptResponse(self: *const ICEnroll4, strResponse: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.acceptResponse(self, strResponse);
    }
    pub fn acceptFileResponse(self: *const ICEnroll4, strResponseFileName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.acceptFileResponse(self, strResponseFileName);
    }
    pub fn getCertFromResponse(self: *const ICEnroll4, strResponse: ?BSTR, pstrCert: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.getCertFromResponse(self, strResponse, pstrCert);
    }
    pub fn getCertFromFileResponse(self: *const ICEnroll4, strResponseFileName: ?BSTR, pstrCert: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.getCertFromFileResponse(self, strResponseFileName, pstrCert);
    }
    pub fn createPFX(self: *const ICEnroll4, strPassword: ?BSTR, pstrPFX: ?*?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.createPFX(self, strPassword, pstrPFX);
    }
    pub fn createFilePFX(self: *const ICEnroll4, strPassword: ?BSTR, strPFXFileName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.createFilePFX(self, strPassword, strPFXFileName);
    }
    pub fn setPendingRequestInfo(self: *const ICEnroll4, lRequestID: i32, strCADNS: ?BSTR, strCAName: ?BSTR, strFriendlyName: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.setPendingRequestInfo(self, lRequestID, strCADNS, strCAName, strFriendlyName);
    }
    pub fn enumPendingRequest(self: *const ICEnroll4, lIndex: i32, lDesiredProperty: PENDING_REQUEST_DESIRED_PROPERTY, pvarProperty: ?*VARIANT) callconv(.Inline) HRESULT {
        return self.vtable.enumPendingRequest(self, lIndex, lDesiredProperty, pvarProperty);
    }
    pub fn removePendingRequest(self: *const ICEnroll4, strThumbprint: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.removePendingRequest(self, strThumbprint);
    }
    pub fn GetKeyLenEx(self: *const ICEnroll4, lSizeSpec: XEKL_KEYSIZE, lKeySpec: XEKL_KEYSPEC, pdwKeySize: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetKeyLenEx(self, lSizeSpec, lKeySpec, pdwKeySize);
    }
    pub fn InstallPKCS7Ex(self: *const ICEnroll4, PKCS7: ?BSTR, plCertInstalled: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.InstallPKCS7Ex(self, PKCS7, plCertInstalled);
    }
    pub fn addCertTypeToRequestEx(self: *const ICEnroll4, lType: ADDED_CERT_TYPE, bstrOIDOrName: ?BSTR, lMajorVersion: i32, fMinorVersion: BOOL, lMinorVersion: i32) callconv(.Inline) HRESULT {
        return self.vtable.addCertTypeToRequestEx(self, lType, bstrOIDOrName, lMajorVersion, fMinorVersion, lMinorVersion);
    }
    pub fn getProviderType(self: *const ICEnroll4, strProvName: ?BSTR, plProvType: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.getProviderType(self, strProvName, plProvType);
    }
    pub fn put_SignerCertificate(self: *const ICEnroll4, bstrCert: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_SignerCertificate(self, bstrCert);
    }
    pub fn put_ClientId(self: *const ICEnroll4, lClientId: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_ClientId(self, lClientId);
    }
    pub fn get_ClientId(self: *const ICEnroll4, plClientId: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ClientId(self, plClientId);
    }
    pub fn addBlobPropertyToCertificate(self: *const ICEnroll4, lPropertyId: i32, lReserved: i32, bstrProperty: ?BSTR) callconv(.Inline) HRESULT {
        return self.vtable.addBlobPropertyToCertificate(self, lPropertyId, lReserved, bstrProperty);
    }
    pub fn resetBlobProperties(self: *const ICEnroll4) callconv(.Inline) HRESULT {
        return self.vtable.resetBlobProperties(self);
    }
    pub fn put_IncludeSubjectKeyID(self: *const ICEnroll4, fInclude: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.put_IncludeSubjectKeyID(self, fInclude);
    }
    pub fn get_IncludeSubjectKeyID(self: *const ICEnroll4, pfInclude: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.get_IncludeSubjectKeyID(self, pfInclude);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IEnroll_Value = Guid.initString("acaa7838-4585-11d1-ab57-00c04fc295e1");
pub const IID_IEnroll = &IID_IEnroll_Value;
pub const IEnroll = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        createFilePKCS10WStr: *const fn(
            self: *const IEnroll,
            DNName: ?[*:0]const u16,
            Usage: ?[*:0]const u16,
            wszPKCS10FileName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        acceptFilePKCS7WStr: *const fn(
            self: *const IEnroll,
            wszPKCS7FileName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createPKCS10WStr: *const fn(
            self: *const IEnroll,
            DNName: ?[*:0]const u16,
            Usage: ?[*:0]const u16,
            pPkcs10Blob: ?*CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        acceptPKCS7Blob: *const fn(
            self: *const IEnroll,
            pBlobPKCS7: ?*CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getCertContextFromPKCS7: *const fn(
            self: *const IEnroll,
            pBlobPKCS7: ?*CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) ?*CERT_CONTEXT,
        getMyStore: *const fn(
            self: *const IEnroll,
        ) callconv(@import("std").os.windows.WINAPI) ?HCERTSTORE,
        getCAStore: *const fn(
            self: *const IEnroll,
        ) callconv(@import("std").os.windows.WINAPI) ?HCERTSTORE,
        getROOTHStore: *const fn(
            self: *const IEnroll,
        ) callconv(@import("std").os.windows.WINAPI) ?HCERTSTORE,
        enumProvidersWStr: *const fn(
            self: *const IEnroll,
            dwIndex: i32,
            dwFlags: i32,
            pbstrProvName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        enumContainersWStr: *const fn(
            self: *const IEnroll,
            dwIndex: i32,
            pbstr: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        freeRequestInfoBlob: *const fn(
            self: *const IEnroll,
            pkcs7OrPkcs10: CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MyStoreNameWStr: *const fn(
            self: *const IEnroll,
            szwName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MyStoreNameWStr: *const fn(
            self: *const IEnroll,
            szwName: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MyStoreTypeWStr: *const fn(
            self: *const IEnroll,
            szwType: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MyStoreTypeWStr: *const fn(
            self: *const IEnroll,
            szwType: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MyStoreFlags: *const fn(
            self: *const IEnroll,
            pdwFlags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MyStoreFlags: *const fn(
            self: *const IEnroll,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CAStoreNameWStr: *const fn(
            self: *const IEnroll,
            szwName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CAStoreNameWStr: *const fn(
            self: *const IEnroll,
            szwName: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CAStoreTypeWStr: *const fn(
            self: *const IEnroll,
            szwType: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CAStoreTypeWStr: *const fn(
            self: *const IEnroll,
            szwType: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CAStoreFlags: *const fn(
            self: *const IEnroll,
            pdwFlags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CAStoreFlags: *const fn(
            self: *const IEnroll,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RootStoreNameWStr: *const fn(
            self: *const IEnroll,
            szwName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RootStoreNameWStr: *const fn(
            self: *const IEnroll,
            szwName: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RootStoreTypeWStr: *const fn(
            self: *const IEnroll,
            szwType: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RootStoreTypeWStr: *const fn(
            self: *const IEnroll,
            szwType: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RootStoreFlags: *const fn(
            self: *const IEnroll,
            pdwFlags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RootStoreFlags: *const fn(
            self: *const IEnroll,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestStoreNameWStr: *const fn(
            self: *const IEnroll,
            szwName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RequestStoreNameWStr: *const fn(
            self: *const IEnroll,
            szwName: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestStoreTypeWStr: *const fn(
            self: *const IEnroll,
            szwType: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RequestStoreTypeWStr: *const fn(
            self: *const IEnroll,
            szwType: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestStoreFlags: *const fn(
            self: *const IEnroll,
            pdwFlags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RequestStoreFlags: *const fn(
            self: *const IEnroll,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ContainerNameWStr: *const fn(
            self: *const IEnroll,
            szwContainer: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ContainerNameWStr: *const fn(
            self: *const IEnroll,
            szwContainer: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderNameWStr: *const fn(
            self: *const IEnroll,
            szwProvider: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProviderNameWStr: *const fn(
            self: *const IEnroll,
            szwProvider: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderType: *const fn(
            self: *const IEnroll,
            pdwType: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProviderType: *const fn(
            self: *const IEnroll,
            dwType: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeySpec: *const fn(
            self: *const IEnroll,
            pdw: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_KeySpec: *const fn(
            self: *const IEnroll,
            dw: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderFlags: *const fn(
            self: *const IEnroll,
            pdwFlags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProviderFlags: *const fn(
            self: *const IEnroll,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UseExistingKeySet: *const fn(
            self: *const IEnroll,
            fUseExistingKeys: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UseExistingKeySet: *const fn(
            self: *const IEnroll,
            fUseExistingKeys: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GenKeyFlags: *const fn(
            self: *const IEnroll,
            pdwFlags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GenKeyFlags: *const fn(
            self: *const IEnroll,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DeleteRequestCert: *const fn(
            self: *const IEnroll,
            fDelete: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DeleteRequestCert: *const fn(
            self: *const IEnroll,
            fDelete: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WriteCertToUserDS: *const fn(
            self: *const IEnroll,
            fBool: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_WriteCertToUserDS: *const fn(
            self: *const IEnroll,
            fBool: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnableT61DNEncoding: *const fn(
            self: *const IEnroll,
            fBool: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EnableT61DNEncoding: *const fn(
            self: *const IEnroll,
            fBool: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WriteCertToCSP: *const fn(
            self: *const IEnroll,
            fBool: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_WriteCertToCSP: *const fn(
            self: *const IEnroll,
            fBool: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SPCFileNameWStr: *const fn(
            self: *const IEnroll,
            szw: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SPCFileNameWStr: *const fn(
            self: *const IEnroll,
            szw: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PVKFileNameWStr: *const fn(
            self: *const IEnroll,
            szw: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PVKFileNameWStr: *const fn(
            self: *const IEnroll,
            szw: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HashAlgorithmWStr: *const fn(
            self: *const IEnroll,
            szw: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HashAlgorithmWStr: *const fn(
            self: *const IEnroll,
            szw: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RenewalCertificate: *const fn(
            self: *const IEnroll,
            ppCertContext: ?*?*CERT_CONTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RenewalCertificate: *const fn(
            self: *const IEnroll,
            pCertContext: ?*const CERT_CONTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCertTypeToRequestWStr: *const fn(
            self: *const IEnroll,
            szw: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddNameValuePairToSignatureWStr: *const fn(
            self: *const IEnroll,
            Name: ?PWSTR,
            Value: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddExtensionsToRequest: *const fn(
            self: *const IEnroll,
            pCertExtensions: ?*CERT_EXTENSIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAuthenticatedAttributesToPKCS7Request: *const fn(
            self: *const IEnroll,
            pAttributes: ?*CRYPT_ATTRIBUTES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePKCS7RequestFromRequest: *const fn(
            self: *const IEnroll,
            pRequest: ?*CRYPTOAPI_BLOB,
            pSigningCertContext: ?*const CERT_CONTEXT,
            pPkcs7Blob: ?*CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn createFilePKCS10WStr(self: *const IEnroll, DNName: ?[*:0]const u16, Usage: ?[*:0]const u16, wszPKCS10FileName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.createFilePKCS10WStr(self, DNName, Usage, wszPKCS10FileName);
    }
    pub fn acceptFilePKCS7WStr(self: *const IEnroll, wszPKCS7FileName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.acceptFilePKCS7WStr(self, wszPKCS7FileName);
    }
    pub fn createPKCS10WStr(self: *const IEnroll, DNName: ?[*:0]const u16, Usage: ?[*:0]const u16, pPkcs10Blob: ?*CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.createPKCS10WStr(self, DNName, Usage, pPkcs10Blob);
    }
    pub fn acceptPKCS7Blob(self: *const IEnroll, pBlobPKCS7: ?*CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.acceptPKCS7Blob(self, pBlobPKCS7);
    }
    pub fn getCertContextFromPKCS7(self: *const IEnroll, pBlobPKCS7: ?*CRYPTOAPI_BLOB) callconv(.Inline) ?*CERT_CONTEXT {
        return self.vtable.getCertContextFromPKCS7(self, pBlobPKCS7);
    }
    pub fn getMyStore(self: *const IEnroll) callconv(.Inline) ?HCERTSTORE {
        return self.vtable.getMyStore(self);
    }
    pub fn getCAStore(self: *const IEnroll) callconv(.Inline) ?HCERTSTORE {
        return self.vtable.getCAStore(self);
    }
    pub fn getROOTHStore(self: *const IEnroll) callconv(.Inline) ?HCERTSTORE {
        return self.vtable.getROOTHStore(self);
    }
    pub fn enumProvidersWStr(self: *const IEnroll, dwIndex: i32, dwFlags: i32, pbstrProvName: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.enumProvidersWStr(self, dwIndex, dwFlags, pbstrProvName);
    }
    pub fn enumContainersWStr(self: *const IEnroll, dwIndex: i32, pbstr: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.enumContainersWStr(self, dwIndex, pbstr);
    }
    pub fn freeRequestInfoBlob(self: *const IEnroll, pkcs7OrPkcs10: CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.freeRequestInfoBlob(self, pkcs7OrPkcs10);
    }
    pub fn get_MyStoreNameWStr(self: *const IEnroll, szwName: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_MyStoreNameWStr(self, szwName);
    }
    pub fn put_MyStoreNameWStr(self: *const IEnroll, szwName: ?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_MyStoreNameWStr(self, szwName);
    }
    pub fn get_MyStoreTypeWStr(self: *const IEnroll, szwType: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_MyStoreTypeWStr(self, szwType);
    }
    pub fn put_MyStoreTypeWStr(self: *const IEnroll, szwType: ?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_MyStoreTypeWStr(self, szwType);
    }
    pub fn get_MyStoreFlags(self: *const IEnroll, pdwFlags: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_MyStoreFlags(self, pdwFlags);
    }
    pub fn put_MyStoreFlags(self: *const IEnroll, dwFlags: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_MyStoreFlags(self, dwFlags);
    }
    pub fn get_CAStoreNameWStr(self: *const IEnroll, szwName: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_CAStoreNameWStr(self, szwName);
    }
    pub fn put_CAStoreNameWStr(self: *const IEnroll, szwName: ?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_CAStoreNameWStr(self, szwName);
    }
    pub fn get_CAStoreTypeWStr(self: *const IEnroll, szwType: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_CAStoreTypeWStr(self, szwType);
    }
    pub fn put_CAStoreTypeWStr(self: *const IEnroll, szwType: ?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_CAStoreTypeWStr(self, szwType);
    }
    pub fn get_CAStoreFlags(self: *const IEnroll, pdwFlags: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_CAStoreFlags(self, pdwFlags);
    }
    pub fn put_CAStoreFlags(self: *const IEnroll, dwFlags: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_CAStoreFlags(self, dwFlags);
    }
    pub fn get_RootStoreNameWStr(self: *const IEnroll, szwName: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RootStoreNameWStr(self, szwName);
    }
    pub fn put_RootStoreNameWStr(self: *const IEnroll, szwName: ?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_RootStoreNameWStr(self, szwName);
    }
    pub fn get_RootStoreTypeWStr(self: *const IEnroll, szwType: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RootStoreTypeWStr(self, szwType);
    }
    pub fn put_RootStoreTypeWStr(self: *const IEnroll, szwType: ?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_RootStoreTypeWStr(self, szwType);
    }
    pub fn get_RootStoreFlags(self: *const IEnroll, pdwFlags: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_RootStoreFlags(self, pdwFlags);
    }
    pub fn put_RootStoreFlags(self: *const IEnroll, dwFlags: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_RootStoreFlags(self, dwFlags);
    }
    pub fn get_RequestStoreNameWStr(self: *const IEnroll, szwName: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RequestStoreNameWStr(self, szwName);
    }
    pub fn put_RequestStoreNameWStr(self: *const IEnroll, szwName: ?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_RequestStoreNameWStr(self, szwName);
    }
    pub fn get_RequestStoreTypeWStr(self: *const IEnroll, szwType: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_RequestStoreTypeWStr(self, szwType);
    }
    pub fn put_RequestStoreTypeWStr(self: *const IEnroll, szwType: ?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_RequestStoreTypeWStr(self, szwType);
    }
    pub fn get_RequestStoreFlags(self: *const IEnroll, pdwFlags: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_RequestStoreFlags(self, pdwFlags);
    }
    pub fn put_RequestStoreFlags(self: *const IEnroll, dwFlags: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_RequestStoreFlags(self, dwFlags);
    }
    pub fn get_ContainerNameWStr(self: *const IEnroll, szwContainer: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ContainerNameWStr(self, szwContainer);
    }
    pub fn put_ContainerNameWStr(self: *const IEnroll, szwContainer: ?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ContainerNameWStr(self, szwContainer);
    }
    pub fn get_ProviderNameWStr(self: *const IEnroll, szwProvider: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ProviderNameWStr(self, szwProvider);
    }
    pub fn put_ProviderNameWStr(self: *const IEnroll, szwProvider: ?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_ProviderNameWStr(self, szwProvider);
    }
    pub fn get_ProviderType(self: *const IEnroll, pdwType: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ProviderType(self, pdwType);
    }
    pub fn put_ProviderType(self: *const IEnroll, dwType: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_ProviderType(self, dwType);
    }
    pub fn get_KeySpec(self: *const IEnroll, pdw: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_KeySpec(self, pdw);
    }
    pub fn put_KeySpec(self: *const IEnroll, dw: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_KeySpec(self, dw);
    }
    pub fn get_ProviderFlags(self: *const IEnroll, pdwFlags: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ProviderFlags(self, pdwFlags);
    }
    pub fn put_ProviderFlags(self: *const IEnroll, dwFlags: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_ProviderFlags(self, dwFlags);
    }
    pub fn get_UseExistingKeySet(self: *const IEnroll, fUseExistingKeys: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.get_UseExistingKeySet(self, fUseExistingKeys);
    }
    pub fn put_UseExistingKeySet(self: *const IEnroll, fUseExistingKeys: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.put_UseExistingKeySet(self, fUseExistingKeys);
    }
    pub fn get_GenKeyFlags(self: *const IEnroll, pdwFlags: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_GenKeyFlags(self, pdwFlags);
    }
    pub fn put_GenKeyFlags(self: *const IEnroll, dwFlags: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_GenKeyFlags(self, dwFlags);
    }
    pub fn get_DeleteRequestCert(self: *const IEnroll, fDelete: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.get_DeleteRequestCert(self, fDelete);
    }
    pub fn put_DeleteRequestCert(self: *const IEnroll, fDelete: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.put_DeleteRequestCert(self, fDelete);
    }
    pub fn get_WriteCertToUserDS(self: *const IEnroll, fBool: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.get_WriteCertToUserDS(self, fBool);
    }
    pub fn put_WriteCertToUserDS(self: *const IEnroll, fBool: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.put_WriteCertToUserDS(self, fBool);
    }
    pub fn get_EnableT61DNEncoding(self: *const IEnroll, fBool: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.get_EnableT61DNEncoding(self, fBool);
    }
    pub fn put_EnableT61DNEncoding(self: *const IEnroll, fBool: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.put_EnableT61DNEncoding(self, fBool);
    }
    pub fn get_WriteCertToCSP(self: *const IEnroll, fBool: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.get_WriteCertToCSP(self, fBool);
    }
    pub fn put_WriteCertToCSP(self: *const IEnroll, fBool: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.put_WriteCertToCSP(self, fBool);
    }
    pub fn get_SPCFileNameWStr(self: *const IEnroll, szw: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_SPCFileNameWStr(self, szw);
    }
    pub fn put_SPCFileNameWStr(self: *const IEnroll, szw: ?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_SPCFileNameWStr(self, szw);
    }
    pub fn get_PVKFileNameWStr(self: *const IEnroll, szw: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_PVKFileNameWStr(self, szw);
    }
    pub fn put_PVKFileNameWStr(self: *const IEnroll, szw: ?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_PVKFileNameWStr(self, szw);
    }
    pub fn get_HashAlgorithmWStr(self: *const IEnroll, szw: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_HashAlgorithmWStr(self, szw);
    }
    pub fn put_HashAlgorithmWStr(self: *const IEnroll, szw: ?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.put_HashAlgorithmWStr(self, szw);
    }
    pub fn get_RenewalCertificate(self: *const IEnroll, ppCertContext: ?*?*CERT_CONTEXT) callconv(.Inline) HRESULT {
        return self.vtable.get_RenewalCertificate(self, ppCertContext);
    }
    pub fn put_RenewalCertificate(self: *const IEnroll, pCertContext: ?*const CERT_CONTEXT) callconv(.Inline) HRESULT {
        return self.vtable.put_RenewalCertificate(self, pCertContext);
    }
    pub fn AddCertTypeToRequestWStr(self: *const IEnroll, szw: ?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.AddCertTypeToRequestWStr(self, szw);
    }
    pub fn AddNameValuePairToSignatureWStr(self: *const IEnroll, Name: ?PWSTR, Value: ?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.AddNameValuePairToSignatureWStr(self, Name, Value);
    }
    pub fn AddExtensionsToRequest(self: *const IEnroll, pCertExtensions: ?*CERT_EXTENSIONS) callconv(.Inline) HRESULT {
        return self.vtable.AddExtensionsToRequest(self, pCertExtensions);
    }
    pub fn AddAuthenticatedAttributesToPKCS7Request(self: *const IEnroll, pAttributes: ?*CRYPT_ATTRIBUTES) callconv(.Inline) HRESULT {
        return self.vtable.AddAuthenticatedAttributesToPKCS7Request(self, pAttributes);
    }
    pub fn CreatePKCS7RequestFromRequest(self: *const IEnroll, pRequest: ?*CRYPTOAPI_BLOB, pSigningCertContext: ?*const CERT_CONTEXT, pPkcs7Blob: ?*CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.CreatePKCS7RequestFromRequest(self, pRequest, pSigningCertContext, pPkcs7Blob);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IEnroll2_Value = Guid.initString("c080e199-b7df-11d2-a421-00c04f79fe8e");
pub const IID_IEnroll2 = &IID_IEnroll2_Value;
pub const IEnroll2 = extern union {
    pub const VTable = extern struct {
        base: IEnroll.VTable,
        InstallPKCS7Blob: *const fn(
            self: *const IEnroll2,
            pBlobPKCS7: ?*CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn(
            self: *const IEnroll2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedKeySpec: *const fn(
            self: *const IEnroll2,
            pdwKeySpec: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyLen: *const fn(
            self: *const IEnroll2,
            fMin: BOOL,
            fExchange: BOOL,
            pdwKeySize: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumAlgs: *const fn(
            self: *const IEnroll2,
            dwIndex: i32,
            algClass: i32,
            pdwAlgID: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAlgNameWStr: *const fn(
            self: *const IEnroll2,
            algID: i32,
            ppwsz: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReuseHardwareKeyIfUnableToGenNew: *const fn(
            self: *const IEnroll2,
            fReuseHardwareKeyIfUnableToGenNew: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReuseHardwareKeyIfUnableToGenNew: *const fn(
            self: *const IEnroll2,
            fReuseHardwareKeyIfUnableToGenNew: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HashAlgID: *const fn(
            self: *const IEnroll2,
            hashAlgID: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HashAlgID: *const fn(
            self: *const IEnroll2,
            hashAlgID: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHStoreMy: *const fn(
            self: *const IEnroll2,
            hStore: ?HCERTSTORE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHStoreCA: *const fn(
            self: *const IEnroll2,
            hStore: ?HCERTSTORE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHStoreROOT: *const fn(
            self: *const IEnroll2,
            hStore: ?HCERTSTORE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHStoreRequest: *const fn(
            self: *const IEnroll2,
            hStore: ?HCERTSTORE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LimitExchangeKeyToEncipherment: *const fn(
            self: *const IEnroll2,
            fLimitExchangeKeyToEncipherment: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LimitExchangeKeyToEncipherment: *const fn(
            self: *const IEnroll2,
            fLimitExchangeKeyToEncipherment: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EnableSMIMECapabilities: *const fn(
            self: *const IEnroll2,
            fEnableSMIMECapabilities: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnableSMIMECapabilities: *const fn(
            self: *const IEnroll2,
            fEnableSMIMECapabilities: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IEnroll: IEnroll,
    IUnknown: IUnknown,
    pub fn InstallPKCS7Blob(self: *const IEnroll2, pBlobPKCS7: ?*CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.InstallPKCS7Blob(self, pBlobPKCS7);
    }
    pub fn Reset(self: *const IEnroll2) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn GetSupportedKeySpec(self: *const IEnroll2, pdwKeySpec: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetSupportedKeySpec(self, pdwKeySpec);
    }
    pub fn GetKeyLen(self: *const IEnroll2, fMin: BOOL, fExchange: BOOL, pdwKeySize: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetKeyLen(self, fMin, fExchange, pdwKeySize);
    }
    pub fn EnumAlgs(self: *const IEnroll2, dwIndex: i32, algClass: i32, pdwAlgID: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.EnumAlgs(self, dwIndex, algClass, pdwAlgID);
    }
    pub fn GetAlgNameWStr(self: *const IEnroll2, algID: i32, ppwsz: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.GetAlgNameWStr(self, algID, ppwsz);
    }
    pub fn put_ReuseHardwareKeyIfUnableToGenNew(self: *const IEnroll2, fReuseHardwareKeyIfUnableToGenNew: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.put_ReuseHardwareKeyIfUnableToGenNew(self, fReuseHardwareKeyIfUnableToGenNew);
    }
    pub fn get_ReuseHardwareKeyIfUnableToGenNew(self: *const IEnroll2, fReuseHardwareKeyIfUnableToGenNew: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.get_ReuseHardwareKeyIfUnableToGenNew(self, fReuseHardwareKeyIfUnableToGenNew);
    }
    pub fn put_HashAlgID(self: *const IEnroll2, hashAlgID: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_HashAlgID(self, hashAlgID);
    }
    pub fn get_HashAlgID(self: *const IEnroll2, hashAlgID: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_HashAlgID(self, hashAlgID);
    }
    pub fn SetHStoreMy(self: *const IEnroll2, hStore: ?HCERTSTORE) callconv(.Inline) HRESULT {
        return self.vtable.SetHStoreMy(self, hStore);
    }
    pub fn SetHStoreCA(self: *const IEnroll2, hStore: ?HCERTSTORE) callconv(.Inline) HRESULT {
        return self.vtable.SetHStoreCA(self, hStore);
    }
    pub fn SetHStoreROOT(self: *const IEnroll2, hStore: ?HCERTSTORE) callconv(.Inline) HRESULT {
        return self.vtable.SetHStoreROOT(self, hStore);
    }
    pub fn SetHStoreRequest(self: *const IEnroll2, hStore: ?HCERTSTORE) callconv(.Inline) HRESULT {
        return self.vtable.SetHStoreRequest(self, hStore);
    }
    pub fn put_LimitExchangeKeyToEncipherment(self: *const IEnroll2, fLimitExchangeKeyToEncipherment: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.put_LimitExchangeKeyToEncipherment(self, fLimitExchangeKeyToEncipherment);
    }
    pub fn get_LimitExchangeKeyToEncipherment(self: *const IEnroll2, fLimitExchangeKeyToEncipherment: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.get_LimitExchangeKeyToEncipherment(self, fLimitExchangeKeyToEncipherment);
    }
    pub fn put_EnableSMIMECapabilities(self: *const IEnroll2, fEnableSMIMECapabilities: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.put_EnableSMIMECapabilities(self, fEnableSMIMECapabilities);
    }
    pub fn get_EnableSMIMECapabilities(self: *const IEnroll2, fEnableSMIMECapabilities: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.get_EnableSMIMECapabilities(self, fEnableSMIMECapabilities);
    }
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IEnroll4_Value = Guid.initString("f8053fe5-78f4-448f-a0db-41d61b73446b");
pub const IID_IEnroll4 = &IID_IEnroll4_Value;
pub const IEnroll4 = extern union {
    pub const VTable = extern struct {
        base: IEnroll2.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ThumbPrintWStr: *const fn(
            self: *const IEnroll4,
            thumbPrintBlob: CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ThumbPrintWStr: *const fn(
            self: *const IEnroll4,
            thumbPrintBlob: ?*CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPrivateKeyArchiveCertificate: *const fn(
            self: *const IEnroll4,
            pPrivateKeyArchiveCert: ?*const CERT_CONTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrivateKeyArchiveCertificate: *const fn(
            self: *const IEnroll4,
        ) callconv(@import("std").os.windows.WINAPI) ?*CERT_CONTEXT,
        binaryBlobToString: *const fn(
            self: *const IEnroll4,
            Flags: i32,
            pblobBinary: ?*CRYPTOAPI_BLOB,
            ppwszString: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        stringToBinaryBlob: *const fn(
            self: *const IEnroll4,
            Flags: i32,
            pwszString: ?[*:0]const u16,
            pblobBinary: ?*CRYPTOAPI_BLOB,
            pdwSkip: ?*i32,
            pdwFlags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addExtensionToRequestWStr: *const fn(
            self: *const IEnroll4,
            Flags: i32,
            pwszName: ?[*:0]const u16,
            pblobValue: ?*CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addAttributeToRequestWStr: *const fn(
            self: *const IEnroll4,
            Flags: i32,
            pwszName: ?[*:0]const u16,
            pblobValue: ?*CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addNameValuePairToRequestWStr: *const fn(
            self: *const IEnroll4,
            Flags: i32,
            pwszName: ?[*:0]const u16,
            pwszValue: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        resetExtensions: *const fn(
            self: *const IEnroll4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        resetAttributes: *const fn(
            self: *const IEnroll4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createRequestWStr: *const fn(
            self: *const IEnroll4,
            Flags: CERT_CREATE_REQUEST_FLAGS,
            pwszDNName: ?[*:0]const u16,
            pwszUsage: ?[*:0]const u16,
            pblobRequest: ?*CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createFileRequestWStr: *const fn(
            self: *const IEnroll4,
            Flags: CERT_CREATE_REQUEST_FLAGS,
            pwszDNName: ?[*:0]const u16,
            pwszUsage: ?[*:0]const u16,
            pwszRequestFileName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        acceptResponseBlob: *const fn(
            self: *const IEnroll4,
            pblobResponse: ?*CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        acceptFileResponseWStr: *const fn(
            self: *const IEnroll4,
            pwszResponseFileName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getCertContextFromResponseBlob: *const fn(
            self: *const IEnroll4,
            pblobResponse: ?*CRYPTOAPI_BLOB,
            ppCertContext: ?*?*CERT_CONTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getCertContextFromFileResponseWStr: *const fn(
            self: *const IEnroll4,
            pwszResponseFileName: ?[*:0]const u16,
            ppCertContext: ?*?*CERT_CONTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createPFXWStr: *const fn(
            self: *const IEnroll4,
            pwszPassword: ?[*:0]const u16,
            pblobPFX: ?*CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createFilePFXWStr: *const fn(
            self: *const IEnroll4,
            pwszPassword: ?[*:0]const u16,
            pwszPFXFileName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setPendingRequestInfoWStr: *const fn(
            self: *const IEnroll4,
            lRequestID: i32,
            pwszCADNS: ?[*:0]const u16,
            pwszCAName: ?[*:0]const u16,
            pwszFriendlyName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        enumPendingRequestWStr: *const fn(
            self: *const IEnroll4,
            lIndex: i32,
            lDesiredProperty: PENDING_REQUEST_DESIRED_PROPERTY,
            ppProperty: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removePendingRequestWStr: *const fn(
            self: *const IEnroll4,
            thumbPrintBlob: CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyLenEx: *const fn(
            self: *const IEnroll4,
            lSizeSpec: XEKL_KEYSIZE,
            lKeySpec: XEKL_KEYSPEC,
            pdwKeySize: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallPKCS7BlobEx: *const fn(
            self: *const IEnroll4,
            pBlobPKCS7: ?*CRYPTOAPI_BLOB,
            plCertInstalled: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCertTypeToRequestWStrEx: *const fn(
            self: *const IEnroll4,
            lType: ADDED_CERT_TYPE,
            pwszOIDOrName: ?[*:0]const u16,
            lMajorVersion: i32,
            fMinorVersion: BOOL,
            lMinorVersion: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getProviderTypeWStr: *const fn(
            self: *const IEnroll4,
            pwszProvName: ?[*:0]const u16,
            plProvType: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addBlobPropertyToCertificateWStr: *const fn(
            self: *const IEnroll4,
            lPropertyId: i32,
            lReserved: i32,
            pBlobProperty: ?*CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSignerCertificate: *const fn(
            self: *const IEnroll4,
            pSignerCert: ?*const CERT_CONTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ClientId: *const fn(
            self: *const IEnroll4,
            lClientId: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClientId: *const fn(
            self: *const IEnroll4,
            plClientId: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IncludeSubjectKeyID: *const fn(
            self: *const IEnroll4,
            fInclude: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IncludeSubjectKeyID: *const fn(
            self: *const IEnroll4,
            pfInclude: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IEnroll2: IEnroll2,
    IEnroll: IEnroll,
    IUnknown: IUnknown,
    pub fn put_ThumbPrintWStr(self: *const IEnroll4, thumbPrintBlob: CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.put_ThumbPrintWStr(self, thumbPrintBlob);
    }
    pub fn get_ThumbPrintWStr(self: *const IEnroll4, thumbPrintBlob: ?*CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.get_ThumbPrintWStr(self, thumbPrintBlob);
    }
    pub fn SetPrivateKeyArchiveCertificate(self: *const IEnroll4, pPrivateKeyArchiveCert: ?*const CERT_CONTEXT) callconv(.Inline) HRESULT {
        return self.vtable.SetPrivateKeyArchiveCertificate(self, pPrivateKeyArchiveCert);
    }
    pub fn GetPrivateKeyArchiveCertificate(self: *const IEnroll4) callconv(.Inline) ?*CERT_CONTEXT {
        return self.vtable.GetPrivateKeyArchiveCertificate(self);
    }
    pub fn binaryBlobToString(self: *const IEnroll4, Flags: i32, pblobBinary: ?*CRYPTOAPI_BLOB, ppwszString: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.binaryBlobToString(self, Flags, pblobBinary, ppwszString);
    }
    pub fn stringToBinaryBlob(self: *const IEnroll4, Flags: i32, pwszString: ?[*:0]const u16, pblobBinary: ?*CRYPTOAPI_BLOB, pdwSkip: ?*i32, pdwFlags: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.stringToBinaryBlob(self, Flags, pwszString, pblobBinary, pdwSkip, pdwFlags);
    }
    pub fn addExtensionToRequestWStr(self: *const IEnroll4, Flags: i32, pwszName: ?[*:0]const u16, pblobValue: ?*CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.addExtensionToRequestWStr(self, Flags, pwszName, pblobValue);
    }
    pub fn addAttributeToRequestWStr(self: *const IEnroll4, Flags: i32, pwszName: ?[*:0]const u16, pblobValue: ?*CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.addAttributeToRequestWStr(self, Flags, pwszName, pblobValue);
    }
    pub fn addNameValuePairToRequestWStr(self: *const IEnroll4, Flags: i32, pwszName: ?[*:0]const u16, pwszValue: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.addNameValuePairToRequestWStr(self, Flags, pwszName, pwszValue);
    }
    pub fn resetExtensions(self: *const IEnroll4) callconv(.Inline) HRESULT {
        return self.vtable.resetExtensions(self);
    }
    pub fn resetAttributes(self: *const IEnroll4) callconv(.Inline) HRESULT {
        return self.vtable.resetAttributes(self);
    }
    pub fn createRequestWStr(self: *const IEnroll4, Flags: CERT_CREATE_REQUEST_FLAGS, pwszDNName: ?[*:0]const u16, pwszUsage: ?[*:0]const u16, pblobRequest: ?*CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.createRequestWStr(self, Flags, pwszDNName, pwszUsage, pblobRequest);
    }
    pub fn createFileRequestWStr(self: *const IEnroll4, Flags: CERT_CREATE_REQUEST_FLAGS, pwszDNName: ?[*:0]const u16, pwszUsage: ?[*:0]const u16, pwszRequestFileName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.createFileRequestWStr(self, Flags, pwszDNName, pwszUsage, pwszRequestFileName);
    }
    pub fn acceptResponseBlob(self: *const IEnroll4, pblobResponse: ?*CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.acceptResponseBlob(self, pblobResponse);
    }
    pub fn acceptFileResponseWStr(self: *const IEnroll4, pwszResponseFileName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.acceptFileResponseWStr(self, pwszResponseFileName);
    }
    pub fn getCertContextFromResponseBlob(self: *const IEnroll4, pblobResponse: ?*CRYPTOAPI_BLOB, ppCertContext: ?*?*CERT_CONTEXT) callconv(.Inline) HRESULT {
        return self.vtable.getCertContextFromResponseBlob(self, pblobResponse, ppCertContext);
    }
    pub fn getCertContextFromFileResponseWStr(self: *const IEnroll4, pwszResponseFileName: ?[*:0]const u16, ppCertContext: ?*?*CERT_CONTEXT) callconv(.Inline) HRESULT {
        return self.vtable.getCertContextFromFileResponseWStr(self, pwszResponseFileName, ppCertContext);
    }
    pub fn createPFXWStr(self: *const IEnroll4, pwszPassword: ?[*:0]const u16, pblobPFX: ?*CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.createPFXWStr(self, pwszPassword, pblobPFX);
    }
    pub fn createFilePFXWStr(self: *const IEnroll4, pwszPassword: ?[*:0]const u16, pwszPFXFileName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.createFilePFXWStr(self, pwszPassword, pwszPFXFileName);
    }
    pub fn setPendingRequestInfoWStr(self: *const IEnroll4, lRequestID: i32, pwszCADNS: ?[*:0]const u16, pwszCAName: ?[*:0]const u16, pwszFriendlyName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.setPendingRequestInfoWStr(self, lRequestID, pwszCADNS, pwszCAName, pwszFriendlyName);
    }
    pub fn enumPendingRequestWStr(self: *const IEnroll4, lIndex: i32, lDesiredProperty: PENDING_REQUEST_DESIRED_PROPERTY, ppProperty: ?*anyopaque) callconv(.Inline) HRESULT {
        return self.vtable.enumPendingRequestWStr(self, lIndex, lDesiredProperty, ppProperty);
    }
    pub fn removePendingRequestWStr(self: *const IEnroll4, thumbPrintBlob: CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.removePendingRequestWStr(self, thumbPrintBlob);
    }
    pub fn GetKeyLenEx(self: *const IEnroll4, lSizeSpec: XEKL_KEYSIZE, lKeySpec: XEKL_KEYSPEC, pdwKeySize: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetKeyLenEx(self, lSizeSpec, lKeySpec, pdwKeySize);
    }
    pub fn InstallPKCS7BlobEx(self: *const IEnroll4, pBlobPKCS7: ?*CRYPTOAPI_BLOB, plCertInstalled: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.InstallPKCS7BlobEx(self, pBlobPKCS7, plCertInstalled);
    }
    pub fn AddCertTypeToRequestWStrEx(self: *const IEnroll4, lType: ADDED_CERT_TYPE, pwszOIDOrName: ?[*:0]const u16, lMajorVersion: i32, fMinorVersion: BOOL, lMinorVersion: i32) callconv(.Inline) HRESULT {
        return self.vtable.AddCertTypeToRequestWStrEx(self, lType, pwszOIDOrName, lMajorVersion, fMinorVersion, lMinorVersion);
    }
    pub fn getProviderTypeWStr(self: *const IEnroll4, pwszProvName: ?[*:0]const u16, plProvType: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.getProviderTypeWStr(self, pwszProvName, plProvType);
    }
    pub fn addBlobPropertyToCertificateWStr(self: *const IEnroll4, lPropertyId: i32, lReserved: i32, pBlobProperty: ?*CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.addBlobPropertyToCertificateWStr(self, lPropertyId, lReserved, pBlobProperty);
    }
    pub fn SetSignerCertificate(self: *const IEnroll4, pSignerCert: ?*const CERT_CONTEXT) callconv(.Inline) HRESULT {
        return self.vtable.SetSignerCertificate(self, pSignerCert);
    }
    pub fn put_ClientId(self: *const IEnroll4, lClientId: i32) callconv(.Inline) HRESULT {
        return self.vtable.put_ClientId(self, lClientId);
    }
    pub fn get_ClientId(self: *const IEnroll4, plClientId: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_ClientId(self, plClientId);
    }
    pub fn put_IncludeSubjectKeyID(self: *const IEnroll4, fInclude: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.put_IncludeSubjectKeyID(self, fInclude);
    }
    pub fn get_IncludeSubjectKeyID(self: *const IEnroll4, pfInclude: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.get_IncludeSubjectKeyID(self, pfInclude);
    }
};

const IID_ICertRequestD_Value = Guid.initString("d99e6e70-fc88-11d0-b498-00a0c90312f3");
pub const IID_ICertRequestD = &IID_ICertRequestD_Value;
pub const ICertRequestD = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Request: *const fn(
            self: *const ICertRequestD,
            dwFlags: u32,
            pwszAuthority: ?[*:0]const u16,
            pdwRequestId: ?*u32,
            pdwDisposition: ?*u32,
            pwszAttributes: ?[*:0]const u16,
            pctbRequest: ?*const CERTTRANSBLOB,
            pctbCertChain: ?*CERTTRANSBLOB,
            pctbEncodedCert: ?*CERTTRANSBLOB,
            pctbDispositionMessage: ?*CERTTRANSBLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCACert: *const fn(
            self: *const ICertRequestD,
            fchain: u32,
            pwszAuthority: ?[*:0]const u16,
            pctbOut: ?*CERTTRANSBLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Ping: *const fn(
            self: *const ICertRequestD,
            pwszAuthority: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn Request(self: *const ICertRequestD, dwFlags: u32, pwszAuthority: ?[*:0]const u16, pdwRequestId: ?*u32, pdwDisposition: ?*u32, pwszAttributes: ?[*:0]const u16, pctbRequest: ?*const CERTTRANSBLOB, pctbCertChain: ?*CERTTRANSBLOB, pctbEncodedCert: ?*CERTTRANSBLOB, pctbDispositionMessage: ?*CERTTRANSBLOB) callconv(.Inline) HRESULT {
        return self.vtable.Request(self, dwFlags, pwszAuthority, pdwRequestId, pdwDisposition, pwszAttributes, pctbRequest, pctbCertChain, pctbEncodedCert, pctbDispositionMessage);
    }
    pub fn GetCACert(self: *const ICertRequestD, fchain: u32, pwszAuthority: ?[*:0]const u16, pctbOut: ?*CERTTRANSBLOB) callconv(.Inline) HRESULT {
        return self.vtable.GetCACert(self, fchain, pwszAuthority, pctbOut);
    }
    pub fn Ping(self: *const ICertRequestD, pwszAuthority: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.Ping(self, pwszAuthority);
    }
};

const IID_ICertRequestD2_Value = Guid.initString("5422fd3a-d4b8-4cef-a12e-e87d4ca22e90");
pub const IID_ICertRequestD2 = &IID_ICertRequestD2_Value;
pub const ICertRequestD2 = extern union {
    pub const VTable = extern struct {
        base: ICertRequestD.VTable,
        Request2: *const fn(
            self: *const ICertRequestD2,
            pwszAuthority: ?[*:0]const u16,
            dwFlags: u32,
            pwszSerialNumber: ?[*:0]const u16,
            pdwRequestId: ?*u32,
            pdwDisposition: ?*u32,
            pwszAttributes: ?[*:0]const u16,
            pctbRequest: ?*const CERTTRANSBLOB,
            pctbFullResponse: ?*CERTTRANSBLOB,
            pctbEncodedCert: ?*CERTTRANSBLOB,
            pctbDispositionMessage: ?*CERTTRANSBLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAProperty: *const fn(
            self: *const ICertRequestD2,
            pwszAuthority: ?[*:0]const u16,
            PropId: i32,
            PropIndex: i32,
            PropType: i32,
            pctbPropertyValue: ?*CERTTRANSBLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAPropertyInfo: *const fn(
            self: *const ICertRequestD2,
            pwszAuthority: ?[*:0]const u16,
            pcProperty: ?*i32,
            pctbPropInfo: ?*CERTTRANSBLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Ping2: *const fn(
            self: *const ICertRequestD2,
            pwszAuthority: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    ICertRequestD: ICertRequestD,
    IUnknown: IUnknown,
    pub fn Request2(self: *const ICertRequestD2, pwszAuthority: ?[*:0]const u16, dwFlags: u32, pwszSerialNumber: ?[*:0]const u16, pdwRequestId: ?*u32, pdwDisposition: ?*u32, pwszAttributes: ?[*:0]const u16, pctbRequest: ?*const CERTTRANSBLOB, pctbFullResponse: ?*CERTTRANSBLOB, pctbEncodedCert: ?*CERTTRANSBLOB, pctbDispositionMessage: ?*CERTTRANSBLOB) callconv(.Inline) HRESULT {
        return self.vtable.Request2(self, pwszAuthority, dwFlags, pwszSerialNumber, pdwRequestId, pdwDisposition, pwszAttributes, pctbRequest, pctbFullResponse, pctbEncodedCert, pctbDispositionMessage);
    }
    pub fn GetCAProperty(self: *const ICertRequestD2, pwszAuthority: ?[*:0]const u16, PropId: i32, PropIndex: i32, PropType: i32, pctbPropertyValue: ?*CERTTRANSBLOB) callconv(.Inline) HRESULT {
        return self.vtable.GetCAProperty(self, pwszAuthority, PropId, PropIndex, PropType, pctbPropertyValue);
    }
    pub fn GetCAPropertyInfo(self: *const ICertRequestD2, pwszAuthority: ?[*:0]const u16, pcProperty: ?*i32, pctbPropInfo: ?*CERTTRANSBLOB) callconv(.Inline) HRESULT {
        return self.vtable.GetCAPropertyInfo(self, pwszAuthority, pcProperty, pctbPropInfo);
    }
    pub fn Ping2(self: *const ICertRequestD2, pwszAuthority: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.Ping2(self, pwszAuthority);
    }
};


//--------------------------------------------------------------------------------
// Section: Functions (26)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvIsServerOnlineW(
    pwszServerName: ?[*:0]const u16,
    pfServerOnline: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvBackupGetDynamicFileListW(
    hbc: ?*anyopaque,
    ppwszzFileList: ?*?PWSTR,
    pcbSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvBackupPrepareW(
    pwszServerName: ?[*:0]const u16,
    grbitJet: u32,
    dwBackupFlags: CSBACKUP_TYPE,
    phbc: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvBackupGetDatabaseNamesW(
    hbc: ?*anyopaque,
    ppwszzAttachmentInformation: ?*?PWSTR,
    pcbSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvBackupOpenFileW(
    hbc: ?*anyopaque,
    pwszAttachmentName: ?[*:0]const u16,
    cbReadHintSize: u32,
    pliFileSize: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvBackupRead(
    hbc: ?*anyopaque,
    pvBuffer: ?*anyopaque,
    cbBuffer: u32,
    pcbRead: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvBackupClose(
    hbc: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvBackupGetBackupLogsW(
    hbc: ?*anyopaque,
    ppwszzBackupLogFiles: ?*?PWSTR,
    pcbSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvBackupTruncateLogs(
    hbc: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvBackupEnd(
    hbc: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvBackupFree(
    pv: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvRestoreGetDatabaseLocationsW(
    hbc: ?*anyopaque,
    ppwszzDatabaseLocationList: ?*?PWSTR,
    pcbSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvRestorePrepareW(
    pwszServerName: ?[*:0]const u16,
    dwRestoreFlags: u32,
    phbc: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvRestoreRegisterW(
    hbc: ?*anyopaque,
    pwszCheckPointFilePath: ?[*:0]const u16,
    pwszLogPath: ?[*:0]const u16,
    rgrstmap: ?*CSEDB_RSTMAPW,
    crstmap: i32,
    pwszBackupLogPath: ?[*:0]const u16,
    genLow: u32,
    genHigh: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvRestoreRegisterThroughFile(
    hbc: ?*anyopaque,
    pwszCheckPointFilePath: ?[*:0]const u16,
    pwszLogPath: ?[*:0]const u16,
    rgrstmap: ?*CSEDB_RSTMAPW,
    crstmap: i32,
    pwszBackupLogPath: ?[*:0]const u16,
    genLow: u32,
    genHigh: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvRestoreRegisterComplete(
    hbc: ?*anyopaque,
    hrRestoreState: HRESULT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvRestoreEnd(
    hbc: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvServerControlW(
    pwszServerName: ?[*:0]const u16,
    dwControlFlags: u32,
    pcbOut: ?*u32,
    ppbOut: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "certpoleng" fn PstGetTrustAnchors(
    pTargetName: ?*UNICODE_STRING,
    cCriteria: u32,
    rgpCriteria: ?[*]CERT_SELECT_CRITERIA,
    ppTrustedIssuers: ?*?*SecPkgContext_IssuerListInfoEx,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "certpoleng" fn PstGetTrustAnchorsEx(
    pTargetName: ?*UNICODE_STRING,
    cCriteria: u32,
    rgpCriteria: ?[*]CERT_SELECT_CRITERIA,
    pCertContext: ?*const CERT_CONTEXT,
    ppTrustedIssuers: ?*?*SecPkgContext_IssuerListInfoEx,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "certpoleng" fn PstGetCertificateChain(
    pCert: ?*const CERT_CONTEXT,
    pTrustedIssuers: ?*SecPkgContext_IssuerListInfoEx,
    ppCertChainContext: ?*?*CERT_CHAIN_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// TODO: this type is limited to platform 'windows6.1'
pub extern "certpoleng" fn PstGetCertificates(
    pTargetName: ?*UNICODE_STRING,
    cCriteria: u32,
    rgpCriteria: ?[*]CERT_SELECT_CRITERIA,
    bIsClient: BOOL,
    pdwCertChainContextCount: ?*u32,
    ppCertChainContexts: ?*?*?*CERT_CHAIN_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// TODO: this type is limited to platform 'windows6.1'
pub extern "certpoleng" fn PstAcquirePrivateKey(
    pCert: ?*const CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// TODO: this type is limited to platform 'windows6.1'
pub extern "certpoleng" fn PstValidate(
    pTargetName: ?*UNICODE_STRING,
    bIsClient: BOOL,
    pRequestedIssuancePolicy: ?*CERT_USAGE_MATCH,
    phAdditionalCertStore: ?*?HCERTSTORE,
    pCert: ?*const CERT_CONTEXT,
    pProvGUID: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// TODO: this type is limited to platform 'windows6.1'
pub extern "certpoleng" fn PstMapCertificate(
    pCert: ?*const CERT_CONTEXT,
    pTokenInformationType: ?*LSA_TOKEN_INFORMATION_TYPE,
    ppTokenInformation: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// TODO: this type is limited to platform 'windows6.1'
pub extern "certpoleng" fn PstGetUserNameForCertificate(
    pCertContext: ?*const CERT_CONTEXT,
    UserName: ?*UNICODE_STRING,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (23)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const BOOL = @import("../../foundation.zig").BOOL;
const BSTR = @import("../../foundation.zig").BSTR;
const CERT_CHAIN_CONTEXT = @import("../../security/cryptography.zig").CERT_CHAIN_CONTEXT;
const CERT_CONTEXT = @import("../../security/cryptography.zig").CERT_CONTEXT;
const CERT_EXTENSIONS = @import("../../security/cryptography.zig").CERT_EXTENSIONS;
const CERT_RDN_ATTR_VALUE_TYPE = @import("../../security/cryptography.zig").CERT_RDN_ATTR_VALUE_TYPE;
const CERT_SELECT_CRITERIA = @import("../../security/cryptography.zig").CERT_SELECT_CRITERIA;
const CERT_USAGE_MATCH = @import("../../security/cryptography.zig").CERT_USAGE_MATCH;
const CRYPT_ATTRIBUTES = @import("../../security/cryptography.zig").CRYPT_ATTRIBUTES;
const CRYPTOAPI_BLOB = @import("../../security/cryptography.zig").CRYPTOAPI_BLOB;
const HCERTSTORE = @import("../../security/cryptography.zig").HCERTSTORE;
const HRESULT = @import("../../foundation.zig").HRESULT;
const HWND = @import("../../foundation.zig").HWND;
const IDispatch = @import("../../system/com.zig").IDispatch;
const IUnknown = @import("../../system/com.zig").IUnknown;
const LARGE_INTEGER = @import("../../foundation.zig").LARGE_INTEGER;
const LSA_TOKEN_INFORMATION_TYPE = @import("../../security/authentication/identity.zig").LSA_TOKEN_INFORMATION_TYPE;
const NTSTATUS = @import("../../foundation.zig").NTSTATUS;
const PWSTR = @import("../../foundation.zig").PWSTR;
const SecPkgContext_IssuerListInfoEx = @import("../../security/authentication/identity.zig").SecPkgContext_IssuerListInfoEx;
const UNICODE_STRING = @import("../../foundation.zig").UNICODE_STRING;
const VARIANT = @import("../../system/com.zig").VARIANT;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "FNCERTSRVISSERVERONLINEW")) { _ = FNCERTSRVISSERVERONLINEW; }
    if (@hasDecl(@This(), "FNCERTSRVBACKUPGETDYNAMICFILELISTW")) { _ = FNCERTSRVBACKUPGETDYNAMICFILELISTW; }
    if (@hasDecl(@This(), "FNCERTSRVBACKUPPREPAREW")) { _ = FNCERTSRVBACKUPPREPAREW; }
    if (@hasDecl(@This(), "FNCERTSRVBACKUPGETDATABASENAMESW")) { _ = FNCERTSRVBACKUPGETDATABASENAMESW; }
    if (@hasDecl(@This(), "FNCERTSRVBACKUPOPENFILEW")) { _ = FNCERTSRVBACKUPOPENFILEW; }
    if (@hasDecl(@This(), "FNCERTSRVBACKUPREAD")) { _ = FNCERTSRVBACKUPREAD; }
    if (@hasDecl(@This(), "FNCERTSRVBACKUPCLOSE")) { _ = FNCERTSRVBACKUPCLOSE; }
    if (@hasDecl(@This(), "FNCERTSRVBACKUPGETBACKUPLOGSW")) { _ = FNCERTSRVBACKUPGETBACKUPLOGSW; }
    if (@hasDecl(@This(), "FNCERTSRVBACKUPTRUNCATELOGS")) { _ = FNCERTSRVBACKUPTRUNCATELOGS; }
    if (@hasDecl(@This(), "FNCERTSRVBACKUPEND")) { _ = FNCERTSRVBACKUPEND; }
    if (@hasDecl(@This(), "FNCERTSRVBACKUPFREE")) { _ = FNCERTSRVBACKUPFREE; }
    if (@hasDecl(@This(), "FNCERTSRVRESTOREGETDATABASELOCATIONSW")) { _ = FNCERTSRVRESTOREGETDATABASELOCATIONSW; }
    if (@hasDecl(@This(), "FNCERTSRVRESTOREPREPAREW")) { _ = FNCERTSRVRESTOREPREPAREW; }
    if (@hasDecl(@This(), "FNCERTSRVRESTOREREGISTERW")) { _ = FNCERTSRVRESTOREREGISTERW; }
    if (@hasDecl(@This(), "FNCERTSRVRESTOREREGISTERCOMPLETE")) { _ = FNCERTSRVRESTOREREGISTERCOMPLETE; }
    if (@hasDecl(@This(), "FNCERTSRVRESTOREEND")) { _ = FNCERTSRVRESTOREEND; }
    if (@hasDecl(@This(), "FNCERTSRVSERVERCONTROLW")) { _ = FNCERTSRVSERVERCONTROLW; }
    if (@hasDecl(@This(), "FNIMPORTPFXTOPROVIDER")) { _ = FNIMPORTPFXTOPROVIDER; }
    if (@hasDecl(@This(), "FNIMPORTPFXTOPROVIDERFREEDATA")) { _ = FNIMPORTPFXTOPROVIDERFREEDATA; }

    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
